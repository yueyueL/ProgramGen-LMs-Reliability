private static void decreasePendingResources ( org.ovirt.engine.core.compat.Guid vdsId , int numOfCpus , int minAllocatedMem , java.lang.String vmName ) { org.ovirt.engine.core.bll.VmHandler.getVdsDynamicDao ( ) . updatePartialVdsDynamicCalc ( vdsId , 0 , ( - numOfCpus ) , ( - minAllocatedMem ) , 0 , 0 ) ; org.ovirt.engine.core.bll.VmHandler.log.debug ( "Decreasing vds '{}' pending vcpu count by {} and vmem size by {} (Vm '{}')" , vdsId , numOfCpus , minAllocatedMem , vmName ) ; }
public void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private static org.ovirt.engine.core.common.businessentities.VM createVM ( java.lang.String vmName , java.lang.String networkName , boolean pluggedInterface ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; vm.setName ( vmName ) ; org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmIface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewViewableInterface ( pluggedInterface ) ; vmIface.setVmId ( vm.getId ( ) ) ; vmIface.setNetworkName ( networkName ) ; vm.getInterfaces ( ) . add ( vmIface ) ; return vm ; }
private void setSelectedOSTypeById ( int osId ) { for ( java.lang.Integer osIdList : getModel ( ) . getOSType ( ) . getItems ( ) ) { if ( ( osIdList.intValue ( ) ) == osId ) { getModel ( ) . getOSType ( ) . setSelectedItem ( osIdList ) ; break ; } } }
private void setUpDaoMocks ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacadeMock = getDbFacadeMockInstance ( ) ; snapshotDaoMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.SnapshotDao.class ) ; org.mockito.Mockito.when ( dbFacadeMock.getSnapshotDao ( ) ) . thenReturn ( snapshotDaoMock ) ; org.mockito.Mockito.when ( snapshotDaoMock.getAll ( vmId , getUser ( ) . getId ( ) , getQueryParameters ( ) . isFiltered ( ) ) ) . thenReturn ( java.util.Arrays.asList ( snapshot ) ) ; }
private boolean changesAreClusterCompatible ( ) { if ( ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getParameters ( ) . getNetwork ( ) . isVmNetwork ( ) ) == false ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ) ) { addCanDoActionMessage ( VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL ) ; return false ; } } return true ; }
public void testList ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setUpGetEntityExpectations ( QueryType.GetAnyDbUserByUserId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , getUserByIdx ( 1 ) , true ) ; setUpQueryExpectations ( "" ) ; collection.setUriInfo ( uriInfo ) ; verifyCollection ( getCollection ( ) ) ; }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void canDoActionSucceedsWhenHasPeersThrowsException ( ) throws java.lang.Exception { setupGlusterMock ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( glusterUtil.getPeers ( org.mockito.Matchers.any ( org.ovirt.engine.core.bll.utils.EngineSSHClient.class ) ) ) . thenThrow ( new java.lang.RuntimeException ( ) ) ; org.junit.Assert.assertTrue ( commandMock.canDoAction ( ) ) ; }
public void getSpiceUsbAutoShare ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void testUpdateDnsResolverConfiguration ( ) { org.ovirt.engine.core.common.businessentities.VdsDynamic before = dao.get ( getExistingEntityId ( ) ) ; before.getReportedDnsResolverConfiguration ( ) . setNameServers ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.network.NameServer ( "1.1.1.1" ) ) ) ; dao.updateDnsResolverConfiguration ( before.getId ( ) , before.getReportedDnsResolverConfiguration ( ) ) ; org.ovirt.engine.core.common.businessentities.VdsDynamic after = dao.get ( getExistingEntityId ( ) ) ; org.junit.Assert.assertEquals ( before.getReportedDnsResolverConfiguration ( ) , after.getReportedDnsResolverConfiguration ( ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetNetworkLabelsByHostNicId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicLabelsResourceTest.nicId } , getEntityList ( ) , failure ) ; }
public void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public org.ovirt.engine.sdk.decorators.Host update ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.Host.class , org.ovirt.engine.sdk.decorators.Host.class , headers ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.DataCenter dataCenter ) { validateParameters ( dataCenter , "name" , "storageType" ) ; validateEnums ( org.ovirt.engine.api.model.DataCenter.class , dataCenter ) ; validateEnum ( org.ovirt.engine.api.model.StorageType.class , dataCenter.getStorageType ( ) . toUpperCase ( ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool entity = map ( dataCenter ) ; return performCreate ( VdcActionType.AddEmptyStoragePool , new org.ovirt.engine.core.common.action.StoragePoolManagementParameter ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStoragePoolById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
protected void endWithFailure ( ) { org.ovirt.engine.core.bll.HibernateVmCommand.endActionOnDisks ( ) ; org.ovirt.engine.core.bll.HibernateVmCommand.revertTasks ( ) ; if ( ( org.ovirt.engine.core.bll.HibernateVmCommand.getVm ( ) . getRunOnVds ( ) ) != null ) { org.ovirt.engine.core.bll.HibernateVmCommand.getSnapshotDao ( ) . removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.HibernateVmCommand.getVmId ( ) ) ; org.ovirt.engine.core.bll.HibernateVmCommand.setSucceeded ( true ) ; } else { org.ovirt.engine.core.bll.HibernateVmCommand.log.warn ( "VM '{}' doesn't have 'run_on_vds' value - not clearing 'hibernation_vol_handle' info." , org.ovirt.engine.core.bll.HibernateVmCommand.getVm ( ) . getName ( ) ) ; org.ovirt.engine.core.bll.HibernateVmCommand.getReturnValue ( ) . setEndActionTryAgain ( false ) ; } }
public void tearDown ( ) throws java.lang.Exception { org.mockito.Mockito.verify ( mockEventBus , org.mockito.Mockito.atLeastOnce ( ) ) . fireEvent ( new org.ovirt.engine.ui.frontend.communication.AsyncOperationStartedEvent ( mockAsyncQuery.getModel ( ) ) ) ; org.mockito.Mockito.verify ( mockEventBus , org.mockito.Mockito.never ( ) ) . fireEvent ( new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent ( mockAsyncQuery.getModel ( ) , true , true ) ) ; org.mockito.Mockito.verify ( mockEventBus , org.mockito.Mockito.never ( ) ) . fireEvent ( new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent ( mockAsyncQuery.getModel ( ) , true , false ) ) ; }
protected org.ovirt.engine.core.compat.Guid getDiskId ( ) { return getCommand ( ) . getParameters ( ) . getRemovedVolume ( ) . getImageId ( ) ; }
public void testRefreshStatus ( ) { org.mockito.Mockito.doReturn ( getSessionDetailsVDSReturnVal ( true ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionStatus ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters.class ) ) ; syncJob.refreshGeoRepSessionStatus ( ) ; org.mockito.Mockito.verify ( geoRepDao , org.mockito.Mockito.times ( 2 ) ) . saveOrUpdateDetailsInBatch ( org.mockito.Matchers.any ( java.util.List.class ) ) ; }
private void auditLogForNoMetadataDescriptionUpdate ( org.ovirt.engine.core.common.AuditLogType auditLogType , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; auditLogableBase.addCustomValue ( "DataCenterName" , org.ovirt.engine.core.bll.UpdateVmDiskCommand.getStoragePool ( ) . getName ( ) ) ; auditLogableBase.addCustomValue ( "StorageDomainName" , storageDomain.getName ( ) ) ; auditLogableBase.addCustomValue ( "DiskName" , diskImage.getDiskAlias ( ) ) ; new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector ( ) . log ( auditLogableBase , auditLogType ) ; }
private static void flatGroups ( org.ovirt.engine.api.extensions.ExtMap entity , org.ovirt.engine.api.extensions.ExtKey key , java.util.Map < java.lang.String , org.ovirt.engine.api.extensions.ExtMap > accumulator ) { for ( org.ovirt.engine.api.extensions.ExtMap group : entity.< java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > > get ( key , java.util.Collections.< org.ovirt.engine.api.extensions.ExtMap > emptyList ( ) ) ) { if ( ! ( accumulator.containsKey ( group.< java.lang.String > get ( GroupRecord.ID ) ) ) ) { accumulator.put ( group.< java.lang.String > get ( GroupRecord.ID ) , group ) ; org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups ( group , GroupRecord.GROUPS , accumulator ) ; } } }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateAttachmentNotReferenceVlanDevice ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = existingInterfacesMap.get ( attachment.getNicName ( ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ATTACHMENT_REFERENCE_VLAN_DEVICE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "ATTACHMENT_REFERENCE_VLAN_DEVICE_ENTITY" , attachment.getNetworkName ( ) ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "nicName" , attachment.getNicName ( ) ) ) . when ( ( ( nic != null ) && ( org.ovirt.engine.core.utils.NetworkUtils.isVlan ( nic ) ) ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.validator.HostValidator validator = org.ovirt.engine.core.bll.validator.HostValidator.createInstance ( org.ovirt.engine.core.bll.ActivateVdsCommand.getVds ( ) ) ; return ( ( validate ( validator.hostExists ( ) ) ) && ( validate ( validator.validateStatusForActivation ( ) ) ) ) && ( validate ( validator.validateUniqueId ( ) ) ) ; }
private boolean bondWasModified ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface existingIface = getExistingIfaces ( ) . get ( iface.getName ( ) ) ; if ( existingIface == null ) { return true ; } return ! ( org.apache.commons.lang.ObjectUtils.equals ( iface.getBondOptions ( ) , existingIface.getBondOptions ( ) ) ) ; }
private void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateCluster , org.ovirt.engine.core.common.action.ClusterOperationParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void vmIdRefNullVm ( ) { b.setVmId ( null ) ; final org.ovirt.engine.core.common.businessentities.VM v = new org.ovirt.engine.core.common.businessentities.VM ( ) ; v.setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setVm ( v ) ; final org.ovirt.engine.core.compat.Guid g = b.getVmIdRef ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; }
public void testCleanNotExpiredUsersSessionsWithUsers ( ) { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER , false ) ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.getUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , false ) ) ; org.mockito.Mockito.verifyZeroInteractions ( dbUserDAOMcok ) ; }
public javax.ws.rs.core.Response copy ( org.ovirt.engine.api.model.Action action ) { validateParameters ( action , "storageDomain.id|name" ) ; org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId ( action ) ; org.ovirt.engine.api.model.Disk disk = getDisk ( ) ; org.ovirt.engine.core.compat.Guid imageId = asGuid ( disk.getImageId ( ) ) ; org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters params = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters ( imageId , org.ovirt.engine.core.compat.Guid.Empty , storageDomainId , org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy ) ; params.setImageGroupID ( asGuid ( disk.getId ( ) ) ) ; return doAction ( ActionType.MoveOrCopyDisk , params , action ) ; }
public static void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
private java.lang.Boolean getMigrateCompressed ( ) { if ( org.ovirt.engine.core.common.FeatureSupported.migrationCompression ( org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getCompatibilityVersion ( ) ) ) { if ( ( org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getMigrateCompressed ( ) ) != null ) { return org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getMigrateCompressed ( ) ; } if ( ( org.ovirt.engine.core.bll.MigrateVmCommand.getCluster ( ) . getMigrateCompressed ( ) ) != null ) { return org.ovirt.engine.core.bll.MigrateVmCommand.getCluster ( ) . getMigrateCompressed ( ) ; } return org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.DefaultMigrationCompression ) ; } return null ; }
public void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public void setUp ( ) throws java.lang.Exception { effectiveHostNetworkQos = new org.ovirt.engine.core.vdsbroker.EffectiveHostNetworkQos ( qosDao ) ; injectorRule.bind ( org.ovirt.engine.core.dao.network.NetworkDao.class , networkDao ) ; injectorRule.bind ( org.ovirt.engine.core.dao.network.NetworkAttachmentDao.class , networkAttachmentDao ) ; injectorRule.bind ( org.ovirt.engine.core.dao.network.InterfaceDao.class , interfaceDao ) ; injectorRule.bind ( org.ovirt.engine.core.dao.gluster.GlusterBrickDao.class , brickDao ) ; injectorRule.bind ( org.ovirt.engine.core.vdsbroker.EffectiveHostNetworkQos.class , effectiveHostNetworkQos ) ; injectorRule.bind ( org.ovirt.engine.core.vdsbroker.NetworkImplementationDetailsUtils.class , new org.ovirt.engine.core.vdsbroker.NetworkImplementationDetailsUtils ( effectiveHostNetworkQos , networkAttachmentDao , calculateBaseNic ) ) ; injectorRule.bind ( org.ovirt.engine.core.vdsbroker.CalculateBaseNic.class , calculateBaseNic ) ; }
protected void setUpGetPayloadExpectations ( int times ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload ( ) ; for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVmPayload , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ i ] } , payload ) ; } }
public void testMigratoinCanBeSetWhenVMUsesScsiReservation ( ) { prepareVmToPassValidate ( ) ; vm.setMigrationSupport ( MigrationSupport.MIGRATABLE ) ; org.ovirt.engine.core.common.businessentities.VmDevice device = createVmDevice ( ) ; device.setUsingScsiReservation ( false ) ; mockVmDevice ( device ) ; mockVmValidator ( ) ; command.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
protected void executeCommand ( ) { if ( org.ovirt.engine.core.bll.VmTemplateHandler.isTemplateStatusIsNotLocked ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId ( ) ) ) { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId ( ) , org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getCompensationContext ( ) ) ; if ( ! ( getTemplateDisks ( ) . isEmpty ( ) ) ) { moveOrCopyAllImageGroups ( ) ; } else { endVmTemplateRelatedOps ( ) ; } org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setSucceeded ( true ) ; } }
private void resetTabsValidity ( ) { setValidTab ( TabName.HOST_TAB , true ) ; setIsCustomPropertiesTabAvailable ( true ) ; setValidTab ( TabName.TAB_RNG , true ) ; setValidTab ( TabName.CUSTOM_PROPERTIES_TAB , true ) ; setValidTab ( TabName.BOOT_OPTIONS_TAB , true ) ; setValidTab ( TabName.RESOURCE_ALLOCATION_TAB , true ) ; setValidTab ( TabName.CONSOLE_TAB , true ) ; setValidTab ( TabName.INITIAL_RUN_TAB , true ) ; setValidTab ( TabName.GENERAL_TAB , true ) ; setValidTab ( TabName.ICON_TAB , true ) ; getValid ( ) . setEntity ( true ) ; }
public void testStorageLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.HostStorage storage = new org.ovirt.engine.api.model.HostStorage ( ) ; storage.setId ( org.ovirt.engine.api.common.util.LinkHelperTest.STORAGE_ID ) ; storage.setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; storage.getHost ( ) . setId ( org.ovirt.engine.api.common.util.LinkHelperTest.HOST_ID ) ; org.ovirt.engine.api.utils.LinkHelper.addLinks ( setUpUriExpectations ( ) , storage ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.STORAGE_HREF , storage.getHref ( ) ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.HOST_HREF , storage.getHost ( ) . getHref ( ) ) ; }
public void setSwapTotal ( java.lang.Long value ) { if ( ( ( swapTotal ) == null ) && ( value == null ) ) { return ; } if ( ( ( swapTotal ) == null ) || ( ! ( swapTotal.equals ( value ) ) ) ) { swapTotal = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SwapTotal" ) ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageDomainDynamicDao ( ) ; staticDao = dbFacade.getStorageDomainStaticDao ( ) ; existingDynamic = dao.get ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.EXISTING_DOMAIN_ID ) ; newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic ( ) ; newStaticDomain.setStorage ( "fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl" ) ; newStaticDomain.setStorageFormat ( StorageFormatType.V1 ) ; newDynamicDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic ( ) ; newDynamicDomain.setAvailableDiskSize ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.USED_DISK_SIZE ) ; }
protected void executeNetworkCommand ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op2 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel , java.lang.Object ... params ) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToDetach = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ) ( op1 ) ) ; assert networkToDetach.isAttached ( ) ; org.ovirt.engine.core.compat.Guid networkId = networkToDetach.getNetwork ( ) . getId ( ) ; assert networkId == null ; dataFromHostSetupNetworksModel.getRemovedUnmanagedNetworks ( ) . add ( networkToDetach.getNetwork ( ) . getName ( ) ) ; }
void addStyles ( ) { linuxBootOptionsPanel.setVisible ( false ) ; initialRunPanel.setVisible ( false ) ; systemPanel.setVisible ( true ) ; hostPanel.setVisible ( true ) ; attachFloppyEditor.addContentWidgetStyleName ( style.attachImageCheckBoxLabel ( ) ) ; attachIsoEditor.addContentWidgetStyleName ( style.attachImageCheckBoxLabel ( ) ) ; floppyImageEditor.addLabelStyleName ( style.attachImageSelectBoxLabel ( ) ) ; isoImageEditor.addLabelStyleName ( style.attachImageSelectBoxLabel ( ) ) ; floppyImageEditor.addContentWidgetStyleName ( style.attachImageSelectbox ( ) ) ; isoImageEditor.addContentWidgetStyleName ( style.attachImageSelectbox ( ) ) ; }
public java.lang.String getDisplayStringNullSafe ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity data ) { return templates.typeAheadNameDescription ( ( ( data.getName ( ) ) == null ? constants.empty ( ) : data.getName ( ) ) , ( ( data.getClusterName ( ) ) == null ? constants.empty ( ) : data.getClusterName ( ) ) ) . asString ( ) ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.bll.context.CommandContext cmdContext , boolean enableCallBack ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParentParameters ( parentCommand ) ; javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity ( getCommandId ( ) , parentParameters.getCommandId ( ) , getActionType ( ) , getParameters ( ) , commandStatus , enableCallBack , getReturnValue ( ) ) , cmdContext ) ; } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { setEnumTitle ( diskImage.getimageStatus ( ) ) ; switch ( diskImage.getimageStatus ( ) ) { case OK : return getCommonResources ( ) . upImage ( ) ; case LOCKED : return getCommonResources ( ) . waitImage ( ) ; case ILLEGAL : return getCommonResources ( ) . logErrorImage ( ) ; default : return null ; } }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) { org.junit.jupiter.api.Assertions.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetAllTags , org.ovirt.engine.core.common.queries.QueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.setUpTags ( ) , failure ) ; if ( failure == null ) { setUpEntityQueryExpectations ( QueryType.GetRootTag , org.ovirt.engine.core.common.queries.QueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.setUpRootTag ( ) ) ; } }
protected void executeCommand ( ) { if ( ( org.ovirt.engine.core.bll.InstallVdsCommand.getVds ( ) ) == null ) { return ; } vdsInitialStatus = org.ovirt.engine.core.bll.InstallVdsCommand.getVds ( ) . getStatus ( ) ; if ( isOvirtReInstallOrUpgrade ( ) ) { upgradeNode ( ) ; } else { installHost ( ) ; } }
private void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( 0 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateBookmark , org.ovirt.engine.core.common.action.BookmarksOperationParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendBookmarksResourceTest.getModel ( 0 ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected org.ovirt.engine.api.model.VM deprecatedPopulate ( org.ovirt.engine.api.model.VM model , org.ovirt.engine.api.model.VM entity ) { java.util.Set < org.ovirt.engine.api.common.util.DetailHelper.Detail > details = org.ovirt.engine.api.common.util.DetailHelper.getDetails ( getHttpHeaders ( ) ) ; parent.addInlineDetails ( details , model ) ; addStatistics ( model , entity , uriInfo , httpHeaders ) ; parent.setPayload ( model ) ; parent.setBallooning ( model ) ; parent.setCertificateInfo ( model ) ; return model ; }
private boolean perform ( ) { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters ( ) . setStartTime ( new java.util.Date ( ) ) ; try { if ( ( connectLunDisks ( getDestinationVdsId ( ) ) ) && ( migrateVm ( ) ) ) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob ( org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext ( ) , true ) ; return true ; } } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { } org.ovirt.engine.core.bll.MigrateVmCommand.runningFailed ( ) ; return false ; }
private void updateDefaultNetworkFilterIfRequired ( ) { if ( org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters ( ) . isUseDefaultNetworkFiterId ( ) ) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter ( networkFilterDao ) ; if ( networkFilter != null ) { final org.ovirt.engine.core.compat.Guid networkFilterId = networkFilter.getId ( ) ; setNetworkFilterId ( networkFilterId ) ; } } }
private void onRemove ( ) { java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameterList = new java.util.LinkedList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Provider provider : providers ) { parameterList.add ( new org.ovirt.engine.core.common.action.ProviderParameters ( provider ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleActions ( VdcActionType.RemoveProvider , parameterList , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { sourceListModel.getSearchCommand ( ) . execute ( ) ; } } ) ; cancel ( ) ; }
public void testGetTagVdsMapByTagName ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.TagsVdsMap > result = dao.getTagVdsMapByTagName ( existingTag.gettag_name ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.TagsVdsMap mapping : result ) { org.junit.Assert.assertEquals ( existingTag.gettag_id ( ) , mapping.gettag_id ( ) ) ; } }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.GlusterVolume volume ) { validateParameters ( volume , "name" , "volumeType" , "bricks" ) ; validateEnumParameters ( volume ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getMapper ( org.ovirt.engine.api.model.GlusterVolume.class , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity.class ) . map ( volume , null ) ; volumeEntity.setClusterId ( asGuid ( parent.get ( ) . getId ( ) ) ) ; mapBricks ( volume , volumeEntity ) ; return performCreation ( VdcActionType.CreateGlusterVolume , new org.ovirt.engine.core.common.action.gluster.CreateGlusterVolumeParameters ( volumeEntity ) , new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterVolumeById , org.ovirt.engine.core.common.queries.gluster.IdQueryParameters.class ) , true ) ; }
public void checkMissingIpv6AddressDetailsBootProtocolStatic ( ) { final boolean initAddress = random.nextBoolean ( ) ; initIpv6ConfigurationDetails ( Ipv6BootProtocol.STATIC_IP , initAddress , ( ! initAddress ) ) ; org.junit.Assert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_IP_CONFIGURATION_STATIC_BOOT_PROTOCOL_MISSING_IP_ADDRESS_DETAILS , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_NETWORK_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.NETWORK_NAME ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_INTERFACE_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.INTERFACE_NAME ) ) ) ; }
private java.util.Locale lookupSupportedLocale ( final java.util.Locale filteredLocale , final java.util.List < java.lang.String > supportedLocales ) { for ( java.lang.String supportedLocale : supportedLocales ) { java.util.Locale locale = org.ovirt.engine.core.utils.LocaleUtils.getLocaleFromString ( supportedLocale ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < java.util.Locale > localeLookupList = org.apache.commons.lang.LocaleUtils.localeLookupList ( locale ) ; for ( java.util.Locale lookupLocale : localeLookupList ) { if ( lookupLocale.equals ( filteredLocale ) ) { return locale ; } } } return org.ovirt.engine.core.utils.servlet.LocaleFilter.DEFAULT_LOCALE ; }
public void testUpdateLUNs ( ) { dao.update ( existingLUN ) ; org.ovirt.engine.core.common.businessentities.LUNs result = dao.get ( existingLUN.getLUN_id ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingLUN , result ) ; }
public static org.ovirt.engine.api.model.BootProtocol map ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol , org.ovirt.engine.api.model.BootProtocol template ) { if ( networkBootProtocol != null ) { switch ( networkBootProtocol ) { case DHCP : return org.ovirt.engine.api.model.BootProtocol.DHCP ; case STATIC_IP : return org.ovirt.engine.api.model.BootProtocol.STATIC ; case NONE : return org.ovirt.engine.api.model.BootProtocol.NONE ; default : return null ; } } return null ; }
private void setUpGetBallooningExpectations ( int times ) throws java.lang.Exception { for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ i ] } , true ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { discoverHostName_SelectedItemChanged ( ) ; }
protected boolean validate ( ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported.isIscsiMultipathingSupported ( org.ovirt.engine.core.bll.storage.connection.iscsibond.AddIscsiBondCommand.getStoragePool ( ) . getCompatibilityVersion ( ) ) ) ) { return failValidation ( EngineMessage.ISCSI_BOND_NOT_SUPPORTED ) ; } org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator ( ) ; return ( ( validate ( validator.iscsiBondWithTheSameNameExistInDataCenter ( getIscsiBond ( ) ) ) ) && ( validate ( validator.validateAddedLogicalNetworks ( getIscsiBond ( ) ) ) ) ) && ( validate ( validator.validateAddedStorageConnections ( getIscsiBond ( ) ) ) ) ; }
public void testExecuteCommand ( ) { setVolumeId ( volumeWithRemoveBricksTask ) ; mockBackend ( true , null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.times ( 1 ) ) . endStepJobAborted ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.times ( 1 ) ) . releaseVolumeLock ( ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP , cmd.getAuditLogTypeValue ( ) ) ; }
public void testRemoveForced ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.RemoveDisk , org.ovirt.engine.core.common.action.RemoveDiskParameters.class , new java.lang.String [ ] { "DiskId" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendTemplateDiskResource.FORCE , java.lang.Boolean.TRUE.toString ( ) ) ; setUriInfo ( uriInfo ) ; control.replay ( ) ; verifyRemove ( resource.remove ( ) ) ; }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.Role > > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void syncSearch ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.QosQueryParameterBase ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getEntity ( ) . getId ( ) , getQosType ( ) ) ; parameters.setRefresh ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( QueryType.GetAllQosByStoragePoolIdAndType , parameters , new org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.SetItemsAsyncQuery ( ) ) ; }
public void validateNotEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithoutSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
public void execute ( ) { java.util.List < org.ovirt.engine.core.utils.SyncronizeNumberOfAsyncOperations.AsyncOpThread > operations = new java.util.ArrayList < org.ovirt.engine.core.utils.SyncronizeNumberOfAsyncOperations.AsyncOpThread > ( ) ; for ( int i = 0 ; i < ( _numberOfOperations ) ; i ++ ) { operations.add ( new org.ovirt.engine.core.utils.SyncronizeNumberOfAsyncOperations.AsyncOpThread ( i ) ) ; } if ( ( _numberOfOperations ) > 0 ) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll ( operations ) ; } }
public void testQueryFailsIfWrongPassword ( ) { mockQueryParameters ( org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.NEW_SERVER , org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.WRONG_PASSWORD ) ; expectedException.expectMessage ( EngineMessage.SSH_AUTHENTICATION_FAILED.toString ( ) ) ; getQuery ( ) . executeQueryCommand ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotDeleteAll ( java.lang.String volumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterVolumeSnapshotDeleteAll ( volumeName ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testFetchNotExistingRepoFileListById ( ) { org.ovirt.engine.core.compat.Guid falseGuid = new org.ovirt.engine.core.compat.Guid ( "11111111-1111-1111-1111-111111111111" ) ; java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain ( falseGuid , ImageType.ISO ) ; org.junit.Assert.assertNotNull ( listOfRepoFiles ) ; org.junit.Assert.assertSame ( true , listOfRepoFiles.isEmpty ( ) ) ; }
public void getVmList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String poolName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: pool=" + poolName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters : org.ovirt.engine.core.bll.MoveDisksCommand.getParameters ( ) . getParametersList ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImageDao ( ) . get ( parameters.getImageId ( ) ) ; if ( diskImage != null ) { permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( diskImage.getId ( ) , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE ) ) ; } } return permissionList ; }
public org.ovirt.engine.api.model.Network update ( org.ovirt.engine.api.model.Network incoming ) { validateEnums ( org.ovirt.engine.api.model.Network.class , incoming ) ; org.ovirt.engine.api.model.Network network = map ( incoming , map ( get ( ) ) ) ; network.getCluster ( ) . setnetwork_id ( network.getId ( ) ) ; network.getCluster ( ) . setcluster_id ( cluster.getVDSGroup ( ) . getId ( ) ) ; performAction ( VdcActionType.UpdateNetworkOnCluster , new org.ovirt.engine.core.common.action.NetworkClusterParameters ( network.getCluster ( ) ) ) ; return get ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkBelongsToClusterDataCenter ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.core.common.businessentities.network.Network network ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_NETWORK_FROM_DIFFERENT_DC , java.lang.String.format ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT , network.getName ( ) ) ) . unless ( cluster.getStoragePoolId ( ) . equals ( network.getDataCenterId ( ) ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Erratum > getErrataForHost ( java.lang.String hostName ) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHost contentHost = findContentHost ( hostName ) ; if ( contentHost == null ) { log.error ( "Failed to find host on provider '{}' by host name '{}' " , getProvider ( ) . getName ( ) , hostName ) ; return java.util.Collections.emptyList ( ) ; } return runErrataListMethod ( java.lang.String.format ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.CONTENT_HOST_ERRATA_ENTRY_POINT , contentHost.getUuid ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDeviceForDisk ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.storage.Disk disk , org.ovirt.engine.core.compat.Guid snapshotId , boolean isPlugged ) { org.ovirt.engine.core.common.businessentities.VmDevice device = new org.ovirt.engine.core.common.businessentities.VmDevice ( ) ; device.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( vm.getId ( ) , disk.getId ( ) ) ) ; device.setSnapshotId ( snapshotId ) ; device.setPlugged ( isPlugged ) ; return device ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo > fetchServers ( org.ovirt.engine.core.common.businessentities.VDS upServer , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > existingServers ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo > fetchedServers = null ; while ( ( fetchedServers == null ) && ( ! ( existingServers.isEmpty ( ) ) ) ) { fetchedServers = fetchServers ( upServer ) ; if ( fetchedServers == null ) { logUtil.logServerMessage ( upServer , AuditLogType.GLUSTER_SERVERS_LIST_FAILED ) ; setNonOperational ( upServer ) ; existingServers.remove ( upServer ) ; upServer = getNewUpServer ( existingServers , upServer ) ; } } return fetchedServers ; }
private void updateDiskImagesToIllegal ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > snapshotDisks = org.ovirt.engine.core.bll.RemoveAllVmImagesCommand.getDbFacade ( ) . getDiskImageDao ( ) . getAllSnapshotsForImageGroup ( diskImage.getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskSnapshot : snapshotDisks ) { diskSnapshot.setvm_snapshot_id ( null ) ; diskSnapshot.setImageStatus ( ImageStatus.ILLEGAL ) ; org.ovirt.engine.core.bll.RemoveAllVmImagesCommand.getDbFacade ( ) . getImageDao ( ) . update ( diskSnapshot.getImage ( ) ) ; } }
public void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public synchronized org.ovirt.engine.api.model.Rsdl getRSDL ( ) throws java.io.IOException , java.lang.ClassNotFoundException { java.lang.String version = getCurrent ( ) . getVersion ( ) ; org.ovirt.engine.api.model.Rsdl rsdl = rsdlByApiVersion.get ( version ) ; if ( rsdl == null ) { rsdl = org.ovirt.engine.api.rsdl.RsdlManager.loadRsdl ( version , getCurrent ( ) . getApplicationMode ( ) , getUriInfo ( ) . getBaseUri ( ) . getPath ( ) ) ; rsdlByApiVersion.put ( version , rsdl ) ; } return rsdl ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { viewFilterType.executeQuery ( getEntity ( ) . getId ( ) , new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery ( ) ) ; } else { setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ) ; } startGridTimer ( ) ; }
public void testCanDoActionNonExistingStorageDomain ( ) { org.junit.Assert.assertFalse ( "canDoActtion shouldn't be possible for a non-existant storage domain" , command.canDoAction ( ) ) ; org.ovirt.engine.core.bll.CommandAssertUtils.checkMessages ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; }
private void networkNameAvailableTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks ) { this . networks.addAll ( networks ) ; org.mockito.Mockito.when ( network.getName ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME ) ; org.mockito.Mockito.when ( network.getId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ; org.junit.Assert.assertThat ( validator.networkNameNotUsed ( ) , matcher ) ; }
public void computeVmStart ( java.lang.String cluster , java.lang.String uuid ) { org.ovirt.optimizer.service.ClusterOptimizer clusterOptimizer ; synchronized ( clusterOptimizers ) { clusterOptimizer = clusterOptimizers.get ( cluster ) ; } if ( clusterOptimizer == null ) { log.error ( java.lang.String.format ( "Cluster %s does not exist" , cluster ) ) ; return ; } clusterOptimizer.ensureVmIsRunning ( uuid ) ; }
private void updateLabelOnNicInstances ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics ) { for ( org.ovirt.engine.core.common.businessentities.network.NicLabel addedLabel : addedLabels ) { if ( ( addedLabel.getNicId ( ) ) == null ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allNics ) { if ( nic.getName ( ) . equals ( addedLabel.getNicName ( ) ) ) { addedLabel.setNicId ( nic.getId ( ) ) ; break ; } } if ( ( addedLabel.getNicId ( ) ) == null ) { throw new java.lang.IllegalStateException ( "Unable to find requested nic." ) ; } } } }
protected boolean validateStorageDomains ( ) { org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator storageDomainsValidator = getStorageDomainsValidator ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getStoragePoolId ( ) , getStorageDomainsIds ( ) ) ; return ( ( validate ( storageDomainsValidator.allDomainsExistAndActive ( ) ) ) && ( validate ( storageDomainsValidator.allDomainsWithinThresholds ( ) ) ) ) && ( validate ( storageDomainsValidator.allDomainsHaveSpaceForClonedDisks ( getSourceImages ( ) ) ) ) ; }
public static void getDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void fireAsyncActionFailedEvent ( java.lang.Object target ) { org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire ( this , target , true , false ) ; }
public static java.lang.String getHostIp ( org.ovirt.engine.core.common.businessentities.VDS host ) { try { final java.net.InetAddress address = java.net.InetAddress.getByName ( host.getHostName ( ) ) ; return address.getHostAddress ( ) . trim ( ) ; } catch ( java.net.UnknownHostException ex ) { final java.lang.String msg = "Failed to resolve host ip by name '{}'" ; org.ovirt.engine.core.utils.NetworkUtils.log.warn ( msg , " Details: '{}' " , host.getHostName ( ) , ex.getCause ( ) ) ; org.ovirt.engine.core.utils.NetworkUtils.log.debug ( msg , host.getHostName ( ) , ex ) ; return null ; } }
protected java.lang.String transform ( java.util.ArrayList < java.lang.String > fileNameList , org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage ) { return repoImage.getRepoImageId ( ) ; }
public void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.VmTemplate > aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
public void onSucceeded ( ) { updateEntityPhase ( ImageTransferPhase.FINISHED_SUCCESS ) ; log.debug ( "Removing ImageUpload id {}" , org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId ( ) ) ; imageTransferDao.remove ( org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endSuccessfully ( ) ; log.info ( "Successfully uploaded {} (command id '{}')" , getUploadDescription ( ) , org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId ( ) ) ; }
private static void initSuspendSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.suspendSupport = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetSuspendSupport ) , callback ) ; }
public void canUpdateNumaPinning ( ) { paramNumaNodes.clear ( ) ; paramNumaNodes.add ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 1 , vdsNumaNodes ) ) ; mockCommandWithVmFromParams ( ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( vmNumaNodeDao ) . massUpdateNumaNode ( org.mockito.ArgumentMatchers.eq ( paramNumaNodes ) ) ; }
private void onSaveSanStorage ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow ( ) ) ) ; if ( ( confirmationModel != null ) && ( ! ( confirmationModel.validate ( ) ) ) ) { return ; } cancelConfirm ( ) ; getWindow ( ) . startProgress ( null ) ; org.ovirt.engine.ui.uicompat.Task.Create ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays.asList ( new java.lang.Object [ ] { "SaveSan" } ) ) ) . Run ( ) ; }
public void passDiscardNotSupportedForDestSd ( ) { diskToDiskVmElements.put ( diskWithTwoVmElements , java.util.Arrays.asList ( diskVmElement2 , diskVmElement3 ) ) ; initMultipleDiskVmElementValidator ( ) ; mockDiskVmElementValidatorPassDiscardValidation ( diskWithTwoVmElements , diskVmElement2 , ValidationResult.VALID ) ; mockDiskVmElementValidatorPassDiscardValidation ( diskWithTwoVmElements , diskVmElement3 , getPassDiscardNotSupportedByDiskInterfaceValResult ( diskWithTwoVmElements ) ) ; org.hamcrest.MatcherAssert.assertThat ( multipleDiskVmElementValidator.isPassDiscardSupportedForDestSd ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( getPassDiscardNotSupportedByDiskInterfaceValResult ( diskWithTwoVmElements ) ) ) ; }
static org.ovirt.engine.core.common.businessentities.network.BondMode parseBondMode ( java.lang.String bondOptions ) { return bondOptions == null ? null : org.ovirt.engine.core.common.businessentities.network.BondMode.getBondMode ( org.ovirt.engine.core.common.businessentities.network.BondMode.findMode ( bondOptions ) ) ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage getRelevantDiskImage ( ) { return org.ovirt.engine.core.bll.BaseImagesCommand.getParameters ( ) . isImportEntity ( ) ? getDestinationDiskImage ( ) : getDiskImage ( ) ; }
public void testAddVmsForExistingAffinityGroup ( ) { org.ovirt.engine.core.common.scheduling.AffinityGroup existing = dao.get ( FixturesTool.EXISTING_AFFINITY_GROUP_ID ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.AffinityGroupDaoTest.NUM_OF_VMS_IN_EXISTING_AFFINITY_GROUP , existing.getVmEntityNames ( ) . size ( ) ) ; existing.getVmIds ( ) . add ( FixturesTool.VM_RHEL5_POOL_51 ) ; dao.update ( existing ) ; org.ovirt.engine.core.common.scheduling.AffinityGroup fetched = dao.get ( existing.getId ( ) ) ; org.junit.Assert.assertEquals ( ( ( org.ovirt.engine.core.dao.AffinityGroupDaoTest.NUM_OF_VMS_IN_EXISTING_AFFINITY_GROUP ) + 1 ) , fetched.getVmEntityNames ( ) . size ( ) ) ; }
public void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
protected void executeCommand ( ) { try { addVmToDb ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getVm ( ) ; if ( vm.getImages ( ) . isEmpty ( ) ) { endVmRelatedOps ( ) ; } else { processImages ( ) ; } } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . freeMacs ( macsAdded ) ; throw e ; } setSucceeded ( true ) ; }
public org.ovirt.engine.core.common.businessentities.IscsiBond getIscsiBond ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.IscsiBond.class , VdcQueryType.GetIscsiBondById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( iscsiBondId ) , iscsiBondId.toString ( ) ) ; }
public void testAddTag ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( "tag1" , "desc1" ) ; org.ovirt.engine.core.common.businessentities.Tags tagFromDirector = tagsDirector.getTagById ( tag.gettag_id ( ) ) ; org.junit.Assert.assertNull ( tagFromDirector ) ; tagsDirector.addTag ( tag ) ; tagFromDirector = tagsDirector.getTagById ( tag.gettag_id ( ) ) ; org.junit.Assert.assertNotNull ( tagFromDirector ) ; org.junit.Assert.assertEquals ( tag , tagFromDirector ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.VDS host = vdsDao.get ( org.ovirt.engine.core.bll.GetHostArchitectureQuery.getParameters ( ) . getId ( ) ) ; org.ovirt.engine.core.common.businessentities.ServerCpu sc = cpuFlagsManagerHandler.findMaxServerCpuByFlags ( host.getCpuFlags ( ) , host.getClusterCompatibilityVersion ( ) ) ; org.ovirt.engine.core.bll.GetHostArchitectureQuery.getQueryReturnValue ( ) . setReturnValue ( ( sc == null ? org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined : sc.getArchitecture ( ) ) ) ; }
private void UnsubscribeList ( java.lang.Iterable list ) { if ( list == null ) { return ; } for ( java.lang.Object a : list ) { org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent notifier = ( ( org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent ) ( ( a instanceof org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent ) ? a : null ) ) ; if ( notifier != null ) { notifier.getPropertyChangedEvent ( ) . removeListener ( this ) ; } } }
public void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.StringBuilder configBuilder = new java.lang.StringBuilder ( ( ( java.lang.String ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; writeOVirtSection ( configBuilder , getOptions ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel.makeConsoleConfigRequest ( "console.vv" , "application/x-virt-viewer; charset=UTF-8" , configBuilder.toString ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.VDS getPreviousHost ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { org.ovirt.engine.core.compat.Guid previousProxyHostId = getVmwarePropertiesModel ( ) . getLastProxyHostId ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( host.getId ( ) . equals ( previousProxyHostId ) ) { return host ; } } return null ; }
private org.ovirt.engine.api.model.DiskAttachment map ( org.ovirt.engine.core.common.businessentities.storage.DiskImage entity , org.ovirt.engine.api.model.DiskAttachment template ) { org.ovirt.engine.api.model.Disk disk = getMapper ( org.ovirt.engine.api.model.Disk.class , org.ovirt.engine.api.model.Disk.class ) . map ( entity , null ) ; org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment ( ) ; diskAttachment.setDisk ( disk ) ; return diskAttachment ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( getId ( ) . hashCode ( ) ) ; result = ( prime * result ) + ( ( getGlusterServerUuid ( ) ) == null ? 0 : getGlusterServerUuid ( ) . hashCode ( ) ) ; result = ( prime * result ) + ( ( getKnownAddresses ( ) ) == null ? 0 : getKnownAddresses ( ) . hashCode ( ) ) ; return result ; }
public void testSelectionRestoredOnNewSetItems ( ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel < java.lang.Void , java.lang.Integer > listModel = org.mockito.Mockito.mock ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.class , org.mockito.Mockito.withSettings ( ) . useConstructor ( ) . defaultAnswer ( Answers.CALLS_REAL_METHODS ) ) ; listModel.setItems ( java.util.Arrays.asList ( 1 , 2 , 3 ) ) ; listModel.setSelectedItem ( 2 ) ; listModel.setItems ( java.util.Arrays.asList ( 1 , 2 ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( ( ( java.lang.Integer ) ( 2 ) ) , listModel.getSelectedItem ( ) ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetDiskAndSnapshotsByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.DISK_ID } , getEntity ( 1 , true ) ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void beforeCommandExecuted ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . beforeCommandExecuted ( command ) ; if ( command == ( model.getDefaultCommand ( ) ) ) { removeListeners ( model ) ; getView ( ) . flushToPrivateModel ( ) ; org.ovirt.engine.ui.common.presenter.popup.ConsoleModelChangedEvent.fire ( getEventBus ( ) , model.getModel ( ) ) ; } }
protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration ( ) { return super . createWidgetConfiguration ( ) . putOne ( logicalNetworksEditorPanel , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . putAll ( poolSpecificFields ( ) , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . putOne ( instanceTypesEditor , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . putOne ( templateWithVersionEditor , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . update ( resourceAllocationTab , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) ; }
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > getExistingIfaces ( ) { if ( ( existingIfaces ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > ifaces = getDbFacade ( ) . getInterfaceDao ( ) . getAllInterfacesForVds ( params.getVdsId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : ifaces ) { iface.setNetworkImplementationDetails ( org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails ( getExistingClusterNetworks ( ) , iface ) ) ; } existingIfaces = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName ( ifaces ) ; } return existingIfaces ; }
protected void update ( boolean valid , boolean executeCommandResult , int getConnectionExecTimes ) throws java.lang.Exception { for ( int i = 0 ; i < getConnectionExecTimes ; i ++ ) { setUpGetEntityExpectations ( ) ; } setUriInfo ( setUpActionExpectations ( ActionType.UpdateStorageServerConnection , org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , executeCommandResult ) ) ; verifyModel ( resource.update ( getModel ( 3 ) ) , 3 ) ; }
private static java.util.Map < java.lang.String , java.lang.Object > getVideoDeviceSpecParams ( int numOfMonitors , boolean singleQxlPci ) { int heads = ( singleQxlPci ) ? numOfMonitors : 1 ; java.util.Map < java.lang.String , java.lang.Object > specParams = new java.util.HashMap < > ( ) ; specParams.put ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.HEADS , java.lang.String.valueOf ( heads ) ) ; specParams.put ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.VRAM , org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.singlePciVRamByHeads ( heads ) ) ; if ( singleQxlPci ) { specParams.put ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.RAM , org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.singlePciRamByHeads ( heads ) ) ; } return specParams ; }
private void initIpv4ConfigurationBootProtocolNetmask ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol networkBootProtocol , boolean syncNetmask ) { initIpv4ConfigurationStaticBootProtocol ( networkBootProtocol ) ; ipv4Address.setNetmask ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_NETMASK ) ; iface.setIpv4Subnet ( ( syncNetmask ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_NETMASK : null ) ) ; }
public void doParse_unhandledFieldTypeRecursion ( ) throws com.google.gwt.core.ext.UnableToCompleteException { java.util.Set < ? extends com.google.gwt.core.ext.typeinfo.JClassType > ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy = java.util.Collections.singleton ( ownerTypeParentFieldTypeSubField1Type ) ; org.mockito.Mockito.doReturn ( ownerTypeParentFieldTypeSubField1TypeFlattenedSupertypeHierarchy ) . when ( ownerTypeParentFieldTypeSubField1Type ) . getFlattenedSupertypeHierarchy ( ) ; org.mockito.Mockito.when ( ownerTypeParentFieldTypeSubField1Type.getFields ( ) ) . thenReturn ( new com.google.gwt.core.ext.typeinfo.JField [ ] { ownerTypeParentField } ) ; tested.doParse ( ownerType , new java.util.ArrayList < com.google.gwt.core.ext.typeinfo.JClassType > ( ) , "." , "IdPrefix" ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( getSnapshot ( ) ) ; getSnapshotDao ( ) . updateStatus ( sourceSnapshotId , SnapshotStatus.LOCKED ) ; lockVmWithCompensationIfNeeded ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
private void processHeartbeat ( ) { if ( ( ( ! ( this . isInInit ( ) ) ) && ( this . policy.isHeartbeat ( ) ) ) && ( ( ( this . lastHeartbeat ) + ( this . policy.getHeartbeat ( ) ) ) < ( java.lang.System.currentTimeMillis ( ) ) ) ) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.debug ( "Heartbeat exeeded. Closing channel" ) ; this . disconnect ( "Heartbeat exeeded" ) ; } }
private boolean devicePluggable ( org.ovirt.engine.core.common.businessentities.VmDevice device ) { return ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk ( device ) ) || ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBridge ( device ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase params = new org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase ( ) ; org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent = new org.ovirt.engine.core.common.businessentities.pm.FenceAgent ( ) ; agent.setHostId ( hostId ) ; agent.setId ( guid ) ; params.setAgent ( agent ) ; return performAction ( ActionType.RemoveFenceAgent , params ) ; }
public void getRpmVersion ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion ) ; tempVar.setVersion ( getDefaultConfigurationVersion ( ) ) ; getConfigFromCache ( tempVar , aQuery ) ; }
public void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
public void canDoActionNotEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithoutSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsed ( ) { for ( org.ovirt.engine.core.common.businessentities.network.Network otherNetwork : getNetworks ( ) ) { if ( ( otherNetwork.getName ( ) . equals ( network.getName ( ) ) ) && ( ! ( otherNetwork.getId ( ) . equals ( network.getId ( ) ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE , getNetworkNameReplacement ( ) ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected org.ovirt.engine.core.bll.ValidationResult profileNotUsed ( java.util.List < ? extends org.ovirt.engine.core.common.businessentities.Nameable > entities , org.ovirt.engine.core.common.errors.EngineMessage entitiesReplacement ) { if ( entities.isEmpty ( ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } java.util.Collection < java.lang.String > replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable ( "ENTITIES_USING_PROFILE" , entities ) ; replacements.add ( entitiesReplacement.name ( ) ) ; return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PROFILE_IN_USE , replacements ) ; }
private void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetTagExpectations ( true ) ; setUriInfo ( setUpActionExpectations ( ActionType.DetachUserFromTag , org.ovirt.engine.core.common.action.AttachEntityToTagParameters.class , new java.lang.String [ ] { "TagId" , "EntitiesId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendUserTagResourceTest.TAG_ID , asList ( org.ovirt.engine.api.restapi.resource.BackendUserTagResourceTest.USER_ID ) } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "Cluster: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
private void removeVmStatlessImages ( ) { runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.IdParameters ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getId ( ) ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( org.ovirt.engine.core.bll.RunVmCommand.getContext ( ) , org.ovirt.engine.core.bll.RunVmCommand.getLock ( ) ) ) ; org.ovirt.engine.core.bll.RunVmCommand.setLock ( null ) ; org.ovirt.engine.core.bll.RunVmCommand.setSucceeded ( true ) ; }
private org.ovirt.engine.core.common.businessentities.VM createVmForTesting ( java.lang.String initrd , java.lang.String kernel ) { mockVm ( command ) ; org.ovirt.engine.core.common.action.RunVmParams runVmParams = command.getParameters ( ) ; runVmParams.setinitrd_url ( initrd ) ; runVmParams.setkernel_url ( kernel ) ; command.createVm ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = vmDAO.get ( command.getParameters ( ) . getVmId ( ) ) ; return vm ; }
public void getRoleActionGroupsByRoleId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid roleId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetRoleActionGroupsByRoleId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( roleId ) , aQuery ) ; }
public void testValidateCompletion ( ) { org.ovirt.engine.core.searchbackend.IAutoCompleter comp = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter ( ) ; org.junit.Assert.assertTrue ( "TRUE" , comp.validateCompletion ( "TRUE" ) ) ; org.junit.Assert.assertTrue ( "TR" , comp.validateCompletion ( "TR" ) ) ; org.junit.Assert.assertFalse ( "JarJar" , comp.validateCompletion ( "JarJar" ) ) ; }
public void testGetDiskSnapshotForVmSnapshot ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage result = dao.getDiskSnapshotForVmSnapshot ( FixturesTool.IMAGE_GROUP_ID , FixturesTool.EXISTING_SNAPSHOT_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( FixturesTool.IMAGE_GROUP_ID , result.getId ( ) ) ; org.junit.Assert.assertEquals ( FixturesTool.EXISTING_SNAPSHOT_ID , result.getVmSnapshotId ( ) ) ; }
public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { runOnceModel.sysPrepListBoxChanged ( ) ; }
public static org.ovirt.engine.api.model.Sessions map ( org.ovirt.engine.api.restapi.types.VM vm , org.ovirt.engine.api.model.Sessions sessions ) { if ( sessions == null ) { sessions = new org.ovirt.engine.api.model.Sessions ( ) ; } org.ovirt.engine.api.restapi.types.VmMapper.mapConsoleSession ( vm , sessions ) ; org.ovirt.engine.api.restapi.types.VmMapper.mapGuestSessions ( vm , sessions ) ; return sessions ; }
public java.lang.Object runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( getStoragePool ( ) , getStoragePool ( ) . getstatus ( ) ) ; getStoragePool ( ) . setstatus ( StoragePoolStatus.Maintenance ) ; getStoragePoolDAO ( ) . updateStatus ( getStoragePool ( ) . getId ( ) , getStoragePool ( ) . getstatus ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
private void _setNode ( ) { _isNode = true ; _vds.setVdsType ( VDSType.oVirtNode ) ; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsStaticDao ( ) . update ( _vds.getStaticData ( ) ) ; return null ; } } ) ; }
private void getIrsImageList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean forceRefresh , org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType , org.ovirt.engine.ui.frontend.IAsyncConverter converterCallBack ) { aQuery.converterCallback = converterCallBack ; org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters parameters = new org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters ( storagePoolId , imageFileType ) ; parameters.setForceRefresh ( forceRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetImagesListByStoragePoolId , parameters , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel clusterPolicyClusterListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel ) ( model ) ) ; clusterPolicyClusterListModel.setItems ( ( ( java.util.Collection ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }
public void validateVmIsNotDown ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; }
public void canDoActionWrongStorage ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic nfsStatic = createStorageDomain ( ) ; nfsStatic.setStorageType ( StorageType.NFS ) ; org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.setStorageStaticData ( nfsStatic ) ; sd.setStatus ( StorageDomainStatus.Active ) ; sd.setStoragePoolId ( spId ) ; org.mockito.Mockito.doReturn ( sd ) . when ( cmd ) . getStorageDomain ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; }
public static void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusForHost getStatusForNode ( java.util.Map < java.lang.String , java.lang.Object > nodeStatus ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusForHost rebalanceStatusForHost = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusForHost ( ) ; rebalanceStatusForHost.setHostName ( ( nodeStatus.containsKey ( org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturn.HOST_NAME ) ? ( ( java.lang.String ) ( nodeStatus.get ( org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturn.HOST_NAME ) ) ) : null ) ) ; rebalanceStatusForHost.setHostUuid ( ( nodeStatus.containsKey ( org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturn.HOST_UUID ) ? new org.ovirt.engine.core.compat.Guid ( ( ( java.lang.String ) ( nodeStatus.get ( org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturn.HOST_UUID ) ) ) ) : null ) ) ; populateGlusterVolumeTaskStatusDetail ( rebalanceStatusForHost , nodeStatus ) ; return rebalanceStatusForHost ; }
public org.ovirt.engine.core.bll.ValidationResult vmNotRunningStateless ( ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vm.getId ( ) , SnapshotType.STATELESS ) ) { org.ovirt.engine.core.dal.VdcBllMessages message = ( vm.isRunning ( ) ) ? org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_RUNNING_STATELESS : org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_HAS_STATELESS_SNAPSHOT_LEFTOVER ; return new org.ovirt.engine.core.bll.ValidationResult ( message ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn freeze ( java.lang.String vmId ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.freeze" ) . withParameter ( "vmID" , vmId ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public static org.ovirt.engine.api.model.CdRom map ( org.ovirt.engine.core.common.businessentities.VmTemplate entity , org.ovirt.engine.api.model.CdRom template ) { org.ovirt.engine.api.model.CdRom model = ( template != null ) ? template : new org.ovirt.engine.api.model.CdRom ( ) ; model.setId ( org.ovirt.engine.api.restapi.types.CdRomMapper.CDROM_ID.toString ( ) ) ; if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( entity.getIsoPath ( ) ) ) ) { model.setFile ( new org.ovirt.engine.api.model.File ( ) ) ; model.getFile ( ) . setId ( entity.getIsoPath ( ) ) ; } return model ; }
public void render ( com.google.gwt.cell.client.Cell.Context context , T object , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { com.google.gwt.cell.client.Cell < java.lang.Boolean > cell = org.ovirt.engine.ui.common.widget.table.column.CheckboxColumn.getCell ( ) ; if ( cell instanceof org.ovirt.engine.ui.common.widget.table.column.CheckboxColumn.EnabledDisabledCheckboxCell ) { ( ( org.ovirt.engine.ui.common.widget.table.column.CheckboxColumn.EnabledDisabledCheckboxCell ) ( cell ) ) . renderEditable ( context , org.ovirt.engine.ui.common.widget.table.column.CheckboxColumn.getValue ( object ) , canEdit ( object ) , sb ) ; } else { super . render ( context , object , sb ) ; } }
private void initCommand ( ) { org.mockito.Mockito.when ( diskDao.get ( diskId ) ) . thenReturn ( createDiskImage ( ) ) ; org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = createParameters ( ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand ( parameters , null ) ) ; org.mockito.Mockito.doReturn ( diskDao ) . when ( command ) . getDiskDao ( ) ; command.init ( ) ; }
public void render ( org.ovirt.engine.ui.common.widget.table.column.Context context , com.google.gwt.resources.client.ImageResource value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( value != null ) { com.google.gwt.safehtml.shared.SafeHtml html = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( value ) . getHTML ( ) ) ; sb.appendHtmlConstant ( ( ( ( ( ( "<div title=\"" + ( title ) ) + "\" " ) + "style=\"" ) + ( style ) ) + "\">" ) ) ; sb.append ( html ) ; sb.appendHtmlConstant ( "</div>" ) ; } }
public void render ( org.ovirt.engine.ui.webadmin.widget.table.column.Context context , org.ovirt.engine.core.common.businessentities.gluster.BrickProperties value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( value != null ) { setFreeSize ( value.getFreeSize ( ) ) ; setTotalSize ( value.getTotalSize ( ) ) ; setUsedSize ( ( ( value.getTotalSize ( ) ) - ( value.getFreeSize ( ) ) ) ) ; setInUnit ( SizeUnit.MiB ) ; } super . render ( context , ( value == null ? null : value ) , sb ) ; }
protected void initializeModelHandlers ( final org.ovirt.engine.ui.uicommonweb.models.events.EventListModel < java.lang.Void > model ) { super . initializeModelHandlers ( model ) ; model.setDisplayEventsOnly ( true ) ; model.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( "LastEvent" . equals ( args.propertyName ) ) { updateData ( ) ; } } } ) ; }
private void activateClearance ( org.ovirt.vdsmfake.domain.StorageDomain storageDomain ) { storageDomain.setDomainStatus ( StorageDomain.DomainStatus.ACTIVE ) ; updateStorageDomain ( storageDomain ) ; }
public void diskSnapshotsCanBePreviewed ( ) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot ( ) ; org.mockito.Mockito.when ( snapshotDao.get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( activeSnapshot ) ; org.junit.Assert.assertThat ( validator.canDiskSnapshotsBePreviewed ( activeSnapshot.getId ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void postInitDisks ( ) { onDataLoad ( ) ; checkDestFormatCompatibility ( ) ; stopProgress ( ) ; getStorage ( ) . getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { onDataLoad ( ) ; } } ) ; }
private boolean prestartVm ( org.ovirt.engine.core.compat.Guid vmGuid ) { boolean prestartVmSucceeded = false ; if ( org.ovirt.engine.core.bll.VmPoolCommandBase.canAttachNonPrestartedVmToUser ( vmGuid ) ) { org.ovirt.engine.core.common.businessentities.VM vmToPrestart = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDAO ( ) . get ( vmGuid ) ; if ( runVmAsStateless ( vmToPrestart ) ) { prestartVmSucceeded = true ; } } return prestartVmSucceeded ; }
protected void initAppTable ( ) { appTable = new org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.vms.VmAppListModel > ( ) ; appTable.addColumn ( new org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip < java.lang.String > ( ) { @ java.lang.Override public java.lang.String getValue ( java.lang.String object ) { return object ; } } , constants.installedApp ( ) ) ; appTable.getElement ( ) . getStyle ( ) . setPosition ( Position.RELATIVE ) ; com.google.gwt.user.client.ui.ScrollPanel appPanel = new com.google.gwt.user.client.ui.ScrollPanel ( ) ; appPanel.add ( appTable ) ; subTabLayoutPanel.add ( appPanel , constants.importVmApplicationslSubTabLabel ( ) ) ; }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onSucceeded ( cmdId , childCmdIds ) ; log.info ( "Volume/Snapshot has been successfully deleted from Cinder. ID: {}" , getDiskId ( ) ) ; getCommand ( ) . endAction ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
public void markAsInvalid ( java.util.List < java.lang.String > validationHints ) { super . markAsInvalid ( validationHints ) ; java.lang.String tooltipText = org.ovirt.engine.ui.common.widget.AbstractValidatedWidgetWithLabel.getValidationTooltipText ( validationHints ) ; labelTooltip.setText ( tooltipText ) ; labelTooltip.reconfigure ( ) ; addLabelStyleName ( OvirtCss.HAS_TOOLTIP ) ; contentWidgetContainerTooltip.setText ( tooltipText ) ; contentWidgetContainerTooltip.reconfigure ( ) ; }
protected void endWithFailure ( ) { removeRedundantVolumesForOrphanedDisks ( ) ; if ( ! ( org.ovirt.engine.core.bll.storage.RestoreAllCinderSnapshotsCommand.getParameters ( ) . isParentHasTasks ( ) ) ) { unlockSnapshot ( org.ovirt.engine.core.bll.storage.RestoreAllCinderSnapshotsCommand.getParameters ( ) . getSnapshot ( ) . getId ( ) ) ; super . endWithFailure ( ) ; } org.ovirt.engine.core.bll.storage.RestoreAllCinderSnapshotsCommand.setSucceeded ( true ) ; }
public void unmanagedVlanAddedToNic ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingIfaces ( nic ) ; java.lang.String networkName = "net" ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , createVlan ( nic , 100 , networkName ) ) ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORKS_DONT_EXIST_IN_CLUSTER , networkName ) ; }
protected boolean isRoleNetwork ( ) { return ( ( getNetworkCluster ( ) . isDisplay ( ) ) || ( getNetworkCluster ( ) . isMigration ( ) ) ) || ( getNetworkCluster ( ) . isGluster ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand ( VDSCommandType.StopRebalanceGlusterVolume , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters ( upServer.getId ( ) , getGlusterVolumeName ( ) ) ) ; if ( ! ( vdsReturnaValue.getSucceeded ( ) ) ) { handleVdsError ( AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED , vdsReturnaValue.getVdsError ( ) . getMessage ( ) ) ; setSucceeded ( false ) ; return ; } endStepJobAborted ( ) ; releaseVolumeLock ( ) ; setSucceeded ( vdsReturnaValue.getSucceeded ( ) ) ; }
public void testFindDefaultManagementNetworkDefault ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mockManagementNetworkUtil.getDefaultManagementNetworkName ( ) ) . thenReturn ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.DEFAULT_ENGINE_NETWORK_NAME ) ; org.mockito.Mockito.when ( mockNetworkDao.getByNameAndDataCenter ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.DEFAULT_ENGINE_NETWORK_NAME , org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ) . thenReturn ( mockDefaultEngineNetwork ) ; final org.ovirt.engine.core.common.businessentities.network.Network actual = underTest.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ; org.junit.Assert.assertSame ( actual , mockDefaultEngineNetwork ) ; }
protected org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters createSetupNetworksParameters ( org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; host.setId ( hostId ) ; org.ovirt.engine.core.bll.network.NetworkConfigurator configurator = new org.ovirt.engine.core.bll.network.NetworkConfigurator ( host , commandContext ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = configurator.filterBondsWithoutSlaves ( getHostInterfaces ( hostId ) ) ; org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters ( ) ; parameters.setVdsId ( host.getId ( ) ) ; parameters.setInterfaces ( nics ) ; parameters.setCheckConnectivity ( true ) ; parameters.setShouldBeLogged ( false ) ; return parameters ; }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateMinAllocatedMemory ( ) ; updateNumOfSockets ( ) ; if ( ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; updateQuotaByCluster ( template.getQuotaId ( ) , template.getQuotaName ( ) ) ; } updateCpuPinningVisibility ( ) ; }
public org.ovirt.engine.sdk.decorators.HostHostNic add ( org.ovirt.engine.sdk.decorators.HostNic hostnic ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . add ( url , hostnic , org.ovirt.engine.sdk.entities.HostNic.class , org.ovirt.engine.sdk.decorators.HostHostNic.class , headers ) ; }
protected void freeLock ( ) { if ( ( context.getLock ( ) ) != null ) { getLockManager ( ) . releaseLock ( context.getLock ( ) ) ; log.infoFormat ( "Lock freed to object {0}" , context.getLock ( ) ) ; context.withLock ( null ) ; } }
protected void setValue ( java.lang.String name , java.lang.String value , java.lang.String version ) { org.ovirt.engine.core.common.businessentities.VdcOption vdcOption = dbfacade.getVdcOptionDao ( ) . getByNameAndVersion ( name , version ) ; vdcOption.setoption_value ( value ) ; dbfacade.getVdcOptionDao ( ) . update ( vdcOption ) ; try { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get ( vdcOption.getoption_name ( ) ) . put ( version , org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getValue ( vdcOption ) ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.errorFormat ( "Could not update option {0} in cache." , name ) ; } }
private void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants , org.ovirt.engine.ui.webadmin.ApplicationDynamicConstants dynamicConstants ) { headerLabel.setText ( dynamicConstants.loginHeaderLabel ( ) ) ; userNameLabel.setText ( constants.loginFormUserNameLabel ( ) ) ; passwordLabel.setText ( constants.loginFormPasswordLabel ( ) ) ; domainLabel.setText ( constants.loginFormDomainLabel ( ) ) ; loginButton.setLabel ( constants.loginButtonLabel ( ) ) ; }
protected java.lang.String getDescription ( ) { java.lang.String networkName = ( ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getNetworkName ( ) ) == null ) ? "" : org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getNetworkName ( ) ; java.lang.String clusterName = ( ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getCluster ( ) ) == null ) ? "" : org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getCluster ( ) . getName ( ) ; return ( networkName + " - " ) + clusterName ; }
private static java.util.Map < java.lang.String , java.lang.Object > getVideoDeviceSpecParams ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.getVideoDeviceSpecParams ( vmBase.getNumOfMonitors ( ) , vmBase.getSingleQxlPci ( ) ) ; }
protected void writeManagedDeviceInfo ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.core.compat.backendcompat.XmlTextWriter writer , org.ovirt.engine.core.compat.Guid deviceId ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = vmBase.getManagedDeviceMap ( ) . get ( deviceId ) ; if ( ( ( deviceId != null ) && ( vmDevice != null ) ) && ( ( vmDevice.getAddress ( ) ) != null ) ) { writeVmDeviceInfo ( vmDevice ) ; } }
private boolean canRemoveVmWithDetachDisks ( ) { if ( ! ( Guid.Empty.equals ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) . getVmtGuid ( ) ) ) ) { return failValidation ( EngineMessage.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_BASED_ON_TEMPLATE ) ; } for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) . getDiskList ( ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImageList = org.ovirt.engine.core.bll.RemoveVmCommand.getDiskImageDao ( ) . getAllSnapshotsForImageGroup ( disk.getId ( ) ) ; if ( ( diskImageList.size ( ) ) > 1 ) { return failValidation ( EngineMessage.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_SNAPSHOTS_EXIST ) ; } } return true ; }
public static void GetVmListByClusterName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > Cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: cluster=" + clusterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
public void canAddCloneVmFromSnapshotNoConfiguration ( ) { cmd.getVm ( ) . setName ( "vm1" ) ; org.mockito.Mockito.doReturn ( null ) . when ( cmd ) . getVmFromConfiguration ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotDuringSnapshot ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.when ( snapshotDao.get ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommandTest.SOURCE_SNAPSHOT_ID ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.Snapshot ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION ) ; }
protected void verifyRemoveAllDelegatedCorrectly ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface ) { org.mockito.Mockito.verify ( macPoolManager , org.mockito.Mockito.times ( 1 ) ) . freeMac ( iface.getMacAddress ( ) ) ; org.mockito.Mockito.verify ( vmNetworkInterfaceDAO ) . remove ( iface.getId ( ) ) ; org.mockito.Mockito.verify ( vmNetworkStatisticsDAO ) . remove ( iface.getId ( ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.VmHostDevice > getExistingVmHostDevicesByName ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > existingDevices = org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmId ( ) , VmDeviceGeneralType.HOSTDEV ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmHostDevice > result = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice device : existingDevices ) { result.add ( new org.ovirt.engine.core.common.businessentities.VmHostDevice ( device ) ) ; } return org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVmDeviceUtils ( ) . vmDevicesByDevice ( result ) ; }
public void isVmNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmWithSameNameExist , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
private void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( 0 ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveBookmark , org.ovirt.engine.core.common.action.BookmarksParametersBase.class , new java.lang.String [ ] { "BookmarkId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetIscsiBondsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondsResourceTest.DATA_CENTER_ID } , org.ovirt.engine.api.restapi.resource.BackendIscsiBondsResourceTest.setUpIscsiBonds ( ) , failure ) ; control.replay ( ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > ( ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.WatchDog model , org.ovirt.engine.core.common.businessentities.VmWatchdog entity ) { validateEnums ( org.ovirt.engine.api.model.WatchDog.class , model ) ; org.ovirt.engine.core.common.action.WatchdogParameters params = new org.ovirt.engine.core.common.action.WatchdogParameters ( ) ; params.setModel ( org.ovirt.engine.core.common.businessentities.VmWatchdogType.getByName ( model.getModel ( ) ) ) ; params.setAction ( org.ovirt.engine.core.common.businessentities.VmWatchdogAction.getByName ( model.getAction ( ) ) ) ; params.setId ( parentId ) ; params.setVm ( parentIsVm ) ; return params ; }
protected org.ovirt.engine.core.bll.ValidationResult validateVmStatusUsingMatrix ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ! ( org.ovirt.engine.core.common.VdcActionUtils.canExecute ( java.util.Arrays.asList ( vm ) , org.ovirt.engine.core.common.businessentities.VM.class , VdcActionType.RunVm ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL , org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from ( vm.getStatus ( ) ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void detachUserFromVmFromPool ( ) { if ( ! ( Guid.Empty.equals ( getAdUserId ( ) ) ) ) { org.ovirt.engine.core.common.businessentities.Permission perm = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getPermissionDao ( ) . getForRoleAndAdElementAndObject ( PredefinedRoles.ENGINE_USER.getId ( ) , getAdUserId ( ) , getVmId ( ) ) ; if ( perm != null ) { org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getPermissionDao ( ) . remove ( perm.getId ( ) ) ; } } }
protected void verifyModel ( org.ovirt.engine.api.model.KatelloErratum model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , org.ovirt.engine.api.restapi.utils.HexUtils.hex2string ( model.getId ( ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( DESCRIPTIONS [ index ] , model.getDescription ( ) ) ; verifyLinks ( model ) ; }
public static org.ovirt.engine.core.common.businessentities.ArchitectureType map ( org.ovirt.engine.api.model.Architecture model , org.ovirt.engine.core.common.businessentities.ArchitectureType template ) { if ( model != null ) { switch ( model ) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64 ; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64 ; case S390X : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390x ; default : return null ; } } return null ; }
private void addInlineDisks ( org.ovirt.engine.api.model.Vm vm ) { org.ovirt.engine.core.compat.Guid vmId = asGuid ( vm.getId ( ) ) ; org.ovirt.engine.api.restapi.resource.BackendVmDisksResource disksResource = inject ( new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource ( vmId ) ) ; org.ovirt.engine.api.model.Disks disks = disksResource.list ( ) ; vm.setDisks ( disks ) ; }
private boolean connectStorageToLunByVdsId ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.LUNs lun ) { try { return org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.getStorageDomain ( ) . getStorageType ( ) ) . connectStorageToLunByVdsId ( org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.getStorageDomain ( ) , vds.getId ( ) , lun , Guid.Empty ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { final org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.ConnectAllHostsToLunCommandReturnValue result = getResult ( ) ; result.setFailedVds ( vds ) ; result.setFailedLun ( lun ) ; throw e ; } }
public void setSuccessfulProfileStatsFetch ( boolean successfulProfileStatsFetch ) { this . successfulProfileStatsFetch = successfulProfileStatsFetch ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "statusOfFetchingProfileStats" ) ) ; }
public static int map ( org.ovirt.engine.api.model.OsType type , java.lang.Class < java.lang.Integer > incoming ) { for ( java.util.Map.Entry < java.lang.Integer , java.lang.String > e : org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . getUniqueOsNames ( ) . entrySet ( ) ) { if ( e.getValue ( ) . equalsIgnoreCase ( type.name ( ) . replace ( "_" , "" ) ) ) { return e.getKey ( ) ; } } return 0 ; }
public void testAlerts ( ) { org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( 100 ) ; org.ovirt.engine.core.searchbackend.ISyntaxChecker curSyntaxChecker = org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.CreateBackendSyntaxChecker ( "foo" ) ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = curSyntaxChecker.analyzeSyntaxState ( "Events: severity=error" , true ) ; java.lang.String query = chkr.generateQueryFromSyntaxContainer ( res , true ) ; junit.framework.Assert.assertEquals ( "SELECT * FROM (SELECT audit_log.* FROM audit_log WHERE audit_log.severity = '2' and (not deleted) ORDER BY audit_log_id DESC ) as T1 OFFSET (1 -1) LIMIT 0" , query ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createNetworkAttachment ( org.ovirt.engine.core.compat.Guid nicId , java.lang.String nicName , org.ovirt.engine.core.compat.Guid networkId , java.lang.String networkName ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNicId ( nicId ) ; networkAttachment.setNicName ( nicName ) ; networkAttachment.setNetworkId ( networkId ) ; networkAttachment.setNetworkName ( networkName ) ; org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.utils.NetworkUtils.createDefaultIpConfiguration ( ) ; networkAttachment.setIpConfiguration ( ipConfiguration ) ; return networkAttachment ; }
public void networkQosDoesntExist ( ) throws java.lang.Exception { org.mockito.Mockito.when ( vnicProfile.getNetworkQosId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID ) ; org.mockito.Mockito.when ( networkQosDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertThat ( validator.networkQosExistsOrNull ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS ) ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetDomainExpectations ( StorageType.NFS , false ) ; try { resource.get ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ) { return false ; } org.ovirt.engine.core.common.businessentities.storage.CinderDisk other = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( obj ) ) ; return ( super . equals ( obj ) ) && ( java.util.Objects.equals ( cinderConnectionInfo , other.cinderConnectionInfo ) ) ; }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters ( ) , aQuery ) ; }
public void testFilter ( ) throws java.lang.Exception { filter.clearFilterEntries ( ) ; filter.addFilterEntries ( org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.parse ( ( "include:message1(smtp:alonbl@redhat.com) " + ( ( ( ( ( ( ( ( ( ( "include:message2(smtp:alonbl@redhat.com) " + "exclude:message3(smtp:alonbl@redhat.com) " ) + "exclude:message1(smtp:alonbl@redhat.com) " ) + "include:message2(smtp:alon.barlev@gmail.com) " ) + "include:message1(smtp:alonbl@gentoo.org) " ) + "exclude:message1(snmp:profile1) " ) + "exclude:message2(snmp:profile1) " ) + "include:*(snmp:profile2) " ) + "include:*(snmp:profile1) " ) + "exclude:*" ) + "" ) ) ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "message0" ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "message1" ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "message2" ) ) ; org.junit.Assert.assertTrue ( snmp.getEvents ( ) . contains ( "message0-->profile1" ) ) ; org.junit.Assert.assertTrue ( snmp.getEvents ( ) . contains ( "message0-->profile2" ) ) ; org.junit.Assert.assertTrue ( snmp.getEvents ( ) . contains ( "message1-->profile2" ) ) ; org.junit.Assert.assertTrue ( snmp.getEvents ( ) . contains ( "message2-->profile2" ) ) ; org.junit.Assert.assertEquals ( 4 , snmp.getEvents ( ) . size ( ) ) ; org.junit.Assert.assertTrue ( smtp.getEvents ( ) . contains ( "message1-->alonbl@gentoo.org" ) ) ; org.junit.Assert.assertTrue ( smtp.getEvents ( ) . contains ( "message1-->alonbl@redhat.com" ) ) ; org.junit.Assert.assertTrue ( smtp.getEvents ( ) . contains ( "message2-->alon.barlev@gmail.com" ) ) ; org.junit.Assert.assertTrue ( smtp.getEvents ( ) . contains ( "message2-->alonbl@redhat.com" ) ) ; org.junit.Assert.assertEquals ( 4 , smtp.getEvents ( ) . size ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { dataCenters.addAll ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) ; java.util.Collections.sort ( dataCenters , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getExternalNetworkMap ( networkQuery , provider.getId ( ) ) ; }
private void initProfileParentList ( org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileBaseModel < P , Q , R > model ) { model.getParentListModel ( ) . setItems ( java.util.Arrays.< R > asList ( org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileListModel.getEntity ( ) ) ) ; model.getParentListModel ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileListModel.getEntity ( ) ) ; model.getParentListModel ( ) . setIsChangable ( false ) ; }
protected java.util.HashMap < java.lang.String , java.lang.Object > getSpecParams ( ) { org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog = new org.ovirt.engine.core.common.businessentities.VmWatchdog ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . getModel ( ) , org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . getAction ( ) ) ; return watchdog.getSpecParams ( ) ; }
public void refresh ( ) { log.debug ( "Affinity Rules Enforcement Manager interval reached." ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmCandidates = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : vdsGroupDao.getWithoutMigratingVms ( ) ) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate ( cluster ) ; if ( candidate != null ) { vmCandidates.add ( candidate ) ; } } for ( org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates ) { migrateVM ( vm ) ; } }
public void parseArguments ( java.util.List < java.lang.String > args ) throws java.lang.Exception { final java.util.Map < java.lang.String , java.lang.String > substitutions = new java.util.HashMap < > ( ) ; substitutions.put ( "@PROGRAM_NAME@" , ( ( java.lang.String ) ( context.get ( org.ovirt.engine.exttool.logger.PROGRAM_NAME ) ) ) ) ; args.remove ( 0 ) ; java.util.Properties props = new java.util.Properties ( ) ; try ( java.io.InputStream in = org.ovirt.engine.exttool.logger.LoggerServiceImpl.class . getResourceAsStream ( "arguments.properties" ) ; java.io.Reader reader = new java.io.InputStreamReader ( in ) ) { props.load ( reader ) ; } org.ovirt.engine.core.uutils.cli.parser.ArgumentsParser parser = new org.ovirt.engine.core.uutils.cli.parser.ArgumentsParser ( props , "module" ) ; parser.getSubstitutions ( ) . putAll ( substitutions ) ; parser.parse ( args ) ; java.util.Map < java.lang.String , java.lang.Object > moduleArgs = parser.getParsedArgs ( ) ; if ( ( ( java.lang.Boolean ) ( moduleArgs.get ( "help" ) ) ) ) { java.lang.System.out.format ( "Usage: %s" , parser.getUsage ( ) ) ; throw new org.ovirt.engine.exttool.core.ExitException ( "Help" , 0 ) ; } if ( ! ( parser.getErrors ( ) . isEmpty ( ) ) ) { for ( java.lang.Throwable t : parser.getErrors ( ) ) { java.lang.System.err.format ( "FATAL: %s%n" , t.getMessage ( ) ) ; } throw new org.ovirt.engine.exttool.core.ExitException ( "Parsing error" , 1 ) ; } if ( ( args.size ( ) ) < 1 ) { java.lang.System.err.println ( "Action not provided" ) ; throw new org.ovirt.engine.exttool.core.ExitException ( "Action not provided" , 1 ) ; } try { action = org.ovirt.engine.exttool.logger.LoggerServiceImpl.Action.valueOf ( args.get ( 0 ) . toUpperCase ( ) . replace ( "-" , "_" ) ) ; } catch ( java.lang.IllegalArgumentException e ) { java.lang.System.err.printf ( "Invalid action '%s'%n" , args.get ( 0 ) ) ; throw new org.ovirt.engine.exttool.core.ExitException ( "Invalid action" , 1 ) ; } argMap = action.parse ( substitutions , props , args ) ; }
public void canDoActionSameSourceAndDest ( ) throws java.lang.Exception { createParameters ( srcStorageId , srcStorageId ) ; org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain ( srcStorageId ) ; srcStorageDomain.setStatus ( StorageDomainStatus.Active ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME.name ( ) ) ) ; }
public void canDoActionTemplateImageIsLocked ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Copy , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initTemplateDiskImage ( ) ; command.getImage ( ) . setImageStatus ( ImageStatus.LOCKED ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ) . when ( command ) . getTemplateForImage ( ) ; command.defineVmTemplate ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED.toString ( ) ) ) ; }
private void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveUser , org.ovirt.engine.core.common.action.IdParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ( ) ; }
public void testListCrash ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResourceTest.QUERY , t ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.aaa.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
protected java.lang.Object runPublicQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams , java.lang.String sessionId ) { initQueryParams ( queryParams , sessionId ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend.runPublicQuery ( queryType , queryParams ) ; return ( result != null ) && ( result.getSucceeded ( ) ) ? result.getReturnValue ( ) : null ; }
public void testBasicConstructors ( ) { org.ovirt.engine.core.compat.TimeSpan span = new org.ovirt.engine.core.compat.TimeSpan ( 10 , 10 , 10 ) ; org.junit.jupiter.api.Assertions.assertEquals ( 10 , span.Hours ) ; org.junit.jupiter.api.Assertions.assertEquals ( 10 , span.Minutes ) ; org.junit.jupiter.api.Assertions.assertEquals ( 10 , span.Seconds ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , span.Days ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , span.Milliseconds ) ; }
public void testUpdateGlusterHookChecksum ( ) { dao.updateGlusterServerHookChecksum ( FixturesTool.HOOK_ID , FixturesTool.VDS_GLUSTER_SERVER2 , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoTest.CHECKSUM ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverhook = dao.getGlusterServerHook ( FixturesTool.HOOK_ID , FixturesTool.VDS_GLUSTER_SERVER2 ) ; org.junit.Assert.assertNotNull ( serverhook ) ; org.junit.Assert.assertEquals ( GlusterHookStatus.ENABLED , serverhook.getStatus ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.gluster.GlusterHooksDaoTest.CHECKSUM , serverhook.getChecksum ( ) ) ; }
public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain domainToUpdate : storageDomainsToUpdate ) { org.ovirt.engine.core.bll.context.CompensationContext context = getCompensationContext ( ) ; context.snapshotEntity ( domainToUpdate.getStorageDynamicData ( ) ) ; getStorageDomainDynamicDao ( ) . update ( domainToUpdate.getStorageDynamicData ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; } return null ; }
private void generateNewDiskId ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > diskList , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { org.ovirt.engine.core.compat.Guid newGuidForDisk = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; newDiskIdForDisk.put ( newGuidForDisk , org.ovirt.engine.core.common.businessentities.DiskImage.copyOf ( disk ) ) ; disk.setId ( newGuidForDisk ) ; disk.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskList ) { diskImage.setId ( disk.getId ( ) ) ; } }
private org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters ( ) { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters ( getProxyHostId ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getUrl ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getUsername ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getPassword ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getOriginType ( ) ) ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , boolean canDo , boolean success , java.lang.Object taskReturn , java.lang.String baseUri , boolean replay ) { return setUpActionExpectations ( task , clz , names , values , canDo , success , taskReturn , null , null , null , null , baseUri , replay , org.ovirt.engine.api.restapi.resource.AbstractBackendBaseTest.CANT_DO ) ; }
public void validateSucceedsWhenHasPeersThrowsException ( ) throws java.lang.Exception { setupGlusterMock ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( glusterUtil.getPeers ( org.mockito.Matchers.any ( org.ovirt.engine.core.bll.utils.EngineSSHClient.class ) ) ) . thenThrow ( new java.lang.RuntimeException ( ) ) ; org.junit.Assert.assertTrue ( commandMock.validate ( ) ) ; }
protected void onReset ( ) { super . onReset ( ) ; if ( ! ( hasReportsModelRefreshEvent ( ) ) ) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.reportsWebappDeployed = false ; getModel ( ) . getReportModelRefreshEvent ( ) . addListener ( new org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.ReportsModelRefreshEvent ( ) ) ; } setSubTabPanelVisible ( false ) ; getModel ( ) . refreshReportModel ( ) ; }
public static org.ovirt.engine.core.common.utils.VmDeviceType getoVirtDevice ( int resourceType ) { for ( org.ovirt.engine.core.common.utils.VmDeviceType deviceType : org.ovirt.engine.core.common.utils.VmDeviceType.values ( ) ) { if ( ( ( deviceType.ovfResourceType ) != null ) && ( ( java.lang.Integer.parseInt ( deviceType.ovfResourceType ) ) == resourceType ) ) { return deviceType ; } } return org.ovirt.engine.core.common.utils.VmDeviceType.UNKNOWN ; }
public java.lang.Void runInTransaction ( ) { runVdsCommand ( VDSCommandType.SetVdsStatus , new org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters ( getVdsId ( ) , org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned ) ) ; return null ; }
protected org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration ( ) { org.ovirt.engine.core.common.businessentities.VM result = null ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runInternalQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshot.getId ( ) ) ) ; if ( queryReturnValue.getSucceeded ( ) ) { result = queryReturnValue.getReturnValue ( ) ; } return result ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookRemove ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterHookRemove ( glusterCommand , stage , hookName ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void assertCorrectResultForTemplate ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > result ) { org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : result ) { org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDaoTest.TEMPLATE_ID , iface.getVmTemplateId ( ) ) ; } }
protected boolean isImageNotLocked ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage ( ) ; if ( ( diskImage.getImageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED ) ) { if ( ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters ( ) . getOperation ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED , java.lang.String.format ( "$%1$s %2$s" , "diskAliases" , diskImage.getDiskAlias ( ) ) ) ; } else { return failCanDoAction ( EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED ) ; } } return true ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveGroupCommand.getParameters ( ) . getId ( ) ; if ( isLastSuperUserGroup ( id ) ) { addCanDoActionMessage ( EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE ) ; return false ; } if ( MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID.equals ( id ) ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE ) ; return false ; } return true ; }
protected boolean isSoundDeviceEnabled ( ) { java.lang.Boolean soundDeviceEnabled = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isSoundDeviceEnabled ( ) ; return soundDeviceEnabled != null ? soundDeviceEnabled : osRepository.isSoundDeviceEnabled ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getOsId ( ) , org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion ( ) ) ; }
private void setupCanImportPpcTest ( ) { setupDiskSpaceTest ( ) ; cmd.getParameters ( ) . getVm ( ) . setClusterArch ( ArchitectureType.ppc64 ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setArchitecture ( ArchitectureType.ppc64 ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.core.compat.Version.getLast ( ) ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . getCluster ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.Matchers.anyMapOf ( org.ovirt.engine.core.compat.Guid.class , org.ovirt.engine.core.common.businessentities.StorageDomain.class ) ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.aaa.DbUser source ) { return ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( source.getDomain ( ) , target.getDomain ( ) ) ) && ( ( ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( target.getLoginName ( ) ) ) || ( "*" . equals ( target.getLoginName ( ) ) ) ) || ( source.getLoginName ( ) . toLowerCase ( ) . startsWith ( target.getLoginName ( ) ) ) ) ; }
protected boolean validateSpaceRequirements ( ) { fetchVmDisksFromDb ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDiskList ( ) ; org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator msdValidator = createMultipleStorageDomainsValidator ( disksList ) ; return ( validate ( msdValidator.allDomainsHaveSpaceForNewDisks ( disksList ) ) ) && ( validate ( msdValidator.allDomainsWithinThresholds ( ) ) ) ; }
public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : getParameters ( ) . getVmTemplate ( ) . getDiskList ( ) ) { list.add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( disk.getQuotaId ( ) , null , QuotaConsumptionParameter.QuotaAction.CONSUME , imageToDestinationDomainMap.get ( disk.getId ( ) ) , ( ( double ) ( disk.getSizeInGigabytes ( ) ) ) ) ) ; } return list ; }
private void verifyVersionEqual ( java.lang.Object returnValue , int major , int minor , int build ) { org.ovirt.engine.core.compat.Version version = ( ( org.ovirt.engine.core.compat.Version ) ( returnValue ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( version.getMajor ( ) , major ) ; org.junit.jupiter.api.Assertions.assertEquals ( version.getMinor ( ) , minor ) ; org.junit.jupiter.api.Assertions.assertEquals ( version.getBuild ( ) , build ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , version.getRevision ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ManageGlusterSwiftModel innerGlusterSwiftModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ManageGlusterSwiftModel ) ( result.getState ( ) ) ) ; innerGlusterSwiftModel.stopProgress ( ) ; for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase : result.getReturnValue ( ) ) { } cancel ( ) ; updateGlusterDetails ( ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain mockGetExistingDomain ( boolean answerWithDomain ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = java.util.Collections.emptyList ( ) ; if ( answerWithDomain ) { sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.getStorageStaticData ( ) . setConnection ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ) ; domains = java.util.Collections.singletonList ( sd ) ; } org.mockito.Mockito.doReturn ( createQueryReturnValueWith ( domains ) ) . when ( backend ) . runInternalQuery ( org.mockito.ArgumentMatchers.eq ( QueryType.GetExistingStorageDomainList ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class ) ) ; return sd ; }
protected boolean canDoAction ( ) { if ( ( ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.getParameters ( ) . getClusterId ( ) ) == null ) || ( ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.getVdsGroup ( ) ) == null ) ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID ) ; return false ; } if ( ! ( super . canDoAction ( ) ) ) { return false ; } return true ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { NON_EXISTANT_GUID } , null ) ; control.replay ( ) ; try { collection.remove ( org.ovirt.engine.api.restapi.resource.NON_EXISTANT_GUID.toString ( ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private static void handleErrorLog ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > tempProblematicRepoFileList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.RepoImage > ( ) ; org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage = new org.ovirt.engine.core.common.businessentities.storage.RepoImage ( ) ; repoImage.setStoragePoolId ( storagePoolId ) ; repoImage.setRepoDomainId ( storageDomainId ) ; repoImage.setFileType ( imageType ) ; tempProblematicRepoFileList.add ( repoImage ) ; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog ( tempProblematicRepoFileList ) ; }
protected void onLogin ( final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . init ( ) ; org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . getReportsInitEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability ( ) ; } } ) ; performLogin ( loginModel ) ; }
public void getVmEmptyId ( ) { final org.ovirt.engine.core.common.businessentities.VM v = null ; b.setVm ( v ) ; b.setVmId ( Guid.Empty ) ; final org.ovirt.engine.core.common.businessentities.VM vm = b.getVm ( ) ; org.junit.Assert.assertNull ( vm ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase notAllowToRunAction ( org.ovirt.engine.core.common.action.VdcActionType actionType ) { java.lang.String mode = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdcOptionDao ( ) . getByNameAndVersion ( ConfigValues.EngineMode.name ( ) , ConfigCommon.defaultConfigurationVersion ) . getoption_value ( ) ; if ( EngineWorkingMode.MAINTENANCE.name ( ) . equalsIgnoreCase ( mode ) ) { return getErrorCommandReturnValue ( VdcBllMessages.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE ) ; } else if ( EngineWorkingMode.PREPARE.name ( ) . equalsIgnoreCase ( mode ) ) { return notAllowedInPrepForMaintMode ( actionType ) ; } return null ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn finalizeMerge ( java.lang.String spUUID , java.util.Map < java.lang.String , java.lang.String > subchainInfo ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "StoragePool.finalizeMerge" ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "subchainInfo" , subchainInfo ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "uuid" ) ; return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn ( response ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.image_storage_domain_map entity ) { getCallsHandler ( ) . executeModification ( "Insertimage_storage_domain_map" , getCustomMapSqlParameterSource ( ) . addValue ( "image_id" , entity.getimage_id ( ) ) . addValue ( "storage_domain_id" , entity.getstorage_domain_id ( ) ) . addValue ( "quota_id" , entity.getQuotaId ( ) ) . addValue ( "disk_profile_id" , entity.getDiskProfileId ( ) ) ) ; }
public static void getNumberOfActiveVmsInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer.valueOf ( 0 ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetNumberOfActiveVmsInVdsGroupByVdsGroupId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void InitTest ( ) { mockOsRepository ( ) ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.dal.dbbroker.DbFacade.class , dbFacade ) ; }
private void doQueryExecute ( org.ovirt.engine.api.extensions.ExtMap input , org.ovirt.engine.api.extensions.ExtMap output ) { org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.Opaque opaque = input.< org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.Opaque > get ( Authz.InvokeKeys.QUERY_OPAQUE ) ; output.put ( Authz.InvokeKeys.QUERY_RESULT , ( ( opaque.firstCall ) && ( opaque.found ) ? java.util.Arrays.asList ( adminUser ) : null ) ) ; opaque.firstCall = false ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterService ) ) { return false ; } org.ovirt.engine.core.common.businessentities.gluster.GlusterService other = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterService ) ( obj ) ) ; return ( ( java.util.Objects.equals ( id , other.id ) ) && ( ( serviceType ) == ( other.serviceType ) ) ) && ( java.util.Objects.equals ( serviceName , other.serviceName ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > pools = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; if ( ( pools != null ) && ( ( pools.size ( ) ) > 0 ) ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = pools.get ( 0 ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getClusterList ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool.getId ( ) ) ; } }
public org.ovirt.engine.api.model.IpAddressAssignment adapt ( org.ovirt.engine.api.v3.types.V3IpAddressAssignment from ) { org.ovirt.engine.api.model.IpAddressAssignment to = new org.ovirt.engine.api.model.IpAddressAssignment ( ) ; if ( from.isSetAssignmentMethod ( ) ) { to.setAssignmentMethod ( org.ovirt.engine.api.model.BootProtocol.fromValue ( from.getAssignmentMethod ( ) ) ) ; } if ( from.isSetIp ( ) ) { to.setIp ( org.ovirt.engine.api.v3.adapters.V3InAdapters.adaptIn ( from.getIp ( ) ) ) ; } return to ; }
public void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) . withoutRefresh ( ) , aQuery ) ; }
public java.util.List < org.ovirt.engine.sdk.decorators.TemplateGraphicsConsole > list ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ; return list ( url , org.ovirt.engine.sdk.entities.GraphicsConsoles.class , org.ovirt.engine.sdk.decorators.TemplateGraphicsConsole.class ) ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } if ( ( ( getAllUpServers ( ) ) == null ) || ( getAllUpServers ( ) . isEmpty ( ) ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND ) ; return false ; } return true ; }
private void addMissingHostNicVfsConfigsToDb ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > hostNicVfsConfigsToAdd = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.HostDevice device : fetchedMap.values ( ) ) { if ( networkDeviceHelper.isSriovDevice ( device ) ) { addToListIfNotNull ( createHostNicVfsConfigToAddIfNotExist ( device ) , hostNicVfsConfigsToAdd ) ; } } if ( ! ( hostNicVfsConfigsToAdd.isEmpty ( ) ) ) { hostNicVfsConfigDao.saveAllInBatch ( hostNicVfsConfigsToAdd ) ; } }
public void test32BitMemoryExceedsLimit ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setClusterCompatibilityVersion ( Version.v4_0 ) ; vm.setVmMemSizeMb ( ( ( org.ovirt.engine.core.bll.validator.RunVmValidatorTest.MEMORY_LIMIT_32_BIT ) + 1 ) ) ; mockOsRepository ( ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateMemorySize ( vm ) , false , EngineMessage.ACTION_TYPE_FAILED_MEMORY_EXCEEDS_SUPPORTED_LIMIT ) ; }
public void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return backendInternal ; }
org.ovirt.engine.core.bll.ValidationResult modifiedAttachmentNotRemoved ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment ) { org.ovirt.engine.core.compat.Guid networkAttachmentId = networkAttachment.getId ( ) ; if ( isNewAttachment ( networkAttachmentId ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } boolean attachmentInRemoveList = params.getRemovedNetworkAttachments ( ) . contains ( networkAttachmentId ) ; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENT_IN_BOTH_LISTS ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , networkAttachmentId.toString ( ) ) ) . when ( attachmentInRemoveList ) ; }
private java.lang.String produceCollectionVariables ( ) { java.util.List < java.lang.String > keys = new java.util.ArrayList ( collectionsHolder.keySet ( ) ) ; java.util.Collections.sort ( keys ) ; java.lang.StringBuilder buffer = new java.lang.StringBuilder ( ) ; for ( java.lang.String key : keys ) { org.ovirt.engine.sdk.codegen.holders.CollectionHolder ch = collectionsHolder.get ( key ) ; java.lang.String name = ch.getName ( ) ; buffer.append ( variableTemplate.getTemplate ( name , org.ovirt.engine.sdk.codegen.utils.StringUtils.toLowerCase ( name ) ) ) ; } return buffer.toString ( ) ; }
public void getDataCenterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "DataCenter: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
public void getAllErrata ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Erratum > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetErrataForEngine , new org.ovirt.engine.core.common.queries.GetErrataCountsParameters ( ) , aQuery ) ; }
public void tearDown ( ) throws java.lang.Exception { org.mockito.Mockito.verify ( queryStartEvent , org.mockito.Mockito.atLeastOnce ( ) ) . raise ( org.ovirt.engine.ui.frontend.Frontend.class , EventArgs.EMPTY ) ; org.mockito.Mockito.verify ( queryCompleteEvent , org.mockito.Mockito.atLeastOnce ( ) ) . raise ( org.ovirt.engine.ui.frontend.Frontend.class , EventArgs.EMPTY ) ; org.junit.Assert.assertEquals ( "Context should be 'test'" , frontend.getCurrentContext ( ) , "test" ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object ) { if ( ( object != null ) && ( ( object.getDnsServers ( ) ) != null ) ) { return java.lang.String.join ( ", " , object.getDnsServers ( ) ) ; } else { return "" ; } }
public void reuseSession ( ) { java.lang.String sessionId = getSessionId ( ) ; if ( sessionId != null ) { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionAcquiredEvent.fire ( eventBus , sessionId ) ; } else { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.logger.severe ( "Engine REST API session ID is not available" ) ; } }
public void stopHostWhichIsPoweredDown ( ) { setupCommand ( setupCommandParams ( FenceActionType.STOP ) ) ; setupBrokerResult ( createBrokerResultMap ( 0 , "" , "off" , null ) ) ; command.execute ( ) ; org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = ( ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ) ( command.getVDSReturnValue ( ) . getReturnValue ( ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( Status.SKIPPED_ALREADY_IN_STATUS , result.getStatus ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( PowerStatus.UNKNOWN , result.getPowerStatus ( ) ) ; }
private void updateDisplayAndGraphics ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster ( ) ; java.lang.Integer osType = getOSType ( ) . getSelectedItem ( ) ; if ( ( cluster == null ) || ( osType == null ) ) { return ; } java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.DisplayType > > graphicsAndDisplays = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getGraphicsAndDisplays ( osType , cluster.getcompatibility_version ( ) ) ; initDisplayModels ( graphicsAndDisplays ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( p.getUsageCpuPercent ( ) ) >= ( p.getHighUtilization ( ) ) ) && ( ( p.getCpuOverCommitTimestamp ( ) ) != null ) ) && ( ( ( new java.util.Date ( ) . getTime ( ) ) - ( p.getCpuOverCommitTimestamp ( ) . getTime ( ) ) ) >= ( ( ( p.getCpuOverCommitDurationMinutes ( ) ) * 1000 ) * 60 ) ) ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Cell.Context context , com.google.gwt.dom.client.Element parent , java.lang.Boolean value , java.lang.String tooltipContent , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < java.lang.Boolean > valueUpdater ) { java.lang.String tooltip ; if ( tooltipContent == null ) { tooltip = getTooltip ( value ) ; } else { tooltip = tooltipContent ; } org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement ( tooltip , parent ) ; super . onBrowserEvent ( context , parent , value , event , valueUpdater ) ; }
public void testBootFromNetworkNoNetwork ( ) { org.ovirt.engine.core.dao.network.VmNetworkInterfaceDao dao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDao.class ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ) . when ( dao ) . getAllForVm ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( dao ) . when ( runVmValidator ) . getVmNetworkInterfaceDao ( ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , BootSequence.N , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ) , false , VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK ) ; }
public void removedLabelExistsOnTheHostNotExistValid ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( ) ; nic.setLabels ( createSet ( "lbl1" ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = java.util.Collections.singletonList ( nic ) ; org.junit.Assert.assertThat ( createNicLabelValidator ( nics ) . removedLabelExistsOnTheHost ( "lbl1" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.Integer > result = Connect ( org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getVds ( ) . getId ( ) ) ; setSucceeded ( result.getFirst ( ) ) ; if ( ! ( result.getFirst ( ) ) ) { setErrorMessageAtReturn ( result ) ; } }
public void getZeroSnapshotsByMemory ( ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot ( ) ; snapshot.setMemoryDiskId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; snapshot.setMetadataDiskId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertEquals ( 0 , dao.getNumOfSnapshotsByDisks ( snapshot ) ) ; }
private org.ovirt.engine.core.compat.Guid getPrestartedVmToAttach ( org.ovirt.engine.core.compat.Guid vmPoolId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmPoolMap > vmPoolMaps = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolDao ( ) . getVmMapsInVmPoolByVmPoolIdAndStatus ( vmPoolId , VMStatus.Up ) ; if ( vmPoolMaps != null ) { for ( org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps ) { if ( canAttachPrestartedVmToUser ( map.getvm_guid ( ) ) ) { return map.getvm_guid ( ) ; } } } return org.ovirt.engine.core.compat.Guid.Empty ; }
public static void LoginAsync ( final java.lang.String userName , final java.lang.String password , final java.lang.String domain , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance ( ) ; org.ovirt.engine.ui.frontend.Frontend.LoginAsync ( userName , password , domain , callback , service ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > filterByArchitecture ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters , org.ovirt.engine.core.common.businessentities.ArchitectureType targetArchitecture ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > filteredClusters = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters ) { if ( cluster.getArchitecture ( ) . equals ( targetArchitecture ) ) { filteredClusters.add ( cluster ) ; } } return filteredClusters ; }
public void execute ( int iterationId ) { try { org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( getStorageDomain ( ) . getstorage_type ( ) ) . connectStorageToDomainByVdsId ( getStorageDomain ( ) , getVdss ( ) . get ( iterationId ) . getId ( ) ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.storage.ConnectSingleAsyncOperation.log.errorFormat ( "Failed to connect host {0} to storage pool {1}. Exception: {3}" , getVdss ( ) . get ( iterationId ) . getVdsName ( ) , getStoragePool ( ) . getname ( ) , e ) ; } }
public void confFileNotExistInTar ( ) { givenListOfImagesAndVolumes ( ) ; givenTheWantedDiskImage ( ) ; mockVdcCommand ( VdcActionType.RetrieveImageData , successfulVdcReturnValue ( new byte [ 10 ] ) ) ; java.util.Map < java.lang.String , java.lang.String > config = fetchConfig ( ) ; org.junit.Assert.assertThat ( config , org.hamcrest.core.Is.is ( java.util.Collections.emptyMap ( ) ) ) ; }
public void addAllocateNewMacAddress ( ) { org.ovirt.engine.core.common.businessentities.network.VmNic iface = createNewInterface ( ) ; java.lang.String newMac = org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ; org.mockito.Mockito.when ( macPoolManager.allocateNewMac ( ) ) . thenReturn ( newMac ) ; vmInterfaceManager.add ( iface , org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance ( ) , true , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VERSION_3_2 ) ; org.junit.Assert.assertEquals ( newMac , iface.getMacAddress ( ) ) ; }
public void useDefaultMTU ( ) { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer > > validate = validate ( new org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer ( 0 ) ) ; junit.framework.Assert.assertTrue ( ( ( validate.size ( ) ) == 0 ) ) ; }
private void localize ( ) { networkEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.networkVnicProfile ( ) ) ; nameEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.nameVnicProfile ( ) ) ; descriptionEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.descriptionVnicProfile ( ) ) ; passthroughEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.passthorughVnicProfile ( ) ) ; portMirroringEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.portMirroringVnicProfile ( ) ) ; publicUseEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.publicUseVnicProfile ( ) ) ; networkQoSEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.profileQoSInstanceTypeLabel ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterVolumeResetBrickStart ( java.lang.String volumeName , java.lang.String existingBrickDir ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.resetBrickStart" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "existingBrick" , existingBrickDir ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.VmTemplate value ) { cluster = null ; super . setEntity ( value ) ; if ( ( getEntity ( ) ) != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getClusterById ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object listModel , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( returnValue ) ) ; updateActionAvailability ( ) ; } } ) , getEntity ( ) . getClusterId ( ) ) ; } }
public void testUpdateAll ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmDynamic existingVm2 = dao.get ( new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f4356" ) ) ; existingVm.setStatus ( VMStatus.Down ) ; existingVm2.setIp ( "111" ) ; existingVm2.setFqdn ( "localhost.localdomain" ) ; dao.updateAll ( java.util.Arrays.asList ( existingVm , existingVm2 ) ) ; org.junit.Assert.assertEquals ( existingVm , dao.get ( existingVm.getId ( ) ) ) ; org.junit.Assert.assertEquals ( existingVm2 , dao.get ( existingVm2.getId ( ) ) ) ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public synchronized boolean hasTasksForEntityIdAndAction ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.action.VdcActionType type ) { if ( ( _tasks ) != null ) { for ( org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values ( ) ) { if ( ( isCurrentTaskLookedFor ( id , task ) ) && ( type.equals ( task.getParameters ( ) . getDbAsyncTask ( ) . getActionType ( ) ) ) ) { return true ; } } } return false ; }
public void enableLoadBalancer ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Start scheduling to enable vds load balancer" ) ; org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class ) . scheduleAFixedDelayJob ( this , "performLoadBalancing" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Finished scheduling to enable vds load balancer" ) ; } }
public void testValidateQosOverriddenInterfacesWhenNoAttachmentsPassed ( ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . build ( ) ; org.junit.Assert.assertThat ( validator.validateQosOverriddenInterfaces ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected org.ovirt.engine.core.bll.ValidationResult validateInterfacesAttachedToVmNetworks ( final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks , java.util.Set < java.lang.String > interfaceNetworkNames ) { java.util.List < java.lang.String > nonVmNetworkNames = org.ovirt.engine.core.utils.NetworkUtils.filterNonVmNetworkNames ( clusterNetworks , interfaceNetworkNames ) ; return nonVmNetworkNames.isEmpty ( ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK , java.lang.String.format ( "$networks %1$s" , org.apache.commons.lang.StringUtils.join ( nonVmNetworkNames , "," ) ) ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.hosts.MultipleHostsModel object ) { hostsTable.asEditor ( ) . edit ( object.getHosts ( ) ) ; driver.edit ( object ) ; applyPasswordButton.setCommand ( object.getApplyPasswordCommand ( ) ) ; configureFirewallEditor.asCheckBox ( ) . setChecked ( true ) ; configureFirewallEditor.asCheckBox ( ) . addClickListener ( new com.google.gwt.user.client.ui.ClickListener ( ) { @ java.lang.Override public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { object.setConfigureFirewall ( configureFirewallEditor.asCheckBox ( ) . isChecked ( ) ) ; } } ) ; }
private void addDisk ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext ( VdcActionType.AddDisk , buildAddDiskParameters ( disk ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( returnValue.getFault ( ) . getError ( ) , java.lang.String.format ( "Failed to create disk! %s" , disk.getDiskAlias ( ) ) ) ; } org.ovirt.engine.core.bll.HibernateVmCommand.getTaskIdList ( ) . addAll ( returnValue.getInternalVdsmTaskIdList ( ) ) ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQuery ( org.ovirt.engine.core.common.queries.QueryType search , org.ovirt.engine.core.common.queries.VdcQueryParametersBase searchParameters ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Server: RunQuery invoked!" ) ; debugQuery ( search , searchParameters ) ; searchParameters.setSessionId ( getEngineSessionId ( ) ) ; if ( ( searchParameters.getCorrelationId ( ) ) == null ) { searchParameters.setCorrelationId ( org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId ( ) ) ; } return getBackend ( ) . runQuery ( search , searchParameters ) ; }
private java.util.Map.Entry < java.lang.String , java.lang.String > getTimezoneEntryByKey ( java.lang.String key , java.lang.Iterable < java.util.Map.Entry < java.lang.String , java.lang.String > > timeZones ) { for ( java.util.Map.Entry < java.lang.String , java.lang.String > entry : timeZones ) { if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( key , entry.getKey ( ) ) ) { return entry ; } } return null ; }
public void getFCStorageTypeForLun ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( ) ; lun.setLunConnections ( connections ) ; org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = command.getLUNStorageType ( lun ) ; org.junit.Assert.assertEquals ( "Lun disk should be of FC storage type since it does not had connections" , StorageType.FCP , storageType ) ; }
private org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > getNetworkBusinessEntityMap ( ) { if ( ( networkBusinessEntityMap ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getNetworkDao ( ) . getAllForCluster ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsGroupId ( ) ) ; networkBusinessEntityMap = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( networks ) ; } return networkBusinessEntityMap ; }
protected void lockEntities ( ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( getSnapshot ( ) ) ; getSnapshotDao ( ) . updateStatus ( sourceSnapshotId , SnapshotStatus.LOCKED ) ; lockVmWithCompensationIfNeeded ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; } } ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.freeLock ( ) ; }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskLiveStep getInitialMergeStepForImage ( org.ovirt.engine.core.compat.Guid imageId ) { org.ovirt.engine.core.common.businessentities.Image image = org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getImageDao ( ) . get ( imageId ) ; if ( ( ( image.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageStatus.ILLEGAL ) ) && ( image.getParentId ( ) . equals ( Guid.Empty ) ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > children = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDiskImageDao ( ) . getAllSnapshotsForParent ( imageId ) ; if ( children.isEmpty ( ) ) { org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.log.info ( "Image has been previously merged, proceeding with deletion" ) ; return org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskLiveStep.DESTROY_IMAGE ; } } return org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskLiveStep.EXTEND ; }
public static void lockVm ( final org.ovirt.engine.core.common.businessentities.VmDynamic vm , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { compensationContext.snapshotEntityStatus ( vm ) ; org.ovirt.engine.core.bll.VmHandler.lockVm ( vm.getId ( ) ) ; compensationContext.stateChanged ( ) ; return null ; } } ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryRetVal = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; java.lang.String signature = ( ( java.lang.String ) ( queryRetVal.getReturnValue ( ) ) ) ; org.ovirt.engine.ui.common.uicommon.WebClientConsoleInvoker invoker = new org.ovirt.engine.ui.common.uicommon.WebClientConsoleInvoker ( signature , getTicket ( ) , getClientUrl ( ) ) ; invoker.invokeClientNative ( ) ; }
protected static org.ovirt.engine.core.common.businessentities.storage.ImageStatus mapCinderVolumeStatusToImageStatus ( org.ovirt.engine.core.common.businessentities.storage.CinderVolumeStatus cinderVolumeStatus ) { switch ( cinderVolumeStatus ) { case Available : return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ; case Creating : case Deleting : case Extending : return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED ; case Error : case ErrorDeleting : case ErrorExtending : return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ; default : return null ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > getInterfaces ( ) { if ( ( interfaces ) == null ) { interfaces = getVmNicDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; } return interfaces ; }
protected void executeCommand ( ) { if ( isMemoryRemovable ( ) ) { java.util.List < org.ovirt.engine.core.compat.Guid > guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString ( org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters ( ) . getMemoryVolumes ( ) ) ; org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDumpDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters ( guids.get ( 2 ) ) ; removeMemoryDumpDiskParameters.setShouldBeLogged ( false ) ; runInternalAction ( VdcActionType.RemoveDisk , removeMemoryDumpDiskParameters ) ; org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters ( guids.get ( 4 ) ) ; removeMemoryMetadataDiskParameters.setShouldBeLogged ( false ) ; runInternalAction ( VdcActionType.RemoveDisk , removeMemoryMetadataDiskParameters ) ; } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded ( true ) ; }
protected boolean attachUserToSession ( ) { boolean authenticated = true ; if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( org.ovirt.engine.core.bll.LoginBaseCommand.getParameters ( ) . getSessionId ( ) ) ) ) { org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . setUser ( org.ovirt.engine.core.bll.LoginBaseCommand.getParameters ( ) . getSessionId ( ) , org.ovirt.engine.core.bll.LoginBaseCommand.getCurrentUser ( ) ) ; } else if ( ! ( org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . setUser ( org.ovirt.engine.core.bll.LoginBaseCommand.getCurrentUser ( ) ) ) ) { addCanDoActionMessage ( VdcBllMessages.USER_CANNOT_LOGIN_SESSION_MISSING ) ; authenticated = false ; } return authenticated ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.quota.QuotaModel object ) { this . model = object ; if ( ! ( firstTime ) ) { registerHandlers ( ) ; firstTime = true ; updateSliders ( ) ; } quotaClusterTable.asEditor ( ) . edit ( object.getQuotaClusters ( ) ) ; quotaStorageTable.asEditor ( ) . edit ( object.getQuotaStorages ( ) ) ; driver.edit ( object ) ; }
public static java.util.Map < org.ovirt.engine.core.common.businessentities.storage.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > filterConnectionsByStorageType ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun ) { java.util.Map < org.ovirt.engine.core.common.businessentities.storage.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > storageConnectionsForStorageTypeMap = new java.util.EnumMap < org.ovirt.engine.core.common.businessentities.storage.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > ( org.ovirt.engine.core.common.businessentities.storage.StorageType.class ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections lunConnections : lun.getLunConnections ( ) ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap ( lunConnections.getstorage_type ( ) , lunConnections , storageConnectionsForStorageTypeMap ) ; } return storageConnectionsForStorageTypeMap ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetRoleActionGroupsByRoleId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , org.ovirt.engine.api.restapi.resource.BackendPermitsResourceTest.setUpActionGroups ( ) , failure ) ; }
public void testNonExistingStorageDomain ( ) { org.mockito.Mockito.when ( command.getStorageDomainStaticDao ( ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . executeHSMGetStorageDomainInfo ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; }
public void externalVMWhenMissingInDb ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data ) { initMocks ( data , false ) ; mockVmStatic ( false ) ; mockVmNotInDb ( data ) ; org.junit.Assume.assumeTrue ( ( ( data.dbVm ( ) ) == null ) ) ; org.junit.Assume.assumeTrue ( ( ( data.vdsmVm ( ) ) != null ) ) ; vmAnalyzer.analyze ( ) ; org.junit.Assert.assertTrue ( vmAnalyzer.isUnmanagedVm ( ) ) ; }
protected org.ovirt.engine.ui.common.uicommon.WebsocketProxyConfig getConfig ( ) { if ( ( config ) == null ) { config = new org.ovirt.engine.ui.common.uicommon.WebsocketProxyConfig ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigValues.WebSocketProxy ) ) ) , getOptions ( ) . getHost ( ) ) ; } return config ; }
public boolean RunForSingleConnectionInHost ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid storagePoolId , int type ) { boolean returnValue = false ; org.ovirt.engine.core.common.businessentities.storage_pool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . get ( storagePoolId ) ; org.ovirt.engine.core.compat.Guid vdsId = ( ( pool.getspm_vds_id ( ) ) != null ) ? pool.getspm_vds_id ( ) . getValue ( ) : org.ovirt.engine.core.compat.Guid.Empty ; if ( ! ( vdsId.equals ( Guid.Empty ) ) ) { returnValue = RunConnectionStorageToDomain ( storageDomain , vdsId , type ) ; } return returnValue ; }
public static void GetRpmVersionViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.KatelloErratum model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , org.ovirt.engine.api.restapi.utils.HexUtils.hex2string ( model.getId ( ) ) ) ; org.junit.Assert.assertEquals ( DESCRIPTIONS [ index ] , model.getDescription ( ) ) ; verifyLinks ( model ) ; }
public void testGetLunsToUpdateInDbSameLunIdDiffPvId ( ) { org.ovirt.engine.core.compat.Guid lunId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > existingLunsToUpdateInDb = getLunsToUpdateInDb ( lunId , lunId , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) . get ( command.updateLunsHandler ) ; assertLunIdInList ( existingLunsToUpdateInDb , lunId ) ; }
public void testGet ( ) { newVdsInterface.setVdsId ( org.ovirt.engine.core.dao.InterfaceDAOTest.VDS_ID ) ; dao.saveInterfaceForVds ( newVdsInterface ) ; dao.saveStatisticsForVds ( newVdsInterface.getStatistics ( ) ) ; org.ovirt.engine.core.common.businessentities.VdsNetworkInterface result = dao.get ( newVdsInterface.getId ( ) ) ; org.junit.Assert.assertEquals ( newVdsInterface , result ) ; }
protected void removeDiskFromDbCallBack ( final org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderVolume ) { final org.ovirt.engine.core.common.businessentities.Snapshot updated = getSnapshotWithoutCinderVolume ( cinderVolume ) ; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope ( TransactionScopeOption.Required , new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object runInTransaction ( ) { removeDiskFromDb ( cinderVolume , updated ) ; return null ; } } ) ; }
private void setSelectedOSTypeById ( int osId ) { for ( java.lang.Integer osIdList : getModel ( ) . getOSType ( ) . getItems ( ) ) { if ( ( osIdList.intValue ( ) ) == osId ) { getModel ( ) . getOSType ( ) . setSelectedItem ( osIdList ) ; break ; } } }
private void fetchImageTemplates ( ) { if ( ( imageTemplates ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > allImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDiskDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId ( ) ) ; imageTemplates = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( allImages , false , false , true ) ; imageTemplates.addAll ( org.ovirt.engine.core.bll.ImagesHandler.filterDisksBasedOnCinder ( allImages , true ) ) ; } }
public void testGetVmNumaNodeInfoByBdsGroupId ( ) { org.ovirt.engine.core.compat.Guid vdsGroupId = new org.ovirt.engine.core.compat.Guid ( "b399944a-81ab-4ec5-8266-e19ba7c3c9d1" ) ; org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.compat.Guid.createGuidFromString ( "77296e00-0cad-4e5a-9299-008a7b6f4354" ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.VmNumaNode > > result = vmNumaNodeDao.getVmNumaNodeInfoByClusterId ( vdsGroupId ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 1 , result.size ( ) ) ; org.junit.Assert.assertEquals ( 2 , result.get ( vmId ) . size ( ) ) ; }
private void memSize_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.updateMinAllocatedMemory ( ) ; if ( ( getMemSize ( ) . getEntity ( ) ) != null ) { setNumaChanged ( true ) ; maxMemorySize.setEntity ( org.ovirt.engine.core.common.utils.VmCommonUtils.getMaxMemorySizeDefault ( getMemSize ( ) . getEntity ( ) ) ) ; } }
protected void handleAutoLogin ( org.ovirt.engine.ui.common.auth.AutoLoginData autoLoginData ) { final org.ovirt.engine.core.common.businessentities.DbUser loggedUser = autoLoginData.getDbUser ( ) ; com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { lockInteractionManager.showLoadingIndicator ( ) ; getLoginModel ( ) . autoLogin ( loggedUser ) ; } } ) ; user.setAutoLogin ( true ) ; }
protected void updateSgIoUnfilteredChangeability ( ) { if ( ! ( getIsScsiPassthrough ( ) . getEntity ( ) ) ) { getIsSgIoUnfiltered ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.cannotEnableSgioWhenScsiPassthroughDisabled ( ) ) ; getIsSgIoUnfiltered ( ) . setIsChangeable ( false ) ; getIsSgIoUnfiltered ( ) . setEntity ( false ) ; return ; } getIsSgIoUnfiltered ( ) . setIsChangeable ( isEditEnabled ( ) ) ; }
public void testDiskAttachedToVMFail ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) ; org.mockito.Mockito.when ( vmDao.getVmsListForDisk ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.anyBoolean ( ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.junit.Assert.assertThat ( validator.isDiskAttachedToVm ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_ATTACHED_TO_VM ) ) ; }
public static java.lang.Integer getEffectiveCpuCores ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsGroupDao ( ) . get ( vds.getVdsGroupId ( ) ) ; return org.ovirt.engine.core.bll.scheduling.SlaValidator.getEffectiveCpuCores ( vds , ( vdsGroup != null ? vdsGroup.getCountThreadsAsCores ( ) : false ) ) ; }
public void setItems ( java.util.Collection value ) { if ( ( items ) != value ) { itemsChanging ( value , items ) ; items = value ; itemsChanged ( ) ; getItemsChangedEvent ( ) . raise ( this , EventArgs.EMPTY ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Items" ) ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.snapshot ( vmId , disks ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void executeNotRespondingTreatment ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { final org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( host.getId ( ) , org.ovirt.engine.core.common.businessentities.pm.FenceActionType.RESTART ) ; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.VdsNotRespondingTreatment , params , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; } } ) ; } }
public void testRemoveByRemoveIsoDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain ( FixturesTool.SHARED_ISO_STORAGE_DOMAIN_FOR_SP2_AND_SP3 , ImageFileType.ISO ) ; org.junit.Assert.assertNotNull ( listOfRepoFiles ) ; org.junit.Assert.assertFalse ( listOfRepoFiles.isEmpty ( ) ) ; org.ovirt.engine.core.dao.StorageDomainDao storageDomainDao = dbFacade.getStorageDomainDao ( ) ; storageDomainDao.remove ( FixturesTool.SHARED_ISO_STORAGE_DOMAIN_FOR_SP2_AND_SP3 ) ; listOfRepoFiles = getActiveIsoDomain ( ) ; org.junit.Assert.assertNotNull ( listOfRepoFiles ) ; org.junit.Assert.assertTrue ( listOfRepoFiles.isEmpty ( ) ) ; }
public void isTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery , java.lang.String templateName , org.ovirt.engine.core.compat.Guid datacenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean convert ( java.lang.Object source ) { return ( source != null ) && ( ! ( ( java.lang.Boolean ) ( source ) ) ) ; } } ; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( templateName ) ; params.setDatacenterId ( datacenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , params , aQuery ) ; }
public void update ( org.ovirt.engine.core.common.businessentities.UserProfile profile ) { getCallsHandler ( ) . executeModification ( "UpdateUserProfile" , createIdParameterMapper ( profile.getId ( ) ) . addValue ( "user_id" , profile.getUserId ( ) ) . addValue ( "ssh_public_key_id" , profile.getSshPublicKeyId ( ) ) . addValue ( "ssh_public_key" , profile.getSshPublicKey ( ) ) ) ; }
private int calculateValue ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster ) { int res = 0 ; if ( networkCluster != null ) { if ( networkCluster.isDisplay ( ) ) { res += 4 ; } if ( networkCluster.isMigration ( ) ) { res += 2 ; } if ( networkCluster.isGluster ( ) ) { res += 1 ; } } return res ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getAllInterfacesByLabelForCluster ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String label ) { return nicsContainingLabel ( getAllInterfacesByClusterId ( clusterId ) , label ) ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public void validateVmMemoryCanStartOnVdsHostTooSmallButLowOverhead ( ) { vds.setMemFree ( 8835L ) ; org.mockito.Mockito.doReturn ( 0 ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
private void commit ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RestoreAllSnapshots , new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters ( vm.getId ( ) , org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT ) , null , null ) ; } }
private void doTestBadAddNetworkAttachment ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpVerifyHostExpectations ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.AddNetworkAttachment , org.ovirt.engine.core.common.action.NetworkAttachmentParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , canDo , success ) ) ; try { collection.add ( getModel ( 0 ) ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown ( ) { initStorageDomain ( srcStorageId ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) . when ( diskValidator ) . isDiskPluggedToAnyNonDownVm ( org.mockito.ArgumentMatchers.anyBoolean ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { com.google.gwt.view.client.SingleSelectionModel SingleSelectionModel = ( ( com.google.gwt.view.client.SingleSelectionModel ) ( event.getSource ( ) ) ) ; selectedLunModel = ( ( SingleSelectionModel.getSelectedObject ( ) ) == null ) ? selectedLunModel : ( ( org.ovirt.engine.ui.uicommonweb.models.storage.LunModel ) ( SingleSelectionModel.getSelectedObject ( ) ) ) ; if ( ( selectedLunModel ) != null ) { updateSelectedLunWarning ( selectedLunModel ) ; sortedLeafModel.setSelectedItem ( selectedLunModel ) ; } }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage ( ) { if ( ( diskImage ) == null ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDiskDao ( ) . get ( org.ovirt.engine.core.bll.ExportRepoImageCommand.getParameters ( ) . getImageGroupID ( ) ) ; if ( ( disk != null ) && ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) ) { diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; } } return diskImage ; }
private void onShutdown ( ) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow ( ) ) ) ; onPowerAction ( VdcActionType.ShutdownVm , new org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.PowerActionParametersFactory < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase createActionParameters ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.common.action.ShutdownVmParameters ( vm.getId ( ) , true , model.getReason ( ) . getEntity ( ) ) ; } } ) ; }
protected void updateData ( ) { java.util.List < T > items = ( ( org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel ( ) . getItems ( ) ) == null ) ? null : new java.util.ArrayList < T > ( org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel ( ) . getItems ( ) ) ; if ( items != null ) { if ( ! ( org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel ( ) . hasItemsSorted ( ) ) ) { java.util.Collections.sort ( items , defaultComparator ) ; } updateDataProvider ( items ) ; } }
public void testPreferWithValue ( ) { org.junit.Assert.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "persistent-auth=false" ) ) ; org.junit.Assert.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "persistent-auth=true" ) ) ; org.junit.Assert.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "persistent-auth=junk" ) ) ; org.junit.Assert.assertEquals ( FiltersHelper.PREFER_NEW_AUTH , getPrefer ( "new-auth=false" ) ) ; org.junit.Assert.assertEquals ( ( ( FiltersHelper.PREFER_PERSISTENCE_AUTH ) | ( FiltersHelper.PREFER_NEW_AUTH ) ) , getPrefer ( "persistent-auth=false, new-auth=false" ) ) ; }
private void updateIdForSingleHost ( org.ovirt.engine.api.model.Host host , java.util.Set < org.ovirt.engine.core.compat.Guid > guidsSet ) { if ( ( host.isSetName ( ) ) && ( ! ( host.isSetId ( ) ) ) ) { org.ovirt.engine.core.compat.Guid hostGuid = getHostId ( host ) ; if ( hostGuid != null ) { guidsSet.add ( hostGuid ) ; host.setId ( hostGuid.toString ( ) ) ; } } else if ( host.isSetId ( ) ) { guidsSet.add ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( host.getId ( ) ) ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { osNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; initOsIds ( ) ; }
protected void addStorageDomainStatusIllegalMessage ( ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 ) ; org.ovirt.engine.core.common.businessentities.StorageDomainStatus status = getStorageDomainStatus ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus sharedStatus = getStorageDomainSharedStatus ( ) ; java.lang.Object messageParameter = status ; if ( ( status == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown ) ) && ( sharedStatus != null ) ) { messageParameter = sharedStatus ; } org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable ( "status" , messageParameter ) ; }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void startSubStep ( ) { asyncTaskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep ( this . getExecutionContext ( ) , org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getExecutionContext ( ) . getJob ( ) . getStep ( StepEnum.EXECUTING ) , getStepType ( ) , org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage ( getStepType ( ) , getStepMessageMap ( JobExecutionStatus.STARTED , null ) ) ) ; }
public void confFileNotExistInTar ( ) { givenListOfImagesAndVolumes ( ) ; givenTheWantedDiskImage ( ) ; mockVdcCommand ( ActionType.RetrieveImageData , successfulActionReturnValue ( new byte [ 10 ] ) ) ; java.util.Map < java.lang.String , java.lang.String > config = fetchConfig ( ) ; org.junit.Assert.assertThat ( config , org.hamcrest.core.Is.is ( java.util.Collections.emptyMap ( ) ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; return disk.isBoot ( ) ? org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.resources.bootableDiskIcon ( ) : null ; }
public void setUp ( ) { vm = createVm ( ) ; validator = new org.ovirt.engine.core.bll.validator.VmValidator ( vm ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDao ( ) ) . thenReturn ( vmNetworkInterfaceDao ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVnicProfileDao ( ) ) . thenReturn ( vnicProfileDao ) ; }
public static void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean value = getClone ( ) . getEntity ( ) ; if ( value ) { getNoClone ( ) . setEntity ( false ) ; if ( getApplyToAll ( ) . getEntity ( ) ) { getSuffix ( ) . setIsChangeable ( true ) ; } else { getName ( ) . setIsChangeable ( true ) ; } } }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertTrue ( model.isSparse ( ) ) ; assertTrue ( ( ! ( model.isBootable ( ) ) ) ) ; assertTrue ( model.isPropagateErrors ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession ( boolean populateVoId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = new org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession ( ) ; session.setMasterVolumeName ( "VOL1" ) ; if ( populateVoId ) { session.setMasterVolumeId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; } session.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; session.setSessionKey ( ( ( session.getId ( ) ) + ( session.getMasterVolumeName ( ) ) ) ) ; session.setStatus ( GeoRepSessionStatus.ACTIVE ) ; session.setSessionDetails ( getSessionDetailsList ( ) ) ; return session ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterVolumeGeoRepSessionDelete ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.String userName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionDelete" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , remoteHost ) . withParameter ( "remoteVolumeName" , remoteVolumeName ) . withOptionalParameter ( "remoteUserName" , userName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void testGetNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , null ) ; try { resource.get ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private static void handleErrorLog ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.ImageFileType imageType ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > tempProblematicRepoFileList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.RepoImage > ( ) ; org.ovirt.engine.core.common.businessentities.RepoImage repoImage = new org.ovirt.engine.core.common.businessentities.RepoImage ( ) ; repoImage.setStoragePoolId ( storagePoolId ) ; repoImage.setRepoDomainId ( storageDomainId ) ; repoImage.setFileType ( imageType ) ; tempProblematicRepoFileList.add ( repoImage ) ; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog ( tempProblematicRepoFileList ) ; }
public static void GetAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
public static void GetDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
protected void setUpEntityQueryExpectations ( int times , java.lang.Object failure ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpEntityQueryExpectations ( VdcQueryType.GetTemplateInterfacesByTemplateId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendTemplateNicsResourceTest.VM_ID } , getEntityList ( ) , failure ) ; } }
private boolean isDiskExistInVm ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > listVms = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmDAO ( ) . getVmsListForDisk ( disk.getId ( ) , true ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : listVms ) { if ( vm.getId ( ) . equals ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId ( ) ) ) { return true ; } } return false ; }
public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForNewDisks ( final java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList ) { final java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > domainsDisksMap = getDomainsDisksMap ( disksList ) ; return validOrFirstFailure ( new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator.ValidatorPredicate ( ) { @ java.lang.Override public org.ovirt.engine.core.bll.ValidationResult evaluate ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.StorageDomainValidator > entry ) { org.ovirt.engine.core.compat.Guid sdId = entry.getKey ( ) ; java.util.List disksForDomain = domainsDisksMap.get ( sdId ) ; return getStorageDomainValidator ( entry ) . hasSpaceForNewDisks ( disksForDomain ) ; } } ) ; }
public void setSelectedItem ( java.lang.Integer value ) { if ( ! ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . osNameExists ( value ) ) ) { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList ( ) . getSelectedItem ( ) ; org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( dataCenterWithCluster == null ) ? null : dataCenterWithCluster.getCluster ( ) ; if ( cluster == null ) { return ; } super . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDefaultOs ( cluster.getArchitecture ( ) ) ) ; } else { super . setSelectedItem ( value ) ; } }
public void autoLogin ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { loggingInAutomatically = true ; getUserName ( ) . setEntity ( user.getLoginName ( ) ) ; getDomain ( ) . setSelectedItem ( user.getDomain ( ) ) ; disableLoginScreen ( ) ; setLoggedUser ( user ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . setLoggedInUser ( user ) ; raiseLoggedInEvent ( ) ; }
public org.ovirt.engine.sdk.decorators.Disk add ( org.ovirt.engine.sdk.decorators.Disk disk ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( SLASH ) + ( getName ( ) ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . add ( url , disk , org.ovirt.engine.sdk.entities.Disk.class , org.ovirt.engine.sdk.decorators.Disk.class , headers ) ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
protected void executeCommand ( ) { super . executeCommand ( ) ; if ( removeImages ( ) ) { if ( ( org.ovirt.engine.core.bll.RestoreFromSnapshotCommand.getParameters ( ) . getSnapshot ( ) . getType ( ) ) != ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.REGULAR ) ) { org.ovirt.engine.core.bll.RestoreFromSnapshotCommand.getImage ( ) . setactive ( true ) ; org.ovirt.engine.core.bll.RestoreFromSnapshotCommand.getImageDao ( ) . update ( org.ovirt.engine.core.bll.RestoreFromSnapshotCommand.getImage ( ) . getImage ( ) ) ; } org.ovirt.engine.core.bll.RestoreFromSnapshotCommand.setSucceeded ( true ) ; } }
public void executeQueryCommandWithNull ( ) { org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getVmDeviceDao ( ) ) . thenReturn ( vmDeviceDAO ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getId ( ) ) . thenReturn ( new org.ovirt.engine.core.compat.Guid ( "ee655a4d-effc-4aab-be2b-2f80ff40cd1c" ) ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertTrue ( ( ( java.util.List < ? > ) ( getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ) . isEmpty ( ) ) ; }
public void loadVmsFromVmware ( ) { clearForLoad ( ) ; if ( ! ( validateVmwareConfiguration ( ) ) ) { return ; } org.ovirt.engine.core.compat.Guid proxyId = ( ( getProxyHosts ( ) . getSelectedItem ( ) ) != null ) ? getProxyHosts ( ) . getSelectedItem ( ) . getId ( ) : null ; loadVMsFromExternalProvider ( OriginType.VMWARE , getUrl ( ) , getUsername ( ) . getEntity ( ) , getPassword ( ) . getEntity ( ) , proxyId ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createVdsInterface ( "bond0" , true , null , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 100 ) , null , null , null , null ) ; org.mockito.Mockito.when ( calculateBaseNic.getBaseNic ( bond ) ) . thenReturn ( bond ) ; return bond ; }
public void testGetAllForRoleAndAdElement ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > result = dao.getAllForRoleAndAdElement ( org.ovirt.engine.core.dao.PermissionDAOTest.ROLE_ID , org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.Permissions permission : result ) { org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.PermissionDAOTest.ROLE_ID , permission.getRoleId ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID , permission.getAdElementId ( ) ) ; } }
private synchronized void refreshActivatedStorageDomainFromVdsm ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { if ( ! ( updateIsoListFromVDSM ( storagePoolId , storageDomainId ) ) ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog ( storagePoolId , storageDomainId , ImageType.ISO ) ; } if ( ! ( updateFloppyListFromVDSM ( storagePoolId , storageDomainId ) ) ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog ( storagePoolId , storageDomainId , ImageType.Floppy ) ; } }
public void testGetFilteredWithPermissionsNoFilter ( ) { org.ovirt.engine.core.common.businessentities.storage.Disk result = dao.get ( getExistingEntityId ( ) , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , false ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( getExistingEntityId ( ) . toString ( ) , result.getId ( ) . toString ( ) ) ; }
private static void addVideoDevice ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.common.businessentities.VmDevice entity = org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , vm.getId ( ) ) , VmDeviceType.VIDEO , vm.getDefaultDisplayType ( ) . getVmDeviceType ( ) , org.ovirt.engine.core.bll.utils.VmDeviceUtils.getMemExpr ( vm.getNumOfMonitors ( ) ) , true , true ) ; }
private void setVmTicket ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.SetVmTicket , new org.ovirt.engine.core.common.action.SetVmTicketParameters ( getEntity ( ) . getId ( ) , null , org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS , org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceConsoleModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) ( result.getState ( ) ) ) ; spiceConsoleModel.postSendVmTicket ( result.getReturnValue ( ) ) ; } } , this ) ; }
public void validateFailsDiscardFunctionalityBreaks ( ) { passAllValidations ( ) ; org.ovirt.engine.core.common.errors.EngineMessage lunsBreakStorageDomainDiscardSupportMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_LUN_BREAKS_STORAGE_DOMAIN_PASS_DISCARD_SUPPORT ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( lunsBreakStorageDomainDiscardSupportMessage ) ) . when ( discardHelper ) . isExistingDiscardFunctionalityPreserved ( org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.LUNs.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.StorageDomain.class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , lunsBreakStorageDomainDiscardSupportMessage ) ; }
public boolean isSerialNumberPolicySupported ( java.lang.String version ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.SerialNumberPolicySupported , version ) ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ! ( result.getReturnValue ( ) . getSucceeded ( ) ) ) { return ; } org.ovirt.engine.ui.uicommonweb.models.userportal.PoolItemBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.PoolItemBehavior ) ( result.getState ( ) ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue ( ) ; org.ovirt.engine.core.compat.Guid Guid = ( ( org.ovirt.engine.core.compat.Guid ) ( returnValueBase.getActionReturnValue ( ) ) ) ; }
public void getAllErrata ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Erratum > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetErrataForEngine , new org.ovirt.engine.core.common.queries.GetErrataCountsParameters ( ) , aQuery ) ; }
public void saveAsyncTaskToDb ( final org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask ) { coCoAsyncTaskHelper.saveAsyncTaskToDb ( asyncTask ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { boolean isAttach = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ; createDiskPanel.setVisible ( ( ! isAttach ) ) ; attachDiskPanel.setVisible ( isAttach ) ; if ( ( ! isAttach ) && ( ! ( isNewLunDiskEnabled ) ) ) { disk.getIsInternal ( ) . setEntity ( true ) ; } revealDiskPanel ( disk ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { stopProgress ( ) ; cancel ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult isDomainExistAndActive ( ) { if ( ( storageDomain ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; } if ( ( storageDomain.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , java.lang.String.format ( "$%1$s %2$s" , "status" , storageDomain.getStatus ( ) . name ( ) ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private void assertCorrectSlaveCountInValidBondsWhenInsufficientBonds ( int numberOfSlaves ) { java.lang.String bondName = "bondName" ; org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.VAR_NETWORK_BONDS_INVALID_SLAVE_COUNT_LIST , bondName ) ) ; assertCorrectSlaveCountInValidBonds ( numberOfSlaves , java.lang.String.format ( "bonded interface with only %1$d slaves is not valid bond" , numberOfSlaves ) , matcher , bondName ) ; }
public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { @ java.lang.SuppressWarnings ( value = "synthetic-access" ) org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > entity = new org.ovirt.engine.core.common.utils.Pair ( ) ; entity.setFirst ( org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance.mapRow ( rs , rowNum ) ) ; entity.setSecond ( VmDeviceDAODbFacadeImpl.VmDeviceRowMapper.instance.mapRow ( rs , rowNum ) ) ; return entity ; }
public void init ( ) { if ( ! ( org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . isUpdateNuma ( ) ) ) { org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . getVm ( ) . setvNumaNodeList ( org.ovirt.engine.core.bll.UpdateVmCommand.getDbFacade ( ) . getVmNumaNodeDao ( ) . getAllVmNumaNodeByVmId ( org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . getVmId ( ) ) ) ; } }
public void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void restoreVmFromBaseSnapshot ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vm.getId ( ) , SnapshotType.STATELESS ) ) { log.info ( "Deleting snapshots for stateless vm '{}'" , vm.getId ( ) ) ; org.ovirt.engine.core.common.action.VmOperationParameterBase restoreParams = new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vm.getId ( ) ) ; restoreParams.setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , restoreParams , org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getContext ( ) . withCompensationContext ( null ) ) ; } }
protected < T > T performAction ( org.ovirt.engine.core.common.action.ActionType task , org.ovirt.engine.core.common.action.ActionParametersBase params , java.lang.Class < T > resultType ) { try { return resultType.cast ( doAction ( task , params ) . getActionReturnValue ( ) ) ; } catch ( java.lang.Exception e ) { return handleError ( resultType , e , false ) ; } }
public void testValidateNetworkExclusiveOnNicsAllAttachmentsMustHaveNicNameSet ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkId ( vmNetwork1.getId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure = java.util.Collections.singletonList ( networkAttachment ) ; new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator ( attachmentsToConfigure , networkMap , networkExclusivenessValidator ) . validateNetworkExclusiveOnNics ( ) ; }
public static void isFloppySupported ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.Integer osId , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) : java.lang.Boolean.FALSE ; } } ; org.ovirt.engine.core.common.queries.OsQueryParameters params = new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetFloppySupport , osId , version ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , params , aQuery ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > cloneAgents ( java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > agents ) { if ( ( agents == null ) || ( agents.isEmpty ( ) ) ) { return null ; } else { java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > clonedAgents = new java.util.LinkedList < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > ( ) ; for ( org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent : agents ) { clonedAgents.add ( org.ovirt.engine.ui.uicommonweb.Cloner.cloneAgent ( agent ) ) ; } return clonedAgents ; } }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Cluster incoming , org.ovirt.engine.core.common.businessentities.VDSGroup entity ) { final org.ovirt.engine.core.common.businessentities.VDSGroup cluster = map ( incoming , entity ) ; final org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters managementNetworkOnClusterOperationParameters ; final org.ovirt.engine.core.compat.Guid dcId = getDataCenterId ( cluster ) ; if ( dcId == null ) { managementNetworkOnClusterOperationParameters = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters ( cluster ) ; } else { final org.ovirt.engine.core.compat.Guid managementNetworkId = managementNetworkFinder.getManagementNetworkId ( incoming , dcId ) ; managementNetworkOnClusterOperationParameters = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters ( cluster , managementNetworkId ) ; } return managementNetworkOnClusterOperationParameters ; }
private void updateCanSpecify ( ) { boolean isChangable = ( bootProtocolsAvailable ) && ( getIsStaticAddress ( ) ) ; getAddress ( ) . setChangeProhibitionReason ( ( isChangable && ( ! ( staticIpChangeAllowed ) ) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . staticIpAddressSameAsHostname ( ) : null ) ) ; getAddress ( ) . setIsChangable ( ( isChangable && ( staticIpChangeAllowed ) ) ) ; getSubnet ( ) . setIsChangable ( isChangable ) ; getGateway ( ) . setIsChangable ( isChangable ) ; }
public void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
private void internalEndWithFailure ( ) { log.errorFormat ( "Ending command with failure: {0}" , getClass ( ) . getName ( ) ) ; if ( hasTaskHandlers ( ) ) { if ( hasStepsToRevert ( ) ) { getCurrentTaskHandler ( ) . endWithFailure ( ) ; revertPreviousHandlers ( ) ; } startPollingAsyncTasks ( ) ; } else { endWithFailure ( ) ; } rollbackQuota ( ) ; }
private org.ovirt.engine.core.common.queries.QueryType initQueryType ( ) { try { java.lang.String name = getClass ( ) . getSimpleName ( ) ; name = name.substring ( 0 , ( ( name.length ( ) ) - ( org.ovirt.engine.core.bll.QueriesCommandBase.QuerySuffix.length ( ) ) ) ) ; return org.ovirt.engine.core.common.queries.QueryType.valueOf ( name ) ; } catch ( java.lang.Exception e ) { return org.ovirt.engine.core.common.queries.QueryType.Unknown ; } }
protected final < T > javax.ws.rs.core.Response performCreate ( org.ovirt.engine.core.common.action.ActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase taskParams , org.ovirt.engine.api.restapi.resource.IResolver < T , Q > entityResolver , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParentType ) { return performCreate ( task , taskParams , entityResolver , expectBlocking ( ) , suggestedParentType ) ; }
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . masterDomainNotOperational ( masterDomainId , getParameters ( ) . getStoragePoolId ( ) , true , ( ( ( getVDSReturnValue ( ) . getVdsError ( ) ) != null ) && ( ( getVDSReturnValue ( ) . getVdsError ( ) . getCode ( ) ) == ( org.ovirt.engine.core.common.errors.EngineError.StoragePoolWrongMaster ) ) ) ) ; }
protected void expectGetConnections ( org.ovirt.engine.core.dao.StorageServerConnectionDao dao ) { for ( int i = 0 ; i < ( org.ovirt.engine.core.bll.GetLunsByVgIdTest.GUIDS.length ) ; i ++ ) { org.mockito.Mockito.when ( dao.get ( org.ovirt.engine.core.bll.GetLunsByVgIdTest.GUIDS [ i ] . toString ( ) ) ) . thenReturn ( setUpConnection ( i ) ) ; } }
public void testGetAllForStoragePoolOfStorageType ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomainStatic > result = dao.getAllForStoragePoolOfStorageType ( StorageType.ISCSI , org.ovirt.engine.core.dao.StorageDomainStaticDAOTest.EXISTING_POOL_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain : result ) { org.junit.Assert.assertEquals ( StorageType.ISCSI , domain.getStorageType ( ) ) ; } }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue executeVerb ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storage ) { try { return runVdsCommand ( VDSCommandType.GetVmsInfo , buildGetVmsInfoParameters ( storage ) ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl ( ) ; logable.setStorageDomainId ( storage.getId ( ) ) ; logable.setStorageDomainName ( storage.getName ( ) ) ; auditLogDirector.log ( logable , AuditLogType.IMPORTEXPORT_GET_VMS_INFO_FAILED ) ; throw e ; } }
protected void updateDeviceProperties ( ) { org.ovirt.engine.core.common.businessentities.VmDevice device = org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVmDeviceDao ( ) . get ( oldVmDevice.getId ( ) ) ; device.setIsPlugged ( true ) ; org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVmDeviceDao ( ) . updateHotPlugDisk ( device ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.pm.HostFenceActionExecutor executor = new org.ovirt.engine.core.bll.pm.HostFenceActionExecutor ( getHost ( ) ) ; org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = executor.getFenceAgentStatus ( org.ovirt.engine.core.bll.GetFenceAgentStatusQuery.getParameters ( ) . getAgent ( ) ) ; org.ovirt.engine.core.bll.GetFenceAgentStatusQuery.getQueryReturnValue ( ) . setSucceeded ( ( ( result.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS ) ) ) ; org.ovirt.engine.core.bll.GetFenceAgentStatusQuery.getQueryReturnValue ( ) . setReturnValue ( result ) ; }
private boolean isCreateSnapshotAvailable ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume ) { if ( ( volume.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = volume.getBricks ( ) ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : bricks ) { if ( ( brick.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP ) ) { return false ; } } return true ; } else { return false ; } }
public void processResponse ( org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response ) { org.codehaus.jackson.JsonNode id = response.getId ( ) ; if ( org.codehaus.jackson.node.NullNode.class . isInstance ( id ) ) { this . tracker.processIssue ( response ) ; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this . tracker.removeCall ( response.getId ( ) ) ; if ( call == null ) { return ; } call.addResponse ( response ) ; }
protected boolean validateUsbPolicy ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getVm ( ) ; org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy ( vm.getStaticData ( ) ) ; return org.ovirt.engine.core.bll.VmHandler.isUsbPolicyLegal ( vm.getUsbPolicy ( ) , vm.getOs ( ) , getEffectiveCompatibilityVersion ( ) , org.ovirt.engine.core.bll.ImportVmCommandBase.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getPrivilegedQueryReturnValue ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmList = org.ovirt.engine.core.bll.GetUserVmsByUserIdAndGroupsQuery.getDbFacade ( ) . getVmDao ( ) . getAllForUserWithGroupsAndUserRoles ( org.ovirt.engine.core.bll.GetUserVmsByUserIdAndGroupsQuery.getParameters ( ) . getUserId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vmList ) { updateVmGuestAgentVersion ( vm ) ; if ( org.ovirt.engine.core.bll.GetUserVmsByUserIdAndGroupsQuery.getParameters ( ) . getIncludeDiskData ( ) ) { updateDisksFromDB ( vm ) ; java.util.Collections.sort ( vm.getDiskList ( ) , new org.ovirt.engine.core.common.businessentities.ImagesComparerByName ( ) ) ; fillImagesBySnapshots ( vm ) ; } } return vmList ; }
private void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( VdcActionType.UnlabelNetwork , org.ovirt.engine.core.common.action.UnlabelNetworkParameters.class , new java.lang.String [ ] { "NetworkId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendNetworkLabelResourceTest.NETWORK_ID } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected void setGetVmQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setVdsGroupId ( GUIDS [ 0 ] ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.GetVmByVmIdParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { PARENT_ID } , vm ) ; } }
private void applyNetworkChangesToHosts ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = syncNetworkParametersBuilder.buildParameters ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) , getOldNetwork ( ) ) ; if ( ! ( parameters.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing ( parameters ) ; runInternalMultipleActions ( VdcActionType.PersistentHostSetupNetworks , parameters ) ; } }
protected void init ( ) { driver.initialize ( this ) ; hideLabels ( ) ; }
private boolean removeVmPool ( ) { if ( ( ( org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolId ( ) ) != null ) && ( org.ovirt.engine.core.bll.RemoveVmPoolCommand.canRemoveVmPool ( org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolId ( ) ) ) ) { org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolDao ( ) . remove ( org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolId ( ) ) ; return true ; } else { if ( ( org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolId ( ) ) == null ) { org.ovirt.engine.core.bll.RemoveVmPoolCommand.log.error ( "Failed to remove VM Pool: VM Pool ID is null" ) ; } else { org.ovirt.engine.core.bll.RemoveVmPoolCommand.log.error ( "Failed to remove VM Pool '{}': there are still VMs in the Pool" , org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolName ( ) ) ; } return false ; } }
protected org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel createModel ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior ) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.ui.uicommonweb.models.vms.CLUSTER_VERSION ) ; org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel ( behavior ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster getSelectedCluster ( ) { return cluster ; } } ; mockAsyncDataProvider ( model ) ; return model ; }
private void mockGraphicsDevices ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDevice = new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ; graphicsDevice.setDeviceId ( Guid.Empty ) ; graphicsDevice.setVmId ( vmId ) ; org.mockito.Mockito.when ( deviceDao.getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.GRAPHICS ) ) . thenReturn ( java.util.Collections.singletonList ( graphicsDevice ) ) ; org.mockito.Mockito.doReturn ( deviceDao ) . when ( dbFacade ) . getVmDeviceDao ( ) ; }
public java.util.Map shutdown ( java.lang.String vmId , java.lang.String timeout , java.lang.String message ) { final java.util.Map resultMap = getStatusMap ( "Machine shut down" , 0 ) ; final org.ovirt.vdsmfake.domain.VM vm = getActiveHost ( ) . getRunningVMs ( ) . get ( vmId ) ; if ( vm != null ) { vm.setStatus ( VM.VMStatus.PoweringDown ) ; } addTask ( TaskType.SHUTDOWN_VM , 5000L , vm ) ; return resultMap ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; entityModel.eventRaised ( ev , sender , args ) ; if ( ev.matchesDefinition ( RegistrationResult.RetrievedEventDefinition ) ) { asyncResult_Retrieved ( ) ; } if ( ev.matchesDefinition ( ProvideTickEvent.definition ) ) { syncSearch ( ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { boolean hasIscsiStorage = false ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ) ( returnValue ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connections ) { if ( ( connection.getstorage_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.ISCSI ) ) { hasIscsiStorage = true ; break ; } } iscsiBondListModel.setIsAvailable ( hasIscsiStorage ) ; }
public void calculateNetworkImplementationDetailsNetworkOutOfSyncWithMtuUnset ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface.getNetworkName ( ) , ( ! ( iface.isBridged ( ) ) ) , 0 , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextInt ( ) , createQos ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn reduceDomain ( java.lang.String jobId , java.util.Map < java.lang.String , java.lang.Object > reduceParams ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "SDM.reduce_domain" ) . withParameter ( "job_id" , jobId ) . withParameter ( "reduce_params" , reduceParams ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void testGetAllStorageDomainsByNotExistingImageId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage_domains > result = dao.getAllStorageDomainsByImageId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
private boolean isIpv6GatewayInSync ( ) { java.lang.String gatewayDesiredValue = getIpv6PrimaryAddress ( ) . getGateway ( ) ; java.lang.String gatewayActualValue = iface.getIpv6Gateway ( ) ; return java.util.Objects.equals ( gatewayDesiredValue , gatewayActualValue ) ; }
public void testListCrash ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; collection.setUriInfo ( uriInfo ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.defaultQuery , t ) ; collection.setParent ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.parentMock ) ; try { getCollection ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.gluster.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
private void initMemorySnapshotSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { memorySnapshotSupport = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetMemorySnapshotSupport ) , callback ) ; }
public void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getVdsStatic ( ) ) . when ( vdsStaticDao ) . get ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.serverId ) ; org.mockito.Mockito.doReturn ( getCluster ( true , Version.v4_1 ) ) . when ( clusterDao ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
public void testFetchNotExistingRepoFileListById ( ) { org.ovirt.engine.core.compat.Guid falseGuid = new org.ovirt.engine.core.compat.Guid ( "11111111-1111-1111-1111-111111111111" ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain ( falseGuid , ImageFileType.ISO ) ; org.junit.Assert.assertNotNull ( listOfRepoFiles ) ; org.junit.Assert.assertTrue ( listOfRepoFiles.isEmpty ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getEntitySpecific ( int index ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; entity.setId ( GUIDS [ index ] ) ; entity.setName ( NAMES [ index ] ) ; entity.setNetworkName ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME ) ; entity.setSpeed ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NIC_SPEED ) ; entity = org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.setUpStatistics ( entity , GUIDS [ index ] ) ; entity.getStatistics ( ) . setStatus ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NIC_STATUS ) ; entity.setIpv4BootProtocol ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.BOOT_PROTOCOL ) ; return entity ; }
public static org.ovirt.engine.api.model.RSDL loadRsdl ( org.ovirt.engine.core.common.mode.ApplicationMode applicationMode ) throws java.io.IOException { java.lang.String fileName = ( applicationMode == ( org.ovirt.engine.core.common.mode.ApplicationMode.AllModes ) ) ? "/" + ( RsdlIOManager.RSDL_RESOURCE_NAME ) : "/" + ( RsdlIOManager.GLUSTER_RSDL_RESOURCE_NAME ) ; java.io.InputStream rsdlAsStrem = null ; try { rsdlAsStrem = org.ovirt.engine.api.rsdl.RsdlIOManager.loadAsStream ( fileName ) ; return javax.xml.bind.JAXB.unmarshal ( rsdlAsStrem , org.ovirt.engine.api.model.RSDL.class ) ; } finally { if ( rsdlAsStrem != null ) { rsdlAsStrem.close ( ) ; } } }
public static org.ovirt.engine.core.compat.Version selectHighestVersion ( java.util.ArrayList < org.ovirt.engine.core.compat.Version > versions ) { org.ovirt.engine.core.compat.Version retVersion = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( versions ) ; for ( org.ovirt.engine.core.compat.Version version : versions ) { if ( ( version.compareTo ( retVersion ) ) > 0 ) { retVersion = version ; } } return retVersion ; }
private void expectGetDeviceList ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setSucceeded ( true ) ; returnValue.setReturnValue ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.setUpLunsFromDeviceList ( ) ) ; org.mockito.Mockito.when ( vdsBrokerFrontendMock.RunVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.GetDeviceList ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters.class ) ) ) . thenReturn ( returnValue ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , setUpClusters ( ) , failure ) ; control.replay ( ) ; }
public void isSoundcardEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetSoundDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImage ( image , image.getActive ( ) , new org.ovirt.engine.core.common.businessentities.storage.image_storage_domain_map ( image.getImageId ( ) , image.getStorageIds ( ) . get ( 0 ) , image.getQuotaId ( ) , image.getDiskProfileId ( ) ) , vmId ) ; }
public void testSave ( ) { newVmTemplate.setDedicatedVmForVdsList ( java.util.Arrays.asList ( org.ovirt.engine.core.dao.VmTemplateDaoTest.HOST_GUIDS ) ) ; dao.save ( newVmTemplate ) ; org.ovirt.engine.core.common.businessentities.VmTemplate result = dbFacade.getVmTemplateDao ( ) . get ( newVmTemplate.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( org.apache.commons.collections.CollectionUtils.isEqualCollection ( result.getDedicatedVmForVdsList ( ) , newVmTemplate.getDedicatedVmForVdsList ( ) ) ) ; org.junit.Assert.assertEquals ( newVmTemplate , result ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getResolveStatusConflict ( ) . getEntity ( ) ) == null ) { getResolveStatusConflictEnable ( ) . setIsChangeable ( false ) ; getResolveStatusConflictDisable ( ) . setIsChangeable ( false ) ; } else { getResolveStatusConflictEnable ( ) . setIsChangeable ( getResolveStatusConflict ( ) . getEntity ( ) ) ; getResolveStatusConflictDisable ( ) . setIsChangeable ( getResolveStatusConflict ( ) . getEntity ( ) ) ; } }
protected void ExecuteIrsBrokerCommand ( ) { if ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksStatusesVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) . equals ( Guid.Empty ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksStatusesVDSCommand.setReturnValue ( null ) ; } else { setVDSReturnValue ( org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMGetAllTasksStatuses , new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksStatusesVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) ) ) ) ; } }
protected boolean validateUsbPolicy ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getVm ( ) ; org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy ( vm.getStaticData ( ) ) ; return org.ovirt.engine.core.bll.VmHandler.isUsbPolicyLegal ( vm.getUsbPolicy ( ) , vm.getOs ( ) , getEffectiveCompatibilityVersion ( ) , org.ovirt.engine.core.bll.ImportVmCommandBase.getReturnValue ( ) . getValidationMessages ( ) ) ; }
public void testFindExternalMacAddresses ( ) { org.mockito.Mockito.when ( mockReadMacPool.isMacInRange ( org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1 ) ) . thenReturn ( java.lang.Boolean.TRUE ) ; org.mockito.Mockito.when ( mockReadMacPool.isMacInRange ( org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2 ) ) . thenReturn ( java.lang.Boolean.FALSE ) ; vm.setInterfaces ( java.util.Arrays.asList ( vNic1 , vNic2 ) ) ; final java.util.Set < java.lang.String > actual = underTest.findExternalMacAddresses ( vm ) ; org.junit.Assert.assertThat ( actual , org.hamcrest.Matchers.contains ( org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2 ) ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , null ) ; control.replay ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId ( ) ; java.lang.String networkName = attachment.getNetworkName ( ) ; org.ovirt.engine.core.compat.Guid violatingEntityId = attachment.getId ( ) ; return hostSetupNetworksValidatorHelper.validateCoherentIdentification ( java.lang.String.valueOf ( violatingEntityId ) , networkId , networkName , EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY , networkBusinessEntityMap ) ; }
public void shouldPass ( ) { org.ovirt.engine.core.common.console.ConsoleOptions options = new org.ovirt.engine.core.common.console.ConsoleOptions ( org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE ) ; options.setVmId ( Guid.Empty ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getOptions ( ) ) . thenReturn ( options ) ; org.junit.jupiter.api.Assertions.assertTrue ( getQuery ( ) . validateInputs ( ) ) ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { if ( ( cachePattern ) == null ) { cachePattern = compilePatternFromInitParam ( filterConfig , org.ovirt.engine.core.utils.servlet.CachingFilter.CACHE_INIT_PARAM ) ; } if ( ( noCachePattern ) == null ) { noCachePattern = compilePatternFromInitParam ( filterConfig , org.ovirt.engine.core.utils.servlet.CachingFilter.NO_CACHE_INIT_PARAM ) ; } if ( ( noStorePattern ) == null ) { noStorePattern = compilePatternFromInitParam ( filterConfig , org.ovirt.engine.core.utils.servlet.CachingFilter.NO_STORE_INIT_PARAM ) ; } }
public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc teardownImage ( java.lang.String sdID , java.lang.String spID , java.lang.String imageID , java.lang.String volumeID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.teardownImage ( sdID , spID , imageID , volumeID ) ; org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public static void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
private void internalFreeMac ( java.lang.String mac ) { if ( allocatedMacs.containsKey ( mac ) ) { removeMacFromMap ( allocatedMacs , mac ) ; if ( ! ( allocatedMacs.containsKey ( mac ) ) ) { availableMacs.add ( mac ) ; } } else if ( allocatedCustomMacs.containsKey ( mac ) ) { removeMacFromMap ( allocatedCustomMacs , mac ) ; } }
public org.ovirt.engine.core.bll.ValidationResult vmNotRunningStateless ( ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vm.getId ( ) , SnapshotType.STATELESS ) ) { org.ovirt.engine.core.common.errors.VdcBllMessages message = ( vm.isRunning ( ) ) ? org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_RUNNING_STATELESS : org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_HAS_STATELESS_SNAPSHOT_LEFTOVER ; return new org.ovirt.engine.core.bll.ValidationResult ( message ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void testNullDisksUsages ( ) { org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.getVmStatistics ( ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.setDisksUsage ( null ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMStatisticsData ( vmStatistics , xml ) ; org.junit.Assert.assertNull ( vmStatistics.getDisksUsage ( ) ) ; }
public void testUpdateBrickTask ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = dao.getById ( FixturesTool.GLUSTER_BRICK_UUID1 ) ; org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask asyncTask = new org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask ( ) ; asyncTask.setTaskId ( new org.ovirt.engine.core.compat.Guid ( "61c94fc7-26b0-43e3-9d26-fc9d8cd6a763" ) ) ; org.junit.Assert.assertNotNull ( existingBrick ) ; org.junit.Assert.assertEquals ( GlusterStatus.UP , existingBrick.getStatus ( ) ) ; dao.updateBrickTask ( existingBrick.getId ( ) , FixturesTool.GLUSTER_ASYNC_TASK_ID1 ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newEnity = dao.getById ( FixturesTool.GLUSTER_BRICK_UUID1 ) ; org.junit.Assert.assertEquals ( FixturesTool.GLUSTER_ASYNC_TASK_ID1 , newEnity.getAsyncTask ( ) . getTaskId ( ) ) ; }
protected void itemsChanged ( T selectedItem ) { if ( selectedItem == null ) { itemsChanged ( ) ; } else { java.util.List < T > selectedItems = new java.util.ArrayList < > ( ) ; selectedItems.add ( selectedItem ) ; setSelectedItem ( selectedItem ) ; setSelectedItems ( selectedItems ) ; getSelectionModel ( ) . setSelected ( selectedItem , true ) ; } }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { if ( ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommand.getParameters ( ) . getStorageDomainId ( ) ) != null ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommand.getParameters ( ) . getStorageDomainId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.STORAGE , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; } return null ; }
public void hostNameNotUsed ( ) { org.mockito.Mockito.when ( hostDao.getAllForHostname ( org.mockito.Matchers.any ( java.lang.String.class ) ) ) . thenReturn ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.VDS > emptyList ( ) ) ; org.mockito.Mockito.when ( dbFacade.getVdsDao ( ) ) . thenReturn ( hostDao ) ; validator = new org.ovirt.engine.core.bll.validator.HostValidator ( dbFacade , host , hostedEngineHelper ) ; org.junit.Assert.assertThat ( validator.hostNameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected java.util.List < java.lang.String > listFiles ( ) { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters ( asGuid ( storageDomainId ) , org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All ) ; queryParams.setForceRefresh ( true ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > files = getBackendCollection ( org.ovirt.engine.core.common.businessentities.storage.RepoImage.class , VdcQueryType.GetImagesList , queryParams ) ; return files.stream ( ) . map ( RepoImage :: getRepoImageId ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
protected boolean checkStoragePoolStatus ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus status ) { boolean returnValue = false ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) ; if ( storagePool != null ) { returnValue = ( storagePool.getStatus ( ) ) == status ; if ( ( ! returnValue ) && ( ! ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_STATUS_ILLEGAL.toString ( ) ) ) ) ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_STATUS_ILLEGAL ) ; } } return returnValue ; }
public void validateVmInPreview ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.VM ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.when ( snapshotsValidator.vmNotInPreview ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
public void updateInitialRunFields ( ) { getIsSysprepPossible ( ) . setEntity ( getIsWindowsOS ( ) ) ; getIsSysprepEnabled ( ) . setEntity ( ( ( getInitializationType ( ) ) == ( org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep ) ) ) ; getIsCloudInitPossible ( ) . setEntity ( ( ! ( getIsWindowsOS ( ) ) ) ) ; getIsCloudInitEnabled ( ) . setEntity ( ( ( getInitializationType ( ) ) == ( org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit ) ) ) ; getIsCloudInitEnabled ( ) . setIsAvailable ( ( ! ( getIsWindowsOS ( ) ) ) ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase removeVmImages ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext ( VdcActionType.RemoveAllVmImages , buildRemoveAllVmImagesParameters ( images ) ) ; if ( vdcRetValue.getSucceeded ( ) ) { getTaskIdList ( ) . addAll ( vdcRetValue.getInternalVdsmTaskIdList ( ) ) ; } return vdcRetValue ; }
protected void entityChanging ( java.lang.Object newValue , java.lang.Object oldValue ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( newValue ) ) ; getNewNetworkCommand ( ) . setIsExecutionAllowed ( ( ( vdsGroup != null ) && ( ( vdsGroup.getStoragePoolId ( ) ) != null ) ) ) ; }
protected boolean canDoAction ( ) { boolean returnValue = ( ( ( ( ( super . canDoAction ( ) ) && ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.checkStoragePool ( ) ) ) && ( checkStoragePoolStatus ( StoragePoolStatus.Uninitialized ) ) ) && ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.initializeVds ( ) ) ) && ( checkStorageDomainsInPool ( ) ) ) && ( isDomainAttachedToDifferentStoragePool ( ) ) ; return returnValue ; }
private void mockExecutor ( org.ovirt.engine.core.common.businessentities.FenceAgent agent , boolean success ) { org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue ( ) ; returnValue.setSucceeded ( success ) ; returnValue.setFenceAgentUsed ( agent ) ; org.mockito.Mockito.when ( executor.fence ( org.mockito.Matchers.eq ( FenceActionType.Start ) , org.mockito.Matchers.eq ( agent ) ) ) . thenReturn ( returnValue ) ; }
public void beforeUpdates ( ) { getInstanceTypeManager ( ) . deactivate ( ) ; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runInternalQuery ( org.ovirt.engine.core.common.queries.VdcQueryType type , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams ) { return getBackend ( ) . runInternalQuery ( type , queryParams ) ; }
private void updateController ( ) { this . controller = modelProvider.getModel ( ) ; org.ovirt.engine.ui.uicommonweb.models.GridTimer modelTimer = getModelTimer ( ) ; modelTimer.setRefreshRate ( readRefreshRate ( ) ) ; modelTimer.addValueChangeHandler ( new com.google.gwt.event.logical.shared.ValueChangeHandler < java.lang.String > ( ) { @ java.lang.Override public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > event ) { onRefresh ( event.getValue ( ) ) ; } } ) ; }
protected void onReset ( ) { super . onReset ( ) ; if ( ! ( hasReportsModelRefreshEvent ( ) ) ) { getModel ( ) . getReportsAvailabilityEvent ( ) . addListener ( new org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.ReportsModelRefreshEvent ( ) ) ; } setSubTabPanelVisible ( false ) ; getModel ( ) . refreshReportModel ( ) ; }
private static void CloneNetworkStatisticss ( org.ovirt.engine.core.common.businessentities.network.NetworkStatistics instance , org.ovirt.engine.core.common.businessentities.network.NetworkStatistics obj ) { obj.setId ( instance.getId ( ) ) ; obj.setReceiveDropRate ( instance.getReceiveDropRate ( ) ) ; obj.setReceiveRate ( instance.getReceiveRate ( ) ) ; obj.setTransmitDropRate ( instance.getTransmitDropRate ( ) ) ; obj.setTransmitRate ( instance.getTransmitRate ( ) ) ; obj.setStatus ( instance.getStatus ( ) ) ; }
public static void GetStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.GetStorageDomainsByVmTemplateIdQueryParameters ( templateId ) , aQuery ) ; }
protected void itemsChanged ( ) { super . itemsChanged ( ) ; if ( ( ( ( getSelectionNodeList ( ) ) != null ) && ( getSelectionNodeList ( ) . isEmpty ( ) ) ) && ( ( getAttachedTagsToEntities ( ) ) != null ) ) { attachedTagsToEntitiesChanged ( ) ; } }
private static void setBootProtocolAndGateway ( org.ovirt.engine.core.vdsbroker.vdsbroker.BootProtocolResolver bootProtocolResolver , org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher , java.util.function.Consumer < org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol > bootProtocolSetter , java.util.function.Consumer < java.lang.String > gatewaySetter ) { final org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol = bootProtocolResolver.resolve ( ipInfoFetcher ) ; bootProtocolSetter.accept ( bootProtocol ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGateway ( bootProtocol , ipInfoFetcher , gatewaySetter ) ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private static boolean isList ( java.lang.Object model , java.lang.String superField ) { return ( ( ( model != null ) && ( org.ovirt.engine.api.utils.ReflectionHelper.isSet ( model , superField ) ) ) && ( org.ovirt.engine.api.utils.ReflectionHelper.isSet ( org.ovirt.engine.api.utils.ReflectionHelper.get ( model , superField ) , superField ) ) ) && ( ( org.ovirt.engine.api.utils.ReflectionHelper.get ( org.ovirt.engine.api.utils.ReflectionHelper.get ( model , superField ) , superField ) ) instanceof java.util.List ) ; }
private void initEditors ( ) { pmTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.StringRenderer < java.lang.String > ( ) ) ; pmEncryptOptionsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; pmEncryptOptionsEditor.setUsePatternFly ( true ) ; pmSecureEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; pmSecureEditor.setUsePatternFly ( true ) ; fencingOptionsUrl = new com.google.gwt.user.client.ui.Anchor ( dynamicMessages.fencingOptions ( ) ) ; fencingOptionsUrl.asWidget ( ) . addStyleName ( style.fencingOptionsLink ( ) ) ; }
public void failedStatus ( ) { org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ( FenceActionType.STATUS , 1 , null , "unknown" , null ) ; org.junit.jupiter.api.Assertions.assertEquals ( Status.ERROR , result.getStatus ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( PowerStatus.UNKNOWN , result.getPowerStatus ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepConfigList" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolumeName" , slaveVolumeName ) . withOptionalParameter ( "remoteUserName" , userName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc ( response ) ; }
public void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
public void testPositiveValidateWithDisks ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) . when ( cmd ) . getStorageDomainId ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public void testNotRemovingManagementNetwork ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator networkAttachmentValidatorSpy = org.mockito.Mockito.spy ( createNetworkAttachmentValidator ( new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ) ) ; org.mockito.Mockito.doReturn ( networkValidatorMock ) . when ( networkAttachmentValidatorSpy ) . getNetworkValidator ( ) ; org.ovirt.engine.core.bll.ValidationResult propagatedResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK , "a" ) ; org.mockito.Mockito.when ( networkValidatorMock.notRemovingManagementNetwork ( ) ) . thenReturn ( propagatedResult ) ; org.junit.Assert.assertThat ( "ValidationResult is not correctly propagated" , networkAttachmentValidatorSpy.notRemovingManagementNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK , "a" ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.GetHostArchitectureQuery.getDbFacade ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.bll.GetHostArchitectureQuery.getParameters ( ) . getId ( ) ) ; org.ovirt.engine.core.common.businessentities.ServerCpu sc = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.FindMaxServerCpuByFlags ( host.getCpuFlags ( ) , host.getVdsGroupCompatibilityVersion ( ) ) ; org.ovirt.engine.core.bll.GetHostArchitectureQuery.getQueryReturnValue ( ) . setReturnValue ( ( sc == null ? org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined : sc.getArchitecture ( ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn vmUpdateDevice ( java.lang.String vmId , java.util.Map device ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.updateDevice" ) . withParameter ( "vmID" , vmId ) . withParameter ( "params" , device ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void setPmProxyPreferences ( java.lang.String value ) { java.lang.String [ ] array = value.split ( "," ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel > list = new java.util.ArrayList < > ( ) ; for ( java.lang.String item : array ) { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel model = new org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel ( ) ; model.setEntity ( org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType.forValue ( item ) ) ; list.add ( model ) ; } getPmProxyPreferencesList ( ) . setItems ( list ) ; }
private boolean commitNewMac ( java.lang.String mac ) { availableMacs.remove ( mac ) ; allocatedMacs.add ( mac ) ; if ( availableMacs.isEmpty ( ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.MAC_POOL_EMPTY ) ; return false ; } return true ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { return org.ovirt.engine.core.bll.MigrateVmCommand.getSucceeded ( ) ? ( org.ovirt.engine.core.bll.MigrateVmCommand.getActionReturnValue ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_DONE : getAuditLogForMigrationStarted ( ) : _isRerun ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_TRYING_RERUN : getAuditLogForMigrationFailure ( ) ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
private static org.ovirt.engine.core.bll.validator.StorageDomainValidator mockStorageDomainValidator ( ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.validator.StorageDomainValidator.class ) ; org.mockito.Mockito.when ( storageDomainValidator.isDomainExistAndActive ( ) ) . thenReturn ( ValidationResult.VALID ) ; org.mockito.Mockito.when ( storageDomainValidator.isDomainWithinThresholds ( ) ) . thenReturn ( ValidationResult.VALID ) ; return storageDomainValidator ; }
private void onNumaSupport ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getWindow ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel ) ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getWindow ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > updateParamsList = model.getUpdateParameters ( ) ; if ( ! ( updateParamsList.isEmpty ( ) ) ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.UpdateVmNumaNodes , updateParamsList ) ; } org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.setWindow ( null ) ; }
public org.ovirt.engine.core.common.businessentities.network.VnicProfileView mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VnicProfileView entity = super . mapRow ( rs , rowNum ) ; entity.setNetworkName ( rs.getString ( "network_name" ) ) ; entity.setNetworkQosName ( rs.getString ( "network_qos_name" ) ) ; entity.setDataCenterName ( rs.getString ( "data_center_name" ) ) ; entity.setCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( rs.getString ( "compatibility_version" ) ) ) ; return entity ; }
public void moveShareableDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setShareable ( true ) ; initializeCommand ( diskImage , VmEntityType.VM ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook entity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook ( ) ; entity.setHookId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "hook_id" ) ) ) ; entity.setServerId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "server_id" ) ) ) ; entity.setStatus ( rs.getString ( "hook_status" ) ) ; entity.setContentType ( rs.getString ( "content_type" ) ) ; entity.setChecksum ( rs.getString ( "checksum" ) ) ; entity.setServerName ( rs.getString ( "server_name" ) ) ; return entity ; }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
private static java.lang.String encrypt ( java.lang.String source , java.security.cert.Certificate cert ) throws java.security.GeneralSecurityException { javax.crypto.Cipher rsa = javax.crypto.Cipher.getInstance ( org.ovirt.engine.core.utils.crypt.EncryptionUtils.algo ) ; rsa.init ( javax.crypto.Cipher.ENCRYPT_MODE , cert.getPublicKey ( ) ) ; return new org.apache.commons.codec.binary.Base64 ( 0 ) . encodeToString ( rsa.doFinal ( source.trim ( ) . getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) ) ) ; }
public void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) . withoutRefresh ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain addNewStorageDomainToDisk ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain storage = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storage.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; storage.setStorageType ( storageType ) ; storage.setStatus ( StorageDomainStatus.Active ) ; diskImage.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singletonList ( storage.getId ( ) ) ) ) ; return storage ; }
private java.lang.String createRdpInvocationInfo ( ) { return new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.rdpInvokeAuto ( ) ) . append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.rdpInvokeNative ( ) ) . append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.browserPlugin ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.rdpInvokePlugin ( ) ) . toString ( ) ; }
public static void GetStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public void setStorageItems ( ) { super . setStorageItems ( ) ; if ( getSelectableModels ( ) . isEmpty ( ) ) { getModel ( ) . getDataCenterAlert ( ) . setIsAvailable ( true ) ; getModel ( ) . getDataCenterAlert ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . noStoragesToImport ( ) ) ; } }
private void addDisk ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext ( VdcActionType.AddDisk , buildAddDiskParameters ( disk ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( returnValue.getFault ( ) . getError ( ) , java.lang.String.format ( "Failed to create disk! %s" , disk.getDiskAlias ( ) ) ) ; } org.ovirt.engine.core.bll.HibernateVmCommand.getTaskIdList ( ) . addAll ( returnValue.getInternalVdsmTaskIdList ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.VDS host = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDS.class ) ; org.mockito.Mockito.when ( host.getId ( ) ) . thenReturn ( GUIDS [ index ] ) ; org.mockito.Mockito.when ( host.getName ( ) ) . thenReturn ( NAMES [ index ] ) ; return host ; }
public static java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getIsoStorageModels ( ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > models = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > ( ) ; org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel nfsIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ( ) ; models.add ( nfsIsoModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel posixIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel ( ) ; models.add ( posixIsoModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel localIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel ( ) ; models.add ( localIsoModel ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.addTypeToStorageModels ( StorageDomainType.ISO , models ) ; return models ; }
private void addCollectionAction ( java.lang.String rel , java.lang.String [ ] periods , int i , java.lang.String period , org.ovirt.engine.sdk.codegen.holders.ResourceHolder resourceHolder , org.ovirt.engine.sdk.entities.DetailedLink detailedLink ) { java.lang.String methodName = getActionMethodName ( period , periods [ ( i - 3 ) ] ) ; if ( ! ( resourceHolder.hasMethod ( period ) ) ) { java.lang.String docParams = org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateBodyParams ( detailedLink ) ; resourceHolder.addMethod ( period , this . resourceActionMethodTemplate.getTemplate ( methodName , rel , docParams , detailedLink ) ) ; } }
public void twoArgsWithSameLongName ( ) { org.ovirt.engine.core.uutils.cli.ExtendedCliParser parser = new org.ovirt.engine.core.uutils.cli.ExtendedCliParser ( ) ; parser.addArg ( new org.ovirt.engine.core.uutils.cli.ArgumentBuilder ( ) . shortName ( "-a" ) . longName ( "--aa" ) . valueRequired ( true ) . build ( ) ) ; parser.addArg ( new org.ovirt.engine.core.uutils.cli.ArgumentBuilder ( ) . shortName ( "-b" ) . longName ( "--aa" ) . valueRequired ( true ) . build ( ) ) ; }
public void getClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void validateSuccess ( ) { mockVmStatusUp ( ) ; mockInterfaceList ( ) ; cretaeVirtIODisk ( ) ; initStorageDomain ( ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . isEmpty ( ) ) ; }
public java.net.Socket createSocket ( java.lang.String host , int port , java.net.InetAddress clientHost , int clientPort ) throws java.io.IOException , java.net.UnknownHostException { javax.net.ssl.SSLSocket socket = ( ( javax.net.ssl.SSLSocket ) ( sslcontext.getSocketFactory ( ) . createSocket ( host , port , clientHost , clientPort ) ) ) ; socket.setEnabledProtocols ( new java.lang.String [ ] { this . protocol } ) ; return socket ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = getClusterByServiceList ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) , supportsVirtService , supportsGlusterService ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; }
private static void removeLabel ( java.lang.String srcIfaceName , org.ovirt.engine.core.compat.Guid srcIfaceId , java.lang.String label , org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel ) { dataFromHostSetupNetworksModel.removeLabelFromParameters ( new org.ovirt.engine.core.common.businessentities.network.NicLabel ( srcIfaceId , srcIfaceName , label ) ) ; }
public static java.util.List < org.ovirt.engine.core.compat.Guid > getRedundantVolumesToDeleteAfterCommitSnapshot ( org.ovirt.engine.core.compat.Guid diskId , java.util.Set < org.ovirt.engine.core.compat.Guid > criticalSnapshotsChain ) { java.util.List < org.ovirt.engine.core.compat.Guid > redundantSnapshotIdsToDelete = new java.util.ArrayList < > ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > allVolumesInCinderDisk = org.ovirt.engine.core.bll.storage.CINDERStorageHelper.getDiskImageDao ( ) . getAllSnapshotsForImageGroup ( diskId ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : allVolumesInCinderDisk ) { if ( ! ( criticalSnapshotsChain.contains ( diskImage.getVmSnapshotId ( ) ) ) ) { redundantSnapshotIdsToDelete.add ( diskImage.getVmSnapshotId ( ) ) ; } } return redundantSnapshotIdsToDelete ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator spValidator = new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator ( getStoragePool ( ) ) ; if ( ! ( validate ( spValidator.exists ( ) ) ) ) { return false ; } if ( ( getQuotaId ( ) ) == null ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID ) ; return false ; } if ( ( quotaDao.getById ( getQuotaId ( ) ) ) == null ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; return false ; } return true ; }
private boolean verifyNoLunDisks ( ) { for ( org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters : org.ovirt.engine.core.bll.MoveDisksCommand.getParameters ( ) . getParametersList ( ) ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = org.ovirt.engine.core.bll.MoveDisksCommand.getDiskDao ( ) . get ( moveDiskParameters.getImageGroupID ( ) ) ; if ( ! ( validate ( new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) . validateDiskIsNotLun ( ) ) ) ) { return false ; } } return true ; }
protected void endSuccessfully ( ) { setVmTemplateId ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getVmTemplateId ( ) ) ; for ( org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getImagesParameters ( ) ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . EndAction ( VdcActionType.CreateImageTemplate , p ) ; } if ( ( reloadVmTemplateFromDB ( ) ) != null ) { endDefaultOperations ( ) ; } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded ( true ) ; }
public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts.add ( "application/xml; detail=statistics" ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUpGetGraphicsExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.VM vm = resource.get ( ) ; assertTrue ( vm.isSetStatistics ( ) ) ; verifyModel ( vm , 0 ) ; } finally { accepts.clear ( ) ; } }
protected boolean isImageNotLocked ( ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage ( ) ; if ( ( diskImage.getimageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageStatus.LOCKED ) ) { if ( ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters ( ) . getOperation ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageOperation.Move ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED ) ; addCanDoActionMessage ( java.lang.String.format ( "$%1$s %2$s" , "diskAlias" , diskImage.getDiskAlias ( ) ) ) ; } else { addCanDoActionMessage ( VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED ) ; } return false ; } return true ; }
protected < T extends org.ovirt.engine.core.dao.DAO > T getDao ( java.lang.Class < T > daoType ) { T dao = org.ovirt.engine.core.dao.DaoFactory.get ( daoType ) ; if ( dao instanceof org.ovirt.engine.core.dao.BaseDAODbFacade ) { org.ovirt.engine.core.dao.BaseDAODbFacade dbFacadeDAO = ( ( org.ovirt.engine.core.dao.BaseDAODbFacade ) ( dao ) ) ; dbFacadeDAO.setTemplate ( jdbcTemplate ) ; dbFacadeDAO.setDialect ( dbEngineDialect ) ; dbFacadeDAO.setDbFacade ( this ) ; } else { } return dao ; }
public void getUsbPolicyUsbTypeNull31 ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setcompatibility_version ( Version.v3_1 ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getcompatibility_version ( ) ) , UsbPolicy.ENABLED_NATIVE ) ; }
public static void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
public void testParameterizedConstructor ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid expectedUserID = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; param = getTypeParameterClass ( ) . getConstructor ( org.ovirt.engine.core.compat.Guid.class ) . newInstance ( expectedUserID ) ; org.junit.Assert.assertEquals ( "Wrong user ID" , expectedUserID , param.getUserId ( ) ) ; }
public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ( ) ; if ( ( value == null ) || ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( ( ( java.lang.String ) ( value ) ) ) ) ) { result.setSuccess ( false ) ; result.getReasons ( ) . add ( org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.constants.emptyImagePath ( ) ) ; } return result ; }
protected final void endVmTemplateRelatedOps ( ) { if ( ( org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) != null ) { org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmDeviceUtils ( ) . setVmDevices ( org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) ; vmHandler.updateVmInitFromDB ( org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate ( ) , true ) ; incrementDbGeneration ( ) ; vmTemplateHandler.unlockVmTemplate ( org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplateId ( ) ) ; } else { org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.setCommandShouldBeLogged ( false ) ; log.warn ( "MoveOrCopyTemplateCommand::EndMoveOrCopyCommand: VmTemplate is null, not performing full endAction" ) ; } }
private void setUpMockUpForStart ( ) { prepareMocks ( cmd ) ; org.mockito.Mockito.when ( serviceDao.getByServiceType ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.gluster.ServiceType.class ) ) ) . thenReturn ( getGlusterServiceListByServiceType ( ServiceType.GLUSTER_SWIFT , GlusterServiceStatus.STOPPED ) ) ; org.mockito.Mockito.doReturn ( getGlusterServerServicesByServerIdAndServiceType ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , ServiceType.GLUSTER_SWIFT , GlusterServiceStatus.STOPPED ) ) . when ( serverServiceDao ) . getByServerIdAndServiceType ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.gluster.ServiceType.class ) ) ; }
private org.ovirt.engine.core.common.businessentities.Quota mockBasicQuota ( ) { ( dbCalls ) ++ ; org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota ( ) ; quota.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; quota.setStoragePoolId ( storage_pool.getId ( ) ) ; quota.setDescription ( "My Quota description" ) ; quota.setQuotaName ( "My Quota Name" ) ; quota.setGraceStoragePercentage ( 20 ) ; quota.setGraceClusterPercentage ( 20 ) ; quota.setThresholdStoragePercentage ( 80 ) ; quota.setThresholdClusterPercentage ( 80 ) ; quota.setQuotaEnforcementType ( QuotaEnforcementTypeEnum.HARD_ENFORCEMENT ) ; return quota ; }
public void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.util.Collections.emptyList ( ) ; } } ; getUpHostListByCluster ( aQuery , clusterName , null ) ; }
public void testNoDiskBootFromIsoDomain ( ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer mock = mockIsoDomainListSyncronizer ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) . when ( mock ) . findActiveISODomain ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , BootSequence.CD , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ) , true , null ) ; }
public org.ovirt.engine.core.common.utils.Pair < java.util.List < org.ovirt.engine.core.compat.Guid > , org.ovirt.engine.core.compat.Guid > balance ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.String > parameters , java.util.ArrayList < java.lang.String > messages ) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error ( ( ( "policy unit:" + ( getPolicyUnit ( ) . getName ( ) ) ) + "balance is not implemented" ) ) ; return null ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > getInterfaces ( ) { if ( ( interfaces ) == null ) { interfaces = org.ovirt.engine.core.bll.VmCommand.getVmNicDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; } return interfaces ; }
public void testGetAllWithPermissionsPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao.getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertTrue ( result.contains ( existingVds ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return diskImage.getId ( ) . toString ( ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , java.lang.String description , org.ovirt.engine.core.common.VdcObjectType entityType , org.ovirt.engine.core.compat.Guid ... entityIds ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { return createTaskImpl ( taskId , asyncTaskCreationInfo , parentCommand , description , entityType , entityIds ) ; } catch ( java.lang.RuntimeException ex ) { log.errorFormat ( "Error during CreateTask for command: {0}. Exception {1}" , getClass ( ) . getName ( ) , ex ) ; } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } return org.ovirt.engine.core.compat.Guid.Empty ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; boolean force = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendHostResource.FORCE , true , false ) ; return performAction ( VdcActionType.RemoveVds , new org.ovirt.engine.core.common.action.RemoveVdsParameters ( guid , force ) ) ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public org.ovirt.engine.core.bll.ValidationResult isConnectionExtensionExists ( org.ovirt.engine.core.compat.Guid connExtId ) { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = getDbFacade ( ) . getStorageServerConnectionExtensionDao ( ) . get ( connExtId ) ; if ( connExt == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_EXTENSION_DOES_NOT_EXIST , java.lang.String.format ( "$%1$s %2$s" , "connExtId" , connExtId.toString ( ) ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void canDoActionNotEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmForSpace ( ) ; initVmDiskImage ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithoutSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) . when ( command ) . getAllImageSnapshots ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
private void setupNetworkClusterDao ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > expectedCluster = java.util.Collections.singletonList ( cluster ) ; org.ovirt.engine.core.dao.ClusterDao clusterDaoMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.ClusterDao.class ) ; org.mockito.Mockito.when ( clusterDaoMock.getAllForStoragePool ( storagePoolId ) ) . thenReturn ( expectedCluster ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getClusterDao ( ) ) . thenReturn ( clusterDaoMock ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateAttachmentNotReferenceVlanDevice ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = existingInterfacesMap.get ( attachment.getNicName ( ) ) ; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ATTACHMENT_REFERENCE_VLAN_DEVICE ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , attachment.getNetworkName ( ) ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NIC_NAME , attachment.getNicName ( ) ) ) . when ( ( ( nic != null ) && ( org.ovirt.engine.core.utils.NetworkUtils.isVlan ( nic ) ) ) ) ; }
public void addExternallyManagedVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > externalVmList ) { for ( org.ovirt.engine.core.common.businessentities.VmStatic currVm : externalVmList ) { org.ovirt.engine.core.common.action.AddVmParameters params = new org.ovirt.engine.core.common.action.AddVmParameters ( currVm ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.AddVmFromScratch , params , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { org.ovirt.engine.core.bll.VdsEventListener.log.debug ( "Failed adding Externally managed VM '{}'" , currVm.getName ( ) ) ; } } }
public boolean canShowConsole ( org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol , org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { if ( selectedProtocol == null ) { return false ; } boolean isSpiceAvailable = ( selectedProtocol.equals ( ConsoleProtocol.SPICE ) ) && ( canOpenSpiceConsole ( item ) ) ; boolean isRdpAvailable = ( selectedProtocol.equals ( ConsoleProtocol.RDP ) ) && ( canOpenRDPConsole ( item ) ) ; boolean isVncAvailable = selectedProtocol.equals ( ConsoleProtocol.VNC ) ; return ( isSpiceAvailable || isRdpAvailable ) || isVncAvailable ; }
private org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel getStorageModelByStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { switch ( storage.getStorageType ( ) ) { case NFS : return new org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ( ) ; case FCP : return new org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel ( ) ; case ISCSI : return new org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel ( ) ; case LOCALFS : return new org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel ( ) ; case POSIXFS : return new org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel ( ) ; case GLUSTERFS : return new org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel ( ) ; } return null ; }
protected void executeVdsBrokerCommand ( ) { org.ovirt.engine.core.common.vdscommands.gluster.SetUpGlusterGeoRepMountBrokerVDSParameters parameters = org.ovirt.engine.core.vdsbroker.gluster.SetupGlusterGeoRepMountBrokerVDSCommand.getParameters ( ) ; status = org.ovirt.engine.core.vdsbroker.gluster.SetupGlusterGeoRepMountBrokerVDSCommand.getBroker ( ) . glusterGeoRepMountBrokerSetup ( parameters.getRemoteVolumeName ( ) , parameters.getRemoteUserName ( ) , parameters.getRemoteGroupName ( ) , parameters.isPartial ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.SetupGlusterGeoRepMountBrokerVDSCommand.proceedProxyReturnValue ( ) ; }
private org.ovirt.engine.core.common.action.RemoveCinderDiskParameters buildChildCommandParameters ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters removeDiskParams = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters ( cinderDisk.getId ( ) ) ; removeDiskParams.setParentCommand ( org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getActionType ( ) ) ; removeDiskParams.setParentParameters ( org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters ( ) ) ; removeDiskParams.setShouldBeLogged ( false ) ; removeDiskParams.setEndProcedure ( EndProcedure.COMMAND_MANAGED ) ; return removeDiskParams ; }
private void onNumaSupport ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getWindow ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.numa.NumaSupportModel ) ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getWindow ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > updateParamsList = model.getUpdateParameters ( ) ; if ( ! ( updateParamsList.isEmpty ( ) ) ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.UpdateVmNumaNodes , updateParamsList ) ; } org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.setWindow ( null ) ; }
public void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
private java.util.Set < org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity > getClusterVnicProfileMappingEntities ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { final java.util.Set < org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity > result = externalVnicProfilesPerTargetCluster.get ( cluster ) ; if ( result == null ) { return new java.util.HashSet < > ( ) ; } else { return result ; } }
public void testClusterSpiceProxy ( ) { org.ovirt.engine.api.restapi.types.VM entity = new org.ovirt.engine.api.restapi.types.VM ( ) ; entity.setVdsGroupSpiceProxy ( org.ovirt.engine.api.restapi.types.VmMapperTest.CLUSTER_SPICE_PROXY ) ; org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.types.VmMapper.map ( entity , ( ( org.ovirt.engine.api.model.Vm ) ( null ) ) ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapperTest.CLUSTER_SPICE_PROXY , model.getDisplay ( ) . getProxy ( ) ) ; }
public void testParseStraySemiColons ( ) { java.util.List < org.ovirt.engine.api.model.Agent > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( ";;foo:one=1,two=2,three=3;;" , "one=bool,two=int,three=bool" ) ; assertNotNull ( ret ) ; assertEquals ( 1 , ret.size ( ) ) ; verifyResult ( ret.get ( 0 ) , "foo" , "one" , "bool" , "1" , "two" , "int" , "2" , "three" , "bool" , "3" ) ; }
public void setRowData ( int start , final java.util.List < ? extends T > values ) { super . setRowData ( start , values ) ; selectionModel.resolveChanges ( ) ; if ( ( isAttached ( ) ) && ( isVisible ( ) ) ) { autoSelectFirst ( ) ; } updateTableControls ( ) ; enforceScrollPosition ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > setUpLuns ( ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun.setLUN_id ( GUIDS [ 2 ] . toString ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > luns = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ( ) ; luns.add ( lun ) ; return luns ; }
public static boolean CanUpdateField ( java.lang.Class < ? > objectType , java.lang.String fieldName , java.lang.Enum < ? > status , java.lang.Object fieldContainer ) { org.ovirt.engine.core.utils.ObjectIdentityChecker checker = org.ovirt.engine.core.utils.ObjectIdentityChecker.identities.get ( objectType ) ; if ( checker != null ) { return checker.IsFieldUpdatable ( status , fieldName , fieldContainer ) ; } return true ; }
public static boolean canVmsBePaused ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > items ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : items ) { if ( ! ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isSuspendSupportedByArchitecture ( vm.getClusterArch ( ) , vm.getVdsGroupCompatibilityVersion ( ) ) ) ) { return false ; } } return true ; }
protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getVlanDevice ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic , org.ovirt.engine.core.common.businessentities.network.Network network ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface n : nics ) { if ( ( ( baseNic.getName ( ) . equals ( n.getBaseInterface ( ) ) ) && ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( n.getVlanId ( ) , network.getVlanId ( ) ) ) ) || ( org.apache.commons.lang.StringUtils.equals ( n.getNetworkName ( ) , network.getName ( ) ) ) ) { return n ; } } return null ; }
protected void updateDataCenterVersion ( ) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model.setDataCenterVersion ( storagePool.getCompatibilityVersion ( ) ) ; } } ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDataCenterById ( query , getEntity ( ) . getStoragePoolId ( ) ) ; }
protected void copyVmDevices ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices ( vmDevicesSourceId , org.ovirt.engine.core.bll.AddVmCommand.getVmId ( ) , getSrcDeviceIdToTargetDeviceIdMapping ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isSoundDeviceEnabled ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isConsoleEnabled ( ) , isVirtioScsiEnabled ( ) , isBalloonEnabled ( ) , false ) ; if ( ( instanceTypeId ) != null ) { copyDiskDevicesFromTemplate ( ) ; } }
public void setTestResultImage ( java.lang.String errorMessage ) { testResultImage.setResource ( ( errorMessage.isEmpty ( ) ? resources.logNormalImage ( ) : resources.logErrorImage ( ) ) ) ; testResultImage.setStylePrimaryName ( style.testResultImage ( ) ) ; testResultMessage.setText ( ( errorMessage.isEmpty ( ) ? constants.testSuccessMessage ( ) : errorMessage ) ) ; }
private org.ovirt.engine.core.compat.Guid getClusterId ( org.ovirt.engine.api.model.ExternalVmImport vmImport ) { if ( vmImport.getCluster ( ) . isSetId ( ) ) { return asGuid ( vmImport.getCluster ( ) . getId ( ) ) ; } else { java.lang.String clusterName = vmImport.getCluster ( ) . getName ( ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , QueryType.GetClusterByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( clusterName ) , clusterName , true ) ; return cluster.getId ( ) ; } }
private void attachDetachDisk ( org.ovirt.engine.core.common.businessentities.storage.Disk disk , org.ovirt.engine.core.common.action.VdcActionType actionType ) { runInternalAction ( actionType , new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters ( new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( disk.getId ( ) , org.ovirt.engine.core.bll.CloneVmCommand.getParameters ( ) . getNewVmGuid ( ) ) , disk.getPlugged ( ) , disk.getReadOnly ( ) ) ) ; }
public void nameLengthIsTooLong ( ) { org.mockito.Mockito.when ( host.getName ( ) ) . thenReturn ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( ( ( org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE ) * 2 ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.nameLengthIsLegal ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG ) ) ; }
private void buildFaultResult ( ) { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault ( ) ; fault.setError ( EngineError.ReachedMaxNumberOfHostsInDC ) ; fault.setMessage ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getVdsErrorsTranslator ( ) . TranslateErrorTextSingle ( fault.getError ( ) . toString ( ) ) ) ; org.ovirt.engine.core.bll.AddVdsSpmIdCommand.getReturnValue ( ) . setFault ( fault ) ; }
public void testIsNetworkInSyncWhenIpv4StaticBootProtocolNetmaskEqual ( ) { initIpv4ConfigurationBootProtocolNetmask ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL , true ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public org.ovirt.engine.api.model.Tag get ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Tags > tags = getBackendCollection ( org.ovirt.engine.core.common.businessentities.Tags.class , QueryType.GetTagsByVmId , new org.ovirt.engine.core.common.queries.GetTagsByVmIdParameters ( vmId.toString ( ) ) ) ; for ( org.ovirt.engine.core.common.businessentities.Tags tag : tags ) { if ( tag.getTagId ( ) . equals ( guid ) ) { return addLinks ( populate ( map ( tag , null ) , tag ) ) ; } } return notFound ( ) ; }
private void addPermissionForTemplate ( org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd , org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.bll.PredefinedRoles role ) { permissionsToAdd.addPermission ( userId , role.getId ( ) , org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getVmTemplateId ( ) , VdcObjectType.VmTemplate ) ; }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ; org.ovirt.engine.core.bll.ValidationResult slavesValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , "slaveA" ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.VAR_NETWORK_NAME , "networkName" ) ) ; org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , slavesValidationResult , slavesValidationResult ) ; }
protected boolean isBlankTemplateSelected ( ) { if ( isBlankTemplate ( getSelectedItem ( ) ) ) { return true ; } if ( ( getSelectedItems ( ) ) == null ) { return false ; } for ( java.lang.Object selectedItem : getSelectedItems ( ) ) { if ( isBlankTemplate ( selectedItem ) ) { return true ; } } return false ; }
public void canDoActionSpaceValidationSucceeds ( ) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , VolumeType.Preallocated ) ; mockVm ( ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddDiskToVmCommandTest.mockStorageDomainValidatorWithSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmPoolDao ( ) ; existingVmPool = dao.get ( org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_POOL_ID ) ; deletableVmPool = dao.get ( org.ovirt.engine.core.dao.VmPoolDAOTest.DELETABLE_VM_POOL_ID ) ; newVmPool = new org.ovirt.engine.core.common.businessentities.VmPool ( ) ; newVmPool.setVmPoolName ( "New VM Pool" ) ; newVmPool.setVmPoolDescription ( "This is a new VM pool." ) ; newVmPool.setVdsGroupId ( org.ovirt.engine.core.dao.VmPoolDAOTest.VDS_GROUP_ID ) ; existingVmPoolMap = dao.getVmPoolMapByVmGuid ( new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f4355" ) ) ; newVmPoolMap = new org.ovirt.engine.core.common.businessentities.VmPoolMap ( org.ovirt.engine.core.dao.VmPoolDAOTest.FREE_VM_ID , existingVmPool.getVmPoolId ( ) ) ; }
public void checkAndRemoveVolumeSnapshotLimitsAlert ( final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume ) { if ( ! ( glusterDBUtils.isVolumeSnapshotSoftLimitReached ( volume.getId ( ) ) ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeVolumeAlert ( volume.getId ( ) , AuditLogType.GLUSTER_VOLUME_SNAPSHOT_SOFT_LIMIT_REACHED ) ; } if ( ! ( glusterDBUtils.isVolumeSnapshotHardLimitReached ( volume.getId ( ) ) ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeVolumeAlert ( volume.getId ( ) , AuditLogType.GLUSTER_VOLUME_SNAPSHOT_HARD_LIMIT_REACHED ) ; } }
public org.ovirt.engine.core.common.businessentities.VmDynamic getVmDynamicToSave ( ) { return vmDynamicToSave ; }
public void readKeysData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.configurationsync_3_2.ConfigurationSync.row43Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync ) { try { int length = 0 ; this . tag_join_id = readString ( dis ) ; this . tag_name = readString ( dis ) ; this . tag_description = readString ( dis ) ; this . tag_path = readString ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public static void addOrUpdateTaskInDB ( org.ovirt.engine.core.bll.SPMAsyncTask asyncTask ) { try { if ( ( asyncTask.getParameters ( ) . getDbAsyncTask ( ) ) != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAsyncTaskDao ( ) . saveOrUpdate ( asyncTask.getParameters ( ) . getDbAsyncTask ( ) , asyncTask.getEntityType ( ) , asyncTask.getAssociatedEntities ( ) ) ; } } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.log.error ( java.lang.String.format ( "Adding/Updating task %1$s to DataBase threw an exception." , asyncTask.getVdsmTaskId ( ) ) , e ) ; } }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > findPermissionCheckSubjects ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.common.action.ActionType actionType ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < > ( ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( clusterId , org.ovirt.engine.core.common.VdcObjectType.Cluster , actionType.getActionGroup ( ) ) ) ; return permissionList ; }
private void setupVdsNetworkInterfaceDao ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > expectedVdsNetworkInterface = java.util.Collections.singletonList ( vdsNetworkInterface ) ; org.ovirt.engine.core.dao.InterfaceDao vdsNetworkInterfaceDaoMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.InterfaceDao.class ) ; org.mockito.Mockito.when ( vdsNetworkInterfaceDaoMock.getVdsInterfacesByNetworkId ( networkId ) ) . thenReturn ( expectedVdsNetworkInterface ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getInterfaceDao ( ) ) . thenReturn ( vdsNetworkInterfaceDaoMock ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.defaultSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( postponedSpmPriority ) != null ) { updateSpmPriority ( postponedSpmPriority ) ; } spmInitialized = true ; }
private org.ovirt.engine.core.bll.ValidationResult validateHostIsReadyToRun ( final org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { sb.append ( " VDS " ) . append ( vds.getName ( ) ) . append ( " " ) . append ( vds.getId ( ) ) . append ( " " ) ; for ( org.ovirt.engine.core.bll.VdsSelector.HostValidator validator : this . hostValidators ) { org.ovirt.engine.core.dal.VdcBllMessages result = validator.validate ( vds , sb , isMigrate ) ; if ( result != null ) { return new org.ovirt.engine.core.bll.ValidationResult ( result ) ; } } return ValidationResult.VALID ; }
protected static java.lang.String getMessageOrNull ( org.ovirt.engine.core.common.AuditLogType logType ) { final java.lang.String key = logType.name ( ) ; try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString ( key ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error ( "Key '{}' is not translated in '{}'" , key , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName ( ) ) ; return null ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel externalDiscoveredHostsListModel = getExternalDiscoveredHosts ( ) ; externalDiscoveredHostsListModel.setItems ( hosts ) ; externalDiscoveredHostsListModel.setIsChangable ( true ) ; }
private static boolean vmAssignedToUser ( org.ovirt.engine.core.compat.Guid vmId , java.util.ArrayList < java.lang.String > messages ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . getAllForVm ( vmId ) . size ( ) ) > 0 ) { messages.add ( EngineMessage.VM_POOL_CANNOT_ADD_VM_WITH_USERS_ATTACHED_TO_POOL.toString ( ) ) ; return true ; } return false ; }
public void setEnabled ( boolean enabled ) { for ( E item : org.ovirt.engine.ui.common.widget.editor.EnumRadioEditor.EnumRadioCellTable.getVisibleItems ( ) ) { setEnabled ( item , enabled ) ; } if ( enabled ) { nameColumn.getCell ( ) . setStyleClass ( OvirtCss.LABEL_ENABLED ) ; } else { nameColumn.getCell ( ) . setStyleClass ( OvirtCss.LABEL_DISABLED ) ; } }
private void persistTopology ( org.ovirt.engine.core.common.businessentities.VDS host , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > dbNics , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks , org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData ) { final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl ( interfaceDao , host.getInterfaces ( ) , dbNics , userConfiguredData.getUserOverriddenNicValuesByNicName ( ) ) ; networkInterfacesPersister.persistTopology ( ) ; createHostNetworkAttachmentsPersister ( host , clusterNetworks , userConfiguredData ) . persistNetworkAttachments ( ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareSharedStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain sharedDomain = createDataStorageDomain ( status , name , SHARED_SD_ID ) ; org.mockito.Mockito.doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao ( ) ; org.mockito.Mockito.when ( storageDomainDao.getAllForStoragePool ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.singletonList ( sharedDomain ) ) ; cmd.setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return sharedDomain ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > setUpFiles ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > isos = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.RepoImage > ( ) ; for ( int i = 0 ; i < ( NAMES.length ) ; i ++ ) { org.ovirt.engine.core.common.businessentities.RepoImage file = new org.ovirt.engine.core.common.businessentities.RepoImage ( ) ; file.setRepoImageId ( NAMES [ i ] ) ; isos.add ( file ) ; } return isos ; }
private void init ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid hostId : hostDynamicDao.getIdsOfHostsWithStatus ( VDSStatus.Up ) ) { parameters.add ( new org.ovirt.engine.core.common.action.VdsActionParameters ( hostId ) ) ; } backend.runInternalMultipleActions ( ActionType.RefreshHostDevices , parameters ) ; hostDeviceDao.cleanDownVms ( ) ; }
public static void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > createNetworksMap ( java.lang.String networkName , boolean vmNetwork , int mtu , java.lang.Integer vlanId ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setVmNetwork ( vmNetwork ) ; network.setMtu ( mtu ) ; network.setVlanId ( vlanId ) ; return java.util.Collections.singletonMap ( networkName , network ) ; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered , org.ovirt.engine.core.bll.provider.ProviderProxyFactory providerProxyFactory ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade ( ) . getStorageDomainDao ( ) . get ( storageDomainId , userID , isFiltered ) ; if ( storageDomain != null ) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade ( ) . getProviderDao ( ) . get ( new org.ovirt.engine.core.compat.Guid ( storageDomain.getStorage ( ) ) ) ; return providerProxyFactory.create ( provider ) ; } return null ; }
protected void onAction ( ) { if ( item.isManaged ( ) ) { item.edit ( ) ; } else { java.util.Map < org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation , java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand > > operationMap = item.getSetupModel ( ) . commandsFor ( item ) ; final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand detach = operationMap.get ( NetworkOperation.REMOVE_UNMANAGED_NETWORK ) . get ( 0 ) ; item.getSetupModel ( ) . onOperation ( NetworkOperation.REMOVE_UNMANAGED_NETWORK , detach ) ; } }
public void testWithEnoughSparesMemory ( ) { parameters.put ( PolicyUnitParameter.HE_SPARES_COUNT.getDbName ( ) , "1" ) ; hostedEngine.setVmMemSizeMb ( 7000 ) ; hosts.get ( 3 ) . setPhysicalMemMb ( 2048 ) ; hosts.get ( 4 ) . setPhysicalMemMb ( 2048 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = policyUnit.filter ( cluster , hosts , vm , parameters , messages ) ; org.junit.jupiter.api.Assertions.assertEquals ( 5 , result.size ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties ( ) ; jobProperties.put ( VdcObjectType.VM.name ( ) . toLowerCase ( ) , org.apache.commons.lang.StringUtils.defaultString ( org.ovirt.engine.core.bll.CloneVmCommand.getParameters ( ) . getNewName ( ) ) ) ; jobProperties.put ( "sourcevm" , org.apache.commons.lang.StringUtils.defaultString ( getSourceVmFromDb ( ) . getName ( ) ) ) ; } return jobProperties ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeOptionsInfoQuery.getBackendResourceManager ( ) . RunVdsCommand ( VDSCommandType.GetGlusterVolumeOptionsInfo , new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ( getUpServerId ( org.ovirt.engine.core.bll.gluster.GetGlusterVolumeOptionsInfoQuery.getParameters ( ) . getClusterId ( ) ) ) ) ; org.ovirt.engine.core.bll.gluster.GetGlusterVolumeOptionsInfoQuery.getQueryReturnValue ( ) . setReturnValue ( returnValue.getReturnValue ( ) ) ; }
private void internalEndWithFailure ( ) { log.error ( "Ending command '{}' with failure." , getClass ( ) . getName ( ) ) ; if ( hasTaskHandlers ( ) ) { if ( hasStepsToRevert ( ) ) { getCurrentTaskHandler ( ) . endWithFailure ( ) ; revertPreviousHandlers ( ) ; } else { getReturnValue ( ) . setEndActionTryAgain ( false ) ; } startPollingAsyncTasks ( ) ; } else { endWithFailure ( ) ; } rollbackQuota ( ) ; }
public static void GetVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected org.springframework.jdbc.core.simple.ParameterizedRowMapper < org.ovirt.engine.core.common.businessentities.DiskLunMap > createEntityRowMapper ( ) { return org.ovirt.engine.core.dao.DiskLunMapDaoDbFacadeImpl.DiskLunMapRowMapper.instance ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder addRemovedLabels ( java.lang.String ... removedLabels ) { if ( nullParameters ( removedLabels ) ) { return this ; } if ( ( parameters.getRemovedLabels ( ) ) == null ) { parameters.setRemovedLabels ( new java.util.HashSet < > ( ) ) ; } parameters.getRemovedLabels ( ) . addAll ( java.util.Arrays.asList ( removedLabels ) ) ; return this ; }
public org.ovirt.engine.core.bll.ValidationResult ipConfiguredForStaticBootProtocol ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration ( ) ; boolean failWhen = ( ( ipConfiguration != null ) && ( ( ipConfiguration.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP ) ) ) && ( unsetAddress ( ipConfiguration ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.NETWORK_ADDR_MANDATORY_IN_STATIC_IP ) . when ( failWhen ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { if ( ! ( labelPopup.validate ( ) ) ) { return ; } sourceListModel.setConfirmWindow ( null ) ; java.lang.String label = labelPopup.getLabel ( ) . getEntity ( ) ; dcLabels.add ( label ) ; NetworkOperation.LABEL.getCommand ( new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel ( label , this ) , networkCommand.getOp2 ( ) , allNics ) . execute ( ) ; redraw ( ) ; }
public void mapVmWatchdog ( ) { org.ovirt.engine.core.common.businessentities.VmWatchdog entity = new org.ovirt.engine.core.common.businessentities.VmWatchdog ( ) ; entity.setAction ( VmWatchdogAction.RESET ) ; entity.setModel ( VmWatchdogType.i6300esb ) ; entity.setId ( Guid.Empty ) ; org.ovirt.engine.api.model.Watchdog model = org.ovirt.engine.api.restapi.types.WatchdogMapper.map ( entity , null ) ; org.junit.jupiter.api.Assertions.assertNotNull ( model ) ; org.junit.jupiter.api.Assertions.assertEquals ( WatchdogAction.RESET , model.getAction ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( WatchdogModel.I6300ESB , model.getModel ( ) ) ; }
private void assertMajor ( java.lang.Integer expected , java.lang.String text ) { org.ovirt.engine.api.model.Version version = org.ovirt.engine.api.restapi.types.VersionMapper.fromVersionString ( text ) ; org.junit.jupiter.api.Assertions.assertNotNull ( version ) ; java.lang.Integer actual = version.getMajor ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( expected , actual , "Incorrect major version number" ) ; }
public void isTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery , java.lang.String templateName , org.ovirt.engine.core.compat.Guid datacenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean convert ( java.lang.Object source ) { return ( source != null ) && ( ! ( ( java.lang.Boolean ) ( source ) ) ) ; } } ; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( templateName ) ; params.setDatacenterId ( datacenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , params , aQuery ) ; }
public static void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void refuseBalloonOnPPC ( ) { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = setupCanAddPpcTest ( ) ; cmd.getParameters ( ) . setBalloonEnabled ( true ) ; org.mockito.Mockito.when ( osRepository.isBalloonEnabled ( cmd.getParameters ( ) . getVm ( ) . getVmOsId ( ) , cmd.getCluster ( ) . getCompatibilityVersion ( ) ) ) . thenReturn ( false ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; }
public void executeCommandWhenFailed ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeWithRebalanceTask ) ) ; prepareMocks ( cmd ) ; mockBackend ( false , VdcBllErrors.GlusterVolumeRebalanceStopFailed ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.never ( ) ) . endStepJobAborted ( ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.never ( ) ) . releaseVolumeLock ( ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VmNetworkInterface , org.ovirt.engine.core.common.businessentities.VmTemplate > object ) { return object.getFirst ( ) . getName ( ) ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
public void testParseReloadActionWithUserPassFile ( ) { parser.parse ( new java.lang.String [ ] { "--reload" , "--user=username" , "--admin-pass-file=filename" } ) ; org.junit.jupiter.api.Assertions.assertEquals ( ConfigActionType.ACTION_RELOAD , parser.getConfigAction ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "username" , parser.getUser ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "filename" , parser.getAdminPassFile ( ) ) ; }
public static void GetGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
public void setMigrationNetwork ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel model , boolean value ) { if ( ! ( isMultiCluster ( ) ) ) { if ( value ) { if ( ( getMigrationNetwork ( ) ) != null ) { getMigrationNetwork ( ) . setMigrationNetwork ( false ) ; } } else { managementNetwork.setMigrationNetwork ( true ) ; } } model.setMigrationNetwork ( value ) ; }
public static void getStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
public void testIsmonitoringNeededTrue ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setStatus ( VDSStatus.NonOperational ) ; vds.setVmCount ( 1 ) ; org.junit.Assert.assertTrue ( strategy.isMonitoringNeeded ( vds ) ) ; vds.setStatus ( VDSStatus.Up ) ; org.junit.Assert.assertTrue ( strategy.isMonitoringNeeded ( vds ) ) ; }
public void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void setVirtioScsiController ( org.ovirt.engine.api.model.Vm model ) { if ( ! ( model.isSetVirtioScsi ( ) ) ) { model.setVirtioScsi ( new org.ovirt.engine.api.model.VirtioScsi ( ) ) ; } model.getVirtioScsi ( ) . setEnabled ( ( ! ( org.ovirt.engine.api.restapi.util.VmHelper.getVirtioScsiControllersForEntity ( this , new org.ovirt.engine.core.compat.Guid ( model.getId ( ) ) ) . isEmpty ( ) ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusDetailForXmlRpc glusterVolumeGeoRepSessionStatus ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { try { java.util.Map < java.lang.String , java.lang.Object > response = vdsServer.glusterVolumeGeoRepSessionStatus ( volumeName , slaveHost , slaveVolumeName , userName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusDetailForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getDbUserDao ( ) ; vm = new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f4354" ) ; existingUser = dao.get ( new org.ovirt.engine.core.compat.Guid ( "9bf7c640-b620-456f-a550-0348f366544a" ) ) ; deletableUser = dao.get ( new org.ovirt.engine.core.compat.Guid ( "9bf7c640-b620-456f-a550-0348f366544b" ) ) ; newUser = new org.ovirt.engine.core.common.businessentities.DbUser ( ) ; newUser.setExternalId ( "0" ) ; newUser.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newUser.setFirstName ( "Bob" ) ; newUser.setLastName ( "Milqtoste" ) ; newUser.setLoginName ( "newuser" ) ; newUser.setEmail ( "newuser@redhat.com" ) ; newUser.setDomain ( "domain" ) ; newUser.setGroupNames ( "groups" ) ; newUser.setNamespace ( "*" ) ; }
public void validateFailsDiscardFunctionalityBreaks ( ) { passAllValidations ( ) ; org.ovirt.engine.core.common.errors.EngineMessage lunsBreakStorageDomainDiscardSupportMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_LUN_BREAKS_STORAGE_DOMAIN_PASS_DISCARD_SUPPORT ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( lunsBreakStorageDomainDiscardSupportMessage ) ) . when ( discardHelper ) . isExistingDiscardFunctionalityPreserved ( org.mockito.ArgumentMatchers.anyList ( ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.StorageDomain.class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , lunsBreakStorageDomainDiscardSupportMessage ) ; }
public void testExistingPassDiscardFunctionalityIsPreservedAllLunsHaveDiscardFunctionality ( ) { storageDomain.setSupportsDiscard ( true ) ; storageDomainDisks.add ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( discardHelper.isExistingPassDiscardFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 2048L ) ) , storageDomain ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc getVolumeInfo ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmpRpcReturnValue = vdsServer.getVolumeInfo ( sdUUID , spUUID , imgUUID , volUUID ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc ( xmpRpcReturnValue ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void setupClusterDao ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > expectedNetworkCluster = java.util.Collections.singletonList ( networkCluster ) ; org.mockito.Mockito.when ( networkClusterDaoMock.getAllForNetwork ( networkId ) ) . thenReturn ( expectedNetworkCluster ) ; }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetVdsGroupByNameQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetVdsGroupByNameQuery.getDbFacade ( ) . getVdsGroupDao ( ) . getByName ( org.ovirt.engine.core.bll.GetVdsGroupByNameQuery.getParameters ( ) . getName ( ) , org.ovirt.engine.core.bll.GetVdsGroupByNameQuery.getUserID ( ) , org.ovirt.engine.core.bll.GetVdsGroupByNameQuery.getParameters ( ) . isFiltered ( ) ) ) ; }
public static void getNumberOfActiveVmsInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer.valueOf ( 0 ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetNumberOfActiveVmsInVdsGroupByVdsGroupId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public boolean canOpenRDPConsole ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { if ( ( item.isPool ( ) ) || ( ! ( isRDPAvailable ( ) ) ) ) return false ; if ( ( ( ( item.getAdditionalConsoleModel ( ) ) != null ) && ( item.getAdditionalConsoleModel ( ) . getConnectCommand ( ) . getIsAvailable ( ) ) ) && ( item.getAdditionalConsoleModel ( ) . getConnectCommand ( ) . getIsExecutionAllowed ( ) ) ) { return true ; } return false ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionPause ( java.lang.String masterVolumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName , boolean force ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeGeoRepSessionPause ( masterVolumeName , slaveHost , slaveVolumeName , userName , force ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public org.ovirt.engine.api.model.Agent update ( org.ovirt.engine.api.model.Agent agent ) { org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > agentResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.QueryType.GetFenceAgentById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ; org.ovirt.engine.core.common.businessentities.pm.FenceAgent entity = getEntity ( agentResolver , true ) ; return performUpdate ( agent , entity , map ( entity ) , agentResolver , ActionType.UpdateFenceAgent , new org.ovirt.engine.api.restapi.resource.BackendFenceAgentResource.UpdateParametersProvider ( ) ) ; }
private static void initMigrationSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.migrationSupport = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetMigrationSupport ) , callback ) ; }
public static void GetAllowClusterWithVirtGlusterEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean.TRUE ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.utils.pm.VdsFenceOptions options = new org.ovirt.engine.core.utils.pm.VdsFenceOptions ( ) ; java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > map = options.getFencingOptionMappingMap2 ( ) ; org.ovirt.engine.core.bll.GetAgentFenceOptions2Query.getQueryReturnValue ( ) . setReturnValue ( map ) ; org.ovirt.engine.core.bll.GetAgentFenceOptions2Query.getQueryReturnValue ( ) . setSucceeded ( ( ( map.size ( ) ) > 0 ) ) ; }
private void restoreVmFromBaseSnapshot ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( snapshotDao.exists ( vm.getId ( ) , SnapshotType.STATELESS ) ) { log.info ( "Deleting snapshots for stateless vm '{}'" , vm.getId ( ) ) ; org.ovirt.engine.core.common.action.VmOperationParameterBase restoreParams = new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vm.getId ( ) ) ; restoreParams.setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; runInternalAction ( ActionType.RestoreStatelessVm , restoreParams , org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getContext ( ) . withCompensationContext ( null ) ) ; } }
protected boolean isInterfaceSupportedForPlugUnPlug ( org.ovirt.engine.core.common.businessentities.Disk disk ) { if ( ! ( ( DiskInterface.VirtIO.equals ( disk.getDiskInterface ( ) ) ) || ( DiskInterface.VirtIO_SCSI.equals ( disk.getDiskInterface ( ) ) ) ) ) { addCanDoActionMessage ( VdcBllMessages.HOT_PLUG_DISK_IS_NOT_VIRTIO ) ; return false ; } return true ; }
public void networkQosExists ( ) { org.mockito.Mockito.when ( vnicProfile.getNetworkQosId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID ) ; org.mockito.Mockito.when ( networkQosDao.get ( org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID ) ) . thenReturn ( networkQos ) ; org.hamcrest.MatcherAssert.assertThat ( validator.networkQosExistsOrNull ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testValidateModifiedBondSlavesWhenSlaveIsNotValid ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setBonds ( java.util.Collections.singletonList ( bond ) ) ; doTestValidateModifiedBondSlaves ( params , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.Network > emptyList ( ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE ) ) ; }
public void teardown ( ) { try { if ( ( sched ) != null ) { sched.shutdown ( ) ; } } catch ( org.quartz.SchedulerException e ) { log.error ( "Failed to shutdown Quartz service: {}" , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; } }
private void initCustomPropertySheet ( ) { setCustomPropertySheet ( new org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel ( ) ) ; if ( ( clusterPolicy.getParameterMap ( ) ) != null ) { getCustomProperties ( ) . putAll ( clusterPolicy.getParameterMap ( ) ) ; } getCustomPropertySheet ( ) . setIsChangable ( ( ! ( clusterPolicy.isLocked ( ) ) ) ) ; customPropertiesInitialized = true ; refreshCustomProperties ( null , false ) ; }
public static void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void start ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( vds.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.StartVds , list , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
protected void endExecutionMonitoring ( ) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext ( ) ; switch ( executionContext.getExecutionMethod ( ) ) { case AsJob : org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( executionContext , false ) ; break ; case AsStep : org.ovirt.engine.core.bll.job.ExecutionHandler.endStep ( executionContext , executionContext.getStep ( ) , false ) ; break ; default : } }
private int NumberOfTasksToPoll ( ) { int retValue = 0 ; for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values ( ) ) { if ( task.getShouldPoll ( ) ) { retValue ++ ; } } return retValue ; }
private void removeMemoryFromActiveSnapshot ( ) { if ( memoryVolumeFromSnapshot.isEmpty ( ) ) { return ; } if ( ( getSnapshotDao ( ) . getNumOfSnapshotsByMemory ( memoryVolumeFromSnapshot ) ) == 1 ) { removeMemoryVolumes ( memoryVolumeFromSnapshot , org.ovirt.engine.core.bll.RunVmCommand.getActionType ( ) , true ) ; } getSnapshotDao ( ) . removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ; }
private void updateOptions ( ) { getCompulsoryActions ( ) . clear ( ) ; getOptionalActions ( ) . clear ( ) ; if ( ( getEntity ( ) ) != null ) { startProgress ( null ) ; if ( ( getEntity ( ) . getStorageType ( ) ) != ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) { updateOptionsNonLocalFSData ( ) ; } else { updateOptionsLocalFSData ( ) ; } } }
private void storeVncData ( org.ovirt.engine.ui.uicommonweb.models.VmConsoles vmConsoles , org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker keyMaker ) { org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel consoleModel = vmConsoles.getConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel.class ) ; if ( consoleModel != null ) { clientStorage.setLocalItem ( keyMaker.make ( org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.VNC_CLIENT_MODE ) , consoleModel.getClientConsoleMode ( ) . toString ( ) ) ; storeBool ( keyMaker.make ( org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.REMAP_CAD_VNC ) , consoleModel.getVncImpl ( ) . getOptions ( ) . isRemapCtrlAltDelete ( ) ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.permissions > getAllForEntity ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered , boolean allUsersWithPermission , int appMode ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) . addValue ( "app_mode" , appMode ) ; java.lang.String functionName = "GetPermissionsByEntityId" ; if ( allUsersWithPermission ) { functionName = "GetAllUsersWithPermissionsOnEntityByEntityId" ; } return getCallsHandler ( ) . executeReadList ( functionName , org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance , parameterSource ) ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public void imageProvidedForOvirtNode ( ) { org.mockito.Mockito.when ( host.getVdsType ( ) ) . thenReturn ( VDSType.oVirtVintageNode ) ; java.lang.String imageName = org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 20 ) ; org.junit.Assert.assertThat ( validator.imageProvidedForOvirtNode ( imageName ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc refreshVolume ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmpRpcReturnValue = vdsServer.refreshVolume ( sdUUID , spUUID , imgUUID , volUUID ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmpRpcReturnValue ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) , null ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void executeQueryCommand ( ) { java.lang.String domain = org.ovirt.engine.core.bll.GetDirectoryUserByIdQuery.getParameters ( ) . getDomain ( ) ; org.ovirt.engine.core.common.utils.ExternalId id = org.ovirt.engine.core.bll.GetDirectoryUserByIdQuery.getParameters ( ) . getId ( ) ; org.ovirt.engine.core.bll.adbroker.LdapBroker broker = org.ovirt.engine.core.bll.adbroker.LdapFactory.getInstance ( domain ) ; org.ovirt.engine.core.common.businessentities.LdapUser user = ( ( org.ovirt.engine.core.common.businessentities.LdapUser ) ( broker.runAdAction ( AdActionType.GetAdUserByUserId , new org.ovirt.engine.core.bll.adbroker.LdapSearchByIdParameters ( domain , id ) ) . getReturnValue ( ) ) ) ; org.ovirt.engine.core.bll.GetDirectoryUserByIdQuery.getQueryReturnValue ( ) . setReturnValue ( user ) ; }
public void getVmTemplateWithVm ( ) { b.setVmTemplate ( null ) ; b.setVmTemplateId ( null ) ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setVmtGuid ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VmTemplate t = b.getVmTemplate ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( t ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.configurationsync_4_1.ConfigurationSync.copyOfupdateFirstSyncStruct.commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync ) { try { int length = 0 ; this . var_name = readString ( dis ) ; this . var_value = readString ( dis ) ; this . var_datetime = readDate ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
private org.ovirt.engine.core.common.businessentities.VmStatic getVmStatic ( ) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; vmStatic.setOsId ( OsRepository.DEFAULT_X86_OS ) ; vmStatic.setNumOfMonitors ( 1 ) ; vmStatic.setMemSizeMb ( 300 ) ; vmStatic.setMaxMemorySizeMb ( org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.MAX_MEMORY_SIZE ) ; vmStatic.setStateless ( false ) ; vmStatic.setVmtGuid ( vmTemplateId ) ; return vmStatic ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return new org.ovirt.engine.ui.uicommonweb.UICommand ( org.ovirt.engine.ui.webadmin.widget.tree.SystemTree.constants.treeCollapseAll ( ) , new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget ( ) { @ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { com.google.gwt.user.cellview.client.TreeNode collapseNode = findNode ( getDataDisplayWidget ( ) . getRootTreeNode ( ) , modelProvider.getSelectionModel ( ) . getSelectedObject ( ) ) ; if ( collapseNode != null ) { collapseTree ( collapseNode ) ; } } } ) ; }
private void updatePriority ( final org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil.PriorityUpdatingCallbacks callbacks ) { if ( ( cachedMaxPriority ) == null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getMaxVmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.lang.Integer > ( ) { @ java.lang.Override public void onSuccess ( java.lang.Integer returnValue ) { cachedMaxPriority = returnValue ; postUpdatePriority ( callbacks ) ; } } ) ) ; } else { postUpdatePriority ( callbacks ) ; } }
private void setUpDiskVmElementExpectations ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID , org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID ) ; dve.setDiskInterface ( DiskInterface.VirtIO ) ; dve.setBoot ( false ) ; setUpGetEntityExpectations ( QueryType.GetDiskVmElementById , org.ovirt.engine.core.common.queries.VmDeviceIdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID , org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID ) } , dve ) ; }
public void setText ( java.lang.String text ) { super . setText ( text ) ; java.lang.String renderedText = text ; if ( ( getTooltipCaption ( ) ) != null ) { renderedText = ( ( getTooltipCaption ( ) ) + ": " ) + renderedText ; } tooltipPanel.setText ( renderedText ) ; }
public void testDoGetHttpServletRequestHttpServletResponseNoDispatcher ( ) throws java.io.IOException , javax.servlet.ServletException { org.mockito.Mockito.when ( mockRequest.getAttribute ( LocaleFilter.LOCALE ) ) . thenReturn ( java.util.Locale.JAPANESE ) ; org.mockito.Mockito.when ( mockRequest.getParameter ( "user" ) ) . thenReturn ( "" ) ; testServlet.doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito.verify ( mockRequest ) . setAttribute ( "localeKeys" , localeKeys ) ; org.mockito.Mockito.verify ( mockResponse ) . setContentType ( "text/html;charset=UTF-8" ) ; }
protected void executeCommand ( ) { try { addVmToDb ( ) ; processImages ( ) ; org.ovirt.engine.core.bll.VmHandler.addVmInitToDB ( getVm ( ) . getStaticData ( ) ) ; } catch ( java.lang.RuntimeException e ) { macPool.freeMacs ( macsAdded ) ; throw e ; } org.ovirt.engine.core.bll.ImportVmCommandBase.setSucceeded ( true ) ; }
public void testIncompleteExport ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { resource.export ( new org.ovirt.engine.api.model.Action ( ) ) ; org.junit.Assert.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Action" , "export" , "storageDomain.id|name" ) ; } }
public void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
protected void endWithFailure ( ) { setIsVmRunningStateless ( ) ; if ( _isVmRunningStateless ) { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createSnapshotParameters = buildCreateSnapshotParameters ( ) ; createSnapshotParameters.setImagesParameters ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend ( ) . endAction ( VdcActionType.CreateAllSnapshotsFromVm , createSnapshotParameters , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.RunVmCommand.getCompensationContext ( ) ) ) ; setSucceeded ( vdcReturnValue.getSucceeded ( ) ) ; } else { super . endWithFailure ( ) ; } }
public void testSave ( ) { staticDao.save ( newStaticVds ) ; newStatistics.setId ( newStaticVds.getId ( ) ) ; dao.save ( newStatistics ) ; org.ovirt.engine.core.common.businessentities.VdsStatic staticResult = staticDao.get ( newStaticVds.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsResult = dao.get ( newStatistics.getId ( ) ) ; org.junit.Assert.assertNotNull ( staticResult ) ; org.junit.Assert.assertEquals ( newStaticVds , staticResult ) ; org.junit.Assert.assertNotNull ( statisticsResult ) ; org.junit.Assert.assertEquals ( newStatistics , statisticsResult ) ; }
public org.ovirt.engine.core.common.job.Job getJob ( final org.ovirt.engine.core.compat.Guid jobId ) { return org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < org.ovirt.engine.core.common.job.Job > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.job.Job runInTransaction ( ) { org.ovirt.engine.core.common.job.Job job = jobDao.get ( jobId ) ; if ( job != null ) { job.getJobSubjectEntities ( ) ; } return job ; } } ) ; }
public void getVmsFromExternalServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.compat.Guid vdsId , java.lang.String url , java.lang.String username , java.lang.String password ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsFromExternalProvider , new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters ( url , username , password , vdsId , dataCenterId ) , aQuery ) ; }
public void networksUsedByAVm ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network net = mockNetwork ( ) ; networksUsedTest ( false , true , org.hamcrest.CoreMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NETWORKS_USED_ONCE ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.hamcrest.CoreMatchers.hasItem ( org.hamcrest.CoreMatchers.containsString ( net.getName ( ) ) ) ) ) ) ; }
public boolean getIsQxlSupported ( ) { boolean isLinux = getIsLinuxOS ( ) ; boolean isQxl = ( getDisplayType ( ) . getSelectedItem ( ) ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ; boolean isSpice = ( getGraphicsType ( ) . getSelectedItem ( ) ) == ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes.SPICE ) ; boolean clusterSupportsSinglePci = ( ( getSelectedCluster ( ) ) != null ) && ( ( Version.v3_3.compareTo ( getSelectedCluster ( ) . getCompatibilityVersion ( ) ) ) <= 0 ) ; return ( ( isLinux && isQxl ) && isSpice ) && clusterSupportsSinglePci ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain initStorageDomain ( org.ovirt.engine.core.compat.Guid storageDomainId ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setId ( storageDomainId ) ; storageDomain.setStoragePoolId ( storagePoolId ) ; org.mockito.Mockito.when ( storageDomainDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( storageDomainDao.getForStoragePool ( storageDomainId , storagePoolId ) ) . thenReturn ( storageDomain ) ; return storageDomain ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroup ( ) { if ( ( vdsGroup ) == null ) { vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setvds_group_id ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; vdsGroup.setcompatibility_version ( Version.v3_3 ) ; vdsGroup.setcpu_name ( "Intel Conroe Family" ) ; vdsGroup.setArchitecture ( ArchitectureType.x86_64 ) ; } return vdsGroup ; }
public void testHost ( ) { testValidSql ( "Host: sortby cpu_usage desc" , "SELECT * FROM ((SELECT vds.* FROM vds ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: name =\"test1\" sortby cpu_usage desc" , "SELECT * FROM ((SELECT vds.* FROM vds WHERE vds.vds_name LIKE test1 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: CPU_USAGE > 80 sortby cpu_usage desc" , "SELECT * FROM ((SELECT vds.* FROM vds WHERE vds.usage_cpu_percent > 80 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: user.name = \"user1\" sortby cpu_usage desc" , "SELECT * FROM ((SELECT vds.* FROM vds LEFT OUTER JOIN vdc_users_with_tags ON vds.vds_id=vdc_users_with_tags.vm_guid WHERE vdc_users_with_tags.name LIKE user1 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: STORAGE.name = \"sd1\" sortby cpu_usage desc" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags LEFT OUTER JOIN storage_domains_with_hosts_view ON vds_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE sd1 )) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: EVENT.severity=error and CPU_USAGE > 80 sortby cpu_usage desc" , "SELECT * FROM ((SELECT vds.* FROM vds LEFT OUTER JOIN audit_log ON vds.vds_id=audit_log.vds_id WHERE ( audit_log.severity = '2' AND vds.usage_cpu_percent > 80 )) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: EVENT.severity=error and tag=tag1 sortby cpu_usage desc" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags LEFT OUTER JOIN audit_log ON vds_with_tags.vds_id=audit_log.vds_id WHERE ( audit_log.severity = '2' AND vds_with_tags.tag_name IN ('tag1','all') ))) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: tag=\"tag1\"" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags WHERE vds_with_tags.tag_name IN ('tag1','all') )) ORDER BY vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: vm.name=\"vm1\"" , "SELECT * FROM ((SELECT vds.* FROM vds LEFT OUTER JOIN vms_with_tags ON vds.vds_id=vms_with_tags.run_on_vds WHERE vms_with_tags.vm_name LIKE vm1 ) ORDER BY vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: cluster = default and Templates.name = template_1 and Storage.name = storage_1" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN vm_templates_storage_domain ON vms_with_tags.vmt_guid=vm_templates_storage_domain.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE ( ( vms.cluster_name LIKE default AND vm_templates_storage_domain.name LIKE template\\_1 ) AND storage_domains_with_hosts_view.storage_name LIKE storage\\_1 ))) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: cluster = default and Templates.name = template_1 and Storage.name = storage_1 and Vnic.network_name = vnic_1" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN vm_templates_storage_domain ON vms_with_tags.vmt_guid=vm_templates_storage_domain.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id LEFT OUTER JOIN vm_interface_view ON vms_with_tags.vm_guid=vm_interface_view.vm_guid WHERE ( ( ( vms.cluster_name LIKE default AND vm_templates_storage_domain.name LIKE template\\_1 ) AND storage_domains_with_hosts_view.storage_name LIKE storage\\_1 ) AND vm_interface_view.network_name LIKE vnic\\_1 ))) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public void shouldValidateSingleNodePinning ( ) { vm.setvNumaNodeList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 0 , java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVdsNumaNode ( 1 ) ) ) ) ) ; vm.setNumaTuneMode ( NumaTuneMode.PREFERRED ) ; org.junit.Assert.assertTrue ( underTest.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
private void audit ( org.ovirt.engine.core.common.AuditLogType auditMessage ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "Action" , getAction ( ) . name ( ) . toLowerCase ( ) ) ; logable.addCustomValue ( "VdsName" , org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds ( ) . getName ( ) ) ; logable.setVdsId ( org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVdsId ( ) ) ; auditLogDirector.log ( logable , auditMessage ) ; }
public void testGetNonePermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONSUME_QUOTA , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.Permissions getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.Permissions permission = new org.ovirt.engine.core.common.businessentities.Permissions ( ) ; permission.setId ( GUIDS [ ( ( index + 1 ) % 3 ) ] ) ; permission.setAdElementId ( GUIDS [ 0 ] ) ; permission.setRoleId ( GUIDS [ index ] ) ; permission.setObjectType ( VdcObjectType.System ) ; return permission ; }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public < T > T findResource ( org.ovirt.engine.core.utils.ejb.ContainerManagedResourceType resourceValue ) { java.lang.String jndiNameFromMap = getResourceJNDIName ( resourceValue ) ; if ( jndiNameFromMap == null ) { org.ovirt.engine.core.utils.ejb.EJBUtilsStrategy.log.error ( ( "No JNDI name for : " + resourceValue ) ) ; return null ; } try { return getReference ( jndiNameFromMap ) ; } catch ( javax.naming.NamingException ex ) { org.ovirt.engine.core.utils.ejb.EJBUtilsStrategy.log.error ( ( "Error looking up resource " + resourceValue ) ) ; return null ; } }
protected void executeVmCommand ( ) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand ( ) ; if ( retValue.getSucceeded ( ) ) { monitorV2VJob ( JobStatus.WAIT_FOR_START ) ; org.ovirt.engine.core.bll.ConvertVmCommand.setSucceeded ( true ) ; } else { org.ovirt.engine.core.bll.ConvertVmCommand.log.error ( "Failed to convert VM" ) ; setCommandStatus ( CommandStatus.FAILED ) ; } } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.ovirt.engine.core.bll.ConvertVmCommand.log.error ( "Failed to convert VM" , e ) ; setCommandStatus ( CommandStatus.FAILED ) ; } }
private static org.ovirt.engine.api.model.Options parseOptions ( java.lang.String str , java.util.Map < java.lang.String , java.lang.String > types , boolean ignoreValues ) { org.ovirt.engine.api.model.Options ret = new org.ovirt.engine.api.model.Options ( ) ; for ( java.lang.String option : str.split ( "," , ( - 1 ) ) ) { if ( ! ( option.isEmpty ( ) ) ) { org.ovirt.engine.api.model.Option parsedOption = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parseOption ( option , types , ignoreValues ) ; if ( parsedOption != null ) { ret.getOptions ( ) . add ( parsedOption ) ; } } } return ret ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > convert ( java.lang.Object returnValue ) { java.util.ArrayList < java.lang.String > nics = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > interfaceTypes = new java.util.ArrayList < > ( ) ; for ( java.lang.String nic : nics ) { try { interfaceTypes.add ( org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.valueOf ( nic ) ) ; } catch ( java.lang.IllegalArgumentException e ) { } } return interfaceTypes ; }
private void assertTestNotRemovingLabeledNetworksValid ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic , org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment , org.ovirt.engine.core.common.action.HostSetupNetworksParameters params , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . setParams ( params ) . setHost ( host ) . setExistingInterfaces ( java.util.Collections.singletonList ( nic ) ) . addNetworks ( network ) . build ( ) ; org.junit.Assert.assertThat ( validator.notRemovingLabeledNetworks ( removedAttachment ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static void GetSANWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
public void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
private void runOnce ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.WebadminRunOnceModel ( vm , getCustomPropertiesKeysList ( ) . get ( vm.getVdsGroupCompatibilityVersion ( ) ) , this ) ; setWindow ( model ) ; model.init ( ) ; }
public void getExistingVariable ( ) { org.ovirt.engine.core.common.ExternalVariable expected = new org.ovirt.engine.core.common.ExternalVariable ( ) ; expected.setName ( "fence-kdump-listener" ) ; org.ovirt.engine.core.common.ExternalVariable found = dao.get ( expected.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( found ) ; org.junit.jupiter.api.Assertions.assertEquals ( expected , found ) ; org.junit.jupiter.api.Assertions.assertNotNull ( found.getUpdateDate ( ) ) ; }
public < T extends java.lang.Enum < ? > > void snapshotEntityStatus ( org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus < ? , T > entity , T status ) { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot.EntityStatusSnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot.EntityStatusSnapshot ( ) ; snapshot.setId ( entity.getId ( ) ) ; snapshot.setStatus ( status ) ; snapshotEntityInMemory ( entity , snapshot , SnapshotType.CHANGED_STATUS_ONLY ) ; }
protected void buildVmVideoCards ( ) { createInfo.put ( VdsProperties.display , vm.getDisplayType ( ) . toString ( ) ) ; if ( ( vm.getDisplayType ( ) ) != ( vm.getDefaultDisplayType ( ) ) ) { addVideoCardByDisplayType ( vm.getDisplayType ( ) , vm.getNumOfMonitors ( ) ) ; } else { addVideoCardsDefinedForVmInDB ( vm.getId ( ) ) ; } }
protected boolean canDoAction ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume ( ) ; if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( ( ! ( org.ovirt.engine.core.bll.gluster.tasks.GlusterTaskUtils.isTaskOfType ( glusterVolume , GlusterTaskType.REBALANCE ) ) ) || ( ! ( org.ovirt.engine.core.bll.gluster.tasks.GlusterTaskUtils.isTaskStatus ( glusterVolume , JobExecutionStatus.STARTED ) ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REBALANCE_NOT_STARTED ) ; } return true ; }
public java.lang.Object mapFromContext ( java.lang.Object ctx ) { org.springframework.ldap.core.DirContextAdapter searchResult = ( ( org.springframework.ldap.core.DirContextAdapter ) ( ctx ) ) ; javax.naming.directory.Attributes attributes = searchResult.getAttributes ( ) ; if ( attributes == null ) { return null ; } javax.naming.directory.Attribute att = attributes.get ( org.ovirt.engine.extensions.aaa.builtin.kerberosldap.IPARootDSEAttributes.defaultnamingcontext.name ( ) ) ; if ( att != null ) { try { return att.get ( 0 ) ; } catch ( javax.naming.NamingException e ) { e.printStackTrace ( ) ; return null ; } } else { return null ; } }
protected void gatherChangedVms ( org.ovirt.engine.core.common.businessentities.VM dbVm , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm ) { changedVms.add ( new org.ovirt.engine.core.common.utils.Pair ( dbVm , vdsmVm ) ) ; if ( org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled ( ) ) { logBuilder.append ( java.lang.String.format ( "%s:%s " , vdsmVm.getVmDynamic ( ) . getId ( ) . toString ( ) . substring ( 0 , 8 ) , vdsmVm.getVmDynamic ( ) . getStatus ( ) ) ) ; } }
public void onUiCommonInit ( org.ovirt.engine.ui.common.uicommon.model.UiCommonInitEvent event ) { initializeHandlers ( ) ; }
private void edit ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.EditTemplateInterfaceModel.createInstance ( getEntityStronglyTyped ( ) , getEntityStronglyTyped ( ) . getStoragePoolId ( ) , cluster.getCompatibilityVersion ( ) , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems ( ) ) ) , ( ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ) ( getSelectedItem ( ) ) ) , this ) ; setWindow ( model ) ; }
public void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
public void onFailure ( final java.lang.Throwable caught ) { if ( ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute logoff: " + caught ) , caught ) ; getEventsHandler ( ) . runQueryFailed ( null ) ; failureEventHandler ( caught ) ; callback.getDel ( ) . onSuccess ( callback.getModel ( ) , null ) ; }
protected org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return backendInternal ; }
protected void executeVDSCommand ( ) { try { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxy proxy = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getCurrentIrsProxy ( ) ; proxy.clearPoolTimers ( ) ; proxy.clearCache ( ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error ( "Could not change timers for pool '{}': {}" , org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters ( ) . getStoragePoolId ( ) , e.getMessage ( ) ) ; org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug ( "Exception" , e ) ; } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue ( ) . setSucceeded ( true ) ; }
protected void listenOnConsoleModelChangeEvent ( com.google.gwt.event.shared.EventBus eventBus , final org.ovirt.engine.ui.userportal.uicommon.model.basic.UserPortalBasicListProvider modelProvider ) { eventBus.addHandler ( org.ovirt.engine.ui.common.presenter.popup.ConsoleModelChangedEvent.getType ( ) , new org.ovirt.engine.ui.common.presenter.popup.ConsoleModelChangedEvent.ConsoleModelChangedHandler ( ) { @ java.lang.Override public void onConsoleModelChanged ( org.ovirt.engine.ui.common.presenter.popup.ConsoleModelChangedEvent event ) { if ( ( modelProvider.getModel ( ) . getSelectedItem ( ) ) == null ) { return ; } setupConsole ( modelProvider ) ; } } ) ; }
public java.util.Set < java.lang.String > removeSnapshots ( org.ovirt.engine.core.compat.Guid vmId ) { final java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > vmSnapshots = getSnapshotDao ( ) . getAll ( vmId ) ; for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : vmSnapshots ) { getSnapshotDao ( ) . remove ( snapshot.getId ( ) ) ; } return org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots ( vmSnapshots ) ; }
protected static org.ovirt.engine.core.common.businessentities.VM buildVmOnNewTemplate ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.common.businessentities.VM resultVm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; resultVm.setId ( vm.getId ( ) ) ; org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build ( model , resultVm.getStaticData ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonUnitToVmBaseBuilder ( ) ) ; org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build ( vm.getStaticData ( ) , resultVm.getStaticData ( ) , new org.ovirt.engine.ui.uicommonweb.builders.template.VmBaseToVmBaseForTemplateCompositeBaseBuilder ( ) ) ; return resultVm ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = vmDao.getAllForCluster ( org.ovirt.engine.core.bll.GetNumberOfActiveVmsInClusterByClusterIdQuery.getParameters ( ) . getId ( ) ) ; int activeVms = 0 ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { if ( ( ( vm.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) && ( ( vm.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) ) { ++ activeVms ; } } org.ovirt.engine.core.bll.GetNumberOfActiveVmsInClusterByClusterIdQuery.getQueryReturnValue ( ) . setReturnValue ( activeVms ) ; }
public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( java.lang.String taskKey ) { return super . persistAsyncTaskPlaceHolder ( getActionType ( ) , taskKey ) ; }
protected boolean validateVdsCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > groups = org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroupDAO ( ) . getAllForStoragePool ( getParameters ( ) . getStoragePoolId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup group : groups ) { if ( group.getId ( ) . equals ( getParameters ( ) . getVdsGroupId ( ) ) ) { return true ; } } return failCanDoAction ( VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID ) ; }
public void testGetAllClustersWithoutMigratingVMs ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > migrationFreeClusters = dao.getWithoutMigratingVms ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( migrationFreeClusters.isEmpty ( ) ) ; final int migrationCount = migrationFreeClusters.size ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = vmDao.getAllRunningByCluster ( FixturesTool.CLUSTER_RHEL6_ISCSI ) ; for ( org.ovirt.engine.core.common.businessentities.VM migratingVM : vms ) { vmDynamicDao.updateStatus ( migratingVM.getId ( ) , VMStatus.Up ) ; migrationFreeClusters = dao.getWithoutMigratingVms ( ) ; } org.junit.jupiter.api.Assertions.assertEquals ( ( migrationCount + 1 ) , migrationFreeClusters.size ( ) ) ; }
public void setCpuName ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( cpuName , value ) ) ) { cpuName = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "CpuName" ) ) ; } }
private org.ovirt.engine.core.common.action.VdcReturnValueBase addVmFromScratch ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.AddVmFromScratchParameters parameters = new org.ovirt.engine.core.common.action.AddVmFromScratchParameters ( vmStatic , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getDiskInfoList ( ) , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getStorageDomainId ( ) ) ; parameters.setSessionId ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getSessionId ( ) ) ; parameters.setDontAttachToDefaultTag ( true ) ; return runInternalActionWithTasksContext ( VdcActionType.AddVmFromScratch , parameters ) ; }
private void undo ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RestoreAllSnapshots , new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters ( vm.getId ( ) , org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO ) , null , null ) ; } }
private void isShareable_EntityChanged ( ) { boolean isShareable = getIsShareable ( ) . getEntity ( ) ; if ( ( getIsBootable ( ) . getIsChangable ( ) ) || ( ( ! ( isVmContainBootableDisk ) ) && ( ! isShareable ) ) ) { getIsBootable ( ) . setIsChangable ( ( ! isShareable ) ) ; getIsBootable ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotEnableBootableForShareableDisk ( ) ) ; } }
public void testSaveOrUpdate ( ) { org.ovirt.engine.core.common.businessentities.EngineSession sessionFromDb = dao.getBySessionId ( newEngineSession.getEngineSessionId ( ) ) ; org.junit.jupiter.api.Assertions.assertNull ( sessionFromDb ) ; dao.save ( newEngineSession ) ; sessionFromDb = dao.getBySessionId ( newEngineSession.getEngineSessionId ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( sessionFromDb ) ; org.junit.jupiter.api.Assertions.assertEquals ( sessionFromDb , newEngineSession ) ; }
public static void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionDelete ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.String userName ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeGeoRepSessionDelete ( volumeName , remoteHost , remoteVolumeName , userName ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue ( ) ; if ( ( res != null ) && ( res.getSucceeded ( ) ) ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.TestProviderConnectivity , new org.ovirt.engine.core.common.action.ProviderParameters ( provider ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue ( ) ; setTestResultValue ( res ) ; stopProgress ( ) ; } } , null , false ) ; } else { setTestResultValue ( res ) ; stopProgress ( ) ; } }
public void testPoolSpiceProxy ( ) { org.ovirt.engine.api.restapi.types.VM entity = new org.ovirt.engine.api.restapi.types.VM ( ) ; entity.setVmPoolSpiceProxy ( org.ovirt.engine.api.restapi.types.VmMapperTest.POOL_SPICE_PROXY ) ; org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.types.VmMapper.map ( entity , ( ( org.ovirt.engine.api.model.Vm ) ( null ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.types.VmMapperTest.POOL_SPICE_PROXY , model.getDisplay ( ) . getProxy ( ) ) ; }
public java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > executeAsyncCommand ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { final org.ovirt.engine.core.bll.CommandBase < ? > command = org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameters ) ; return org.ovirt.engine.core.bll.tasks.CommandExecutor.executor.submit ( new java.util.concurrent.Callable < org.ovirt.engine.core.common.action.VdcReturnValueBase > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase call ( ) throws java.lang.Exception { return executeCommand ( command ) ; } } ) ; }
private org.ovirt.engine.core.compat.Guid getHostId ( org.ovirt.engine.api.model.Host host ) { return host.isSetId ( ) ? new org.ovirt.engine.core.compat.Guid ( host.getId ( ) ) : host.isSetName ( ) ? getEntity ( org.ovirt.engine.core.common.businessentities.VdsStatic.class , QueryType.GetVdsStaticByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( host.getName ( ) ) , ( "Hosts: name=" + ( host.getName ( ) ) ) ) . getId ( ) : null ; }
public void testVmInPreview ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) . when ( snapshotsValidator ) . vmNotInPreview ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
public void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > > aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
public void testCheckGroupsCanBeAttachedAdminIssues ( ) { getRole ( ) . setType ( RoleType.USER ) ; org.ovirt.engine.core.common.businessentities.RoleGroupMap map = new org.ovirt.engine.core.common.businessentities.RoleGroupMap ( org.ovirt.engine.core.common.businessentities.ActionGroup.DELETE_STORAGE_POOL , getParams ( ) . getRoleId ( ) ) ; mockGetAllForRole ( java.util.Collections.singletonList ( map ) ) ; java.util.List < java.lang.String > messages = new java.util.ArrayList < java.lang.String > ( 1 ) ; org.junit.Assert.assertTrue ( "canDoAction should fail" , getCommand ( ) . checkIfGroupsCanBeAttached ( messages ) ) ; org.junit.Assert.assertEquals ( "wrong messages" , EngineMessage.CANNOT_ADD_ACTION_GROUPS_TO_ROLE_TYPE.toString ( ) , messages.get ( 0 ) ) ; }
public void testExistingPassDiscardFunctionalityIsPreservedAllLunsHaveDiscardFunctionality ( ) { storageDomain.setSupportsDiscard ( true ) ; storageDomainDisks.add ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; org.junit.Assert.assertTrue ( discardHelper.isExistingPassDiscardFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 2048L ) ) , storageDomain ) ) ; }
private com.google.gwt.user.client.ui.IsWidget createGeneralAdditionalInfo ( ) { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel ( ) ; panel.addStyleName ( PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM ) ; generalExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem ( com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListViewItem.constants.generalLabel ( ) ) , IconType.EYE.getCssName ( ) ) ; getClickHandlerRegistrations ( ) . add ( generalExpand.addClickHandler ( this ) ) ; panel.add ( generalExpand ) ; return panel ; }
private void expectGetLunsMap ( java.lang.String lunId , java.lang.String cnxId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap > ret = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap map = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap ( ) ; map.setLunId ( lunId ) ; map.setStorageServerConnection ( cnxId ) ; ret.add ( map ) ; org.mockito.Mockito.when ( storageServerConnectionLunMapDao.getAll ( lunId ) ) . thenReturn ( ret ) ; }
private static boolean IsAlreadySubscribed ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.EventSubscriber > subscriptions , org.ovirt.engine.core.compat.Guid subscriberId , java.lang.String eventName , org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod ) { boolean retval = false ; for ( org.ovirt.engine.core.common.businessentities.EventSubscriber eventSubscriber : subscriptions ) { if ( ( ( subscriberId.equals ( eventSubscriber.getSubscriberId ( ) ) ) && ( org.apache.commons.lang.StringUtils.equals ( eventSubscriber.getEventUpName ( ) , eventName ) ) ) && ( ( eventSubscriber.getEventNotificationMethod ( ) ) == eventNotificationMethod ) ) { retval = true ; break ; } } return retval ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc upgradeStoragePool ( java.lang.String storagePoolId , java.lang.String targetVersion ) { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = irsServer.upgradeStoragePool ( storagePoolId , targetVersion ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; }
public static < IN , OUT > java.util.List < OUT > transformToList ( final java.util.Collection < IN > collection , final org.ovirt.engine.core.utils.linq.Function < IN , OUT > f ) { java.util.LinkedList < OUT > list = new java.util.LinkedList < OUT > ( ) ; for ( IN in : collection ) { list.add ( f.eval ( in ) ) ; } return list ; }
public void testUpdate ( ) { java.lang.String oldName = existingCluster.getName ( ) ; existingCluster.setName ( "This is the new name" ) ; existingCluster.setVirtService ( false ) ; existingCluster.setGlusterService ( true ) ; existingCluster.setMigrationBandwidthLimitType ( MigrationBandwidthLimitType.CUSTOM ) ; existingCluster.setCustomMigrationNetworkBandwidth ( 20 ) ; dao.update ( existingCluster ) ; org.ovirt.engine.core.common.businessentities.Cluster result = dao.get ( existingCluster.getId ( ) ) ; assertCorrectCluster ( result ) ; result = dao.getByName ( oldName ) ; org.junit.Assert.assertNull ( result ) ; }
private void handleVdsLiveSnapshotFailure ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { log.warn ( ( "Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}" ) , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; addCustomValue ( "SnapshotName" , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getSnapshotName ( ) ) ; addCustomValue ( "VmName" , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmName ( ) ) ; updateCallStackFromThrowable ( e ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( this , AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE ) ; }
protected boolean checkSingleQxlDisplay ( ) { if ( ! ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getSingleQxlPci ( ) ) ) { return true ; } return org.ovirt.engine.core.bll.VmHandler.isSingleQxlDeviceLegal ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getDefaultDisplayType ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getOs ( ) , org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) , org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getcompatibility_version ( ) ) ; }
private boolean validateDestStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain destDomain ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( destDomain ) ; return ( ( validate ( validator.isDomainExistAndActive ( ) ) ) && ( validate ( validator.domainIsValidDestination ( ) ) ) ) && ( validate ( validator.isNotBackupDomain ( ) ) ) ; }
public void startPollingTask ( ) { org.ovirt.engine.core.bll.tasks.AsyncTaskState state = getState ( ) ; if ( ( ( state != ( AsyncTaskState.AttemptingEndAction ) ) && ( state != ( AsyncTaskState.Cleared ) ) ) && ( state != ( AsyncTaskState.ClearFailed ) ) ) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.infoFormat ( "BaseAsyncTask::startPollingTask: Starting to poll task '{0}'." , getVdsmTaskId ( ) ) ; concreteStartPollingTask ( ) ; } }
public static void GetStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.storage_server_connections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
public void isClusterEmpty ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.lang.Boolean ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsClusterEmpty , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
void initTable ( ) { getTable ( ) . enableColumnResizing ( ) ; org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.VmTemplate > nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return object.getName ( ) ; } } ; nameColumn.makeSortable ( ) ; getTable ( ) . addColumn ( nameColumn , org.ovirt.engine.ui.webadmin.section.main.view.tab.profile.SubTabVnicProfileTemplateView.constants.nameTemplate ( ) , "300px" ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { expandPath ( modelProvider.getSelectionModel ( ) . getSelectedObject ( ) ) ; }
protected java.util.Map < java.lang.String , java.lang.String > extractServers ( java.lang.String serversXml ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( serversXml ) ) { return getServerFingerprints ( org.ovirt.engine.core.utils.XmlUtils.loadXmlDoc ( serversXml ) . getElementsByTagName ( org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQuery.PEER ) ) ; } else { throw new java.lang.RuntimeException ( ( "Could not get the peer list form the host: " + ( org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQuery.getParameters ( ) . getServerName ( ) ) ) ) ; } }
public void endWithFailure ( ) { for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : enclosingCommand.getParameters ( ) . getParametersList ( ) ) { updateDestinationImageId ( parameters ) ; } endCreateAllSnapshots ( ) ; unlockAllDiskSnapshots ( ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( enclosingCommand.getExecutionContext ( ) , false ) ; enclosingCommand.setExecutionContext ( null ) ; enclosingCommand.getReturnValue ( ) . setSucceeded ( true ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.OneMapReturnForXmlRpc get_image_transfer_session_stats ( java.lang.String ticketId ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.get_image_transfer_session_stats" ) . withParameter ( "ticketUUID" , ticketId ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "statsMap" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.OneMapReturnForXmlRpc ( response ) ; }
public static void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
public static void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
public void testGetUserID ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.aaa.DbUser.class ) ; org.mockito.Mockito.when ( user.getId ( ) ) . thenReturn ( Guid.EVERYONE ) ; java.lang.String session = org.jgroups.util.UUID.randomUUID ( ) . toString ( ) ; org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance ( ) . setUser ( session , user ) ; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( session ) ; params.setRefresh ( false ) ; org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery query = new org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery ( params ) ; org.junit.Assert.assertEquals ( "wrong guid" , Guid.EVERYONE , query.getUserID ( ) ) ; }
protected org.ovirt.engine.core.common.action.VmDiskOperationParameterBase createParameters ( ) { return new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase ( diskVmElement ) ; }
public void testGetLunsThatBreakPassDiscardFunctionalityDiscardFunctionalityDoesntBreak ( ) { createVmDiskOnSd ( false , false ) ; createVmDiskOnSd ( false , true ) ; assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 2048L ) ) , java.util.Collections.emptyList ( ) ) ; }
public void addLDAPServer ( java.net.URI uri ) { ldapServers.add ( uri ) ; }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
public static void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private void initImportSources ( ) { importSources.setItems ( java.util.Arrays.asList ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.values ( ) ) ) ; importSources.setSelectedItem ( ImportSource.EXPORT_DOMAIN ) ; importSources.getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { clearVms ( ) ; } } ) ; }
public void testGet ( ) { org.ovirt.engine.core.common.businessentities.storage.Disk result = dao.get ( getExistingEntityId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( getExistingEntityId ( ) . toString ( ) , result.getId ( ) . toString ( ) ) ; }
public void testCanDoActionNotEnoughSpace ( ) { prepareForVmValidatorTests ( ) ; spySdValidator ( ) ; cmd.getVm ( ) . setStatus ( VMStatus.Up ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmHostCanLiveMerge ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > imagesDisks = mockDisksList ( 4 ) ; org.mockito.Mockito.when ( storageDomainsValidator.allDomainsHaveSpaceForClonedDisks ( imagesDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
private static org.ovirt.engine.core.common.businessentities.Cluster createClusterWithOlderVersion ( boolean supportsVirtService , boolean supportsGlusterService ) { org.ovirt.engine.core.common.businessentities.Cluster group = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createNewCluster ( ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_0 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.DC_ID1 ) ; group.setVirtService ( supportsVirtService ) ; group.setGlusterService ( supportsGlusterService ) ; return group ; }
public void mapAction ( ) { for ( org.ovirt.engine.api.model.WatchdogAction action : org.ovirt.engine.api.model.WatchdogAction.values ( ) ) { org.ovirt.engine.core.common.businessentities.VmWatchdogAction backendAction = org.ovirt.engine.api.restapi.types.WatchdogMapper.map ( action , null ) ; org.junit.Assert.assertNotNull ( backendAction ) ; org.junit.Assert.assertEquals ( backendAction.name ( ) . toLowerCase ( ) , action.name ( ) . toLowerCase ( ) ) ; } }
public org.ovirt.engine.core.common.businessentities.network.VnicProfileView mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VnicProfileView entity = super . mapRow ( rs , rowNum ) ; entity.setNetworkName ( rs.getString ( "network_name" ) ) ; entity.setNetworkQosName ( rs.getString ( "network_qos_name" ) ) ; entity.setDataCenterName ( rs.getString ( "data_center_name" ) ) ; entity.setCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( rs.getString ( "compatibility_version" ) ) ) ; entity.setNetworkFilterName ( rs.getString ( "network_filter_name" ) ) ; return entity ; }
private com.google.gwt.safehtml.shared.SafeHtml wrapItalic ( com.google.gwt.safehtml.shared.SafeHtml text ) { if ( text.asString ( ) . startsWith ( "<i>" ) ) { return text ; } return new com.google.gwt.safehtml.shared.SafeHtmlBuilder ( ) . appendHtmlConstant ( "<i>" ) . append ( text ) . appendHtmlConstant ( "</i>" ) . toSafeHtml ( ) ; }
public static void GetDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase ( storageDomainId ) , aQuery ) ; }
public javax.ws.rs.core.Response updateVirtualFunctionsConfig ( org.ovirt.engine.api.model.Action action ) { validateParameters ( action , "virtualFunctionsConfiguration.numberOfVirtualFunctions|allNetworksAllowed" ) ; final org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig = parent.findVfsConfig ( guid ) ; if ( vfsConfig == null ) { return notAllowed ( localize ( Messages.INVALID_OPERATION_ON_NON_SRIOV_NIC ) , guid.toString ( ) ) ; } org.ovirt.engine.core.common.action.UpdateHostNicVfsConfigParameters params = prepareUpdateHostNicVfsConfigParameters ( action , vfsConfig ) ; return doAction ( VdcActionType.UpdateHostNicVfsConfig , params , action ) ; }
public void testWindowsTimeZonesKeys ( ) { final java.util.Set < java.lang.String > windowsTimeZoneKeys = org.ovirt.engine.core.compat.WindowsJavaTimezoneMapping.getKeys ( ) ; for ( java.lang.String timeZoneKey : TimeZoneType.WINDOWS_TIMEZONE.getTimeZoneList ( ) . keySet ( ) ) { org.hamcrest.MatcherAssert.assertThat ( windowsTimeZoneKeys , org.hamcrest.core.IsCollectionContaining.hasItem ( timeZoneKey ) ) ; } }
public org.ovirt.engine.core.common.businessentities.VM getVm ( ) { org.ovirt.engine.core.common.businessentities.VM vm = super . getVm ( ) ; if ( vm == null ) { vm = vmDao.getVmsListForDisk ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getImageGroupId ( ) , false ) . get ( 0 ) ; setVm ( vm ) ; setVmId ( vm.getId ( ) ) ; } return vm ; }
protected java.lang.String getMethods ( ) { java.util.List < java.lang.String > keys = new java.util.ArrayList < > ( methods.keySet ( ) ) ; java.util.Collections.sort ( keys ) ; java.lang.StringBuilder buffer = new java.lang.StringBuilder ( ) ; for ( java.lang.String key : keys ) { buffer.append ( methods.get ( key ) ) ; } return buffer.toString ( ) ; }
public static void getVnicProfilesByNetworkId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid networkId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfile > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVnicProfilesByNetworkId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( networkId ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getGlusterVolume ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ( ) ; volumeEntity.setId ( volumeId ) ; volumeEntity.setName ( "test-vol" ) ; volumeEntity.addAccessProtocol ( AccessProtocol.GLUSTER ) ; volumeEntity.addTransportType ( TransportType.TCP ) ; volumeEntity.setVolumeType ( GlusterVolumeType.DISTRIBUTE ) ; volumeEntity.setStatus ( ( volumeId.equals ( startedVolumeId ) ? org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP : org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN ) ) ; volumeEntity.setClusterId ( CLUSTER_ID ) ; return volumeEntity ; }
public void getMaxVmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Integer > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter < > ( 100 ) ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.VmPriorityMaxValue , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public static void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturn changeDisk ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.Object > driveSpec ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.changeCD" ) . withParameter ( "vmID" , vmId ) . withParameter ( "driveSpec" , driveSpec ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmList" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturn ( response ) ; }
public void getGlusterVolumeGeoRepRecommendationViolations ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid masterVolumeId , org.ovirt.engine.core.compat.Guid slaveVolumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return returnValue == null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason > ( ) : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason > ) ( returnValue ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNonEligibilityReasonsOfVolumeForGeoRepSession , new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeGeoRepEligibilityParameters ( masterVolumeId , slaveVolumeId ) , aQuery ) ; }
private void scanAlignment ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameterList = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Disk disk : getSelectedItems ( ) ) { parameterList.add ( new org.ovirt.engine.core.common.action.GetDiskAlignmentParameters ( disk.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.GetDiskAlignment , parameterList , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , this ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.StoragePool dc ) { java.lang.String tooltipContent = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance ( ) . translate ( dc.getStatus ( ) ) ; return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( tooltipContent ) ; }
protected void executeCommand ( ) { applyNextRunConfiguration ( ) ; boolean removedStatelessSnapshot = detachUsers ( ) ; if ( ( ! removedStatelessSnapshot ) && ( ! ( templateVersionChanged ) ) ) { removeVmStatelessImages ( ) ; } org.ovirt.engine.core.bll.ProcessDownVmCommand.getQuotaManager ( ) . rollbackQuotaByVmId ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) ) ; removeStatelessVmUnmanagedDevices ( ) ; boolean vmHasDirectPassthroughDevices = releaseUsedHostDevices ( ) ; org.ovirt.engine.core.compat.Guid hostId = cleanupVfs ( ) ; refreshHostIfNeeded ( ( hostId == null ? vmHasDirectPassthroughDevices ? org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm ( ) . getDedicatedVmForVds ( ) : null : hostId ) ) ; }
public void customPropertiesNoNetwork ( ) { mockExistingNetworks ( ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNic ( "eth0" , null ) ; mockExistingIfaces ( iface ) ; customProperties.add ( iface , createCustomProperties ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( iface ) , Version.v3_5 ) ; validateAndAssertNoChanges ( helper ) ; }
private static void convertAAAProfilesResult ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , final boolean passwordBasedOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.List < java.lang.String > results = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.aaa.ProfileEntry profileEntry : ( ( java.util.Collection < org.ovirt.engine.core.aaa.ProfileEntry > ) ( source ) ) ) { if ( ( ! passwordBasedOnly ) || ( profileEntry.getSupportsPasswordAuthenication ( ) ) ) { results.add ( profileEntry.getProfile ( ) ) ; } } return results ; } } ; }
public org.ovirt.engine.core.bll.ValidationResult isRegularSnapshot ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot ) { if ( ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.REGULAR ) != ( snapshot.getType ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_TYPE_NOT_REGULAR ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getLunDao ( ) ; existingLUN = dao.get ( "1IET_00180001" ) ; newLUN = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; newLUN.setLUNId ( "oicu812" ) ; newLUN.setVolumeGroupId ( "" ) ; }
public boolean Validate ( boolean isOVirt ) { getOVirtISO ( ) . setIsValid ( true ) ; getRootPassword ( ) . setIsValid ( true ) ; if ( isOVirt ) { getOVirtISO ( ) . validateSelectedItem ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation ( ) } ) ; } else { getRootPassword ( ) . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation ( ) } ) ; } return ( getRootPassword ( ) . getIsValid ( ) ) && ( getOVirtISO ( ) . getIsValid ( ) ) ; }
public void onSelection ( com.google.gwt.event.logical.shared.SelectionEvent < java.lang.Integer > event ) { if ( event == null ) { return ; } if ( ( event.getSelectedItem ( ) ) == ( org.ovirt.engine.ui.webadmin.section.main.view.MainSectionView.BOOKMARK_INDEX ) ) { bookmarkModelProvider.getModel ( ) . executeBookmarksSearch ( ) ; } else { bookmarkModelProvider.getModel ( ) . ensureAsyncSearchStopped ( ) ; } }
private void clusterHasVds ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setStatus ( VDSStatus.Up ) ; vds.setSupportedClusterLevels ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_1.toString ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = new java.util.ArrayList < > ( ) ; vdsList.add ( vds ) ; org.mockito.Mockito.when ( vdsDao.getAllForCluster ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( vdsList ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getStorageServerConnectionLunMapDao ( ) ) ; storageServerConnectionDao = prepareDAO ( dbFacade.getStorageServerConnectionDao ( ) ) ; existingConnection = storageServerConnectionDao.get ( "0cc146e8-e5ed-482c-8814-270bc48c297f" ) ; newServerConnection = new org.ovirt.engine.core.common.businessentities.storage_server_connections ( ) ; newServerConnection.setid ( "0cc146e8-e5ed-482c-8814-270bc48c2980" ) ; newServerConnection.setconnection ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.EXISTING_DOMAIN_STORAGE_NAME ) ; existingLUNStorageMap = dao.get ( new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map_id ( "1IET_00180001" , existingConnection.getid ( ) ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.FREE_LUN_ID , existingConnection.getid ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult validateAddProvider ( ) { org.ovirt.engine.core.bll.ValidationResult cinderValidation = isCinderAlreadyExists ( ) ; if ( ! ( cinderValidation.isValid ( ) ) ) { return cinderValidation ; } if ( ( getStoragePool ( ) ) != null ) { return validateAttachStorageDomain ( ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void setUpGetBallooningExpectations ( java.lang.Integer ... idxs ) throws java.lang.Exception { for ( int i : idxs ) { setUpGetEntityExpectations ( QueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ i ] } , true ) ; } }
public void canDoActionWrongDiskImageTypeTemplate ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initTemplateDiskImage ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK.toString ( ) ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.GetHostArchitectureQuery.getDbFacade ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.bll.GetHostArchitectureQuery.getParameters ( ) . getId ( ) ) ; org.ovirt.engine.core.common.businessentities.ServerCpu sc = cpuFlagsManagerHandler.findMaxServerCpuByFlags ( host.getCpuFlags ( ) , host.getVdsGroupCompatibilityVersion ( ) ) ; org.ovirt.engine.core.bll.GetHostArchitectureQuery.getQueryReturnValue ( ) . setReturnValue ( ( sc == null ? org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined : sc.getArchitecture ( ) ) ) ; }
public void testFindSingleDcNetwork ( ) { org.mockito.Mockito.when ( mockNetworkDao.getAllForDataCenter ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ) . thenReturn ( java.util.Collections.singletonList ( mockNetwork ) ) ; org.mockito.Mockito.when ( mockManagementNetworkCandidatePredicate.test ( mockNetwork ) ) . thenReturn ( true ) ; final org.ovirt.engine.core.common.businessentities.network.Network actual = underTest.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ; org.junit.jupiter.api.Assertions.assertSame ( actual , mockNetwork ) ; }
public void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
public void getVmsFromExternalServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.compat.Guid vdsId , java.lang.String url , java.lang.String username , java.lang.String password ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsFromExternalProvider , new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters ( url , username , password , vdsId , dataCenterId ) , aQuery ) ; }
public void setId ( org.ovirt.engine.core.compat.Guid value ) { if ( ( ( ( id ) == null ) && ( value != null ) ) || ( ( ( id ) != null ) && ( ! ( id.equals ( value ) ) ) ) ) { id = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Id" ) ) ; } }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void testStatusMapping ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus backendStatus , org.ovirt.engine.api.model.GlusterState restStatus ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity ( ) ; brick.setStatus ( backendStatus ) ; org.ovirt.engine.api.model.GlusterBrick restVolume = org.ovirt.engine.api.restapi.types.GlusterBrickMapper.map ( brick , null ) ; assertEquals ( restVolume.getState ( ) , restStatus.value ( ) ) ; }
public void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration ( ) { org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap widgetConfiguration = super . createWidgetConfiguration ( ) . putAll ( poolSpecificFields ( ) , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . update ( templateVersionNameEditor , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) ; updateOrAddToWidgetConfiguration ( widgetConfiguration , detachableWidgets ( ) , UpdateToDetachable.INSTANCE ) ; updateOrAddToWidgetConfiguration ( widgetConfiguration , adminOnlyWidgets ( ) , UpdateToAdminOnly.INSTANCE ) ; return widgetConfiguration ; }
public void testBlockUseHostCpuWithPPCArch ( ) { prepareVmToPassValidate ( ) ; command.initEffectiveCompatibilityVersion ( ) ; vm.setClusterArch ( ArchitectureType.ppc64le ) ; group.setArchitecture ( ArchitectureType.ppc ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.bll.UpdateVmCommandTest.osRepository.getArchitectureFromOS ( OsType.Windows.ordinal ( ) ) ) . thenReturn ( ArchitectureType.ppc ) ; vmStatic.setUseHostCpuFlags ( true ) ; vmStatic.setMigrationSupport ( MigrationSupport.PINNED_TO_HOST ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH ) ; }
public void testGetAllVMTemplatesSearch ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchPattern ( ) ) . thenReturn ( ( "Template" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchTypeValue ( ) ) . thenReturn ( SearchType.VmTemplate ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( vmTemplateResultList , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { int storageType = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.getParameters ( ) . getStorageType ( ) . getValue ( ) ; _result = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.getBroker ( ) . getDeviceList ( storageType ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLUNList ( _result.lunList ) ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions ) { if ( ( ( session.getSlaveVolumeId ( ) ) == null ) || ( ( session.getSlaveNodeUuid ( ) ) == null ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE ) ; } } if ( ( ( snapshots ) == null ) || ( snapshots.isEmpty ( ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST , getGlusterVolumeName ( ) ) ; } return true ; }
public void testUpdateImageVmSnapshotId ( ) { org.ovirt.engine.core.compat.Guid guid = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; dao.updateImageVmSnapshotId ( org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID , guid ) ; org.ovirt.engine.core.common.businessentities.Image imageFromDb = dao.get ( org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID ) ; org.junit.Assert.assertNotNull ( imageFromDb ) ; org.junit.Assert.assertEquals ( "Image snapshot id wasn't updated properly" , guid , imageFromDb.getSnapshotId ( ) ) ; }
public static void isSoundcardEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetSoundDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void setUp ( ) { underTest = new org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelper ( mockNetworkClusterDao , mockVmDao , mockClusterDao , mockNetworkCluster , org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_NETWORK_NAME , mockAuditLogDirector ) ; org.mockito.Mockito.when ( mockNetworkCluster.getId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_NETWORK_CLUSTER_ID ) ; org.mockito.Mockito.when ( mockNetworkClusterDao.get ( org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_NETWORK_CLUSTER_ID ) ) . thenReturn ( mockNetworkClusterBeforeUpdate ) ; org.mockito.Mockito.when ( mockClusterDao.get ( org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_CLUSTER_ID ) ) . thenReturn ( createCluster ( org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_CLUSTER_NAME ) ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( getEntityList ( ) ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UnlabelNic , org.ovirt.engine.core.common.action.LabelNicParameters.class , new java.lang.String [ ] { "NicId" , "Label" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicLabelResourceTest.NIC_ID , org.ovirt.engine.api.restapi.resource.BackendHostNicLabelResourceTest.LABELS [ 0 ] } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.StoragePool mockStoragePool ( org.ovirt.engine.core.compat.Version compatibilityVersion ) { org.ovirt.engine.core.compat.Guid storagePoolId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; storagePool.setId ( storagePoolId ) ; storagePool.setcompatibility_version ( compatibilityVersion ) ; storagePool.setstatus ( StoragePoolStatus.Up ) ; org.mockito.Mockito.when ( storagePoolDAO.get ( storagePoolId ) ) . thenReturn ( storagePool ) ; return storagePool ; }
public boolean isClientLinuxFirefox ( ) { return ( clientOsType ( ) . equalsIgnoreCase ( "Linux" ) ) && ( clientBrowserType ( ) . equalsIgnoreCase ( "Firefox" ) ) ; }
private void initializeObjectState ( ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getSnapshotName ( ) ) ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao ( ) . get ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getParameters ( ) . getSnapshotId ( ) ) ; if ( snapshot != null ) { setSnapshotName ( snapshot.getDescription ( ) ) ; } } setStoragePoolId ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm ( ) . getStoragePoolId ( ) ) ; }
public void validateSucceedsOnUpVolume ( ) { cmd.setGlusterVolumeId ( volumeId1 ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
private static java.lang.String encrypt ( java.lang.String source , java.security.cert.Certificate cert ) throws java.io.UnsupportedEncodingException , java.security.GeneralSecurityException { javax.crypto.Cipher rsa = javax.crypto.Cipher.getInstance ( org.ovirt.engine.core.engineencryptutils.EncryptionUtils.algo ) ; rsa.init ( javax.crypto.Cipher.ENCRYPT_MODE , cert.getPublicKey ( ) ) ; return new org.apache.commons.codec.binary.Base64 ( 0 ) . encodeToString ( rsa.doFinal ( source.trim ( ) . getBytes ( "UTF-8" ) ) ) ; }
private static org.ovirt.engine.core.common.action.VmManagementParametersBase initParams ( ) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; vmStatic.setClusterId ( org.ovirt.engine.core.bll.UpdateVmCommandTest.clusterId ) ; vmStatic.setName ( "my_vm" ) ; vmStatic.setMaxMemorySizeMb ( org.ovirt.engine.core.bll.UpdateVmCommandTest.MAX_MEMORY_SIZE ) ; vmStatic.setMemSizeMb ( org.ovirt.engine.core.bll.UpdateVmCommandTest.MEMORY_SIZE ) ; org.ovirt.engine.core.common.action.VmManagementParametersBase params = new org.ovirt.engine.core.common.action.VmManagementParametersBase ( ) ; params.setCommandType ( ActionType.UpdateVm ) ; params.setVmStaticData ( vmStatic ) ; params.setUpdateNuma ( true ) ; return params ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.GetVdsByVdsIdQuery.getDbFacade ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.bll.GetVdsByVdsIdQuery.getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds.setCpuName ( org.ovirt.engine.core.bll.GetVdsByVdsIdQuery.getCpuFlagsManagerHandler ( ) . findMaxServerCpuByFlags ( vds.getCpuFlags ( ) , vds.getVdsGroupCompatibilityVersion ( ) ) ) ; } org.ovirt.engine.core.bll.GetVdsByVdsIdQuery.getQueryReturnValue ( ) . setReturnValue ( vds ) ; }
public void getConfigurationValueBoolean ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.queries.ConfigurationValues configVal ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( configVal , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void setUp ( ) { disk = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage ( ) ; disk.setDiskAlias ( "disk1" ) ; validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) ) ; org.mockito.Mockito.doReturn ( vmDao ) . when ( validator ) . getVmDao ( ) ; org.mockito.Mockito.doReturn ( diskImageDao ) . when ( validator ) . getDiskImageDao ( ) ; }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void diskImagesSnapshotsNotAttachedToOtherVmsNoDiskSnapshotsAttached ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > createdDevices = prepareForCheckingIfDisksSnapshotsAttachedToOtherVms ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.diskImagesSnapshotsNotAttachedToOtherVms ( false ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; org.mockito.Mockito.verify ( snapshotDao , org.mockito.Mockito.never ( ) ) . get ( createdDevices.get ( 1 ) . getSnapshotId ( ) ) ; org.mockito.Mockito.verify ( snapshotDao , org.mockito.Mockito.never ( ) ) . get ( createdDevices.get ( 0 ) . getSnapshotId ( ) ) ; }
public static void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
public void writeData ( java.io.ObjectOutputStream dos ) { try { dos.writeInt ( this . history_id ) ; writeDate ( this . history_datetime , dos ) ; dos.writeObject ( this . storage_domain_id ) ; dos.writeShort ( this . storage_domain_status ) ; dos.writeDouble ( this . minutes_in_status ) ; writeInteger ( this . available_disk_size_gb , dos ) ; writeInteger ( this . used_disk_size_gb , dos ) ; writeInteger ( this . storage_configuration_version , dos ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
private void addBootProtocol ( java.util.Map < java.lang.String , java.lang.Object > opts , org.ovirt.engine.core.common.vdscommands.HostNetwork attachment ) { switch ( attachment.getBootProtocol ( ) ) { case DHCP : opts.put ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.BOOT_PROTOCOL , org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.DHCP_BOOT_PROTOCOL ) ; break ; case STATIC_IP : org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty ( opts , "ipaddr" , attachment.getAddress ( ) ) ; putPrefixOrNetmaskIfNotEmpty ( opts , attachment.getNetmask ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.putIfNotEmpty ( opts , "gateway" , attachment.getGateway ( ) ) ; break ; default : break ; } }
public static void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
public java.util.List < java.lang.String > getClusterNames ( ) { java.util.List < java.lang.String > names = new java.util.ArrayList < > ( ) ; if ( ( getCluster ( ) . getItems ( ) ) != null ) { for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : getCluster ( ) . getItems ( ) ) { names.add ( cluster.getName ( ) ) ; } } return names ; }
public static java.lang.String rangeParser ( java.util.List < java.lang.String > values ) { return java.lang.String.valueOf ( ( ( org.ovirt.vdsmfake.Utils.RND.nextInt ( ( ( java.lang.Integer.parseInt ( values.get ( 1 ) ) ) - ( java.lang.Integer.parseInt ( values.get ( 0 ) ) ) ) ) ) + ( java.lang.Integer.parseInt ( values.get ( 0 ) ) ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.Bookmark mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.Bookmark entity = new org.ovirt.engine.core.common.businessentities.Bookmark ( ) ; entity.setbookmark_id ( new org.ovirt.engine.core.compat.Guid ( rs.getString ( "bookmark_id" ) ) ) ; entity.setbookmark_name ( rs.getString ( "bookmark_name" ) ) ; entity.setbookmark_value ( rs.getString ( "bookmark_value" ) ) ; return entity ; }
public void testIscsiLunCanBeAdded ( ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createISCSILunDisk ( ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; initializeCommand ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , parameters ) ; org.mockito.Mockito.when ( diskLunMapDao.getDiskIdByLunId ( disk.getLun ( ) . getLUNId ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( "checkIfLunDiskCanBeAdded() failed for valid iscsi lun" , command.checkIfLunDiskCanBeAdded ( spyDiskValidator ( disk ) ) ) ; }
public void getClustersHavingHosts ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllClustersHavingHosts , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ) ; control.replay ( ) ; try { resource.update ( getNic ( false ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected org.ovirt.engine.api.model.VM doPopulate ( org.ovirt.engine.api.model.VM model , org.ovirt.engine.api.model.VM entity ) { setPayload ( model ) ; setBallooning ( model ) ; setConsoleDevice ( model ) ; setVirtioScsiController ( model ) ; setSoundcard ( model ) ; setCertificateInfo ( model ) ; setVmOvfConfiguration ( model , entity ) ; setRngDevice ( model ) ; return model ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Disk incoming , org.ovirt.engine.api.model.Disk entity ) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveFromDb = runQuery ( VdcQueryType.GetDiskVmElementById , new org.ovirt.engine.core.common.queries.VmDeviceIdQueryParameters ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( entity.getId ( ) , vmId ) ) ) . getReturnValue ( ) ; org.ovirt.engine.core.common.businessentities.storage.DiskVmElement updatedDve = updateDiskVmElementFromDisk ( incoming , dveFromDb ) ; return new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase ( updatedDve , map ( incoming , entity ) ) ; }
protected static java.util.Collection < java.lang.String > getPackagesForCheckUpdate ( ) { java.util.List < java.lang.String > systemPackages = org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.PackageNamesForCheckUpdate ) ; java.util.List < java.lang.String > userPackages = org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.UserPackageNamesForCheckUpdate ) ; return java.util.stream.Stream.concat ( systemPackages.stream ( ) , userPackages.stream ( ) . filter ( StringUtils :: isNotEmpty ) ) . collect ( java.util.stream.Collectors.toSet ( ) ) ; }
public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUpGetGraphicsExpectations ( 1 ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel ( 1 ) ; model.setId ( GUIDS [ 1 ] . toString ( ) ) ; try { resource.update ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
protected void removeNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDao ( ) . getAllForTemplate ( getVmTemplateId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNicDao ( ) . remove ( iface.getId ( ) ) ; } }
public int compare ( org.ovirt.engine.api.model.Network n1 , org.ovirt.engine.api.model.Network n2 ) { if ( n1.getId ( ) . equals ( n2.getId ( ) ) ) { return 0 ; } else { return n1.getId ( ) . compareTo ( n2.getId ( ) ) ; } }
private void updateErrorIconLabel ( java.util.List < java.lang.String > reasons ) { if ( reasons.isEmpty ( ) ) { errorMessage.setText ( SafeHtmlUtils.EMPTY_SAFE_HTML.asString ( ) ) ; } else { final com.google.gwt.safehtml.shared.SafeHtml htmlReasons = toList ( reasons ) ; errorMessage.setText ( htmlReasons.asString ( ) ) ; errorMessage.setVisible ( true ) ; } }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.DISK_ID } , getEntity ( 1 ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Disk disk = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.verifyModelSpecific ( disk , 1 ) ; verifyLinks ( disk ) ; }
protected void updateGraphicsInfos ( ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : org.ovirt.engine.core.bll.RunVmCommand.getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) , VmDeviceGeneralType.GRAPHICS ) ) { org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getGraphicsInfos ( ) . put ( org.ovirt.engine.core.common.businessentities.GraphicsType.fromString ( vmDevice.getDevice ( ) ) , new org.ovirt.engine.core.common.businessentities.GraphicsInfo ( ) ) ; } }
private void optimizationCustomFormatter ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel object ) { if ( ( ( object.getOptimizationCustom ( ) ) != null ) && ( ( object.getOptimizationCustom ( ) . getEntity ( ) ) != null ) ) { optimizationCustomEditor.setLabel ( messages.clusterPopupMemoryOptimizationCustomLabel ( java.lang.String.valueOf ( object.getMemoryOverCommit ( ) ) ) ) ; } }
public static void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
public void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Disks:" , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public void shouldDetectCpuPinning ( ) { invalidVM.setCpuPinning ( "i am pinned" ) ; org.assertj.core.api.Assertions.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) ) . contains ( UpgradeError.VM_CPUS_PINNED ) ; }
void onWindowFocusChange ( boolean inFocus ) { org.ovirt.engine.ui.uicommonweb.models.GridTimer modelTimer = getModelTimer ( ) ; if ( ( modelTimer.isActive ( ) ) && ( ! ( modelTimer.isPaused ( ) ) ) ) { modelTimer.stop ( ) ; if ( inFocus ) { modelTimer.setRefreshRate ( readRefreshRate ( ) ) ; } else { modelTimer.setRefreshRate ( org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.OUT_OF_FOCUS_REFRESH_RATE ) ; } modelTimer.start ( ) ; } }
public static org.ovirt.engine.core.utils.crypt.TicketUtils getInstanceForEngineStoreSigning ( ) throws java.io.IOException , java.security.KeyStoreException , java.security.NoSuchAlgorithmException , java.security.UnrecoverableKeyException , java.security.cert.CertificateException { return new org.ovirt.engine.core.utils.crypt.TicketUtils ( org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getPrivateKeyEntry ( ) . getPrivateKey ( ) , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.WebSocketProxyTicketValiditySeconds ) ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1 ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel1 = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( result1.getState ( ) ) ) ; vmListModel1.getWindow ( ) . StopProgress ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue ( ) ; if ( ( retVal != null ) && ( retVal.getSucceeded ( ) ) ) { vmListModel1.cancel ( ) ; } }
private void createProfiles ( ) throws org.ovirt.engine.core.extensions.mgr.ConfigurationException { for ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy authnExtension : org.ovirt.engine.core.extensions.mgr.ExtensionsManager.getInstance ( ) . getProvidedExtensions ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_SERVICE ) ) { registerProfile ( new org.ovirt.engine.core.aaa.AuthenticationProfile ( authnExtension , org.ovirt.engine.core.extensions.mgr.ExtensionsManager.getInstance ( ) . getExtensionByName ( authnExtension.getContext ( ) . < java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) . getProperty ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_AUTHZ_PLUGIN ) ) , org.ovirt.engine.core.extensions.mgr.ExtensionsManager.getInstance ( ) . getExtensionByName ( authnExtension.getContext ( ) . < java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) . getProperty ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_MAPPING_PLUGIN ) ) ) ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( returnValue ) ) ; if ( cluster != null ) { clusters.add ( cluster ) ; } java.util.Collections.sort ( clusters , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; model.setDataCentersAndClusters ( model , dataCenters , clusters , vm.getClusterId ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel externalDiscoveredHostsListModel = getExternalDiscoveredHosts ( ) ; externalDiscoveredHostsListModel.setItems ( hosts ) ; externalDiscoveredHostsListModel.setIsChangable ( true ) ; }
public void getVdsNullRun ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setRunOnVds ( null ) ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b.setVds ( vds ) ; b.setVdsId ( vdsId ) ; b.setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b.getVds ( ) ; org.junit.jupiter.api.Assertions.assertNull ( v ) ; }
protected void initTableColumns ( ) { bricksTable.addEntityModelColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) { @ java.lang.Override public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { return entity.getServerName ( ) ; } } , org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.AddBrickPopupView.constants.serverBricks ( ) ) ; bricksTable.addEntityModelColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) { @ java.lang.Override public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { return entity.getBrickDirectory ( ) ; } } , org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.AddBrickPopupView.constants.brickDirectoryBricks ( ) ) ; }
public void poll ( ) { if ( manager.isMonitoringNeeded ( ) ) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = ( getRefreshStatistics ( ) ) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher ( manager ) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher ( manager ) ; long fetchTime = java.lang.System.nanoTime ( ) ; if ( fetcher.fetch ( ) ) { getVmsMonitoring ( fetcher , fetchTime ) . perform ( ) ; } else { org.ovirt.engine.core.vdsbroker.PollVMStatsRefresher.log.info ( "Failed to fetch vms info for host '{}' - skipping VMs monitoring." , manager.getVdsName ( ) ) ; } } updateIteration ( ) ; }
public void testIsNetworkInSyncWhenIpv6GatewayBothNull ( ) { initIpv6ConfigurationStaticBootProtocol ( Ipv6BootProtocol.STATIC_IP ) ; ipv6Address.setGateway ( null ) ; iface.setIpv6Gateway ( null ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected void endWithFailure ( ) { if ( shouldEndSnapshotCreation ( ) ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend ( ) . endAction ( ActionType.CreateAllSnapshotsFromVm , org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) . get ( 0 ) , org.ovirt.engine.core.bll.RunVmCommand.cloneContext ( ) . withoutExecutionContext ( ) . withoutLock ( ) ) ; setSucceeded ( vdcReturnValue.getSucceeded ( ) ) ; } else { super . endWithFailure ( ) ; } }
private void expandTree ( com.google.gwt.user.cellview.client.TreeNode node , boolean expand ) { expandTree ( node , expand , 0 ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotList" ) . withOptionalParameter ( "volumeName" , volumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc ( clusterId , response ) ; }
public void testGetNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetAllNetworksByClusterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ) ; verifyNotFoundException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.resource.get ( ) ) ) ; }
public org.ovirt.engine.api.model.Template update ( org.ovirt.engine.api.model.Template incoming ) { validateIconParams ( incoming ) ; org.ovirt.engine.api.model.Template result = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class ) , ActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendTemplateResource.UpdateParametersProvider ( ) ) ; if ( result != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , result ) ; } return result ; }
public boolean isMacInUse ( java.lang.String mac ) { lockObj.readLock ( ) . lock ( ) ; try { return ( allocatedMacs.containsKey ( mac ) ) || ( allocatedCustomMacs.containsKey ( mac ) ) ; } finally { lockObj.readLock ( ) . unlock ( ) ; } }
private void generateEnumValue ( org.ovirt.api.metamodel.concepts.EnumValue value ) { org.ovirt.api.metamodel.concepts.Name name = value.getName ( ) ; java.lang.String constantName = pythonNames.getConstantStyleName ( name ) ; java.lang.String constantValue = names.getLowerJoined ( name , "_" ) ; buffer.addLine ( "%1$s = '%2$s'" , constantName , constantValue ) ; }
public static void GetClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.VdsGroupQueryParamenters ( clusterId ) , aQuery ) ; }
protected void executeQueryCommand ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl > map = schedulingManager.getPolicyUnitsMap ( ) ; java.util.List < org.ovirt.engine.core.common.scheduling.PolicyUnit > retList = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnitImpl : map.values ( ) ) { retList.add ( policyUnitImpl.getPolicyUnit ( ) ) ; } getQueryReturnValue ( ) . setReturnValue ( retList ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturn fullList ( java.util.List < java.lang.String > vmIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getVMFullList" ) . withOptionalParameterAsList ( "vmList" , vmIds ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmList" ) . withResponseType ( java.lang.Object [ ] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturn ( response ) ; }
private void verifyAllContent ( org.ovirt.engine.api.model.Snapshot model , org.ovirt.engine.api.model.ConfigurationType type , java.lang.String data ) { org.junit.jupiter.api.Assertions.assertNotNull ( model.getInitialization ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( model.getInitialization ( ) . getConfiguration ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( data , model.getInitialization ( ) . getConfiguration ( ) . getData ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( type , model.getInitialization ( ) . getConfiguration ( ) . getType ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties ( ) ; jobProperties.put ( VdcObjectType.VmTemplate.name ( ) . toLowerCase ( ) , ( ( getVmTemplateName ( ) ) == null ? "" : getVmTemplateName ( ) ) ) ; jobProperties.put ( VdcObjectType.Storage.name ( ) . toLowerCase ( ) , getStorageDomainName ( ) ) ; } return jobProperties ; }
public void getUnusedBricksFromServer ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid hostId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.VdsIdParametersBase parameters = new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( hostId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetUnusedGlusterBricks , parameters , asyncQuery ) ; }
protected org.ovirt.engine.core.utils.lock.EngineLock getLock ( ) { return context.getLock ( ) ; }
private org.ovirt.engine.core.bll.hostdeploy.VdsDeploy createPackagesManager ( final org.ovirt.engine.core.common.businessentities.VDS host , boolean alertLog ) throws java.security.KeyStoreException { final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = new org.ovirt.engine.core.bll.hostdeploy.VdsDeploy ( "ovirt-host-mgmt" , host , alertLog ) ; hostPackagesManager.useDefaultKeyPair ( ) ; hostPackagesManager.setCorrelationId ( org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId ( ) ) ; return hostPackagesManager ; }
public void getManagementNetworkCandidates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListAsyncConverter ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( storagePoolId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetManagementNetworkCandidates , params , aQuery ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel model ) { setAgentTabVisibility ( model.getNeutronAgentModel ( ) . isPluginConfigurationAvailable ( ) . getEntity ( ) ) ; driver.edit ( model ) ; neutronAgentWidget.edit ( model.getNeutronAgentModel ( ) ) ; vmwarePropertiesWidget.edit ( model.getVmwarePropertiesModel ( ) ) ; kvmPropertiesWidget.edit ( model.getKvmPropertiesModel ( ) ) ; }
protected void initConnectionList ( boolean includeInactiveDomains ) { java.util.Set < org.ovirt.engine.core.common.businessentities.StorageDomainStatus > statuses ; statuses = ( includeInactiveDomains ) ? java.util.EnumSet.of ( StorageDomainStatus.Active , StorageDomainStatus.Unknown , StorageDomainStatus.Inactive ) : java.util.EnumSet.of ( StorageDomainStatus.Active , StorageDomainStatus.Unknown ) ; _connections = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . getStorageConnectionsByStorageTypeAndStatus ( org.ovirt.engine.core.bll.storage.ConnectHostToStoragePoolServerCommandBase.getStoragePool ( ) . getId ( ) , null , statuses ) ; updateConnectionsTypeMap ( ) ; updateConnectionMapForFiberChannel ( statuses ) ; }
private void addSyncDiff ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel ) { addRow ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.templates.imageTextSetupNetwork ( notInSyncImage , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.constants.hostOutOfSync ( ) ) ) ; com.google.gwt.safehtml.shared.SafeHtml safeHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.constants.hostOutOfSyncPreviewSentence ( ) ) ; addRow ( safeHtml ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration > panelParameters = filterSyncProperties ( networkModel ) ; com.google.gwt.user.client.ui.Widget networkOutOfSyncPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkOutOfSyncPanel ( panelParameters ) . outOfSyncTableAsWidget ( ) ; contents.insertRow ( contents.getRowCount ( ) ) ; contents.setWidget ( contents.getRowCount ( ) , 0 , networkOutOfSyncPanel ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsFromExportDomain ( ) { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters p = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . getSourceDomainId ( ) ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetVal = getBackend ( ) . runInternalQuery ( VdcQueryType.GetVmsFromExportDomain , p ) ; if ( ! ( qRetVal.getSucceeded ( ) ) ) { return null ; } return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( qRetVal.getReturnValue ( ) ) ) ; }
public void testFetchSpecificQuotaUsageForGlobalCluster ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > quotaClusterList = dao.getQuotaClusterByClusterGuid ( null , FixturesTool.QUOTA_SPECIFIC ) ; org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster = quotaClusterList.get ( 0 ) ; org.junit.Assert.assertEquals ( true , ( ( quotaClusterList.size ( ) ) == 2 ) ) ; org.junit.Assert.assertNotNull ( quotaCluster ) ; }
public void testGetVmNumaNodeInfoByBdsGroupId ( ) { org.ovirt.engine.core.compat.Guid vdsGroupId = FixturesTool.CLUSTER ; org.ovirt.engine.core.compat.Guid vmId = FixturesTool.VM_RHEL5_POOL_50 ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.VmNumaNode > > result = dao.getVmNumaNodeInfoByClusterId ( vdsGroupId ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , result.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , result.get ( vmId ) . size ( ) ) ; }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.ValidationResult slavesValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE_ENTITY , "slaveA" ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.VAR_NETWORK_NAME , "networkName" ) ) ; org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , slavesValidationResult , slavesValidationResult ) ; }
private void clearLabelsFromRemovedBonds ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsToConfigureByName ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingBondToRemove : getRemovedBonds ( ) ) { nicsToConfigureByName.get ( existingBondToRemove.getName ( ) ) . setLabels ( null ) ; } }
public void testGetAllForVmNic ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter > result = dao.getAllForVmNic ( FixturesTool.VM_NETWORK_INTERFACE ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.NUMBER_OF_VM_NETWORK_FILTER_PARAMETERS_OF_VM_NETWORK_INTERFACE , result.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter parameter : result ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.VM_NETWORK_INTERFACE , parameter.getVmInterfaceId ( ) ) ; } }
private boolean isTemplateInDestStorageDomain ( org.ovirt.engine.core.compat.Guid imageId , org.ovirt.engine.core.compat.Guid sourceDomainId ) { org.ovirt.engine.core.compat.Guid templateId = getDiskImageById ( imageId ) . getImageTemplateId ( ) ; if ( ! ( Guid.Empty.equals ( templateId ) ) ) { org.ovirt.engine.core.common.businessentities.DiskImage templateImage = getDiskImageDao ( ) . get ( templateId ) ; if ( ! ( templateImage.getStorageIds ( ) . contains ( sourceDomainId ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN ) ; } } return true ; }
public void testDetachFailure ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ) ; setUpActionExpectations ( ActionType.DetachStorageConnectionFromStorageDomain , org.ovirt.engine.core.common.action.AttachDetachStorageConnectionParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , false , false ) ; verifyBadRequest ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.resource.remove ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity getBrick ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity ( volumeId , new org.ovirt.engine.core.common.businessentities.VdsStatic ( serverName , "127.0.0.1" , "0934390834" , 20 , org.ovirt.engine.core.compat.Guid.newGuid ( ) , serverId , serverName , true , org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode ) , org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommandTest.BRICK_DIRECTORY , org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP ) ; return brick ; }
public void testGetStorageDomainWithNoStatus ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.getStorageDomain ( FixturesTool.STORAGE_POOL_NFS_INACTIVE_ISO , StorageDomainType.ISO , null ) ; org.junit.Assert.assertEquals ( FixturesTool.STORAGE_DOMAIN_NFS_INACTIVE_ISO , result.getId ( ) ) ; org.junit.Assert.assertEquals ( "Wrong committed disk size" , 0 , result.getCommittedDiskSize ( ) ) ; org.junit.Assert.assertEquals ( "Wrong actual disk size" , 0 , result.getActualImagesSize ( ) ) ; }
public void testGetAllUsersWithPermissionsOnEntity ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Permission > result = dao.getAllForEntity ( org.ovirt.engine.core.dao.PermissionDaoTest.VM_ENTITY_ID , FixturesTool.PRIVILEGED_SESSION_ID , true , true ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , result.size ( ) ) ; org.ovirt.engine.core.dao.PermissionDaoTest.assertGetAllForEntityResult ( result ) ; }
public void bootProtocolChangedOverBond ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork ( "net" ) ; mockExistingNetworks ( net ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , net.getName ( ) ) ; bond.setBootProtocol ( NetworkBootProtocol.NONE ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > slaves = createNics ( bond.getName ( ) ) ; mockExistingIfacesWithBond ( bond , slaves ) ; bond.setBootProtocol ( NetworkBootProtocol.DHCP ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForBond ( bond , slaves ) ) ; validateAndAssertNetworkModified ( helper , net ) ; }
private boolean isVnicProfilePermitted ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.common.businessentities.network.VnicProfile profile , boolean portMirroring ) { return ( portMirroring == ( profile.isPortMirroring ( ) ) ) && ( ( getPermissionDAO ( ) . getEntityPermissions ( userId , ActionGroup.CONFIGURE_VM_NETWORK , profile.getId ( ) , VdcObjectType.VnicProfile ) ) != null ) ; }
private static org.ovirt.engine.core.common.businessentities.VmDevice createDiskVmDevice ( final org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice ( ) ; vmDevice.setIsPlugged ( true ) ; vmDevice.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( diskImage.getId ( ) , org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ) ; return vmDevice ; }
public static boolean isLinuxOsType ( java.lang.Integer osId ) { if ( osId == null ) { return false ; } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsIds.contains ( osId ) ; }
public void testLogEntryLogsWhenLogLevelActive ( ) throws java.lang.Exception { java.lang.String id = "" ; org.slf4j.Logger log = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.mockito.Mockito.when ( log.isDebugEnabled ( ) ) . thenReturn ( true ) ; org.ovirt.engine.core.utils.log.LoggedUtils.logEntry ( log , id , new org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedOverridingSubclass ( ) ) ; org.mockito.Mockito.verify ( log ) . debug ( org.mockito.ArgumentMatchers.eq ( LoggedUtils.ENTRY_LOG ) , new java.lang.Object [ ] { org.mockito.ArgumentMatchers.anyObject ( ) , org.mockito.ArgumentMatchers.eq ( id ) } ) ; }
private void initializeItems ( ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > items = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getFileDataStorageModels ( ) ; items.addAll ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getImportBlockDataStorageModels ( ) ) ; items.addAll ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getIsoStorageModels ( ) ) ; items.addAll ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getExportStorageModels ( ) ) ; getModel ( ) . setStorageModels ( items ) ; }
public static org.ovirt.engine.core.common.businessentities.StoragePool buildStoragePool ( java.util.Map < java.lang.String , java.lang.Object > xmlRpcStruct ) { org.ovirt.engine.core.common.businessentities.StoragePool sPool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; if ( xmlRpcStruct.containsKey ( "type" ) ) { sPool.setstorage_pool_type ( org.ovirt.engine.core.common.businessentities.StorageType.valueOf ( xmlRpcStruct.get ( "type" ) . toString ( ) ) ) ; } sPool.setName ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue ( xmlRpcStruct , "name" ) ) ; java.lang.Integer masterVersion = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignIntValue ( xmlRpcStruct , "master_ver" ) ; if ( masterVersion != null ) { sPool.setmaster_domain_version ( masterVersion ) ; } return sPool ; }
private void addVmDynamic ( ) { org.ovirt.engine.core.common.businessentities.VmDynamic tempVar = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; tempVar.setId ( getVmId ( ) ) ; tempVar.setStatus ( VMStatus.ImageLocked ) ; tempVar.setVmHost ( "" ) ; tempVar.setVmIp ( "" ) ; tempVar.setAppList ( getParameters ( ) . getVm ( ) . getDynamicData ( ) . getAppList ( ) ) ; org.ovirt.engine.core.bll.ImportVmCommand.getVmDynamicDAO ( ) . save ( tempVar ) ; org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext ( ) . snapshotNewEntity ( tempVar ) ; }
private void addStyles ( ) { optimizationNoneEditor.setContentWidgetContainerStyleName ( style.fullWidth ( ) ) ; optimizationForServerEditor.setContentWidgetContainerStyleName ( style.fullWidth ( ) ) ; optimizationForDesktopEditor.setContentWidgetContainerStyleName ( style.fullWidth ( ) ) ; optimizationCustomEditor.setContentWidgetContainerStyleName ( style.fullWidth ( ) ) ; countThreadsAsCoresEditor.setContentWidgetContainerStyleName ( style.fullWidth ( ) ) ; }
public void init ( final T model ) { super . init ( model ) ; model.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel ) ( sender ) ) ; java.lang.String propertyName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "Message" . equals ( propertyName ) ) { getView ( ) . setMessageLabel ( model.getMessage ( ) ) ; } } } ) ; }
public void setSupportBridgesReportByVDSM ( boolean isSupportBridgesReportByVDSM ) { if ( ! isSupportBridgesReportByVDSM ) { getIsVmNetwork ( ) . setEntity ( true ) ; getIsVmNetwork ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . bridlessNetworkNotSupported ( getSelectedDc ( ) . getCompatibilityVersion ( ) . toString ( ) ) ) ; getIsVmNetwork ( ) . setIsChangeable ( false ) ; } else { if ( ( this . isSupportBridgesReportByVDSM ) != isSupportBridgesReportByVDSM ) { initIsVm ( ) ; } getIsVmNetwork ( ) . setIsChangeable ( true ) ; } this . isSupportBridgesReportByVDSM = isSupportBridgesReportByVDSM ; }
protected void executeVdsIdCommand ( ) { org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.log.info ( "AddVds - entered , starting logic to add VDS '{}'" , org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.getVdsId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.getVdsId ( ) ) ; org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.log.info ( "AddVds - VDS '{}' was added, will try to add it to the resource manager" , org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.getVdsId ( ) ) ; org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . addVds ( vds , false ) ; }
public static < E extends org.ovirt.engine.core.common.businessentities.VmDevice > java.util.Map < java.lang.String , E > vmDevicesByDevice ( java.util.Collection < E > deviceList ) { return deviceList == null ? java.util.Collections.emptyMap ( ) : deviceList.stream ( ) . filter ( ( dev ) -> ( dev.getDevice ( ) ) != null ) . collect ( java.util.stream.Collectors.toMap ( VmDevice :: getDevice , java.util.function.Function.< E > identity ( ) ) ) ; }
public static java.lang.String rangeParsser ( java.util.List < java.lang.String > values ) { return java.lang.String.valueOf ( ( ( org.ovirt.vdsmfake.Utils.RND.nextInt ( ( ( java.lang.Integer.parseInt ( values.get ( 1 ) ) ) - ( java.lang.Integer.parseInt ( values.get ( 0 ) ) ) ) ) ) + ( java.lang.Integer.parseInt ( values.get ( 0 ) ) ) ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( VDSCommandType.StartRebalanceGlusterVolume , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRebalanceVDSParameters ( getUpServer ( ) . getId ( ) , getGlusterVolumeName ( ) , getParameters ( ) . isFixLayoutOnly ( ) , getParameters ( ) . isForceAction ( ) ) ) ; if ( getSucceeded ( ) ) { setSucceeded ( returnValue.getSucceeded ( ) ) ; } else { handleVdsError ( AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED , returnValue.getVdsError ( ) . getMessage ( ) ) ; return ; } }
public static void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
protected boolean isVirtioScsiEnabled ( ) { java.lang.Boolean virtioScsiEnabled = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isVirtioScsiEnabled ( ) ; boolean isOsSupportedForVirtIoScsi = org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getOs ( ) , org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getcompatibility_version ( ) , DiskInterface.VirtIO_SCSI ) ; return virtioScsiEnabled != null ? virtioScsiEnabled : ( org.ovirt.engine.core.common.FeatureSupported.virtIoScsi ( org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getcompatibility_version ( ) ) ) && isOsSupportedForVirtIoScsi ; }
protected void analyze ( ) { if ( ( vdsmVm ) == null ) { removeVmFromCache ( ) ; return ; } if ( isUnmanagedVm ( ) ) { saveDynamic ( vdsmVm.getVmDynamic ( ) ) ; return ; } proceedDownVms ( ) ; proceedWatchdogEvents ( ) ; proceedBalloonCheck ( ) ; proceedGuaranteedMemoryCheck ( ) ; updateRepository ( ) ; prepareGuestAgentNetworkDevicesForUpdate ( ) ; updateLunDisks ( ) ; updateVmJobs ( ) ; }
public void validateFailsOnCompat ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeId1 ) ) ; prepareMocks ( cmd ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.gluster.StartRebalanceGlusterVolumeCommandTest.UNSUPPORTED_VERSION ) . when ( vdsGroup ) . getCompatibilityVersion ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.GLUSTER_TASKS_NOT_SUPPORTED_FOR_CLUSTER_LEVEL.toString ( ) ) ) ; }
public void testGetAllStaticByStoragePool ( ) { org.ovirt.engine.core.compat.NGuid spID = dbFacade.getVdsGroupDao ( ) . get ( newVmStatic.getVdsGroupId ( ) ) . getStoragePoolId ( ) ; org.junit.Assert.assertNotNull ( spID.getValue ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > result = dao.getAllByStoragePoolId ( spID.getValue ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
public java.util.Map shutdown ( java.lang.String vmId , java.lang.String timeout , java.lang.String message ) { final java.util.Map resultMap = getStatusMap ( "Machine shut down" , 0 ) ; final org.ovirt.vdsmfake.domain.VM vm = getActiveHost ( ) . getRunningVMs ( ) . get ( vmId ) ; if ( vm != null ) { vm.setStatus ( VM.VMStatus.PoweringDown ) ; } org.ovirt.vdsmfake.task.TaskProcessor.getInstance ( ) . addTask ( new org.ovirt.vdsmfake.task.TaskRequest ( org.ovirt.vdsmfake.task.TaskType.SHUTDOWN_VM , 5000L , vm ) ) ; return resultMap ; }
public int compare ( org.ovirt.engine.core.common.businessentities.ProviderType type1 , org.ovirt.engine.core.common.businessentities.ProviderType type2 ) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp ( org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate ( type1 ) , org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate ( type2 ) ) ; }
protected void executeVdsBrokerCommand ( ) { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetOvaInfoVDSCommand.getBroker ( ) . getExternalVmFromOva ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetOvaInfoVDSCommand.getParameters ( ) . getPath ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.GetOvaInfoVDSCommand.proceedProxyReturnValue ( ) ; java.util.Map < java.lang.String , java.lang.Object > map = vmListReturn.vmList [ 0 ] ; map.put ( VdsProperties.vm_guid , org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) ) ; map.put ( VdsProperties.vm_arch , ArchitectureType.x86_64.toString ( ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmsDataFromExternalProvider ( map ) ; setReturnValue ( vm ) ; }
public void equalPctThreshold ( ) { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings ( ) ; settings.diskSpaceFree = 5 ; settings.diskSpaceUsed = 5 ; settings.spaceThresholdGB = 1 ; settings.spaceThresholdPct = 50 ; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest ( settings ) ; org.junit.Assert.assertFalse ( org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isWithinThresholds ( domain ) ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.NetworkAttachment attachment ) { validateParameters ( attachment , "network.id|name" ) ; org.ovirt.engine.api.model.NetworkAttachment networkAttachment = map ( attachment ) ; org.ovirt.engine.core.common.action.NetworkAttachmentParameters params = new org.ovirt.engine.core.common.action.NetworkAttachmentParameters ( hostId , networkAttachment ) ; return performCreate ( ActionType.AddNetworkAttachment , params , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetNetworkAttachmentById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
private void validateDigest ( java.security.MessageDigest digest , java.lang.String actual ) throws java.io.IOException { try { if ( ! ( java.util.Arrays.equals ( digest.digest ( ) , org.apache.commons.codec.binary.Hex.decodeHex ( actual.toCharArray ( ) ) ) ) ) { throw new java.io.IOException ( "SSH copy failed, invalid localDigest" ) ; } } catch ( org.apache.commons.codec.DecoderException e ) { throw new java.io.IOException ( "SSH copy failed, invalid localDigest" ) ; } }
private void RestoreVmFromBaseSnapshot ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vm.getId ( ) , SnapshotType.STATELESS ) ) { log.info ( "Deleting snapshots for stateless vm '{}'" , vm.getId ( ) ) ; org.ovirt.engine.core.common.action.VmOperationParameterBase restoreParams = new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vm.getId ( ) ) ; restoreParams.setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , restoreParams , org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getContext ( ) . withCompensationContext ( null ) ) ; } }
public javax.ws.rs.core.Response move ( org.ovirt.engine.api.model.Action action ) { validateParameters ( action , "storageDomain.id|name" ) ; org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId ( action ) ; org.ovirt.engine.api.model.Disk disk = getDisk ( ) ; org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId ( disk ) ; org.ovirt.engine.core.compat.Guid imageId = asGuid ( disk.getImageId ( ) ) ; org.ovirt.engine.core.common.action.MoveDisksParameters params = new org.ovirt.engine.core.common.action.MoveDisksParameters ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.action.MoveDiskParameters ( imageId , sourceStorageDomainId , storageDomainId ) ) ) ; return doAction ( VdcActionType.MoveDisks , params , action ) ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } oldMacPool = macPoolDao.get ( getMacPoolId ( ) ) ; return ( ( validate ( new org.ovirt.engine.core.bll.MacPoolValidator ( oldMacPool ) . macPoolExists ( ) ) ) && ( validate ( new org.ovirt.engine.core.bll.MacPoolValidator ( getMacPoolEntity ( ) ) . hasUniqueName ( ) ) ) ) && ( validate ( org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged ( oldMacPool , getMacPoolEntity ( ) ) ) ) ; }
private boolean storageDomainStatusIsValid ( ) { boolean returnValue ; if ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.isInternalExecution ( ) ) { returnValue = checkStorageDomainStatus ( StorageDomainStatus.Inactive , StorageDomainStatus.Unknown , StorageDomainStatus.Locked , StorageDomainStatus.Maintenance , StorageDomainStatus.PreparingForMaintenance ) ; } else { returnValue = checkStorageDomainStatus ( StorageDomainStatus.Inactive , StorageDomainStatus.Unknown , StorageDomainStatus.Maintenance , StorageDomainStatus.PreparingForMaintenance ) ; } return returnValue ; }
protected void handleAutoLogin ( org.ovirt.engine.ui.common.auth.AutoLoginData autoLoginData ) { final org.ovirt.engine.core.common.businessentities.DbUser loggedUser = autoLoginData.getDbUser ( ) ; com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { lockInteractionManager.showLoadingIndicator ( ) ; getLoginModel ( ) . autoLogin ( loggedUser ) ; } } ) ; org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.fire ( eventBus , org.ovirt.engine.ui.common.auth.SSOTokenData.instance ( ) . getToken ( ) ) ; user.setAutoLogin ( true ) ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk ( ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; org.junit.Assert.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Disk" , "testAddIncompleteParameters" , "provisionedSize|size" , "format" ) ; } }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > get64bitOsTypes ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes ) != null ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.VmOsType [ ] { org.ovirt.engine.core.common.businessentities.VmOsType.RHEL3x64 , org.ovirt.engine.core.common.businessentities.VmOsType.RHEL4x64 , org.ovirt.engine.core.common.businessentities.VmOsType.RHEL5x64 , org.ovirt.engine.core.common.businessentities.VmOsType.RHEL6x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows2003x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows2008R2x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows2008x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows7x64 } ) ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes ; }
private static void assertVm ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.VM newVm , long expectedDbGeneration ) { org.junit.Assert.assertEquals ( "imported vm is different than expected" , vm , newVm ) ; org.junit.Assert.assertEquals ( "imported db generation is different than expected" , expectedDbGeneration , newVm.getDbGeneration ( ) ) ; newVm.getStaticData ( ) . setSmallIconId ( vm.getStaticData ( ) . getSmallIconId ( ) ) ; newVm.getStaticData ( ) . setLargeIconId ( vm.getStaticData ( ) . getLargeIconId ( ) ) ; org.junit.Assert.assertEquals ( vm.getStaticData ( ) , newVm.getStaticData ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.StorageType getRawValue ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { if ( ( ( object.getDiskStorageType ( ) ) != ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) && ( ( object.getDiskStorageType ( ) ) != ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER ) ) ) { return null ; } org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( object ) ) ; return disk.getStorageTypes ( ) . isEmpty ( ) ? null : disk.getStorageTypes ( ) . get ( 0 ) ; }
protected void executeQueryCommand ( ) { setReturnValue ( org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getDbFacade ( ) . getDiskDao ( ) . getAllAttachableDisksByPoolId ( org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters ( ) . getVmId ( ) , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getUserID ( ) , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters ( ) . isFiltered ( ) ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ! ( defaultProfile.getName ( ) . getEntity ( ) . equals ( getName ( ) . getEntity ( ) ) ) ) { getName ( ) . getEntityChangedEvent ( ) . removeListener ( networkNameListener ) ; defaultProfile.getName ( ) . getEntityChangedEvent ( ) . removeListener ( this ) ; } }
private void massNetworksUpdate ( org.ovirt.engine.core.compat.Guid vfsConfigId , java.util.Set < org.ovirt.engine.core.compat.Guid > networks ) { java.util.List < org.springframework.jdbc.core.namedparam.MapSqlParameterSource > executions = new java.util.ArrayList ( networks.size ( ) ) ; for ( org.ovirt.engine.core.compat.Guid networkId : networks ) { executions.add ( createNetworkParametersMapper ( vfsConfigId , networkId ) ) ; } getCallsHandler ( ) . executeStoredProcAsBatch ( "InsertVfsConfigNetwork" , executions ) ; }
private void setUpGetCertuficateExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVdsCertificateSubjectByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , org.ovirt.engine.api.restapi.resource.BackendVmResourceTest.CERTIFICATE ) ; }
public void testValidateNetworkExclusiveOnNicsAllAttachmentsMustHaveNicNameSet ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkId ( vmNetwork1.getId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure = java.util.Collections.singletonList ( networkAttachment ) ; new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator ( attachmentsToConfigure , networkMap , networkExclusivenessValidator ) . validateNetworkExclusiveOnNics ( ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { switch ( org.ovirt.engine.core.bll.AddVmCommand.getActionState ( ) ) { case EXECUTE : return org.ovirt.engine.core.bll.AddVmCommand.getSucceeded ( ) ? ( org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getVdsmTaskIdList ( ) . size ( ) ) > 0 ? org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_STARTED : org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_ADD_VM ; case END_SUCCESS : return org.ovirt.engine.core.bll.AddVmCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_FINISHED_SUCCESS : org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_FINISHED_FAILURE ; default : return org.ovirt.engine.core.common.AuditLogType.USER_ADD_VM_FINISHED_FAILURE ; } }
public void getAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
protected void executeCommand ( ) { providerDao.update ( getProvider ( ) ) ; org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance ( ) . create ( getProvider ( ) ) ; if ( providerProxy != null ) { providerProxy.onModification ( ) ; } org.ovirt.engine.core.bll.provider.UpdateProviderCommand.setSucceeded ( true ) ; }
public void edit ( ) { final org.ovirt.engine.core.common.businessentities.Network network = ( ( org.ovirt.engine.core.common.businessentities.Network ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel ( network , this ) ; setWindow ( networkModel ) ; initDcList ( networkModel ) ; }
public void onKeyPress ( com.google.gwt.dom.client.NativeEvent event ) { if ( ( com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE ) == ( event.getKeyCode ( ) ) ) { getView ( ) . hide ( ) ; unbind ( ) ; } }
public void onSuccess ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { if ( cluster != null ) { maintenance ( cluster.isMaintenanceReasonRequired ( ) , cluster.supportsGlusterService ( ) ) ; } }
protected boolean isImageNotLocked ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImage ( ) ; if ( ( diskImage.getImageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED ) ) { if ( ( org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters ( ) . getOperation ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED , java.lang.String.format ( "$%1$s %2$s" , "diskAliases" , diskImage.getDiskAlias ( ) ) ) ; } else { return failValidation ( EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED ) ; } } return true ; }
public static org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel createNewSnapshotModel ( org.ovirt.engine.ui.uicommonweb.ICommandTarget cancelCommandTarget ) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel ( ) ; model.setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . createSnapshotTitle ( ) ) ; model.setHelpTag ( HelpTag.create_snapshot ) ; model.setHashName ( "create_snapshot" ) ; model.setCancelCommand ( new org.ovirt.engine.ui.uicommonweb.UICommand ( "Cancel" , cancelCommandTarget ) . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . cancel ( ) ) . setIsCancel ( true ) ) ; return model ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesList ( org.ovirt.engine.core.compat.Guid serverId , java.lang.String [ ] serviceNames ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterServicesGet ( serviceNames ) ; org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc ( serverId , xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testNoDiskBootFromIsoDomain ( ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer mock = mockIsoDomainListSyncronizer ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.compat.Guid ( ) ) . when ( mock ) . findActiveISODomain ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , BootSequence.CD , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ) , true , null ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetNetworkById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendNetworkResourceTest.NETWORK_ID } , java.util.Collections.emptyList ( ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendNetworkResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static < E extends org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > java.util.Map < java.lang.String , E > vmInterfacesByNetworkName ( java.util.List < E > entityList ) { if ( entityList != null ) { java.util.Map < java.lang.String , E > map = new java.util.HashMap < java.lang.String , E > ( ) ; for ( E e : entityList ) { map.put ( e.getNetworkName ( ) , e ) ; } return map ; } else { return java.util.Collections.emptyMap ( ) ; } }
private void configureLocalStorage2 ( org.ovirt.engine.ui.uicommonweb.models.hosts.ConfigureLocalStorageModel model ) { java.lang.String prefix = ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.RhevhLocalFSPath ) ) ) ; if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( prefix ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel pathModel = model.getStorage ( ) . getPath ( ) ; pathModel.setEntity ( prefix ) ; pathModel.setIsChangeable ( false ) ; } configureLocalStorage3 ( model ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainList ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > l = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain s = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; s.setStatus ( StorageDomainStatus.Inactive ) ; l.add ( s ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain s2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; s2.setStatus ( null ) ; l.add ( s2 ) ; STORAGE_DOMAIN.setStatus ( StorageDomainStatus.Active ) ; l.add ( STORAGE_DOMAIN ) ; return l ; }
public < T > T getEntity ( java.lang.Class < T > clz , org.ovirt.engine.core.common.queries.QueryType query , org.ovirt.engine.core.common.queries.QueryParametersBase queryParams , java.lang.String identifier , boolean notFoundAs404 , boolean isMandatory ) { try { return doGetEntity ( clz , query , queryParams , identifier , isMandatory ) ; } catch ( java.lang.Exception e ) { return handleError ( clz , e , notFoundAs404 ) ; } }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParentParameters ( ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParameters ( ) ; if ( parentHasCallback ( ) ) { if ( ( ! ( getParameters ( ) . getShouldBeEndedByParent ( ) ) ) || ( ( getTaskType ( ) ) == ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported ) ) ) { parentParameters = getParameters ( ) . getParentParameters ( ) ; } } else if ( getParameters ( ) . getShouldBeEndedByParent ( ) ) { parentParameters = getParameters ( ) . getParentParameters ( ) ; } return parentParameters ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.events.EventModel eventModel ) { driver.edit ( eventModel ) ; org.ovirt.engine.core.common.businessentities.AuditLog event = eventModel.getEvent ( ) ; eventIdLabel.asValueBox ( ) . setValue ( java.lang.String.valueOf ( event.getLogTypeValue ( ) ) ) ; eventTimeLabel.asValueBox ( ) . setValue ( new org.ovirt.engine.ui.common.widget.renderer.FullDateTimeRenderer ( ) . render ( event.getLogTime ( ) ) ) ; eventMessageTextArea.asValueBox ( ) . setValue ( event.getMessage ( ) ) ; }
public void init ( org.ovirt.engine.core.common.businessentities.VDS vds ) { mCurrentVdsId = vds.getId ( ) ; setmIrsPort ( vds.getPort ( ) ) ; privatemCurrentIrsHost = vds.getHostName ( ) ; setProtocol ( vds.getProtocol ( ) ) ; setVersion ( vds.getVdsGroupCompatibilityVersion ( ) ) ; }
public void isValidVmNetworkForNullNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNewNetwork ( true , NETWORK_NAME ) ; org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface = createNewInterface ( ) ; org.junit.Assert.assertTrue ( vmInterfaceManager.isValidVmNetwork ( iface , java.util.Collections.singletonMap ( network.getName ( ) , network ) ) ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "force" , getForce ( ) ) . append ( "secondsToWait" , getSecondsToWait ( ) ) . append ( "gracefully" , getGracefully ( ) ) . append ( "reason" , getReason ( ) ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > GetNicTypeList ( org.ovirt.engine.core.common.businessentities.VmOsType osType , boolean hasDualmode ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > ( java.util.Arrays.asList ( org.ovirt.engine.core.common.businessentities.VmInterfaceType.values ( ) ) ) ; list.remove ( VmInterfaceType.rtl8139_pv ) ; if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType ( osType ) ) { list.remove ( VmInterfaceType.e1000 ) ; if ( ( osType == ( org.ovirt.engine.core.common.businessentities.VmOsType.WindowsXP ) ) && hasDualmode ) { list.add ( VmInterfaceType.rtl8139_pv ) ; } } return list ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DbUser > lookupUsers ( ) { if ( isFiltered ( ) ) { return getBackendCollection ( org.ovirt.engine.core.common.businessentities.DbUser.class , VdcQueryType.GetAllDbUsers , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ; } return asCollection ( org.ovirt.engine.core.common.businessentities.DbUser.class , getEntity ( java.util.List.class , SearchType.DBUser , "users:" ) ) ; }
public void updateInterface ( org.ovirt.engine.core.common.businessentities.storage_pool datacenter ) { if ( datacenter == null ) { return ; } getInterface ( ) . setItems ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDiskInterfaceList ( VmOsType.Unassigned , datacenter.getcompatibility_version ( ) ) ) ; getInterface ( ) . setSelectedItem ( ( getIsNew ( ) ? org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultDiskInterface ( VmOsType.Unassigned , null ) : getDisk ( ) . getDiskInterface ( ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup getCluster ( org.ovirt.engine.api.model.VM vm ) { if ( namedCluster ( vm ) ) { return isFiltered ( ) ? lookupClusterByName ( vm.getCluster ( ) . getName ( ) ) : getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup.class , VdcQueryType.GetVdsGroupByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( vm.getCluster ( ) . getName ( ) ) , ( "Cluster: name=" + ( vm.getCluster ( ) . getName ( ) ) ) ) ; } return lookupCluster ( asGuid ( vm.getCluster ( ) . getId ( ) ) ) ; }
private org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.util.Set < java.lang.String > > insertExclusiveLock ( java.lang.String key , java.lang.String message , boolean isCheckOnly ) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView lock = locks.get ( key ) ; if ( lock != null ) { return new org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.util.Set < java.lang.String > > ( java.lang.Boolean.FALSE , lock.getMessages ( ) ) ; } if ( ! isCheckOnly ) { locks.put ( key , new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView ( 0 , message , true ) ) ; } return org.ovirt.engine.core.bll.lock.InMemoryLockManager.LOCK_INSERT_SUCCESS_RESULT ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > drive , java.lang.String baseVolUUID , java.lang.String topVolUUID , java.lang.String bandwidth , java.lang.String jobUUID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.merge ( vmId , drive , baseVolUUID , topVolUUID , bandwidth , jobUUID ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > setupCanAddVmFromSnapshotTests ( final int domainSizeGB , final int sizeRequired , final int pctRequired , org.ovirt.engine.core.compat.Guid sourceSnapshotId ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB , sizeRequired , pctRequired ) ; initializeVmDAOMock ( vm ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = createVmFromSnapshotCommand ( vm , sourceSnapshotId ) ; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods ( cmd ) ; return cmd ; }
public static void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
private void writeServiceLocator ( org.ovirt.api.metamodel.concepts.Locator locator ) { writer.writeStartElement ( "locator" ) ; writeCommon ( locator ) ; locator.parameters ( ) . forEach ( this :: writeParameter ) ; writer.writeEndElement ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase ) ( target ) ) ; java.util.Map < java.lang.String , java.lang.String > timezones = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( returnValue ) ) ; timezones.put ( null , "" ) ; cachedTimeZones.put ( timezoneType , timezones.entrySet ( ) ) ; behavior.postUpdateTimeZone ( selectedTimeZone ) ; }
protected void addCustomModelsDetailModelList ( final java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list , int customPosition , final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel templateDiskListModel , final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateEventListModel templateEventListModel , final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel permissionListModel ) { templateDiskListModel.setSystemTreeContext ( this ) ; list.add ( customPosition , templateDiskListModel ) ; list.add ( templateEventListModel ) ; list.add ( permissionListModel ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 , 0 , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveDiskProfile , org.ovirt.engine.core.common.action.DiskProfileParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void getStorageDomainDefaultWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return ( ( java.lang.Boolean ) ( returnValue ) ) ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters params = new org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters ( storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainDefaultWipeAfterDelete , params , aQuery ) ; }
public void update ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { getCallsHandler ( ) . executeModification ( "UpdateCluster" , getClusterParamSource ( cluster ) ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase executeCommand ( final org.ovirt.engine.core.bll.CommandBase < ? > command , final org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler ( org.ovirt.engine.core.bll.tasks.CommandExecutor.log ) . runAction ( command , ( cmdContext != null ? cmdContext.getExecutionContext ( ) : null ) ) ; updateCommandResult ( command.getCommandId ( ) , result ) ; return result ; }
protected void setUpQueryExpectations ( java.lang.String query ) throws java.lang.Exception { setUpEntityQueryExpectations ( 1 ) ; control.replay ( ) ; }
private org.ovirt.engine.core.common.businessentities.Provider getProvider ( ) { org.ovirt.engine.core.common.businessentities.Provider provider = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.Provider.class ) ; org.mockito.Mockito.when ( provider.getId ( ) ) . thenReturn ( GUIDS [ 0 ] ) ; org.mockito.Mockito.when ( provider.getName ( ) ) . thenReturn ( NAMES [ 0 ] ) ; return provider ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > getModifiedNetworks ( ) { if ( ( modifiedNetworks ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getNetworkAttachments ( ) ; modifiedNetworks = new java.util.ArrayList ( networkAttachments.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : networkAttachments ) { modifiedNetworks.add ( existingNetworkRelatedToAttachment ( attachment ) ) ; } } return modifiedNetworks ; }
public void validateVmInPreview ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.VM ) ; initVmForSpace ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.when ( snapshotsValidator.vmNotInPreview ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
private java.lang.String getGlusterNetworkAddress ( org.ovirt.engine.core.compat.Guid hostId , java.lang.String glusterNetworkName ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = getInterfaceDao ( ) . getAllInterfacesForVds ( hostId ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics ) { if ( glusterNetworkName.equals ( nic.getNetworkName ( ) ) ) { return nic.getAddress ( ) ; } } return null ; }
protected void readOsSection ( org.ovirt.engine.core.compat.backendcompat.XmlNode section ) { _vmTemplate.setId ( new org.ovirt.engine.core.compat.Guid ( section.attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = section.SelectSingleNode ( "Description" ) ; if ( node != null ) { int osId = osRepository.getOsIdByUniqueName ( node.innerText ) ; _vmTemplate.setOsId ( osId ) ; _vmTemplate.setClusterArch ( osRepository.getArchitectureFromOS ( osId ) ) ; } else { _vmTemplate.setClusterArch ( ArchitectureType.undefined ) ; } }
private void ApplySearchPageSize ( int value ) { model.setSearchPageSize ( value ) ; if ( ( searchRequested ) && ( ! ( model.getTimer ( ) . isActive ( ) ) ) ) { model.getSearchCommand ( ) . execute ( ) ; } model.updatePagingAvailability ( ) ; }
public void canRemoveIncreaseReplica ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume ( volumeId1 , 12 , 4 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricksToRemove = new java.util.ArrayList < > ( ) ; bricksToRemove.add ( volumeEntity.getBricks ( ) . get ( 0 ) ) ; org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick ( bricksToRemove , volumeEntity , 5 , false ) ; org.junit.Assert.assertThat ( validationResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT ) ) ; }
public static void GetAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public static boolean qosConfiguredOnInterface ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( iface.isQosOverridden ( ) ) { return ( iface.getQos ( ) ) != null ; } else { return ( network != null ) && ( ( network.getQosId ( ) ) != null ) ; } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VmManagementParametersBase param = new org.ovirt.engine.core.common.action.VmManagementParametersBase ( gettempVm ( ) ) ; param.setSoundDeviceEnabled ( ( ( java.lang.Boolean ) ( model.getIsSoundcardEnabled ( ) . getEntity ( ) ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.UpdateVm , param , new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallbacks.NetworkUpdateFrontendAsyncCallback ( model , defaultNetworkCreatingManager , gettempVm ( ) . getId ( ) ) , this ) ; }
private org.ovirt.engine.core.common.businessentities.storage.VolumeFormat getVolumeFormatForDomain ( ) { if ( ( org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters ( ) . getVolumeFormat ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW ) ) { return org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW ; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = org.ovirt.engine.core.bll.CopyImageGroupCommand.getStorageDomainStaticDao ( ) . get ( org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters ( ) . getStorageDomainId ( ) ) ; if ( ( destDomain.getStorageType ( ) . isBlockDomain ( ) ) && ( ( org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters ( ) . getVolumeType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse ) ) ) { return org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW ; } else { return org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW ; } }
public boolean StorageDomainRemoved ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { int numOfRemovedLuns = removeStorageDomainLuns ( storageDomain ) ; if ( numOfRemovedLuns > 0 ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . getAllForVolumeGroup ( storageDomain.getstorage ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : FilterConnectionsUsedByOthers ( list , storageDomain.getstorage ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . remove ( connection.getid ( ) ) ; } } return true ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllForNetwork ( org.ovirt.engine.core.compat.Guid networkId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "network_id" , networkId ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = getCallsHandler ( ) . executeReadList ( "GetVdsByNetworkId" , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance , parameterSource ) ; return uniteAgents ( vdsList ) ; }
protected void initUser ( ) { if ( ( org.ovirt.engine.core.bll.VmPoolUserCommandBase.getDbUser ( ) ) == null ) { setDbUser ( org.ovirt.engine.core.bll.UserCommandBase.initUser ( org.ovirt.engine.core.bll.VmPoolUserCommandBase.getParameters ( ) . getSessionId ( ) , org.ovirt.engine.core.bll.VmPoolUserCommandBase.getParameters ( ) . getUser ( ) . getDomain ( ) , org.ovirt.engine.core.bll.VmPoolUserCommandBase.getParameters ( ) . getUser ( ) . getId ( ) ) ) ; } }
public static void getDataCenterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "DataCenter: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "domainName" , ( ( staticData ) == null ? null : staticData.getName ( ) ) ) . append ( "domainId" , ( ( staticData ) == null ? null : staticData.getId ( ) ) ) . build ( ) ; }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.VmPool selectedItem ) { driver.edit ( getDetailModel ( ) ) ; monitorCount.setText ( java.lang.String.valueOf ( getDetailModel ( ) . getMonitorCount ( ) ) ) ; isStateless.setText ( java.lang.Boolean.toString ( getDetailModel ( ) . getIsStateless ( ) ) ) ; formBuilder.showForm ( getDetailModel ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMNamesListReturnForXmlRpc getExternalVmNamesList ( java.lang.String uri , java.lang.String username , java.lang.String password ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getExternalVMNames" ) . withParameter ( "uri" , uri ) . withParameter ( "username" , username ) . withParameter ( "password" , password ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmNames" ) . withResponseType ( java.lang.Object [ ] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMNamesListReturnForXmlRpc ( response ) ; }
public void isVirtioScsiEnabledDefaultedToTrue ( ) { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.VmManagementParametersBase > cmd = setupCanAddVmTests ( 0 , 0 ) ; org.mockito.Mockito.doReturn ( createVdsGroup ( ) ) . when ( cmd ) . getVdsGroup ( ) ; junit.framework.Assert.assertTrue ( "isVirtioScsiEnabled hasn't been defaulted to true on cluster >= 3.3." , cmd.isVirtioScsiEnabled ( ) ) ; }
public static void IsTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , new org.ovirt.engine.core.common.queries.IsVmTemlateWithSameNameExistParameters ( name ) , aQuery ) ; }
private void removeMemory ( final org.ovirt.engine.core.common.businessentities.Snapshot snapshot , boolean useTaskManager ) { org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters parameters = new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters ( snapshot.getMemoryVolume ( ) , org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId ( ) ) ; if ( useTaskManager ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( VdcActionType.RemoveMemoryVolumes , parameters , org.ovirt.engine.core.bll.RemoveSnapshotCommand.cloneContextAndDetachFromParent ( ) ) ; } else { org.ovirt.engine.core.common.action.VdcReturnValueBase ret = runInternalAction ( VdcActionType.RemoveMemoryVolumes , parameters ) ; if ( ! ( ret.getSucceeded ( ) ) ) { log.error ( "Cannot remove memory volumes for snapshot '{}'" , snapshot.getId ( ) ) ; } } }
protected void executeCommand ( ) { org.ovirt.engine.core.compat.Guid qosId = getQosId ( ) ; org.ovirt.engine.core.common.businessentities.network.HostNetworkQos oldQos = getQosDao ( ) . get ( qosId ) ; org.ovirt.engine.core.common.businessentities.network.HostNetworkQos newQos = getQos ( ) ; super . executeCommand ( ) ; if ( networkUpdateRequired ( oldQos , newQos ) ) { refreshNetworks ( refreshNetworksParametersFactory.create ( qosId ) ) ; } }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > getBrickEntitiesToRemove ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity ( ) ; brick.setId ( GUIDS [ 0 ] ) ; brick.setVolumeId ( org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId ) ; bricks.add ( brick ) ; return bricks ; }
public void onLoad ( ) { super . onLoad ( ) ; if ( ! ( dragEnabled ) ) { return ; } contextMenuHandlerRegistration = numaPanel.addDomHandler ( new com.google.gwt.event.dom.client.ContextMenuHandler ( ) { @ java.lang.Override public void onContextMenu ( com.google.gwt.event.dom.client.ContextMenuEvent event ) { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent ( ) ; showContextMenu ( nativeEvent.getClientX ( ) , nativeEvent.getClientY ( ) ) ; event.stopPropagation ( ) ; event.preventDefault ( ) ; } } , com.google.gwt.event.dom.client.ContextMenuEvent.getType ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > qosList = ( returnValue == null ) ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ( ) : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ) ( returnValue ) ) ; qosList.add ( 0 , NetworkQoSModel.EMPTY_QOS ) ; return qosList ; }
public void validateFailsForVdsNonUp ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( ) ) ) ; prepareMocks ( cmd , VDSStatus.Down ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.mockito.Mockito.doReturn ( VDSStatus.Error ) . when ( vds ) . getStatus ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.mockito.Mockito.doReturn ( VDSStatus.Maintenance ) . when ( vds ) . getStatus ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testResolveCombinedMessage ( ) { final java.lang.String message = "${first} equals one, ${second} equals two, '${blank}' equals blank and ${nonExist} is unknown" ; final java.lang.String expectedResolved = java.lang.String.format ( "one equals one, two equals two, ' ' equals blank and %1s is unknown" , AuditLogDirector.UNKNOWN_VARIABLE_VALUE ) ; java.util.Map < java.lang.String , java.lang.String > values = new java.util.HashMap < > ( ) ; values.put ( "first" , "one" ) ; values.put ( "second" , "two" ) ; values.put ( "blank" , " " ) ; java.lang.String resolvedMessage = auditLogDirector.resolveMessage ( message , values ) ; org.junit.Assert.assertEquals ( expectedResolved , resolvedMessage ) ; }
private void updateDeviceProperties ( ) { if ( updateReadOnlyRequested ( ) ) { vmDeviceForVm.setIsReadOnly ( getNewDisk ( ) . getReadOnly ( ) ) ; getVmDeviceDao ( ) . update ( vmDeviceForVm ) ; } if ( ( getOldDisk ( ) . getDiskInterface ( ) ) != ( getNewDisk ( ) . getDiskInterface ( ) ) ) { getVmDeviceDao ( ) . clearDeviceAddress ( getOldDisk ( ) . getId ( ) ) ; } }
private void calculateNetworkImplementationDetailsAndAssertSync ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , boolean expectSync , java.lang.String networkName , boolean vmNet , int mtu , int vlanId ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > networks = createNetworksMap ( networkName , vmNet , mtu , vlanId ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails ( networks , iface ) ; org.junit.Assert.assertNotNull ( "Network implementation details should be filled." , networkImplementationDetails ) ; org.junit.Assert.assertEquals ( ( ( "Network implementation details should be " + ( expectSync ? "in" : "out of" ) ) + " sync." ) , expectSync , networkImplementationDetails.isInSync ( ) ) ; }
private void decreasePendingVms ( org.ovirt.engine.core.compat.Guid vdsId , int numOfCpus , int minAllocatedMem , java.lang.String vmName ) { getVdsDynamicDao ( ) . updatePartialVdsDynamicCalc ( vdsId , 0 , ( - numOfCpus ) , ( - minAllocatedMem ) , 0 , 0 ) ; getBlockingQueue ( vdsId ) . offer ( java.lang.Boolean.TRUE ) ; lastDecreasedVds = vdsId ; org.ovirt.engine.core.bll.RunVmCommandBase.log.debugFormat ( "Decreasing vds {0} pending vcpu count by {1} and vmem size by {2} (Vm: {3})" , vdsId , numOfCpus , minAllocatedMem , vmName ) ; }
public void notifyHostManagers ( org.ovirt.engine.core.compat.Guid hostId ) { if ( ( resourceManager ) == null ) { return ; } org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = resourceManager.getVdsManager ( hostId ) ; int pendingCpus = org.ovirt.engine.core.bll.scheduling.pending.PendingCpuCores.collectForHost ( this , hostId ) ; int pendingMemory = org.ovirt.engine.core.bll.scheduling.pending.PendingMemory.collectForHost ( this , hostId ) ; vdsManager.updatePendingData ( pendingMemory , pendingCpus ) ; }
protected void buildVmVideoCards ( ) { createInfo.put ( VdsProperties.display , vm.getDisplayType ( ) . toString ( ) ) ; if ( ( vm.getDisplayType ( ) ) != ( vm.getDefaultDisplayType ( ) ) ) { addVideoCardByDisplayType ( vm.getDisplayType ( ) , vm.getNumOfMonitors ( ) , vm.getSingleQxlPci ( ) ) ; } else { addVideoCardsDefinedForVmInDB ( vm.getId ( ) ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.GetVdsByVdsIdQuery.getDbFacade ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.bll.GetVdsByVdsIdQuery.getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds.setCpuName ( org.ovirt.engine.core.bll.CpuFlagsManagerHandler.findMaxServerCpuByFlags ( vds.getCpuFlags ( ) , vds.getVdsGroupCompatibilityVersion ( ) ) ) ; } org.ovirt.engine.core.bll.GetVdsByVdsIdQuery.getQueryReturnValue ( ) . setReturnValue ( vds ) ; }
private static org.ovirt.engine.core.common.osinfo.OsRepository getOsRepository ( ) { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; }
private void assertGetResult ( org.ovirt.engine.core.common.businessentities.StorageDomain result ) { org.junit.Assert.assertEquals ( existingDomain , result ) ; org.junit.Assert.assertEquals ( "Wrong committed disk size" , 8 , result.getCommittedDiskSize ( ) ) ; org.junit.Assert.assertEquals ( "Wrong actual disk size" , 4 , result.getActualImagesSize ( ) ) ; org.junit.Assert.assertEquals ( "Wrong shared status" , StorageDomainSharedStatus.Active , result.getStorageDomainSharedStatus ( ) ) ; }
public java.lang.Boolean getValue ( org.ovirt.engine.core.common.businessentities.QuotaCluster object ) { if ( ( selectedClusterGuid.contains ( object.getClusterId ( ) ) ) || ( ( ( object.getMemSizeMB ( ) ) != null ) && ( ( object.getVirtualCpu ( ) ) != null ) ) ) { if ( ! ( selectedClusterGuid.contains ( object.getClusterId ( ) ) ) ) { selectedClusterGuid.add ( object.getClusterId ( ) ) ; } return true ; } return false ; }
private void dataCenterWithClusterSelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.dataCenterWithClusterSelectedItemChanged ( ) ; org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList ( ) . getSelectedItem ( ) ; if ( ( dataCenterWithCluster != null ) && ( ( dataCenterWithCluster.getDataCenter ( ) ) != null ) ) { getDisksAllocationModel ( ) . setQuotaEnforcementType ( dataCenterWithCluster.getDataCenter ( ) . getQuotaEnforcementType ( ) ) ; } updateMaximalVmMemSize ( ) ; handleQxlClusterLevel ( ) ; updateWatchdogModels ( ) ; }
private void addOvfStoreDiskToDomain ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ovfDisk ) { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo = new org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ( org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getStorageDomainId ( ) , null , ovfDisk.getId ( ) , org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.OUTDATED , null ) ; org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getDbFacade ( ) . getStorageDomainOvfInfoDao ( ) . save ( storageDomainOvfInfo ) ; }
public void diskSnapshotsCanBePreviewed ( ) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot ( ) ; org.mockito.Mockito.when ( snapshotDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( activeSnapshot ) ; org.hamcrest.MatcherAssert.assertThat ( validator.canDiskSnapshotsBePreviewed ( activeSnapshot.getId ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void setDefaultInterface ( ) { org.ovirt.engine.core.compat.Guid vmId = getVmId ( ) ; if ( ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( vmId ) ) || ( ( getDisk ( ) ) == null ) ) { boolean virtioScsiEnabled = java.lang.Boolean.TRUE.equals ( getIsVirtioScsiEnabled ( ) . getEntity ( ) ) ; getDiskInterface ( ) . setSelectedItem ( ( virtioScsiEnabled ? org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI : org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO ) ) ; } else { getDiskInterface ( ) . setSelectedItem ( getDisk ( ) . getDiskVmElementForVm ( vmId ) . getDiskInterface ( ) ) ; } }
public void unmanagedNetworkNotSynced ( ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic ( "nic0" , "net" ) ; mockExistingIfaces ( nic ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( createParametersForSync ( nic ) ) ; validateAndExpectNoViolations ( helper ) ; junit.framework.Assert.assertTrue ( helper.getNetworks ( ) . isEmpty ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmDuringInitialization ( org.ovirt.engine.core.common.businessentities.VM vm ) { boolean isVmDuringInit = isVmDuringInitiating ( vm ) ; if ( ( ( vm.isRunning ( ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.NotResponding ) ) ) || isVmDuringInit ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static org.ovirt.engine.api.model.VmType mapVmType ( org.ovirt.engine.api.model.VmType type ) { if ( type == null ) { return null ; } switch ( type ) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP ; case Server : return org.ovirt.engine.api.model.VmType.SERVER ; case HighPerformance : return org.ovirt.engine.api.model.VmType.HIGH_PERFORMANCE ; default : throw new java.lang.IllegalArgumentException ( ( ( "Unknown virtual machine type \"" + type ) + "\"" ) ) ; } }
protected void executeVdsBrokerCommand ( ) { glusterTaskReturn = org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getBroker ( ) . glusterVolumeRebalanceStart ( org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters ( ) . isFixLayoutOnly ( ) , org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters ( ) . isForceAction ( ) ) ; task = glusterTaskReturn.getGlusterTask ( ) ; org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( task ) ; }
public boolean addOperationList ( final java.util.List < org.ovirt.engine.ui.frontend.communication.VdcOperation < ? , ? > > operationList ) { boolean allowed = true ; for ( org.ovirt.engine.ui.frontend.communication.VdcOperation < ? , ? > operation : operationList ) { if ( ! ( addOperationImpl ( operation ) ) ) { allowed = false ; } } processor.processOperation ( this ) ; return allowed ; }
public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateWatchdog , org.ovirt.engine.core.common.action.WatchdogParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendWatchdogResourceTest.VM_ID } , true , true ) ) ; org.ovirt.engine.api.model.WatchDog wd = resource.update ( getUpdate ( ) ) ; assertTrue ( wd.isSetAction ( ) ) ; }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmPoolDao ( ) ; vmDao = dbFacade.getVmDao ( ) ; existingVmPool = dao.get ( org.ovirt.engine.core.dao.VmPoolDaoTest.EXISTING_VM_POOL_ID ) ; deletableVmPool = dao.get ( org.ovirt.engine.core.dao.VmPoolDaoTest.DELETABLE_VM_POOL_ID ) ; newVmPool = new org.ovirt.engine.core.common.businessentities.VmPool ( ) ; newVmPool.setName ( "New VM Pool" ) ; newVmPool.setVmPoolDescription ( "This is a new VM pool." ) ; newVmPool.setClusterId ( org.ovirt.engine.core.dao.VmPoolDaoTest.CLUSTER_ID ) ; newVmPoolMap = new org.ovirt.engine.core.common.businessentities.VmPoolMap ( org.ovirt.engine.core.dao.VmPoolDaoTest.FREE_VM_ID , org.ovirt.engine.core.dao.VmPoolDaoTest.EXISTING_VM_POOL_ID ) ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterSnapshotCreate ( java.lang.String volumeName , java.lang.String snapshotName , java.lang.String description , boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotCreate" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "snapName" , snapshotName ) . withOptionalParameter ( "snapDescription" , description ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc ( response ) ; }
public void disableGlusterWhenVolumesExist ( ) { createCommandWithVirtEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDao.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; cpuExists ( ) ; cpuFlagsNotMissing ( ) ; allQueriesForVms ( ) ; clusterHasGlusterVolumes ( ) ; canDoActionFailedWithReason ( EngineMessage.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES ) ; }
public static void isClusterEmpty ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.lang.Boolean ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsClusterEmpty , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected java.lang.String getVmIsBeingImportedMessage ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_BEING_IMPORTED.name ( ) ) ; if ( ( org.ovirt.engine.core.bll.ConvertVmCommand.getVmName ( ) ) != null ) { builder.append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.ConvertVmCommand.getVmName ( ) ) ) ; } return builder.toString ( ) ; }
public void testNotRemovingLabeledNetworksReferencingUnlabeledNetworkRemovalIsOk ( ) { org.ovirt.engine.core.common.businessentities.network.Network unlabeledNetwork = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; unlabeledNetwork.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment ( unlabeledNetwork ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . addNetworks ( java.util.Collections.singletonList ( unlabeledNetwork ) ) . build ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.notRemovingLabeledNetworks ( networkAttachment ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected int getEntitiesTotalCount ( ) { return org.ovirt.engine.core.dao.FixturesTool.NUMBER_OF_VM_NETWORK_FILTER_PARAMETERS ; }
public void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
private void markOldEventsAsProcessed ( ) { org.ovirt.engine.core.notifier.NotificationService.log.debug ( "Processing old events" ) ; final int updatedEvents = eventsManager.markOldEventsAsProcessed ( prop.getInteger ( NotificationProperties.DAYS_TO_SEND_ON_STARTUP ) ) ; if ( updatedEvents > 0 ) { org.ovirt.engine.core.notifier.NotificationService.log.debug ( ( updatedEvents + " old records were marked as processed in the \"audit_log\" table." ) ) ; } }
private void addNonManagementNetworksToPool ( int numberOfNetworks ) { addNetworksToPool ( numberOfNetworks , false ) ; }
public void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.String > aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.StringConverter ( ) ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public static org.ovirt.engine.core.bll.CommandBase < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > [ ] data ( ) { return new org.ovirt.engine.core.bll.CommandBase < ? > [ ] { new org.ovirt.engine.core.bll.CreateSnapshotCommand ( new org.ovirt.engine.core.common.action.ImagesActionsParametersBase ( ) ) , new org.ovirt.engine.core.bll.AddImageFromScratchCommand ( new org.ovirt.engine.core.common.action.AddImageFromScratchParameters ( ) ) , new org.ovirt.engine.core.bll.CreateImageTemplateCommand ( new org.ovirt.engine.core.common.action.CreateImageTemplateParameters ( ) ) } ; }
protected void initPriority ( int priority ) { priorityUtil.initPriority ( priority , new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil.PriorityUpdatingCallbacks ( ) { @ java.lang.Override public void beforeUpdates ( ) { if ( ( getInstanceTypeManager ( ) ) != null ) { getInstanceTypeManager ( ) . deactivate ( ) ; } } @ java.lang.Override public void afterUpdates ( ) { if ( ( getInstanceTypeManager ( ) ) != null ) { getInstanceTypeManager ( ) . activate ( ) ; } } } ) ; }
private org.ovirt.engine.core.compat.Guid getQuotaIdForDisk ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { if ( ( ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getDiskInfoDestinationMap ( ) ) != null ) && ( ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getDiskInfoDestinationMap ( ) . get ( diskImage.getId ( ) ) ) != null ) ) { return org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getDiskInfoDestinationMap ( ) . get ( diskImage.getId ( ) ) . getQuotaId ( ) ; } return diskImage.getQuotaId ( ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Group model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( model.getDomain ( ) ) ; verifyLinks ( model ) ; }
protected void verifyModelOnNewCluster ( org.ovirt.engine.api.model.Vm model , int index ) { org.junit.Assert.assertNotNull ( model.getCluster ( ) . getId ( ) ) ; org.junit.Assert.assertEquals ( GUIDS [ 1 ] . toString ( ) , model.getCluster ( ) . getId ( ) ) ; verifyModel ( model , index ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain ) { return getCustomMapSqlParameterSource ( ) . addValue ( "id" , domain.getId ( ) ) . addValue ( "storage" , domain.getstorage ( ) ) . addValue ( "storage_name" , domain.getstorage_name ( ) ) . addValue ( "storage_type" , domain.getstorage_type ( ) ) . addValue ( "storage_domain_type" , domain.getstorage_domain_type ( ) ) . addValue ( "storage_domain_format_type" , domain.getStorageFormat ( ) ) . addValue ( "last_time_used_as_master" , domain.getLastTimeUsedAsMaster ( ) ) ; }
public void dataCenterVersionMatches ( ) { org.mockito.Mockito.when ( cluster.getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.StoragePool.class ) ; org.mockito.Mockito.when ( dataCenterDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( dataCenter ) ; org.hamcrest.MatcherAssert.assertThat ( validator.dataCenterVersionMismatch ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testFindSingleNotAppropriateDcNetwork ( ) { org.mockito.Mockito.when ( mockNetworkDao.getAllForDataCenter ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ) . thenReturn ( java.util.Collections.singletonList ( mockNetwork ) ) ; org.mockito.Mockito.when ( mockManagementNetworkCandidatePredicate.test ( mockNetwork ) ) . thenReturn ( false ) ; final org.ovirt.engine.core.common.businessentities.network.Network actual = underTest.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ; org.junit.Assert.assertNull ( actual ) ; }
public void appendCustomValueAppend ( ) { final java.lang.String key = "foo" ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String newVal = "bar" ; final java.lang.String sep = "_" ; b.addCustomValue ( key , value ) ; b.appendCustomValue ( key , newVal , sep ) ; final java.lang.String s = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( ( ( value + sep ) + newVal ) , s ) ; }
protected void endWithFailure ( ) { SetIsVmRunningStateless ( ) ; rollbackQuota ( ) ; if ( _isVmRunningStateless ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend ( ) . endAction ( VdcActionType.CreateAllSnapshotsFromVm , org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) . get ( 0 ) , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.RunVmCommand.getCompensationContext ( ) ) ) ; setSucceeded ( vdcReturnValue.getSucceeded ( ) ) ; } else { super . endWithFailure ( ) ; } }
private org.ovirt.engine.core.common.businessentities.network.Network createNetworkWithIdAndName ( java.lang.String networkName ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetworkWithId ( ) ; network.setName ( networkName ) ; return network ; }
public boolean disconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.Provider provider = getProviderDao ( ) . get ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( storageDomain.getStorage ( ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = getLibvirtSecretDao ( ) . getAllByProviderId ( provider.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS vds = getVdsDao ( ) . get ( vdsId ) ; return org.ovirt.engine.core.bll.storage.CINDERStorageHelper.unregisterLibvirtSecrets ( storageDomain , vds , libvirtSecrets ) ; }
public void validateSpaceAndThreshold ( ) { mockGetAllSnapshots ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.validateSpaceRequirements ( ) ) ; org.mockito.Mockito.verify ( storageDomainValidator , org.mockito.Mockito.times ( org.ovirt.engine.core.bll.TOTAL_NUM_DOMAINS ) ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( storageDomainValidator , org.mockito.Mockito.never ( ) ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public org.ovirt.engine.api.model.InstanceType update ( org.ovirt.engine.api.model.InstanceType incoming ) { org.ovirt.engine.api.model.InstanceType instanceType = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class ) , ActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource.UpdateParametersProvider ( ) ) ; if ( instanceType != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , instanceType ) ; } return instanceType ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { refreshEntityTable ( ) ; }
public void testEvents ( ) { testValidSql ( "Events: " , "SELECT * FROM ((SELECT audit_log.* FROM audit_log WHERE not deleted) ORDER BY audit_log_id DESC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap ( ) ; changeDomainStatusWithCompensation ( map , StorageDomainStatus.Unknown , StorageDomainStatus.Locked , org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext ( ) ) ; if ( shouldPerformOvfUpdate ( ) ) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction ( ActionType.UpdateOvfStoreForStorageDomain , createUpdateOvfStoreParams ( ) , org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.cloneContext ( ) . withoutCompensationContext ( ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { propagateFailure ( returnValue ) ; return ; } } if ( org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations ( ) ) { executeDeactivateCommand ( ) ; } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded ( true ) ; }
public void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
private java.lang.String getOptions ( org.ovirt.engine.core.common.businessentities.FenceAgent agent ) { org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType = org.ovirt.engine.core.bll.VdsArchitectureHelper.getArchitecture ( _vds.getStaticData ( ) ) ; java.lang.String managementOptions = org.ovirt.engine.core.utils.pm.VdsFenceOptions.getDefaultAgentOptions ( agent.getType ( ) , agent.getOptions ( ) , architectureType ) ; return managementOptions ; }
public void removeAllIllegalDisks ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.compat.Guid vmId ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : getDiskImageDao ( ) . getAllSnapshotsForVmSnapshot ( snapshotId ) ) { if ( ( diskImage.getImageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ) ) { org.ovirt.engine.core.bll.ImagesHandler.removeDiskImage ( diskImage , vmId ) ; } } }
private void validateAndAssertNetworkModified ( org.ovirt.engine.core.bll.SetupNetworksHelper helper , org.ovirt.engine.core.common.businessentities.network net ) { validateAndExpectNoViolations ( helper ) ; assertNoBondsModified ( helper ) ; assertNetworkModified ( helper , net ) ; assertNoNetworksRemoved ( helper ) ; assertNoBondsRemoved ( helper ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionStart ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.String userName , java.lang.Boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionStart" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , remoteHost ) . withParameter ( "remoteVolumeName" , remoteVolumeName ) . withOptionalParameter ( "remoteUserName" , userName ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateBootSequenceItems ( ) ; bootSequenceBox.setSelectedIndex ( bootSequenceModel.getSelectedItemIndex ( ) ) ; }
protected boolean validateQuota ( org.ovirt.engine.core.compat.Guid quotaId ) { org.ovirt.engine.core.bll.validator.QuotaValidator validator = createQuotaValidator ( quotaId ) ; return ( validate ( validator.isValid ( ) ) ) && ( validate ( validator.isDefinedForStoragePool ( getStoragePoolId ( ) ) ) ) ; }
private void removeDiskImages ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks ( getVm ( ) . getDiskMap ( ) . values ( ) , true , false , true ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images ) { image.setStorageIds ( new java.util.ArrayList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ) ; image.setStoragePoolId ( org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters ( ) . getStoragePoolId ( ) ) ; } removeVmImages ( images ) ; }
private org.ovirt.engine.api.model.Clusters mapVirtOnlyCollection ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > entities ) { org.ovirt.engine.api.model.Clusters collection = new org.ovirt.engine.api.model.Clusters ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup entity : entities ) { collection.getClusters ( ) . add ( addLinks ( populate ( map ( entity ) , entity ) , org.ovirt.engine.api.restapi.resource.BackendClustersResource.VIRT_ONLY_MODE_COLLECTIONS_TO_HIDE ) ) ; } return collection ; }
public void testGetAllVMSearch ( ) throws java.lang.Exception { org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchPattern ( ) ) . thenReturn ( ( "VM" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchTypeValue ( ) ) . thenReturn ( SearchType.VM ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( vmResultList , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusDetailForXmlRpc glusterVolumeGeoRepSessionStatus ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { try { java.util.Map < java.lang.String , java.lang.Object > response = vdsServer.glusterVolumeGeoRepSessionStatus ( volumeName , slaveHost , slaveVolumeName , userName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusDetailForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testUpdateNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , null ) ; try { resource.update ( getUpdate ( ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( returnValue ) ) ; model.getPath ( ) . setEntity ( connection.getconnection ( ) ) ; model.getVfsType ( ) . setEntity ( connection.getVfsType ( ) ) ; model.getMountOptions ( ) . setEntity ( connection.getMountOptions ( ) ) ; }
public void testDetermineMessageReturnsClassNameForNoParameterExpansion ( ) throws java.lang.Exception { org.slf4j.Logger log = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.junit.Assert.assertEquals ( "LoggedUtils.determineMessage shouldn't return parameter expansion for a disabled log level." , java.lang.Object.class . getName ( ) , org.ovirt.engine.core.utils.log.LoggedUtils.determineMessage ( log , org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedOverridingSubclassNoParameters.class . getAnnotation ( org.ovirt.engine.core.utils.log.Logged.class ) , new java.lang.Object ( ) ) ) ; org.junit.Assert.assertEquals ( "LoggedUtils.determineMessage shouldn't return parameter expansion when diabled completely." , java.lang.Object.class . getName ( ) , org.ovirt.engine.core.utils.log.LoggedUtils.determineMessage ( log , org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedClass.class . getAnnotation ( org.ovirt.engine.core.utils.log.Logged.class ) , new java.lang.Object ( ) ) ) ; }
private void handleResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result ) { switch ( result.getStatus ( ) ) { case SKIPPED_DUE_TO_POLICY : org.ovirt.engine.core.bll.FenceVdsBaseCommand.setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.FenceVdsBaseCommand.setSucceeded ( false ) ; break ; case SUCCESS : handleSpecificCommandActions ( ) ; org.ovirt.engine.core.bll.FenceVdsBaseCommand.setSucceeded ( true ) ; break ; default : org.ovirt.engine.core.bll.FenceVdsBaseCommand.setSucceeded ( false ) ; } setActionReturnValue ( result ) ; }
public java.lang.Void runInTransaction ( ) { buildChildCommandInfos ( ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > > entry : childCommandInfoMap.entrySet ( ) ) { org.ovirt.engine.core.bll.CommandBase < ? > command = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler ( log ) . createAction ( entry.getValue ( ) . getFirst ( ) , entry.getValue ( ) . getSecond ( ) ) ; command.insertAsyncTaskPlaceHolders ( ) ; childCommandsMap.put ( entry.getKey ( ) , command ) ; } return null ; }
private void initPanel ( ) { initGeneralForm ( ) ; initDisksTable ( ) ; initNicsTable ( ) ; initAppsTable ( ) ; add ( new com.google.gwt.user.client.ui.ScrollPanel ( generalForm ) , org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.generalLabel ( ) ) ; add ( new com.google.gwt.user.client.ui.ScrollPanel ( disksTable ) , org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.disksLabel ( ) ) ; add ( new com.google.gwt.user.client.ui.ScrollPanel ( nicsTable ) , org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nicsLabel ( ) ) ; add ( new com.google.gwt.user.client.ui.ScrollPanel ( appsTable ) , org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.applicationsLabel ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getServer ( org.ovirt.engine.core.compat.Guid id , java.lang.String name , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.ovirt.engine.core.common.businessentities.VDS server = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; server.setId ( id ) ; server.setVdsName ( name ) ; server.setStatus ( status ) ; server.setClusterId ( clusterId ) ; return server ; }
protected void performLogin ( T loginModel ) { org.ovirt.engine.core.common.users.VdcUser loggedUser = loginModel.getLoggedUser ( ) ; java.lang.String loginPassword = ( ( java.lang.String ) ( loginModel.getPassword ( ) . getEntity ( ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.initLoggedInUser ( loggedUser , loginPassword ) ; beforeUiCommonInitEvent ( loginModel ) ; org.ovirt.engine.ui.common.uicommon.model.UiCommonInitEvent.fire ( eventBus ) ; user.onUserLogin ( loggedUser ) ; loginModel.getPassword ( ) . setEntity ( null ) ; }
public org.ovirt.engine.core.bll.ValidationResult dataCenterVersionMismatch ( ) { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter ( ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.CLUSTER_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL ) . when ( ( ( dataCenter != null ) && ( cluster.supportsVirtService ( ) ? ( dataCenter.getCompatibilityVersion ( ) . compareTo ( cluster.getCompatibilityVersion ( ) ) ) > 0 : false ) ) ) ; }
public void testUpdateWithExistingNetwork ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setGetVmQueryExpectations ( 2 ) ; setGetNetworksQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "Interface.Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , GUIDS [ 1 ] } , true , true ) ) ; org.ovirt.engine.api.model.NIC nic = resource.update ( getNic ( true ) ) ; assertNotNull ( nic ) ; }
private static org.ovirt.engine.api.model.Sessions mapGuestSessions ( org.ovirt.engine.api.model.VM vm , org.ovirt.engine.api.model.Sessions sessions ) { java.lang.String guestUserName = vm.getGuestCurentUserName ( ) ; if ( ( guestUserName != null ) && ( ! ( guestUserName.isEmpty ( ) ) ) ) { org.ovirt.engine.api.model.Session guestSession = new org.ovirt.engine.api.model.Session ( ) ; org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User ( ) ; user.setUserName ( guestUserName ) ; guestSession.setUser ( user ) ; sessions.getSessions ( ) . add ( guestSession ) ; } return sessions ; }
public static java.lang.Object getConfigValue ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version , org.ovirt.engine.ui.frontend.IAsyncConverter converter ) { if ( converter == null ) { return null ; } org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > ( configValue , version ) ; return converter.Convert ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get ( key ) , null ) ; }
public void handleTasksOfCommandWithEmptyVdsmId ( final java.util.List < org.ovirt.engine.core.common.businessentities.AsyncTasks > tasks ) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute ( new java.lang.Runnable ( ) { @ java.lang.SuppressWarnings ( value = "synthetic-access" ) @ java.lang.Override public void run ( ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object runInTransaction ( ) { boolean isPartiallySubmittedCommand = isPartiallySubmittedCommand ( tasks ) ; for ( org.ovirt.engine.core.common.businessentities.AsyncTasks task : tasks ) { handleTaskOfCommandWithEmptyVdsmId ( isPartiallySubmittedCommand , task ) ; } return null ; } } ) ; } } ) ; }
public static boolean isMemorySnapshotSupported ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( vm == null ) { return false ; } boolean archMemorySnapshotSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isMemorySnapshotSupportedByArchitecture ( vm.getClusterArch ( ) , vm.getVdsGroupCompatibilityVersion ( ) ) ; return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.MemorySnapshotSupported , vm.getVdsGroupCompatibilityVersion ( ) . toString ( ) ) ) ) && archMemorySnapshotSupported ; }
private static java.lang.String getRelativePath ( java.lang.Class < ? > clz , java.lang.Class < ? > parent ) { for ( java.lang.reflect.Method method : parent.getMethods ( ) ) { if ( ( method.getName ( ) . startsWith ( "get" ) ) && ( ( method.getReturnType ( ) ) == clz ) ) { javax.ws.rs.Path pathAnnotation = method.getAnnotation ( javax.ws.rs.Path.class ) ; return pathAnnotation.value ( ) ; } } return null ; }
public void getStorageDomainByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String storageDomainName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( storageDomainName ) , aQuery ) ; }
protected boolean validateNoDuplicateVm ( ) { org.ovirt.engine.core.common.businessentities.VmStatic duplicateVm = org.ovirt.engine.core.bll.ImportVmCommandBase.getVmStaticDao ( ) . get ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVm ( ) . getId ( ) ) ; return duplicateVm == null ? true : failCanDoAction ( VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS , java.lang.String.format ( "$VmName %1$s" , duplicateVm.getName ( ) ) ) ; }
public static void cancelTimer ( java.lang.String timerName ) { for ( java.lang.String name : org.ovirt.engine.ui.common.uicommon.TimerFactory.timerList.keySet ( ) ) { if ( name.equals ( timerName ) ) { org.ovirt.engine.ui.common.uicommon.TimerFactory.logger.fine ( ( ( "Cancelling the timer '" + name ) + "'" ) ) ; org.ovirt.engine.ui.common.uicommon.TimerFactory.timerList.get ( name ) . cancel ( ) ; } } }
void addStyles ( ) { activateDomainEditor.addContentWidgetContainerStyleName ( style.activateDomainEditor ( ) ) ; advancedParametersExpanderContent.setStyleName ( style.advancedParametersExpanderContent ( ) ) ; warningLowSpaceIndicatorEditor.addContentWidgetContainerStyleName ( style.warningTextBoxEditor ( ) ) ; criticalSpaceActionBlockerEditor.addContentWidgetStyleName ( style.blockerTextBoxEditor ( ) ) ; formatListEditor.addContentWidgetStyleName ( style.formatListEditor ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VnicProfile findVnicProfileForUser ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user , org.ovirt.engine.core.common.businessentities.network.Network network ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > networkProfiles = getVnicProfileDao ( ) . getAllForNetwork ( network.getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VnicProfile profile : networkProfiles ) { if ( ( ( user == null ) && ( ! ( profile.isPortMirroring ( ) ) ) ) || ( ( user != null ) && ( getBackwardCompatibilityVnicHelper ( ) . isVnicProfilePermitted ( user , profile , false ) ) ) ) { return profile ; } } return null ; }
public void getDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 5 ) ; }
protected boolean validate ( ) { if ( ( ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.getParameters ( ) . getClusterId ( ) ) == null ) || ( ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.getVdsGroup ( ) ) == null ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID ) ; return false ; } if ( ! ( super . validate ( ) ) ) { return false ; } return true ; }
public void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.VDS > aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) . withoutRefresh ( ) , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { final java.util.Map < java.lang.Integer , org.ovirt.engine.core.common.queries.VmIconIdSizePair > returnMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; if ( ( returnMap.get ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DEFAULT_OS_ID ) ) == null ) { throw new java.lang.RuntimeException ( "Engine did not provide icon IDs of default OS." ) ; } osIdToDefaultIconIdMap = java.util.Collections.unmodifiableMap ( returnMap ) ; initializeLargeToSmallIconMap ( ) ; }
public void testGetAllInstanceTypesWithPermissionsForPriviligedUser ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate existingInstanceType = dao.get ( FixturesTool.INSTANCE_TYPE ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > result = dao.getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true , VmEntityType.INSTANCE_TYPE ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.VmTemplateDaoTest.NUMBER_OF_INSTANCE_TYPES_FOR_PRIVELEGED_USER , result.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( result.iterator ( ) . next ( ) , existingInstanceType ) ; }
private void addNameSpaceColumn ( ) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.Permission > namespaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.Permission > ( ) { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Permission object ) { return object.getNamespace ( ) ; } } ; namespaceColumn.makeSortable ( ) ; org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getTable ( ) . addColumn ( namespaceColumn , org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.constants.namespace ( ) , "150px" ) ; }
protected void updateUserCdImage ( org.ovirt.engine.core.compat.Guid storagePoolId ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getIrsImageList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.util.List < java.lang.String > > ( ) { @ java.lang.Override public void onSuccess ( java.util.List < java.lang.String > images ) { setImagesToModel ( getModel ( ) , images ) ; } } ) , storagePoolId ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel object ) { org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.StorageForceCreatePopupView.Driver.driver.edit ( object ) ; object.getLatch ( ) . setIsAvailable ( true ) ; object.getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateDescription ( object ) ; } } ) ; }
public void testDisksUsagesWithNullEntry ( ) { java.lang.Object [ ] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.initDisksUsageData ( ) ; disksUsages [ 1 ] = null ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksUsage ( disksUsages ) ; validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVmStatistics ( ) , disksUsages , xml ) ; }
private void decreasePendingVms ( ) { org.ovirt.engine.core.compat.Guid vdsId = getCurrentVdsId ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RunVmCommandBase.getVm ( ) ; if ( ( vdsId == null ) || ( vdsId.equals ( lastDecreasedVds ) ) ) { org.ovirt.engine.core.bll.RunVmCommandBase.log.debugFormat ( "PendingVms for the guest {0} running on host {1} was already released, not releasing again" , vm.getName ( ) , vdsId ) ; return ; } lastDecreasedVds = vdsId ; org.ovirt.engine.core.bll.VmHandler.decreasePendingVms ( vm , vdsId ) ; getBlockingQueue ( vdsId ) . offer ( java.lang.Boolean.TRUE ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage_pool > getDataCentersByClusterService ( boolean supportsVirtService , boolean supportsGlusterService ) { final org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) ; parameterSource.addValue ( "supports_virt_service" , supportsVirtService ) . addValue ( "supports_gluster_service" , supportsGlusterService ) ; return getCallsHandler ( ) . executeReadList ( "GetStoragePoolsByClusterService" , org.ovirt.engine.core.dao.StoragePoolDAODbFacadeImpl.mapper , parameterSource ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > allStorageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > isoStorageDomains = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : allStorageDomains ) { if ( ( storageDomain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) { isoStorageDomains.add ( storageDomain ) ; } } return isoStorageDomains ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; }
public void testValidRemovedBondsWhenNotRemovingAnyBond ( ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . addExistingInterfaces ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( null ) ) ) . build ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.validRemovedBonds ( java.util.Collections.emptyList ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void undo ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getPreview ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RestoreAllSnapshots , new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters ( vm.getId ( ) , snapshot.getId ( ) ) , null , null ) ; } }
private static java.lang.String decrypt ( java.lang.String source , java.security.Key key ) throws java.io.UnsupportedEncodingException , java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException , javax.crypto.NoSuchPaddingException { java.lang.String result = "" ; byte [ ] cipherbytes = org.apache.commons.codec.binary.Base64.decodeBase64 ( source ) ; javax.crypto.Cipher rsa = javax.crypto.Cipher.getInstance ( org.ovirt.engine.core.engineencryptutils.EncryptionUtils.algo ) ; rsa.init ( javax.crypto.Cipher.DECRYPT_MODE , key ) ; byte [ ] plainbytes = rsa.doFinal ( cipherbytes ) ; result = new java.lang.String ( plainbytes , "UTF-8" ) ; return result ; }
public void refuseSoundDeviceOnPPC ( ) { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = setupCanAddPpcTest ( ) ; cmd.getParameters ( ) . setSoundDeviceEnabled ( true ) ; org.mockito.Mockito.when ( osRepository.isSoundDeviceEnabled ( cmd.getParameters ( ) . getVm ( ) . getVmOsId ( ) , cmd.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ) . thenReturn ( false ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.SOUND_DEVICE_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; }
private void updateDirectLunDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isInternal = ( ( java.lang.Boolean ) ( getIsInternal ( ) . getEntity ( ) ) ) ; if ( isInternal ) { return ; } boolean isDirectLUNDiskkEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.DirectLUNDiskEnabled , datacenter.getcompatibility_version ( ) . getValue ( ) ) ) ) ; getIsDirectLunDiskAvaialable ( ) . setEntity ( isDirectLUNDiskkEnabled ) ; setMessage ( ( ! isDirectLUNDiskkEnabled ? org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.directLUNDiskNotSupported ( ) : "" ) ) ; }
public void testGetByQos ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > allForQos = dao.getAllForQos ( FixturesTool.QOS_ID_4 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( allForQos ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , allForQos.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile : allForQos ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.QOS_ID_4 , cpuProfile.getQosId ( ) ) ; } }
public void isSupportBridgesReportByVDSM ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SupportBridgesReportByVDSM ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
protected boolean canDoAction ( ) { java.lang.String directoryName = org.ovirt.engine.core.bll.AddGroupCommand.getParameters ( ) . getDirectory ( ) ; org.ovirt.engine.core.common.utils.ExternalId id = org.ovirt.engine.core.bll.AddGroupCommand.getParameters ( ) . getId ( ) ; org.ovirt.engine.core.authentication.Directory directory = org.ovirt.engine.core.authentication.DirectoryManager.getInstance ( ) . getDirectory ( directoryName ) ; directoryGroup = directory.findGroup ( id ) ; if ( ( directoryGroup ) == null ) { addCanDoActionMessage ( VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY ) ; return false ; } addCustomValue ( "NewUserName" , directoryGroup.getName ( ) ) ; return true ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getVdsSpmIdMapDao ( ) ) ; vdsDao = prepareDAO ( dbFacade.getVdsDao ( ) ) ; existingVds = vdsDao.get ( org.ovirt.engine.core.dao.VdsSpmIdMapDAOTest.EXISTING_VDS_ID ) ; existingVdsSpmIdMap = dao.get ( existingVds.getId ( ) ) ; newVdsSpmIdMap = new org.ovirt.engine.core.common.businessentities.vds_spm_id_map ( org.ovirt.engine.core.dao.VdsSpmIdMapDAOTest.FREE_STORAGE_POOL_ID , org.ovirt.engine.core.dao.VdsSpmIdMapDAOTest.FREE_VDS_ID , 1 ) ; }
public static void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
public org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworksResource getParent ( ) { return parent ; }
public void testSave ( ) { staticDao.save ( newStaticVds ) ; newStatistics.setId ( newStaticVds.getId ( ) ) ; dao.save ( newStatistics ) ; org.ovirt.engine.core.common.businessentities.VdsStatic staticResult = staticDao.get ( newStaticVds.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsResult = dao.get ( newStatistics.getId ( ) ) ; org.junit.Assert.assertNotNull ( staticResult ) ; org.junit.Assert.assertEquals ( newStaticVds , staticResult ) ; org.junit.Assert.assertNotNull ( statisticsResult ) ; org.junit.Assert.assertEquals ( newStatistics , statisticsResult ) ; }
public void testGetLunsToUpdateInDbDiffLunIdDiffPvId ( ) { org.ovirt.engine.core.compat.Guid lunFromVgLunId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; java.util.Map < org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler , java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > > lunsToUpdateInDb = getLunsToUpdateInDb ( lunFromVgLunId , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > newLunsToSaveInDb = lunsToUpdateInDb.get ( command.saveLunsHandler ) ; org.junit.Assert.assertEquals ( java.util.stream.Stream.of ( command.saveLunsHandler , command.removeLunsHandler ) . collect ( java.util.stream.Collectors.toSet ( ) ) , lunsToUpdateInDb.keySet ( ) ) ; assertLunIdInList ( newLunsToSaveInDb , lunFromVgLunId ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.VmTemplate value ) { cluster = null ; super . setEntity ( value ) ; if ( ( getEntity ( ) ) != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getClusterById ( new org.ovirt.engine.ui.uicommonweb.models.templates.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.businessentities.Cluster > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.Cluster returnValue ) { cluster = returnValue ; updateActionAvailability ( ) ; } } ) , getEntity ( ) . getClusterId ( ) ) ; } }
public static void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
private void initVmDiskImage ( boolean isShareable ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setVmEntityType ( VmEntityType.VM ) ; diskImage.setShareable ( isShareable ) ; org.mockito.Mockito.when ( diskImageDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( diskImage ) ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData createVmInternalData ( java.util.Map < java.lang.String , java.lang.Object > xmlRpcStruct ) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData ( vmDynamic , xmlRpcStruct ) ; adjustDisplayIp ( vmDynamic.getGraphicsInfos ( ) ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData ( vmDynamic , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMStatisticsData ( xmlRpcStruct ) , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmGuestAgentInterfacesData ( vmDynamic.getId ( ) , xmlRpcStruct ) , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmLunDisksData ( xmlRpcStruct ) , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getVdsmCallTimestamp ( xmlRpcStruct ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; setTitle ( ( disk.isBoot ( ) ? constants.bootableDisk ( ) : null ) ) ; return disk.isBoot ( ) ? resources.bootableDiskIcon ( ) : null ; }
public void addDialogModelListener ( final M source ) { source.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( windowPropertyNames.contains ( propName ) ) { handleWindowModelChange ( source , windowPopup , false , propName ) ; } else if ( confirmWindowPropertyNames.contains ( propName ) ) { handleWindowModelChange ( source , confirmWindowPopup , true , propName ) ; } } } ) ; }
public void onFailure ( java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend.ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute RunAction: " + caught ) , caught ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; if ( callback != null ) { callback.Executed ( new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult ( actionType , parameters , null , state ) ) ; } }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForRoleNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration ( ) ; boolean failWhen = ( isRoleNetwork ( ) ) && ( ( ( ipConfiguration == null ) || ( ! ( ipConfiguration.hasPrimaryAddressSet ( ) ) ) ) || ( ( ipConfiguration.getPrimaryAddress ( ) . getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE ) ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , getNetwork ( ) . getName ( ) ) ) . when ( failWhen ) ; }
public void onLogout ( ) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; query.setHandleFailure ( true ) ; query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { Window.Location.reload ( ) ; } } ; frontend.logoffAsync ( query ) ; }
private void handleDirectorySearcherException ( java.lang.Exception ex ) { if ( ex instanceof org.ovirt.engine.extensions.aaa.builtin.kerberosldap.AuthenticationResultException ) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.AuthenticationResultException authResultException = ( ( org.ovirt.engine.extensions.aaa.builtin.kerberosldap.AuthenticationResultException ) ( ex ) ) ; org.ovirt.engine.core.utils.kerberos.AuthenticationResult result = authResultException.getResult ( ) ; if ( result == null ) { result = org.ovirt.engine.core.utils.kerberos.AuthenticationResult.OTHER ; } org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapAuthenticateUserCommand.log.error ( result.getDetailedMessage ( ) ) ; getParameters ( ) . getOutputMap ( ) . put ( Authn.InvokeKeys.RESULT , resultsMap.get ( result ) ) ; } }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getBroker ( ) . glusterVolumeSet ( org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getParameters ( ) . getVolumeOption ( ) . getKey ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getParameters ( ) . getVolumeOption ( ) . getValue ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.proceedProxyReturnValue ( ) ; }
public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setBonds ( java.util.Collections.singletonList ( bond ) ) ; doTestValidateModifiedBondSlaves ( params , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.Network > emptyList ( ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ; org.ovirt.engine.core.bll.ValidationResult slavesValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , "slaveA" ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.VAR_NETWORK_NAME , "networkName" ) ) ; org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , slavesValidationResult , slavesValidationResult ) ; }
public void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpEntityQueryExpectations ( 1 , t ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales.clear ( ) ; } }
private void nullifyInternalProxies ( ) { if ( ( privatemIrsProxy ) != null ) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.shutDownConnection ( ( ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsServerWrapper ) ( privatemIrsProxy ) ) . getHttpClient ( ) ) ; } privatemCurrentIrsHost = null ; privatemIrsProxy = null ; mCurrentVdsId = null ; }
public void testDoGetHttpServletRequestHttpServletResponseWithDispatcher ( ) throws java.io.IOException , javax.servlet.ServletException { org.mockito.Mockito.when ( mockRequest.getAttribute ( LocaleFilter.LOCALE ) ) . thenReturn ( java.util.Locale.JAPANESE ) ; org.mockito.Mockito.when ( mockRequest.getRequestDispatcher ( "/WEB-INF/ovirt-engine.jsp" ) ) . thenReturn ( mockDispatcher ) ; org.mockito.Mockito.when ( mockRequest.getRequestURL ( ) ) . thenReturn ( new java.lang.StringBuffer ( "http://localhost:8080/ovirt-engine/" ) ) ; org.mockito.Mockito.when ( mockRequest.getServletContext ( ) ) . thenReturn ( mockContext ) ; org.mockito.Mockito.when ( mockRequest.getSession ( true ) ) . thenReturn ( mockSession ) ; org.mockito.Mockito.when ( mockSession.getAttribute ( "authCode" ) ) . thenReturn ( "aU1KZG1OUytQSktnd29SQ3NIOVhWckls" ) ; org.mockito.Mockito.when ( mockSession.getAttribute ( "token" ) ) . thenReturn ( "aU1KZG1OUytQSktnd29SQ3NIOVhWckls" ) ; org.mockito.Mockito.when ( mockSession.getAttribute ( "error" ) ) . thenReturn ( "" ) ; org.mockito.Mockito.when ( mockSession.getAttribute ( "error_description" ) ) . thenReturn ( "" ) ; org.mockito.Mockito.when ( mockRequest.getServletContext ( ) . getAttribute ( "sso_logout_url" ) ) . thenReturn ( new java.lang.StringBuffer ( "http://localhost:8080/ovirt-engine/logout" ) ) ; org.mockito.Mockito.when ( mockRequest.getServletContext ( ) . getAttribute ( "sso_switch_user_url" ) ) . thenReturn ( new java.lang.StringBuffer ( "http://localhost:8080/ovirt-engine/login" ) ) ; testServlet.doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito.verify ( mockRequest ) . setAttribute ( "localeKeys" , localeKeys ) ; org.mockito.Mockito.verify ( mockResponse ) . setContentType ( "text/html;charset=UTF-8" ) ; org.mockito.Mockito.verify ( mockDispatcher ) . include ( mockRequest , mockResponse ) ; }
public static void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage mockSourceImage ( ) { org.ovirt.engine.core.common.businessentities.DiskImage image = createDiskImage ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; org.mockito.Mockito.doReturn ( java.util.Collections.singletonList ( image ) ) . when ( cmd ) . getSourceImages ( ) ; org.mockito.Mockito.when ( diskImageDAO.get ( image.getImageId ( ) ) ) . thenReturn ( image ) ; return image ; }
private java.util.LinkedList < org.ovirt.engine.core.compat.Guid > convertToGuidList ( java.lang.String str , char delimiter ) { java.util.LinkedList < org.ovirt.engine.core.compat.Guid > results = new java.util.LinkedList < > ( ) ; if ( str != null ) { for ( java.lang.String id : str.split ( java.lang.String.format ( " *%s *" , delimiter ) ) ) { results.add ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( id ) ) ; } } return results ; }
public void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
protected org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters createSetupNetworksParameters ( org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; host.setId ( hostId ) ; org.ovirt.engine.core.bll.network.NetworkConfigurator configurator = new org.ovirt.engine.core.bll.network.NetworkConfigurator ( host ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = configurator.filterBondsWithoutSlaves ( getHostInterfaces ( hostId ) ) ; org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters ( ) ; parameters.setVdsId ( host.getId ( ) ) ; parameters.setInterfaces ( nics ) ; parameters.setCheckConnectivity ( true ) ; parameters.setShouldBeLogged ( false ) ; return parameters ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc remove_image_ticket ( java.lang.String ticketId ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.remove_image_ticket" ) . withParameter ( "uuid" , ticketId ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
protected void endVmCommand ( ) { org.ovirt.engine.core.bll.StopVmCommandBase.setCommandShouldBeLogged ( false ) ; if ( ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) ) != null ) { org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . setStatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.StopVmCommandBase.getSnapshotDAO ( ) . removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.StopVmCommandBase.getVmId ( ) ) ; org.ovirt.engine.core.bll.StopVmCommandBase.getVmDynamicDao ( ) . update ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getDynamicData ( ) ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase.log.warn ( "StopVmCommandBase::EndVmCommand: Vm is null - not performing full endAction" ) ; } org.ovirt.engine.core.bll.StopVmCommandBase.setSucceeded ( true ) ; }
protected void executeVmCommand ( ) { try { vmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.exportimport.ExtractOvaCommand.getVm ( ) ) ; java.util.List < java.lang.String > diskPaths = prepareImages ( ) ; boolean succeeded = runAnsibleImportOvaPlaybook ( diskPaths ) ; teardownImages ( ) ; if ( ! succeeded ) { log.error ( "Failed to extract OVA file" ) ; removeVm ( ) ; } org.ovirt.engine.core.bll.exportimport.ExtractOvaCommand.setSucceeded ( succeeded ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { log.error ( "Failed to extract OVA file" ) ; removeVm ( ) ; throw e ; } }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.UpdateGlusterHookVDSCommand.getBroker ( ) . glusterHookUpdate ( org.ovirt.engine.core.vdsbroker.gluster.UpdateGlusterHookVDSCommand.getParameters ( ) . getGlusterCommand ( ) , org.ovirt.engine.core.vdsbroker.gluster.UpdateGlusterHookVDSCommand.getParameters ( ) . getHookStage ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.gluster.UpdateGlusterHookVDSCommand.getParameters ( ) . getHookName ( ) , org.ovirt.engine.core.vdsbroker.gluster.UpdateGlusterHookVDSCommand.getParameters ( ) . getHookContent ( ) , org.ovirt.engine.core.vdsbroker.gluster.UpdateGlusterHookVDSCommand.getParameters ( ) . getChecksum ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.UpdateGlusterHookVDSCommand.proceedProxyReturnValue ( ) ; }
public static void IsUSBEnabledByDefault ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.EnableUSBAsDefault , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
private void testIsManagementNetworkInAClusterCommon ( boolean expectedResult ) { org.mockito.Mockito.when ( mockNetworkCluster.isManagement ( ) ) . thenReturn ( expectedResult ) ; org.mockito.Mockito.when ( mockNetworkClusterDao.getAllForNetwork ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_ID ) ) . thenReturn ( java.util.Collections.singletonList ( mockNetworkCluster ) ) ; final boolean actual = underTest.isManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_ID ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedResult , actual ) ; org.mockito.Mockito.verify ( mockNetworkClusterDao ) . getAllForNetwork ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_ID ) ; }
public static java.lang.String toSingular ( java.lang.String plural ) { java.lang.String singular = org.ovirt.engine.sdk.codegen.utils.StringUtils.SINGULAR_EXCEPTIONS.get ( plural ) ; if ( singular == null ) { if ( ( ( plural.length ( ) ) >= 1 ) && ( plural.endsWith ( "s" ) ) ) { singular = plural.substring ( 0 , ( ( plural.length ( ) ) - 1 ) ) ; } else { singular = plural ; } } return singular ; }
public boolean discover ( ) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult discoveryResult = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance ( ) . runDiscover ( ) ; boolean dbUpdated = false ; if ( discoveryResult != null ) { updateDB ( discoveryResult ) ; org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.info ( "PolicyUnits updated" ) ; dbUpdated = true ; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector ( ) . log ( loggable , AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY ) ; markAllExternalPoliciesAsDisabled ( ) ; org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn ( "Discovery returned empty result, disabled external policy units" ) ; } return dbUpdated ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , boolean canDo , boolean success , java.lang.Object taskReturn , boolean replay ) { return setUpActionExpectations ( task , clz , names , values , canDo , success , taskReturn , null , replay , org.ovirt.engine.api.restapi.resource.AbstractBackendBaseTest.CANT_DO ) ; }
private void Alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String operation ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( org.ovirt.engine.core.bll.VdsCommand.getVds ( ) . getId ( ) ) ; java.lang.String op = ( operation == null ) ? org.ovirt.engine.core.bll.VdsCommand.getActionType ( ) . name ( ) : operation ; alert.addCustomValue ( "Operation" , op ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.alert ( alert , logType , auditLogDirector ) ; }
protected boolean canDoAction ( ) { if ( ( ( org.ovirt.engine.core.bll.VdsTagMapBase.getTagId ( ) ) != null ) && ( ! ( org.ovirt.engine.core.bll.VdsTagMapBase.getTagId ( ) . equals ( Guid.Empty ) ) ) ) { return true ; } else { addCanDoActionMessage ( EngineMessage.TAGS_SPECIFY_TAG_IS_NOT_EXISTS ) ; return false ; } }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.VmAffinityLabelListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( ( lastExecutedCommand == ( getModel ( ) . getNewCommand ( ) ) ) || ( lastExecutedCommand == ( getModel ( ) . getEditCommand ( ) ) ) ) { return popupProvider.get ( ) ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
public void validCustomDevPropSpec ( ) { java.lang.String customDevPropSpec = "{type=disk;prop={bootable=^(true|false)$}};" + ( ( ( ( ( ( ( ( "{type=interface;prop={speed=[0-9]{1,5};duplex=^(full|half)$;debug=([a-z0-9A-Z]*)$}};" + "{type=video;prop={turned_on=^(true|false)$}};" ) + "{type=sound;prop={volume=[0-9]{1,2}}};" ) + "{type=controller;prop={hotplug=^(true|false)$}};" ) + "{type=balloon;prop={max_size=[0-9]{1,15}}};" ) + "{type=channel;prop={auth_type=^(plain|md5|kerberos)$}};" ) + "{type=redir;prop={max_len=[0-9]{1,15}}};" ) + "{type=console;prop={type=^(text|vnc)$}};" ) + "{type=smartcard;prop={version=([1-9]{1}).([0-9]{1})}}" ) ; org.ovirt.engine.core.utils.customprop.DevicePropertiesUtils utils = org.ovirt.engine.core.utils.customprop.DevicePropertiesUtils.getInstance ( ) ; org.junit.Assert.assertTrue ( utils.isDevicePropertiesDefinitionValid ( customDevPropSpec ) ) ; }
private org.ovirt.engine.core.compat.Guid getHostId ( java.lang.String host ) { try { return org.ovirt.engine.core.compat.Guid.createGuidFromString ( host ) ; } catch ( java.lang.IllegalArgumentException exception ) { org.ovirt.engine.core.common.businessentities.VdsStatic entity = getEntity ( org.ovirt.engine.core.common.businessentities.VdsStatic.class , VdcQueryType.GetVdsStaticByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( host ) , host ) ; if ( entity != null ) { return entity.getId ( ) ; } return org.ovirt.engine.core.compat.Guid.Empty ; } }
public void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void attachDiskToTemplate ( org.ovirt.engine.core.compat.Guid templateId ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateDiskImage = org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters ( ) . getDiskImage ( ) ; org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( templateDiskImage.getId ( ) , templateId ) ; dve.setBoot ( true ) ; dve.setDiskInterface ( DiskInterface.VirtIO ) ; diskVmElementDao.save ( dve ) ; vmDeviceUtils.addDiskDevice ( templateId , templateDiskImage.getId ( ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getSecondaryDestinations ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > candidateHosts , java.util.Map < java.lang.String , java.lang.String > parameters ) { long notEnoughMemory = ( parameters.containsKey ( org.ovirt.engine.core.bll.scheduling.policyunits.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED ) ) ? java.lang.Long.valueOf ( parameters.get ( org.ovirt.engine.core.bll.scheduling.policyunits.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED ) ) : 0L ; long tooMuchMemory = ( parameters.containsKey ( org.ovirt.engine.core.bll.scheduling.policyunits.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED ) ) ? java.lang.Long.valueOf ( parameters.get ( org.ovirt.engine.core.bll.scheduling.policyunits.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED ) ) : java.lang.Long.MAX_VALUE ; return getNormallyUtilizedMemoryHosts ( candidateHosts , notEnoughMemory , tooMuchMemory ) ; }
protected javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.CpuProfile cpuProfile ) { validateParameters ( cpuProfile ) ; org.ovirt.engine.core.common.action.CpuProfileParameters parameters = new org.ovirt.engine.core.common.action.CpuProfileParameters ( ) ; org.ovirt.engine.api.model.CpuProfile map = map ( cpuProfile ) ; parameters.setProfile ( map ) ; parameters.setAddPermissions ( true ) ; return performCreate ( ActionType.AddCpuProfile , parameters , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.QueryType.GetCpuProfileById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
public void testValidRemovedBondsWhenNotRemovingAnyBond ( ) throws java.lang.Exception { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setRemovedBonds ( java.util.Collections.< org.ovirt.engine.core.compat.Guid > emptySet ( ) ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator ( params , null ) ; org.junit.Assert.assertThat ( validator.validRemovedBonds ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult addLabelToNicAndValidate ( java.lang.String label , java.util.List < java.lang.Class < ? > > commandValidationGroups ) { iface.getLabels ( ) . add ( label ) ; java.util.List < java.lang.String > validationResult = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs ( commandValidationGroups , iface ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.IMPROPER_INTERFACE_IS_LABELED ) . when ( ( ! ( validationResult.isEmpty ( ) ) ) ) ; }
public static com.google.gwt.i18n.client.DateTimeFormat getFormat ( int dateStyle ) { switch ( dateStyle ) { case java.text.DateFormat.FULL : return com.google.gwt.i18n.client.DateTimeFormat.getFormat ( PredefinedFormat.DATE_FULL ) ; case java.text.DateFormat.LONG : return com.google.gwt.i18n.client.DateTimeFormat.getFormat ( PredefinedFormat.DATE_LONG ) ; case java.text.DateFormat.SHORT : return com.google.gwt.i18n.client.DateTimeFormat.getFormat ( PredefinedFormat.DATE_SHORT ) ; default : return com.google.gwt.i18n.client.DateTimeFormat.getFormat ( PredefinedFormat.DATE_MEDIUM ) ; } }
public static void GetMaxVmsInPool ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1000 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVmsInPool , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
protected void selectedItemPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . selectedItemPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "status" ) ) { updateActionAvailability ( ) ; } else if ( e.PropertyName.equals ( "display_type" ) ) { updateConsoleModels ( ) ; } }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Watchdog model , org.ovirt.engine.core.common.businessentities.VmWatchdog entity ) { org.ovirt.engine.core.common.action.WatchdogParameters params = new org.ovirt.engine.core.common.action.WatchdogParameters ( ) ; params.setModel ( org.ovirt.engine.core.common.businessentities.VmWatchdogType.getByName ( model.getModel ( ) ) ) ; params.setAction ( org.ovirt.engine.core.common.businessentities.VmWatchdogAction.getByName ( model.getAction ( ) ) ) ; params.setId ( org.ovirt.engine.api.restapi.resource.BackendWatchdogResourceTest.VM_ID ) ; params.setVm ( true ) ; return params ; }
protected org.ovirt.engine.api.model.Vm deprecatedPopulate ( org.ovirt.engine.api.model.Vm model , org.ovirt.engine.api.restapi.resource.VM entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper.getDetails ( httpHeaders , uriInfo ) ; model = addInlineDetails ( details , model ) ; if ( details.contains ( "statistics" ) ) { addInlineStatistics ( model ) ; } return model ; }
public void setRefreshRate ( int interval ) { if ( ( getRefreshRate ( ) ) == interval ) { return ; } reset ( ) ; org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine ( ( ( ( "GridTimer[" + ( name ) ) + "]: Refresh Rate set to: " ) + interval ) ) ; normalInterval = interval ; start ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.BooleanReturnForXmlRpc glusterVolumeEmptyCheck ( java.lang.String volumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterVolumeEmptyCheck ( volumeName ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.BooleanReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.BooleanReturnForXmlRpc ( xmlRpcReturnValue , "volumeEmptyCheck" ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testGlobalSpiceProxy ( ) { org.ovirt.engine.api.model.VM entity = new org.ovirt.engine.api.model.VM ( ) ; mcr.mockConfigValue ( ConfigValues.SpiceProxyDefault , org.ovirt.engine.api.restapi.types.VmMapperTest.GLOBAL_SPICE_PROXY ) ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.types.VmMapper.map ( entity , ( ( org.ovirt.engine.api.model.VM ) ( null ) ) ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapperTest.GLOBAL_SPICE_PROXY , model.getDisplay ( ) . getProxy ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { currentUserRole.setCreateInstanceOnly ( loginModel.getCreateInstanceOnly ( ) . getEntity ( ) ) ; }
protected void addUsersToModel ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue , java.util.Set < java.lang.String > excludeUsers ) { for ( org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( returnValue.getReturnValue ( ) ) ) ) { org.ovirt.engine.core.aaa.DirectoryUser a = ( ( org.ovirt.engine.core.aaa.DirectoryUser ) ( item ) ) ; if ( ! ( excludeUsers.contains ( a.getId ( ) ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel tempVar2 = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; tempVar2.setEntity ( new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( a ) ) ; getusers ( ) . add ( tempVar2 ) ; } } }
public void getStorageDomainByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String storageDomainName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( storageDomainName ) , aQuery ) ; }
protected void initTableColumns ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { bricksTable.addEntityModelColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) { @ java.lang.Override public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { return entity.getServerName ( ) ; } } , constants.serverBricks ( ) ) ; bricksTable.addEntityModelColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) { @ java.lang.Override public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { return entity.getBrickDirectory ( ) ; } } , constants.brickDirectoryBricks ( ) ) ; }
public synchronized boolean hasTasksByStoragePoolId ( org.ovirt.engine.core.compat.Guid storagePoolID ) { boolean retVal = false ; if ( ( _tasks ) != null ) { for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values ( ) ) { if ( task.getStoragePoolID ( ) . equals ( storagePoolID ) ) { retVal = true ; break ; } } } return retVal ; }
public void initOsArchitecture ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { osArchitectures = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetOsArchitectures ) , callback ) ; }
public void testNicExistsWhenNicNameIsNotNull ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNicId ( null ) ; attachment.setNicName ( "whatever" ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( attachment ) . nicNameIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testIsUpdateable ( ) { org.ovirt.engine.core.utils.ObjectIdentityChecker oic = new org.ovirt.engine.core.utils.ObjectIdentityChecker ( org.ovirt.engine.core.utils.Jedi.class ) ; org.junit.Assert.assertFalse ( "Should be false by default" , oic.IsFieldUpdatable ( "name" ) ) ; oic.AddPermittedFields ( "name" ) ; org.junit.Assert.assertTrue ( "Should be true now" , oic.IsFieldUpdatable ( "name" ) ) ; }
protected void executeVdsBrokerCommand ( ) { result = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeProfileInfoVDSCommand.getBroker ( ) . glusterVolumeProfileInfo ( org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeProfileInfoVDSCommand.getParameters ( ) . getClusterId ( ) , org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeProfileInfoVDSCommand.getParameters ( ) . getVolumeName ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeProfileInfoVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( result.getGlusterVolumeProfileInfo ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getRoleDao ( ) ; existingRole = dao.get ( new org.ovirt.engine.core.compat.Guid ( "f5972bfa-7102-4d33-ad22-9dd421bfba78" ) ) ; newRole = new org.ovirt.engine.core.common.businessentities.Role ( ) ; newRole.setName ( "new role" ) ; newRole.setDescription ( "This is a new role." ) ; newRole.setType ( RoleType.USER ) ; newRole.setAllowsViewingChildren ( false ) ; newRole.setAppMode ( ApplicationMode.AllModes ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) { org.junit.jupiter.api.Assertions.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetStorageDomainsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ ( ( NAMES.length ) - 1 ) ] } , setUpStorageDomains ( ) , failure ) ; }
private boolean validateAttachment ( ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator ( getNetworkCluster ( ) , org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroup ( ) . getcompatibility_version ( ) ) ; return ( ( ( ! ( org.ovirt.engine.core.utils.NetworkUtils.isManagementNetwork ( getNetwork ( ) ) ) ) || ( validate ( validator.managementNetworkAttachment ( getNetworkName ( ) ) ) ) ) && ( validate ( validator.migrationPropertySupported ( getNetworkName ( ) ) ) ) ) && ( ( ! ( getPersistedNetwork ( ) . isExternal ( ) ) ) || ( validateExternalNetwork ( validator ) ) ) ; }
protected void populateTabMap ( ) { org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.GENERAL_TAB , this . generalTab ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.CLUSTERS_TAB , this . clusterTab ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.PROFILES_TAB , this . profilesTab ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.SUBNET_TAB , this . subnetTab ) ; }
public boolean isWanOptionsAvailable ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model ) { boolean spiceAvailable = ( model.getDefaultConsoleModel ( ) ) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ; boolean isWindowsVm = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( model.getVM ( ) . getOs ( ) ) ; boolean spiceGuestAgentInstalled = ( model.getVM ( ) . getSpiceDriverVersion ( ) ) != null ; return ( spiceAvailable && isWindowsVm ) && spiceGuestAgentInstalled ; }
public void update ( org.ovirt.engine.core.common.businessentities.Role role ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "description" , role.getDescription ( ) ) . addValue ( "id" , role.getId ( ) ) . addValue ( "name" , role.getName ( ) ) . addValue ( "is_readonly" , role.isReadonly ( ) ) . addValue ( "role_type" , role.getType ( ) . getId ( ) ) . addValue ( "allows_viewing_children" , role.allowsViewingChildren ( ) ) ; getCallsHandler ( ) . executeModification ( "UpdateRole" , parameterSource ) ; }
public boolean isStartupTimeoutPassed ( java.util.List < java.lang.String > messages ) { boolean startupTimeoutPassed = isStartupTimeoutPassed ( ) ; if ( ! startupTimeoutPassed ) { messages.add ( EngineMessage.VDS_FENCE_DISABLED_AT_SYSTEM_STARTUP_INTERVAL.name ( ) ) ; } return startupTimeoutPassed ; }
public void run ( ) { if ( firstRun ) { firstRun = false ; startSliding ( true , false ) ; } if ( shiftRight ) { setCurrentValue ( ( ( curValue ) + ( ( multiplier ) * ( stepSize ) ) ) ) ; } else { setCurrentValue ( ( ( curValue ) - ( ( multiplier ) * ( stepSize ) ) ) ) ; } schedule ( org.ovirt.engine.ui.common.widget.SliderBar.KeyTimer.repeatDelay ) ; }
private void applyNetworkChangesToHosts ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = syncNetworkParametersBuilder.buildParameters ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) , getOldNetwork ( ) ) ; if ( ! ( parameters.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing ( parameters ) ; runInternalMultipleActions ( VdcActionType.PersistentHostSetupNetworks , parameters ) ; } }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters ( ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.VmStatic getStaticData ( ) { return vmStatic ; }
private org.ovirt.engine.api.model.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid guid ) { org.ovirt.engine.api.model.StorageDomain sd = new org.ovirt.engine.api.model.StorageDomain ( ) ; sd.setStorageName ( "Storage_Domain_1" ) ; sd.setId ( guid ) ; return sd ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession call ( ) throws java.lang.Exception { geoRepSession.setSessionDetails ( ( ( java.util.ArrayList ) ( getSessionDetailFromCLI ( cluster , geoRepSession ) ) ) ) ; return geoRepSession ; }
protected boolean checkSingleQxlDisplay ( ) { if ( ! ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getSingleQxlPci ( ) ) ) { return true ; } return org.ovirt.engine.core.bll.VmHandler.isSingleQxlDeviceLegal ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getDefaultDisplayType ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getOs ( ) , org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) , org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ; }
public static void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
public void nameInUse ( ) { org.mockito.Mockito.when ( oldHost.getName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( host.getName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( hostDao.getByName ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.nameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ) ; }
protected void mockBackendStatusChange ( T cmd , boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.mockito.Mockito.doReturn ( backend ) . when ( cmd ) . getBackend ( ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; vdsReturnValue.setReturnValue ( succeeded ) ; vdsReturnValue.setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue.setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , "" ) ) ; } org.mockito.Mockito.when ( vdsBrokerFrontend.runVdsCommand ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.any ( org.ovirt.engine.core.common.vdscommands.VDSCommandType.class ) , org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ) . thenReturn ( vdsReturnValue ) ; }
public void checkClear ( ) { org.junit.jupiter.api.Assertions.assertTrue ( lockManager.acquireLock ( lockLock1 ) . getFirst ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( lockManager.acquireLock ( lockLock2 ) . getFirst ( ) ) ; lockManager.clear ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( lockManager.acquireLock ( lockLock1 ) . getFirst ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( lockManager.acquireLock ( lockLock2 ) . getFirst ( ) ) ; lockManager.clear ( ) ; }
protected void readOsSection ( org.ovirt.engine.core.compat.backendcompat.XmlNode section ) { _vm.getStaticData ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( section.attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = section.SelectSingleNode ( "Description" ) ; if ( node != null ) { int osId = osRepository.getOsIdByUniqueName ( node.innerText ) ; _vm.getStaticData ( ) . setOsId ( osId ) ; _vm.setClusterArch ( osRepository.getArchitectureFromOS ( osId ) ) ; } else { _vm.setClusterArch ( ArchitectureType.undefined ) ; } }
public static java.lang.String getJsonDiskDescription ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) throws java.io.IOException { java.util.Map < java.lang.String , java.lang.Object > description = new java.util.TreeMap < > ( ) ; description.put ( org.ovirt.engine.core.bll.ImagesHandler.DISK_ALIAS , disk.getDiskAlias ( ) ) ; description.put ( org.ovirt.engine.core.bll.ImagesHandler.DISK_DESCRIPTION , ( ( disk.getDiskDescription ( ) ) != null ? disk.getDiskDescription ( ) : "" ) ) ; return org.ovirt.engine.core.utils.JsonHelper.mapToJson ( description , false ) ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void testValidDedicatedHost ( ) { prepareVmToPassCanDoAction ( ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setVdsGroupId ( group.getId ( ) ) ; org.mockito.Mockito.doReturn ( vdsDAO ) . when ( command ) . getVdsDAO ( ) ; org.mockito.Mockito.when ( vdsDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vds ) ; vmStatic.setDedicatedVmForVds ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; junit.framework.Assert.assertTrue ( "canDoAction should have passed." , command.canDoAction ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel ) ( result.getState ( ) ) ) ; cleanConnection ( storageListModel.fileConnection , storageListModel.hostId ) ; storageListModel.fileConnection = null ; }
protected void baseTemplateSelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate baseTemplate = getModel ( ) . getBaseTemplate ( ) . getSelectedItem ( ) ; if ( baseTemplate != null ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > subVersions = baseTemplateToSubTemplates.get ( baseTemplate.getId ( ) ) ; getModel ( ) . getTemplate ( ) . setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( subVersions ) ) ; getModel ( ) . getTemplate ( ) . setSelectedItem ( subVersions.get ( 1 ) ) ; } }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.StorageConnectionExtension storageConnectionExtension ) { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = org.ovirt.engine.api.restapi.types.StorageServerConnectionExtensionMapper.map ( storageConnectionExtension , null ) ; connExt.setHostId ( hostId ) ; org.ovirt.engine.core.common.action.StorageServerConnectionExtensionParameters params = new org.ovirt.engine.core.common.action.StorageServerConnectionExtensionParameters ( connExt ) ; return performCreate ( ActionType.AddStorageServerConnectionExtension , params , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionExtensionById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
public org.ovirt.engine.core.compat.Guid getCpuProfileId ( ) { return cpuProfileId ; }
public void testCommandClassExistence ( ) { java.util.List < org.ovirt.engine.core.common.action.VdcActionType > missingCommands = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.action.VdcActionType vat : org.ovirt.engine.core.common.action.VdcActionType.values ( ) ) { if ( vat != ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ) { if ( ( org.ovirt.engine.core.bll.CommandsFactory.getCommandClass ( vat.name ( ) ) ) == null ) { missingCommands.add ( vat ) ; } } } org.junit.Assert.assertTrue ( ( "VdcActionType contains the following values that does not correspond to an existing command class: " + missingCommands ) , missingCommands.isEmpty ( ) ) ; }
public void testListLimitResultsBadFormat ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectationsWithMax ( true ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllTags , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.setUpTags ( ) , null ) ; control.replay ( ) ; collection.setUriInfo ( uriInfo ) ; getCollection ( ) ; fail ( "Expected WebFaultException" ) ; }
public static java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > findPrincipalsByIds ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final java.util.Collection < java.lang.String > ids , final boolean groupsResolving , final boolean groupsResolvingRecursive ) { java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > results = new java.util.ArrayList < > ( ) ; for ( java.util.Collection < java.lang.String > batch : org.ovirt.engine.core.aaa.SearchQueryParsingUtils.getIdsBatches ( extension.getContext ( ) , ids ) ) { results.addAll ( org.ovirt.engine.core.aaa.AuthzUtils.queryPrincipalRecords ( extension , namespace , org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap ( batch , Authz.QueryEntity.PRINCIPAL ) , groupsResolving , groupsResolvingRecursive ) ) ; } return results ; }
public static void addStatistics ( org.ovirt.engine.api.restapi.resource.BackendResource resource , org.ovirt.engine.api.model.Nic model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { model.setStatistics ( new org.ovirt.engine.api.model.Statistics ( ) ) ; org.ovirt.engine.api.restapi.resource.NicStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.NicStatisticalQuery ( model ) ; java.util.List < org.ovirt.engine.api.model.Statistic > statistics = query.getStatistics ( entity ) ; for ( org.ovirt.engine.api.model.Statistic statistic : statistics ) { org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( resource.getUriInfo ( ) , statistic , query.getParentType ( ) ) ; } model.getStatistics ( ) . getStatistics ( ) . addAll ( statistics ) ; }
public static void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void setUpWindowsGetEntityExpectations ( int times , boolean notFound ) throws java.lang.Exception { setUpGetEntityExpectations ( times , notFound , new org.ovirt.engine.api.restapi.resource.VM ( ) { { setId ( GUIDS [ 0 ] ) ; setVmOs ( OsRepository.DEFAULT_X86_OS ) ; } } ) ; }
public void getGlusterSwiftServerServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork ( ) . getSelectedItem ( ) ; boolean portMirroringAllowed = ( network == null ) || ( ! ( network.isExternal ( ) ) ) ; if ( ! portMirroringAllowed ) { getPortMirroring ( ) . setEntity ( false ) ; getPortMirroring ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . portMirroringNotSupportedExternalNetworks ( ) ) ; } getPortMirroring ( ) . setIsChangeable ( portMirroringAllowed ) ; }
public static void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
private void persistTopology ( org.ovirt.engine.core.common.businessentities.VDS host , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > dbNics , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks , org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData ) { final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl ( interfaceDao , host.getInterfaces ( ) , dbNics , userConfiguredData ) ; networkInterfacesPersister.persistTopology ( ) ; final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister networkAttachmentPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister ( networkAttachmentDao , host.getId ( ) , host.getInterfaces ( ) , userConfiguredData.getCustomProperties ( ) , userConfiguredData.getNetworkAttachments ( ) , clusterNetworks ) ; networkAttachmentPersister.persistNetworkAttachments ( ) ; }
public java.util.concurrent.Future < java.util.List < org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse > > batchCall ( java.util.List < org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest > requests ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.BatchCall call = new org.ovirt.vdsm.jsonrpc.client.internal.BatchCall ( requests ) ; for ( final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request : requests ) { this . tracker.registerCall ( request , call ) ; retryCall ( request , call ) ; } try { this . getClient ( ) . sendMessage ( org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils.jsonToByteArray ( requests ) ) ; } finally { retryBatchCall ( requests , call ) ; } return call ; }
public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo ) ) { return false ; } org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo host = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo ) ( obj ) ) ; return ( ( java.util.Objects.equals ( getUuid ( ) , host.getUuid ( ) ) ) && ( java.util.Objects.equals ( getHostnameOrIp ( ) , host.getHostnameOrIp ( ) ) ) ) && ( java.util.Objects.equals ( getStatus ( ) , host.getStatus ( ) ) ) ; }
public void initialize ( ) { super . initialize ( ) ; if ( ( getVm ( ) ) != null ) { updateSuggestedDiskAliasFromServer ( ) ; getIsPlugged ( ) . setIsAvailable ( true ) ; } else { getIsReadOnly ( ) . setIsAvailable ( false ) ; getIsPlugged ( ) . setEntity ( false ) ; getIsUsingScsiReservation ( ) . setIsAvailable ( false ) ; getIsUsingScsiReservation ( ) . setEntity ( false ) ; } getSizeExtend ( ) . setIsAvailable ( false ) ; }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisksForVm , params , aQuery ) ; }
private void addVmDynamic ( ) { org.ovirt.engine.core.common.businessentities.VmDynamic tempVar = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; tempVar.setId ( getVmId ( ) ) ; tempVar.setStatus ( VMStatus.ImageLocked ) ; tempVar.setVmHost ( "" ) ; tempVar.setVmIp ( "" ) ; tempVar.setAppList ( getParameters ( ) . getVm ( ) . getDynamicData ( ) . getAppList ( ) ) ; org.ovirt.engine.core.bll.ImportVmCommand.getVmDynamicDAO ( ) . save ( tempVar ) ; org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext ( ) . snapshotNewEntity ( tempVar ) ; }
public void postOnAddCluster ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel ) ( getWindow ( ) ) ) ; model.stopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; postAction ( ) ; } }
public void refreshAllUsers ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DbUser > activeUsers = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DbUser dbUser : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . getAll ( ) ) { if ( dbUser.isActive ( ) ) { activeUsers.add ( dbUser ) ; } } for ( org.ovirt.engine.core.common.businessentities.DbUser user : org.ovirt.engine.core.bll.SyncUsers.sync ( activeUsers ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . update ( user ) ; } }
public void setRefreshRate ( int interval ) { if ( ( getRefreshRate ( ) ) == interval ) { return ; } org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine ( ( ( ( "GridTimer[" + ( name ) ) + "]: Refresh Rate set to: " ) + interval ) ) ; normalInterval = interval ; org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent.fire ( this , getRefreshRate ( ) ) ; }
public void checkCidrCidrIsNotANetworkAddress ( ) { org.mockito.Mockito.doReturn ( true ) . when ( mockedCidrValidator ) . isCidrFormatValid ( org.ovirt.engine.ui.uicommonweb.validation.CidrValidationTest.CIDR ) ; org.mockito.Mockito.doReturn ( false ) . when ( mockedCidrValidator ) . isCidrNetworkAddressValid ( org.ovirt.engine.ui.uicommonweb.validation.CidrValidationTest.CIDR ) ; org.ovirt.engine.ui.uicommonweb.validation.ValidationResult actualResult = underTest.validate ( org.ovirt.engine.ui.uicommonweb.validation.CidrValidationTest.CIDR ) ; org.ovirt.engine.ui.uicommonweb.validation.ValidationResult expectedResult = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ( false , java.util.Collections.singletonList ( org.ovirt.engine.ui.uicommonweb.validation.CidrValidationTest.CIDR_IS_NOT_A_NETWORK_ADDRESS ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedResult , actualResult ) ; }
public void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void getIsGlusterVolumeSnapshotCliScheduleEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotCliScheduleFlag , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void freeMac ( long mac ) { checkIfMacIsFromWithinRange ( mac ) ; int arrayIndex = macToArrayIndex ( mac ) ; if ( ! ( usedMacs.get ( arrayIndex ) ) ) { return ; } final boolean duplicatesExist = ( macDuplicityCount.count ( arrayIndex ) ) != 0 ; if ( duplicatesExist ) { macDuplicityCount.decrease ( arrayIndex ) ; } else { usedMacs.set ( arrayIndex , false ) ; ( availableMacsCount ) ++ ; } }
private void edit ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.EditVmInterfaceModel.createInstance ( getEntity ( ) . getStaticData ( ) , getEntity ( ) , getEntity ( ) . getVdsGroupCompatibilityVersion ( ) , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems ( ) ) ) , ( ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ) ( getSelectedItem ( ) ) ) , this ) ; setWindow ( model ) ; }
public void isSoundcardEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsNonEmptyCollectionConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetSoundDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void getAAANamespaces ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ) ( source ) ) : new java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAvailableNamespaces , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.maxSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; initSpmPriorities1 ( ) ; }
public void validateFailedWrongPlugStatus ( ) throws java.lang.Exception { mockVmStatusUp ( ) ; mockInterfaceList ( ) ; cretaeDiskWrongPlug ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.HOT_PLUG_DISK_IS_NOT_UNPLUGGED ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( applySortOptions ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSearchString ( ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS , org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.isCaseSensitiveSearch ( ) ) ; tempVar.setMaxCount ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturnForXmlRpc getHostJobs ( java.lang.String jobType , java.util.List < java.lang.String > jobIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getJobs" ) . withOptionalParameter ( "job_type" , jobType ) . withOptionalParameterAsList ( "job_ids" , jobIds ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "jobs" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturnForXmlRpc ( response ) ; }
private org.ovirt.engine.core.bll.context.CompensationContext createCompensationContext ( org.ovirt.engine.core.compat.TransactionScopeOption transactionScopeOption , boolean forceCompensation ) { if ( ( transactionScopeOption == ( org.ovirt.engine.core.compat.TransactionScopeOption.Suppress ) ) && ( ! forceCompensation ) ) { return org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance ( ) ; } return createDefaultCompensationContext ( commandId ) ; }
public void testExistsExisting ( ) { org.junit.Assert.assertTrue ( dao.exists ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ) ; }
public static org.ovirt.engine.core.bll.tasks.SPMAsyncTask construct ( org.ovirt.engine.core.bll.tasks.interfaces.CommandCoordinator coco , org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters asyncTaskParams , boolean duringInit ) { try { org.ovirt.engine.core.bll.tasks.SPMAsyncTask result = null ; if ( taskType == ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType.unknown ) ) { result = new org.ovirt.engine.core.bll.tasks.SPMAsyncTask ( coco , asyncTaskParams ) ; } else { result = new org.ovirt.engine.core.bll.tasks.CommandAsyncTask ( coco , asyncTaskParams , duringInit ) ; } return result ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.tasks.AsyncTaskFactory.log.error ( java.lang.String.format ( "AsyncTaskFactory: Failed to get type information using reflection for AsyncTask type: %1$s." , taskType ) , e ) ; return null ; } }
protected boolean validate ( ) { org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator ( ) ; if ( ( ( ! ( validate ( storageConnectionValidator.isConnectionExists ( ) ) ) ) || ( ! ( validate ( storageConnectionValidator.isDomainOfConnectionExistsAndInactive ( org.ovirt.engine.core.bll.storage.connection.AttachStorageConnectionToStorageDomainCommand.getStorageDomain ( ) ) ) ) ) ) || ( ! ( validate ( storageConnectionValidator.isISCSIConnectionAndDomain ( org.ovirt.engine.core.bll.storage.connection.AttachStorageConnectionToStorageDomainCommand.getStorageDomain ( ) ) ) ) ) ) { return false ; } if ( storageConnectionValidator.isConnectionForISCSIDomainAttached ( org.ovirt.engine.core.bll.storage.connection.AttachStorageConnectionToStorageDomainCommand.getStorageDomain ( ) ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_ALREADY_EXISTS ) ; } return true ; }
protected void updateExistingEntity ( ) { existingEntity.setGlusterVersion ( new org.ovirt.engine.core.compat.RpmVersion ( "glusterfs-3.4.0.34.1u2rhs-1.el6rhs" ) ) ; existingEntity.setLibrbdVersion ( new org.ovirt.engine.core.compat.RpmVersion ( "librbd1-0.80.9-1.fc21.x86_64_updated" ) ) ; existingEntity.getReportedDnsResolverConfiguration ( ) . setNameServers ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.network.NameServer ( "1.1.1.1" ) ) ) ; }
public void testRemove ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = dao.get ( org.ovirt.engine.core.dao.gluster.StoageDeviceDaoTest.EXISTING_STORAGE_DEVICE_ID_2 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( storageDevice , "storage device doesn't exists" ) ; dao.remove ( org.ovirt.engine.core.dao.gluster.StoageDeviceDaoTest.EXISTING_STORAGE_DEVICE_ID_2 ) ; storageDevice = dao.get ( org.ovirt.engine.core.dao.gluster.StoageDeviceDaoTest.EXISTING_STORAGE_DEVICE_ID_2 ) ; org.junit.jupiter.api.Assertions.assertNull ( storageDevice , "Failed to remove storage device" ) ; }
private void addSELinuxModes ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.SeLinuxMode [ ] values ) { if ( org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5 ) ) { version.setSelinuxModes ( new org.ovirt.engine.api.model.SeLinuxModes ( ) ) ; for ( org.ovirt.engine.api.model.SeLinuxMode mode : values ) { version.getSelinuxModes ( ) . getSeLinuxModes ( ) . add ( mode.value ( ) ) ; } } }
protected void addCustomModelsDetailModelList ( org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel diskListModel = new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel ( ) ; diskListModel.setSystemTreeContext ( this ) ; list.add ( 3 , diskListModel ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateEventListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel ( ) ) ; }
private void issueTokenForAuthCode ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response , java.lang.String clientId , java.lang.String scope ) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug ( "Entered issueTokenForAuthCode" ) ; java.lang.String authCode = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter ( request , SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE , SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE ) ; java.lang.String accessToken = ssoContext.getTokenForAuthCode ( authCode ) ; org.ovirt.engine.core.sso.utils.SsoUtils.validateRequestScope ( request , accessToken , scope ) ; org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession ( request , clientId , accessToken , true ) ; org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug ( "Sending json response" ) ; org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonData ( response , buildResponse ( ssoSession ) ) ; }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void addDisk ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext ( ActionType.AddDisk , buildAddDiskParameters ( disk ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( returnValue.getFault ( ) . getError ( ) , java.lang.String.format ( "Failed to create disk! %s" , disk.getDiskAlias ( ) ) ) ; } org.ovirt.engine.core.bll.HibernateVmCommand.getTaskIdList ( ) . addAll ( returnValue.getInternalVdsmTaskIdList ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { result = org.ovirt.engine.core.vdsbroker.gluster.StopRemoveGlusterVolumeBricksVDSCommand.getBroker ( ) . glusterVolumeRemoveBricksStop ( org.ovirt.engine.core.vdsbroker.gluster.StopRemoveGlusterVolumeBricksVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.StopRemoveGlusterVolumeBricksVDSCommand.getParameters ( ) . getBrickDirectories ( ) . toArray ( new java.lang.String [ 0 ] ) , org.ovirt.engine.core.vdsbroker.gluster.StopRemoveGlusterVolumeBricksVDSCommand.getParameters ( ) . getReplicaCount ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.StopRemoveGlusterVolumeBricksVDSCommand.proceedProxyReturnValue ( ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity entity = result.getStatusDetails ( ) ; entity.setStatusTime ( new java.util.Date ( ) ) ; setReturnValue ( entity ) ; }
public void testBootProtocolSetForRoleNetworkWhenIpConfigurationIsNull ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( NetworkBootProtocol.NONE , null , null ) ; attachment.setNetworkId ( network.getId ( ) ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( true , true , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , network.getName ( ) ) ) , network , attachment ) ; }
protected org.ovirt.engine.api.model.Permissions mapCollection ( java.util.Set < org.ovirt.engine.api.model.Permission > entities ) { org.ovirt.engine.api.model.Permissions collection = new org.ovirt.engine.api.model.Permissions ( ) ; for ( org.ovirt.engine.api.model.Permission entity : entities ) { castEveryonePermissionsToUser ( entity ) ; org.ovirt.engine.api.model.Permission permission = map ( entity , getUserById ( entity.getAdElementId ( ) ) ) ; collection.getPermissions ( ) . add ( addLinks ( permission , ( ( permission.getUser ( ) ) != null ? suggestedParentType : org.ovirt.engine.api.model.Group.class ) ) ) ; } return collection ; }
public static org.ovirt.engine.core.common.businessentities.network.HostNetworkQos fromAnonymousHostNetworkQos ( org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos hostNetworkQos ) { if ( hostNetworkQos == null ) { return null ; } org.ovirt.engine.core.common.businessentities.network.HostNetworkQos result = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; result.setId ( hostNetworkQos.getId ( ) ) ; result.hostNetworkQosProperties = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQosProperties ( hostNetworkQos.getHostNetworkQosProperties ( ) ) ; return result ; }
private org.ovirt.engine.core.common.businessentities.DiskImage mockSourceImage ( ) { org.ovirt.engine.core.common.businessentities.DiskImage image = createDiskImage ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; org.mockito.Mockito.doReturn ( java.util.Collections.singletonList ( image ) ) . when ( cmd ) . getSourceImages ( ) ; org.mockito.Mockito.when ( diskImageDAO.get ( image.getImageId ( ) ) ) . thenReturn ( image ) ; return image ; }
public void testGetAll ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAll ( ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
public org.ovirt.engine.core.dao.ClusterDao getClusterDao ( ) { final org.ovirt.engine.core.dao.ClusterDao v = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.ClusterDao.class ) ; final org.ovirt.engine.core.common.businessentities.Cluster g = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; g.setClusterId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; org.mockito.Mockito.when ( v.get ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ) . thenReturn ( g ) ; return v ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Permission user ) { switch ( user.getRoleType ( ) ) { case ADMIN : return org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn.resources.adminImage ( ) ; case USER : return org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn.resources.userImage ( ) ; default : return org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn.resources.userImage ( ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; providers.add ( 0 , null ) ; getNetworkProviders ( ) . setItems ( providers ) ; getNetworkProviders ( ) . setSelectedItem ( null ) ; }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase canDoAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext commandContext ) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameters , commandContext ) . validateOnly ( ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , ? > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel < java.lang.Void > source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( ( lastExecutedCommand == ( getModel ( ) . getRemoveCommand ( ) ) ) || ( lastExecutedCommand == ( getModel ( ) . getMaintenanceCommand ( ) ) ) ) { return removeConfirmPopupProvider.get ( ) ; } else if ( lastExecutedCommand == ( getModel ( ) . getManualFenceCommand ( ) ) ) { return manualFenceConfirmPopupProvider.get ( ) ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
private void logDeviceInformation ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct device ) { java.lang.String message = "Received a {0} Device without an address when processing VM {1} devices, skipping device" ; java.lang.String deviceType = org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.getDeviceType ( device ) ; if ( shouldLogDeviceDetails ( deviceType ) ) { java.util.Map < java.lang.String , java.lang.Object > deviceInfo = device.getInnerMap ( ) ; org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.infoFormat ( ( message + ": {2}" ) , org.apache.commons.lang.StringUtils.defaultIfEmpty ( deviceType , StringUtils.EMPTY ) , vmId , deviceInfo.toString ( ) ) ; } else { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.infoFormat ( message , org.apache.commons.lang.StringUtils.defaultIfEmpty ( deviceType , StringUtils.EMPTY ) , vmId ) ; } }
public org.ovirt.engine.sdk.decorators.StorageDomain update ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.StorageDomain.class , org.ovirt.engine.sdk.decorators.StorageDomain.class , headers ) ; }
protected int calcHostScore ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.VM vm , boolean countThreadsAsCores ) { int score = ( MaxSchedulerWeight ) - 1 ; java.lang.Integer effectiveCpuCores = org.ovirt.engine.core.bll.scheduling.SlaValidator.getEffectiveCpuCores ( vds , countThreadsAsCores ) ; if ( ( effectiveCpuCores != null ) && ( ( vds.getUsageCpuPercent ( ) ) != null ) ) { score = java.lang.Math.min ( ( ( ( int ) ( java.lang.Math.round ( calcDistributeMetric ( vds , vm , effectiveCpuCores ) ) ) ) + 1 ) , org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight ) ; } return score ; }
public static java.io.File makeFileFromSanePath ( java.lang.String path , java.io.File base ) { java.io.File file = null ; if ( path == null ) { file = base ; } else if ( ! ( org.ovirt.engine.core.utils.servlet.ServletUtils.isSane ( path ) ) ) { org.ovirt.engine.core.utils.servlet.ServletUtils.log.error ( "The path '{}' is not sane, will return null." , path ) ; } else { file = new java.io.File ( base , path ) ; } return file ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getImages ( ) { if ( ( imagesList ) == null ) { imagesList = new java.util.ArrayList ( ( ( org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters ( ) . getDiskTemplateMap ( ) ) != null ? org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters ( ) . getDiskTemplateMap ( ) . values ( ) : org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getVmTemplate ( ) . getDiskTemplateMap ( ) . values ( ) ) ) ; } return imagesList ; }
private void setupMock ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setSucceeded ( true ) ; returnValue.setReturnValue ( expectedProfileInfo ) ; org.mockito.Mockito.doReturn ( returnValue ) . when ( getQuery ( ) ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetGlusterVolumeProfileInfo ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ; }
public javax.ws.rs.core.Response copy ( org.ovirt.engine.api.model.Action action ) { return getDelegate ( ) . copy ( action ) ; }
public static void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void updateIsDiskHotPlugAvailable ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; org.ovirt.engine.core.compat.Version compatibilityVersion = vm.getCompatibilityVersion ( ) ; if ( compatibilityVersion == null ) { setIsDiskHotPlugSupported ( false ) ; } else { setIsDiskHotPlugSupported ( ( ! ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDiskHotpluggableInterfaces ( getEntity ( ) . getOs ( ) , compatibilityVersion ) . isEmpty ( ) ) ) ) ; } }
private void doTestBadAddMacPool ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( ActionType.AddMacPool , org.ovirt.engine.core.common.action.MacPoolParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; org.ovirt.engine.api.model.MacPool model = org.ovirt.engine.api.restapi.resource.BackendMacPoolsResourceTest.getModel ( 0 ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId ( org.ovirt.engine.core.bll.CommandBase < ? > commandBase ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null ; returnValue = org.ovirt.engine.core.bll.job.ExecutionHandler.evaluateCorrelationId ( commandBase.getParameters ( ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.bll.Backend.log.warn ( "Validation of action '{}' failed. Reasons: {}" , commandBase.getActionType ( ) , org.apache.commons.lang.StringUtils.join ( returnValue.getValidationMessages ( ) , ',' ) ) ; } commandBase.setCorrelationId ( commandBase.getParameters ( ) . getCorrelationId ( ) ) ; return returnValue ; }
public org.ovirt.engine.core.dal.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb ) { if ( ! ( areRequiredNetworksAvailable ( vds ) ) ) { sb.append ( "is missing networks required by VM nics " ) . append ( org.ovirt.engine.core.common.businessentities.Entities.interfacesByNetworkName ( getVmNICs ( ) ) . keySet ( ) ) ; return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_NETWORKS ; } return null ; }
public void testAllDomainsWithinThresholdsOneLacking ( ) { domain1.getStorageDynamicData ( ) . setAvailableDiskSize ( ( ( org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD ) + 1 ) ) ; domain2.getStorageDynamicData ( ) . setAvailableDiskSize ( ( ( org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD ) - 1 ) ) ; domain1.setCriticalSpaceActionBlocker ( org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD ) ; domain2.setCriticalSpaceActionBlocker ( org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD ) ; org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsWithinThresholds ( ) ; org.hamcrest.MatcherAssert.assertThat ( "domain2 should not be within thresholds" , result , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; }
private void onForceSave ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow ( ) ) ) ; if ( ( confirmationModel != null ) && ( ! ( confirmationModel.Validate ( ) ) ) ) { return ; } cancelConfirm ( ) ; getSanStorageModel ( ) . setForce ( true ) ; onSave ( ) ; }
public void setItems ( java.lang.Iterable value ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( value != null ) ? org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.Disk > cast ( value ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; org.ovirt.engine.ui.uicommonweb.Linq.sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer ( ) ) ; super . setItems ( disks ) ; updateActionAvailability ( ) ; }
boolean detectOverflowUsingScrollWidth ( com.google.gwt.dom.client.Element parent ) { int scrollWidthBefore = parent.getScrollWidth ( ) ; java.lang.String overflowValue = parent.getStyle ( ) . getProperty ( "overflow" ) ; parent.getStyle ( ) . setProperty ( "overflow" , "auto" ) ; int scrollWidthAfter = parent.getScrollWidth ( ) ; int clientWidthAfter = parent.getClientWidth ( ) ; parent.getStyle ( ) . setProperty ( "overflow" , overflowValue ) ; return ( scrollWidthAfter > scrollWidthBefore ) || ( scrollWidthAfter > clientWidthAfter ) ; }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.Role > > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters ( ) , aQuery ) ; }
public void removeAll ( org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > interfaces = getVmNicDao ( ) . getAllForVm ( vmId ) ; if ( interfaces != null ) { for ( org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces ) { getMacPoolManager ( ) . freeMac ( iface.getMacAddress ( ) ) ; getVmNicDao ( ) . remove ( iface.getId ( ) ) ; getVmNetworkStatisticsDao ( ) . remove ( iface.getId ( ) ) ; } } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > filterDisks ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskList ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . get ( org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters ( ) . getVmId ( ) , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getUserID ( ) , org.ovirt.engine.core.bll.storage.disk.GetAllAttachableDisksForVmQuery.getParameters ( ) . isFiltered ( ) ) ; if ( vm == null ) { return new java.util.ArrayList < > ( ) ; } return doFilter ( diskList , vm.getOs ( ) , vm.getCompatibilityVersion ( ) ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUpEntityQueryExpectations ( 2 , 0 , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveCpuProfile , org.ovirt.engine.core.common.action.CpuProfileParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; verifyFault ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , resource :: remove ) , detail ) ; }
public com.google.gwt.event.dom.client.HasClickHandlers addSuspendButton ( ) { org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton button = new org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton ( constants.suspendVm ( ) , resources.suspendIcon ( ) , resources.suspendDisabledIcon ( ) , style.suspendButtonAdditionalStyle ( ) ) ; this . suspendButton = button ; addButtonToPanel ( button ) ; return button ; }
public org.ovirt.engine.sdk.decorators.Network add ( org.ovirt.engine.sdk.decorators.Network network ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( SLASH ) + ( getName ( ) ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . add ( url , network , org.ovirt.engine.sdk.entities.Network.class , org.ovirt.engine.sdk.decorators.Network.class , headers ) ; }
protected void setUpEntityQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpEntityQueryExpectations ( VdcQueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { PARENT_ID } , getEntityList ( ) ) ; } }
private boolean isDiskStorageTypeRequiresExecuteState ( ) { return ( ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getDiskInfo ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) || ( ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getDiskInfo ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER ) ) ; }
private void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) { setUpEntityQueryExpectations ( 1 , 0 , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateMacPool , org.ovirt.engine.core.common.action.MacPoolParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendMacPoolResourceTest.getModel ( 0 ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public org.ovirt.engine.core.bll.ValidationResult isDomainHasSpaceForRequest ( final long requestedSize ) { if ( ( ( storageDomain.getAvailableDiskSize ( ) ) != null ) && ( ( ( storageDomain.getAvailableDiskSize ( ) ) - requestedSize ) < ( org.ovirt.engine.core.bll.validator.StorageDomainValidator.getLowDiskSpaceThreshold ( ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN , storageName ( ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.Provider provider , java.lang.String value ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < > ( ) ; parameters.put ( FragmentParams.NAME.getName ( ) , provider.getName ( ) ) ; getPlaceTransitionHandler ( ) . handlePlaceTransition ( WebAdminApplicationPlaces.providerGeneralSubTabPlace , parameters ) ; }
public void canDoActionVmShareableDisk ( ) { createParameters ( ) ; org.ovirt.engine.core.common.businessentities.DiskImage diskImage = initDiskImage ( diskImageGroupId , diskImageId ) ; diskImage.setShareable ( true ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString ( ) ) ) ; }
public void writeData ( java.io.ObjectOutputStream dos ) { try { writeString ( this . key , dos ) ; writeString ( this . value , dos ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public static void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
private void replaceBrick ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick , org.ovirt.engine.core.compat.Guid newServerId , java.lang.String newBrickDir ) { brick.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; brick.setServerId ( newServerId ) ; brick.setBrickDirectory ( newBrickDir ) ; addedBrickIds.add ( brick.getId ( ) ) ; }
public static java.lang.String collection ( org.ovirt.engine.sdk.generator.utils.Tree < org.ovirt.engine.sdk.generator.rsdl.Location > collectionTree ) { org.ovirt.engine.sdk.generator.utils.Tree < org.ovirt.engine.sdk.generator.rsdl.Location > entityTree = collectionTree.getParent ( ) ; java.lang.String brokerType = org.ovirt.engine.sdk.generator.rsdl.BrokerRules.getBrokerType ( collectionTree ) ; java.lang.String entityType = org.ovirt.engine.sdk.generator.rsdl.SchemaRules.getSchemaType ( entityTree ) ; java.lang.String parentClassParameterName = entityType.toLowerCase ( ) . replace ( "_" , "" ) ; org.ovirt.engine.sdk.generator.rsdl.templates.SubCollectionTemplate template = new org.ovirt.engine.sdk.generator.rsdl.templates.SubCollectionTemplate ( ) ; template.set ( "broker_type" , brokerType ) ; template.set ( "parentclass_parameter_name" , parentClassParameterName ) ; return template.evaluate ( ) ; }
private void calculateNetworkImplementationDetailsAndAssertManaged ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , boolean expectManaged , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = initMocksForNetworkImplementationDetailsUtils ( network , null , testIface ) . calculateNetworkImplementationDetails ( iface , network ) ; org.junit.jupiter.api.Assertions.assertNotNull ( networkImplementationDetails , "Network implementation details should be filled." ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectManaged , networkImplementationDetails.isManaged ( ) , ( ( "Network implementation details should be " + ( expectManaged ? "" : "un" ) ) + "managed." ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network existingNetworkRelatedToAttachment ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { return getNetworkBusinessEntityMap ( ) . get ( attachment.getNetworkId ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setMOMPolicyParameters ( java.util.Map < java.lang.String , java.lang.Object > values ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.setMOMPolicyParameters" ) . withParameter ( "key_value_store" , values ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void getVmTemplatesByBaseTemplateId ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid baseTemplate ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesByBaseTemplateId , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( baseTemplate ) , asyncQuery ) ; }
public void updateCompletedJobAndSteps ( final org.ovirt.engine.core.common.job.Job job ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.common.job.Step step : job.getSteps ( ) ) { if ( ( step.getStatus ( ) ) == ( org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED ) ) { step.setStatus ( job.getStatus ( ) ) ; step.setEndTime ( job.getEndTime ( ) ) ; } } jobDao.update ( job ) ; return null ; } } ) ; }
private void setPublicKey ( org.ovirt.engine.ui.uicommonweb.models.EntityModel value ) { privatePublicKey = value ; }
private void incrementDbGenerationForRelatedEntities ( ) { if ( ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters ( ) . getOperation ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy ) ) { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getVmStaticDAO ( ) . incrementDbGeneration ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getVmTemplateId ( ) ) ; } else { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > > vmsForDisk = getVmsWithVmDeviceInfoForDiskId ( ) ; for ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > pair : vmsForDisk ) { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getVmStaticDAO ( ) . incrementDbGeneration ( pair.getFirst ( ) . getId ( ) ) ; } } }
private org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand < org.ovirt.engine.core.common.vdscommands.SetupNetworksVdsCommandParameters > createCommand ( org.ovirt.engine.core.common.vdscommands.SetupNetworksVdsCommandParameters parameters ) { final org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = org.mockito.Mockito.mock ( org.ovirt.engine.core.dal.dbbroker.DbFacade.class ) ; final org.ovirt.engine.core.dao.VdsDAO vdsDao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VdsDAO.class ) ; org.mockito.Mockito.when ( dbFacade.getVdsDao ( ) ) . thenReturn ( vdsDao ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand < org.ovirt.engine.core.common.vdscommands.SetupNetworksVdsCommandParameters > ( parameters ) { @ java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker ( org.ovirt.engine.core.compat.Guid vdsId ) { return server ; } @ java.lang.Override protected org.ovirt.engine.core.dal.dbbroker.DbFacade getDbFacade ( ) { return dbFacade ; } } ; }
protected org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct [ ] getVmInfo ( java.util.List < java.lang.String > vmsToUpdate ) { return vmInfo ; }
public java.util.List < java.lang.String > getThemeStylesheets ( java.lang.String applicationName ) { java.util.List < java.lang.String > ret = null ; final java.lang.String cssFiles = brandingProperties.getProperty ( ( applicationName + ( org.ovirt.engine.core.branding.BrandingTheme.CSS_POST_FIX ) ) ) ; if ( cssFiles == null ) { org.ovirt.engine.core.branding.BrandingTheme.log.warn ( ( ( ( ( ( "Theme '" + ( this . getPath ( ) ) ) + "' has no property defined for key '" ) + applicationName ) + ( org.ovirt.engine.core.branding.BrandingTheme.CSS_POST_FIX ) ) + "'" ) ) ; } else { ret = java.util.Arrays.asList ( cssFiles.split ( "\\s*,\\s*" ) ) ; } return ret ; }
public static void getClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( ( ( getAllUpServers ( ) ) == null ) || ( getAllUpServers ( ) . isEmpty ( ) ) ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND ) ; return false ; } return true ; }
public java.util.Set < java.lang.String > getConsumedEvents ( ) { java.util.Set < java.lang.String > set = new java.util.HashSet < java.lang.String > ( super . getConsumedEvents ( ) ) ; set.add ( BrowserEvents.CLICK ) ; set.add ( BrowserEvents.MOUSEMOVE ) ; set.add ( BrowserEvents.CHANGE ) ; return set ; }
private boolean isTaskStateError ( org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue ) { if ( ( ( vdsReturnValue != null ) && ( ( vdsReturnValue.getVdsError ( ) ) != null ) ) && ( ( vdsReturnValue.getVdsError ( ) . getCode ( ) ) == ( org.ovirt.engine.core.common.errors.VdcBllErrors.TaskStateError ) ) ) { org.ovirt.engine.core.bll.SPMAsyncTask.log.infoFormat ( "SPMAsyncTask::ClearAsyncTask: At time of attemp to clear task '{0}' the response code was {2} and message was {3}. Task will not be cleaned" , getVdsmTaskId ( ) , vdsReturnValue.getVdsError ( ) . getCode ( ) , vdsReturnValue.getVdsError ( ) . getMessage ( ) ) ; return true ; } return false ; }
private void applyOnAttachmentParamsFrom ( org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor interfacePropertiesAccessor , org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModelParametersHelper.populateIpv4Details ( interfacePropertiesAccessor , networkAttachment.getIpConfiguration ( ) . getIpv4PrimaryAddress ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModelParametersHelper.populateIpv6Details ( interfacePropertiesAccessor , networkAttachment.getIpConfiguration ( ) . getIpv6PrimaryAddress ( ) ) ; if ( interfacePropertiesAccessor.isQosOverridden ( ) ) { org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos anonymousHostNetworkQos = org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos.fromHostNetworkQos ( interfacePropertiesAccessor.getHostNetworkQos ( ) ) ; networkAttachment.setHostNetworkQos ( anonymousHostNetworkQos ) ; } networkAttachment.setProperties ( interfacePropertiesAccessor.getCustomProperties ( ) ) ; }
public void addStatistics ( org.ovirt.engine.api.model.Nic model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { model.setStatistics ( new org.ovirt.engine.api.model.Statistics ( ) ) ; org.ovirt.engine.api.restapi.resource.NicStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.NicStatisticalQuery ( newModel ( model.getId ( ) ) ) ; java.util.List < org.ovirt.engine.api.model.Statistic > statistics = query.getStatistics ( entity ) ; for ( org.ovirt.engine.api.model.Statistic statistic : statistics ) { org.ovirt.engine.api.utils.LinkHelper.addLinks ( uriInfo , statistic , query.getParentType ( ) ) ; } model.getStatistics ( ) . getStatistics ( ) . addAll ( statistics ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.ui.common.binding.ElementIdStatement ) ) { return false ; } org.ovirt.engine.ui.common.binding.ElementIdStatement other = ( ( org.ovirt.engine.ui.common.binding.ElementIdStatement ) ( obj ) ) ; return java.util.Objects.equals ( elementId , other.elementId ) ; }
public void testFilter ( ) { filter.clearFilterEntries ( ) ; filter.addFilterEntries ( org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.parse ( ( "include:message1(smtp:alonbl@redhat.com) " + ( ( ( ( ( ( ( ( ( ( "include:message2(smtp:alonbl@redhat.com) " + "exclude:message3(smtp:alonbl@redhat.com) " ) + "exclude:message1(smtp:alonbl@redhat.com) " ) + "include:message2(smtp:alon.barlev@gmail.com) " ) + "include:message1(smtp:alonbl@gentoo.org) " ) + "exclude:message1(snmp:profile1) " ) + "exclude:message2(snmp:profile1) " ) + "include:*(snmp:profile2) " ) + "include:*(snmp:profile1) " ) + "exclude:*" ) + "" ) ) ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "message0" ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "message1" ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "message2" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( snmp.getEvents ( ) . contains ( "message0-->profile1" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( snmp.getEvents ( ) . contains ( "message0-->profile2" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( snmp.getEvents ( ) . contains ( "message1-->profile2" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( snmp.getEvents ( ) . contains ( "message2-->profile2" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 4 , snmp.getEvents ( ) . size ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( smtp.getEvents ( ) . contains ( "message1-->alonbl@gentoo.org" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( smtp.getEvents ( ) . contains ( "message1-->alonbl@redhat.com" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( smtp.getEvents ( ) . contains ( "message2-->alon.barlev@gmail.com" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( smtp.getEvents ( ) . contains ( "message2-->alonbl@redhat.com" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 4 , smtp.getEvents ( ) . size ( ) ) ; }
private void doLoad ( org.ovirt.engine.api.extensions.ExtMap input , org.ovirt.engine.api.extensions.ExtMap output ) { context = input.< org.ovirt.engine.api.extensions.ExtMap > get ( Base.InvokeKeys.CONTEXT ) ; configuration = context.< java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) ; context.mput ( Base.ContextKeys.AUTHOR , "The oVirt Project" ) . mput ( Base.ContextKeys.EXTENSION_NAME , "Internal Authz (Built-in)" ) . mput ( Base.ContextKeys.LICENSE , "ASL 2.0" ) . mput ( Base.ContextKeys.HOME_URL , "http://www.ovirt.org" ) . mput ( Base.ContextKeys.VERSION , "N/A" ) . mput ( Authz.ContextKeys.QUERY_MAX_FILTER_SIZE , java.lang.Integer.parseInt ( configuration.getProperty ( "config.query.filter.size" , "10" ) ) ) . mput ( Base.ContextKeys.BUILD_INTERFACE_VERSION , Base.INTERFACE_VERSION_CURRENT ) . mput ( Authz.ContextKeys.AVAILABLE_NAMESPACES , java.util.Arrays.asList ( org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.NAMESPACE ) ) ; adminUser = new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Authz.PrincipalRecord.NAMESPACE , org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.NAMESPACE ) . mput ( Authz.PrincipalRecord.NAME , configuration.getProperty ( "config.authz.user.name" , org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.DEFAULT_PRINCIPAL_NAME ) ) . mput ( Authz.PrincipalRecord.FIRST_NAME , configuration.getProperty ( "config.authz.user.name" , org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.DEFAULT_PRINCIPAL_NAME ) ) . mput ( Authz.PrincipalRecord.ID , configuration.getProperty ( "config.authz.user.id" , org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.DEFAULT_PRINCIPAL_ID ) ) . mput ( Authz.PrincipalRecord.PRINCIPAL , configuration.getProperty ( "config.authz.user.name" , org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.DEFAULT_PRINCIPAL_NAME ) ) ; }
public void testIncompleteMove ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { control.replay ( ) ; resource.move ( new org.ovirt.engine.api.model.Action ( ) ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Action" , "move" , "storageDomain.id|name" ) ; } }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.getBroker ( ) . glusterVolumeGeoRepConfigSet ( org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.getParameters ( ) . getSlaveHost ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.getParameters ( ) . getSlaveVolume ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.getParameters ( ) . getConfigKey ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.getParameters ( ) . getConfigValue ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.getParameters ( ) . getUserName ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeGeoRepConfigVDSCommand.proceedProxyReturnValue ( ) ; }
public void getAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
protected org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters createSetupNetworksParameters ( org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; host.setId ( hostId ) ; org.ovirt.engine.core.bll.network.NetworkConfigurator configurator = new org.ovirt.engine.core.bll.network.NetworkConfigurator ( host ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = configurator.filterBondsWithoutSlaves ( getHostInterfaces ( hostId ) ) ; org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters ( ) ; parameters.setVdsId ( host.getId ( ) ) ; parameters.setInterfaces ( nics ) ; parameters.setCheckConnectivity ( true ) ; parameters.setShouldBeLogged ( false ) ; return parameters ; }
public void getGlusterVolumeGeoRepStatusForMasterVolume ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid masterVolumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeGeoRepSessions , new org.ovirt.engine.core.common.queries.IdQueryParameters ( masterVolumeId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturnForXmlRpc getQemuImageInfo ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmpRpcReturnValue = vdsServer.getQemuImageInfo ( sdUUID , spUUID , imgUUID , volUUID ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturnForXmlRpc ( xmpRpcReturnValue ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected void executeCommand ( ) { getAffinityGroup ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; affinityGroupDao.save ( getAffinityGroup ( ) ) ; getReturnValue ( ) . setActionReturnValue ( getAffinityGroup ( ) . getId ( ) ) ; setSucceeded ( true ) ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster ( int index ) { org.ovirt.engine.api.restapi.resource.Cluster entity = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.Cluster.class ) ; org.mockito.Mockito.when ( entity.getId ( ) ) . thenReturn ( GUIDS [ index ] ) ; org.mockito.Mockito.when ( entity.getName ( ) ) . thenReturn ( NAMES [ index ] ) ; org.mockito.Mockito.when ( entity.getDescription ( ) ) . thenReturn ( DESCRIPTIONS [ index ] ) ; org.mockito.Mockito.when ( entity.getStoragePoolId ( ) ) . thenReturn ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.DATA_CENTER_ID ) ; return entity ; }
public static com.gwtplatform.mvp.shared.proxy.PlaceRequest get ( java.lang.String nameToken ) { if ( ! ( org.ovirt.engine.ui.common.place.PlaceRequestFactory.instances.containsKey ( nameToken ) ) ) { org.ovirt.engine.ui.common.place.PlaceRequestFactory.instances.put ( nameToken , new com.gwtplatform.mvp.shared.proxy.PlaceRequest.Builder ( ) . nameToken ( nameToken ) . build ( ) ) ; } return org.ovirt.engine.ui.common.place.PlaceRequestFactory.instances.get ( nameToken ) ; }
public static void GetStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit ) , aQuery ) ; }
public boolean StorageDomainRemoved ( org.ovirt.engine.core.common.businessentities.storage_domain_static storageDomain ) { org.ovirt.engine.core.common.businessentities.storage_server_connections connection = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . get ( storageDomain.getstorage ( ) ) ; if ( connection != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . remove ( connection.getid ( ) ) ; } return true ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "OnSave" ) ) { onSave ( ) ; } if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "OnForceSave" ) ) { onForceSave ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "CancelConfirm" ) ) { cancelConfirm ( ) ; } }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.RefreshHostCapabilitiesCommand.getParameters ( ) . getVdsId ( ) ; java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > exclusiveLocks = new java.util.HashMap < > ( ) ; exclusiveLocks.put ( hostId.toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VDS , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; exclusiveLocks.putAll ( hostLocking.getSetupNetworksLock ( hostId ) ) ; return exclusiveLocks ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.Boolean entity = getAllowOverbooking ( ) . getEntity ( ) ; if ( entity ) { getOptimizeForUtilization ( ) . setEntity ( true ) ; } getOptimizeForSpeed ( ) . setIsChangeable ( ( ! entity ) ) ; }
public void canDoActionFailedVMNotFound ( ) throws java.lang.Exception { initializeCommand ( createParameters ( ) ) ; mockNullVm ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; }
private void HandleEndAction ( ) { try { if ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getParameters ( ) . isRemoveTemplateFromDb ( ) ) { RemoveTemplateFromDb ( ) ; } else { org.ovirt.engine.core.bll.VmTemplateHandler.UnLockVmTemplate ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId ( ) ) ; } org.ovirt.engine.core.bll.RemoveVmTemplateCommand.setSucceeded ( true ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getReturnValue ( ) . setEndActionTryAgain ( false ) ; log.error ( "Encountered a problem removing template from DB, setting the action not to retry." ) ; } }
private < R > R execute ( com.woorea.openstack.base.client.OpenStackRequest < R > request ) { try { return request.execute ( ) ; } catch ( com.woorea.openstack.base.client.OpenStackResponseException e ) { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE , e , true ) ; } catch ( java.lang.RuntimeException e ) { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE , org.apache.commons.lang.exception.ExceptionUtils.getRootCause ( e ) , true ) ; } }
public void InternalSetVmStatus ( org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VMStatus status , final org.ovirt.engine.core.common.businessentities.VmExitStatus exitStaus , final java.lang.String exitMessage ) { vm.setStatus ( status ) ; vm.setExitStatus ( exitStaus ) ; vm.setExitMessage ( exitMessage ) ; boolean isVmNotRunning = status.isNotRunning ( ) ; if ( isVmNotRunning || ( status == ( org.ovirt.engine.core.common.businessentities.VMStatus.Unknown ) ) ) { resetVmAttributes ( vm ) ; if ( isVmNotRunning ) { vm.setRunOnVds ( null ) ; vm.setVmPauseStatus ( VmPauseStatus.NONE ) ; } } }
protected org.ovirt.engine.api.model.InstanceTypes mapCollection ( java.util.List < org.ovirt.engine.api.model.InstanceType > entities ) { org.ovirt.engine.api.model.InstanceTypes collection = new org.ovirt.engine.api.model.InstanceTypes ( ) ; for ( org.ovirt.engine.api.model.InstanceType entity : entities ) { org.ovirt.engine.api.model.InstanceType instanceType = map ( entity ) ; org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , instanceType ) ; collection.getInstanceTypes ( ) . add ( addLinks ( populate ( instanceType , entity ) ) ) ; } return collection ; }
public void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
private void assertIpv4Details ( org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration ) { org.hamcrest.MatcherAssert.assertThat ( ipConfiguration.getIPv4Addresses ( ) , org.hamcrest.Matchers.hasSize ( 1 ) ) ; final org.ovirt.engine.core.common.businessentities.network.IPv4Address ipv4Address = ipConfiguration.getIPv4Addresses ( ) . get ( 0 ) ; org.hamcrest.MatcherAssert.assertThat ( ipv4Address.getAddress ( ) , org.hamcrest.Matchers.is ( org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS ) ) ; org.hamcrest.MatcherAssert.assertThat ( ipv4Address.getBootProtocol ( ) , org.hamcrest.Matchers.is ( Ipv4BootProtocol.STATIC_IP ) ) ; org.hamcrest.MatcherAssert.assertThat ( ipv4Address.getAddress ( ) , org.hamcrest.Matchers.is ( org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.IPV4_ADDRESS ) ) ; }
public void onCreated ( org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault instance ) { getIcon ( ) . setEntity ( instance ) ; }
protected boolean setAndValidateCpuProfile ( ) { getVm ( ) . getStaticData ( ) . setVdsGroupId ( org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroupId ( ) ) ; return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile ( getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroup ( ) . getcompatibility_version ( ) ) ) ; }
private void dataCenterWithClusterSelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.dataCenterWithClusterSelectedItemChanged ( ) ; org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster ) ( getDataCenterWithClustersList ( ) . getSelectedItem ( ) ) ) ; if ( ( dataCenterWithCluster != null ) && ( ( dataCenterWithCluster.getDataCenter ( ) ) != null ) ) { getDisksAllocationModel ( ) . setQuotaEnforcementType ( dataCenterWithCluster.getDataCenter ( ) . getQuotaEnforcementType ( ) ) ; } updateMaximalVmMemSize ( ) ; }
public void testAddVmsForExistingAffinityGroup ( ) { org.ovirt.engine.core.common.scheduling.AffinityGroup existing = dao.get ( FixturesTool.EXISTING_AFFINITY_GROUP_ID ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.AffinityGroupDaoTest.NUM_OF_VMS_IN_EXISTING_AFFINITY_GROUP , existing.getVmEntityNames ( ) . size ( ) ) ; existing.getVmIds ( ) . add ( FixturesTool.VM_RHEL5_POOL_51 ) ; dao.update ( existing ) ; org.ovirt.engine.core.common.scheduling.AffinityGroup fetched = dao.get ( existing.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( ( ( org.ovirt.engine.core.dao.AffinityGroupDaoTest.NUM_OF_VMS_IN_EXISTING_AFFINITY_GROUP ) + 1 ) , fetched.getVmEntityNames ( ) . size ( ) ) ; }
private void freeLockExecute ( ) { if ( ( ( releaseLocksAtEndOfExecute ) || ( ! ( getSucceeded ( ) ) ) ) || ( ( noAsyncOperations ( ) ) && ( ! ( ( this ) instanceof org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand ) ) ) ) { freeLock ( ) ; } }
public void setAttached ( boolean attached ) { attachedSeparatedImage.setResource ( ( attached ? org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.resources.joinedIcon ( ) : org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.resources.separatedIcon ( ) ) ) ; attachedSeparatedImage.setTitle ( ( attached ? org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.constants.attachedToInstanceType ( ) : org.ovirt.engine.ui.common.widget.editor.generic.BaseEntityModelDetachableWidget.constants.detachedFromInstanceType ( ) ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmTemplateDao ( ) ; existingTemplate = dao.get ( new org.ovirt.engine.core.compat.Guid ( "1b85420c-b84c-4f29-997e-0eb674b40b79" ) ) ; newVmTemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; newVmTemplate.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newVmTemplate.setName ( "NewVmTemplate" ) ; newVmTemplate.setVdsGroupId ( org.ovirt.engine.core.dao.VmTemplateDAOTest.VDS_GROUP_ID ) ; newVmTemplate.setClusterArch ( ArchitectureType.x86_64 ) ; }
public void getExternalProviderComputeResourceList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetComputeResourceFromExternalProvider , params , aQuery ) ; }
public void onRevealOverlayContent ( org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent event ) { java.util.Set < com.gwtplatform.mvp.client.PresenterWidget < ? > > children = getChildren ( com.gwtplatform.mvp.client.presenter.slots.LegacySlotConvertor.convert ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetContent ) ) ; if ( ( event.getContent ( ) ) != null ) { event.getContent ( ) . setCurrentPlaceWidget ( children.iterator ( ) . next ( ) ) ; } setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetOverlay , event.getContent ( ) ) ; }
public void getMaxSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 10 ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { allBonds = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; initNicModels ( ) ; hostSetupNetworksParametersData.allNics = allNics ; hostSetupNetworksParametersData.existingNetworkAttachments = existingNetworkAttachments ; stopProgress ( ) ; }
public void glusterServiceNotRequired ( ) { org.mockito.Mockito.when ( cluster.getCompatibilityVersion ( ) ) . thenReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.compat.Version.class ) ) ; org.mockito.Mockito.when ( cluster.supportsGlusterService ( ) ) . thenReturn ( false ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ; org.junit.Assert.assertThat ( validator.glusterServiceSupported ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void isCpuPinningValidWithoutPinnedHost ( ) { org.ovirt.engine.core.bll.VmManagementCommandBase < org.ovirt.engine.core.common.action.VmManagementParametersBase > test = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.VmManagementCommandBase < org.ovirt.engine.core.common.action.VmManagementParametersBase > ( org.ovirt.engine.core.compat.Guid.Empty ) ) ; org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; vmStatic.setNumOfSockets ( 6 ) ; vmStatic.setCpuPerSocket ( 2 ) ; vmStatic.setDedicatedVmForVdsList ( new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > ( ) ) ; org.junit.Assert.assertFalse ( test.isCpuPinningValid ( "0#0" , vmStatic ) ) ; org.junit.Assert.assertFalse ( test.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_BE_PINNED_TO_CPU_WITH_UNDEFINED_HOST ) ) ; }
private java.util.Map < java.lang.String , java.lang.Object > generateOptions ( ) { java.util.Map < java.lang.String , java.lang.Object > options = new java.util.HashMap < > ( ) ; options.put ( VdsProperties.CONNECTIVITY_CHECK , java.lang.Boolean.toString ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.getParameters ( ) . isRollbackOnFailure ( ) ) ) ; if ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.getParameters ( ) . isRollbackOnFailure ( ) ) { options.put ( VdsProperties.CONNECTIVITY_TIMEOUT , org.ovirt.engine.core.vdsbroker.vdsbroker.HostSetupNetworksVDSCommand.getParameters ( ) . getConnectivityTimeout ( ) ) ; } return options ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; networkModel.getDataCenters ( ) . setItems ( dataCenters ) ; if ( networkModel instanceof org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel ) { org.ovirt.engine.core.common.businessentities.StoragePool currentDc = findDc ( networkModel.getNetwork ( ) . getDataCenterId ( ) , dataCenters ) ; networkModel.getDataCenters ( ) . setSelectedItem ( currentDc ) ; } else { networkModel.getDataCenters ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( dataCenters ) ) ; } }
public java.lang.String toString ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "\n" ) ; builder.append ( super . toString ( ) ) ; builder.append ( "\n" ) ; org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcObjectDescriptor.toStringBuilder ( mInfo , builder ) ; return builder.toString ( ) ; }
public void cancel ( ) { org.ovirt.engine.ui.frontend.Frontend.Unsubscribe ( ) ; cancelConfirmation ( ) ; setGuideContext ( null ) ; setWindow ( null ) ; updateActionAvailability ( ) ; }
public void endWithFailure ( ) { enclosingCommand.getReturnValue ( ) . setSucceeded ( true ) ; }
protected void EndImportCommand ( ) { setVm ( null ) ; EndActionOnAllImageGroups ( ) ; if ( ( getVm ( ) ) != null ) { org.ovirt.engine.core.bll.VmHandler.UnLockVm ( getVm ( ) . getId ( ) ) ; UpdateVmImSpm ( ) ; } else { setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.ImportVmCommand.log.warn ( "ImportVmCommand::EndImportCommand: Vm is null - not performing full EndAction" ) ; } setSucceeded ( true ) ; }
protected void executeCommand ( ) { try { if ( isAsync ( ) ) { executeCommandAsynchronously ( ) ; return ; } _returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; getVDSReturnValue ( ) . setSucceeded ( true ) ; executeVDSCommand ( ) ; } catch ( java.lang.RuntimeException ex ) { setVdsRuntimeError ( ex ) ; } }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesIntersection ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images1 , java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images2 ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > intersection = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images1 ) { if ( ( org.ovirt.engine.core.bll.ImagesHandler.getDiskImageById ( image.getId ( ) , images2 ) ) != null ) { intersection.add ( image ) ; } } return intersection ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService > serviceList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService > ) ( source ) ) ; if ( ! ( serviceList.isEmpty ( ) ) ) { return serviceList.get ( 0 ) ; } return null ; } else { return source ; } }
public void attestationServerNotConfiguredProperly ( ) { mockConfigRule.mockConfigValue ( ConfigValues.AttestationServer , StringUtils.EMPTY ) ; org.mockito.Mockito.when ( cluster.supportsTrustedService ( ) ) . thenReturn ( true ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster ) ; org.junit.Assert.assertThat ( validator.attestationServerConfigured ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.VDS_GROUP_CANNOT_SET_TRUSTED_ATTESTATION_SERVER_NOT_CONFIGURED ) ) ; }
public static void GetStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public void testRemoveWithParam ( ) { container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ; container.removeSessionOnLogout ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; org.junit.Assert.assertNull ( "Get should return null since the session was removed" , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public static void GetGlusterVolumeBrickDetails ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volume , java.lang.String brick ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , volume , brick , true ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public void getDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected boolean setAndValidateCpuProfile ( ) { if ( ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getTemplateType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE ) ) { return true ; } return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getMasterVm ( ) , org.ovirt.engine.core.bll.AddVmTemplateCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) , org.ovirt.engine.core.bll.AddVmTemplateCommand.getUserId ( ) ) ) ; }
public void testNullDisksUsages ( ) { org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = getVmStatistics ( ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.setDisksUsageInXmlRpc ( null ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMStatisticsData ( vmStatistics , xml ) ; org.junit.Assert.assertNull ( vmStatistics.getDisksUsage ( ) ) ; }
public void testRemoveVdsFromAffinityGroups ( ) { org.ovirt.engine.core.common.scheduling.AffinityGroup existing = dao.get ( FixturesTool.EXISTING_AFFINITY_GROUP_ID ) ; org.junit.jupiter.api.Assertions.assertFalse ( existing.getVdsIds ( ) . isEmpty ( ) ) ; dao.removeVdsFromAffinityGroups ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; org.junit.jupiter.api.Assertions.assertTrue ( dao.get ( FixturesTool.EXISTING_AFFINITY_GROUP_ID ) . getVdsIds ( ) . isEmpty ( ) ) ; }
private void labelInVfsConfigCommonTest ( boolean inVfsConfig ) { simulateNicExists ( ) ; java.util.Set < java.lang.String > labels = new java.util.HashSet < > ( ) ; if ( inVfsConfig ) { labels.add ( org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.LABEL ) ; } org.mockito.Mockito.when ( oldVfsConfig.getNetworkLabels ( ) ) . thenReturn ( labels ) ; }
public void endWithFailure ( ) { for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : enclosingCommand.getParameters ( ) . getParametersList ( ) ) { updateDestinitationImageId ( parameters ) ; } endCreateAllSnapshots ( ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( enclosingCommand.getExecutionContext ( ) , false ) ; enclosingCommand.setExecutionContext ( null ) ; enclosingCommand.getReturnValue ( ) . setSucceeded ( true ) ; }
public org.ovirt.engine.api.model.KatelloErrata list ( ) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = null ; try { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = runQuery ( VdcQueryType.GetErrataForEngine , new org.ovirt.engine.core.common.queries.GetErrataCountsParameters ( ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { backendFailure ( returnValue.getExceptionString ( ) ) ; } errataData = returnValue.getReturnValue ( ) ; } catch ( java.lang.Exception e ) { handleError ( e , false ) ; } if ( errataData == null ) { return new org.ovirt.engine.api.model.KatelloErrata ( ) ; } return mapCollection ( errataData.getErrata ( ) ) ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > soundDevList = vmDeviceDao.getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.GetSoundDevicesQuery.getParameters ( ) . getId ( ) , VmDeviceGeneralType.SOUND ) ; java.util.List < java.lang.String > result = new java.util.ArrayList ( soundDevList.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice v : soundDevList ) { result.add ( v.getDevice ( ) ) ; } org.ovirt.engine.core.bll.GetSoundDevicesQuery.getQueryReturnValue ( ) . setReturnValue ( result ) ; }
public void setSelectedItems ( java.util.List value ) { if ( ( selectedItems ) != value ) { selectedItemsChanging ( value , selectedItems ) ; selectedItems = value ; selectedItemsChanged ( ) ; getSelectedItemsChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SelectedItems" ) ) ; } }
public static void GetAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public void successVmInPreviewForAttachedSnapshot ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; vmDevice.setSnapshotId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
private void InitVdsBroker ( ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat ( "vdsBroker({0},{1})" , _vds.gethost_name ( ) , _vds.getport ( ) ) ; int clientTimeOut = ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.vdsTimeout ) ) * 1000 ; org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector , org.apache.commons.httpclient.HttpClient > returnValue = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnection ( _vds.gethost_name ( ) , _vds.getport ( ) , clientTimeOut , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector.class , org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.UseSecureConnectionWithServers ) ) ; _vdsProxy = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper ( returnValue.getFirst ( ) , returnValue.getSecond ( ) ) ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDynamicDao ( ) . updateNetConfigDirty ( getVds ( ) . getId ( ) , getVds ( ) . getNetConfigDirty ( ) ) ; return null ; }
protected java.util.Map < java.lang.String , java.lang.String > getExclusiveLocks ( ) { if ( ! ( org.apache.commons.lang.StringUtils.isBlank ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getVmName ( ) ) ) ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getVmName ( ) , LockingGroup.VM_NAME.name ( ) ) ; } return null ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void testGetAllGlusterVolumesSearch ( ) throws java.lang.Exception { org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchPattern ( ) ) . thenReturn ( ( "Volumes" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchTypeValue ( ) ) . thenReturn ( SearchType.GlusterVolume ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( glusterVolumeList , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public void mockQuotaDao ( ) { quota = mockStorageQuota ( quotaGuid ) ; org.mockito.Mockito.when ( quotaDao.getById ( quotaGuid ) ) . thenReturn ( quota ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = new java.util.ArrayList < > ( ) ; quotaList.add ( new org.ovirt.engine.core.common.businessentities.Quota ( ) ) ; quotaList.add ( new org.ovirt.engine.core.common.businessentities.Quota ( ) ) ; org.mockito.Mockito.when ( quotaDao.getQuotaByStoragePoolGuid ( storagePoolUUID ) ) . thenReturn ( quotaList ) ; org.mockito.Mockito.when ( quotaDao.isQuotaInUse ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.Quota.class ) ) ) . thenReturn ( false ) ; }
private void fillReportedConfigurations ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > networkNameToNicMap , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > networkMap , org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment , org.ovirt.engine.core.common.businessentities.Cluster cluster ) { org.ovirt.engine.core.common.businessentities.network.Network network = networkMap.get ( networkAttachment.getNetworkId ( ) ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = getNicToWhichIsNetworkAttached ( networkNameToNicMap , networkMap , networkAttachment ) ; if ( nic != null ) { org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface isInSync = createNetworkInSyncWithVdsNetworkInterface ( networkAttachment , nic , network , cluster ) ; org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportedConfigurations = isInSync.reportConfigurationsOnHost ( ) ; networkAttachment.setReportedConfigurations ( reportedConfigurations ) ; } }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.storage.VolumeType getTemplateVolumeType ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { switch ( volumeFormat ) { case COW : return org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse ; case RAW : default : return storageType.isFileDomain ( ) ? org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated ; } }
private static void logField ( org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromOvf , java.lang.String fieldName , java.lang.String fieldValue ) { java.lang.String vmName = vmStaticFromOvf.getName ( ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "FieldName" , fieldName ) ; logable.addCustomValue ( "VmName" , vmName ) ; logable.addCustomValue ( "FieldValue" , fieldValue ) ; new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector ( ) . log ( logable , AuditLogType.VM_IMPORT_INFO ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command , java.lang.Object ... parameters ) { if ( ( ( command == ( getEditCommand ( ) ) ) && ( ( parameters.length ) > 0 ) ) && ( java.lang.Boolean.TRUE.equals ( parameters [ 0 ] ) ) ) { this . clusterPolicyFirst = true ; super . executeCommand ( command , parameters ) ; this . clusterPolicyFirst = false ; } }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public void testIsNetworkInSyncWhenIpv4StaticBootProtocolNetmaskDifferent ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocolNetmask ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL , false ) ; iface.setIpv4BootProtocol ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.forValue ( ( ( ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL.getValue ( ) ) + 1 ) % ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.values ( ) . length ) ) ) ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUriInfo ( setUpActionExpectations ( ActionType.RemoveCluster , org.ovirt.engine.core.common.action.ClusterParametersBase.class , new java.lang.String [ ] { "ClusterId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected void executeVdsBrokerCommand ( ) { org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters parameter = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.getParameters ( ) ; result = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.getBroker ( ) . glusterVolumeGeoRepStatusDetail ( parameter.getVolumeName ( ) , parameter.getSlaveHost ( ) , parameter.getSlaveVolume ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.proceedProxyReturnValue ( ) ; if ( org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.getVDSReturnValue ( ) . getSucceeded ( ) ) { setReturnValue ( result.getGeoRepDetails ( ) ) ; } }
public static void getDefaultTimeZone ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.TimeZoneType timeZoneType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return "" ; } } ; org.ovirt.engine.core.common.queries.TimeZoneQueryParams params = new org.ovirt.engine.core.common.queries.TimeZoneQueryParams ( ) ; params.setTimeZoneType ( timeZoneType ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetDefaultTimeZone , params , aQuery ) ; }
private void AddVdsStaticToDb ( ) { org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getVdsStaticData ( ) . setServerSslEnabled ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.EncryptHostCommunication ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsStaticDao ( ) . save ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getVdsStaticData ( ) ) ; org.ovirt.engine.core.bll.AddVdsCommand.getCompensationContext ( ) . snapshotNewEntity ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getVdsStaticData ( ) ) ; setVdsIdRef ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getVdsStaticData ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.AddVdsCommand.setVds ( null ) ; }
public javax.ws.rs.core.Response add ( final org.ovirt.engine.api.model.HostNic nic ) { validateParameters ( nic , "name" , "network.id|name" , "bonding.slaves.id|name" ) ; validateEnums ( org.ovirt.engine.api.model.HostNic.class , nic ) ; return performCreate ( VdcActionType.AddBond , new org.ovirt.engine.core.common.action.AddBondParameters ( asGuid ( hostId ) , nic.getName ( ) , lookupNetwork ( nic.getNetwork ( ) ) , lookupSlaves ( nic ) ) { { setBondingOptions ( map ( nic , null ) . getBondOptions ( ) ) ; } } , new org.ovirt.engine.api.restapi.resource.BackendHostNicsResource.HostNicResolver ( nic.getName ( ) ) ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( false ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveMacPool , org.ovirt.engine.core.common.action.RemoveMacPoolByIdParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetDeviceList , org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.HOST_GUID } , setUpLuns ( ) , failure ) ; }
public void testGetExtendedHostDevicesByHostId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDeviceView > hostDevices = dao.getExtendedHostDevicesByHostId ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; org.junit.jupiter.api.Assertions.assertEquals ( getEntitiesTotalCount ( ) , hostDevices.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.HostDeviceView hostDevice : hostDevices ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.VDS_RHEL6_NFS_SPM , hostDevice.getHostId ( ) ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; if ( ( ( cluster != null ) && ( cluster.supportsGlusterService ( ) ) ) && ( ! ( cluster.supportsVirtService ( ) ) ) ) { model.getForce ( ) . setIsAvailable ( true ) ; } model.stopProgress ( ) ; }
public void validateSufficientSpaceOnDestinationDomains ( ) { setupForStorageTests ( ) ; command.ensureDestinationImageMap ( ) ; org.junit.Assert.assertTrue ( command.checkDestDomains ( ) ) ; org.mockito.Mockito.verify ( multipleSdValidator ) . allDomainsWithinThresholds ( ) ; org.mockito.Mockito.verify ( multipleSdValidator ) . allDomainsHaveSpaceForNewDisks ( org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "id" , getId ( ) ) . append ( "networkId" , getNetworkId ( ) ) . append ( "networkName" , getNetworkName ( ) ) . append ( "nicId" , getNicId ( ) ) . append ( "nicName" , getNicName ( ) ) . append ( "ipConfiguration" , getIpConfiguration ( ) ) . append ( "properties" , getProperties ( ) ) . append ( "overrideConfiguration" , isOverrideConfiguration ( ) ) . build ( ) ; }
private void unplugNic ( ) { if ( hotPlugVmNicRequired ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm ( ) . getStatus ( ) ) ) { if ( executePlugOrUnplug ( PlugAction.UNPLUG ) ) { if ( isPassthrough ( ) ) { clearPassthroughData ( vmDevice.getHostDevice ( ) ) ; runInternalAction ( ActionType.RefreshHost , new org.ovirt.engine.core.common.action.VdsActionParameters ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVdsId ( ) ) ) ; } } } }
protected void executeQueryCommand ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > allDcNetworks = networkDao.getAllForDataCenter ( org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getParameters ( ) . getId ( ) ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > managementNetworkCandidates = allDcNetworks.stream ( ) . filter ( managementNetworkCandidatePredicate ) . collect ( java.util.stream.Collectors.toList ( ) ) ; org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getQueryReturnValue ( ) . setReturnValue ( managementNetworkCandidates ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( int size ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setSizeInGigabytes ( size ) ; diskImage.setActualSize ( size ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; diskImage.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; diskImage.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singletonList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return diskImage ; }
public void testResolveUnknownVariable ( ) { final java.lang.String message = "This is my ${Variable}" ; final java.lang.String expectedResolved = java.lang.String.format ( "This is my %1s" , MessageResolver.UNKNOWN_VARIABLE_VALUE ) ; java.util.Map < java.lang.String , java.lang.String > values = java.util.Collections.emptyMap ( ) ; java.lang.String resolvedMessage = org.ovirt.engine.core.dal.dbbroker.auditloghandling.MessageResolver.resolveMessage ( message , values ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedResolved , resolvedMessage ) ; }
private void logVmStatusTransionFromUnknown ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; auditLogable.setVmId ( dbVm.getId ( ) ) ; auditLogable.addCustomValue ( "VmStatus" , vdsmVm.getVmDynamic ( ) . getStatus ( ) . toString ( ) ) ; auditLogDirector.log ( auditLogable , AuditLogType.VM_STATUS_RESTORED ) ; }
public static org.ovirt.engine.core.aaa.DirectoryUser instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader reader ) throws com.google.gwt.user.client.rpc.SerializationException { java.lang.String directoryName = reader.readString ( ) ; java.lang.String namespace = reader.readString ( ) ; java.lang.String id = reader.readString ( ) ; java.lang.String name = reader.readString ( ) ; java.lang.String principal = reader.readString ( ) ; return new org.ovirt.engine.core.aaa.DirectoryUser ( directoryName , namespace , id , name , principal ) ; }
public java.util.ArrayList < java.lang.String > GetSupportedOptions ( java.lang.String agent ) { java.util.ArrayList < java.lang.String > agentOptions = new java.util.ArrayList < java.lang.String > ( ) ; if ( fencingOptionMapping.containsKey ( agent ) ) { java.util.HashMap < java.lang.String , java.lang.String > options = fencingOptionMapping.get ( agent ) ; for ( java.util.Map.Entry < java.lang.String , java.lang.String > pair : options.entrySet ( ) ) { agentOptions.add ( pair.getKey ( ) ) ; } } else { org.ovirt.engine.core.utils.pm.VdsFenceOptions.log.errorFormat ( org.ovirt.engine.core.utils.pm.VdsFenceOptions.AGENT_ERROR , agent ) ; } return agentOptions ; }
public void getAllErrata ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Erratum > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetErrataForSystem , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < org.ovirt.engine.core.compat.Guid > & org.ovirt.engine.core.common.businessentities.Nameable > org.ovirt.engine.core.bll.ValidationResult validateCoherentIdentification ( org.ovirt.engine.core.compat.Guid violatingEntityId , org.ovirt.engine.core.compat.Guid referringId , java.lang.String referringName , org.ovirt.engine.core.common.errors.EngineMessage message , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < T > map ) { boolean bothIdentificationSet = ( referringId != null ) && ( referringName != null ) ; java.lang.String [ ] replacements = createIncoherentIdentificationErrorReplacements ( violatingEntityId , referringId , referringName ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( message , replacements ) . when ( ( bothIdentificationSet && ( isNameAndIdIncoherent ( referringId , referringName , map ) ) ) ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( getStoragePool ( ) ) ; getStoragePoolDAO ( ) . remove ( getStoragePool ( ) . getId ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetRoleActionGroupsByRoleId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , org.ovirt.engine.api.restapi.resource.BackendPermitsResourceTest.setUpActionGroups ( ) , failure ) ; }
protected R linkSubResource ( R model , java.lang.String subResource , java.lang.String oid ) { addOrUpdateLink ( model , subResource , org.ovirt.engine.api.utils.LinkHelper.getUriBuilder ( org.ovirt.engine.api.restapi.resource.AbstractBackendResource.getUriInfo ( ) , model ) . path ( subResource ) . path ( oid ) . build ( ) . toString ( ) ) ; return model ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.GlusterVolume volume ) { validateParameters ( volume , "name" , "volumeType" , "bricks" ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getMapper ( org.ovirt.engine.api.model.GlusterVolume.class , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity.class ) . map ( volume , null ) ; volumeEntity.setClusterId ( asGuid ( parent.get ( ) . getId ( ) ) ) ; mapBricks ( volume , volumeEntity ) ; return performCreate ( ActionType.CreateGlusterVolume , new org.ovirt.engine.core.common.action.gluster.CreateGlusterVolumeParameters ( volumeEntity , isForce ( ) ) , new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterVolumeById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) , true ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc allocateVolume ( java.lang.String spUUID , java.lang.String sdUUID , java.lang.String imgGUID , java.lang.String volUUID , java.lang.String size ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Volume.allocate" ) . withParameter ( "volumeID" , volUUID ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "imageID" , imgGUID ) . withParameter ( "size" , size ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "uuid" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
private java.lang.String getRootResourceName ( java.lang.String collectionName , java.lang.String [ ] periods , int i ) { java.lang.String resource = org.ovirt.engine.sdk.codegen.utils.StringUtils.toSingular ( collectionName ) ; java.lang.String resourceCandidate = getPublicEntity ( org.ovirt.engine.sdk.codegen.utils.StringUtils.toSingular ( collectionName ) , periods , i , false ) ; if ( resourceCandidate != null ) { resource = resourceCandidate ; } return resource ; }
public void getVmListByClusterName ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: cluster=" + clusterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
public void testGetGlusterOnly ( ) { doTestGlusterOnlyGet ( ) ; }
private void verifyCertificate ( org.ovirt.engine.api.model.Vm model ) { assertNotNull ( model.getDisplay ( ) ) ; assertNotNull ( model.getDisplay ( ) . getCertificate ( ) ) ; assertEquals ( model.getDisplay ( ) . getCertificate ( ) . getSubject ( ) , org.ovirt.engine.api.restapi.resource.BackendVmResourceTest.CERTIFICATE ) ; }
private void getVMProperties ( org.ovirt.engine.core.compat.Version version , java.util.Map < java.lang.String , java.lang.String > propertiesMap , java.lang.String vmPropertiesFieldValue ) { if ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( vmPropertiesFieldValue ) ) { return ; } propertiesMap.putAll ( convertProperties ( vmPropertiesFieldValue , allVmProperties.get ( version ) ) ) ; }
public void testInitServletConfig_BaseSet ( ) throws javax.servlet.ServletException { org.mockito.Mockito.when ( mockConfig.getInitParameter ( "file" ) ) . thenReturn ( file.getParent ( ) ) ; testServlet.init ( mockConfig ) ; org.junit.Assert.assertNull ( "Type should be null" , testServlet.type ) ; org.junit.Assert.assertEquals ( ( "base should be " + ( file.getParent ( ) ) ) , file.getParentFile ( ) , testServlet.base ) ; }
private void createSnapshot ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getSelectedItem ( ) ) ) ; if ( ( vm == null ) || ( ( getWindow ( ) ) != null ) ) { return ; } org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel.createNewSnapshotModel ( this ) ; model.setValidateByVmSnapshots ( true ) ; setWindow ( model ) ; model.setVm ( vm ) ; model.initialize ( ) ; }
public void setInSlot ( java.lang.Object slot , com.google.gwt.user.client.ui.IsWidget content ) { if ( slot == ( org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel ) ) { if ( content != null ) { actionPanel.setSearchPanel ( content ) ; actionPanel.setVisible ( true ) ; } } else { super . setInSlot ( slot , content ) ; } }
public void processOnVmPoweringUp ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand command = vdsBroker.GetAsyncCommandForVm ( vmId ) ; if ( command != null ) { command.onPowerringUp ( ) ; } }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetVnicProfileById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , null ) ; try { resource.remove ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfileResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public void invalidLowMTU ( ) { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer > > validate = validate ( new org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer ( 30 ) ) ; junit.framework.Assert.assertTrue ( ( ( validate.size ( ) ) > 0 ) ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( getName ( ) ) . append ( " {id=" ) . append ( getId ( ) ) . append ( ", networkId=" ) . append ( getNetworkId ( ) ) . append ( ", portMirroring=" ) . append ( isPortMirroring ( ) ) . append ( ", customProperties=" ) . append ( getCustomProperties ( ) ) . append ( ", description=" ) . append ( getDescription ( ) ) . append ( "}" ) ; return builder.toString ( ) ; }
private void removeOtherImageAndParents ( org.ovirt.engine.core.compat.Guid imageId , org.ovirt.engine.core.compat.Guid lastParent ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = diskImageDao.getSnapshotById ( imageId ) ; org.ovirt.engine.core.compat.Guid currentParent = image.getParentId ( ) ; removeSnapshot ( image ) ; while ( ! ( lastParent.equals ( currentParent ) ) ) { image = diskImageDao.getSnapshotById ( currentParent ) ; currentParent = image.getParentId ( ) ; removeSnapshot ( image ) ; } }
public static void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
protected org.ovirt.engine.core.bll.ValidationResult networkNotUsed ( java.util.List < ? extends org.ovirt.engine.core.common.businessentities.Nameable > entities , org.ovirt.engine.core.common.errors.VdcBllMessages entitiesReplacementPlural , org.ovirt.engine.core.common.errors.VdcBllMessages entitiesReplacementSingular ) { return new org.ovirt.engine.core.common.utils.PluralMessages ( ) . getNetworkInUse ( getEntitiesNames ( entities ) , entitiesReplacementSingular , entitiesReplacementPlural ) ; }
public void testIsStorageDomainNotInAnyPoolFailure ( ) { org.mockito.Mockito.when ( storagePoolIsoMapDao.getAllForStorage ( storageDomain.getId ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.isStorageDomainNotInAnyPool ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL ) ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) , null ) ; control.replay ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void testListGlobalLimit ( ) { org.ovirt.engine.core.common.businessentities.Quota quota = getQuota ( ) ; quota.setGlobalQuotaStorage ( getStorageGlobalCpuLimit ( ) ) ; setUpGetEntityExpectations ( quota ) ; org.ovirt.engine.api.model.QuotaStorageLimits storageLimits = collection.list ( ) ; assertStorageLimitsFound ( storageLimits , 1 ) ; org.ovirt.engine.api.model.QuotaStorageLimit storageLimit = storageLimits.getQuotaStorageLimits ( ) . get ( 0 ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendQuotaStorageLimitsResourceTest.STORAGE_SIZE_GB , storageLimit.getLimit ( ) ) ; }
public void cancelTasks ( final org.ovirt.engine.core.bll.CommandBase command ) { coCoAsyncTaskHelper.cancelTasks ( command , org.ovirt.engine.core.bll.tasks.CommandCoordinatorImpl.log ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; setGetVmQueryExpectations ( 1 ) ; setGetNetworksQueryExpectations ( 1 ) ; setGetGuestAgentQueryExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.NIC nic = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.verifyModelSpecific ( nic , 1 ) ; verifyLinks ( nic ) ; }
protected boolean canDoAction ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RebootVmCommand.getVm ( ) ; if ( vm == null ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; } if ( ! ( org.ovirt.engine.core.bll.RebootVmCommand.canRunActionOnNonManagedVm ( ) ) ) { return false ; } if ( ( org.ovirt.engine.core.bll.RebootVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL , org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from ( vm.getStatus ( ) ) ) ; } return true ; }
public void calculateNetworkImplementationDetailsNetworkQosOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; qos.setOutAverageLinkshare ( 60 ) ; qos.setOutAverageUpperlimit ( 60 ) ; qos.setOutAverageRealtime ( 60 ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface.isBridged ( ) , iface.getMtu ( ) , iface.getVlanId ( ) , qos ) ; }
protected void init ( ) { super . init ( ) ; setVmName ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getParameters ( ) . getExternalName ( ) ) ; setVdsId ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getParameters ( ) . getProxyHostId ( ) ) ; setStorageDomainId ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getParameters ( ) . getDestDomainId ( ) ) ; setStoragePoolId ( ( ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getVdsGroup ( ) ) != null ? org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getVdsGroup ( ) . getStoragePoolId ( ) : null ) ) ; }
protected boolean formatStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain dom , org.ovirt.engine.core.common.businessentities.VDS vds ) { try { return getVdsBroker ( ) . RunVdsCommand ( VDSCommandType.FormatStorageDomain , new org.ovirt.engine.core.common.vdscommands.FormatStorageDomainVDSCommandParameters ( vds.getId ( ) , dom.getId ( ) ) ) . getSucceeded ( ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { if ( ( e.getErrorCode ( ) ) != ( org.ovirt.engine.core.common.errors.VdcBllErrors.StorageDomainDoesNotExist ) ) { throw e ; } log.warnFormat ( "Storage Domain {0} which was about to be formatted does not exist in VDS {1}" , dom.getName ( ) , vds.getName ( ) ) ; return true ; } }
public void testMapFromRestToBackend ( ) { org.ovirt.engine.api.model.RngDevice model = new org.ovirt.engine.api.model.RngDevice ( ) ; model.setSource ( RngSource.HWRNG ) ; model.setRate ( new org.ovirt.engine.api.model.Rate ( ) ) ; model.getRate ( ) . setBytes ( 10 ) ; model.getRate ( ) . setPeriod ( 11 ) ; org.ovirt.engine.core.common.businessentities.VmRngDevice expected = new org.ovirt.engine.core.common.businessentities.VmRngDevice ( ) ; expected.setBytes ( 10 ) ; expected.setPeriod ( 11 ) ; expected.setSource ( VmRngDevice.Source.HWRNG ) ; org.junit.jupiter.api.Assertions.assertEquals ( expected , org.ovirt.engine.api.restapi.types.RngDeviceMapper.map ( model , null ) ) ; }
public synchronized boolean hasTasksForEntityIdAndAction ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.action.VdcActionType type ) { if ( ( _tasks ) != null ) { for ( org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values ( ) ) { if ( ( isCurrentTaskLookedFor ( id , task ) ) && ( type.equals ( task.getParameters ( ) . getDbAsyncTask ( ) . getaction_type ( ) ) ) ) { return true ; } } } return false ; }
public static void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void testExecuteQueryCommnad ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getClusterId ( ) ) . thenReturn ( parameters.getClusterId ( ) ) ; getQuery ( ) . executeQueryCommand ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo > options = getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( options ) ; org.junit.jupiter.api.Assertions.assertEquals ( expected , options ) ; }
protected void proceedProxyReturnValue ( ) { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = GetReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand.getReturnStatus ( ) ) ; switch ( returnStatus ) { case UnknownTask : log.error ( java.lang.String.format ( "Trying to remove unknown task: %1$s" , org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; return ; case TaskStateError : initializeVdsError ( returnStatus ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand.getVDSReturnValue ( ) . setSucceeded ( false ) ; return ; } super . proceedProxyReturnValue ( ) ; }
public static < V > java.util.concurrent.ExecutorCompletionService < V > createCompletionService ( java.lang.Iterable < java.util.concurrent.Callable < V > > tasks ) { java.util.concurrent.ExecutorCompletionService < V > ecs = org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.createCompletionService ( ) ; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.submitTasks ( ecs , tasks ) ; return ecs ; }
public static void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Disks:" , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
protected java.lang.String getFilter ( org.ovirt.engine.core.bll.adbroker.LdapQueryMetadata queryMetadata , java.lang.Object [ ] filterParameters ) { java.lang.StringBuilder filter = new java.lang.StringBuilder ( prefix ) ; for ( java.lang.Object currObject : filterParameters ) { filter.append ( java.lang.String.format ( queryMetadata.getFilter ( ) , currObject ) ) ; } filter.append ( suffix ) ; return filter.toString ( ) ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( lastExecutedCommand == ( getModel ( ) . getUpgradeHostCommand ( ) ) ) { return installPopupProvider.get ( ) ; } return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; }
public void testMissingParameter ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm ( ) ; vm.setDescription ( "incomplete" ) ; try { org.ovirt.engine.api.common.util.CompletenessAssertor.validateParameters ( vm , "status" ) ; fail ( "expected WebApplicationException on incomplete model" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Vm" , "status" ) ; } }
public static void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
public void testGetAllInterfacesForVmFilteredWithPermissions ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > result = dao.getAllForVm ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDaoTest.VM_ID , org.ovirt.engine.core.dao.network.VmNetworkInterfaceDaoTest.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : result ) { org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDaoTest.VM_ID , iface.getVmId ( ) ) ; } }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.widget.tab.WebadminMenuLayout menuLayout ) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails menuTabDetails = menuLayout.getDetails ( WebAdminApplicationPlaces.dataCenterMainTabPlace ) ; return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( menuTabDetails.getSecondaryTitle ( ) , menuTabDetails.getPrimaryTitle ( ) , menuTabDetails.getSecondaryPriority ( ) , menuTabDetails.getPrimaryPriority ( ) , menuTabDetails.getIcon ( ) ) ; }
public static void GetCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
protected org.ovirt.engine.core.bll.ValidationResult vmNetworkSetCorrectly ( ) { return ( getNetwork ( ) . isVmNetwork ( ) ) || ( org.ovirt.engine.core.bll.validator.FeatureSupported.nonVmNetwork ( org.ovirt.engine.core.bll.network.dc.NetworkCommon.getStoragePool ( ) . getcompatibility_version ( ) ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL ) ; }
public void getStorageDevices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterStorageDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) , aQuery ) ; }
public void deleteJobOlderThanDateWithStatus ( ) throws java.text.ParseException { int sizeBeforeDelete = dao.getAll ( ) . size ( ) ; java.text.DateFormat df = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" ) ; dao.deleteJobOlderThanDateWithStatus ( df.parse ( "2012-10-02 10:00:00" ) , java.util.Collections.singletonList ( JobExecutionStatus.FAILED ) ) ; int sizeAfterDelete = dao.getAll ( ) . size ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( sizeBeforeDelete > sizeAfterDelete ) , "Check an entry was deleted" ) ; }
public void removeLun ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun ) { if ( lun.getvolume_group_id ( ) . isEmpty ( ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getLunDao ( ) . remove ( lun.getLUN_id ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : filterConnectionsUsedByOthers ( lun.getLunConnections ( ) , "" , lun.getLUN_id ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . remove ( connection.getid ( ) ) ; } } }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder addNetworkAttachments ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ... networkAttachments ) { if ( nullParameters ( networkAttachments ) ) { return this ; } if ( ( parameters.getNetworkAttachments ( ) ) == null ) { parameters.setNetworkAttachments ( new java.util.ArrayList < > ( ) ) ; } parameters.getNetworkAttachments ( ) . addAll ( java.util.Arrays.asList ( networkAttachments ) ) ; return this ; }
private void initCommandExecutor ( ) { if ( ! ( cmdExecutorInitialized ) ) { for ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : coco.getCommandsWithCallBackEnabled ( ) ) { if ( ! ( cmdEntity.isExecuted ( ) ) ) { coco.retrieveCommand ( cmdEntity.getId ( ) ) . setCommandStatus ( CommandStatus.FAILED_RESTARTED ) ; } else if ( ! ( cmdEntity.isCallBackNotified ( ) ) ) { addToCallBackMap ( cmdEntity ) ; } } cmdExecutorInitialized = true ; } }
public void init ( ) throws org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult { try { utilityConfiguration = new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsConfiguration ( ( ( java.lang.String ) ( args.get ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ARG_CONFIG_FILE ) ) ) ) ; } catch ( java.lang.Exception e ) { throw new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult ( ManageDomainsResultEnum.FAILED_READING_CONFIGURATION , e.getMessage ( ) ) ; } try { daoImpl = new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsDaoImpl ( ) ; } catch ( java.sql.SQLException e ) { throw new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult ( "Please verify the following:\n1. Your database credentials are valid.\n2. The database machine is accessible.\n3. The database service is running" , ManageDomainsResultEnum.DB_EXCEPTION , e.getMessage ( ) ) ; } }
protected void prepareRoleForCommand ( ) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.AddRoleWithActionGroupsCommand.getRole ( ) ; role.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; role.setAllowsViewingChildren ( false ) ; for ( org.ovirt.engine.core.common.businessentities.ActionGroup group : org.ovirt.engine.core.bll.AddRoleWithActionGroupsCommand.getParameters ( ) . getActionGroups ( ) ) { if ( group.allowsViewingChildren ( ) ) { role.setAllowsViewingChildren ( true ) ; break ; } } }
public void testBootProtocolSetForRoleNetworkWhenBootProtocolIsNone ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( NetworkBootProtocol.NONE , null , null ) ; attachment.setNetworkId ( network.getId ( ) ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( false , true , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , network.getName ( ) ) ) , network , attachment ) ; }
public javax.ws.rs.core.Response deactivate ( org.ovirt.engine.api.model.Action action ) { boolean stopGlusterService = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendHostResource.STOP_GLUSTER_SERVICE , true , false ) ; return doAction ( VdcActionType.MaintenanceNumberOfVdss , new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( asList ( guid ) , false , ( action.isSetReason ( ) ? action.getReason ( ) : null ) , stopGlusterService ) , action ) ; }
protected void initFrontend ( ) { super . initFrontend ( ) ; frontend.setLoginHandler ( new org.ovirt.engine.ui.frontend.FrontendLoginHandler ( ) { @ java.lang.Override public void onLoginSuccess ( final java.lang.String userName , final java.lang.String password , final java.lang.String domain ) { com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { final java.lang.String domainToken = "@" ; restApiSessionManager.acquireSession ( ( userName.contains ( domainToken ) ? userName : ( userName + domainToken ) + domain ) , password ) ; } } ) ; } @ java.lang.Override public void onLogout ( ) { restApiSessionManager.releaseSession ( ) ; } } ) ; }
public void checkRemoveNFSConnectionNoDomain ( ) { parameters.setStorageServerConnection ( org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommandTest.NFSConnection ) ; org.mockito.Mockito.when ( storageServerConnectionDao.get ( org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommandTest.NFSConnection.getId ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommandTest.NFSConnection ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.doReturn ( domains ) . when ( command ) . getStorageDomainsByConnId ( org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommandTest.NFSConnection.getId ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkNotAttachedToHost ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.NETWORK_ALREADY_ATTACHED_TO_HOST , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "networkName" , getNetwork ( ) . getName ( ) ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "hostName" , host.getName ( ) ) ) . when ( networkAttachedToHost ( ) ) ; }
public void testGetVolumesByStatusAndTypes ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = dao.getVolumesByStatusAndTypes ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID , GlusterStatus.UP , java.util.Collections.singletonList ( GlusterVolumeType.DISTRIBUTE ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( volumes ) ; org.junit.jupiter.api.Assertions.assertTrue ( volumes.contains ( existingDistVol ) ) ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes ) { org.junit.jupiter.api.Assertions.assertEquals ( GlusterVolumeType.DISTRIBUTE , volume.getVolumeType ( ) ) ; } }
protected void ExecuteIrsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.irsbroker.DeactivateStorageDomainVDSCommand.getIrsProxy ( ) . deactivateStorageDomain ( org.ovirt.engine.core.vdsbroker.irsbroker.DeactivateStorageDomainVDSCommand.getParameters ( ) . getStorageDomainId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.DeactivateStorageDomainVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.DeactivateStorageDomainVDSCommand.getParameters ( ) . getMasterStorageDomainId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.DeactivateStorageDomainVDSCommand.getParameters ( ) . getMasterVersion ( ) ) ; org.ovirt.engine.core.vdsbroker.irsbroker.DeactivateStorageDomainVDSCommand.proceedProxyReturnValue ( ) ; }
public void testUpdateFieldsIsQuotaDefault ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate src = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; src.setQuotaDefault ( true ) ; org.ovirt.engine.core.common.businessentities.VmTemplate dest = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; dest.setQuotaDefault ( false ) ; org.junit.Assert.assertTrue ( "Update should be valid for different quota default statuses" , VmTemplateHandler.mUpdateVmTemplate.IsUpdateValid ( src , dest ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel > getEntityList ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel > labels = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( org.ovirt.engine.api.restapi.resource.BackendHostNicLabelResourceTest.LABELS.length ) ; i ++ ) { labels.add ( getEntity ( i ) ) ; } return labels ; }
protected boolean canDoAction ( ) { boolean retVal = true ; if ( ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) ) == null ) { retVal = false ; addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; } else { retVal = ( super . canDoAction ( ) ) && ( canRemoveVm ( ) ) ; setDescription ( org.ovirt.engine.core.bll.RemoveVmCommand.getVmName ( ) ) ; } return retVal ; }
public void testConflictedUpdate ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 ) ; org.ovirt.engine.api.model.OpenStackVolumeProvider model = getModel ( 1 ) ; model.setId ( GUIDS [ 1 ] . toString ( ) ) ; try { resource.update ( model ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
private void initMemoryHotUnplugSupportMap ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetMemoryHotUnplugSupport ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { memoryHotUnplugSupport = returnValue.getReturnValue ( ) ; } } ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > ret = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Tags tags : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > ) ( source ) ) ) { if ( ( tags.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag ) ) { ret.add ( tags ) ; } } return ret ; } return new org.ovirt.engine.core.common.businessentities.Tags ( ) ; }
public void getLocalStorageHost ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.VDS > aQuery , java.lang.String dataCenterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetFirstConverter < > ( ) ; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "hosts: datacenter=" + dataCenterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , sp , aQuery ) ; }
private javax.ws.rs.core.UriInfo mockUri ( java.lang.String ... strings ) throws java.net.URISyntaxException { javax.ws.rs.core.UriInfo uriInfoMock = org.mockito.Mockito.mock ( javax.ws.rs.core.UriInfo.class ) ; java.util.List < javax.ws.rs.core.PathSegment > pathSegments = new java.util.ArrayList < > ( ) ; for ( java.lang.String s : strings ) { javax.ws.rs.core.PathSegment segment = org.mockito.Mockito.mock ( javax.ws.rs.core.PathSegment.class ) ; org.mockito.Mockito.when ( segment.getPath ( ) ) . thenReturn ( s ) ; pathSegments.add ( segment ) ; } org.mockito.Mockito.when ( uriInfoMock.getPathSegments ( ) ) . thenReturn ( pathSegments ) ; return uriInfoMock ; }
public void flushToPrivateModel ( ) { if ( spiceRadioButton.asRadioButton ( ) . getValue ( ) ) { setSelectedProtocol ( ConsoleProtocol.SPICE ) ; setSelectedSpiceImpl ( ) ; } else if ( remoteDesktopRadioButton.asRadioButton ( ) . getValue ( ) ) { setSelectedProtocol ( ConsoleProtocol.RDP ) ; setSelectedRdpImpl ( ) ; } else if ( vncRadioButton.asRadioButton ( ) . getValue ( ) ) { setSelectedProtocol ( ConsoleProtocol.VNC ) ; setSelectedVncImpl ( ) ; } flushCheckBoxes ( ctrlAltDel , enableUsbAutoshare , openInFullScreen , enableSpiceProxy , useLocalDrives , wanEnabled , disableSmartcard ) ; }
private boolean validateAttachment ( ) { org.ovirt.engine.core.compat.Version clusterVersion = org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getVdsGroupDAO ( ) . get ( getNetworkCluster ( ) . getClusterId ( ) ) . getcompatibility_version ( ) ; org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator ( getNetworkCluster ( ) , clusterVersion ) ; return ( ( ! ( org.ovirt.engine.core.utils.NetworkUtils.isManagementNetwork ( getNetwork ( ) ) ) ) || ( validate ( validator.managementNetworkAttachment ( getNetworkName ( ) ) ) ) ) && ( validate ( validator.migrationPropertySupported ( getNetworkName ( ) ) ) ) ; }
public javax.ws.rs.core.Response remove ( org.ovirt.engine.api.model.Action action ) { get ( ) ; if ( ( action.isSetDetach ( ) ) && ( action.isDetach ( ) ) ) { return performAction ( VdcActionType.DetachDiskFromVm , new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters ( vmId , guid ) ) ; } else { return performAction ( VdcActionType.RemoveDisk , new org.ovirt.engine.core.common.action.RemoveDiskParameters ( guid ) ) ; } }
protected void handleSpecificCommandActions ( ) { if ( ( mVmList.size ( ) ) > 0 ) { org.ovirt.engine.core.bll.StopVdsCommand.restartVdsVms ( ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.UpdateVdsVMsCleared , new org.ovirt.engine.core.common.vdscommands.UpdateVdsVMsClearedVDSCommandParameters ( org.ovirt.engine.core.bll.StopVdsCommand.getVds ( ) . getId ( ) ) ) ; } }
public void testStorageDomainTemplateLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Template template = new org.ovirt.engine.api.model.Template ( ) ; template.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.TEMPLATE_ID ) ; template.setStorageDomain ( new org.ovirt.engine.api.model.StorageDomain ( ) ) ; template.getStorageDomain ( ) . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; template = org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( template ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_TEMPLATE_HREF , template.getHref ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , template.getStorageDomain ( ) . getHref ( ) ) ; }
protected void RemoveSnapshot ( org.ovirt.engine.core.common.businessentities.DiskImage snapshot ) { org.ovirt.engine.core.bll.BaseImagesCommand.getImageStorageDomainMapDao ( ) . remove ( snapshot.getImageId ( ) ) ; getImageDao ( ) . remove ( snapshot.getImageId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > imagesForDisk = getDiskImageDao ( ) . getAllSnapshotsForImageGroup ( snapshot.getId ( ) ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk.isEmpty ( ) ) ) { getBaseDiskDao ( ) . remove ( snapshot.getId ( ) ) ; } }
public void testGetServerHooks ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverHook1 = getGlusterServerHook ( org.ovirt.engine.core.dao.gluster.GlusterHooksDaoTest.SERVER_ID , GlusterHookStatus.ENABLED , GlusterHookContentType.TEXT , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoTest.CHECKSUM_HOOK1_SERVER1 ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverHook2 = getGlusterServerHook ( FixturesTool.GLUSTER_BRICK_SERVER1 , GlusterHookStatus.MISSING , null , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook > serverHooks = dao.getGlusterServerHooks ( FixturesTool.HOOK_ID ) ; org.junit.Assert.assertNotNull ( serverHooks ) ; org.junit.Assert.assertEquals ( 2 , serverHooks.size ( ) ) ; org.junit.Assert.assertTrue ( serverHooks.contains ( serverHook1 ) ) ; org.junit.Assert.assertTrue ( serverHooks.contains ( serverHook2 ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getLUNs ( org.ovirt.engine.core.compat.Guid sdId , java.lang.String vgId ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun1.setStorageDomainId ( sdId ) ; lun1.setVolumeGroupId ( vgId ) ; lun1.setLunConnections ( new java.util.ArrayList ( getConnections ( ) ) ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun2.setStorageDomainId ( sdId ) ; lun2.setVolumeGroupId ( vgId ) ; lun2.setLunConnections ( new java.util.ArrayList ( getConnections ( ) ) ) ; return new java.util.ArrayList ( java.util.Arrays.asList ( lun1 , lun2 ) ) ; }
public void render ( org.ovirt.engine.ui.userportal.widget.extended.vm.Context context , org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( isConsoleEnabled ( model ) ) { sb.appendHtmlConstant ( ( ( ( ( ( ( "<div id=\"" + ( org.ovirt.engine.ui.common.utils.ElementIdUtils.createTableCellElementId ( elementIdPrefix , columnId , context ) ) ) + "\" title=\"" ) + ( title ) ) + "\" class=\"" ) + ( enabledCss ) ) + "\"/>" ) ) ; } else { sb.appendHtmlConstant ( ( ( "<div class=\"" + ( disabledCss ) ) + "\" />" ) ) ; } }
public void testGetAllForEntityFilteredWithPermissions ( ) { org.junit.Assert.assertNotNull ( privilegedUserSession ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > result = dao.getAllForEntity ( org.ovirt.engine.core.dao.PermissionDAOTest.VM_ENTITY_ID , privilegedUserSession.getId ( ) , true ) ; org.ovirt.engine.core.dao.PermissionDAOTest.assertGetAllForEntityResult ( result ) ; }
public void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn amendVolume ( java.lang.String jobId , java.util.Map < java.lang.String , java.lang.Object > volInfo , java.util.Map < java.lang.String , java.lang.Object > volAttr ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "SDM.amend_volume" ) . withParameter ( "job_id" , jobId ) . withParameter ( "vol_info" , volInfo ) . withParameter ( "vol_attr" , volAttr ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public static boolean isVmWithSameNameExistStatic ( java.lang.String vmName , org.ovirt.engine.core.compat.Guid storagePoolId ) { org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( vmName ) ; params.setDatacenterId ( storagePoolId ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalQuery ( VdcQueryType.IsVmWithSameNameExist , params ) ; return ( ( java.lang.Boolean ) ( result.getReturnValue ( ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmTemplate readVmTemplateFromOvf ( java.lang.String ovf ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages = new java.util.ArrayList < > ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > interfaces = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; ovfManager.ImportTemplate ( ovf , template , diskImages , interfaces ) ; template.setInterfaces ( interfaces ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : diskImages ) { template.getDiskTemplateMap ( ) . put ( disk.getId ( ) , disk ) ; } return template ; }
public void validateFailsOnNullCluster ( ) { cmd.setClusterId ( null ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID.toString ( ) ) ) ; }
public void testDiskAttachedToVMValid ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) ; org.mockito.Mockito.when ( vmDao.getVmsListForDisk ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.anyBoolean ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( vm ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.isDiskAttachedToVm ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > filterStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisks ) { return domainsInPool.stream ( ) . filter ( getPredicate ( memoryDisks ) ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; if ( ( ( result.getReturnValue ( ) ) != null ) && ( result.getReturnValue ( ) . getSucceeded ( ) ) ) { cancelConfirm ( ) ; } }
private void initFilters ( ) { java.util.List < java.util.function.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > > storageDomainFilters = java.util.Arrays.asList ( ( d ) -> ! ( d.equals ( invalidStorageDomain1 ) ) , ( d ) -> ! ( d.equals ( invalidStorageDomain2 ) ) , ( d ) -> ! ( d.equals ( invalidStorageDomain3 ) ) ) ; org.mockito.Mockito.doReturn ( storageDomainFilters ) . when ( memoryStorageHandler ) . getStorageDomainFilters ( memoryDisks ) ; }
public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpEntityQueryExpectations ( 1 , t ) ; control.replay ( ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales.clear ( ) ; } }
private void testDiscardFieldsParsing ( org.ovirt.engine.core.compat.Version poolCompatibilityVersion , java.lang.Long expectedDiscardMaxSize , java.lang.Boolean expectedDiscardZeroesData ) { java.util.Map < java.lang.String , java.lang.Object > xlun = new java.util.HashMap < > ( ) ; xlun.put ( "discard_max_bytes" , 1024L ) ; xlun.put ( "discard_zeroes_data" , 1 ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLun ( xlun , poolCompatibilityVersion ) ; org.junit.Assert.assertEquals ( lun.getDiscardMaxSize ( ) , expectedDiscardMaxSize ) ; org.junit.Assert.assertEquals ( lun.getDiscardZeroesData ( ) , expectedDiscardZeroesData ) ; }
public void testValidUpdateOfEditableFieldOnDownVm ( ) { org.ovirt.engine.core.common.businessentities.VmStatic src = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; src.setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.VmStatic dest = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; dest.setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; boolean updateIsValid = vmHandler.isUpdateValid ( src , dest , VMStatus.Down , false ) ; org.junit.jupiter.api.Assertions.assertTrue ( updateIsValid , "Update should be valid for different cluster IDs in the down state" ) ; }
public void getLocalStorageHost ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.VDS > aQuery , java.lang.String dataCenterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetFirstConverter < > ( ) ; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "hosts: datacenter=" + dataCenterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , sp , aQuery ) ; }
protected int getSuccessCode ( ) { return org.apache.commons.httpclient.HttpStatus.SC_OK ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = org.ovirt.engine.core.bll.CopyImageGroupCommand.getDiskDao ( ) . get ( org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters ( ) . getImageGroupID ( ) ) ; if ( disk != null ) { org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) ; return validate ( diskValidator.validateUnsupportedDiskStorageType ( DiskStorageType.LUN , DiskStorageType.CINDER ) ) ; } return false ; }
public void testGetEntityNameByIdAndTypeForUser ( ) { org.ovirt.engine.core.common.businessentities.DbUser dbUser = dbFacade.getDbUserDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.USER_ID ) ; org.junit.Assert.assertNotNull ( dbUser ) ; java.lang.String name = dbUser.getLoginName ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.USER_ID , VdcObjectType.User ) ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assert query.equals ( "" ) ; setUpEntityQueryExpectations ( VdcQueryType.GetRoleActionGroupsByRoleId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , org.ovirt.engine.api.restapi.resource.BackendPermitsResourceTest.setUpActionGroups ( ) , failure ) ; control.replay ( ) ; }
public void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public void testGetAllForSubscriber ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.EventSubscriber > result = dao.getAllForSubscriber ( existingSubscriber ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.EventSubscriber subscription : result ) { org.junit.Assert.assertEquals ( existingSubscriber , subscription.getSubscriberId ( ) ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; java.util.Collections.sort ( storageDomains , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; setStorageDomains ( storageDomains ) ; setDisks ( value ) ; }
public void testClusterSpiceProxy ( ) { org.ovirt.engine.api.restapi.types.VM entity = new org.ovirt.engine.api.restapi.types.VM ( ) ; entity.setClusterSpiceProxy ( org.ovirt.engine.api.restapi.types.VmMapperTest.CLUSTER_SPICE_PROXY ) ; org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.types.VmMapper.map ( entity , ( ( org.ovirt.engine.api.model.Vm ) ( null ) ) ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapperTest.CLUSTER_SPICE_PROXY , model.getDisplay ( ) . getProxy ( ) ) ; }
private void removeMemoryFromActiveSnapshot ( ) { java.lang.String memory = org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot ( ) . getMemoryVolume ( ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( memory ) ) { return ; } snapshotDao.removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ; if ( ( snapshotDao.getNumOfSnapshotsByMemory ( memory ) ) == 0 ) { org.ovirt.engine.core.bll.RunVmCommand.removeMemoryDisks ( memory ) ; } }
public void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public final < T extends java.lang.Enum < T > > void AddField ( T status , java.lang.String fieldName ) { java.util.Set < java.lang.String > values = dictionary.get ( status ) ; if ( values == null ) { values = new java.util.HashSet < java.lang.String > ( ) ; dictionary.put ( status , values ) ; } values.add ( fieldName ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData < E > object ) { ( ( org.ovirt.engine.ui.webadmin.widget.table.cell.CustomSelectionCell ) ( getCell ( ) ) ) . setOptions ( object.getClusterNames ( ) ) ; return ( object.getCluster ( ) . getSelectedItem ( ) ) != null ? object.getCluster ( ) . getSelectedItem ( ) . getName ( ) : org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityPopupView.constants.empty ( ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetAllStorageServerConnections , org.ovirt.engine.core.common.queries.QueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , setUpStorageConnections ( ) , failure ) ; }
protected void service ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { org.ovirt.engine.core.services.SsoCallbackServlet.log.debug ( "Calling SsoCallbackServlet with queryString '{}'" , request.getQueryString ( ) ) ; java.lang.String event = request.getParameter ( "event" ) ; java.lang.String accessToken = request.getParameter ( "token" ) ; switch ( event ) { case "auditLog" : handleAuditLog ( request , response ) ; break ; case "logout" : handleLogout ( accessToken , response ) ; break ; default : response.setStatus ( java.net.HttpURLConnection.HTTP_INTERNAL_ERROR ) ; org.ovirt.engine.core.services.SsoCallbackServlet.log.error ( "Unsupported event '{}'" , event ) ; break ; } }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > cpuList = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.ServerCpu > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) ) ; return cpuList ; } return null ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( "IsDiskHotPlugAvailable" . equals ( args.propertyName ) ) { com.google.gwt.event.logical.shared.InitializeEvent.fire ( plugButtonDefinition ) ; com.google.gwt.event.logical.shared.InitializeEvent.fire ( unPlugButtonDefinition ) ; } }
private void handleException ( java.lang.RuntimeException e , java.lang.String reason ) { org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.setVdsRuntimeError ( e ) ; final java.lang.String msg = java.lang.String.format ( "Failed to poll host %s - %s." , org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters ( ) . getVdsId ( ) , reason ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug ( msg , e ) ; }
private org.ovirt.engine.core.common.vdscommands.MigrateVDSCommandParameters createMigrateVDSCommandParameters ( ) { java.lang.String srcVdsHost = org.ovirt.engine.core.bll.MigrateVmCommand.getVds ( ) . getHostName ( ) ; java.lang.String dstVdsHost = java.lang.String.format ( "%1$s:%2$s" , getDestinationVds ( ) . getHostName ( ) , getDestinationVds ( ) . getPort ( ) ) ; return new org.ovirt.engine.core.common.vdscommands.MigrateVDSCommandParameters ( org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.MigrateVmCommand.getVmId ( ) , srcVdsHost , vdsDestinationId , dstVdsHost , org.ovirt.engine.core.common.businessentities.MigrationMethod.ONLINE , isTunnelMigrationUsed ( ) , getMigrationNetworkIp ( ) , org.ovirt.engine.core.bll.MigrateVmCommand.getVds ( ) . getVdsGroupCompatibilityVersion ( ) , getMaximumMigrationDowntime ( ) ) ; }
protected boolean isDomainInEditState ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { boolean isEditable = ( storageDomain.getStorageDomainType ( ) . isDataDomain ( ) ) && ( ( ( storageDomain.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance ) ) || ( ( storageDomain.getStorageDomainSharedStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached ) ) ) ; return isEditable ; }
public void testGetLunsThatBreakPassDiscardFunctionalityDiscardZeroesTheDataBreaks ( ) { createVmDiskOnSd ( false , false ) ; createVmDiskOnSd ( true , true ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality ( 1024L , false ) ; assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns ( java.util.Arrays.asList ( createLunWithDiscardFunctionality ( 1024L , true ) , lunThatBreaksDiscardZeroesTheDataSupport ) , java.util.Collections.singletonList ( lunThatBreaksDiscardZeroesTheDataSupport ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceSpmStorageVDSCommand.getBroker ( ) . fenceSpmStorage ( org.ovirt.engine.core.vdsbroker.vdsbroker.FenceSpmStorageVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.FenceSpmStorageVDSCommand.getParameters ( ) . getPrevId ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.FenceSpmStorageVDSCommand.getParameters ( ) . getPrevLVER ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.FenceSpmStorageVDSCommand.proceedProxyReturnValue ( ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue ( ) ; setTestResultValue ( res ) ; stopProgress ( ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "" , query ) ; java.util.List < org.ovirt.engine.api.model.Permission > perms = setUpPermissions ( ) ; setUpEntityQueryExpectations ( queryType , queryParams.getClass ( ) , new java.lang.String [ ] { queryParameterName } , new java.lang.Object [ ] { GUIDS [ 1 ] } , perms , failure ) ; }
private void prepareVmToPassCanDoAction ( ) { vmStatic.setName ( "vm1" ) ; vmStatic.setMemSizeMb ( 256 ) ; vmStatic.setSingleQxlPci ( false ) ; mockVmDaoGetVm ( ) ; mockSameNameQuery ( false ) ; mockValidateCustomProperties ( ) ; mockValidatePciAndIdeLimit ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateCpuProfile ( ) ; mockGraphicsDevice ( ) ; }
private void initConditions ( ) { org.mockito.Mockito.when ( dbFacade.getClusterDao ( ) ) . thenReturn ( groupDao ) ; org.mockito.Mockito.when ( groupDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( cluster ) ; org.mockito.Mockito.when ( dbFacade.getInterfaceDao ( ) ) . thenReturn ( interfaceDao ) ; org.mockito.Mockito.when ( interfaceDao.getAllInterfacesForVds ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > emptyList ( ) ) ; }
public void testRemoveLocalStorage ( ) throws java.lang.Exception { setUpGetDomainExpectations ( StorageType.LOCALFS , true ) ; setUpGetConnectionExpectations ( ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveStorageDomain , org.ovirt.engine.core.common.action.RemoveStorageDomainParameters.class , new java.lang.String [ ] { "StorageDomainId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
protected void onInitAllDisks ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { if ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) { allDisks.add ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel.diskToModel ( disk ) ) ; } } }
public void onRemove ( ) { for ( java.lang.Object item : getSelectedItems ( ) ) { org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy = ( ( org.ovirt.engine.core.common.scheduling.ClusterPolicy ) ( item ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RemoveClusterPolicy , new org.ovirt.engine.core.common.scheduling.parameters.ClusterPolicyCRUDParameters ( clusterPolicy.getId ( ) , clusterPolicy ) ) ; } setWindow ( null ) ; getSearchCommand ( ) . execute ( ) ; }
public static org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface findInterfaceByNetworkName ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > items , final java.lang.String name ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( items , new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) { @ java.lang.Override public boolean match ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i ) { return java.util.Objects.equals ( i.getNetworkName ( ) , name ) ; } } ) ; }
public void validateFailsIfHostDoesNotExists ( ) { org.mockito.Mockito.when ( vdsDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommandTest.createParameters ( ) ; org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > command = createCommand ( param ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST ) ; }
public void testUpdate ( ) { existingUser.setFirstName ( "changedname" ) ; existingUser.setLastName ( "changedsurname" ) ; dao.update ( existingUser ) ; org.ovirt.engine.core.common.businessentities.aaa.DbUser result = dao.get ( existingUser.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingUser , result ) ; }
private java.lang.String GetOptionType ( java.lang.String key ) { java.lang.String result = "" ; if ( ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( key ) ) ) && ( org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionTypes.containsKey ( key ) ) ) { result = org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionTypes.get ( key ) ; } return result ; }
public static void isSupportBridgesReportByVDSM ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SupportBridgesReportByVDSM ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
public static boolean isGraphicsAndDisplaySupported ( int osId , java.util.Collection < org.ovirt.engine.core.common.businessentities.GraphicsType > graphics , org.ovirt.engine.core.common.businessentities.DisplayType displayType , java.util.List < java.lang.String > reasons , org.ovirt.engine.core.compat.Version clusterVersion ) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported ( osId , clusterVersion , graphics , displayType ) ; if ( ! result ) { reasons.add ( VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name ( ) ) ; } return result ; }
public static void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.DiscoverSendTargets , new org.ovirt.engine.core.common.vdscommands.DiscoverSendTargetsVDSCommandParameters ( org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getParameters ( ) . getVdsId ( ) , org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getParameters ( ) . getConnection ( ) ) ) . getReturnValue ( ) ) ; }
private void initSpyCommand ( ) { org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateDestDomainsSpaceRequirements ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateCreateAllSnapshotsFromVmCommand ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateQuota ( ) ; org.mockito.Mockito.doReturn ( ActionType.LiveMigrateDisk ) . when ( command ) . getActionType ( ) ; }
protected void initWidget ( com.google.gwt.user.client.ui.Widget wrapperWidget ) { super . initWidget ( wrapperWidget ) ; contentWidgetContainer.setWidget ( contentWidget ) ; label.addStyleName ( OvirtCss.LABEL_ENABLED ) ; com.google.gwt.dom.client.Element contentWidgetElement = getContentWidgetElement ( ) ; if ( ( ( contentWidgetElement.getId ( ) ) == null ) || ( contentWidgetElement.getId ( ) . isEmpty ( ) ) ) { setElementId ( com.google.gwt.user.client.DOM.createUniqueId ( ) ) ; } }
public void testNetworkExistWhenBothNetworkNameAndNetworkIdAreSet ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkName ( "network" ) ; networkAttachment.setNetworkId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( networkAttachment ) . networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testIsValidNonIpv6Host ( ) { final org.ovirt.engine.ui.uicommonweb.UriAuthority underTest = new org.ovirt.engine.ui.uicommonweb.UriAuthority ( ( ( ( org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.NON_IPV6_ADDRESS ) + ( org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.COLON ) ) + ( org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.PORT ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( underTest.isValid ( ) , org.hamcrest.Matchers.is ( true ) ) ; org.hamcrest.MatcherAssert.assertThat ( underTest.getHost ( ) , org.hamcrest.Matchers.is ( org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.NON_IPV6_ADDRESS ) ) ; org.hamcrest.MatcherAssert.assertThat ( underTest.getPort ( ) , org.hamcrest.Matchers.is ( org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.PORT ) ) ; }
protected boolean validateSoundDevice ( ) { if ( ! ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isSoundDeviceExists ( getVm ( ) . getManagedVmDeviceMap ( ) . values ( ) ) ) ) { return true ; } if ( ! ( osRepository.isSoundDeviceEnabled ( getVm ( ) . getStaticData ( ) . getOsId ( ) , getEffectiveCompatibilityVersion ( ) ) ) ) { addValidationMessageVariable ( "clusterArch" , org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup ( ) . getArchitecture ( ) ) ; return failValidation ( EngineMessage.SOUND_DEVICE_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; } return true ; }
public static void getDefaultTimeZone ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.TimeZoneType timeZoneType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return "" ; } } ; org.ovirt.engine.core.common.queries.TimeZoneQueryParams params = new org.ovirt.engine.core.common.queries.TimeZoneQueryParams ( ) ; params.setTimeZoneType ( timeZoneType ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetDefaultTimeZone , params , aQuery ) ; }
public void testUpdate ( ) { org.ovirt.engine.core.common.businessentities.network.Network before = dao.getByName ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME1 ) ; before.setDescription ( "This is a completely changed description" ) ; dao.update ( before ) ; org.ovirt.engine.core.common.businessentities.network.Network after = dao.getByName ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME1 ) ; org.junit.Assert.assertNotNull ( after ) ; org.junit.Assert.assertEquals ( before , after ) ; }
public void testGetByClusterId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = dao.getByClusterId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID ) ; org.junit.Assert.assertNotNull ( volumes ) ; org.junit.Assert.assertEquals ( 2 , volumes.size ( ) ) ; org.junit.Assert.assertTrue ( volumes.contains ( existingDistVol ) ) ; org.junit.Assert.assertTrue ( volumes.contains ( existingReplVol ) ) ; }
public org.ovirt.engine.api.model.Networks list ( ) { org.ovirt.engine.api.model.Networks networks ; if ( isFiltered ( ) ) { networks = mapCollection ( getBackendCollection ( queryType , getQueryParameters ( ) ) ) ; } else { networks = mapCollection ( getBackendCollection ( SearchType.Network ) ) ; } for ( org.ovirt.engine.api.model.Network network : networks.getNetworks ( ) ) { network.setDisplay ( null ) ; } return networks ; }
private void setupConsole ( final org.ovirt.engine.ui.userportal.uicommon.model.basic.UserPortalBasicListProvider modelProvider ) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item = modelProvider.getModel ( ) . getSelectedItem ( ) ; getView ( ) . setConsoleConnectLinkEnabled ( canConnectToConsole ( item ) ) ; getView ( ) . setEditConsoleEnabled ( isEditConsoleEnabled ( item ) ) ; if ( ! ( item.getVmConsoles ( ) . canConnectToConsole ( ) ) ) { getView ( ) . setConsoleWarningMessage ( item.getVmConsoles ( ) . cannotConnectReason ( ) ) ; } else { getView ( ) . setConsoleProtocol ( determineProtocolMessage ( item.getVmConsoles ( ) ) ) ; } }
public org.ovirt.engine.api.model.Hook getHook ( org.ovirt.engine.api.model.Hooks hooks ) { java.lang.String hookId = guid.toString ( ) ; for ( org.ovirt.engine.api.model.Hook hook : hooks.getHooks ( ) ) { if ( hook.getId ( ) . equals ( hookId ) ) { return hook ; } } return notFound ( ) ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
private void initMaximalVmMemSize32OS ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaximalVmMemSize32OS ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel vmModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; vmModel.set_MaxMemSize32 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; } } , getHash ( ) ) ) ; }
public void canDoActionSameSourceAndDest ( ) throws java.lang.Exception { destStorageId = srcStorageId ; initializeCommand ( ImageOperation.Move ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk ( ) ; initSrcStorageDomain ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME.toString ( ) ) ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVmNicFilterParameter , org.ovirt.engine.core.common.action.VmNicFilterParameterParameters.class , new java.lang.String [ ] { "VmId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.VM_ID } , true , true ) ) ; org.ovirt.engine.api.model.NetworkFilterParameter parameter = resource.update ( getParameter ( ) ) ; org.junit.Assert.assertNotNull ( parameter ) ; }
private void extractBondIfModified ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface , java.lang.String bondName ) { if ( ! ( bonds.containsKey ( bondName ) ) ) { bonds.put ( bondName , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > ( ) ) ; } if ( interfaceWasModified ( iface ) ) { modifiedBonds.put ( bondName , iface ) ; } }
protected boolean validateNetworkProviderProperties ( org.ovirt.engine.core.compat.Guid providerId , java.lang.String networkMappings ) { org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator ( org.ovirt.engine.core.bll.VdsCommand.getProviderDao ( ) . get ( providerId ) ) ; return ( ( ( validate ( validator.providerIsSet ( ) ) ) && ( validate ( validator.providerTypeValid ( ) ) ) ) && ( validate ( validator.networkMappingsProvided ( networkMappings ) ) ) ) && ( validate ( validator.messagingBrokerProvided ( ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String uri , java.lang.String username , java.lang.String password , java.util.List < java.lang.String > vmsNames ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.getExternalVMs ( uri , username , password , vmsNames ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext ( org.ovirt.engine.core.compat.Guid commandId ) { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext ( ) ; defaultContext.setCommandId ( commandId ) ; defaultContext.setCommandType ( getClass ( ) . getName ( ) ) ; defaultContext.setBusinessEntitySnapshotDao ( getBusinessEntitySnapshotDao ( ) ) ; defaultContext.setSnapshotSerializer ( org.ovirt.engine.core.utils.SerializationFactory.getSerializer ( ) ) ; return defaultContext ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . stopProgress ( ) ; java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > clusterFeatures = ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( returnValue ) ) ; java.util.Set < org.ovirt.engine.core.common.businessentities.AdditionalFeature > featuresEnabled = new java.util.HashSet < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ( ) ; for ( org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature : clusterFeatures ) { if ( feature.isEnabled ( ) ) { featuresEnabled.add ( feature.getFeature ( ) ) ; } } updateAddtionClusterFeatureList ( features , featuresEnabled ) ; }
public void getExternalProviderComputeResourceList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetComputeResourceFromExternalProvider , params , aQuery ) ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , C value , com.google.gwt.safehtml.shared.SafeHtml tooltipContent , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < C > valueUpdater ) { super . onBrowserEvent ( context , parent , value , tooltipContent , event , valueUpdater ) ; com.google.gwt.dom.client.EventTarget eventTarget = event.getEventTarget ( ) ; if ( ! ( com.google.gwt.dom.client.Element.is ( eventTarget ) ) ) { return ; } if ( BrowserEvents.CLICK.equals ( event.getType ( ) ) ) { onClick ( value ) ; } }
public java.lang.String getValue ( java.lang.Object object ) { java.lang.String originalName = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getName ( ) ; java.lang.String givenName = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm ( ) . getName ( ) ; return originalName.equals ( givenName ) ? givenName : ( ( givenName + " (" ) + originalName ) + ")" ; }
public static void loadDbFacadeConfig ( ) { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance ( ) ; try { org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.connectionTimeout = config.getInteger ( "ENGINE_DB_CONNECTION_TIMEOUT" ) ; org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.checkInterval = config.getInteger ( "ENGINE_DB_CHECK_INTERVAL" ) ; } catch ( java.lang.Exception exception ) { org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.log.warn ( ( "Can't load connection checking parameters of DB facade, " + "will continue using the default values. Error: {}" ) , exception.getMessage ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.log.debug ( "Exception" , exception ) ; } }
public static java.lang.Integer getMaxMemorySizeInMb ( int osId , org.ovirt.engine.core.compat.Version clusterVersion ) { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . getMaximumRam ( osId , clusterVersion ) ; }
private void alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters ( ) . getTargetVdsID ( ) ) ; alert.addCustomValue ( "Reason" , reason ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.Alert ( alert , logType , auditLogDirector ) ; }
protected java.lang.Object runPublicQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , org.ovirt.engine.core.common.queries.QueryParametersBase queryParams , java.lang.String sessionId ) { initQueryParams ( queryParams , sessionId ) ; org.ovirt.engine.core.common.queries.QueryReturnValue result = backend.runPublicQuery ( queryType , queryParams ) ; return ( result != null ) && ( result.getSucceeded ( ) ) ? result.getReturnValue ( ) : null ; }
public java.lang.Void runInTransaction ( ) { buildChildCommandInfos ( ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > > entry : childCommandInfoMap.entrySet ( ) ) { org.ovirt.engine.core.bll.CommandBase < ? > command = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler ( log ) . createAction ( entry.getValue ( ) . getFirst ( ) , entry.getValue ( ) . getSecond ( ) , context ) ; command.insertAsyncTaskPlaceHolders ( ) ; childCommandsMap.put ( entry.getKey ( ) , command ) ; } return null ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 , 0 , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveCpuProfile , org.ovirt.engine.core.common.action.CpuProfileParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
private void setCookie ( final javax.servlet.http.HttpServletResponse response , final javax.servlet.ServletContext servletContext , final java.util.Locale userLocale ) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie ( org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE , userLocale.toString ( ) ) ; cookie.setPath ( org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH ) ; cookie.setMaxAge ( java.lang.Integer.MAX_VALUE ) ; response.addCookie ( cookie ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { if ( ( org.ovirt.engine.core.bll.UpdateVmVersionCommand.getParameters ( ) . isLockVm ( ) ) && ( ( org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmId ( ) ) != null ) ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; } return null ; }
public void customPropertiesNotSupported ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork ( ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( "eth0" , network ) ; mockExistingIfaces ( iface ) ; iface.setCustomProperties ( createCustomProperties ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( iface ) ) ; validateAndExpectViolation ( helper , EngineMessage.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED , network.getName ( ) ) ; }
private void addHostsToCluster ( ) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList < > ( ) ; hosts.add ( host ) ; org.mockito.Mockito.when ( vdsDao.getAllForStoragePool ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( hosts ) ; }
protected void registerRollbackHandler ( org.ovirt.engine.core.utils.transaction.TransactionCompletionListener transactionCompletionListener ) { if ( ( org.ovirt.engine.core.utils.transaction.TransactionSupport.current ( ) ) != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.registerRollbackHandler ( transactionCompletionListener ) ; } }
public void templateWithVersion_SelectedItemChanged ( ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion selectedTemplateWithVersion = getModel ( ) . getTemplateWithVersion ( ) . getSelectedItem ( ) ; if ( selectedTemplateWithVersion != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate selectedTemplate = selectedTemplateWithVersion.getTemplateVersion ( ) ; selectedTemplateChanged ( selectedTemplate ) ; } }
private void initEditors ( ) { statusEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelLabelEditor < org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus > ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus > ( ) , new com.google.gwt.text.shared.Parser < org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus parse ( java.lang.CharSequence text ) throws java.text.ParseException { return org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf ( text.toString ( ) . toUpperCase ( ) ) ; } } ) ; clientsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable < org.ovirt.engine.ui.uicommonweb.models.ListModel > ( false , true ) ; memoryPoolsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable < org.ovirt.engine.ui.uicommonweb.models.ListModel > ( false , true ) ; }
protected org.ovirt.engine.api.model.DataCenter deprecatedPopulate ( org.ovirt.engine.api.model.DataCenter model , org.ovirt.engine.core.common.businessentities.storage_pool entity ) { org.ovirt.engine.core.common.queries.GetAvailableStoragePoolVersionsParameters parameters = new org.ovirt.engine.core.common.queries.GetAvailableStoragePoolVersionsParameters ( ) ; parameters.setStoragePoolId ( new org.ovirt.engine.core.compat.Guid ( model.getId ( ) ) ) ; model.setSupportedVersions ( getMapper ( java.util.List.class , org.ovirt.engine.api.model.SupportedVersions.class ) . map ( getEntity ( java.util.ArrayList.class , VdcQueryType.GetAvailableStoragePoolVersions , parameters , model.getId ( ) ) , null ) ) ; return model ; }
protected void mockOsRepository ( ) { org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.ovirt.engine.core.bll.VmHandler.init ( ) ; org.mockito.Mockito.when ( osRepository.isWindows ( 0 ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( osRepository.isCpuSupported ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) , org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( true ) ; }
public void testDifferentCluster ( ) { parameters.put ( PolicyUnitParameter.HE_SPARES_COUNT.getDbName ( ) , "5" ) ; hostedEngine.setVmMemSizeMb ( 7000 ) ; hostedEngine.setClusterId ( Guid.SYSTEM ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = policyUnit.filter ( cluster , hosts , vm , parameters , messages ) ; org.junit.jupiter.api.Assertions.assertEquals ( 5 , result.size ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValueObj ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) ; java.lang.Object returnValue2 = returnValue.getReturnValue ( ) ; this . allNics = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( returnValue2 ) ) ; queryNetworkAttachments ( ) ; }
public java.lang.Integer getMemSharedPercent ( ) { java.lang.Long shared = mVdsStatistics.getmem_shared ( ) ; java.lang.Integer physical = mVdsDynamic.getphysical_mem_mb ( ) ; if ( ( ( shared == null ) || ( physical == null ) ) || ( physical == 0 ) ) { return 0 ; } return ( ( int ) ( shared * 100 ) ) / physical ; }
public void convertValidPropertiesToString ( ) { org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils utils = new org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils ( ) ; java.util.Map < java.lang.String , java.lang.String > propMap = new java.util.LinkedHashMap < > ( ) ; propMap.put ( "speed" , "1024" ) ; propMap.put ( "duplex" , "half" ) ; propMap.put ( "debug" , null ) ; propMap.put ( "verbose" , "" ) ; java.lang.String propStr = utils.convertProperties ( propMap ) ; org.junit.jupiter.api.Assertions.assertEquals ( "speed=1024;duplex=half;debug=;verbose=" , propStr ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.OneMapReturnForXmlRpc get_image_transfer_session_stats ( java.lang.String ticketId ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.get_image_transfer_session_stats" ) . withParameter ( "ticketUUID" , ticketId ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "statsMap" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.OneMapReturnForXmlRpc ( response ) ; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getQuotaClusterParameterMap ( org.ovirt.engine.core.compat.Guid quotaId , org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource clusterQuotaParameterMap = createQuotaIdParameterMapper ( quotaCluster.getQuotaClusterId ( ) ) . addValue ( "quota_id" , quotaId ) . addValue ( "cluster_id" , quotaCluster.getClusterId ( ) ) . addValue ( "storage_id" , null ) . addValue ( "storage_size_gb" , null ) . addValue ( "virtual_cpu" , quotaCluster.getVirtualCpu ( ) ) . addValue ( "mem_size_mb" , quotaCluster.getMemSizeMB ( ) ) ; return clusterQuotaParameterMap ; }
private void start ( ) { if ( ( getSelectedItems ( ) ) == null ) { return ; } java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeActionParameters ( volume.getId ( ) , false ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.StartGlusterVolume , list ) ; }
public void networkExists ( ) { simulateVdsGroupExists ( ) ; org.mockito.Mockito.when ( mockNetworkDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( getNetwork ( ) ) ; org.mockito.Mockito.when ( mockNetworkClusterDao.get ( param.getNetworkCluster ( ) . getId ( ) ) ) . thenReturn ( param.getNetworkCluster ( ) ) ; assertValidateFailure ( EngineMessage.NETWORK_ALREADY_ATTACHED_TO_CLUSTER.toString ( ) ) ; }
public void getStorageDomainDefaultWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return ( ( java.lang.Boolean ) ( returnValue ) ) ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters params = new org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters ( storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainDefaultWipeAfterDelete , params , aQuery ) ; }
private void nameNotChangedOrNotTakenTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher ) { org.ovirt.engine.core.common.businessentities.network.NetworkQoS otherQos = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS ( ) ; allQos.add ( otherQos ) ; allQos.add ( oldQos ) ; otherQos.setName ( "foo" ) ; oldQos.setName ( "bar" ) ; org.hamcrest.MatcherAssert.assertThat ( validator.nameNotChangedOrNotTaken ( ) , matcher ) ; }
public com.google.gwt.event.dom.client.HasClickHandlers addRunButton ( ) { org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton button = new org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton ( null , resources.playIcon ( ) , resources.playDisabledIcon ( ) , style.runButtonAdditionalStyle ( ) ) ; button.setElementId ( org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId ( elementId , "runButton" ) ) ; this . runButton = button ; addButtonToPanel ( button ) ; return button ; }
public static void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public java.util.Map < java.lang.String , java.lang.String > getVMProperties ( org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { separateCustomPropertiesToUserAndPredefined ( version , vmBase ) ; java.util.Map < java.lang.String , java.lang.String > map = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; getPredefinedProperties ( version , vmBase , map ) ; getUserDefinedProperties ( version , vmBase , map ) ; return map ; }
private void refreshCapabilities ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.VdsActionParameters ( vds.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction ( VdcActionType.RefreshHostCapabilities , list , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
public void attestationServerNotConfiguredProperly ( ) { mockConfigRule.mockConfigValue ( ConfigValues.AttestationServer , StringUtils.EMPTY ) ; org.mockito.Mockito.when ( cluster.supportsTrustedService ( ) ) . thenReturn ( true ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ; org.junit.Assert.assertThat ( validator.attestationServerConfigured ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.VDS_GROUP_CANNOT_SET_TRUSTED_ATTESTATION_SERVER_NOT_CONFIGURED ) ) ; }
public static void getVmTemplatesWithPermittedAction ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters ( ) ; getEntitiesWithPermittedActionParameters.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesWithPermittedAction , getEntitiesWithPermittedActionParameters , aQuery ) ; }
protected void setUpGetSystemStatisticsExpectations ( ) { org.ovirt.engine.core.common.queries.QueryReturnValue queryResult = new org.ovirt.engine.core.common.queries.QueryReturnValue ( ) ; org.mockito.Mockito.when ( backend.runQuery ( org.mockito.Mockito.eq ( QueryType.GetSystemStatistics ) , queryParams ( ) ) ) . thenReturn ( queryResult ) ; queryResult.setSucceeded ( true ) ; queryResult.setReturnValue ( setUpStats ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm GetDefaultVdsSelectionAlgorithm ( ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.ui.uicommonweb.DataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.VdsSelectionAlgorithm , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) ) ; if ( ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) && ( ( returnValue.getReturnValue ( ) ) != null ) ) { return org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm.valueOf ( ( ( java.lang.String ) ( returnValue.getReturnValue ( ) ) ) ) ; } return org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm.None ; }
public void getHostListByStatus ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > aQuery , org.ovirt.engine.core.common.businessentities.VDSStatus status , boolean doRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Host: " + ( status == null ? "" : "status=" + ( status.name ( ) ) ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; searchParameters.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , ( doRefresh ? searchParameters : searchParameters.withoutRefresh ( ) ) , aQuery ) ; }
private void plugToExternalNetwork ( ) { java.util.Map < java.lang.String , java.lang.String > runtimeProperties = getProviderProxy ( ) . allocate ( getNetwork ( ) , vnicProfile , org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getNic ( ) , org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVds ( ) ) ; if ( runtimeProperties != null ) { org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm ( ) . getRuntimeDeviceCustomProperties ( ) . put ( vmDevice.getId ( ) , runtimeProperties ) ; } }
private void initConditions ( ) { org.mockito.Mockito.when ( dbFacade.getClusterDao ( ) ) . thenReturn ( groupDao ) ; org.mockito.Mockito.when ( groupDao.get ( ( ( org.ovirt.engine.core.compat.Guid ) ( org.mockito.Matchers.any ( ) ) ) ) ) . thenReturn ( cluster ) ; org.mockito.Mockito.when ( dbFacade.getInterfaceDao ( ) ) . thenReturn ( interfaceDao ) ; org.mockito.Mockito.when ( interfaceDao.getAllInterfacesForVds ( ( ( org.ovirt.engine.core.compat.Guid ) ( org.mockito.Matchers.any ( ) ) ) ) ) . thenReturn ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > emptyList ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ! ( sameEntity ( listModel.getSelectedItem ( ) , model ) ) ) { getView ( ) . setNotSelected ( model.isVmUp ( ) , consoleInUse ( ) ) ; } else { getView ( ) . setSelected ( ) ; } }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel object ) { driver.edit ( object ) ; pathHintLabel.setVisible ( ( ( object.getPath ( ) . getIsAvailable ( ) ) && ( object.getPath ( ) . getIsChangable ( ) ) ) ) ; StyleTextBoxEditor ( pathEditor , object.getPath ( ) ) ; StyleTextBoxEditor ( vfsTypeEditor , object.getVfsType ( ) ) ; StyleTextBoxEditor ( mountOptionsEditor , object.getMountOptions ( ) ) ; }
private void endCopyCollapseOperations ( org.ovirt.engine.core.common.businessentities.VM vm ) { vm.setVmtGuid ( VmTemplateHandler.BlankVmTemplateId ) ; vm.setVmtName ( null ) ; org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.bll.ExportVmCommand.getDbFacade ( ) . getSnapshotDao ( ) . get ( org.ovirt.engine.core.bll.ExportVmCommand.getDbFacade ( ) . getSnapshotDao ( ) . getId ( vm.getId ( ) , SnapshotType.ACTIVE ) ) ; vm.setSnapshots ( java.util.Arrays.asList ( activeSnapshot ) ) ; updateCopyVmInSpm ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getStoragePoolId ( ) , vm , org.ovirt.engine.core.bll.ExportVmCommand.getParameters ( ) . getStorageDomainId ( ) ) ; }
private void debugQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Query type '{}', Parameters '{}'" , queryType , parameters ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( args.propertyName.equals ( importModel.ON_DISK_LOAD ) ) { table.asEditor ( ) . edit ( table.asEditor ( ) . flush ( ) ) ; } else if ( args.propertyName.equals ( "Message" ) ) { message.setText ( importModel.getMessage ( ) ) ; } else if ( args.propertyName.equals ( "WinWithoutVirtioMessage" ) ) { winWithoutVirtioMessage.setText ( importModel.getWinWithoutVirtioMessage ( ) ) ; } }
public void testNetworkExistWhenBothNetworkNameAndNetworkIdAreSet ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkName ( org.ovirt.engine.core.bll.validator.NetworkAttachmentValidatorTest.NETWORK_NAME ) ; networkAttachment.setNetworkId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( createNetworkAttachmentValidator ( networkAttachment ) . networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void getFloppyImageList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { getIrsImageList ( aQuery , storagePoolId , false , ImageFileType.Floppy ) ; }
public void shouldNotMigrateVmOnClusterTwoWhileMigrating ( ) { final org.ovirt.engine.core.common.businessentities.VM migratingVM = new org.ovirt.engine.core.common.businessentities.VM ( ) ; migratingVM.setClusterId ( cluster2.getId ( ) ) ; org.mockito.Mockito.when ( clusterDao.getWithoutMigratingVms ( ) ) . thenReturn ( java.util.Collections.singletonList ( cluster1 ) ) ; arem.refresh ( ) ; org.mockito.Mockito.verify ( arem ) . migrateVM ( vm1 ) ; org.mockito.Mockito.verify ( arem , org.mockito.Mockito.times ( 1 ) ) . migrateVM ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; }
public static void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters ( ) , aQuery ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { org.ovirt.engine.api.model.Network entity = org.ovirt.engine.api.restapi.types.NetworkMapper.map ( network , null ) ; org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = getIscsiBond ( ) ; iscsiBond.getNetworkIds ( ) . add ( entity.getId ( ) ) ; return performAction ( ActionType.EditIscsiBond , new org.ovirt.engine.core.common.action.EditIscsiBondParameters ( iscsiBond ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getClusterByServiceList ( list , supportsVirtService , supportsGlusterService ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Watchdog model , org.ovirt.engine.core.common.businessentities.VmWatchdog entity ) { validateEnums ( org.ovirt.engine.api.model.Watchdog.class , model ) ; org.ovirt.engine.core.common.action.WatchdogParameters params = new org.ovirt.engine.core.common.action.WatchdogParameters ( ) ; params.setModel ( org.ovirt.engine.core.common.businessentities.VmWatchdogType.getByName ( model.getModel ( ) ) ) ; params.setAction ( org.ovirt.engine.core.common.businessentities.VmWatchdogAction.getByName ( model.getAction ( ) ) ) ; params.setId ( parentId ) ; params.setVm ( parentIsVm ) ; return params ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createImage ( ) { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; diskImage.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) ; return diskImage ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; clusterGuideModel.hosts = hosts ; clusterGuideModel.updateOptionsNonLocalFS ( ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = new org.ovirt.engine.api.model.Disk ( ) ; model.setName ( NAMES [ 0 ] ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Disk" , "add" , "provisionedSize|size" , "format" , "interface" ) ; } }
private void setFallbackProtocol ( org.ovirt.engine.core.common.businessentities.VdsProtocol protocol ) { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = this . vds.getStaticData ( ) ; vdsStatic.setProtocol ( protocol ) ; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { vdsStaticDao.update ( vdsStatic ) ; return null ; } } ) ; }
protected void dataCenter_SelectedItemChanged ( ) { updateStorageDomains ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) . getId ( ) ) ; updateClusters ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) . getId ( ) ) ; }
private void initListeners ( final org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalConsolePopupModel model ) { org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice = extractSpice ( model ) ; if ( spice == null ) { return ; } viewUpdatingListener = new org.ovirt.engine.core.compat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { getView ( ) . edit ( model ) ; } } ; spice.getUsbAutoShareChangedEvent ( ) . addListener ( viewUpdatingListener ) ; spice.getWANColorDepthChangedEvent ( ) . addListener ( viewUpdatingListener ) ; spice.getWANDisableEffectsChangeEvent ( ) . addListener ( viewUpdatingListener ) ; }
private void addEventsHandlers ( final org.ovirt.engine.ui.uicommonweb.models.storage.ImportFcpStorageModel object ) { object.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( propName.equals ( "IsValid" ) ) { onIsValidPropertyChange ( object ) ; } else if ( propName.equals ( "Message" ) ) { message.setText ( object.getMessage ( ) ) ; } } } ) ; }
public void testIsBlockDomain ( ) { junit.framework.Assert.assertTrue ( StorageType.FCP.isBlockDomain ( ) ) ; junit.framework.Assert.assertTrue ( StorageType.ISCSI.isBlockDomain ( ) ) ; junit.framework.Assert.assertFalse ( StorageType.NFS.isBlockDomain ( ) ) ; junit.framework.Assert.assertFalse ( StorageType.LOCALFS.isBlockDomain ( ) ) ; junit.framework.Assert.assertFalse ( StorageType.POSIXFS.isBlockDomain ( ) ) ; junit.framework.Assert.assertFalse ( StorageType.GLUSTERFS.isBlockDomain ( ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( ( ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage ( ) ) != null ? org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage ( ) . getId ( ) : org.ovirt.engine.core.compat.Guid.Empty ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.DISK , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public java.lang.Object lookupEntity ( java.lang.Object id ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.businessentities.VM vm = doGetEntity ( org.ovirt.engine.core.common.businessentities.VM.class , query , getQueryParams ( queryParamsClass , id ) , id.toString ( ) ) ; org.ovirt.engine.core.common.businessentities.VM model = new org.ovirt.engine.core.common.businessentities.VM ( ) ; model.setId ( vm.getId ( ) . toString ( ) ) ; return org.ovirt.engine.api.utils.LinkHelper.addLinks ( getUriInfo ( ) , model ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > getImages ( ) { return vmStatic.getImages ( ) ; }
public javax.xml.bind.Marshaller getMarshaller ( ) throws javax.xml.bind.JAXBException { if ( ( marshaller ) == null ) { marshaller = context.createMarshaller ( ) ; marshaller.setProperty ( javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT , true ) ; marshaller.setProperty ( javax.xml.bind.Marshaller.JAXB_ENCODING , StringUtils.UTF8.toString ( ) ) ; } return marshaller ; }
public static void updateSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId , boolean smartcardEnabled ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao ( ) . getVmDeviceByVmIdTypeAndDevice ( vmId , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD.getName ( ) ) ; if ( ! smartcardEnabled ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice device : vmDevices ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.remove ( device.getId ( ) ) ; } } else if ( vmDevices.isEmpty ( ) ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addSmartcardDevice ( vmId ) ; } }
private void prepareVmToPassCanDoAction ( ) { vmStatic.setName ( "vm1" ) ; vmStatic.setMemSizeMb ( 256 ) ; vmStatic.setSingleQxlPci ( false ) ; mockVmDaoGetVm ( ) ; mockSameNameQuery ( false ) ; mockValidateCustomProperties ( ) ; mockValidatePciAndIdeLimit ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateCpuProfile ( ) ; mockGraphicsDevice ( ) ; }
public void testAdd ( ) throws java.lang.Exception { setUpAddExpectations ( ) ; setUpCreationExpectations ( ) ; javax.ws.rs.core.Response response = doAdd ( getRestModel ( 0 ) ) ; org.junit.Assert.assertEquals ( 201 , response.getStatus ( ) ) ; org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.verifyModel ( ( ( R ) ( response.getEntity ( ) ) ) , 0 ) ; org.junit.Assert.assertNull ( ( ( R ) ( response.getEntity ( ) ) ) . getCreationStatus ( ) ) ; }
public void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
protected void setDefaultMigrationPolicy ( ) { if ( ( org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) ) != null ) { boolean isMigrationSupported = org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported ( org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getArchitecture ( ) , org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getcompatibility_version ( ) ) ; org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport = ( isMigrationSupported ) ? org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE : org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ; org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . setMigrationSupport ( migrationSupport ) ; } }
private boolean registerLibvirtSecrets ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = libvirtSecretDao.getAllByStoragePoolIdFilteredByActiveStorageDomains ( getStoragePoolId ( ) ) ; if ( ( ! ( libvirtSecrets.isEmpty ( ) ) ) && ( ! ( registerLibvirtSecrets ( libvirtSecrets , false ) ) ) ) { setNonOperational ( NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE ) ; return false ; } return true ; }
public org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fence ( org.ovirt.engine.core.common.businessentities.FenceActionType action , org.ovirt.engine.core.common.businessentities.FenceAgent agent ) { boolean withRetries = action != ( org.ovirt.engine.core.common.businessentities.FenceActionType.Status ) ; org.ovirt.engine.core.common.businessentities.VDS proxyHost = new org.ovirt.engine.core.bll.FenceProxyLocator ( _vds , fencingPolicy ) . findProxyHost ( withRetries ) ; if ( proxyHost == null ) { return proxyNotFound ( ) ; } else { return fence ( action , agent , proxyHost ) ; } }
public int hashCode ( ) { final int prime = 31 ; int result = super . hashCode ( ) ; result = ( prime * result ) + ( ( usingScsiReservation ) == null ? 0 : usingScsiReservation.hashCode ( ) ) ; result = ( prime * result ) + ( ( lun ) == null ? 0 : lun.hashCode ( ) ) ; return result ; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog ( final org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.setVmId ( iface.getVmId ( ) . getValue ( ) ) ; logable.addCustomValue ( "MACAddr" , iface.getMacAddress ( ) ) ; logable.addCustomValue ( "IfaceName" , iface.getName ( ) ) ; return logable ; }
private static void putHost ( java.util.Map < java.lang.String , java.util.Set < org.ovirt.engine.core.common.businessentities.VDS > > osToHostIdMap , org.ovirt.engine.core.common.businessentities.VDS host , org.ovirt.engine.core.bll.scheduling.OS hostOs ) { if ( ! ( osToHostIdMap.containsKey ( hostOs.getOsFamily ( ) ) ) ) { osToHostIdMap.put ( hostOs.getOsFamily ( ) , new java.util.HashSet < org.ovirt.engine.core.common.businessentities.VDS > ( ) ) ; } osToHostIdMap.get ( hostOs.getOsFamily ( ) ) . add ( host ) ; }
public void testHostsRuleStructure ( ) throws java.lang.Exception { org.ovirt.engine.api.model.AffinityGroup model = new org.ovirt.engine.api.model.AffinityGroup ( ) ; org.ovirt.engine.api.model.AffinityRule rule = new org.ovirt.engine.api.model.AffinityRule ( ) ; rule.setEnabled ( true ) ; rule.setEnforcing ( true ) ; rule.setPositive ( false ) ; model.setHostsRule ( rule ) ; org.ovirt.engine.api.model.AffinityGroup entity = new org.ovirt.engine.api.model.AffinityGroup ( ) ; org.ovirt.engine.api.restapi.types.AffinityGroupMapper.map ( model , entity ) ; assertEquals ( EntityAffinityRule.NEGATIVE , entity.getVdsAffinityRule ( ) ) ; assertEquals ( true , entity.isVdsEnforcing ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.VolumeFormat getDiskVolumeFormat ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { if ( storageType.isFileDomain ( ) ) { return org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW ; } else if ( storageType.isBlockDomain ( ) ) { switch ( volumeType ) { case Sparse : return org.ovirt.engine.core.common.businessentities.VolumeFormat.COW ; case Preallocated : return org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW ; default : return org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned ; } } else { return org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned ; } }
public int getMaxNameLength ( ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getMaxVmNameLength ( ) ; }
public void getMaxSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 10 ) ; }
private void addWatchdogActions ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.WatchdogAction [ ] values ) { if ( org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_3 ) ) { version.setWatchdogActions ( new org.ovirt.engine.api.model.WatchdogActions ( ) ) ; for ( org.ovirt.engine.api.model.WatchdogAction watchdogAction : values ) { version.getWatchdogActions ( ) . getWatchdogActions ( ) . add ( watchdogAction.value ( ) ) ; } } }
public void testPreferIgnoresCase ( ) { org.junit.Assert.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "Persistent-Auth" ) ) ; org.junit.Assert.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "PERSISTENT-AUTH" ) ) ; org.junit.Assert.assertEquals ( FiltersHelper.PREFER_NEW_AUTH , getPrefer ( "new-auth" ) ) ; org.junit.Assert.assertEquals ( FiltersHelper.PREFER_NEW_AUTH , getPrefer ( "NEW-AUTH" ) ) ; }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable ( ) { java.lang.Boolean allowDupMacs = org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.AllowDuplicateMacAddresses ) ; org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager ( ) ; if ( allowDupMacs || ( ! ( vmInterfaceManager.existsPluggedInterfaceWithSameMac ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getNic ( ) ) ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } else { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_MAC_ADDRESS_IN_USE ) ; } }
public void getGlusterVolumeGeoRepStatusForMasterVolume ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid masterVolumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeGeoRepSessions , new org.ovirt.engine.core.common.queries.IdQueryParameters ( masterVolumeId ) , aQuery ) ; }
public void testDetachVdsFromTag ( ) { dao.detachVdsFromTag ( existingVdsTag.getTagId ( ) , existingVdsTag.getVdsId ( ) ) ; org.ovirt.engine.core.common.businessentities.TagsVdsMap result = dao.getTagVdsByTagIdAndByVdsId ( existingVdsTag.getTagId ( ) , existingVdsTag.getVdsId ( ) ) ; org.junit.jupiter.api.Assertions.assertNull ( result ) ; }
public static void GetExternalProviderHostList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId , boolean filterOutExistingHosts , java.lang.String searchFilter ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetHostListFromExternalProvider , new org.ovirt.engine.core.common.queries.GetHostListFromExternalProviderParameters ( providerId , filterOutExistingHosts , searchFilter ) , aQuery ) ; }
private void mockJobSubjectEntityDao ( org.ovirt.engine.core.compat.Guid jobId ) { org.mockito.Mockito.when ( jobSubjectEntityDao.getJobSubjectEntityByJobId ( org.mockito.ArgumentMatchers.eq ( jobId ) ) ) . thenReturn ( org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP ) ; org.mockito.Mockito.when ( jobSubjectEntityDao.getJobIdByEntityId ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.singletonList ( jobId ) ) ; }
private void initSearchDependencies ( ) { org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter ( org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . getUniqueOsNames ( ) ) ) ; }
private void handleFinalizingFailure ( final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand < T > . StateContext context ) { log.error ( "Finalizing failed transfer. {}" , getTransferDescription ( ) ) ; stopImageTransferSession ( context.entity ) ; if ( ! ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getImageGroupID ( ) ) ) ) { setImageStatus ( ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getTransferType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload ) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ) ) ; } tearDownImage ( context.entity.getVdsId ( ) ) ; updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; setAuditLogTypeFromPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; }
protected void setUpGetClusterExpectations ( int times , java.lang.Object failure ) { while ( ( times -- ) > 0 ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setStoragePoolId ( GUIDS [ 2 ] ) ; setUpEntityQueryExpectations ( VdcQueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , cluster , null ) ; } }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > multipleParams , boolean isRunOnlyIfAllValidationPass , boolean isWaitForResult ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Server: RunMultipleAction invoked! [amount of actions: {}]" , multipleParams.size ( ) ) ; for ( org.ovirt.engine.core.common.action.VdcActionParametersBase params : multipleParams ) { params.setSessionId ( getEngineSessionId ( ) ) ; } java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > returnValues = getBackend ( ) . runMultipleActions ( actionType , multipleParams , isRunOnlyIfAllValidationPass , isWaitForResult ) ; return returnValues ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model ) { org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotCreatePopupWidget.Driver.driver.edit ( model ) ; model.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "Message" . equals ( propName ) ) { appendMessage ( model.getMessage ( ) ) ; } } } ) ; }
private void addDefaultNetworks ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; net.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; net.setName ( org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.ManagementNetwork ) ) ; net.setDescription ( AddVdsGroupCommand.DefaultNetworkDescription ) ; net.setDataCenterId ( org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool ( ) . getId ( ) ) ; net.setVmNetwork ( true ) ; org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getNetworkDAO ( ) . save ( net ) ; }
public static void GetVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void testNotRemovingLabeledNetworksReferencingUnlabeledNetworkRemovalIsOk ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network unlabeledNetwork = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; unlabeledNetwork.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment ( unlabeledNetwork ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator ( java.util.Collections.singletonList ( unlabeledNetwork ) ) ; org.junit.Assert.assertThat ( validator.notRemovingLabeledNetworks ( networkAttachment ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , java.lang.String description , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitiesMap ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { return createTaskImpl ( taskId , asyncTaskCreationInfo , parentCommand , description , entitiesMap ) ; } catch ( java.lang.RuntimeException ex ) { log.errorFormat ( "Error during createTask for command: {0}. Exception {1}" , getClass ( ) . getName ( ) , ex ) ; } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } return org.ovirt.engine.core.compat.Guid.Empty ; }
protected void executeCommand ( ) { if ( org.ovirt.engine.core.bll.CreateSnapshotCommand.canCreateSnapshot ( ) ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = performImageVdsmOperation ( ) ; if ( ( vdsReturnValue != null ) && ( vdsReturnValue.getSucceeded ( ) ) ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { processOldImageFromDb ( ) ; addDiskImageToDb ( mNewCreatedDiskImage , getCompensationContext ( ) ) ; setActionReturnValue ( mNewCreatedDiskImage ) ; setSucceeded ( true ) ; return null ; } } ) ; } } }
public void diskImagesDontExist ( ) { org.mockito.Mockito.doReturn ( false ) . when ( validator ) . isDiskExists ( disk1.getId ( ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . isDiskExists ( disk2.getId ( ) ) ; org.junit.Assert.assertThat ( validator.diskImagesNotExist ( ) , org.junit.matchers.JUnitMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_DISKS_NOT_EXIST ) ) ) ; }
public void getItem_prefixedKeyExists ( ) { org.mockito.Mockito.doReturn ( "LocalValue" ) . when ( tested ) . getLocalItemImpl ( ( ( ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX ) + "LocalKey" ) ) ; java.lang.String localValue = tested.getLocalItem ( "LocalKey" ) ; org.junit.Assert.assertThat ( localValue , org.hamcrest.CoreMatchers.equalTo ( "LocalValue" ) ) ; org.mockito.Mockito.doReturn ( "SessionValue" ) . when ( tested ) . getSessionItemImpl ( ( ( ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX ) + "SessionKey" ) ) ; java.lang.String sessionValue = tested.getSessionItem ( "SessionKey" ) ; org.junit.Assert.assertThat ( sessionValue , org.hamcrest.CoreMatchers.equalTo ( "SessionValue" ) ) ; }
private void postInitTemplate ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates ) { org.ovirt.engine.core.common.businessentities.VmTemplate oldTemplate = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; getModel ( ) . getTemplate ( ) . setItems ( templates ) ; getModel ( ) . getTemplate ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( templates , ( oldTemplate != null ? new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( oldTemplate.getId ( ) ) : new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( org.ovirt.engine.core.compat.NGuid.Empty ) ) ) ) ; updateIsDisksAvailable ( ) ; }
private void setUpDisks ( ) { com.woorea.openstack.cinder.model.Volume existingVolume = volumes.get ( 1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > existingDisks = new java.util.ArrayList ( org.ovirt.engine.core.bll.storage.disk.cinder.CinderBroker.volumesToCinderDisks ( java.util.Collections.singletonList ( existingVolume ) , getQueryParameters ( ) . getId ( ) ) ) ; org.mockito.Mockito.when ( diskDao.getAllFromDisksByDiskStorageType ( DiskStorageType.CINDER , getUser ( ) . getId ( ) , false ) ) . thenReturn ( existingDisks ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getDiskDao ( ) ) . thenReturn ( diskDao ) ; }
protected org.ovirt.engine.core.common.action.ImportVmParameters createParameters ( ) { final org.ovirt.engine.core.common.businessentities.VM v = createVM ( ) ; v.setName ( "testVm" ) ; return new org.ovirt.engine.core.common.action.ImportVmParameters ( v , org.ovirt.engine.core.compat.Guid.NewGuid ( ) , org.ovirt.engine.core.compat.Guid.NewGuid ( ) , org.ovirt.engine.core.compat.Guid.NewGuid ( ) , org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , setUpVDSGroups ( ) , failure ) ; control.replay ( ) ; }
private void setDetailList ( final java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list , final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel templateGeneralModel , final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateVmListModel templateVmListModel , final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel templateInterfaceListModel , final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateStorageListModel templateStorageListModel ) { list.add ( templateGeneralModel ) ; list.add ( templateVmListModel ) ; list.add ( templateInterfaceListModel ) ; list.add ( templateStorageListModel ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetNicsExpectations ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmTemplateInterface , org.ovirt.engine.core.common.action.RemoveVmTemplateInterfaceParameters.class , new java.lang.String [ ] { "VmTemplateId" , "InterfaceId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendInstanceTypeNicResourceTest.INSTANCE_TYPE_ID , org.ovirt.engine.api.restapi.resource.BackendInstanceTypeNicResourceTest.NIC_ID } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
private void nullifyInternalProxies ( ) { if ( ( privatemIrsProxy ) != null ) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.shutDownConnection ( ( ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsServerWrapper ) ( privatemIrsProxy ) ) . getHttpClient ( ) ) ; } privatemCurrentIrsHost = null ; privatemIrsProxy = null ; mCurrentVdsId = null ; }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected void removeSnapshot ( org.ovirt.engine.core.common.businessentities.DiskImage snapshot ) { org.ovirt.engine.core.bll.BaseImagesCommand.getImageStorageDomainMapDao ( ) . remove ( snapshot.getImageId ( ) ) ; getImageDao ( ) . remove ( snapshot.getImageId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > imagesForDisk = org.ovirt.engine.core.bll.BaseImagesCommand.getDiskImageDao ( ) . getAllSnapshotsForImageGroup ( snapshot.getId ( ) ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk.isEmpty ( ) ) ) { getBaseDiskDao ( ) . remove ( snapshot.getId ( ) ) ; } }
public void getConfigurationValueBoolean ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.queries.ConfigurationValues configVal ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( configVal , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void stopTransferIfNecessary ( org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity , long ts , java.lang.Integer idleTimeFromTicket ) { if ( shouldAbortOnClientInactivityTimeout ( entity , ts , idleTimeFromTicket ) ) { if ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getTransferType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.TransferType.Download ) ) { auditLog ( this , AuditLogType.DOWNLOAD_IMAGE_CANCELED_TIMEOUT ) ; updateEntityPhase ( ImageTransferPhase.CANCELLED ) ; } else { updateEntityPhaseToStoppedBySystem ( AuditLogType.UPLOAD_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT ) ; } } }
public void testOffsetMissingParameter ( ) { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm ( ) ; vm.setDescription ( "incomplete" ) ; try { offsetValidateParameters ( vm ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException on incomplete model" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Vm" , "status" ) ; } }
protected org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidator createDiskVmElementValidator ( org.ovirt.engine.core.compat.Guid diskId , org.ovirt.engine.core.compat.Guid vmId ) { return new org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidator ( diskDao.get ( diskId ) , diskVmElementDao.get ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( diskId , vmId ) ) ) ; }
protected void updateLastHeartbeat ( ) { this . lastHeartbeat = java.lang.System.currentTimeMillis ( ) ; }
public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > ( ) ; if ( java.lang.Boolean.TRUE.equals ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getRunAsStateless ( ) ) ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.RunVmOnceCommand.getVm ( ) . getDiskList ( ) ) { list.add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( image.getQuotaId ( ) , null , QuotaConsumptionParameter.QuotaAction.CONSUME , image.getstorage_ids ( ) . get ( 0 ) , image.getActualSize ( ) ) ) ; } } return list ; }
private void handleAddPermissions ( java.lang.String domainName , org.ovirt.engine.core.domains.DomainsConfigurationEntry adUserNameEntry , org.ovirt.engine.core.domains.DomainsConfigurationEntry adUserIdEntry ) { if ( addPermissions ) { updatePermissionsTable ( adUserNameEntry , adUserIdEntry ) ; } else if ( ! ( userHasPermissions ( adUserNameEntry , adUserIdEntry ) ) ) { java.lang.System.out.println ( java.lang.String.format ( INFO_ABOUT_NOT_ADDING_PERMISSIONS , domainName ) ) ; } }
public org.ovirt.engine.core.dal.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { if ( ( ! ( vds.getvds_group_id ( ) . equals ( getVm ( ) . getVdsGroupId ( ) ) ) ) || ( ( vds.getstatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) { sb.append ( "is not in up status or belongs to the VM's cluster" ) ; return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_CLUSTER ; } return null ; }
protected boolean validateDiskInterface ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : images ) { if ( ( ( diskImage.getDiskInterface ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI ) ) && ( ! ( org.ovirt.engine.core.common.FeatureSupported.virtIoScsi ( org.ovirt.engine.core.bll.ImportVmCommand.getEffectiveCompatibilityVersion ( ) ) ) ) ) { return failValidation ( EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL ) ; } } return true ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey , java.lang.String userName ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeGeoRepConfigReset ( volumeName , slaveHost , slaveVolumeName , configKey , userName ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public static void getAttachedTagsToUser ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.setAttachedTagsConverter ( aQuery ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTagsByUserId , new org.ovirt.engine.core.common.queries.GetTagsByUserIdParameters ( id.toString ( ) ) , aQuery ) ; }
protected boolean isDisksAliasNotEmpty ( ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskInfoDestinationMap.values ( ) ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( diskImage.getDiskAlias ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_CANNOT_BE_CREATED_WITH_EMPTY_DISK_ALIAS ) ; } } return true ; }
private void updateActionAvailability ( ) { boolean temp = ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItems ( ) . size ( ) ) == 1 ) ; getCloneCommand ( ) . setIsExecutionAllowed ( temp ) ; getEditCommand ( ) . setIsExecutionAllowed ( temp ) ; getRemoveCommand ( ) . setIsExecutionAllowed ( ( ( ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItems ( ) . size ( ) ) > 0 ) ) && ( ! ( isAnyRoleReadOnly ( getSelectedItems ( ) ) ) ) ) ) ; }
public void canRunForHostedEngine ( ) { org.ovirt.engine.core.common.businessentities.VM hostedEngine = new org.ovirt.engine.core.common.businessentities.VM ( ) ; hostedEngine.setOrigin ( OriginType.MANAGED_HOSTED_ENGINE ) ; underTest.setVm ( hostedEngine ) ; underTest.init ( ) ; org.hamcrest.MatcherAssert.assertThat ( underTest.canRunActionOnNonManagedVm ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void setUp ( ) { org.mockito.Mockito.doReturn ( null ) . when ( cmd ) . getCluster ( ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > filterTemplatesByArchitecture ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > list , org.ovirt.engine.core.common.businessentities.ArchitectureType architecture ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > filteredList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : list ) { if ( ( template.getId ( ) . equals ( Guid.Empty ) ) || ( template.getClusterArch ( ) . equals ( architecture ) ) ) { filteredList.add ( template ) ; } } return filteredList ; }
protected void onRunOnce ( ) { startProgress ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RunVmOnce , createRunVmOnceParams ( ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { stopProgress ( ) ; commandTarget.executeCommand ( runOnceCommand ) ; } } , this ) ; }
protected void expectGetConnections ( org.ovirt.engine.core.dao.StorageServerConnectionDao dao ) { for ( int i = 0 ; i < ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.GUIDS.length ) ; i ++ ) { org.mockito.Mockito.when ( dao.get ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.GUIDS [ i ] . toString ( ) ) ) . thenReturn ( setUpConnection ( i ) ) ; } }
public void validateFailsOnSameServerIncreasingReplica ( ) { initTestCommand ( volumeIdRepl , getBricks ( volumeIdRepl , 2 , true ) , 3 , 0 , false ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol = getMultiBrickVolume ( volumeIdRepl , 4 ) ; vol.setVolumeType ( GlusterVolumeType.DISTRIBUTED_REPLICATE ) ; vol.setReplicaCount ( 2 ) ; org.mockito.Mockito.doReturn ( vol ) . when ( volumeDao ) . getById ( volumeIdRepl ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , boolean valid , boolean success , java.lang.Object taskReturn , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > asyncTasks , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncStatuses , org.ovirt.engine.core.compat.Guid jobId , org.ovirt.engine.core.common.job.JobExecutionStatus jobStatus , java.lang.String baseUri , boolean replay ) { return setUpActionExpectations ( task , clz , names , values , valid , success , taskReturn , asyncTasks , asyncStatuses , jobId , jobStatus , baseUri , replay , org.ovirt.engine.api.restapi.resource.AbstractBackendBaseTest.CANT_DO ) ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { if ( ( org.ovirt.engine.core.utils.servlet.CachingFilter.cachePattern ) == null ) { org.ovirt.engine.core.utils.servlet.CachingFilter.cachePattern = compilePatternFromInitParam ( filterConfig , org.ovirt.engine.core.utils.servlet.CachingFilter.CACHE_INIT_PARAM ) ; } if ( ( org.ovirt.engine.core.utils.servlet.CachingFilter.noCachePattern ) == null ) { org.ovirt.engine.core.utils.servlet.CachingFilter.noCachePattern = compilePatternFromInitParam ( filterConfig , org.ovirt.engine.core.utils.servlet.CachingFilter.NO_CACHE_INIT_PARAM ) ; } if ( ( org.ovirt.engine.core.utils.servlet.CachingFilter.noStorePattern ) == null ) { org.ovirt.engine.core.utils.servlet.CachingFilter.noStorePattern = compilePatternFromInitParam ( filterConfig , org.ovirt.engine.core.utils.servlet.CachingFilter.NO_STORE_INIT_PARAM ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmGuideModel vmGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmGuideModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; vmGuideModel.disks = disks ; vmGuideModel.updateOptionsPostData ( ) ; }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void validateDiskIsOvfStore ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initVmDiskImage ( false ) ; command.getImage ( ) . setContentType ( DiskContentType.OVF_STORE ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) . setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetworkDAO ( ) . save ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) ) ; org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissions ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getCurrentUser ( ) . getUserId ( ) , org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) . getId ( ) , org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getParameters ( ) . isPublicUse ( ) ) ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue ( ) . setActionReturnValue ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded ( true ) ; }
private void updateTaskStatuses ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > > poolsAllTasksMap ) { for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values ( ) ) { if ( task.getShouldPoll ( ) ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncTasksForPoolMap = poolsAllTasksMap.get ( task.getStoragePoolID ( ) ) ; if ( asyncTasksForPoolMap != null ) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get ( task.getVdsmTaskId ( ) ) ; task.UpdateTask ( cachedAsyncTaskStatus ) ; } } } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc remove_image_ticket ( java.lang.String ticketId ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.remove_image_ticket" ) . withParameter ( "uuid" , ticketId ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
private org.ovirt.engine.ui.frontend.server.dashboard.Inventory populateInventoryCache ( ) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis ( ) ; org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory ( ) ; long endTime = java.lang.System.currentTimeMillis ( ) ; if ( enableBackgroundCacheUpdate ) { inventoryCache.put ( org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY , inventory ) ; } else { inventoryCache.put ( org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY , inventory , org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL , java.util.concurrent.TimeUnit.SECONDS ) ; } org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug ( "Dashboard inventoy cache updated in {}ms" , ( endTime - startTime ) ) ; return inventory ; }
public void setSearchString ( java.lang.String value , boolean checkIfNewValue ) { if ( ( ! checkIfNewValue ) || ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( searchString , value ) ) ) ) { searchString = value ; SearchStringChanged ( ) ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SearchString" ) ) ; } }
public void testAddStorageDomainNoHost ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.ovirt.engine.api.model.StorageDomain model = org.ovirt.engine.api.restapi.resource.BackendStorageDomainsResourceTest.getModel ( 0 ) ; verifyIncompleteException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.collection.add ( model ) ) , "StorageDomain" , "add" , "host.id|name" ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel ) ( result.getState ( ) ) ) ; if ( ( ( java.lang.Boolean ) ( model.getIsImportGlusterConfiguration ( ) . getEntity ( ) ) ) ) { localModel.postOnSaveInternalWithImport ( result.getReturnValue ( ) ) ; } else { localModel.PostOnSaveInternal ( result.getReturnValue ( ) ) ; } }
public java.util.List < org.ovirt.engine.core.extensions.mgr.ExtensionProxy > getLoadedExtensions ( ) { java.util.List < org.ovirt.engine.core.extensions.mgr.ExtensionProxy > results = new java.util.ArrayList < > ( loadedEntries.size ( ) ) ; for ( org.ovirt.engine.core.extensions.mgr.ExtensionsManager.ExtensionEntry entry : loadedEntries.values ( ) ) { results.add ( entry.extension ) ; } return results ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , boolean valid , boolean success , java.lang.Object taskReturn , java.lang.String baseUri , boolean replay , java.lang.String errorMessage ) { return setUpActionExpectations ( task , clz , names , values , valid , success , taskReturn , null , null , null , null , baseUri , replay , errorMessage ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory ) { return snapshot ( vmId , disks , memory , false ) ; }
public void testGetSupportedHostFeaturesByHostId ( ) { java.util.Set < java.lang.String > featuresSupported = dao.getSupportedHostFeaturesByHostId ( FixturesTool.HOST_ID ) ; org.junit.Assert.assertNotNull ( "Failed to retrive supported addtional features in the host" , featuresSupported ) ; java.util.Set < java.lang.String > expectedFeatures = new java.util.HashSet < > ( java.util.Arrays.asList ( "TEST_FEATURE_1" , "TEST_FEATURE_2" ) ) ; org.junit.Assert.assertEquals ( "Failed to retrive supported addtional features in the host" , expectedFeatures , featuresSupported ) ; }
protected void verify ( org.ovirt.engine.api.model.ImageTransfer model , org.ovirt.engine.api.model.ImageTransfer transform ) { org.junit.jupiter.api.Assertions.assertNotNull ( transform ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getId ( ) , transform.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getHost ( ) . getId ( ) , transform.getHost ( ) . getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getImage ( ) . getId ( ) , transform.getImage ( ) . getId ( ) ) ; }
protected org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator getStorageDomainsValidator ( org.ovirt.engine.core.compat.Guid spId , java.util.Collection < org.ovirt.engine.core.compat.Guid > sdIds ) { return new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator ( spId , sdIds ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getGlusterVolume ( java.lang.String name , org.ovirt.engine.core.compat.Guid volumeID , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType volumeType , java.lang.String volumeOptions , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks , org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ( ) ; volume.setName ( name ) ; volume.setId ( volumeID ) ; volume.setReplicaCount ( 3 ) ; volume.setVolumeType ( volumeType ) ; volume.setOptions ( volumeOptions ) ; volume.setBricks ( bricks ) ; volume.setStatus ( status ) ; return volume ; }
public void runFailedAutoStartVMs ( java.util.List < org.ovirt.engine.core.compat.Guid > vmIds ) { for ( org.ovirt.engine.core.compat.Guid vmId : vmIds ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; event.setVmId ( vmId ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( event , AuditLogType.HA_VM_FAILED ) ; org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat ( "Highly Available VM went down. Attempting to restart. VM Name: {0}, VM Id: {1}" , event.getVmName ( ) , vmId ) ; } org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance ( ) . addVmsToRun ( vmIds ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterGeoRepKeysUpdate ( java.util.List < java.lang.String > geoRepPubKeys , java.lang.String userName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterGeoRepKeysUpdate ( userName , geoRepPubKeys ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; syncSearch ( ) ; }
private void handleTransferring ( final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand < T > . StateContext context ) { extendTicketIfNecessary ( context ) ; resetPeriodicPauseLogTime ( 0 ) ; pollTransferStatus ( context ) ; }
public void execute ( ) { performPlaceTransition ( ) ; }
private boolean isReplicaCountIncreased ( int replicaCount ) { if ( ( ( ( getGlusterVolume ( ) . getVolumeType ( ) ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.REPLICATE ) ) || ( ( getGlusterVolume ( ) . getVolumeType ( ) ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.DISTRIBUTED_REPLICATE ) ) ) && ( replicaCount > ( getGlusterVolume ( ) . getReplicaCount ( ) ) ) ) { return true ; } else { return false ; } }
protected boolean canDoAction ( ) { if ( ( org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand.getVds ( ) . getKdumpStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.KdumpStatus.ENABLED ) ) { addCanDoActionMessage ( EngineMessage.KDUMP_DETECTION_NOT_CONFIGURED_ON_VDS ) ; return false ; } boolean detectionEnabled = org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand.getVds ( ) . isPmKdumpDetection ( ) ; if ( ! detectionEnabled ) { addCanDoActionMessage ( EngineMessage.KDUMP_DETECTION_NOT_ENABLED_FOR_VDS ) ; } return detectionEnabled ; }
public static void getAllVnicProfiles ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVnicProfiles , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > retval = org.ovirt.engine.core.bll.GetAllVmTemplatesQuery.getDbFacade ( ) . getVmTemplateDao ( ) . getAll ( org.ovirt.engine.core.bll.GetAllVmTemplatesQuery.getUserID ( ) , org.ovirt.engine.core.bll.GetAllVmTemplatesQuery.getParameters ( ) . isFiltered ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : retval ) { AnonymousMethod1 ( template ) ; } org.ovirt.engine.core.bll.GetAllVmTemplatesQuery.getQueryReturnValue ( ) . setReturnValue ( retval ) ; }
public void run ( ) { try { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . isStoragePoolMasterUp ( _storagePoolId ) ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . storagePoolUpEvent ( storagePool , _isSpmStartCalled ) ; } } catch ( java.lang.RuntimeException exp ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.error ( "Error in StoragePoolUpEvent - " , exp ) ; } }
public void testChangeCdUsingMatrixParameter ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , "current" ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( getVm ( ) ) ; setUpActionExpectations ( ActionType.ChangeDisk , org.ovirt.engine.core.common.action.ChangeDiskCommandParameters.class , new java.lang.String [ ] { "CdImagePath" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO } , true , true ) ; org.ovirt.engine.api.model.Cdrom cdrom = getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO ) ; cdrom = resource.update ( cdrom ) ; org.junit.Assert.assertTrue ( cdrom.isSetFile ( ) ) ; }
public void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh ( ) , aQuery ) ; }
private org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModelFromBond ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel model = lineModelFromInterface ( nic ) ; model.setInterface ( nic ) ; model.setIsBonded ( true ) ; model.setBondName ( nic.getName ( ) ) ; model.setAddress ( nic.getIpv4Address ( ) ) ; return model ; }
public void compensate ( java.lang.String commandType , org.ovirt.engine.core.common.businessentities.TransientCompensationBusinessEntity entity ) { switch ( entity.getTransientEntityType ( ) ) { case RELEASE_MACS : handleReleaseMacsCompensation ( ( ( org.ovirt.engine.core.common.businessentities.ReleaseMacsTransientCompensation ) ( entity ) ) ) ; break ; default : throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "Unable to compensate type %s, please handle this compensation in command %s." , BusinessEntitySnapshot.SnapshotType.TRANSIENT_ENTITY , commandType ) ) ; } }
public void acquireLockWait ( org.ovirt.engine.core.utils.lock.EngineLock lock ) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.log.debugFormat ( "Before acquiring and wait lock {0}" , lock ) ; validateLockForAcquireAndWait ( lock ) ; globalLock.lock ( ) ; try { while ( ! ( acquireLockInternal ( lock ) . getFirst ( ) ) ) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.log.infoFormat ( "Failed to acquire lock and wait lock {0}" , lock ) ; releasedLock.await ( ) ; } } catch ( java.lang.InterruptedException e ) { } finally { globalLock.unlock ( ) ; } }
private void prepareMocks ( ) { vdsBrokerFrontendMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.interfaces.VDSBrokerFrontend.class ) ; org.mockito.Mockito.doReturn ( vdsBrokerFrontendMock ) . when ( getQuery ( ) ) . getVdsBroker ( ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionDao ( ) ) . thenReturn ( storageServerConnectionDao ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionLunMapDao ( ) ) . thenReturn ( storageServerConnectionLunMapDao ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getLunDao ( ) ) . thenReturn ( lunDao ) ; }
private void endInternalCommandWithFailure ( ) { org.ovirt.engine.core.common.action.ExtendImageSizeParameters params = createExtendImageSizeParameters ( ) ; params.setTaskGroupSuccess ( false ) ; org.ovirt.engine.core.bll.UpdateVmDiskCommand.getBackend ( ) . endAction ( VdcActionType.ExtendImageSize , params , org.ovirt.engine.core.bll.UpdateVmDiskCommand.getContext ( ) . clone ( ) . withoutCompensationContext ( ) . withoutExecutionContext ( ) . withoutLock ( ) ) ; }
protected java.util.Map < java.lang.String , java.lang.Object > createParametersStruct ( ) { java.util.Map < java.lang.String , java.lang.Object > struct = new java.util.HashMap < > ( ) ; struct.put ( VdsProperties.vm_guid , org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters ( ) . getVm ( ) . getId ( ) . toString ( ) ) ; struct.put ( VdsProperties.VM_NETWORK_INTERFACE , initNicStructure ( ) ) ; struct.put ( VdsProperties.engineXml , generateDomainXml ( ) ) ; return struct ; }
protected void executeCommand ( ) { registerRollbackHandler ( ( ( org.ovirt.engine.core.utils.transaction.TransactionRollbackListener ) ( ( ) -> org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( ( ( TransactionMethod < java.lang.Void > ) ( ( ) -> { org.ovirt.engine.core.bll.macPoolPerCluster.removePool ( oldMacPool.getId ( ) ) ; org.ovirt.engine.core.bll.macPoolPerCluster.createPool ( oldMacPool ) ; return null ; } ) ) ) ) ) ) ; macPoolDao.update ( getMacPoolEntity ( ) ) ; macPoolPerCluster.modifyPool ( getMacPoolEntity ( ) ) ; setSucceeded ( true ) ; getReturnValue ( ) . setActionReturnValue ( getMacPoolId ( ) ) ; }
public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead ( ) { vm.setMinAllocatedMem ( 8865 ) ; vm.setVmMemSizeMb ( 8865 ) ; org.mockito.Mockito.doReturn ( 0 ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setvds_group_id ( vdsGroupId ) ; group.setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( ) ) ; group.setStoragePoolId ( storagePoolId ) ; group.setcpu_name ( "Intel Conroe Family" ) ; group.setArchitecture ( ArchitectureType.x86_64 ) ; return group ; }
public void render ( org.ovirt.engine.ui.common.widget.table.column.Context context , java.lang.String value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( value != null ) { com.google.gwt.safehtml.shared.SafeHtml escapedValue = getEscapedValue ( value ) ; com.google.gwt.safehtml.shared.SafeHtml renderedValue = getRenderedValue ( escapedValue ) ; sb.append ( org.ovirt.engine.ui.common.widget.table.column.TextCellWithTooltip.template.textContainer ( styleClass , org.ovirt.engine.ui.common.utils.ElementIdUtils.createTableCellElementId ( elementIdPrefix , columnId , context ) , renderedValue ) ) ; } }
public void Execute ( java.lang.Object ... parameters ) { if ( ( ! ( getIsAvailable ( ) ) ) || ( ! ( getIsExecutionAllowed ( ) ) ) ) { return ; } if ( ( target ) != null ) { if ( ( parameters == null ) || ( ( parameters.length ) == 0 ) ) { target.executeCommand ( this ) ; } else { target.executeCommand ( this , parameters ) ; } } }
protected boolean canDoAction ( ) { if ( ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget ( ) ) && ( ! ( validateUnregisteredEntity ( vmFromConfiguration , ovfEntityData ) ) ) ) { return false ; } setImagesWithStoragePoolId ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getStorageDomain ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVm ( ) . getImages ( ) ) ; return super . canDoAction ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice > devs = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . getIsRngEnabled ( ) . setEntity ( ( ! ( devs.isEmpty ( ) ) ) ) ; getModel ( ) . setRngDevice ( ( devs.isEmpty ( ) ? new org.ovirt.engine.core.common.businessentities.VmRngDevice ( ) : devs.get ( 0 ) ) ) ; }
protected void loadPolicyUnits ( ) { java.util.List < org.ovirt.engine.core.common.scheduling.PolicyUnit > allPolicyUnits = getPolicyUnitDao ( ) . getAll ( ) ; for ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : allPolicyUnits ) { if ( policyUnit.isInternal ( ) ) { policyUnits.put ( policyUnit.getId ( ) , org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.getPolicyUnitImpl ( policyUnit , getPendingResourceManager ( ) ) ) ; } else { policyUnits.put ( policyUnit.getId ( ) , new org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl ( policyUnit , getPendingResourceManager ( ) ) ) ; } } }
private java.lang.String getPublicEntity ( java.lang.String entityName , java.lang.String [ ] periods , int i , boolean throwError ) { try { return getPublicEntity ( entityName , periods , i ) ; } catch ( java.lang.RuntimeException rte ) { if ( ! throwError ) return null ; throw rte ; } }
public void onPowerringUp ( ) { decreasePendingVm ( vmStaticDao.get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ) ; }
public void tearDown ( ) throws java.lang.Exception { org.mockito.Mockito.verify ( mockEventBus , org.mockito.Mockito.never ( ) ) . fireEvent ( new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent ( testState , false , true ) ) ; org.mockito.Mockito.verify ( mockEventBus , org.mockito.Mockito.never ( ) ) . fireEvent ( new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent ( testState , false , false ) ) ; }
public void testGetNotFound ( ) { org.ovirt.engine.api.restapi.resource.BackendVmApplicationResource resource = getNotFoundResource ( ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( ) ; verifyNotFoundException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , resource :: get ) ) ; }
private void assertRangeAltering ( int numberOfRanges , java.util.List < java.lang.Integer > rangesWithoutAvailableMacs , java.util.List < java.lang.Integer > expectedRangeIndices ) { java.util.List < org.ovirt.engine.core.bll.network.macpool.Range > ranges = createMockedRanges ( numberOfRanges ) ; mockAvailableMacsInRange ( ranges , rangesWithoutAvailableMacs ) ; org.ovirt.engine.core.bll.network.macpool.MacsStorage macsStorage = new org.ovirt.engine.core.bll.network.macpool.MacsStorage ( false ) ; addRangesToStorage ( ranges , macsStorage ) ; assertReturnedRange ( ranges , macsStorage , expectedRangeIndices ) ; }
static org.ovirt.engine.api.model.Cluster getModel ( int index ) { org.ovirt.engine.api.model.Cluster model = new org.ovirt.engine.api.model.Cluster ( ) ; model.setName ( NAMES [ index ] ) ; model.setDescription ( DESCRIPTIONS [ index ] ) ; model.setDataCenter ( new org.ovirt.engine.api.model.DataCenter ( ) ) ; model.setCpu ( new org.ovirt.engine.api.model.Cpu ( ) ) ; model.getCpu ( ) . setType ( "Intel Xeon" ) ; return model ; }
private static void initMemorySnapshotSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.memorySnapshotSupport = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetMemorySnapshotSupport ) , callback ) ; }
private org.ovirt.engine.core.common.action.ActionType addActionTypeForQosType ( org.ovirt.engine.api.model.QosType qosType ) { switch ( qosType ) { case STORAGE : return org.ovirt.engine.core.common.action.ActionType.AddStorageQos ; case CPU : return org.ovirt.engine.core.common.action.ActionType.AddCpuQos ; case NETWORK : return org.ovirt.engine.core.common.action.ActionType.AddNetworkQoS ; case HOSTNETWORK : return org.ovirt.engine.core.common.action.ActionType.AddHostNetworkQos ; default : throw new java.lang.IllegalArgumentException ( ( ( "Unsupported QoS type \"" + qosType ) + "\"" ) ) ; } }
public void testExistingPassDiscardFunctionalityIsPreservedAllLunsHaveDiscardFunctionality ( ) { storageDomain.setSupportsDiscard ( true ) ; storageDomainDisks.add ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; org.junit.Assert.assertTrue ( discardHelper.isExistingPassDiscardFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 2048L ) ) , storageDomain ) ) ; }
protected boolean evaluateReturnValue ( org.ovirt.engine.core.common.AuditLogType auditLogType , org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { boolean succeeded = returnValue.isValid ( ) ; if ( ! succeeded ) { handleVdsErrors ( auditLogType , returnValue.getValidationMessages ( ) ) ; } succeeded = succeeded && ( returnValue.getSucceeded ( ) ) ; if ( ! succeeded ) { handleVdsErrors ( auditLogType , returnValue.getExecuteFailedMessages ( ) ) ; } return succeeded ; }
protected void setUpGetPayloadExpectations ( int times , int index ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload ( ) ; for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVmPayload , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ index ] } , payload ) ; } }
public static org.ovirt.engine.api.model.StorageDomainStatus map ( org.ovirt.engine.api.model.StorageDomainStatus status , org.ovirt.engine.api.model.StorageDomainStatus template ) { switch ( status ) { case Unattached : return org.ovirt.engine.api.model.StorageDomainStatus.UNATTACHED ; case Activating : return org.ovirt.engine.api.model.StorageDomainStatus.ACTIVATING ; case Active : return org.ovirt.engine.api.model.StorageDomainStatus.ACTIVE ; case Inactive : return org.ovirt.engine.api.model.StorageDomainStatus.INACTIVE ; case Locked : return org.ovirt.engine.api.model.StorageDomainStatus.LOCKED ; case PreparingForMaintenance : return org.ovirt.engine.api.model.StorageDomainStatus.PREPARING_FOR_MAINTENANCE ; case Detaching : return org.ovirt.engine.api.model.StorageDomainStatus.DETACHING ; case Maintenance : return org.ovirt.engine.api.model.StorageDomainStatus.MAINTENANCE ; case Unknown : return org.ovirt.engine.api.model.StorageDomainStatus.UNKNOWN ; case Uninitialized : return null ; default : return null ; } }
public void saveNICsConfig ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.CommitNetworkChanges , new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.action.VdcActionParametersBase [ ] { new org.ovirt.engine.core.common.action.VdsActionParameters ( getEntity ( ) . getId ( ) ) } ) ) , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
public static void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
private void override_EntityChanged ( org.ovirt.engine.ui.uicompat.EventArgs e ) { boolean isChangeable = ( ( java.lang.Boolean ) ( getOverride ( ) . getEntity ( ) ) ) ; getVersion ( ) . setIsChangeable ( isChangeable ) ; getRetransmissions ( ) . setIsChangeable ( isChangeable ) ; getTimeout ( ) . setIsChangeable ( isChangeable ) ; getMountOptions ( ) . setIsChangeable ( isChangeable ) ; getMountOptions ( ) . setTitle ( ( isChangeable ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . mountOptionsHint ( ) : null ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledPolicyNotSetUsbOnPre3_1Cluster ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setcompatibility_version ( Version.v3_0 ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED , vdsGroup.getcompatibility_version ( ) ) , UsbPolicy.ENABLED_LEGACY ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { if ( ( permsList ) == null ) { permsList = super . getPermissionCheckSubjects ( ) ; org.ovirt.engine.core.compat.Guid diskId = ( ( disk ) == null ) ? null : disk.getId ( ) ; permsList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( diskId , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.ATTACH_DISK ) ) ; } return permsList ; }
private void updateActionAvailability ( ) { java.util.List < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > > selectedItems = ( ( getSelectedItems ( ) ) != null ) ? getSelectedItems ( ) : new java.util.ArrayList ( ) ; getSetupNetworksCommand ( ) . setIsExecutionAllowed ( ( ( ( selectedItems.size ( ) ) == 1 ) && ( ( selectedItems.get ( 0 ) . getSecond ( ) . getvds_group_compatibility_version ( ) . compareTo ( Version.v3_1 ) ) >= 0 ) ) ) ; }
public void testRemove ( ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( ActionType.RemoveVmNicFilterParameter , org.ovirt.engine.core.common.action.RemoveVmNicFilterParameterParameters.class , new java.lang.String [ ] { "VmId" , "FilterParameterId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.VM_ID , org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.PARAMETER_ID } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
private void verifyStorageDomain ( org.ovirt.engine.api.model.StorageDomain model ) { org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID.toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( model.getDataCenter ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID.toString ( ) , model.getDataCenter ( ) . getId ( ) ) ; }
public static void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
public static void GetDataCentersWithPermittedActionOnClusters ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters ( ) ; getEntitiesWithPermittedActionParameters.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetDataCentersWithPermittedActionOnClusters , getEntitiesWithPermittedActionParameters , aQuery ) ; }
public com.google.gwt.user.client.ui.Widget resolveValueWidget ( ) { boolean showDefaultValue = ( ( defaultValueCondition ) != null ) && ( defaultValueCondition.showDefaultValue ( ) ) ; com.google.gwt.user.client.ui.Widget resolvedValueWidget = ( showDefaultValue ) ? defaultValueLabel : valueWidget ; boolean showEmptyValue = ( resolvedValueWidget instanceof com.google.gwt.user.client.ui.HasText ) && ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( ( ( com.google.gwt.user.client.ui.HasText ) ( resolvedValueWidget ) ) . getText ( ) ) ) ; return showEmptyValue ? emptyValueLabel : resolvedValueWidget ; }
protected void endActionOnAllImageGroups ( ) { for ( org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.getParameters ( ) . getImagesParameters ( ) ) { org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.getBackend ( ) . endAction ( VdcActionType.CopyImageGroup , p , org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.getContext ( ) . clone ( ) . withoutCompensationContext ( ) . withoutExecutionContext ( ) . withoutLock ( ) ) ; } }
private org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator createHostSetupNetworksValidator ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks ) { return createHostSetupNetworksValidator ( networks , new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ) ; }
private void setUpGetEntityExpectations ( int times ) { for ( int i = 0 ; i < times ; i ++ ) { setUpEntityQueryExpectations ( VdcQueryType.GetVmTemplatesDisks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResourceTest.TEMPLATE_ID } , getEntityList ( ) ) ; } }
private void doTestBadAddTag ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( VdcActionType.AddTag , org.ovirt.engine.core.common.action.TagsOperationParameters.class , new java.lang.String [ ] { "Tag.TagName" , "Tag.ParentId" } , new java.lang.Object [ ] { NAMES [ 0 ] , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.PARENT_GUID } , canDo , success ) ) ; try { collection.add ( org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
private void getVmParentIds ( org.ovirt.engine.core.compat.Guid id , java.util.List < org.ovirt.engine.core.compat.NGuid > ids ) { org.hibernate.Query query = getSession ( ) . createQuery ( "from VmStatic where id = :id" ) ; query.setParameter ( "id" , id ) ; org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = ( ( org.ovirt.engine.core.common.businessentities.VmStatic ) ( query.uniqueResult ( ) ) ) ; if ( vmStatic != null ) { addVdsGroupId ( vmStatic.getVdsGroupId ( ) , ids ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getNetworkDao ( ) ; cluster = org.ovirt.engine.core.dao.FixturesTool.CLUSTER ; datacenter = org.ovirt.engine.core.dao.FixturesTool.DATA_CENTER ; new_net = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; new_net.setName ( "newnet1" ) ; new_net.setVdsmName ( "newnet1" ) ; new_net.setDescription ( "New network" ) ; new_net.setDataCenterId ( datacenter ) ; }
public void getMaxNumOfCPUsPerSocket ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfCpuPerSocket ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
public void getCinderVolumeTypesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > > ( ) { @ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetCinderVolumeTypesByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
protected void setUpGetPayloadExpectations ( int times ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload ( ) ; for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVmPayload , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ i ] } , payload ) ; } }
public void testAddIncompleteParameters_noName ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network ( ) ; model.setDescription ( DESCRIPTIONS [ 0 ] ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Network" , "add" , "id|name" ) ; } }
private void validateInvalidDestinationAndSourceDomainOfDifferentStorageSubtypes ( org.ovirt.engine.core.common.businessentities.storage.StorageType sourceType , org.ovirt.engine.core.common.businessentities.storage.StorageType destType ) { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain ( srcStorageId ) ; srcStorageDomain.setStatus ( StorageDomainStatus.Active ) ; srcStorageDomain.setStorageType ( sourceType ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain.setStatus ( StorageDomainStatus.Active ) ; dstStorageDomain.setStorageType ( destType ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { if ( ! ( org.apache.commons.lang.StringUtils.isBlank ( getParameters ( ) . getVm ( ) . getName ( ) ) ) ) { return java.util.Collections.singletonMap ( getParameters ( ) . getVm ( ) . getName ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM_NAME , VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ) ; } return null ; }
public org.ovirt.engine.core.bll.ValidationResult parentEntityNotChanged ( ) { if ( org.apache.commons.lang.ObjectUtils.equals ( getProfile ( ) . getStorageDomainId ( ) , getProfileFromDb ( ) . getStorageDomainId ( ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_CHANGE_PROFILE ) ; }
public void canSetNumaPinning ( ) { paramNumaNodes.clear ( ) ; paramNumaNodes.add ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 1 , vdsNumaNodes ) ) ; mockCommandWithVmFromParams ( ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( vmNumaNodeDao ) . massRemoveNumaNodeByNumaNodeId ( org.mockito.ArgumentMatchers.eq ( existingNumaNodeIds ) ) ; org.mockito.Mockito.verify ( vmNumaNodeDao ) . massSaveNumaNode ( org.mockito.ArgumentMatchers.eq ( paramNumaNodes ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.storage.DiskImage x , org.ovirt.engine.core.common.businessentities.storage.DiskImage y ) { if ( x.getCreationDate ( ) . before ( y.getCreationDate ( ) ) ) { return - 1 ; } if ( x.getCreationDate ( ) . after ( y.getCreationDate ( ) ) ) { return 1 ; } return 0 ; }
private org.ovirt.engine.core.bll.ValidationResult validateRequestedProxyHost ( ) { if ( ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getVds ( ) ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.VDS_DOES_NOT_EXIST ) ; } if ( ! ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getStoragePoolId ( ) . equals ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getVds ( ) . getStoragePoolId ( ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_NOT_IN_DEST_STORAGE_POOL ) ; } if ( ( org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.getVds ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL ) ; } return ValidationResult.VALID ; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster ( java.lang.String name , org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = control.createMock ( org.ovirt.engine.core.common.businessentities.Cluster.class ) ; org.easymock.EasyMock.expect ( cluster.getId ( ) ) . andReturn ( id ) . anyTimes ( ) ; org.easymock.EasyMock.expect ( cluster.getName ( ) ) . andReturn ( name ) . anyTimes ( ) ; return cluster ; }
public void testPrefixChange ( ) { org.ovirt.engine.core.bll.GetoVirtISOsTest.mcr.mockConfigValue ( ConfigValues.OvirtIsoPrefix , "a different prefix" ) ; getQuery ( ) . setInternalExecution ( true ) ; getQuery ( ) . ExecuteCommand ( ) ; org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded ( getQuery ( ) , true ) ; org.junit.Assert.assertTrue ( "Prefix was changed, no ISOs should be returned" , ( ( java.util.List < org.ovirt.engine.core.compat.RpmVersion > ) ( getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ) . isEmpty ( ) ) ; }
public java.lang.Void call ( ) { com.woorea.openstack.cinder.model.VolumeForUpdate volumeForUpdate = new com.woorea.openstack.cinder.model.VolumeForUpdate ( ) ; volumeForUpdate.setName ( cinderDisk.getDiskAlias ( ) ) ; volumeForUpdate.setDescription ( cinderDisk.getDiskDescription ( ) ) ; proxy.updateVolume ( cinderDisk.getImageId ( ) . toString ( ) , volumeForUpdate ) ; return null ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase notAllowToRunAction ( org.ovirt.engine.core.common.action.VdcActionType actionType ) { java.lang.String mode = dbFacade.getVdcOptionDao ( ) . getByNameAndVersion ( ConfigValues.EngineMode.name ( ) , ConfigCommon.defaultConfigurationVersion ) . getoption_value ( ) ; if ( EngineWorkingMode.MAINTENANCE.name ( ) . equalsIgnoreCase ( mode ) ) { return getErrorCommandReturnValue ( VdcBllMessages.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE ) ; } else if ( EngineWorkingMode.PREPARE.name ( ) . equalsIgnoreCase ( mode ) ) { return notAllowedInPrepForMaintMode ( actionType ) ; } return null ; }
public void shouldWeightNothingOnVmStartWithDifferenOsFamilies ( ) { org.ovirt.engine.core.common.businessentities.VDS fedoraHost = newHost ( "Fedora - 23 - 1.fc23" ) ; final org.ovirt.engine.core.common.businessentities.VM newVM = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.hamcrest.MatcherAssert.assertThat ( filter ( newVM , tooOldHost , newEnoughHost , fedoraHost ) , org.hamcrest.Matchers.hasItems ( org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight ( tooOldHost , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BEST_WEIGHT ) , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight ( newEnoughHost , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BEST_WEIGHT ) , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight ( fedoraHost , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BEST_WEIGHT ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( filter ( newVM , tooOldHost , newEnoughHost , fedoraHost ) , org.hamcrest.Matchers.hasSize ( 3 ) ) ; }
private void withDataCenterLoaded ( org.ovirt.engine.core.compat.Guid dataCenterId , final org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.businessentities.StoragePool > callback ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDataCenterById ( new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.StoragePool returnValue ) { setStoragePool ( returnValue ) ; callback.onSuccess ( returnValue ) ; } } ) , dataCenterId ) ; }
public static java.util.Optional < java.lang.Integer > getHugePageSize ( org.ovirt.engine.core.common.businessentities.VmBase vm ) { org.ovirt.engine.core.common.utils.customprop.SimpleCustomPropertiesUtil util = org.ovirt.engine.core.common.utils.customprop.SimpleCustomPropertiesUtil.getInstance ( ) ; java.util.Map < java.lang.String , java.lang.String > customProperties = util.convertProperties ( vm.getCustomProperties ( ) ) ; java.lang.String hugePageStr = customProperties.get ( "hugepages" ) ; if ( hugePageStr == null ) { return java.util.Optional.empty ( ) ; } try { return java.util.Optional.of ( java.lang.Integer.parseInt ( hugePageStr ) ) ; } catch ( java.lang.NumberFormatException e ) { return java.util.Optional.empty ( ) ; } }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { setTitle ( ( ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN ) ? getDefaultTitle ( ) : null ) ) ; return ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN ) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.externalDiskIcon ( ) : null ; }
private void setDetailList ( final org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileVmListModel vNicProfileVmListModel , final org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileTemplateListModel vNicProfileTemplateListModel , final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > permissionListModel ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.HasEntity < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > > list = new java.util.ArrayList < > ( ) ; list.add ( vNicProfileVmListModel ) ; list.add ( vNicProfileTemplateListModel ) ; list.add ( permissionListModel ) ; setDetailModels ( list ) ; }
public void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void mockGraphicsDevice ( ) { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDevice = new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ; graphicsDevice.setDeviceId ( Guid.Empty ) ; graphicsDevice.setVmId ( vm.getId ( ) ) ; org.mockito.Mockito.when ( vmDeviceDAO.getVmDeviceByVmIdAndType ( vm.getId ( ) , VmDeviceGeneralType.GRAPHICS ) ) . thenReturn ( java.util.Arrays.asList ( graphicsDevice ) ) ; org.mockito.Mockito.doReturn ( vmDeviceDAO ) . when ( dbFacade ) . getVmDeviceDao ( ) ; org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.setDbFacade ( dbFacade ) ; }
protected boolean shouldCheckSpaceInStorageDomains ( ) { return ( ! ( getImagesToCheckDestinationStorageDomains ( ) . isEmpty ( ) ) ) && ( ! ( org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull ( getImagesToCheckDestinationStorageDomains ( ) , new org.ovirt.engine.core.utils.linq.All < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) . getImageId ( ) . equals ( VmTemplateHandler.BLANK_VM_TEMPLATE_ID ) ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( PropertyChangedEventArgs.PROGRESS.equals ( pcArgs.propertyName ) ) { clearData ( ) ; } } }
public void vdspysGroupWithVirtGlusterNotSupported ( ) { createCommandWithGlusterEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDAO.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; mcr.mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , java.lang.Boolean.FALSE ) ; mcr.mockConfigValue ( ConfigValues.GlusterSupport , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 , java.lang.Boolean.FALSE ) ; cpuExists ( ) ; allQueriesForVms ( ) ; canDoActionFailedWithReason ( VdcBllMessages.GLUSTER_NOT_SUPPORTED ) ; }
public static void GetDocumentationBaseURL ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
protected org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask handleTaskReturn ( org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask asyncTask ) { org.ovirt.engine.core.compat.Guid externalTaskId = asyncTask.getTaskId ( ) ; asyncTaskStep.setStatus ( JobExecutionStatus.STARTED ) ; executionHandler.updateStepExternalId ( asyncTaskStep , externalTaskId , ExternalSystemType.GLUSTER ) ; org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getExecutionContext ( ) . getJob ( ) . setStatus ( JobExecutionStatus.STARTED ) ; asyncTask.setStepId ( asyncTaskStep.getId ( ) ) ; return asyncTask ; }
private org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase createException ( ) { final java.lang.String errorMessage = java.lang.String.format ( "Failed to %1$s, error = %2$s" , org.ovirt.engine.core.vdsbroker.vdsbroker.BrokerCommandBase.getCommandName ( ) , getReturnStatus ( ) . mMessage ) ; return createDefaultConcreteException ( errorMessage ) ; }
public static void getVmList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String poolName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: pool=" + poolName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
private boolean validateServers ( java.util.Set < java.lang.String > serverNames ) { for ( java.lang.String serverName : serverNames ) { if ( ( ( getVdsStaticDao ( ) . getByHostName ( serverName ) ) != null ) || ( ( getVdsStaticDao ( ) . getAllWithIpAddress ( serverName ) . size ( ) ) > 0 ) ) { return false ; } } return true ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createDiskImage ( ) { org.ovirt.engine.core.common.businessentities.DiskImage di = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; di.setActive ( true ) ; di.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; di.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; di.setParentId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; di.setImageStatus ( ImageStatus.OK ) ; return di ; }
public void testParseNoOptions ( ) { java.util.List < org.ovirt.engine.api.model.Agent > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( "foo:" , "" ) ; org.junit.Assert.assertNotNull ( ret ) ; org.junit.Assert.assertEquals ( 1 , ret.size ( ) ) ; verifyResult ( ret.get ( 0 ) , "foo" ) ; }
public java.util.List < java.lang.String > addMacs ( java.util.List < java.lang.String > macs ) { java.util.List < java.lang.String > notAddedMacs = new java.util.ArrayList < > ( macs.size ( ) ) ; for ( java.lang.String mac : macs ) { if ( ! ( addMac ( mac ) ) ) { notAddedMacs.add ( mac ) ; } } return notAddedMacs ; }
public static boolean isTemplateStatusIsNotLocked ( org.ovirt.engine.core.compat.Guid id ) { boolean returnValue = false ; org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmTemplateDao ( ) . get ( id ) ; if ( ( template != null ) && ( ( template.getstatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VmTemplateStatus.Locked ) ) ) { returnValue = true ; } return returnValue ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.VmHandler.LockVm ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getDynamicData ( ) , org.ovirt.engine.core.bll.ExportVmCommand.getCompensationContext ( ) ) ; org.ovirt.engine.core.bll.ExportVmCommand.freeLock ( ) ; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { MoveOrCopyAllImageGroups ( ) ; return null ; } } ) ; if ( ! ( org.ovirt.engine.core.bll.ExportVmCommand.getReturnValue ( ) . getTaskIdList ( ) . isEmpty ( ) ) ) { org.ovirt.engine.core.bll.ExportVmCommand.setSucceeded ( true ) ; } }
protected boolean validateVM ( org.ovirt.engine.core.bll.validator.VmValidator vmValidator ) { org.ovirt.engine.core.bll.validator.LiveSnapshotValidator validator = new org.ovirt.engine.core.bll.validator.LiveSnapshotValidator ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getStoragePool ( ) . getcompatibility_version ( ) , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVds ( ) ) ; return ( ( ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm ( ) . isDown ( ) ) || ( validate ( validator.canDoSnapshot ( ) ) ) ) && ( validate ( vmValidator.vmNotSavingRestoring ( ) ) ) ) && ( validate ( vmValidator.validateVmStatusUsingMatrix ( VdcActionType.CreateAllSnapshotsFromVm ) ) ) ; }
private boolean isCurrentTaskLookedFor ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.bll.SPMAsyncTask task ) { return ( ( ( task instanceof org.ovirt.engine.core.bll.EntityAsyncTask ) && ( id.equals ( task.getParameters ( ) . getEntityInfo ( ) . getId ( ) ) ) ) && ( ( task.getState ( ) ) != ( AsyncTaskState.Cleared ) ) ) && ( ( task.getState ( ) ) != ( AsyncTaskState.ClearFailed ) ) ; }
public void printAvailableKeys ( ) { org.ovirt.engine.core.config.EngineConfigLogic.iterateAllKeys ( configKeyFactory , keysConfig , new org.ovirt.engine.core.config.ConfigKeyHandler ( ) { @ java.lang.Override public boolean handle ( org.ovirt.engine.core.config.entity.ConfigKey key ) { printKeyInFormat ( key ) ; return true ; } } ) ; }
public void getExternalProviderHostGroupList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalHostGroup > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostGroupsFromExternalProvider , params , aQuery ) ; }
public void edit ( ) { final org.ovirt.engine.core.common.businessentities.NetworkView networkView = ( ( org.ovirt.engine.core.common.businessentities.NetworkView ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel ( networkView.getNetwork ( ) , this ) ; setWindow ( networkModel ) ; initDcList ( networkModel ) ; }
public boolean isStorageDomainInProcess ( ) { return ( ( ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.PreparingForMaintenance ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Detaching ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Activating ) ) ; }
public void getGlusterHook ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , boolean includeServerHooks ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( hookId , includeServerHooks ) , aQuery ) ; }
private static boolean isDiskOrInterface ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { return ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk ( vmDevice ) ) || ( ( vmDevice.getDevice ( ) . equals ( VmDeviceType.BRIDGE.getName ( ) ) ) && ( ( vmDevice.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.INTERFACE ) ) ) ; }
private void onAdItemsLoaded ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.aaa.DbUser > > userOrGroups ) { getSearchInProgress ( ) . setEntity ( false ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.aaa.DbUser > > items = new java.util.ArrayList < > ( ) ; items.addAll ( userOrGroups ) ; getSelectAll ( ) . setEntity ( false ) ; setItems ( items ) ; setIsEmpty ( items.isEmpty ( ) ) ; }
protected java.lang.Object runQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , java.lang.String sessionId , javax.naming.InitialContext ctx ) { org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ; queryParams.setSessionId ( sessionId ) ; queryParams.setFiltered ( org.ovirt.engine.core.aaa.filters.SsoPostLoginFilter.FILTER_QUERIES ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = org.ovirt.engine.core.aaa.filters.FiltersHelper.getBackend ( ctx ) . runQuery ( queryType , queryParams ) ; return ( result != null ) && ( result.getSucceeded ( ) ) ? result.getReturnValue ( ) : null ; }
public final void forceAddMac ( java.lang.String mac ) { super . forceAddMac ( mac ) ; getStrategyForMacAllocation ( ) . forEach ( ( e ) -> e.releaseMacsInCaseOfRollback ( java.util.Collections.singletonList ( mac ) ) ) ; }
public int setTabIndexes ( int nextTabIndex ) { nameEditor.setTabIndex ( ( nextTabIndex ++ ) ) ; descriptionEditor.setTabIndex ( ( nextTabIndex ++ ) ) ; commentEditor.setTabIndex ( ( nextTabIndex ++ ) ) ; clusterEditor.setTabIndex ( ( nextTabIndex ++ ) ) ; quotaEditor.setTabIndex ( ( nextTabIndex ++ ) ) ; nextTabIndex = disksAllocationView.setTabIndexes ( nextTabIndex ) ; isTemplatePublicEditor.setTabIndex ( ( nextTabIndex ++ ) ) ; copyVmPermissions.setTabIndex ( ( nextTabIndex ++ ) ) ; return nextTabIndex ; }
public void getGlusterSnapshotConfig ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.setHandleFailure ( true ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotConfig , new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeQueriesParameters ( clusterId , volumeId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey , java.lang.String userName ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeGeoRepConfigReset ( volumeName , slaveHost , slaveVolumeName , configKey , userName ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected void loadExternalScheduler ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.ExternalSchedulerEnabled ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Starting external scheduler discovery thread" ) ; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( exSchedulerDiscovery.discover ( ) ) { reloadPolicyUnits ( ) ; } } } ) ; } else { exSchedulerDiscovery.markAllExternalPoliciesAsDisabled ( ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "External scheduler disabled, discovery skipped" ) ; } }
public void testExecuteQueryCommnad ( ) throws java.io.IOException { org.mockito.Mockito.when ( getQueryParameters ( ) . getServer ( ) ) . thenReturn ( serverName ) ; org.mockito.Mockito.doReturn ( fingerPrint ) . when ( mockEngineSSHDialog ) . getHostFingerprint ( ) ; getQuery ( ) . executeQueryCommand ( ) ; java.lang.String serverFingerprint = ( ( java.lang.String ) ( getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ) ; org.junit.Assert.assertNotNull ( serverFingerprint ) ; org.junit.Assert.assertEquals ( fingerPrint , serverFingerprint ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData < E > object ) { ( ( org.ovirt.engine.ui.webadmin.widget.table.cell.CustomSelectionCell ) ( getCell ( ) ) ) . setOptions ( object.getClusterNames ( ) ) ; return ( object.getCluster ( ) . getSelectedItem ( ) ) != null ? object.getCluster ( ) . getSelectedItem ( ) . getName ( ) : constants.empty ( ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmList ) { java.util.List < org.ovirt.engine.core.compat.Guid > vmIds = getAffinityGroup ( ) . getVmIds ( ) ; getVmsSelectionModel ( ) . init ( vmList , ( vmIds != null ? vmIds : new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) ) ; stopProgress ( ) ; }
protected void updateSingleNic ( org.ovirt.engine.core.utils.ovf.xml.XmlNode node , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { super . updateSingleNic ( node , iface ) ; iface.setMacAddress ( ( ( selectSingleNode ( node , "rasd:MACAddress" , _xmlNS ) ) != null ? selectSingleNode ( node , "rasd:MACAddress" , _xmlNS ) . innerText : "" ) ) ; }
private void attachIso_EntityChanged ( ) { getIsoImage ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( getAttachIso ( ) . getEntity ( ) ) ) ) ; getBootSequence ( ) . getCdromOption ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( getAttachIso ( ) . getEntity ( ) ) ) ) ; }
protected void sendWarningForNonExportableDisks ( org.ovirt.engine.core.common.businessentities.VM entity ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getVmDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getWindow ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel ) ( target ) ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > vmDisks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks ( model , vmDisks , VmModelHelper.WarningType.VM_EXPORT ) ; } } ) , entity.getId ( ) ) ; }
public void validateFailsIsoVersionNotCompatible ( ) { mockVdsWithOsVersion ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_OVIRT_VERSION ) ; command.getParameters ( ) . setoVirtIsoFile ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_VERSION_OVIRT_ISO_FILENAME ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_UPGRADE_BETWEEN_MAJOR_VERSION ) ; }
public void validateFailedGuestOsIsNotSupported ( ) { mockInterfaceList ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = mockVmStatusUp ( ) ; vm.setVmOs ( 15 ) ; createVirtIODisk ( ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.osRepository.getOsName ( 15 ) ) . thenReturn ( "RHEL3x64" ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.osRepository.getDiskHotpluggableInterfaces ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( java.util.Collections.emptySet ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED ) ; }
private boolean getValue ( org.ovirt.engine.core.common.interfaces.FutureVDSCall < org.ovirt.engine.core.common.vdscommands.VDSReturnValue > task ) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.SetupNetworksPollingTimeout ) , java.util.concurrent.TimeUnit.SECONDS ) ; return vdsReturnValue.getSucceeded ( ) ; } catch ( java.util.concurrent.TimeoutException e ) { return false ; } }
public boolean brickExists ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick ) { for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : getGlusterBrickDao ( ) . getGlusterVolumeBricksByServerId ( newBrick.getServerId ( ) ) ) { if ( ( ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( newBrick.getVolumeId ( ) , brick.getVolumeId ( ) ) ) && ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( newBrick.getServerId ( ) , brick.getServerId ( ) ) ) ) && ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( newBrick.getBrickDirectory ( ) , brick.getBrickDirectory ( ) ) ) ) { return true ; } } return false ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = heStorageDomain.getStorageStaticData ( ) . getConnection ( ) ; connection.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) ) ; storageServerConnectionDao.save ( connection ) ; heStorageDomain.setStorage ( connection.getId ( ) ) ; setSucceeded ( true ) ; getCompensationContext ( ) . snapshotEntity ( connection ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ev.matchesDefinition ( ConsoleModel.ErrorEventDefinition ) ) && ( ( sender instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) || ( sender instanceof org.ovirt.engine.ui.uicommonweb.models.vms.RdpConsoleModel ) ) ) { consoleModelError ( sender , getConsoleModelErrorMessage ( sender , ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ErrorCodeEventArgs ) ( args ) ) ) ) ; } }
private void updateDisplayAndGraphics ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster ( ) ; java.lang.Integer osType = getOSType ( ) . getSelectedItem ( ) ; if ( ( cluster == null ) || ( osType == null ) ) { return ; } java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.DisplayType > > graphicsAndDisplays = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getGraphicsAndDisplays ( osType , cluster.getCompatibilityVersion ( ) ) ; initDisplayModels ( graphicsAndDisplays ) ; }
private boolean checkLunsInStorageDomain ( java.util.List < java.lang.String > lunIds ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > lunsFromDb = org.ovirt.engine.core.bll.storage.domain.RefreshLunsSizeCommand.getLunDao ( ) . getAllForVolumeGroup ( org.ovirt.engine.core.bll.storage.domain.RefreshLunsSizeCommand.getStorageDomain ( ) . getStorage ( ) ) ; java.util.Set < java.lang.String > lunsSet = new java.util.HashSet < > ( lunIds ) ; for ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun : lunsFromDb ) { if ( lunsSet.contains ( lun.getLUNId ( ) ) ) { lunsSet.remove ( lun.getLUNId ( ) ) ; } } return lunsSet.isEmpty ( ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { org.ovirt.engine.core.compat.Guid id = cluster.getId ( ) ; if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( id ) ) { id = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; cluster.setId ( id ) ; } getCallsHandler ( ) . executeModification ( "InsertCluster" , getClusterParamSource ( cluster ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.compat.Guid clusterId = org.ovirt.engine.core.bll.network.cluster.GetAllNetworksByClusterIdQuery.getParameters ( ) . getId ( ) ; org.ovirt.engine.core.bll.network.cluster.GetAllNetworksByClusterIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.network.cluster.GetAllNetworksByClusterIdQuery.getDbFacade ( ) . getNetworkDao ( ) . getAllForCluster ( clusterId , org.ovirt.engine.core.bll.network.cluster.GetAllNetworksByClusterIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.network.cluster.GetAllNetworksByClusterIdQuery.getParameters ( ) . isFiltered ( ) ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel > getHostNicLabels ( org.ovirt.engine.core.compat.Guid hostNicId ) { final org.ovirt.engine.api.restapi.resource.BackendHostNicsResource hostNicsResource = inject ( new org.ovirt.engine.api.restapi.resource.BackendHostNicsResource ( hostId ) ) ; final org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig = hostNicsResource.findVfsConfig ( hostNicId ) ; if ( vfsConfig == null ) { return java.util.Collections.emptyList ( ) ; } final java.util.Set < java.lang.String > networkLabelIds = vfsConfig.getNetworkLabels ( ) ; return networkLabelIds.stream ( ) . map ( NetworkLabel :: new ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
public org.ovirt.engine.api.model.GlusterHook get ( ) { org.ovirt.engine.api.model.GlusterHook hook = performGet ( QueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( guid , true ) ) ; org.ovirt.engine.core.common.queries.QueryReturnValue result = runQuery ( QueryType.GetGlusterHookContent , new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( guid ) ) ; if ( ( ( result != null ) && ( result.getSucceeded ( ) ) ) && ( ( result.getReturnValue ( ) ) != null ) ) { hook.setContent ( result.getReturnValue ( ) ) ; } return hook ; }
protected void executeIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.ResetIrs , new org.ovirt.engine.core.common.vdscommands.ResetIrsVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.SpmStopOnIrsVDSCommand.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SpmStopOnIrsVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SpmStopOnIrsVDSCommand.getParameters ( ) . getPreferredSPMId ( ) ) ) ; }
public java.lang.Void runInTransaction ( ) { _vdsManager.setStatus ( parameters.getStatus ( ) , vds ) ; _vdsManager.updatePartialDynamicData ( parameters.getNonOperationalReason ( ) , parameters.getMaintenanceReason ( ) ) ; _vdsManager.updateStatisticsData ( vds.getStatisticsData ( ) ) ; return null ; }
protected void setUpGetEntityExpectations ( boolean notFound ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetAdGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getEntity ( 0 ) ) ) ; }
public org.ovirt.engine.api.v3.types.V3Host get ( @ javax.ws.rs.core.Context javax.ws.rs.core.HttpHeaders headers , @ javax.ws.rs.core.Context javax.ws.rs.core.UriInfo ui ) { boolean force = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( headers , ui , "force" , true , false ) ; if ( force ) { try { getDelegate ( ) . refresh ( new org.ovirt.engine.api.model.Action ( ) ) ; } catch ( javax.ws.rs.WebApplicationException exception ) { throw adaptException ( exception ) ; } } return adaptGet ( getDelegate ( ) :: get ) ; }
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType ( ) { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.mergeSnapshots ; }
public void getDbGroupsByUserId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbGroup > > ( ) { @ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbGroup > Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbGroup > ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetDbGroupsByUserId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
private java.lang.String getConstraint ( ) { java.lang.StringBuilder buffer = new java.lang.StringBuilder ( ) ; buffer.append ( "Providers: type=" ) ; buffer.append ( ProviderType.FOREMAN.name ( ) ) ; java.lang.String query = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint ( httpHeaders , uriInfo , null , modelType , false ) ; if ( org.apache.commons.lang.StringUtils.isNotBlank ( query ) ) { buffer.append ( java.lang.String.format ( " AND %1$s" , query ) ) ; } return buffer.toString ( ) ; }
protected void verifyModel ( R model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertEquals ( NAMES [ index ] , model.getName ( ) ) ; assertEquals ( DESCRIPTIONS [ index ] , model.getDescription ( ) ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendResourceTest.verifyLinks ( model ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.GraphicsConsole console ) { org.ovirt.engine.core.common.businessentities.GraphicsDevice device = getMapper ( org.ovirt.engine.api.model.GraphicsConsole.class , org.ovirt.engine.core.common.businessentities.GraphicsDevice.class ) . map ( console , null ) ; device.setVmId ( guid ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase res = doCreateEntity ( VdcActionType.AddGraphicsDevice , createAddGraphicsDeviceParams ( device ) ) ; if ( ( res != null ) && ( res.getSucceeded ( ) ) ) { return org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.find ( console , this :: list ) ; } throw new javax.ws.rs.WebApplicationException ( javax.ws.rs.core.Response.status ( Response.Status.NOT_FOUND ) . build ( ) ) ; }
protected void executeCommand ( ) { registerRollbackHandler ( new org.ovirt.engine.core.bll.AddMacPoolCommand.CustomTransactionCompletionListener ( ) ) ; getMacPoolEntity ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; getMacPoolDao ( ) . save ( getMacPoolEntity ( ) ) ; addPermission ( getCurrentUser ( ) . getId ( ) , getMacPoolEntity ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . createPool ( getMacPoolEntity ( ) ) ; setSucceeded ( true ) ; getReturnValue ( ) . setActionReturnValue ( getMacPoolId ( ) ) ; }
private void validateEnumParameters ( org.ovirt.engine.api.model.GlusterVolume volume ) { validateEnum ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.class , volume.getVolumeType ( ) . toUpperCase ( ) ) ; if ( volume.isSetTransportTypes ( ) ) { validateEnumValues ( org.ovirt.engine.core.common.businessentities.gluster.TransportType.class , org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResource.convertToUppercase ( volume.getTransportTypes ( ) . getTransportTypes ( ) ) ) ; } if ( volume.isSetAccessProtocols ( ) ) { validateEnumValues ( org.ovirt.engine.core.common.businessentities.gluster.AccessProtocol.class , org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResource.convertToUppercase ( volume.getAccessProtocols ( ) . getAccessProtocols ( ) ) ) ; } }
private static org.ovirt.engine.core.common.businessentities.QuotaStorage getSpecificQuotaStorage ( org.ovirt.engine.core.compat.Guid quotaId ) { org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage = new org.ovirt.engine.core.common.businessentities.QuotaStorage ( ) ; quotaStorage.setQuotaId ( quotaId ) ; quotaStorage.setQuotaStorageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; quotaStorage.setStorageId ( FixturesTool.STORAGE_DOAMIN_NFS_MASTER ) ; quotaStorage.setStorageSizeGB ( 10000L ) ; quotaStorage.setStorageSizeGBUsage ( 0.0 ) ; return quotaStorage ; }
public void testGetAllForUsersAndGroupsInvalidUserAndGroups ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Role > result = dao.getAnyAdminRoleForUserAndGroups ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) , ApplicationMode.AllModes.getValue ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
private < T > T readJsonString ( java.lang.Object source , java.lang.Class < T > type , org.codehaus.jackson.map.ObjectMapper mapper ) { try { return mapper.readValue ( source.toString ( ) , type ) ; } catch ( java.io.IOException e ) { throw new org.ovirt.engine.core.utils.SerializationException ( e ) ; } }
protected org.ovirt.engine.api.model.Storage lookupStorage ( java.lang.String id ) { for ( org.ovirt.engine.core.common.businessentities.LUNs lun : getLogicalUnits ( ) ) { if ( lun.getLUN_id ( ) . equals ( id ) ) { return addLinks ( map ( lun ) ) ; } } for ( org.ovirt.engine.api.restapi.resource.StorageDomain vg : getVolumeGroups ( ) ) { if ( vg.getStorage ( ) . equals ( id ) ) { return addLinks ( map ( vg ) ) ; } } return notFound ( ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getValue ( T value ) { if ( ( ( getReason ( value ) ) != null ) && ( ! ( getReason ( value ) . trim ( ) . isEmpty ( ) ) ) ) { return org.ovirt.engine.ui.webadmin.widget.table.column.ReasonColumn.templates.inlineImageWithTitle ( com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( org.ovirt.engine.ui.webadmin.widget.table.column.ReasonColumn.resources.commentImage ( ) ) . getHTML ( ) ) , getReason ( value ) ) ; } return null ; }
private java.util.List < org.ovirt.engine.core.common.action.ActionReturnValue > createActionResultList ( final org.ovirt.engine.core.common.action.ActionReturnValue resultValue , final int count ) { java.util.List < org.ovirt.engine.core.common.action.ActionReturnValue > result = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { result.add ( resultValue ) ; } return result ; }
public void validateFailsForGlusterServerWhenNoUpServer ( ) throws java.lang.Exception { setupGlusterMock ( true , null , false ) ; org.junit.Assert.assertFalse ( commandMock.validate ( ) ) ; org.junit.Assert.assertTrue ( commandMock.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE.toString ( ) ) ) ; }
public void testAttachFailDomainAlreadyInPool ( ) { org.mockito.Mockito.when ( storagePoolIsoMapDao.getAllForStorage ( storageDomain.getId ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ) ) ; org.ovirt.engine.core.bll.ValidationResult attachedDomainInsertionResult = validator.validateDomainCanBeAttachedToPool ( ) ; org.hamcrest.MatcherAssert.assertThat ( attachedDomainInsertionResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL ) ) ; }
public void moveDisk ( ) { command.getParameters ( ) . setParametersList ( createMoveDisksParameters ( ) ) ; initDiskImage ( diskImageId ) ; initVm ( VMStatus.Down , null , diskImageId ) ; command.updateParameters ( ) ; org.junit.Assert.assertTrue ( ( ( command.getMoveDiskParametersList ( ) . size ( ) ) == 1 ) ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.maxSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; InitSpmPriorities1 ( ) ; }
public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.QUERY , t ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales.clear ( ) ; } }
public org.ovirt.engine.core.bll.ValidationResult isStorageDomainLocalityFitsDC ( ) { if ( ( ! ( isStorageDomainOfTypeIsoOrExport ( ) ) ) && ( ( storageDomainStatic.getStorageType ( ) . isLocal ( ) ) != ( storagePool.isLocal ( ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getLun ( ) . getProductId ( ) ; }
public org.ovirt.engine.sdk.decorators.Group add ( org.ovirt.engine.sdk.decorators.Group group ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( SLASH ) + ( getName ( ) ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . add ( url , group , org.ovirt.engine.sdk.entities.Group.class , org.ovirt.engine.sdk.decorators.Group.class , headers ) ; }
protected UnitVmModel.GraphicsTypes getRawValue ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) ) { return null ; } java.util.Map < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.GraphicsInfo > graphicsInfos = vm.getGraphicsInfos ( ) ; return UnitVmModel.GraphicsTypes.fromGraphicsTypes ( graphicsInfos.keySet ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup setUpVDSGroup ( org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = control.createMock ( org.ovirt.engine.core.common.businessentities.VDSGroup.class ) ; org.easymock.EasyMock.expect ( cluster.getId ( ) ) . andReturn ( id ) . anyTimes ( ) ; org.easymock.EasyMock.expect ( cluster.getCompatibilityVersion ( ) ) . andReturn ( org.ovirt.engine.core.compat.Version.getLast ( ) ) . anyTimes ( ) ; return cluster ; }
public void testValidateGatewayWhenIpConfigurationIsNotSet ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( attachment ) . validateGateway ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static void GetStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) , aQuery ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > getNicTypeList ( org.ovirt.engine.core.common.businessentities.VmOsType osType , boolean hasDualmode ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > ( java.util.Arrays.asList ( org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.values ( ) ) ) ; list.remove ( VmInterfaceType.rtl8139_pv ) ; if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( osType ) ) { if ( ( osType == ( org.ovirt.engine.core.common.businessentities.VmOsType.WindowsXP ) ) && hasDualmode ) { list.add ( VmInterfaceType.rtl8139_pv ) ; } } return list ; }
protected org.ovirt.engine.api.model.Tag lookupTagByName ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.Tags tag : getBackendCollection ( org.ovirt.engine.core.common.businessentities.Tags.class , VdcQueryType.GetAllTags , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ) { if ( tag.gettag_name ( ) . equals ( name ) ) { return map ( tag ) ; } } return handleError ( new org.ovirt.engine.api.restapi.resource.EntityNotFoundException ( name ) , false ) ; }
public org.ovirt.engine.core.utils.ssh.SSHClient getSSHClient ( java.lang.String hostname ) { java.lang.Long timeout = java.util.concurrent.TimeUnit.SECONDS.toMillis ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.ConnectToServerTimeoutInSeconds ) ) ; org.ovirt.engine.core.utils.ssh.SSHClient sshclient = new org.ovirt.engine.core.utils.ssh.EngineSSHClient ( ) ; sshclient.setHardTimeout ( timeout ) ; sshclient.setSoftTimeout ( timeout ) ; sshclient.setHost ( hostname ) ; sshclient.setUser ( org.ovirt.engine.core.bll.AddVdsCommand.USER_NAME ) ; sshclient.setPassword ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getRootPassword ( ) ) ; return sshclient ; }
public static void getMaxNumOfVmSockets ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfVmSockets ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
public void validateShareableDiskVolumeFormatSucceeds ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createShareableDiskImage ( ) ; image.setVolumeFormat ( VolumeFormat.RAW ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters ( ) ; parameters.setDiskInfo ( image ) ; org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , parameters ) ; mockVm ( ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; mockInterfaceList ( ) ; mockMaxPciSlots ( ) ; runAndAssertValidateSuccess ( ) ; }
public static org.ovirt.engine.core.bll.scheduling.SchedulingManager getInstance ( ) { if ( ( org.ovirt.engine.core.bll.scheduling.SchedulingManager.instance ) == null ) { synchronized ( org.ovirt.engine.core.bll.scheduling.SchedulingManager.class ) { if ( ( org.ovirt.engine.core.bll.scheduling.SchedulingManager.instance ) == null ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.instance = new org.ovirt.engine.core.bll.scheduling.SchedulingManager ( ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.enableLoadBalancer ( ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.enableHaReservationCheck ( ) ; } } } return org.ovirt.engine.core.bll.scheduling.SchedulingManager.instance ; }
private void localize ( ) { bricks.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.constants.selectBrickToViewFopStats ( ) ) ; nfsServers.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.constants.selectServerToViewFopStats ( ) ) ; bricksTab.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.constants.volumeProfileBricksTab ( ) ) ; nfsTab.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.constants.volumeProfileNfsTab ( ) ) ; bricksErrorLabel.setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.constants.brickProfileErrorMessage ( ) ) ; nfsErrorLabel.setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeProfileStatisticsPopupView.constants.nfsProfileErrorMessage ( ) ) ; }
private void handleNonMigratableVms ( java.util.List < java.lang.String > hostsWithNonMigratableVms , java.util.List < java.lang.String > nonMigratableVms ) { if ( ! ( nonMigratableVms.isEmpty ( ) ) ) { addCanDoActionMessage ( EngineMessage.VDS_CANNOT_MAINTENANCE_IT_INCLUDES_NON_MIGRATABLE_VM ) ; org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue ( ) . getCanDoActionMessages ( ) . add ( java.lang.String.format ( "$VmsList %1$s" , org.apache.commons.lang.StringUtils.join ( nonMigratableVms , " , " ) ) ) ; org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue ( ) . getCanDoActionMessages ( ) . add ( java.lang.String.format ( "$HostsList %1$s" , org.apache.commons.lang.StringUtils.join ( hostsWithNonMigratableVms , " , " ) ) ) ; } }
private void newEntity ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateInterfaceModel.createInstance ( getEntityStronglyTyped ( ) , cluster.getcompatibility_version ( ) , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems ( ) ) ) , this ) ; setWindow ( model ) ; }
public void syncNetworkQosNotSupported ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork ( ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( "eth0" , network ) ; mockExistingIfaces ( iface ) ; org.ovirt.engine.core.compat.Guid qosId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = createQos ( ) ; org.mockito.Mockito.when ( qosDao.get ( qosId ) ) . thenReturn ( qos ) ; network.setQosId ( qosId ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForSync ( iface ) ) ; validateAndExpectViolation ( helper , EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onSucceeded ( cmdId , childCmdIds ) ; org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommandCallback.log.info ( "Volume/Snapshot has been successfully deleted from Cinder. ID: {}" , getDiskId ( ) ) ; org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommandCallback.getCommand ( ) . endAction ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > getEntityList ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > entities = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; for ( int i = 0 ; i < ( NAMES.length ) ; i ++ ) { entities.add ( getEntity ( i ) ) ; } return entities ; }
public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUpGetGraphicsExpectations ( 1 ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel ( 1 ) ; model.setId ( GUIDS [ 1 ] . toString ( ) ) ; try { resource.update ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public void testNoDuplicateCustomMacs ( ) { org.ovirt.engine.core.bll.network.macpool.MacsStorage macsStorage = new org.ovirt.engine.core.bll.network.macpool.MacsStorage ( false ) ; org.hamcrest.MatcherAssert.assertThat ( macsStorage.containsDuplicates ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; macsStorage.useMac ( 1L ) ; org.hamcrest.MatcherAssert.assertThat ( macsStorage.containsDuplicates ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; macsStorage.useMac ( 1L ) ; org.hamcrest.MatcherAssert.assertThat ( macsStorage.containsDuplicates ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
protected boolean isFencingPolicySupported ( org.ovirt.engine.core.common.businessentities.VDS proxyCandidate , org.ovirt.engine.core.compat.Version minimalSupportedVersion ) { boolean supported = ( ( fencingPolicy ) == null ) || ( proxyCandidate.getSupportedClusterVersionsSet ( ) . contains ( minimalSupportedVersion ) ) ; org.ovirt.engine.core.bll.pm.FenceProxyLocator.log.debug ( "Proxy candidate '{}' supports fencing policy '{}': {}" , proxyCandidate.getHostName ( ) , fencingPolicy , supported ) ; return supported ; }
public void fillReportedConfigurations ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allInterfacesForHost , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > networkMap , java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments , org.ovirt.engine.core.compat.Guid clusterId ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDao.get ( clusterId ) ; java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > networkNameToNicMap = nicsByNetworkId ( allInterfacesForHost ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : networkAttachments ) { fillReportedConfigurations ( networkNameToNicMap , networkMap , networkAttachment , cluster ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusterList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredClusterList = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.filterClustersWithoutArchitecture ( clusterList ) ; model.setDataCentersAndClusters ( model , dataCenters , filteredClusterList , null ) ; initCdImage ( ) ; }
public void updateVmTag ( ) { existingVmTag.setDefaultDisplayType ( ( ( existingVmTag.getDefaultDisplayType ( ) ) + 1 ) ) ; dao.updateDefaultDisplayForVmTag ( existingVmTag ) ; org.ovirt.engine.core.common.businessentities.TagsVmMap result = dao.getTagVmByTagIdAndByVmId ( existingVmTag.gettag_id ( ) , existingVmTag.getvm_id ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; assertEqualsTagsVmMap ( existingVmTag , result ) ; }
private void doTestNetworkIpAddressWasSameAsHostnameAndChangedForBootProtocol ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( bootProtocol , null , null ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( attachment ) ; org.ovirt.engine.core.bll.ValidationResult actual = validator.networkIpAddressWasSameAsHostnameAndChanged ( null ) ; org.junit.Assert.assertThat ( actual , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testRemove ( ) { dao.remove ( existingVds.getId ( ) ) ; statisticsDao.remove ( existingVds.getId ( ) ) ; staticDao.remove ( existingVds.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VdsStatic resultStatic = staticDao.get ( existingVds.getId ( ) ) ; org.junit.Assert.assertNull ( resultStatic ) ; org.ovirt.engine.core.common.businessentities.VdsDynamic resultDynamic = dao.get ( existingVds.getId ( ) ) ; org.junit.Assert.assertNull ( resultDynamic ) ; }
public void init ( javax.servlet.ServletConfig config ) throws javax.servlet.ServletException { super . init ( config ) ; type = config.getInitParameter ( org.ovirt.engine.core.FileServlet.TYPE ) ; final java.lang.String name = config.getInitParameter ( org.ovirt.engine.core.FileServlet.FILE ) ; if ( name == null ) { final java.lang.String message = ( "Can\'t get base name from parameter \"" + ( org.ovirt.engine.core.FileServlet.FILE ) ) + "\"." ; org.ovirt.engine.core.FileServlet.log.error ( message ) ; throw new javax.servlet.ServletException ( message ) ; } base = new java.io.File ( org.ovirt.engine.core.utils.EngineLocalConfig.getInstance ( ) . expandString ( name.replaceAll ( "%\\{" , "\\${" ) ) ) ; }
protected java.lang.Long getRawValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { return ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ? ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . getSize ( ) : ( ( long ) ( ( ( ( org.ovirt.engine.core.common.businessentities.LunDisk ) ( object ) ) . getLun ( ) . getDeviceSize ( ) ) * ( java.lang.Math.pow ( 1024 , 3 ) ) ) ) ; }
protected boolean activateOrDeactivateNic ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic , org.ovirt.engine.core.common.action.PlugAction plugAction ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getBackend ( ) . runInternalAction ( VdcActionType.ActivateDeactivateVmNic , createActivateDeactivateParameters ( nic , plugAction ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { propagateFailure ( returnValue ) ; } return returnValue.getSucceeded ( ) ; }
public void setUp ( ) throws java.lang.Exception { validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.provider.RemoveProviderCommand.RemoveProviderValidator ( vmDao , provider ) ) ; org.mockito.Mockito.doReturn ( networkDao ) . when ( validator ) . getNetworkDao ( ) ; org.mockito.Mockito.when ( networkDao.getAllForProvider ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( networks ) ; }
private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient getJsonClient ( org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor , java.lang.String hostName , int port , org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy , org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy , int parallelism ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = reactor.createClient ( hostName , port ) ; client.setClientPolicy ( connectionPolicy ) ; org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker worker = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker ( parallelism ) ; org.ovirt.vdsm.jsonrpc.client.JsonRpcClient jsonClient = worker.register ( client ) ; jsonClient.setRetryPolicy ( clientPolicy ) ; return jsonClient ; }
private org.ovirt.engine.core.compat.Guid getClusterIdOfSelectedVms ( ) { org.ovirt.engine.core.compat.Guid clusterId = null ; for ( java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.VM a = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( item ) ) ; if ( clusterId == null ) { clusterId = a.getVdsGroupId ( ) ; } else if ( ! ( clusterId.equals ( a.getVdsGroupId ( ) ) ) ) { clusterId = null ; break ; } } return clusterId ; }
private static java.lang.String serializeParameters ( org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParams = params.getParentParameters ( ) ; params.setParentParameters ( null ) ; java.lang.String jsonStr = new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer ( ) . serialize ( params ) ; params.setParentParameters ( parentParams ) ; return jsonStr ; }
protected com.woorea.openstack.quantum.model.Port createNewPortForAllocate ( org.ovirt.engine.core.common.businessentities.network.VmNic nic , java.util.List < java.lang.String > securityGroups , java.lang.String hostId , org.ovirt.engine.core.common.businessentities.network.Network externalNetwork ) { com.woorea.openstack.quantum.model.Port portForCreate = super . createNewPortForAllocate ( nic , securityGroups , hostId , externalNetwork ) ; portForCreate.setTenantId ( externalNetwork.getTenantId ( ) ) ; return portForCreate ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.ActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , java.lang.Object taskReturn ) { return setUpActionExpectations ( task , clz , names , values , true , true , taskReturn , null , true ) ; }
public java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.aaa.DbUser > getUsers ( ) { java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.aaa.DbUser > users = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.aaa.DbUser > ( ) ; for ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user : lookupUsers ( ) ) { users.put ( user.getId ( ) , user ) ; } return users ; }
private java.lang.String getMemoryVolumeForNewActiveSnapshot ( ) { return getParameters ( ) . isImportAsNewEntity ( ) ? org.apache.commons.lang.StringUtils.EMPTY : getMemoryVolumeFromActiveSnapshotInExportDomain ( ) ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( ! ( bondDialogModel.validate ( ) ) ) { return ; } sourceListModel.setConfirmWindow ( null ) ; setBondOptions ( entity , bondDialogModel ) ; org.ovirt.engine.core.common.businessentities.network.Bond bond = ( ( org.ovirt.engine.core.common.businessentities.network.Bond ) ( entity ) ) ; onBondEditUpdateParams ( bond ) ; }
public org.ovirt.engine.core.config.entity.helper.ValidationResult validate ( org.ovirt.engine.core.config.entity.ConfigKey key , java.lang.String value ) { boolean result = true ; java.lang.String errMsg = null ; if ( org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance ( ) . syntaxErrorInProperties ( value ) ) { result = false ; errMsg = "Invalid syntax, user defined VM properties specification should conform to " + ( org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance ( ) . getVmPropSpec ( ) ) ; } return new org.ovirt.engine.core.config.entity.helper.ValidationResult ( result , errMsg ) ; }
public void insufficientDiskSpace ( ) { final org.ovirt.engine.core.bll.ImportVmTemplateCommand command = setupVolumeFormatAndTypeTest ( VolumeFormat.RAW , VolumeType.Preallocated , StorageType.NFS ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . validateSpaceRequirements ( org.mockito.Matchers.anyList ( ) ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; }
public static java.lang.String toPlural ( java.lang.String singular ) { java.lang.String plural = org.ovirt.engine.sdk.codegen.utils.StringUtils.PLURAL_EXCEPTIONS.get ( singular ) ; if ( plural == null ) { if ( ( ( singular.length ( ) ) >= 1 ) && ( ! ( singular.endsWith ( "s" ) ) ) ) { plural = singular + "s" ; } else { plural = singular ; } } return plural ; }
protected void sendWarningForNonExportableDisks ( org.ovirt.engine.core.common.businessentities.VM entity ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getVmDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getWindow ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel ) ( target ) ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > vmDisks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks ( model , vmDisks , VmModelHelper.WarningType.VM_EXPORT ) ; } } ) , entity.getId ( ) ) ; }
public static java.util.Map < org.ovirt.engine.core.common.businessentities.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > filterConnectionsByStorageType ( org.ovirt.engine.core.common.businessentities.LUNs lun ) { java.util.Map < org.ovirt.engine.core.common.businessentities.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > storageConnectionsForStorageTypeMap = new java.util.EnumMap < org.ovirt.engine.core.common.businessentities.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > ( org.ovirt.engine.core.common.businessentities.StorageType.class ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections lunConnections : lun.getLunConnections ( ) ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap ( lunConnections.getstorage_type ( ) , lunConnections , storageConnectionsForStorageTypeMap ) ; } return storageConnectionsForStorageTypeMap ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__RECONSTRUCT_MASTER ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__STORAGE__DOMAIN ) ; }
public void testMapping ( ) { org.ovirt.engine.api.model.StorageFormat storageFormat = org.ovirt.engine.api.restapi.types.StorageFormatMapper.map ( StorageFormatType.V1 , null ) ; org.junit.Assert.assertEquals ( StorageFormat.V1 , storageFormat ) ; org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormatType = org.ovirt.engine.api.restapi.types.StorageFormatMapper.map ( storageFormat , null ) ; org.junit.Assert.assertEquals ( StorageFormatType.V1 , storageFormatType ) ; storageFormat = org.ovirt.engine.api.restapi.types.StorageFormatMapper.map ( StorageFormatType.V2 , null ) ; org.junit.Assert.assertEquals ( StorageFormat.V2 , storageFormat ) ; storageFormatType = org.ovirt.engine.api.restapi.types.StorageFormatMapper.map ( storageFormat , null ) ; org.junit.Assert.assertEquals ( StorageFormatType.V2 , storageFormatType ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String pk = ( ( java.lang.String ) ( result ) ) ; if ( ( pk != null ) && ( ( pk.length ( ) ) > 0 ) ) { getPublicKey ( ) . setEntity ( result ) ; } }
private void stopSpm ( ) { org.ovirt.engine.core.common.businessentities.VdsSpmStatus spmStatus = org.ovirt.engine.core.bll.pm.StopVdsCommand.getDbFacade ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds ( ) . getId ( ) ) . getSpmStatus ( ) ; if ( spmStatus != ( org.ovirt.engine.core.common.businessentities.VdsSpmStatus.None ) ) { runVdsCommand ( VDSCommandType.SpmStop , new org.ovirt.engine.core.common.vdscommands.SpmStopVDSCommandParameters ( org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds ( ) . getId ( ) , org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds ( ) . getStoragePoolId ( ) ) ) ; } }
public javax.ws.rs.core.Response remove ( ) { org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet = lookupSubnetById ( id ) ; if ( subnet != null ) { org.ovirt.engine.core.common.action.ExternalSubnetParameters parameters = new org.ovirt.engine.core.common.action.ExternalSubnetParameters ( ) ; parameters.setSubnet ( subnet ) ; return performAction ( ActionType.RemoveSubnetFromProvider , parameters ) ; } throw new javax.ws.rs.WebApplicationException ( Response.Status.NOT_FOUND ) ; }
private void initiateResumeUpload ( ) { startProgress ( null ) ; final org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters ( ) ; parameters.setDiskId ( getDiskModel ( ) . getDisk ( ) . getId ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.TransferImageStatus , parameters , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { initiateResumeUploadCheckStatus ( result ) ; } } , this ) ; }
protected org.ovirt.engine.core.common.businessentities.VM getVmWithoutConfiguration ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid snapshotId ) { org.ovirt.engine.core.common.businessentities.VM vm = vmDao.get ( vmId ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > interfaces = vmNetworkInterfaceDao.getAllForVm ( vm.getId ( ) ) ; vm.setInterfaces ( interfaces ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disks = diskImageDao.getAllSnapshotsForVmSnapshot ( snapshotId ) ; vm.setImages ( new java.util.ArrayList ( disks ) ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage currDisk : disks ) { currDisk.setActive ( true ) ; } return vm ; }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters ( int timeout ) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds ( ) , getNetworksToConfigure ( ) , getAllNetworksToRemove ( ) , org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getBonds ( ) , getRemovedBondNames ( ) ) ; hostCmdParams.setRollbackOnFailure ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . rollbackOnFailure ( ) ) ; hostCmdParams.setConectivityTimeout ( timeout ) ; boolean hostNetworkQosSupported = org.ovirt.engine.core.common.FeatureSupported.hostNetworkQos ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds ( ) . getVdsGroupCompatibilityVersion ( ) ) ; hostCmdParams.setHostNetworkQosSupported ( hostNetworkQosSupported ) ; return hostCmdParams ; }
public void invoke ( org.ovirt.engine.api.extensions.ExtMap context , java.util.Map < java.lang.String , java.lang.Object > args ) { if ( ! ( context.containsKey ( ContextKeys.EXIT_STATUS ) ) ) { context.put ( Schema.InvokeKeys.MODIFICATION_TYPE , Sql.ModificationTypes.UPDATE ) ; context.put ( Schema.InvokeKeys.ENTITY_KEYS , new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Schema.UserIdentifiers.USERNAME , context.get ( ContextKeys.POSITIONAL ) ) . mput ( Schema.UserKeys.UNLOCK_TIME , java.lang.System.currentTimeMillis ( ) ) ) ; org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get ( "_schema-modify" ) . invoke ( context ) ; context.putIfAbsent ( ContextKeys.EXIT_STATUS , org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS ) ; } }
public void testSetStatusForRequiredNetworkPresentOnHost ( ) { networkCluster.setStatus ( NetworkStatus.OPERATIONAL ) ; testSetStatusForRequiredNetwork ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME ) ; org.mockito.Mockito.verify ( networkClusterDao , org.mockito.Mockito.never ( ) ) . updateStatus ( org.mockito.Matchers.same ( networkCluster ) ) ; org.junit.Assert.assertThat ( networkCluster.getStatus ( ) , org.hamcrest.Matchers.is ( NetworkStatus.OPERATIONAL ) ) ; }
protected void initDisksStorageDomainsList ( ) { for ( java.lang.Object item : getItems ( ) ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData ) ( item ) ) . getTemplate ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : template.getDiskList ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; addDiskImportData ( diskImage.getId ( ) , filteredStorageDomains , diskImage.getVolumeType ( ) , new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( true ) ) ; } } postInitDisks ( ) ; }
public void setUserName ( java.lang.String userName ) { userNameTooltip.setText ( userName ) ; com.google.gwt.user.client.ui.Widget userNameWidget = this . userName.getWidget ( 0 ) ; userNameWidget.removeStyleName ( Styles.FONT_AWESOME_BASE ) ; userNameWidget.removeStyleName ( IconType.USER.getCssName ( ) ) ; userNameWidget.addStyleName ( PatternflyIconType.PF_BASE.getCssName ( ) ) ; userNameWidget.addStyleName ( PatternflyIconType.PF_USER.getCssName ( ) ) ; }
protected void executeCommand ( ) { storageServerConnectionExtensionDao.save ( org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionExtensionCommand.getParameters ( ) . getStorageServerConnectionExtension ( ) ) ; org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionExtensionCommand.getReturnValue ( ) . setActionReturnValue ( org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionExtensionCommand.getParameters ( ) . getStorageServerConnectionExtension ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionExtensionCommand.getReturnValue ( ) . setSucceeded ( true ) ; }
protected org.ovirt.engine.core.dal.dbbroker.CustomMapSqlParameterSource getParamsSource ( org.ovirt.engine.core.common.businessentities.Tags tag ) { org.ovirt.engine.core.dal.dbbroker.CustomMapSqlParameterSource paramsSource = new org.ovirt.engine.core.dal.dbbroker.CustomMapSqlParameterSource ( dbEngineDialect ) ; paramsSource.addValue ( "description" , tag.getDescription ( ) ) . addValue ( "tag_id" , tag.getTagId ( ) ) . addValue ( "tag_name" , tag.getTagName ( ) ) . addValue ( "parent_id" , tag.getParentId ( ) ) . addValue ( "readonly" , tag.getIsReadonly ( ) ) . addValue ( "type" , tag.getType ( ) ) ; return paramsSource ; }
protected java.util.Set < org.ovirt.engine.core.compat.Guid > getExcludeUsers ( ) { java.util.Set < org.ovirt.engine.core.compat.Guid > excludeUsers = new java.util.HashSet < org.ovirt.engine.core.compat.Guid > ( ) ; if ( ( getExcludeItems ( ) ) != null ) { for ( java.lang.Object item : getExcludeItems ( ) ) { org.ovirt.engine.core.common.businessentities.DbUser a = ( ( org.ovirt.engine.core.common.businessentities.DbUser ) ( item ) ) ; excludeUsers.add ( a.getId ( ) ) ; } } return excludeUsers ; }
protected boolean disconnectStorage ( ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.DisconnectStorageServer , new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters ( org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand.getParameters ( ) . getVdsId ( ) , org.ovirt.engine.core.compat.Guid.Empty , org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand.getParameters ( ) . getStorageServerConnection ( ) . getstorage_type ( ) , new java.util.ArrayList ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections [ ] { org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand.getConnection ( ) } ) ) ) ) . getSucceeded ( ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( returnValue ) ) ; model.getPath ( ) . setEntity ( connection.getconnection ( ) ) ; model.getVfsType ( ) . setEntity ( connection.getVfsType ( ) ) ; model.getMountOptions ( ) . setEntity ( connection.getMountOptions ( ) ) ; }
private void removeVmStatlessImages ( ) { isFailedStatlessSnapshot = true ; org.ovirt.engine.core.bll.VmPoolHandler.processVmPoolOnStopVm ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getId ( ) , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.RunVmCommand.getExecutionContext ( ) , org.ovirt.engine.core.bll.RunVmCommand.getLock ( ) ) ) ; org.ovirt.engine.core.bll.RunVmCommand.setLock ( null ) ; org.ovirt.engine.core.bll.RunVmCommand.setSucceeded ( true ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsDevice > getGraphicsDevices ( ) { if ( ( cachedGraphics ) == null ) { cachedGraphics = org.ovirt.engine.core.bll.UpdateVmCommand.getBackend ( ) . runInternalQuery ( VdcQueryType.GetGraphicsDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . getVmId ( ) ) ) . getReturnValue ( ) ; } return cachedGraphics ; }
public void getValueWithMultipleVersions ( ) throws java.lang.Exception { final java.lang.String key = "MaxNumOfVmSockets" ; org.ovirt.engine.core.config.EngineConfigTest.log.info ( ( "getValue: Testing fetch multiple version of " + key ) ) ; java.util.List < org.ovirt.engine.core.config.entity.ConfigKey > keys = config.getEngineConfigLogic ( ) . getConfigDAO ( ) . getKeysForName ( key ) ; for ( org.ovirt.engine.core.config.entity.ConfigKey configKey : keys ) { org.ovirt.engine.core.config.EngineConfigTest.log.info ( ( ( ( configKey.getDisplayValue ( ) ) + " version: " ) + ( configKey.getVersion ( ) ) ) ) ; } org.junit.Assert.assertTrue ( ( ( keys.size ( ) ) > 0 ) ) ; }
protected boolean hostToRunExist ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > dedicatedHostsList = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getDedicatedVmForVdsList ( ) ; if ( dedicatedHostsList.isEmpty ( ) ) { return true ; } for ( org.ovirt.engine.core.compat.Guid candidateHostGuid : dedicatedHostsList ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( candidateHostGuid ) ) == null ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST ) ; return false ; } } return true ; }
protected java.lang.String getColumnWidthKey ( com.google.gwt.user.cellview.client.Column < T , ? > column ) { if ( columnResizePersistenceEnabled ) { return ( ( ( ( org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.GRID_COLUMN_WIDTH_PREFIX ) + "_" ) + ( getGridElementId ( ) ) ) + "_" ) + ( determineOriginalIndex ( getColumnIndex ( column ) ) ) ; } return null ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm.getId ( ) ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
private java.lang.Runnable pendingOperations ( ) throws java.io.IOException , org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ( this . nioEngine ) == null ) { return null ; } if ( ( this . certCallback ) != null ) { this . certCallback.registerSslSession ( this . nioEngine.getSSLEngine ( ) . getSession ( ) ) ; } return nioEngine.process ( ) ; }
protected static void addContextMessage ( org.ovirt.engine.api.extensions.ExtMap context , boolean error , java.lang.String message ) { org.ovirt.engine.api.extensions.ExtKey key ; if ( error ) { key = org.ovirt.engine.extension.aaa.jdbc.binding.cli.ContextKeys.ERR_MESSAGES ; } else { key = org.ovirt.engine.extension.aaa.jdbc.binding.cli.ContextKeys.OUT_MESSAGES ; } context.< java.util.List < java.lang.String > > get ( key ) . add ( message ) ; }
private void handleCopyResult ( org.ovirt.engine.core.common.businessentities.DiskImage srcDiskImage , org.ovirt.engine.core.common.businessentities.DiskImage copiedDiskImage , org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { if ( ! ( result.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError ) ; } else { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice ( copiedDiskImage ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getTaskIdList ( ) . addAll ( result.getInternalVdsmTaskIdList ( ) ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getSrcDiskIdToTargetDiskIdMapping ( ) . put ( srcDiskImage.getId ( ) , copiedDiskImage.getId ( ) ) ; } }
public void addOrUpdateTaskInDB ( final org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask ) { coCoAsyncTaskHelper.addOrUpdateTaskInDB ( asyncTask ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model.setDataCenter ( model , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.StoragePool [ ] { dataCenter } ) ) ) ; model.getDataCenter ( ) . setIsChangable ( false ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapUser populateUserData ( org.ovirt.engine.core.common.businessentities.LdapUser user , java.lang.String domain ) { if ( user == null ) { return null ; } user.setDomainControler ( domain ) ; java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.LdapGroup > groupsDict = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.LdapGroup > ( ) ; org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator generator = new org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator ( ) ; proceedGroupsSearchResult ( user.getMemberof ( ) , groupsDict , generator ) ; user.setGroups ( groupsDict ) ; return user ; }
private void logException ( java.lang.RuntimeException ex ) { if ( ( ( ex.getMessage ( ) ) == null ) || ( ! ( ex.getMessage ( ) . contains ( "Policy reset" ) ) ) ) { log.error ( "Command '{}' execution failed: {}" , this , ex.getMessage ( ) ) ; log.debug ( "Exception" , ex ) ; } }
public static boolean isRangeValid ( java.lang.String start , java.lang.String end ) { long startNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( start ) ; long endNum = org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( end ) ; return ! ( org.ovirt.engine.core.utils.MacAddressRangeUtils.innerInitRange ( 1 , startNum , endNum ) . isEmpty ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.AsyncTasks getByVdsmTaskId ( org.ovirt.engine.core.compat.Guid vdsmTaskId ) { return coCoAsyncTaskHelper.getByVdsmTaskId ( vdsmTaskId ) ; }
public void testCannotUpdateOSNotSupportVirtioScsi ( ) { prepareVmToPassValidate ( ) ; group.setCompatibilityVersion ( Version.v4_0 ) ; org.mockito.Mockito.when ( command.isVirtioScsiEnabledForVm ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( osRepository.getDiskInterfaces ( org.mockito.Matchers.any ( java.lang.Integer.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ) . thenReturn ( new java.util.ArrayList < > ( java.util.Arrays.asList ( "VirtIO" ) ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI ) ; }
protected org.ovirt.engine.api.model.Tag lookupTagByName ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.Tags tag : getBackendCollection ( org.ovirt.engine.core.common.businessentities.Tags.class , QueryType.GetAllTags , new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) ) ) { if ( tag.getTagName ( ) . equals ( name ) ) { return map ( tag ) ; } } return handleError ( new org.ovirt.engine.api.restapi.resource.EntityNotFoundException ( name ) , false ) ; }
public void getVdsWithVm ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b.setVds ( vds ) ; b.setVdsId ( vdsId ) ; b.setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b.getVds ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 , v.getId ( ) ) ; }
private static void addFloppyDetails ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct ) { struct.add ( VdsProperties.Type , vmDevice.getType ( ) ) ; struct.add ( VdsProperties.Device , vmDevice.getDevice ( ) ) ; struct.add ( VdsProperties.Index , "0" ) ; struct.add ( VdsProperties.NETWORK_INTERFACE , VdsProperties.Fdc ) ; struct.add ( VdsProperties.ReadOnly , java.lang.String.valueOf ( vmDevice.getIsReadOnly ( ) ) ) ; struct.add ( VdsProperties.Shareable , java.lang.Boolean.FALSE.toString ( ) ) ; }
public void onBrowserEvent ( com.google.gwt.cell.client.Cell.Context context , com.google.gwt.dom.client.Element elem , com.google.gwt.dom.client.NativeEvent event ) { getCell ( ) . onBrowserEvent ( context , elem , org.ovirt.engine.ui.common.widget.table.header.AbstractHeader.getValue ( ) , org.ovirt.engine.ui.common.widget.table.header.AbstractHeader.getTooltip ( ) , event , updater ) ; if ( ( BrowserEvents.CONTEXTMENU.equals ( event.getType ( ) ) ) && ( ( contextMenuHandler ) != null ) ) { contextMenuHandler.onContextMenu ( event ) ; } }
private static void assertDiskDescriptionMap ( org.ovirt.engine.core.common.businessentities.Disk disk ) throws java.io.IOException { org.junit.Assert.assertEquals ( "Should be map of disk alias and disk description" , java.lang.String.format ( ( "{\"DiskAlias\":\"%s\"," + "\"DiskDescription\":\"%s\"}" ) , disk.getDiskAlias ( ) , org.apache.commons.lang.StringUtils.defaultString ( disk.getDiskDescription ( ) ) ) , org.ovirt.engine.core.bll.ImagesHandler.getJsonDiskDescription ( disk ) ) ; }
public void canDoActionVmIsNotDown ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDAO ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN.toString ( ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > bonds = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; allBonds = bonds ; queryLabels ( ) ; }
protected void executeQueryCommand ( ) { boolean succeeded = true ; if ( sessionDataContainer.isSessionExists ( org.ovirt.engine.core.bll.aaa.GetDbUserBySessionQuery.getParameters ( ) . getSessionId ( ) ) ) { setReturnValue ( sessionDataContainer.getUser ( org.ovirt.engine.core.bll.aaa.GetDbUserBySessionQuery.getParameters ( ) . getSessionId ( ) , false ) ) ; } else { succeeded = false ; } org.ovirt.engine.core.bll.aaa.GetDbUserBySessionQuery.getQueryReturnValue ( ) . setSucceeded ( succeeded ) ; }
public void testGetAllRoleGroupMaps ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.RoleGroupMap > result = dao.getAllForRole ( FixturesTool.ROLE_ID ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.RoleGroupMap map : result ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.ROLE_ID , map.getRoleId ( ) ) ; } }
public void updateGlusterServerHookChecksum ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId , java.lang.String checksum ) { getCallsHandler ( ) . executeModification ( "UpdateGlusterServerHookChecksum" , getCustomMapSqlParameterSource ( ) . addValue ( "hook_id" , hookId ) . addValue ( "server_id" , serverId ) . addValue ( "checksum" , checksum ) ) ; }
private void onSaveSanStorage ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow ( ) ) ) ; if ( ( confirmationModel != null ) && ( ! ( confirmationModel.validate ( ) ) ) ) { return ; } cancelConfirm ( ) ; getWindow ( ) . startProgress ( null ) ; org.ovirt.engine.ui.uicompat.Task.create ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays.asList ( new java.lang.Object [ ] { "SaveSan" } ) ) ) . run ( ) ; }
private void assertGetAllForVdsCorrectResult ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > result ) { org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : result ) { org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.VDS_ID , iface.getVdsId ( ) ) ; } }
public void compensate ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.RemoveDisk , new org.ovirt.engine.core.common.action.RemoveDiskParameters ( enclosingCommand.getParameters ( ) . getImageGroupID ( ) ) ) ; enclosingCommand.getReturnValue ( ) . getVdsmTaskIdList ( ) . addAll ( vdcReturnValue.getInternalVdsmTaskIdList ( ) ) ; }
public void testUpdateNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , true ) ; try { resource.update ( getModel ( 0 ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private java.util.List < org.ovirt.engine.core.common.queries.QueryParametersBase > createQueryParameterList ( final org.ovirt.engine.core.common.queries.QueryParametersBase parameters , final int count ) { java.util.ArrayList < org.ovirt.engine.core.common.queries.QueryParametersBase > result = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { result.add ( parameters ) ; } return result ; }
org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createNetworkInSyncWithVdsNetworkInterface ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos ( networkAttachment , network ) ; return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface ( nic , network , hostNetworkQos ) ; }
private static void updateSmartcardDevice ( org.ovirt.engine.core.common.businessentities.VM oldVm , org.ovirt.engine.core.common.businessentities.VmBase newVm ) { if ( ( newVm.isSmartcardEnabled ( ) ) == ( oldVm.isSmartcardEnabled ( ) ) ) { return ; } org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice ( newVm.getId ( ) , newVm.isSmartcardEnabled ( ) ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageById ( org.ovirt.engine.core.compat.Guid id , java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( diskImages , new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate ( id ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > getHostLuns ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > ) ( runVdsCommand ( VDSCommandType.GetDeviceList , new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters ( vds.getId ( ) , org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.getStorageDomain ( ) . getStorageType ( ) ) ) . getReturnValue ( ) ) ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { getResult ( ) . setFailedVds ( vds ) ; throw e ; } }
private void setUpAddUserExpectations ( java.lang.String query ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( query , SearchType.AdUser , getAdUser ( 0 ) ) ; setUpCreationExpectations ( VdcActionType.AddUser , org.ovirt.engine.core.common.action.AddUserParameters.class , new java.lang.String [ ] { "AdUser.UserId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true , null , VdcQueryType.GetDbUserByUserId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; }
public void setUp ( ) { disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; metadataDiskDescriptionHandler = org.mockito.Mockito.spy ( org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance ( ) ) ; org.mockito.Mockito.doReturn ( auditLogDirector ) . when ( metadataDiskDescriptionHandler ) . getAuditLogDirector ( ) ; org.mockito.Mockito.doNothing ( ) . when ( auditLogDirector ) . log ( org.mockito.Matchers.any ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.AuditLogType.class ) ) ; }
protected void initFrontend ( ) { org.ovirt.engine.ui.frontend.Frontend.setEventsHandler ( frontendEventsHandler ) ; org.ovirt.engine.ui.frontend.Frontend.getFrontendFailureEvent ( ) . addListener ( frontendFailureEventListener ) ; org.ovirt.engine.ui.frontend.Frontend.getFrontendNotLoggedInEvent ( ) . addListener ( new org.ovirt.engine.core.compat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { user.logout ( ) ; } } ) ; org.ovirt.engine.ui.frontend.Frontend.setFilterQueries ( filterFrontendQueries ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult glusterNetworkInUseAndUnset ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_NETWORK_INUSE ) . when ( ( ( ( ( cluster.supportsGlusterService ( ) ) && ( oldNetworkCluster.isGluster ( ) ) ) && ( ! ( networkCluster.isGluster ( ) ) ) ) && ( isGlusterNetworkInUse ( ) ) ) ) ; }
public void auditInvalidInterfaces ( java.lang.String entityName ) { if ( ! ( invalidNetworkNames.isEmpty ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "EntityName" , entityName ) ; logable.addCustomValue ( "Networks" , org.apache.commons.lang.StringUtils.join ( invalidNetworkNames , ',' ) ) ; logable.addCustomValue ( "Interfaces" , org.apache.commons.lang.StringUtils.join ( invalidIfaceNames , ',' ) ) ; createAuditLogDirector ( ) . log ( logable , logType ) ; } }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , null ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public void validatePass ( ) { org.mockito.Mockito.when ( hostedEngineHelper.getStorageDomain ( ) ) . thenReturn ( null ) ; org.ovirt.engine.core.common.businessentities.StorageDomain sd = mockGetExistingDomain ( true ) ; int i = new java.util.Random ( ) . nextInt ( SUPPORTED_DOMAIN_TYPES.length ) ; sd.setStorageType ( org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES [ i ] ) ; sd.setStorageName ( org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommandTest.HOSTED_STORAGE_NAME ) ; cmd.init ( ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
protected java.net.HttpURLConnection create ( java.net.URL url ) throws java.io.IOException , java.security.GeneralSecurityException { return new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder ( url ) . setHttpsProtocol ( httpsProtocol ) . setReadTimeout ( readTimeout ) . setTrustManagerAlgorithm ( trustManagerAlgorithm ) . setTrustStore ( trustStore ) . setTrustStorePassword ( trustStorePassword ) . setTrustStoreType ( trustStoreType ) . setURL ( url ) . setVerifyChain ( verifyChain ) . setVerifyHost ( verifyHost ) . create ( ) ; }
private void computeSmallByLargeIconId ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { if ( ( vmBase.getLargeIconId ( ) ) == null ) { return ; } final java.util.List < org.ovirt.engine.core.common.businessentities.VmIconDefault > iconDefaultsByLargeIconId = vmIconDefaultDao.getByLargeIconId ( vmBase.getLargeIconId ( ) ) ; if ( ! ( iconDefaultsByLargeIconId.isEmpty ( ) ) ) { vmBase.setSmallIconId ( iconDefaultsByLargeIconId.get ( 0 ) . getSmallIconId ( ) ) ; } else { vmBase.setSmallIconId ( ensureSmallIconInDatabase ( vmBase.getLargeIconId ( ) ) ) ; } }
public void testNotManagementNetworkNegative ( ) { org.mockito.Mockito.when ( network.getId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ; org.mockito.Mockito.when ( managementNetworkUtil.isManagementNetwork ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ) . thenReturn ( false ) ; org.junit.Assert.assertThat ( validator.notManagementNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testGetAllClusterSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Cluster" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery.executeQueryCommand ( ) ; org.junit.Assert.assertTrue ( ( ( vdsGroupResultList ) == ( searchQuery.getQueryReturnValue ( ) . getReturnValue ( ) ) ) ) ; }
public void setHasSelectedTags ( boolean hasSelectedTags ) { if ( hasSelectedTags ) { searchStringPrefixLabel.addStyleName ( style.hasSelectedTags ( ) ) ; searchStringInput.addStyleName ( style.hasSelectedTags ( ) ) ; searchBoxClear.addStyleName ( style.hasSelectedTags ( ) ) ; } else { searchStringPrefixLabel.removeStyleName ( style.hasSelectedTags ( ) ) ; searchStringInput.removeStyleName ( style.hasSelectedTags ( ) ) ; searchBoxClear.removeStyleName ( style.hasSelectedTags ( ) ) ; } }
public void testNetworkNotAttachedToHostWhenAttached ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid networkId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.mockito.Mockito.when ( vdsDaoMock.getAllForNetwork ( org.mockito.Matchers.eq ( networkId ) ) ) . thenReturn ( java.util.Collections.singletonList ( host ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNetworkId ( networkId ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( attachment ) . networkNotAttachedToHost ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_ALREADY_ATTACHED_TO_HOST ) ) ; }
protected org.ovirt.engine.api.model.Clusters mapCollection ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > entities ) { org.ovirt.engine.api.model.Clusters collection = new org.ovirt.engine.api.model.Clusters ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup entity : entities ) { collection.getClusters ( ) . add ( addLinks ( populate ( map ( entity ) , entity ) ) ) ; } return collection ; }
private org.ovirt.engine.core.common.vdscommands.GetVmsInfoVDSCommandParameters buildGetVmsInfoParameters ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storage ) { org.ovirt.engine.core.common.vdscommands.GetVmsInfoVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.GetVmsInfoVDSCommandParameters ( org.ovirt.engine.core.bll.exportimport.GetAllFromExportDomainQuery.getParameters ( ) . getStoragePoolId ( ) ) ; parameters.setStorageDomainId ( storage.getId ( ) ) ; parameters.setVmIdList ( org.ovirt.engine.core.bll.exportimport.GetAllFromExportDomainQuery.getParameters ( ) . getIds ( ) ) ; return parameters ; }
private void executeFenceVdsManuallyAction ( ) { org.ovirt.engine.core.common.action.FenceVdsManualyParameters fenceVdsManuallyParams = new org.ovirt.engine.core.common.action.FenceVdsManualyParameters ( false ) ; fenceVdsManuallyParams.setStoragePoolId ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVds ( ) . getStoragePoolId ( ) ) ; fenceVdsManuallyParams.setVdsId ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVdsId ( ) ) ; fenceVdsManuallyParams.setSessionId ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getParameters ( ) . getSessionId ( ) ) ; fenceVdsManuallyParams.setParentCommand ( VdcActionType.RestartVds ) ; runInternalAction ( VdcActionType.FenceVdsManualy , fenceVdsManuallyParams , org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.dupContext ( ) . withoutCompensationContext ( ) . withLock ( new org.ovirt.engine.core.utils.lock.EngineLock ( getExclusiveLocks ( ) , null ) ) ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "fencingEnabled" , fencingEnabled ) . append ( "skipFencingIfSDActive" , skipFencingIfSDActive ) . append ( "skipFencingIfConnectivityBroken" , skipFencingIfConnectivityBroken ) . append ( "hostsWithBrokenConnectivityThreshold" , hostsWithBrokenConnectivityThreshold ) . append ( "skipFencingIfGlusterBricksUp" , skipFencingIfGlusterBricksUp ) . append ( "skipFencingIfGlusterQuorumNotMet" , skipFencingIfGlusterQuorumNotMet ) . build ( ) ; }
protected void selectionChanged ( java.lang.Boolean value ) { for ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel : getNetworksTableItems ( ) ) { if ( canEditRequired ( clusterNetworkModel ) ) { clusterNetworkModel.setRequired ( value ) ; } refreshNetworksTable ( ) ; } }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void testGetListForSpmSelection ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao.getListForSpmSelection ( FixturesTool.DATA_CENTER ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ( result.get ( 0 ) . getVdsSpmPriority ( ) ) >= ( result.get ( 1 ) . getVdsSpmPriority ( ) ) ) ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "exclusiveLocks" , exclusiveLocks ) . append ( "sharedLocks" , sharedLocks ) . build ( ) ; }
void initTable ( ) { initTableOverhead ( ) ; handleRadioButtonClick ( null ) ; getTable ( ) . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > > ( constants.setupHostNetworksInterface ( ) ) { @ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getDetailModel ( ) . getSetupNetworksCommand ( ) ; } } ) ; }
private void changePassword ( ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.ChangeUserPassword , new org.ovirt.engine.core.common.action.ChangeUserPasswordParameters ( ( ( java.lang.String ) ( getUserName ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( getPassword ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( getNewPassword ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( getDomain ( ) . getSelectedItem ( ) ) ) ) ) ; }
public void setUp ( ) throws java.io.IOException { ovfManager.setOsRepository ( osRepository ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . getCluster ( ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( cmd ) . getImages ( ) ; mockCluster ( ) ; setXmlOvfData ( ) ; }
private boolean isQuietTimeFromLastActionPassed ( ) { int secondsLeftToNextPmOp = ( org.ovirt.engine.core.bll.RestartVdsCommand.isInternalExecution ( ) ) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAuditLogDao ( ) . getTimeToWaitForNextPmOp ( org.ovirt.engine.core.bll.RestartVdsCommand.getVds ( ) . getName ( ) , AuditLogType.USER_VDS_RESTART.name ( ) ) ; if ( secondsLeftToNextPmOp > 0 ) { addCanDoActionMessage ( VdcBllMessages.VDS_FENCE_DISABLED_AT_QUIET_TIME ) ; org.ovirt.engine.core.bll.RestartVdsCommand.addCanDoActionMessageVariable ( "seconds" , secondsLeftToNextPmOp ) ; return false ; } else { return true ; } }
public int compare ( org.ovirt.engine.core.common.businessentities.DiskImage x , org.ovirt.engine.core.common.businessentities.DiskImage y ) { if ( x.getCreationDate ( ) . before ( y.getCreationDate ( ) ) ) { return - 1 ; } if ( x.getCreationDate ( ) . after ( y.getCreationDate ( ) ) ) { return 1 ; } return 0 ; }
private void updateDisks ( java.lang.Object sender ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.ListModel ) ( sender ) ) . getSelectedItem ( ) ) ) ; if ( storageDomain != null ) { for ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel innerDisk : disks ) { if ( innerDisk.getStorageDomain ( ) . equals ( sender ) ) { updateQuota ( storageDomain.getId ( ) , innerDisk.getQuota ( ) ) ; updateDiskProfile ( storageDomain.getId ( ) , innerDisk.getDiskProfile ( ) ) ; break ; } } } }
private void updateConflictActionsAvailability ( boolean isRemove ) { getResolveContentConflict ( ) . setEntity ( ( ! isRemove ) ) ; getResolveContentConflict ( ) . setIsChangeable ( ( ! isRemove ) ) ; getResolveStatusConflict ( ) . setEntity ( ( ! isRemove ) ) ; getResolveStatusConflict ( ) . setIsChangeable ( ( ! isRemove ) ) ; }
public static java.lang.String getOauth2CallbackUrl ( javax.servlet.http.HttpServletRequest request ) { return java.lang.String.format ( org.ovirt.engine.core.WelcomeUtils.OAUTH_CALLBACK_URL_FORMAT , request.getScheme ( ) , org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName ( request.getServerName ( ) ) , request.getServerPort ( ) , org.ovirt.engine.core.utils.EngineLocalConfig.getInstance ( ) . getProperty ( org.ovirt.engine.core.WelcomeUtils.ENGINE_URI ) ) ; }
public java.lang.String getServerFingerprint ( java.lang.String serverName ) { java.lang.String fingerPrint = null ; org.ovirt.engine.core.bll.utils.EngineSSHDialog dialog = getEngineSSHDialog ( ) ; try { dialog.setHost ( serverName ) ; dialog.connect ( ) ; fingerPrint = dialog.getHostFingerprint ( ) ; } catch ( java.lang.Throwable e ) { log.errorFormat ( "Could not fetch fingerprint of host {0} with message: {1}" , serverName , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( e ) ) ; } finally { dialog.disconnect ( ) ; } return fingerPrint ; }
public static org.ovirt.engine.api.model.VmPool map ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.api.model.VmPool template ) { org.ovirt.engine.api.model.VmPool model = ( template != null ) ? template : new org.ovirt.engine.api.model.VmPool ( ) ; org.ovirt.engine.api.restapi.types.Vm vmModel = org.ovirt.engine.api.restapi.types.VmMapper.map ( vm , ( ( org.ovirt.engine.api.restapi.types.Vm ) ( null ) ) ) ; vmModel.setCluster ( null ) ; vmModel.setTemplate ( null ) ; vmModel.setVmPool ( null ) ; model.setVm ( vmModel ) ; model.setUseLatestTemplateVersion ( vm.isUseLatestVersion ( ) ) ; return model ; }
protected void executeCommand ( ) { if ( ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand.getVds ( ) ) == null ) { return ; } org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand.reestablishConnectionIfNeeded ( ) ; vdsInitialStatus = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand.getVds ( ) . getStatus ( ) ; if ( isOvirtReInstallOrUpgrade ( ) ) { upgradeNode ( ) ; } }
public final void setData ( java.lang.String sessionId , java.lang.String key , java.lang.Object value ) { org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo = getSessionInfo ( sessionId ) ; if ( sessionInfo == null ) { sessionInfo = new org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo ( ) ; sessionInfo.contentOfSession.put ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_ID , sessionId ) ; sessionInfo.contentOfSession.put ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.SOFT_LIMIT_INTERVAL_PARAMETER_NAME , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.UserSessionTimeOutInterval ) ) ; org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo oldSessionInfo = sessionInfoMap.putIfAbsent ( sessionId , sessionInfo ) ; if ( oldSessionInfo != null ) { sessionInfo = oldSessionInfo ; } } sessionInfo.contentOfSession.put ( key , value ) ; }
public void testStorageDomainLinks ( ) { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; storageDomain.setStorage ( new org.ovirt.engine.api.model.HostStorage ( ) ) ; storageDomain.getStorage ( ) . setPath ( "foo" ) ; org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( storageDomain ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , storageDomain.getHref ( ) ) ; org.junit.jupiter.api.Assertions.assertNull ( storageDomain.getStorage ( ) . getHref ( ) ) ; }
public void shouldDetectPassThroughDeviceOnVM ( ) { org.mockito.Mockito.when ( hostDeviceManager.checkVmNeedsDirectPassthrough ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ) . thenReturn ( true ) ; org.assertj.core.api.Assertions.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) ) . contains ( EngineMessage.CLUSTER_UPGRADE_DETAIL_VM_NEEDS_PASSTHROUGH.name ( ) ) ; }
public java.util.Set < java.lang.String > removeSnapshots ( org.ovirt.engine.core.compat.Guid vmId ) { java.util.Set < java.lang.String > memoryVolumes = new java.util.HashSet < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : getSnapshotDao ( ) . getAll ( vmId ) ) { memoryVolumes.add ( snapshot.getMemoryVolume ( ) ) ; getSnapshotDao ( ) . remove ( snapshot.getId ( ) ) ; } return memoryVolumes ; }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisksForVm , params , aQuery ) ; }
private static org.ovirt.engine.api.model.Display extractDisplayFromResource ( org.ovirt.engine.api.model.BaseResource res ) { if ( res instanceof org.ovirt.engine.api.model.Vm ) { return ( ( org.ovirt.engine.api.model.Vm ) ( res ) ) . getDisplay ( ) ; } if ( res instanceof org.ovirt.engine.api.model.Template ) { return ( ( org.ovirt.engine.api.model.Template ) ( res ) ) . getDisplay ( ) ; } return null ; }
protected org.ovirt.engine.core.common.errors.EngineError getReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.Status status ) { try { org.ovirt.engine.core.common.errors.EngineError bllErrors = org.ovirt.engine.core.common.errors.EngineError.forValue ( status.code ) ; if ( bllErrors == null ) { log.warn ( "Unexpected return value: {}" , status ) ; bllErrors = org.ovirt.engine.core.common.errors.EngineError.unexpected ; } return bllErrors ; } catch ( java.lang.Exception e ) { return org.ovirt.engine.core.common.errors.EngineError.unexpected ; } }
private boolean isExceedMaxBlockDiskSize ( ) { if ( org.ovirt.engine.core.bll.AddDiskCommand.getStorageDomain ( ) . getStorageType ( ) . isBlockDomain ( ) ) { return ( getRequestDiskSpace ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.MaxBlockDiskSize ) ) ; } return false ; }
protected void initializeVds ( ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.RemoveVds , new org.ovirt.engine.core.common.vdscommands.RemoveVdsVDSCommandParameters ( org.ovirt.engine.core.bll.VdsCommand.getVdsId ( ) ) ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.AddVds , new org.ovirt.engine.core.common.vdscommands.AddVdsVDSCommandParameters ( org.ovirt.engine.core.bll.VdsCommand.getVdsId ( ) ) ) ; }
private org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters ( org.ovirt.engine.core.compat.Guid storageDomainId , java.util.List < org.ovirt.engine.api.model.LogicalUnit > newLuns , boolean force ) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters ( ) ; params.setStorageDomainId ( storageDomainId ) ; java.util.ArrayList < java.lang.String > lunIds = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.api.model.LogicalUnit newLun : newLuns ) { lunIds.add ( newLun.getId ( ) ) ; } params.setLunIds ( lunIds ) ; params.setForce ( force ) ; return params ; }
public void getMaxSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 10 ) ; }
protected void executeCommand ( ) { try { addVmToDb ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getVm ( ) ; if ( ! ( hasSnappableDisks ( vm ) ) ) { endVmRelatedOps ( ) ; } else { processImages ( ) ; } } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.MacPoolManager.getInstance ( ) . freeMacs ( macsAdded ) ; throw e ; } setSucceeded ( true ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.defaultSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( postponedSpmPriority ) != null ) { UpdateSpmPriority ( postponedSpmPriority ) ; } spmInitialized = true ; }
public void onSuccess ( final java.util.List < org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.queries.VdcQueryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase > > operationList , final java.util.List < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > resultObject ) { org.ovirt.engine.ui.frontend.Frontend.logger.finer ( "Succesful returned result from runMultipleQueries!" ) ; org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult ( queryTypeList , queryParamsList , resultObject ) ; callback.executed ( f ) ; fireAsyncOperationCompleteEvent ( state ) ; raiseQueryCompleteEvent ( queryTypeList , state ) ; }
public void testGetPermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONFIGURE_VM_STORAGE , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( result.get ( 0 ) . getId ( ) , existingDomain.getId ( ) ) ; }
public org.ovirt.engine.sdk.decorators.VM update ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.VM.class , org.ovirt.engine.sdk.decorators.VM.class , headers ) ; }
public void testGetDeviceListWithDeviceListAndLunsIds ( ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun1.setId ( "lun1" ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun2.setId ( "lun2" ) ; parameters.setDeviceList ( java.util.Arrays.asList ( lun1 , lun2 ) ) ; java.util.Set < java.lang.String > lunsIds = java.util.Collections.singleton ( "lun2" ) ; org.junit.jupiter.api.Assertions.assertEquals ( command.getDeviceList ( lunsIds ) , java.util.Collections.singletonList ( lun2 ) ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ; params.setRefresh ( getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClustersAndNetworksByNetworkId , params , new org.ovirt.engine.ui.uicommonweb.models.networks.SetItemsAsyncQuery ( ) ) ; }
private java.lang.Integer integerOrNull ( java.lang.Object o ) { if ( o instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( o ) ) ; } else if ( o instanceof java.lang.String ) { try { return java.lang.Integer.parseInt ( ( ( java.lang.String ) ( o ) ) ) ; } catch ( java.lang.Exception ignore ) { } } return null ; }
public void addToCallBackMap ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity ) { if ( ! ( cmdCallBackMap.containsKey ( cmdEntity.getId ( ) ) ) ) { org.ovirt.engine.core.bll.CommandBase < ? > cmd = coco.retrieveCommand ( cmdEntity.getId ( ) ) ; if ( ( cmd != null ) && ( ( cmd.getCallback ( ) ) != null ) ) { cmdCallBackMap.put ( cmdEntity.getId ( ) , cmd.getCallback ( ) ) ; } } }
public void diskPluggedToVmsThatAreNotDownFail ( ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > > vmsInfo = prepareForCheckingIfDiskPluggedToVmsThatAreNotDown ( ) ; vmsInfo.get ( 0 ) . getFirst ( ) . setStatus ( VMStatus.Up ) ; org.junit.Assert.assertThat ( validator.isDiskPluggedToVmsThatAreNotDown ( false , vmsInfo ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmNotDuringMigration ( ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { if ( ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_IN_PROGRESS ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { newModel.getName ( ) . setEntity ( getName ( ) . getEntity ( ) ) ; }
private void initEditors ( ) { volumeTypeEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelLabelEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer ( ) , new org.ovirt.engine.ui.common.widget.parser.EntityModelParser ( ) ) ; forceEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; serverEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < java.lang.Object > ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( object ) ) . getHostName ( ) ; } } ) ; }
public void canDoActionFailsOnSnapshotNotExists ( ) { org.mockito.Mockito.when ( snapshotDao.exists ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( false ) ; org.junit.Assert.assertFalse ( spyCommand.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( spyCommand.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST.toString ( ) ) ) ; }
protected void updateActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { getSnapshotDao ( ) . update ( new org.ovirt.engine.core.common.businessentities.Snapshot ( snapshotId , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus.OK , getVm ( ) . getId ( ) , null , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE , "Active VM snapshot" , new java.util.Date ( ) , null ) ) ; }
public void testGetNextConfiguration ( ) throws java.lang.Exception { setUriInfo ( addMatrixParameterExpectations ( setUpBasicUriExpectations ( ) , BackendVmResource.NEXT_RUN ) ) ; setUpGetEntityNextRunExpectations ( ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUpGetGraphicsExpectations ( 1 ) ; setUpGetCertuficateExpectations ( ) ; control.replay ( ) ; org.ovirt.engine.api.model.VM response = resource.get ( ) ; verifyModel ( response , 0 ) ; verifyCertificate ( response ) ; }
private void initChildHierarchy ( ) { if ( ! ( childHierarchyInitialized ) ) { synchronized ( LOCK ) { if ( ! ( childHierarchyInitialized ) ) { childHierarchy.clear ( ) ; for ( org.ovirt.engine.core.common.businessentities.CommandEntity cmd : getCommandsWithCallbackEnabled ( ) ) { buildCmdHierarchy ( cmd ) ; } } childHierarchyInitialized = true ; } } }
public static java.lang.Long determineImageInitialSize ( org.ovirt.engine.core.common.businessentities.storage.Image sourceImage , org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid srcDomain , org.ovirt.engine.core.compat.Guid dstDomain , org.ovirt.engine.core.compat.Guid imageGroupID ) { if ( org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat ( destFormat , dstDomain ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm ( storagePoolId , srcDomain , imageGroupID , sourceImage.getId ( ) ) ; return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize ( sourceImage.getVolumeFormat ( ) , imageInfoFromStorage.getActualSizeInBytes ( ) ) ; } return null ; }
private void addLinksIncludingUser ( org.ovirt.engine.api.model.Session session ) { java.lang.String domainName = session.getUser ( ) . getDomain ( ) . getName ( ) ; addLinks ( session , org.ovirt.engine.api.model.Vm.class ) ; session.getUser ( ) . setDomain ( new org.ovirt.engine.api.model.Domain ( ) ) ; session.getUser ( ) . getDomain ( ) . setName ( domainName ) ; setSessionUser ( session ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand , java.lang.Object ... params ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand ) ( uiCommand ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op1 = command.getOp1 ( ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op2 = command.getOp2 ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics = command.getAllNics ( ) ; executeNetworkCommand ( op1 , op2 , allNics , params ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addSoundDevice ( vmBase.getId ( ) , vmBase.getOsId ( ) , org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vmBase ) ) ; }
protected javax.ws.rs.core.UriInfo setUpChangeCdUriQueryExpectations ( ) { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; javax.ws.rs.core.MultivaluedMap < java.lang.String , java.lang.String > queries = org.mockito.Mockito.mock ( javax.ws.rs.core.MultivaluedMap.class ) ; org.mockito.Mockito.when ( queries.containsKey ( "current" ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( queries.getFirst ( "current" ) ) . thenReturn ( "true" ) ; org.mockito.Mockito.when ( uriInfo.getQueryParameters ( ) ) . thenReturn ( queries ) ; return uriInfo ; }
private void mockBackendQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue ( ) ; queryReturnValue.setReturnValue ( returnValue ) ; org.mockito.Mockito.when ( mockBackend.runPublicQuery ( org.mockito.ArgumentMatchers.eq ( queryType ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.queries.QueryParametersBase.class ) ) ) . thenReturn ( queryReturnValue ) ; }
public void reuseSession ( ) { if ( ( restApiSessionId ) != null ) { processSessionId ( restApiSessionId ) ; } else { getSessionIdFromHttpSession ( new org.ovirt.engine.ui.frontend.communication.StorageCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.String result ) { if ( result != null ) { setSessionId ( result , false ) ; processSessionId ( result ) ; } else { processSessionIdException ( ) ; } } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { processSessionIdException ( ) ; } } ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( java.lang.Boolean ) ( model.getSpecificStorageQuota ( ) . getEntity ( ) ) ) ) { quotaStorageTable.insertColumn ( 0 , isStorageInQuotaColumn ) ; quotaStorageTable.setColumnWidth ( isStorageInQuotaColumn , "30px" ) ; quotaStorageTable.asEditor ( ) . edit ( model.getAllDataCenterStorages ( ) ) ; } else { quotaStorageTable.removeColumn ( isStorageInQuotaColumn ) ; quotaStorageTable.asEditor ( ) . edit ( model.getQuotaStorages ( ) ) ; } }
public static void GetCustomPropertiesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < org.ovirt.engine.core.compat.Version , java.lang.String > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmCustomProperties , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected org.ovirt.engine.api.model.StorageDomain deprecatedPopulate ( org.ovirt.engine.api.model.StorageDomain model , org.ovirt.engine.core.common.businessentities.storage_domains entity ) { if ( StorageDomainSharedStatus.Unattached.equals ( entity.getstorage_domain_shared_status ( ) ) ) { model.setStatus ( org.ovirt.engine.api.common.util.StatusUtils.create ( StorageDomainStatus.UNATTACHED ) ) ; } else { model.setStatus ( null ) ; } return super . deprecatedPopulate ( model , entity ) ; }
public java.util.Set < java.lang.String > getConsumedEvents ( ) { java.util.Set < java.lang.String > set = new java.util.HashSet ( super . getConsumedEvents ( ) ) ; set.add ( BrowserEvents.CLICK ) ; set.add ( BrowserEvents.MOUSEMOVE ) ; set.add ( BrowserEvents.CHANGE ) ; set.add ( BrowserEvents.MOUSEDOWN ) ; return set ; }
public static void isSoundcardEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetSoundDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private void prepareVmToPassValidate ( ) { vmStatic.setName ( "vm1" ) ; vmStatic.setMemSizeMb ( 256 ) ; vmStatic.setSingleQxlPci ( false ) ; mockVmDaoGetVm ( ) ; mockSameNameQuery ( false ) ; mockValidateCustomProperties ( ) ; mockValidatePciAndIdeLimit ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateCpuProfile ( ) ; mockGraphicsDevice ( ) ; }
public void testQueryWithFilter ( ) { java.util.List < java.lang.String > filterValue = new java.util.ArrayList < > ( ) ; filterValue.add ( "true" ) ; org.mockito.Mockito.reset ( httpHeaders ) ; org.mockito.Mockito.when ( httpHeaders.getRequestHeader ( org.ovirt.engine.api.restapi.resource.USER_FILTER_HEADER ) ) . thenReturn ( filterValue ) ; resource.setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> resource.get ( ) ) ; }
public void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
public void testGetVolumesByOption ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = dao.getVolumesByOption ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID , GlusterStatus.UP , org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.OPTION_KEY_NFS_DISABLE , org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.OPTION_VALUE_OFF ) ; org.junit.jupiter.api.Assertions.assertNotNull ( volumes ) ; org.junit.jupiter.api.Assertions.assertTrue ( volumes.contains ( existingReplVol ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( volumes.get ( 0 ) . isNfsEnabled ( ) ) ; }
public void copyDataTo ( ovirt_engine_dwh.configurationsync_3_2.ConfigurationSync.delete_vm_device_connectionStruct other ) { other.vm_id = this . vm_id ; other.device_id = this . device_id ; other.type = this . type ; other.address = this . address ; other.is_managed = this . is_managed ; other.is_plugged = this . is_plugged ; other.is_readonly = this . is_readonly ; other.vm_configuration_version = this . vm_configuration_version ; other.device_configuration_version = this . device_configuration_version ; other.create_date = this . create_date ; other.update_date = this . update_date ; other.delete_date = this . delete_date ; }
private void init ( ) { initAutoStartVmsToRestart ( ) ; int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.AutoStartVmsRunnerIntervalInSeconds ) ; schedulerUtil.scheduleAFixedDelayJob ( this , "startFailedAutoStartVms" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , autoStartVmsRunnerIntervalInSeconds , autoStartVmsRunnerIntervalInSeconds , java.util.concurrent.TimeUnit.SECONDS ) ; }
protected boolean canDoAction ( ) { boolean returnValue = ( ( ( ( ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.checkStoragePool ( ) ) && ( checkStoragePoolStatusNotEqual ( StoragePoolStatus.Uninitialized , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_STATUS_ILLEGAL ) ) ) && ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.checkStorageDomain ( ) ) ) && ( storageDomainStatusIsValid ( ) ) ) && ( ( ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.getStorageDomain ( ) . getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) || ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.checkMasterDomainIsUp ( ) ) ) ) && ( ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.checkForActiveVds ( ) ) != null ) ; return returnValue ; }
public void nameInUse ( ) { org.mockito.Mockito.when ( oldHost.getName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( host.getName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( hostDao.getByName ( org.mockito.ArgumentMatchers.any ( java.lang.String.class ) ) ) . thenReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ; org.junit.Assert.assertThat ( validator.nameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ) ; }
public void moveShareableDiskToGlusterDomain ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setShareable ( true ) ; initializeCommand ( diskImage , VmEntityType.VM ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS.toString ( ) ) ) ; }
public void testNoMemoryPciPassthroughSuccess ( ) { cmd.getParameters ( ) . setSaveMemory ( false ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES ) ) . when ( vmValidator ) . vmNotHavingPciPassthroughDevices ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public void setMTUOverrideSupported ( boolean mtuOverrideSupported ) { this . mtuOverrideSupported = mtuOverrideSupported ; if ( ! mtuOverrideSupported ) { getHasMtu ( ) . setIsChangable ( false ) ; getMtu ( ) . setIsChangable ( false ) ; getHasMtu ( ) . setEntity ( false ) ; getMtu ( ) . setEntity ( null ) ; } else { getHasMtu ( ) . setIsChangable ( true ) ; getMtu ( ) . setIsChangable ( true ) ; } }
private void initFilter ( ) { filter = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.memory.sdfilters.StorageDomainSpaceRequirementsFilter ( memoryDisks ) ) ; org.mockito.Mockito.doNothing ( ) . when ( filter ) . updateDisksStorage ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.StorageDomain.class ) , org.mockito.ArgumentMatchers.anyList ( ) ) ; org.mockito.Mockito.doReturn ( storageDomainValidator ) . when ( filter ) . getStorageDomainValidator ( storageDomain ) ; }
private org.ovirt.engine.core.compat.Guid mockSourceImage ( ) { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.compat.Guid.NewGuid ( ) ; org.ovirt.engine.core.common.businessentities.DiskImage image = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; image.setImageId ( imageId ) ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > list = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; list.add ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; image.setStorageIds ( list ) ; image.setActualSize ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.IMAGE_ACTUAL_SIZE_GB ) ; image.setSize ( 40 ) ; org.mockito.Mockito.doReturn ( java.util.Collections.singletonList ( image ) ) . when ( cmd ) . getSourceImages ( ) ; return imageId ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( result.getState ( ) ) ) ; vmListModel.getWindow ( ) . stopProgress ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue ( ) ; if ( ( returnValueBase != null ) && ( returnValueBase.getSucceeded ( ) ) ) { vmListModel.cancel ( ) ; vmListModel.setGuideContext ( returnValueBase.getActionReturnValue ( ) ) ; vmListModel.updateActionAvailability ( ) ; vmListModel.getGuideCommand ( ) . execute ( ) ; } }
public void validateChangeNameExists ( ) { java.lang.String newName = org.apache.commons.lang.StringUtils.reverse ( sd.getStorageName ( ) ) ; sd.setStorageName ( newName ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.businessentities.StorageDomainStatic ( ) ) . when ( sdsDao ) . getByName ( newName ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST ) ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.DiskSnapshot model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotsResourceTest.DISK_ID.toString ( ) , model.getDisk ( ) . getId ( ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult callHasUniqueName ( org.ovirt.engine.core.compat.Guid macPool1Id , org.ovirt.engine.core.compat.Guid macPool2Id , java.lang.String macPool1Name , java.lang.String macPool2Name ) { final org.ovirt.engine.core.common.businessentities.MacPool existingMacPool = new org.ovirt.engine.core.common.businessentities.MacPool ( ) ; existingMacPool.setId ( macPool1Id ) ; existingMacPool.setName ( macPool1Name ) ; org.mockito.Mockito.when ( macPoolDaoMock.getAll ( ) ) . thenReturn ( java.util.Collections.singletonList ( existingMacPool ) ) ; macPool.setId ( macPool2Id ) ; macPool.setName ( macPool2Name ) ; return macPoolValidator.hasUniqueName ( ) ; }
public void createCommand ( ) { org.ovirt.engine.core.common.action.RunVmParams param = new org.ovirt.engine.core.common.action.RunVmParams ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > ( param ) ) ; mockIsoDomainListSyncronizer ( ) ; mockSuccessfulRunVmValidator ( ) ; org.mockito.Mockito.doNothing ( ) . when ( command ) . initParametersForExternalNetworks ( ) ; mockSuccessfulSnapshotValidator ( ) ; mockBackend ( ) ; }
public void validateVmShareableDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage ( diskImageGroupId , diskImageId ) ; diskImage.setShareable ( true ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString ( ) ) ) ; }
private void toggleEnabled ( T value , V widget ) { setButtonsEnabled ( widget , enabled ) ; if ( widget instanceof com.google.gwt.user.client.ui.HasEnabled ) { ( ( com.google.gwt.user.client.ui.HasEnabled ) ( widget ) ) . setEnabled ( enabled ) ; } if ( ( enabled ) && ( isGhost ( value ) ) ) { toggleGhost ( value , widget , true ) ; } }
protected void updateSelectedLunWarning ( org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = ( ( org.ovirt.engine.core.common.businessentities.storage.LUNs ) ( lunModel.getEntity ( ) ) ) ; java.lang.String warning = org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty ( ) ; if ( ( lun.getStorageDomainId ( ) ) != null ) { warning = org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.messages.lunAlreadyPartOfStorageDomainWarning ( lun.getStorageDomainName ( ) ) ; } else if ( ( lun.getDiskId ( ) ) != null ) { warning = org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.messages.lunUsedByDiskWarning ( lun.getDiskAlias ( ) ) ; } model.setSelectedLunWarning ( warning ) ; }
public org.ovirt.engine.sdk.entities.Response delete ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . delete ( url , org.ovirt.engine.sdk.entities.Response.class , headers ) ; }
public void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForDisplayNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration ( ) ; boolean failWhen = ( getNetworkCluster ( ) . isDisplay ( ) ) && ( ( ipConfiguration == null ) || ( ( ipConfiguration.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE ) ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_DISPLAY_NETWORK_HAS_NO_BOOT_PROTOCOL ) . when ( failWhen ) ; }
protected void addVmInterfaces ( ) { super . addVmInterfaces ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm ( ) . getInterfaces ( ) ) { org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmDeviceUtils ( ) . addInterface ( org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId ( ) , iface.getId ( ) , iface.isPlugged ( ) , false ) ; } }
public static void GetVmList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String poolName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > Cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: pool=" + poolName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
private void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUpGetDomainExpectations ( StorageType.NFS , true ) ; setUpGetConnectionExpectations ( ) ; setUriInfo ( setUpActionExpectations ( ActionType.DetachStorageDomainFromPool , org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters.class , new java.lang.String [ ] { "StorageDomainId" , "StoragePoolId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID , org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
private java.lang.Integer calcMaxVCpu ( ) { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.MaxNumOfVmSockets , vm.getClusterCompatibilityVersion ( ) . getValue ( ) ) ; java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.MaxNumOfVmCpus , vm.getClusterCompatibilityVersion ( ) . getValue ( ) ) ; int threadsPerCore = vm.getThreadsPerCpu ( ) ; int cpuPerSocket = vm.getCpuPerSocket ( ) ; maxVCpus = ( cpuPerSocket * threadsPerCore ) * ( java.lang.Math.min ( maxSockets , ( maxVCpus / ( cpuPerSocket * threadsPerCore ) ) ) ) ; return maxVCpus ; }
public static org.ovirt.engine.core.common.businessentities.StorageServerConnections findConnectionWithSameDetails ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . getAllForConnection ( connection ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections dbConnection : connections ) { if ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( dbConnection.getpassword ( ) , connection.getpassword ( ) ) ) { return dbConnection ; } } return null ; }
public org.ovirt.optimizer.rest.dto.ScoreResult verifyResult ( org.ovirt.optimizer.rest.dto.Result result , @ javax.ws.rs.PathParam ( value = "cluster" ) java.lang.String cluster ) { response.getOutputHeaders ( ) . putSingle ( "Access-Control-Allow-Origin" , "*" ) ; response.getOutputHeaders ( ) . putSingle ( "Access-Control-Allow-Methods" , "POST" ) ; response.getOutputHeaders ( ) . putSingle ( "Access-Control-Allow-Headers" , "Content-Type" ) ; return optimizer.recomputeScore ( cluster , result ) ; }
public org.ovirt.engine.core.common.businessentities.network.Network getNetwork ( ) { if ( ( ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getNic ( ) . getVnicProfileId ( ) ) != null ) && ( ( network ) == null ) ) { network = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.getNetworkByVnicProfileId ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getNic ( ) . getVnicProfileId ( ) ) ; } return network ; }
private static void assertDiskDescriptionMap ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) throws java.io.IOException { org.junit.Assert.assertEquals ( "Should be map of disk alias and disk description" , java.lang.String.format ( ( "{\"DiskAlias\":\"%s\"," + "\"DiskDescription\":\"%s\"}" ) , disk.getDiskAlias ( ) , org.apache.commons.lang.StringUtils.defaultString ( disk.getDiskDescription ( ) ) ) , org.ovirt.engine.core.bll.ImagesHandler.getJsonDiskDescription ( disk ) ) ; }
public static void getAttachedTagsToHost ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.setAttachedTagsConverter ( aQuery ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTagsByVdsId , new org.ovirt.engine.core.common.queries.GetTagsByVdsIdParameters ( id.toString ( ) ) , aQuery ) ; }
public void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object ) { updateKeyTitle ( object ) ; object.getKeys ( ) . getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire ( org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget.this , object ) ; updateKeyTitle ( object ) ; } } ) ; driver.edit ( object ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetGlusterVolumeById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId } , helper.getVolumeEntity ( 0 ) ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.GlusterVolumeRemoveBricks , org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters.class , new java.lang.String [ ] { "VolumeId" , "Bricks" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId , getBricksToRemove ( ) } , true , true ) ) ; verifyRemove ( collection.remove ( GUIDS [ 0 ] . toString ( ) ) ) ; }
protected org.ovirt.engine.api.model.StorageDomain postPopulate ( org.ovirt.engine.api.model.StorageDomain model ) { model.setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.StorageDomainType.class ) ) ; model.getStorage ( ) . setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.StorageType.class ) ) ; model.setStorageFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.StorageFormat.class ) ) ; return model ; }
public void shouldNotElectActiveHostedEngineDomain ( ) { prepareStorageDomainForElection ( StorageDomainStatus.Active , org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME , true ) ; org.junit.Assert.assertNull ( cmd.electNewMaster ( ) ) ; }
public java.lang.Void runInTransaction ( ) { buildChildCommandInfos ( ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > > entry : childCommandInfoMap.entrySet ( ) ) { org.ovirt.engine.core.bll.CommandBase < ? > command = getBackendCommandObjectsHandler ( ) . createAction ( entry.getValue ( ) . getFirst ( ) , entry.getValue ( ) . getSecond ( ) ) ; command.insertAsyncTaskPlaceHolders ( ) ; childCommandsMap.put ( entry.getKey ( ) , command ) ; } return null ; }
private void nfsStorageModel_PathChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel senderModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) ( sender ) ) ; for ( java.lang.Object item : getStorageModels ( ) ) { if ( ( item instanceof org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) && ( item != sender ) ) { org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) ( item ) ) ; model.getPath ( ) . setEntity ( senderModel.getPath ( ) . getEntity ( ) ) ; } } }
private void UpdateTotalDiskSize ( ) { java.lang.Integer available = getStorageDynamicData ( ) . getAvailableDiskSize ( ) ; java.lang.Integer used = getStorageDynamicData ( ) . getUsedDiskSize ( ) ; if ( ( available != null ) && ( used != null ) ) { setTotalDiskSize ( ( available + used ) ) ; } else { setTotalDiskSize ( 0 ) ; } }
protected boolean areTemplateImagesInStorageReady ( org.ovirt.engine.core.compat.Guid storageId ) { return org.ovirt.engine.core.bll.VmTemplateCommand.isVmTemplateImagesReady ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate ( ) , storageId , org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue ( ) . getValidationMessages ( ) , false , true , true , destStorages.isEmpty ( ) , storageToDisksMap.get ( storageId ) ) ; }
void initUncaughtExceptionHandler ( final java.util.logging.Logger rootLogger , final java.util.logging.Logger remoteLogger ) { com.google.gwt.core.client.GWT.setUncaughtExceptionHandler ( new com.google.gwt.core.client.GWT.UncaughtExceptionHandler ( ) { @ java.lang.Override public void onUncaughtException ( java.lang.Throwable t ) { rootLogger.log ( java.util.logging.Level.SEVERE , "Uncaught exception: " , t ) ; remoteLogger.log ( java.util.logging.Level.SEVERE , "Uncaught exception: " , t ) ; if ( org.ovirt.engine.ui.common.DisplayUncaughtUIExceptions.getValue ( ) ) { alertManager.showUncaughtExceptionAlert ( t ) ; } } } ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue == null ) { return ; } java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > nics = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; updateNetworkInterfaces ( networkBehavior , nics ) ; }
public static void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public void testGetEntityNameByIdAndTypeForStorageDomain ( ) { org.ovirt.engine.core.common.businessentities.storage_domains storageDomain = dbFacade.getStorageDomainDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.STORAGE_DOMAIN_ID ) ; org.junit.Assert.assertNotNull ( storageDomain ) ; java.lang.String name = storageDomain.getstorage_name ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.STORAGE_DOMAIN_ID , VdcObjectType.Storage ) ) ) ; }
protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) { boolean discardAfterDelete = storageDomainDao.get ( guids.get ( 0 ) ) . isDiscardAfterDelete ( ) ; return postDeleteActionHandler.fixParameters ( new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( guids.get ( 1 ) , guids.get ( 0 ) , guids.get ( 2 ) , isPostZero ( ) , discardAfterDelete , false ) ) ; }
public void getHostListByStatus ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > aQuery , org.ovirt.engine.core.common.businessentities.VDSStatus status , boolean doRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Host: " + ( status == null ? "" : "status=" + ( status.name ( ) ) ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; searchParameters.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , ( doRefresh ? searchParameters : searchParameters.withoutRefresh ( ) ) , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValueObj ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) ; java.lang.Object returnValue2 = returnValue.getReturnValue ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( returnValue2 ) ) ; this . allNics = allNics ; queryFreeBonds ( ) ; }
private org.ovirt.engine.core.bll.ValidationResult networkNotUsedByVms ( java.lang.String networkName ) { if ( org.ovirt.engine.core.common.FeatureSupported.changeNetworkUsedByVmSupported ( host.getClusterCompatibilityVersion ( ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } java.util.List < java.lang.String > vmNames = vmInterfaceManager.findActiveVmsUsingNetworks ( host.getId ( ) , java.util.Collections.singleton ( networkName ) ) ; return new org.ovirt.engine.core.common.utils.PluralMessages ( ) . getNetworkInUse ( vmNames , EngineMessage.VAR__ENTITIES__VM , EngineMessage.VAR__ENTITIES__VMS ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > searchVDSsByDb ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > data = genericSearch ( vdsDao , true ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : data ) { vds.setCpuName ( cpuFlagsManagerHandler.findMaxServerCpuByFlags ( vds.getCpuFlags ( ) , vds.getClusterCompatibilityVersion ( ) ) ) ; } return data ; }
protected void proceedProxyReturnValue ( ) { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = GetReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand.getReturnStatus ( ) ) ; switch ( returnStatus ) { case UnknownTask : log.error ( java.lang.String.format ( "Trying to revert unknown task: %1$s" , org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; return ; } super . proceedProxyReturnValue ( ) ; }
public void testEnoughSpaceToMergeSnapshotsWithMultipleDiskAndDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > imagesDisks = org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.mockMultipleSourceImagesForDomain ( 4 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.IMAGE_ACTUAL_SIZE_GB ) ; imagesDisks.addAll ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.mockMultipleSourceImagesForDomain ( 4 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID2 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.IMAGE_ACTUAL_SIZE_GB ) ) ; org.mockito.Mockito.doReturn ( imagesDisks ) . when ( cmd ) . getSourceImages ( ) ; mockStorageDomainDAOGetForStoragePool ( 22 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; mockStorageDomainDAOGetForStoragePool ( 22 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID2 ) ; org.junit.Assert.assertTrue ( "Validation should succeed. Free space minus threshold should be bigger then summarize all disks size for each domain" , cmd.validateStorageDomains ( ) ) ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel dataCenterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; dataCenterGuideModel.isoStorageDomains = storageDomains ; dataCenterGuideModel.updateOptionsNonLocalFS ( ) ; }
public static boolean isAdminUser ( org.ovirt.engine.core.common.interfaces.IVdcUser user ) { java.util.List < org.ovirt.engine.core.common.businessentities.roles > userRoles = org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.getRoleDAO ( ) . getAllForUserAndGroups ( user.getUserId ( ) , user.getGroupIds ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.roles r : userRoles ) { if ( ( r.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.RoleType.ADMIN ) ) { if ( org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.log.isDebugEnabled ( ) ) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.log.debugFormat ( "LoginAdminUser: User logged to admin using role {0}" , r.getname ( ) ) ; } return true ; } } return false ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getStorageDevices ( new org.ovirt.engine.ui.uicommonweb.models.gluster.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > > ( ) { @ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > devices ) { java.util.Collections.sort ( devices , new org.ovirt.engine.ui.uicommonweb.Linq.StorageDeviceComparer ( ) ) ; setItems ( devices ) ; } } ) , getEntity ( ) . getId ( ) ) ; }
public void updateCallBackNotified ( org.ovirt.engine.core.compat.Guid commandId ) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = get ( commandId ) ; if ( cmdEntity != null ) { cmdEntity.setCallBackNotified ( true ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getCommandEntityDao ( ) . updateNotified ( commandId ) ; } }
public void getHostListByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( ! ( getGlusterUtil ( ) . isGlusterSnapshotSupported ( org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup ( ) . getCompatibilityVersion ( ) , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup ( ) . getId ( ) ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED ) ; } return true ; }
public void testValidModifiedBondsFailsWhenBondIsUnnamed ( ) throws java.lang.Exception { doTestValidModifiedBonds ( new org.ovirt.engine.core.common.businessentities.network.Bond ( ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 0 ) ; setUpGetEntityExpectations ( 0 ) ; setUpGetEntityExpectations ( 0 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateTag , org.ovirt.engine.core.common.action.TagsOperationParameters.class , new java.lang.String [ ] { "Tag.TagName" , "Tag.ParentId" } , new java.lang.Object [ ] { NAMES [ 0 ] , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.PARENT_GUID } , true , true ) ) ; verifyModel ( resource.update ( org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.getModel ( 0 , false ) ) , 0 ) ; }
private static void logVmStatusTransition ( org.ovirt.engine.core.common.businessentities.VM vmToUpdate , org.ovirt.engine.core.common.businessentities.VmDynamic runningVm ) { if ( ( vmToUpdate.getStatus ( ) ) != ( runningVm.getstatus ( ) ) ) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.infoFormat ( "VM {0} {1} moved from {2} --> {3}" , vmToUpdate.getVmName ( ) , vmToUpdate.getId ( ) , vmToUpdate.getStatus ( ) . name ( ) , runningVm.getstatus ( ) . name ( ) ) ; } }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( vm.getVmPoolId ( ) ) == null ) { switch ( vm.getVmType ( ) ) { case Desktop : return getApplicationResources ( ) . desktopImage ( ) ; case Server : return getApplicationResources ( ) . serverImage ( ) ; default : return getApplicationResources ( ) . questionMarkImage ( ) ; } } else { return getApplicationResources ( ) . manyDesktopsImage ( ) ; } }
public void testRemove ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllDbUsers , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { "Refresh" , "Filtered" } , new java.lang.Object [ ] { true , false } , getUsers ( ) ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemovePermission , org.ovirt.engine.core.common.action.PermissionsOperationsParameters.class , new java.lang.String [ ] { "Permission.Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
public javax.ws.rs.core.Response importCertificates ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider ( this , id ) ; java.util.List < org.ovirt.engine.core.common.businessentities.CertificateInfo > entities = getBackendCollection ( org.ovirt.engine.core.common.businessentities.CertificateInfo.class , VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) ) ; if ( ( entities.size ( ) ) == 0 ) { return null ; } return performAction ( VdcActionType.ImportProviderCertificate , new org.ovirt.engine.core.common.action.ImportProviderCertificateParameters ( provider , entities.get ( 0 ) . getPayload ( ) ) ) ; }
protected void unlockVm ( ) { if ( ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) ) != null ) { if ( ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { org.ovirt.engine.core.bll.VmHandler.unlockVm ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) , org.ovirt.engine.core.bll.VmCommand.getCompensationContext ( ) ) ; } } else { setLoggingForCommand ( ) ; log.warn ( "VmCommand::EndVmCommand: Vm is null - not performing endAction on Vm" ) ; } }
public void getConfigurationValueBoolean ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.queries.ConfigurationValues configVal ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( configVal , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public com.google.gwt.event.dom.client.HasClickHandlers addShutdownButton ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model , org.ovirt.engine.ui.uicommonweb.UICommand command ) { org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton button = new org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemActionButton ( constants.shutdownVm ( ) , resources.stopIcon ( ) , resources.stopDisabledIcon ( ) , style.shutdownButtonAdditionalStyle ( ) ) ; button.setElementId ( org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId ( elementId , "shutdownButton" ) ) ; addButtonToPanel ( button ) ; updateButton ( button , command ) ; return button ; }
private boolean shouldWaitForEndMethodsCompletion ( org.ovirt.engine.core.bll.CommandBase < ? > childCommand , org.ovirt.engine.core.bll.CommandBase < ? > parentCommand ) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandCoordinatorUtil.getCommandEntity ( childCommand.getCommandId ( ) ) ; boolean hasNotifiedCallback = ( cmdEntity.isCallbackEnabled ( ) ) && ( cmdEntity.isCallbackNotified ( ) ) ; if ( ( shouldCommandEndOnAsyncOpEnd ( childCommand ) ) && ( ! hasNotifiedCallback ) ) { logWaitingForChildCommand ( childCommand , parentCommand ) ; return true ; } return false ; }
public static void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public static void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( VDSCommandType.StopGlusterVolume , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeActionVDSParameters ( upServer.getId ( ) , getGlusterVolumeName ( ) , getParameters ( ) . isForceAction ( ) ) ) ; setSucceeded ( returnValue.getSucceeded ( ) ) ; if ( getSucceeded ( ) ) { org.ovirt.engine.core.dao.gluster.GlusterDBUtils.getInstance ( ) . updateVolumeStatus ( getParameters ( ) . getVolumeId ( ) , GlusterStatus.DOWN ) ; } else { handleVdsError ( AuditLogType.GLUSTER_VOLUME_STOP_FAILED , returnValue.getVdsError ( ) . getMessage ( ) ) ; return ; } }
public static void GetClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public synchronized org.ovirt.engine.api.model.RSDL getRSDL ( ) throws java.io.IOException , java.lang.ClassNotFoundException { if ( ( rsdl ) == null ) { rsdl = org.ovirt.engine.api.rsdl.RsdlManager.loadRsdl ( getCurrent ( ) . getApplicationMode ( ) , getUriInfo ( ) . getBaseUri ( ) . getPath ( ) ) ; } return rsdl ; }
public void testRefreshUserSession ( ) { initDataForClearTest ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.USER ) ; container.getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.USER , true ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNotNull ( "Get should return null since the session wasn't refresh" , container.getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.USER , false ) ) ; clearSession ( ) ; }
protected void sortStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > vmDisks ) { java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > comp = getStorageDomainComparators ( vmDisks ) . stream ( ) . reduce ( java.util.Comparator :: thenComparing ) . orElse ( null ) ; java.util.Collections.sort ( domainsInPool , comp ) ; }
public void clearPoolTimers ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.info ( "clear domain error-timers for pool '{}'." , _storagePoolId ) ; for ( java.lang.String jobId : _timers.values ( ) ) { try { org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( jobId ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.warn ( "failed deleting job '{}'." , jobId ) ; } } }
public void canDoActionVmIsNotDown ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDAO ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN.toString ( ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getVds ( ) { return host ; }
protected void onReset ( ) { if ( placeManager.isMainSectionBasicPlaceVisible ( ) ) { header.setGuideUrl ( basicGuideUrl ) ; } else { header.setGuideUrl ( extendedGuideUrl ) ; } if ( userRole.isExtendedUser ( ) ) { getView ( ) . setHeaderPanelHeight ( org.ovirt.engine.ui.userportal.section.main.presenter.MainSectionPresenter.HEIGHT_FOR_EXTENDED_USER ) ; } else { getView ( ) . setHeaderPanelHeight ( org.ovirt.engine.ui.userportal.section.main.presenter.MainSectionPresenter.HEIGHT_FOR_REGULAR_USER ) ; } }
protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) { boolean discardAfterDelete = storageDomainDao.get ( guids.get ( 0 ) ) . getDiscardAfterDelete ( ) ; return postDeleteActionHandler.fixParameters ( new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( guids.get ( 1 ) , guids.get ( 0 ) , guids.get ( 2 ) , isPostZero ( ) , discardAfterDelete , false ) ) ; }
public java.util.Set < java.lang.String > computeSelectedLabels ( ) { java.util.Set < java.lang.String > selectedLabels = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > labelModel : getItems ( ) ) { selectedLabels.add ( labelModel.getSelectedItem ( ) ) ; } return selectedLabels ; }
protected java.lang.String executePeerStatusCommand ( org.ovirt.engine.core.bll.utils.EngineSSHClient client ) { java.io.ByteArrayOutputStream out = new org.ovirt.engine.core.utils.ssh.ConstraintByteArrayOutputStream ( 500 ) ; java.lang.String command = org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.GlusterPeerStatusCommand ) ; try { client.executeCommand ( command , null , out , null ) ; return new java.lang.String ( out.toByteArray ( ) , "UTF-8" ) ; } catch ( java.lang.Exception e ) { log.errorFormat ( "Error while executing command {0} on server {1}!" , command , client.getHost ( ) , e ) ; throw new java.lang.RuntimeException ( e ) ; } }
protected boolean isDataOperationsByHSM ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic targetSd ) { return ( ( org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM ( org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool ( ) . getCompatibilityVersion ( ) ) ) && ( ! ( targetSd.getStorageType ( ) . isLocal ( ) ) ) ) && ( targetSd.getStorageDomainType ( ) . isDataDomain ( ) ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { final java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > result = new java.util.ArrayList ( super . getPermissionCheckSubjects ( ) ) ; final org.ovirt.engine.core.compat.Guid macPoolId = getNewMacPoolId ( ) ; final boolean changingPoolDefinition = ( macPoolId != null ) && ( ! ( macPoolId.equals ( getOldMacPoolId ( ) ) ) ) ; if ( changingPoolDefinition ) { result.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( macPoolId , org.ovirt.engine.core.common.VdcObjectType.MacPool , org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_MAC_POOL ) ) ; } return result ; }
public void testNetworkIpAddressWasSameAsHostnameAndChangedWhenIfaceDoesNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( NetworkBootProtocol.STATIC_IP , null , null ) ; attachment.setNicName ( "nicName" ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( attachment ) ; java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = java.util.Collections.emptyMap ( ) ; org.junit.Assert.assertThat ( validator.networkIpAddressWasSameAsHostnameAndChanged ( nics ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void validateFailsWhenCreateAllSnapshotFromVmValidationFails ( ) { initStorageDomain ( srcStorageId ) ; initStorageDomain ( dstStorageId ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . validateCreateAllSnapshotsFromVmCommand ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( command.validate ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlan ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.Network net ) { return createVdsInterface ( ( ( ( iface.getName ( ) ) + "." ) + ( net.getVlanId ( ) ) ) , false , null , null , NetworkBootProtocol.None , net.getName ( ) , net.getVlanId ( ) ) ; }
public static void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
protected void logRollbackedTask ( ) { java.lang.String type = ( ( getCurrentTaskHandler ( ) . getRevertTaskType ( ) ) != null ) ? getCurrentTaskHandler ( ) . getRevertTaskType ( ) . name ( ) : AsyncTaskType.unknown.name ( ) ; log.errorFormat ( "Reverting task {0}, handler: {1}" , type , getCurrentTaskHandler ( ) . getClass ( ) . getName ( ) ) ; }
public void testRemoveByStorageDomain ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( ActionType.RemoveDisk , org.ovirt.engine.core.common.action.RemoveDiskParameters.class , new java.lang.String [ ] { "DiskId" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendTemplateDiskResource.STORAGE_DOMAIN , GUIDS [ 0 ] . toString ( ) ) ; setUriInfo ( uriInfo ) ; verifyRemove ( resource.remove ( ) ) ; }
private void postInitTemplate ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > baseTemplates = filterNotBaseTemplates ( templates ) ; org.ovirt.engine.core.common.businessentities.VmTemplate prevBaseTemplate = getModel ( ) . getBaseTemplate ( ) . getSelectedItem ( ) ; getModel ( ) . getBaseTemplate ( ) . setItems ( baseTemplates ) ; getModel ( ) . getBaseTemplate ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( baseTemplates , new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( ( prevBaseTemplate != null ? prevBaseTemplate.getId ( ) : org.ovirt.engine.core.compat.Guid.Empty ) ) ) ) ; updateIsDisksAvailable ( ) ; }
protected void setUpGetGraphicsMultipleExpectations ( int times ) throws java.lang.Exception { java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsDevice > > vmDevices = new java.util.HashMap < > ( ) ; for ( int i = 0 ; i < times ; i ++ ) { vmDevices.put ( GUIDS [ i ] , java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ) ) ; } setUpGetEntityExpectations ( VdcQueryType.GetGraphicsDevicesMultiple , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , vmDevices ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRemoveBricksStop ( java.lang.String volumeName , java.lang.String [ ] brickList , int replicaCount ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.removeBrickStop" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "brickList" , new java.util.ArrayList < java.lang.String > ( java.util.Arrays.asList ( brickList ) ) ) . withParameter ( "replicaCount" , replicaCount ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc ( response ) ; }
protected void executeVdsBrokerCommand ( ) { buildVmData ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info ( "VM {}" , createInfo ) ; vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker ( ) . create ( createInfo ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData ( vm.getDynamicData ( ) , vmReturn.vm , org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { revealStorageView ( disk ) ; }
protected void EndWithFailure ( ) { SetIsVmRunningStateless ( ) ; rollbackQuota ( ) ; if ( _isVmRunningStateless ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend ( ) . endAction ( VdcActionType.CreateAllSnapshotsFromVm , org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) . get ( 0 ) , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.RunVmCommand.getCompensationContext ( ) ) ) ; setSucceeded ( vdcReturnValue.getSucceeded ( ) ) ; } else { super . EndWithFailure ( ) ; } }
private org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.createAsyncTask ( this , asyncTaskCreationInfo , parentCommand ) ; }
public void testRemove ( ) { super . testRemove ( ) ; java.util.List < org.ovirt.engine.core.compat.Guid > networks = dao.getNetworkIdsByIscsiBondId ( getExistingEntityId ( ) ) ; java.util.List < java.lang.String > connections = dao.getStorageConnectionIdsByIscsiBondId ( getExistingEntityId ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( networks.isEmpty ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( connections.isEmpty ( ) ) ; }
private void addVnicProfile ( org.ovirt.engine.core.common.businessentities.network.Network network , boolean publicUse ) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile ( ) ; vnicProfile.setName ( network.getName ( ) ) ; vnicProfile.setNetworkId ( network.getId ( ) ) ; org.ovirt.engine.core.common.action.AddVnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters ( vnicProfile ) ; parameters.setPublicUse ( publicUse ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.AddVnicProfile , parameters , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { sourceListModel.getSearchCommand ( ) . execute ( ) ; } } ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissions = super . getPermissionCheckSubjects ( ) ; org.ovirt.engine.core.compat.Guid networkId = ( ( org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkCluster ( ) ) == null ) ? null : org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkCluster ( ) . getNetworkId ( ) ; permissions.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( networkId , org.ovirt.engine.core.common.VdcObjectType.Network , org.ovirt.engine.core.common.businessentities.ActionGroup.ASSIGN_CLUSTER_NETWORK ) ) ; return permissions ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveNetwork , org.ovirt.engine.core.common.action.RemoveNetworkParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > GetWindowsOsTypes ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ) != null ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmOsType type : org.ovirt.engine.core.common.businessentities.VmOsType.values ( ) ) { if ( type.isWindows ( ) ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes.add ( type ) ; } } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; }
protected void doTestBadRemove ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( 0 ) ; setUpGetGraphicsExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmTemplate , org.ovirt.engine.core.common.action.VmTemplateParametersBase.class , new java.lang.String [ ] { "VmTemplateId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , canDo , success ) ) ; try { collection.remove ( GUIDS [ 0 ] . toString ( ) ) ; org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected void executeCommand ( ) { if ( ( org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters ( ) . getEventSubscriber ( ) . getTagName ( ) ) == null ) { org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters ( ) . getEventSubscriber ( ) . setTagName ( "" ) ; } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getEventDao ( ) . subscribe ( org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters ( ) . getEventSubscriber ( ) ) ; org.ovirt.engine.core.bll.AddEventSubscriptionCommand.setSucceeded ( true ) ; }
public static void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
public void testDiskAttachedToAnyVM ( ) { org.mockito.Mockito.when ( vmDao.getVmsListForDisk ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.anyBoolean ( ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.junit.Assert.assertThat ( validator.isDiskAttachedToAnyVm ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void setActionMessageParameters ( ) { cmd.setActionMessageParameters ( ) ; java.util.List < java.lang.String > messages = cmd.getReturnValue ( ) . getValidationMessages ( ) ; org.junit.Assert.assertTrue ( "action name not in messages" , messages.remove ( EngineMessage.VAR__ACTION__UPDATE.name ( ) ) ) ; org.junit.Assert.assertTrue ( "type not in messages" , messages.remove ( EngineMessage.VAR__TYPE__STORAGE__DOMAIN.name ( ) ) ) ; org.junit.Assert.assertTrue ( ( "redundant messages " + messages ) , messages.isEmpty ( ) ) ; }
private static final java.lang.Iterable < org.ovirt.engine.core.common.businessentities.Provider > filterProvidersByProvidedType ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.Provider > source , final org.ovirt.engine.core.common.VdcObjectType type ) { return org.ovirt.engine.ui.uicommonweb.Linq.where ( source , new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < org.ovirt.engine.core.common.businessentities.Provider > ( ) { @ java.lang.Override public boolean match ( org.ovirt.engine.core.common.businessentities.Provider provider ) { return provider.getType ( ) . getProvidedTypes ( ) . contains ( type ) ; } } ) ; }
private void testIsManagementNetworkNameInGivenClusterCommon ( java.lang.String networkName , org.ovirt.engine.core.compat.Guid clusterId , boolean expected ) { org.mockito.Mockito.when ( mockNetworkDao.getManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_CLUSTER_ID ) ) . thenReturn ( mockNetwork ) ; org.mockito.Mockito.when ( mockNetwork.getName ( ) ) . thenReturn ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_NAME ) ; final boolean actual = underTest.isManagementNetwork ( networkName , clusterId ) ; org.mockito.Mockito.verify ( mockNetworkDao ) . getManagementNetwork ( clusterId ) ; org.junit.Assert.assertEquals ( expected , actual ) ; }
public void setEntity ( java.lang.Boolean value ) { super . setEntity ( value ) ; if ( getIsToSync ( ) . getIsChangable ( ) ) { if ( ! value ) { revertChanges ( ) ; } setBootProtocolsAvailable ( value ) ; updateQosChangeability ( ) ; getCustomPropertiesModel ( ) . setIsChangeable ( value ) ; } }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionList" ) . withParameter ( "volName" , volumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolName" , slaveVolumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; connection.setId ( id ) ; java.lang.String host = org.ovirt.engine.api.common.util.ParametersHelper.getParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionResource.HOST ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty ; if ( host != null ) { hostId = getHostId ( host ) ; } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId ) ; return performAction ( VdcActionType.RemoveStorageServerConnection , parameters ) ; }
java.lang.String getFormattedNote ( ) { java.lang.StringBuilder formattedNote = new java.lang.StringBuilder ( constants.empty ( ) ) ; for ( int i = 0 ; i < ( notes.size ( ) ) ; i ++ ) { java.lang.String note = notes.get ( i ) ; formattedNote.append ( constants.lineBreak ( ) ) . append ( constants.htmlTab ( ) ) . append ( note ) ; } return formattedNote.toString ( ) ; }
private void registerListeners ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ManagedFieldsManager managedFieldsManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ManagedFieldsManager ( ) ; model.getInstanceTypes ( ) . getSelectedItemChangedEvent ( ) . addListener ( managedFieldsManager ) ; model.getTemplateWithVersion ( ) . getSelectedItemChangedEvent ( ) . addListener ( managedFieldsManager ) ; model.getOSType ( ) . getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { } } ) ; }
private void setTestResultValue ( org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { java.lang.String errorMessage = org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel.EMPTY_ERROR_MESSAGE ; if ( ( result == null ) || ( ! ( result.getSucceeded ( ) ) ) ) { if ( result != null ) { errorMessage = org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . translateEngineFault ( result.getFault ( ) ) ; } else { errorMessage = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . testFailedUnknownErrorMsg ( ) ; } } getTestResult ( ) . setEntity ( errorMessage ) ; }
public static void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public javax.ws.rs.core.Response enrollCertificate ( org.ovirt.engine.api.model.Action action ) { return doAction ( VdcActionType.HostEnrollCertificate , new org.ovirt.engine.core.common.action.VdsActionParameters ( guid ) , action ) ; }
private void updateReportsAvailability ( ) { if ( org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . isReportsEnabled ( ) ) { java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < org.ovirt.engine.core.common.businessentities.VDS > > resourceSubActions = org.ovirt.engine.ui.webadmin.uicommon.ReportActionsHelper.getInstance ( ) . getResourceSubActions ( "Host" , getModelProvider ( ) ) ; if ( ( resourceSubActions != null ) && ( ( resourceSubActions.size ( ) ) > 0 ) ) { getTable ( ) . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminMenuBarButtonDefinition < org.ovirt.engine.core.common.businessentities.VDS > ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView.constants.showReportHost ( ) , resourceSubActions ) ) ; } } }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolDifferent ( ) { initIpv4ConfigurationBootProtocol ( false ) ; iface.setIpv4BootProtocol ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.forValue ( ( ( ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL.getValue ( ) ) + 1 ) % ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.values ( ) . length ) ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
private boolean isMoveDiskInDbSucceded ( org.ovirt.engine.core.compat.Guid targetStorageDomainId ) { org.ovirt.engine.core.compat.Guid destinationImageId = org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters ( ) . getDestinationImageId ( ) ; org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskImageDao.get ( destinationImageId ) ; return ( diskImage != null ) && ( targetStorageDomainId.equals ( diskImage.getStorageIds ( ) . get ( 0 ) ) ) ; }
public void testNetworksOnNicMatchMtu ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks = java.util.Collections.singletonList ( createNetwork ( 1 , false , "netA" ) ) ; java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > > networksOnNics = java.util.Collections.singletonMap ( "nicName" , networks ) ; org.ovirt.engine.core.bll.network.host.NetworkMtuValidator networkMtuValidator = new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator ( new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( networks ) ) ; org.hamcrest.MatcherAssert.assertThat ( networkMtuValidator.validateMtu ( networksOnNics ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static void getDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 5 ) ; }
public void testGetAllWithPermissionsPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.StorageDomainDaoTest.NUMBER_OF_STORAGE_DOMAINS_FOR_PRIVELEGED_USER , result.size ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain domain = result.get ( 0 ) ; org.junit.Assert.assertEquals ( existingDomain , domain ) ; org.junit.Assert.assertEquals ( "Wrong committed disk size" , 8 , domain.getCommittedDiskSize ( ) ) ; org.junit.Assert.assertEquals ( "Wrong actual disk size" , 4 , domain.getActualImagesSize ( ) ) ; }
protected void executeIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand.log.infoFormat ( "-- executeIrsBrokerCommand: Attempting on storage pool '{0}'" , org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand.getParameters ( ) . getStoragePoolId ( ) ) ; setReturnValue ( org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMGetAllTasksInfo , new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) ) ) . getReturnValue ( ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.hosts.ConfigureLocalStorageModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.ConfigureLocalStorageModel ) ( ev.getContext ( ) ) ) ; model.StopProgress ( ) ; Cancel ( ) ; }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public static java.util.Collection < org.ovirt.engine.core.common.businessentities.VDS > findAllVDSByPmEnabled ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > items ) { return org.ovirt.engine.ui.uicommonweb.Linq.where ( items , new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < org.ovirt.engine.core.common.businessentities.VDS > ( ) { @ java.lang.Override public boolean match ( org.ovirt.engine.core.common.businessentities.VDS i ) { return i.isPmEnabled ( ) ; } } ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue ) ) ; if ( ( quotaList != null ) && ( ! ( quotaList.isEmpty ( ) ) ) ) { java.util.Comparator < org.ovirt.engine.core.common.businessentities.Quota > comparator = ( ( topId ) == null ) ? org.ovirt.engine.ui.uicommonweb.comparators.QuotaComparator.NAME : org.ovirt.engine.ui.uicommonweb.comparators.QuotaComparator.withTopId ( topId , QuotaComparator.NAME ) ; java.util.Collections.sort ( quotaList , comparator ) ; } return quotaList ; }
private void doTestBadAddTag ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( ActionType.AddTag , org.ovirt.engine.core.common.action.TagsOperationParameters.class , new java.lang.String [ ] { "Tag.TagName" , "Tag.ParentId" } , new java.lang.Object [ ] { NAMES [ 0 ] , org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.PARENT_GUID } , valid , success ) ) ; try { collection.add ( org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void onAsyncOperationComplete ( org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent event ) { if ( ( ( event.getTarget ( ) ) != ( getModel ( ) ) ) || ( ( getModel ( ) . getProgress ( ) ) != null ) ) { return ; } ( asyncOperationCounter ) -- ; if ( ( asyncOperationCounter ) == 0 ) { stopProgress ( ) ; } }
public static void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
private static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getDiskImageListFromDiskMap ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.Disk > diskMap ) { return new java.util.ArrayList ( org.ovirt.engine.core.utils.linq.LinqUtils.transformToList ( diskMap.values ( ) , new org.ovirt.engine.core.utils.linq.Function < org.ovirt.engine.core.common.businessentities.storage.Disk , org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage eval ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { return ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; } } ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getSecondaryDestinations ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > candidateHosts , java.util.Map < java.lang.String , java.lang.String > parameters ) { long requiredMemory = ( parameters.containsKey ( org.ovirt.engine.core.bll.scheduling.policyunits.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED ) ) ? java.lang.Long.valueOf ( parameters.get ( org.ovirt.engine.core.bll.scheduling.policyunits.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED ) ) : 0L ; return getUnderUtilizedMemoryHosts ( candidateHosts , requiredMemory , 0 ) ; }
public void getMaxVmsInPool ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1000 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVmsInPool , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entity = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) ; boolean inputFieldsEnabled = ( ( java.lang.Boolean ) ( entity.getEntity ( ) ) ) ; getView ( ) . setInputFieldsEnabled ( inputFieldsEnabled ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc glusterVolumeSnapshotList ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotList" ) . withOptionalParameter ( "volumeName" , volumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc ( clusterId , response ) ; }
public static void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
private void updateDiskImagesToIllegal ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > snapshotDisks = org.ovirt.engine.core.bll.RemoveAllVmImagesCommand.getDbFacade ( ) . getDiskImageDao ( ) . getAllSnapshotsForImageGroup ( diskImage.getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskSnapshot : snapshotDisks ) { diskSnapshot.setvm_snapshot_id ( null ) ; diskSnapshot.setimageStatus ( ImageStatus.ILLEGAL ) ; org.ovirt.engine.core.bll.RemoveAllVmImagesCommand.getDbFacade ( ) . getImageDao ( ) . update ( diskSnapshot.getImage ( ) ) ; } }
protected java.util.Map < java.lang.String , java.lang.String > createPortAllocationRuntimeProperties ( com.woorea.openstack.quantum.model.Port port ) { java.util.Map < java.lang.String , java.lang.String > runtimeProperties = super . createPortAllocationRuntimeProperties ( port ) ; runtimeProperties.put ( "plugin_type" , getProvider ( ) . getAdditionalProperties ( ) . getPluginType ( ) ) ; return runtimeProperties ; }
public static void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public void getClusterFeaturesByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterFeaturesByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.network_cluster net_cluster ) { setEnumTitle ( net_cluster.getstatus ( ) ) ; switch ( net_cluster.getstatus ( ) ) { case Operational : return getApplicationResources ( ) . upImage ( ) ; case NonOperational : return getApplicationResources ( ) . downImage ( ) ; default : return getApplicationResources ( ) . downImage ( ) ; } }
public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGlusterHookListModel > getClusterGlusterHookListProvider ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector , final com.google.inject.Provider < org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget > confirmPopupProvider ) { return new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGlusterHookListModel > ( ginjector , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.class , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGlusterHookListModel.class ) { @ java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , ? > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGlusterHookListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( lastExecutedCommand == ( getModel ( ) . getDisableHookCommand ( ) ) ) { return confirmPopupProvider.get ( ) ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } } } ; }
public static void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
public static org.ovirt.engine.ui.frontend.ErrorTranslator getVdsmErrorsTranslator ( ) { if ( ( org.ovirt.engine.ui.frontend.Frontend.vdsmErrorsTranslator ) == null ) { org.ovirt.engine.ui.frontend.Frontend.setVdsmErrorsTranslator ( new org.ovirt.engine.ui.frontend.ErrorTranslator ( ( ( org.ovirt.engine.ui.frontend.VdsmErrors ) ( com.google.gwt.core.client.GWT.create ( org.ovirt.engine.ui.frontend.VdsmErrors.class ) ) ) ) ) ; } return org.ovirt.engine.ui.frontend.Frontend.vdsmErrorsTranslator ; }
protected void InitDetailModels ( ) { super . InitDetailModels ( ) ; setvmBasicDiskListModel ( new org.ovirt.engine.ui.uicommonweb.models.userportal.VmBasicDiskListModel ( ) ) ; org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( getvmBasicDiskListModel ( ) ) ; setDetailModels ( list ) ; setActiveDetailModel ( getvmBasicDiskListModel ( ) ) ; }
public void unmanagedNetworkAddedToNic ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingIfaces ( nic ) ; nic.setNetworkName ( "net" ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic ) ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORKS_DONT_EXIST_IN_CLUSTER , nic.getNetworkName ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity ( org.ovirt.engine.core.bll.tasks.interfaces.CommandCoordinator coco , org.ovirt.engine.core.compat.Guid cmdId ) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = coco.getCommandEntity ( cmdId ) ; if ( cmdEntity == null ) { cmdEntity = coco.createCommandEntity ( cmdId , ActionType.Unknown , new org.ovirt.engine.core.common.action.ActionParametersBase ( ) ) ; } return cmdEntity ; }
private void runHttpMethod ( org.apache.commons.httpclient.HttpClient httpClient , org.apache.commons.httpclient.HttpMethod httpMethod ) { try { int result = httpClient.executeMethod ( httpMethod ) ; if ( ( result != ( java.net.HttpURLConnection.HTTP_OK ) ) && ( result != ( java.net.HttpURLConnection.HTTP_MOVED_TEMP ) ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_FAILURE ) ; } } catch ( org.apache.commons.httpclient.HttpException e ) { handleException ( e ) ; } catch ( javax.net.ssl.SSLException e ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_SSL_FAILURE , e.getMessage ( ) ) ; } catch ( java.io.IOException e ) { handleException ( e ) ; } }
private void addStyles ( ) { userNameEditor.hideLabel ( ) ; passwordEditor.hideLabel ( ) ; domainEditor.hideLabel ( ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getLUNs ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > luns = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) ) ; luns.add ( lun ) ; return luns ; }
public void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; getUpHostListByCluster ( aQuery , clusterName , null ) ; }
public boolean matches ( java.lang.Object argument ) { if ( ! ( argument instanceof java.util.Collection ) ) { return false ; } @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.Collection < org.ovirt.engine.core.compat.Guid > ids = ( ( java.util.Collection < org.ovirt.engine.core.compat.Guid > ) ( argument ) ) ; return ( ( ids.size ( ) ) == ( removedBrickIds.size ( ) ) ) && ( removedBrickIds.containsAll ( ids ) ) ; }
public void execute ( ) { restApiSessionManager.reuseSession ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkCluster getManagementNetworkCluster ( ) { if ( ( managementNetworkCluster ) == null ) { org.ovirt.engine.core.compat.Guid clusterId = networkCluster.getClusterId ( ) ; final org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil managementNetworkUtil = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil.class ) ; org.ovirt.engine.core.common.businessentities.network.Network mgmt = managementNetworkUtil.getManagementNetwork ( clusterId ) ; managementNetworkCluster = org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.getNetworkClusterDao ( ) . get ( new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId ( clusterId , mgmt.getId ( ) ) ) ; } return managementNetworkCluster ; }
public static boolean isAdminUser ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { java.util.List < org.ovirt.engine.core.common.businessentities.Role > userRoles = org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.getRoleDAO ( ) . getAllForUserAndGroups ( user.getId ( ) , org.apache.commons.lang.StringUtils.join ( user.getGroupIds ( ) , "," ) ) ; for ( org.ovirt.engine.core.common.businessentities.Role r : userRoles ) { if ( ( r.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.RoleType.ADMIN ) ) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.log.debug ( "LoginAdminUser: User logged to admin using role '{}'" , r.getname ( ) ) ; return true ; } } return false ; }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void getUsbPolicyUsbTypeLegacy ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( "legacy" ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getcompatibility_version ( ) ) , UsbPolicy.ENABLED_LEGACY ) ; }
public static java.util.Map < java.lang.String , java.lang.String > getVnicCustomProperties ( org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile ) { java.util.Map < java.lang.String , java.lang.String > customProperties = null ; if ( vnicProfile != null ) { customProperties = vnicProfile.getCustomProperties ( ) ; } return customProperties == null ? new java.util.HashMap < java.lang.String , java.lang.String > ( ) : customProperties ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; connection.setid ( id ) ; java.lang.String host = org.ovirt.engine.api.common.util.QueryHelper.getMatrixConstraint ( uriInfo , org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionResource.HOST ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty ; if ( host != null ) { hostId = getHostId ( host ) ; } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId ) ; return performAction ( VdcActionType.RemoveStorageServerConnection , parameters ) ; }
public void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Disks:" , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { persistCommand ( parentCommand , false ) ; }
protected void setObjectName ( java.lang.Object object , java.lang.String name , boolean isSuffix ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData ) ( object ) ) . getTemplate ( ) ; if ( isSuffix ) { template.setName ( ( ( template.getName ( ) ) + name ) ) ; } else { template.setName ( name ) ; } }
public void processOnClientIpChange ( final org.ovirt.engine.core.common.businessentities.VDS vds , final org.ovirt.engine.core.compat.Guid vmId ) { final org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) . get ( vmId ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( vmDynamic.getclient_ip ( ) ) ) { vmDynamic.setConsole_current_user_name ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) . update ( vmDynamic ) ; } }
public org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentsResource getAttachmentsResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentsResource ( vmId ) ) ; }
public void onFailure ( final java.util.List < org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > > operation , final java.lang.Throwable caught ) { if ( ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute runMultipleAction: " + caught ) , caught ) ; failureEventHandler ( caught ) ; if ( callback != null ) { callback.executed ( new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult ( actionType , parameters , null , state ) ) ; } }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > > aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void setObjectName ( java.lang.Object object , java.lang.String name , boolean isSuffix ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm ( ) ; if ( isSuffix ) { vm.setName ( ( ( vm.getName ( ) ) + name ) ) ; } else { vm.setName ( name ) ; } }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void testDeleteAllUnusedIcons ( ) { reinitializeDatabase ( ) ; prepareDao ( ) . removeAllUnusedIcons ( ) ; final org.ovirt.engine.core.common.businessentities.VmIcon unusedIcon = prepareDao ( ) . get ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ; org.junit.Assert.assertNull ( unusedIcon ) ; final org.ovirt.engine.core.common.businessentities.VmIcon usedIcon = prepareDao ( ) . get ( FixturesTool.SMALL_ICON_ID ) ; org.junit.Assert.assertNotNull ( usedIcon ) ; reinitializeDatabase ( ) ; }
public void testUnmappedModelValue ( ) { for ( org.ovirt.engine.api.model.BootProtocol value : java.util.EnumSet.complementOf ( java.util.EnumSet.of ( BootProtocol.AUTOCONF ) ) ) { org.hamcrest.MatcherAssert.assertThat ( java.lang.String.format ( "%s.%s is not mapped" , org.ovirt.engine.api.model.BootProtocol.class . getName ( ) , value ) , org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map ( value ) , org.hamcrest.Matchers.notNullValue ( ) ) ; } }
private static void updateTimeoutLogableObject ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { int duplicateEventsIntrvalValue = ( auditLogable.isExternal ( ) ) ? java.lang.Math.max ( auditLogable.getEventFloodInSec ( ) , 30 ) : logType.getDuplicateEventsIntervalValue ( ) ; if ( duplicateEventsIntrvalValue > 0 ) { auditLogable.setEndTime ( org.ovirt.engine.core.compat.DateTime.getNow ( ) . AddSeconds ( logType.getDuplicateEventsIntervalValue ( ) ) ) ; auditLogable.setTimeoutObjectId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.composeObjectId ( auditLogable , logType ) ) ; } }
public java.lang.String getCustomToolTip ( ) { if ( ( ! ( getModel ( ) . getIsCloneVmSupported ( ) ) ) && ( ( getModel ( ) . getEntity ( ) ) != null ) ) { org.ovirt.engine.core.common.queries.CommandVersionsInfo commandVersionsInfo = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getCommandVersionsInfo ( VdcActionType.AddVmFromSnapshot ) ; java.lang.String minimalClusterVersion = ( commandVersionsInfo != null ) ? commandVersionsInfo.getClusterVersion ( ) . toString ( 2 ) : "" ; return messages.cloneVmNotSupported ( minimalClusterVersion ) ; } else { return this . getTitle ( ) ; } }
public void testRemove ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveNetwork , org.ovirt.engine.core.common.action.RemoveNetworkParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.networkId } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.VDS createOldHost ( org.ovirt.engine.core.common.businessentities.VDS host ) { org.ovirt.engine.core.common.businessentities.VDS oldHost = host.clone ( ) ; oldHost.setVdsName ( "FOO" ) ; return oldHost ; }
private boolean checkDerivedVmFromTemplateExists ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { java.util.List < java.lang.String > vmNames = getNamesOfDerivedVmsFromTemplate ( diskImage ) ; if ( ! ( vmNames.isEmpty ( ) ) ) { addCanDoActionMessage ( VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM ) ; addCanDoActionMessageVariable ( "vmsList" , org.apache.commons.lang.StringUtils.join ( vmNames , "," ) ) ; return false ; } return true ; }
public void tAggregateRow_8_AGGOUT_error ( java.lang.Exception exception , java.lang.String errorComponent , final java.util.Map < java.lang.String , java.lang.Object > globalMap ) throws ovirt_engine_dwh.aggregationtodaily_3_6.AggregationToDaily.TalendException { tAggregateRow_8_AGGIN_error ( exception , errorComponent , globalMap ) ; }
private void initializeCache ( ) { if ( ! ( cacheInitialized ) ) { synchronized ( LOCK ) { if ( ! ( cacheInitialized ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > cmdEntities = commandEntityDao.getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : cmdEntities ) { commandMap.put ( cmdEntity.getId ( ) , cmdEntity ) ; } cacheInitialized = true ; } } } }
public void setup ( ) { vdsGroup1 = createVdsGroup ( ) ; vdsGroup2 = createVdsGroup ( ) ; org.mockito.Mockito.when ( vdsGroupDao.getWithoutMigratingVms ( ) ) . thenReturn ( java.util.Arrays.asList ( vdsGroup1 , vdsGroup2 ) ) ; org.mockito.Mockito.when ( rulesEnforcer.chooseNextVmToMigrate ( org.mockito.Matchers.eq ( vdsGroup1 ) ) ) . thenReturn ( vm1 ) ; org.mockito.Mockito.when ( rulesEnforcer.chooseNextVmToMigrate ( org.mockito.Matchers.eq ( vdsGroup2 ) ) ) . thenReturn ( vm2 ) ; arem.wakeup ( ) ; }
public void getUsbPolicySetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getCompatibilityVersion ( ) ) , UsbPolicy.DISABLED ) ; }
private void updateMemoryBalloonDevice ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster ( ) ; java.lang.Integer osType = getOSType ( ) . getSelectedItem ( ) ; if ( ( cluster == null ) || ( osType == null ) ) { return ; } boolean isBalloonEnabled = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . isBalloonEnabled ( osType , cluster.getCompatibilityVersion ( ) ) ; getMemoryBalloonDeviceEnabled ( ) . setIsChangable ( isBalloonEnabled ) ; if ( getBehavior ( ) . basedOnCustomInstanceType ( ) ) { getMemoryBalloonDeviceEnabled ( ) . setEntity ( isBalloonEnabled ) ; } }
protected org.ovirt.engine.core.compat.Guid getPredefinedVdsIdToRunOn ( ) { return org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDedicatedVmForVds ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigSet ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey , java.lang.String configValue , java.lang.String userName ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeGeoRepConfigSet ( volumeName , slaveHost , slaveVolumeName , configKey , configValue , userName ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) { setUpEntityQueryExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateNetwork , org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters.class , new java.lang.String [ ] { "StoragePoolId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , valid , success ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.getModel ( 0 ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean authenticationRequired = requiresAuthentication.getEntity ( ) ; getUsername ( ) . setIsChangeable ( authenticationRequired ) ; getPassword ( ) . setIsChangeable ( authenticationRequired ) ; getTenantName ( ) . setIsChangeable ( authenticationRequired ) ; getAuthUrl ( ) . setIsChangeable ( authenticationRequired ) ; }
protected void verifyAddDelegatedCorrectly ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface , org.mockito.verification.VerificationMode addMacVerification ) { org.mockito.Mockito.verify ( macPoolManager , addMacVerification ) . addMac ( iface.getMacAddress ( ) ) ; org.mockito.Mockito.verify ( vmNetworkInterfaceDAO ) . save ( iface ) ; org.mockito.Mockito.verify ( vmNetworkStatisticsDAO ) . save ( iface.getStatistics ( ) ) ; }
public void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.storage.VolumeClassification deleteVolumeByClassificationType ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.businessentities.storage.VolumeClassification cinderVolumeType = cinderDisk.getVolumeClassification ( ) ; if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { deleteVolume ( cinderDisk ) ; } else if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { deleteSnapshot ( cinderDisk.getImageId ( ) ) ; } else { org.ovirt.engine.core.bll.storage.CinderBroker.log.error ( "Error, could not determine Cinder entity {} with id {} from Cinder provider." , cinderDisk.getDiskAlias ( ) , cinderDisk.getImageId ( ) ) ; } return cinderVolumeType ; }
protected void connect ( ) { if ( ( ( getEntity ( ) ) == null ) || ( ( getEntity ( ) . getRunOnVds ( ) ) == null ) ) { return ; } getLogger ( ) . debug ( "VNC console info..." ) ; org.ovirt.engine.ui.uicommonweb.UICommand invokeConsoleCommand = new org.ovirt.engine.ui.uicommonweb.UICommand ( "invokeConsoleCommand" , new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget ( ) { @ java.lang.Override public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { invokeConsole ( ) ; } } ) ; executeCommandWithConsoleSafenessWarning ( invokeConsoleCommand ) ; }
public void validateImageNotFound ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.VM ) ; org.mockito.Mockito.when ( diskImageDao.get ( org.mockito.Matchers.any ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST.toString ( ) ) ) ; }
protected void entityChanging ( java.lang.Object newValue , java.lang.Object oldValue ) { org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent notifier = ( ( org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent ) ( ( oldValue instanceof org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent ) ? oldValue : null ) ) ; if ( notifier != null ) { notifier.getPropertyChangedEvent ( ) . removeListener ( this ) ; } notifier = ( ( org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent ) ( ( newValue instanceof org.ovirt.engine.ui.uicompat.IProvidePropertyChangedEvent ) ? newValue : null ) ) ; if ( notifier != null ) { notifier.getPropertyChangedEvent ( ) . addListener ( this ) ; } }
public void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) . withoutRefresh ( ) , aQuery ) ; }
public javax.ws.rs.core.Response deactivate ( org.ovirt.engine.api.model.Action action ) { boolean stopGlusterService = org.ovirt.engine.api.common.util.QueryHelper.getBooleanMatrixParameter ( uriInfo , org.ovirt.engine.api.restapi.resource.BackendHostResource.STOP_GLUSTER_SERVICE , true , false ) ; return doAction ( VdcActionType.MaintenanceNumberOfVdss , new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( asList ( guid ) , false , ( action.isSetReason ( ) ? action.getReason ( ) : null ) , stopGlusterService ) , action ) ; }
private static org.ovirt.engine.core.bll.job.ExecutionContext createMonitoredExecutionContext ( ) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext ( ) ; executionContext.setJobRequired ( true ) ; executionContext.setMonitored ( true ) ; return executionContext ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook getGlusterServerHook ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverHook = getCallsHandler ( ) . executeRead ( "GetGlusterServerHook" , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoDbFacadeImpl.glusterServerHookRowMapper , getCustomMapSqlParameterSource ( ) . addValue ( "hook_id" , hookId ) . addValue ( "server_id" , serverId ) ) ; return serverHook ; }
public void validateFails ( ) { org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters param = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( ) ; param.setForce ( false ) ; param.setVolumeId ( startedVolumeId ) ; param.setGeoRepSessionId ( geoRepSessionId ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.PauseGlusterVolumeGeoRepSessionCommand ( param ) ) ; prepareMocks ( cmd ) ; org.mockito.Mockito.doReturn ( getGeoRepSession ( geoRepSessionId , GeoRepSessionStatus.PASSIVE , startedVolumeId ) ) . when ( geoRepDao ) . getById ( geoRepSessionId ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void setupNetworks ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel setupNetworksWindowModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel ( this , getEntity ( ) ) ; setWindow ( setupNetworksWindowModel ) ; }
public void testList ( ) throws java.lang.Exception { resource.setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( VdcQueryType.GetVdsHooksById2 , org.ovirt.engine.core.common.queries.GetVdsHooksByIdParameters.class , new java.lang.String [ ] { "VdsId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Hooks hooks = resource.list ( ) ; assertNotNull ( hooks.getHooks ( ) ) ; assertEquals ( hooks.getHooks ( ) . size ( ) , 4 ) ; }
public void testExecuteQueryCommand ( ) { setupVmDao ( java.util.Collections.singletonList ( vm ) ) ; setupVmNetworkInterfaceDao ( java.util.Collections.singletonList ( vmNetworkInterface ) ) ; expectAndTestForVmAndInterface ( ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > allStorageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > isoStorageDomains = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : allStorageDomains ) { if ( ( storageDomain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) { isoStorageDomains.add ( storageDomain ) ; } } return isoStorageDomains ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getPermissionDao ( ) ; new_permissions = new org.ovirt.engine.core.common.businessentities.Permissions ( org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID , org.ovirt.engine.core.dao.PermissionDAOTest.ROLE_ID , org.ovirt.engine.core.dao.PermissionDAOTest.STORAGE_POOL_ID , org.ovirt.engine.core.common.VdcObjectType.StoragePool ) ; org.ovirt.engine.core.dao.EngineSessionDAO engineDao = dbFacade.getEngineSessionDao ( ) ; unprivilegedUserSession = engineDao.getBySessionId ( org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ENGINE_SESSION_ID ) ; privilegedUserSession = engineDao.getBySessionId ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ENGINE_SESSION_ID ) ; }
public org.ovirt.engine.api.model.StorageDomains list ( ) { org.ovirt.engine.api.model.StorageDomains storageDomains = new org.ovirt.engine.api.model.StorageDomains ( ) ; for ( org.ovirt.engine.api.model.StorageDomain entity : getBackendCollection ( org.ovirt.engine.api.model.StorageDomain.class , VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) ) ) { storageDomains.getStorageDomains ( ) . add ( addLinks ( map ( entity ) ) ) ; } return storageDomains ; }
public void getGlusterHook ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , boolean includeServerHooks ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( hookId , includeServerHooks ) , aQuery ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onFailed ( cmdId , childCmdIds ) ; org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( getDiskId ( ) , ImageStatus.ILLEGAL ) ; log.error ( "Failed extending disk. ID: {}" , getDiskId ( ) ) ; updateAuditLog ( AuditLogType.USER_EXTEND_DISK_SIZE_FAILURE , getCommand ( ) . getNewDiskSizeInGB ( ) ) ; getCommand ( ) . getParameters ( ) . setTaskGroupSuccess ( false ) ; getCommand ( ) . endAction ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
public void customPropertiesNotSupported ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork ( ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( "eth0" , network ) ; mockExistingIfaces ( iface ) ; iface.setCustomProperties ( createCustomProperties ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( iface ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED , network.getName ( ) ) ; }
public static void mockAsyncDataProvider ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp = org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.setup.getMocks ( ) . asyncDataProvider ( ) ; org.mockito.Mockito.when ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp.getConfigValuePreConverted ( ConfigurationValues.VncKeyboardLayoutValidValues ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.mockito.Mockito.when ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp.osNameExists ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.OS_TYPE ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp.getMaxVmNameLength ( ) ) . thenReturn ( 64 ) ; org.mockito.Mockito.when ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp.getOsDefaultIconId ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.OS_TYPE , false ) ) . thenReturn ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.LARGE_OS_DEFAULT_ICON_ID ) ; }
protected void InitDetailModels ( ) { super . InitDetailModels ( ) ; org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkVmListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkTemplateListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel ( ) ) ; setDetailModels ( list ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( 1 , true ) ; control.replay ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private org.ovirt.engine.core.bll.ValidationResult validOrFirstFailure ( java.util.function.Function < java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator > , org.ovirt.engine.core.bll.ValidationResult > predicate ) { for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator > entry : domainValidators.entrySet ( ) ) { org.ovirt.engine.core.bll.ValidationResult currResult = predicate.apply ( entry ) ; if ( ! ( currResult.isValid ( ) ) ) { return currResult ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void oSType_SelectedItemChanged ( ) { java.lang.Integer osType = getModel ( ) . getOSType ( ) . getSelectedItem ( ) ; if ( osType != null ) { org.ovirt.engine.core.compat.Guid id = ( basedOnCustomInstanceType ( ) ) ? vm.getId ( ) : getModel ( ) . getInstanceTypes ( ) . getSelectedItem ( ) . getId ( ) ; updateVirtioScsiEnabledWithoutDetach ( id , osType ) ; } }
protected void removeVmNetworkInterfaces ( ) { new org.ovirt.engine.core.bll.network.VmInterfaceManager ( org.ovirt.engine.core.bll.ImportVmCommand.getMacPool ( ) ) . removeAll ( getVmId ( ) ) ; }
protected void executeCommand ( ) { try { addVmToDb ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getVm ( ) ; if ( vm.getImages ( ) . isEmpty ( ) ) { endVmRelatedOps ( ) ; } else { processImages ( ) ; } } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.MacPoolManager.getInstance ( ) . freeMacs ( macsAdded ) ; throw e ; } setSucceeded ( true ) ; }
private void vmNetworkSetupTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , boolean vmNetwork , boolean featureSupported ) { mockConfigRule.mockConfigValue ( ConfigValues.NonVmNetworkSupported , dataCenter.getCompatibilityVersion ( ) , featureSupported ) ; org.mockito.Mockito.when ( network.isVmNetwork ( ) ) . thenReturn ( vmNetwork ) ; org.junit.Assert.assertThat ( validator.vmNetworkSetCorrectly ( ) , matcher ) ; }
public void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; getUpHostListByCluster ( aQuery , clusterName , null ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.Recipient ) ) { return false ; } org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.Recipient other = ( ( org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.Recipient ) ( obj ) ) ; return ( java.util.Objects.equals ( transport , other.transport ) ) && ( java.util.Objects.equals ( name , other.name ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String uri , java.lang.String username , java.lang.String password , java.util.List < java.lang.String > vmsNames ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.getExternalVMs ( uri , username , password , vmsNames ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void logOutputAndErrors ( java.lang.String output , java.lang.String errors ) { if ( ( errors != null ) && ( ( errors.length ( ) ) != 0 ) ) { org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper.log.error ( "Sign Certificate request script errors:\n{}" , errors ) ; } if ( ( output != null ) && ( ( output.length ( ) ) != 0 ) ) { org.ovirt.engine.core.utils.hostinstall.OpenSslCAWrapper.log.debug ( "Sign Certificate request script output:\n{}" , output ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomainList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; if ( ( storageDomainList.size ( ) ) != 0 ) { model.getStorageTypeList ( ) . setChangeProhibitionReason ( "Cannot change Repository type with Storage Domains attached to it" ) ; model.getStorageTypeList ( ) . setIsChangable ( false ) ; } }
public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails getNetworkImplementationDetails ( ) { if ( ! ( isAttached ( ) ) ) { return null ; } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = ( hasVlan ( ) ) ? getVlanNicModel ( ) . getEntity ( ) : getAttachedToNic ( ) . getEntity ( ) ; return nic.getNetworkImplementationDetails ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network getGlusterNetworkId ( org.ovirt.engine.core.common.businessentities.VdsStatic server , java.lang.String networkAddress ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > allNetworksInCluster = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.network.NetworkDao.class ) . getAllForCluster ( server.getClusterId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : allNetworksInCluster ) { if ( ( network.getCluster ( ) . isGluster ( ) ) && ( isSameNetworkAddress ( server.getId ( ) , network.getName ( ) , networkAddress ) ) ) { return network ; } } return null ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Tags > convert ( java.lang.Object source ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > ret = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Tags tags : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > ) ( source ) ) ) { if ( ( tags.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag ) ) { ret.add ( tags ) ; } } return ret ; } return new java.util.ArrayList < > ( ) ; }
public void testGetDiskForAllStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk > unregisteredDisk = dao.getByDiskIdAndStorageDomainId ( FixturesTool.UNREGISTERED_DISK , null ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( unregisteredDisk.isEmpty ( ) ) ) , "Disk should exists in the UnregisteredDisks table" ) ; org.junit.jupiter.api.Assertions.assertTrue ( unregisteredDisk.get ( 0 ) . getVms ( ) . isEmpty ( ) , "Disk should exists in the UnregisteredDisks table" ) ; }
public org.ovirt.engine.core.bll.ValidationResult qosExistsOrNull ( ) { return ( ( getProfile ( ) . getQosId ( ) ) == null ) || ( ( getDbFacade ( ) . getStorageQosDao ( ) . get ( getProfile ( ) . getQosId ( ) ) ) != null ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_QOS_NOT_FOUND ) ; }
private void setLangPageShown ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response , boolean value ) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie ( org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN , java.lang.Boolean.toString ( value ) ) ; cookie.setSecure ( "https" . equalsIgnoreCase ( request.getScheme ( ) ) ) ; cookie.setPath ( getServletContext ( ) . getContextPath ( ) ) ; cookie.setHttpOnly ( true ) ; response.addCookie ( cookie ) ; }
private void Run ( ) { org.ovirt.engine.core.common.businessentities.VM entity = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getItem ( ) . getEntity ( ) ) ) ; boolean reinitialize = ( ! ( entity.isInitialized ( ) ) ) && ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType ( entity.getVmOs ( ) ) ) ; org.ovirt.engine.core.common.action.RunVmParams tempVar = new org.ovirt.engine.core.common.action.RunVmParams ( entity.getId ( ) ) ; tempVar.setReinitialize ( reinitialize ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RunVm , tempVar ) ; }
protected void analyze ( ) { proceedDownVms ( ) ; proceedWatchdogEvents ( ) ; proceedBalloonCheck ( ) ; proceedGuaranteedMemoryCheck ( ) ; updateRepository ( ) ; prepareGuestAgentNetworkDevicesForUpdate ( ) ; updateLunDisks ( ) ; updateVmJobs ( ) ; analyzeExternalVms ( ) ; analyzeHostedEngineVm ( ) ; if ( ( vmDynamicToSave ) != null ) { vmsMonitoring.addVmDynamicToList ( vmDynamicToSave ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storage = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainStaticDao ( ) . get ( org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery.getParameters ( ) . getStorageDomainId ( ) ) ; if ( ( storage.getstorage_domain_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = executeVerb ( ) ; buildOvfReturnValue ( retVal.getReturnValue ( ) ) ; } else { org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery.getQueryReturnValue ( ) . setReturnValue ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ) ; } }
public void updateRepository_MIGRATION_FROM ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data ) { initMocks ( data , true ) ; org.junit.Assume.assumeNotNull ( data.dbVm ( ) , data.vdsmVm ( ) ) ; org.junit.Assume.assumeTrue ( ( ( data.vdsmVm ( ) . getVmDynamic ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) ) ; org.mockito.Mockito.verify ( resourceManager , org.mockito.Mockito.never ( ) ) . internalSetVmStatus ( data.dbVm ( ) . getDynamicData ( ) , VMStatus.MigratingTo ) ; }
private org.ovirt.engine.core.bll.AddQuotaCommand createCommand ( ) { org.ovirt.engine.core.common.action.QuotaCRUDParameters param = new org.ovirt.engine.core.common.action.QuotaCRUDParameters ( mockGeneralStorageQuota ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.AddQuotaCommand ( param , null ) ) ; org.mockito.Mockito.doReturn ( quotaDao ) . when ( command ) . getQuotaDao ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( quotaDao ) . getQuotaByQuotaName ( org.mockito.Matchers.any ( java.lang.String.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; return command ; }
public void testStart ( ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( ActionType.RunVm , org.ovirt.engine.core.common.action.RunVmParams.class , new java.lang.String [ ] { "VmId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } ) ) ; javax.ws.rs.core.Response response = resource.start ( new org.ovirt.engine.api.model.Action ( ) ) ; verifyActionResponse ( response ) ; verifyActionModel ( ( ( org.ovirt.engine.api.model.Action ) ( response.getEntity ( ) ) ) . getVm ( ) , 0 ) ; }
public boolean isClientWindownsExplorer ( ) { return ( clientOsType ( ) . equalsIgnoreCase ( "Windows" ) ) && ( clientBrowserType ( ) . equalsIgnoreCase ( "Explorer" ) ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "storageDomainId" , storageDomainId ) . append ( "imageGroupId" , imageGroupId ) . append ( "baseImageId" , baseImageId ) . append ( "topImageId" , topImageId ) . append ( "baseImageGeneration" , baseImageGeneration ) . build ( ) ; }
public void getVolumesForForceSessionCreate ( ) { this . startProgress ( constants.fetchingDataMessage ( ) ) ; org.ovirt.engine.core.common.queries.SearchParameters volumesSearchParameters = new org.ovirt.engine.core.common.queries.SearchParameters ( "Volumes:" , org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume , false ) ; volumesSearchParameters.setRefresh ( true ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , volumesSearchParameters , new org.ovirt.engine.ui.uicommonweb.models.gluster.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { showAvailableVolumes ( returnValue ) ; } } ) ) ; }
public static void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getSecondarySources ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > candidateHosts , java.util.Map < java.lang.String , java.lang.String > parameters ) { long requiredMemory = ( parameters.containsKey ( org.ovirt.engine.core.bll.scheduling.policyunits.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED ) ) ? java.lang.Long.valueOf ( parameters.get ( org.ovirt.engine.core.bll.scheduling.policyunits.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED ) ) : 0L ; return getOverUtilizedMemoryHosts ( candidateHosts , requiredMemory ) ; }
public void saveNICsConfig ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.CommitNetworkChanges , new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.action.VdcActionParametersBase [ ] { new org.ovirt.engine.core.common.action.VdsActionParameters ( getEntity ( ) . getId ( ) ) } ) ) , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
protected boolean checkCpuSockets ( ) { return org.ovirt.engine.core.bll.AddVmCommand.checkCpuSockets ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getNumOfSockets ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getCpuPerSocket ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getThreadsPerCpu ( ) , org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) . toString ( ) , org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
public static void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void getMaxSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 10 ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > executeGetDeviceList ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.String lunId ) { org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters ( vdsId , storageType , false , java.util.Arrays.asList ( lunId ) ) ; return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( getVdsBroker ( ) . RunVdsCommand ( VDSCommandType.GetDeviceList , parameters ) . getReturnValue ( ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.storage_pool buildStoragePool ( java.util.Map < java.lang.String , java.lang.Object > xmlRpcStruct ) { org.ovirt.engine.core.common.businessentities.storage_pool sPool = new org.ovirt.engine.core.common.businessentities.storage_pool ( ) ; if ( xmlRpcStruct.containsKey ( "type" ) ) { sPool.setstorage_pool_type ( org.ovirt.engine.core.common.businessentities.StorageType.valueOf ( xmlRpcStruct.get ( "type" ) . toString ( ) ) ) ; } sPool.setname ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue ( xmlRpcStruct , "name" ) ) ; java.lang.Integer masterVersion = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignIntValue ( xmlRpcStruct , "master_ver" ) ; if ( masterVersion != null ) { sPool.setmaster_domain_version ( masterVersion ) ; } return sPool ; }
protected boolean isTimeToUpdateVmStatistics ( ) { return timeToUpdateVmStatistics ; }
public void testGetByVolumeId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > snapshots = dao.getAllByVolumeId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.VOLUME_ID ) ; org.junit.Assert.assertNotNull ( snapshots ) ; org.junit.Assert.assertEquals ( 2 , snapshots.size ( ) ) ; org.junit.Assert.assertTrue ( snapshots.contains ( existingSnapshot ) ) ; }
void forceRefresh ( M model ) { if ( ( model instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) && ( ! ( model.getLastExecutedCommand ( ) . getIsCancel ( ) ) ) ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableList = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( model ) ) ; searchableList.getForceRefreshCommand ( ) . execute ( ) ; } }
private boolean isInstanceType ( ) { return ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate ( ) . getTemplateType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE ) ; }
public static void GetDocumentationBaseURL ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
protected void saveBaseDisk ( org.ovirt.engine.core.common.businessentities.DiskImage disk ) { getBaseDiskDao ( ) . save ( disk ) ; }
public void caluculateNetworkImplementationDetailsNetworkInSyncWithoutQos ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; iface.setQos ( null ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , true , iface.getNetworkName ( ) , iface.isBridged ( ) , iface.getMtu ( ) , iface.getVlanId ( ) , null ) ; }
private boolean isUserSearchUsingTags ( ) { return ( SearchObjects.VDC_USER_OBJ_NAME.equals ( getSearchObjectStr ( ) ) ) && ( origText.contains ( "vm" ) ) ; }
public void checkNetworkLabelFormat ( ) { org.ovirt.engine.core.common.utils.NetworkLabelFormatValidatorTest.NetworkLabelContainer labelContainer = new org.ovirt.engine.core.common.utils.NetworkLabelFormatValidatorTest.NetworkLabelContainer ( labels ) ; java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.NetworkLabelFormatValidatorTest.NetworkLabelContainer > > validate = validator.validate ( labelContainer ) ; org.junit.Assert.assertEquals ( ( "Failed to validate " + ( labelContainer.getLabels ( ) ) ) , expectedResult , validate.isEmpty ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { org.ovirt.engine.core.common.businessentities.UserProfile entity = getEntity ( org.ovirt.engine.core.common.businessentities.UserProfile.class , QueryType.GetUserProfile , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , userId.toString ( ) , true ) ; entity.setSshPublicKeyId ( Guid.Empty ) ; entity.setSshPublicKey ( "" ) ; org.ovirt.engine.core.common.action.UserProfileParameters parameters = new org.ovirt.engine.core.common.action.UserProfileParameters ( ) ; parameters.setUserProfile ( entity ) ; return performAction ( ActionType.UpdateUserProfile , parameters ) ; }
public void testExecuteQuery ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . isWindowsOS ( ) ) . thenReturn ( true ) ; getQuery ( ) . executeQueryCommand ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.Map < java.lang.String , java.lang.String > result = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ) ; org.junit.Assert.assertEquals ( "Wrong number of time zones" , SysprepHandler.timeZoneIndex.size ( ) , result.size ( ) ) ; }
private static org.ovirt.engine.core.bll.validator.StorageDomainValidator mockStorageDomainValidatorWithSpace ( ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.mockStorageDomainValidator ( ) ; org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForNewDisk ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.DiskImage.class ) ) ) . thenReturn ( ValidationResult.VALID ) ; return storageDomainValidator ; }
public void testDisksUsagesWithEmptyEntry ( ) { java.lang.Object [ ] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.initDisksUsageData ( ) ; disksUsages [ 1 ] = new java.util.HashMap < > ( ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksUsage ( disksUsages ) ; validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVmStatistics ( ) , disksUsages , xml ) ; }
public void successfullSpmFence ( ) { mockProxyHost ( ) ; mockFenceSuccess ( ) ; org.ovirt.engine.core.common.businessentities.FenceAgent agent = createAgent ( ) ; org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result = executor.fence ( FenceActionType.STOP , agent ) ; org.mockito.Mockito.verify ( vdsBrokerFrontend ) . RunVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.SpmStop ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ; org.junit.Assert.assertTrue ( result.getSucceeded ( ) ) ; org.junit.Assert.assertEquals ( result.getFenceAgentUsed ( ) , agent ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId ( ) ; java.lang.String networkName = attachment.getNetworkName ( ) ; boolean bothIdentificationSet = ( networkId != null ) && ( networkName != null ) ; java.lang.String [ ] replacements = createIncoherentNetworkIdentificationErrorReplacements ( attachment.getId ( ) , networkId , networkName ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY , replacements ) . when ( ( bothIdentificationSet && ( networkNameAndNetworkIdIsIncoherent ( networkId , networkName ) ) ) ) ; }
protected org.ovirt.engine.core.compat.Guid getDataCenterId ( org.ovirt.engine.api.model.Network network ) { java.lang.String networkName = network.getDataCenter ( ) . getName ( ) ; return getEntity ( org.ovirt.engine.core.common.businessentities.StoragePool.class , VdcQueryType.GetStoragePoolByDatacenterName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( networkName ) , ( "Datacenter: name=" + networkName ) ) . getId ( ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addNetworkInterfaceDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , boolean plugged , boolean hostDev ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( id , VmDeviceGeneralType.INTERFACE , ( hostDev ? org.ovirt.engine.core.common.utils.VmDeviceType.HOST_DEVICE : org.ovirt.engine.core.common.utils.VmDeviceType.BRIDGE ) , java.util.Collections.< java.lang.String , java.lang.Object > emptyMap ( ) , plugged , false , null ) ; }
protected boolean validateSpaceRequirements ( ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator ( ) ; if ( validate ( storageDomainValidator.isDomainWithinThresholds ( ) ) ) { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage ( ) . getSnapshots ( ) . addAll ( getAllImageSnapshots ( ) ) ; return validate ( storageDomainValidator.hasSpaceForDiskWithSnapshots ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage ( ) ) ) ; } return false ; }
public void validateBadUUIDSFiltered ( ) { java.util.Map < java.lang.String , java.lang.Object > innerMap = java.util.Collections.singletonMap ( org.ovirt.engine.core.vdsbroker.irsbroker.ImagesListReturnTest.IMAGES_LIST , new java.lang.Object [ ] { "28e983b9-c2f6-4a50-a5d5-7a38089797c7" , "c3d75234-b360-4aed-8d78-413d7488bd9b" , "_remove_me_2f17489c-285e-496d-bd86-0d63d1be2efe" } ) ; org.ovirt.engine.core.vdsbroker.irsbroker.ImagesListReturn imagesListReturn = new org.ovirt.engine.core.vdsbroker.irsbroker.ImagesListReturn ( innerMap ) ; java.lang.String [ ] expectedUUIDList = new java.lang.String [ ] { "28e983b9-c2f6-4a50-a5d5-7a38089797c7" , "c3d75234-b360-4aed-8d78-413d7488bd9b" } ; org.junit.jupiter.api.Assertions.assertArrayEquals ( expectedUUIDList , imagesListReturn.getImageList ( ) ) ; }
private static void addUsbSlots ( org.ovirt.engine.core.common.businessentities.VmBase vm , int numOfSlots ) { for ( int index = 1 ; index <= numOfSlots ; index ++ ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , vm.getId ( ) ) , VmDeviceGeneralType.CHANNEL , VmDeviceType.SPICEVMC , org.ovirt.engine.core.bll.utils.VmDeviceUtils.getUsbSlotSpecParams ( ) , true , false ) ; } }
public void setIsAdvancedModeLocalStorageKey ( java.lang.String isAdvancedModeLocalStorageKey ) { this . isAdvancedModeLocalStorageKey = isAdvancedModeLocalStorageKey ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getAllForStorageDomain ( org.ovirt.engine.core.bll.storage.GetStorageDomainListByIdQuery.getParameters ( ) . getStorageDomainId ( ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > temp = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : temp ) { if ( ( domain.getStorageDomainSharedStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached ) ) { result.remove ( domain ) ; } } org.ovirt.engine.core.bll.storage.GetStorageDomainListByIdQuery.getQueryReturnValue ( ) . setReturnValue ( result ) ; }
private void optimizationCustomFormatter ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel object ) { if ( ( ( object.getOptimizationCustom ( ) ) != null ) && ( ( object.getOptimizationCustom ( ) . getEntity ( ) ) != null ) ) { optimizationCustomEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.cluster.ClusterPopupView.messages.clusterPopupMemoryOptimizationCustomLabel ( java.lang.String.valueOf ( object.getMemoryOverCommit ( ) ) ) ) ; } }
protected void setActionMessageParameters ( ) { org.ovirt.engine.core.common.businessentities.UserProfile existingProfile = org.ovirt.engine.core.bll.AddUserProfileCommand.getUserProfile ( ) ; if ( ( existingProfile != null ) && ( isSSHPublicKeyUpdate ( existingProfile ) ) ) { addValidationMessage ( EngineMessage.VAR__ACTION__UPDATE ) ; } else { addValidationMessage ( EngineMessage.VAR__ACTION__ADD ) ; } addValidationMessage ( EngineMessage.VAR__TYPE__USER_PROFILE ) ; }
public static void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 , 0 , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveVnicProfile , org.ovirt.engine.core.common.action.VnicProfileParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.remove ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfileResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void wakeup ( ) { this . auditLogDirector = _auditLogDirector ; this . vdsDao = _vdsDao ; this . vdsGroupDao = _vdsGroupDao ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.scheduling.AffinityRulesEnforcementManagerTest.TestingAffinityRulesEnforcementPerCluster ( ) ) . when ( _perClusterProvider ) . get ( ) ; this . perClusterProvider = _perClusterProvider ; super . wakeup ( ) ; addInjectionsToPerClusterObjects ( ) ; }
private void initTable ( ) { getTable ( ) . enableColumnResizing ( ) ; initTableOverhead ( ) ; handleRadioButtonClick ( null ) ; initSorting ( ) ; getTable ( ) . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface , org.ovirt.engine.core.common.businessentities.VM > > ( org.ovirt.engine.ui.webadmin.section.main.view.tab.network.SubTabNetworkVmView.constants.removeInterface ( ) ) { @ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getDetailModel ( ) . getRemoveCommand ( ) ; } } ) ; }
public static void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private org.ovirt.engine.core.bll.ValidationResult modifiedAttachmentExists ( org.ovirt.engine.core.compat.Guid networkAttachmentId ) { if ( isNewAttachment ( networkAttachmentId ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment : existingAttachments ) { if ( existingAttachment.getId ( ) . equals ( networkAttachmentId ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.MODIFIED_NETWORK_ATTACHMENT_DOES_NOT_EXISTS ; java.lang.String replacement = org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , networkAttachmentId.toString ( ) ) ; return new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , replacement ) ; }
private void setBondOptions ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity , org.ovirt.engine.ui.uicommonweb.models.hosts.SetupNetworksBondModel bondDialogModel ) { org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > BondPair = ( ( org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ) ( bondDialogModel.getBondingOptions ( ) . getSelectedItem ( ) ) ) ; java.lang.String key = BondPair.getKey ( ) ; entity.setBondOptions ( ( ( java.lang.String ) ( "custom" . equals ( key ) ? BondPair.getValue ( ) . getEntity ( ) : key ) ) ) ; }
public static void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
public void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private java.util.List < java.lang.String > getSecurityGroups ( org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile ) { java.util.Map < java.lang.String , java.lang.String > customProperties = vnicProfile.getCustomProperties ( ) ; if ( customProperties.containsKey ( org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy.SECURITY_GROUPS_PROPERTY ) ) { java.lang.String securityGroupsString = customProperties.get ( org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy.SECURITY_GROUPS_PROPERTY ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( securityGroupsString ) ) { return org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy.NO_SECURITY_GROUPS ; } return java.util.Arrays.asList ( securityGroupsString.split ( ",\\w*" ) ) ; } return org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy.DEFAULT_SECURITY_GROUP ; }
public static void getVnicProfilesByNetworkId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid networkId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVnicProfilesByNetworkId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( networkId ) , aQuery ) ; }
public void hostNInUse ( ) { org.mockito.Mockito.when ( oldHost.getHostName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( host.getHostName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( hostDao.getAllForHostname ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.hostNameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST ) ) ; }
public void checkEmptyIdHost ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data2" , StorageType.NFS , NfsVersion.V4 , 300 , 0 ) ; parameters.setStorageServerConnection ( newNFSConnection ) ; parameters.setVdsId ( Guid.Empty ) ; org.mockito.Mockito.when ( storageConnDao.get ( newNFSConnection.getId ( ) ) ) . thenReturn ( oldNFSConnection ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Vm model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; verifyLinks ( model ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > list = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > newList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Permission permission : list ) { if ( ! ( permission.getRoleId ( ) . equals ( ApplicationGuids.quotaConsumer.asGuid ( ) ) ) ) { newList.add ( permission ) ; } } setItems ( newList ) ; }
public void freeMac ( java.lang.String mac ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock l = new org.ovirt.engine.core.utils.lock.AutoCloseableLock ( lockObj.writeLock ( ) ) ) { checkIfInitialized ( ) ; macsStorage.freeMac ( org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( mac ) ) ; } }
public void getAAAProfilesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.convertAAAProfilesResult ( aQuery ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAAAProfileList , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void testGetPackagesForCheckUpdate ( ) throws java.lang.Exception { java.util.Collection < java.lang.String > expectedPackages = new java.util.HashSet < > ( java.util.Arrays.asList ( "a" , "b" , "c" , "d" ) ) ; java.util.Collection < java.lang.String > actualPackages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate ( VDSType.VDS , Version.v4_0 ) ; org.junit.Assert.assertEquals ( expectedPackages , actualPackages ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.GlusterBrick model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId.toString ( ) , model.getGlusterVolume ( ) . getId ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.serverId.toString ( ) , model.getServerId ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.brickDir , model.getBrickDir ( ) ) ; verifyLinks ( model ) ; }
public static void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
public void testNegativeAffinity ( ) throws java.lang.Exception { hosts = java.util.Arrays.asList ( host_negative_enforcing , host_not_in_affinity_group ) ; java.util.List < org.ovirt.engine.core.common.scheduling.AffinityGroup > affinityGroups = java.util.Arrays.asList ( negative_enforcing_group ) ; org.mockito.Mockito.doReturn ( affinityGroups ) . when ( affinityGroupDao ) . getAllAffinityGroupsByVmId ( org.mockito.ArgumentMatchers.any ( ) ) ; org.assertj.core.api.Assertions.assertThat ( unit.filter ( cluster , hosts , vm , new java.util.HashMap < > ( ) , new org.ovirt.engine.core.common.scheduling.PerHostMessages ( ) ) ) . contains ( host_not_in_affinity_group ) ; }
public static int GetMaxVmPriority ( ) { return ( ( java.lang.Integer ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted ( ConfigurationValues.VmPriorityMaxValue , Config.DefaultConfigurationVersion ) ) ) ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
private void takeVm ( ) { org.ovirt.engine.core.common.businessentities.VmPool entity = ( ( org.ovirt.engine.core.common.businessentities.VmPool ) ( getItem ( ) . getEntity ( ) ) ) ; org.ovirt.engine.core.common.action.AttachUserToVmFromPoolAndRunParameters params = new org.ovirt.engine.core.common.action.AttachUserToVmFromPoolAndRunParameters ( entity.getVmPoolId ( ) , org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . getLoggedInUser ( ) . getId ( ) , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.AttachUserToVmFromPoolAndRun , params , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ! ( result.getReturnValue ( ) . getSucceeded ( ) ) ) { return ; } } } , this ) ; }
public org.ovirt.engine.core.authentication.Authenticator create ( org.ovirt.engine.core.extensions.mgr.Configuration config ) throws org.ovirt.engine.core.extensions.mgr.ConfigurationException { java.lang.String header = config.getString ( org.ovirt.engine.core.authentication.header.HeaderAuthenticatorFactory.HEADER_PARAMETER ) ; if ( header == null ) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException ( ( ( ( ( ( ( "The configuration file \"" + ( config.getFile ( ) . getAbsolutePath ( ) ) ) + "\" doesn\'t contain the " ) + "parameter \"" ) + ( config.getAbsoluteKey ( org.ovirt.engine.core.authentication.header.HeaderAuthenticatorFactory.HEADER_PARAMETER ) ) ) + "\" that specifies the name of " ) + "the header containing the remote user name." ) ) ; } return new org.ovirt.engine.core.authentication.header.HeaderAuthenticator ( header ) ; }
private void mockGetVmStatsCommand ( boolean mockSuccess ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; if ( mockSuccess ) { vdsReturnValue.setSucceeded ( true ) ; vdsReturnValue.setReturnValue ( createRunningVms ( ) . get ( org.ovirt.engine.core.vdsbroker.HostMonitoringTest.VM_1 ) ) ; } org.mockito.Mockito.when ( resourceManager.runVdsCommand ( org.mockito.Mockito.eq ( VDSCommandType.GetVmStats ) , ( ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase ) ( org.mockito.Mockito.anyObject ( ) ) ) ) ) . thenReturn ( vdsReturnValue ) ; }
public void testLogReturnLogsWhenLogLevelActiveAndNoExpandReturn ( ) throws java.lang.Exception { java.lang.String id = "" ; org.slf4j.Logger log = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.mockito.Mockito.when ( log.isInfoEnabled ( ) ) . thenReturn ( true ) ; org.ovirt.engine.core.utils.log.LoggedUtils.logReturn ( log , id , new org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedOverridingSubclassNoReturn ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito.verify ( log ) . info ( org.mockito.Matchers.eq ( LoggedUtils.EXIT_LOG_VOID ) , new java.lang.Object [ ] { org.mockito.Matchers.anyObject ( ) , org.mockito.Matchers.eq ( id ) } ) ; }
public static void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void reportNonOperationReason ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( org.ovirt.engine.core.bll.HandleVdsVersionCommand.getVdsId ( ) , reason , customLogValues ) ; runInternalAction ( ActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( org.ovirt.engine.core.bll.HandleVdsVersionCommand.getContext ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice stubVmDevice ( org.ovirt.engine.core.compat.Guid diskId , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = createVmDevice ( diskId , vmId ) ; org.mockito.Mockito.doReturn ( vmDevice ) . when ( command ) . getVmDeviceForVm ( ) ; return vmDevice ; }
private org.ovirt.engine.core.common.businessentities.VM createVmForTesting ( java.lang.String initrd , java.lang.String kernel ) { mockVm ( command ) ; command.getVm ( ) . setInitrdUrl ( initrd ) ; command.getVm ( ) . setKernelUrl ( kernel ) ; command.createVm ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = vmDAO.get ( command.getParameters ( ) . getVmId ( ) ) ; return vm ; }
public static void GetVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.GetVmConfigurationBySnapshotQueryParams ( snapshotSourceId ) , aQuery ) ; }
public void testAddLabelToNicAndValidateWhenUsingInvalidLabel ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; vdsNetworkInterface.setLabels ( new java.util.HashSet < java.lang.String > ( ) ) ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . addLabelToNicAndValidate ( "**uups!**" , new java.util.ArrayList < java.lang.Class < ? > > ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.IMPROPER_INTERFACE_IS_LABELED ) ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( ! ( isRngSupportedByCluster ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL ) ; } if ( ! ( getRngDevices ( ) . isEmpty ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_RNG_ALREADY_EXISTS ) ; } return true ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsListForDisk ( org.ovirt.engine.core.compat.Guid id , boolean includeVmsSnapshotAttachedTo ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = new java.util.ArrayList < > ( ) ; java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > > vms = getVmsWithPlugInfo ( id ) ; for ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > pair : vms ) { if ( includeVmsSnapshotAttachedTo || ( ( pair.getSecond ( ) . getSnapshotId ( ) ) == null ) ) { result.add ( pair.getFirst ( ) ) ; } } return result ; }
public void testExecuteQuery ( ) { java.lang.String vmName = org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getName ( ) ) . thenReturn ( vmName ) ; boolean result = org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextBoolean ( ) ; org.mockito.Mockito.doReturn ( result ) . when ( getQuery ( ) ) . isVmWithSameNameExistStatic ( vmName , null ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( result , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) , "Wrong result" ) ; }
private static void mapHostNetworkQosToEntity ( org.ovirt.engine.api.model.Qos model , org.ovirt.engine.core.common.businessentities.network.HostNetworkQos entity ) { if ( model.isSetOutboundAverageLinkshare ( ) ) { entity.setOutAverageLinkshare ( model.getOutboundAverageLinkshare ( ) ) ; } if ( model.isSetOutboundAverageUpperlimit ( ) ) { entity.setOutAverageUpperlimit ( model.getOutboundAverageUpperlimit ( ) ) ; } if ( model.isSetOutboundAverageRealtime ( ) ) { entity.setOutAverageRealtime ( model.getOutboundAverageRealtime ( ) ) ; } }
public void updateOptions ( boolean containsDisks ) { getCompulsoryActions ( ) . clear ( ) ; getOptionalActions ( ) . clear ( ) ; startProgress ( null ) ; org.ovirt.engine.ui.uicommonweb.UICommand addDiskAction = new org.ovirt.engine.ui.uicommonweb.UICommand ( "AddDisk" , this ) ; if ( ! containsDisks ) { addDiskAction.setTitle ( VmConfigureVirtualDisksAction ) ; getCompulsoryActions ( ) . add ( addDiskAction ) ; } else { addDiskAction.setTitle ( VmAddAnotherVirtualDiskAction ) ; getOptionalActions ( ) . add ( addDiskAction ) ; } stopProgress ( ) ; }
public void init ( ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Initializing Scheduling manager" ) ; loadPolicyUnits ( ) ; loadClusterPolicies ( ) ; loadExternalScheduler ( ) ; enableLoadBalancer ( ) ; enableHaReservationCheck ( ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Initialized Scheduling manager" ) ; }
protected void removeVmUsers ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.TagsVmMap > all = org.ovirt.engine.core.bll.VmCommand.getTagDao ( ) . getTagVmMapByVmIdAndDefaultTag ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.TagsVmMap tagVm : all ) { org.ovirt.engine.core.bll.VmCommand.getTagDao ( ) . detachVmFromTag ( tagVm.gettag_id ( ) , org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; } }
private java.lang.String getTypeRef ( org.ovirt.api.metamodel.concepts.Type type ) { if ( ( ( type instanceof org.ovirt.api.metamodel.concepts.StructType ) || ( type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType ) ) || ( type instanceof org.ovirt.api.metamodel.concepts.EnumType ) ) { return type.getName ( ) . toString ( ) ; } if ( type instanceof org.ovirt.api.metamodel.concepts.ListType ) { org.ovirt.api.metamodel.concepts.ListType listType = ( ( org.ovirt.api.metamodel.concepts.ListType ) ( type ) ) ; org.ovirt.api.metamodel.concepts.Type elementType = listType.getElementType ( ) ; return ( getTypeRef ( elementType ) ) + "[]" ; } return "" ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterHostUUIDGet ( ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterHostUUIDGet ( ) ; org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void getSpecParams ( ) { command.getParameters ( ) . setAction ( VmWatchdogAction.RESET ) ; command.getParameters ( ) . setModel ( vmWatchdogType ) ; java.util.HashMap < java.lang.String , java.lang.Object > specParams = command.getSpecParams ( ) ; org.junit.Assert.assertNotNull ( specParams ) ; org.junit.Assert.assertEquals ( "i6300esb" , specParams.get ( "model" ) ) ; org.junit.Assert.assertEquals ( "reset" , specParams.get ( "action" ) ) ; }
protected org.ovirt.engine.core.bll.ValidationResult validateVdsStatus ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) && ( ( vm.getRunOnVds ( ) ) != null ) ) && ( ( getVdsDynamic ( vm.getRunOnVds ( ) ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL , EngineMessage.VAR__HOST_STATUS__UP.toString ( ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static void IsTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , new org.ovirt.engine.core.common.queries.IsVmTemlateWithSameNameExistParameters ( name ) , aQuery ) ; }
public static void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
private boolean validateCanUpdateReadOnly ( ) { if ( ( ( updateReadOnlyRequested ( ) ) && ( ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ) && ( vmDeviceForVm.getIsPlugged ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; } return true ; }
private void updateFenceAgents ( ) { if ( ( getParameters ( ) . getFenceAgents ( ) ) != null ) { fenceAgentDao.removeByVdsId ( getVdsId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent : getParameters ( ) . getFenceAgents ( ) ) { agent.setHostId ( getVdsId ( ) ) ; fenceAgentDao.save ( agent ) ; } } }
private void updateActionAvailability ( ) { newCommand.setIsExecutionAllowed ( isExecutionAllowed ) ; getRemoveCommand ( ) . setIsExecutionAllowed ( ( ( ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItems ( ) . size ( ) ) > 0 ) ) && ( isExecutionAllowed ) ) ) ; }
public org.ovirt.engine.core.dal.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { java.lang.Integer cores = org.ovirt.engine.core.bll.VdsSelector.getEffectiveCpuCores ( vds ) ; if ( ( cores != null ) && ( ( getVm ( ) . getNumOfCpus ( ) ) > cores ) ) { sb.append ( "has less cores(" ) . append ( cores ) . append ( ") than " ) . append ( getVm ( ) . getNumOfCpus ( ) ) ; return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_CPUS ; } return null ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions ) { if ( ( ( session.getSlaveVolumeId ( ) ) == null ) || ( ( session.getSlaveNodeUuid ( ) ) == null ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE ) ; } } if ( ( ( snapshots ) == null ) || ( snapshots.isEmpty ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST , getGlusterVolumeName ( ) ) ; } return true ; }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters ( int timeout ) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds ( ) , getNetworksToConfigure ( ) , getRemovedNetworks ( ) , org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getBonds ( ) , getRemovedBondNames ( ) ) ; hostCmdParams.setRollbackOnFailure ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . rollbackOnFailure ( ) ) ; hostCmdParams.setConectivityTimeout ( timeout ) ; boolean hostNetworkQosSupported = org.ovirt.engine.core.common.FeatureSupported.hostNetworkQos ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds ( ) . getVdsGroupCompatibilityVersion ( ) ) ; hostCmdParams.setHostNetworkQosSupported ( hostNetworkQosSupported ) ; return hostCmdParams ; }
public void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Disks:" , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public org.ovirt.engine.core.bll.ValidationResult domainIsValidDestination ( ) { if ( storageDomain.getStorageDomainType ( ) . isIsoOrImportExportDomain ( ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void testAttachFailure ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpActionExpectations ( ActionType.AttachStorageConnectionToStorageDomain , org.ovirt.engine.core.common.action.AttachDetachStorageConnectionParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , false , false ) ; org.ovirt.engine.api.model.StorageConnection connection = new org.ovirt.engine.api.model.StorageConnection ( ) ; connection.setId ( GUIDS [ 3 ] . toString ( ) ) ; verifyBadRequest ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.collection.add ( connection ) ) ) ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getInverse ( org.ovirt.engine.core.common.businessentities.VdsStatic to ) { org.ovirt.engine.core.common.businessentities.VDS inverse = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; inverse.setId ( to.getId ( ) ) ; inverse.setVdsName ( to.getVdsName ( ) ) ; inverse.setHostName ( to.getHostName ( ) ) ; inverse.setVdsGroupId ( to.getVdsGroupId ( ) ) ; inverse.setPort ( to.getPort ( ) ) ; inverse.setVdsSpmPriority ( to.getVdsSpmPriority ( ) ) ; inverse.setConsoleAddress ( to.getConsoleAddress ( ) ) ; return inverse ; }
private void updateAdminStatus ( org.ovirt.engine.core.common.businessentities.Permissions perm ) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.AddPermissionCommand.getRoleDao ( ) . get ( perm.getrole_id ( ) ) ; if ( ( role.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.RoleType.ADMIN ) ) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.setIsAdminGUIFlag ( perm.getad_element_id ( ) , true ) ; } }
public void generate ( org.ovirt.api.metamodel.concepts.Model model ) throws java.io.IOException { buffer = javax.enterprise.inject.spi.CDI.current ( ) . select ( org.ovirt.sdk.ruby.RubyBuffer.class ) . get ( ) ; buffer.setFileName ( ( ( ( rubyNames.getModulePath ( ) ) + ( java.io.File.separator ) ) + "version" ) ) ; generateVersion ( ) ; try { buffer.write ( out ) ; } catch ( java.io.IOException exception ) { throw new java.lang.IllegalStateException ( "Error writing version file" , exception ) ; } }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment model = createIncompleteNetworkAttachment ( ) ; setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest.setUpBasicUriExpectations ( ) ) ; setUpVerifyHostExpectations ( ) ; control.replay ( ) ; try { collection.add ( model ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "NetworkAttachment" , "add" , getIncompleteFields ( ) ) ; } }
public void doPolling ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { org.ovirt.engine.core.bll.CommandBase < ? > rootCommand = commandCoordinatorUtil.retrieveCommand ( cmdId ) ; if ( ( childCommandsExist ( childCmdIds ) ) && ( evaluateHostUpgradeInternalCommandProgress ( childCmdIds , rootCommand ) ) ) { return ; } if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( getHostUpgradeInternalCmdId ( childCmdIds ) ) ) { evaluateMaintenanceHostCommandProgress ( childCmdIds , rootCommand ) ; } }
public boolean addMac ( java.lang.String mac ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock l = new org.ovirt.engine.core.utils.lock.AutoCloseableLock ( lockObj.writeLock ( ) ) ) { checkIfInitialized ( ) ; boolean added = macsStorage.useMac ( org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( mac ) ) ; logWhenMacPoolIsEmpty ( ) ; return added ; } }
public void versionDecreaseNoHostsOrNetwork ( ) { createCommandWithOlderVersion ( true , false ) ; setupCpu ( ) ; org.ovirt.engine.core.dao.StoragePoolDao storagePoolDao2 = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StoragePoolDao.class ) ; org.mockito.Mockito.when ( storagePoolDao2.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFS ( ) ) ; org.mockito.Mockito.doReturn ( storagePoolDao2 ) . when ( cmd ) . getStoragePoolDao ( ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
protected void mapVolumeGroupFcp ( org.ovirt.engine.api.model.StorageDomain model , org.ovirt.engine.api.model.StorageDomain entity ) { org.ovirt.engine.api.model.VolumeGroup vg = model.getStorage ( ) . getVolumeGroup ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun : getLunsByVgId ( vg.getId ( ) ) ) { org.ovirt.engine.api.model.LogicalUnit unit = map ( lun ) ; vg.getLogicalUnits ( ) . add ( unit ) ; } }
protected < T > T getEntity ( java.lang.Class < T > clz , org.ovirt.engine.core.common.interfaces.SearchType searchType , java.lang.String constraint ) { try { org.ovirt.engine.core.common.queries.QueryReturnValue result = runQuery ( QueryType.Search , createSearchParameters ( searchType , constraint ) ) ; if ( ! ( result.getSucceeded ( ) ) ) { backendFailure ( result.getExceptionString ( ) ) ; } return castQueryResultToEntity ( clz , result , constraint ) ; } catch ( java.lang.Exception e ) { return handleError ( clz , e , false ) ; } }
public void getGlusterVolumeGeoRepRecommendationViolations ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid masterVolumeId , org.ovirt.engine.core.compat.Guid slaveVolumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return returnValue == null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason > ( ) : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepNonEligibilityReason > ) ( returnValue ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNonEligibilityReasonsOfVolumeForGeoRepSession , new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeGeoRepEligibilityParameters ( masterVolumeId , slaveVolumeId ) , aQuery ) ; }
static org.ovirt.engine.api.model.Vm getModel ( int index ) { org.ovirt.engine.api.model.Vm model = new org.ovirt.engine.api.model.Vm ( ) ; model.setName ( NAMES [ index ] ) ; model.setDescription ( DESCRIPTIONS [ index ] ) ; model.setId ( GUIDS [ index ] . toString ( ) ) ; model.setCluster ( new org.ovirt.engine.core.common.businessentities.Cluster ( ) ) ; model.getCluster ( ) . setId ( GUIDS [ 2 ] . toString ( ) ) ; return model ; }
private void initFilter ( ) { filter = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.memory.sdfilters.StorageDomainSpaceRequirementsFilter ( memoryDisks ) ) ; org.mockito.Mockito.doNothing ( ) . when ( filter ) . updateDisksStorage ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.StorageDomain.class ) , org.mockito.ArgumentMatchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ; org.mockito.Mockito.doReturn ( storageDomainValidator ) . when ( filter ) . getStorageDomainValidator ( storageDomain ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { switch ( command.getName ( ) ) { case "OnRemove" : onRemove ( ) ; break ; case "OnRestore" : onRestore ( ) ; break ; case "RemoveVmTemplates" : removeTemplateBackup ( ) ; break ; case "onClone" : onClone ( ) ; break ; case "closeClone" : closeClone ( ) ; break ; case "multipleArchsOK" : multipleArchsOK ( ) ; break ; default : super . executeCommand ( command ) ; } }
public boolean canBeSelected ( ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( getEntity ( ) . getOs ( ) ) ; }
public static void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void isVirtioScsiEnabledDefaultedToTrue ( ) { mockOsRepository ( ) ; org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.VmManagementParametersBase > cmd = setupCanAddVmTests ( 0 , 0 ) ; org.mockito.Mockito.doReturn ( createVdsGroup ( ) ) . when ( cmd ) . getVdsGroup ( ) ; org.mockito.Mockito.when ( osRepository.getDiskInterfaces ( org.mockito.Matchers.any ( java.lang.Integer.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ) . thenReturn ( new java.util.ArrayList < > ( java.util.Arrays.asList ( "VirtIO_SCSI" ) ) ) ; org.junit.Assert.assertTrue ( "isVirtioScsiEnabled hasn't been defaulted to true on cluster >= 3.3." , cmd.isVirtioScsiEnabled ( ) ) ; }
protected boolean migrateVm ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.bll.job.ExecutionContext parentContext ) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters ( false , vm.getId ( ) ) ; parameters.setReason ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.MessageBundler.getMessage ( AuditLogType.MIGRATION_REASON_HOST_IN_MAINTENANCE ) ) ; return runInternalAction ( ActionType.MigrateVm , parameters , createMigrateVmContext ( parentContext , vm ) ) . getSucceeded ( ) ; }
protected void addCustomValuesStorage ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase , java.lang.String quotaName , double storageUsagePercentage , double storageRequestedPercentage ) { auditLogableBase.addCustomValue ( "QuotaName" , quotaName ) ; auditLogableBase.addCustomValue ( "CurrentStorage" , org.ovirt.engine.core.bll.quota.QuotaManagerAuditLogger.percentageFormatter.format ( storageUsagePercentage ) ) ; auditLogableBase.addCustomValue ( "Requested" , org.ovirt.engine.core.bll.quota.QuotaManagerAuditLogger.percentageFormatter.format ( storageRequestedPercentage ) ) ; }
protected void setUpEntityQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpEntityQueryExpectations ( VdcQueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , getEntityList ( ) ) ; } }
public void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } if ( ( ( org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getVdsGroup ( ) ) == null ) && ( ( org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getVmTemplate ( ) . getTemplateType ( ) ) != ( org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE ) ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY ) ; return false ; } return true ; }
protected void writeAdditionalContent ( com.google.gwt.core.ext.TreeLogger logger , com.google.gwt.core.ext.GeneratorContext context , com.google.gwt.editor.rebind.model.EditorModel model , com.google.gwt.user.rebind.SourceWriter sw ) throws com.google.gwt.core.ext.UnableToCompleteException { com.google.gwt.core.ext.typeinfo.TypeOracle typeOracle = context.getTypeOracle ( ) ; entityModelType = eraseType ( typeOracle.findType ( "org.ovirt.engine.ui.uicommonweb.models.EntityModel" ) ) ; listModelType = eraseType ( typeOracle.findType ( "org.ovirt.engine.ui.uicommonweb.models.ListModel" ) ) ; this . logger = logger ; this . model = model ; this . sw = sw ; logger.log ( Type.DEBUG , "Strating to write additional Driver code" ) ; writeListenerMap ( ) ; writeEventMap ( ) ; writeOwnerModels ( ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getParameters ( ) . getId ( ) ; if ( org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getCurrentUser ( ) . getId ( ) . equals ( id ) ) { addValidationMessage ( EngineMessage.USER_CANNOT_REMOVE_HIMSELF ) ; return false ; } org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUserDao.get ( id ) ; if ( dbUser == null ) { addValidationMessage ( EngineMessage.USER_MUST_EXIST_IN_DB ) ; return false ; } return true ; }
public void initTable ( org.ovirt.engine.ui.common.CommonApplicationConstants constants ) { this . constants = constants ; initTableColumns ( ) ; initTableOverhead ( ) ; handleRadioButtonClick ( null ) ; org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable.getModel ( ) . getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { disksViewRadioGroup.setDiskStorageType ( ( ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType ) ( getModel ( ) . getDiskViewType ( ) . getEntity ( ) ) ) ) ; } } ) ; }
public static boolean isCpuUpdatable ( java.lang.String cpuName , org.ovirt.engine.core.compat.Version ver ) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.get ( ver ) ; org.ovirt.engine.core.common.businessentities.ServerCpu server = null ; if ( cpuFlagsManager != null ) { server = cpuFlagsManager.getServerCpuByName ( cpuName ) ; } int serverLevel = ( server != null ) ? server.getLevel ( ) : 0 ; return serverLevel != 0 ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( "ForceLabel" . equals ( ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . propertyName ) ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel entity = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( sender ) ) ; force.setLabel ( entity.getForceLabel ( ) ) ; } }
private void periodicPauseLog ( org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity , long ts ) { if ( ts >= ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getLastPauseLogTime ( ) ) + ( getPauseLogInterval ( ) ) ) ) { log.info ( "Transfer was paused by {}. {}" , ( ( entity.getPhase ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM ) ? "system" : "user" ) , getTransferDescription ( ) ) ; resetPeriodicPauseLogTime ( ts ) ; } }
private void networkNotUsedByVmsTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { org.ovirt.engine.core.dao.VmDao vmDao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VmDao.class ) ; org.mockito.Mockito.when ( vmDao.getAllForNetwork ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vms ) ; org.mockito.Mockito.when ( dbFacade.getVmDao ( ) ) . thenReturn ( vmDao ) ; org.junit.Assert.assertThat ( validator.networkNotUsedByVms ( ) , matcher ) ; }
public void test2 ( ) throws java.lang.Exception { java.security.KeyStore.PrivateKeyEntry entry = org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecryptTest.getPrivateKeyEntry ( org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecryptTest.getKeyStore ( "PKCS12" , "key.p12" , "NoSoup4U" ) , "1" , "NoSoup4U" ) ; byte [ ] test = "testing 1 2 3 4" . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; java.lang.String blob = "eyJhcnRpZmFjdCI6IkVudmVsb3BlRW5jcnlwdERlY3J5cHQiLCJjaXBoZXJBbGdvIjoiQUVTL09GQi9QS0NTNVBhZGRpbmciLCJpdiI6Ilg0T05TVXg5NWRvTWdETXo5cjRDUmc9PSIsIndyYXBLZXlEaWdlc3QiOiJXNkdCbHFrRUlwbUx2aE94VFlybHpwV1JrQjg9Iiwid3JhcHBlZEtleSI6InFCRkZqU2t2K2szbnQxZFlUdS93LzFCTDdZbWIrMllZZ2JFYVFQVVhESDlVN0hmcHpXV2xLTGNyZHZQNzdFQWZpQWJqS0lIS0cydW1xR29xelNMM29qRTNFU1hESEZIYjc4bncwWWhTZkx3UFN5amxtTGtJQVU0N2x2S0dGVDFicmpKemQ1SU1FdnA2dytmZklvNUticWwwTmpVb2l0b1BGVTFKeHlIVVBrajBHRVV0MGNEaENuNU44bnd2K1VxS3NKZ00wY29PMy9hN25zZGxtWHprU0I2dDZhUFllRyt6YUx2UnVnSWFGTElueDExSkhlK3QvUDdZNXlJWkZyMkFIMVZNeFcyRy9oK1daczB1Z3BXRHlZWmpuLzh2aFRJN05CMmdqMUJQci9PS3VJNkFQWHcySmQ5eStwc3dhNlZtV1FVK3ZJeVNQWjV0YWcycXBtYjZ0Zz09IiwiZW5jcnlwdGVkQ29udGVudCI6IjVXWDdtamcyeHZTdzIzNzFGY2RYNENnSDIzdytLdVhjN1BMU2tnUVN1RzFyNWhMZXJjVldqc1NlTU1lUjV3aU5TWnM3Nmt0dTQ3V2NzVFFtVmFLcHl0amwvcWhseS84dDRlejROVXYyeStQYS9maWNEZFFGQmZzVDRCRjlYd3JlNlhSODl3ajFBNFRmL2Z4bDUvcGlFUCs3Sjh1R3JCUStMdzZFZDNyNDM5Y1ZOcDBVRVNDRmtVMCtEZzNHVis1WmRueHJET1hqTnRRUDlvdHg3aE5qcWhYNzk1TmFIdjZZTE9EdmxHemhSbXM9Iiwid3JhcEtleURpZ2VzdEFsZ28iOiJTSEEtMSIsIndyYXBBbGdvIjoiUlNBL0VDQi9QS0NTMVBhZGRpbmciLCJ2ZXJzaW9uIjoiMSJ9" ; org.junit.Assert.assertArrayEquals ( test , org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecrypt.decrypt ( entry , blob ) ) ; }
private boolean handleLibvirtSecrets ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid poolId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getLibvirtSecretDao ( ) . getAllByStoragePoolIdFilteredByActiveStorageDomains ( poolId ) ; if ( ( ! ( libvirtSecrets.isEmpty ( ) ) ) && ( ! ( registerLibvirtSecretsImpl ( vds , libvirtSecrets , false ) ) ) ) { org.ovirt.engine.core.bll.storage.CINDERStorageHelper.log.error ( "Failed to register libvirt secret on vds {}." , vds.getName ( ) ) ; setNonOperational ( cmdContext , vds.getId ( ) , NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE ) ; return false ; } return true ; }
public void setUpOsRepository ( ) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; injectorRule.bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.mockito.Mockito.when ( osRepository.getVmWatchdogTypes ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateWatchdogCommandTest.WATCHDOG_MODELS ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification ( org.ovirt.engine.core.common.businessentities.network.Bond bond ) { org.ovirt.engine.core.compat.Guid nicId = bond.getId ( ) ; java.lang.String nicName = bond.getName ( ) ; org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.BOND_REFERENCES_NICS_INCOHERENTLY ; return hostSetupNetworksValidatorHelper.validateCoherentIdentification ( bond.getName ( ) , nicId , nicName , message , existingInterfacesMap ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > cinderVolumeTypes = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > ) ( returnValue ) ) ; java.util.List < java.lang.String > volumeTypesNames = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType cinderVolumeType : cinderVolumeTypes ) { volumeTypesNames.add ( cinderVolumeType.getName ( ) ) ; } volumeTypesNames.add ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.noCinderVolumeType ( ) ) ; diskModel.getCinderVolumeType ( ) . setItems ( volumeTypesNames ) ; }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.StorageDomain selectedItem ) { driver.edit ( getDetailModel ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain entity = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( getDetailModel ( ) . getEntity ( ) ) ) ; if ( entity != null ) { totalSize.setValue ( entity.getTotalDiskSize ( ) ) ; availableSize.setValue ( entity.getAvailableDiskSize ( ) ) ; usedSize.setValue ( entity.getUsedDiskSize ( ) ) ; overAllocationRatio.setValue ( entity.getStorageDomainOverCommitPercent ( ) ) ; } formBuilder.update ( getDetailModel ( ) ) ; }
public void testSaveAndGetById ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot = dao.getByName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.VOLUME_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotDaoTest.NEW_SNAPSHOT_NAME ) ; org.junit.jupiter.api.Assertions.assertNull ( snapshot ) ; newSnapshot = insertTestSnapshot ( ) ; snapshot = dao.getById ( newSnapshot.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( snapshot ) ; org.junit.jupiter.api.Assertions.assertEquals ( newSnapshot , snapshot ) ; }
private void storageDomain_SelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain selectedStorage = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( getStorageDomain ( ) . getSelectedItem ( ) ) ) ; if ( selectedStorage != null ) { updateVolumeType ( selectedStorage.getStorageType ( ) ) ; } updateQuota ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) ) ; }
public static void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > GetNicTypeList ( org.ovirt.engine.core.common.businessentities.VmOsType osType , boolean hasDualmode ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmInterfaceType > ( java.util.Arrays.asList ( org.ovirt.engine.core.common.businessentities.VmInterfaceType.values ( ) ) ) ; list.remove ( VmInterfaceType.rtl8139_pv ) ; if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType ( osType ) ) { list.remove ( VmInterfaceType.e1000 ) ; if ( ( osType == ( org.ovirt.engine.core.common.businessentities.VmOsType.WindowsXP ) ) && hasDualmode ) { list.add ( VmInterfaceType.rtl8139_pv ) ; } } return list ; }
public void updateChangeConnectionType ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections iscsiConnection = createISCSIConnection ( "10.35.16.25" , StorageType.ISCSI , "iqn.2013-04.myhat.com:aaa-target1" , "3260" , "user1" , "mypassword123" ) ; parameters.setStorageServerConnection ( iscsiConnection ) ; org.mockito.Mockito.when ( storageConnDao.get ( iscsiConnection.getid ( ) ) ) . thenReturn ( oldNFSConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE ) ; }
protected void setUpGetEntityExpectations ( int times , boolean notFound ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( VdcQueryType.GetVdsGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getEntity ( 0 ) ) ) ; } }
public org.ovirt.engine.core.compat.NGuid getStorageDomainId ( ) { if ( ( storageDomainId ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > images = org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getDiskImageDao ( ) . getAllSnapshotsForVmSnapshot ( sourceSnapshotId ) ; storageDomainId = ( ! ( images.isEmpty ( ) ) ) ? images.get ( 0 ) . getStorageIds ( ) . get ( 0 ) : org.ovirt.engine.core.compat.Guid.Empty ; } return storageDomainId ; }
private boolean staticBootProtoPropertiesChanged ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingIface ) { return ( ( iface.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP ) ) && ( ( ( ! ( org.apache.commons.lang.ObjectUtils.equals ( iface.getAddress ( ) , existingIface.getAddress ( ) ) ) ) || ( ! ( org.apache.commons.lang.ObjectUtils.equals ( iface.getGateway ( ) , existingIface.getGateway ( ) ) ) ) ) || ( ! ( org.apache.commons.lang.ObjectUtils.equals ( iface.getSubnet ( ) , existingIface.getSubnet ( ) ) ) ) ) ; }
protected void setUpGetEntityExpectations ( int times , boolean notFound , org.ovirt.engine.api.model.StorageDomain entity ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( QueryType.GetStorageDomainById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : entity ) ) ; } }
public java.lang.String buildMetadataDictionaryForTemplate ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > metaDictionary ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > allTemplateImages = template.getDiskList ( ) ; java.lang.String templateMeta = generateVmTemplateMetadata ( template , allTemplateImages ) ; metaDictionary.put ( template.getId ( ) , new org.ovirt.engine.core.compat.KeyValuePairCompat ( templateMeta , allTemplateImages.stream ( ) . map ( BaseDisk :: getId ) . collect ( java.util.stream.Collectors.toList ( ) ) ) ) ; return templateMeta ; }
protected void cretaeVirtIODisk ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk.setImageId ( diskImageGuid ) ; disk.setDiskInterface ( DiskInterface.VirtIO ) ; disk.setActive ( true ) ; org.mockito.Mockito.doReturn ( diskDao ) . when ( command ) . getDiskDao ( ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( disk ) ; mockVmDevice ( true ) ; }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
private boolean releaseUsedHostDevices ( ) { if ( hostDeviceManager.checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm ( ) ) ) { try { hostDeviceManager.acquireHostDevicesLock ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm ( ) . getDedicatedVmForVds ( ) ) ; hostDeviceManager.freeVmHostDevices ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) ) ; } finally { hostDeviceManager.releaseHostDevicesLock ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm ( ) . getDedicatedVmForVds ( ) ) ; } return true ; } return false ; }
public void canDoActionFailedVMHasNotDisk ( ) throws java.lang.Exception { mockVmStatusUp ( ) ; org.mockito.Mockito.doReturn ( diskDao ) . when ( command ) . getDiskDao ( ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( null ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST.toString ( ) ) ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel1 = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( result.getState ( ) ) ) ; vmListModel1.getWindow ( ) . StopProgress ( ) ; vmListModel1.Cancel ( ) ; }
private void verifyModel ( org.ovirt.engine.api.model.Cdrom model ) { org.junit.jupiter.api.Assertions.assertEquals ( Guid.Empty.toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( model.isSetTemplate ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.TEMPLATE_ID.toString ( ) , model.getTemplate ( ) . getId ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( model.isSetFile ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendTemplateCdromsResourceTest.ISO_PATH , model.getFile ( ) . getId ( ) ) ; verifyLinks ( model ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { soundDeviceSupportMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ; }
public void onSuccess ( java.lang.Integer returnValue ) { defaultSpmPriority = returnValue ; if ( ( postponedSpmPriority ) != null ) { updateSpmPriority ( postponedSpmPriority ) ; } spmInitialized = true ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmTemplatesDisks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResourceTest.TEMPLATE_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ) ; control.replay ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private static void setDiskList ( org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.getDiskImageList ( ) ) { vmTemplate.getDiskList ( ) . add ( diskImage ) ; } java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImageTemplate = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.getDiskImageTempalteList ( ) ; vmTemplate.getDiskTemplateMap ( ) . putAll ( diskImageTemplate ) ; }
public void getVnicProfilesByNetworkId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid networkId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByNetworkId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( networkId ) , aQuery ) ; }
protected boolean acquireLock ( ) { org.ovirt.engine.core.bll.LockIdNameAttribute annotation = getClass ( ) . getAnnotation ( org.ovirt.engine.core.bll.LockIdNameAttribute.class ) ; boolean returnValue = true ; if ( annotation != null ) { isReleaseExecute = annotation.isReleaseAtEndOfExecute ( ) ; if ( ! ( annotation.isWait ( ) ) ) { returnValue = acquireLockInternal ( ) ; } else { acquireLockAndWait ( ) ; } } return returnValue ; }
public static long convert ( long size , org.ovirt.engine.ui.uicommonweb.models.SizeConverter.SizeUnit fromUnit , org.ovirt.engine.ui.uicommonweb.models.SizeConverter.SizeUnit toUnit ) { long fromType = fromUnit.getUnitWeight ( ) ; long toType = toUnit.getUnitWeight ( ) ; return ( ( long ) ( size * ( ( java.lang.Math.pow ( org.ovirt.engine.ui.uicommonweb.models.SizeConverter.CONVERT_FACTOR , fromType ) ) / ( java.lang.Math.pow ( org.ovirt.engine.ui.uicommonweb.models.SizeConverter.CONVERT_FACTOR , toType ) ) ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VmPayload getVmPayloadByDeviceType ( org.ovirt.engine.core.common.utils.VmDeviceType deviceType ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevices = org.ovirt.engine.core.bll.RunVmCommand.getVmDeviceDao ( ) . getVmDeviceByVmIdTypeAndDevice ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getId ( ) , VmDeviceGeneralType.DISK , deviceType.getName ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices ) { if ( ( vmDevice.getIsManaged ( ) ) && ( org.ovirt.engine.core.common.businessentities.VmPayload.isPayload ( vmDevice.getSpecParams ( ) ) ) ) { return new org.ovirt.engine.core.common.businessentities.VmPayload ( vmDevice ) ; } } return null ; }
public void testGetAll ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VdsSpmIdMap > result = dao.getAll ( FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VdsSpmIdMap mapping : result ) { org.junit.Assert.assertEquals ( FixturesTool.DATA_CENTER , mapping.getStoragePoolId ( ) ) ; } }
public void removeAllIllegalDisks ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.compat.Guid vmId ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : getDiskImageDao ( ) . getAllSnapshotsForVmSnapshot ( snapshotId ) ) { if ( ( diskImage.getImageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ) ) { org.ovirt.engine.core.bll.ImagesHandler.removeDiskImage ( diskImage , vmId ) ; } } }
public void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void testChangeClusterForbidden ( ) { prepareVmToPassValidate ( ) ; org.ovirt.engine.core.common.businessentities.Cluster newGroup = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; newGroup.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newGroup.setCompatibilityVersion ( Version.v3_6 ) ; vmStatic.setClusterId ( newGroup.getId ( ) ) ; org.mockito.Mockito.doReturn ( clusterDao ) . when ( command ) . getClusterDao ( ) ; org.junit.Assert.assertFalse ( "validate should have failed with can't change cluster." , command.validate ( ) ) ; assertValidateMessage ( EngineMessage.VM_CANNOT_UPDATE_CLUSTER ) ; }
public void testRemoveNotFound ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ) ; try { resource.remove ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( ( org.ovirt.engine.core.bll.UpdateUserProfileCommand.getUserProfile ( ) ) == null ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_PROFILE_NOT_EXIST ) ; } return true ; }
public void lunDiskValid ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = createVds ( ) ; setupForLun ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > luns = java.util.Collections.singletonList ( lunDisk.getLun ( ) ) ; org.mockito.Mockito.doReturn ( luns ) . when ( lunValidator ) . executeGetDeviceList ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.storage.StorageType.class ) ) ; org.junit.Assert.assertThat ( lunValidator.isLunDiskVisible ( lunDisk.getLun ( ) , vds ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.compat.KeyValuePairCompat ) ) { return false ; } org.ovirt.engine.core.compat.KeyValuePairCompat other = ( ( org.ovirt.engine.core.compat.KeyValuePairCompat ) ( obj ) ) ; return ( java.util.Objects.equals ( key , other.key ) ) && ( java.util.Objects.equals ( value , other.value ) ) ; }
private org.ovirt.engine.ui.uicommonweb.action.UiAction createSetupNetworksAction ( ) { final org.ovirt.engine.core.common.action.HostSetupNetworksParameters hostSetupNetworksParameters = createHostSetupNetworksParameters ( ) ; return new org.ovirt.engine.ui.uicommonweb.action.UiVdcAction ( org.ovirt.engine.core.common.action.VdcActionType.HostSetupNetworks , hostSetupNetworksParameters , this , true ) { @ java.lang.Override protected boolean shouldExecute ( ) { return ! ( hostSetupNetworksParameters.isEmptyRequest ( ) ) ; } } ; }
public org.ovirt.engine.core.bll.ValidationResult isISCSIConnectionAndDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { org.ovirt.engine.core.bll.ValidationResult validationResult = isSameStorageType ( storageDomain ) ; if ( ! ( validationResult.isValid ( ) ) ) { return validationResult ; } org.ovirt.engine.core.common.businessentities.storage.StorageType connectionStorageType = connection.getstorage_type ( ) ; org.ovirt.engine.core.common.businessentities.storage.StorageType storageDomainType = storageDomain.getStorageType ( ) ; if ( ( ! ( connectionStorageType.equals ( StorageType.ISCSI ) ) ) || ( ! ( storageDomainType.equals ( StorageType.ISCSI ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ACTION_IS_SUPPORTED_ONLY_FOR_ISCSI_DOMAINS ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected boolean checkIsConnectionFieldEmpty ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( connection.getconnection ( ) ) ) { java.lang.String fieldName = org.ovirt.engine.core.bll.storage.StorageServerConnectionCommandBase.getFieldName ( connection ) ; org.ovirt.engine.core.bll.storage.StorageServerConnectionCommandBase.addCanDoActionMessageVariable ( "fieldName" , fieldName ) ; addCanDoActionMessage ( VdcBllMessages.VALIDATION_STORAGE_CONNECTION_EMPTY_CONNECTION ) ; return true ; } return false ; }
private void saveSanStorage ( ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel ) ( getWindow ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel ) ( storageModel.getSelectedItem ( ) ) ) ; java.util.ArrayList < java.lang.String > usedLunsMessages = sanStorageModel.getUsedLunsMessages ( ) ; if ( usedLunsMessages.isEmpty ( ) ) { onSaveSanStorage ( ) ; } else { forceCreationWarning ( usedLunsMessages ) ; } }
public void getAllByVmWithConfiguration ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > snapshots = dao.getAllWithConfiguration ( FixturesTool.VM_RHEL5_POOL_50 ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , snapshots.size ( ) , "VM should have a snapshot" ) ; for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots ) { org.junit.jupiter.api.Assertions.assertEquals ( "test!" , snapshot.getVmConfiguration ( ) , "Snapshot should have configuration" ) ; org.junit.jupiter.api.Assertions.assertTrue ( snapshot.isVmConfigurationAvailable ( ) , "Snapshot should have configuration available" ) ; } }
public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( ) { return super . persistAsyncTaskPlaceHolder ( getActionType ( ) ) ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { PARENT_ID } , new java.util.LinkedList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ) ; control.replay ( ) ; try { collection.deprecatedRemove ( org.ovirt.engine.api.restapi.resource.NON_EXISTANT_GUID.toString ( ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
private java.lang.String getValueValues ( org.ovirt.api.metamodel.concepts.EnumType enumType ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; for ( org.ovirt.api.metamodel.concepts.EnumValue enumValue : enumType.getValues ( ) ) { builder.append ( "'" ) . append ( getValueText ( enumValue ) ) . append ( "', " ) ; } builder.deleteCharAt ( ( ( builder.length ( ) ) - 1 ) ) ; builder.deleteCharAt ( ( ( builder.length ( ) ) - 1 ) ) ; return builder.toString ( ) ; }
public boolean isCurrentlyVisible ( boolean advancedMode , boolean createInstanceMode ) { if ( isAlwaysHidden ( ) ) { return false ; } if ( ! ( isApplicationLevelVisible ( ) ) ) { return false ; } if ( ( ! advancedMode ) && ( isVisibleOnlyInAdvanced ( ) ) ) { return false ; } if ( createInstanceMode && ( isAdminOnly ( ) ) ) { return false ; } return true ; }
public org.ovirt.engine.core.bll.ValidationResult ipConfiguredForStaticBootProtocol ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration ( ) ; boolean failWhen = ( ( ipConfiguration != null ) && ( ( ipConfiguration.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP ) ) ) && ( unsetAddress ( ipConfiguration ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.NETWORK_ADDR_MANDATORY_IN_STATIC_IP ) . when ( failWhen ) ; }
public void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { stopProgress ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.RepoImage > repoImageList = new java.util.ArrayList < > ( ) ; if ( ( ( returnValue != null ) && ( ( returnValue.getReturnValue ( ) ) != null ) ) && ( returnValue.getSucceeded ( ) ) ) { repoImageList = returnValue.getReturnValue ( ) ; java.util.Collections.sort ( repoImageList , java.util.Comparator.comparing ( RepoImage :: getRepoImageId ) ) ; } setItems ( repoImageList ) ; setIsEmpty ( repoImageList.isEmpty ( ) ) ; }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getVdsStatic ( ) ) . when ( vdsStaticDao ) . get ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.serverId ) ; org.mockito.Mockito.doReturn ( getCluster ( true , Version.v4_1 ) ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
protected void saveDiskImageDynamic ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic ( ) ; diskDynamic.setId ( disk.getImageId ( ) ) ; diskDynamic.setactual_size ( disk.getActualSizeInBytes ( ) ) ; org.ovirt.engine.core.bll.ImportVmCommand.getDiskImageDynamicDao ( ) . save ( diskDynamic ) ; }
public java.lang.String getHostNameOrIP ( org.ovirt.engine.core.compat.Guid glusterHostUuid ) { java.lang.String hostName = null ; if ( glusterHostUuid != null ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterServer glusterServer = glusterServerDao.getByGlusterServerUuid ( glusterHostUuid ) ; if ( glusterServer != null ) { org.ovirt.engine.core.common.businessentities.VdsStatic vds = vdsStaticDao.get ( glusterServer.getId ( ) ) ; if ( vds != null ) { hostName = vds.getHostName ( ) ; } } } return hostName ; }
private org.ovirt.engine.core.bll.network.macpoolmanager.MacsStorage createMacsStorage ( java.util.Collection < org.apache.commons.lang.math.LongRange > rangesBoundaries ) { org.ovirt.engine.core.bll.network.macpoolmanager.MacsStorage macsStorage = new org.ovirt.engine.core.bll.network.macpoolmanager.MacsStorage ( allowDuplicates ) ; for ( org.apache.commons.lang.math.LongRange range : rangesBoundaries ) { macsStorage.addRange ( range.getMinimumLong ( ) , range.getMaximumLong ( ) ) ; } if ( macsStorage.availableMacExist ( ) ) { return macsStorage ; } else { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED ) ; } }
public void enableLoadBalancer ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Start scheduling to enable vds load balancer" ) ; org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class ) . scheduleAFixedDelayJob ( this , "performLoadBalancing" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Finished scheduling to enable vds load balancer" ) ; } }
protected void verifyAddDelegatedCorrectly ( org.ovirt.engine.core.common.businessentities.network.VmNic iface , org.mockito.verification.VerificationMode addMacVerification ) { org.mockito.Mockito.verify ( macPoolManager , addMacVerification ) . forceAddMac ( iface.getMacAddress ( ) ) ; org.mockito.Mockito.verify ( vmNicDao ) . save ( iface ) ; org.mockito.Mockito.verify ( vmNetworkStatisticsDAO ) . save ( iface.getStatistics ( ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Event model , int index ) { assertNotNull ( model ) ; assertEquals ( model.getId ( ) , java.lang.String.valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; assertEquals ( model.getSeverity ( ) , LogSeverity.ALERT.value ( ) ) ; assertEquals ( model.getDescription ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; assertEquals ( model.getOrigin ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; assertEquals ( model.getCustomId ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel ownerModel = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) ; java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . propertyName ; if ( "IsAvailable" . equals ( propName ) ) { warningPanel.setVisible ( ownerModel.getIsAvailable ( ) ) ; } }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
private void initSuspendSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { suspendSupport = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetSuspendSupport ) , callback ) ; }
public void getRoleActionGroupsByRoleId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid roleId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetRoleActionGroupsByRoleId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( roleId ) , aQuery ) ; }
public void setItems ( java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel > value ) { if ( ( items ) != value ) { ItemsChanging ( value , items ) ; items = value ; ItemsChanged ( ) ; getItemsChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Items" ) ) ; } }
private void addNetworksToPool ( int numberOfNetworks , boolean isManagement ) { for ( int i = 0 ; i < numberOfNetworks ; i ++ ) { final org.ovirt.engine.core.compat.Guid networkId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( networkId ) ; network.setId ( networkId ) ; allDcNetworks.add ( network ) ; org.mockito.Mockito.when ( managementNetworkUtil.isManagementNetwork ( networkId ) ) . thenReturn ( isManagement ) ; } org.mockito.Mockito.when ( networkDao.getAllForDataCenter ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( allDcNetworks ) ; }
public void testValidUpdateOfEditableFieldOnDownHost ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic src = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; src.setName ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.ovirt.engine.core.common.businessentities.VdsStatic dest = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; dest.setName ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; boolean updateIsValid = vdsHandler.isUpdateValid ( src , dest , VDSStatus.Down ) ; org.junit.jupiter.api.Assertions.assertTrue ( updateIsValid , "Update should be valid for different names in down status" ) ; }
protected void mockOsRepository ( ) { org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.ovirt.engine.core.bll.VmHandler.init ( ) ; org.mockito.Mockito.when ( osRepository.isWindows ( 0 ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( osRepository.isCpuSupported ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) , org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( true ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.setSearchType ( AdSearchType.MY_GROUPS ) ; getView ( ) . changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups ( false , true ) ; getModel ( ) . getSearchMyGroupsCommand ( ) . execute ( ) ; getView ( ) . userTypeChanged ( UserOrGroup.User , false ) ; model.setItems ( null ) ; getView ( ) . setLoadingState ( LoadingState.LOADING ) ; }
protected org.ovirt.engine.core.common.businessentities.DbUser getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.DbUser entity = new org.ovirt.engine.core.common.businessentities.DbUser ( ) ; entity.setId ( GUIDS [ index ] ) ; entity.setExternalId ( EXTERNAL_IDS [ index ] ) ; entity.setLoginName ( NAMES [ index ] ) ; entity.setGroupNames ( new java.util.HashSet < java.lang.String > ( java.util.Arrays.asList ( org.ovirt.engine.api.restapi.resource.BackendUsersResourceTest.GROUPS.split ( "," ) ) ) ) ; entity.setNamespace ( org.ovirt.engine.api.restapi.resource.BackendUsersResourceTest.NAMESPACE ) ; entity.setDomain ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; return entity ; }
public void testAttachSuccess ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpActionExpectations ( ActionType.AttachStorageConnectionToStorageDomain , org.ovirt.engine.core.common.action.AttachDetachStorageConnectionParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ; org.ovirt.engine.api.model.StorageConnection connection = new org.ovirt.engine.api.model.StorageConnection ( ) ; connection.setId ( GUIDS [ 3 ] . toString ( ) ) ; javax.ws.rs.core.Response response = collection.add ( connection ) ; assertEquals ( 200 , response.getStatus ( ) ) ; }
public void testUpdateNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( null ) ; try { org.ovirt.engine.api.model.Cdrom cdrom = getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO ) ; resource.update ( cdrom ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void teardownImage ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid newStorageDomainID , org.ovirt.engine.core.compat.Guid newImageGroupId , org.ovirt.engine.core.compat.Guid newImageId , org.ovirt.engine.core.compat.Guid vdsId ) { resourceManager.runVdsCommand ( VDSCommandType.TeardownImage , new org.ovirt.engine.core.common.vdscommands.ImageActionsVDSCommandParameters ( vdsId , storagePoolId , newStorageDomainID , newImageGroupId , newImageId ) ) ; }
private void createVMFromTemplate ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem ( ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.UICommand > commands = new java.util.ArrayList < > ( ) ; commands.add ( org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand ( "OnSaveVm" , this ) ) ; commands.add ( org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand ( "Cancel" , this ) ) ; setupNewVmModel ( new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ( new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior ( template ) , this ) , template.getVmType ( ) , getSystemTreeSelectedItem ( ) , commands ) ; }
protected org.ovirt.engine.core.common.businessentities.Tags createTag ( java.lang.String name , java.lang.String description ) { org.ovirt.engine.core.compat.Guid tagId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.Tags tag = new org.ovirt.engine.core.common.businessentities.Tags ( ) ; tag.setdescription ( description ) ; tag.settag_id ( tagId ) ; tag.settag_name ( name ) ; tag.settype ( TagsType.GeneralTag ) ; tag.setparent_id ( tagsDirector.getRootTag ( ) . gettag_id ( ) ) ; return tag ; }
public org.ovirt.engine.api.model.Template update ( org.ovirt.engine.api.model.Template incoming ) { validateEnums ( org.ovirt.engine.api.model.Template.class , incoming ) ; org.ovirt.engine.api.model.Template result = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class ) , VdcActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendTemplateResource.UpdateParametersProvider ( ) ) ; if ( result != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , result ) ; } return result ; }
public void unsubscribe ( org.ovirt.engine.core.common.businessentities.EventSubscriber subscriber ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "event_up_name" , subscriber.getEventUpName ( ) ) . addValue ( "notification_method" , subscriber.getEventNotificationMethod ( ) . getAsString ( ) ) . addValue ( "subscriber_id" , subscriber.getSubscriberId ( ) ) . addValue ( "tag_name" , subscriber.getTagName ( ) ) ; getCallsHandler ( ) . executeModification ( "Deleteevent_subscriber" , parameterSource ) ; }
public static void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getUpHostListByCluster ( aQuery , clusterName , null ) ; }
public void executeCommandWhenFailed ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand < org.ovirt.engine.core.common.action.gluster.GlusterHookParameters > ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertFalse ( cmd.getReturnValue ( ) . getSucceeded ( ) ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_HOOK_DISABLE_FAILED ) ; }
public static java.lang.String objectToJson ( java.lang.Object input , boolean prettyPrint ) throws java.io.IOException { org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper ( ) ; org.codehaus.jackson.JsonFactory factory = new org.codehaus.jackson.JsonFactory ( ) ; java.io.StringWriter writer = new java.io.StringWriter ( ) ; org.codehaus.jackson.JsonGenerator generator = factory.createJsonGenerator ( writer ) ; if ( prettyPrint ) { generator.useDefaultPrettyPrinter ( ) ; } mapper.writeValue ( generator , input ) ; return writer.toString ( ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.DbUser source ) { return ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( source.getDomain ( ) , target.getDomain ( ) ) ) && ( ( ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( target.getLoginName ( ) ) ) || ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( target.getLoginName ( ) , "*" ) ) ) || ( source.getLoginName ( ) . toLowerCase ( ) . startsWith ( target.getLoginName ( ) ) ) ) ; }
protected void mockVmDevice ( boolean plugged ) { vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice ( ) ; vmDevice.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( ) ) ; vmDevice.setIsPlugged ( plugged ) ; org.mockito.Mockito.doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDao ( ) ; org.mockito.Mockito.when ( vmDeviceDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VmDeviceId.class ) ) ) . thenReturn ( vmDevice ) ; }
private void addNonManagementNetworksToPool ( int numberOfNetworks ) { for ( int i = 0 ; i < numberOfNetworks ; i ++ ) { final org.ovirt.engine.core.compat.Guid networkId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( networkId ) ; network.setId ( networkId ) ; allDcNetworks.add ( network ) ; org.mockito.Mockito.when ( managementNetworkUtil.isManagementNetwork ( networkId ) ) . thenReturn ( false ) ; } org.mockito.Mockito.when ( networkDao.getAllForDataCenter ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( allDcNetworks ) ; }
protected void setUpGetSystemStatisticsExpectations ( ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue ( ) ; org.mockito.Mockito.when ( backend.runQuery ( org.mockito.Mockito.eq ( QueryType.GetSystemStatistics ) , queryParams ( ) ) ) . thenReturn ( queryResult ) ; queryResult.setSucceeded ( true ) ; queryResult.setReturnValue ( setUpStats ( ) ) ; }
protected boolean validate ( ) { if ( ( ( org.ovirt.engine.core.bll.gluster.RefreshGeoRepSessionsCommand.getParameters ( ) . getVolumeId ( ) ) == null ) || ( ( org.ovirt.engine.core.bll.gluster.RefreshGeoRepSessionsCommand.getGlusterVolume ( ) ) == null ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID ) ; return false ; } return super . validate ( ) ; }
public java.lang.Void runInTransaction ( ) { map.setstatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . updateStatus ( map.getId ( ) , map.getstatus ( ) ) ; if ( ( getStorageDomain ( ) . getstorage_domain_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) { calcStoragePoolStatusByDomainsStatus ( ) ; } return null ; }
void addSelectedItemChangeHandler ( ) { selectedItemChangeListener = new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ! ( sameEntity ( listModel.getSelectedItem ( ) , model ) ) ) { getView ( ) . setNotSelected ( model.IsVmUp ( ) ) ; } else { getView ( ) . setSelected ( ) ; } } } ; listModel.getSelectedItemChangedEvent ( ) . addListener ( selectedItemChangeListener ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendDeviceResource < org.ovirt.engine.api.model.Cdrom , org.ovirt.engine.api.model.Cdroms , org.ovirt.engine.core.common.businessentities.VM > resource = getNotFoundResource ( ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 , VMStatus.Down ) ; control.replay ( ) ; try { resource.update ( getUpdate ( ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) , aQuery ) ; }
protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity ( ) { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice ( ) ; device.setHostId ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID ) ; device.setDeviceName ( ( ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) + "___child" ) ) ; device.setParentDeviceName ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) ; device.setCapability ( "pci" ) ; device.setDriver ( "mock driver" ) ; return device ; }
private static void compose ( java.lang.StringBuilder builder , java.lang.String key , java.lang.String value ) { if ( ( builder.length ( ) ) > 0 ) { builder.append ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventKeyComposer.KEY_PARTS_DELIMITER ) ; } builder.append ( key ) . append ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventKeyComposer.NAME_VALUE_SEPARATOR ) . append ( value ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( PropertyChangedEventArgs.PROGRESS.equals ( args.propertyName ) ) { externalDiskPanel.clear ( ) ; if ( ( sanStorageModel.getProgress ( ) ) != null ) { externalDiskPanel.add ( progressContent ) ; } else { externalDiskPanel.add ( storageView ) ; } } }
public org.ovirt.engine.core.bll.ValidationResult validateNetworkExclusiveOnNics ( ) { java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType > > nicNameToNetworkTypesMap = createNicNameToNetworkTypesMap ( ) ; java.util.List < java.lang.String > violatedNics = findViolatedNics ( nicNameToNetworkTypesMap ) ; if ( violatedNics.isEmpty ( ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } else { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK , org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.VAR_NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK_LIST , violatedNics ) ) ; } }
public static void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { chainedCallback.onSuccess ( model , ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ; }
protected void executeIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand.log.info ( "-- executeIrsBrokerCommand: Attempting on storage pool '{}'" , org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand.getParameters ( ) . getStoragePoolId ( ) ) ; setReturnValue ( resourceManager.runVdsCommand ( VDSCommandType.HSMGetAllTasksInfo , new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetAllTasksInfoVDSCommand.getCurrentIrsProxy ( ) . getCurrentVdsId ( ) ) ) . getReturnValue ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters , org.ovirt.engine.core.common.scheduling.PerHostMessages messages ) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error ( "Policy unit '{}' filter is not implemented" , getPolicyUnit ( ) . getName ( ) ) ; return hosts ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "MACAddr" , iface.getMacAddress ( ) ) ; logable.addCustomValue ( "VmName" , iface.getVmName ( ) ) ; log ( logable , AuditLogType.MAC_ADDRESS_IS_IN_USE ) ; return null ; }
public static void GetDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected boolean checkQuotaValidationCommon ( org.ovirt.engine.core.common.businessentities.Quota quota , java.util.List < java.lang.String > messages ) { if ( quota == null ) { messages.add ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString ( ) ) ; return false ; } if ( ( ( ! ( checkQuotaNameExisting ( quota , messages ) ) ) || ( ! ( org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaStorageLimitation ( quota , messages ) ) ) ) || ( ! ( org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaClusterLimitation ( quota , messages ) ) ) ) { return false ; } return true ; }
protected org.ovirt.engine.api.model.HostNic postPopulate ( org.ovirt.engine.api.model.HostNic model ) { org.ovirt.engine.api.model.HostNic hostNIC = super . postPopulate ( model ) ; org.ovirt.engine.api.model.Qos qos = hostNIC.getQos ( ) ; qos.setType ( QosType.HOSTNETWORK ) ; qos.setName ( null ) ; qos.setDataCenter ( null ) ; model.setBootProtocol ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.BootProtocol.class , BootProtocol.AUTOCONF ) ) ; return hostNIC ; }
public void testRemove ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.VM_ID } , getVm ( ) ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVm , org.ovirt.engine.core.common.action.VmManagementParametersBase.class , new java.lang.String [ ] { "VmStaticData.IsoPath" } , new java.lang.Object [ ] { null } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveCluster , org.ovirt.engine.core.common.action.ClusterParametersBase.class , new java.lang.String [ ] { "ClusterId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
public org.ovirt.engine.api.model.AffinityLabel update ( org.ovirt.engine.api.model.AffinityLabel incoming ) { org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > labelResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.QueryType.GetLabelById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ; org.ovirt.engine.core.common.businessentities.Label entity = getEntity ( labelResolver , true ) ; org.ovirt.engine.api.model.AffinityLabel label = performUpdate ( incoming , entity , map ( entity ) , labelResolver , ActionType.UpdateLabel , new org.ovirt.engine.api.restapi.resource.BackendAffinityLabelResource.UpdateParametersProvider ( ) ) ; return label ; }
public void getGlusterVolumeSnapshotsForVolume ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotsByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
private void logHostFailToRespond ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex , long timeoutToFence ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( ( "Server failed to respond, vds_id='{}', vds_name='{}', vm_count={}, " + "spm_status='{}', non-responsive_timeout (seconds)={}, error: {}" ) , cachedVds.getId ( ) , cachedVds.getName ( ) , cachedVds.getVmCount ( ) , cachedVds.getSpmStatus ( ) , java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds ( timeoutToFence ) , ex.getMessage ( ) ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ; logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( cachedVds.getId ( ) ) ; logable.updateCallStackFromThrowable ( ex ) ; auditLogDirector.log ( logable , AuditLogType.VDS_FAILURE ) ; }
public void validateFailsOnPassDiscardSupport ( ) { createParameters ( ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.ovirt.engine.core.common.businessentities.StorageDomain srcSd = initStorageDomain ( srcStorageId ) ; srcSd.setStatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstSd = initStorageDomain ( dstStorageId ) ; dstSd.setStatus ( StorageDomainStatus.Active ) ; org.mockito.Mockito.when ( diskVmElementValidator.isPassDiscardSupported ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ; }
public org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel , org.ovirt.engine.ui.uicommonweb.models.vms.VmSessionsModel > getVmSessionsProvider ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider < org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel , org.ovirt.engine.ui.uicommonweb.models.vms.VmSessionsModel > ( ginjector , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.class , org.ovirt.engine.ui.uicommonweb.models.vms.VmSessionsModel.class ) ; }
public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setBonds ( java.util.Collections.singletonList ( bond ) ) ; doTestValidateModifiedBondSlaves ( params , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.Network > emptyList ( ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
private void clusterHasVds ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setStatus ( VDSStatus.Up ) ; vds.setSupportedClusterLevels ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1.toString ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; vdsList.add ( vds ) ; org.mockito.Mockito.when ( vdsDAO.getAllForVdsGroup ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vdsList ) ; }
public void subscribe ( org.ovirt.engine.core.common.businessentities.event_subscriber subscriber ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "event_up_name" , subscriber.getevent_up_name ( ) ) . addValue ( "notification_method" , subscriber.getevent_notification_method ( ) . getAsString ( ) ) . addValue ( "method_address" , subscriber.getmethod_address ( ) ) . addValue ( "subscriber_id" , subscriber.getsubscriber_id ( ) ) . addValue ( "tag_name" , subscriber.gettag_name ( ) ) ; getCallsHandler ( ) . executeModification ( "Insertevent_subscriber" , parameterSource ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc updateVmPolicy ( java.util.Map params ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.updateVmPolicy" ) . withParameter ( "params" , params ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void render ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.resources.client.ImageResource value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( value != null ) { sb.append ( org.ovirt.engine.ui.common.widget.table.cell.StyledImageResourceCell.template.imageContainerWithStyleClass ( style , styleClass , com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( value ) . getHTML ( ) ) ) ) ; } }
private void initCache ( ) { if ( ( fenceOptionMapping ) == null ) { org.ovirt.engine.core.utils.pm.VdsFenceOptions.fenceAgentInstanceOptions = new java.util.HashMap < > ( ) ; fenceOptionMapping = new java.util.HashMap < > ( ) ; org.ovirt.engine.core.utils.pm.VdsFenceOptions.fenceOptionTypes = new java.util.HashMap < > ( ) ; org.ovirt.engine.core.utils.pm.VdsFenceOptions.fenceSpecialParams = new java.util.HashSet < > ( ) ; cacheFenceAgentsOptionMapping ( ) ; cacheFenceAgentsOptionTypes ( ) ; } }
public void testMacPoolExistsEntityDoesExist ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( macPoolValidator.macPoolExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ) ; control.replay ( ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void setup ( ) { mockConfigRule.mockConfigValue ( ConfigValues.MaxVdsNameLength , org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE ) ; mockConfigRule.mockConfigValue ( ConfigValues.EncryptHostCommunication , java.lang.Boolean.TRUE ) ; org.mockito.Mockito.when ( dbFacade.getClusterDao ( ) ) . thenReturn ( clusterDao ) ; validator = new org.ovirt.engine.core.bll.validator.HostValidator ( dbFacade , host , hostedEngineHelper ) ; }
public static org.ovirt.engine.core.common.businessentities.DiskInterface GetDefaultDiskInterface ( org.ovirt.engine.core.common.businessentities.VmOsType osType , java.util.List < org.ovirt.engine.core.common.businessentities.Disk > disks ) { return osType == ( org.ovirt.engine.core.common.businessentities.VmOsType.WindowsXP ) ? org.ovirt.engine.core.common.businessentities.DiskInterface.IDE : ( disks != null ) && ( ( disks.size ( ) ) > 0 ) ? disks.get ( 0 ) . getDiskInterface ( ) : org.ovirt.engine.core.common.businessentities.DiskInterface.VirtIO ; }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
public void getAllErrata ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Erratum > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetErrataForEngine , new org.ovirt.engine.core.common.queries.GetErrataCountsParameters ( ) , aQuery ) ; }
private void addVmToPool ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.AddVmToPoolParameters parameters = new org.ovirt.engine.core.common.action.AddVmToPoolParameters ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getPoolId ( ) , vmStatic.getId ( ) ) ; parameters.setShouldBeLogged ( false ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext ( VdcActionType.AddVmToPool , parameters ) ; setSucceeded ( result.getSucceeded ( ) ) ; org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.addVmPermission ( ) ; }
private static void convertAAAProfilesResult ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , final boolean passwordBasedOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.List < java.lang.String > results = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.aaa.ProfileEntry profileEntry : ( ( java.util.Collection < org.ovirt.engine.core.aaa.ProfileEntry > ) ( source ) ) ) { if ( ( ! passwordBasedOnly ) || ( profileEntry.getSupportsPasswordAuthenication ( ) ) ) { results.add ( profileEntry.getProfile ( ) ) ; } } return results ; } } ; }
public static java.util.stream.Stream < org.junit.jupiter.params.provider.Arguments > namesParams ( ) { return java.util.stream.Stream.of ( org.junit.jupiter.params.provider.Arguments.of ( "a.a.a.a" , false , false ) , org.junit.jupiter.params.provider.Arguments.of ( "253.0.0.32/26" , true , false ) , org.junit.jupiter.params.provider.Arguments.of ( "255.255.255.255/32" , true , true ) ) ; }
public static void GetTemplateListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplatesByStoragePoolId , new org.ovirt.engine.core.common.queries.GetVmTemplatesByStoragePoolIdParameters ( dataCenterId ) , aQuery ) ; }
protected org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel createModel ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior ) { final org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.ui.uicommonweb.models.vms.CLUSTER_VERSION ) ; org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel ( behavior ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSGroup getSelectedCluster ( ) { return cluster ; } } ; mockAsyncDataProvider ( model ) ; return model ; }
protected < T > T getConfigurationValueDefault ( org.ovirt.engine.core.common.queries.ConfigurationValues config ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( config , org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion ) ) ; if ( result.getSucceeded ( ) ) { return ( ( T ) ( result.getReturnValue ( ) ) ) ; } return null ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQuery ( org.ovirt.engine.core.common.queries.VdcQueryType search , org.ovirt.engine.core.common.queries.VdcQueryParametersBase searchParameters ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Server: RunQuery invoked!" ) ; debugQuery ( search , searchParameters ) ; searchParameters.setSessionId ( getEngineSessionId ( ) ) ; if ( ( searchParameters.getCorrelationId ( ) ) == null ) { searchParameters.setCorrelationId ( org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId ( ) ) ; } return getBackend ( ) . runQuery ( search , searchParameters ) ; }
public void testSetDetectEmulatedMachine ( ) { boolean preUpdate = existingCluster.isDetectEmulatedMachine ( ) ; boolean updateValue = false ; org.junit.jupiter.api.Assertions.assertNotEquals ( updateValue , preUpdate ) ; dao.setEmulatedMachine ( existingCluster.getId ( ) , existingCluster.getEmulatedMachine ( ) , updateValue ) ; org.junit.jupiter.api.Assertions.assertEquals ( updateValue , dao.get ( existingCluster.getId ( ) ) . isDetectEmulatedMachine ( ) ) ; }
private static java.lang.String getUnsafeInterrupts ( org.ovirt.engine.core.common.utils.CpuVendor cpuVendor , boolean unsafeInterrupts ) { if ( ! unsafeInterrupts ) { return "" ; } switch ( cpuVendor ) { case AMD : case INTEL : return "vfio_iommu_type1.allow_unsafe_interrupts=1 " ; case IBM : return "" ; default : throw new java.lang.RuntimeException ( ( "Unknown CpuType: " + cpuVendor ) ) ; } }
void transmitOperation ( final org.ovirt.engine.ui.frontend.communication.VdcOperation < ? , ? > operation ) { if ( operation.isAction ( ) ) { runAction ( operation ) ; } else { if ( operation.isPublic ( ) ) { runPublicQuery ( operation ) ; } else { runQuery ( operation ) ; } } }
protected org.ovirt.engine.core.compat.Guid getHostId ( org.ovirt.engine.api.model.Host host ) { return host.isSetId ( ) ? asGuid ( host.getId ( ) ) : getEntity ( org.ovirt.engine.core.common.businessentities.VDS.class , VdcQueryType.GetVdsByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( host.getName ( ) ) , host.getName ( ) ) . getId ( ) ; }
void initialize ( ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource ( ) ) { if ( initialized ) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.log.error ( "Trying to initialize multiple times." ) ; return ; } final java.util.List < org.ovirt.engine.core.common.businessentities.MacPool > macPools = macPoolDao.getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.MacPool macPool : macPools ) { initializeMacPool ( macPool ) ; } initialized = true ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.log.info ( "Successfully initialized" ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.log.error ( "Error initializing: {}" , e.getMessage ( ) ) ; throw e ; } }
protected static java.util.Set < org.ovirt.engine.core.common.businessentities.storage.BaseDisk > getDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.BaseDisk > diskMap = new java.util.HashMap < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk diskImage : diskImages ) { diskMap.put ( diskImage.getId ( ) , diskImage ) ; } return new java.util.HashSet ( diskMap.values ( ) ) ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void getGlusterVolumeSnapshotsForVolume ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotsByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
public void testValidRemovedBondsWhenReferencedInterfaceIsNotBond ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface notABond = createNic ( "nicName" ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . setParams ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder ( ) . addRemovedBonds ( notABond.getId ( ) ) ) . addExistingInterfaces ( java.util.Collections.singletonList ( notABond ) ) . build ( ) ; final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_IS_NOT_BOND ; org.hamcrest.MatcherAssert.assertThat ( validator.validRemovedBonds ( java.util.Collections.emptyList ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , notABond.getName ( ) ) ) ) ; }
public void testRunningVmSerialization ( ) throws java.lang.Exception { org.ovirt.optimizer.setup.JacksonContextResolver contextResolver = new org.ovirt.optimizer.setup.JacksonContextResolver ( ) ; org.codehaus.jackson.map.ObjectMapper mapper = contextResolver.getContext ( org.ovirt.engine.sdk.decorators.Host.class ) ; org.ovirt.optimizer.solver.facts.RunningVm original = new org.ovirt.optimizer.solver.facts.RunningVm ( "test" ) ; org.ovirt.optimizer.solver.facts.RunningVm other = mapper.reader ( ) . withType ( org.ovirt.optimizer.solver.facts.RunningVm.class ) . readValue ( mapper.writeValueAsString ( original ) ) ; org.junit.Assert.assertEquals ( original.getId ( ) , other.getId ( ) ) ; }
public void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn < org.ovirt.engine.core.common.businessentities.storage.Disk > getSnapshotSizeColumn ( java.lang.String sortBy ) { org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn < org.ovirt.engine.core.common.businessentities.storage.Disk > column = new org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) { @ java.lang.Override protected java.lang.Long getRawValue ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { return ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( object ) ) . getActualSizeInBytes ( ) ; } } ; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable ( column , sortBy ) ; }
protected static org.ovirt.engine.core.common.businessentities.VM buildVmOnNewTemplate ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.common.businessentities.VM tempVar = new org.ovirt.engine.core.common.businessentities.VM ( ) ; tempVar.setId ( vm.getId ( ) ) ; org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build ( model , tempVar.getStaticData ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonUnitToVmBaseBuilder < org.ovirt.engine.core.common.businessentities.VmStatic > ( ) ) ; org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build ( vm.getStaticData ( ) , tempVar.getStaticData ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.KernelParamsVmBaseToVmBaseBuilder ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.UsbPolicyVmBaseToVmBaseBuilder ( ) ) ; return tempVar ; }
private static void mapNetworkQosToModel ( org.ovirt.engine.core.common.businessentities.qos.QosBase entity , org.ovirt.engine.api.model.Qos model ) { org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQos = org.ovirt.engine.api.restapi.types.QosMapper.verifyAndCast ( entity , org.ovirt.engine.core.common.businessentities.network.NetworkQoS.class ) ; if ( networkQos != null ) { model.setInboundAverage ( networkQos.getInboundAverage ( ) ) ; model.setInboundPeak ( networkQos.getInboundPeak ( ) ) ; model.setInboundBurst ( networkQos.getInboundBurst ( ) ) ; model.setOutboundAverage ( networkQos.getOutboundAverage ( ) ) ; model.setOutboundPeak ( networkQos.getOutboundPeak ( ) ) ; model.setOutboundBurst ( networkQos.getOutboundBurst ( ) ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.api.extensions.ExtMap ) ) { return false ; } org.ovirt.engine.api.extensions.ExtMap other = ( ( org.ovirt.engine.api.extensions.ExtMap ) ( obj ) ) ; return java.util.Objects.equals ( map , other.map ) ; }
public void insertNewVariable ( ) { org.ovirt.engine.core.common.ExternalVariable newVar = new org.ovirt.engine.core.common.ExternalVariable ( ) ; newVar.setName ( "new-var" ) ; newVar.setValue ( "123456" ) ; newVar.setUpdateDate ( new java.util.Date ( ) ) ; dao.save ( newVar ) ; org.ovirt.engine.core.common.ExternalVariable found = dao.get ( newVar.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( found ) ; org.junit.jupiter.api.Assertions.assertEquals ( newVar , found ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData ) { java.lang.String problem ; if ( ( registerVmData.getError ( ) ) != null ) { problem = registerVmData.getError ( ) ; } else { problem = registerVmData.getWarning ( ) ; } return problem == null ? null : new com.google.gwt.safehtml.shared.SafeHtmlBuilder ( ) . appendEscapedLines ( problem ) . toSafeHtml ( ) ; }
public static void getGlusterSwiftServerServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterServerServicesByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
private void stpTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , boolean vmNetwork , boolean stp ) { org.mockito.Mockito.when ( network.isVmNetwork ( ) ) . thenReturn ( vmNetwork ) ; org.mockito.Mockito.when ( network.getStp ( ) ) . thenReturn ( stp ) ; org.junit.Assert.assertThat ( validator.stpForVmNetworkOnly ( ) , matcher ) ; }
public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { org.ovirt.engine.core.compat.Guid retValue = org.ovirt.engine.core.compat.Guid.Empty ; try { org.ovirt.engine.core.common.businessentities.AsyncTasks task = createAsyncTask ( new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo ( ) , parentCommand ) ; retValue = task.getTaskId ( ) ; org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB ( task , null , org.ovirt.engine.core.bll.CommandBase.EMPTY_GUID_ARRAY ) ; } catch ( java.lang.RuntimeException ex ) { log.errorFormat ( "Error during persistAsyncTaskPlaceHolders for command: {0}. Exception {1}" , getClass ( ) . getName ( ) , ex ) ; } return retValue ; }
protected void setGetVdsQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setVdsGroupId ( GUIDS [ 0 ] ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , vds ) ; } }
public void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; getUpHostListByCluster ( aQuery , clusterName , null ) ; }
public void canRunVmDuringInit ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( runVmValidator ) . isVmDuringInitiating ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.vmDuringInitialization ( vm ) , false , VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING ) ; }
public void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "Cluster: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
public void onFailure ( final org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > operation , final java.lang.Throwable caught ) { if ( ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute runAction: " + caught ) , caught ) ; failureEventHandler ( caught ) ; org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult ( actionType , parameters , null , state ) ; if ( callback != null ) { callback.executed ( f ) ; } }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getBroker ( ) . glusterVolumeSet ( org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getParameters ( ) . getVolumeOption ( ) . getKey ( ) , org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.getParameters ( ) . getVolumeOption ( ) . getValue ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.SetGlusterVolumeOptionVDSCommand.proceedProxyReturnValue ( ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > generateDisksList ( int size ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < size ; ++ i ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = org.ovirt.engine.core.bll.AddVmCommandTest.createDiskImage ( org.ovirt.engine.core.bll.AddVmCommandTest.REQUIRED_DISK_SIZE_GB ) ; disksList.add ( diskImage ) ; } return disksList ; }
public static void GetNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.GetAllDisksByVmIdParameters ( vmId ) , aQuery ) ; }
private static void addEventNotificationEntry ( org.ovirt.engine.core.common.EventNotificationEntity entity , org.ovirt.engine.core.common.AuditLogType auditLogType ) { java.util.HashSet < org.ovirt.engine.core.common.AuditLogType > entry = org.ovirt.engine.core.common.VdcEventNotificationUtils.eventNotificationTypeMap.get ( entity ) ; if ( entry == null ) { entry = new java.util.HashSet < > ( ) ; org.ovirt.engine.core.common.VdcEventNotificationUtils.eventNotificationTypeMap.put ( entity , entry ) ; } entry.add ( auditLogType ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( org.ovirt.engine.core.bll.network.host.UpdateNetworkAttachmentCommand.getParameters ( ) . getVdsId ( ) ) ; params.getNetworkAttachments ( ) . add ( org.ovirt.engine.core.bll.network.host.UpdateNetworkAttachmentCommand.getParameters ( ) . getNetworkAttachment ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction ( ActionType.HostSetupNetworks , params ) ; propagateFailure ( returnValue ) ; setSucceeded ( returnValue.getSucceeded ( ) ) ; }
protected void beforeCommandExecuted ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . beforeCommandExecuted ( command ) ; if ( command == ( model.getDefaultCommand ( ) ) ) { removeListeners ( model ) ; getView ( ) . flushToPrivateModel ( ) ; org.ovirt.engine.ui.userportal.section.main.presenter.popup.console.ConsoleModelChangedEvent.fire ( getEventBus ( ) , ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel ) ( model.getModel ( ) . getSelectedItem ( ) ) ) ) ; } }
protected void endSuccessfully ( ) { setVmTemplateId ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getVmTemplateId ( ) ) ; setVmId ( getVmIdFromImageParameters ( ) ) ; for ( org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getImagesParameters ( ) ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . EndAction ( VdcActionType.CreateImageTemplate , p ) ; } if ( ( reloadVmTemplateFromDB ( ) ) != null ) { endDefaultOperations ( ) ; } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded ( true ) ; }
private long getSwapUsed ( org.ovirt.engine.core.common.businessentities.VdsStatistics s ) { if ( s == null ) { return 0 ; } else { if ( ( s.getSwapTotal ( ) ) == null ) { return 0 ; } else { if ( ( s.getSwapFree ( ) ) == null ) { return s.getSwapTotal ( ) ; } else { return ( s.getSwapTotal ( ) ) - ( s.getSwapFree ( ) ) ; } } } }
protected void connectAllHostToPoolAndDomain ( final org.ovirt.engine.core.common.businessentities.storage_domains masterDomain ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = org.ovirt.engine.core.bll.storage.RemoveStoragePoolCommand.getAllRunningVdssInPool ( ) ; final org.ovirt.engine.core.common.businessentities.storage_pool storagePool = org.ovirt.engine.core.bll.storage.RemoveStoragePoolCommand.getStoragePool ( ) ; org.ovirt.engine.core.utils.SyncronizeNumberOfAsyncOperations sync = new org.ovirt.engine.core.utils.SyncronizeNumberOfAsyncOperations ( vdsList.size ( ) , null , new org.ovirt.engine.core.bll.storage.ActivateDeactivateSingleAsyncOperationFactory ( ) { @ java.lang.Override public org.ovirt.engine.core.utils.ISingleAsyncOperation createSingleAsyncOperation ( ) { return new org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( vdsList ) ) , masterDomain , storagePool ) ; } @ java.lang.Override public void initialize ( java.util.ArrayList parameters ) { } } ) ; sync.Execute ( ) ; }
protected boolean isBalloonEnabled ( ) { java.lang.Boolean balloonEnabled = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isBalloonEnabled ( ) ; return balloonEnabled != null ? balloonEnabled : osRepository.isBalloonEnabled ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getOsId ( ) , org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ; }
public void canRunVmFailVmRunning ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setStatus ( VMStatus.Up ) ; org.mockito.Mockito.doReturn ( false ) . when ( runVmValidator ) . isVmDuringInitiating ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.vmDuringInitialization ( vm ) , false , VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING ) ; }
private org.ovirt.engine.core.common.businessentities.VDS makeTestVds ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.VDS newVdsData = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; newVdsData.setHostName ( "BUZZ" ) ; newVdsData.setSshPort ( 22 ) ; newVdsData.setSshUsername ( "root" ) ; newVdsData.setSshKeyFingerprint ( "1234" ) ; newVdsData.setVdsName ( "BAR" ) ; newVdsData.setVdsGroupCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( "1.2.3" ) ) ; newVdsData.setVdsGroupId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newVdsData.setId ( vdsId ) ; return newVdsData ; }
public java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > findUsers ( java.util.List < java.lang.String > ids ) { java.util.List < org.ovirt.engine.core.compat.Guid > guids = new java.util.ArrayList < > ( ) ; for ( java.lang.String id : ids ) { guids.add ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( id ) ) ; } org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction ( AdActionType.GetAdUserByUserIdList , new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByUserIdListParameters ( getName ( ) , guids , true ) ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > ldapUsers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > ) ( ldapResult.getReturnValue ( ) ) ) ; return mapUsers ( ldapUsers ) ; }
public void getUnusedBricksFromServer ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > > asyncQuery , org.ovirt.engine.core.compat.Guid hostId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetUnusedGlusterBricks , parameters , asyncQuery ) ; }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getBroker ( ) . connectStoragePool ( org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getvds_spm_id ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getMasterDomainId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getMasterVersion ( ) ) ; proceedProxyReturnValue ( ) ; }
private boolean stopSuspendedVm ( ) { org.ovirt.engine.core.bll.StopVmCommandBase.setVm ( null ) ; final org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getStatus ( ) ; if ( vmStatus == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { return false ; } updateVmStatus ( VMStatus.ImageLocked ) ; if ( ! ( removeHibernationDisks ( ) ) ) { updateVmStatus ( vmStatus ) ; return false ; } return true ; }
protected void configure ( ) { bind ( org.ovirt.engine.ui.uicommonweb.models.providers.ProviderListModel.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.providers.ProviderGeneralModel.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.uicommonweb.models.providers.ProviderNetworkListModel.class ) . in ( com.google.inject.Singleton.class ) ; bind ( new com.google.inject.TypeLiteral < org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.providers.ProviderListModel , org.ovirt.engine.ui.uicommonweb.models.providers.ProviderGeneralModel > > ( ) { } ) . to ( new com.google.inject.TypeLiteral < org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider < org.ovirt.engine.ui.uicommonweb.models.providers.ProviderListModel , org.ovirt.engine.ui.uicommonweb.models.providers.ProviderGeneralModel > > ( ) { } ) . in ( com.google.inject.Singleton.class ) ; }
public java.lang.String convertFieldEnumValueToActualValue ( java.lang.String fieldValue ) { for ( java.util.Map.Entry < java.lang.Integer , java.lang.String > e : map.entrySet ( ) ) { if ( fieldValue.equalsIgnoreCase ( e.getValue ( ) ) ) { return e.getKey ( ) . toString ( ) ; } } return "" ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder addRemovedBonds ( org.ovirt.engine.core.compat.Guid ... ids ) { if ( nullParameters ( ids ) ) { return this ; } if ( ( parameters.getRemovedBonds ( ) ) == null ) { parameters.setRemovedBonds ( new java.util.HashSet < > ( ) ) ; } parameters.getRemovedBonds ( ) . addAll ( java.util.Arrays.asList ( ids ) ) ; return this ; }
public static void getAllDataCenterNetworks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( storagePoolId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNetworksByDataCenterId , params , aQuery ) ; }
protected final boolean failValidation ( org.ovirt.engine.core.common.errors.EngineMessage message , java.lang.String ... variableReplacements ) { addValidationMessage ( message ) ; for ( java.lang.String variableReplacement : variableReplacements ) { addValidationMessage ( variableReplacement ) ; } return false ; }
public static void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
public static java.lang.String map ( org.ovirt.engine.api.model.GlusterVolumeType glusterVolumeType , java.lang.String template ) { switch ( glusterVolumeType ) { case DISTRIBUTE : return GlusterVolumeType.DISTRIBUTE.value ( ) ; case REPLICATE : return GlusterVolumeType.REPLICATE.value ( ) ; case DISTRIBUTED_REPLICATE : return GlusterVolumeType.DISTRIBUTED_REPLICATE.value ( ) ; case STRIPE : return GlusterVolumeType.STRIPE.value ( ) ; case DISTRIBUTED_STRIPE : return GlusterVolumeType.DISTRIBUTED_STRIPE.value ( ) ; case STRIPED_REPLICATE : return GlusterVolumeType.STRIPED_REPLICATE.value ( ) ; case DISTRIBUTED_STRIPED_REPLICATE : return GlusterVolumeType.DISTRIBUTED_STRIPED_REPLICATE.value ( ) ; default : return null ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getRaidTypeList ( ) . getSelectedItem ( ) ) != ( org.ovirt.engine.core.common.businessentities.RaidType.NONE ) ) && ( ( getRaidTypeList ( ) . getSelectedItem ( ) ) != ( org.ovirt.engine.core.common.businessentities.RaidType.RAID0 ) ) ) { getNoOfPhysicalDisksInRaidVolume ( ) . setIsAvailable ( true ) ; getStripeSize ( ) . setIsAvailable ( true ) ; } else { getNoOfPhysicalDisksInRaidVolume ( ) . setIsAvailable ( false ) ; getStripeSize ( ) . setIsAvailable ( false ) ; } onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "raidTypeChanged" ) ) ; }
public javax.ws.rs.core.Response addForImage ( org.ovirt.engine.api.model.ImageTransfer imageTransfer ) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters ( ) ; params.setImageGroupID ( org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid ( imageTransfer.getImage ( ) . getId ( ) ) ) ; return performCreate ( imageTransfer , params ) ; }
protected boolean setAndValidateDiskProfiles ( ) { java.util.Map < org.ovirt.engine.core.common.businessentities.storage.DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap < > ( ) ; for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters ( ) . getParametersList ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImageByImageId ( parameters.getImageId ( ) ) ; map.put ( diskImage , diskImage.getStorageIds ( ) . get ( 0 ) ) ; } return validate ( diskProfileHelper.setAndValidateDiskProfiles ( map , org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePool ( ) . getCompatibilityVersion ( ) , org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getCurrentUser ( ) ) ) ; }
public static void GetCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
private void addSupportedQosTypes ( org.ovirt.engine.api.model.VersionCaps version ) { version.setQosTypes ( new org.ovirt.engine.api.model.QosTypes ( ) ) ; if ( org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_3 ) ) { addQosTypes ( version , QosType.NETWORK ) ; } if ( org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5 ) ) { addQosTypes ( version , QosType.STORAGE , QosType.CPU ) ; } if ( org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_6 ) ) { addQosTypes ( version , QosType.HOSTNETWORK ) ; } }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateMinAllocatedMemory ( ) ; updateNumOfSockets ( ) ; updateOSValues ( ) ; if ( ( getModel ( ) . getTemplateWithVersion ( ) . getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel ( ) . getTemplateWithVersion ( ) . getSelectedItem ( ) . getTemplateVersion ( ) ; updateQuotaByCluster ( template.getQuotaId ( ) , template.getQuotaName ( ) ) ; } updateMemoryBalloon ( ) ; updateCpuSharesAvailability ( ) ; updateVirtioScsiAvailability ( ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "rollbackOnFailure" , isRollbackOnFailure ( ) ) . append ( "conectivityTimeout" , getConectivityTimeout ( ) ) . append ( "hostNetworkQosSupported" , getHostNetworkQosSupported ( ) ) . append ( "networks" , org.ovirt.engine.core.common.businessentities.Entities.collectionToString ( getNetworks ( ) , "\t\t" ) ) . append ( "removedNetworks" , getRemovedNetworks ( ) ) . append ( "bonds" , org.ovirt.engine.core.common.businessentities.Entities.collectionToString ( getBonds ( ) , "\t\t" ) ) . append ( "removedBonds" , getBonds ( ) ) ; }
public void testRemoveLabel ( ) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig = dao.get ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_2 ) ; checkLabels ( vfsConfig , 3 ) ; dao.removeLabel ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_2 , vfsConfig.getNetworkLabels ( ) . iterator ( ) . next ( ) ) ; vfsConfig = dao.get ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_2 ) ; checkLabels ( vfsConfig , 2 ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllCanDoPass , boolean waitForResult ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = notAllowToRunAction ( actionType ) ; if ( returnValue != null ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > ( ) ; list.add ( returnValue ) ; return list ; } else { return runMultipleActionsImpl ( actionType , parameters , false , isRunOnlyIfAllCanDoPass , waitForResult ) ; } }
public void validateFailsForGlusterServerWhenNoUpServer ( ) throws java.lang.Exception { setupGlusterMock ( true , null , false ) ; org.junit.jupiter.api.Assertions.assertFalse ( command.validate ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE.toString ( ) ) ) ; }
public void legalTimedOut ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase ( ) ; t.setUseTimout ( true ) ; long c = java.lang.System.currentTimeMillis ( ) ; c -= 1000 ; final java.util.Date d = new java.util.Date ( c ) ; t.setEndTime ( d ) ; final java.lang.String s = "timeout" ; t.setTimeoutObjectId ( s ) ; t.getLegal ( ) ; final boolean result = t.getLegal ( ) ; org.junit.Assert.assertTrue ( result ) ; }
public void setInSlot ( java.lang.Object slot , com.google.gwt.user.client.ui.IsWidget content ) { if ( slot == ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetContent ) ) { if ( content instanceof org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenter ) { com.google.gwt.user.client.ui.IsWidget currentContent = getCurrentContent ( ) ; if ( ! ( currentContent instanceof org.gwtbootstrap3.client.ui.Container ) ) { nonOverlayContent = currentContent ; } } setPanelContent ( contentContainer , content ) ; } else { super . setInSlot ( slot , content ) ; } }
public void refuseBalloonOnPPC ( ) { setupCanAddPpcTest ( ) ; cmd.getParameters ( ) . setBalloonEnabled ( true ) ; org.mockito.Mockito.doNothing ( ) . when ( cmd ) . initTemplateDisks ( ) ; cmd.init ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; }
protected org.ovirt.engine.api.model.Disk getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.DiskImage entity = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; entity.setId ( GUIDS [ index ] ) ; entity.setImageId ( GUIDS [ 1 ] ) ; entity.setvolumeFormat ( VolumeFormat.RAW ) ; entity.setDiskInterface ( DiskInterface.VirtIO ) ; entity.setImageStatus ( ImageStatus.OK ) ; entity.setVolumeType ( VolumeType.Sparse ) ; entity.setBoot ( false ) ; entity.setShareable ( false ) ; entity.setPropagateErrors ( PropagateErrors.On ) ; return org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.setUpStatisticalEntityExpectations ( entity ) ; }
private org.ovirt.engine.core.common.action.AddSANStorageDomainParameters getSanAddParams ( org.ovirt.engine.core.common.businessentities.storage_domain_static entity , org.ovirt.engine.core.compat.Guid hostId , java.util.ArrayList < java.lang.String > lunIds , boolean force ) { org.ovirt.engine.core.common.action.AddSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.AddSANStorageDomainParameters ( entity ) ; params.setVdsId ( hostId ) ; params.setLunIds ( lunIds ) ; params.setForce ( force ) ; return params ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > getAll ( org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) ; return getCallsHandler ( ) . executeReadList ( "GetAllFromVdsGroups" , org.ovirt.engine.core.dao.VdsGroupDAODbFacadeImpl.VdsGroupRowMapper.instance , parameterSource ) ; }
public void validateFailsWithArbiterWithClusterDoesNotArbiterVolume ( ) { setVolume ( getVolume ( 3 , false , GlusterVolumeType.REPLICATE , 3 , true ) ) ; org.mockito.Mockito.doReturn ( getCluster ( true , Version.v4_0 ) ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_GLUSTER_ARBITER_VOLUME_NOT_SUPPORTED ) ; }
private void updateOps ( byte [ ] message ) { if ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG.isDebugEnabled ( ) ) { try { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG.debug ( ( "Message sent: " + ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse ( message ) ) ) ) ; } catch ( org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ignored ) { } } final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = this ; scheduleTask ( ( ) -> { client.updateInterestedOps ( ) ; return null ; } ) ; }
public void getExternalNetworkMap ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.Map < org.ovirt.engine.core.common.businessentities.network.Network , java.util.Set < org.ovirt.engine.core.compat.Guid > > > aQuery , org.ovirt.engine.core.compat.Guid providerId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.MapConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllExternalNetworksOnProvider , new org.ovirt.engine.core.common.queries.IdQueryParameters ( providerId ) , aQuery ) ; }
public void setNotSelected ( boolean vmIsUp , boolean consoleInUse ) { vmStatus.setStyleName ( style.machineStatusStyle ( ) ) ; if ( vmIsUp && ( ! consoleInUse ) ) { setVmUpStyle ( ) ; } else { setVmDownStyle ( ) ; } }
public static void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
public void successfulFenceWithSameProxyRetry ( ) { mockProxyHost ( false ) ; mockFenceFailure ( true ) ; org.ovirt.engine.core.common.businessentities.FenceAgent agent = createAgent ( ) ; org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result = executor.fence ( FenceActionType.START , agent ) ; org.junit.Assert.assertTrue ( result.getSucceeded ( ) ) ; org.mockito.Mockito.verify ( proxyLocator ) . findProxyHost ( true , org.ovirt.engine.core.bll.FenceExecutorTest.PROXY_HOST_ID ) ; }
public boolean validateAndSetQuota ( ) { if ( getQuotaManager ( ) . validateQuotaForStoragePool ( getStoragePool ( ) , getVdsGroupId ( ) , getQuotaId ( ) , getReturnValue ( ) . getCanDoActionMessages ( ) ) ) { return getQuotaManager ( ) . validateAndSetStorageQuota ( getStoragePool ( ) , getStorageQuotaListParameters ( ) , getReturnValue ( ) . getCanDoActionMessages ( ) ) ; } return false ; }
public void executeCommandWhenFailed ( ) { setVolume ( volumeWithRemoveBricksTask ) ; mockBackend ( false , EngineError.GlusterVolumeRemoveBricksCommitFailed ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.validate ( ) ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.never ( ) ) . endStepJobCommitted ( ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.never ( ) ) . releaseVolumeLock ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED , cmd.getAuditLogTypeValue ( ) ) ; }
public static void GetLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
public void getDataCenterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "DataCenter: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn registerSecrets ( java.util.Map < java.lang.String , java.lang.String > [ ] libvirtSecrets , boolean clearUnusedSecrets ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.registerSecrets" ) . withParameter ( "secrets" , libvirtSecrets ) . withParameter ( "clear" , clearUnusedSecrets ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
private void createCluster ( org.ovirt.engine.core.compat.Version version ) { existingCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; existingCluster.setId ( org.ovirt.engine.core.bll.gluster.GlusterManagerTest.CLUSTER_ID ) ; existingCluster.setname ( "cluster" ) ; existingCluster.setGlusterService ( true ) ; existingCluster.setVirtService ( false ) ; existingCluster.setcompatibility_version ( version ) ; }
private org.ovirt.engine.core.compat.Guid getStorageDomainIdByName ( java.lang.String storageDomainName ) { java.util.List < org.ovirt.engine.api.model.StorageDomain > storageDomains = getBackendCollection ( org.ovirt.engine.api.model.StorageDomain.class , QueryType.GetAllStorageDomains , new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) ) ; for ( org.ovirt.engine.api.model.StorageDomain storageDomain : storageDomains ) { if ( storageDomain.getStorageName ( ) . equals ( storageDomainName ) ) { return storageDomain.getId ( ) ; } } return null ; }
public void testGetBrickByQualifiedName ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = new java.util.ArrayList < > ( ) ; bricks.add ( org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtilTest.brick1 ) ; bricks.add ( org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtilTest.brick2 ) ; bricks.add ( org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtilTest.brick3 ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtil.getBrickByQualifiedName ( bricks , ( ( ( org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtilTest.SERVER_1 ) + ":" ) + ( org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtilTest.DIR_1 ) ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( brick ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtilTest.brick1.getId ( ) , brick.getId ( ) ) ; }
public void testCanDoFailOnAddFloatingDiskWithPlugSet ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createDiskImage ( 1 ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; parameters.setVmId ( Guid.Empty ) ; parameters.setPlugDiskToVm ( true ) ; initializeCommand ( null , parameters ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.CANNOT_ADD_FLOATING_DISK_WITH_PLUG_VM_SET ) ; }
public void moveDiskToGluster ( ) { initializeCommand ( ImageOperation.Move ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( false ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
private static java.util.Collection < org.ovirt.engine.core.aaa.DirectoryUser > queryDirectoryUsers ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final org.ovirt.engine.api.extensions.ExtMap filter , boolean groupsResolving , boolean groupsResolvingRecursive ) { return org.ovirt.engine.core.aaa.DirectoryUtils.mapPrincipalRecordsToDirectoryUsers ( org.ovirt.engine.core.aaa.AuthzUtils.getName ( extension ) , org.ovirt.engine.core.aaa.AuthzUtils.queryPrincipalRecords ( extension , namespace , filter , groupsResolving , groupsResolvingRecursive ) ) ; }
private void storeVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { vmDynamicDao.update ( vm.getDynamicData ( ) ) ; vmStatisticsDao.update ( vm.getStatisticsData ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > interfaces = vm.getInterfaces ( ) ; if ( interfaces != null ) { for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ifc : interfaces ) { org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics stats = ifc.getStatistics ( ) ; vmNetworkStatisticsDao.update ( stats ) ; } } }
public void validateSuccessForGlusterServerWhenUpServerExists ( ) throws java.lang.Exception { setupGlusterMock ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , false ) ; org.junit.Assert.assertTrue ( commandMock.validate ( ) ) ; }
public void testIscsiLunCannotBeAddedIfSgioIsFilteredAndScsiReservationEnabled ( ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = createISCSILunDisk ( ScsiGenericIO.FILTERED , true , DiskInterface.IDE ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; initializeCommand ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , parameters ) ; mockVm ( ) ; mockInterfaceList ( ) ; org.junit.Assert.assertFalse ( "Lun disk added successfully WHILE sgio is filtered and scsi reservation is enabled" , command.checkIfLunDiskCanBeAdded ( spyDiskValidator ( disk ) ) ) ; verifyCanDoActionMessagesContainMessage ( EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED ) ; }
public void Cluster_SelectedItemChanged ( ) { UpdateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; UpdateMinAllocatedMemory ( ) ; UpdateNumOfSockets ( ) ; if ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; updateQuotaByCluster ( template.getQuotaId ( ) , template.getQuotaName ( ) ) ; } }
public void init ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { setDiskImages ( diskImages ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel moveDiskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > diskImages = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; moveDiskModel.onInitAllDisks ( diskImages ) ; moveDiskModel.onInitDisks ( ) ; } } ) ) ; }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisksForVm , params , aQuery ) ; }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties ( ) ; jobProperties.put ( VdcObjectType.VM.name ( ) . toLowerCase ( ) , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getVmName ( ) ) ; } return jobProperties ; }
protected void analyze ( ) { proceedDownVms ( ) ; proceedWatchdogEvents ( ) ; proceedBalloonCheck ( ) ; proceedGuaranteedMemoryCheck ( ) ; updateRepository ( ) ; prepareGuestAgentNetworkDevicesForUpdate ( ) ; updateLunDisks ( ) ; updateVmJobs ( ) ; analyzeExternalVms ( ) ; analyzeHostedEngineVm ( ) ; if ( ( vmDynamicToSave ) != null ) { vmsMonitoring.addVmDynamicToList ( vmDynamicToSave ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > getAll ( org.ovirt.engine.core.compat.Guid userID , boolean isFiltered , org.ovirt.engine.core.common.businessentities.VmEntityType entityType ) { return getCallsHandler ( ) . executeReadList ( "GetAllFromVmTemplates" , org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "entity_type" , entityType.name ( ) ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) ) ; }
private static org.ovirt.vdsm.jsonrpc.client.reactors.Reactor getSslStompReactor ( org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.sslStompReactor ) != null ) { return org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.sslStompReactor ; } synchronized ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.class ) { if ( ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.sslStompReactor ) != null ) { return org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.sslStompReactor ; } try { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.sslStompReactor = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompReactor ( provider.getSSLContext ( ) ) ; } catch ( java.io.IOException | java.security.GeneralSecurityException e ) { throw new org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ( e ) ; } } return org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.sslStompReactor ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageServerConnectionLunMapDao ( ) ; storageServerConnectionDao = dbFacade.getStorageServerConnectionDao ( ) ; existingConnection = storageServerConnectionDao.get ( "0cc146e8-e5ed-482c-8814-270bc48c297e" ) ; newServerConnection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; newServerConnection.setid ( "0cc146e8-e5ed-482c-8814-270bc48c2980" ) ; newServerConnection.setconnection ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.EXISTING_DOMAIN_STORAGE_NAME ) ; existingLUNStorageMap = dao.get ( new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMapId ( "1IET_00180001" , existingConnection.getid ( ) ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.FREE_LUN_ID , existingConnection.getid ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { java.util.List models = ( ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > ) ( getValue ( ) . getItems ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel existingProfileModel = ( ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel ) ( value ) ) ; org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel newVnicProfileModel = new org.ovirt.engine.ui.uicommonweb.models.profiles.NewVnicProfileModel ( existingProfileModel.getSourceModel ( ) , existingProfileModel.getDcCompatibilityVersion ( ) , dcId ) ; models.add ( ( ( models.indexOf ( existingProfileModel ) ) + 1 ) , newVnicProfileModel ) ; setAcceptableValues ( models ) ; }
public void getStorageDevices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterStorageDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) , aQuery ) ; }
public void testUpdateStoragePoolIsoMap ( ) { existingStoragePoolIsoMap.setstatus ( StorageDomainStatus.Active ) ; dao.update ( existingStoragePoolIsoMap ) ; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap result = dao.get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( existingStoragePoolIsoMap.getstorage_id ( ) , new org.ovirt.engine.core.compat.Guid ( existingStoragePoolIsoMap.getstorage_pool_id ( ) . toString ( ) ) ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingStoragePoolIsoMap , result ) ; }
public boolean handle ( java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > queryResults ) { boolean result = true ; for ( org.ovirt.engine.api.extensions.ExtMap queryResult : queryResults ) { if ( ( records.size ( ) ) < ( org.ovirt.engine.core.aaa.AuthzUtils.QUERIES_RESULTS_LIMIT ) ) { records.add ( queryResult ) ; } else { result = false ; break ; } } return result ; }
public void testGuidListValues ( ) { java.lang.String listValues = "e61f7070-cd52-46ca-88c2-686e1c70fe44,1eaa381a-fbf9-4ef5-bec2-6e4337f85d66" ; java.util.List < org.ovirt.engine.core.compat.Guid > stringList = org.ovirt.engine.core.compat.Guid.createGuidListFromString ( listValues ) ; java.util.List < org.ovirt.engine.core.compat.Guid > expectedList = new java.util.ArrayList < > ( ) ; expectedList.add ( new org.ovirt.engine.core.compat.Guid ( "e61f7070-cd52-46ca-88c2-686e1c70fe44" ) ) ; expectedList.add ( new org.ovirt.engine.core.compat.Guid ( "1eaa381a-fbf9-4ef5-bec2-6e4337f85d66" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedList , stringList ) ; }
public void validateSufficientSpaceOnDestinationDomains ( ) { setupForStorageTests ( ) ; command.ensureDestinationImageMap ( ) ; org.junit.Assert.assertTrue ( command.checkDestDomains ( ) ) ; org.mockito.Mockito.verify ( multipleSdValidator ) . allDomainsWithinThresholds ( ) ; org.mockito.Mockito.verify ( multipleSdValidator ) . allDomainsHaveSpaceForNewDisks ( org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( IVdcQueryable quota ) { boolean quotaExceeded = false ; if ( quota instanceof org.ovirt.engine.core.common.businessentities.QuotaStorage ) { quotaExceeded = getQuotaExceeded ( ( ( org.ovirt.engine.core.common.businessentities.QuotaStorage ) ( quota ) ) ) ; } else if ( quota instanceof org.ovirt.engine.core.common.businessentities.QuotaVdsGroup ) { quotaExceeded = getQuotaExceeded ( ( ( org.ovirt.engine.core.common.businessentities.QuotaVdsGroup ) ( quota ) ) ) ; } if ( quotaExceeded ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.webadmin.widget.table.column.QuotaUtilizationStatusColumn.constants.quotaExceeded ( ) ) ; } return null ; }
public void testGetPagPhraseWrong ( ) { mcr.mockConfigValue ( ConfigValues.DBPagingType , "wrongPageType" ) ; mcr.mockConfigValue ( ConfigValues.DBPagingSyntax , "wrongPageSyntax" ) ; org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( ) ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = new org.ovirt.engine.core.searchbackend.SyntaxContainer ( "" ) ; res.setMaxCount ( 0 ) ; org.junit.Assert.assertEquals ( "" , chkr.getPagePhrase ( res , "1" ) ) ; }
public void testValidUpdateOfEditableFieldOnTemplateVm ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate src = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; src.setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.VmTemplate dest = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; dest.setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; boolean updateIsValid = vmTemplateHandler.isUpdateValid ( src , dest ) ; org.junit.Assert.assertTrue ( "Update should be valid for different cluster IDs" , updateIsValid ) ; }
public static void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
private void generateStructWriter ( org.ovirt.api.metamodel.concepts.StructType type ) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer ( ) ; org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getJsonWriterName ( type ) ; javaBuffer.setClassName ( writerName ) ; generateStructWriterSource ( type ) ; try { javaBuffer.write ( outDir ) ; } catch ( java.io.IOException exception ) { throw new java.lang.RuntimeException ( ( ( "Can\'t write file for JSON writer \"" + writerName ) + "\"" ) , exception ) ; } }
public void testValidateClusterSupportForVirtioScsi ( ) { org.ovirt.engine.core.bll.ImportVmCommand < org.ovirt.engine.core.common.action.ImportVmParameters > cmd = setupDiskSpaceTest ( createParameters ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.Matchers.any ( java.util.Map.class ) ) ; cmd.getParameters ( ) . getVm ( ) . getDiskMap ( ) . values ( ) . iterator ( ) . next ( ) . setDiskInterface ( DiskInterface.VirtIO_SCSI ) ; cmd.getVdsGroup ( ) . setCompatibilityVersion ( Version.v3_2 ) ; cmd.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL ) ; }
public void validateWrongDiskImageTypeTemplate ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initTemplateDiskImage ( ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK.toString ( ) ) ) ; }
protected void executeNetworkCommand ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op2 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel , java.lang.Object ... params ) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToDetach = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ) ( op1 ) ) ; assert networkToDetach.isAttached ( ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.detachNetworkAndUpdateHostSetupNetworksParameters ( dataFromHostSetupNetworksModel , networkToDetach ) ; }
protected boolean checkImageConfiguration ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { return org.ovirt.engine.core.bll.ImagesHandler.checkImageConfiguration ( destStorages.get ( diskInfoDestinationMap.get ( diskImage.getId ( ) ) . getStorageIds ( ) . get ( 0 ) ) . getStorageStaticData ( ) , diskImage , org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
private void logNoProxyAvailable ( org.ovirt.engine.core.compat.Guid dataCenterId ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers ( new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ) ; java.lang.String dcName = org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getDbFacade ( ) . getStoragePoolDao ( ) . get ( dataCenterId ) . getName ( ) ; logable.addCustomValue ( "StoragePoolName" , dcName ) ; auditLogDirector.log ( logable , AuditLogType.IMPORTEXPORT_NO_PROXY_HOST_AVAILABLE_IN_DC ) ; }
protected void setUpGetEntityExpectations ( int times , boolean notFound ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( VdcQueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getEntity ( 0 ) ) ) ; } }
public void getExternalProviderDiscoveredHostList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetDiscoveredHostListFromExternalProvider , params , aQuery ) ; }
public void setUp ( ) throws java.io.IOException { org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . getCluster ( ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( cmd ) . getImages ( ) ; org.mockito.Mockito.when ( externalVnicProfileMappingValidator.validateExternalVnicProfileMapping ( new java.util.ArrayList < > ( ) , clusterId ) ) . thenReturn ( ValidationResult.VALID ) ; mockCluster ( ) ; setXmlOvfData ( ) ; }
public void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public org.ovirt.engine.core.utils.lock.EngineLock acquireGlusterLockWait ( org.ovirt.engine.core.compat.Guid clusterId ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > exclusiveLocks = new java.util.HashMap < > ( ) ; exclusiveLocks.put ( clusterId.toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.GLUSTER , EngineMessage.ACTION_TYPE_FAILED_GLUSTER_OPERATION_INPROGRESS ) ) ; org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock ( exclusiveLocks , null ) ; org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager ( ) . acquireLockWait ( lock ) ; return lock ; }
public void syncNetworkQosNotSupported ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork ( ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( "eth0" , network ) ; mockExistingIfaces ( iface ) ; org.ovirt.engine.core.compat.Guid qosId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = createQos ( ) ; org.mockito.Mockito.when ( qosDao.get ( qosId ) ) . thenReturn ( qos ) ; network.setQosId ( qosId ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForSync ( iface ) ) ; validateAndExpectViolation ( helper , EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; }
public static void GetMaxVmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return 100 ; } return ( ( java.lang.Integer ) ( source ) ) . intValue ( ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.VmPriorityMaxValue , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
public void testGetDefaultQuotaToDCWithoutDefaultQuota ( ) throws java.lang.Exception { java.lang.String defaultQuotaName = quotaHelper.getDefaultQuotaName ( storagePool.getname ( ) ) ; org.mockito.Mockito.when ( quotaHelper.generateDefaultQuotaName ( storagePool ) ) . thenReturn ( defaultQuotaName ) ; org.ovirt.engine.core.common.businessentities.Quota quotaUnlimited = quotaHelper.getUnlimitedQuota ( mockStoragePool ( ) , true ) ; assertQuotaUnlimited ( quotaUnlimited ) ; assertQuotaUnlimitedName ( quotaUnlimited ) ; }
public static org.ovirt.engine.core.common.businessentities.DbUser persistAuthenticatedUser ( org.ovirt.engine.core.common.businessentities.LdapUser ldapUser ) { org.ovirt.engine.core.common.businessentities.DbUser dbUser = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . get ( ldapUser.getUserId ( ) ) ; boolean newUser = dbUser == null ; dbUser = new org.ovirt.engine.core.common.businessentities.DbUser ( ldapUser ) ; if ( newUser ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . save ( dbUser ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . update ( dbUser ) ; } return dbUser ; }
public static org.ovirt.engine.core.aaa.DirectoryUser findDirectoryUserById ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final java.lang.String id , final boolean groupsResolving , final boolean groupsResolvingRecursive ) { java.util.Collection < org.ovirt.engine.core.aaa.DirectoryUser > users = org.ovirt.engine.core.aaa.DirectoryUtils.findDirectoryUserByIds ( extension , namespace , java.util.Arrays.asList ( id ) , groupsResolving , groupsResolvingRecursive ) ; if ( ( users.size ( ) ) == 0 ) { return null ; } return new java.util.ArrayList < org.ovirt.engine.core.aaa.DirectoryUser > ( users ) . get ( 0 ) ; }
public static java.lang.String getConstraint ( javax.ws.rs.core.HttpHeaders headers , javax.ws.rs.core.UriInfo ui , java.lang.String defaultQuery , java.lang.Class < ? > clz , boolean typePrefix ) { java.lang.String prefix = ( typePrefix ) ? org.ovirt.engine.api.common.util.QueryHelper.RETURN_TYPES.get ( clz ) : "" ; java.lang.String search = org.ovirt.engine.api.common.util.ParametersHelper.getParameter ( headers , ui , org.ovirt.engine.api.common.util.QueryHelper.CONSTRAINT_PARAMETER ) ; if ( search != null ) { return prefix + search ; } if ( defaultQuery != null ) { return prefix + defaultQuery ; } return null ; }
public static void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
protected abstract boolean isVmNeedsToBeAutoStarted ( org.ovirt.engine.core.compat.Guid vmId ) ;
public void testBootFromNetworkNoNetwork ( ) { org.ovirt.engine.core.dao.network.VmNetworkInterfaceDao dao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDao.class ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ) . when ( dao ) . getAllForVm ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( dao ) . when ( runVmValidator ) . getVmNetworkInterfaceDao ( ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , BootSequence.N , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ) , false , VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK ) ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { persistCommand ( parentCommand , false ) ; }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVdsGroupsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void executeVdsBrokerCommand ( ) { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.GetStorageDomainStatsVDSCommand.getBroker ( ) . getStorageDomainStats ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetStorageDomainStatsVDSCommand.getParameters ( ) . getStorageDomainId ( ) . toString ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.GetStorageDomainStatsVDSCommand.proceedProxyReturnValue ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.vdsbroker.vdsbroker.GetStorageDomainStatsVDSCommand.BuildStorageDynamicFromXmlRpcStruct ( _result.mStorageStats ) ; domain.setId ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetStorageDomainStatsVDSCommand.getParameters ( ) . getStorageDomainId ( ) ) ; setReturnValue ( domain ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImageTemplate ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage i = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; i.setSizeInGigabytes ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.USED_SPACE_GB ) + ( org.ovirt.engine.core.bll.AddVmCommandTest.AVAILABLE_SPACE_GB ) ) ) ; i.setActualSizeInBytes ( ( ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.REQUIRED_DISK_SIZE_GB ) * 1024L ) * 1024L ) * 1024L ) ) ; i.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; i.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return i ; }
private void updateFenceAgents ( ) { if ( ( getParameters ( ) . getFenceAgents ( ) ) != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getFenceAgentDao ( ) . removeByVdsId ( getVdsId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent : getParameters ( ) . getFenceAgents ( ) ) { agent.setHostId ( getVdsId ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getFenceAgentDao ( ) . save ( agent ) ; } } }
protected void performBootstrap ( ) { super . performBootstrap ( ) ; com.google.gwt.user.client.Window.setTitle ( dynamicMessages.applicationTitle ( ) ) ; org.ovirt.engine.core.common.mode.ApplicationMode uiMode = org.ovirt.engine.ui.webadmin.uimode.UiModeData.getUiMode ( ) ; if ( uiMode != null ) { org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.setUiMode ( uiMode ) ; } placeManager.revealCurrentPlace ( ) ; }
protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel ) ( model ) ) ; java.lang.Boolean migrationNetworkEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.MigrationNetworkEnabled , clusterNetworkModel.getCluster ( ) . getcompatibility_version ( ) . toString ( ) ) ) ) ; return ( migrationNetworkEnabled && ( clusterNetworkModel.isAttached ( ) ) ) && ( ! ( clusterNetworkModel.isExternal ( ) ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getValue ( T object ) { java.lang.Integer progressValue = getProgressValue ( object ) ; int progress = ( progressValue != null ) ? progressValue : 0 ; java.lang.String text = getProgressText ( object ) ; java.lang.String color = getColorByProgress ( progress ) ; return org.ovirt.engine.ui.common.widget.table.column.AbstractProgressBarColumn.templates.progressBar ( progress , text , color , getStyle ( ) , com.google.gwt.user.client.DOM.createUniqueId ( ) ) ; }
public static void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void onLogout ( ) { restApiSessionManager.releaseSession ( ) ; }
public static org.ovirt.engine.core.aaa.DirectoryGroup findGroupById ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , java.lang.String namespace , final java.lang.String id , final boolean resolveGroups , final boolean resolveGroupsRecursive ) { java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > groups = org.ovirt.engine.core.aaa.AuthzUtils.findGroupsByIds ( extension , namespace , java.util.Arrays.asList ( id ) , resolveGroups , resolveGroupsRecursive ) ; if ( groups.isEmpty ( ) ) { return null ; } return groups.get ( 0 ) ; }
public void appendCustomValueAppendsWithNull ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase ( ) ; final java.lang.String key = "foo" ; final java.lang.String value = null ; final java.lang.String newVal = "bar" ; final java.lang.String sep = "_" ; b.addCustomValue ( key , value ) ; b.appendCustomValue ( key , newVal , sep ) ; final java.lang.String s = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( ( ( value + sep ) + newVal ) , s ) ; }
public void testGetBadGuid ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpQueryExpectations ( new java.lang.String [ ] { "cpu.burnout" , "cpu.meltdown" , "cpu.vapourized" } , false ) ; verifyNotFoundException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , resource :: get ) ) ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > watchdogs = getWatchdogs ( ) ; if ( watchdogs.isEmpty ( ) ) { return failValidation ( EngineMessage.WATCHDOG_NOT_FOUND ) ; } if ( ! ( validate ( validateWatchdog ( ) ) ) ) { return false ; } return true ; }
public void stringToCpuTune ( ) { org.ovirt.engine.api.model.CpuTune cpuTune = org.ovirt.engine.api.restapi.types.VmMapper.stringToCpuTune ( "0#0" ) ; assertNotNull ( cpuTune ) ; assertNotNull ( cpuTune.getVCpuPin ( ) ) ; assertEquals ( 1 , cpuTune.getVCpuPin ( ) . size ( ) ) ; assertEquals ( 0 , cpuTune.getVCpuPin ( ) . get ( 0 ) . getVcpu ( ) ) ; assertEquals ( "0" , cpuTune.getVCpuPin ( ) . get ( 0 ) . getCpuSet ( ) ) ; }
public java.lang.String getHibernationVolHandle ( ) { return hibernationVolHandle ; }
public java.lang.Long determineTotalImageInitialSize ( org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage , org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat , org.ovirt.engine.core.compat.Guid dstDomain ) { if ( isInitialSizeSupportedForFormat ( destFormat , dstDomain ) ) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk ( sourceImage , storageDomainDao.get ( dstDomain ) . getStorageStaticData ( ) ) ; return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize ( sourceImage.getVolumeFormat ( ) , java.lang.Double.valueOf ( totalSizeForClonedDisk ) . longValue ( ) ) ; } return null ; }
public static void getVmById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void getClustersHavingHosts ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllClustersHavingHosts , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void search ( ) { if ( ( getSearchPageSize ( ) ) == ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.UnknownInteger ) ) { asyncCallback.requestSearch ( ) ; } else { stopRefresh ( ) ; if ( getIsQueryFirstTime ( ) ) { setSelectedItem ( null ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.setSelectedItems ( null ) ; } if ( ( getIsTimerDisabled ( ) ) == false ) { setIsQueryFirstTime ( true ) ; syncSearch ( ) ; setIsQueryFirstTime ( false ) ; getTimer ( ) . start ( ) ; } else { syncSearch ( ) ; } } }
public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction ( org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Server: RunAction invoked!" ) ; debugAction ( actionType , params ) ; params.setSessionId ( getEngineSessionId ( ) ) ; if ( ( params.getCorrelationId ( ) ) == null ) { params.setCorrelationId ( org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId ( ) ) ; } return getBackend ( ) . runAction ( actionType , params ) ; }
public void getIrsImageList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean forceRefresh ) { org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType = org.ovirt.engine.core.common.businessentities.storage.ImageFileType.ISO ; getIrsImageList ( aQuery , storagePoolId , forceRefresh , imageFileType ) ; }
public void testQueryWithFilter ( ) throws java.lang.Exception { java.util.List < java.lang.String > filterValue = new java.util.ArrayList < > ( ) ; filterValue.add ( "true" ) ; org.mockito.Mockito.reset ( httpHeaders ) ; org.mockito.Mockito.when ( httpHeaders.getRequestHeader ( org.ovirt.engine.api.restapi.resource.USER_FILTER_HEADER ) ) . thenReturn ( filterValue ) ; setUpEntityQueryExpectations ( 1 ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; java.util.List < org.ovirt.engine.api.model.Network > networks = getCollection ( ) ; java.util.Collections.sort ( networks , java.util.Comparator.comparing ( Network :: getId ) ) ; verifyCollection ( networks ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean authenticationRequired = requiresAuthentication.getEntity ( ) ; getUsername ( ) . setIsChangable ( authenticationRequired ) ; getPassword ( ) . setIsChangable ( authenticationRequired ) ; getTenantName ( ) . setIsChangable ( authenticationRequired ) ; getAuthUrl ( ) . setIsChangable ( authenticationRequired ) ; }
private void InitCache ( ) { if ( ( org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionMapping ) == null ) { org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingAgentInstanceOptions = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionMapping = new java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > ( ) ; org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionTypes = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingSpecialParams = new java.util.HashSet < java.lang.String > ( ) ; CacheFencingAgentsOptionMapping ( ) ; CacheFencingAgentsOptionTypes ( ) ; } }
protected void openDocumentation ( T model ) { java.lang.String helpTag = model.getHelpTag ( ) . name ; java.lang.String docPath = org.ovirt.engine.ui.common.uicommon.ContextSensitiveHelpManager.getPath ( helpTag ) ; java.lang.String docBase = model.getConfigurator ( ) . getDocsBaseUrl ( ) ; org.ovirt.engine.ui.common.utils.WebUtils.openUrlInNewWindow ( "_blank" , ( docBase + docPath ) , WebUtils.OPTION_SCROLLBARS ) ; }
public void testCompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm ( ) ; vm.setName ( "foo" ) ; vm.setStatus ( org.ovirt.engine.api.common.util.StatusUtils.create ( VmStatus.UP ) ) ; vm.setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; org.ovirt.engine.api.common.util.CompletenessAssertor.validateParameters ( vm , "name" , "host" , "status" ) ; }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ! ( o instanceof org.ovirt.engine.core.common.businessentities.network.IpConfiguration ) ) { return false ; } org.ovirt.engine.core.common.businessentities.network.IpConfiguration other = ( ( org.ovirt.engine.core.common.businessentities.network.IpConfiguration ) ( o ) ) ; return ( java.util.Objects.equals ( iPv4Addresses , other.iPv4Addresses ) ) && ( java.util.Objects.equals ( ipV6Addresses , other.ipV6Addresses ) ) ; }
private void openConnection ( ) throws java.sql.SQLException { connection = java.sql.DriverManager.getConnection ( url , user , password ) ; wrapper = ( ( java.sql.Connection ) ( java.lang.reflect.Proxy.newProxyInstance ( java.lang.Thread.currentThread ( ) . getContextClassLoader ( ) , new java.lang.Class < ? > [ ] { java.sql.Connection.class } , ( proxy , method , args ) -> { if ( method.getName ( ) . equals ( "close" ) ) { return null ; } return method.invoke ( connection , args ) ; } ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlan ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic , int vlanId , java.lang.String networkName ) { java.lang.String baseIfaceName = baseNic.getName ( ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , ( ( baseIfaceName + "." ) + vlanId ) , false , null , baseIfaceName , vlanId , networkName , true , null , null , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) ; mockCalculateBaseNicWhenVlanNicIsPassed ( baseNic , nic ) ; return nic ; }
public void releaseVolumeLock ( org.ovirt.engine.core.compat.Guid taskId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol = volumeDao.getVolumeByGlusterTask ( taskId ) ; if ( vol != null ) { releaseLock ( vol.getId ( ) ) ; } else { org.ovirt.engine.core.bll.gluster.tasks.GlusterTaskUtils.log.debug ( "Did not find a volume associated with task '{}'" , taskId ) ; } }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { super . edit ( model ) ; priorityEditor.setRowData ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) ; priorityEditor.edit ( model.getPriority ( ) ) ; driver.edit ( model ) ; initTabAvailabilityListeners ( model ) ; initListeners ( model ) ; initCustomPropertySheet ( model ) ; hideAlwaysHiddenFields ( ) ; }
public static void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void addRoleColumn ( ) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.Permission > roleColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.Permission > ( ) { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Permission object ) { return object.getRoleName ( ) ; } } ; roleColumn.makeSortable ( ) ; org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getTable ( ) . addColumn ( roleColumn , org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.constants.rolePermission ( ) , "300px" ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionList" ) . withParameter ( "volName" , volumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolName" , slaveVolumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; }
private void onRemove ( ) { cancel ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > params = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( org.ovirt.engine.core.common.businessentities.MacPool macPool : ( ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.MacPool > ) ( getSelectedItems ( ) ) ) ) { params.add ( new org.ovirt.engine.core.common.action.RemoveMacPoolByIdParameters ( macPool.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.RemoveMacPool , params ) ; }
private void mockVdsWithOsVersion ( java.lang.String osVersion ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setVdsType ( VDSType.oVirtVintageNode ) ; vds.setHostOs ( osVersion ) ; org.mockito.Mockito.when ( vdsDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vds ) ; }
public void testChangeCdUsingQueryParameter ( ) throws java.lang.Exception { resource.setUriInfo ( setUpChangeCdUriQueryExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , VMStatus.Up ) ; setUpActionExpectations ( VdcActionType.ChangeDisk , org.ovirt.engine.core.common.action.ChangeDiskCommandParameters.class , new java.lang.String [ ] { "CdImagePath" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendCdRomsResourceTest.ISO_PATH } , true , true ) ; org.ovirt.engine.api.model.CdRom cdrom = resource.update ( getUpdate ( ) ) ; assertTrue ( cdrom.isSetFile ( ) ) ; }
public void getAAANamespaces ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ) ( source ) ) : new java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAvailableNamespaces , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void getMaxNumOfVmSockets ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfVmSockets ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
private java.lang.String [ ] createIncoherentIdentificationErrorReplacements ( java.lang.String violatingEntityId , org.ovirt.engine.core.compat.Guid referringId , java.lang.String referringName ) { return new java.lang.String [ ] { org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "referrerId" , violatingEntityId ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "referringId" , referringId ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "referringName" , referringName ) } ; }
public void testGetEntityNameByIdAndTypeForRole ( ) { org.ovirt.engine.core.common.businessentities.Role role = dbFacade.getRoleDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID ) ; org.junit.Assert.assertNotNull ( role ) ; java.lang.String name = role.getname ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID , VdcObjectType.Role ) ) ) ; }
public void versionDecreaseLowerVersionThanDC ( ) { createCommandWithOlderVersion ( ) ; org.mockito.Mockito.when ( storagePoolDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFSOldVersion ( ) ) ; setupCpu ( ) ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION_UNDER_DC ) ; }
public org.ovirt.engine.core.common.businessentities.VmTemplate getByName ( java.lang.String name , org.ovirt.engine.core.compat.Guid datacenterId , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { return getCallsHandler ( ) . executeRead ( "GetVmTemplateByVmtName" , org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vmt_name" , name ) . addValue ( "storage_pool_id" , datacenterId ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) ) ; }
public static void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
public void onFailure ( java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend.ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute RunPublicQuery: " + caught ) , caught ) ; org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult ( queryTypeList , queryParamsList , null ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; callback.Executed ( f ) ; org.ovirt.engine.ui.frontend.Frontend.raiseQueryCompleteEvent ( queryTypeList , context ) ; }
public java.util.Set < java.lang.String > getConsumedEvents ( ) { java.util.Set < java.lang.String > set = new java.util.HashSet ( super . getConsumedEvents ( ) ) ; set.add ( BrowserEvents.CLICK ) ; set.add ( BrowserEvents.CONTEXTMENU ) ; set.add ( BrowserEvents.MOUSEMOVE ) ; set.add ( BrowserEvents.CHANGE ) ; return set ; }
public void setItems ( java.util.Collection value ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > disks = ( value != null ) ? org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.storage.Disk > cast ( value ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ; java.util.Collections.sort ( disks , new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator ( ) ) ; super . setItems ( disks ) ; updateActionAvailability ( ) ; }
public void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public void attachTask ( org.ovirt.engine.core.bll.tasks.CommandAsyncTask asyncTask ) { synchronized ( _listTasks ) { if ( ! ( _listTasks.containsKey ( asyncTask.getVdsmTaskId ( ) ) ) ) { org.ovirt.engine.core.bll.CommandMultiAsyncTasks.log.info ( "CommandMultiAsyncTasks::attachTask: Attaching task '{}' to command '{}'." , asyncTask.getVdsmTaskId ( ) , getCommandId ( ) ) ; _listTasks.put ( asyncTask.getVdsmTaskId ( ) , asyncTask ) ; } } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) { return null ; } return super . getValue ( vm ) ; }
protected org.ovirt.engine.core.bll.ValidationResult validateInterfacesConfigured ( org.ovirt.engine.core.common.businessentities.VM vm ) { for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vm.getInterfaces ( ) ) { if ( ( nic.getVnicProfileId ( ) ) == null ) { return org.ovirt.engine.core.common.FeatureSupported.networkLinking ( vm.getClusterCompatibilityVersion ( ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > getUserRequestForStoragePoolAndDomainRepoFileList ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.ImageFileType imageType , boolean forceRefresh ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > repoList = null ; if ( ! ( isStorageDomainValid ( storageDomainId , imageType , forceRefresh ) ) ) { return null ; } repoList = getCachedIsoListByStoragePoolAndDomainId ( storagePoolId , storageDomainId , imageType ) ; return repoList ; }
private boolean Register ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid vdsGroupId , boolean IsPending ) { boolean returnValue = true ; log.debug ( "RegisterVdsQuery::Register - Entering" ) ; if ( vds == null ) { returnValue = registerNewHost ( vdsGroupId , IsPending ) ; } else { returnValue = updateExistingHost ( vds , IsPending ) ; } log.debug ( "RegisterVdsQuery::Register - Leaving with value {}" , returnValue ) ; return returnValue ; }
public void testAddVMToAffinityGroup ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( false ) ; setUriInfo ( setUpActionExpectations ( ActionType.EditAffinityGroup , org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm ( ) ; vm.setId ( GUIDS [ 0 ] . toString ( ) ) ; javax.ws.rs.core.Response response = collection.add ( vm ) ; org.junit.jupiter.api.Assertions.assertEquals ( 200 , response.getStatus ( ) ) ; }
public void testActiveDomainInList ( ) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( ) ; org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand < org.ovirt.engine.core.common.action.StoragePoolParametersBase > cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand ( param ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsList = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; tempStorageDomains.setStatus ( StorageDomainStatus.Active ) ; domainsList.add ( tempStorageDomains ) ; org.junit.Assert.assertFalse ( cmd.validateDomainsInMaintenance ( domainsList ) ) ; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.bll.provider.ProviderProxyFactory providerProxyFactory ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.StorageDomainStaticDao.class ) . get ( storageDomainId ) ; if ( storageDomainStatic != null ) { org.ovirt.engine.core.common.businessentities.Provider < ? > provider = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.provider.ProviderDao.class ) . get ( new org.ovirt.engine.core.compat.Guid ( storageDomainStatic.getStorage ( ) ) ) ; return providerProxyFactory.create ( provider ) ; } return null ; }
public static void Init ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > allPools = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.StoragePool pool : allPools ) { if ( ( pool.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational ) ) { org.ovirt.engine.core.bll.storage.StoragePoolStatusHandler.poolStatusChanged ( pool.getId ( ) , StoragePoolStatus.NotOperational ) ; } } }
private static void CacheConfigValues ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ; aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.putAll ( ( ( java.util.HashMap < org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetConfigurationValues , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void updateChangeConnectionType ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections iscsiConnection = createISCSIConnection ( "10.35.16.25" , StorageType.ISCSI , "iqn.2013-04.myhat.com:aaa-target1" , "3260" , "user1" , "mypassword123" ) ; parameters.setStorageServerConnection ( iscsiConnection ) ; org.mockito.Mockito.when ( storageConnDao.get ( iscsiConnection.getid ( ) ) ) . thenReturn ( oldNFSConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE ) ; }
public static void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void validateFailedDiskInterfaceUnsupported ( ) { mockVmStatusUp ( ) ; createVirtIODisk ( ) ; initStorageDomain ( ) ; org.mockito.Mockito.when ( diskVmElementValidator.isDiskInterfaceSupported ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ; }
public void invokeClient ( ) { boolean sslTarget = ( consoleOptions.getRawSecurePort ( ) ) != ( - 1 ) ; int port = ( sslTarget ) ? consoleOptions.getSecurePort ( ) : consoleOptions.getPort ( ) ; org.ovirt.engine.ui.common.uicommon.WebClientConsoleInvoker invoker = new org.ovirt.engine.ui.common.uicommon.WebClientConsoleInvoker ( org.ovirt.engine.ui.common.uicommon.SpiceHtml5Impl.CLIENT_PAGE , getConfig ( ) , getOptions ( ) . getHost ( ) , port , getOptions ( ) . getTicket ( ) , sslTarget ) ; invoker.invokeClient ( ) ; }
private void processHeartbeat ( ) { if ( ( ( this . lastHeartbeat ) + ( this . policy.getHeartbeat ( ) ) ) < ( java.lang.System.currentTimeMillis ( ) ) ) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.debug ( "Heartbeat exeeded. Closing channel" ) ; this . closeChannel ( ) ; } }
public void getGlusterHook ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , boolean includeServerHooks ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( hookId , includeServerHooks ) , aQuery ) ; }
public void calculateNetworkImplementationDetailsNetworkMtuOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface.getNetworkName ( ) , iface.isBridged ( ) , ( ( iface.getMtu ( ) ) + 1 ) , iface.getVlanId ( ) , createQos ( ) ) ; }
public void testGetPermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONFIGURE_VM_STORAGE , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( result.get ( 0 ) . getId ( ) , existingDomain.getId ( ) ) ; }
public void testIgnoresCase ( ) { for ( java.lang.String value : getCaseCombinations ( "true" ) ) { org.junit.jupiter.api.Assertions.assertTrue ( org.ovirt.engine.api.utils.BooleanParser.parseBoolean ( value ) ) ; } for ( java.lang.String value : getCaseCombinations ( "false" ) ) { org.junit.jupiter.api.Assertions.assertFalse ( org.ovirt.engine.api.utils.BooleanParser.parseBoolean ( value ) ) ; } }
protected boolean checkStorageDomainNameLengthValid ( ) { boolean result = true ; if ( ( org.apache.commons.lang.StringUtils.isNotEmpty ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getStorageName ( ) ) ) && ( ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getStorageName ( ) . length ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.StorageDomainNameSizeLimit ) ) ) ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG ) ; result = false ; } return result ; }
private boolean handleLibvirtSecrets ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid poolId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getLibvirtSecretDao ( ) . getAllByStoragePoolIdFilteredByActiveStorageDomains ( poolId ) ; if ( ( ! ( libvirtSecrets.isEmpty ( ) ) ) && ( ! ( registerLibvirtSecretsImpl ( vds , libvirtSecrets , false ) ) ) ) { org.ovirt.engine.core.bll.storage.CINDERStorageHelper.log.error ( "Failed to register libvirt secret on vds {}." , vds.getName ( ) ) ; setNonOperational ( cmdContext , vds.getId ( ) , NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE ) ; return false ; } return true ; }
protected org.jboss.resteasy.client.ClientExecutor createClientExecutor ( ) { org.apache.http.impl.client.DefaultHttpClient httpClient = new org.apache.http.impl.client.DefaultHttpClient ( ) ; configureTimeouts ( httpClient ) ; registerExternalProvidersTrustStore ( httpClient ) ; return new org.jboss.resteasy.client.core.executors.ApacheHttpClient4Executor ( httpClient ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworkLabelsByNetworkId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendNetworkLabelsResourceTest.NETWORK_ID } , getEntityList ( ) , failure ) ; control.replay ( ) ; }
public void testGetPermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONFIGURE_VM_STORAGE , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain domain = result.get ( 0 ) ; org.junit.Assert.assertEquals ( existingDomain.getId ( ) , domain.getId ( ) ) ; org.junit.Assert.assertEquals ( "Wrong committed disk size" , 8 , domain.getCommittedDiskSize ( ) ) ; org.junit.Assert.assertEquals ( "Wrong actual disk size" , 4 , domain.getActualImagesSize ( ) ) ; }
public void validateTemplateImageIsLocked ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.TEMPLATE ) ; command.getParameters ( ) . setOperation ( ImageOperation.Copy ) ; command.getImage ( ) . setImageStatus ( ImageStatus.LOCKED ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ) . when ( command ) . getTemplateForImage ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED ) ; }
public void validateSucceedsWithForceOption ( ) throws java.lang.Exception { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , true ) ) ) ; prepareMocks ( ) ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic ( ) ; mockVmsPinnedToHost ( java.util.Collections.< java.lang.String > emptyList ( ) ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public void getAAAProfilesEntriesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Collection < org.ovirt.engine.core.aaa.ProfileEntry > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.aaa.ProfileEntry > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAAAProfileList , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void initDetailModels ( ) { super . initDetailModels ( ) ; org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkVmListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkTemplateListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel ( ) ) ; setDetailModels ( list ) ; }
public void testPersistNetworkAttachmentsForInterfaceWithoutNetworkNothingIsPersisted ( ) { org.mockito.Mockito.when ( networkAttachmentDao.getAllForHost ( org.mockito.Matchers.eq ( hostId ) ) ) . thenReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister persister = createPersister ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , interfaceWithoutAttachedNetwork ) ; persister.persistNetworkAttachments ( ) ; org.mockito.Mockito.verify ( networkAttachmentDao ) . getAllForHost ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( networkAttachmentDao ) ; }
public org.ovirt.engine.api.v3.types.V3NIC update ( org.ovirt.engine.api.v3.types.V3NIC v3Nic ) { org.ovirt.engine.api.model.Nic v4Nic = org.ovirt.engine.api.v3.adapters.V3InAdapters.adaptIn ( v3Nic ) ; org.ovirt.engine.api.v3.helpers.V3NICHelper.setVnicProfile ( vmId , v3Nic , v4Nic ) ; try { return org.ovirt.engine.api.v3.adapters.V3OutAdapters.adaptOut ( delegate.update ( v4Nic ) ) ; } catch ( javax.ws.rs.WebApplicationException exception ) { throw adaptException ( exception ) ; } }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.InitVdsOnUpCommand.getVdsGroup ( ) ; if ( vdsGroup.supportsVirtService ( ) ) { initVirtResources ( ) ; } if ( vdsGroup.supportsGlusterService ( ) ) { initGlusterPeerProcess ( ) ; } org.ovirt.engine.core.bll.InitVdsOnUpCommand.setSucceeded ( true ) ; }
public void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , ? > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( lastExecutedCommand.getName ( ) . equals ( "OnSave" ) ) { return forceCreateConfirmPopupProvider.get ( ) ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
public com.google.gwt.resources.client.ImageResource getValue ( T value ) { org.ovirt.engine.ui.webadmin.widget.table.column.ReasonColumn.setTitle ( getReason ( value ) ) ; if ( ( ( getReason ( value ) ) != null ) && ( ! ( getReason ( value ) . trim ( ) . isEmpty ( ) ) ) ) { return org.ovirt.engine.ui.webadmin.widget.table.column.ReasonColumn.getApplicationResources ( ) . commentImage ( ) ; } return null ; }
public void hostNameNotUsed ( ) { org.mockito.Mockito.when ( hostDao.getAllForHostname ( org.mockito.ArgumentMatchers.any ( java.lang.String.class ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.junit.Assert.assertThat ( validator.hostNameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected boolean isAsync ( ) { return getBooleanMatrixConstraint ( org.ovirt.engine.api.restapi.resource.BackendResource.ASYNC_CONSTRAINT ) ; }
protected void executeCommand ( ) { if ( ! ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( serverId ) ) ) { performActionForServicesOfServer ( ) ; } else if ( ! ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( clusterId ) ) ) { performActionForServicesOfCluster ( ) ; } addCustomValue ( GlusterConstants.SERVICE_TYPE , getParameters ( ) . getServiceType ( ) . name ( ) ) ; }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommand.updateStorageDomainWipeAfterDelete ( ) ; org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommand.addStorageDomainInDb ( ) ; org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > luns = getLUNsFromVgInfo ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommand.getStorageDomain ( ) . getStorage ( ) ) ; saveLUNsInDB ( luns ) ; org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommand.setSucceeded ( true ) ; }
public void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) . withoutRefresh ( ) , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.Linq.sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer ( ) ) ; java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > diskModels = org.ovirt.engine.ui.uicommonweb.Linq.disksToDiskModelList ( disks ) ; model.getExternalAttachableDisks ( ) . setItems ( org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList ( org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByType ( diskModels , DiskStorageType.LUN ) ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs changedArgs = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( "IsDiskHotPlugAvailable" . equals ( changedArgs.propertyName ) ) { com.google.gwt.event.logical.shared.InitializeEvent.fire ( plugButtonDefinition ) ; com.google.gwt.event.logical.shared.InitializeEvent.fire ( unPlugButtonDefinition ) ; } }
public void dispose ( ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( "vdsManager::disposing" ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( onTimerJobId ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( vmsMonitoringJobId ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( availableUpdatesJobId ) ; vdsProxy.close ( ) ; }
public void testVmDiskWithPassDiscardAndWadExistsSucceeds ( ) { createVmDiskOnSd ( false , false ) ; createVmDiskOnSd ( true , false ) ; createVmDiskOnSd ( false , true ) ; org.ovirt.engine.core.compat.Guid diskId = createVmDiskOnSd ( true , true ) ; storageDomainVmDisks.add ( createVmDisk ( diskId , false ) ) ; org.junit.Assert.assertTrue ( discardHelper.vmDiskWithPassDiscardAndWadExists ( storageDomainDisks , storageDomainVmDisks ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getSortedDisks ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > diskImages = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( vm.getDiskMap ( ) . values ( ) ) ; java.util.Collections.sort ( diskImages , new org.ovirt.engine.core.common.businessentities.comparators.DiskImageByDiskAliasComparator ( ) ) ; java.util.Collections.sort ( diskImages , java.util.Collections.reverseOrder ( new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.DiskImageByBootComparator ( ) ) ) ; return diskImages ; }
private org.ovirt.engine.core.common.action.ActionReturnValue executeCommand ( final org.ovirt.engine.core.bll.CommandBase < ? > command , final org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { org.ovirt.engine.core.common.action.ActionReturnValue result = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler ( org.ovirt.engine.core.bll.tasks.CommandExecutor.log ) . runAction ( command , ( cmdContext != null ? cmdContext.getExecutionContext ( ) : null ) ) ; updateCommandResult ( command.getCommandId ( ) , result ) ; return result ; }
public void decrease ( T key ) { org.ovirt.engine.core.bll.network.macpool.ObjectCounter.Counter counter = map.get ( key ) ; if ( counter == null ) { return ; } int count = counter.decrease ( ) ; if ( count == 0 ) { map.remove ( key ) ; } else if ( count < 0 ) { throw new java.lang.IllegalStateException ( "count underflow." ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks ( snapshotModel , disks , VmModelHelper.WarningType.VM_SNAPSHOT ) ; snapshotModel.getCommands ( ) . add ( getOnSaveCommand ( ) ) ; snapshotModel.getCommands ( ) . add ( getCancelCommand ( ) ) ; snapshotModel.StopProgress ( ) ; }
protected void executeCommand ( ) { super . executeCommand ( ) ; if ( org.ovirt.engine.core.bll.storage.domain.AddLocalStorageDomainCommand.getSucceeded ( ) ) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = backend.runInternalAction ( ActionType.AttachStorageDomainToPool , new org.ovirt.engine.core.common.action.AttachStorageDomainToPoolParameters ( org.ovirt.engine.core.bll.storage.domain.AddLocalStorageDomainCommand.getStorageDomain ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.domain.AddLocalStorageDomainCommand.getStoragePool ( ) . getId ( ) ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { org.ovirt.engine.core.bll.storage.domain.AddLocalStorageDomainCommand.getReturnValue ( ) . setSucceeded ( false ) ; org.ovirt.engine.core.bll.storage.domain.AddLocalStorageDomainCommand.getReturnValue ( ) . setFault ( returnValue.getFault ( ) ) ; } } }
public org.ovirt.engine.ui.uicommonweb.models.GridTimer getTimer ( ) { if ( ( gettimer ( ) ) == null ) { settimer ( new org.ovirt.engine.ui.uicommonweb.models.GridTimer ( getListName ( ) ) { @ java.lang.Override public void execute ( ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine ( ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.this . getClass ( ) . getName ( ) ) + ": Executing search" ) ) ; syncSearch ( ) ; } } ) ; gettimer ( ) . setRefreshRate ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.getConfigurator ( ) . getPollingTimerInterval ( ) ) ; } return gettimer ( ) ; }
protected org.ovirt.engine.core.utils.lock.EngineLock acquireEngineLock ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.locks.LockingGroup group ) { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock ( java.util.Collections.singletonMap ( id.toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( group , EngineMessage.ACTION_TYPE_FAILED_VOLUME_OPERATION_IN_PROGRESS ) ) , null ) ; lockManager.acquireLockWait ( lock ) ; return lock ; }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > getCachedIsoListByStoragePoolAndDomainId ( org.ovirt.engine.core.compat.Guid isoStoragePoolId , org.ovirt.engine.core.compat.Guid isoStorageDomainId , org.ovirt.engine.core.common.businessentities.ImageType imageType ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > fileListMD = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > ( ) ; if ( ( ( isoStorageDomainId != null ) && ( isoStoragePoolId != null ) ) && ( ( org.ovirt.engine.core.bll.VmRunHandler.getInstance ( ) . findActiveISODomain ( isoStoragePoolId ) ) != null ) ) { fileListMD = repoStorageDom.getRepoListForStorageDomainAndStoragePool ( isoStoragePoolId , isoStorageDomainId , imageType ) ; } return fileListMD ; }
private void updateKeyTitle ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object ) { java.lang.String selectedKey = ( ( java.lang.String ) ( object.getKeys ( ) . getSelectedItem ( ) ) ) ; if ( selectedKey != null ) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltipUtils.setTooltipOnElement ( selectedKey , keyField.getElement ( ) ) ; } }
void localize ( org.ovirt.engine.ui.common.CommonApplicationConstants constants ) { nameEditor.setLabel ( constants.makeTemplatePopupNameLabel ( ) ) ; descriptionEditor.setLabel ( constants.makeTemplatePopupDescriptionLabel ( ) ) ; commentEditor.setLabel ( constants.commentLabel ( ) ) ; clusterEditor.setLabel ( constants.makeTemplateClusterLabel ( ) ) ; quotaEditor.setLabel ( constants.makeTemplateQuotaLabel ( ) ) ; isTemplatePublicEditor.setLabel ( constants.makeTemplateIsTemplatePublicEditorLabel ( ) ) ; copyVmPermissions.setLabel ( constants.copyVmPermissions ( ) ) ; disksAllocationLabel.setText ( constants.disksAllocation ( ) ) ; }
public org.ovirt.engine.sdk.entities.Response delete ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . delete ( url , org.ovirt.engine.sdk.entities.Response.class , headers ) ; }
public static void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private void updateItemSelectability ( org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel item , boolean isSelectable ) { org.ovirt.engine.ui.uicommonweb.models.Model model = ( ( org.ovirt.engine.ui.uicommonweb.models.Model ) ( item ) ) ; model.setIsSelectable ( isSelectable ) ; onStorageModelUpdated ( item ) ; }
public void isConnWithSameDetailsExistBlockDomains ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newISCSIConnection = createISCSIConnection ( "1.2.3.4" , StorageType.ISCSI , "iqn.2013-04.myhat.com:aaa-target1" , "3260" , "user1" , "mypassword123" ) ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection1 = createISCSIConnection ( "1.2.3.4" , StorageType.ISCSI , "iqn.2013-04.myhat.com:aaa-target1" , "3260" , "user1" , "mypassword123" ) ; org.mockito.Mockito.when ( iscsiStorageHelper.findConnectionWithSameDetails ( newISCSIConnection ) ) . thenReturn ( connection1 ) ; boolean isExists = command.isConnWithSameDetailsExists ( newISCSIConnection , null ) ; org.junit.Assert.assertTrue ( isExists ) ; }
public void testStorageDomainLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setId ( org.ovirt.engine.api.common.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; storageDomain.setStorage ( new org.ovirt.engine.api.model.HostStorage ( ) ) ; storageDomain.getStorage ( ) . setPath ( "foo" ) ; org.ovirt.engine.api.utils.LinkHelper.addLinks ( setUpUriExpectations ( ) , storageDomain ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.STORAGE_DOMAIN_HREF , storageDomain.getHref ( ) ) ; assertNull ( storageDomain.getStorage ( ) . getHref ( ) ) ; }
private static void mockStorageDomainStatic ( org.ovirt.engine.core.bll.ImportVmTemplateCommand command , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { final org.ovirt.engine.core.dao.StorageDomainStaticDAO dao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StorageDomainStaticDAO.class ) ; final org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic ( ) ; domain.setStorageType ( storageType ) ; org.mockito.Mockito.when ( dao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( domain ) ; org.mockito.Mockito.doReturn ( dao ) . when ( command ) . getStorageDomainStaticDAO ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDao ( ) . update ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getParameters ( ) . getNetwork ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : _clusters ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( cluster.getId ( ) , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getParameters ( ) . getNetwork ( ) ) ; } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded ( true ) ; }
public void testAddIncompleteParameters ( ) { org.ovirt.engine.api.model.StorageDomain model = new org.ovirt.engine.api.model.StorageDomain ( ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "StorageDomain" , "add" , "id|name" ) ; } }
protected boolean validateQuota ( org.ovirt.engine.core.compat.Guid quotaId ) { if ( ( quotaId == null ) || ( Guid.Empty.equals ( quotaId ) ) ) { return true ; } org.ovirt.engine.core.common.businessentities.Quota quota = quotaDao.getById ( quotaId ) ; if ( quota == null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; } if ( ! ( java.util.Objects.equals ( quota.getStoragePoolId ( ) , getStoragePoolId ( ) ) ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID ) ; } return true ; }
public static void getSearchResultsLimit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 100 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SearchResultsLimit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void generateEnumReaderSource ( org.ovirt.api.metamodel.concepts.EnumType type ) { org.ovirt.api.metamodel.tool.JavaClassName readerName = javaTypes.getJsonReaderName ( type ) ; javaBuffer.addLine ( "public class %1$s {" , readerName.getSimpleName ( ) ) ; javaBuffer.addLine ( ) ; generateEnumReadOne ( type ) ; generateEnumReadMany ( type ) ; javaBuffer.addLine ( "}" ) ; javaBuffer.addLine ( ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.hosts.HostBondInterfaceModel object ) { super . edit ( object ) ; labelsWidget.edit ( object.getLabelsModel ( ) ) ; bondSuggestEditor.setVisible ( true ) ; bondEditor.setVisible ( false ) ; labelsWidget.setVisible ( true ) ; info.setVisible ( false ) ; message.setVisible ( false ) ; layoutPanel.remove ( infoPanel ) ; layoutPanel.getElement ( ) . getStyle ( ) . setOverflow ( Overflow.HIDDEN ) ; asPopupPanel ( ) . setPixelSize ( 400 , 275 ) ; }
public org.ovirt.engine.sdk.decorators.HostNIC add ( org.ovirt.engine.sdk.decorators.HostNIC hostnic ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . add ( url , hostnic , org.ovirt.engine.sdk.entities.HostNIC.class , org.ovirt.engine.sdk.decorators.HostNIC.class , headers ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { hostsModel.stopProgress ( ) ; boolean isAllValidatePassed = true ; for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase : result.getReturnValue ( ) ) { isAllValidatePassed = isAllValidatePassed && ( returnValueBase.isValid ( ) ) ; if ( ! isAllValidatePassed ) { break ; } } if ( isAllValidatePassed ) { cancel ( ) ; } }
public void testExecuteQueryCommandWithEmptyList ( ) { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.mockito.Mockito.when ( params.getId ( ) ) . thenReturn ( imageId ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > expected = java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) ; org.mockito.Mockito.when ( storageDomainDaoMock.getAllStorageDomainsByImageId ( imageId ) ) . thenReturn ( expected ) ; org.ovirt.engine.core.bll.storage.domain.GetStorageDomainsByImageIdQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > query = getQuery ( ) ; query.executeQueryCommand ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( expected , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) , "Wrong result returned" ) ; }
protected void executeCommand ( ) { registerRollbackHandler ( new org.ovirt.engine.core.bll.UpdateMacPoolCommand.CustomTransactionCompletionListener ( ) ) ; getMacPoolDao ( ) . update ( getMacPoolEntity ( ) ) ; poolPerDc.modifyPool ( getMacPoolEntity ( ) ) ; setSucceeded ( true ) ; getReturnValue ( ) . setActionReturnValue ( getMacPoolId ( ) ) ; }
public void testUpdateSetAndUploadIconFailure ( ) { final org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel ( 0 ) ; model.setSmallIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler.createIcon ( GUIDS [ 2 ] ) ) ; model.setLargeIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler.createIconWithData ( ) ) ; try { verifyModel ( resource.update ( model ) , 0 ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BAD_REQUEST ) ; } }
private static org.ovirt.engine.core.common.businessentities.Cluster createDefaultCluster ( ) { org.ovirt.engine.core.common.businessentities.Cluster group = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; group.setName ( "Default" ) ; group.setId ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.DEFAULT_CLUSTER_ID ) ; group.setCpuName ( "Intel Conroe" ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_1 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.DC_ID1 ) ; group.setArchitecture ( ArchitectureType.x86_64 ) ; return group ; }
private org.ovirt.engine.core.bll.ValidationResult nicActuallyExistsOrReferencesNewBond ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { boolean nicActuallyExistsOrReferencesNewBond = isNicActuallyExistsOrReferencesNewBond ( attachment.getNicName ( ) , attachment.getNicId ( ) ) ; if ( nicActuallyExistsOrReferencesNewBond ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ; }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > getSnapshotDescriptionColumn ( java.lang.String sortBy ) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > ( ) { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . getVmSnapshotDescription ( ) ; } } ; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable ( column , sortBy ) ; }
public void isVmNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmWithSameNameExist , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel dataCenterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; dataCenterGuideModel.clusters = clusters ; dataCenterGuideModel.updateOptionsLocalFS ( ) ; }
public void getMaxNumOfCPUsPerSocket ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfCpuPerSocket ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
public void postOnSave ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.tags.TagModel ) ( getWindow ( ) ) ) ; model.stopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; getSearchCommand ( ) . execute ( ) ; } }
private void volumeType_SelectedItemChanged ( ) { if ( ( ( getVolumeType ( ) . getSelectedItem ( ) ) == null ) || ( ( getDataCenter ( ) . getSelectedItem ( ) ) == null ) ) { return ; } org.ovirt.engine.core.common.businessentities.VolumeType volumeType = ( ( org.ovirt.engine.core.common.businessentities.VolumeType ) ( getVolumeType ( ) . getSelectedItem ( ) ) ) ; org.ovirt.engine.core.common.businessentities.StorageType storageType = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) . getstorage_pool_type ( ) ; updateVolumeFormat ( volumeType , storageType ) ; updateShareable ( volumeType , storageType ) ; }
public void setLoggedInUser ( org.ovirt.engine.core.common.users.VdcUser value ) { if ( ( loggedInUser ) != value ) { loggedInUser = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "LoggedInUser" ) ) ; } }
public void testQuotaClusterByQuotaGuidWithGeneralDefaultNoDefault ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > quotaClusterList = dao.getQuotaClusterByQuotaGuidWithGeneralDefault ( FixturesTool.QUOTA_SPECIFIC ) ; org.junit.Assert.assertNotNull ( quotaClusterList ) ; org.junit.Assert.assertEquals ( "wrong number of quotas returned" , 2 , quotaClusterList.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.QuotaCluster group : quotaClusterList ) { org.junit.Assert.assertNotNull ( "VDS ID should not be null in specific mode" , group.getClusterId ( ) ) ; org.junit.Assert.assertNotNull ( "VDS name should not be null in specific mode" , group.getClusterName ( ) ) ; } }
protected boolean validateName ( java.lang.String newVmName , org.ovirt.engine.ui.uicommonweb.models.EntityModel entity , org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] validators ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel temp = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; temp.setIsValid ( true ) ; temp.setEntity ( newVmName ) ; temp.validateEntity ( validators ) ; if ( ! ( temp.getIsValid ( ) ) ) { entity.setInvalidityReasons ( temp.getInvalidityReasons ( ) ) ; entity.setIsValid ( false ) ; } return temp.getIsValid ( ) ; }
protected void unlockVm ( ) { if ( ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) ) != null ) { if ( ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { org.ovirt.engine.core.bll.VmHandler.unlockVm ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) , org.ovirt.engine.core.bll.VmCommand.getCompensationContext ( ) ) ; } } else { org.ovirt.engine.core.bll.VmCommand.setCommandShouldBeLogged ( false ) ; log.warn ( "VmCommand::EndVmCommand: Vm is null - not performing EndAction on Vm" ) ; } }
private boolean isNfsPathEditable ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { return ( ( ( storage.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Data ) ) || ( ( storage.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) ) && ( ( storage.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance ) ) ; }
protected final < T > javax.ws.rs.core.Response performCreate ( org.ovirt.engine.core.common.action.ActionType task , org.ovirt.engine.core.common.action.ActionParametersBase taskParams , org.ovirt.engine.api.restapi.resource.IResolver < T , Q > entityResolver , boolean block , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParentType ) { org.ovirt.engine.core.common.action.ActionReturnValue createResult = doCreateEntity ( task , taskParams ) ; return fetchCreatedEntity ( entityResolver , block , suggestedParentType , createResult ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > applyUserConfiguredNics ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > userConfiguredNics = new java.util.ArrayList < > ( ) ; userConfiguredNics.addAll ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getBonds ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingBondToRemove : getRemovedBonds ( ) ) { existingBondToRemove.setLabels ( null ) ; userConfiguredNics.add ( existingBondToRemove ) ; } return userConfiguredNics ; }
public void testImport ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setId ( GUIDS [ 2 ] . toString ( ) ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setId ( GUIDS [ 1 ] . toString ( ) ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID ) ; doTestImport ( storageDomain , cluster , false ) ; }
public void successfulConfFileConvertToMap ( ) throws java.io.IOException , java.net.URISyntaxException { givenListOfImagesAndVolumes ( ) ; givenTheWantedDiskImage ( ) ; mockVdcCommand ( ActionType.RetrieveImageData , successfulVdcReturnValue ( load ( "hosted-engine-config.tar" ) ) ) ; java.util.Map < java.lang.String , java.lang.String > config = fetchConfig ( ) ; verifyCalled ( ActionType.RetrieveImageData , org.mockito.Mockito.times ( 1 ) ) ; org.junit.Assert.assertThat ( config , org.hamcrest.Matchers.hasKey ( "sdUUID" ) ) ; org.junit.Assert.assertThat ( config , org.hamcrest.Matchers.hasKey ( "host_id" ) ) ; }
private void mockGetImagesList ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setReturnValue ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) ; org.mockito.Mockito.when ( vdsBrokerFrontend.RunVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.GetImagesList ) , org.mockito.Matchers.< org.ovirt.engine.core.common.vdscommands.VDSParametersBase > any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ) . thenReturn ( returnValue ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( int size ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setSizeInGigabytes ( size ) ; diskImage.setActualSize ( size ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; diskImage.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; diskImage.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singletonList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return diskImage ; }
private void run ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.VM a = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.RunVmParams ( a.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.RunVm , list , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
public org.ovirt.engine.core.common.businessentities.network_cluster mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network_cluster entity = new org.ovirt.engine.core.common.businessentities.network_cluster ( ) ; entity.setcluster_id ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "cluster_id" ) ) ) ; entity.setnetwork_id ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "network_id" ) ) ) ; entity.setstatus ( org.ovirt.engine.core.common.businessentities.NetworkStatus.forValue ( rs.getInt ( "status" ) ) ) ; entity.setis_display ( rs.getBoolean ( "is_display" ) ) ; entity.setRequired ( rs.getBoolean ( "required" ) ) ; return entity ; }
protected void initializeCommand ( org.ovirt.engine.core.common.businessentities.ImageOperation operation ) { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.MoveOrCopyDiskCommandDummy ( new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters ( diskImageGuid , srcStorageId , destStorageId , operation ) ) ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . acquireLock ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { allNetworks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) ; queryInterfaces ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > configureNetworks ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic , java.util.Set < org.ovirt.engine.core.common.businessentities.network.Network > networks , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > existingInterfaces ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > vlans = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : networks ) { configureNetwork ( nic , vlans , network , existingInterfaces ) ; } return vlans ; }
protected boolean checkSingleQxlDisplay ( ) { if ( ! ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getSingleQxlPci ( ) ) ) { return true ; } return org.ovirt.engine.core.bll.VmHandler.isSingleQxlDeviceLegal ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getDefaultDisplayType ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getOs ( ) , org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getValidationMessages ( ) , org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion ( ) ) ; }
public static void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc remove_image_ticket ( java.lang.String ticketId ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.remove_image_ticket ( ticketId ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties ( ) ; jobProperties.put ( "repoimagename" , getRepoImageName ( ) ) ; jobProperties.put ( "storage" , org.ovirt.engine.core.bll.ImportRepoImageCommand.getStorageDomainName ( ) ) ; } return jobProperties ; }
protected void expectGetLunsForVg ( java.lang.String vgId ) { org.ovirt.engine.core.dao.LunDAO dao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.LunDAO.class ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getLunDao ( ) ) . thenReturn ( dao ) ; org.mockito.Mockito.when ( dao.getAllForVolumeGroup ( vgId ) ) . thenReturn ( setUpLuns ( ) ) ; }
protected < T > T getEntity ( java.lang.Class < T > clz , org.ovirt.engine.core.common.interfaces.SearchType searchType , java.lang.String constraint ) { try { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery ( QueryType.Search , createSearchParameters ( searchType , constraint ) ) ; if ( ! ( result.getSucceeded ( ) ) ) { backendFailure ( result.getExceptionString ( ) ) ; } return castQueryResultToEntity ( clz , result , constraint ) ; } catch ( java.lang.Exception e ) { return handleError ( clz , e , false ) ; } }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void stats ( ) { long now = new java.util.Date ( ) . getTime ( ) ; if ( now > ( nextStats ) ) { nextStats = now + ( statsTTL ) ; for ( org.ovirt.engineextensions.aaa.ldap.Framework.ConnectionPoolEntry entry : connectionPools.values ( ) ) { org.ovirt.engineextensions.aaa.ldap.Framework.log.debug ( "Stats: {} {}" , entry.name , entry.connectionPool.getConnectionPoolStatistics ( ) ) ; } } }
public void testAddStorageDomainWithHostName ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Host host = new org.ovirt.engine.api.model.Host ( ) ; host.setName ( NAMES [ 0 ] ) ; setUpGetEntityExpectations ( VdcQueryType.GetVdsStaticByName , org.ovirt.engine.core.common.queries.NameQueryParameters.class , new java.lang.String [ ] { "Name" } , new java.lang.Object [ ] { NAMES [ 0 ] } , setUpVDStatic ( 0 ) ) ; doTestAddStorageDomain ( 0 , host , false ) ; }
public void disableGlusterWhenVolumesExist ( ) { createCommandWithVirtEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDAO.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; cpuExists ( ) ; cpuFlagsNotMissing ( ) ; allQueriesForVms ( ) ; clusterHasGlusterVolumes ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES ) ; }
public void versionDecreaseLowerVersionThanDC ( ) { createCommandWithOlderVersion ( true , false ) ; org.ovirt.engine.core.dao.StoragePoolDao storagePoolDao2 = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StoragePoolDao.class ) ; org.mockito.Mockito.when ( storagePoolDao2.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFSOldVersion ( ) ) ; org.mockito.Mockito.doReturn ( storagePoolDao2 ) . when ( cmd ) . getStoragePoolDao ( ) ; org.mockito.Mockito.doReturn ( storagePoolDao2 ) . when ( dbFacadeMock ) . getStoragePoolDao ( ) ; setupCpu ( ) ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION_UNDER_DC ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase Login ( java.lang.String userName , java.lang.String password , java.lang.String domain , org.ovirt.engine.core.common.action.VdcActionType loginType ) { org.ovirt.engine.core.common.action.LoginUserParameters params = new org.ovirt.engine.core.common.action.LoginUserParameters ( userName , password , domain , null , null , null ) ; params.setSessionId ( getSessionId ( ) ) ; params.setActionType ( loginType ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . Login ( params ) ; return returnValue ; }
public void testRemoveNonExistant ( ) { setUpEntityQueryExpectations ( QueryType.GetVnicProfileById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , null ) ; try { resource.remove ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfileResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { org.junit.jupiter.api.Assertions.assertNotNull ( wae.getResponse ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
private static org.ovirt.engine.core.common.businessentities.DiskImage mockDisk ( ) { org.ovirt.engine.core.compat.Guid diskGuid = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.compat.Guid itGuid = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; final org.ovirt.engine.core.common.businessentities.DiskImage expectedDisk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; expectedDisk.setImageId ( diskGuid ) ; expectedDisk.setImageTemplateId ( itGuid ) ; return expectedDisk ; }
protected org.ovirt.engine.core.common.businessentities.Cluster setUpClusterExpectations ( org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.Cluster group = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.Cluster.class ) ; org.mockito.Mockito.when ( group.getId ( ) ) . thenReturn ( id ) ; setUpEntityQueryExpectations ( VdcQueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { id } , group ) ; return group ; }
public void getClusterFeaturesByVersionAndCategory ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.mode.ApplicationMode category ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterFeaturesByVersionAndCategory , new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionAndCategoryParameters ( version , category ) , aQuery ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.scheduling.PolicyUnit object ) { if ( object.isInternal ( ) ) { setTitle ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.internalPolicyUnit ( ) ) ; return org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.resources.lockImage ( ) ; } setTitle ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.externalPolicyUnit ( ) ) ; return org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.resources.exteranlPolicyUnitImage ( ) ; }
private void auditLogForNoMetadataDescriptionUpdate ( org.ovirt.engine.core.common.AuditLogType auditLogType , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; auditLogableBase.addCustomValue ( "DataCenterName" , org.ovirt.engine.core.bll.UpdateVmDiskCommand.getStoragePool ( ) . getName ( ) ) ; auditLogableBase.addCustomValue ( "StorageDomainName" , storageDomain.getName ( ) ) ; auditLogableBase.addCustomValue ( "DiskName" , diskImage.getDiskAlias ( ) ) ; auditLogDirector.log ( auditLogableBase , auditLogType ) ; }
public org.ovirt.engine.ui.common.widget.HasUiCommandClickHandlers addFooterButton ( java.lang.String label , java.lang.String uniqueId ) { org.ovirt.engine.ui.common.widget.AbstractUiCommandButton button = createCommandButton ( label , uniqueId ) ; org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView.asWidget ( ) . addFooterButton ( button ) ; focusableButtons.add ( 0 , button ) ; button.asWidget ( ) . getElement ( ) . setId ( org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId ( elementId , uniqueId ) ) ; return button ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.storage_pool dc ) { setEnumTitle ( dc.getstatus ( ) ) ; switch ( dc.getstatus ( ) ) { case Contend : return getApplicationResources ( ) . waitImage ( ) ; case Maintenance : return getApplicationResources ( ) . maintenanceImage ( ) ; case NotOperational : case Problematic : case Uninitialized : return getApplicationResources ( ) . downImage ( ) ; case Up : return getApplicationResources ( ) . upImage ( ) ; default : break ; } return null ; }
public void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
private void writeApplicationMode ( javax.servlet.http.HttpServletRequest request , java.io.PrintWriter writer ) { java.lang.Integer applicationMode = getApplicationMode ( request ) ; if ( applicationMode != null ) { java.util.Map < java.lang.String , java.lang.String > appModeData = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; appModeData.put ( "value" , java.lang.String.valueOf ( applicationMode ) ) ; writeJsObject ( writer , "applicationMode" , appModeData ) ; } }
public int compare ( org.ovirt.engine.core.common.businessentities.Permission o1 , org.ovirt.engine.core.common.businessentities.Permission o2 ) { if ( getValue ( o1 ) . equals ( getValue ( o2 ) ) ) { return 0 ; } else { return org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn.resources.userImage ( ) . equals ( getValue ( o1 ) ) ? - 1 : 1 ; } }
public void testImportWithClusterName ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupByName , org.ovirt.engine.core.common.queries.NameQueryParameters.class , new java.lang.String [ ] { "Name" } , new java.lang.Object [ ] { NAMES [ 1 ] } , getCluster ( 1 ) ) ; org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setId ( GUIDS [ 2 ] . toString ( ) ) ; org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster ( ) ; cluster.setName ( NAMES [ 1 ] ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID ) ; doTestImport ( storageDomain , cluster , false ) ; }
public void getClusterGlusterSwiftService ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.gluster.GlusterClusterService > aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetFirstConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterClusterServiceByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
private static void addIpsByVersion ( org.ovirt.engine.api.model.Ips ips , java.util.List < java.lang.String > entityIps , org.ovirt.engine.api.model.IpVersion ipVersion ) { if ( entityIps != null ) { for ( java.lang.String entityIp : entityIps ) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip ( ) ; ip.setAddress ( entityIp ) ; ip.setVersion ( ipVersion ) ; ips.getIps ( ) . add ( ip ) ; } } }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpManagementNetworkExpectation ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateCluster , org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; final org.ovirt.engine.core.common.businessentities.Cluster updatedCluster = resource.update ( org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest.getModel ( 0 ) ) ; verifyModel ( updatedCluster , 0 ) ; verifyManagementNetwork ( updatedCluster ) ; }
public void testDoFilterFromRequest ( ) throws java.io.IOException , javax.servlet.ServletException { org.mockito.Mockito.when ( mockRequest.getLocale ( ) ) . thenReturn ( java.util.Locale.JAPANESE ) ; testFilter.doFilter ( mockRequest , mockResponse , mockChain ) ; org.mockito.Mockito.verify ( mockChain ) . doFilter ( mockRequest , mockResponse ) ; org.mockito.Mockito.verify ( mockResponse , org.mockito.Mockito.times ( 1 ) ) . addCookie ( ( ( javax.servlet.http.Cookie ) ( org.mockito.Mockito.any ( ) ) ) ) ; org.mockito.Mockito.verify ( mockRequest ) . setAttribute ( LocaleFilter.LOCALE , java.util.Locale.JAPAN ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , name , value ) ; }
protected void setAllowChangeHostPlacementPropertiesWhenNotInMaintenance ( ) { org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) ; getDataCenter ( ) . setChangeProhibitionReason ( constants.dcCanOnlyBeChangedWhenHostInMaintMode ( ) ) ; getDataCenter ( ) . setIsChangeable ( false ) ; getCluster ( ) . setChangeProhibitionReason ( constants.clusterCanOnlyBeChangedWhenHostInMaintMode ( ) ) ; getCluster ( ) . setIsChangeable ( false ) ; }
private void localize ( ) { lvNameEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.logicalVolume ( ) ) ; mountPointEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.mountPoint ( ) ) ; sizeEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.lvSize ( ) ) ; raidTypeEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.raidType ( ) ) ; noOfPhysicalDisksEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.noOfPhysicalDisksInRaidVolume ( ) ) ; stripeSizeEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.stripeSize ( ) ) ; deviceHeader.setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.storageDevices ( ) ) ; deviceSelectionInfo.setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.CreateBrickPopupView.constants.getStorageDeviceSelectionInfo ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getVdsStaticDao ( ) ) ; dynamicDao = prepareDAO ( dbFacade.getVdsDynamicDao ( ) ) ; statisticsDao = prepareDAO ( dbFacade.getVdsStatisticsDao ( ) ) ; existingVds = dao.get ( FixturesTool.VDS_GLUSTER_SERVER2 ) ; newStaticVds = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; newStaticVds.sethost_name ( "farkle.redhat.com" ) ; newStaticVds.setvds_group_id ( existingVds.getvds_group_id ( ) ) ; newStaticVds.setSSHKeyFingerprint ( "b5:ad:16:19:06:9f:b3:41:69:eb:1c:42:1d:12:b5:31" ) ; }
public static java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > findGroupsByIds ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.util.List < java.lang.String > ids ) { java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > results = new java.util.ArrayList < > ( ) ; for ( java.util.List < java.lang.String > batch : org.ovirt.engine.core.aaa.SearchQueryParsingUtils.getIdsBatches ( extension.getContext ( ) , ids ) ) { results.addAll ( org.ovirt.engine.core.aaa.AuthzUtils.queryGroups ( extension , org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap ( batch , QueryEntity.GROUP ) ) ) ; } return results ; }
private void fillConnectionDetailsIfNeeded ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { if ( ( connection.getid ( ) ) == null ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections dbConnection = org.ovirt.engine.core.bll.storage.ISCSIStorageHelper.findConnectionWithSameDetails ( connection ) ; if ( dbConnection != null ) { connection.setid ( dbConnection.getid ( ) ) ; } } }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolumeEntity = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( getEntity ( ) ) ) ; setItems ( glusterVolumeEntity.getBricks ( ) ) ; } else { setItems ( null ) ; } updateRemoveBrickActionsAvailability ( ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( getEntity ( ) ) ) ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < org.ovirt.engine.core.bll.utils.PermissionSubject > ( ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( org.ovirt.engine.core.bll.VdsGroupCommandBase.getParameters ( ) . getVdsGroupId ( ) , org.ovirt.engine.core.common.VdcObjectType.VdsGroups , org.ovirt.engine.core.bll.VdsGroupCommandBase.getActionType ( ) . getActionGroup ( ) ) ) ; return permissionList ; }
private void verifyModelSpecific ( org.ovirt.engine.api.model.NetworkFilterParameter model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.Assert.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.VALUES [ index ] , model.getValue ( ) ) ; org.junit.Assert.assertTrue ( model.isSetNic ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.VM_NIC_ID.toString ( ) , model.getNic ( ) . getId ( ) ) ; }
public void testAddHostedEngineStorageSucceeds ( ) { parameters.getStorageDomain ( ) . setStorageName ( StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME ) ; org.mockito.Mockito.when ( command.getStorageDomainStaticDao ( ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command.getStorageDomain ( ) . getStorageStaticData ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.utils.Pair ( sdStatic , sdStatic.getId ( ) ) ) . when ( command ) . executeHSMGetStorageDomainInfo ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( command ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > watchdogs = getWatchdogs ( ) ; if ( watchdogs.isEmpty ( ) ) { return failCanDoAction ( VdcBllMessages.WATCHDOG_NOT_FOUND ) ; } if ( ! ( validate ( getVmWatchdogValidator ( ) . isModelCompatibleWithOs ( ) ) ) ) { return false ; } return true ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.Disk disk = ( ( org.ovirt.engine.core.common.businessentities.Disk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; setTitle ( ( disk.isShareable ( ) ? constants.shareable ( ) : null ) ) ; return disk.isShareable ( ) ? resources.shareableDiskIcon ( ) : null ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions ) { if ( ( ( session.getSlaveVolumeId ( ) ) == null ) || ( ( session.getSlaveNodeUuid ( ) ) == null ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE ) ; } } if ( ( ( snapshots ) == null ) || ( snapshots.isEmpty ( ) ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST , getGlusterVolumeName ( ) ) ; } return true ; }
private void handleVdsLiveSnapshotFailure ( org.ovirt.engine.core.common.errors.EngineException e ) { handleVmFailure ( e , AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE , ( "Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}" ) ) ; }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > > aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
private void addPowerManagementListener ( final org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model ) { model.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( ! ( "IsPowerManagementTabSelected" . equals ( propName ) ) ) { return ; } if ( model.getIsPowerManagementTabSelected ( ) ) { getView ( ) . showPowerManagement ( ) ; } } } ) ; }
public void cluster_SelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateMinAllocatedMemory ( ) ; updateNumOfSockets ( ) ; if ( ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; updateQuotaByCluster ( template.getQuotaId ( ) , template.getQuotaName ( ) ) ; } updateCpuPinningVisibility ( ) ; }
public void storageDomainNotOperational ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.compat.Guid storagePoolId ) { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( storageDomainId , storagePoolId ) ; parameters.setIsInternal ( true ) ; parameters.setInactive ( true ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.DeactivateStorageDomain , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; }
public void testRemoveNotFound ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetNetworkById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworkResourceTest.NETWORK_ID } , null , null ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void testValidateVmUpLiveMergeSupported ( ) { prepareForVmValidatorTests ( ) ; cmd.getVm ( ) . setStatus ( VMStatus.Up ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . isDiskPlugged ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . isLiveMergeSupported ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmQualifiedForSnapshotMerge ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( vmValidator ) . vmHostCanLiveMerge ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateStorageDomainAvailableSpace ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public void testNeedToProcessHardwareCapsFalse ( ) { org.ovirt.engine.core.common.businessentities.VDS oldVds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; oldVds.setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; oldVds.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; oldVds.setCpuFlags ( "flag1" ) ; org.ovirt.engine.core.common.businessentities.VDS newVds = oldVds.clone ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( virtStrategy.processHardwareCapabilitiesNeeded ( oldVds , newVds ) ) ; }
public void init ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { setDiskImages ( diskImages ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDiskList ( new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > ( ) { @ java.lang.Override public void onSuccess ( java.util.List diskImages ) { onInitAllDisks ( diskImages ) ; onInitDisks ( ) ; } } ) ) ; }
public static void getDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 5 ) ; }
public void canDoActionSpaceValidationSucceeds ( ) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , VolumeType.Preallocated ) ; mockVm ( ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; mockInterfaceList ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddDiskToVmCommandTest.mockStorageDomainValidatorWithSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
private void initVmPropertiesUtils ( ) { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils vmPropertiesUtils = org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance ( ) ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.class , vmPropertiesUtils ) ; }
public boolean increase ( T key , boolean allowDuplicate ) { org.ovirt.engine.core.bll.network.macpoolmanager.ObjectCounter.Counter counter = map.get ( key ) ; if ( counter == null ) { map.put ( key , new org.ovirt.engine.core.bll.network.macpoolmanager.ObjectCounter.Counter ( ) ) ; return true ; } else if ( allowDuplicate ) { counter.increase ( ) ; return true ; } else { return false ; } }
public void testGetAllWithQuery ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.NetworkView > result = dao.getAllWithQuery ( java.lang.String.format ( "SELECT * FROM network_view where id = '%s'" , FixturesTool.NETWORK_ENGINE ) ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( FixturesTool.NETWORK_ENGINE , result.get ( 0 ) . getNetwork ( ) . getId ( ) ) ; }
private java.lang.String getDiskIsBeingRemovedLockMessage ( ) { if ( ( cachedDiskIsBeingRemovedLockMessage ) == null ) { cachedDiskIsBeingRemovedLockMessage = new java.lang.StringBuilder ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_BEING_REMOVED.name ( ) ) . append ( java.lang.String.format ( "$DiskName %1$s" , getDiskAlias ( ) ) ) . toString ( ) ; } return cachedDiskIsBeingRemovedLockMessage ; }
public org.ovirt.engine.core.common.businessentities.VM getVm ( ) { org.ovirt.engine.core.common.businessentities.VM vm = super . getVm ( ) ; if ( vm == null ) { vm = org.ovirt.engine.core.bll.lsm.LiveMigrateDiskCommand.getVmDao ( ) . getVmsListForDisk ( org.ovirt.engine.core.bll.lsm.LiveMigrateDiskCommand.getImageGroupId ( ) , false ) . get ( 0 ) ; setVm ( vm ) ; setVmId ( vm.getId ( ) ) ; } return vm ; }
public void testMoveBySdId ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , getEntity ( 1 ) ) ; setUriInfo ( setUpActionExpectations ( ActionType.MoveDisk , org.ovirt.engine.core.common.action.MoveDisksParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } ) ) ; verifyActionResponse ( resource.move ( setUpMoveParams ( false ) ) ) ; }
public void testFailToRemoveDefaultQuota ( ) { quota.setDefault ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED ) ; }
private void registerIconDefaultsProvider ( ) { final org.ovirt.engine.core.utils.ovf.OvfVmIconDefaultsProvider ovfVmIconDefaultsProvider = new org.ovirt.engine.core.utils.ovf.OvfVmIconDefaultsProvider ( ) { @ java.lang.Override public java.util.Map < java.lang.Integer , org.ovirt.engine.core.common.queries.VmIconIdSizePair > getVmIconDefaults ( ) { final org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runInternalQuery ( VdcQueryType.GetVmIconDefaults , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ; return queryReturnValue.getReturnValue ( ) ; } } ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.utils.ovf.OvfVmIconDefaultsProvider.class , ovfVmIconDefaultsProvider ) ; }
public void put ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.Guid rootCommandId , org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase params , org.ovirt.engine.core.compat.CommandStatus status ) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = buildCommandEntity ( commandId , rootCommandId , actionType , params , status ) ; commandMap.put ( commandId , cmdEntity ) ; cmdEntityDao.saveOrUpdate ( cmdEntity ) ; }
public void calculateFreeVirtualMemory ( ) { if ( ( ( ( getmem_commited ( ) ) != null ) && ( ( getphysical_mem_mb ( ) ) != null ) ) && ( ( getreserved_mem ( ) ) != null ) ) { maxSchedulingMemory = ( ( ( getmax_vds_memory_over_commit ( ) ) * ( getphysical_mem_mb ( ) ) ) / 100.0F ) - ( ( getmem_commited ( ) ) + ( getreserved_mem ( ) ) ) ; maxSchedulingMemory = ( ( maxSchedulingMemory ) > 0 ) ? maxSchedulingMemory : 0 ; } }
public void render ( org.ovirt.engine.ui.webadmin.widget.table.cell.Context context , T value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( ! ( isVisible ( value ) ) ) { return ; } com.google.gwt.resources.client.ImageResource image = resources.expanderDownImage ( ) ; com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( image ) . getHTML ( ) ) ; sb.append ( templates.volumeActivityMenu ( imageHtml ) ) ; }
public void testEmptyListResponse ( ) { java.util.List < org.ovirt.engine.sdk4.types.StorageDomain > storageDomains = storageDomainsService.list ( ) . send ( ) . storageDomains ( ) ; org.junit.Assert.assertNotNull ( storageDomains ) ; org.junit.Assert.assertEquals ( new java.util.ArrayList < org.ovirt.engine.sdk4.types.StorageDomain > ( ) , storageDomains ) ; }
protected boolean validateSnapshotType ( ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao ( ) . get ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getParameters ( ) . getSnapshotId ( ) ) ; return validate ( createSnapshotValidator ( ) . snapshotTypeSupported ( snapshot , java.util.Collections.singletonList ( Snapshot.SnapshotType.REGULAR ) ) ) ; }
public boolean test ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface otherIface ) { if ( ( iface ) == otherIface ) { return true ; } if ( otherIface == null ) { return false ; } org.apache.commons.lang.builder.EqualsBuilder eb = new org.apache.commons.lang.builder.EqualsBuilder ( ) ; eb.append ( iface.getName ( ) , otherIface.getName ( ) ) ; eb.append ( iface.getAddress ( ) , otherIface.getAddress ( ) ) ; return eb.isEquals ( ) ; }
public java.util.concurrent.Future < java.lang.Void > close ( ) { final java.util.concurrent.Callable < java.lang.Void > callable = new java.util.concurrent.Callable < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void call ( ) { closeChannel ( ) ; return null ; } } ; return scheduleTask ( callable ) ; }
public static void initCache ( org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cacheConfigValues ( new org.ovirt.engine.ui.frontend.AsyncQuery ( loginModel , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( target ) ; } } ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initOsNames ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initUniqueOsNames ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initLinuxOsTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initWindowsOsTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initDisplayTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initNicHotplugSupportMap ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initDiskHotpluggableInterfacesMap ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.ResizeStorageDomainPVMapReturnForXmlRpc resizeStorageDomainPV ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String device ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "StorageDomain.resizePV" ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "guid" , device ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "size" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.ResizeStorageDomainPVMapReturnForXmlRpc ( response ) ; }
protected boolean isVmInUpPausedDownStatus ( ) { if ( ( ( ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) && ( ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ) && ( ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) { return org.ovirt.engine.core.bll.AbstractDiskVmCommand.failVmStatusIllegal ( ) ; } return true ; }
public void validateSucceedsWhenGlusterServerHasPeersThatExistInDB ( ) throws java.lang.Exception { setupGlusterMock ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( glusterDBUtils.serverExists ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.eq ( org.ovirt.engine.core.bll.hostdeploy.AddVdsCommandTest.PEER_1 ) ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { if ( ( object.getVmEntityType ( ) ) == null ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.unattachedDisk ( ) ) ; } else { java.lang.String status = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance ( ) . translate ( object.getVmEntityType ( ) ) ; return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( status ) ; } }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.quota.QuotaModel object ) { this . model = object ; if ( ! ( firstTime ) ) { registerHandlers ( ) ; firstTime = true ; updateSliders ( ) ; } quotaClusterTable.edit ( object.getQuotaClusters ( ) ) ; quotaStorageTable.edit ( object.getQuotaStorages ( ) ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.quota.QuotaPopupView.Driver.driver.edit ( object ) ; }
public static boolean isBondVlan ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > interfaces , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { if ( org.ovirt.engine.core.common.utils.NetworkCommonUtils.isVlan ( iface ) ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : interfaces ) { if ( ( java.lang.Boolean.TRUE.equals ( i.getBonded ( ) ) ) && ( i.getName ( ) . equals ( iface.getBaseInterface ( ) ) ) ) { return true ; } } } return false ; }
public void hideSuggestionBox ( ) { searchStringInput.hideSuggestion ( ) ; }
public void testGlobalSpiceProxy ( ) { org.ovirt.engine.api.restapi.types.VM entity = new org.ovirt.engine.api.restapi.types.VM ( ) ; org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.types.VmMapper.map ( entity , ( ( org.ovirt.engine.api.model.Vm ) ( null ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.types.VmMapperTest.GLOBAL_SPICE_PROXY , model.getDisplay ( ) . getProxy ( ) ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpVDSGroupExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpEntityQueryExpectations ( 2 , false , false , false ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.DetachNetworkToVdsGroup , org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter.class , new java.lang.String [ ] { "VdsGroupId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void testAddIncompleteParameters2 ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = org.ovirt.engine.api.restapi.resource.BackendVmDisksResourceTest.getModel ( ) ; model.setProvisionedSize ( null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; org.junit.Assert.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Disk" , "testAddIncompleteParameters2" , "provisionedSize|size" ) ; } }
public void testGetLunsThatBreakPassDiscardFunctionalityDiscardFunctionalityDoesntBreak ( ) { createVmDiskOnSd ( false , false ) ; createVmDiskOnSd ( false , true ) ; assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 2048L ) ) , java.util.Collections.emptyList ( ) ) ; }
protected org.ovirt.engine.core.common.action.ImportVmParameters createParameters ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = createVmWithSnapshots ( ) ; vm.setName ( "testVm" ) ; org.ovirt.engine.core.compat.Guid clusterId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; vm.setClusterId ( clusterId ) ; return new org.ovirt.engine.core.common.action.ImportVmParameters ( vm , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) , clusterId ) ; }
public boolean isMemoryHotUnplugSupported ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( vm == null ) { return false ; } return isMemoryHotUnplugSupportedByArchitecture ( vm.getClusterArch ( ) , vm.getCompatibilityVersion ( ) ) ; }
public static void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
protected boolean checkNumberOfMonitors ( ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.GraphicsType > graphicsTypes = org.ovirt.engine.core.bll.VmHandler.getResultingVmGraphics ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.getGraphicsTypesOfEntity ( org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId ( ) ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getGraphicsDevices ( ) ) ; int numOfMonitors = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getNumOfMonitors ( ) ; return org.ovirt.engine.core.bll.VmHandler.isNumOfMonitorsLegal ( graphicsTypes , numOfMonitors , org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
private static void doTestNoStringSubstitution ( java.lang.String name ) { java.util.Locale locale = java.util.Locale.ENGLISH ; try { java.util.Locale.setDefault ( java.util.Locale.ENGLISH ) ; org.ovirt.engine.core.common.interfaces.ErrorTranslator et = new org.ovirt.engine.core.utils.ErrorTranslatorImpl ( name ) ; java.lang.String error = et.translateErrorTextSingle ( org.ovirt.engine.core.utils.ErrorTranslatorTest.TEST_KEY_NO_REPLACEMENT ) ; org.junit.jupiter.api.Assertions.assertEquals ( "VM not found" , error , "String should equal" ) ; } finally { java.util.Locale.setDefault ( locale ) ; } }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > geoRepSessions ) { model.getGeoRepSession ( ) . setItems ( geoRepSessions ) ; if ( geoRepSessions.isEmpty ( ) ) { model.setMessage ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . noGeoRepSessionForGlusterVolume ( ) ) ; } model.stopProgress ( ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.MainModelProvider < org.ovirt.engine.core.common.businessentities.AuditLog , org.ovirt.engine.ui.uicommonweb.models.events.EventListModel < java.lang.Void > > modelProvider , org.ovirt.engine.ui.webadmin.widget.tab.WebadminMenuLayout menuLayout ) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails menuTabDetails = menuLayout.getDetails ( WebAdminApplicationPlaces.eventMainTabPlace ) ; return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( menuTabDetails.getSecondaryTitle ( ) , menuTabDetails.getSecondaryPriority ( ) , menuTabDetails.getPrimaryTitle ( ) , menuTabDetails.getPrimaryPriority ( ) , modelProvider , menuTabDetails.getIcon ( ) ) ; }
private static org.ovirt.engine.core.bll.IconLoader.ResolvedIcon resolveIconName ( java.nio.file.Path dir , java.lang.String osName ) { for ( org.ovirt.engine.core.bll.validator.IconValidator.FileType fileType : IconValidator.FileType.values ( ) ) { for ( java.lang.String extension : fileType.getExtensions ( ) ) { final java.nio.file.Path iconPath = dir.resolve ( ( ( osName + "." ) + extension ) ) ; if ( iconPath.toFile ( ) . exists ( ) ) { return new org.ovirt.engine.core.bll.IconLoader.ResolvedIcon ( iconPath , fileType ) ; } } } throw new java.lang.RuntimeException ( ( ( ( "Icon for " + osName ) + " was not found in " ) + dir ) ) ; }
public void testValidateClusterSupportForVirtioScsi ( ) { org.ovirt.engine.core.bll.ImportVmCommand < org.ovirt.engine.core.common.action.ImportVmParameters > cmd = setupDiskSpaceTest ( createParameters ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.Matchers.any ( java.util.Map.class ) ) ; cmd.getParameters ( ) . getVm ( ) . getDiskMap ( ) . values ( ) . iterator ( ) . next ( ) . setDiskInterface ( DiskInterface.VirtIO_SCSI ) ; cmd.getCluster ( ) . setCompatibilityVersion ( Version.v3_2 ) ; cmd.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL ) ; }
public void testCronExpressionForWeeklyNoDays ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule ( ) ; schedule.setFrequency ( Frequency.WEEKLY ) ; schedule.setHour ( 12 ) ; schedule.setMins ( 50 ) ; java.lang.String expectedExpression = "" ; org.junit.Assert.assertEquals ( expectedExpression , schedule.toCronExpression ( ) ) ; java.util.List < java.lang.Class < ? > > validationGroup = new java.util.ArrayList < > ( ) ; java.util.List < java.lang.String > result = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs ( validationGroup , schedule ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.QuotaStorage > getQuotaStorages ( long storageSize , double storageSizeUsed ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.QuotaStorage > quotaStorages = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.QuotaStorage > ( ) ; quotaStorages.add ( getQuotaStorage ( org.ovirt.engine.core.bll.quota.QuotaManagerTest.UNLIMITED_STORAGE , 0 ) ) ; quotaStorages.add ( getQuotaStorage ( 50 , 5 ) ) ; quotaStorages.get ( 0 ) . setStorageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; quotaStorages.get ( 1 ) . setStorageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; quotaStorages.add ( getQuotaStorage ( storageSize , storageSizeUsed ) ) ; return quotaStorages ; }
public static java.util.Map < org.ovirt.engine.core.compat.Version , java.util.List < java.lang.String > > getCustomPropertiesList ( ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.customPropertiesList ; }
public void getVmNextRunConfiguration ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmNextRunConfiguration , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public org.ovirt.vdsm.jsonrpc.client.JsonRpcClient register ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client ) { final org.ovirt.vdsm.jsonrpc.client.JsonRpcClient jsonRpcClient = new org.ovirt.vdsm.jsonrpc.client.JsonRpcClient ( client ) ; client.addEventListener ( new org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener ( ) { @ java.lang.Override public void onMessageReceived ( byte [ ] message ) { queue.add ( new org.ovirt.vdsm.jsonrpc.client.internal.MessageContext ( jsonRpcClient , message ) ) ; } } ) ; return jsonRpcClient ; }
private void setupParentPopulateExpectations ( boolean notFound ) { org.easymock.EasyMock.expect ( bricksResourceMock.populateAdvancedDetails ( org.easymock.EasyMock.isA ( org.ovirt.engine.api.model.GlusterBrick.class ) , org.easymock.EasyMock.isA ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.class ) ) ) . andDelegateTo ( new org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource ( ) { @ java.lang.Override protected org.ovirt.engine.api.model.GlusterBrick populateAdvancedDetails ( org.ovirt.engine.api.model.GlusterBrick model , org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { model.setPort ( GlusterTestHelper.BRICK_PORT ) ; model.setMntOptions ( GlusterTestHelper.BRICK_MNT_OPT ) ; return model ; } } ) . anyTimes ( ) ; }
public static void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void revealDiskPanel ( final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk ) { boolean isInVm = ( disk.getVm ( ) ) != null ; diskTypePanel.setVisible ( isNewLunDiskEnabled ) ; externalDiskPanel.setVisible ( ( ( isNewLunDiskEnabled ) && ( ( disk.getDiskStorageType ( ) . getEntity ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.LUN ) ) ) ) ; aliasEditor.setFocus ( ( ! isInVm ) ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.LunDisk > filterDiskBasedOnLuns ( java.util.Collection < org.ovirt.engine.core.common.businessentities.Disk > listOfDisks ) { java.util.List < org.ovirt.engine.core.common.businessentities.LunDisk > lunDisks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LunDisk > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Disk disk : listOfDisks ) { if ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN ) ) { lunDisks.add ( ( ( org.ovirt.engine.core.common.businessentities.LunDisk ) ( disk ) ) ) ; } } return lunDisks ; }
protected void handlePlaceTransition ( ) { if ( ( hasSelection ( ) ) && ( hasSelectionDetails ( ) ) ) { placeManager.revealPlace ( getSubTabRequest ( ) ) ; } else { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible ( false ) ; placeManager.revealPlace ( org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getMainTabRequest ( ) ) ; } }
protected void moveOrCopyAllImageGroups ( org.ovirt.engine.core.compat.Guid containerID , java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > disks ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : disks ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext ( VdcActionType.CopyImageGroup , buildMoveOrCopyImageGroupParametersForDisk ( disk , containerID ) ) ; if ( ! ( vdcRetValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( vdcRetValue.getFault ( ) . getError ( ) , "ImportVmCommand::MoveOrCopyAllImageGroups: Failed to copy disk!" ) ; } getReturnValue ( ) . getVdsmTaskIdList ( ) . addAll ( vdcRetValue.getInternalVdsmTaskIdList ( ) ) ; } }
public void validateFailsWhenGlusterMultipleHostHasVolumesWithForce ( ) throws java.lang.Exception { command.getParameters ( ) . setForceAction ( true ) ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockHasMultipleClusters ( true ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
private void initListBoxEditors ( ) { isoImageEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.common.businessentities.storage.RepoImage > ( ) { @ java.lang.Override protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.storage.RepoImage object ) { if ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( object.getRepoImageName ( ) ) ) { return object.getRepoImageId ( ) ; } return object.getRepoImageName ( ) ; } } ) ; isoImageEditor.asListBox ( ) . setDropdownHeight ( "300px" ) ; }
protected org.ovirt.engine.core.bll.SPMAsyncTask ConcreteCreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parametersForTask = getParametersForTask ( parentCommand , getParameters ( ) ) ; org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters ( asyncTaskCreationInfo , new org.ovirt.engine.core.common.businessentities.async_tasks ( parentCommand , org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success , org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running , asyncTaskCreationInfo.getTaskID ( ) , parametersForTask , asyncTaskCreationInfo.getStepId ( ) , getCommandId ( ) ) ) ; p.setEntityId ( getParameters ( ) . getEntityId ( ) ) ; return org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . CreateTask ( getTaskType ( ) , p ) ; }
public void initialize ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem ) { super . initialize ( systemTreeSelectedItem ) ; getModel ( ) . getVmType ( ) . setIsChangeable ( true ) ; getModel ( ) . getPoolStateful ( ) . setIsChangeable ( true ) ; templateValidate ( ) ; instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager ( getModel ( ) ) ; getModel ( ) . getVmInitModel ( ) . init ( null ) ; getModel ( ) . getDisksAllocationModel ( ) . initializeAutoSelectTarget ( true , false ) ; }
protected void updateDetailsAvailability ( ) { super . updateDetailsAvailability ( ) ; org.ovirt.engine.core.common.businessentities.Provider provider = getSelectedItem ( ) ; if ( provider != null ) { providerNetworkListModel.setIsAvailable ( provider.getType ( ) . getProvidedTypes ( ) . contains ( VdcObjectType.Network ) ) ; providerSecretListModel.setIsAvailable ( ( ( provider.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_VOLUME ) ) ) ; } }
public static void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.image_storage_domain_map imageStorageDomainMap ) { try { org.ovirt.engine.core.bll.ImagesHandler.addImage ( image , active , imageStorageDomainMap ) ; org.ovirt.engine.core.bll.ImagesHandler.addDisk ( image ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.ImagesHandler.log.error ( "Failed adding new disk image and related entities to db: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.log.debug ( "Exception" , ex ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.DB , ex ) ; } }
protected boolean activateOrDeactivateNic ( org.ovirt.engine.core.compat.Guid nicId , org.ovirt.engine.core.common.action.PlugAction plugAction , java.lang.String oldMacAddress ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getBackend ( ) . runInternalAction ( VdcActionType.ActivateDeactivateVmNic , createActivateDeactivateParameters ( nicId , plugAction , oldMacAddress ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { propagateFailure ( returnValue ) ; } return returnValue.getSucceeded ( ) ; }
public static void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; }
public void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.network.IPv4Address createIPv4Address ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic ) { org.ovirt.engine.core.common.businessentities.network.IPv4Address result = new org.ovirt.engine.core.common.businessentities.network.IPv4Address ( ) ; if ( ( nic.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP ) ) { result.setAddress ( nic.getAddress ( ) ) ; result.setNetmask ( nic.getSubnet ( ) ) ; result.setGateway ( nic.getGateway ( ) ) ; } result.setBootProtocol ( nic.getBootProtocol ( ) ) ; return result ; }
private void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUpGetTagsExpectations ( true ) ; setUriInfo ( setUpActionExpectations ( ActionType.DetachTemplateFromTag , org.ovirt.engine.core.common.action.AttachEntityToTagParameters.class , new java.lang.String [ ] { "TagId" , "EntitiesId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendTemplateTagResourceTest.TAG_ID , asList ( org.ovirt.engine.api.restapi.resource.BackendTemplateTagResourceTest.TEMPLATE_ID ) } , valid , success ) ) ; verifyFault ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , resource :: remove ) , detail ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.FencingPolicy ) ) { return false ; } org.ovirt.engine.core.common.businessentities.FencingPolicy other = ( ( org.ovirt.engine.core.common.businessentities.FencingPolicy ) ( obj ) ) ; return ( ( ( ( fencingEnabled ) == ( other.fencingEnabled ) ) && ( ( skipFencingIfSDActive ) == ( other.skipFencingIfSDActive ) ) ) && ( ( skipFencingIfConnectivityBroken ) == ( other.skipFencingIfConnectivityBroken ) ) ) && ( ( hostsWithBrokenConnectivityThreshold ) == ( other.hostsWithBrokenConnectivityThreshold ) ) ; }
public void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
public void testCompleteWhenNicNameReferencesExistingNic ( ) { org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleterTest.TestAccessors withNameSet = new org.ovirt.engine.core.bll.network.host.NicNameNicIdCompleterTest.TestAccessors ( ) ; withNameSet.setName ( nic.getName ( ) ) ; completer.complete ( withNameSet ) ; org.hamcrest.MatcherAssert.assertThat ( withNameSet.getName ( ) , org.hamcrest.CoreMatchers.is ( nic.getName ( ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( withNameSet.getId ( ) , org.hamcrest.CoreMatchers.is ( nic.getId ( ) ) ) ; }
public void testAllowRhel6InRhel7 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = createBaseVds ( ) ; vdsFromDb.setHostOs ( "RHEL - 7Server - 1.el7" ) ; vds.setHostOs ( "RHEL - 6Server - 6.5.0.1.el6" ) ; cluster.setClusterPolicyId ( ClusterPolicy.UPGRADE_POLICY_GUID ) ; virtStrategy.processSoftwareCapabilities ( vds ) ; org.junit.Assert.assertNotEquals ( vds.getStatus ( ) , VDSStatus.NonOperational ) ; }
protected void executeCommand ( ) { AddCustomValue ( "InterfaceType" , org.ovirt.engine.core.common.businessentities.VmInterfaceType.forValue ( org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand.getParameters ( ) . getInterface ( ) . getType ( ) ) . getInterfaceTranslation ( ) . toString ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDao ( ) . update ( org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand.getParameters ( ) . getInterface ( ) ) ; org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand.setSucceeded ( true ) ; }
public boolean canConnect ( ) { return ( ( ( getEntity ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown ) ) ) && ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( getEntity ( ) . getVmOsId ( ) ) ) ; }
protected void executeCommand ( ) { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getConnection ( ) . getid ( ) ; getStorageServerConnectionDao ( ) . remove ( connectionId ) ; log.info ( "Removing connection '{}' from database " , connectionId ) ; if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getParameters ( ) . getVdsId ( ) ) ) { log.info ( "No vdsId passed - hosts will not be disconnected." ) ; } else { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.disconnectStorage ( ) ; } org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.setSucceeded ( true ) ; }
void initTable ( ) { getTable ( ) . enableColumnResizing ( ) ; org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.VM > nameColumn = new org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.VM > ( ) { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getName ( ) ; } } ; nameColumn.makeSortable ( ) ; getTable ( ) . addColumn ( nameColumn , constants.nameVm ( ) , "300px" ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getStoragePoolDao ( ) ) ; existingPool = dao.get ( new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ) ; existingPool.setstatus ( StoragePoolStatus.Up ) ; vds = new org.ovirt.engine.core.compat.Guid ( "afce7a39-8e8c-4819-ba9c-796d316592e6" ) ; vdsGroup = new org.ovirt.engine.core.compat.Guid ( "b399944a-81ab-4ec5-8266-e19ba7c3c9d1" ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( "72e3a666-89e1-4005-a7ca-f7548004a9ab" ) ; newPool = new org.ovirt.engine.core.common.businessentities.storage_pool ( ) ; newPool.setname ( "newPoolDude" ) ; newPool.setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( "3.0" ) ) ; }
private org.ovirt.engine.core.compat.Guid getDisksStorageDomainId ( ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.AddDiskCommand.getVm ( ) . getDiskMap ( ) . values ( ) ) { if ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) { return ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) . getStorageIds ( ) . get ( 0 ) ; } } return org.ovirt.engine.core.compat.Guid.Empty ; }
public void testGetAllForRunningForVds ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDynamic > result = dao.getAllRunningForVds ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.VmDynamicDaoTest.DYNAMIC_RUNNING_COUNT , result.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmDynamic vmdynamic : result ) { org.junit.Assert.assertEquals ( FixturesTool.VDS_RHEL6_NFS_SPM , vmdynamic.getRunOnVds ( ) ) ; } }
private org.ovirt.engine.core.common.businessentities.network.Network getPersistedNetwork ( ) { if ( ( persistedNetwork ) == null ) { persistedNetwork = org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getNetworkDAO ( ) . get ( getNetwork ( ) . getId ( ) ) ; } return persistedNetwork ; }
protected void doEdit ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel model ) { driver.edit ( model ) ; monitorCount.setText ( java.lang.Integer.toString ( getModel ( ) . getMonitorCount ( ) ) ) ; isStateless.setText ( java.lang.Boolean.toString ( getModel ( ) . getIsStateless ( ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepConfigReset" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolumeName" , slaveVolumeName ) . withParameter ( "optionName" , configKey ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void setUpContainer ( ) { org.mockito.Mockito.when ( engineSessionDao.remove ( org.mockito.Matchers.any ( java.lang.Long.class ) ) ) . thenReturn ( 1 ) ; org.mockito.Mockito.when ( ssoSessionValidator.isSessionValid ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( ssoSessionUtils.isSessionInUse ( org.mockito.Matchers.anyLong ( ) ) ) . thenReturn ( false ) ; org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.aaa.DbUser.class ) ; container.setUser ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , user ) ; }
public void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.Network networkA , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic , org.ovirt.engine.core.compat.Guid guid ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachment ( networkA , guid ) ; if ( nic != null ) { attachment.setNicId ( nic.getId ( ) ) ; attachment.setNicName ( nic.getName ( ) ) ; } return attachment ; }
public static void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public void validateSpaceNotEnough ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( storageDomainValidator ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.validateSpaceRequirements ( ) ) ; org.mockito.Mockito.verify ( storageDomainValidator ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( storageDomainValidator , org.mockito.Mockito.never ( ) ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult diskImagesBelongToSameImageGroup ( ) { org.ovirt.engine.core.compat.Guid imageGroupId = null ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : images ) { if ( ( imageGroupId == null ) || ( diskImage.getId ( ) . equals ( imageGroupId ) ) ) { imageGroupId = diskImage.getId ( ) ; continue ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_SNAPSHOTS_DONT_BELONG_TO_SAME_DISK ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getLun ( ) . getSerial ( ) ; }
public void testNotValidCustomProerties ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setClusterCompatibilityVersion ( Version.v4_0 ) ; vm.setCustomProperties ( "property=value;" ) ; java.util.List < java.lang.String > messages = new java.util.ArrayList < > ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( runVmValidator.validateVmProperties ( vm , messages ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( messages.isEmpty ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( args.propertyName.contains ( "Alert" ) ) { updateAlerts ( getView ( ) , model ) ; } }
private org.ovirt.engine.api.model.User getUser ( ) { org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User ( ) ; user.setUserName ( "admin" ) ; user.setId ( GUIDS [ 1 ] . toString ( ) ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setName ( "internal" ) ; user.setDomain ( domain ) ; return user ; }
protected void syncSearch ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.QosQueryParameterBase ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getEntity ( ) . getId ( ) , getQosType ( ) ) ; parameters.setRefresh ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllQosByStoragePoolIdAndType , parameters , new org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.SetItemsAsyncQuery ( ) ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.VdcObjectType objType = getObjectType ( ) ; boolean directOnly = ( objType == ( org.ovirt.engine.core.common.VdcObjectType.VM ) ) ? true : false ; org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters tempVar = new org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters ( ) ; tempVar.setObjectId ( getEntityGuid ( ) ) ; tempVar.setVdcObjectType ( objType ) ; tempVar.setDirectOnly ( directOnly ) ; tempVar.setRefresh ( org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel.getIsQueryFirstTime ( ) ) ; tempVar.setAllUsersWithPermission ( getAllUsersWithPermission ( ) ) ; super . syncSearch ( VdcQueryType.GetPermissionsForObject , tempVar ) ; }
public static void GetRpmVersionViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
public void testNetworkExistWhenNeitherIdNorNameIsSpecified ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( networkAttachment ) ; org.junit.Assert.assertThat ( validator.networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_NETWORK_ID_OR_NAME_IS_NOT_SET ) ) ; }
protected org.ovirt.engine.core.dao.qos.QosDao < ? > getQosDao ( ) { org.ovirt.engine.core.common.businessentities.qos.QosType qosType = getParameters ( ) . getQosType ( ) ; if ( qosType == null ) { return getDbFacade ( ) . getQosBaseDao ( ) ; } switch ( qosType ) { case STORAGE : qosDao = getDbFacade ( ) . getStorageQosDao ( ) ; break ; case CPU : qosDao = getDbFacade ( ) . getCpuQosDao ( ) ; break ; default : log.debugFormat ( "Not handled QoS type: {0}" , qosType ) ; break ; } return qosDao ; }
public static java.lang.String map ( org.ovirt.engine.api.model.StorageType storageType , java.lang.String template ) { switch ( storageType ) { case ISCSI : return StorageType.ISCSI.value ( ) ; case FCP : return StorageType.FCP.value ( ) ; case NFS : return StorageType.NFS.value ( ) ; case LOCALFS : return StorageType.LOCALFS.value ( ) ; case POSIXFS : return StorageType.POSIXFS.value ( ) ; case GLUSTERFS : return StorageType.GLUSTERFS.value ( ) ; default : return null ; } }
public void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > > aQuery , boolean doRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , ( doRefresh ? params : params.withoutRefresh ( ) ) , aQuery ) ; }
private void failureEventHandler ( final java.lang.Throwable caught ) { java.lang.String errorMessage ; if ( caught instanceof com.google.gwt.user.client.rpc.StatusCodeException ) { errorMessage = ( ( getConstants ( ) . requestToServerFailedWithCode ( ) ) + ": " ) + ( ( ( com.google.gwt.user.client.rpc.StatusCodeException ) ( caught ) ) . getStatusCode ( ) ) ; } else { errorMessage = ( ( getConstants ( ) . requestToServerFailed ( ) ) + ": " ) + ( caught.getLocalizedMessage ( ) ) ; } failureEventHandler ( null , java.util.Collections.singletonList ( errorMessage ) ) ; }
public T convert ( java.lang.Object source ) { java.lang.Iterable < T > iterable = ( ( java.lang.Iterable < T > ) ( source ) ) ; java.util.Iterator < T > iterator = iterable.iterator ( ) ; while ( iterator.hasNext ( ) ) { return iterator.next ( ) ; } return null ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Label > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Label > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Label > ( ) ; }
private void setEnabled ( com.google.gwt.user.client.ui.Widget widget , boolean enable ) { if ( widget instanceof com.google.gwt.user.client.ui.IndexedPanel ) { for ( int i = 0 ; i < ( ( ( com.google.gwt.user.client.ui.IndexedPanel ) ( widget ) ) . getWidgetCount ( ) ) ; i ++ ) { setEnabled ( ( ( com.google.gwt.user.client.ui.IndexedPanel ) ( widget ) ) . getWidget ( i ) , enable ) ; } } else if ( widget instanceof com.google.gwt.user.client.ui.HasEnabled ) { ( ( com.google.gwt.user.client.ui.HasEnabled ) ( widget ) ) . setEnabled ( enable ) ; } }
boolean checkRngDeviceClusterCompatibility ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > rngDevs = org.ovirt.engine.core.bll.RunVmCommand.getVmDeviceDao ( ) . getVmDeviceByVmIdTypeAndDevice ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) , VmDeviceGeneralType.RNG , VmDeviceType.VIRTIO.getName ( ) ) ; if ( ! ( rngDevs.isEmpty ( ) ) ) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDev = new org.ovirt.engine.core.common.businessentities.VmRngDevice ( rngDevs.get ( 0 ) ) ; if ( ! ( org.ovirt.engine.core.bll.RunVmCommand.getCluster ( ) . getRequiredRngSources ( ) . contains ( rngDev.getSource ( ) ) ) ) { return false ; } } return true ; }
public final boolean isFieldsUpdated ( java.lang.Object source , java.lang.Object destination , java.lang.Iterable < java.lang.String > fields ) { java.util.List < java.lang.String > changedFields = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields ( source , destination ) ; for ( java.lang.String field : fields ) { if ( changedFields.contains ( field ) ) { return true ; } } return false ; }
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getExistingIfaces ( ) { if ( ( existingIfaces ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ifaces = interfaceDao.getAllInterfacesForVds ( params.getVdsId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ifaces ) { org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks ( ) . get ( iface.getNetworkName ( ) ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = networkImplementationDetailsUtils.calculateNetworkImplementationDetails ( iface , network ) ; iface.setNetworkImplementationDetails ( networkImplementationDetails ) ; } existingIfaces = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName ( ifaces ) ; } return existingIfaces ; }
public static void GetDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit ) , aQuery ) ; }
private void dataCenter_SelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.dataCenter_SelectedItemChanged ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) ; if ( dataCenter != null ) { getDisksAllocationModel ( ) . setQuotaEnforcementType ( dataCenter.getQuotaEnforcementType ( ) ) ; } }
public org.ovirt.engine.core.dal.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { if ( isMigrate && ( ( ( getVm ( ) . getRunOnVds ( ) ) != null ) && ( getVm ( ) . getRunOnVds ( ) . equals ( vds.getId ( ) ) ) ) ) { sb.append ( "is the same host the VM is currently running on" ) ; return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_MIGRATION_TO_SAME_HOST ; } return null ; }
public void testIsNetworkInSyncWhenIpConfigurationIsEmpty ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mockedIpConfiguration.hasIpv4PrimaryAddressSet ( ) ) . thenReturn ( false ) ; org.mockito.Mockito.when ( mockedIpConfiguration.hasIpv6PrimaryAddressSet ( ) ) . thenReturn ( false ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private org.ovirt.engine.core.dao.ClusterDao mockCluster ( ) { org.ovirt.engine.core.dao.ClusterDao mock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.ClusterDao.class ) ; cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setEmulatedMachine ( "pc-1.0" ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.core.compat.Version.getLast ( ) ) ; cluster.setClusterId ( clusterId ) ; org.mockito.Mockito.when ( mock.get ( clusterId ) ) . thenReturn ( cluster ) ; return mock ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc verifyUntrustedVolume ( java.lang.String spID , java.lang.String sdID , java.lang.String imageID , java.lang.String volumeID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.verifyUntrustedVolume ( sdID , spID , imageID , volumeID ) ; org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected boolean validate ( ) { boolean result = true ; if ( ( ( org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters ( ) . getEvent ( ) ) == null ) || ( org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters ( ) . getEvent ( ) . getOrigin ( ) . equalsIgnoreCase ( AuditLog.OVIRT_ORIGIN ) ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN ) ; result = false ; } if ( ! result ) { addValidationMessage ( EngineMessage.VAR__ACTION__ADD ) ; addValidationMessage ( EngineMessage.VAR__TYPE__EXTERNAL_EVENT ) ; } return result ; }
public static boolean verifyAddVm ( java.util.List < java.lang.String > reasons , int nicsCount , int vmPriority ) { boolean returnValue = true ; if ( ( org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . getAvailableMacsCount ( ) ) < nicsCount ) { if ( reasons != null ) { reasons.add ( VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString ( ) ) ; } returnValue = false ; } else if ( ! ( org.ovirt.engine.core.bll.VmTemplateCommand.isVmPriorityValueLegal ( vmPriority , reasons ) ) ) { returnValue = false ; } return returnValue ; }
public void refreshAllUsers ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbUser > activeUsers = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . getAll ( ) ) { if ( dbUser.isActive ( ) ) { activeUsers.add ( dbUser ) ; } } for ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user : org.ovirt.engine.core.bll.aaa.SyncUsers.sync ( activeUsers ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . update ( user ) ; } }
public static void GetGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
protected void ExecuteVdsBrokerCommand ( ) { result = org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getBroker ( ) . diskSizeExtend ( org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters ( ) . getVmId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters ( ) . getDriveSpecs ( ) , java.lang.String.valueOf ( org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getParameters ( ) . getNewSize ( ) ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.proceedProxyReturnValue ( ) ; if ( org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendVmDiskSizeVDSCommand.getVDSReturnValue ( ) . getSucceeded ( ) ) { setReturnValue ( result.getImageSize ( ) ) ; } }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class , new java.lang.String [ ] { "DiskId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID } , getEntity ( 1 ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Disk disk = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.verifyModelSpecific ( disk , 1 ) ; verifyLinks ( disk ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( auditLogId , logTime , logType , message , storageDomainId , storagePoolId , severity , userId , vdsId , quotaId , vmId , vmTemplateId , processed , correlationId , jobId , origin , customId , customEventId , eventFloodInSec , customData , external , deleted , callStack ) ; }
public org.ovirt.engine.sdk.decorators.Cluster add ( org.ovirt.engine.sdk.decorators.Cluster cluster ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( SLASH ) + ( getName ( ) ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . add ( url , cluster , org.ovirt.engine.sdk.entities.Cluster.class , org.ovirt.engine.sdk.decorators.Cluster.class , headers ) ; }
public static void getExternalNetworkMap ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , java.util.Set < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllExternalNetworksOnProvider , new org.ovirt.engine.core.common.queries.IdQueryParameters ( providerId ) , aQuery ) ; }
public org.ovirt.vdsm.jsonrpc.client.reactors.ReactorListener call ( ) throws java.lang.Exception { final java.util.concurrent.Future < org.ovirt.vdsm.jsonrpc.client.reactors.ReactorListener > futureListener = reactorForListener.createListener ( org.ovirt.vdsm.jsonrpc.client.reactors.TestReactor.HOSTNAME , 6668 , new org.ovirt.vdsm.jsonrpc.client.reactors.ReactorListener.EventListener ( ) { @ java.lang.Override public void onAcccept ( final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client ) { client.addEventListener ( new org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener ( ) { @ java.lang.Override public void onMessageReceived ( byte [ ] message ) { client.sendMessage ( message ) ; } } ) ; } } ) ; return futureListener.get ( org.ovirt.vdsm.jsonrpc.client.reactors.TestReactor.TIMEOUT_SEC , java.util.concurrent.TimeUnit.SECONDS ) ; }
public void testGetUserID ( ) { org.ovirt.engine.core.common.businessentities.DbUser user = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.DbUser.class ) ; org.mockito.Mockito.when ( user.getId ( ) ) . thenReturn ( Guid.EVERYONE ) ; java.lang.String session = org.jgroups.util.UUID.randomUUID ( ) . toString ( ) ; org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . setUser ( session , user ) ; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( session ) ; params.setRefresh ( false ) ; org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery query = new org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery ( params ) ; org.junit.Assert.assertEquals ( "wrong guid" , Guid.EVERYONE , query.getUserID ( ) ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Tag tag ) { validateParameters ( tag , "name" ) ; if ( isSetParentName ( tag ) ) { tag.getParent ( ) . setId ( getParentId ( tag ) ) ; } return performCreate ( ActionType.AddTag , new org.ovirt.engine.core.common.action.TagsOperationParameters ( map ( tag ) ) , new org.ovirt.engine.api.restapi.resource.BackendTagsResource.TagNameResolver ( tag.getName ( ) ) ) ; }
public java.lang.String getNoun ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op2 ) { assert ! ( isUnary ( ) ) : ( "The Unary Operation " + ( name ( ) ) ) + " has no Noun" ; if ( op2 == null ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . unassignedLogicalNetworksPanel ( ) ; } return op2.getName ( ) ; }
public static void GetClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , "" , "" , false ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
protected void setUpEntityQueryExpectations ( int times , java.lang.Object failure ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpEntityQueryExpectations ( VdcQueryType.GetAllNetworks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid.Empty } , getEntityList ( ) , failure ) ; } }
private void initImportSources ( ) { importSources.setItems ( java.util.Arrays.asList ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.values ( ) ) ) ; importSources.getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { clearVms ( ) ; clearValidations ( ) ; loadProviders ( ) ; } } ) ; importSources.setSelectedItem ( ImportSource.EXPORT_DOMAIN ) ; }
public void getDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 5 ) ; }
void initComboBox ( ) { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo > ( new org.ovirt.engine.ui.common.widget.renderer.StringRenderer < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo > ( ) { @ java.lang.Override public java.lang.String render ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo optionInfo ) { if ( optionInfo != null ) { return optionInfo.getKey ( ) ; } return null ; } } ) ; keyTextBoxEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextBoxEditor ( ) ; keyComboBox = new org.ovirt.engine.ui.common.widget.ComboBox < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo > ( keyListBoxEditor , keyTextBoxEditor ) ; }
public void oldHostDoesNotExist ( ) { validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator ( oldHost , null , false ) ; org.junit.Assert.assertThat ( validator.hostExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.VDS_INVALID_SERVER_ID ) ) ; }
public void prepareFromRequest ( com.gwtplatform.mvp.shared.proxy.PlaceRequest request ) { super . prepareFromRequest ( request ) ; if ( getModel ( ) . getIsAvailable ( ) ) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabPresenter.getProxy ( ) . manualReveal ( this ) ; } else { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabPresenter.getProxy ( ) . manualRevealFailed ( ) ; revealActiveMainModelPresenter ( ) ; } }
protected org.ovirt.engine.core.common.AuditLogType executeFailure ( ) { try { getCommand ( ) . executeVmCommand ( ) ; } catch ( java.lang.Exception expected ) { } org.junit.jupiter.api.Assertions.assertFalse ( getCommand ( ) . getReturnValue ( ) . getSucceeded ( ) ) ; return getCommand ( ) . getAuditLogTypeValue ( ) ; }
private void updateNumOfMonitors ( ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.DisplayType > selectedDisplayType = getDisplayType ( ) . getSelectedItem ( ) ; if ( ( selectedDisplayType != null ) && ( ( selectedDisplayType.getEntity ( ) ) != ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) ) { getNumOfMonitors ( ) . setSelectedItem ( 1 ) ; getNumOfMonitors ( ) . setIsChangable ( false ) ; } else { getNumOfMonitors ( ) . setIsChangable ( true ) ; } }
public void OnTimer ( ) { try { org.ovirt.engine.core.bll.AuditLogCleanupManager.log.info ( "Start deleteAgedOutAuditLogs" ) ; org.ovirt.engine.core.compat.DateTime latestTimeToKeep = org.ovirt.engine.core.compat.DateTime.getNow ( ) . AddDays ( ( ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.AuditLogAgingThreashold ) ) * ( - 1 ) ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAuditLogDao ( ) . removeAllBeforeDate ( latestTimeToKeep ) ; org.ovirt.engine.core.bll.AuditLogCleanupManager.log.info ( "Finished deleteAgedOutAuditLogs" ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.AuditLogCleanupManager.log.error ( "deleteAgedOutAuditLog failed with exception" , e ) ; } }
public void canDoActionFailedVirtIODisk ( ) throws java.lang.Exception { mockVmStatusUp ( ) ; org.mockito.Mockito.when ( osRepository.hasSpiceSupport ( 0 , Version.v3_1 ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( osRepository.getOsName ( 0 ) ) . thenReturn ( "RHEL6" ) ; createNotVirtIODisk ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.HOT_PLUG_DISK_IS_NOT_VIRTIO.toString ( ) ) ) ; }
protected void executeVdsBrokerCommand ( ) { java.util.List < java.lang.String > bricks = org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtil.getQualifiedBrickList ( org.ovirt.engine.core.vdsbroker.gluster.AddBricksToGlusterVolumeVDSCommand.getParameters ( ) . getBricks ( ) ) ; status = org.ovirt.engine.core.vdsbroker.gluster.AddBricksToGlusterVolumeVDSCommand.getBroker ( ) . glusterVolumeBrickAdd ( org.ovirt.engine.core.vdsbroker.gluster.AddBricksToGlusterVolumeVDSCommand.getParameters ( ) . getVolumeName ( ) , bricks.toArray ( new java.lang.String [ 0 ] ) , org.ovirt.engine.core.vdsbroker.gluster.AddBricksToGlusterVolumeVDSCommand.getParameters ( ) . getReplicaCount ( ) , org.ovirt.engine.core.vdsbroker.gluster.AddBricksToGlusterVolumeVDSCommand.getParameters ( ) . getStripeCount ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.AddBricksToGlusterVolumeVDSCommand.proceedProxyReturnValue ( ) ; }
private void initiateResumeUpload ( ) { startProgress ( null ) ; setProgressStr ( "Resuming upload" ) ; final org.ovirt.engine.core.common.action.UploadImageStatusParameters parameters = new org.ovirt.engine.core.common.action.UploadImageStatusParameters ( ) ; parameters.setDiskId ( getDiskModel ( ) . getDisk ( ) . getId ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.UploadImageStatus , parameters , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { initiateResumeUploadCheckStatus ( result ) ; } } , this ) ; }
private void UpdateVmData ( org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamicData ) { if ( ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getrun_on_vds ( ) ) != null ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getrun_on_vds ( ) . getValue ( ) , vmDynamicData ) ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDAO ( ) . update ( vmDynamicData ) ; } }
public boolean isFenceAgentVersionCompatible ( org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent , java.lang.String clusterCompatibilityVersion , java.util.List < java.lang.String > messages ) { if ( ! ( org.ovirt.engine.core.compat.Regex.IsMatch ( org.ovirt.engine.core.utils.pm.FenceConfigHelper.getFenceConfigurationValue ( ConfigValues.VdsFenceType.name ( ) , clusterCompatibilityVersion ) , java.lang.String.format ( "(,|^)%1$s(,|$)" , agent.getType ( ) ) ) ) ) { messages.add ( VdcBllMessages.ACTION_TYPE_FAILED_AGENT_NOT_SUPPORTED.name ( ) ) ; return false ; } else { return true ; } }
private static org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension createConnectionExtension ( org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = new org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension ( ) ; connExt.setHostId ( hostId ) ; connExt.setIqn ( "target1" ) ; connExt.setUserName ( "userConnExt" ) ; connExt.setPassword ( "pwdConnExt" ) ; return connExt ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createDiskImage ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk.setId ( diskImageGuid ) ; disk.setSize ( 100000L ) ; disk.setDiskInterface ( DiskInterface.VirtIO ) ; disk.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singleton ( sdId ) ) ) ; disk.setStoragePoolId ( spId ) ; disk.setDescription ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; return disk ; }
public void setSelectedItem ( java.lang.Object value ) { if ( ( selectedItem ) != value ) { OnSelectedItemChanging ( value , selectedItem ) ; selectedItem = value ; OnSelectedItemChanged ( ) ; getSelectedItemChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SelectedItem" ) ) ; } }
protected org.ovirt.engine.api.model.DataCenter deprecatedPopulate ( org.ovirt.engine.api.model.DataCenter model , org.ovirt.engine.core.common.businessentities.StoragePool entity ) { org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( model.getId ( ) ) ) ; model.setSupportedVersions ( getMapper ( java.util.List.class , org.ovirt.engine.api.model.Versions.class ) . map ( getEntity ( java.util.List.class , VdcQueryType.GetAvailableStoragePoolVersions , parameters , model.getId ( ) ) , null ) ) ; return model ; }
public void getPermissionCheckSubjectsTest ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissions = addCpuProfileCommand.getPermissionCheckSubjects ( ) ; org.junit.Assert.assertEquals ( 1 , permissions.size ( ) ) ; org.ovirt.engine.core.bll.utils.PermissionSubject permissionSubject = permissions.get ( 0 ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CLUSTER_ID , permissionSubject.getObjectId ( ) ) ; org.junit.Assert.assertEquals ( VdcObjectType.Cluster , permissionSubject.getObjectType ( ) ) ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterGeoRepKeysUpdate ( java.util.List < java.lang.String > geoRepPubKeys , java.lang.String userName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterGeoRepKeysUpdate ( userName , geoRepPubKeys ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private java.lang.String getMemoryVolumeFromActiveSnapshotInExportDomain ( ) { for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : getVm ( ) . getSnapshots ( ) ) { if ( ( snapshot.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE ) ) return snapshot.getMemoryVolume ( ) ; } org.ovirt.engine.core.bll.ImportVmCommand.log.warnFormat ( "VM {0} doesn't have active snapshot in export domain" , getVmId ( ) ) ; return org.apache.commons.lang.StringUtils.EMPTY ; }
public void testUpdate ( ) { setUpGetEntityExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVmNicFilterParameter , org.ovirt.engine.core.common.action.VmNicFilterParameterParameters.class , new java.lang.String [ ] { "VmId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.VM_ID } , true , true ) ) ; org.ovirt.engine.api.model.NetworkFilterParameter parameter = resource.update ( getParameter ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( parameter ) ; }
public void appendCustomValueDoesntHandleNullKeys ( ) { final java.lang.String key = null ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String sep = "_" ; org.junit.jupiter.api.Assertions.assertThrows ( java.lang.NullPointerException.class , ( ) -> b.appendCustomValue ( key , value , sep ) ) ; }
public static java.lang.String getMessage ( org.ovirt.engine.core.common.AuditLogType logType ) { java.lang.String value = "" ; if ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.containsKey ( logType ) ) { value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.get ( logType ) ; } return value ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetMacPoolById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendMacPoolResourceTest.MAC_POOL_ID } , null ) ; try { resource.remove ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { org.junit.Assert.assertNotNull ( wae.getResponse ( ) ) ; org.junit.Assert.assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public static void GetClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { osArchitectures = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; }
public void executeCommand ( ) { setUpMocksForUpdate ( ) ; mockBackend ( true , null ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( hooksDao , org.mockito.Mockito.times ( 1 ) ) . updateGlusterHook ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.class ) ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATED , cmd.getAuditLogTypeValue ( ) ) ; }
private void handleVdsLiveSnapshotFailure ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { log.warn ( ( "Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}" ) , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; addCustomValue ( "SnapshotName" , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getSnapshotName ( ) ) ; addCustomValue ( "VmName" , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmName ( ) ) ; updateCallStackFromThrowable ( e ) ; auditLogDirector.log ( this , AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = ( ( java.lang.String ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL ; } org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ( ( org.ovirt.engine.ui.uicommonweb.models.LoginModel ) ( model ) ) ; loginModel.getLoggedInEvent ( ) . raise ( loginModel , EventArgs.EMPTY ) ; }
void addStyles ( ) { storageTypeListEditor.setLabelStyleName ( style.label ( ) ) ; storageTypeListEditor.addContentWidgetStyleName ( style.storageContentWidget ( ) ) ; formatListEditor.setLabelStyleName ( style.label ( ) ) ; formatListEditor.addContentWidgetStyleName ( style.formatContentWidget ( ) ) ; activateDomainEditor.addContentWidgetStyleName ( style.activateDomainEditor ( ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.HibernateVmCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , new org.ovirt.engine.core.bll.LockMessage ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_HIBERNATING ) . withOptional ( "VmName" , org.ovirt.engine.core.bll.HibernateVmCommand.getVmName ( ) ) ) ) ; }
private org.ovirt.engine.api.model.Networks mapCollection ( java.util.List < org.ovirt.engine.api.model.Network > entities ) { org.ovirt.engine.api.model.Networks collection = new org.ovirt.engine.api.model.Networks ( ) ; for ( org.ovirt.engine.api.model.Network entity : entities ) { collection.getNetworks ( ) . add ( addLinks ( map ( entity ) ) ) ; } return collection ; }
public void canDoActionFailsOnNullHookId ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( CLUSTER_ID , null ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString ( ) ) ) ; }
protected void executeVdsBrokerCommand ( ) { org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters parameters = getParameters ( ) ; status = getBroker ( ) . glusterVolumeGeoRepSessionPause ( parameters.getVolumeName ( ) , parameters.getSlaveHost ( ) , parameters.getSlaveVolume ( ) , parameters.getForce ( ) ) ; proceedProxyReturnValue ( ) ; }
public void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > cloneAgents ( java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > agents ) { if ( ( agents == null ) || ( agents.isEmpty ( ) ) ) { return null ; } else { java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > clonedAgents = new java.util.LinkedList < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > ( ) ; for ( org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent : agents ) { clonedAgents.add ( org.ovirt.engine.ui.uicommonweb.Cloner.cloneAgent ( agent ) ) ; } return clonedAgents ; } }
public static void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
private static < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < ? > , ID extends java.io.Serializable > void updateAllInTransaction ( final java.lang.String procedureName , final java.util.Collection < T > entities , final org.ovirt.engine.core.dao.MassOperationsDao < T , ID > dao ) { if ( ! ( entities.isEmpty ( ) ) ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope ( TransactionScopeOption.Required , new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { dao.updateAll ( procedureName , entities ) ; return null ; } } ) ; } }
public void schedulJobs ( ) { org.ovirt.engine.core.utils.timer.SchedulerUtil sched = org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) ; duringFailureJobId = sched.scheduleAFixedDelayJob ( this , "onVdsDuringFailureTimer" , new java.lang.Class [ 0 ] , new java.lang.Object [ 0 ] , org.ovirt.engine.core.vdsbroker.VdsManager.VDS_DURING_FAILURE_TIMEOUT_IN_MINUTES , org.ovirt.engine.core.vdsbroker.VdsManager.VDS_DURING_FAILURE_TIMEOUT_IN_MINUTES , java.util.concurrent.TimeUnit.MINUTES ) ; sched.pauseJob ( duringFailureJobId ) ; _refreshIteration = ( _numberRefreshesBeforeSave ) - 1 ; onTimerJobId = sched.scheduleAFixedDelayJob ( this , "onTimer" , new java.lang.Class [ 0 ] , new java.lang.Object [ 0 ] , org.ovirt.engine.core.vdsbroker.VdsManager.VDS_REFRESH_RATE , org.ovirt.engine.core.vdsbroker.VdsManager.VDS_REFRESH_RATE , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
public org.ovirt.engine.core.bll.ValidationResult protocolIsNotXmlrpc ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.NOT_SUPPORTED_PROTOCOL_FOR_CLUSTER_VERSION ) . when ( ( ( VdsProtocol.XML.equals ( host.getProtocol ( ) ) ) && ( ( Version.v3_6.compareTo ( cluster.getCompatibilityVersion ( ) ) ) <= 0 ) ) ) ; }
private void initDisplayTypes ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { graphicsAndDisplays = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetDisplayTypes ) , callback ) ; }
protected void setRngDevice ( org.ovirt.engine.api.model.VmPool model ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmRngDevice > rngDevices = getEntity ( java.util.List.class , QueryType.GetRngDevice , new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( model.getId ( ) ) ) , "GetRngDevice" , true ) ; if ( ( rngDevices != null ) && ( ! ( rngDevices.isEmpty ( ) ) ) ) { model.setRngDevice ( org.ovirt.engine.api.restapi.types.RngDeviceMapper.map ( rngDevices.get ( 0 ) , null ) ) ; } }
private static void setVmTemplateStatus ( org.ovirt.engine.core.compat.Guid vmTemplateGuid , org.ovirt.engine.core.common.businessentities.VmTemplateStatus status , org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmTemplateDao ( ) . get ( vmTemplateGuid ) ; if ( vmTemplate != null ) { if ( compensationContext != null ) { compensationContext.snapshotEntityStatus ( vmTemplate ) ; } vmTemplate.setStatus ( status ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmTemplateDao ( ) . update ( vmTemplate ) ; } else { org.ovirt.engine.core.bll.VmTemplateHandler.log.warnFormat ( "setVmTemplateStatus: vmTemplate is null, not setting status '{0}' to vmTemplate" , status ) ; } }
private void initDetachableFields ( ) { detachableModels = java.util.Arrays.asList ( model.getMemSize ( ) , model.getTotalCPUCores ( ) , model.getNumOfSockets ( ) , model.getCoresPerSocket ( ) , model.getThreadsPerCore ( ) , model.getIsHighlyAvailable ( ) , model.getMigrationMode ( ) , model.getOverrideMigrationDowntime ( ) , model.getMigrationDowntime ( ) , model.getPriority ( ) , model.getMinAllocatedMemory ( ) , model.getMemoryBalloonDeviceEnabled ( ) , model.getNumOfIoThreads ( ) , model.getIoThreadsEnabled ( ) ) ; }
private void restartVdsVms ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVmDAO ( ) . getAllRunningForVds ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVdsId ( ) ) ; if ( ! ( vms.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.RestartVdsVmsOperation restartVmsOper = new org.ovirt.engine.core.bll.RestartVdsVmsOperation ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getContext ( ) , org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVds ( ) ) ; restartVmsOper.restartVms ( vms ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.UpdateVdsVMsCleared , new org.ovirt.engine.core.common.vdscommands.UpdateVdsVMsClearedVDSCommandParameters ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVds ( ) . getId ( ) ) ) ; } }
public void isSelectedChanged ( ) { if ( ( getParent ( ) ) != null ) { updateParentSelection ( ) ; } for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel child : getChildren ( ) ) { child.setIsSelectedNotificationPrevent ( true ) ; child.setIsSelectedNullable ( getIsSelectedNullable ( ) ) ; child.setIsSelectedNotificationPrevent ( false ) ; for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel grandChild : child.getChildren ( ) ) { grandChild.setIsSelectedNotificationPrevent ( true ) ; grandChild.setIsSelectedNullable ( getIsSelectedNullable ( ) ) ; grandChild.setIsSelectedNotificationPrevent ( false ) ; } } }
public void onError ( java.lang.String message ) { org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger.severe ( ( ( ( ( ( "Exception caught while invoking event handler function [" + functionName ) + "] for plugin [" ) + pluginName ) + "]: " ) + message ) ) ; com.google.gwt.dom.client.Document.get ( ) . getBody ( ) . removeChild ( plugin.getIFrameElement ( ) ) ; plugin.markAsFailed ( ) ; org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger.warning ( ( ( "Plugin [" + pluginName ) + "] removed from service due to failure" ) ) ; }
void addPropertyChangeEventHandler ( ) { propertyChangeListener = new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { com.google.gwt.event.logical.shared.InitializeEvent.fire ( org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition.this ) ; } } ; command.getPropertyChangedEvent ( ) . addListener ( propertyChangeListener ) ; }
public static void setUpOsRepository ( ) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.mockito.Mockito.when ( osRepository.getVmWatchdogTypes ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateWatchdogCommandTest.WATCHDOG_MODELS ) ; }
public void testAddLunDiskMissingType ( ) { org.ovirt.engine.api.model.Disk model = createIscsiLunDisk ( ) ; model.getLunStorage ( ) . setType ( null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; org.junit.Assert.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "HostStorage" , "testAddLunDiskMissingType" , "type" ) ; } }
public void testStringSubstitutionWithList ( ) { org.ovirt.engine.core.common.interfaces.ErrorTranslator et = new org.ovirt.engine.core.utils.ErrorTranslatorImpl ( org.ovirt.engine.core.utils.ErrorTranslatorTest.FILENAME ) ; java.util.List < java.lang.String > error = et.translateErrorText ( java.util.Arrays.asList ( org.ovirt.engine.core.utils.ErrorTranslatorTest.TEST_KEY_WITH_REPLACEMENT , "$action SOMEACTION" , "$type SOME Type" ) ) ; java.lang.String result = "Cannot SOMEACTION SOME Type. VM's Image doesn't exist." ; org.junit.Assert.assertTrue ( "Size" , ( ( error.size ( ) ) == 1 ) ) ; org.junit.Assert.assertEquals ( "String should equal" , result , error.get ( 0 ) ) ; }
public java.util.ArrayList < java.util.Map.Entry < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > > getBondingOptionList ( org.ovirt.engine.core.compat.RefObject < java.util.Map.Entry < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > > defaultItem ) { return getBondingOptionListDependingOnNetwork ( defaultItem , false ) ; }
private void setVmIdOnVfsDevices ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.compat.Guid vmId , java.util.Set < org.ovirt.engine.core.common.businessentities.HostDevice > vfs ) { for ( org.ovirt.engine.core.common.businessentities.HostDevice vf : vfs ) { hostDeviceDao.setVmIdOnHostDevice ( vf.getId ( ) , vmId ) ; } }
public static void GetCustomPropertiesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < org.ovirt.engine.core.compat.Version , java.lang.String > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmCustomProperties , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void validateIsoPrefixForOnlyIsoPrefixInKernelAndInitrd ( ) throws java.lang.Exception { java.lang.String initrd = org.ovirt.engine.core.bll.RunVmCommandTest.ISO_PREFIX ; java.lang.String kernelUrl = org.ovirt.engine.core.bll.RunVmCommandTest.ISO_PREFIX ; org.ovirt.engine.core.common.businessentities.VM vm = createVmForTesting ( initrd , kernelUrl ) ; org.junit.Assert.assertEquals ( vm.getInitrdUrl ( ) , "" ) ; org.junit.Assert.assertEquals ( vm.getKernelUrl ( ) , "" ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface ) { driver.edit ( iface ) ; hideMacWhenNotEnabled ( iface ) ; iface.getMAC ( ) . getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( "IsAvailable" . equals ( ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ) ) { hideMacWhenNotEnabled ( iface ) ; } } } ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalHostGroup > hostGroups = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalHostGroup > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel externalHostGroupsListModel = getExternalHostGroups ( ) ; externalHostGroupsListModel.setItems ( hostGroups ) ; externalHostGroupsListModel.setIsChangable ( true ) ; }
private void assertNicIpConfiguration ( org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic ) { assertNicIpv4Configuration ( ipConfiguration.getIpv4PrimaryAddress ( ) , nic ) ; assertNicIpv6Configuration ( ipConfiguration.getIpv6PrimaryAddress ( ) , nic ) ; }
protected java.lang.String getString ( final org.ovirt.engine.ui.common.utils.BaseDynamicMessages.DynamicMessageKey key ) { try { if ( ( dictionary ) != null ) { return dictionary.get ( key.getValue ( ) ) ; } } catch ( java.util.MissingResourceException mre ) { } java.lang.String fallback = fallbackValues.get ( key ) ; if ( fallback == null ) { fallback = "" ; } return fallback ; }
public void setUp ( ) { org.ovirt.engine.core.common.action.RemoveImageParameters params = new org.ovirt.engine.core.common.action.RemoveImageParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveImageCommand < org.ovirt.engine.core.common.action.RemoveImageParameters > ( params ) { @ java.lang.Override protected void initImage ( ) { } @ java.lang.Override protected void initStoragePoolId ( ) { } @ java.lang.Override protected void initStorageDomainId ( ) { } @ java.lang.Override protected void initContainerDetails ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters ) { } } ) ; org.mockito.Mockito.doReturn ( snapshotDAO ) . when ( cmd ) . getSnapshotDao ( ) ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllDisksByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendDisksResourceTest.PARENT_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) ; control.replay ( ) ; try { resource.update ( getUpdate ( ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void readOsSection ( org.ovirt.engine.core.compat.backendcompat.XmlNode section ) { _vmTemplate.setId ( new org.ovirt.engine.core.compat.Guid ( section.attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = section.SelectSingleNode ( "Description" ) ; if ( node != null ) { _vmTemplate.setOsId ( osRepository.getOsIdByUniqueName ( node.innerText ) ) ; } }
public org.ovirt.engine.api.model.Nics list ( ) { org.ovirt.engine.api.model.Nics nics = new org.ovirt.engine.api.model.Nics ( ) ; if ( parent.getSnapshot ( ) . isVmConfigurationAvailable ( ) ) { org.ovirt.engine.core.common.businessentities.VM vm = parent.collection.getVmPreview ( parent.get ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vm.getInterfaces ( ) ) { nics.getNics ( ) . add ( org.ovirt.engine.api.restapi.types.NicMapper.map ( nic , null ) ) ; } } return nics ; }
private void initNetworks ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > allClusterNetworks ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.VfsConfigNetwork > vfsConfigNetworks = new java.util.ArrayList < > ( ) ; java.util.Set < org.ovirt.engine.core.compat.Guid > attachedNetworks = getEntity ( ) . getNetworks ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : allClusterNetworks ) { boolean isAttached = attachedNetworks.contains ( network.getId ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.VfsConfigNetwork vfsConfigNetwork = new org.ovirt.engine.ui.uicommonweb.models.hosts.VfsConfigNetwork ( isAttached , ( isAttached ? getAttachedViaLabel ( network ) : null ) , network ) ; vfsConfigNetworks.add ( vfsConfigNetwork ) ; } networks.setItems ( vfsConfigNetworks ) ; }
protected void initQuery ( Q query ) { sessionDataContainer.setUser ( query.getParameters ( ) . getSessionId ( ) , dbUserMock ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacadeMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock ( org.ovirt.engine.core.dal.dbbroker.DbFacade.class ) ; org.mockito.Mockito.doReturn ( dbFacadeMock ) . when ( query ) . getDbFacade ( ) ; query.postConstruct ( ) ; }
public void canDoActionVmInPreview ( ) { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.when ( snapshotsValidator.vmNotInPreview ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "OnRemove" ) ) { onRemove ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "OnRestore" ) ) { onRestore ( ) ; } else { super . executeCommand ( command ) ; } }
public void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public static void getExternalProviderDiscoveredHostList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetDiscoveredHostListFromExternalProvider , params , aQuery ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.EngineBackupLog engineBackupLog ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "scope" , engineBackupLog.getScope ( ) ) . addValue ( "done_at" , engineBackupLog.getDoneAt ( ) ) . addValue ( "status" , ( engineBackupLog.isPassed ( ) ? 1 : - 1 ) ) . addValue ( "fqdn" , engineBackupLog.getFqdn ( ) ) . addValue ( "output_message" , engineBackupLog.getOutputMessage ( ) ) . addValue ( "log_path" , engineBackupLog.getLogPath ( ) ) ; getCallsHandler ( ) . executeModification ( "LogEngineBackupEvent" , parameterSource ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , ipv4Address , ipv6Address , bondName , bondOptions , bondType , bonded , ipv4BootProtocol , ipv6BootProtocol , reportedSwitchType , networkName , bridged , ipv4Gateway , ipv6Gateway , mtu , ipv4Subnet , ipv6Prefix , vdsId , baseInterface , vlanId , qos , labels , adPartnerMac ) ; }
protected void EndVmCommand ( ) { try { if ( org.ovirt.engine.core.bll.RemoveVmCommand.acquireLock ( ) ) { setVm ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDAO ( ) . get ( org.ovirt.engine.core.bll.RemoveVmCommand.getVmId ( ) ) ) ; if ( ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) ) != null ) { updateDisksAfterVmRemoved ( ) ; RemoveVmFromDb ( ) ; } } org.ovirt.engine.core.bll.RemoveVmCommand.setSucceeded ( true ) ; } finally { org.ovirt.engine.core.bll.RemoveVmCommand.freeLock ( ) ; } }
public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue ( ) . getTaskPlaceHolderIdList ( ) ) { org.ovirt.engine.core.common.businessentities.AsyncTask task = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskFromDb ( asyncTaskId ) ; if ( ( task != null ) && ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( task.getVdsmTaskId ( ) ) ) ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeTaskFromDbByTaskId ( task.getTaskId ( ) ) ; } } return null ; }
public void testRemove ( ) { dao.remove ( existingVds.getId ( ) ) ; dynamicDao.remove ( existingVds.getId ( ) ) ; staticDao.remove ( existingVds.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VdsStatic resultStatic = staticDao.get ( existingVds.getId ( ) ) ; org.junit.Assert.assertNull ( resultStatic ) ; org.ovirt.engine.core.common.businessentities.VdsStatistics resultStatistics = dao.get ( existingVds.getId ( ) ) ; org.junit.Assert.assertNull ( resultStatistics ) ; }
void registerSelectionChangeHandler ( final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < T > buttonDef ) { final org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > itemSelectionChangeHandler = new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { buttonDef.update ( ) ; } } ; addSelectionChangeListener ( itemSelectionChangeHandler ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( fencingEnabled ? 1231 : 1237 ) ; result = ( prime * result ) + ( skipFencingIfSDActive ? 1231 : 1237 ) ; result = ( prime * result ) + ( skipFencingIfConnectivityBroken ? 1231 : 1237 ) ; result = ( prime * result ) + ( hostsWithBrokenConnectivityThreshold ) ; return result ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmTemplateDao ( ) ; existingTemplate = dao.get ( new org.ovirt.engine.core.compat.Guid ( "1b85420c-b84c-4f29-997e-0eb674b40b79" ) ) ; newVmTemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; newVmTemplate.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; newVmTemplate.setname ( "NewVmTemplate" ) ; newVmTemplate.setvds_group_id ( org.ovirt.engine.core.dao.VmTemplateDAOTest.VDS_GROUP_ID ) ; }
private org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel prepareIscsiStorageForEdit ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel ( ) ; model.setRole ( storage.getStorageDomainType ( ) ) ; prepareSanStorageForEdit ( model ) ; return model ; }
public void testCheckGroupsCanBeAttachedAlreadyExists ( ) { org.ovirt.engine.core.common.businessentities.RoleGroupMap map = new org.ovirt.engine.core.common.businessentities.RoleGroupMap ( getParams ( ) . getActionGroups ( ) . get ( 0 ) , getParams ( ) . getRoleId ( ) ) ; mockGetAllForRole ( java.util.Collections.singletonList ( map ) ) ; java.util.List < java.lang.String > messages = new java.util.ArrayList < > ( 1 ) ; org.junit.jupiter.api.Assertions.assertTrue ( getCommand ( ) . checkIfGroupsCanBeAttached ( messages ) , "validate should fail" ) ; org.junit.jupiter.api.Assertions.assertEquals ( EngineMessage.ERROR_CANNOT_ATTACH_ACTION_GROUP_TO_ROLE_ATTACHED.toString ( ) , messages.get ( 0 ) , "wrong messages" ) ; }
public org.ovirt.engine.sdk.decorators.DataCenterClusterNetwork update ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.Network.class , org.ovirt.engine.sdk.decorators.DataCenterClusterNetwork.class , headers ) ; }
public void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) . withoutRefresh ( ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc thaw ( java.lang.String vmId ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.thaw" ) . withParameter ( "vmID" , vmId ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; }
public boolean isCaseSensitiveSearch ( ) { return caseSensitiveSearch ; }
public org.ovirt.engine.core.dao.StorageDomainDao getStorageDomainDao ( ) { final org.ovirt.engine.core.dao.StorageDomainDao d = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StorageDomainDao.class ) ; org.mockito.Mockito.when ( d.getForStoragePool ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ) . thenReturn ( STORAGE_DOMAIN ) ; org.mockito.Mockito.when ( d.getAllForStorageDomain ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ) . thenReturn ( getStorageDomainList ( ) ) ; return d ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getPluggedManagedInterfaces ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > result = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { if ( ( ( ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isHostDevInterface ( device ) ) || ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBridge ( device ) ) ) && ( device.isPlugged ( ) ) ) && ( device.isManaged ( ) ) ) { result.add ( device ) ; } } return result ; }
private org.ovirt.engine.core.common.businessentities.AsyncTask createAsyncTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.createAsyncTask ( this , asyncTaskCreationInfo , parentCommand ) ; }
public static void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getUpHostListByCluster ( aQuery , clusterName , null ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.core.common.businessentities.network.Network network = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( getNetwork ( ) . getSelectedItem ( ) ) ) ; boolean portMirroringAllowed = ( network == null ) || ( ! ( network.isExternal ( ) ) ) ; if ( ! portMirroringAllowed ) { getPortMirroring ( ) . setEntity ( false ) ; getPortMirroring ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . portMirroringNotSupportedExternalNetworks ( ) ) ; } getPortMirroring ( ) . setIsChangable ( portMirroringAllowed ) ; }
protected boolean checkIfNeedToBeOverride ( ) { if ( ( ( ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters ( ) . getOperation ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageOperation.Copy ) ) && ( ! ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters ( ) . getForceOverride ( ) ) ) ) && ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage ( ) . getStorageIds ( ) . contains ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain ( ) . getId ( ) ) ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS ) ; return false ; } return true ; }
public static < T > T retrieveFromSet ( java.util.Set < T > set , final T object ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( set , new org.ovirt.engine.ui.uicommonweb.Linq.EqualsPredicate ( object ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObj ) { if ( ! ( filter.equals ( getViewFilterType ( ) ) ) ) { return ; } attachedByLabelInterfaces = returnValueObj.getReturnValue ( ) ; setItems ( items ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.lang.Iterable ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; }
public void testValidateModifiedBondSlavesWhenSlaveIsNotValid ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setBonds ( java.util.Collections.singletonList ( bond ) ) ; doTestValidateModifiedBondSlaves ( params , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.Network > emptyList ( ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE ) ) ; }
protected void initHeader ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { table.addColumn ( new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn ( ) , constants.aliasTemplate ( ) ) ; table.addColumn ( new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn ( ) , constants.disksTemplate ( ) , "110px" ) ; table.addColumn ( new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn ( ) , constants.provisionedSizeTemplate ( ) , "110px" ) ; table.addColumn ( new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn ( ) , constants.actualSizeTemplate ( ) , "110px" ) ; table.addColumn ( new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn ( ) , constants.creationDateTemplate ( ) , "170px" ) ; }
protected void setLoggingForCommand ( ) { org.ovirt.engine.core.bll.VmCommand.setCommandShouldBeLogged ( false ) ; }
private void processOnVmStopInternal ( final java.util.Collection < org.ovirt.engine.core.compat.Guid > vmIds , final org.ovirt.engine.core.compat.Guid hostId ) { for ( org.ovirt.engine.core.compat.Guid vmId : vmIds ) { backend.runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.ProcessDownVmParameters ( vmId , true ) ) ; } org.ovirt.engine.core.bll.hostdev.HostDeviceManager hostDeviceManager = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.hostdev.HostDeviceManager.class ) ; hostDeviceManager.refreshHostIfAnyVmHasHostDevices ( vmIds , hostId ) ; }
public static void enableLoadBalancer ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Start scheduling to enable vds load balancer" ) ; org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class ) . scheduleAFixedDelayJob ( org.ovirt.engine.core.bll.scheduling.SchedulingManager.instance , "performLoadBalancing" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Finished scheduling to enable vds load balancer" ) ; } }
protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { return ( ( clusterNetworkModel.isAttached ( ) ) && ( ! ( clusterNetworkModel.isExternal ( ) ) ) ) && ( ( ( ! ( isMultipleSelectionAllowed ( ) ) ) || ( ! ( clusterNetworkModel.isManagement ( ) ) ) ) || ( ! ( clusterNetworkModel.getOriginalNetworkCluster ( ) . isDefaultRoute ( ) ) ) ) ; }
public org.ovirt.engine.core.bll.adbroker.LdapReturnValueBase execute ( ) { try { executeQuery ( ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.adbroker.InternalBrokerCommandBase.log.errorFormat ( "Error in executing Internal broker command. Exception is {0} " , e.getMessage ( ) ) ; _ldapReturnValue.setSucceeded ( false ) ; _ldapReturnValue.setReturnValue ( null ) ; } return _ldapReturnValue ; }
protected boolean acquireLockInternal ( ) { final boolean acquireLock = super . acquireLockInternal ( ) ; if ( ( ( ! acquireLock ) && ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) != null ) ) && ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . isAutoStartup ( ) ) ) { org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance ( ) . addVmToRun ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getVmId ( ) ) ; } return acquireLock ; }
public void getClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void initializeVds ( boolean newHost ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.RemoveVds , new org.ovirt.engine.core.common.vdscommands.RemoveVdsVDSCommandParameters ( org.ovirt.engine.core.bll.VdsCommand.getVdsId ( ) , newHost ) ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.AddVds , new org.ovirt.engine.core.common.vdscommands.AddVdsVDSCommandParameters ( org.ovirt.engine.core.bll.VdsCommand.getVdsId ( ) ) ) ; }
public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond = createNewCreateOrUpdateBond ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , "bond1" , "slaveA" , "slaveB" ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . setParams ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder ( ) . addBonds ( createOrUpdateBond ) ) . build ( ) ; doTestValidateModifiedBondSlaves ( org.mockito.Mockito.spy ( validator ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
public java.lang.String getInnerJoin ( java.lang.String searchObj , java.lang.String crossRefObj ) { final java.lang.String [ ] joinKey = mJoinDictionary.get ( org.ovirt.engine.core.compat.StringFormat.format ( "%1$s.%2$s" , searchObj , crossRefObj ) ) ; final java.lang.String crossRefTable = getRelatedTableName ( crossRefObj ) ; final java.lang.String searchObjTable = getRelatedTableName ( searchObj ) ; return org.ovirt.engine.core.compat.StringFormat.format ( " LEFT OUTER JOIN %3$s ON %1$s.%2$s=%3$s.%4$s " , searchObjTable , joinKey [ 0 ] , crossRefTable , joinKey [ 1 ] ) ; }
public void testGetAllWithPermissionsPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > result = dao.getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.StoragePoolDaoTest.NUMBER_OF_POOLS_FOR_PRIVELEGED_USER , result.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( result.iterator ( ) . next ( ) , existingEntity ) ; }
private void addDisk ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalActionWithTasksContext ( ActionType.AddDisk , buildAddDiskParameters ( disk ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( returnValue.getFault ( ) . getError ( ) , java.lang.String.format ( "Failed to create disk! %s" , disk.getDiskAlias ( ) ) ) ; } org.ovirt.engine.core.bll.HibernateVmCommand.getTaskIdList ( ) . addAll ( returnValue.getInternalVdsmTaskIdList ( ) ) ; }
public void setRepoImages ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > repoImages ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > entities = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.RepoImage i : repoImages ) { entities.add ( new org.ovirt.engine.ui.uicommonweb.models.storage.RepoImageModel ( i ) ) ; } setEntities ( entities ) ; }
private static org.ovirt.engine.core.common.businessentities.VM createVm ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.ovirt.engine.core.common.businessentities.VmDynamic dynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; org.ovirt.engine.core.common.businessentities.VmStatic stat = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; stat.setVmtGuid ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; stat.setName ( "testVm" ) ; stat.setPriority ( 1 ) ; vm.setStaticData ( stat ) ; vm.setDynamicData ( dynamic ) ; vm.setSingleQxlPci ( false ) ; return vm ; }
public static void GetClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertOvaVDSCommand.getBroker ( ) . convertVmFromOva ( org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertOvaVDSCommand.getParameters ( ) . getOvaPath ( ) , createVmProperties ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertOvaVDSCommand.getParameters ( ) . getVmId ( ) . toString ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertOvaVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( ( org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertOvaVDSCommand.getVDSReturnValue ( ) . getSucceeded ( ) ? org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertOvaVDSCommand.getParameters ( ) . getVmId ( ) : null ) ) ; }
public void testDedicatedHostNotExistOrNotSameCluster ( ) { prepareVmToPassValidate ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . isDedicatedVdsExistOnSameCluster ( org.mockito.ArgumentMatchers.any ( ) ) ; vmStatic.setDedicatedVmForVdsList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( command.validate ( ) , "validate should have failed with invalid dedicated host." ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel dataCenterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS localStorageHost = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; dataCenterGuideModel.localStorageHost = localStorageHost ; } else { noLocalStorageHost = true ; } dataCenterGuideModel.updateOptionsLocalFS ( ) ; }
public void load ( java.io.File file ) throws java.io.IOException { this . file = file ; org.w3c.dom.Document schema ; try { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance ( ) ; factory.setNamespaceAware ( true ) ; javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder ( ) ; schema = parser.parse ( file ) ; } catch ( java.lang.Exception exception ) { throw new java.io.IOException ( "Can't parse XML schema." , exception ) ; } xpath = javax.xml.xpath.XPathFactory.newInstance ( ) . newXPath ( ) ; xpath.setNamespaceContext ( new javax.xml.namespace.NamespaceContext ( ) { @ java.lang.Override public java.lang.String getNamespaceURI ( java.lang.String prefix ) { switch ( prefix ) { case "xs" : return "http://www.w3.org/2001/XMLSchema" ; default : return javax.xml.XMLConstants.NULL_NS_URI ; } } @ java.lang.Override public java.lang.String getPrefix ( java.lang.String namespaceURI ) { throw new java.lang.UnsupportedOperationException ( ) ; } @ java.lang.Override public java.util.Iterator getPrefixes ( java.lang.String namespaceURI ) { throw new java.lang.UnsupportedOperationException ( ) ; } } ) ; populateElementsIndex ( schema ) ; populateComplexTypesIndex ( schema ) ; }
private void initSorting ( ) { vmStatusColumn.makeSortable ( ) ; nameColumn.makeSortable ( ) ; clusterColumn.makeSortable ( ) ; ipColumn.makeSortable ( ) ; fqdnColumn.makeSortable ( ) ; nicActivateStatusColumn.makeSortable ( ) ; vnicNameColumn.makeSortable ( ) ; rxColumn.makeSortable ( ) ; txColumn.makeSortable ( ) ; totalRxColumn.makeSortable ( ) ; totalTxColumn.makeSortable ( ) ; descriptionColumn.makeSortable ( ) ; }
private org.ovirt.engine.core.extensions.mgr.ExtensionProxy loadExtension ( java.util.Properties props ) throws java.lang.Exception { org.ovirt.engine.core.extensions.mgr.ExtensionsManager.BindingsLoader loader = org.ovirt.engine.core.extensions.mgr.ExtensionsManager.bindingsLoaders.get ( props.getProperty ( Base.ConfigKeys.BINDINGS_METHOD ) ) ; if ( loader == null ) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException ( java.lang.String.format ( "Invalid binding method '%1$s'." , props.getProperty ( Base.ConfigKeys.BINDINGS_METHOD ) ) ) ; } return loader.load ( props ) ; }
protected void mockVds ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setClusterCompatibilityVersion ( org.ovirt.engine.core.compat.Version.getLast ( ) ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( command ) . getVdsDao ( ) ; org.mockito.Mockito.when ( vdsDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vds ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase executeChildCommand ( org.ovirt.engine.core.compat.Guid idInCommandsMap ) { org.ovirt.engine.core.bll.CommandBase < ? > command = childCommandsMap.get ( idInCommandsMap ) ; return org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler ( log ) . runAction ( command , getExecutionContext ( ) ) ; }
public void unmanagedVlanAddedToNic ( ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingIfaces ( nic ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , createVlan ( nic.getName ( ) , 100 , "net" ) ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORKS_DONT_EXIST_IN_CLUSTER ) ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
private void testDnsResolverConfiguration ( org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration vdsDnsResolver , org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration networkDnsResolver , org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration attachmentDnsResolver , boolean expectedInSync ) { iface.setIpv4DefaultRoute ( true ) ; iface.setIpv4BootProtocol ( Ipv4BootProtocol.DHCP ) ; org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address ( ) ; address.setBootProtocol ( Ipv4BootProtocol.DHCP ) ; testedNetworkAttachment.getIpConfiguration ( ) . setIPv4Addresses ( java.util.Collections.singletonList ( address ) ) ; network.setDnsResolverConfiguration ( networkDnsResolver ) ; testedNetworkAttachment.setDnsResolverConfiguration ( attachmentDnsResolver ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( true , vdsDnsResolver ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( expectedInSync ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId ( ) ; java.lang.String networkName = attachment.getNetworkName ( ) ; org.ovirt.engine.core.compat.Guid violatingEntityId = attachment.getId ( ) ; return validateCoherentIdentification ( violatingEntityId , networkId , networkName , EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY , networkBusinessEntityMap ) ; }
private org.ovirt.engine.core.common.businessentities.AuditLog getAuditLog ( ) { if ( ( auditLog ) == null ) { auditLog = auditLogDao.get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters ( ) . getAuditLogId ( ) ) ; } return auditLog ; }
public void getUserProfile ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetUserProfile , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public static void getRpmVersion ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion ) ; tempVar.setVersion ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
public static VdsNetworkInterface.NetworkImplementationDetails calculateNetworkImplementationDetails ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( iface.getNetworkName ( ) ) ) { return null ; } if ( network != null ) { if ( org.ovirt.engine.core.utils.NetworkUtils.isNetworkInSync ( iface , network , qos ) ) { return new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails ( true , true ) ; } else { return new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails ( false , true ) ; } } else { return new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails ( ) ; } }
public static void GetAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
public static void getGlusterSwiftServerServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public javax.ws.rs.core.Response remove ( ) { org.ovirt.engine.core.common.businessentities.Quota entity = getEntity ( org.ovirt.engine.core.common.businessentities.Quota.class , QueryType.GetQuotaByQuotaId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( parentId ) , parentId.toString ( ) ) ; updateEntityForRemove ( entity , asGuid ( id ) ) ; return performAction ( ActionType.UpdateQuota , new org.ovirt.engine.core.common.action.QuotaCRUDParameters ( entity ) ) ; }
private void insertHorizontalLine ( ) { addRow ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.templates.horizontalLine ( ) ) ; }
protected void setUpCommand ( ) { command = createCommand ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . areTemplateImagesInStorageReady ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . verifyAddVM ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles ( ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters ( ) . getParametersList ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImageDao ( ) . get ( parameters.getImageId ( ) ) ; if ( diskImage != null ) { permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( diskImage.getId ( ) , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.DISK_LIVE_STORAGE_MIGRATION ) ) ; } } return permissionList ; }
public void canDoActionEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( command ) ; }
public void diskSnapshotsCannotBePreviewed ( ) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot ( ) ; org.mockito.Mockito.when ( snapshotDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( activeSnapshot ) ; org.mockito.Mockito.when ( diskImageDao.get ( disk1.getImageId ( ) ) ) . thenReturn ( disk1 ) ; org.mockito.Mockito.when ( diskImageDao.get ( disk2.getImageId ( ) ) ) . thenReturn ( disk2 ) ; org.junit.Assert.assertThat ( validator.canDiskSnapshotsBePreviewed ( activeSnapshot.getId ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.CANNOT_PREVIEW_ACTIVE_SNAPSHOT ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVdsStatisticsDao ( ) ; staticDao = dbFacade.getVdsStaticDao ( ) ; dynamicDao = dbFacade.getVdsDynamicDao ( ) ; existingVds = staticDao.get ( FixturesTool.VDS_GLUSTER_SERVER2 ) ; newStaticVds = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; newStaticVds.setHostName ( "farkle.redhat.com" ) ; newStaticVds.setVdsGroupId ( existingVds.getVdsGroupId ( ) ) ; newStatistics = new org.ovirt.engine.core.common.businessentities.VdsStatistics ( ) ; }
public static void init ( final com.google.gwt.event.shared.EventBus eventBus ) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel = org.ovirt.engine.ui.uicommonweb.models.CommonModel.newInstance ( ) ; org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.common.uicommon.model.MainModelSelectionChangeEvent.fire ( eventBus , org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItem ( ) ) ; } } ) ; }
public void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected boolean validateUsbPolicy ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getParameters ( ) . getVm ( ) ; org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy ( vm.getStaticData ( ) ) ; return org.ovirt.engine.core.bll.VmHandler.isUsbPolicyLegal ( vm.getUsbPolicy ( ) , vm.getOs ( ) , getVdsGroup ( ) , getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
protected void expectGetLunsMap ( java.lang.String lunId , java.lang.String cnxId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap > ret = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap > ( ) ; org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap map = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap ( ) ; map.setLunId ( lunId ) ; map.setstorage_server_connection ( cnxId ) ; ret.add ( map ) ; org.mockito.Mockito.when ( storageServerConnectionLunMapDao.getAll ( lunId ) ) . thenReturn ( ret ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction ( ) { org.ovirt.engine.core.bll.job.ExecutionHandler.startFinalizingStep ( getExecutionContext ( ) ) ; try { setActionState ( ) ; handleTransactivity ( ) ; org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope ( endActionScope , this ) ; } catch ( javax.ejb.TransactionRolledbackLocalException e ) { log.infoFormat ( "EndAction: Transaction was aborted in {0}" , this . getClass ( ) . getName ( ) ) ; } finally { if ( getCommandShouldBeLogged ( ) ) { logCommand ( ) ; } } return getReturnValue ( ) ; }
public static void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void activateDetailModel ( ) { }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } upServer = getUpServer ( ) ; if ( ( upServer ) == null ) { addCanDoActionMessageVariable ( "clusterName" , org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroup ( ) . getName ( ) ) ; addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND ) ; return false ; } return true ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue ( ) ; if ( ( returnValueBase != null ) && ( returnValueBase.getSucceeded ( ) ) ) { if ( ( windowModel ) != null ) { windowModel.stopProgress ( ) ; listModel.setWindow ( null ) ; listModel.setConfirmWindow ( null ) ; listModel.search ( ) ; } } }
public void testGetAllForStorageDomainWithVms ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getAllForStorageDomain ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , result.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.VM_RHEL5_POOL_57 , result.get ( 0 ) . getId ( ) ) ; }
private boolean canRemoveDiskBasedOnStorageTypeCheck ( ) { if ( ( getDisk ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { return canRemoveDiskBasedOnImageStorageCheck ( ) ; } return true ; }
public static void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
private boolean isVmInterfacesConfigured ( ) { for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic : org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getInterfaces ( ) ) { if ( ( nic.getNetworkName ( ) ) == null ) { if ( ! ( org.ovirt.engine.core.bll.validator.FeatureSupported.networkLinking ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVdsGroupCompatibilityVersion ( ) ) ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED ) ; return false ; } else { return true ; } } } return true ; }
public void ovfUpdate ( ) { lock.lock ( ) ; try { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > storagePools = storagePoolDao.getAllByStatus ( StoragePoolStatus.Up ) ; updateOvfData ( storagePools ) ; } catch ( java.lang.Throwable t ) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.error ( "Exception updating ovf data: {}" , org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage ( t ) ) ; org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug ( "Exception" , t ) ; } finally { lock.unlock ( ) ; } }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { lockInteractionManager.hideLoadingIndicator ( ) ; getView ( ) . setErrorMessage ( loginModel.getMessage ( ) ) ; org.ovirt.engine.ui.common.presenter.AbstractLoginPopupPresenterWidget.logger.warning ( ( ( "Login failed for user [" + ( loginModel.getUserName ( ) . getEntity ( ) ) ) + "]" ) ) ; }
private void setObjectName ( java.lang.Object object , java.lang.String input , boolean isSuffix ) { java.lang.String nameForTheClonedVm = ( isSuffix ) ? ( getObjectName ( object ) ) + input : input ; setObjectName ( object , nameForTheClonedVm ) ; assignedVmNames.add ( nameForTheClonedVm ) ; }
public org.ovirt.engine.core.bll.ValidationResult consistentDataCenter ( ) { return ( ( qos ) != null ) && ( ( ( getOldQos ( ) ) == null ) || ( ! ( qos.getStoragePoolId ( ) . equals ( getOldQos ( ) . getStoragePoolId ( ) ) ) ) ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_QOS_STORAGE_POOL_NOT_CONSISTENT ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private static org.ovirt.engine.core.common.businessentities.Cluster createClusterWithAddtionalFeature ( ) { org.ovirt.engine.core.common.businessentities.Cluster group = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster ( ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_1 ) ; java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > addtionalFeaturesSupported = new java.util.HashSet < > ( ) ; org.ovirt.engine.core.common.businessentities.AdditionalFeature feature = new org.ovirt.engine.core.common.businessentities.AdditionalFeature ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.DEFAULT_FEATURE_ID , "TEST_FEATURE" , org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_1 , "Test Feature" , org.ovirt.engine.core.common.mode.ApplicationMode.AllModes ) ; addtionalFeaturesSupported.add ( new org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature ( group.getId ( ) , true , feature ) ) ; group.setAddtionalFeaturesSupported ( addtionalFeaturesSupported ) ; return group ; }
public org.ovirt.engine.core.common.businessentities.ServerCpu getServerCpuByName ( java.lang.String cpuName ) { org.ovirt.engine.core.common.businessentities.ServerCpu result = null ; if ( cpuName != null ) { result = _intelCpuByNameDictionary.get ( cpuName ) ; if ( result == null ) { result = _amdCpuByNameDictionary.get ( cpuName ) ; } if ( result == null ) { result = _ibmCpuByNameDictionary.get ( cpuName ) ; } } return result ; }
protected void setReadOnlyTemplateWithVersion ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion templateCouple ) { getModel ( ) . getTemplateWithVersion ( ) . setItems ( java.util.Collections.singleton ( templateCouple ) ) ; getModel ( ) . getTemplateWithVersion ( ) . setSelectedItem ( templateCouple ) ; getModel ( ) . getTemplateWithVersion ( ) . setIsChangeable ( false ) ; }
private static java.lang.Object instantiate ( java.lang.Class < ? > clz ) { java.lang.Object model = null ; try { model = clz.newInstance ( ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.api.restapi.types.MappingTestHelper.logger.error ( ( "Failed to instantiate class " + ( clz.getSimpleName ( ) ) ) , e ) ; } return model ; }
protected boolean canDoAction ( ) { java.lang.String sshPublicKey = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters ( ) . getUserProfile ( ) . getSshPublicKey ( ) ; if ( ( sshPublicKey == null ) || ( sshPublicKey.isEmpty ( ) ) ) { return true ; } if ( ! ( org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid ( sshPublicKey ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_INVALID_PUBLIC_SSH_KEY ) ; } return true ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateByName ( org.ovirt.engine.api.model.VM vm ) { return isFiltered ( ) ? lookupTemplateByName ( vm.getTemplate ( ) . getName ( ) ) : getEntity ( org.ovirt.engine.core.common.businessentities.VmTemplate.class , SearchType.VmTemplate , ( "Template: name=" + ( vm.getTemplate ( ) . getName ( ) ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createNic ( java.lang.String nicName , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , nicName , false , null , null , networkName ) ; }
public void commandFailsSlaveNotOvirtMonitored ( ) { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.SetupGlusterGeoRepMountBrokerInternalCommand ( new org.ovirt.engine.core.common.action.gluster.SetUpMountBrokerParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , new java.util.HashSet ( java.util.Collections.singletonList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) , null , null ) , null ) ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . getSlaveVolume ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( command.validate ( ) ) ; }
protected void handleSpecificCommandActions ( ) { if ( ( mVmList.size ( ) ) > 0 ) { org.ovirt.engine.core.bll.RestartVdsVmsOperation restartVmsOper = new org.ovirt.engine.core.bll.RestartVdsVmsOperation ( org.ovirt.engine.core.bll.StopVdsCommand.getContext ( ) , org.ovirt.engine.core.bll.StopVdsCommand.getVds ( ) ) ; restartVmsOper.restartVms ( mVmList ) ; runVdsCommand ( VDSCommandType.UpdateVdsVMsCleared , new org.ovirt.engine.core.common.vdscommands.UpdateVdsVMsClearedVDSCommandParameters ( org.ovirt.engine.core.bll.StopVdsCommand.getVds ( ) . getId ( ) ) ) ; } }
public static org.ovirt.engine.core.common.businessentities.VmDevice findVmDeviceByType ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.VmDevice > vmManagedDeviceMap , java.lang.String typeName ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmManagedDeviceMap.values ( ) ) { if ( vmDevice.getDevice ( ) . equals ( typeName ) ) { return vmDevice ; } } return null ; }
private java.lang.String getDirectoryGroupSearchPattern ( java.lang.String groupname , java.lang.String domain ) { java.lang.String constraint = org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( getUriInfo ( ) , org.ovirt.engine.core.common.businessentities.aaa.DbGroup.class , false ) ; final java.lang.StringBuilder sb = new java.lang.StringBuilder ( 128 ) ; sb.append ( java.text.MessageFormat.format ( ResourceConstants.AAA_GROUPS_SEARCH_TEMPLATE , domain , "" ) ) ; sb.append ( ( org.apache.commons.lang.StringUtils.isEmpty ( constraint ) ? "allnames=" + groupname : constraint ) ) ; return sb.toString ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainsByStoragePoolId ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > allDomains , org.ovirt.engine.core.common.businessentities.StorageDomainType type ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain s : allDomains ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatus status = s.getStatus ( ) ; if ( ( ( s.getStorageDomainType ( ) ) == type ) && ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) == status ) || ( ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown ) == status ) ) ) { domains.add ( s ) ; } } return domains ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc add_image_ticket ( java.lang.String ticketId , java.lang.String [ ] ops , long timeout , long size , java.lang.String url ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.add_image_ticket ( ticketId , ops , timeout , size , url ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "imageSizeInBytes" , getImageSizeInBytes ( ) ) . append ( "volumeFormat" , getVolumeFormat ( ) ) . append ( "srcImageGroupId" , getSrcImageGroupId ( ) ) . append ( "srcImageId" , getSrcImageId ( ) ) . append ( "newImageGroupId" , getNewImageGroupId ( ) ) . append ( "newImageId" , getNewImageID ( ) ) . append ( "description" , getDescription ( ) ) . append ( "initialSize" , getInitialSize ( ) ) ; }
public void onLogout ( ) { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; query.setHandleFailure ( true ) ; query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { Window.Location.reload ( ) ; } } ; frontend.logoffAsync ( frontend.getLoggedInUser ( ) , query ) ; }
public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : disks ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext ( getImagesActionType ( ) , buildModeOrCopyImageGroupParameters ( containerID , disk ) ) ; getReturnValue ( ) . getVdsmTaskIdList ( ) . addAll ( vdcRetValue.getInternalVdsmTaskIdList ( ) ) ; } return null ; }
public static void GetVmTemplatesWithPermittedAction ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters ( ) ; getEntitiesWithPermittedActionParameters.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplatesWithPermittedAction , getEntitiesWithPermittedActionParameters , aQuery ) ; }
private org.ovirt.engine.api.model.Network getNetworkByName ( java.lang.String networkName , java.util.List < org.ovirt.engine.api.model.Network > networks ) { for ( org.ovirt.engine.api.model.Network network : networks ) { if ( network.getName ( ) . equals ( networkName ) ) { return network ; } } return null ; }
private void vdsGroupHasVds ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; vdsList.add ( new org.ovirt.engine.core.common.businessentities.VDS ( ) ) ; org.mockito.Mockito.when ( vdsDAO.getAllForVdsGroup ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vdsList ) ; }
public static void getRpmVersionViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void setAuthenticationMethod ( org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod value ) { hostAuthenticationMethod = value ; }
public void canDoActionTemplateImageIsLocked ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Copy ) ; initTemplateDiskImage ( ) ; command.getImage ( ) . setImageStatus ( ImageStatus.LOCKED ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ) . when ( command ) . getTemplateForImage ( ) ; command.defineVmTemplate ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED.toString ( ) ) ) ; }
public static void GetVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result.getState ( ) ) ) ; localModel.StopProgress ( ) ; CancelConfirm ( ) ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
private void addVmPoolTypes ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.VmPoolType [ ] values ) { if ( org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_6 ) ) { org.ovirt.engine.api.model.VmPoolTypes types = new org.ovirt.engine.api.model.VmPoolTypes ( ) ; for ( org.ovirt.engine.api.model.VmPoolType state : values ) { types.getVmPoolTypes ( ) . add ( state.value ( ) ) ; } version.setVmPoolTypes ( types ) ; } }
public void reportCompleted ( ) { if ( isRunAndPaused ( ) ) { final org.ovirt.engine.core.bll.job.ExecutionContext executionContext = org.ovirt.engine.core.bll.RunVmCommand.getExecutionContext ( ) ; executionContext.setShouldEndJob ( true ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( executionContext , true ) ; } else { super . reportCompleted ( ) ; } }
private void mockStoragePoolDao ( ) { org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; sp.setId ( spId ) ; sp.setStatus ( StoragePoolStatus.Up ) ; org.mockito.Mockito.when ( storagePoolDAO.get ( spId ) ) . thenReturn ( sp ) ; org.mockito.Mockito.doReturn ( storagePoolDAO ) . when ( spyCommand ) . getStoragePoolDAO ( ) ; }
public void testRemoveNetworkFromIscsiBond ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > networks = dao.getNetworkIdsByIscsiBondId ( iscsiBondId ) ; networkId = networks.get ( 0 ) ; dao.removeNetworkFromIscsiBond ( iscsiBondId , networkId ) ; networks = dao.getNetworkIdsByIscsiBondId ( iscsiBondId ) ; org.junit.Assert.assertTrue ( networks.isEmpty ( ) ) ; }
protected void endSuccessfully ( ) { removeRedundantVolumesForOrphanedDisks ( ) ; if ( ! ( org.ovirt.engine.core.bll.storage.RestoreAllCinderSnapshotsCommand.getParameters ( ) . isParentHasTasks ( ) ) ) { unlockSnapshot ( org.ovirt.engine.core.bll.storage.RestoreAllCinderSnapshotsCommand.getParameters ( ) . getSnapshot ( ) . getId ( ) ) ; super . endSuccessfully ( ) ; } org.ovirt.engine.core.bll.storage.RestoreAllCinderSnapshotsCommand.setSucceeded ( true ) ; }
protected void setGetTemplateQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; template.setVdsGroupId ( GUIDS [ 0 ] ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { PARENT_ID } , template ) ; } }
protected void setupForStorageTests ( ) { org.mockito.Mockito.doReturn ( multipleSdValidator ) . when ( command ) . getStorageDomainsValidator ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.anySetOf ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( multipleSdValidator ) . allDomainsWithinThresholds ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( multipleSdValidator ) . allDomainsHaveSpaceForNewDisks ( org.mockito.ArgumentMatchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > watchdogs = getWatchdogs ( ) ; if ( watchdogs.isEmpty ( ) ) { return failCanDoAction ( VdcBllMessages.WATCHDOG_NOT_FOUND ) ; } if ( ( ! ( getParameters ( ) . isInstanceType ( ) ) ) && ( ! ( validate ( validateModelCompatibleWithOs ( ) ) ) ) ) { return false ; } return true ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , ? > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( lastExecutedCommand == ( getModel ( ) . getRemoveCommand ( ) ) ) { return removeConfirmPopupProvider.get ( ) ; } else if ( lastExecutedCommand == ( getModel ( ) . getSparsifyCommand ( ) ) ) { return sparsifyConfirmPopupProvider.get ( ) ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
private void newMacPool ( ) { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel model = new org.ovirt.engine.ui.uicommonweb.models.macpool.NewSharedMacPoolModel ( this ) ; model.setEntity ( new org.ovirt.engine.core.common.businessentities.MacPool ( ) ) ; setWindow ( model ) ; }
public static java.lang.String map ( org.ovirt.engine.core.common.businessentities.ArchitectureType model , java.lang.String template ) { if ( model != null ) { switch ( model ) { case undefined : return Architecture.UNDEFINED.value ( ) ; case x86_64 : return Architecture.X86_64.value ( ) ; case ppc64 : return Architecture.PPC64.value ( ) ; default : return null ; } } return null ; }
public static boolean IsDataActiveStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { boolean isData = ( ( storageDomain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Data ) ) || ( ( storageDomain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) ; boolean isActive = org.ovirt.engine.ui.uicommonweb.Linq.IsActiveStorageDomain ( storageDomain ) ; return isData && isActive ; }
public void volumeInfoIsEmpty ( ) { givenListOfImagesAndVolumes ( ) ; mockVdsCommand ( VDSCommandType.GetImageInfo , unsuccessfulReturnValue ( null ) ) ; java.util.Map < java.lang.String , java.lang.String > config = fetchConfig ( ) ; verifyCalled ( VDSCommandType.GetImagesList , org.mockito.Mockito.times ( 1 ) ) ; verifyCalled ( VDSCommandType.GetVolumesList , org.mockito.Mockito.times ( 1 ) ) ; verifyCalled ( VDSCommandType.GetImageInfo , org.mockito.Mockito.times ( 1 ) ) ; verifyCalled ( VdcActionType.RetrieveImageData , org.mockito.Mockito.never ( ) ) ; org.junit.Assert.assertThat ( config , org.hamcrest.core.Is.is ( java.util.Collections.emptyMap ( ) ) ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.Cluster cluster , java.lang.String value ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < > ( ) ; parameters.put ( FragmentParams.NAME.getName ( ) , cluster.getName ( ) ) ; getPlaceTransitionHandler ( ) . handlePlaceTransition ( WebAdminApplicationPlaces.clusterGeneralSubTabPlace , parameters ) ; }
private java.lang.String GetValue ( java.lang.Object obj ) { if ( obj instanceof org.ovirt.engine.core.common.businessentities.VM ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . getVmName ( ) ; } if ( obj instanceof org.ovirt.engine.core.common.businessentities.VmPool ) { return ( ( org.ovirt.engine.core.common.businessentities.VmPool ) ( obj ) ) . getvm_pool_name ( ) ; } throw new org.ovirt.engine.core.compat.NotImplementedException ( ) ; }
protected void removeSnapshot ( org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot ) { org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getImageStorageDomainMapDao ( ) . remove ( snapshot.getImageId ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getImageDao ( ) . remove ( snapshot.getImageId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesForDisk = diskImageDao.getAllSnapshotsForImageGroup ( snapshot.getId ( ) ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk.isEmpty ( ) ) ) { baseDiskDao.remove ( snapshot.getId ( ) ) ; } }
public void testExecuteQuery ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . isWindowsOS ( ) ) . thenReturn ( true ) ; getQuery ( ) . executeQueryCommand ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.Map < java.lang.String , java.lang.String > result = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ) ; assertEquals ( "Wrong number of time zones" , SysprepHandler.timeZoneIndex.size ( ) , result.size ( ) ) ; }
public void setSelectedItem ( org.ovirt.engine.core.common.businessentities.VDS value ) { if ( value == null ) { setSelectedItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ) ; } else { setSelectedItems ( new java.util.ArrayList ( java.util.Arrays.asList ( value ) ) ) ; } }
default void inputDetail ( ) { org.ovirt.api.metamodel.language.ApiLanguage.or ( org.ovirt.api.metamodel.language.ApiLanguage.mandatory ( storageDomain ( ) . id ( ) ) , org.ovirt.api.metamodel.language.ApiLanguage.mandatory ( storageDomain ( ) . name ( ) ) ) ; org.ovirt.api.metamodel.language.ApiLanguage.optional ( diskProfile ( ) . id ( ) ) ; org.ovirt.api.metamodel.language.ApiLanguage.optional ( quota ( ) . id ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel clusterPolicyListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.scheduling.PolicyUnit > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.scheduling.PolicyUnit > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; clusterPolicyListModel.setPolicyUnits ( list ) ; clusterPolicyListModel.fetchClusterPolicies ( ) ; if ( ( policyUnitModel ) != null ) { policyUnitModel.getPolicyUnits ( ) . setItems ( sort ( policyUnits ) ) ; } }
protected void onCommonModelChange ( ) { super . onCommonModelChange ( ) ; getModel ( ) . getResetRequestedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel > items = getModel ( ) . getItems ( ) ; if ( ( items != null ) && ( ! ( items.isEmpty ( ) ) ) ) { selectionModel.setSelected ( items.get ( 0 ) , true ) ; } } } ) ; }
public void testGetDataAndSetDataWithSessionParam ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( "" ) ; container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ; org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public void updateInterface ( org.ovirt.engine.core.common.businessentities.storage_pool datacenter ) { if ( datacenter == null ) { return ; } getDiskInterface ( ) . setItems ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDiskInterfaceList ( ) ) ; getDiskInterface ( ) . setSelectedItem ( ( getIsNew ( ) ? org.ovirt.engine.core.common.businessentities.DiskInterface.VirtIO : getDisk ( ) . getDiskInterface ( ) ) ) ; }
public void shouldNotElectInactiveHostedEngineDomain ( ) { prepareStorageDomainForElection ( StorageDomainStatus.Inactive , org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME ) ; org.mockito.Mockito.when ( hostedEngineHelper.isHostedEngineStorageDomain ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.StorageDomain.class ) ) ) . thenReturn ( true ) ; org.junit.Assert.assertEquals ( null , cmd.electNewMaster ( false , true , false ) ) ; }
public void testNotLinkedToExternalNetworkPositive ( ) { org.mockito.Mockito.when ( network.getId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ; org.mockito.Mockito.when ( networkDao.getAllExternalNetworksLinkedToPhysicalNetwork ( org.mockito.ArgumentMatchers.eq ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.notLinkedToExternalNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected boolean canDoAction ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > domainsMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; if ( ! ( canDoActionBeforeCloneVm ( domainsMap ) ) ) { return false ; } if ( getParameters ( ) . isImportAsNewEntity ( ) ) { initImportClonedVm ( ) ; } return canDoActionAfterCloneVm ( domainsMap ) ; }
protected void ExecuteVdsIdCommand ( ) { org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.log.infoFormat ( "AddVds - entered , starting logic to add VDS {0}" , org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.getVdsId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.getVdsId ( ) ) ; org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.log.infoFormat ( "AddVds - VDS {0} was added, will try to add it to the resource manager" , org.ovirt.engine.core.vdsbroker.AddVdsVDSCommand.getVdsId ( ) ) ; org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . AddVds ( vds , false ) ; }
public void storageTypeUnsupported ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = mockGetExistingDomain ( true ) ; sd.setStorageType ( StorageType.CINDER ) ; sd.setId ( org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommandTest.HE_SD_ID ) ; cmd.init ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( "" , cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED ) ; org.mockito.Mockito.verify ( backend , org.mockito.Mockito.times ( 1 ) ) . runInternalQuery ( org.mockito.ArgumentMatchers.eq ( QueryType.GetExistingStorageDomainList ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.queries.QueryParametersBase.class ) ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.times ( 0 ) ) . executeCommand ( ) ; }
public static void GetNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters ( dataCenterId ) , aQuery ) ; }
public void logAuditMessage ( final org.ovirt.engine.core.compat.Guid clusterId , final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , final org.ovirt.engine.core.common.businessentities.VDS server , final org.ovirt.engine.core.common.AuditLogType logType , final org.ovirt.engine.core.compat.Guid brickId , final java.lang.String brickPath ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers ( new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ) ; logable.setVds ( server ) ; logable.setGlusterVolume ( volume ) ; logable.setClusterId ( clusterId ) ; logable.setBrickId ( brickId ) ; logable.setBrickPath ( brickPath ) ; auditLogDirector.log ( logable , logType ) ; }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic entity ) { return createIdParameterMapper ( entity.getId ( ) ) . addValue ( "read_rate" , entity.getReadRate ( ) ) . addValue ( "write_rate" , entity.getWriteRate ( ) ) . addValue ( "actual_size" , entity.getActualSize ( ) ) . addValue ( "read_latency_seconds" , entity.getReadLatency ( ) ) . addValue ( "write_latency_seconds" , entity.getWriteLatency ( ) ) . addValue ( "flush_latency_seconds" , entity.getFlushLatency ( ) ) ; }
protected void UpdateDetailsAvailability ( ) { if ( ( getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.Disk disk = ( ( org.ovirt.engine.core.common.businessentities.Disk ) ( getSelectedItem ( ) ) ) ; diskVmListModel.setIsAvailable ( ( ( disk.getVmEntityType ( ) ) != ( org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE ) ) ) ; diskTemplateListModel.setIsAvailable ( ( ( disk.getVmEntityType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE ) ) ) ; diskStorageListModel.setIsAvailable ( ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) ) ; } }
protected void onSaveMAC ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nicToSave ) { nicToSave.setMacAddress ( ( getMAC ( ) . getIsChangable ( ) ? ( getMAC ( ) . getEntity ( ) ) == null ? null : ( ( java.lang.String ) ( getMAC ( ) . getEntity ( ) ) ) . toLowerCase ( ) : getDefaultMacAddress ( ) ) ) ; }
protected java.lang.Object [ ] getSelectedKeys ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItems ( ) ) == null ) { return new java.lang.Object [ 0 ] ; } else { java.util.ArrayList < java.lang.Object > items = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItems ( ) ) { items.add ( vdsGroup.getId ( ) ) ; } return items.toArray ( new java.lang.Object [ ] { } ) ; } }
public void setSubTabPanelVisible ( boolean subTabPanelVisible ) { if ( ( this . subTabPanelVisible ) != subTabPanelVisible ) { splitPanel.clear ( ) ; if ( subTabPanelVisible ) { splitPanel.addSouth ( subTabPanelContainer , org.ovirt.engine.ui.userportal.section.main.view.AbstractSideTabWithDetailsView.subTabPanelHeight ) ; splitPanel.add ( table ) ; splitPanel.init ( ) ; } else { splitPanel.add ( table ) ; } this . subTabPanelVisible = subTabPanelVisible ; } }
private void expectGetDeviceList ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setSucceeded ( true ) ; returnValue.setReturnValue ( org.ovirt.engine.core.bll.storage.disk.lun.GetLunsByVgIdQueryTest.setUpLunsFromDeviceList ( ) ) ; org.mockito.Mockito.when ( vdsBrokerFrontendMock.runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetDeviceList ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters.class ) ) ) . thenReturn ( returnValue ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotConfigSet ( java.lang.String volumeName , java.lang.String configName , java.lang.String configValue ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotConfigSet" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "option" , configName ) . withParameter ( "value" , configValue ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void updateStatusForVds ( ) { org.ovirt.engine.core.common.businessentities.VdsKdumpStatus existing = new org.ovirt.engine.core.common.businessentities.VdsKdumpStatus ( ) ; existing.setVdsId ( FixturesTool.HOST_ID ) ; existing.setStatus ( KdumpFlowStatus.FINISHED ) ; existing.setAddress ( "[\"192.168.122.25\", 4444]" ) ; dao.update ( existing ) ; org.ovirt.engine.core.common.businessentities.VdsKdumpStatus found = dao.get ( existing.getVdsId ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( found ) ; org.junit.jupiter.api.Assertions.assertEquals ( existing , found ) ; }
public void testBootProtocolSetForRoleNetworkWhenBootProtocolIsDhcp ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( NetworkBootProtocol.DHCP , null , null ) ; attachment.setNetworkId ( network.getId ( ) ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( true , false , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , network , attachment ) ; }
public void setUp ( ) { org.ovirt.engine.core.dal.dbbroker.DbEngineDialect dialectMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dal.dbbroker.DbEngineDialect.class ) ; org.mockito.Mockito.when ( dialectMock.getParamNamePrefix ( ) ) . thenReturn ( "" ) ; paramSource = new org.ovirt.engine.core.dal.dbbroker.CustomMapSqlParameterSource ( dialectMock ) ; paramName = org.apache.commons.lang.RandomStringUtils.randomAlphabetic ( 10 ) ; this . random = new java.util.Random ( ) ; }
public void getWANColorDepth ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt ( ( ( java.lang.Integer ) ( source ) ) ) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void addCanDoActionMessageVariable ( java.lang.String varName , java.lang.Object varValue ) { getReturnValue ( ) . getCanDoActionMessages ( ) . add ( java.lang.String.format ( "$%s %s" , varName , varValue ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionResume ( java.lang.String volumeName , java.lang.String slaveHostName , java.lang.String slaveVolumeName , java.lang.String userName , boolean force ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterVolumeGeoRepSessionResume ( volumeName , slaveHostName , slaveVolumeName , userName , force ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.bll.AutoStartVmsRunner.AutoStartVmToRestart ) ) { return false ; } org.ovirt.engine.core.bll.AutoStartVmsRunner.AutoStartVmToRestart other = ( ( org.ovirt.engine.core.bll.AutoStartVmsRunner.AutoStartVmToRestart ) ( obj ) ) ; return java.util.Objects.equals ( vmId , other.vmId ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsType > getGraphicsTypesOfEntity ( org.ovirt.engine.core.compat.Guid entityId ) { java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsType > result = new java.util.ArrayList < > ( ) ; if ( entityId != null ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.getGraphicsDevices ( entityId ) ; if ( devices != null ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { result.add ( org.ovirt.engine.core.common.businessentities.GraphicsType.fromString ( device.getDevice ( ) ) ) ; } } } return result ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) { org.junit.jupiter.api.Assertions.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetDeviceList , org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.HOST_GUID } , setUpLuns ( ) , failure ) ; }
private org.ovirt.engine.core.compat.Guid getVmToAttach ( org.ovirt.engine.core.compat.NGuid poolId ) { if ( ( vmToAttach ) == null ) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getPrestartedVmToAttach ( poolId ) ; if ( ( vmGuid == null ) || ( Guid.Empty.equals ( vmGuid ) ) ) { vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getNonPrestartedVmToAttach ( poolId ) ; } vmToAttach = vmGuid ; } return vmToAttach ; }
private java.lang.String getRealKey ( java.lang.String agent , java.lang.String displayedKey ) { java.lang.String result = "" ; if ( ( org.apache.commons.lang.StringUtils.isNotEmpty ( agent ) ) && ( org.apache.commons.lang.StringUtils.isNotEmpty ( displayedKey ) ) ) { if ( fenceOptionMapping.containsKey ( agent ) ) { java.util.HashMap < java.lang.String , java.lang.String > agentOptions = fenceOptionMapping.get ( agent ) ; result = agentOptions.getOrDefault ( displayedKey , displayedKey ) ; } else { org.ovirt.engine.core.utils.pm.VdsFenceOptions.log.error ( org.ovirt.engine.core.utils.pm.VdsFenceOptions.AGENT_ERROR , agent ) ; } } return result ; }
public void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void endVmCommand ( ) { org.ovirt.engine.core.bll.StopVmCommandBase.setCommandShouldBeLogged ( false ) ; if ( ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) ) == null ) { org.ovirt.engine.core.bll.StopVmCommandBase.log.warn ( "VM is null, not performing full endAction" ) ; org.ovirt.engine.core.bll.StopVmCommandBase.setSucceeded ( true ) ; return ; } org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . setStatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.StopVmCommandBase.getSnapshotDao ( ) . removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.StopVmCommandBase.getVmId ( ) ) ; org.ovirt.engine.core.bll.StopVmCommandBase.getVmDynamicDao ( ) . update ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getDynamicData ( ) ) ; org.ovirt.engine.core.bll.StopVmCommandBase.setSucceeded ( true ) ; }
private void validateProvider ( ) throws org.ovirt.engine.core.domains.ManageDomainsResult { if ( contains ( org.ovirt.engine.core.domains.ManageDomainsArguments.ARG_PROVIDER ) ) { try { org.ovirt.engine.core.ldap.LdapProviderType.valueOfIgnoreCase ( get ( org.ovirt.engine.core.domains.ManageDomainsArguments.ARG_PROVIDER ) ) ; } catch ( java.lang.IllegalArgumentException | java.lang.NullPointerException ex ) { throw new org.ovirt.engine.core.domains.ManageDomainsResult ( ManageDomainsResultEnum.INVALID_ARGUMENT_VALUE , java.lang.String.format ( "Invalid provider, valid providers are: '%s'." , org.apache.commons.lang.StringUtils.join ( new java.lang.String [ ] { org.ovirt.engine.core.domains.ManageDomainsArguments.PROV_AD , org.ovirt.engine.core.domains.ManageDomainsArguments.PROV_IPA , org.ovirt.engine.core.domains.ManageDomainsArguments.PROV_RHDS , org.ovirt.engine.core.domains.ManageDomainsArguments.PROV_ITDS , org.ovirt.engine.core.domains.ManageDomainsArguments.PROV_OLDAP } , ", " ) ) ) ; } } }
private < T extends org.ovirt.engine.core.dao.DAO > T getDao ( java.lang.Class < T > daoType ) { for ( org.ovirt.engine.core.dao.DAO dao : daos ) { if ( daoType.isAssignableFrom ( dao.getClass ( ) ) ) { return ( ( T ) ( dao ) ) ; } } org.ovirt.engine.core.dal.dbbroker.DbFacade.log.error ( ( "Can't find dao for " + daoType ) ) ; return null ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getGlusterHook ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String glusterCommand , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStage stage , java.lang.String hookName ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity glusterHook = getCallsHandler ( ) . executeRead ( "GetGlusterHook" , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoDbFacadeImpl.glusterHookRowMapper , getCustomMapSqlParameterSource ( ) . addValue ( "cluster_id" , clusterId ) . addValue ( "gluster_command" , glusterCommand ) . addValue ( "stage" , org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull ( stage ) ) . addValue ( "name" , hookName ) . addValue ( "includeContent" , false ) ) ; return glusterHook ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterHost.logicalVolumeList" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterLocalLogicalVolumeListReturn ( response ) ; }
public void getVmList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String poolName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: pool=" + poolName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
protected boolean validate ( org.ovirt.engine.core.bll.ValidationResult validationResult ) { if ( ! ( validationResult.isValid ( ) ) ) { addCanDoActionMessage ( validationResult.getMessage ( ) ) ; if ( ( validationResult.getVariableReplacements ( ) ) != null ) { for ( java.lang.String variableReplacement : validationResult.getVariableReplacements ( ) ) { addCanDoActionMessage ( variableReplacement ) ; } } } return validationResult.isValid ( ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( transport , name ) ; }
public void getVMsWithVNumaNodesByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid clusterId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmsWithNumaByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , asyncQuery ) ; }
public static void getAllDataCenterNetworks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( storagePoolId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNetworksByDataCenterId , params , aQuery ) ; }
public void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails > aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public void testGetSameID ( ) throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.Tags existing = dao.get ( org.ovirt.engine.core.dao.MultiThreadedDaoTest.EXISTING_TAGS_IDS [ 0 ] ) ; createAndRunThreadsForRunner ( ( ) -> { org.ovirt.engine.core.common.businessentities.Tags result = dao.get ( existing.getTagId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( existing , result ) ; } , 100 ) ; }
protected void toggleGhost ( org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType value , org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor item , boolean becomingGhost ) { item.profileEditor.setEnabled ( ( ! becomingGhost ) ) ; item.profileEditor.asWidget ( ) . setEnabled ( true ) ; if ( ! becomingGhost ) { vnics.add ( value.getNetworkInterface ( ) ) ; } realEntryCount += ( becomingGhost ) ? - 1 : 1 ; updateHeaderLabel ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , name , true , null , null , null , networkName , true , null , null , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) ; mockCalculateBaseNicWhenBaseNicIsPassed ( bond ) ; return bond ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValueObj ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) ; java.lang.Object returnValue2 = returnValue.getReturnValue ( ) ; hostSetupNetworksParametersData.getNetworkAttachments ( ) . addAll ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > ) ( returnValue2 ) ) ) ; queryVfsConfig ( ) ; }
private void addSharedLockEntry ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( sharedLockMap ) == null ) { sharedLockMap = new java.util.HashMap < > ( ) ; } sharedLockMap.put ( vds.getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.POOL , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
public static org.ovirt.engine.core.common.businessentities.aaa.DbUser persistAuthenticatedUser ( org.ovirt.engine.core.aaa.DirectoryUser directoryUser ) { org.ovirt.engine.core.dao.DbUserDAO dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) ; org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dao.getByExternalId ( directoryUser.getDirectoryName ( ) , directoryUser.getId ( ) ) ; if ( dbUser != null ) { dao.update ( dbUser ) ; } else { dbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( directoryUser ) ; dbUser.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; dao.save ( dbUser ) ; } return dbUser ; }
protected void initConnectionList ( boolean includeInactiveDomains ) { java.util.Set < org.ovirt.engine.core.common.businessentities.StorageDomainStatus > statuses ; statuses = ( includeInactiveDomains ) ? java.util.EnumSet.of ( StorageDomainStatus.Active , StorageDomainStatus.Unknown , StorageDomainStatus.Inactive ) : java.util.EnumSet.of ( StorageDomainStatus.Active , StorageDomainStatus.Unknown ) ; _connections = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . getStorageConnectionsByStorageTypeAndStatus ( org.ovirt.engine.core.bll.storage.ConnectHostToStoragePoolServerCommandBase.getStoragePool ( ) . getId ( ) , null , statuses ) ; updateConnectionsTypeMap ( ) ; }
public boolean isCacheUpdateNeeded ( ) { int quotaCount = getQuotaDAO ( ) . getQuotaCount ( ) ; int cacheCount = 0 ; lock.readLock ( ) . lock ( ) ; try { for ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.Quota > quotaMap : storagePoolQuotaMap.values ( ) ) { cacheCount += quotaMap.size ( ) ; } } finally { lock.readLock ( ) . unlock ( ) ; } return cacheCount < ( ( quotaCount * ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.MinimumPercentageToUpdateQuotaCache ) ) ) / 100 ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeEventListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( lastExecutedCommand.equals ( getModel ( ) . getDetailsCommand ( ) ) ) { return eventPopupProvider.get ( ) ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkClusterDAO ( ) . update ( getNetworkCluster ( ) ) ; if ( getNetworkCluster ( ) . isDisplay ( ) ) { org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkClusterDAO ( ) . setNetworkExclusivelyAsDisplay ( org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getVdsGroupId ( ) , getNetwork ( ) . getId ( ) ) ; } org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getVdsGroupId ( ) , getNetwork ( ) ) ; org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.setSucceeded ( true ) ; }
private void populateDisksWithVmData ( java.util.List < ? extends org.ovirt.engine.core.common.businessentities.storage.Disk > disks , org.ovirt.engine.core.compat.Guid vmId ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = diskVmElementDao.get ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk.getId ( ) , vmId ) ) ; disk.setDiskVmElements ( java.util.Collections.singletonList ( dve ) ) ; } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) { return null ; } if ( ( vm.getBackgroundOperationDescription ( ) ) != null ) { return null ; } return super . getValue ( vm ) ; }
protected void updateConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item ) { super . updateConsoleModel ( item ) ; if ( ( ( item.getEntity ( ) ) != null ) && ( ( item.getDefaultConsoleModel ( ) ) != null ) ) { item.getDefaultConsoleModel ( ) . setForceVmStatusUp ( false ) ; } }
public static boolean isMixedStorageDomainsSupported ( org.ovirt.engine.core.compat.Version version ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.MixedDomainTypesInDataCenter , version.toString ( ) ) ) ) ; }
private void initFullList ( java.util.Map < java.lang.String , java.lang.Object > ... deviceInfos ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setReturnValue ( new java.util.Map [ ] { getFullList ( org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID , deviceInfos ) } ) ; returnValue.setSucceeded ( true ) ; org.mockito.Mockito.doReturn ( returnValue ) . when ( resourceManager ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.FullList ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters.class ) ) ; }
private static void assertDiskDescriptionMap ( java.lang.String diskAlias , java.lang.String diskDescription ) throws java.io.IOException { org.junit.Assert.assertEquals ( "Should be map of disk alias and disk description" , java.lang.String.format ( ( "{\"DiskAlias\":\"%s\"," + "\"DiskDescription\":\"%s\"}" ) , diskAlias , org.apache.commons.lang.StringUtils.defaultString ( diskDescription ) ) , org.ovirt.engine.core.bll.ImagesHandler.getJsonDiskDescription ( diskAlias , diskDescription ) ) ; }
private org.ovirt.engine.core.compat.Guid mockSourceImageAndGetId ( ) { return mockSourceImage ( ) . getImageId ( ) ; }
private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity ( org.ovirt.engine.core.compat.Guid parentCommandId , boolean callBackEnabled ) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity ( getCommandId ( ) , parentCommandId , ( ( getExecutionContext ( ) . getJob ( ) ) == null ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext ( ) . getJob ( ) . getId ( ) ) , ( ( getExecutionContext ( ) . getStep ( ) ) == null ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext ( ) . getStep ( ) . getId ( ) ) , getActionType ( ) , getParameters ( ) , commandStatus , callBackEnabled , getReturnValue ( ) ) ; }
public static void getAllVnicProfiles ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVnicProfiles , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; org.ovirt.engine.api.restapi.resource.BackendTemplateBasedResourceTest.setUpGetConsoleExpectations ( new int [ ] { 0 } ) ; setUpGetVirtioScsiExpectations ( new int [ ] { 0 } ) ; org.ovirt.engine.api.restapi.resource.BackendTemplateBasedResourceTest.setUpGetRngDeviceExpectations ( new int [ ] { 0 } ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmTemplate , org.ovirt.engine.core.common.action.UpdateVmTemplateParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; verifyModel ( resource.update ( getRestModel ( 0 ) ) , 0 ) ; }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters ( ) { return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters ( new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters ( org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getStorageDomainId ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getImageGroupId ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getImageList ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . isPostZero ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . isForce ( ) ) ) ; }
public static void isFloppySupported ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery , java.lang.Integer osId , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter < > ( java.lang.Boolean.FALSE ) ; org.ovirt.engine.core.common.queries.OsQueryParameters params = new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetFloppySupport , osId , version ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , params , aQuery ) ; }
private java.lang.String getInnerQuery ( java.lang.String tableName , java.lang.String primeryKey , java.lang.String fromStatement , java.lang.StringBuilder wherePhrase , java.lang.StringBuilder sortExpr ) { if ( ( sortExpr.indexOf ( "(" ) ) > 0 ) { return org.ovirt.engine.core.compat.StringFormat.format ( "SELECT %1$s.%2$s FROM %3$s %4$s" , tableName , primeryKey , fromStatement , wherePhrase ) ; } else { return org.ovirt.engine.core.compat.StringFormat.format ( "SELECT distinct %1$s.%2$s FROM %3$s %4$s" , tableName , primeryKey , fromStatement , wherePhrase ) ; } }
private void fillDefaults ( java.util.Map < java.lang.String , java.lang.Object > argMap ) { for ( org.ovirt.engine.core.uutils.cli.parser.Argument arg : arguments.values ( ) ) { if ( ( ! ( argMap.containsKey ( arg.getName ( ) ) ) ) && ( ( arg.getDefaultValue ( ) ) != null ) ) { putValue ( argMap , arg , org.ovirt.engine.core.uutils.cli.parser.StringValueConverter.getObjectValueByString ( arg.getValueType ( ) , doSubstitutions ( arg.getDefaultValue ( ) ) ) ) ; } } }
public org.ovirt.engine.core.bll.ValidationResult requiredValuesPresent ( ) { if ( ( missingCategoryValues ( getQos ( ) . getMaxThroughput ( ) , getQos ( ) . getMaxReadThroughput ( ) , getQos ( ) . getMaxWriteThroughput ( ) ) ) || ( missingCategoryValues ( getQos ( ) . getMaxIops ( ) , getQos ( ) . getMaxReadIops ( ) , getQos ( ) . getMaxWriteIops ( ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_QOS_MISSING_VALUES ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private void addVmToPool ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.AddVmToPoolParameters parameters = new org.ovirt.engine.core.common.action.AddVmToPoolParameters ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getPoolId ( ) , vmStatic.getId ( ) ) ; parameters.setShouldBeLogged ( false ) ; setSucceeded ( runInternalActionWithTasksContext ( VdcActionType.AddVmToPool , parameters ) . getSucceeded ( ) ) ; org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.addVmPermission ( ) ; }
public java.lang.String ExportVm ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > images ) { org.ovirt.engine.core.utils.ovf.OvfWriter ovf = new org.ovirt.engine.core.utils.ovf.OvfVmWriter ( vm , images ) ; BuildOvf ( ovf ) ; return ovf.getStringRepresentation ( ) ; }
protected boolean isDetachAllowed ( final boolean isRemoveLast ) { boolean returnValue = true ; if ( ( getStoragePoolIsoMap ( ) ) == null ) { returnValue = false ; addCanDoActionMessage ( EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL ) ; } else if ( ( ! isRemoveLast ) && ( isMaster ( ) ) ) { returnValue = false ; addCanDoActionMessage ( EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN ) ; } return returnValue ; }
private org.ovirt.engine.core.compat.Guid getPrestartedVmToAttach ( org.ovirt.engine.core.compat.Guid vmPoolId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmPoolMap > vmPoolMaps = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolDao ( ) . getVmMapsInVmPoolByVmPoolIdAndStatus ( vmPoolId , VMStatus.Up ) ; if ( vmPoolMaps != null ) { for ( org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps ) { if ( canAttachPrestartedVmToUser ( map.getvm_guid ( ) , org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ) { return map.getvm_guid ( ) ; } } } return org.ovirt.engine.core.compat.Guid.Empty ; }
public void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ( obj == null ) || ( ( obj.getClass ( ) ) != ( this . getClass ( ) ) ) ) return false ; org.ovirt.engine.core.vdsbroker.attestation.AttestationValue other = ( ( org.ovirt.engine.core.vdsbroker.attestation.AttestationValue ) ( obj ) ) ; return ( java.util.Objects.equals ( hostName , other.hostName ) ) && ( java.util.Objects.equals ( trustLevel , other.trustLevel ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.Boolean interfaceHasSiblingVlanInterfaces = ( ( java.lang.Boolean ) ( returnValue ) ) ; if ( ! interfaceHasSiblingVlanInterfaces ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : interfaceList ) { if ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( i.getBondName ( ) , vlanParent.getName ( ) ) ) { ifacesOptions.add ( i ) ; } } } defaultInterfaceName.append ( vlanParent.getName ( ) ) ; asyncQuery.asyncCallback.onSuccess ( asyncQuery.model , ifacesOptions ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command.getName ( ) . equals ( "OnRemove" ) ) { onRemove ( ) ; } else if ( command.getName ( ) . equals ( "OnRestore" ) ) { onRestore ( ) ; } else if ( command.getName ( ) . equals ( "onClone" ) ) { onClone ( ) ; } else if ( command.getName ( ) . equals ( "closeClone" ) ) { closeClone ( ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isProvisioningChangable = object.getProvisioning ( ) . getIsChangable ( ) ; provisioningThinEditor.setEnabled ( isProvisioningChangable ) ; provisioningCloneEditor.setEnabled ( isProvisioningChangable ) ; boolean isProvisioningAvailable = object.getProvisioning ( ) . getIsAvailable ( ) ; changeApplicationLevelVisibility ( provisionSelectionPanel , isProvisioningAvailable ) ; boolean isDisksAvailable = object.getIsDisksAvailable ( ) ; changeApplicationLevelVisibility ( disksAllocationPanel , isDisksAvailable ) ; changeApplicationLevelVisibility ( storageAllocationPanel , ( isProvisioningAvailable || isDisksAvailable ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : storageDomains ) { if ( ( domain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) { return domain ; } } } return null ; }
private java.util.Set < java.lang.String > getRemovedNetworks ( ) { if ( ( removedNetworks ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > removedNetworkAttachments = org.ovirt.engine.core.common.businessentities.Entities.filterEntitiesByRequiredIds ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getRemovedNetworkAttachments ( ) , existingAttachments ) ; removedNetworks = new java.util.HashSet ( removedNetworkAttachments.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : removedNetworkAttachments ) { removedNetworks.add ( existingNetworkRelatedToAttachment ( attachment ) . getName ( ) ) ; } } return removedNetworks ; }
private boolean isDomainAttachedToDifferentStoragePool ( ) { if ( ( org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized ) ) { for ( org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters ( ) . getStorages ( ) ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStorageDomainDao ( ) . get ( storageDomainId ) ; if ( ( domain.getStorageDomainType ( ) . isDataDomain ( ) ) && ( isStorageDomainAttachedToStoragePool ( domain ) ) ) { return failValidation ( EngineMessage.ERROR_CANNOT_ADD_STORAGE_DOMAIN_WITH_ATTACHED_DATA_DOMAIN ) ; } } } return true ; }
public void setOpenStackAgentProperties ( org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties ) { _openStackAgentProperties = properties ; if ( ( _openStackAgentProperties ) != null ) { _customizationConditions.add ( org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition.NEUTRON_SETUP ) ; if ( _openStackAgentProperties.isLinuxBridge ( ) ) { _customizationConditions.add ( org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition.NEUTRON_LINUX_BRIDGE_SETUP ) ; } else if ( _openStackAgentProperties.isOpenVSwitch ( ) ) { _customizationConditions.add ( org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition.NEUTRON_OPEN_VSWITCH_SETUP ) ; } } }
public void updateNetworkDevice ( ) { org.ovirt.engine.core.common.businessentities.HostDeviceId netDeviceId = new org.ovirt.engine.core.common.businessentities.HostDeviceId ( FixturesTool.NETWORK_HOST_DEVICE_HOST_ID , FixturesTool.NETWORK_HOST_DEVICE_NAME ) ; org.ovirt.engine.core.common.businessentities.HostDevice before = dao.get ( netDeviceId ) ; before.setNetworkInterfaceName ( ( ( before.getNetworkInterfaceName ( ) ) + "new" ) ) ; dao.update ( before ) ; org.ovirt.engine.core.common.businessentities.HostDevice after = dao.get ( netDeviceId ) ; org.junit.Assert.assertNotNull ( after ) ; org.junit.Assert.assertEquals ( before , after ) ; }
protected boolean isStorageDomainTypeCorrect ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( ( storageDomain.isLocal ( ) ) != ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) . isLocal ( ) ) ) { addCanDoActionMessage ( VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH ) ; return false ; } return true ; }
protected void executeVdsBrokerCommand ( ) { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker ( ) . hotplugMemory ( org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap ( org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters ( ) . getMemoryDevice ( ) , false , org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters ( ) . getMinAllocatedMem ( ) ) ) ; org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue ( ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport ( e ) ; org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue ( ) . setExceptionString ( null ) ; } }
public void addColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column , com.google.gwt.user.cellview.client.Header < ? > header ) { super . addColumn ( column , wrapHeader ( header , column ) ) ; if ( columnResizingEnabled ) { if ( ( emptyNoWidthColumn ) != null ) { removeColumn ( emptyNoWidthColumn ) ; } emptyNoWidthColumn = new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn < T > ( ) ; addColumn ( emptyNoWidthColumn ) ; } }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getGlusterHook ( ) { if ( ( entity ) == null ) { entity = getGlusterHooksDao ( ) . getById ( getParameters ( ) . getHookId ( ) , true ) ; } return entity ; }
public static void IsHotPlugAvailable ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.HotPlugEnabled ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( tempVar , aQuery ) ; }
public void testRemove ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUpGetGraphicsExpectations ( 1 ) ; setUpActionExpectations ( VdcActionType.RemoveVm , org.ovirt.engine.core.common.action.RemoveVmParameters.class , new java.lang.String [ ] { "VmId" , "Force" } , new java.lang.Object [ ] { GUIDS [ 0 ] , java.lang.Boolean.FALSE } , true , true ) ; verifyRemove ( resource.remove ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.String > convertToStatusList ( ) { java.util.HashMap < java.lang.String , java.lang.String > result = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; for ( java.util.Map < java.lang.String , java.lang.Object > st : this . statusList ) { java.lang.String status = st.get ( "status" ) . toString ( ) ; java.lang.String id = st.get ( "id" ) . toString ( ) ; result.put ( id , status ) ; } return result ; }
private static void addVideoDevice ( org.ovirt.engine.core.common.businessentities.VmBase vm ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , vm.getId ( ) ) , VmDeviceType.VIDEO , vm.getDefaultDisplayType ( ) . getVmDeviceType ( ) , org.ovirt.engine.core.bll.utils.VmDeviceUtils.getMemExpr ( vm.getNumOfMonitors ( ) ) , true , true ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( vm.getVmPoolId ( ) ) == null ) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from ( vm.getVmType ( ) , vm.isStateless ( ) ) ; setTitle ( config.getTooltip ( org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants ) ) ; return config.getImageResource ( getApplicationResources ( ) ) ; } else { return getApplicationResources ( ) . manyDesktopsImage ( ) ; } }
private org.ovirt.engine.api.extensions.Extension loadExtension ( java.util.Properties props ) throws java.lang.Exception { org.ovirt.engine.core.extensions.mgr.ExtensionsManager.BindingsLoader loader = org.ovirt.engine.core.extensions.mgr.ExtensionsManager.bindingsLoaders.get ( props.getProperty ( Base.ConfigKeys.BINDINGS_METHOD ) ) ; if ( loader == null ) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException ( java.lang.String.format ( "Invalid binding method '%1$s'." , props.getProperty ( Base.ConfigKeys.BINDINGS_METHOD ) ) ) ; } return loader.load ( props ) ; }
public void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
private static void assertGetByNameResults ( java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > results , int expectedResults ) { org.junit.Assert.assertNotNull ( "Results object should not be null" , results ) ; org.junit.Assert.assertEquals ( "Wrong number of results" , expectedResults , results.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.AuditLog auditLog : results ) { org.junit.Assert.assertEquals ( "Wrong name of VM in result" , org.ovirt.engine.core.dao.AuditLogDAOTest.VM_NAME , auditLog.getVmName ( ) ) ; org.junit.Assert.assertEquals ( "Wrong template name of VM in result" , org.ovirt.engine.core.dao.AuditLogDAOTest.VM_TEMPLATE_NAME , auditLog.getVmTemplateName ( ) ) ; } }
private void auditLogOvfLoadError ( java.lang.String machineName , java.lang.String errorMessage ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "ImportedVmName" , machineName ) ; logable.addCustomValue ( "ErrorMessage" , errorMessage ) ; auditLogDirector.log ( logable , AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_VM ) ; }
public static void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
public void unsyncedNetworkModified ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork ( "net" ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork ( "nic0" , net ) ; nic.setBridged ( ( ! ( net.isVmNetwork ( ) ) ) ) ; nic.setBootProtocol ( NetworkBootProtocol.NONE ) ; mockExistingNetworks ( net ) ; mockExistingIfaces ( nic ) ; nic.setBootProtocol ( NetworkBootProtocol.DHCP ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORKS_NOT_IN_SYNC , net.getName ( ) ) ; }
protected org.ovirt.engine.api.model.Permit postPopulate ( org.ovirt.engine.api.model.Permit from ) { org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup = org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.core.common.businessentities.ActionGroup.class ) ; from.setId ( java.lang.Integer.toString ( actionGroup.getId ( ) ) ) ; from.setName ( actionGroup.name ( ) . toLowerCase ( ) ) ; from.setAdministrative ( ( ( actionGroup.getRoleType ( ) ) == ( org.ovirt.engine.core.common.businessentities.RoleType.ADMIN ) ) ) ; return from ; }
public void setup ( ) throws java.lang.Exception { validator = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator ( ) ; org.ovirt.engine.core.common.config.IConfigUtilsInterface confUtils = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.config.IConfigUtilsInterface.class ) ; org.mockito.Mockito.when ( confUtils.GetValue ( ConfigValues.MaxMTU , Config.DefaultConfigurationVersion ) ) . thenReturn ( org.ovirt.engine.core.common.utils.MTUValidatorTest.TEST_MAX_MTU ) ; org.mockito.Mockito.when ( confUtils.GetValue ( ConfigValues.ManagementNetwork , Config.DefaultConfigurationVersion ) ) . thenReturn ( org.ovirt.engine.core.common.utils.MTUValidatorTest.TEST_MANAGEMENT_NETWORK ) ; org.ovirt.engine.core.common.config.Config.setConfigUtils ( confUtils ) ; }
public void testIsManagementNetworkNameNullInGivenCluster ( ) throws java.lang.Exception { testIsManagementNetworkNameInGivenClusterCommon ( null , org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_CLUSTER_ID , false ) ; }
public void getClustersHavingHosts ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllClustersHavingHosts , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private void newEntity ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateInterfaceModel.createInstance ( getEntity ( ) , getEntity ( ) . getStoragePoolId ( ) , cluster.getCompatibilityVersion ( ) , ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( getItems ( ) ) ) , this ) ; setWindow ( model ) ; }
private java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > getStorageToDiskMap ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > storageToDisksMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : getSourceImages ( ) ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap ( disk.getStorageIds ( ) . get ( 0 ) , disk , storageToDisksMap ) ; } return storageToDisksMap ; }
public void validateEnums ( org.ovirt.engine.api.model.Event event ) { if ( event.isSetSeverity ( ) ) { org.ovirt.engine.api.common.util.EnumValidator.validateEnum ( org.ovirt.engine.api.model.LogSeverity.class , event.getSeverity ( ) , true ) ; } if ( event.isSetHost ( ) ) { hostValidator.validateEnums ( event.getHost ( ) ) ; } if ( event.isSetStorageDomain ( ) ) { storageDomainValidator.validateEnums ( event.getStorageDomain ( ) ) ; } }
public void testGetGlusterGeoRepSessionUnSetConfig ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration sessionConfig = getGlusterGeoRepSessionConfig ( ) ; dao.saveConfig ( sessionConfig ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration > unsetSessionConfig = dao.getGlusterGeoRepSessionUnSetConfig ( FixturesTool.GLUSTER_GEOREP_SESSION_ID ) ; org.junit.jupiter.api.Assertions.assertEquals ( "use_meta_volume" , unsetSessionConfig.get ( 0 ) . getKey ( ) ) ; }
public void testDiscoverGeoRepData ( ) { org.mockito.Mockito.doReturn ( getSessionsVDSReturnVal ( 2 ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionList ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters.class ) ) ; syncJob.discoverGeoRepData ( ) ; org.mockito.Mockito.verify ( geoRepDao , org.mockito.Mockito.times ( 2 ) ) . save ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession.class ) ) ; }
private boolean validateInputManagementNetwork ( ) { setManagementNetwork ( getManagementNetworkById ( ) ) ; if ( ( getManagementNetwork ( ) ) == null ) { addCanDoActionMessage ( EngineMessage.NETWORK_NOT_EXISTS ) ; return false ; } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator ( ) ; return ( ( validate ( networkClusterValidator.networkBelongsToClusterDataCenter ( org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup ( ) , getManagementNetwork ( ) ) ) ) && ( validate ( networkClusterValidator.managementNetworkRequired ( getManagementNetwork ( ) ) ) ) ) && ( validate ( networkClusterValidator.managementNetworkNotExternal ( getManagementNetwork ( ) ) ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult canAddRngDevice ( org.ovirt.engine.core.common.businessentities.Cluster cluster , org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice ) { org.ovirt.engine.core.common.businessentities.VmRngDevice.Source source = rngDevice.getSource ( ) ; boolean supported = ( ( cluster != null ) && ( isFeatureSupported ( cluster.getCompatibilityVersion ( ) ) ) ) && ( cluster.getRequiredRngSources ( ) . contains ( source ) ) ; if ( ! supported ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Permission permission ) { validateParameters ( permission , ( isPrincipalSubCollection ( ) ? new java.lang.String [ ] { "role.id" , "dataCenter|cluster|host|storageDomain|vm|vmpool|template.id" } : new java.lang.String [ ] { "role.id" , "user|group.id" } ) ) ; org.ovirt.engine.core.common.businessentities.permissions entity = map ( permission , getPermissionsTemplate ( permission ) ) ; return performCreate ( VdcActionType.AddPermission , getPrincipal ( entity , permission ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetPermissionById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase executeCommand ( final org.ovirt.engine.core.bll.CommandBase < ? > command , final org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback callback = command.getCallback ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler ( org.ovirt.engine.core.bll.tasks.CommandExecutor.log ) . runAction ( command , ( cmdContext != null ? cmdContext.getExecutionContext ( ) : null ) ) ; updateCommand ( command , result ) ; if ( callback != null ) { callback.executed ( result ) ; } return result ; }
public void runFailedAutoStartVMs ( java.util.List < org.ovirt.engine.core.compat.Guid > vmIds ) { for ( org.ovirt.engine.core.compat.Guid vmId : vmIds ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; event.setVmId ( vmId ) ; auditLogDirector.log ( event , AuditLogType.HA_VM_FAILED ) ; org.ovirt.engine.core.bll.VdsEventListener.log.info ( "Highly Available VM went down. Attempting to restart. VM Name '{}', VM Id '{}'" , event.getVmName ( ) , vmId ) ; } autoStartVmsRunner.addVmsToRun ( vmIds ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > lunList = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( returnValue ) ) ; sanStorageModel.applyData ( lunList , true ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { ( ( org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel ) ( widget.getParent ( ) ) ) . swapButton ( createButton ( item ) ) ; org.ovirt.engine.core.common.utils.Pair < T , V > item = addGhostEntry ( ) ; onAdd ( item.getFirst ( ) , item.getSecond ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture ( org.ovirt.engine.core.common.businessentities.Cluster group ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( group.getCpuName ( ) ) ) { return org.ovirt.engine.core.bll.HandleVdsCpuFlagsOrClusterChangedCommand.getCpuFlagsManagerHandler ( ) . getArchitectureByCpuName ( group.getCpuName ( ) , group.getCompatibilityVersion ( ) ) ; } return group.getArchitecture ( ) ; }
protected boolean connectToStorage ( ) { org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters newConnectionParametersForVdsm = createParametersForVdsm ( org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getParameters ( ) . getVdsId ( ) , Guid.Empty , org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getParameters ( ) . getStorageServerConnection ( ) . getstorage_type ( ) , org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getParameters ( ) . getStorageServerConnection ( ) ) ; return runVdsCommand ( VDSCommandType.ConnectStorageServer , newConnectionParametersForVdsm ) . getSucceeded ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > mockImages ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image1 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image1.setImageId ( org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommandTest.IMAGE_ID_1 ) ; image1.setStorageIds ( new java.util.ArrayList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommandTest.STORAGE_DOMAIN_ID ) ) ) ; org.ovirt.engine.core.common.businessentities.storage.DiskImage image2 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image2.setImageId ( org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommandTest.IMAGE_ID_2 ) ; image2.setStorageIds ( new java.util.ArrayList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommandTest.STORAGE_DOMAIN_ID ) ) ) ; return new java.util.ArrayList ( java.util.Arrays.asList ( image1 , image2 ) ) ; }
public void onFinish ( org.ovirt.engine.ui.uicompat.TaskContext context , boolean isSucceeded , org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel model , java.lang.String message ) { context.InvokeUIThread ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays.asList ( new java.lang.Object [ ] { "Finish" , isSucceeded , model , message } ) ) ) ; }
protected boolean canDoAction ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RebootVmCommand.getVm ( ) ; if ( vm == null ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; } if ( ! ( org.ovirt.engine.core.bll.RebootVmCommand.canRunActionOnNonManagedVm ( ) ) ) { return false ; } if ( ( org.ovirt.engine.core.bll.RebootVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL , org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from ( vm.getStatus ( ) ) ) ; } return true ; }
protected void removeVnicProfiles ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > profiles = vnicProfileDao.getAllForNetwork ( getNetwork ( ) . getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : profiles ) { org.ovirt.engine.core.bll.network.dc.NetworkCommon.getCompensationContext ( ) . snapshotEntity ( vnicProfile ) ; vnicProfileDao.remove ( vnicProfile.getId ( ) ) ; } }
public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 0 ) ; setUpGetEntityExpectations ( 0 ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Tag model = org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.getModel ( 1 , false ) ; model.setId ( org.ovirt.engine.api.restapi.resource.BackendTagResourceTest.NEW_PARENT_ID.toString ( ) ) ; try { resource.update ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public void setEntity ( java.lang.Object value ) { if ( ( entity ) != value ) { entityChanging ( value , entity ) ; entity = value ; onEntityChanged ( ) ; getEntityChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Entity" ) ) ; } }
private static void addCdDetails ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { struct.put ( VdsProperties.Type , vmDevice.getType ( ) ) ; struct.put ( VdsProperties.Device , vmDevice.getDevice ( ) ) ; struct.put ( VdsProperties.Index , "2" ) ; struct.put ( VdsProperties.INTERFACE , VdsProperties.Ide ) ; struct.put ( VdsProperties.ReadOnly , java.lang.Boolean.TRUE.toString ( ) ) ; struct.put ( VdsProperties.Shareable , java.lang.Boolean.FALSE.toString ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.RepoImage getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.storage.RepoImage image = control.createMock ( org.ovirt.engine.core.common.businessentities.storage.RepoImage.class ) ; org.easymock.EasyMock.expect ( image.getRepoImageId ( ) ) . andReturn ( GUIDS [ index ] . toString ( ) ) . anyTimes ( ) ; org.easymock.EasyMock.expect ( image.getRepoImageName ( ) ) . andReturn ( NAMES [ index ] ) . anyTimes ( ) ; return image ; }
public void validateFailsOnServerNotUp ( ) { setUpMocksForRemove ( true , getHookEntity ( ) , VDSStatus.Down ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.validate ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString ( ) ) ) ; }
public static boolean VerifyAddVm ( java.util.List < java.lang.String > reasons , int nicsCount , int vmPriority ) { boolean returnValue = true ; if ( ( org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . getAvailableMacsCount ( ) ) < nicsCount ) { if ( reasons != null ) { reasons.add ( VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString ( ) ) ; } returnValue = false ; } else if ( ! ( org.ovirt.engine.core.bll.VmTemplateCommand.IsVmPriorityValueLegal ( vmPriority , reasons ) ) ) { returnValue = false ; } return returnValue ; }
public static void GetAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
public void execute ( org.ovirt.engine.exttool.core.InfoServiceImpl module ) { for ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension : module.getExtensionsManager ( ) . getExtensions ( ) ) { org.ovirt.engine.api.extensions.ExtMap extContext = extension.getContext ( ) ; org.ovirt.engine.exttool.core.InfoServiceImpl.log.info ( "Extension name={} type={} version={} notes={}" , extContext.get ( Base.ContextKeys.INSTANCE_NAME ) , extContext.get ( Base.ContextKeys.EXTENSION_NAME ) , extContext.get ( Base.ContextKeys.VERSION ) , extContext.get ( Base.ContextKeys.EXTENSION_NOTES ) ) ; } }
public void vlanBondNameMismatch ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ifacesToBond = createNics ( null ) ; org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = createParametersForBond ( bond , ifacesToBond ) ; java.lang.String ifaceName = ( bond.getName ( ) ) + "1" ; parameters.getInterfaces ( ) . add ( createVlan ( ifaceName , 100 , "net" ) ) ; mockExistingIfacesWithBond ( bond , ifacesToBond ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( parameters ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORK_INTERFACES_DONT_EXIST , ifaceName ) ; }
public void reportCompleted ( ) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = org.ovirt.engine.core.bll.RunVmOnceCommand.getExecutionContext ( ) ; executionContext.setShouldEndJob ( true ) ; boolean success = ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getRunAndPause ( ) ) && ( ( org.ovirt.engine.core.bll.RunVmOnceCommand.getVmDynamicDao ( ) . get ( org.ovirt.engine.core.bll.RunVmOnceCommand.getVmId ( ) ) . getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( executionContext , success ) ; }
public void testGetGlusterVolumeSnapshotConfigByClusterId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig > configs = dao.getConfigByClusterId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID ) ; org.junit.Assert.assertNotNull ( configs ) ; org.junit.Assert.assertEquals ( 3 , configs.size ( ) ) ; org.junit.Assert.assertTrue ( configs.contains ( existingConfig1 ) ) ; }
public void testImportCollapseSnapshots ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setId ( GUIDS [ 2 ] . toString ( ) ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setId ( GUIDS [ 1 ] . toString ( ) ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResourceTest.STORAGE_DOMAIN_ID ) ; doTestImport ( storageDomain , cluster , true , false ) ; }
protected boolean setAndValidateDiskProfiles ( ) { if ( ( ( diskInfoDestinationMap ) != null ) && ( ! ( diskInfoDestinationMap.isEmpty ( ) ) ) ) { java.util.Map < org.ovirt.engine.core.common.businessentities.DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskInfoDestinationMap.values ( ) ) { map.put ( diskImage , diskImage.getStorageIds ( ) . get ( 0 ) ) ; } return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles ( map , org.ovirt.engine.core.bll.AddVmCommand.getStoragePool ( ) . getcompatibility_version ( ) ) ) ; } return true ; }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void onRemoval ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.StorageDomainDao.class ) . getAllByConnectionId ( provider.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainEntry = storageDomains.get ( 0 ) ; org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.StorageDomainDynamicDao.class ) . remove ( storageDomainEntry.getId ( ) ) ; org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.StorageDomainStaticDao.class ) . remove ( storageDomainEntry.getId ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getActionGroupDao ( ) ; existingActionMap = dao.getActionVersionMapByActionType ( VdcActionType.AddVm ) ; newActionMap = new org.ovirt.engine.core.common.businessentities.ActionVersionMap ( ) ; newActionMap.setaction_type ( VdcActionType.ActivateStorageDomain ) ; newActionMap.setcluster_minimal_version ( "3.0" ) ; newActionMap.setstorage_pool_minimal_version ( "3.0" ) ; }
public void setUp ( ) { storagePool = cmd.getParameters ( ) . getStoragePool ( ) ; cmd.init ( ) ; org.mockito.Mockito.doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao ( ) ; org.mockito.Mockito.when ( storagePoolDao.get ( storagePool.getId ( ) ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito.doReturn ( storagePoolIsoMapDao ) . when ( cmd ) . getStoragePoolIsoMapDao ( ) ; org.mockito.Mockito.when ( storagePoolIsoMapDao.getAllForStorage ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.common.businessentities.GraphicsDevice dev = getParameters ( ) . getDev ( ) ; if ( ( ( dev.getDeviceId ( ) ) == null ) || ( ( dev.getVmId ( ) ) == null ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_REMOVE_GRAPHICS_DEV_INVALID_PARAMS ) ; } return true ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; vmStaticDao = dbFacade.getVmStaticDao ( ) ; dao = dbFacade.getVmStatisticsDao ( ) ; newVmStatic = vmStaticDao.get ( new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f5001" ) ) ; newVmStatistics = new org.ovirt.engine.core.common.businessentities.VmStatistics ( ) ; }
public static void initCache ( org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cacheConfigValues ( new org.ovirt.engine.ui.frontend.AsyncQuery ( loginModel , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( target ) ; } } ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initOsNames ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initUniqueOsNames ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initLinuxOsTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initWindowsOsTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initDisplayTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initNicHotplugSupportMap ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initDiskHotpluggableInterfacesMap ( ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( org.ovirt.engine.core.searchbackend.StoragePoolFieldAutoCompleter.STATUS.equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.class ) ; } else if ( org.ovirt.engine.core.searchbackend.StoragePoolFieldAutoCompleter.LOCAL.equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter ( ) ; } return retval ; }
public static void GetPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.GetVmPoolByIdParameters ( poolId ) , aQuery ) ; }
public void isTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaVdsConsumptionParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > ( ) ; list.add ( new org.ovirt.engine.core.bll.quota.QuotaVdsGroupConsumptionParameter ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getQuotaId ( ) , null , QuotaConsumptionParameter.QuotaAction.CONSUME , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVdsGroupId ( ) , ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getCpuPerSocket ( ) ) * ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getNumOfSockets ( ) ) ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getMemSizeMb ( ) ) ) ; return list ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( getEntityList ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Label model = resource.get ( ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendNetworkLabelResourceTest.LABELS [ 0 ] , model.getId ( ) ) ; verifyLinks ( model ) ; }
public void shouldElectActiveSharedBeforeLocalDataDomain2 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain localDomain = createDataStorageDomain ( StorageDomainStatus.Active , "local domain name" , LOCAL_SD_ID ) ; localDomain.setStorageType ( StorageType.LOCALFS ) ; org.ovirt.engine.core.common.businessentities.StorageDomain sharedDomain = createDataStorageDomain ( StorageDomainStatus.Active , "shared domain name" , SHARED_SD_ID ) ; org.mockito.Mockito.when ( storageDomainDao.getAllForStoragePool ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( java.util.Arrays.asList ( sharedDomain , localDomain ) ) ; cmd.setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( sharedDomain , cmd.electNewMaster ( ) ) ; }
protected org.ovirt.engine.api.model.Disk getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage entity = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; entity.setId ( GUIDS [ index ] ) ; entity.setVolumeFormat ( VolumeFormat.RAW ) ; entity.setImageStatus ( ImageStatus.OK ) ; entity.setVolumeType ( VolumeType.Sparse ) ; entity.setShareable ( false ) ; entity.setPropagateErrors ( PropagateErrors.On ) ; return org.ovirt.engine.api.restapi.resource.BackendDisksResourceTest.setUpStatisticalEntityExpectations ( entity ) ; }
public static void GetAllowClusterWithVirtGlusterEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean.TRUE ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
private void logHostFailToRespond ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex , long timeoutToFence ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( ( "Server failed to respond, vds_id='{}', vds_name='{}', vm_count={}, " + "spm_status='{}', non-responsive_timeout (seconds)={}, error: {}" ) , cachedVds.getId ( ) , cachedVds.getName ( ) , cachedVds.getVmCount ( ) , cachedVds.getSpmStatus ( ) , java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds ( timeoutToFence ) , ex.getMessage ( ) ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ; logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( cachedVds.getId ( ) ) ; logable.updateCallStackFromThrowable ( ex ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.VDS_FAILURE ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { boolean isDiskPlugged = getDetailModel ( ) . isDiskPluggedToVm ( object ) ; setTitle ( ( isDiskPlugged ? org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.SubTabDiskVmView.constants.active ( ) : org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.SubTabDiskVmView.constants.inactive ( ) ) ) ; return isDiskPlugged ? org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.SubTabDiskVmView.resources.upImage ( ) : org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.SubTabDiskVmView.resources.downImage ( ) ; }
public void getVMsWithVNumaNodesByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid clusterId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmsWithNumaByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , asyncQuery ) ; }
public java.util.List < java.lang.String > missingServerCpuFlags ( java.lang.String clusterCpuName , java.lang.String serverFlags , org.ovirt.engine.core.compat.Version ver ) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get ( ver ) ; return cpuFlagsManager != null ? cpuFlagsManager.missingServerCpuFlags ( clusterCpuName , serverFlags ) : null ; }
private void lockVmSnapshotsWithWait ( org.ovirt.engine.core.common.businessentities.VM vm ) { snapshotsEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock ( ) ; java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > snapshotsExlusiveLockMap = java.util.Collections.singletonMap ( vm.getId ( ) . toString ( ) , LockMessagesMatchUtil.VM_SNAPSHOTS ) ; snapshotsEngineLock.setExclusiveLocks ( snapshotsExlusiveLockMap ) ; org.ovirt.engine.core.bll.RemoveImageCommand.getLockManager ( ) . acquireLockWait ( snapshotsEngineLock ) ; }
private < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < org.ovirt.engine.core.compat.Guid > & org.ovirt.engine.core.common.businessentities.Nameable > org.ovirt.engine.core.bll.ValidationResult validateCoherentIdentification ( java.lang.String violatingEntityId , org.ovirt.engine.core.compat.Guid referringId , java.lang.String referringName , org.ovirt.engine.core.common.errors.EngineMessage message , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < T > map ) { boolean bothIdentificationSet = ( referringId != null ) && ( referringName != null ) ; java.lang.String [ ] replacements = createIncoherentIdentificationErrorReplacements ( violatingEntityId , referringId , referringName ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( message , replacements ) . when ( ( bothIdentificationSet && ( isNameAndIdIncoherent ( referringId , referringName , map ) ) ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VM > getMigratableVmsRunningOnVds ( final org.ovirt.engine.core.dao.VmDao vmDao , final org.ovirt.engine.core.compat.Guid hostId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsFromDB = vmDao.getAllRunningForVds ( hostId ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.core.utils.linq.LinqUtils.filter ( vmsFromDB , new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.VM > ( ) { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.VM v ) { return ( ( v.getMigrationSupport ( ) ) == ( org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE ) ) && ( ( v.getDedicatedVmForVdsList ( ) . contains ( hostId ) ) == false ) ; } } ) ; return vms ; }
public void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public void serviceFound ( org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service ) { service.storeInHttpSession ( key , value , new com.google.gwt.user.client.rpc.AsyncCallback < java.lang.Void > ( ) { @ java.lang.Override public void onSuccess ( final java.lang.Void result ) { callback.onSuccess ( null ) ; } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { callback.onFailure ( caught ) ; } } ) ; }
private void checkActions ( java.util.Set < java.nio.channels.SelectionKey > keys ) { keys.stream ( ) . filter ( ( key ) -> org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.class . isInstance ( key.attachment ( ) ) ) . forEach ( ( key ) -> ( ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient ) ( key.attachment ( ) ) ) . performAction ( ) ) ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.ActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > asyncTasks , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncStatuses ) { java.lang.String uri = ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResourceTest.URL_BASE ) + "/action" ; return setUpActionExpectations ( task , clz , names , values , true , true , null , asyncTasks , asyncStatuses , null , null , uri , true ) ; }
public static org.ovirt.engine.core.vdsbroker.MonitoringStrategy getMonitoringStrategyForVds ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.vdsbroker.MonitoringStrategy returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.virtMonitoringStrategy ; org.ovirt.engine.core.compat.Guid clusterId = vds.getClusterId ( ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.clusterDao.get ( clusterId ) ; if ( ( cluster.supportsVirtService ( ) ) && ( cluster.supportsGlusterService ( ) ) ) { returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.multipleMonitoringStrategy ; } else if ( cluster.supportsVirtService ( ) ) { returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.virtMonitoringStrategy ; } else if ( cluster.supportsGlusterService ( ) ) { returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.glusterMonitoringStrategy ; } return returnedStrategy ; }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVdsGroupsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void getStorageDomainByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String storageDomainName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( storageDomainName ) , aQuery ) ; }
public void getClustersHavingHosts ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllClustersHavingHosts , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getVds ( org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; vds.setVdsName ( "gfs1" ) ; vds.setClusterId ( CLUSTER_ID ) ; vds.setStatus ( status ) ; return vds ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.ImageSizeReturnForXmlRpc diskSizeExtend ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > diskParams , java.lang.String newSize ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.diskSizeExtend ( vmId , diskParams , newSize ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.ImageSizeReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageSizeReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetClustersByStoragePoolIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetClustersByStoragePoolIdQuery.getDbFacade ( ) . getClusterDao ( ) . getAllForStoragePool ( org.ovirt.engine.core.bll.GetClustersByStoragePoolIdQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.GetClustersByStoragePoolIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.GetClustersByStoragePoolIdQuery.getParameters ( ) . isFiltered ( ) ) ) ; }
public void testGetAllInterfacesForVm ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > result = dao.getAllForVm ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDaoTest.VM_ID ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : result ) { org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDaoTest.VM_ID , iface.getVmId ( ) ) ; } }
private org.ovirt.engine.core.common.businessentities.VDS createBaseVds ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setSupportedEmulatedMachines ( "pc-1.0" ) ; vds.getSupportedRngSources ( ) . add ( VmRngDevice.Source.URANDOM ) ; vds.setStatus ( VDSStatus.Up ) ; vds.setId ( vdsId ) ; vds.setClusterId ( clusterId ) ; return vds ; }
public void testRemove ( ) throws java.lang.Exception { setUpGetEntityExpectations ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveDisk , org.ovirt.engine.core.common.action.RemoveDiskParameters.class , new java.lang.String [ ] { "DiskId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( collection.deprecatedRemove ( GUIDS [ 0 ] . toString ( ) ) ) ; }
protected org.ovirt.engine.core.bll.ValidationResult mtuValid ( ) { return ( ( getNetwork ( ) . getMtu ( ) ) == 0 ) || ( org.ovirt.engine.core.bll.validator.FeatureSupported.mtuSpecification ( org.ovirt.engine.core.bll.network.dc.NetworkCommon.getStoragePool ( ) . getcompatibility_version ( ) ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap , org.ovirt.engine.core.compat.Guid vmId ) { try { org.ovirt.engine.core.bll.ImagesHandler.addImage ( image , active , imageStorageDomainMap ) ; org.ovirt.engine.core.bll.ImagesHandler.addDiskToVmIfNotExists ( image , vmId ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.ImagesHandler.log.error ( "Failed adding new disk image and related entities to db: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.log.debug ( "Exception" , ex ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.DB , ex ) ; } }
public static void getVmListByClusterName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: cluster=" + clusterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsFromExportDomain ( ) { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters p = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . getSourceDomainId ( ) ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue qRetVal = getBackend ( ) . runInternalQuery ( VdcQueryType.GetVmsFromExportDomain , p ) ; if ( ! ( qRetVal.getSucceeded ( ) ) ) { return null ; } return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( qRetVal.getReturnValue ( ) ) ) ; }
public org.ovirt.engine.api.model.VM get ( ) { org.ovirt.engine.api.model.VM vm ; if ( isNextRunRequested ( ) ) { vm = performGet ( VdcQueryType.GetVmNextRunConfiguration , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; } else { vm = performGet ( VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; } return removeRestrictedInfo ( vm ) ; }
protected void initializeModelHandlers ( ) { super . initializeModelHandlers ( ) ; getModel ( ) . getResetRequestedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > iterator = getModel ( ) . getItems ( ) . iterator ( ) ; if ( iterator.hasNext ( ) ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel root = getModel ( ) . cloneTagModel ( iterator.next ( ) ) ; updateDataProvider ( java.util.Arrays.asList ( root ) ) ; } } } ) ; }
private org.ovirt.engine.core.common.businessentities.network.VnicProfile findVnicProfileForUser ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user , org.ovirt.engine.core.common.businessentities.network.Network network ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > networkProfiles = org.ovirt.engine.core.bll.network.vm.VnicProfileHelper.getVnicProfileDao ( ) . getAllForNetwork ( network.getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VnicProfile profile : networkProfiles ) { if ( ( ( user == null ) && ( ! ( profile.isPortMirroring ( ) ) ) ) || ( ( user != null ) && ( org.ovirt.engine.core.bll.network.vm.VnicProfileHelper.isVnicProfilePermitted ( user , profile , false ) ) ) ) { return profile ; } } return null ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageByImageId ( org.ovirt.engine.core.compat.Guid imageId ) { if ( diskImagesMap.containsKey ( imageId ) ) { return diskImagesMap.get ( imageId ) ; } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskImageDao ( ) . get ( imageId ) ; diskImagesMap.put ( imageId , diskImage ) ; return diskImage ; }
public void setUp ( ) { sourceMacPoolId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; targetMacPoolId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; macsToMigrate = new java.util.ArrayList < > ( java.util.Arrays.asList ( "mac1" , "mac2" , "mac3" ) ) ; org.mockito.Mockito.when ( macPoolPerCluster.getMacPoolById ( sourceMacPoolId , commandContext ) ) . thenReturn ( sourceMacPool ) ; org.mockito.Mockito.when ( macPoolPerCluster.getMacPoolById ( targetMacPoolId , commandContext ) ) . thenReturn ( targetMacPool ) ; org.mockito.Mockito.when ( macPoolPerCluster.getMacPoolById ( targetMacPoolId ) ) . thenReturn ( targetMacPool ) ; cluster = createCluster ( sourceMacPoolId ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterQuotaListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( ( ( lastExecutedCommand.equals ( getModel ( ) . getCreateCommand ( ) ) ) || ( lastExecutedCommand.equals ( getModel ( ) . getEditCommand ( ) ) ) ) || ( lastExecutedCommand.equals ( getModel ( ) . getCloneCommand ( ) ) ) ) { return quotaPopupProvider.get ( ) ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
protected boolean canDoAction ( ) { _allNetworkCluster = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkClusterDao ( ) . getAllForCluster ( org.ovirt.engine.core.bll.UpdateDisplayToVdsGroupCommand.getParameters ( ) . getVdsGroupId ( ) ) ; _networkCluster = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull ( _allNetworkCluster , new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.network_cluster > ( ) { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.network_cluster x ) { return x.getnetwork_id ( ) . equals ( getParameters ( ) . getNetwork ( ) . getId ( ) ) ; } } ) ; return ( _networkCluster ) != null ; }
public static void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { for ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel model : getItems ( ) ) { if ( model.isManagement ( ) ) { managementNetwork = model ; } if ( model.isGlusterNetwork ( ) ) { glusterNetwork = model ; } } }
public void updateDisksStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisks ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : memoryDisks ) { disk.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singletonList ( storageDomain.getId ( ) ) ) ) ; } updateDiskVolumeType ( storageDomain.getStorageType ( ) , memoryDisks.get ( 0 ) ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > GetNicTypeList ( org.ovirt.engine.core.common.businessentities.VmOsType osType , boolean hasDualmode ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > ( java.util.Arrays.asList ( org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.values ( ) ) ) ; list.remove ( VmInterfaceType.rtl8139_pv ) ; if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType ( osType ) ) { if ( ( osType == ( org.ovirt.engine.core.common.businessentities.VmOsType.WindowsXP ) ) && hasDualmode ) { list.add ( VmInterfaceType.rtl8139_pv ) ; } } return list ; }
public void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) . withoutRefresh ( ) , aQuery ) ; }
protected java.util.List < java.lang.String > getUrlParameterDeclarations ( java.util.List < org.ovirt.engine.sdk.entities.Parameter > params ) { java.util.List < java.lang.String > paramDecls = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.sdk.entities.Parameter param : params ) { java.lang.String paramName = org.ovirt.engine.sdk.codegen.utils.UrlUtils.toQueryParam ( param.getName ( ) ) ; java.lang.String paramType = org.ovirt.engine.sdk.codegen.utils.TypeUtils.toJava ( param.getType ( ) ) ; org.ovirt.engine.sdk.codegen.templates.MethodParameterTemplate paramDeclTemplate = new org.ovirt.engine.sdk.codegen.templates.MethodParameterTemplate ( ) ; java.lang.String paramDecl = paramDeclTemplate.getTemplate ( paramType , paramName ) ; paramDecls.add ( paramDecl ) ; } return paramDecls ; }
public boolean storageDomainRemoved ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . get ( storageDomain.getstorage ( ) ) ; if ( connection != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . remove ( connection.getid ( ) ) ; } return true ; }
protected void processImages ( ) { processImages ( ( ! ( org.ovirt.engine.core.bll.ImportVmCommand.isImagesAlreadyOnTarget ( ) ) ) ) ; if ( org.ovirt.engine.core.bll.ImportVmCommand.getReturnValue ( ) . getVdsmTaskIdList ( ) . isEmpty ( ) ) { org.ovirt.engine.core.bll.VmHandler.unLockVm ( getVm ( ) ) ; } }
public void testEvalDifferentAddress ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mockOtherIface.getName ( ) ) . thenReturn ( org.ovirt.engine.core.vdsbroker.vdsbroker.predicates.DisplayInterfaceEqualityPredicateTest.TEST_INTERFACE_NAME ) ; org.mockito.Mockito.when ( mockOtherIface.getIpv4Address ( ) ) . thenReturn ( ( "not" + ( org.ovirt.engine.core.vdsbroker.vdsbroker.predicates.DisplayInterfaceEqualityPredicateTest.TEST_INTERFACE_ADDRESS ) ) ) ; org.junit.Assert.assertFalse ( underTest.test ( mockOtherIface ) ) ; }
private void init ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > byName = vmStaticDao.getAllByName ( org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.HostedEngineVmName ) ) ; if ( ( byName != null ) && ( ! ( byName.isEmpty ( ) ) ) ) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = byName.get ( 0 ) ; hostedEngineVm = vmDao.get ( vmStatic.getId ( ) ) ; vmHandler.updateDisksFromDb ( hostedEngineVm ) ; } initHostedEngineStorageDomain ( ) ; }
public void diskImagesAlreadyExistBothExist ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) . when ( validator ) . getExistingDisk ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.junit.Assert.assertThat ( validator.diskImagesAlreadyExist ( ) , org.hamcrest.CoreMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.hamcrest.CoreMatchers.hasItem ( org.ovirt.engine.core.bll.validator.DiskImagesValidatorTest.createAliasReplacements ( disk1 , disk2 ) ) ) ) ) ; }
public void testRemoveVmFromPool ( ) { int before = dao.getVmPoolsMapByVmPoolId ( existingVmPoolMap.getvm_pool_id ( ) ) . size ( ) ; dao.removeVmFromVmPool ( org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_ID ) ; int after = dao.getVmPoolsMapByVmPoolId ( existingVmPoolMap.getvm_pool_id ( ) ) . size ( ) ; org.junit.Assert.assertEquals ( ( before - 1 ) , after ) ; org.ovirt.engine.core.common.businessentities.VmPoolMap result = dao.getVmPoolMapByVmGuid ( org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_ID ) ; org.junit.Assert.assertNull ( result ) ; }
protected void mockVds ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setClusterCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( "3.1" ) ) ; command.setVdsId ( Guid.Empty ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( command ) . getVdsDao ( ) ; org.mockito.Mockito.when ( vdsDao.get ( Guid.Empty ) ) . thenReturn ( vds ) ; }
public static void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.GetVdsByVdsIdParameters ( id ) , aQuery ) ; }
private void updateCachedIsoFileListFromVdsm ( org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage ) { boolean isRefreshed = false ; try { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > problematicRepoFileList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.RepoImage > ( ) ; isRefreshed = refreshIsoDomain ( repoImage.getRepoDomainId ( ) , problematicRepoFileList , repoImage.getFileType ( ) ) ; addRepoFileToProblematicList ( problematicRepoFileList ) ; } finally { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.info ( "Finished automatic refresh process for '{}' file type with {}, for storage domain id '{}'." , repoImage.getFileType ( ) , ( isRefreshed ? "success" : "failure" ) , repoImage.getRepoDomainId ( ) ) ; } }
public static void getStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
public void onSelection ( com.google.gwt.event.logical.shared.SelectionEvent < java.lang.Integer > event ) { if ( event == null ) { return ; } if ( ( event.getSelectedItem ( ) ) == ( org.ovirt.engine.ui.webadmin.section.main.view.MainSectionView.BOOKMARK_INDEX ) ) { bookmarkModelProvider.getModel ( ) . executeBookmarksSearch ( ) ; } else { bookmarkModelProvider.getModel ( ) . EnsureAsyncSearchStopped ( ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturn fullList ( java.util.List < java.lang.String > vmIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getVMFullList" ) . withOptionalParameterAsList ( "vmList" , vmIds ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmList" ) . withResponseType ( java.lang.Object [ ] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturn ( response ) ; }
public org.ovirt.engine.core.common.businessentities.TagsVmMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.TagsVmMap entity = new org.ovirt.engine.core.common.businessentities.TagsVmMap ( ) ; entity.settag_id ( getGuidDefaultEmpty ( rs , "tag_id" ) ) ; entity.setvm_id ( getGuidDefaultEmpty ( rs , "vm_id" ) ) ; entity.setDefaultDisplayType ( ( ( java.lang.Integer ) ( rs.getObject ( "DefaultDisplayType" ) ) ) ) ; return entity ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.lang.Iterable ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturnForXmlRpc getQemuImageInfo ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Volume.getQemuImageInfo" ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "imageID" , imgUUID ) . withParameter ( "volumeID" , volUUID ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturnForXmlRpc ( response ) ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage getDestinationDiskImage ( ) { if ( ( _destinationImage ) == null ) { _destinationImage = org.ovirt.engine.core.bll.BaseImagesCommand.getDiskImageDao ( ) . get ( getDestinationImageId ( ) ) ; if ( ( _destinationImage ) == null ) { _destinationImage = org.ovirt.engine.core.bll.BaseImagesCommand.getDiskImageDao ( ) . getSnapshotById ( getDestinationImageId ( ) ) ; } } return _destinationImage ; }
public void thpDefaultTrueTest ( ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setVersion ( new org.ovirt.engine.api.restapi.types.Version ( ) { { setMajor ( 3 ) ; setMinor ( 0 ) ; } } ) ; org.ovirt.engine.core.common.businessentities.Cluster transform = getMapper ( ) . map ( cluster , null ) ; org.junit.Assert.assertTrue ( transform.getTransparentHugepages ( ) ) ; }
private void processFence ( ) { org.ovirt.engine.core.bll.FenceExecutor executor = new org.ovirt.engine.core.bll.FenceExecutor ( getVds ( ) , org.ovirt.engine.core.common.businessentities.FenceActionType.Status ) ; if ( ( getVds ( ) . getpm_enabled ( ) ) && ( executor.findProxyHost ( ) ) ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = executor.fence ( ) ; fenceSucceeded = returnValue.getSucceeded ( ) ; fenceStatusReturnValue = ( ( org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue ) ( returnValue.getReturnValue ( ) ) ) ; vdsProxyFound = true ; } }
public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue ( ) . getTaskPlaceHolderIdList ( ) ) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = org.ovirt.engine.core.bll.tasks.TaskManagerUtil.getAsyncTaskFromDb ( asyncTaskId ) ; if ( ( task != null ) && ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( task.getVdsmTaskId ( ) ) ) ) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.removeTaskFromDbByTaskId ( task.getTaskId ( ) ) ; } } return null ; }
public org.ovirt.engine.core.common.businessentities.EngineBackupLog getLastSuccessfulEngineBackup ( java.lang.String dbName ) { javax.persistence.TypedQuery < org.ovirt.engine.core.common.businessentities.EngineBackupLog > query = entityManager.createNamedQuery ( "EngineBackupLog.getLatest" , org.ovirt.engine.core.common.businessentities.EngineBackupLog.class ) . setParameter ( "dbName" , dbName ) . setMaxResults ( 1 ) ; return singleResult ( query ) ; }
public void testGetAllForVdsGroup ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VdsStatic > result = dao.getAllForVdsGroup ( existingVds.getVdsGroupId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VdsStatic vds : result ) { org.junit.Assert.assertEquals ( existingVds.getVdsGroupId ( ) , vds.getVdsGroupId ( ) ) ; } }
public void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public static void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
protected void doDisplayTypeChanged ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster ( ) ; java.lang.Integer osType = getOSType ( ) . getSelectedItem ( ) ; if ( ( cluster == null ) || ( osType == null ) ) { return ; } displayTypeSelectedItemChanged ( osType , cluster.getCompatibilityVersion ( ) ) ; }
public void setup ( ) { urlValidation = org.mockito.Mockito.spy ( new org.ovirt.engine.ui.uicommonweb.validation.UrlValidation ( new java.lang.String [ ] { org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTP } ) ) ; hostValidation = new org.ovirt.engine.ui.uicommonweb.validation.UriHostAddressValidation ( null ) ; org.mockito.Mockito.doReturn ( null ) . when ( urlValidation ) . getUriMessage ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( urlValidation ) . getSchemeMessage ( org.mockito.Matchers.any ( java.lang.String.class ) ) ; org.mockito.Mockito.doReturn ( hostValidation ) . when ( urlValidation ) . getHostValidation ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc refreshVolume ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmpRpcReturnValue = vdsServer.refreshVolume ( sdUUID , spUUID , imgUUID , volUUID ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmpRpcReturnValue ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private boolean selectedItemsContainBlankTemplate ( ) { if ( ( getSelectedItems ( ) ) != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VmTemplate > cast ( getSelectedItems ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : templates ) { if ( ( template != null ) && ( template.getId ( ) . equals ( Guid.Empty ) ) ) { return true ; } } } return false ; }
private org.ovirt.engine.core.common.businessentities.network createNetwork ( java.lang.String networkName ) { return new org.ovirt.engine.core.common.businessentities.network ( "" , "" , org.ovirt.engine.core.compat.Guid.NewGuid ( ) , networkName , "" , "" , 0 , 100 , false , 0 , true ) ; }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface o1 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface o2 ) { return java.lang.Boolean.compare ( extractSyncStatus ( o1 ) , extractSyncStatus ( o2 ) ) ; }
private void storagePoolAlreadyHasCluster ( ) { org.ovirt.engine.core.common.businessentities.Cluster group = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > groupList = new java.util.ArrayList < > ( ) ; groupList.add ( group ) ; org.mockito.Mockito.when ( clusterDao.getAllForStoragePool ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( groupList ) ; }
private static java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > getSubjectEntities ( java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permSubjectList ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entities = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > ( ) ; for ( org.ovirt.engine.core.bll.utils.PermissionSubject permSubj : permSubjectList ) { if ( ( ( permSubj.getObjectId ( ) ) != null ) && ( ( permSubj.getObjectType ( ) ) != null ) ) { entities.put ( permSubj.getObjectId ( ) , permSubj.getObjectType ( ) ) ; } } return entities ; }
private boolean staticBootProtoPropertiesChanged ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingIface ) { return ( ( iface.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP ) ) && ( ( ( ! ( java.util.Objects.equals ( iface.getAddress ( ) , existingIface.getAddress ( ) ) ) ) || ( ! ( java.util.Objects.equals ( iface.getGateway ( ) , existingIface.getGateway ( ) ) ) ) ) || ( ! ( java.util.Objects.equals ( iface.getSubnet ( ) , existingIface.getSubnet ( ) ) ) ) ) ; }
public < T > org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations add ( org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType type , T actual , T expected , boolean inSync ) { java.lang.String actualValue = ( actual == null ) ? null : actual.toString ( ) ; java.lang.String expectedValue = ( expected == null ) ? null : expected.toString ( ) ; reportedConfigurationList.add ( new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration ( type , actualValue , expectedValue , inSync ) ) ; return this ; }
public void testRemoveNonExistant ( ) { setUpEntityQueryExpectations ( QueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) , null ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private java.util.List < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > mapDiscoveredHosts ( java.util.List < org.ovirt.engine.core.bll.host.provider.foreman.ForemanDiscoveredHost > foremanHosts ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > hosts = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ( foremanHosts.size ( ) ) ; for ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanDiscoveredHost host : foremanHosts ) { org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost dhost = new org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost ( ) ; dhost.setName ( host.getName ( ) ) ; dhost.setIp ( host.getIp ( ) ) ; dhost.setMac ( host.getMac ( ) ) ; hosts.add ( dhost ) ; } return hosts ; }
private boolean canRemoveDiskBasedOnStorageTypeCheck ( ) { if ( ( getDisk ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { return canRemoveDiskBasedOnImageStorageCheck ( ) ; } return true ; }
public void testChangeCdUsingMatrixParameter ( ) { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , "current" ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( getVm ( ) ) ; setUpActionExpectations ( ActionType.ChangeDisk , org.ovirt.engine.core.common.action.ChangeDiskCommandParameters.class , new java.lang.String [ ] { "CdImagePath" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO } , true , true ) ; org.ovirt.engine.api.model.Cdrom cdrom = getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO ) ; cdrom = resource.update ( cdrom ) ; org.junit.jupiter.api.Assertions.assertTrue ( cdrom.isSetFile ( ) ) ; }
public javax.ws.rs.core.Response refreshLuns ( org.ovirt.engine.api.model.Action action ) { java.util.List < org.ovirt.engine.api.model.LogicalUnit > incomingLuns ; if ( action.isSetLogicalUnits ( ) ) { incomingLuns = action.getLogicalUnits ( ) . getLogicalUnits ( ) ; } else { incomingLuns = java.util.Collections.emptyList ( ) ; } org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = createParameters ( guid , incomingLuns , false ) ; return performAction ( ActionType.RefreshLunsSize , params ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotConfigSet ( java.lang.String volumeName , java.lang.String configName , java.lang.String configValue ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotConfigSet" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "optionName" , configName ) . withParameter ( "optionValue" , configValue ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getNicsToConfigureWithoutLabelsUpdates ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsToConfigure = new java.util.ArrayList < > ( ) ; nicsToConfigure.addAll ( interfaceDao.getAllInterfacesForVds ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId ( ) ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Bond bond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getBonds ( ) ) { if ( ( bond.getId ( ) ) == null ) { org.ovirt.engine.core.common.businessentities.network.Bond newBond = new org.ovirt.engine.core.common.businessentities.network.Bond ( bond.getName ( ) ) ; nicsToConfigure.add ( newBond ) ; } } return nicsToConfigure ; }
protected org.ovirt.engine.core.utils.lock.EngineLock lockVmDiskHotPlugWithWait ( ) { org.ovirt.engine.core.utils.lock.EngineLock vmDiskHotPlugEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock ( ) ; vmDiskHotPlugEngineLock.setExclusiveLocks ( java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM_DISK_HOT_PLUG , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ) ; org.ovirt.engine.core.bll.AbstractDiskVmCommand.getLockManager ( ) . acquireLockWait ( vmDiskHotPlugEngineLock ) ; return vmDiskHotPlugEngineLock ; }
private void PrepareSanStorageForEdit ( org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model ) { org.ovirt.engine.core.common.businessentities.storage_domains storage = ( ( org.ovirt.engine.core.common.businessentities.storage_domains ) ( getSelectedItem ( ) ) ) ; model.setStorageDomain ( storage ) ; }
public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.putAll ( ( ( java.util.HashMap < org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert ; }
public java.lang.Void runInTransaction ( ) { vmStaticDao.incrementDbGeneration ( getParameters ( ) . getVmId ( ) ) ; getVmNicDao ( ) . remove ( getParameters ( ) . getInterfaceId ( ) ) ; getDbFacade ( ) . getVmNetworkStatisticsDao ( ) . remove ( getParameters ( ) . getInterfaceId ( ) ) ; getDbFacade ( ) . getVmDeviceDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( getParameters ( ) . getInterfaceId ( ) , getParameters ( ) . getVmId ( ) ) ) ; setSucceeded ( true ) ; return null ; }
public static short parseShort ( java.lang.String value ) { if ( value.trim ( ) . equals ( "" ) ) { value = "0" ; } java.math.BigInteger result = javax.xml.bind.DatatypeConverter.parseInteger ( value ) ; if ( ( result.compareTo ( org.ovirt.engine.api.utils.IntegerParser.MAX_SHORT ) ) > 0 ) { throw new org.ovirt.engine.api.utils.InvalidValueException ( ( ( ( "Value " + value ) + " is greater than the maximum short " ) + ( org.ovirt.engine.api.utils.IntegerParser.MAX_SHORT ) ) ) ; } return result.shortValue ( ) ; }
private boolean validateStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > vmDisksList , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > memoryDisksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getAllDisks ( vmDisksList , memoryDisksList ) ; org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator ( disksList ) ; return ( ( validate ( sdValidator.allDomainsExistAndActive ( ) ) ) && ( validate ( sdValidator.allDomainsWithinThresholds ( ) ) ) ) && ( validate ( sdValidator.allDomainsHaveSpaceForAllDisks ( vmDisksList , memoryDisksList ) ) ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { if ( _isNode ) { _isLegacyNode = ( ( java.lang.Boolean ) ( _parser.cliEnvironmentGet ( VdsmEnv.OVIRT_NODE_HAS_OWN_BRIDGES ) ) ) ; } else { _parser.cliNoop ( ) ; } return null ; }
public void testNoChanges ( ) { org.ovirt.engine.core.utils.Jedi jedi1 = new org.ovirt.engine.core.utils.Jedi ( ) ; org.ovirt.engine.core.utils.Jedi jedi2 = new org.ovirt.engine.core.utils.Jedi ( ) ; java.util.List < java.lang.String > changes = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields ( jedi1 , jedi2 ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , changes.size ( ) , "Should be no changes" ) ; }
protected void init ( ) { initGeneralForm ( ) ; initDisksTable ( ) ; initNicsTable ( ) ; add ( new com.google.gwt.user.client.ui.ScrollPanel ( generalView.asWidget ( ) ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplateInfoPanel.constants.generalLabel ( ) ) ; add ( new com.google.gwt.user.client.ui.ScrollPanel ( disksTable ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplateInfoPanel.constants.disksLabel ( ) ) ; add ( new com.google.gwt.user.client.ui.ScrollPanel ( nicsTable ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplateInfoPanel.constants.nicsLabel ( ) ) ; }
public void getUnusedBricksFromServer ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid hostId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.VdsIdParametersBase parameters = new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( hostId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetUnusedGlusterBricks , parameters , asyncQuery ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel.CMD_SAVE ) ) { onSave ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel.CMD_TEST ) ) { onTest ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel.CMD_CANCEL ) ) { cancel ( ) ; } }
public org.ovirt.engine.api.resource.AssignedAffinityLabelsResource getAffinityLabelsResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendAssignedAffinityLabelsResource ( id , VM :: new ) ) ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
private void testAddingMixedTypes ( org.ovirt.engine.core.compat.Version version , boolean addingMixedTypesShouldSucceed ) { storagePool.setCompatibilityVersion ( version ) ; org.ovirt.engine.core.bll.ValidationResult attachDomainResult = validator.validateDomainCanBeAttachedToPool ( ) ; if ( addingMixedTypesShouldSucceed ) { org.junit.Assert.assertTrue ( ( "Attaching an ISCSI domain to a pool with NFS domain with with mixed type allowed failed, version: " + version ) , attachDomainResult.isValid ( ) ) ; } else { org.junit.Assert.assertFalse ( ( "Attaching an ISCSI domain to a pool with NFS domain with no mixed type allowed succeeded, version: " + version ) , attachDomainResult.isValid ( ) ) ; assertFailingMessage ( "Attaching an ISCSI domain to a pool with NFS domain with no mixed type failed with the wrong message" , attachDomainResult , EngineMessage.ACTION_TYPE_FAILED_MIXED_STORAGE_TYPES_NOT_ALLOWED ) ; } }
protected void executeIrsBrokerCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMClearTask , new org.ovirt.engine.core.common.vdscommands.HSMTaskGuidBaseVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMClearTaskVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMClearTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; if ( ( returnValue != null ) && ( ! ( returnValue.getSucceeded ( ) ) ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.SPMClearTaskVDSCommand.getVDSReturnValue ( ) . setVdsError ( returnValue.getVdsError ( ) ) ; org.ovirt.engine.core.vdsbroker.irsbroker.SPMClearTaskVDSCommand.getVDSReturnValue ( ) . setSucceeded ( false ) ; } }
private boolean networkWasModified ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface existingIface = getExistingIfaces ( ) . get ( iface.getName ( ) ) ; if ( existingIface == null ) { return true ; } return ( ( ! ( org.apache.commons.lang.ObjectUtils.equals ( iface.getNetworkName ( ) , existingIface.getNetworkName ( ) ) ) ) || ( ( iface.getBootProtocol ( ) ) != ( existingIface.getBootProtocol ( ) ) ) ) || ( staticBootProtoPropertiesChanged ( iface , existingIface ) ) ; }
public void setUp ( ) throws java.lang.Exception { ifaceQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; networkQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; iface.setBridged ( true ) ; iface.setQos ( ifaceQos ) ; iface.setReportedSwitchType ( SwitchType.LEGACY ) ; network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; testedNetworkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; testedNetworkAttachment.setIpConfiguration ( new org.ovirt.engine.core.common.businessentities.network.IpConfiguration ( ) ) ; cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setRequiredSwitchTypeForCluster ( SwitchType.LEGACY ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.balloonSupportMap = ( ( java.util.Map < java.lang.Integer , java.util.Map < org.ovirt.engine.core.compat.Version , java.lang.Boolean > > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; }
protected void moveOrCopyAllImageGroups ( org.ovirt.engine.core.compat.Guid containerID , java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > disks ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : disks ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext ( VdcActionType.CopyImageGroup , buildMoveOrCopyImageGroupParametersForDisk ( containerID , disk ) ) ; if ( ! ( vdcRetValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( vdcRetValue.getFault ( ) . getError ( ) , "Failed during ExportVmCommand" ) ; } org.ovirt.engine.core.bll.ExportVmCommand.getReturnValue ( ) . getVdsmTaskIdList ( ) . addAll ( vdcRetValue.getInternalVdsmTaskIdList ( ) ) ; } }
public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap entity = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; entity.setStorageId ( getGuidDefaultEmpty ( rs , "storage_id" ) ) ; entity.setStoragePoolId ( getGuid ( rs , "storage_pool_id" ) ) ; entity.setStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.forValue ( rs.getInt ( "status" ) ) ) ; return entity ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskVmElement updateDiskVmElementFromDisk ( org.ovirt.engine.api.model.Disk disk , org.ovirt.engine.core.common.businessentities.storage.DiskVmElement diskVmElement ) { if ( disk.isSetInterface ( ) ) { diskVmElement.setDiskInterface ( org.ovirt.engine.api.restapi.types.DiskMapper.mapInterface ( disk.getInterface ( ) ) ) ; } if ( disk.isSetBootable ( ) ) { diskVmElement.setBoot ( disk.isBootable ( ) ) ; } if ( disk.isSetReadOnly ( ) ) { diskVmElement.setReadOnly ( disk.isReadOnly ( ) ) ; } return diskVmElement ; }
private void runSetup ( java.lang.String testCidr , boolean isValidFormat , boolean isCidrNetworkAddressValid , java.lang.String errorMessage ) { org.mockito.Mockito.when ( mockCidrValidator.isCidrFormatValid ( testCidr ) ) . thenReturn ( isValidFormat ) ; org.mockito.Mockito.when ( mockCidrValidator.isCidrNetworkAddressValid ( testCidr ) ) . thenReturn ( isCidrNetworkAddressValid ) ; org.mockito.Mockito.when ( contextMock.buildConstraintViolationWithTemplate ( errorMessage ) ) . thenReturn ( mockConstraintViolationBuilder ) ; org.mockito.Mockito.when ( mockConstraintViolationBuilder.addNode ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( mockNodeBuilderDefinedContext ) ; }
protected void addJNDIBeans ( ) { addBeanJNDIName ( BeanType.BACKEND , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "bll/Backend" ) ) ; addBeanJNDIName ( BeanType.SCHEDULER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "scheduler/Scheduler" ) ) ; addBeanJNDIName ( BeanType.PERSISTENT_SCHEDULER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "scheduler/PersistentScheduler" ) ) ; addBeanJNDIName ( BeanType.VDS_EVENT_LISTENER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "bll/VdsEventListener" ) ) ; addBeanJNDIName ( BeanType.LOCK_MANAGER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "bll/LockManager" ) ) ; addBeanJNDIName ( BeanType.EVENTQUEUE_MANAGER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "bll/EventQueue" ) ) ; addBeanJNDIName ( BeanType.CACHE_CONTAINER , "java:jboss/infinispan/ovirt-engine" ) ; }
public static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createStompClient ( java.lang.String hostname , int port , int connectionTimeout , int clientTimeout , int connectionRetry , int heartbeat , boolean isSecure , java.lang.String protocol , int parallelism , java.lang.String requestQueue , java.lang.String responseQueue ) { org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClientPolicy ( connectionTimeout , connectionRetry , heartbeat , java.io.IOException.class , requestQueue , responseQueue ) ; org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy = new org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy ( clientTimeout , connectionRetry , heartbeat , java.io.IOException.class ) ; return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient ( hostname , port , connectionPolicy , clientPolicy , isSecure , ReactorType.STOMP , protocol , parallelism ) ; }
protected java.util.List < org.ovirt.engine.core.compat.Version > getVersions ( ) { org.ovirt.engine.core.compat.Version version = org.mockito.Mockito.mock ( org.ovirt.engine.core.compat.Version.class ) ; org.mockito.Mockito.when ( version.getMajor ( ) ) . thenReturn ( 2 ) ; org.mockito.Mockito.when ( version.getMinor ( ) ) . thenReturn ( 3 ) ; java.util.List < org.ovirt.engine.core.compat.Version > versions = new java.util.ArrayList < > ( ) ; versions.add ( version ) ; return versions ; }
public void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
public void runMultipleActions ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final java.util.List < org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback > callbacks ) { runMultipleActions ( actionType , parameters , callbacks , null ) ; }
private void onSaveHosts ( ) { org.ovirt.engine.ui.uicommonweb.models.hosts.MultipleHostsModel hostsModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.MultipleHostsModel ) ( getWindow ( ) ) ) ; if ( hostsModel == null ) { return ; } if ( ! ( hostsModel.validate ( ) ) ) { return ; } if ( ( hostsModel.getClusterModel ( ) . getClusterId ( ) ) != null ) { addHosts ( hostsModel ) ; } else { onSaveInternalWithModel ( hostsModel.getClusterModel ( ) ) ; } }
protected void setDefaultMigrationPolicy ( ) { if ( ( org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) ) != null ) { boolean isMigrationSupported = org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported ( org.ovirt.engine.core.bll.AddVmCommand.getVdsGroup ( ) . getArchitecture ( ) , org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion ( ) ) ; org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport = ( isMigrationSupported ) ? org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE : org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ; org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . setMigrationSupport ( migrationSupport ) ; } }
private org.ovirt.engine.api.model.Networks mapCollection ( java.util.List < org.ovirt.engine.api.model.Network > entities ) { org.ovirt.engine.api.model.Networks collection = new org.ovirt.engine.api.model.Networks ( ) ; for ( org.ovirt.engine.api.model.Network entity : entities ) { collection.getNetworks ( ) . add ( addLinks ( map ( entity ) ) ) ; } return collection ; }
public void testGetIncludeStatistics ( ) throws java.lang.Exception { try { accepts.add ( "application/xml; detail=statistics" ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUpGetGraphicsExpectations ( 1 ) ; org.ovirt.engine.api.model.Vm vm = resource.get ( ) ; assertTrue ( vm.isSetStatistics ( ) ) ; verifyModel ( vm , 0 ) ; } finally { accepts.clear ( ) ; } }
public void testCheckVmOnlyOnClusterUpgrade ( ) { prepareVmToPassValidate ( ) ; mockVmValidator ( ) ; command.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; org.mockito.Mockito.verify ( inClusterUpgradeValidator , org.mockito.Mockito.times ( 0 ) ) . isVmReadyForUpgrade ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; }
public void managedNetworkAddedToNic ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork ( "net" ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingNetworks ( net ) ; mockExistingIfaces ( nic ) ; nic.setNetworkName ( net.getName ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic ) ) ; validateAndAssertNetworkModified ( helper , net ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( org.ovirt.engine.core.searchbackend.StorageDomainFieldAutoCompleter.TYPE.equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.StorageType.class ) ; } else if ( org.ovirt.engine.core.searchbackend.StorageDomainFieldAutoCompleter.STATUS.equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.class ) ; } else if ( org.ovirt.engine.core.searchbackend.StorageDomainFieldAutoCompleter.WIPE_AFTER_DELETE.equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter ( ) ; } return retval ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetNotExistingEntityExpectations ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void testCheckGlusterQuorumWithoutRequiredVolumeOptions ( ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster ( true ) ; java.lang.Iterable < org.ovirt.engine.core.compat.Guid > hostIds = java.util.Arrays.asList ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_1 , org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.SERVER_ID_2 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > glusterVolumes = getGlusterVolumes ( GlusterStatus.UP ) ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : glusterVolumes ) { volume.setOptions ( "" ) ; } org.mockito.Mockito.doReturn ( glusterVolumes ) . when ( volumeDao ) . getByClusterId ( org.ovirt.engine.core.bll.gluster.GlusterHostValidatorTest.CLUSTER_ID ) ; org.junit.Assert.assertTrue ( hostValidator.checkGlusterQuorum ( cluster , hostIds ) . isEmpty ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageServerConnectionLunMapDao ( ) ; storageServerConnectionDao = dbFacade.getStorageServerConnectionDao ( ) ; existingConnection = storageServerConnectionDao.get ( "0cc146e8-e5ed-482c-8814-270bc48c297e" ) ; newServerConnection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; newServerConnection.setId ( "0cc146e8-e5ed-482c-8814-270bc48c2980" ) ; newServerConnection.setconnection ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDaoTest.EXISTING_DOMAIN_STORAGE_NAME ) ; existingLUNStorageMap = dao.get ( new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMapId ( "1IET_00180001" , existingConnection.getId ( ) ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDaoTest.FREE_LUN_ID , existingConnection.getId ( ) ) ; }
public void autoSelectImageType ( final java.lang.String pathname ) { if ( pathname != null ) { getVolumeFormat ( ) . setSelectedItem ( VolumeFormat.RAW ) ; } }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > networkQoSes ) { getNetworkQoS ( ) . setItems ( networkQoSes ) ; defaultQos = org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById ( networkQoSes , defaultQosId ) ; getNetworkQoS ( ) . setSelectedItem ( defaultQos ) ; }
public org.ovirt.engine.core.bll.ValidationResult disksInStatus ( org.ovirt.engine.core.common.businessentities.ImageStatus applicableStatus ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImages ) { if ( ( diskImage.getImageStatus ( ) ) != applicableStatus ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_IN_APPLICABLE_STATUS , java.lang.String.format ( "$status %s" , applicableStatus.name ( ) ) ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void testDiscoverGeoRepDataWhenNoSessions ( ) { org.mockito.Mockito.doReturn ( getSessionsVDSReturnVal ( 0 ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionList ) , org.mockito.ArgumentMatchers.any ( ) ) ; syncJob.discoverGeoRepData ( ) ; org.mockito.Mockito.verify ( geoRepDao , org.mockito.Mockito.times ( 0 ) ) . save ( org.mockito.ArgumentMatchers.any ( ) ) ; }
protected final org.ovirt.engine.core.common.businessentities.network.NetworkAttachment setUpEntityExpectations ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity , int index ) { org.mockito.Mockito.when ( entity.getId ( ) ) . thenReturn ( GUIDS [ index ] ) ; org.mockito.Mockito.when ( entity.getNetworkId ( ) ) . thenReturn ( GUIDS [ index ] ) ; setUpEntityExpectations ( entity ) ; return entity ; }
protected void mockVmDevice ( boolean plugged ) { vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice ( ) ; vmDevice.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( ) ) ; vmDevice.setIsPlugged ( plugged ) ; org.mockito.Mockito.when ( vmDeviceDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VmDeviceId.class ) ) ) . thenReturn ( vmDevice ) ; }
protected void postSaveAction ( boolean succeeded ) { if ( succeeded ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > qosItems = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ( getQos ( ) . getItems ( ) ) ; qosItems.add ( 1 , networkQoS ) ; getQos ( ) . setItems ( qosItems ) ; getQos ( ) . setSelectedItem ( networkQoS ) ; } super . postSaveAction ( succeeded ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.RoleGroupMap ) ) { return false ; } org.ovirt.engine.core.common.businessentities.RoleGroupMap other = ( ( org.ovirt.engine.core.common.businessentities.RoleGroupMap ) ( obj ) ) ; return java.util.Objects.equals ( id , other.id ) ; }
public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel ( 1 ) ; model.setId ( GUIDS [ 1 ] . toString ( ) ) ; try { resource.update ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
protected org.ovirt.engine.core.bll.AddVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolParameters > createCommand ( ) { org.ovirt.engine.core.common.action.AddVmPoolParameters param = new org.ovirt.engine.core.common.action.AddVmPoolParameters ( vmPools , testVm , VM_COUNT ) ; param.setStorageDomainId ( firstStorageDomainId ) ; return org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.AddVmPoolCommand ( param , org.ovirt.engine.core.bll.context.CommandContext.createContext ( param.getSessionId ( ) ) ) ) ; }
protected void AsyncSearch ( ) { super . AsyncSearch ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters ( vm.getId ( ) ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
protected void EndWithFailure ( ) { if ( ( getMoveOrCopyImageOperation ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageOperation.Copy ) ) { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.UnLockImage ( ) ; if ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.getParameters ( ) . getAddImageDomainMapping ( ) ) { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.getImageStorageDomainMapDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.image_storage_domain_map_id ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.getParameters ( ) . getImageId ( ) , org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ; } RevertTasks ( ) ; } else { org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.MarkImageAsIllegal ( ) ; } org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.setSucceeded ( true ) ; }
public java.lang.String retrieveFromHttpSession ( java.lang.String key ) { javax.servlet.http.HttpServletRequest request = this . getThreadLocalRequest ( ) ; javax.servlet.http.HttpSession session = request.getSession ( ) ; java.lang.Object value = session.getAttribute ( ( ( org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.UI_PREFIX ) + key ) ) ; java.lang.String result = null ; if ( value instanceof java.lang.String ) { result = ( ( java.lang.String ) ( value ) ) ; } else if ( value != null ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.error ( "Retrieving non string value from session" ) ; } return result ; }
private boolean isPlugCommandAvailable ( boolean plug ) { return ( ( ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItems ( ) . size ( ) ) > 0 ) ) && ( isPlugAvailableByDisks ( plug ) ) ) && ( ( isVmDown ( ) ) || ( isHotPlugAvailable ( ) ) ) ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpGetEntityExpectations ( GUIDS [ 0 ] , true ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
protected void executeQueryCommand ( ) { try { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue ( ) . setReturnValue ( getUserRequestForStorageDomainRepoFileList ( ) ) ; } catch ( java.lang.Exception e ) { java.lang.String message = java.util.Optional.ofNullable ( e.getCause ( ) ) . orElse ( e ) . getMessage ( ) ; log.error ( "Failed to retrieve image list: {}" , message ) ; org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue ( ) . setExceptionString ( message ) ; org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue ( ) . setSucceeded ( false ) ; } }
public static boolean validHostname ( java.lang.String address ) { if ( ( address == null ) || ( address.trim ( ) . isEmpty ( ) ) ) { return false ; } return ( org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpAddressOrHostname ( address ) ) || ( org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpv6Address ( address ) ) ; }
private void addLimit ( java.lang.String id , org.ovirt.engine.api.model.QuotaStorageLimits limits , org.ovirt.engine.core.common.businessentities.Quota quota ) { org.ovirt.engine.api.model.QuotaStorageLimit limit = new org.ovirt.engine.api.model.QuotaStorageLimit ( ) ; limit.setId ( id ) ; limits.getQuotaStorageLimits ( ) . add ( addLinks ( map ( quota , limit ) ) ) ; }
public final boolean IsUpdateValid ( java.lang.Object source , java.lang.Object destination , java.lang.Enum < ? > status ) { return IsUpdateValid ( source , destination , status , false ) ; }
public void edit ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel model = new org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel ( this , getSelectedItem ( ) , getEntity ( ) . getDataCenterId ( ) ) ; setWindow ( model ) ; }
protected void initMtu ( ) { getHasMtu ( ) . setEntity ( ( ( getNetwork ( ) . getMtu ( ) ) != 0 ) ) ; getMtu ( ) . setEntity ( ( ( getNetwork ( ) . getMtu ( ) ) != 0 ? getNetwork ( ) . getMtu ( ) : null ) ) ; }
protected void changeStorageDomainStatusInTransaction ( final org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map , final org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , final org.ovirt.engine.core.bll.context.CompensationContext context ) { executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap > ( ) { @ java.lang.SuppressWarnings ( value = "synthetic-access" ) @ java.lang.Override public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap runInTransaction ( ) { context.snapshotEntityStatus ( map ) ; map.setStatus ( status ) ; getStoragePoolIsoMapDAO ( ) . updateStatus ( map.getId ( ) , map.getStatus ( ) ) ; context.stateChanged ( ) ; return null ; } } ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue getStatsForDomain ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.utils.linq.LinqUtils.first ( org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getAllRunningVdssInPool ( ) ) ; if ( vds == null ) { return null ; } return runVdsCommand ( VDSCommandType.GetStorageDomainStats , new org.ovirt.engine.core.common.vdscommands.GetStorageDomainStatsVDSCommandParameters ( vds.getId ( ) , org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ; }
public void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { getClusterList ( aQuery , true ) ; }
public void doFilter ( final javax.servlet.ServletRequest request , final javax.servlet.ServletResponse response , final javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { java.util.Locale locale = determineLocale ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ) ; request.setAttribute ( org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE , locale ) ; setCookie ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) , ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) , locale ) ; chain.doFilter ( request , response ) ; }
private boolean prestartVm ( org.ovirt.engine.core.compat.Guid vmGuid ) { if ( org.ovirt.engine.core.bll.VmPoolCommandBase.canAttachNonPrestartedVmToUser ( vmGuid , new java.util.ArrayList < java.lang.String > ( ) ) ) { org.ovirt.engine.core.common.businessentities.VM vmToPrestart = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . get ( vmGuid ) ; return runVmAsStateless ( vmToPrestart ) ; } return false ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < org.ovirt.engine.core.bll.utils.PermissionSubject > ( ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getVmPoolId ( ) , org.ovirt.engine.core.common.VdcObjectType.VmPool , org.ovirt.engine.core.bll.VmPoolCommandBase.getActionType ( ) . getActionGroup ( ) ) ) ; return permissionList ; }
protected void onLogin ( final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { super . onLogin ( loginModel ) ; org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . init ( ) ; org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . getReportsInitEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { commonModelProvider.get ( ) . updateReportsAvailability ( ) ; } } ) ; performLogin ( loginModel ) ; }
public void onSuccessAudit ( ) { mockExecutor ( true ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( auditLogDirector , org.mockito.Mockito.times ( 2 ) ) . log ( org.mockito.Matchers.any ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.AuditLogType.class ) ) ; }
protected org.ovirt.engine.api.model.DiskSnapshot postPopulate ( org.ovirt.engine.api.model.DiskSnapshot model ) { model.setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.DiskFormat.class ) ) ; model.setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.DiskInterface.class ) ) ; model.setSgio ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.ScsiGenericIO.class ) ) ; model.setStatus ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.DiskStatus.class ) ) ; model.setLunStorage ( null ) ; return model ; }
public void nullifiedSnapshotOnUpdateDiskToShareable ( ) { org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters ( ) ; parameters.setDiskInfo ( createShareableDisk ( VolumeFormat.RAW ) ) ; org.ovirt.engine.core.common.businessentities.DiskImage oldDisk = createDiskImage ( ) ; oldDisk.setVmSnapshotId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( oldDisk ) ; initializeCommand ( parameters ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; command.executeVmCommand ( ) ; org.junit.Assert.assertTrue ( ( ( oldDisk.getVmSnapshotId ( ) ) == null ) ) ; }
public void testFetchSpecificQuotaUsageForGlobalCluster ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > quotaClusterList = dao.getQuotaClusterByClusterGuid ( null , FixturesTool.QUOTA_SPECIFIC ) ; org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster = quotaClusterList.get ( 0 ) ; org.junit.Assert.assertEquals ( 2 , quotaClusterList.size ( ) ) ; org.junit.Assert.assertNotNull ( quotaCluster ) ; }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderDisk > cinderDisks , org.ovirt.engine.core.compat.Guid vmSnapshotId ) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters ( cinderDisks , vmSnapshotId , diskInfoDestinationMap ) ; return withRootCommandInfo ( createParams , org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType ( ) ) ; }
public javax.net.ssl.TrustManager [ ] getTrustManagers ( ) { try { java.security.KeyStore keyStore = java.security.KeyStore.getInstance ( "JKS" ) ; keyStore.load ( this . trustStream , this . pass.toCharArray ( ) ) ; javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance ( javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm ( ) ) ; tmf.init ( keyStore ) ; return tmf.getTrustManagers ( ) ; } catch ( java.security.NoSuchAlgorithmException | java.io.IOException | java.security.KeyStoreException | java.security.cert.CertificateException ex ) { throw new java.lang.RuntimeException ( ex ) ; } }
private void addBondOptionIfMissing ( java.lang.String candidateOption ) { if ( ! ( pairForBondOption.containsKey ( candidateOption ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ( ) ; entityModel.setEntity ( candidateOption ) ; java.util.Map.Entry < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > newPair = new org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > ( "custom" , entityModel ) ; bondOptions.add ( newPair ) ; pairForBondOption.put ( candidateOption , newPair ) ; } }
public static org.ovirt.engine.api.model.Bookmark map ( org.ovirt.engine.api.model.Bookmark entity , org.ovirt.engine.api.model.Bookmark template ) { org.ovirt.engine.api.model.Bookmark model = ( template != null ) ? template : new org.ovirt.engine.api.model.Bookmark ( ) ; model.setId ( entity.getId ( ) . toString ( ) ) ; model.setName ( entity.getName ( ) ) ; model.setValue ( entity.getValue ( ) ) ; return model ; }
public float nextFloat ( float f , boolean inclusive ) { if ( f <= 0.0F ) { throw new java.lang.IllegalArgumentException ( "f must be greater than 0!" ) ; } float rand = nextFloat ( ) ; if ( ! inclusive ) { while ( rand == 1.0F ) { rand = nextFloat ( ) ; } } return rand * f ; }
public static void initNicHotplugSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.nicHotplugSupportMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetNicHotplugSupportMap ) , callback ) ; }
public void testValidateWithEmptySnapshotGuid ( ) { cmd.getParameters ( ) . setDstSnapshotId ( Guid.Empty ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID ) ; }
public void testDisksUsagesWithNullEntry ( ) { java.lang.Object [ ] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.initDisksUsageData ( ) ; disksUsages [ 1 ] = null ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksUsage ( disksUsages ) ; validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVmStatistics ( ) , disksUsages , xml ) ; }
protected void ItemsCollectionChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.NotifyCollectionChangedEventArgs e ) { super . ItemsCollectionChanged ( sender , e ) ; if ( ( ( getSystemTreeSelectedItem ( ) ) != null ) && ( ( getSystemTreeSelectedItem ( ) . getType ( ) ) == ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.Storage ) ) ) { org.ovirt.engine.core.common.businessentities.StorageDomain storage = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( getSystemTreeSelectedItem ( ) . getEntity ( ) ) ) ; setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.FirstOrDefault ( org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.StorageDomain > Cast ( getItems ( ) ) , new org.ovirt.engine.ui.uicommonweb.Linq.StoragePredicate ( storage.getId ( ) ) ) ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.VdcOption ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VdcOption other = ( ( org.ovirt.engine.core.common.businessentities.VdcOption ) ( obj ) ) ; return ( java.util.Objects.equals ( name , other.name ) ) && ( java.util.Objects.equals ( value , other.value ) ) ; }
public void validateFailsOnNoHook ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForUpdate ( false ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST.toString ( ) ) ) ; }
private void initSpmPriorities1 ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDefaultSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.defaultSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( postponedSpmPriority ) != null ) { updateSpmPriority ( postponedSpmPriority ) ; } spmInitialized = true ; } } ) ) ; }
protected boolean validate ( ) { Q validator = getProfileValidator ( ) ; return ( ( ( ( validate ( validator.profileIsSet ( ) ) ) && ( validate ( validator.profileExists ( ) ) ) ) && ( validate ( validator.profileNameNotUsed ( ) ) ) ) && ( validate ( validator.parentEntityNotChanged ( ) ) ) ) && ( validate ( validator.qosExistsOrNull ( ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.Network FindNetworkByName ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Network > items , java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.Network n : items ) { if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( n.getname ( ) , name ) ) { return n ; } } return null ; }
public org.ovirt.engine.core.bll.ValidationResult changeProtocolAllowed ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.VDS_STATUS_NOT_VALID_FOR_UPDATE ) . when ( ( ( ( oldHost.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance ) ) && ( ( oldHost.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS ) ) ) ) ; }
private void assertValidationWorks ( int nameLength , int numOfVms , boolean expected ) { org.ovirt.engine.ui.uicommonweb.validation.PoolNameLengthValidation object = new org.ovirt.engine.ui.uicommonweb.validation.PoolNameLengthValidation ( nameOfLength ( nameLength ) , numOfVms , 3 ) ; org.ovirt.engine.ui.uicommonweb.validation.PoolNameLengthValidation spy = org.mockito.Mockito.spy ( object ) ; org.junit.Assert.assertThat ( spy.validate ( null ) . getSuccess ( ) , org.hamcrest.core.Is.is ( org.hamcrest.core.IsEqual.equalTo ( expected ) ) ) ; }
public java.lang.String createDisk ( final org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { return execute ( ( ) -> { com.woorea.openstack.cinder.model.VolumeForCreate cinderVolume = new com.woorea.openstack.cinder.model.VolumeForCreate ( ) ; cinderVolume.setName ( cinderDisk.getDiskAlias ( ) ) ; cinderVolume.setDescription ( cinderDisk.getDiskDescription ( ) ) ; cinderVolume.setSize ( ( ( int ) ( cinderDisk.getSizeInGigabytes ( ) ) ) ) ; cinderVolume.setVolumeType ( cinderDisk.getCinderVolumeType ( ) ) ; return proxy.createVolume ( cinderVolume ) ; } ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel loginModel = ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel ) ( target ) ) ; loginModel.setENGINEUserActionGroupList ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( returnValue ) ) ) ; loginModel.getENGINEUserActionGroupList ( ) . add ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel.ConsumeQuotaActionGroup ) ; loginModel.GetUserRoles ( loginModel ) ; }
public void networkRemovedFromBond ( ) { java.lang.String networkName = "net" ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , networkName ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > slaves = createNics ( bond.getName ( ) ) ; mockExistingIfacesWithBond ( bond , slaves ) ; bond.setNetworkName ( null ) ; org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = createParametersForBond ( bond , slaves ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( parameters ) ; validateAndExpectNoViolations ( helper ) ; assertNoBondsModified ( helper ) ; assertNoNetworksModified ( helper ) ; assertNetworkRemoved ( helper , networkName ) ; assertNoBondsRemoved ( helper ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel ) ( model ) ) ; java.lang.Iterable < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; storageModel.postUpdateHost ( hosts ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage_pool a : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( returnValue ) ) ) { if ( ( a.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up ) ) { list.add ( a ) ; } } model.SetDataCenter ( model , list ) ; }
public void clearVdsFromCache ( org.ovirt.engine.core.compat.Guid vdsId , java.lang.String vdsName ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat ( "Clearing cache of pool: {0} for problematic entities of VDS: {1}." , _storagePoolId , vdsName ) ; synchronized ( _lockObject ) { if ( _vdssInProblem.containsKey ( vdsId ) ) { for ( org.ovirt.engine.core.compat.Guid domainId : _vdssInProblem.get ( vdsId ) ) { DomainRecoveredFromProblem ( domainId , vdsId , vdsName ) ; } } } }
public java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > findUsers ( java.util.List < org.ovirt.engine.core.common.utils.ExternalId > ids ) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction ( AdActionType.GetAdUserByUserIdList , new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByUserIdListParameters ( getName ( ) , ids , true ) ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > ldapUsers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > ) ( ldapResult.getReturnValue ( ) ) ) ; return mapUsers ( ldapUsers ) ; }
private org.ovirt.engine.core.bll.RemoveQuotaCommand createCommand ( ) { org.ovirt.engine.core.common.action.QuotaCRUDParameters param = new org.ovirt.engine.core.common.action.QuotaCRUDParameters ( ) ; param.setQuotaId ( generalGuidQuota ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveQuotaCommand ( param , null ) ) ; org.mockito.Mockito.doReturn ( storagePoolDao ) . when ( command ) . getStoragePoolDao ( ) ; org.mockito.Mockito.doReturn ( quotaDao ) . when ( command ) . getQuotaDao ( ) ; org.mockito.Mockito.doReturn ( vmDao ) . when ( command ) . getVmDao ( ) ; org.mockito.Mockito.doReturn ( quotaManager ) . when ( command ) . getQuotaManager ( ) ; return command ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetTimeZonesQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetTimeZonesQuery.timezones ) ; }
public void insufficientDiskSpaceWithSnapshots ( ) { setupDiskSpaceTest ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.when ( cmd.getImportValidator ( ) . validateSpaceRequirements ( org.mockito.ArgumentMatchers.anyCollection ( ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
public void getVdsWithVdsId ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; b.setVdsId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b.getVds ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , v.getId ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllValidationPass , boolean waitForResult ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = notAllowToRunAction ( actionType ) ; if ( returnValue != null ) { java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > list = new java.util.ArrayList < > ( ) ; list.add ( returnValue ) ; return list ; } else { return runMultipleActionsImpl ( actionType , parameters , false , isRunOnlyIfAllValidationPass , waitForResult , null ) ; } }
protected void executeCommand ( ) { }
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > createNetworksMap ( java.lang.String networkName , boolean vmNetwork , int mtu , java.lang.Integer vlanId ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setVmNetwork ( vmNetwork ) ; network.setMtu ( mtu ) ; network.setvlan_id ( vlanId ) ; return java.util.Collections.singletonMap ( networkName , network ) ; }
public void unsyncedNetworkNotModified ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork ( "net" ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork ( "nic0" , net ) ; nic.setBridged ( ( ! ( net.isVmNetwork ( ) ) ) ) ; mockExistingNetworks ( net ) ; mockExistingIfaces ( nic ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic ) ) ; validateAndAssertNoChanges ( helper ) ; }
public void testExecuteCommandByServerIdForRestart ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( null , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_RESTART ) , null ) ) ; setUpMockUpForRestart ( ) ; mockBackend ( true , null , GlusterServiceStatus.RUNNING ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( serverServiceDao , org.mockito.Mockito.times ( 2 ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class ) ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_SERVICE_RESTARTED ) ; }
public void dispose ( ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( "vdsManager::disposing" ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( onTimerJobId ) ; _vdsProxy.close ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ; if ( vm == null ) { return ; } setVM ( vm ) ; syncSearch ( ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageServerConnectionLunMapDao ( ) ; storageServerConnectionDao = dbFacade.getStorageServerConnectionDao ( ) ; existingConnection = storageServerConnectionDao.get ( "0cc146e8-e5ed-482c-8814-270bc48c297f" ) ; newServerConnection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; newServerConnection.setid ( "0cc146e8-e5ed-482c-8814-270bc48c2980" ) ; newServerConnection.setconnection ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.EXISTING_DOMAIN_STORAGE_NAME ) ; existingLUNStorageMap = dao.get ( new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map_id ( "1IET_00180001" , existingConnection.getid ( ) ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAOTest.FREE_LUN_ID , existingConnection.getid ( ) ) ; }
public org.ovirt.engine.core.common.eventqueue.EventResult submitEventSync ( org.ovirt.engine.core.common.eventqueue.Event event , java.util.concurrent.Callable < org.ovirt.engine.core.common.eventqueue.EventResult > callable ) { java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > task = submitTaskInternal ( event , callable ) ; if ( task != null ) { try { return task.get ( ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.eventqueue.EventQueueMonitor.log.errorFormat ( "Failed at submitEventSync, for pool {0} with exception {1}" , event.getStoragePoolId ( ) , e ) ; } } return null ; }
private void mockIsNicActuallyExistsOrReferencesNewBond ( org.ovirt.engine.core.bll.network.host.NicLabelValidator validator , boolean returnValue ) { org.mockito.Mockito.doReturn ( returnValue ) . when ( validator ) . isNicActuallyExistsOrReferencesNewBond ( org.mockito.Matchers.any ( java.lang.String.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
private void initTabAvailabilityListeners ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel pool ) { pool.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "IsPoolTabValid" . equals ( propName ) ) { poolTab.markAsInvalid ( null ) ; } } } ) ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getAllForStorageDomain ( org.ovirt.engine.core.bll.storage.GetStorageDomainListByIdQuery.getParameters ( ) . getId ( ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > temp = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : temp ) { if ( ( domain.getStorageDomainSharedStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached ) ) { result.remove ( domain ) ; } } org.ovirt.engine.core.bll.storage.GetStorageDomainListByIdQuery.getQueryReturnValue ( ) . setReturnValue ( result ) ; }
protected void setUpGetEntityExpectations ( boolean filter ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" , "Filtered" } , new java.lang.Object [ ] { GUIDS [ 0 ] , filter } , getEntity ( 0 ) ) ; }
protected void onRunOnce ( ) { startProgress ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RunVmOnce , createRunVmOnceParams ( ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { stopProgress ( ) ; commandTarget.executeCommand ( runOnceCommand ) ; } } , this ) ; }
public void testFailInterfaceCanUpdateReadOnly ( ) { initializeCommand ( new org.ovirt.engine.core.common.action.UpdateVmDiskParameters ( vmId , createDiskImage ( ) ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . updateReadOnlyRequested ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ) . when ( diskValidator ) . isReadOnlyPropertyCompatibleWithInterface ( ) ; org.junit.Assert.assertFalse ( command.validateCanUpdateReadOnly ( diskValidator ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { boolean selectVnc = false ; java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsDevice > graphicsDevices = returnValue.getReturnValue ( ) ; if ( ( ( graphicsDevices.size ( ) ) == 1 ) && ( ( graphicsDevices.get ( 0 ) . getGraphicsType ( ) ) == ( org.ovirt.engine.core.common.businessentities.GraphicsType.VNC ) ) ) { selectVnc = true ; } getDisplayConsole_Vnc_IsSelected ( ) . setEntity ( selectVnc ) ; getDisplayConsole_Spice_IsSelected ( ) . setEntity ( ( ! selectVnc ) ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > filteredStorageDomains = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : storageDomains ) { if ( ( a.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) { filteredStorageDomains.add ( a ) ; } } postExportGetStorageDomainList ( filteredStorageDomains ) ; }
java.lang.Iterable < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > getClustersTableItems ( ) { org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > tableModel = clustersTable.asEditor ( ) . flush ( ) ; return ( tableModel != null ) && ( ( tableModel.getItems ( ) ) != null ) ? tableModel.getItems ( ) : new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > ( ) ; }
public java.lang.String getDisplayValue ( ) { if ( isDefault ( ) ) { java.lang.String defaultTimeZoneKey = ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( timeZoneType.getDefaultTimeZoneConfigurationKey ( ) ) ) ) ; if ( ! ( timeZoneType.getTimeZoneList ( ) . containsKey ( defaultTimeZoneKey ) ) ) { defaultTimeZoneKey = timeZoneType.getUltimateFallback ( ) ; } return timeZoneType.getTimeZoneList ( ) . get ( defaultTimeZoneKey ) ; } else { return timeZoneType.getTimeZoneList ( ) . get ( timeZoneKey ) ; } }
public void close ( ) throws java.io.IOException { org.ovirt.engineextensions.aaa.ldap.Resolver.log.debug ( "Close" ) ; if ( ( ctx ) != null ) { try { ctx.close ( ) ; ctx = null ; } catch ( javax.naming.NamingException e ) { org.ovirt.engineextensions.aaa.ldap.Resolver.log.debug ( "Ignoring exception" , e ) ; } } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( p.getVdsGroupId ( ) . equals ( vm.getVdsGroupId ( ) ) ) && ( org.ovirt.engine.core.bll.RunVmCommandBase.hasMemoryToRunVM ( p , vm ) ) ) && ( org.ovirt.engine.core.bll.RunVmCommandBase.hasCpuToRunVM ( p , vm ) ) ; }
public boolean isUpdateAvailable ( org.ovirt.engine.core.common.businessentities.VDS host ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.IdQueryParameters ( host.getId ( ) ) ) ; java.util.List < org.ovirt.engine.core.compat.RpmVersion > isos = returnValue.getReturnValue ( ) ; return org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable ( isos , host.getHostOs ( ) ) ; }
private void updateOptionsLocalFSData ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getLocalStorageHost ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS localStorageHost = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; clusterGuideModel.localStorageHost = localStorageHost ; clusterGuideModel.updateOptionsLocalFS ( ) ; } } ) , dataCenter.getName ( ) ) ; }
public boolean canBeSelected ( ) { org.ovirt.engine.core.common.businessentities.DisplayType displayType = ( ( getEntity ( ) . getDisplayType ( ) ) != null ) ? getEntity ( ) . getDisplayType ( ) : getEntity ( ) . getDefaultDisplayType ( ) ; boolean hasVmSpiceSupport = java.lang.Boolean.TRUE.equals ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . hasSpiceSupport ( getEntity ( ) . getOs ( ) , getEntity ( ) . getVdsGroupCompatibilityVersion ( ) ) ) ; return ( displayType == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) && hasVmSpiceSupport ; }
public void testGetBrickByServerIdAndDirectory ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = dao.getBrickByServerIdAndDirectory ( FixturesTool.GLUSTER_BRICK_SERVER1 , FixturesTool.GLUSTER_BRICK_DIR1 ) ; org.junit.Assert.assertNotNull ( brick ) ; org.junit.Assert.assertEquals ( FixturesTool.GLUSTER_BRICK_SERVER1 , brick.getServerId ( ) ) ; org.junit.Assert.assertEquals ( FixturesTool.GLUSTER_BRICK_DIR1 , brick.getBrickDirectory ( ) ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network ( ) ; model.setName ( NAMES [ 0 ] ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Network" , "add" , "dataCenter.name|id" ) ; } }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source == null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; }
protected boolean setAndValidateCpuProfile ( ) { getVm ( ) . getStaticData ( ) . setVdsGroupId ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId ( ) ) ; getVm ( ) . getStaticData ( ) . setCpuProfileId ( org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getCpuProfileId ( ) ) ; return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile ( getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ) ; }
public void flush ( org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos ) { qos.setOutAverageLinkshare ( parseInteger ( getOutAverageLinkshare ( ) . getEntity ( ) ) ) ; qos.setOutAverageUpperlimit ( parseInteger ( getOutAverageUpperlimit ( ) . getEntity ( ) ) ) ; qos.setOutAverageRealtime ( parseInteger ( getOutAverageRealtime ( ) . getEntity ( ) ) ) ; }
protected void endSuccessfully ( ) { org.ovirt.engine.core.bll.ExportVmCommand.endActionOnAllImageGroups ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ; populateVmData ( vm ) ; if ( org.ovirt.engine.core.bll.ExportVmCommand.getParameters ( ) . getCopyCollapse ( ) ) { endCopyCollapseOperations ( vm ) ; } else { updateSnapshotOvf ( vm ) ; } org.ovirt.engine.core.bll.VmHandler.unLockVm ( vm ) ; org.ovirt.engine.core.bll.ExportVmCommand.setSucceeded ( true ) ; }
protected void updateVirtioScsiAvailability ( ) { getModel ( ) . getIsVirtioScsiEnabled ( ) . setIsAvailable ( true ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ) ) { return false ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } return org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ( obj ) ) . getId ( ) ) ; }
private boolean evaluateHostUpgradeInternalCommandProgress ( java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds , org.ovirt.engine.core.bll.CommandBase < ? > rootCommand ) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand ( childCmdIds ) ; if ( upgradeCommand == null ) { return false ; } switch ( upgradeCommand.getCommandStatus ( ) ) { case ACTIVE : case NOT_STARTED : case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus ( CommandStatus.FAILED ) ; return true ; case SUCCEEDED : rootCommand.setCommandStatus ( CommandStatus.SUCCEEDED ) ; return true ; } return true ; }
public void validateFailsOnNullHookId ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( null ) , null ) ) ; setUpMocksForUpdate ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString ( ) ) ) ; }
public void testNoChanges ( ) { org.ovirt.engine.core.utils.Jedi jedi1 = new org.ovirt.engine.core.utils.Jedi ( ) ; org.ovirt.engine.core.utils.Jedi jedi2 = new org.ovirt.engine.core.utils.Jedi ( ) ; java.util.List < java.lang.String > changes = org.ovirt.engine.core.utils.ObjectIdentityChecker.GetChangedFields ( jedi1 , jedi2 ) ; assertTrue ( "Should be no changes" , ( ( changes.size ( ) ) == 0 ) ) ; }
public void testChangeClusterForbidden ( ) { prepareVmToPassValidate ( ) ; org.ovirt.engine.core.common.businessentities.Cluster newGroup = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; newGroup.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newGroup.setCompatibilityVersion ( Version.v3_6 ) ; vmStatic.setClusterId ( newGroup.getId ( ) ) ; org.junit.Assert.assertFalse ( "validate should have failed with can't change cluster." , command.validate ( ) ) ; assertValidateMessage ( EngineMessage.VM_CANNOT_UPDATE_CLUSTER ) ; }
public org.ovirt.engine.core.common.businessentities.DbUser getByExternalId ( java.lang.String domain , java.lang.String externalId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "domain" , domain ) . addValue ( "external_id" , externalId ) ; return getCallsHandler ( ) . executeRead ( "GetUserByExternalId" , org.ovirt.engine.core.dao.DbUserDAODbFacadeImpl.DbUserRowMapper.instance , parameterSource ) ; }
protected org.ovirt.engine.api.model.Network getClusterNetwork ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid id , java.lang.String name ) { for ( org.ovirt.engine.api.model.Network entity : getBackendCollection ( org.ovirt.engine.api.model.Network.class , VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) ) ) { if ( ( ( id != null ) && ( id.equals ( entity.getId ( ) ) ) ) || ( ( name != null ) && ( name.equals ( entity.getName ( ) ) ) ) ) { return entity ; } } return null ; }
public void testRpmRelease ( ) { org.junit.Assert.assertEquals ( "20130212.fc18.noarch" , new org.ovirt.engine.core.compat.RpmVersion ( "ovirt-node-iso-2.6.0-20130212.fc18.noarch" ) . getRpmRelease ( ) ) ; org.junit.Assert.assertEquals ( "1.1.i386" , new org.ovirt.engine.core.compat.RpmVersion ( "test-javadb-common-10.2.2.2.2-1.1.i386" ) . getRpmRelease ( ) ) ; org.junit.Assert.assertEquals ( "2.3.10.4.fc18.x86_64" , new org.ovirt.engine.core.compat.RpmVersion ( "java-1.7.0-openjdk-devel-1.7.0.25-2.3.10.4.fc18.x86_64" ) . getRpmRelease ( ) ) ; org.junit.Assert.assertEquals ( "1.el6" , new org.ovirt.engine.core.compat.RpmVersion ( "rhev-agent-2.3.7.10.3-1.el6" , "RHEV-Agent" , true ) . getRpmRelease ( ) ) ; org.junit.Assert.assertEquals ( "1.el6" , new org.ovirt.engine.core.compat.RpmVersion ( "rhev-agent-2.3.7.10.3-1.el6" , "rhev-agent" , false ) . getRpmRelease ( ) ) ; }
public void versionDecreaseLowerVersionThanDC ( ) { createCommandWithOlderVersion ( ) ; org.ovirt.engine.core.dao.StoragePoolDao storagePoolDao2 = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StoragePoolDao.class ) ; org.mockito.Mockito.when ( storagePoolDao2.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFSOldVersion ( ) ) ; org.mockito.Mockito.doReturn ( storagePoolDao2 ) . when ( cmd ) . getStoragePoolDao ( ) ; org.mockito.Mockito.doReturn ( storagePoolDao2 ) . when ( dbFacadeMock ) . getStoragePoolDao ( ) ; setupCpu ( ) ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION_UNDER_DC ) ; }
protected void refreshVmStats ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.DebugTimerLogging ) ) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.debug ( "vds::refreshVmList entered" ) ; } if ( fetchRunningVms ( ) ) { refreshCommitedMemory ( ) ; java.util.List < org.ovirt.engine.core.compat.Guid > staleRunningVms = checkVmsStatusChanged ( ) ; proceedWatchdogEvents ( ) ; proceedBalloonCheck ( ) ; proceedDownVms ( ) ; proceedGuaranteedMemoryCheck ( ) ; processExternallyManagedVms ( ) ; updateRepository ( staleRunningVms ) ; if ( ! ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion ( _vds.getVdsGroupCompatibilityVersion ( ) ) ) ) { handleVmDeviceChange ( ) ; } prepareGuestAgentNetworkDevicesForUpdate ( ) ; } }
public void testExecuteQueryCommand ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters params = getQueryParameters ( ) ; org.mockito.Mockito.when ( params.getId ( ) ) . thenReturn ( vmId ) ; org.ovirt.engine.core.bll.GetAllVmSnapshotsByVmIdQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > query = getQuery ( ) ; query.executeQueryCommand ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > snapshots = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( query.getQueryReturnValue ( ) . getReturnValue ( ) ) ) ; org.junit.Assert.assertTrue ( "snapshot should be in the return value" , snapshots.contains ( snapshot ) ) ; org.junit.Assert.assertEquals ( "there should be exactly one snapshot returned" , 1 , snapshots.size ( ) ) ; }
protected void executeCommand ( ) { MoveVdssToGoingToMaintananceMode ( ) ; MigrateAllVdss ( ) ; for ( org.ovirt.engine.core.compat.Guid id : _vdsGroupIds ) { java.util.List < org.ovirt.engine.core.common.businessentities.Network > networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDAO ( ) . getAllForCluster ( id ) ; for ( org.ovirt.engine.core.common.businessentities.Network net : networks ) { org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.SetNetworkStatus ( id , net ) ; } } org.ovirt.engine.core.bll.MaintananceNumberOfVdssCommand.setSucceeded ( true ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior behavior = this ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; behavior.postInitTemplate ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . filterTemplatesByArchitecture ( templates , dataCenterWithCluster.getCluster ( ) . getArchitecture ( ) ) ) ; }
private void setupExpectedGlusterServersInfo ( ) { expectedServers = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo > ( ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo server = new org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo ( ) ; server.setUuid ( org.ovirt.engine.core.bll.gluster.GetAddedGlusterServersQueryTest.server_id3 ) ; server.setHostnameOrIp ( org.ovirt.engine.core.bll.gluster.GetAddedGlusterServersQueryTest.TEST_SERVER3 ) ; server.setStatus ( PeerStatus.CONNECTED ) ; expectedServers.add ( server ) ; }
public void onSuccess ( java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue ) ) ; quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > ( ) ; getStorageQuota ( ) . setItems ( quotas ) ; getStorageQuota ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( quotas ) ) ; }
private static void addCdDetails ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { struct.put ( VdsProperties.Type , vmDevice.getType ( ) . getValue ( ) ) ; struct.put ( VdsProperties.Device , vmDevice.getDevice ( ) ) ; struct.put ( VdsProperties.Index , "2" ) ; struct.put ( VdsProperties.INTERFACE , VdsProperties.Ide ) ; struct.put ( VdsProperties.ReadOnly , java.lang.Boolean.TRUE.toString ( ) ) ; struct.put ( VdsProperties.Shareable , java.lang.Boolean.FALSE.toString ( ) ) ; }
protected void executeCommand ( ) { getQuotaDao ( ) . remove ( getParameters ( ) . getId ( ) ) ; getQuotaManager ( ) . removeQuotaFromCache ( getQuota ( ) . getStoragePoolId ( ) , getParameters ( ) . getId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.lang.Object result = returnValue.getReturnValue ( ) ; model.postDiscoverTargetsInternal ( ( result != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ) ( result ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( ) ) ) ; }
private void mockVdsGroupDAO ( ) { org.mockito.Mockito.doReturn ( vdsGroupDAO ) . when ( command ) . getVdsGroupDAO ( ) ; org.mockito.Mockito.when ( vdsGroupDAO.get ( vdsGroupId ) ) . thenReturn ( vdsGroup ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.String documentationBaseURL = ( ( java.lang.String ) ( returnValue ) ) ; boolean isDocumentationAvailable = ! ( documentationBaseURL.equals ( "" ) ) ; setDocumentationAvailable ( isDocumentationAvailable ) ; setDocumentationBasePath ( documentationBaseURL ) ; onUpdateDocumentationBaseURL ( ) ; }
protected boolean setAndValidateDiskProfiles ( ) { java.util.Map < org.ovirt.engine.core.common.businessentities.storage.DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap < > ( ) ; for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters ( ) . getParametersList ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImageByImageId ( parameters.getImageId ( ) ) ; map.put ( diskImage , diskImage.getStorageIds ( ) . get ( 0 ) ) ; } return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles ( map , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getStoragePool ( ) . getCompatibilityVersion ( ) , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCurrentUser ( ) ) ) ; }
public void storagePoolIdWithStorageDomain ( ) { b.setStoragePoolId ( null ) ; b.setStoragePool ( null ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain s = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; s.setStoragePoolId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setStorageDomain ( s ) ; final org.ovirt.engine.core.compat.Guid n = b.getStoragePoolId ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , n ) ; }
private void addDefaultNetworks ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; net.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; net.setname ( org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.ManagementNetwork ) ) ; net.setdescription ( AddVdsGroupCommand.DefaultNetworkDescription ) ; net.setstorage_pool_id ( org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool ( ) . getId ( ) ) ; net.setVmNetwork ( true ) ; org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getNetworkDAO ( ) . save ( net ) ; }
public static java.lang.Object [ ] [ ] data ( ) { return new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { false , java.util.Collections.emptyList ( ) } , new java.lang.Object [ ] { false , java.util.Collections.singletonList ( ActionGroup.CREATE_VM ) } , new java.lang.Object [ ] { true , java.util.Collections.singletonList ( ActionGroup.CONFIGURE_ENGINE ) } , new java.lang.Object [ ] { true , java.util.Arrays.asList ( ActionGroup.CONFIGURE_ENGINE , ActionGroup.CREATE_VM ) } } ; }
protected void configure ( ) { super . configure ( ) ; bind ( org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemMessagesTranslator.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.userportal.section.login.presenter.ConnectAutomaticallyProvider.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.userportal.utils.ConnectAutomaticallyManager.class ) . in ( com.google.inject.Singleton.class ) ; }
protected void updateCustomPropertySheet ( ) { if ( ( getModel ( ) . getSelectedCluster ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . getSelectedCluster ( ) ; updateCustomPropertySheet ( cluster.getcompatibility_version ( ) ) ; }
private void initCPU ( ) { if ( ( ! ( isCPUinitialized ) ) && ( getIsEdit ( ) ) ) { isCPUinitialized = true ; getCPU ( ) . setSelectedItem ( null ) ; for ( org.ovirt.engine.core.common.businessentities.ServerCpu a : getCPU ( ) . getItems ( ) ) { if ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( a.getCpuName ( ) , getEntity ( ) . getCpuName ( ) ) ) { getCPU ( ) . setSelectedItem ( a ) ; break ; } } } }
public void onSuccess ( java.lang.Boolean returnValue ) { if ( returnValue ) { postCloneVmNameUnique ( targetModel , makeCreatorExplicitOwner ) ; } else { stopProgress ( ) ; getCloneName ( ) . getInvalidityReasons ( ) . add ( uiConstants.nameMustBeUniqueInvalidReason ( ) ) ; getCloneName ( ) . setIsValid ( false ) ; } }
public static void addDiskToVm ( org.ovirt.engine.core.common.businessentities.BaseDisk disk , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getBaseDiskDao ( ) . save ( disk ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk.getId ( ) , vmId ) , VmDeviceGeneralType.DISK , VmDeviceType.DISK , null , true , false , null ) ; }
private void reportNonOperationReason ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.lang.String compatibleVersions , java.lang.String vdsSupportedVersions ) { java.util.Map < java.lang.String , java.lang.String > customLogValues = new java.util.HashMap < > ( ) ; customLogValues.put ( "CompatibilityVersion" , compatibleVersions ) ; customLogValues.put ( "VdsSupportedVersions" , vdsSupportedVersions ) ; org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( org.ovirt.engine.core.bll.HandleVdsVersionCommand.getVdsId ( ) , reason , customLogValues ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; }
public org.ovirt.engine.core.searchbackend.IAutoCompleter getFieldRelationshipAutoCompleter ( java.lang.String fieldName ) { if ( ( ( ( "CREATIONDATE" . equals ( fieldName ) ) || ( "SIZE" . equals ( fieldName ) ) ) || ( "ACTUAL_SIZE" . equals ( fieldName ) ) ) || ( "PROVISIONED_SIZE" . equals ( fieldName ) ) ) { return BiggerOrSmallerRelationAutoCompleter.INTSANCE ; } else if ( "NUMBER_OF_VMS" . equals ( fieldName ) ) { return NumericConditionRelationAutoCompleter.INSTANCE ; } else { return StringConditionRelationAutoCompleter.INSTANCE ; } }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } final org.ovirt.engine.core.bll.MacPoolValidator validator = new org.ovirt.engine.core.bll.MacPoolValidator ( getOldMacPool ( ) ) ; return ( ( validate ( validator.macPoolExists ( ) ) ) && ( validate ( validator.notRemovingDefaultPool ( ) ) ) ) && ( validate ( validator.notRemovingUsedPool ( ) ) ) ; }
public void testGet ( ) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos persistedQos = dao.get ( FixturesTool.HOST_NETWORK_QOS_A ) ; org.ovirt.engine.core.common.businessentities.network.HostNetworkQos referenceQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; referenceQos.setId ( FixturesTool.HOST_NETWORK_QOS_A ) ; referenceQos.setName ( "host_network_qos_a" ) ; referenceQos.setStoragePoolId ( FixturesTool.STORAGE_POOL_MIXED_TYPES ) ; referenceQos.setOutAverageLinkshare ( 1000 ) ; referenceQos.setOutAverageUpperlimit ( 2000 ) ; referenceQos.setOutAverageRealtime ( 500 ) ; org.junit.Assert.assertNotNull ( persistedQos ) ; org.junit.Assert.assertEquals ( referenceQos , persistedQos ) ; }
private void setUpMocksForUpdate ( boolean hookFound , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { setupMocks ( hookFound , hook ) ; org.mockito.Mockito.when ( vdsDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( getServer ( org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID , "gfs1" , org.ovirt.engine.core.bll.gluster.CLUSTER_ID , status ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; model.setDataCentersAndClusters ( model , dataCenters , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) ; initCdImage ( ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { vfMap = returnValue.getReturnValue ( ) ; if ( ( vfMap ) == null ) { vfMap = java.util.Collections.emptyMap ( ) ; } queryFreeBonds ( ) ; }
public void testUpdateSetAndUploadIconFailure ( ) throws java.lang.Exception { final org.ovirt.engine.api.model.Vm model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel ( 0 ) ; model.setSmallIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler.createIcon ( GUIDS [ 2 ] ) ) ; model.setLargeIcon ( org.ovirt.engine.api.restapi.resource.IconTestHelpler.createIconWithData ( ) ) ; try { verifyModel ( resource.update ( model ) , 0 ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BAD_REQUEST ) ; } }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getNewCommand ( ) ) ) { newProfile ( ) ; } else if ( command == ( getEditCommand ( ) ) ) { edit ( ) ; } else if ( command == ( getRemoveCommand ( ) ) ) { remove ( ) ; } else if ( "Cancel" . equals ( command.getName ( ) ) ) { cancel ( ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.EngineBackupLogId ) ) { return false ; } org.ovirt.engine.core.common.businessentities.EngineBackupLogId other = ( ( org.ovirt.engine.core.common.businessentities.EngineBackupLogId ) ( obj ) ) ; return ( java.util.Objects.equals ( scope , other.scope ) ) && ( java.util.Objects.equals ( doneAt , other.doneAt ) ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllCanDoPass ) { return runMultipleActions ( actionType , parameters , isRunOnlyIfAllCanDoPass , false ) ; }
private static org.ovirt.engine.core.common.businessentities.VDS makeTestVds ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.VDS newVdsData = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; newVdsData.setHostName ( "BUZZ" ) ; newVdsData.setVdsName ( "BAR" ) ; newVdsData.setClusterCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( "1.2.3" ) ) ; newVdsData.setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newVdsData.setId ( vdsId ) ; return newVdsData ; }
public void modifyCredentials ( java.lang.String pool , java.lang.String user , java.lang.String currentPassword , java.lang.String newPassword , java.util.Map < java.lang.String , java.lang.Object > vars ) throws java.lang.Exception { org.ovirt.engineextensions.aaa.ldap.PasswordModifyExtendedResult passwordModifyResult = ( ( org.ovirt.engineextensions.aaa.ldap.PasswordModifyExtendedResult ) ( getConnectionPoolEntry ( pool , null , vars ) . connectionPool.processExtendedOperation ( new org.ovirt.engineextensions.aaa.ldap.PasswordModifyExtendedRequest ( user , currentPassword , newPassword ) ) ) ) ; if ( ( passwordModifyResult.getResultCode ( ) ) != ( ResultCode.SUCCESS ) ) { throw new org.ovirt.engineextensions.aaa.ldap.LDAPException ( passwordModifyResult ) ; } }
public org.ovirt.engine.core.dao.VmDAO getVmDAO ( ) { final org.ovirt.engine.core.dao.VmDAO v = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VmDAO.class ) ; org.mockito.Mockito.when ( v.get ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.VM ( ) ) ; org.mockito.Mockito.when ( v.get ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID3 ) ) . thenThrow ( new java.lang.RuntimeException ( ) ) ; return v ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Nic nic ) { validateParameters ( nic , "name" ) ; return performCreate ( VdcActionType.AddVmInterface , new org.ovirt.engine.core.common.action.AddVmInterfaceParameters ( vmId , map ( nic ) ) , new org.ovirt.engine.api.restapi.resource.NicResolver ( nic.getName ( ) ) ) ; }
public void vdsIdRefVds ( ) { b.setVdsIdRef ( null ) ; final org.ovirt.engine.core.common.businessentities.VDS v = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; v.setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setVds ( v ) ; final org.ovirt.engine.core.compat.Guid g = b.getVdsIdRef ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; }
protected void setUpGetEntityExpectations ( int times , boolean notFound , org.ovirt.engine.core.common.businessentities.VDS entity ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : entity ) ) ; } }
public static void isTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
public void testExecuteCommandFailsWithClusterIdForStop ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) , null ) ) ; setUpMockUpForStart ( ) ; mockBackend ( false , EngineError.GlusterServicesActionFailed , GlusterServiceStatus.RUNNING ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( serverServiceDao , org.mockito.Mockito.never ( ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class ) ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_SERVICE_STOP_FAILED ) ; }
private void executeActionInTransactionScope ( ) { if ( ( org.ovirt.engine.core.utils.transaction.TransactionSupport.current ( ) ) != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.registerRollbackHandler ( this ) ; } if ( ! ( executeWithoutTransaction ( ) ) ) { if ( ( org.ovirt.engine.core.utils.transaction.TransactionSupport.current ( ) ) == null ) { cancelTasks ( ) ; } org.ovirt.engine.core.utils.transaction.TransactionSupport.setRollbackOnly ( ) ; } }
private static java.security.KeyStore getTrustStore ( java.lang.String filePath , java.lang.String password ) throws java.io.IOException , java.security.KeyStoreException , java.security.NoSuchAlgorithmException , java.security.cert.CertificateException { java.security.KeyStore ks ; try ( java.io.InputStream in = new java.io.FileInputStream ( filePath ) ) { ks = java.security.KeyStore.getInstance ( "JKS" ) ; ks.load ( in , password.toCharArray ( ) ) ; } return ks ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > ) ( returnValue ) ) ; quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > ( ) ; getStorageQuota ( ) . setItems ( quotas ) ; getStorageQuota ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( quotas ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > mapHosts ( java.util.List < org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost > foremanHosts ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList ( foremanHosts.size ( ) ) ; for ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost host : foremanHosts ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setVdsName ( host.getName ( ) ) ; vds.setHostName ( host.getName ( ) ) ; hosts.add ( vds ) ; } return hosts ; }
public void isAnyHostUpInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ) ) { return true ; } return false ; } } ; getUpHostListByCluster ( aQuery , clusterName , 1 ) ; }
public void testGet ( ) { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get ( FixturesTool.VM_NETWORK_INTERFACE_PROFILE ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( FixturesTool.VM_NETWORK_INTERFACE_PROFILE , result.getId ( ) ) ; org.junit.Assert.assertFalse ( result.isPortMirroring ( ) ) ; org.junit.Assert.assertFalse ( result.isPassthrough ( ) ) ; }
private java.lang.String getPrintableConnectionsList ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( org.ovirt.engine.core.common.vdscommands.storage_server_connections con : getConnectionList ( ) ) { sb.append ( con ) ; } return sb.toString ( ) ; }
private boolean validateNetworkProviderConfiguration ( ) { return ( ( ! ( org.ovirt.engine.core.bll.UpdateVdsCommand.getParameters ( ) . isInstallHost ( ) ) ) || ( ( org.ovirt.engine.core.bll.UpdateVdsCommand.getParameters ( ) . getNetworkProviderId ( ) ) == null ) ) || ( validateNetworkProviderProperties ( org.ovirt.engine.core.bll.UpdateVdsCommand.getParameters ( ) . getNetworkProviderId ( ) , org.ovirt.engine.core.bll.UpdateVdsCommand.getParameters ( ) . getNetworkMappings ( ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage getImage ( ) { switch ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.getActionState ( ) ) { case END_SUCCESS : case END_FAILURE : if ( ( _diskImage ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages = org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.getDiskImageDAO ( ) . getAllSnapshotsForImageGroup ( org.ovirt.engine.core.bll.MoveOrCopyImageGroupCommand.getParameters ( ) . getImageGroupID ( ) ) ; _diskImage = ( diskImages.isEmpty ( ) ) ? null : diskImages.get ( 0 ) ; } return _diskImage ; default : return super . getImage ( ) ; } }
public void testExecuteCommandFailsWithServerIdForStart ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START ) , null ) ) ; setUpMockUpForStart ( ) ; mockBackend ( false , EngineError.GlusterServicesActionFailed , GlusterServiceStatus.STOPPED ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( serverServiceDao , org.mockito.Mockito.never ( ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class ) ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_SERVICE_START_FAILED , cmd.getAuditLogTypeValue ( ) ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.MacPool o1 , org.ovirt.engine.core.common.businessentities.MacPool o2 ) { int retVal = ( - 1 ) * ( java.lang.Boolean.compare ( o1.isDefaultPool ( ) , o2.isDefaultPool ( ) ) ) ; if ( retVal != 0 ) { return retVal ; } return lexoNumeric.compare ( o1 , o2 ) ; }
public void testUpdateReadOnly ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmDisk , org.ovirt.engine.core.common.action.UpdateVmDiskParameters.class , new java.lang.String [ ] { "VmId" , "DiskInfo.ReadOnly" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID , java.lang.Boolean.TRUE } , true , true ) ) ; org.ovirt.engine.api.model.Disk disk = resource.update ( getUpdate ( ) ) ; assertNotNull ( disk ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel model ) { splitTable.edit ( model.getProviderNetworks ( ) , model.getImportedNetworks ( ) , model.getAddImportCommand ( ) , model.getCancelImportCommand ( ) ) ; driver.edit ( model ) ; }
private org.ovirt.engine.core.bll.QueriesCommandBase < ? > mockQuery ( ) { org.ovirt.engine.core.bll.QueriesCommandBase < ? > query = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.QueriesCommandBase.class , org.mockito.Mockito.withSettings ( ) . useConstructor ( params , null ) . defaultAnswer ( Answers.CALLS_REAL_METHODS ) ) ; org.mockito.Mockito.doReturn ( mockSessionDataContainer ) . when ( query ) . getSessionDataContainer ( ) ; query.postConstruct ( ) ; return query ; }
private boolean canRemoveLunDisk ( ) { if ( ( listVms ) != null ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : listVms ) { if ( ( vm.getstatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = getVmDeviceDAO ( ) . get ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk.getId ( ) , vm.getId ( ) ) ) ; if ( vmDevice.getIsPlugged ( ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; return false ; } } } } return true ; }
public static java.util.List < java.lang.String > assertCanDoActionMessages ( java.lang.String assertionMessage , org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.errors.EngineMessage message ) { java.util.List < java.lang.String > canDoActionMessages = command.getReturnValue ( ) . getCanDoActionMessages ( ) ; org.junit.Assert.assertTrue ( java.text.MessageFormat.format ( "{0}canDoAction messages doesn''t contain expected message: {1}, messages are: {2}" , org.ovirt.engine.core.bll.CanDoActionTestUtils.optionalMessage ( assertionMessage ) , message.name ( ) , canDoActionMessages ) , canDoActionMessages.contains ( message.name ( ) ) ) ; return canDoActionMessages ; }
public void testUpdate ( ) { org.ovirt.engine.core.common.businessentities.Network before = dao.getByName ( existing_net_name ) ; before.setdescription ( "This is a completely changed description" ) ; dao.update ( before ) ; org.ovirt.engine.core.common.businessentities.Network after = dao.getByName ( existing_net_name ) ; org.junit.Assert.assertNotNull ( after ) ; org.junit.Assert.assertEquals ( before , after ) ; }
protected java.lang.String getMemoryFromActiveSnapshot ( ) { if ( memoryFromSnapshotUsed ) { return org.apache.commons.lang.StringUtils.EMPTY ; } if ( ( getFlow ( ) ) == ( org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE ) ) { return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot ( ) . getMemoryVolume ( ) ; } if ( ! ( org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getClusterArch ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getCompatibilityVersion ( ) ) ) ) { return org.apache.commons.lang.StringUtils.EMPTY ; } return org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot ( ) . getMemoryVolume ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createNicSyncedWithNetwork ( java.lang.String nicName , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , nicName , false , null , network.getVlanId ( ) , network.getName ( ) , network.isVmNetwork ( ) , network.getAddr ( ) , false , null ) ; return nic ; }
public void rollback ( ) { log.errorFormat ( "Transaction rolled-back for command: {0}." , this . getClass ( ) . getName ( ) ) ; try { if ( isQuotaDependant ( ) ) { rollbackQuota ( ) ; } } catch ( java.lang.NullPointerException e ) { log.error ( "RollbackQuota: failed (may be because quota is disabled)" , e ) ; } cancelTasks ( ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , false ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Host model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertEquals ( NAMES [ index ] , model.getName ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.ADDRESSES [ index ] , model.getAddress ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.HOST_STATUS [ index ] , model.getStatus ( ) ) ; }
private boolean updateImageParametersRequiringVmDownRequested ( ) { if ( ! ( getOldDisk ( ) . getDiskStorageType ( ) . isInternal ( ) ) ) { return false ; } org.ovirt.engine.core.compat.Guid oldQuotaId = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getOldDisk ( ) ) ) . getQuotaId ( ) ; if ( oldQuotaId == null ) { return false ; } return ! ( java.util.Objects.equals ( oldQuotaId , getQuotaId ( ) ) ) ; }
public void setUp ( ) { tested = org.mockito.Mockito.spy ( new org.ovirt.engine.ui.common.system.ClientStorageImpl ( ) { @ java.lang.Override void initStorage ( ) { } } ) ; org.mockito.Mockito.doNothing ( ) . when ( tested ) . setLocalItemImpl ( org.mockito.ArgumentMatchers.anyString ( ) , org.mockito.ArgumentMatchers.anyString ( ) ) ; org.mockito.Mockito.doNothing ( ) . when ( tested ) . setSessionItemImpl ( org.mockito.ArgumentMatchers.anyString ( ) , org.mockito.ArgumentMatchers.anyString ( ) ) ; }
public void setText ( java.lang.String text ) { super . setText ( new org.ovirt.engine.ui.common.widget.renderer.EmptyValueRenderer < java.lang.String > ( ) . render ( text ) ) ; }
protected static boolean CanAttachPrestartedVmToUser ( org.ovirt.engine.core.compat.Guid vmId ) { boolean returnValue = true ; java.util.ArrayList < java.lang.String > messages = new java.util.ArrayList < java.lang.String > ( ) ; if ( org.ovirt.engine.core.bll.VmPoolCommandBase.vmAssignedToUser ( vmId , messages ) ) { returnValue = false ; } if ( returnValue ) { if ( ! ( org.ovirt.engine.core.bll.VmPoolCommandBase.vmIsRunningStateless ( vmId ) ) ) { returnValue = false ; } } return returnValue ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Map < org.ovirt.engine.core.compat.Version , java.util.Map < java.lang.String , java.lang.String > > ) ( source ) ) : new java.util.HashMap < org.ovirt.engine.core.compat.Version , java.util.Map < java.lang.String , java.lang.String > > ( ) ; }
public void onSuccess ( java.lang.Object returnValueObj ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) ; vfMap = returnValue.getReturnValue ( ) ; if ( ( vfMap ) == null ) { vfMap = java.util.Collections.emptyMap ( ) ; } queryFreeBonds ( ) ; }
public void testGetAllStaticByStoragePool ( ) { org.ovirt.engine.core.compat.Guid spID = dbFacade.getVdsGroupDao ( ) . get ( newVmStatic.getVdsGroupId ( ) ) . getStoragePoolId ( ) ; org.junit.Assert.assertNotNull ( spID.getValue ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > result = dao.getAllByStoragePoolId ( spID.getValue ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
private void Preview ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ( ( org.ovirt.engine.core.common.businessentities.Snapshot ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.TryBackToAllSnapshotsOfVm , new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters ( vm.getId ( ) , snapshot.getId ( ) ) , null , null ) ; } }
private static void logField ( org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromOvf , java.lang.String fieldName , java.lang.String fieldValue ) { java.lang.String vmName = vmStaticFromOvf.getName ( ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "FieldName" , fieldName ) ; logable.addCustomValue ( "VmName" , vmName ) ; logable.addCustomValue ( "FieldValue" , fieldValue ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.VM_IMPORT_INFO ) ; }
public boolean isConnectionForISCSIDomainAttached ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connectionsForDomain = getAllConnectionsForDomain ( storageDomain.getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionForDomain : connectionsForDomain ) { if ( connectionForDomain.getId ( ) . equals ( connection.getId ( ) ) ) { return true ; } } return false ; }
public void testGetAllConnectionsOfNfsDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = dao.getAllForDomain ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( "d9ede37f-e6c3-4bf9-a984-19174070aa31" ) ) ; org.junit.Assert.assertEquals ( connections.size ( ) , 1 ) ; org.junit.Assert.assertEquals ( connections.get ( 0 ) . getId ( ) , "0cc146e8-e5ed-482c-8814-270bc48c2981" ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storages ) { if ( ( storages != null ) && ( ( storages.size ( ) ) > 0 ) ) { handleDomainAlreadyExists ( storages ) ; } else { saveNewPosixStorage ( ) ; } }
public java.nio.channels.SelectionKey connect ( int port ) throws java.io.IOException { final java.net.InetSocketAddress addr = new java.net.InetSocketAddress ( java.net.InetAddress.getByName ( this . host ) , port ) ; java.nio.channels.SocketChannel socketChannel = java.nio.channels.SocketChannel.open ( ) ; socketChannel.connect ( addr ) ; socketChannel.configureBlocking ( false ) ; int interestedOps = java.nio.channels.SelectionKey.OP_READ ; java.nio.channels.SelectionKey key = socketChannel.register ( this . selector , interestedOps , new java.util.concurrent.ConcurrentLinkedDeque < > ( ) ) ; setDaemon ( true ) ; start ( ) ; return key ; }
public org.ovirt.engine.api.resource.DomainGroupResource getDomainGroupSubResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendDomainGroupResource ( id , this ) ) ; }
public void testErrorHandling ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue value = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; value.setSucceeded ( false ) ; value.setExceptionObject ( new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ( "unknown host" ) ) ; org.mockito.Mockito.when ( resourceManager.runVdsCommand ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( value ) ; updater.refreshVdsStats ( true ) ; }
private void mockBackendQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue ( ) ; queryReturnValue.setReturnValue ( returnValue ) ; org.mockito.Mockito.when ( mockBackend.runPublicQuery ( org.mockito.ArgumentMatchers.eq ( queryType ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( queryReturnValue ) ; }
public void testGetAllStorageDomainsByImageId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllStorageDomainsByImageId ( FixturesTool.TEMPLATE_IMAGE_ID ) ; org.junit.Assert.assertEquals ( 1 , result.size ( ) ) ; org.junit.Assert.assertEquals ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 , result.get ( 0 ) . getId ( ) ) ; }
public void executeCommandFailedWhenServerIdPresent ( ) { setUpMocksForUpdate ( ) ; mockForReadContent ( false , EngineError.GlusterHookNotFound ) ; try { cmd.executeCommand ( ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.junit.Assert.assertEquals ( EngineError.GlusterHookNotFound , e.getErrorCode ( ) ) ; } org.mockito.Mockito.verify ( hooksDao , org.mockito.Mockito.never ( ) ) . updateGlusterHook ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( propName.equals ( "IsValid" ) ) { onIsValidPropertyChange ( object ) ; } else if ( propName.equals ( "Message" ) ) { message.setText ( object.getMessage ( ) ) ; } }
public static java.lang.Long determineTotalImageInitialSize ( org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage , org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat , org.ovirt.engine.core.compat.Guid srcDomain , org.ovirt.engine.core.compat.Guid dstDomain ) { if ( org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat ( destFormat , dstDomain ) ) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk ( sourceImage , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . get ( srcDomain ) . getStorageStaticData ( ) ) ; return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize ( sourceImage.getVolumeFormat ( ) , java.lang.Double.valueOf ( totalSizeForClonedDisk ) . longValue ( ) ) ; } return null ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue addStoragePoolInIrs ( ) { return runVdsCommand ( VDSCommandType.CreateStoragePool , new org.ovirt.engine.core.common.vdscommands.CreateStoragePoolVDSCommandParameters ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getVds ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getName ( ) , masterStorageDomain.getId ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getParameters ( ) . getStorages ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getmaster_domain_version ( ) ) ) ; }
protected void addVmNetwork ( ) { org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVdsGroupId ( ) , getStoragePoolId ( ) , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVdsGroup ( ) . getcompatibility_version ( ) , org.ovirt.engine.core.common.AuditLogType.ADD_VM_FROM_SNAPSHOT_INVALID_INTERFACES ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : vmFromConfiguration.getInterfaces ( ) ) { vnicProfileHelper.updateNicWithVnicProfileForUser ( iface , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getCurrentUser ( ) ) ; } vnicProfileHelper.auditInvalidInterfaces ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName ( ) ) ; super . addVmNetwork ( ) ; }
private void edit ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem ( ) ; if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getTemplateById ( new org.ovirt.engine.ui.uicommonweb.models.templates.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.VmTemplate result ) { vmInitLoaded ( result ) ; } } ) , template.getId ( ) ) ; }
public void testAddOperationAction ( ) { org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > testOperation = new org.ovirt.engine.ui.frontend.communication.VdcOperation ( org.ovirt.engine.core.common.action.VdcActionType.AddNetworkOnProvider , new org.ovirt.engine.core.common.action.VdcActionParametersBase ( ) , null ) ; testManager.addOperation ( testOperation ) ; org.mockito.Mockito.verify ( mockOperationProcessor ) . processOperation ( testManager ) ; org.mockito.Mockito.verify ( mockEventBus ) . fireEvent ( org.mockito.Matchers.any ( org.ovirt.engine.ui.frontend.communication.EngineSessionRefreshedEvent.class ) ) ; org.junit.Assert.assertEquals ( "Operations must match" , testOperation , testManager.pollOperation ( ) ) ; }
public void validateFailsForDifferentStorageDevice ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice ( "sda" , null ) ; org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice ( "sdb" , null ) ; storageDevice2.setDevType ( "SDA" ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays.asList ( storageDevice1 , storageDevice2 ) ) , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void onBrowserEvent ( com.google.gwt.cell.client.Cell.Context context , final com.google.gwt.dom.client.Element elem , T object , com.google.gwt.dom.client.NativeEvent event ) { super . onBrowserEvent ( context , elem , object , event ) ; if ( BrowserEvents.MOUSEOVER.equals ( event.getType ( ) ) ) { com.google.gwt.safehtml.shared.SafeHtml tooltipHtml = getTooltip ( object ) ; if ( ( tooltipHtml != null ) && ( ! ( tooltipHtml.asString ( ) . isEmpty ( ) ) ) ) { tooltipPanel.setText ( getTooltip ( object ) ) ; } } tooltipPanel.handleNativeBrowserEvent ( elem , event ) ; }
public void onSuccess ( java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel externalDiscoveredHostsListModel = getExternalDiscoveredHosts ( ) ; externalDiscoveredHostsListModel.setItems ( hosts ) ; externalDiscoveredHostsListModel.setIsChangeable ( true ) ; }
private void movePoolToProblematicInDB ( org.ovirt.engine.core.common.businessentities.storage_pool storagePool ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . storagePoolStatusChange ( storagePool.getId ( ) , StoragePoolStatus.Problematic , AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC , VdcBllErrors.ENGINE ) ; storagePool.setspm_vds_id ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . update ( storagePool ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( ( p.getUsageCpuPercent ( ) ) + ( calcSpmCpuConsumption ( p ) ) ) < lowUtilization ) && ( ( p.getVmCount ( ) ) >= minVmCount ) ) && ( ( ( p.getCpuOverCommitTimestamp ( ) ) == null ) || ( ( ( getTime ( ) . getTime ( ) ) - ( p.getCpuOverCommitTimestamp ( ) . getTime ( ) ) ) >= ( java.util.concurrent.TimeUnit.MINUTES.toMillis ( cpuOverCommitDurationMinutes ) ) ) ) ; }
public void testNonExistingQuota ( ) { org.ovirt.engine.core.compat.Guid quotaId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; cmd.getParameters ( ) . getVm ( ) . setQuotaId ( quotaId ) ; org.junit.Assert.assertFalse ( cmd.validateQuota ( quotaId ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages ( "" , cmd , EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; }
public void init ( ) { broker = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapFactory.getInstance ( getName ( ) ) ; context.put ( ExtensionProperties.AUTHOR , "The oVirt Project" ) ; context.put ( ExtensionProperties.EXTENSION_NAME , "Internal Kerberos/LDAP authorization (Built-in)" ) ; context.put ( ExtensionProperties.LICENSE , "ASL 2.0" ) ; context.put ( ExtensionProperties.HOME , "http://www.ovirt.org" ) ; context.put ( ExtensionProperties.VERSION , "N/A" ) ; }
public void testNonExistingQuota ( ) { prepareVmToPassValidate ( ) ; vmStatic.setQuotaId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertFalse ( command.validateQuota ( vmStatic.getQuotaId ( ) ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages ( "" , command , EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; }
private void mockStorageDomainDao ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomains.setstatus ( StorageDomainStatus.Active ) ; storageDomains.setavailable_disk_size ( 10000000 ) ; storageDomains.setused_disk_size ( 10 ) ; org.mockito.Mockito.doReturn ( storageDomainDAO ) . when ( spyCommand ) . getStorageDomainDAO ( ) ; org.mockito.Mockito.when ( storageDomainDAO.getForStoragePool ( storageDomainId , Guid.Empty ) ) . thenReturn ( storageDomains ) ; org.mockito.Mockito.when ( storageDomainDAO.get ( storageDomainId ) ) . thenReturn ( storageDomains ) ; }
private void setSelectedVncImpl ( ) { java.lang.Object defConsoleModel = model.getModel ( ) . getDefaultConsoleModel ( ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel vncConsoleModel = ( defConsoleModel instanceof org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel ) ? ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel ) ( defConsoleModel ) ) : null ; if ( vncConsoleModel == null ) { return ; } if ( noVncImplRadioButton.asRadioButton ( ) . getValue ( ) ) { vncConsoleModel.setVncImplementation ( VncConsoleModel.ClientConsoleMode.NoVnc ) ; } else { vncConsoleModel.setVncImplementation ( VncConsoleModel.ClientConsoleMode.Native ) ; } }
private void loadIconsToDatabase ( ) { final java.util.Map < java.lang.Integer , java.lang.String > osIdToOsNameMap = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . getUniqueOsNames ( ) ; for ( java.util.Map.Entry < java.lang.Integer , java.lang.String > entry : osIdToOsNameMap.entrySet ( ) ) { final org.ovirt.engine.core.common.queries.VmIconIdSizePair iconIdPair = ensureIconsInDatabase ( entry.getValue ( ) ) ; if ( iconIdPair != null ) { osIdToIconIdMap.put ( entry.getKey ( ) , iconIdPair ) ; } } }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; }
public void validateFailsForNoStorageDevice ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections.emptyList ( ) ) ) . when ( cmd ) . getParameters ( ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult isOsSupportedForVirtIoScsi ( org.ovirt.engine.core.common.businessentities.VM vm ) { final java.util.List < java.lang.String > unsupportedOSs = org.ovirt.engine.core.common.config.Config.< java.util.List < java.lang.String > > getValue ( ConfigValues.VirtIoScsiUnsupportedOsList ) ; java.lang.String vmOs = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . getUniqueOsNames ( ) . get ( vm.getVmOsId ( ) ) ; for ( java.lang.String os : unsupportedOSs ) { if ( os.equalsIgnoreCase ( vmOs ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private void mockVmDevice ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { org.mockito.Mockito.when ( vmDeviceDao.getVmDeviceByVmIdAndType ( vm.getId ( ) , vmDevice.getType ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( vmDevice ) ) ; }
protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > bootModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getIsBootable ( ) ; return ( bootModel.getIsChangable ( ) ) || ( bootModel.getEntity ( ) ) ; }
public void vmNameNullVm ( ) { b.setVmName ( null ) ; final org.ovirt.engine.core.common.businessentities.VM v = new org.ovirt.engine.core.common.businessentities.VM ( ) ; v.setName ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; b.setVm ( v ) ; final java.lang.String n = b.getVmName ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME , n ) ; }
protected < B extends org.ovirt.engine.api.model.BaseResource > void removeIfExist ( B model , java.lang.String relation ) { java.util.List < org.ovirt.engine.api.model.Link > linksCopy = new java.util.ArrayList ( model.getLinks ( ) ) ; for ( org.ovirt.engine.api.model.Link link : model.getLinks ( ) ) { if ( link.getRel ( ) . equals ( relation ) ) { linksCopy.remove ( link ) ; break ; } } model.getLinks ( ) . retainAll ( linksCopy ) ; }
public void setValue ( T value ) { if ( value != null ) { super . setValue ( value , true ) ; } }
public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown ( ) { initStorageDomain ( srcStorageId ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) . when ( diskValidator ) . isDiskPluggedToAnyNonDownVm ( org.mockito.ArgumentMatchers.anyBoolean ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; }
public void testInstall ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVds , org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters.class , new java.lang.String [ ] { "RootPassword" } , new java.lang.Object [ ] { NAMES [ 2 ] } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action ( ) ; action.setRootPassword ( NAMES [ 2 ] ) ; verifyActionResponse ( resource.install ( action ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > storagePools = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = ( ( storagePools.size ( ) ) > 0 ) ? storagePools.get ( 0 ) : null ; vmListModel.postGetTemplatesNotPresentOnExportDomain ( storagePool ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { if ( "STATUS" . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.ImageStatus.class ) ; } else if ( "DISK_TYPE" . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.class ) ; } return null ; }
protected void onExportChanged ( ) { if ( getExport ( ) . getEntity ( ) ) { getHasVLanTag ( ) . setIsChangable ( false ) ; getVLanTag ( ) . setIsChangable ( false ) ; getIsVmNetwork ( ) . setIsChangable ( false ) ; getNetworkLabel ( ) . setIsChangable ( false ) ; } super . onExportChanged ( ) ; }
public void testGetCascadingResource_missingResourcesProperty ( ) throws java.net.URISyntaxException { java.io.File testThemeRootPath = new java.io.File ( this . getClass ( ) . getClassLoader ( ) . getResource ( "./org/ovirt/engine/core/branding" ) . toURI ( ) . getPath ( ) ) ; java.io.File testThemePath = new java.io.File ( testThemeRootPath.getAbsoluteFile ( ) , "05-test5.brand" ) ; org.ovirt.engine.core.branding.BrandingTheme theme5 = new org.ovirt.engine.core.branding.BrandingTheme ( testThemePath.getAbsolutePath ( ) , testThemeRootPath , 2 ) ; org.junit.Assert.assertTrue ( "Theme 5 should load" , theme5.load ( ) ) ; org.junit.Assert.assertNull ( "getCascadingResource not handling missing resources key gracefully" , theme5.getCascadingResource ( "this_file_is_missing_anyway" ) ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ParseLUNList ( java.util.Map < java.lang.String , java.lang.Object > [ ] lunList ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > result = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( lunList.length ) ; for ( java.util.Map < java.lang.String , java.lang.Object > xlun : lunList ) { result.add ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.ParseLunFromXmlRpc ( xlun ) ) ; } return result ; }
protected void executeCommand ( ) { int missingDiskCount = getMissingDiskCount ( ) ; if ( missingDiskCount <= 0 ) { setOvfUpdateStep ( OvfUpdateStep.OVF_UPLOAD ) ; org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded ( updateOvfStoreContent ( ) ) ; } else { setOvfUpdateStep ( OvfUpdateStep.OVF_STORES_CREATION ) ; org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded ( createOvfStoreDisks ( getMissingDiskCount ( ) ) ) ; } }
public void onSuccess ( java.util.List < java.lang.String > domains ) { getSysprepDomain ( ) . setItems ( domains ) ; if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( currentDomain ) ) ) { if ( ! ( domains.contains ( currentDomain ) ) ) { domains.add ( currentDomain ) ; } getSysprepDomain ( ) . setSelectedItem ( currentDomain ) ; } }
protected boolean performImagesChecks ( ) { return org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm ( ) , org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getReturnValue ( ) . getCanDoActionMessages ( ) , org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm ( ) . getStoragePoolId ( ) , Guid.Empty , true , true , false , false , true , true , getImagesList ( ) ) ; }
public static void fillImagesMapBasedOnTemplate ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > diskInfoDestinationMap , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > destStorages , boolean notCheckSize ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getAllForStoragePool ( template.getStoragePoolId ( ) . getValue ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.fillImagesMapBasedOnTemplate ( template , domains , diskInfoDestinationMap , destStorages , notCheckSize ) ; }
private void spice_Disconnected ( java.lang.Object sender , org.ovirt.engine.ui.uicommonweb.models.vms.ErrorCodeEventArgs e ) { getspice ( ) . getDisconnectedEvent ( ) . removeListener ( this ) ; setIsConnected ( false ) ; if ( ( e.getErrorCode ( ) ) > 100 ) { getErrorEvent ( ) . raise ( this , e ) ; } }
protected void onReset ( ) { super . onReset ( ) ; if ( ! ( hasReportsModelRefreshEvent ( ) ) ) { getModel ( ) . getReportsAvailabilityEvent ( ) . addListener ( new org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.ReportsModelRefreshEvent ( ) ) ; } setSubTabPanelVisible ( false ) ; getModel ( ) . refreshReportModel ( ) ; }
public void getCustomValuesLeaksInternalStructure ( ) { final java.lang.String key = "foo" ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; b.addCustomValue ( key , value ) ; final java.lang.String v = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( value , v ) ; final java.util.Map < java.lang.String , java.lang.String > m = b.getCustomValues ( ) ; m.clear ( ) ; final java.lang.String s = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( "" , s ) ; }
protected void addExternallyManagedVm ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction ( VdcActionType.AddVmFromScratch , new org.ovirt.engine.core.common.action.AddVmParameters ( vmStatic ) , createAddExternalVmContext ( vmStatic ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { log.debug ( "Failed adding Externally managed VM '{}'" , vmStatic.getName ( ) ) ; } }
protected void build ( org.ovirt.engine.core.common.businessentities.VmBase vm , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { model.getSerialNumberPolicy ( ) . setSelectedSerialNumberPolicy ( vm.getSerialNumberPolicy ( ) ) ; model.getSerialNumberPolicy ( ) . getCustomSerialNumber ( ) . setEntity ( vm.getCustomSerialNumber ( ) ) ; }
private void hostName_SelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.VDS host = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( getExternalHostName ( ) . getSelectedItem ( ) ) ) ; if ( host == null ) { host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } updateModelFromVds ( host , null , false , null ) ; }
private void prepare2 ( ) { org.ovirt.engine.ui.uicompat.PreparingEnlistment enlistment = ( ( org.ovirt.engine.ui.uicompat.PreparingEnlistment ) ( context.enlistment ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = context.activateVdsReturnValue ; if ( ( returnValue == null ) || ( ! ( returnValue.getSucceeded ( ) ) ) ) { context.enlistment = null ; enlistment.ForceRollback ( ) ; } else { prepare3 ( ) ; } }
private void rollback5 ( ) { org.ovirt.engine.ui.uicompat.Enlistment enlistment = context.enlistment ; org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext ) ( enlistment.getContext ( ) ) ) ; if ( ( enlistmentContext.getDataCenterId ( ) ) != null ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RemoveStoragePool , new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( enlistmentContext.getDataCenterId ( ) ) ) ; } context.enlistment = null ; enlistment.Done ( ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice ( ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.Empty , vm.getId ( ) ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , "device" , "address" , new java.util.HashMap < > ( ) , true , true , true , "alias" , new java.util.HashMap < > ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) , "logical" ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmNetworkStatisticsDao ( ) ; newVmStatistics = new org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics ( ) ; newVmStatistics.setId ( org.ovirt.engine.core.dao.network.VmNetworkStatisticsDaoTest.NEW_INTERFACE_ID ) ; newVmStatistics.setVmId ( org.ovirt.engine.core.dao.network.VmNetworkStatisticsDaoTest.VM_ID ) ; newVmStatistics.setStatus ( InterfaceStatus.DOWN ) ; newVmStatistics.setReceiveDropRate ( 0.0 ) ; newVmStatistics.setReceiveRate ( 0.0 ) ; newVmStatistics.setTransmitDropRate ( 0.0 ) ; newVmStatistics.setTransmitRate ( 0.0 ) ; }
public void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
public void setUp ( ) throws java.io.IOException { storagePoolId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; clusterId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . getCluster ( ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( cmd ) . getImages ( ) ; mockCluster ( ) ; setXmlOvfData ( ) ; }
protected boolean isAllVmsDown ( java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > vmsMap ) { if ( ( vmsMap.get ( java.lang.Boolean.TRUE ) ) != null ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : vmsMap.get ( java.lang.Boolean.TRUE ) ) { if ( ( vm.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) { return false ; } } } return true ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( getSnapshot ( ) ) ; getSnapshotDao ( ) . updateStatus ( sourceSnapshotId , SnapshotStatus.LOCKED ) ; lockVmWithCompensationIfNeeded ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public void testListCrashClientLocale ( ) throws java.lang.Exception { collection.setUriInfo ( setUpUriExpectations ( null ) ) ; locales.add ( org.ovirt.engine.api.restapi.resource.gluster.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.defaultQuery , t ) ; collection.setParent ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.parentMock ) ; try { getCollection ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.gluster.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
public void labelBeingAttachedToValidBondExistingBondValid ( ) { org.ovirt.engine.core.common.businessentities.network.Bond bond = new org.ovirt.engine.core.common.businessentities.network.Bond ( "bond" ) ; bond.setSlaves ( java.util.Arrays.asList ( "slave1" , "slave2" ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = new java.util.ArrayList ( java.util.Arrays.asList ( bond ) ) ; org.ovirt.engine.core.common.businessentities.network.NicLabel nicLabel = new org.ovirt.engine.core.common.businessentities.network.NicLabel ( bond.getId ( ) , bond.getName ( ) , "lbl1" ) ; org.junit.Assert.assertThat ( createNicLabelValidator ( nics ) . labelBeingAttachedToValidBond ( nicLabel ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void copyVmDevices ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices ( vmDevicesSourceId , org.ovirt.engine.core.bll.AddVmCommand.getVmId ( ) , getSrcDeviceIdToTargetDeviceIdMapping ( ) , isSoundDeviceEnabled ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isConsoleEnabled ( ) , isVirtioScsiEnabled ( ) , isBalloonEnabled ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getGraphicsDevices ( ) . keySet ( ) , false ) ; if ( ( org.ovirt.engine.core.bll.AddVmCommand.getInstanceTypeId ( ) ) != null ) { copyDiskDevicesFromTemplate ( ) ; } }
private static void addBondDeviceToHost ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.Object [ ] interfaces ) { vds.getInterfaces ( ) . add ( iface ) ; if ( interfaces != null ) { for ( java.lang.Object name : interfaces ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface tempInterface : vds.getInterfaces ( ) ) { if ( tempInterface.getName ( ) . equals ( name.toString ( ) ) ) { tempInterface.setBondName ( iface.getName ( ) ) ; break ; } } } } }
public void testInitCanBeCalledTwice ( ) throws java.lang.Exception { pool.initialize ( ) ; org.mockito.Mockito.verify ( macPoolDao ) . getAll ( ) ; pool.initialize ( ) ; org.mockito.Mockito.verifyNoMoreInteractions ( storagePoolDao , vmNicDao , macPoolDao ) ; }
public void testCredentialsWithConnectionExtensionDifferentHostSameTarget ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest.createConnectionWithCredentials ( "target1" ) ; org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest.createConnectionExtension ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > credentials = helper.getStorageConnectionCredentialsForhost ( connExt.getHostId ( ) , conn ) ; org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelperTest.assertCredentials ( credentials , conn.getUserName ( ) , conn.getPassword ( ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( ( ! ( vds.getId ( ) . equals ( _vds.getId ( ) ) ) ) && ( vds.getStoragePoolId ( ) . equals ( _vds.getStoragePoolId ( ) ) ) ) && ( ( vds.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ; }
private void testValidSql ( java.lang.String dynamicQuery , java.lang.String exepctedSQLResult ) { org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( 20 ) ; org.ovirt.engine.core.searchbackend.ISyntaxChecker curSyntaxChecker = org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.createBackendSyntaxChecker ( "foo" ) ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = curSyntaxChecker.analyzeSyntaxState ( dynamicQuery , true ) ; org.junit.Assert.assertTrue ( ( "Invalid syntax: " + dynamicQuery ) , res.getvalid ( ) ) ; java.lang.String query = chkr.generateQueryFromSyntaxContainer ( res , true ) ; java.lang.System.out.println ( exepctedSQLResult ) ; java.lang.System.out.println ( query ) ; org.junit.Assert.assertEquals ( exepctedSQLResult , query ) ; }
protected void executeQueryCommand ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > allDcNetworks = getNetworkDao ( ) . getAllForDataCenter ( org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getParameters ( ) . getId ( ) ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > managementNetworkCandidates = allDcNetworks.stream ( ) . filter ( getManagementNetworkCandidatePredicate ( ) ) . collect ( java.util.stream.Collectors.toList ( ) ) ; org.ovirt.engine.core.bll.network.dc.GetManagementNetworkCandidatesQuery.getQueryReturnValue ( ) . setReturnValue ( managementNetworkCandidates ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel providersListModel = getProviders ( ) ; providersListModel.setItems ( providers ) ; providersListModel.setIsChangable ( true ) ; }
public java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > findUsers ( java.util.List < org.ovirt.engine.core.common.utils.ExternalId > ids ) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction ( AdActionType.GetAdUserByUserIdList , new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByUserIdListParameters ( getName ( ) , ids , false ) ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > ldapUsers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > ) ( ldapResult.getReturnValue ( ) ) ) ; return mapUsers ( ldapUsers ) ; }
private void updateDisksAfterVmRemoved ( ) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) . getDiskMap ( ) . values ( ) , true , false ) ; if ( ! ( diskImages.isEmpty ( ) ) ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImages ) { disksLeftInVm.add ( diskImage.getDiskAlias ( ) ) ; } AddCustomValue ( "DisksNames" , org.apache.commons.lang.StringUtils.join ( disksLeftInVm , "," ) ) ; } }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { deactivate ( ) ; getModel ( ) . getMemoryBalloonDeviceEnabled ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue.getReturnValue ( ) ) ) ) ; activate ( ) ; if ( continueWithNext ) { updateRngDevice ( vmBase ) ; } }
private java.util.List < org.ovirt.engine.core.compat.Guid > getVdsBlackList ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > blackList = new java.util.ArrayList ( org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList ( ) ) ; if ( ( org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId ( ) ) != null ) { blackList.add ( org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId ( ) ) ; } return blackList ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > convert ( java.lang.Object source ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > list = new java.util.ArrayList < > ( ) ; if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ) { if ( ( template.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK ) ) { list.add ( template ) ; } } java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; } return list ; }
public static java.util.Collection < org.apache.commons.lang.math.LongRange > clipMultiCastsFromRanges ( java.util.Collection < org.apache.commons.lang.math.LongRange > ranges ) { final java.util.Collection < org.apache.commons.lang.math.LongRange > result = new java.util.ArrayList < > ( ) ; for ( org.apache.commons.lang.math.LongRange range : ranges ) { final org.apache.commons.lang.math.LongRange clippedRange = org.ovirt.engine.core.utils.MacAddressRangeUtils.clipRange ( range ) ; if ( clippedRange != null ) { result.add ( clippedRange ) ; } } return result ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > createNics ( java.lang.String bondName , int count ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ifaces = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( count ) ; for ( int i = 0 ; i < count ; i ++ ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( ( "eth" + i ) , null ) ; if ( bondName != null ) { nic = enslaveOrReleaseNIC ( nic , bondName ) ; } ifaces.add ( nic ) ; } return ifaces ; }
public static synchronized java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > GetWindowsOsTypes ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ) != null ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmOsType type : org.ovirt.engine.core.common.businessentities.VmOsType.values ( ) ) { if ( type.isWindows ( ) ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes.add ( type ) ; } } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; }
private void initImportSources ( ) { importSources.setItems ( java.util.Arrays.asList ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.values ( ) ) ) ; importSources.getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { validateSource ( ) ; clearVms ( ) ; clearValidations ( ) ; loadProviders ( ) ; } } ) ; importSources.setSelectedItem ( ImportSource.EXPORT_DOMAIN ) ; }
private void reportNonOperationReason ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.lang.String compatibleVersions , java.lang.String vdsSupportedVersions ) { java.util.Map < java.lang.String , java.lang.String > customLogValues = new java.util.HashMap < > ( ) ; customLogValues.put ( "CompatibilityVersion" , compatibleVersions ) ; customLogValues.put ( "VdsSupportedVersions" , vdsSupportedVersions ) ; org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( org.ovirt.engine.core.bll.HandleVdsVersionCommand.getVdsId ( ) , reason , customLogValues ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; }
private void buildEntryStrings ( java.util.Map < java.lang.String , java.lang.String > locks , java.lang.StringBuilder message ) { if ( locks != null ) { for ( java.util.Map.Entry < java.lang.String , java.lang.String > entry : locks.entrySet ( ) ) { message.append ( "key: " ) . append ( entry.getKey ( ) ) . append ( " value: " ) . append ( entry.getValue ( ) ) . append ( '\n' ) ; } } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVdsStatisticsDao ( ) ; staticDao = dbFacade.getVdsStaticDao ( ) ; dynamicDao = dbFacade.getVdsDynamicDao ( ) ; existingVds = staticDao.get ( FixturesTool.VDS_GLUSTER_SERVER2 ) ; newStaticVds = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; newStaticVds.sethost_name ( "farkle.redhat.com" ) ; newStaticVds.setvds_group_id ( existingVds.getvds_group_id ( ) ) ; newStatistics = new org.ovirt.engine.core.common.businessentities.VdsStatistics ( ) ; }
private void doDataCenterSearch ( ) { final org.ovirt.engine.ui.frontend.AsyncQuery dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; dcQuery.setModel ( this ) ; dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel ) ( model ) ) ; systemTreeModel.setDataCenters ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; doNetworksSearch ( ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDataCenterList ( dcQuery ) ; }
public java.lang.String buildMetadataDictionaryForVm ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > metaDictionary , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > allVmImages ) { java.lang.String vmMeta = generateVmMetadata ( vm , allVmImages ) ; metaDictionary.put ( vm.getId ( ) , new org.ovirt.engine.core.compat.KeyValuePairCompat ( vmMeta , vm.getDiskMap ( ) . values ( ) . stream ( ) . map ( BaseDisk :: getId ) . collect ( java.util.stream.Collectors.toList ( ) ) ) ) ; return vmMeta ; }
protected void executeCommand ( ) { getQuotaDAO ( ) . remove ( getParameters ( ) . getQuotaId ( ) ) ; org.ovirt.engine.core.bll.quota.QuotaManager.getInstance ( ) . removeQuotaFromCache ( getQuota ( ) . getStoragePoolId ( ) , getParameters ( ) . getQuotaId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
public void onResponseReceived ( com.google.gwt.http.client.Request request , com.google.gwt.http.client.Response response ) { try { if ( org.ovirt.engine.ui.uicompat.ReportParser.getInstance ( ) . parseReport ( response.getText ( ) ) ) { resourceMap = org.ovirt.engine.ui.uicompat.ReportParser.getInstance ( ) . getResourceMap ( ) ; dashboardMap = org.ovirt.engine.ui.uicompat.ReportParser.getInstance ( ) . getDashboardMap ( ) ; isCommunityEdition = org.ovirt.engine.ui.uicompat.ReportParser.getInstance ( ) . isCommunityEdition ( ) ; } } catch ( com.google.gwt.xml.client.impl.DOMParseException e ) { } finally { setXmlInitialized ( ) ; } }
private void mockGetImageDomainsListVdsCommand ( ) { java.util.ArrayList < org.ovirt.engine.core.compat.Guid > guids = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( 1 ) ; guids.add ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setReturnValue ( guids ) ; org.mockito.Mockito.when ( vdsBrokerFrontend.RunVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.GetImageDomainsList ) , org.mockito.Matchers.< org.ovirt.engine.core.common.vdscommands.VDSParametersBase > any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ) . thenReturn ( returnValue ) ; }
public org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions getMigrateOnErrorOption ( ) { if ( getMigrateOnErrorOption_NO ( ) . getEntity ( ) ) { return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.NO ; } else if ( getMigrateOnErrorOption_YES ( ) . getEntity ( ) ) { return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.YES ; } else if ( getMigrateOnErrorOption_HA_ONLY ( ) . getEntity ( ) ) { return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.HA_ONLY ; } return org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.YES ; }
protected org.ovirt.engine.core.common.businessentities.DiskImage cretaeVirtIODisk ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk.setImageId ( diskImageGuid ) ; disk.setDiskInterface ( DiskInterface.VirtIO ) ; disk.setPlugged ( false ) ; disk.setactive ( true ) ; disk.setId ( diskImageGuid ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( disk ) ; return disk ; }
private void initSrcStorageDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain stDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; stDomain.setStatus ( StorageDomainStatus.Active ) ; org.mockito.Mockito.when ( storageDomainDao.getForStoragePool ( org.mockito.Matchers.any ( ) , org.mockito.Matchers.any ( ) ) ) . thenReturn ( stDomain ) ; }
public void setHtml ( com.google.gwt.safehtml.shared.SafeHtml html ) { if ( html == null ) { return ; } if ( ( ( tooltip ) == null ) || ( ! ( tooltip.asString ( ) . equals ( html.asString ( ) ) ) ) ) { tooltip = html ; scheduleTooltipUpdate ( ) ; } }
public org.ovirt.engine.core.common.businessentities.VmNumaNode mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmNumaNode entity = org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeRowMapper.mapRow ( rs , rowNum ) ; entity.setCpuIds ( new java.util.ArrayList < java.lang.Integer > ( java.util.Arrays.asList ( ( ( java.lang.Integer [ ] ) ( rs.getArray ( "cpu_core_ids" ) . getArray ( ) ) ) ) ) ) ; return entity ; }
private void initializeCommand ( ) { initializeCommand ( createParameters ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.VDS.class ) , null , index ) ; return vds ; }
public int compare ( org.ovirt.engine.core.common.businessentities.storage.Disk x , org.ovirt.engine.core.common.businessentities.storage.Disk y ) { java.lang.String xAlias = x.getDiskAlias ( ) ; java.lang.String yAlias = y.getDiskAlias ( ) ; return xAlias.compareTo ( yAlias ) ; }
public java.lang.String getSessionIdBySeqId ( long sessionSequenceId ) { java.lang.String sessionId = null ; for ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo : sessionInfoMap.values ( ) ) { if ( sessionInfo.contentOfSession.get ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID ) . equals ( sessionSequenceId ) ) { sessionId = ( ( java.lang.String ) ( sessionInfo.contentOfSession.get ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_ID ) ) ) ; break ; } } return sessionId ; }
private boolean isOptionEnabledOnVolume ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , org.ovirt.engine.core.common.utils.ListUtils.PredicateFilter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > predicate ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity > filteredOptions = new java.util.ArrayList ( volume.getOptions ( ) ) ; filteredOptions = org.ovirt.engine.core.common.utils.ListUtils.filter ( filteredOptions , predicate ) ; return ! ( filteredOptions.isEmpty ( ) ) ; }
public void updateConnectionNoDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data2" , StorageType.NFS , NfsVersion.V4 , 300 , 0 ) ; parameters.setStorageServerConnection ( newNFSConnection ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.when ( storageConnDao.get ( newNFSConnection.getId ( ) ) ) . thenReturn ( oldNFSConnection ) ; org.mockito.Mockito.doReturn ( domains ) . when ( command ) . getStorageDomainsByConnId ( newNFSConnection.getId ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( command ) ; }
private void addSourceStorageDomainName ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel disk , java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > sourceStorageDomains ) { java.lang.String sourceStorageName = ( sourceStorageDomains.isEmpty ( ) ) ? constants.notAvailableLabel ( ) : sourceStorageDomains.get ( 0 ) . getStorageName ( ) ; disk.getSourceStorageDomainName ( ) . setEntity ( sourceStorageName ) ; }
public boolean equals ( java.lang.Object obj ) { boolean returnValue = super . equals ( obj ) ; if ( ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ) { returnValue = ( ( ( getId ( ) ) != null ) && ( ! ( getId ( ) . isEmpty ( ) ) ) ) && ( getId ( ) . equals ( ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( obj ) ) . getId ( ) ) ) ; } return returnValue ; }
private void retrieveMaxSpmPriority ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getMaxSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmMaxPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; retrieveDefaultSpmPriority ( ) ; } } ) ) ; }
private void listenToDetachableFields ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.Model > models ) { for ( org.ovirt.engine.ui.uicommonweb.models.Model model : models ) { if ( model instanceof org.ovirt.engine.ui.uicommonweb.models.ListModel ) { ( ( org.ovirt.engine.ui.uicommonweb.models.ListModel < ? > ) ( model ) ) . getSelectedItemChangedEvent ( ) . addListener ( this ) ; } else if ( model instanceof org.ovirt.engine.ui.uicommonweb.models.EntityModel ) { ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < ? > ) ( model ) ) . getEntityChangedEvent ( ) . addListener ( this ) ; } } }
public void initUserAndGroupData ( ) { if ( ( _dbUser ) == null ) { _dbUser = org.ovirt.engine.core.bll.PermissionsCommandBase.getDbUserDAO ( ) . get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getad_element_id ( ) ) ; } if ( ( _adGroup ) == null ) { org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = org.ovirt.engine.core.bll.PermissionsCommandBase.getAdGroupDAO ( ) . get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getad_element_id ( ) ) ; if ( dbGroup != null ) { _adGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup ( dbGroup ) ; } } }
private static java.lang.Object instantiate ( java.lang.Class < ? > clz ) throws java.lang.Exception { java.lang.Object model = null ; model = clz.newInstance ( ) ; return model ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.Collection < org.ovirt.engine.core.common.businessentities.VmWatchdog > watchdogs = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs ) { model.getWatchdogAction ( ) . setSelectedItem ( watchdog.getAction ( ) ) ; model.getWatchdogModel ( ) . setSelectedItem ( watchdog.getModel ( ) ) ; } }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > asyncTasks , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncStatuses ) { java.lang.String uri = ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.URL_BASE ) + "/action" ; return setUpActionExpectations ( task , clz , names , values , true , true , null , asyncTasks , asyncStatuses , null , null , uri , true ) ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > asyncTasks , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > asyncStatuses ) { java.lang.String uri = ( "templates/" + ( GUIDS [ 0 ] ) ) + "/action" ; return setUpActionExpectations ( task , clz , names , values , true , true , null , asyncTasks , asyncStatuses , null , null , uri , true ) ; }
public void executeSave ( ) { org.ovirt.engine.core.common.action.QosParametersBase < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > parameters = new org.ovirt.engine.core.common.action.QosParametersBase ( ) ; parameters.setQos ( networkQoS ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.UpdateNetworkQoS , parameters , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1 ) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue ( ) ; boolean succeeded = false ; if ( ( retVal != null ) && ( retVal.getSucceeded ( ) ) ) { succeeded = true ; } postSaveAction ( succeeded ) ; } } ) ; }
private boolean initVirtResources ( ) { if ( InitializeStorage ( ) ) { processFence ( ) ; processStoragePoolStatus ( ) ; } else { java.util.Map < java.lang.String , java.lang.String > customLogValues = java.util.Collections.singletonMap ( "StoragePoolName" , getStoragePoolName ( ) ) ; setNonOperational ( NonOperationalReason.STORAGE_DOMAIN_UNREACHABLE , customLogValues ) ; return false ; } return true ; }
private void DataCenter_SelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.DataCenter_SelectedItemChanged ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) ; if ( dataCenter != null ) { getDisksAllocationModel ( ) . setQuotaEnforcementType ( dataCenter.getQuotaEnforcementType ( ) ) ; } }
public static java.lang.String getPassFromFile ( java.lang.String passFile ) throws java.io.IOException { java.io.FileReader input = new java.io.FileReader ( passFile ) ; java.io.BufferedReader br = new java.io.BufferedReader ( input ) ; java.lang.String pass = br.readLine ( ) ; try { input.close ( ) ; br.close ( ) ; } catch ( java.lang.Exception e ) { } return pass ; }
public < T > T getEntity ( java.lang.Class < T > clz , org.ovirt.engine.core.common.queries.VdcQueryType query , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams , java.lang.String identifier , boolean notFoundAs404 , boolean isMandatory ) { try { return doGetEntity ( clz , query , queryParams , identifier , isMandatory ) ; } catch ( java.lang.Exception e ) { return handleError ( clz , e , notFoundAs404 ) ; } }
public static void getAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
public void canAddCloneVmFromSnapshotNoConfiguration ( ) { initializeMock ( ) ; cmd.getVm ( ) . setName ( "vm1" ) ; mockUninterestingMethods ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotDuringSnapshot ( org.mockito.Matchers.any ( ) ) ; org.mockito.Mockito.when ( snapshotDao.get ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommandTest.SOURCE_SNAPSHOT_ID ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.Snapshot ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION ) ; }
public void validateFailsDiffInterface ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeId1 , getBricks ( volumeId1 , 2 ) , 0 , 4 , false ) ) ; prepareMocks ( cmd ) ; prepareInterfaceMocks ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = ( ( java.lang.String ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL ; } org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ( ( org.ovirt.engine.ui.uicommonweb.models.LoginModel ) ( model ) ) ; loginModel.getLoggedInEvent ( ) . raise ( loginModel , EventArgs.Empty ) ; }
private void initIntervals ( ) { java.util.List < java.lang.String > intervals = new java.util.ArrayList < > ( ) ; int mins = 0 ; for ( int nThMin = 1 ; mins < 55 ; nThMin ++ ) { mins = nThMin * 5 ; intervals.add ( java.lang.String.valueOf ( mins ) ) ; } getInterval ( ) . setItems ( intervals ) ; }
public void executeCommandWhenFailed ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertFalse ( cmd.getReturnValue ( ) . getSucceeded ( ) ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_HOOK_DISABLE_FAILED , cmd.getAuditLogTypeValue ( ) ) ; }
public void addQuotaPermissionSubject ( java.util.List < org.ovirt.engine.core.common.PermissionSubject > quotaPermissionList ) { if ( ( ( ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getStoragePool ( ) ) != null ) && ( ( getQuotaId ( ) ) != null ) ) && ( ! ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getStoragePool ( ) . getQuotaEnforcementType ( ) . equals ( QuotaEnforcementTypeEnum.DISABLED ) ) ) ) { quotaPermissionList.add ( new org.ovirt.engine.core.common.PermissionSubject ( getQuotaId ( ) , org.ovirt.engine.core.common.VdcObjectType.Quota , org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA ) ) ; } }
private void mockVdsDao ( org.ovirt.engine.core.common.businessentities.VDSStatus vdsStatus , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > listVds ) { org.mockito.Mockito.when ( vdsDaoMock.getAllForStoragePoolAndStatus ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.Matchers.eq ( vdsStatus ) ) ) . thenReturn ( listVds ) ; }
public void validateFailsWithClusterDoesNotSupportGluster ( ) { org.mockito.Mockito.doReturn ( getCluster ( false ) ) . when ( clusterDao ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER ) ; }
public void init ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { super . init ( model ) ; model.getDataCenterWithClustersList ( ) . getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( model.getSelectedCluster ( ) ) != null ) { setSpiceProxyOverrideExplanation ( model.getSelectedCluster ( ) ) ; } } } ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { if ( ( _managementNetwork ) != null ) { _parser.cliEnvironmentSet ( VdsmEnv.MANAGEMENT_BRIDGE_NAME , _managementNetwork ) ; } else if ( _isLegacyNode ) { _parser.cliEnvironmentSet ( VdsmEnv.MANAGEMENT_BRIDGE_NAME , org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork ( ) ) ; } else { _parser.cliNoop ( ) ; } return true ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createImage ( ) { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; diskImage.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ) ; return diskImage ; }
public void fillReportedConfigurations ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allInterfacesForHost , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > networkMap , java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > networkNameToNicMap = nicsByNetworkId ( allInterfacesForHost ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : networkAttachments ) { fillReportedConfigurations ( networkNameToNicMap , networkMap , networkAttachment ) ; } }
public static void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) , aQuery ) ; }
static org.ovirt.engine.api.model.Network setUpEntityExpectations ( org.ovirt.engine.api.model.Network entity , boolean isDisplay , boolean isMigration , boolean isRequired , int index ) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( ) ; networkCluster.setDisplay ( isDisplay ) ; networkCluster.setMigration ( isMigration ) ; networkCluster.setRequired ( isRequired ) ; org.mockito.Mockito.when ( entity.getCluster ( ) ) . thenReturn ( networkCluster ) ; return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations ( entity , index ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , true ) ; try { resource.update ( getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
public void testHasPeersTrue ( ) { org.junit.Assert.assertNotNull ( glusterUtil.getPeers ( client ) ) ; org.junit.Assert.assertEquals ( 2 , glusterUtil.getPeers ( client ) . size ( ) ) ; }
private void alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String operation , java.lang.Throwable throwable ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( org.ovirt.engine.core.bll.VdsCommand.getVds ( ) . getId ( ) ) ; java.lang.String op = ( operation == null ) ? org.ovirt.engine.core.bll.VdsCommand.getActionType ( ) . name ( ) : operation ; alert.addCustomValue ( "Operation" , op ) ; alert.updateCallStackFromThrowable ( throwable ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.alert ( alert , logType , auditLogDirector ) ; }
public void getRedirectServletReportsPage ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.RedirectServletReportsPage , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
void modelBoundWidgetChange ( ) { org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = getModel ( ) . getLastExecutedCommand ( ) ; org.ovirt.engine.ui.common.presenter.ModelBoundPresenterWidget < ? > modelBoundPresenterWidget = getModelBoundWidget ( lastExecutedCommand ) ; ( ( org.ovirt.engine.ui.common.presenter.ModelBoundPresenterWidget < org.ovirt.engine.ui.uicommonweb.models.Model > ) ( modelBoundPresenterWidget ) ) . init ( getModel ( ) . getWidgetModel ( ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > networkFilters = new java.util.ArrayList ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > ) ( returnValue.getReturnValue ( ) ) ) ) ; networkFilters.add ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.EMPTY_FILTER ) ; getNetworkFilter ( ) . setItems ( networkFilters ) ; initSelectedNetworkFilter ( ) ; }
public void onAcccept ( final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client ) { client.addEventListener ( new org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener ( ) { @ java.lang.Override public void onMessageReceived ( byte [ ] message ) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.MessageHandler handler = new org.ovirt.vdsmfake.rpc.json.JsonRpcServer.MessageHandler ( client , message ) ; service.submit ( handler ) ; } } ) ; }
void addBootOrder ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , java.util.Map < java.lang.String , java.lang.Object > struct ) { java.lang.String s = java.lang.String.valueOf ( vmDevice.getBootOrder ( ) ) ; if ( ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( s ) ) ) && ( ! ( s.equals ( "0" ) ) ) ) { struct.put ( VdsProperties.BootOrder , s ) ; } }
public int compare ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > arg0 , org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > arg1 ) { int compareValue = arg0.getSecond ( ) . getVdsGroupName ( ) . compareTo ( arg1.getSecond ( ) . getVdsGroupName ( ) ) ; if ( compareValue != 0 ) { return compareValue ; } return arg0.getSecond ( ) . getName ( ) . compareTo ( arg1.getSecond ( ) . getName ( ) ) ; }
private static void populateBigDecimal ( java.lang.reflect.Method method , java.lang.Object model ) throws java.lang.Exception { method.invoke ( model , new java.math.BigDecimal ( org.ovirt.engine.api.restapi.types.MappingTestHelper.rand ( 100 ) ) ) ; }
protected boolean validateName ( java.lang.String newVmName , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > entity , org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] validators ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > temp = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; temp.setIsValid ( true ) ; temp.setEntity ( newVmName ) ; temp.validateEntity ( validators ) ; if ( ! ( temp.getIsValid ( ) ) ) { entity.setInvalidityReasons ( temp.getInvalidityReasons ( ) ) ; entity.setIsValid ( false ) ; } return temp.getIsValid ( ) ; }
public void testExecuteQueryCommand ( ) { org.mockito.Mockito.when ( params.getId ( ) ) . thenReturn ( networkId ) ; setupVdsDao ( ) ; setupVdsNetworkInterfaceDao ( ) ; setupNetworkDao ( ) ; org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > vdsInterfaceVdsPair = new org.ovirt.engine.core.common.utils.PairQueryable ( vdsNetworkInterface , vds ) ; java.util.List < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > > expected = java.util.Collections.singletonList ( vdsInterfaceVdsPair ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( "Wrong result returned" , expected , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
private void initialize ( ) { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info ( "Start initializing {}" , getClass ( ) . getSimpleName ( ) ) ; java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.BackupCheckPeriodInHours ) ; if ( backupCheckPeriodInHours > 0 ) { org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . scheduleAFixedDelayJob ( this , "backupCheck" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , backupCheckPeriodInHours , backupCheckPeriodInHours , java.util.concurrent.TimeUnit.HOURS ) ; org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info ( "Finished initializing {}" , getClass ( ) . getSimpleName ( ) ) ; } }
public void testManualFence ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.FenceVdsManualy , org.ovirt.engine.core.common.action.FenceVdsManualyParameters.class , new java.lang.String [ ] { "VdsId" , "StoragePoolId" } , new java.lang.Object [ ] { GUIDS [ 0 ] , GUIDS [ 1 ] } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action ( ) ; action.setFenceType ( FenceType.MANUAL.value ( ) ) ; verifyActionResponse ( resource.fence ( action ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDeviceList , org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.HOST_GUID } , setUpLuns ( ) , failure ) ; }
protected boolean canDoAction ( ) { boolean autheticated = org.ovirt.engine.core.bll.LoginAdminUserCommand.isUserCanBeAuthenticated ( ) ; if ( autheticated ) { autheticated = org.ovirt.engine.core.bll.LoginAdminUserCommand.getCurrentUser ( ) . isAdmin ( ) ; if ( ! autheticated ) { addCanDoActionMessage ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; } } if ( ! autheticated ) { org.ovirt.engine.core.bll.LoginAdminUserCommand.logAutheticationFailure ( ) ; } return autheticated ; }
protected boolean canDoAction ( ) { boolean retVal = true ; java.util.List < java.lang.String > canDoActionMessages = getReturnValue ( ) . getCanDoActionMessages ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > domainsMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; retVal = canDoAction_beforeCloneVm ( domainsMap ) ; if ( retVal && ( getParameters ( ) . isImportAsNewEntity ( ) ) ) { initImportClonedVm ( ) ; } return retVal && ( canDoAction_afterCloneVm ( retVal , canDoActionMessages , domainsMap ) ) ; }
private static java.util.Set < java.lang.String > getHostEmulatedMachines ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( vds.getSupportedEmulatedMachines ( ) ) == null ) { return new java.util.HashSet < > ( ) ; } else { return new java.util.HashSet ( java.util.Arrays.asList ( vds.getSupportedEmulatedMachines ( ) . split ( "," ) ) ) ; } }
private boolean isRemoveCommandAvailable ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > disks ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : disks ) { boolean isImageLocked = ( disk.getimageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageStatus.LOCKED ) ; if ( isImageLocked ) { return false ; } } return true ; }
public void diskImagesExist ( ) { org.mockito.Mockito.doReturn ( true ) . when ( validator ) . isDiskExists ( disk1.getId ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . isDiskExists ( disk2.getId ( ) ) ; org.junit.Assert.assertEquals ( ValidationResult.VALID , validator.diskImagesNotExist ( ) ) ; }
public void copyClientsFrom ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails volumeAdvancedDetails ) { for ( org.ovirt.engine.core.common.businessentities.gluster.BrickDetails newBrickDetails : volumeAdvancedDetails.getBrickDetails ( ) ) { org.ovirt.engine.core.compat.Guid newBrickId = newBrickDetails.getBrickProperties ( ) . getBrickId ( ) ; if ( newBrickId != null ) { for ( org.ovirt.engine.core.common.businessentities.gluster.BrickDetails brickDetails : getBrickDetails ( ) ) { if ( newBrickId.equals ( brickDetails.getBrickProperties ( ) . getBrickId ( ) ) ) { brickDetails.setClients ( newBrickDetails.getClients ( ) ) ; break ; } } } } }
private org.ovirt.engine.core.common.businessentities.ServerCpu getVdsGroupServerCpu ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model , org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup ) { org.ovirt.engine.core.common.businessentities.ServerCpu retVal = null ; for ( org.ovirt.engine.core.common.businessentities.ServerCpu cpu : model.getCPU ( ) . getItems ( ) ) { if ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( cpu.getCpuName ( ) , vdsGroup.getCpuName ( ) ) ) { retVal = cpu ; break ; } } return retVal ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > getClusterByServiceList ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > list , boolean supportsVirtService , boolean supportsGlusterService ) { final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : list ) { if ( ( supportsVirtService && ( cluster.supportsVirtService ( ) ) ) || ( supportsGlusterService && ( cluster.supportsGlusterService ( ) ) ) ) { filteredList.add ( cluster ) ; } } java.util.Collections.sort ( filteredList , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return filteredList ; }
public static void getStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
private boolean isLocalDataCenterEmpty ( org.ovirt.engine.core.common.businessentities.StoragePool dataCenter ) { if ( ( ( dataCenter != null ) && ( ( dataCenter.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) ) && ( ( dataCenter.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized ) ) ) { return true ; } return false ; }
protected void executeCommand ( ) { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getConnection ( ) . getid ( ) ; org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getStorageServerConnectionDao ( ) . remove ( connectionId ) ; log.info ( "Removing connection '{}' from database " , connectionId ) ; if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getParameters ( ) . getVdsId ( ) ) ) { log.info ( "No vdsId passed - hosts will not be disconnected." ) ; } else { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.disconnectStorage ( ) ; } org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.setSucceeded ( true ) ; }
private void setupMock ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getId ( ) ) . thenReturn ( expected.getId ( ) ) ; org.mockito.Mockito.when ( glusterVolumeDaoMock.getById ( expected.getId ( ) ) ) . thenReturn ( expected ) ; }
public void initialize ( ) { super . initialize ( ) ; getStorageDomain ( ) . setIsChangeable ( ( limitToStorageDomainId == null ) ) ; getDataCenter ( ) . setIsChangeable ( ( limitToStorageDomainId == null ) ) ; getStorageType ( ) . setIsChangeable ( false ) ; }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
private < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < org.ovirt.engine.core.compat.Guid > & org.ovirt.engine.core.common.businessentities.Nameable > org.ovirt.engine.core.bll.ValidationResult validateCoherentIdentification ( java.lang.String violatingEntityId , org.ovirt.engine.core.compat.Guid referringId , java.lang.String referringName , org.ovirt.engine.core.common.errors.EngineMessage message , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < T > map ) { boolean bothIdentificationSet = ( referringId != null ) && ( referringName != null ) ; java.lang.String [ ] replacements = createIncoherentIdentificationErrorReplacements ( violatingEntityId , referringId , referringName ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( message , replacements ) . when ( ( bothIdentificationSet && ( isNameAndIdIncoherent ( referringId , referringName , map ) ) ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ManageGlusterSwiftModel innerGlusterSwiftModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ManageGlusterSwiftModel ) ( result.getState ( ) ) ) ; innerGlusterSwiftModel.stopProgress ( ) ; cancel ( ) ; updateGlusterDetails ( ) ; }
public void validateFailsWhenGlusterHostHasVolumes ( ) throws java.lang.Exception { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , false ) , null ) ) ; prepareMocks ( ) ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockVdsDynamic ( ) ; mockVmsPinnedToHost ( java.util.Collections.< java.lang.String > emptyList ( ) ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( actionType ) ; result = ( prime * result ) + ( ( clusterMinimalVersion ) == null ? 0 : clusterMinimalVersion.hashCode ( ) ) ; result = ( prime * result ) + ( ( storagePoolMinimalVersion ) == null ? 0 : storagePoolMinimalVersion.hashCode ( ) ) ; return result ; }
private void mockStoragePoolDao ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { org.ovirt.engine.core.compat.Guid storagePoolId = getQueryParameters ( ) . getStoragePoolId ( ) ; if ( pool != null ) { pool.setId ( storagePoolId ) ; } org.mockito.Mockito.when ( storagePoolDaoMock.get ( storagePoolId , getUser ( ) . getId ( ) , getQueryParameters ( ) . isFiltered ( ) ) ) . thenReturn ( pool ) ; }
protected boolean activateOrDeactivateNic ( org.ovirt.engine.core.common.businessentities.network.VmNic nic , org.ovirt.engine.core.common.action.PlugAction plugAction , boolean newNic ) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters ( nic , plugAction , newNic ) ; parameters.setVmId ( org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getParameters ( ) . getVmId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction ( VdcActionType.ActivateDeactivateVmNic , parameters , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.cloneContextAndDetachFromParent ( ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { propagateFailure ( returnValue ) ; } return returnValue.getSucceeded ( ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VmManagementParametersBase param = new org.ovirt.engine.core.common.action.VmManagementParametersBase ( gettempVm ( ) ) ; param.setSoundDeviceEnabled ( model.getIsSoundcardEnabled ( ) . getEntity ( ) ) ; param.setConsoleEnabled ( model.getIsConsoleDeviceEnabled ( ) . getEntity ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.UpdateVm , param , new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback ( model , defaultNetworkCreatingManager , gettempVm ( ) . getId ( ) ) , this ) ; }
public static boolean setDiskAlias ( org.ovirt.engine.core.common.businessentities.BaseDisk disk , org.ovirt.engine.core.common.businessentities.VM vm ) { if ( disk == null ) { org.ovirt.engine.core.bll.ImagesHandler.log.error ( "Disk object is null" ) ; return false ; } java.lang.String vmName = "" ; int count = 1 ; if ( vm != null ) { vmName = vm.getVmName ( ) ; count = ( vm.getDiskMapCount ( ) ) + 1 ; } disk.setDiskAlias ( org.ovirt.engine.core.bll.ImagesHandler.getSuggestedDiskAlias ( disk , vmName , count ) ) ; return true ; }
private void unplug ( ) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow ( ) ) ) ; model.startProgress ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.HotUnPlugDiskFromVm , createHotPlugDiskToVmParameters ( false ) , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { model.stopProgress ( ) ; setWindow ( null ) ; } } , this ) ; }
protected void composeCoresAndSocketsWhenDontFitInto ( int totalCpuCores ) { java.util.List < java.lang.Integer > possibleSockets = findIndependentPossibleValues ( maxNumOfSockets ) ; java.util.List < java.lang.Integer > possibleCoresPerSocket = findIndependentPossibleValues ( maxCpusPerSocket ) ; java.util.Collections.reverse ( possibleSockets ) ; for ( java.lang.Integer socket : possibleSockets ) { for ( java.lang.Integer coresPerSocket : possibleCoresPerSocket ) { if ( ( socket * coresPerSocket ) == totalCpuCores ) { getModel ( ) . getCoresPerSocket ( ) . setSelectedItem ( coresPerSocket ) ; getModel ( ) . getNumOfSockets ( ) . setSelectedItem ( socket ) ; return ; } } } }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getParametersForTask ( org.ovirt.engine.core.common.action.VdcActionType parentCommandType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = parameters.getParentParameters ( ) ; if ( ( parentCommandType == ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ) || ( parentParameters == null ) ) { return parameters ; } parentParameters.setExecutionReason ( parameters.getExecutionReason ( ) ) ; return parentParameters ; }
protected void addDetailItem ( com.google.gwt.safehtml.shared.SafeHtml label , com.google.gwt.safehtml.shared.SafeHtml value , com.google.gwt.dom.client.DListElement parent ) { com.google.gwt.dom.client.Element dt = com.google.gwt.dom.client.Document.get ( ) . createElement ( "dt" ) ; dt.setInnerSafeHtml ( label ) ; parent.appendChild ( dt ) ; com.google.gwt.dom.client.Element dd = com.google.gwt.dom.client.Document.get ( ) . createElement ( "dd" ) ; dd.setInnerSafeHtml ( value ) ; parent.appendChild ( dd ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel runOnceModel = new org.ovirt.engine.ui.uicommonweb.models.vms.WebadminRunOnceModel ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , this ) ; setWindow ( runOnceModel ) ; runOnceModel.init ( ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( ( org.ovirt.engine.core.bll.InternalMigrateVmCommand.getVm ( ) . getMigrationSupport ( ) ) != ( org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NON_MIGRTABLE ) ; } return true ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.Mockito.doNothing ( ) . when ( glusterUtil ) . connect ( client , org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.USER , org.ovirt.engine.core.bll.utils.GlusterUtilTest.WRONG_PASSWORD ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.OUTPUT_XML ) . when ( glusterUtil ) . executePeerStatusCommand ( client ) ; org.mockito.Mockito.doThrow ( javax.naming.AuthenticationException.class ) . when ( glusterUtil ) . authenticate ( client ) ; }
private org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > spySearchQuery ( org.ovirt.engine.core.common.queries.SearchParameters searchParam ) { org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > ( searchParam ) ) ; return searchQuery ; }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getGeoRepSession ( geoRepSessionId ) ) . when ( geoRepDao ) . getById ( geoRepSessionId ) ; org.mockito.Mockito.doReturn ( getGlusterVolume ( startedVolumeId ) ) . when ( volumeDao ) . getById ( startedVolumeId ) ; org.mockito.Mockito.doReturn ( getGlusterVolume ( stoppedVolumeId ) ) . when ( volumeDao ) . getById ( stoppedVolumeId ) ; }
protected java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > setUpTemplates ( boolean notFound ) { java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > ret = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; if ( notFound ) { return ret ; } for ( int i = 0 ; i < ( NAMES.length ) ; i ++ ) { ret.put ( getEntity ( i ) , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) ; } return ret ; }
public void testOpenConnection ( ) throws java.sql.SQLException { javax.sql.DataSource ds = new org.ovirt.engine.core.tools.common.db.StandaloneDataSource ( ) ; java.sql.Connection connection = null ; try { connection = ds.getConnection ( ) ; org.junit.Assert.assertNotNull ( connection ) ; } finally { if ( connection != null ) { connection.close ( ) ; } } }
public void setupMocks ( ) { org.mockito.Mockito.when ( clusterDao.get ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) . thenReturn ( getCluster ( ) ) ; org.mockito.Mockito.doReturn ( hookSyncJob ) . when ( cmd ) . getSyncJobInstance ( ) ; }
public void setUp ( ) { diskImage.setDiskProfileId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.when ( dbFacade.getStorageQosDao ( ) ) . thenReturn ( storageQosDao ) ; qos = new org.ovirt.engine.core.common.businessentities.qos.StorageQos ( ) ; qos.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice ( ) ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > filterStoragesByDatacenterId ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains , org.ovirt.engine.core.compat.NGuid diskDatacenterId ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storages = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storage : storageDomains ) { if ( storage.getstorage_pool_id ( ) . equals ( diskDatacenterId ) ) { storages.add ( storage ) ; } } return storages ; }
protected org.ovirt.engine.core.common.businessentities.StorageServerConnections populateBasicConnectionDetails ( org.ovirt.engine.core.compat.Guid id , java.lang.String connection , org.ovirt.engine.core.common.businessentities.storage.StorageType type ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionDetails = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; if ( id != null ) { connectionDetails.setId ( id.toString ( ) ) ; } connectionDetails.setconnection ( connection ) ; connectionDetails.setstorage_type ( type ) ; return connectionDetails ; }
protected void initFrontend ( ) { org.ovirt.engine.ui.frontend.Frontend.setEventsHandler ( frontendEventsHandler ) ; org.ovirt.engine.ui.frontend.Frontend.getFrontendFailureEvent ( ) . addListener ( frontendFailureEventListener ) ; org.ovirt.engine.ui.frontend.Frontend.getFrontendNotLoggedInEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { user.logout ( ) ; } } ) ; org.ovirt.engine.ui.frontend.Frontend.setFilterQueries ( filterFrontendQueries ( ) ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setAllContentHeaderExpectation ( ) ; setUpEntityQueryExpectations ( 1 ) ; setGetGuestAgentQueryExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.Nic nic = resource.get ( ) ; verifyModelSpecific ( nic , 1 ) ; verifyLinks ( nic ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > pools = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool pool = pools.get ( 0 ) ; if ( pool != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetStorageDomainList ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool.getId ( ) ) ; } }
public void run ( ) { for ( org.ovirt.engine.core.compat.Guid vdsId : getRunVdssList ( ) ) { if ( ! ( vdsId.equals ( getCurrentVdsId ( ) ) ) ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.FailedToRunVm , new org.ovirt.engine.core.common.vdscommands.FailedToRunVmVDSCommandParameters ( vdsId ) ) ; } } }
private java.util.LinkedList < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.eventqueue.Event , java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > > > getEventQueue ( org.ovirt.engine.core.compat.Guid storagePoolId ) { java.util.LinkedList < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.eventqueue.Event , java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > > > queue = org.ovirt.engine.core.bll.eventqueue.EventQueueMonitor.poolsEventsMap.get ( storagePoolId ) ; if ( queue == null ) { queue = new java.util.LinkedList < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.eventqueue.Event , java.util.concurrent.FutureTask < org.ovirt.engine.core.common.eventqueue.EventResult > > > ( ) ; org.ovirt.engine.core.bll.eventqueue.EventQueueMonitor.poolsEventsMap.put ( storagePoolId , queue ) ; } return queue ; }
private void prepareCommand ( ) { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( ) ; parameters.setVdsId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand ( parameters , null ) ) ; org.mockito.Mockito.doReturn ( lunDao ) . when ( command ) . getLunDao ( ) ; org.mockito.Mockito.doReturn ( storageServerConnectionDao ) . when ( command ) . getStorageServerConnectionDao ( ) ; }
public void testFirstMatch ( ) { java.util.List < java.lang.String > source = java.util.Arrays.asList ( "zero" , "one" , "two " , "three" ) ; org.junit.Assert.assertEquals ( "one" , org.ovirt.engine.core.common.utils.ListUtils.firstMatch ( source , "one" , "two" ) ) ; org.junit.Assert.assertEquals ( "one" , org.ovirt.engine.core.common.utils.ListUtils.firstMatch ( source , "two" , "one" ) ) ; org.junit.Assert.assertEquals ( null , org.ovirt.engine.core.common.utils.ListUtils.firstMatch ( source , ( ( java.lang.String [ ] ) ( null ) ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ; java.util.Collections.sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( model ) ) ; searchableListModel.setItems ( disks ) ; }
private void endVmTemplateRelatedOps ( ) { if ( ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) ; incrementDbGeneration ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.UnLockVmTemplate ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId ( ) ) ; } else { org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setCommandShouldBeLogged ( false ) ; log.warn ( "MoveOrCopyTemplateCommand::EndMoveOrCopyCommand: VmTemplate is null, not performing full EndAction" ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomainList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; if ( ( storageDomainList.size ( ) ) != 0 ) { model.getStorageTypeList ( ) . setChangeProhibitionReason ( "Cannot change Repository type with Storage Domains attached to it" ) ; model.getStorageTypeList ( ) . setIsChangable ( false ) ; } }
public void testExtractVariableDeclarationsForStaticMsgs ( ) { java.util.List < java.lang.String > msgs = java.util.Arrays.asList ( "ACTION_TYPE_FAILED_TEMPLATE_IS_USED_FOR_CREATE_VM" , "IRS_FAILED_RETRIEVING_SNAPSHOT_INFO" ) ; org.junit.Assert.assertTrue ( "extractVariableDeclarations didn't return the same static messages" , org.apache.commons.collections.CollectionUtils.isEqualCollection ( msgs , command.extractVariableDeclarations ( msgs ) ) ) ; }
public void validateSucceedsWithStopActionTypeAndClusterIdAndServerId ( ) { cmd.getParameters ( ) . setActionType ( GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) ; cmd.getParameters ( ) . setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; cmd.getParameters ( ) . setServerId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; cmd.setClusterId ( cmd.getParameters ( ) . getClusterId ( ) ) ; cmd.setVdsId ( cmd.getParameters ( ) . getServerId ( ) ) ; prepareMocks ( ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
private void updateDcLabels ( ) { startProgress ( null ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getNetworkLabelsByDataCenterId ( getSelectedDc ( ) . getId ( ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { dcLabels = ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ; stopProgress ( ) ; onExportChanged ( ) ; } } ) ) ; }
public void testRefreshStatus ( ) { org.mockito.Mockito.doReturn ( getSessionDetailsVDSReturnVal ( true ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionStatus ) , org.mockito.ArgumentMatchers.any ( ) ) ; syncJob.refreshGeoRepSessionStatus ( ) ; org.mockito.Mockito.verify ( geoRepDao , org.mockito.Mockito.times ( 2 ) ) . saveOrUpdateDetailsInBatch ( org.mockito.ArgumentMatchers.anyList ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getFreeBonds ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > freeBonds = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond : allBonds ) { if ( ! ( nicMap.containsKey ( bond.getName ( ) ) ) ) { freeBonds.add ( bond ) ; } } return freeBonds ; }
public void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
public void init ( ) { super . init ( ) ; org.ovirt.engine.api.restapi.utils.OsTypeMockUtils.mockOsTypes ( ) ; osRepository = control.createMock ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; }
public javax.ws.rs.core.Response remove ( java.lang.String id , org.ovirt.engine.api.model.Action action ) { getEntity ( id ) ; if ( ( action.isSetDetach ( ) ) && ( action.isDetach ( ) ) ) { return performAction ( VdcActionType.DetachDiskFromVm , new org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters ( parentId , org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( id ) ) ) ; } else { return remove ( id ) ; } }
private java.lang.String getIpv6Address ( org.ovirt.engine.core.common.vdscommands.HostNetwork attachment ) { final java.lang.String ipv6Address = attachment.getIpv6Address ( ) ; final java.lang.Integer ipv6Prefix = attachment.getIpv6Prefix ( ) ; return ipv6Prefix == null ? ipv6Address : java.lang.String.format ( "%s/%d" , ipv6Address , ipv6Prefix ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > qos ) { getQos ( ) . setItems ( qos ) ; getQos ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.findHostNetworkQosById ( qos , getNetwork ( ) . getQosId ( ) ) ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase removeVmImages ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > images ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalAction ( VdcActionType.RemoveAllVmImages , buildRemoveAllVmImagesParameters ( images ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks ( getExecutionContext ( ) ) ) ; if ( vdcRetValue.getSucceeded ( ) ) { getReturnValue ( ) . getVdsmTaskIdList ( ) . addAll ( vdcRetValue.getInternalVdsmTaskIdList ( ) ) ; } return vdcRetValue ; }
public void testGetEntityNameByIdAndTypeForDataCenter ( ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = dbFacade.getStoragePoolDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.STORAGE_POOL_ID ) ; org.junit.Assert.assertNotNull ( storagePool ) ; java.lang.String name = storagePool.getName ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.STORAGE_POOL_ID , VdcObjectType.StoragePool ) ) ) ; }
public boolean isGraphicsAndDisplaySupported ( int osId , org.ovirt.engine.core.compat.Version version , java.util.Collection < org.ovirt.engine.core.common.businessentities.GraphicsType > graphics , org.ovirt.engine.core.common.businessentities.DisplayType displayType ) { for ( org.ovirt.engine.core.common.businessentities.GraphicsType graphicType : graphics ) { if ( ! ( osRepository.getGraphicsAndDisplays ( osId , version ) . contains ( new org.ovirt.engine.core.common.utils.Pair ( graphicType , displayType ) ) ) ) { return false ; } } return true ; }
public void zeroDiskSize ( ) { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings ( ) ; settings.diskSpaceFree = 0 ; settings.diskSpaceUsed = 0 ; settings.spaceThresholdGB = 5 ; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest ( settings ) ; org.junit.Assert.assertFalse ( org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isWithinThresholds ( domain ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainList ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomainList = new java.util.ArrayList < > ( ) ; storageDomainList.add ( mockFirstStorageDomain ( ) ) ; storageDomainList.add ( mockSecondStorageDomain ( ) ) ; return storageDomainList ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel userPortalBasicListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel ) ( model ) ) ; if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm != null ) { userPortalBasicListModel.UpdateDetails ( vm ) ; } } }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk.setId ( diskImageGuid ) ; disk.setSize ( 100000L ) ; disk.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singleton ( sdId ) ) ) ; disk.setStoragePoolId ( spId ) ; disk.setDescription ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; return disk ; }
protected boolean shouldPerformOvfUpdate ( ) { return ( ( ! ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getParameters ( ) . isInactive ( ) ) ) && ( ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomain ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) && ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomain ( ) . getStorageDomainType ( ) . isDataDomain ( ) ) ; }
void bindConfiguration ( ) { bindConstant ( ) . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultMainSectionPlace.class ) . to ( WebAdminApplicationPlaces.DEFAULT_MAIN_SECTION_PLACE ) ; bindResourceConfiguration ( org.ovirt.engine.ui.webadmin.ApplicationConstants.class , org.ovirt.engine.ui.webadmin.ApplicationMessages.class , org.ovirt.engine.ui.webadmin.ApplicationResources.class , org.ovirt.engine.ui.webadmin.ApplicationTemplates.class , org.ovirt.engine.ui.webadmin.ApplicationDynamicMessages.class ) ; }
public void compare ( ) { org.junit.Assert.assertTrue ( ( ( Version.v3_6.compareTo ( Version.v4_0 ) ) < 0 ) ) ; org.junit.Assert.assertTrue ( ( ( Version.v4_0.compareTo ( Version.v3_6 ) ) > 0 ) ) ; org.junit.Assert.assertTrue ( ( ( Version.v3_6.compareTo ( new org.ovirt.engine.core.compat.Version ( "3.6" ) ) ) == 0 ) ) ; }
static org.ovirt.engine.api.model.NIC getModel ( int index ) { org.ovirt.engine.api.model.NIC model = new org.ovirt.engine.api.model.NIC ( ) ; model.setName ( NAMES [ index ] ) ; model.setInterface ( NicInterface.RTL8139_VIRTIO.value ( ) ) ; return model ; }
public void hostProviderDoesNotExist ( ) { org.mockito.Mockito.when ( host.getHostProviderId ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.when ( dbFacade.getProviderDao ( ) ) . thenReturn ( providerDao ) ; validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator ( dbFacade , oldHost , host , false , hostedEngineHelper ) ; org.junit.Assert.assertThat ( validator.hostProviderExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( diskImage.getImage ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; diskImage.setImageStatus ( ImageStatus.LOCKED ) ; org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( diskImage.getImageId ( ) , ImageStatus.LOCKED ) ; return null ; }
public org.ovirt.engine.api.resource.StatisticsResource getStatisticsResource ( ) { org.ovirt.engine.api.restapi.resource.EntityIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ; org.ovirt.engine.api.restapi.resource.HostStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.HostStatisticalQuery ( resolver , newModel ( id ) ) ; return inject ( new org.ovirt.engine.api.restapi.resource.BackendStatisticsResource ( entityType , guid , query ) ) ; }
private void fillReportedConfigurations ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > networkNameToNicMap , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > networkMap , org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment ) { org.ovirt.engine.core.common.businessentities.network.Network network = networkMap.get ( networkAttachment.getNetworkId ( ) ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = getNicToWhichIsNetworkAttached ( networkNameToNicMap , networkMap , networkAttachment ) ; if ( nic != null ) { org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportedConfigurations = createNetworkInSyncWithVdsNetworkInterface ( networkAttachment , nic , network ) . reportConfigurationsOnHost ( ) ; networkAttachment.setReportedConfigurations ( reportedConfigurations ) ; } }
public void testImportWithStorageDomainName ( ) throws java.lang.Exception { setUpGetEntityExpectations ( ( "Storage: name=" + ( NAMES [ 2 ] ) ) , SearchType.StorageDomain , getStorageDomain ( 2 ) ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID ) ; org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setName ( NAMES [ 2 ] ) ; org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster ( ) ; cluster.setId ( GUIDS [ 1 ] . toString ( ) ) ; doTestImport ( storageDomain , cluster , false ) ; }
public void testAddVersionNoBaseTemplateId ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.ovirt.engine.api.model.Template t = org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest.getModel ( 2 ) ; t.getVersion ( ) . setBaseTemplate ( null ) ; try { collection.add ( t ) ; fail ( "Should have failed with 400 error due to a missing base template" ) ; } catch ( javax.ws.rs.WebApplicationException e ) { assertNotNull ( e.getResponse ( ) ) ; assertEquals ( 400 , e.getResponse ( ) . getStatus ( ) ) ; } }
private static java.lang.Double AssignDoubleValue ( java.util.Map < java.lang.String , java.lang.Object > input , java.lang.String name ) { java.lang.Object value = input.get ( name ) ; if ( value instanceof java.lang.Double ) { return ( ( java.lang.Double ) ( value ) ) ; } else if ( value instanceof java.lang.String ) { return java.lang.Double.parseDouble ( ( ( java.lang.String ) ( value ) ) ) ; } return null ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > items = returnValue.getReturnValue ( ) ; updateItems ( items ) ; }
protected void executeVmCommand ( ) { try { vmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.exportimport.ExtractOvaCommand.getVm ( ) ) ; java.util.List < java.lang.String > diskPaths = prepareImages ( ) ; boolean succeeded = runAnsibleImportOvaPlaybook ( diskPaths ) ; teardownImages ( ) ; if ( ! succeeded ) { log.error ( "Failed to extract OVA file" ) ; setCommandStatus ( CommandStatus.FAILED ) ; } else { org.ovirt.engine.core.bll.exportimport.ExtractOvaCommand.setSucceeded ( true ) ; } } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { log.error ( "Failed to extract OVA file" , e ) ; setCommandStatus ( CommandStatus.FAILED ) ; } }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getVdsStatic ( ) ) . when ( vdsStaticDao ) . get ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.serverId ) ; org.mockito.Mockito.doReturn ( getCluster ( true , Version.v4_1 ) ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers.any ( ) ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( T obj ) { return createIdParameterMapper ( obj.getId ( ) ) . addValue ( "qos_type" , getQosType ( ) ) . addValue ( "name" , obj.getName ( ) ) . addValue ( "description" , obj.getDescription ( ) ) . addValue ( "storage_pool_id" , obj.getStoragePoolId ( ) ) ; }
public void testUpdateWhenAbortedTasks ( ) { org.mockito.Mockito.doReturn ( getTasks ( JobExecutionStatus.ABORTED ) ) . when ( provider ) . getTaskListForCluster ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.CLUSTER_GUIDS [ 1 ] ) ; prepareMocks ( ) ; tasksSyncJob.updateGlusterAsyncTasks ( ) ; org.mockito.Mockito.verify ( taskUtils , org.mockito.Mockito.times ( 2 ) ) . updateSteps ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
public void validateFailsUnSupportedVersionForDiscardAfterDelete ( ) { org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_NOT_SUPPORTED_BY_DC_VERSION ; org.mockito.Mockito.when ( storageDomainValidator.isDiscardAfterDeleteSupportedByDcVersion ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( message ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , message ) ; }
protected javax.ws.rs.core.Response createDisk ( org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource , org.ovirt.engine.api.model.DiskAttachment attachment , org.ovirt.engine.api.restapi.resource.IResolver entityResolver ) { org.ovirt.engine.api.model.Disk disk = attachment.getDisk ( ) ; validateDiskForCreation ( disk ) ; updateStorageTypeForDisk ( disk ) ; return resource.performCreate ( VdcActionType.AddDisk , getAddParameters ( attachment , org.ovirt.engine.api.restapi.types.DiskMapper.map ( disk , null ) , disk ) , entityResolver ) ; }
protected void initProviderList ( ) { startProgress ( null ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getAllNetworkProviders ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { stopProgress ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) ; providers.add ( 0 , null ) ; getProviders ( ) . setItems ( providers ) ; } } ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { hostsModel.stopProgress ( ) ; boolean isAllValidatePassed = true ; for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase : result.getReturnValue ( ) ) { isAllValidatePassed = returnValueBase.isValid ( ) ; if ( ! isAllValidatePassed ) { break ; } } if ( isAllValidatePassed ) { cancel ( ) ; } }
public void testProxyCompatibilityWithFencingPolicy ( ) { org.ovirt.engine.core.common.businessentities.VDS host = createHost ( ) ; host.setSupportedClusterLevels ( "3.4,3.5" ) ; org.ovirt.engine.core.bll.pm.FenceProxyLocator locator = setupLocator ( ) ; org.junit.Assert.assertTrue ( locator.isFencingPolicySupported ( host , Version.v3_5 ) ) ; org.junit.Assert.assertFalse ( locator.isFencingPolicySupported ( host , Version.v3_6 ) ) ; }
private static java.lang.String encode ( byte b1 , byte b2 , byte b3 , int n ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; int w = ( ( ( b1 & 255 ) << 16 ) | ( ( b2 & 255 ) << 8 ) ) | ( b3 & 255 ) ; while ( ( n -- ) > 0 ) { result.append ( org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t [ ( w & 63 ) ] ) ; w = w > > 6 ; } return result.toString ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel ) ( target ) ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > vmDisks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks ( model , vmDisks , VmModelHelper.WarningType.VM_EXPORT ) ; }
protected void mockVds ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setvds_group_compatibility_version ( new org.ovirt.engine.core.compat.Version ( "3.1" ) ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( command ) . getVdsDAO ( ) ; org.mockito.Mockito.when ( vdsDao.get ( org.mockito.Mockito.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vds ) ; }
public static void updateVdsDomainsData ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid storagePoolId , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSDomainsData > vdsDomainData ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData proxy = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.get ( storagePoolId ) ; if ( proxy != null ) { proxy.updateVdsDomainsData ( vds , vdsDomainData ) ; } }
private void mockStoragePoolIsoMap ( ) { org.ovirt.engine.core.common.businessentities.storage_pool_iso_map spim = new org.ovirt.engine.core.common.businessentities.storage_pool_iso_map ( ) ; org.mockito.Mockito.when ( storagePoolIsoMapDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId.class ) ) ) . thenReturn ( spim ) ; }
public void setUp ( ) { vdsFromDb = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vdsFromDb.setId ( vdsId ) ; vdsFromDb.setClusterId ( clusterId ) ; virtStrategy = org.mockito.Mockito.spy ( new org.ovirt.engine.core.vdsbroker.monitoring.VirtMonitoringStrategy ( mockCluster ( ) , mockVdsDao ( ) , null ) ) ; org.mockito.Mockito.doNothing ( ) . when ( virtStrategy ) . vdsNonOperational ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.NonOperationalReason.class ) , org.mockito.Matchers.any ( ) ) ; }
public void testGetEntityNameByIdAndTypeForHost ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic vds = dbFacade.getVdsStaticDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.VDS_ID ) ; org.junit.Assert.assertNotNull ( vds ) ; java.lang.String name = vds.getName ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.VDS_ID , VdcObjectType.VDS ) ) ) ; }
public org.ovirt.engine.core.searchbackend.IAutoCompleter getFieldRelationshipAutoCompleter ( java.lang.String fieldName ) { if ( ( ( "SIZE" . equals ( fieldName ) ) || ( "USED" . equals ( fieldName ) ) ) || ( "COMMITTED" . equals ( fieldName ) ) ) { return NumericConditionRelationAutoCompleter.INSTANCE ; } else { return StringConditionRelationAutoCompleter.INSTANCE ; } }
private org.ovirt.engine.core.common.businessentities.Snapshot getSnapshot ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk lastCinderVolume ) { org.ovirt.engine.core.compat.Guid vmSnapshotId = lastCinderVolume.getVmSnapshotId ( ) ; org.ovirt.engine.core.common.businessentities.Snapshot updated = null ; if ( ( vmSnapshotId != null ) && ( ! ( Guid.Empty.equals ( vmSnapshotId ) ) ) ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommand.getSnapshotDao ( ) . get ( vmSnapshotId ) ; if ( snapshot != null ) { updated = org.ovirt.engine.core.bll.ImagesHandler.prepareSnapshotConfigWithoutImageSingleImage ( snapshot , lastCinderVolume.getImageId ( ) ) ; } } return updated ; }
protected void refreshModel ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; super . SyncSearch ( VdcQueryType.GetAllAuditLogsByVMName , new org.ovirt.engine.core.common.queries.GetAllAuditLogsByVMNameParameters ( vm.getName ( ) ) ) ; }
protected org.ovirt.engine.api.model.Storage postPopulate ( org.ovirt.engine.api.model.Storage from ) { from.setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.StorageType.class ) . value ( ) ) ; org.ovirt.engine.api.model.LogicalUnit unit = new org.ovirt.engine.api.model.LogicalUnit ( ) ; unit.setId ( from.getId ( ) ) ; from.getLogicalUnits ( ) . unsetLogicalUnits ( ) ; from.getLogicalUnits ( ) . getLogicalUnits ( ) . add ( unit ) ; return from ; }
private java.lang.String GetRealKey ( java.lang.String agent , java.lang.String displayedKey ) { java.lang.String result = "" ; if ( ( org.apache.commons.lang.StringUtils.isNotEmpty ( agent ) ) && ( org.apache.commons.lang.StringUtils.isNotEmpty ( displayedKey ) ) ) { if ( fencingOptionMapping.containsKey ( agent ) ) { java.util.HashMap < java.lang.String , java.lang.String > agentOptions = fencingOptionMapping.get ( agent ) ; result = ( agentOptions.containsKey ( displayedKey ) ) ? agentOptions.get ( displayedKey ) : displayedKey ; } else { org.ovirt.engine.core.utils.pm.VdsFenceOptions.log.error ( org.ovirt.engine.core.utils.pm.VdsFenceOptions.AGENT_ERROR , agent ) ; } } return result ; }
public java.util.Set < org.ovirt.engine.core.utils.MockConfigRule.MockConfigDescriptor < java.lang.Boolean > > getExtraConfigDescriptors ( ) { return new java.util.HashSet ( java.util.Arrays.asList ( org.ovirt.engine.core.utils.MockConfigRule.mockConfig ( ConfigValues.GlusterHostUUIDSupport , Version.v3_2 , false ) , org.ovirt.engine.core.utils.MockConfigRule.mockConfig ( ConfigValues.GlusterHostUUIDSupport , Version.v3_3 , true ) ) ) ; }
boolean isTaskOverPrePollingLapse ( ) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters parameters = getParameters ( ) ; long taskStartTime = parameters.getDbAsyncTask ( ) . getStartTime ( ) . getTime ( ) ; java.lang.Integer prePollingPeriod = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( org.ovirt.engine.core.common.config.ConfigValues.UknownTaskPrePollingLapse ) ; boolean idlePeriodPassed = ( ( java.lang.System.currentTimeMillis ( ) ) - taskStartTime ) > prePollingPeriod ; org.ovirt.engine.core.bll.SPMAsyncTask.log.infoFormat ( "task id {0} {1}. Pre-polling period is {2} millis. " , parameters.getVdsmTaskId ( ) , ( idlePeriodPassed ? "has passed pre-polling period time and should be polled" : "is in pre-polling period and should not be polled" ) , prePollingPeriod ) ; return idlePeriodPassed ; }
private org.ovirt.engine.core.compat.Guid getVmToAttach ( org.ovirt.engine.core.compat.NGuid poolId ) { if ( ( vmToAttach ) == null ) { org.ovirt.engine.core.compat.Guid vmGuid = getPrestartedVmToAttach ( poolId ) ; if ( ( vmGuid == null ) || ( Guid.Empty.equals ( vmGuid ) ) ) { vmGuid = getNonPrestartedVmToAttach ( poolId ) ; } vmToAttach = vmGuid ; } return vmToAttach ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId ( ) , org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext ( ) ) ; if ( ! ( imageTemplates.isEmpty ( ) ) ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { if ( removeVmTemplateImages ( ) ) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB ( getVmTemplate ( ) ) ; setSucceeded ( true ) ; } return null ; } } ) ; } else { HandleEndAction ( ) ; } }
public boolean deleteSnapshot ( final org.ovirt.engine.core.compat.Guid snapshotId ) { return execute ( ( ) -> { try { proxy.deleteSnapshot ( snapshotId.toString ( ) ) ; return true ; } catch ( com.woorea.openstack.base.client.OpenStackResponseException ex ) { if ( ( ex.getStatus ( ) ) == ( org.apache.commons.httpclient.HttpStatus.SC_NOT_FOUND ) ) { return false ; } throw ex ; } } ) ; }
protected boolean isDomainAttached ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( ( storageDomain.getstorage_pool_id ( ) ) == null ) { return false ; } org.ovirt.engine.core.compat.Guid storageDomainId = storageDomain.getId ( ) ; org.ovirt.engine.core.compat.Guid storagePoolId = storageDomain.getstorage_pool_id ( ) . getValue ( ) ; return ( org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getDbFacade ( ) . getStoragePoolIsoMapDao ( ) . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( storageDomainId , storagePoolId ) ) ) != null ; }
public void iscsiBondWithTheSameNameDoesNotExistInDataCenter ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.IscsiBond > iscsiBonds = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.compat.Guid dataCenterId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; iscsiBonds.add ( createIscsiBond ( "First" , dataCenterId ) ) ; iscsiBonds.add ( createIscsiBond ( "Second" , dataCenterId ) ) ; org.mockito.Mockito.doReturn ( iscsiBonds ) . when ( iscsiBondDao ) . getAllByStoragePoolId ( org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.Assert.assertEquals ( ValidationResult.VALID , validator.iscsiBondWithTheSameNameExistInDataCenter ( createIscsiBond ( "Third" , dataCenterId ) ) ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.NIC model = new org.ovirt.engine.api.model.NIC ( ) ; model.setName ( null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "NIC" , "add" , "name" ) ; } }
public static org.ovirt.engine.core.common.businessentities.StorageDomain map ( org.ovirt.engine.api.model.HostStorage model , org.ovirt.engine.api.restapi.types.StorageDomain template ) { org.ovirt.engine.api.restapi.types.StorageDomain entity = ( template != null ) ? template : new org.ovirt.engine.api.restapi.types.StorageDomain ( ) ; entity.setStorage ( model.getId ( ) ) ; if ( model.isSetType ( ) ) { entity.setStorageType ( org.ovirt.engine.api.restapi.types.StorageDomainMapper.map ( model.getType ( ) , null ) ) ; } return entity ; }
public java.lang.String getReplacementStringNullSafe ( org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster data ) { return ( ( data.getCluster ( ) . getName ( ) ) + "/" ) + ( data.getDataCenter ( ) . getName ( ) ) ; }
public void onFailed ( ) { updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; log.debug ( "Removing ImageTransfer id {}" , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId ( ) ) ; imageTransferDao.remove ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId ( ) ) ; endWithFailure ( ) ; log.error ( "Failed to transfer disk '{}' (command id '{}')" , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getImageId ( ) , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId ( ) ) ; }
public void mockQuotaDao ( ) { quota = mockStorageQuota ( quotaGuid ) ; org.mockito.Mockito.when ( quotaDao.getById ( quotaGuid ) ) . thenReturn ( quota ) ; }
public void getAllowClusterWithVirtGlusterEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean.TRUE ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void initVncKeyboardLayout ( ) { java.util.List < java.lang.String > layouts = ( ( java.util.List < java.lang.String > ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.VncKeyboardLayoutValidValues ) ) ) ; java.util.List < java.lang.String > vncKeyboardLayoutItems = new java.util.ArrayList < java.lang.String > ( ) ; vncKeyboardLayoutItems.add ( null ) ; vncKeyboardLayoutItems.addAll ( layouts ) ; getVncKeyboardLayout ( ) . setItems ( vncKeyboardLayoutItems ) ; getVncKeyboardLayout ( ) . setIsChangable ( false ) ; }
public java.util.List < java.lang.String > convert ( java.lang.Object source ) { java.util.List < java.lang.String > results = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.aaa.ProfileEntry profileEntry : ( ( java.util.Collection < org.ovirt.engine.core.aaa.ProfileEntry > ) ( source ) ) ) { if ( ( ! passwordBasedOnly ) || ( profileEntry.getSupportsPasswordAuthenication ( ) ) ) { results.add ( profileEntry.getProfile ( ) ) ; } } return results ; }
public static < T > java.util.ArrayList < T > Intersection ( java.util.ArrayList < java.util.ArrayList < T > > lists ) { java.util.ArrayList < T > result = new java.util.ArrayList < T > ( ) ; if ( ( lists != null ) && ( ! ( lists.isEmpty ( ) ) ) ) { result.addAll ( lists.get ( 0 ) ) ; for ( java.util.ArrayList < T > list : lists ) { result.retainAll ( list ) ; } } return result ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { java.lang.String value = "" ; if ( ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( object ) ) ; java.util.ArrayList < java.lang.String > quotaNamesArr = diskImage.getQuotaNames ( ) ; if ( quotaNamesArr != null ) { value = java.lang.String.join ( ", " , quotaNamesArr ) ; } } return value ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , setUpClusters ( ) , failure ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId ( ) , org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext ( ) ) ; final boolean hasImages = ( imageTemplates.size ( ) ) > 0 ; if ( hasImages ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { if ( RemoveVmTemplateImages ( ) ) { setSucceeded ( true ) ; } return null ; } } ) ; } else { HandleEndAction ( ) ; } }
public void testGuestAgentStatus ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f4356" ) ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = dao.get ( vmId ) ; vmDynamic.setGuestAgentStatus ( GuestAgentStatus.UpdateNeeded ) ; dao.update ( vmDynamic ) ; vmDynamic = dao.get ( vmId ) ; org.junit.Assert.assertEquals ( vmDynamic.getGuestAgentStatus ( ) . getValue ( ) , GuestAgentStatus.UpdateNeeded.getValue ( ) ) ; }
private void assertGetAllForStoragePoolValidResult ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > result ) { org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup group : result ) { org.junit.Assert.assertEquals ( storagePool.getId ( ) , group.getStoragePoolId ( ) ) ; } }
protected boolean isVmUpOrDown ( ) { if ( ( ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) && ( ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL ) ; return false ; } return true ; }
public void getSpecParams ( ) { command.getParameters ( ) . setAction ( VmWatchdogAction.RESET ) ; command.getParameters ( ) . setModel ( vmWatchdogType ) ; java.util.HashMap < java.lang.String , java.lang.Object > specParams = command.getSpecParams ( ) ; org.junit.Assert.assertNotNull ( specParams ) ; org.junit.Assert.assertEquals ( "i6300esb" , specParams.get ( "model" ) ) ; org.junit.Assert.assertEquals ( "reset" , specParams.get ( "action" ) ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage mockDisk ( ) { org.ovirt.engine.core.compat.Guid diskGuid = org.ovirt.engine.core.compat.Guid.NewGuid ( ) ; org.ovirt.engine.core.compat.Guid itGuid = org.ovirt.engine.core.compat.Guid.NewGuid ( ) ; final org.ovirt.engine.core.common.businessentities.DiskImage expectedDisk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; expectedDisk.setImageId ( diskGuid ) ; expectedDisk.setit_guid ( itGuid ) ; return expectedDisk ; }
protected void executeCommand ( ) { final org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction ( VdcActionType.DetachNetworkFromClusterInternal , org.ovirt.engine.core.bll.network.cluster.DetachNetworkToClusterCommand.getParameters ( ) ) ; setSucceeded ( returnValue.getSucceeded ( ) ) ; if ( returnValue.getSucceeded ( ) ) { if ( org.ovirt.engine.core.bll.network.cluster.NetworkHelper.shouldRemoveNetworkFromHostUponNetworkRemoval ( getPersistedNetwork ( ) ) ) { detachLabeledNetworksFromClusterHosts ( ) ; } } else { propagateFailure ( returnValue ) ; } }
public void encodeWhenNonAsciiAliasIsTruncated ( ) throws java.io.IOException { java.lang.String nonAsciiDiskAlias = "ááááááááááááááááááááááááááááááááááááááááááááááá" ; disk.setDiskAlias ( nonAsciiDiskAlias ) ; disk.setDiskDescription ( "DiskDescription" ) ; assertDiskDescriptionMap ( disk , generateDiskAliasJsonEntry ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandlerTest.encodeString ( nonAsciiDiskAlias.substring ( 0 , 46 ) ) ) , generateEncodingJsonEntry ( 1 ) ) ; }
protected boolean canDoAction ( ) { if ( ( getDisk ( ) ) == null ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST ) ; } return ( validateAllVmsForDiskAreDown ( ) ) && ( canRemoveDiskBasedOnStorageTypeCheck ( ) ) ; }
protected void executeCommand ( ) { final org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) . getId ( ) ; org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance ( ) . create ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) ) ; if ( providerProxy != null ) { providerProxy.onRemoval ( ) ; } org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getProviderDao ( ) . remove ( providerId ) ; org.ovirt.engine.core.bll.provider.RemoveProviderCommand.setSucceeded ( true ) ; }
private void newPoolNameIsAlreadyTaken ( ) { org.mockito.Mockito.when ( spDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > storagePoolList = new java.util.ArrayList < > ( ) ; storagePoolList.add ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createStoragePool ( ) ) ; org.mockito.Mockito.when ( spDao.getByName ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.anyBoolean ( ) ) ) . thenReturn ( new java.util.ArrayList ( storagePoolList ) ) ; }
public void endWithFailure ( ) { if ( ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters ( ) . getStage ( ) ) == ( org.ovirt.engine.core.common.action.LiveMigrateVmDisksParameters.LiveMigrateStage.CREATE_SNAPSHOT ) ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation ( getMovedDiskIds ( ) , ImageStatus.OK , ImageStatus.OK , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext ( ) ) ; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded ( true ) ; }
public void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public static void clearNetworks ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > attachedNetworks = nic.getItems ( ) ; if ( ( attachedNetworks.size ( ) ) > 0 ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > ( attachedNetworks ) ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand ( networkModel , null , allNics ) . execute ( ) ; } } }
protected void postConstruct ( ) { T parameters = org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) ; setStoragePoolId ( parameters.getStoragePoolId ( ) ) ; imageToDestinationDomainMap = parameters.getImageToDestinationDomainMap ( ) ; }
public void testGetStoragePoolIsoMap ( ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap result = dao.get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( existingStoragePoolIsoMap.getstorage_id ( ) , existingStoragePoolIsoMap.getstorage_pool_id ( ) ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingStoragePoolIsoMap , result ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setAllContentHeaderExpectation ( ) ; setUpEntityQueryExpectations ( 1 ) ; setGetGuestAgentQueryExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.NIC nic = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.verifyModelSpecific ( nic , 1 ) ; verifyLinks ( nic ) ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.users.UserGroup > items = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.users.UserGroup > ( ) ; for ( java.lang.String groupFullName : getEntity ( ) . getGroupNames ( ) ) { items.add ( org.ovirt.engine.ui.uicommonweb.models.users.UserGroupListModel.createUserGroup ( groupFullName ) ) ; } setItems ( items ) ; } else { setItems ( null ) ; } }
public static org.ovirt.engine.ui.common.widget.tab.TabDefinition createTab ( com.gwtplatform.mvp.client.TabData tabData , org.ovirt.engine.ui.common.widget.tab.AbstractTabPanel tabPanel , com.google.gwt.event.shared.EventBus eventBus ) { if ( tabData instanceof org.ovirt.engine.ui.common.widget.tab.DynamicTabData ) { return new org.ovirt.engine.ui.common.widget.tab.DynamicTab ( ( ( org.ovirt.engine.ui.common.widget.tab.DynamicTabData ) ( tabData ) ) , tabPanel , eventBus ) ; } else if ( tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ) { return new org.ovirt.engine.ui.common.widget.tab.GroupedTab ( ( ( org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ) ( tabData ) ) , tabPanel ) ; } else { return new org.ovirt.engine.ui.common.widget.tab.SimpleTab ( tabData , tabPanel ) ; } }
private void removeListeners ( org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel model ) { if ( ( viewUpdatingListener ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice = model.getVmConsoles ( ) . getConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class ) . getspice ( ) ; if ( spice == null ) { return ; } }
private void initVersion ( ) { if ( ! ( isVersionInit ) ) { isVersionInit = true ; for ( org.ovirt.engine.core.compat.Version item : getVersion ( ) . getItems ( ) ) { if ( org.ovirt.engine.core.compat.Version.OpEquality ( item , getEntity ( ) . getcompatibility_version ( ) ) ) { getVersion ( ) . setSelectedItem ( item ) ; break ; } } } }
public void refreshHeavyWeightData ( ) { org.ovirt.engine.core.bll.gluster.GlusterManager.log.debug ( "Refreshing Gluster Data [heavyweight]" ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : getClusterDao ( ) . getAll ( ) ) { try { refreshClusterHeavyWeightData ( cluster ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.gluster.GlusterManager.log.errorFormat ( "Error while refreshing Gluster heavyweight data of cluster {0}!" , cluster.getname ( ) , e ) ; } } }
protected void executeCommand ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > vmDisksMap = vmSlaPolicyUtils.getRunningVmDiskImageMapWithQos ( getQosId ( ) ) ; super . executeCommand ( ) ; if ( getSucceeded ( ) ) { vmSlaPolicyUtils.refreshVmsStorageQos ( vmDisksMap , new org.ovirt.engine.core.common.businessentities.qos.StorageQos ( ) ) ; } }
private void attachIso_EntityChanged ( ) { getIsoImage ( ) . setIsChangable ( getAttachIso ( ) . getEntity ( ) ) ; getBootSequence ( ) . getCdromOption ( ) . setIsChangable ( getAttachIso ( ) . getEntity ( ) ) ; updateInitialRunFields ( ) ; }
public void testValidateCompletion ( ) { org.junit.Assert.assertTrue ( "TRUE" , comp.validateCompletion ( "TRUE" ) ) ; org.junit.Assert.assertTrue ( "TR" , comp.validateCompletion ( "TR" ) ) ; org.junit.Assert.assertFalse ( "JarJar" , comp.validateCompletion ( "JarJar" ) ) ; }
private static void initMigrationSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.migrationSupport = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetArchitectureCapabilities , new org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters ( org.ovirt.engine.core.common.queries.ArchCapabilitiesParameters.ArchCapabilitiesVerb.GetMigrationSupport ) , callback ) ; }
public void isCpuPinningValidWithoutPinnedHost ( ) { org.ovirt.engine.core.bll.VmManagementCommandBase < org.ovirt.engine.core.common.action.VmManagementParametersBase > test = new org.ovirt.engine.core.bll.VmManagementCommandBase ( org.ovirt.engine.core.compat.Guid.Empty ) ; org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; vmStatic.setNumOfSockets ( 6 ) ; vmStatic.setCpuPerSocket ( 2 ) ; vmStatic.setDedicatedVmForVdsList ( new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > ( ) ) ; org.junit.Assert.assertFalse ( test.isCpuPinningValid ( "0#0" , vmStatic ) ) ; org.junit.Assert.assertFalse ( test.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_BE_PINNED_TO_CPU_WITH_UNDEFINED_HOST ) ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; setAsyncResult ( null ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
private void decreasePendingVms ( org.ovirt.engine.core.compat.Guid vdsId , int numOfCpus , int minAllocatedMem , java.lang.String vmName ) { getVdsDynamicDao ( ) . updatePartialVdsDynamicCalc ( vdsId , 0 , ( - numOfCpus ) , ( - minAllocatedMem ) , 0 , 0 ) ; getBlockingQueue ( vdsId ) . offer ( java.lang.Boolean.TRUE ) ; org.ovirt.engine.core.bll.RunVmCommandBase.log.debugFormat ( "Decreasing vds {0} pending vcpu count by {1} and vmem size by {2} (Vm: {3})" , vdsId , numOfCpus , minAllocatedMem , vmName ) ; }
public org.ovirt.engine.api.model.NIC update ( org.ovirt.engine.api.model.NIC resource ) { validateParameters ( resource , requiredUpdateFields ) ; return performUpdate ( resource , entityResolver , updateType , updateParametersProvider ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > searchVMTemplates ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getVmTemplateDao ( ) , true , null ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.users.EventNotificationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.users.EventNotificationModel ) ( sender ) ) ; java.lang.String propertyName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . propertyName ; if ( "EventGroupModels" . equals ( propertyName ) ) { updateTree ( model ) ; } }
public void onRemoval ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = getDbFacade ( ) . getStorageDomainDao ( ) . getAllByConnectionId ( provider.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainEntry = storageDomains.get ( 0 ) ; getDbFacade ( ) . getStorageDomainDao ( ) . remove ( storageDomainEntry.getId ( ) ) ; }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskSnapshotByImageId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotResourceTest.IMAGE_ID } , getEntity ( 1 ) ) ; org.ovirt.engine.api.model.DiskSnapshot diskSnapshot = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotResourceTest.verifyModelSpecific ( diskSnapshot , 1 ) ; }
public void init ( org.ovirt.engine.core.common.businessentities.StorageDomain sourceStorageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > repoImages ) { this . sourceStorageDomain = sourceStorageDomain ; setRepoImages ( repoImages ) ; updateDataCenters ( ) ; org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > importAsTemplateListener = new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateClusterEnabled ( ) ; } } ; getImportAsTemplate ( ) . getEntityChangedEvent ( ) . addListener ( importAsTemplateListener ) ; }
public void setUp ( ) { storagePool = cmd.getParameters ( ) . getStoragePool ( ) ; cmd.init ( ) ; org.mockito.Mockito.when ( storagePoolDao.get ( storagePool.getId ( ) ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito.doReturn ( storagePoolIsoMapDao ) . when ( cmd ) . getStoragePoolIsoMapDao ( ) ; org.mockito.Mockito.when ( storagePoolIsoMapDao.getAllForStorage ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; }
public void Rollback ( ) { super . Rollback ( ) ; if ( macAddressChanged ) { org.ovirt.engine.core.bll.MacPoolManager.getInstance ( ) . AddMac ( oldIface.getMacAddress ( ) ) ; if ( ! ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.AllowDuplicateMacAddresses ) ) ) { org.ovirt.engine.core.bll.MacPoolManager.getInstance ( ) . freeMac ( getMacAddress ( ) ) ; } } }
private void remoteFileName ( java.lang.String file ) { if ( ( ( ( file.indexOf ( '\'' ) ) != ( - 1 ) ) || ( ( file.indexOf ( '\n' ) ) != ( - 1 ) ) ) || ( ( file.indexOf ( '\r' ) ) != ( - 1 ) ) ) { throw new java.lang.IllegalArgumentException ( "File name should not contain \"\'\"" ) ; } }
private static org.ovirt.engine.core.bll.ValidationResult checkVmNumaNodeCount ( int numaNodeCount , int cpuCores ) { if ( cpuCores < numaNodeCount ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_MORE_NODES_THAN_CPUS , java.lang.String.format ( "$numaNodes %d" , numaNodeCount ) , java.lang.String.format ( "$cpus %d" , cpuCores ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private boolean isStorageDomainValid ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.ImageFileType imageType , boolean forceRefresh ) { if ( storageDomainId == null ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.error ( "Storage domain ID received from command query is null." ) ; return false ; } if ( forceRefresh ) { return refreshRepos ( storageDomainId , imageType ) ; } return true ; }
public void endStepJob ( org.ovirt.engine.core.common.job.Step step ) { getJobRepository ( ) . updateStep ( step ) ; org.ovirt.engine.core.bll.job.ExecutionContext finalContext = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance ( ) . createFinalizingContext ( step.getId ( ) ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance ( ) . endTaskStepAndJob ( finalContext , isTaskSuccess ( step.getStatus ( ) ) ) ; }
private static org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice ( org.ovirt.engine.core.compat.Guid deviceId , org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , java.lang.String device , boolean isManaged ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( deviceId , vmId ) , type , device , "" , java.util.Collections.emptyMap ( ) , isManaged , true , false , "" , java.util.Collections.emptyMap ( ) , null , null ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( cModel == null ) { return ; } else { cModel.stopProgress ( ) ; if ( ! ( result.getReturnValue ( ) . getSucceeded ( ) ) ) { cModel.setActionConfirmationMessage ( result.getReturnValue ( ) . getFault ( ) . getMessage ( ) ) ; } else { setWindow ( null ) ; } } }
public void testLogEntryLogsWhenLogLevelActive ( ) throws java.lang.Exception { java.lang.String id = "" ; org.slf4j.Logger log = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.mockito.Mockito.when ( log.isDebugEnabled ( ) ) . thenReturn ( true ) ; org.ovirt.engine.core.utils.log.LoggedUtils.logEntry ( log , id , new org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedOverridingSubclass ( ) ) ; org.mockito.Mockito.verify ( log ) . debug ( org.mockito.ArgumentMatchers.eq ( LoggedUtils.ENTRY_LOG ) , new java.lang.Object [ ] { org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.eq ( id ) } ) ; }
private void initCommand ( ) { org.mockito.Mockito.doReturn ( executor ) . when ( command ) . createHostFenceActionExecutor ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.FencingPolicy.class ) ) ; command.setClusterId ( org.ovirt.engine.core.bll.pm.StartVdsCommandTest.FENCECD_HOST_CLUSTER_ID ) ; }
protected void updateIsDiskHotPlugAvailable ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; org.ovirt.engine.core.compat.Version clusterCompatibilityVersion = vm.getVdsGroupCompatibilityVersion ( ) ; if ( clusterCompatibilityVersion == null ) { setIsDiskHotPlugSupported ( false ) ; } else { setIsDiskHotPlugSupported ( ( ( java.lang.Boolean ) ( ! ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDiskHotpluggableInterfaces ( getEntity ( ) . getOs ( ) , clusterCompatibilityVersion ) . isEmpty ( ) ) ) ) ) ; } }
private org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > setupCanAddVmTests ( final int domainSizeGB ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB ) ; org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = createCommand ( vm ) ; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods ( cmd ) ; org.mockito.Mockito.doReturn ( createVmTemplate ( ) ) . when ( cmd ) . getVmTemplate ( ) ; org.mockito.Mockito.doReturn ( createStoragePool ( ) ) . when ( cmd ) . getStoragePool ( ) ; return cmd ; }
public static void copySerialNumber ( org.ovirt.engine.api.model.SerialNumber serialNumber , org.ovirt.engine.core.common.businessentities.HasSerialNumberPolicy entity ) { if ( serialNumber.isSetPolicy ( ) ) { entity.setSerialNumberPolicy ( org.ovirt.engine.api.restapi.types.SerialNumberMapper.map ( serialNumber.getPolicy ( ) , null ) ) ; } if ( serialNumber.isSetValue ( ) ) { java.lang.String customSerialNumber = ( "" . equals ( serialNumber.getValue ( ) ) ) ? null : serialNumber.getValue ( ) ; entity.setCustomSerialNumber ( customSerialNumber ) ; } }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > mapDisks ( org.ovirt.engine.api.model.Disks disks ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages = null ; if ( ( disks != null ) && ( disks.isSetDisks ( ) ) ) { diskImages = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; for ( org.ovirt.engine.api.model.Disk disk : disks.getDisks ( ) ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( org.ovirt.engine.api.restapi.types.DiskMapper.map ( disk , null ) ) ) ; diskImages.add ( diskImage ) ; } } return diskImages ; }
public void updateDisksStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disksList ) { disk.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singletonList ( storageDomain.getId ( ) ) ) ) ; } updateDiskVolumeType ( storageDomain.getStorageType ( ) , disksList.get ( 0 ) ) ; }
public void fakeVlanNicWithVmNetworkDenied ( ) { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork ( "net1" ) ; org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork ( "net2" ) ; net2.setVlanId ( 100 ) ; mockExistingNetworks ( net1 , net2 ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork ( "nic0" , net1 ) ; mockExistingIfaces ( nic ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface fakeVlanNic = createVlan ( nic.getName ( ) , 100 , net2.getName ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , fakeVlanNic ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK , nic.getName ( ) ) ; }
public void refreshHost ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { refreshCapabilities ( new java.util.concurrent.atomic.AtomicBoolean ( ) , vds ) ; } finally { if ( vds != null ) { updateDynamicData ( vds.getDynamicData ( ) ) ; monitoringStrategy.processHardwareCapabilities ( vds ) ; org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . handleVdsVersion ( vds.getId ( ) ) ; } } }
private void removeVmStatelessImages ( ) { if ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getSnapshotDAO ( ) . exists ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) , SnapshotType.STATELESS ) ) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.infoFormat ( "Deleting snapshot for stateless vm {0}" , org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , new org.ovirt.engine.core.common.action.VmOperationParameterBase ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getContext ( ) , org.ovirt.engine.core.bll.ProcessDownVmCommand.getLock ( ) ) ) ; } }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult a ) { stopProgress ( a.getState ( ) ) ; cancel ( ) ; }
private boolean updateIsoListFromVDSM ( org.ovirt.engine.core.compat.Guid repoStoragePoolId , org.ovirt.engine.core.compat.Guid repoStorageDomainId , java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > fileStats ) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed = new org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed ( ) { @ java.lang.Override public void onFileListRefreshed ( org.ovirt.engine.core.compat.Guid poolId , java.util.Set < java.lang.String > isoList ) { org.ovirt.engine.core.bll.VmHandler.refreshVmsToolsVersion ( poolId , isoList ) ; } } ; return refreshVdsmFileList ( repoStoragePoolId , repoStorageDomainId , ImageFileType.ISO , fileStats , fileListRefreshed ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean.TRUE ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > snapshots = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( returnValue ) ) ; if ( snapshotModel.showWarningForByVmSnapshotsValidation ( snapshots ) ) { snapshotModel.getCommands ( ) . add ( getCloseCommand ( ) ) ; snapshotModel.StopProgress ( ) ; } else { snapshotModel.initVmDisks ( ) ; } }
public void testDiskLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk disk = new org.ovirt.engine.api.model.Disk ( ) ; disk.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.DISK_ID ) ; disk.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; disk.getVm ( ) . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( disk ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.DISK_HREF , disk.getHref ( ) ) ; }
public static void fillImagesBySnapshots ( org.ovirt.engine.core.common.businessentities.VM vm ) { for ( org.ovirt.engine.core.common.businessentities.Disk disk : vm.getDiskMap ( ) . values ( ) ) { if ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( disk ) ) ; diskImage.getSnapshots ( ) . addAll ( org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots ( diskImage.getImageId ( ) ) ) ; } } }
public < T > T pickRandom ( java.util.Collection < T > c ) { int elementIndex = nextInt ( c.size ( ) ) ; java.util.Iterator < T > iter = c.iterator ( ) ; for ( int i = 0 ; i < elementIndex ; ++ i ) { iter.next ( ) ; } return iter.next ( ) ; }
protected boolean validate ( ) { if ( ( org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm ( ) ) == null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; } if ( ( org.ovirt.engine.core.bll.VmSlaPolicyCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) { return org.ovirt.engine.core.bll.VmSlaPolicyCommand.failVmStatusIllegal ( ) ; } return true ; }
public void shouldValidateSingleNodePinning ( ) { vm.setvNumaNodeList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 0 , java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVdsNumaNode ( 1 ) ) ) ) ) ; vm.setNumaTuneMode ( NumaTuneMode.PREFERRED ) ; assertTrue ( org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
private void addVdsGroupId ( org.ovirt.engine.core.compat.Guid id , java.util.List < org.ovirt.engine.core.compat.NGuid > ids ) { ids.add ( id ) ; org.hibernate.Query query = getSession ( ) . createQuery ( "from VDSGroup where id = :id" ) ; query.setParameter ( "id" , id ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( query.uniqueResult ( ) ) ) ; if ( vdsGroup != null ) { ids.add ( vdsGroup.getStoragePoolId ( ) ) ; } }
public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.aaa.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.aaa.BackendGroupsResourceTest.QUERY , t ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.aaa.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } }
public void setSupportBridgesReportByVDSM ( ) { if ( ! ( this . isSupportBridgesReportByVDSM ) ) { initIsVm ( ) ; } getIsVmNetwork ( ) . setIsChangeable ( true ) ; this . isSupportBridgesReportByVDSM = true ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData createVmInternalData ( java.util.Map < java.lang.String , java.lang.Object > xmlRpcStruct ) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.vdsbroker.vdsbroker.ExtendedVmDynamic ( org.ovirt.engine.core.vdsbroker.vdsbroker.VmStatsVdsBrokerCommand.getVds ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData ( vmDynamic , xmlRpcStruct ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData ( vmDynamic , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMStatisticsData ( xmlRpcStruct ) , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVmGuestAgentInterfacesData ( vmDynamic.getId ( ) , xmlRpcStruct ) ) ; }
public void setupMock ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( stepDaoMock ) . when ( command ) . getStepDao ( ) ; org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.jobId ) ) . thenReturn ( makeExternalTestJob ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.jobId ) ) ; org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.nonExternalJobId ) ) . thenReturn ( makeNonExternalTestJob ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.nonExternalJobId ) ) ; }
private boolean hostEmulationModeMatchesTheConfigValues ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.String [ ] hostSupportedEmulatedMachines ) { java.lang.String matchedEmulatedMachine = org.ovirt.engine.core.common.utils.ListUtils.firstMatch ( org.ovirt.engine.core.common.config.Config.< java.util.List < java.lang.String > > GetValue ( ConfigValues.ClusterEmulatedMachines , vds.getVdsGroupCompatibilityVersion ( ) . getValue ( ) ) , hostSupportedEmulatedMachines ) ; if ( ( matchedEmulatedMachine != null ) && ( ! ( matchedEmulatedMachine.isEmpty ( ) ) ) ) { setClusterEmulatedMachine ( vds , matchedEmulatedMachine ) ; return true ; } return false ; }
public void onRemove ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = new java.util.ArrayList < > ( ) ; for ( T qos : sourceListModel.getSelectedItems ( ) ) { org.ovirt.engine.core.common.action.QosParametersBase < T > parameter = new org.ovirt.engine.core.common.action.QosParametersBase ( ) ; parameter.setQosId ( qos.getId ( ) ) ; parameters.add ( parameter ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( getRemoveActionType ( ) , parameters ) ; cancel ( ) ; }
public void testGetClustersByServiceAndCompatibilityVersion ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = dao.getClustersByServiceAndCompatibilityVersion ( true , false , "2.3" ) ; org.junit.Assert.assertNotNull ( clusters ) ; org.junit.Assert.assertEquals ( 1 , clusters.size ( ) ) ; org.junit.Assert.assertEquals ( FixturesTool.GLUSTER_CLUSTER_ID , clusters.get ( 0 ) . getId ( ) ) ; }
public org.ovirt.engine.api.model.NIC update ( org.ovirt.engine.api.model.NIC resource ) { validateParameters ( resource , requiredUpdateFields ) ; org.ovirt.engine.core.common.businessentities.network.Network network = findNetwork ( resource ) ; if ( network != null ) { resource.getNetwork ( ) . setName ( network.getname ( ) ) ; resource.getNetwork ( ) . setId ( null ) ; } return performUpdate ( resource , entityResolver , updateType , updateParametersProvider ) ; }
private java.lang.String getPublicEntity ( java.lang.String entityName ) { if ( this . entitiesMap.containsKey ( entityName.toLowerCase ( ) ) ) { return this . entitiesMap.get ( entityName.toLowerCase ( ) ) ; } throw new java.lang.RuntimeException ( ( ( "Public entity \"" + entityName ) + "\" fetch has failed." ) ) ; }
public void validateEnums ( org.ovirt.engine.api.model.DataCenter dataCenter ) { if ( dataCenter != null ) { if ( dataCenter.isSetStorageFormat ( ) ) { org.ovirt.engine.api.common.util.EnumValidator.validateEnum ( org.ovirt.engine.api.model.StorageFormat.class , dataCenter.getStorageFormat ( ) , true ) ; } if ( dataCenter.isSetQuotaMode ( ) ) { org.ovirt.engine.api.common.util.EnumValidator.validateEnum ( org.ovirt.engine.api.model.QuotaModeType.class , dataCenter.getQuotaMode ( ) , true ) ; } } }
public void setUp ( ) { tested = org.mockito.Mockito.spy ( new org.ovirt.engine.ui.common.system.ClientStorageImpl ( ) { @ java.lang.Override void initStorage ( ) { } } ) ; org.mockito.Mockito.doNothing ( ) . when ( tested ) . setLocalItemImpl ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doNothing ( ) . when ( tested ) . setSessionItemImpl ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setSize ( org.ovirt.engine.core.bll.memory.MemoryUtils.METADATA_SIZE_IN_BYTES ) ; image.setVolumeType ( VolumeType.Preallocated ) ; image.setvolumeFormat ( VolumeFormat.RAW ) ; return image ; }
private void networkNameTest ( org.ovirt.engine.core.bll.ValidationResult expected , boolean networkLinkingSupported , java.lang.String networkName ) { mockConfigRule.mockConfigValue ( ConfigValues.NetworkLinkingSupported , version , networkLinkingSupported ) ; org.mockito.Mockito.when ( nic.getNetworkName ( ) ) . thenReturn ( networkName ) ; org.junit.Assert.assertEquals ( expected , validator.networkNameValid ( ) ) ; }
public void validateFailsForDeviceAlreadyInUse ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice ( "sda" , null ) ; storageDevice.setCanCreateBrick ( false ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays.asList ( storageDevice ) ) , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testListCrash ( ) throws java.lang.Exception { java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpDiskProfilesQueryExpectations ( t ) ; javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest.setUpUriExpectations ( null ) ; collection.setUriInfo ( uriInfo ) ; try { org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest.getCollection ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendDiskProfilesResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , t ) ; } }
public void storagePoolIdWithStorageDomain ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; b.setStoragePoolId ( null ) ; b.setStoragePool ( null ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain s = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; s.setStoragePoolId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setStorageDomain ( s ) ; final org.ovirt.engine.core.compat.NGuid n = b.getStoragePoolId ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , n ) ; }
protected org.ovirt.engine.core.bll.ValidationResult validateImagesForRunVm ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > vmDisks ) { if ( vmDisks.isEmpty ( ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return ! ( vm.isAutoStartup ( ) ) ? new org.ovirt.engine.core.bll.validator.DiskImagesValidator ( vmDisks ) . diskImagesNotLocked ( ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > mockVfsOnNetDevice ( int numOfVfs ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > vfs = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < numOfVfs ; ++ i ) { org.ovirt.engine.core.common.businessentities.HostDevice vfPciDevice = new org.ovirt.engine.core.common.businessentities.HostDevice ( ) ; vfPciDevice.setParentPhysicalFunction ( pciDevice.getDeviceName ( ) ) ; vfPciDevice.setDeviceName ( java.lang.String.valueOf ( i ) ) ; vfPciDevice.setHostId ( org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelperImplTest.HOST_ID ) ; vfs.add ( vfPciDevice ) ; } return vfs ; }
public void testRemoveNotFound ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetAllNetworksByClusterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public org.ovirt.engine.core.dal.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { if ( ( ( getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) && ( ! ( memoryChecker.evaluate ( vds , getVm ( ) ) ) ) ) { sb.append ( "has insufficient memory to run the VM" ) ; return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_MEMORY ; } return null ; }
public void passwordProvidedForHostInstallation ( ) { validator = createValidatorForHostInstallation ( ) ; org.junit.Assert.assertThat ( validator.passwordProvidedForHostInstallation ( AuthenticationMethod.Password , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateHostIsReadyToRun ( final org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { sb.append ( " VDS " ) . append ( vds.getName ( ) ) . append ( " " ) . append ( vds.getId ( ) ) . append ( " " ) ; for ( org.ovirt.engine.core.bll.VdsSelector.HostValidator validator : this . hostValidators ) { org.ovirt.engine.core.dal.VdcBllMessages result = validator.validate ( vds , sb , isMigrate ) ; if ( result != null ) { return new org.ovirt.engine.core.bll.ValidationResult ( result ) ; } } return ValidationResult.VALID ; }
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB , final int sizeRequired ) { mockVmTemplateDAOReturnVmTemplate ( ) ; mockDiskImageDAOGetSnapshotById ( ) ; mockStorageDomainDAOGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDAOGet ( domainSizeGB ) ; mockConfig ( ) ; mockConfigSizeRequirements ( sizeRequired ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest.createVm ( ) ; return vm ; }
public void setClientPolicy ( org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy ) { this . validate ( policy ) ; this . policy = policy ; }
private void changeStatus ( org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters parameters , org.ovirt.engine.core.common.businessentities.VM curVm ) { if ( org.ovirt.engine.core.vdsbroker.DestroyVmVDSCommand.getParameters ( ) . getVdsId ( ) . equals ( curVm.getRunOnVds ( ) ) ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . InternalSetVmStatus ( curVm , ( parameters.getGracefully ( ) ? org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown : org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ; } }
public void testLiveSnapshotWhenNoPluggedDiskSnapshot ( ) { org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . isLiveSnapshotApplicable ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . isEmpty ( ) ) ; }
public void render ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.resources.client.ImageResource value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { if ( value != null ) { sb.append ( org.ovirt.engine.ui.common.widget.table.cell.ImageResourceCell.template.imageContainerWithStyleClass ( style , styleClass , com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( value ) . getHTML ( ) ) ) ) ; } }
public org.ovirt.engine.core.common.businessentities.storage_pool_iso_map runInTransaction ( ) { org.ovirt.engine.core.common.businessentities.storage_pool_iso_map domainPoolMap = new org.ovirt.engine.core.common.businessentities.storage_pool_iso_map ( getRecoveryStoragePoolParametersData ( ) . getNewMasterDomainId ( ) , getRecoveryStoragePoolParametersData ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . save ( domainPoolMap ) ; return domainPoolMap ; }
public void testCleanExpiredUsersSessionsNoUsers ( ) { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ; container.cleanExpiredUsersSessions ( ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNull ( "Get should return null since the session was removed" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.mockito.Mockito.verifyZeroInteractions ( dbUserDAOMcok ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.InitVdsOnUpCommand.getVdsGroup ( ) ; if ( vdsGroup.supportsVirtService ( ) ) { org.ovirt.engine.core.bll.InitVdsOnUpCommand.setSucceeded ( initVirtResources ( ) ) ; } if ( vdsGroup.supportsGlusterService ( ) ) { org.ovirt.engine.core.bll.InitVdsOnUpCommand.setSucceeded ( initGlusterPeerProcess ( ) ) ; } }
private org.ovirt.engine.core.common.businessentities.VDS uniteAgentsSingleVds ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList ) { java.util.List < org.ovirt.engine.core.common.businessentities.FenceAgent > agents = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : vdsList ) { agents.addAll ( vds.getFenceAgents ( ) ) ; } org.ovirt.engine.core.common.businessentities.VDS vds = vdsList.get ( 0 ) ; vds.setFenceAgents ( agents ) ; return vds ; }
public void setUp ( ) { super . setUp ( ) ; vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setStatus ( VMStatus.Down ) ; org.mockito.Mockito.when ( vmDao.getVmsListForDisk ( getDiskImageId ( ) , java.lang.Boolean.FALSE ) ) . thenReturn ( java.util.Collections.singletonList ( vm ) ) ; org.mockito.Mockito.doReturn ( vmDao ) . when ( cmd ) . getVmDao ( ) ; }
public void init ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { setDiskImages ( diskImages ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel moveDiskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > diskImages = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; moveDiskModel.onInitAllDisks ( diskImages ) ; moveDiskModel.onInitDisks ( ) ; } } ) ) ; }
public void disableGlusterWhenVolumesExist ( ) { createCommandWithVirtEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDAO.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; cpuExists ( ) ; cpuFlagsNotMissing ( ) ; allQueriesEmpty ( ) ; clusterHasGlusterVolumes ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES ) ; }
private void updateDcLabels ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getNetworkLabelsByDataCenterId ( getSelectedDc ( ) . getId ( ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String label = getNetworkLabel ( ) . getSelectedItem ( ) ; getNetworkLabel ( ) . setItems ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; getNetworkLabel ( ) . setSelectedItem ( label ) ; onExportChanged ( ) ; } } ) ) ; }
public void dontSyncNetworkOnDefaultMtu ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork ( "net" ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork ( "nic0" , net ) ; nic.setMtu ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextInt ( ) ) ; mockExistingNetworks ( net ) ; mockExistingIfaces ( nic ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForSync ( nic ) ) ; validateAndAssertNoChanges ( helper ) ; }
public void testGetIdsForOvfDeletionTwoToDelete ( ) { vmDao.remove ( FixturesTool.VM_RHEL5_POOL_50 ) ; vmDao.remove ( FixturesTool.VM_RHEL5_POOL_51 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > guidsToDelete = vmAndTemplatesGenerationsDao.getIdsForOvfDeletion ( FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER ) ; org.junit.Assert.assertEquals ( "there should be 2 ovfs for deletion" , 2 , guidsToDelete.size ( ) ) ; org.junit.Assert.assertTrue ( "the list of guids for deletion doesn't contain an expected guid" , guidsToDelete.contains ( FixturesTool.VM_RHEL5_POOL_50 ) ) ; org.junit.Assert.assertTrue ( "the list of guids for deletion doesn't contain an expected guid" , guidsToDelete.contains ( FixturesTool.VM_RHEL5_POOL_51 ) ) ; }
private void logDeviceInformation ( org.ovirt.engine.core.compat.Guid vmId , java.util.Map device ) { java.lang.String message = "Received a {0} Device without an address when processing VM {1} devices, skipping device" ; java.lang.String deviceType = org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.getDeviceType ( device ) ; if ( shouldLogDeviceDetails ( deviceType ) ) { java.util.Map < java.lang.String , java.lang.Object > deviceInfo = device ; org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.infoFormat ( ( message + ": {2}" ) , org.apache.commons.lang.StringUtils.defaultString ( deviceType ) , vmId , deviceInfo ) ; } else { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.infoFormat ( message , org.apache.commons.lang.StringUtils.defaultString ( deviceType ) , vmId ) ; } }
public java.util.ArrayList < java.lang.Integer > get64bitOss ( ) { java.util.ArrayList < java.lang.Integer > oss = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int osId : getOsIds ( ) ) { java.lang.String bus = getValueByVersion ( idToUnameLookup.get ( osId ) , "bus" , null ) ; if ( "64" . equalsIgnoreCase ( bus ) ) { oss.add ( osId ) ; } } return oss ; }
public void testIsQcowV3SupportedForDcVersionV4 ( ) { disk1.setVolumeFormat ( VolumeFormat.COW ) ; disk1.setQcowCompat ( QcowCompat.QCOW2_V3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool sp = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; sp.setStoragePoolFormatType ( StorageFormatType.V4 ) ; org.mockito.Mockito.when ( storagePoolDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( sp ) ; org.junit.Assert.assertThat ( validator.isQcowVersionSupportedForDcVersion ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void mockVds ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; command.setVdsId ( Guid.Empty ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( command ) . getVdsDao ( ) ; org.mockito.Mockito.when ( vdsDao.get ( Guid.Empty ) ) . thenReturn ( vds ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.Network n ) { if ( ( n.getvlan_id ( ) ) != null ) { return ( n.getvlan_id ( ) . equals ( getParameters ( ) . getNetwork ( ) . getvlan_id ( ) ) ) && ( n.getstorage_pool_id ( ) . equals ( getParameters ( ) . getNetwork ( ) . getstorage_pool_id ( ) ) ) ; } return false ; }
public long nextLong ( long l ) { if ( l <= 0 ) { throw new java.lang.IllegalArgumentException ( "l must be greater than 0!" ) ; } long rand = nextLong ( ) ; if ( rand == ( java.lang.Long.MIN_VALUE ) ) { rand ++ ; } return ( java.lang.Math.abs ( rand ) ) % l ; }
public void validateSameSourceAndDest ( ) { destStorageId = srcStorageId ; initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; command.getParameters ( ) . setStorageDomainId ( destStorageId ) ; command.setStorageDomainId ( destStorageId ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME ) ; }
private boolean evaluateHostUpgradeInternalCommandProgress ( java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds , org.ovirt.engine.core.bll.CommandBase < ? > rootCommand ) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand ( childCmdIds ) ; if ( upgradeCommand == null ) { return false ; } switch ( upgradeCommand.getCommandStatus ( ) ) { case ACTIVE : case NOT_STARTED : return false ; case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus ( CommandStatus.FAILED ) ; return true ; case SUCCEEDED : rootCommand.setCommandStatus ( CommandStatus.SUCCEEDED ) ; return true ; } return true ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.NewEditStorageModelBehavior behavior = this ; org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel storageModelItem = item ; behavior.postUpdateItemsAvailability ( storageModelItem , ( returnValue == null ) ) ; }
public void setCoresPerSocket ( java.lang.String value ) { if ( ( ( coresPerSocket ) == null ) && ( value == null ) ) { return ; } if ( ( ( coresPerSocket ) == null ) || ( ! ( coresPerSocket.equals ( value ) ) ) ) { coresPerSocket = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "CoresPerSocket" ) ) ; } }
public void setUp ( ) throws java.lang.Exception { validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.provider.RemoveProviderCommand.RemoveProviderValidator ( vmDao , networkDao , provider ) ) ; org.mockito.Mockito.when ( networkDao.getAllForProvider ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( networks ) ; }
public void testBadGuidValidation ( ) throws java.lang.Exception { setUpGetEntityExpectations ( false ) ; org.ovirt.engine.api.model.Host host = new org.ovirt.engine.api.model.Host ( ) ; host.setCluster ( new org.ovirt.engine.api.model.Cluster ( ) ) ; host.getCluster ( ) . setId ( "!!!" ) ; resource.update ( host ) ; }
protected void onBind ( ) { super . onBind ( ) ; org.ovirt.engine.ui.common.widget.table.OrderedMultiSelectionModel < ? > tableSelectionModel = ( ( getTable ( ) ) != null ) ? getTable ( ) . getSelectionModel ( ) : null ; if ( tableSelectionModel != null ) { registerHandler ( tableSelectionModel.addSelectionChangeHandler ( new com.google.gwt.view.client.SelectionChangeEvent.Handler ( ) { @ java.lang.Override public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { updateDetailModelSelection ( ) ; } } ) ) ; } }
public void testAddExistingBlockDomainSuccessfully ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest.getLUNs ( ) ) . when ( command ) . getLUNsFromVgInfo ( parameters.getStorageDomain ( ) . getStorage ( ) ) ; command.executeCommand ( ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getSucceeded ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createNicSyncedWithNetwork ( java.lang.String nicName , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , nicName , false , null , null , network.getVlanId ( ) , network.getName ( ) , network.isVmNetwork ( ) , network.getAddr ( ) , false , null ) ; return nic ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice ( org.ovirt.engine.core.compat.Guid vmGuid ) { return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmGuid ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , "floppy" , "type:'drive', controller:'0', bus:'0', unit:'1'" , new java.util.HashMap < > ( ) , true , false , false , "alias" , java.util.Collections.singletonMap ( "prop1" , "value1" ) , null , null ) ; }
public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate ( java.lang.Object value ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ( ) ; if ( ( ( value != null ) && ( value instanceof java.lang.String ) ) && ( ( ( ( java.lang.String ) ( value ) ) . length ( ) ) > ( getMaxLength ( ) ) ) ) { result.setSuccess ( false ) ; result.getReasons ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . lenValidationFieldMusnotExceed ( getMaxLength ( ) ) ) ; } return result ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk.setId ( diskId ) ; java.util.Collections.singletonList ( storageId ) ; disk.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singletonList ( storageId ) ) ) ; return disk ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsInterfacesByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.setUpInterfaces ( ) , failure ) ; control.replay ( ) ; }
private static java.lang.Boolean AssignBoolValue ( java.util.Map < java.lang.String , java.lang.Object > input , java.lang.String name ) { if ( input.containsKey ( name ) ) { if ( ( input.get ( name ) ) instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( input.get ( name ) ) ) ; } return java.lang.Boolean.parseBoolean ( input.get ( name ) . toString ( ) ) ; } return null ; }
public void testVirtIsMonitoringNeeded ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setStatus ( VDSStatus.NonOperational ) ; org.junit.Assert.assertTrue ( virtStrategy.isMonitoringNeeded ( vds ) ) ; vds.setStatus ( VDSStatus.Up ) ; org.junit.Assert.assertTrue ( virtStrategy.isMonitoringNeeded ( vds ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > storagePools = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.storage_pool storagePool = ( ( storagePools.size ( ) ) > 0 ) ? storagePools.get ( 0 ) : null ; vmListModel.PostGetTemplatesNotPresentOnExportDomain ( storagePool ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ; java.util.Collections.sort ( templates , new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateComparator ( ) ) ; setItems ( templates ) ; setIsEmpty ( ( ( templates.size ( ) ) == 0 ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; initializeImages ( ) ; imagesIds = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getIds ( ) ) . thenReturn ( imagesIds ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.NetworkLabel model = new org.ovirt.engine.api.model.NetworkLabel ( ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "NetworkLabel" , "add" , "id" ) ; } }
public void testCannotUpdateOSNotSupportVirtioScsi ( ) { prepareVmToPassValidate ( ) ; group.setCompatibilityVersion ( Version.v3_6 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . isVirtioScsiEnabledForVm ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.bll.UpdateVmCommandTest.osRepository.getDiskInterfaces ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( "VirtIO" ) ) ; command.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI ) ; }
public void vdsNonOperational ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , boolean logCommand , org.ovirt.engine.core.compat.Guid domainId , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { org.ovirt.engine.core.bll.job.ExecutionHandler.updateSpecificActionJobCompleted ( vdsId , VdcActionType.MaintenanceVds , false ) ; org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters tempVar = new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( vdsId , reason , customLogValues ) ; tempVar.setStorageDomainId ( domainId ) ; tempVar.setShouldBeLogged ( logCommand ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.SetNonOperationalVds , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; }
public void validateSpaceNotEnough ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( storageDomainValidator ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.Assert.assertFalse ( cmd.validateSpaceRequirements ( ) ) ; org.mockito.Mockito.verify ( storageDomainValidator ) . hasSpaceForNewDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( storageDomainValidator , org.mockito.Mockito.never ( ) ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public static void getGlusterHook ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , boolean includeServerHooks ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( hookId , includeServerHooks ) , aQuery ) ; }
protected org.ovirt.engine.core.bll.validator.StorageDomainValidator getStorageDomainValidator ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.StorageDomainValidator > entry ) { if ( ( entry.getValue ( ) ) == null ) { entry.setValue ( new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( getStorageDomainDAO ( ) . getForStoragePool ( entry.getKey ( ) , storagePoolId ) ) ) ; } return entry.getValue ( ) ; }
public void executeCommand ( ) { super . executeCommand ( ) ; if ( org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.isImagesAlreadyOnTarget ( ) ) { org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getUnregisteredOVFDataDao ( ) . removeEntity ( ovfEntityData.getEntityId ( ) , null ) ; } setActionReturnValue ( org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getVmTemplate ( ) . getId ( ) ) ; }
public void checkStorageDomainNotEqualWithStatusActive ( ) { setStorageDomainStatus ( StorageDomainStatus.Active ) ; org.junit.Assert.assertFalse ( cmd.checkStorageDomainStatusNotEqual ( StorageDomainStatus.Active ) ) ; java.util.List < java.lang.String > messages = cmd.getReturnValue ( ) . getValidationMessages ( ) ; org.junit.Assert.assertEquals ( 2 , messages.size ( ) ) ; org.junit.Assert.assertEquals ( messages.get ( 0 ) , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString ( ) ) ; org.junit.Assert.assertEquals ( messages.get ( 1 ) , java.lang.String.format ( "$status %1$s" , StorageDomainStatus.Active ) ) ; }
public java.lang.String createSnapshot ( final org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { return execute ( new java.util.concurrent.Callable < java.lang.String > ( ) { @ java.lang.Override public java.lang.String call ( ) { com.woorea.openstack.cinder.model.SnapshotForCreate snapshotForCreate = new com.woorea.openstack.cinder.model.SnapshotForCreate ( ) ; snapshotForCreate.setVolumeId ( cinderDisk.getId ( ) . toString ( ) ) ; return proxy.createSnapshot ( snapshotForCreate ) ; } } ) ; }
public void executeCommandWhenFailed ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeId2 , 0 ) ) ; prepareMocks ( cmd ) ; mockBackend ( false , EngineError.GlusterVolumeRemoveBricksStartFailed ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS_FAILED ) ; }
public org.ovirt.engine.core.common.businessentities.BootSequence getSequence ( ) { java.lang.StringBuilder str = new java.lang.StringBuilder ( ) ; for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel a : getItems ( ) ) { if ( a.getIsChangable ( ) ) { org.ovirt.engine.core.common.businessentities.BootSequence bs = ( ( org.ovirt.engine.core.common.businessentities.BootSequence ) ( a.getEntity ( ) ) ) ; str.append ( bs.toString ( ) ) ; } } return ! ( str.toString ( ) . equals ( "" ) ) ? org.ovirt.engine.core.common.businessentities.BootSequence.valueOf ( str.toString ( ) ) : null ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; model.dataCenter = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; if ( ( ( model.dataCenter ) == null ) || ( ( model.dataCenter.getstorage_pool_type ( ) ) != ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) ) { model.UpdateOptionsNonLocalFSData ( ) ; } else { model.UpdateOptionsLocalFSData ( ) ; } }
public void setEntity ( org.ovirt.engine.core.common.businessentities.VDS value ) { if ( ( super . getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDS currentItem = super . getEntity ( ) ; org.ovirt.engine.core.compat.Guid currentItemId = currentItem.getId ( ) ; org.ovirt.engine.core.compat.Guid newItemId = value.getId ( ) ; if ( currentItemId.equals ( newItemId ) ) { setEntity ( value , false ) ; updateActionAvailability ( ) ; return ; } } super . setEntity ( value ) ; }
public void vmTemplateNameWithVm ( ) { final org.ovirt.engine.core.common.businessentities.VM v = new org.ovirt.engine.core.common.businessentities.VM ( ) ; b.setVm ( v ) ; final java.lang.String n = b.getVmTemplateName ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME , n ) ; }
public static void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
public void edit ( ) { final org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = ( ( org.ovirt.engine.core.common.businessentities.network.NetworkQoS ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkQoSModel networkQoSModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkQoSModel ( networkQoS , this , getEntity ( ) ) ; setWindow ( networkQoSModel ) ; networkQoSModel.getDataCenters ( ) . setItems ( java.util.Arrays.asList ( getEntity ( ) ) ) ; networkQoSModel.getDataCenters ( ) . setSelectedItem ( getEntity ( ) ) ; }
private java.util.List < org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter > getUpdatedStorageQuotaListParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter > ( ) ; list.add ( new org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter ( getQuotaId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters ( ) . getDiskInfo ( ) ) ) . getstorage_ids ( ) . get ( 0 ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters ( ) . getDiskInfo ( ) ) ) . getSizeInGigabytes ( ) ) ) ; return list ; }
protected void doChangeDefautlHost ( org.ovirt.engine.core.compat.Guid hostGuid ) { if ( hostGuid != null ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( hostGuid.getValue ( ) ) ; getModel ( ) . getDefaultHost ( ) . setItems ( java.util.Arrays.asList ( vds ) ) ; } super . doChangeDefautlHost ( hostGuid ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.NIC incoming , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = map ( incoming , entity ) ; return new org.ovirt.engine.core.common.action.AddVmInterfaceParameters ( parentId , nic ) ; }
private void mockDiskImageDao ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskImageList = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setStorageIds ( new java.util.ArrayList ( java.util.Arrays.asList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ) ; diskImageList.add ( diskImage ) ; org.mockito.Mockito.doReturn ( diskDao ) . when ( spyCommand ) . getDiskDao ( ) ; org.mockito.Mockito.when ( diskDao.getAllForVm ( vmId ) ) . thenReturn ( diskImageList ) ; }
public org.ovirt.engine.api.v3.types.V3SerialNumber adapt ( org.ovirt.engine.api.model.SerialNumber from ) { org.ovirt.engine.api.v3.types.V3SerialNumber to = new org.ovirt.engine.api.v3.types.V3SerialNumber ( ) ; if ( from.isSetPolicy ( ) ) { to.setPolicy ( from.getPolicy ( ) . value ( ) ) ; } if ( from.isSetValue ( ) ) { to.setValue ( from.getValue ( ) ) ; } return to ; }
protected void lockEntities ( ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( getSnapshot ( ) ) ; getSnapshotDao ( ) . updateStatus ( sourceSnapshotId , SnapshotStatus.LOCKED ) ; lockVmWithCompensationIfNeeded ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; } } ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.freeLock ( ) ; }
public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . ExecuteCommand ( command ) ; OnExecute ( ) ; }
public void updateNonExistingConnection ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data2" , StorageType.NFS , NfsVersion.V4 , 300 , 0 ) ; org.mockito.Mockito.when ( storageConnDao.get ( newNFSConnection.getId ( ) ) ) . thenReturn ( null ) ; parameters.setStorageServerConnection ( newNFSConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST ) ; }
protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable < org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel > createActionTable ( ) { return new org.ovirt.engine.ui.userportal.widget.table.column.UserPortalSimpleActionTable < org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel > ( modelProvider , getTableResources ( ) , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.getEventBus ( ) , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.getClientStorage ( ) , new org.ovirt.engine.ui.userportal.widget.refresh.UserPortalRefreshManager ( modelProvider , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.getEventBus ( ) , org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.getClientStorage ( ) ) ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createImage ( ) { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; diskImage.setstorage_ids ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) ; return diskImage ; }
protected org.ovirt.engine.core.common.businessentities.storage.BaseDisk generateNewEntity ( ) { org.ovirt.engine.core.common.businessentities.storage.BaseDisk d = new org.ovirt.engine.core.common.businessentities.storage.BaseDisk ( ) ; d.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; d.setWipeAfterDelete ( true ) ; d.setPropagateErrors ( PropagateErrors.Off ) ; d.setDiskAlias ( "DiskName" ) ; d.setSgio ( ScsiGenericIO.FILTERED ) ; return d ; }
public static void init ( ) throws java.io.IOException { java.lang.String QUARTZ_DB_TEST_PROPERTIES = "ovirt-db-scheduler-test.properties" ; java.util.Properties props = org.ovirt.engine.core.utils.ResourceUtils.loadProperties ( org.ovirt.engine.core.utils.timer.SchedulerUtil.class , QUARTZ_DB_TEST_PROPERTIES ) ; org.ovirt.engine.core.utils.timer.DBSchedulerUtilQuartzImplTest.scheduler = new org.ovirt.engine.core.utils.timer.DBSchedulerUtilQuartzImpl ( ) ; org.ovirt.engine.core.utils.timer.DBSchedulerUtilQuartzImplTest.scheduler.setup ( props ) ; }
public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest.setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpVnicProfilesQueryExpectations ( t ) ; collection.setUriInfo ( uriInfo ) ; try { org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest.getCollection ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales.clear ( ) ; } }
private boolean deviceCanBeRemoved ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { if ( ! ( vmDevice.getDevice ( ) . equals ( VmDeviceType.DISK.getName ( ) ) ) ) { return true ; } if ( ( vmDevice.getSnapshotId ( ) ) == null ) { org.ovirt.engine.core.common.businessentities.Disk disk = getDiskDao ( ) . get ( vmDevice.getDeviceId ( ) ) ; return ( disk != null ) && ( disk.isAllowSnapshot ( ) ) ; } return false ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getRefreshCommand ( ) ) ) { refreshModel ( ) ; updatePagingAvailability ( ) ; } else if ( command == ( getDetailsCommand ( ) ) ) { details ( ) ; } else if ( "Cancel" . equals ( command.getName ( ) ) ) { cancel ( ) ; } }
public boolean flush ( ) { if ( validate ( ) ) { diskModel.flush ( ) ; ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getDiskModel ( ) . getDisk ( ) ) ) . setVolumeFormat ( getVolumeFormat ( ) . getSelectedItem ( ) ) ; return true ; } return false ; }
public static java.util.List < java.lang.String > assertCanDoActionMessages ( java.lang.String assertionMessage , org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.errors.VdcBllMessages message ) { java.util.List < java.lang.String > canDoActionMessages = command.getReturnValue ( ) . getCanDoActionMessages ( ) ; org.junit.Assert.assertTrue ( java.text.MessageFormat.format ( "{0}canDoAction messages doesn''t contain expected message: {1}, messages are: {2}" , org.ovirt.engine.core.bll.CanDoActionTestUtils.optionalMessage ( assertionMessage ) , message.name ( ) , canDoActionMessages ) , canDoActionMessages.contains ( message.name ( ) ) ) ; return canDoActionMessages ; }
public int compare ( org.ovirt.engine.api.model.Network n1 , org.ovirt.engine.api.model.Network n2 ) { if ( n1.getId ( ) . equals ( n2.getId ( ) ) ) { return 0 ; } else { return n1.getId ( ) . compareTo ( n2.getId ( ) ) ; } }
public void compensate ( ) { revertTask ( ) ; org.ovirt.engine.core.common.vdscommands.VDSCommandType revertCommandType = getRevertVDSCommandType ( ) ; if ( revertCommandType != null ) { addTask ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( getRevertVDSCommandType ( ) , getRevertVDSParameters ( ) ) , true ) ; } }
protected void handleAutoLogin ( org.ovirt.engine.ui.common.auth.AutoLoginData autoLoginData ) { final org.ovirt.engine.core.common.users.VdcUser vdcUser = autoLoginData.getVdcUser ( ) ; com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { lockInteractionManager.showLoadingIndicator ( ) ; getLoginModel ( ) . AutoLogin ( vdcUser ) ; } } ) ; user.setAutoLogin ( true ) ; }
private static boolean vmAssignedToUser ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < java.lang.String > messages ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . getAllForVm ( vmId ) . size ( ) ) > 0 ) { messages.add ( EngineMessage.VM_POOL_CANNOT_ADD_VM_WITH_USERS_ATTACHED_TO_POOL.toString ( ) ) ; return true ; } return false ; }
public void onSaveNetworkConfig ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow ( ) ) ) ; if ( ( model.getProgress ( ) ) != null ) { return ; } model.startProgress ( ) ; setcurrentModel ( model ) ; new org.ovirt.engine.ui.uicommonweb.models.hosts.SaveNetworkConfigAction ( this , model , getEntity ( ) ) . execute ( ) ; }
static org.ovirt.engine.api.model.Event getModel ( int index ) { org.ovirt.engine.api.model.Event model = new org.ovirt.engine.api.model.Event ( ) ; model.setId ( java.lang.String.valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; model.setSeverity ( LogSeverity.ALERT ) ; model.setDescription ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; model.setOrigin ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; model.setCustomId ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; model.setFloodRate ( 30 ) ; return model ; }
protected void executeQueryCommand ( ) { java.lang.String version = org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery.getParameters ( ) . getVersion ( ) ; org.ovirt.engine.core.utils.pm.VdsFenceOptions options = new org.ovirt.engine.core.utils.pm.VdsFenceOptions ( version ) ; java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.String > > map = options.getFenceOptionMappingMap ( ) ; org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery.getQueryReturnValue ( ) . setReturnValue ( map ) ; org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery.getQueryReturnValue ( ) . setSucceeded ( ( ( map.size ( ) ) > 0 ) ) ; }
private java.util.ArrayList < java.lang.String > trimElements ( java.lang.String ... elements ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( elements.length ) ; for ( java.lang.String e : elements ) { e = e.trim ( ) ; if ( ( e.length ( ) ) > 0 ) { list.add ( e ) ; } } return list ; }
public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap entity = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; entity.setstorage_id ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "storage_id" ) ) ) ; entity.setstorage_pool_id ( org.ovirt.engine.core.compat.NGuid.createGuidFromString ( rs.getString ( "storage_pool_id" ) ) ) ; entity.setstatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.forValue ( rs.getInt ( "status" ) ) ) ; return entity ; }
public void executeCommand ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) ) ; setupMocks ( ) ; org.mockito.Mockito.doNothing ( ) . when ( hookSyncJob ) . refreshHooksInCluster ( getVdsGroup ( ) , true ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_HOOK_REFRESH ) ; }
public static void isStorageDomainNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return storageDomains.isEmpty ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Storage: name=" + name ) , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.Linq.Sort ( storageDomains , new org.ovirt.engine.ui.uicommonweb.Linq.StorageDomainByNameComparer ( ) ) ; setStorageDomains ( storageDomains ) ; setItems ( model.value ) ; }
public void refreshLightWeightData ( ) { log.debug ( "Refreshing Gluster Data [lightweight]" ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = getClusterDao ( ) . getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { if ( cluster.supportsGlusterService ( ) ) { try { refreshClusterData ( cluster ) ; } catch ( java.lang.Exception e ) { log.errorFormat ( "Error while refreshing Gluster lightweight data of cluster {0}!" , cluster.getName ( ) , e ) ; } } } }
public void canDoActionFailedWrongPlugStatus ( ) throws java.lang.Exception { mockVmStatusUp ( ) ; cretaeDiskWrongPlug ( true ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED.toString ( ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.GraphicsDevice map ( org.ovirt.engine.api.model.GraphicsConsole graphicsConsole , org.ovirt.engine.core.common.businessentities.GraphicsDevice template ) { if ( template != null ) { return template ; } switch ( graphicsConsole.getProtocol ( ) ) { case SPICE : return new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.SPICE ) ; case VNC : return new org.ovirt.engine.core.common.businessentities.GraphicsDevice ( org.ovirt.engine.core.common.utils.VmDeviceType.VNC ) ; default : return template ; } }
public void testGetEntityNameByIdAndTypeForVM ( ) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = dbFacade.getVmStaticDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.VM_ID ) ; org.junit.Assert.assertNotNull ( vmStatic ) ; java.lang.String name = vmStatic.getName ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.VM_STATIC_GUID , VdcObjectType.VM ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.scheduling.ClusterPolicy > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.scheduling.ClusterPolicy > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPolicyComparator ( ) ) ; setItems ( list ) ; }
protected void selectDataCenterWithCluster ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.compat.Guid selectedCluster , java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster > dataCentersWithClusters ) { if ( selectedCluster == null ) { getDataCenterWithClustersList ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( dataCentersWithClusters ) ) ; } else { model.getDataCenterWithClustersList ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( dataCentersWithClusters , new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterWithClusterAccordingClusterPredicate ( selectedCluster ) ) ) ; } }
public static org.ovirt.engine.core.common.businessentities.VmDevice addNetworkInterfaceDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , boolean plugged ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( id , VmDeviceGeneralType.INTERFACE , VmDeviceType.BRIDGE , java.util.Collections.< java.lang.String , java.lang.Object > emptyMap ( ) , plugged , false , null ) ; }
public static void initUniqueOsNames ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.uniqueOsNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.uniqueOsNames ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetUniqueOsNames ) , callback ) ; }
private static void shuffle ( java.lang.reflect.Method method , java.lang.Object model ) throws java.lang.Exception { java.lang.Class < ? extends java.lang.Enum > enumType = ( ( java.lang.Class < ? extends java.lang.Enum > ) ( method.getParameterTypes ( ) [ 0 ] ) ) ; method.invoke ( model , org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( enumType ) ) ; }
public synchronized void StopStoragePoolTasks ( final org.ovirt.engine.core.common.businessentities.StoragePool sp ) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat ( "Attempting to get and stop tasks on storage pool '{0}'" , sp.getName ( ) ) ; AddStoragePoolExistingTasks ( sp ) ; java.util.List < org.ovirt.engine.core.bll.SPMAsyncTask > list = org.ovirt.engine.core.utils.linq.LinqUtils.filter ( _tasks.values ( ) , new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.bll.SPMAsyncTask > ( ) { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.bll.SPMAsyncTask a ) { return a.getStoragePoolID ( ) . equals ( sp.getId ( ) ) ; } } ) ; for ( org.ovirt.engine.core.bll.SPMAsyncTask task : list ) { task.stopTask ( ) ; } }
private void processSingleClusterChanges ( org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param ) { final org.ovirt.engine.core.bll.network.cluster.transformer.NetworkClustersToSetupNetworksParametersTransformer networkClustersToSetupNetworksParametersTransformer = networkClustersToSetupNetworksParametersTransformerFactory.createNetworkClustersToSetupNetworksParametersTransformer ( getContext ( ) ) ; final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > setupNetworksParams = new java.util.ArrayList < > ( ) ; setupNetworksParams.addAll ( networkClustersToSetupNetworksParametersTransformer.transform ( param.getAttachments ( ) , param.getDetachments ( ) ) ) ; org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing ( setupNetworksParams ) ; runInternalMultipleActions ( VdcActionType.PersistentHostSetupNetworks , setupNetworksParams ) ; }
public static org.ovirt.engine.core.compat.RpmVersion getOvirtHostOsVersion ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { return new org.ovirt.engine.core.compat.RpmVersion ( vds.getHostOs ( ) , "RHEV Hypervisor -" , true ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.VdsHandler.log.errorFormat ( "Failed to parse version of Host {0},{1} and Host OS '{2}' with error {3}" , vds.getId ( ) , vds.getName ( ) , vds.getHostOs ( ) , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( e ) ) ; } return null ; }
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > getClustersToAttach ( ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > clusterToAttach = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel > ( ) ; for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getNetworkClusterList ( ) . getItems ( ) ) { if ( networkClusterModel.isAttached ( ) ) { clusterToAttach.add ( networkClusterModel ) ; } } return clusterToAttach ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > snapshotsList = org.ovirt.engine.core.bll.GetAllVmSnapshotsByVmIdQuery.getDbFacade ( ) . getSnapshotDao ( ) . getAll ( org.ovirt.engine.core.bll.GetAllVmSnapshotsByVmIdQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.GetAllVmSnapshotsByVmIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.GetAllVmSnapshotsByVmIdQuery.getParameters ( ) . isFiltered ( ) ) ; org.ovirt.engine.core.bll.GetAllVmSnapshotsByVmIdQuery.getQueryReturnValue ( ) . setReturnValue ( snapshotsList ) ; }
public static org.ovirt.engine.core.common.job.Step addTaskStep ( org.ovirt.engine.core.bll.job.ExecutionContext context , org.ovirt.engine.core.common.job.StepEnum stepName , java.lang.String description ) { if ( context == null ) { return null ; } org.ovirt.engine.core.common.job.Step step = null ; if ( context.isTasksMonitored ( ) ) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep ( ) ; if ( parentTaskStep != null ) { step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep ( parentTaskStep , stepName , description ) ; } } return step ; }
protected boolean checkImagesStatus ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksToCheck = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getDiskDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVmId ( ) ) , true , false , true ) ; org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( disksToCheck ) ; return validate ( diskImagesValidator.diskImagesNotLocked ( ) ) ; }
public void getHugePagesNoHugePagesDefined ( ) { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase ( ) ; base.setMemSizeMb ( 1 ) ; org.hamcrest.MatcherAssert.assertThat ( org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages ( base ) . size ( ) , org.hamcrest.core.Is.is ( 0 ) ) ; }
private void mockDAOForQuery ( ) { org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getQuotaDao ( ) ) . thenReturn ( quotaDAO ) ; returnedQuotas = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > ( ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getAdElementId ( ) ) . thenReturn ( adElementId ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getStoragePoolId ( ) ) . thenReturn ( storagePoolId ) ; org.mockito.Mockito.when ( quotaDAO.getQuotaByAdElementId ( adElementId , storagePoolId , false ) ) . thenReturn ( returnedQuotas ) ; }
protected void executeVmCommand ( ) { if ( ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { org.ovirt.engine.core.bll.VmHandler.LockVm ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) . getDynamicData ( ) , org.ovirt.engine.core.bll.RemoveVmCommand.getCompensationContext ( ) ) ; } org.ovirt.engine.core.bll.RemoveVmCommand.freeLock ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.setSucceeded ( removeVm ( ) ) ; }
public void testGetCurrent ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , "current" ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( getVm ( ) ) ; org.ovirt.engine.api.model.Cdrom cdrom = resource.get ( ) ; verifyModelWithCurrentCd ( cdrom ) ; }
