void loadMetaZone ( android.icu.impl.ICUResourceBundle zoneStrings , java.lang.String mzID ) { java.lang.String key = ( android.icu.impl.TimeZoneNamesImpl.MZ_PREFIX ) + mzID ; loadNames ( zoneStrings , key ) ; }
public boolean setWifiEnabled ( boolean enabled ) { try { return mService.setWifiEnabled ( mContext.getOpPackageName ( ) , enabled ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
com.google.common.collect.Multiset.Entry < E > getEntry ( int index ) { throw new java.lang.AssertionError ( "should never be called" ) ; }
public void executeExpectingFailure ( @ com.android.annotations.NonNull java.util.List < java.lang.String > arguments , java.lang.String ... tasks ) { execute ( arguments , false , false , com.android.build.gradle.integration.common.fixture.GradleTestProject.ExpectedBuildResult.FAILURE , tasks ) ; }
public void testFlagFManifestA ( ) { installFromRawResource ( "install.apk" , R.raw.install_loc_auto , PackageManager.INSTALL_FORWARD_LOCK , true , false , ( - 1 ) , PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL ) ; }
public static native java.lang.String SSL_SESSION_get_version ( long sslSessionNativePointer ) ;
native boolean nIncLoadSO ( int deviceApi ) ;
public static double DoubleSubtraction ( ) { double a ; double b ; double c ; a = Main.$inline$double ( 6.0 ) ; b = Main.$inline$double ( 2.0 ) ; c = a - b ; return c ; }
public void enter ( ) { mWifiStateTracker.updateState ( WifiStateTracker.INVALID ) ; cleanup ( ) ; }
public void removeProfile ( com.android.bluetooth.btservice.ProfileService profile ) { synchronized ( mProfiles ) { mProfiles.remove ( profile ) ; } }
public static void asInts ( byte [ ] x , int [ ] z ) { org.bouncycastle.util.Pack.bigEndianToInt ( x , 0 , z ) ; }
protected void onStop ( ) { super . onStop ( ) ; android.util.Log.d ( com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG , ( "onStop: state=" + ( com.android.cts.verifier.usb.UsbAccessoryTestActivity.stateToString ( mState ) ) ) ) ; closeAccessory ( ) ; }
public java.util.Collection < java.lang.Class < ? extends com.android.jack.api.JackConfig > > getSupportedConfigs ( ) { return com.android.jack.api.impl.JackProviderImpl.impl.keySet ( ) ; }
public void removeRegistrationListener ( com.android.ims.internal.IImsRegistrationListener listener ) { }
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { copy1DRangeFromUnchecked ( off , count , ( ( java.lang.Object ) ( d ) ) , Element.DataType.SIGNED_8 , d.length ) ; }
android.net.ip.IpReachabilityMonitor makeMonitor ( ) { final android.net.util.InterfaceParams ifParams = new android.net.util.InterfaceParams ( "fake0" , 1 , null ) ; return new android.net.ip.IpReachabilityMonitor ( ifParams , mHandler , mLog , mCallback , null , mDependencies ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( "EnumConstantLocator{" + "typeLocator=" ) + ( typeLocator ) ) + ", constantName='" ) + ( constantName ) ) + '\'' ) + '}' ; }
public java.lang.String toCanonicalString ( ) { return original.toCanonicalString ( ) ; }
public static void wtf ( java.lang.Object objectPrefix , java.lang.Throwable tr , java.lang.String format , java.lang.Object ... args ) { android.util.Slog.wtf ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) , tr ) ; }
public static float abs ( float a ) { return java.lang.Math.abs ( a ) ; }
private static com.android.build.SplitOutput getUniversalOutput ( int versionCode ) { return new com.android.ide.common.build.SplitOutputMatcherTest.FakeSplitOutput ( null , null , versionCode ) ; }
static int $opt$LongToInt ( long a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( int ) ( a ) ) ; }
public void removeRecordedProgram ( com.android.tv.dvr.data.RecordedProgram scheduledRecording ) { mRecordedPrograms.remove ( scheduledRecording.getId ( ) ) ; notifyRecordedProgramsRemoved ( scheduledRecording ) ; }
public void close ( ) throws android.system.ErrnoException { if ( ! ( closed ) ) { closed = true ; Libcore.os.munmap ( address , size ) ; } }
public static < V > com.google.common.util.concurrent.ListenableFuture < java.util.List < V > > successfulAsList ( com.google.common.util.concurrent.ListenableFuture < ? extends V > ... futures ) { return com.google.common.util.concurrent.Futures.listFuture ( com.google.common.collect.ImmutableList.copyOf ( futures ) , false , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; }
public android.telephony.ims.feature.MMTelFeature onCreateMMTelImsFeature ( int slotId ) { return null ; }
public com.android.jack.ir.ast.JAnnotationType getType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pack , @ javax.annotation.Nonnull java.lang.String simpleName ) { return pack.getPhantomAnnotationType ( simpleName ) ; }
private native void setShort ( java.lang.Object object , short value , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata getMetadataForRegion ( java.lang.String regionCode ) { synchronized ( regionToMetadataMap ) { if ( ! ( regionToMetadataMap.containsKey ( regionCode ) ) ) { loadMetadataFromFile ( currentFilePrefix , regionCode , 0 , metadataLoader ) ; } } return regionToMetadataMap.get ( regionCode ) ; }
public com.android.ide.common.resources.configuration.FolderConfiguration getConfiguration ( ) { java.lang.String qualifier = getQualifiers ( ) ; if ( qualifier.isEmpty ( ) ) { return new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; } return com.android.ide.common.resources.configuration.FolderConfiguration.getConfigForQualifierString ( qualifier ) ; }
protected void connect ( java.net.InetAddress address , int port ) throws java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; connect0 ( address , port ) ; connectedAddress = address ; connectedPort = port ; connected = true ; }
public void sendMessage ( @ android.annotation.NonNull android.net.wifi.aware.WifiAwareManager.PeerHandle peerHandle , int messageId , @ android.annotation.Nullable byte [ ] message ) { sendMessage ( peerHandle , messageId , message , 0 ) ; }
public void visitLookupSwitchInsn ( org.objectweb.asm.Label dflt , int [ ] keys , org.objectweb.asm.Label [ ] labels ) { printer.visitLookupSwitchInsn ( dflt , keys , labels ) ; printTypeOfOperandStack ( ) ; super . visitLookupSwitchInsn ( dflt , keys , labels ) ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsShortShortShort args ) { args.out = android.renderscript.cts.CoreMathVerifier.maxI16 ( args.inV1 , args.inV2 ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; script_f32 = new android.renderscript.cts.ScriptC_remainder_f32 ( mRS ) ; }
public int poll ( android.system.StructPollfd [ ] fds , int timeoutMs ) throws android.system.ErrnoException { return os.poll ( fds , timeoutMs ) ; }
public boolean setLastModifiedTime ( java.io.File f , long time ) { dalvik.system.BlockGuard.getThreadPolicy ( ) . onWriteToDisk ( ) ; return setLastModifiedTime0 ( f , time ) ; }
public void dispose ( java.lang.String appName , int subscriptionId ) throws android.os.RemoteException { }
public void enableDiscovery ( com.android.nfc.NfcDiscoveryParameters params , boolean restart ) { doEnableDiscovery ( params.getTechMask ( ) , params.shouldEnableLowPowerDiscovery ( ) , params.shouldEnableReaderMode ( ) , params.shouldEnableP2p ( ) , restart ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mHasTelephony = getContext ( ) . getPackageManager ( ) . hasSystemFeature ( PackageManager.FEATURE_TELEPHONY ) ; }
public void testAdd2 ( ) { java.util.Set full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; full.add ( one ) ; assertEquals ( 3 , full.size ( ) ) ; }
public org.objectweb.asm.tree.AbstractInsnNode clone ( final java.util.Map < org.objectweb.asm.tree.LabelNode , org.objectweb.asm.tree.LabelNode > labels ) { return new org.objectweb.asm.tree.JumpInsnNode ( opcode , clone ( label , labels ) ) . cloneAnnotations ( this ) ; }
public void testDisconnectCause ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } org.junit.Assert.assertThat ( mCall.getDetails ( ) . getDisconnectCause ( ) , org.hamcrest.CoreMatchers.instanceOf ( android.telecom.DisconnectCause.class ) ) ; }
public final double getDouble ( int index ) { checkIsAccessible ( ) ; checkIndex ( index , SizeOf.DOUBLE ) ; return java.lang.Double.longBitsToDouble ( this . block.peekLong ( ( ( offset ) + index ) , order ) ) ; }
protected java.io.File downloadFile ( com.android.sdklib.internal.repository.Archive archive , java.lang.String osSdkRoot , com.android.sdklib.internal.repository.DownloadCache cache , com.android.sdklib.internal.repository.ITaskMonitor monitor , boolean forceHttp ) { java.io.File file = mDownloadMap.get ( archive ) ; this . mFile.recordExistingFile ( file ) ; return file ; }
public void startCaptivePortalApp ( android.net.Network network ) { try { mService.startCaptivePortalApp ( network ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void setBounds ( int startInd , int endInd ) { if ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.GetFolderList.STATE_TAG , ( ( ( "startInd " + startInd ) + " endInd " ) + endInd ) ) ; } mStartInd = startInd ; mEndInd = endInd ; }
public static int $noinline$floatToDoubleToInt ( float value ) { return ( ( int ) ( ( double ) ( value ) ) ) ; }
public java.util.Set < java.lang.String > getApplicationFilters ( ) { return ( ( include ) == null ) || ( ! ( enable ) ) ? new java.util.HashSet < java.lang.String > ( ) : include ; }
public int hashCode ( ) { int result = 17 ; result = ( 31 * result ) + ( ( int ) ( ( mHandle ) ^ ( ( mHandle ) > > > 32 ) ) ) ; return result ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { mWipeData = wipeButton.getSelection ( ) ; updateSnapshotLaunchAvailability ( ) ; }
native void rsnScriptForEach ( long con , long incCon , long id , int slot , long ain , long aout , byte [ ] params , boolean mUseInc ) ;
public static int $noinline$Xor0 ( int arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg ^ 0 ; }
private static byte [ ] generateAdditionalAttributes ( com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig ) { if ( ( signerConfig.mSigningCertificateLineage ) == null ) { return new byte [ 0 ] ; } return signerConfig.mSigningCertificateLineage.generateV3SignerAttribute ( ) ; }
public com.android.ide.eclipse.ddms.IDebuggerConnector [ ] getDebuggerConnectors ( ) { return mDebuggerConnectors ; }
public android.net.wifi.aware.LvBufferUtils.LvConstructor putByte ( byte b ) { mTlvImpl.putByte ( 0 , b ) ; return this ; }
public static void w ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.WARN ) { android.util.Slog.w ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public void onResult ( byte [ ] result ) { try { callback.onComplete ( EuiccCardManager.RESULT_OK , result ) ; } catch ( android.os.RemoteException exception ) { throw exception.rethrowFromSystemServer ( ) ; } }
public void notifyChange ( android.net.Uri uri , android.database.ContentObserver observer , boolean syncToNetwork , int userHandle ) { ( notifyChangeCount ) ++ ; if ( com.android.providers.telephony.TelephonyProviderTest.URL_RESTOREAPN_USING_SUBID.equals ( uri ) ) { ( notifyChangeRestoreCount ) ++ ; } }
public void handshakeCompleted ( ) { if ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.DEBUG ) { java.lang.System.out.println ( ( ( "ssl=0x" + ( java.lang.Long.toString ( sslNativePointer , 16 ) ) ) + " handshakeCompleted" ) ) ; } this . handshakeCompletedCalled = true ; }
public com.android.build.gradle.integration.common.fixture.GradleTestProject create ( ) { return new com.android.build.gradle.integration.common.fixture.GradleTestProject ( name , testProject , experimentalMode , ( experimentalMode ? com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_EXP_TEST_VERSION : com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_TEST_VERSION ) , captureStdOut , captureStdErr ) ; }
public void testGetNonStartedScheduledRecordings ( ) { com.android.tv.dvr.data.ScheduledRecording recording = mDvrDataManager.addScheduledRecordingInternal ( createNewScheduledRecordingStartingNow ( ) ) ; java.util.List < com.android.tv.dvr.data.ScheduledRecording > result = mDvrDataManager.getNonStartedScheduledRecordings ( ) ; android.test.MoreAsserts.assertContentsInAnyOrder ( result , recording ) ; }
abstract void getUnchecked ( int pos , long [ ] dst , int dstOffset , int length ) ;
public void reloadFromXmlNode ( org.w3c.dom.Node xml_node ) { com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor = getEditor ( ) ; clearContent ( ) ; setEditor ( editor ) ; if ( xml_node != null ) { setXmlDocument ( xml_node.getOwnerDocument ( ) ) ; } loadFromXmlNode ( xml_node ) ; }
public void onRemovingChildren ( @ com.android.annotations.NonNull java.util.List < com.android.ide.common.api.INode > deleted , @ com.android.annotations.NonNull com.android.ide.common.api.INode parent , boolean moved ) { super . onRemovingChildren ( deleted , parent , moved ) ; com.android.ide.common.layout.grid.GridModel grid = com.android.ide.common.layout.grid.GridModel.get ( mRulesEngine , parent , null ) ; grid.onDeleted ( deleted ) ; }
public void test_until_TemporalUnit_nullUnit ( ) { tck.java.time.TCKInstant.TEST_12345_123456789.until ( tck.java.time.TCKInstant.TEST_12345_123456789 , null ) ; }
public < A extends java.lang.annotation.Annotation > A getAnnotation ( java.lang.Class < A > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return libcore.reflect.AnnotationAccess.getDeclaredAnnotation ( this , annotationType ) ; }
public void unregisterForIccRefresh ( android.os.Handler h ) { super . unregisterForIccRefresh ( h ) ; com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance ( ) . unregisterForIccRefresh ( h ) ; }
public void onClick ( android.view.View v ) { mPrivateHandler.removeCallbacks ( mZoomControlRunnable ) ; mPrivateHandler.postDelayed ( mZoomControlRunnable , android.webkit.WebView.ZOOM_CONTROLS_TIMEOUT ) ; zoomIn ( ) ; }
public void testTranslatedArrays ( ) throws java.lang.Exception { TranslationDetector.sCompleteRegions = true ; assertEquals ( "No warnings." , lintProject ( "res/values/translatedarrays.xml" , "res/values-cs/translatedarrays.xml" ) ) ; }
void infoLog ( java.lang.String msg ) { if ( com.android.bluetooth.btservice.AdapterState.DBG ) { android.util.Log.i ( com.android.bluetooth.btservice.AdapterState.TAG , ( ( ( android.bluetooth.BluetoothAdapter.nameForState ( getStateValue ( ) ) ) + " : " ) + msg ) ) ; } }
public static native double cosh ( double x ) ;
static void expect ( android.icu.text.Transliterator t , java.lang.String source , java.lang.String expectedResult ) { android.icu.dev.test.translit.TransliteratorTest.expect ( t , source , expectedResult , ( ( android.icu.text.Transliterator.Position ) ( null ) ) ) ; }
public boolean contains ( java.lang.String key ) { return contains ( key , android.security.KeyStore.UID_SELF ) ; }
private native byte getByte ( java.lang.Object object , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public static short $noinline$charToDoubleToShort ( char value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( ( double ) ( value ) ) ) ; }
public static byte checkedCast ( long value ) { if ( ( value > > ( java.lang.Byte.SIZE ) ) != 0 ) { throw new java.lang.IllegalArgumentException ( ( "Out of range: " + value ) ) ; } return ( ( byte ) ( value ) ) ; }
protected abstract java.lang.String getExtension ( ) ;
public static libcore.net.NetworkSecurityPolicy getInstance ( ) { return libcore.net.NetworkSecurityPolicy.instance ; }
final void putFloat ( int offset , float value ) { sun.nio.ch.NativeObject.unsafe.putFloat$ ( ( offset + ( address ) ) , value ) ; }
public java.lang.String getTypeDescription ( ) { return ( "a list of dependency android data in the format " + ( DependencyAndroidData.EXPECTED_FORMAT ) ) + "[,...]" ; }
public void test1 ( ) throws java.lang.Exception { mEnabled = com.google.common.collect.Sets.newHashSet ( PluralsDetector.MISSING , PluralsDetector.EXTRA ) ; assertEquals ( ( "" + ( ( ( "res/values-pl/plurals2.xml:3: Error: For locale \"pl\" (Polish) the following quantities should also be defined: many [MissingQuantity]\n" + " <plurals name=\"numberOfSongsAvailable\">\n" ) + " ^\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "res/values/plurals.xml" , "res/values/plurals2.xml" , "res/values-pl/plurals2.xml" ) ) ; }
public int getCompilerSubReleaseCode ( ) { return com.android.jack.Jack.getVersion ( ) . getSubReleaseCode ( ) ; }
public void addError ( junit.framework.Test test , java.lang.Throwable error ) { java.lang.System.out.println ( java.lang.String.format ( "failure:%s" , com.android.compatibility.dalvik.DalvikTestRunner.DalvikTestListener.stringify ( error ) ) ) ; }
public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( myPassCountCheckbox.isSelected ( ) ) { myConditionCheckbox.setSelected ( false ) ; } updateCheckboxes ( ) ; }
private void handleChannelChanged ( ) { if ( mStarted ) { if ( needToStop ( ) ) { stop ( ) ; } } else { if ( canStart ( ) ) { start ( ) ; } } }
static char $opt$ShortToChar ( short a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( char ) ( a ) ) ; }
public void registrationConnected ( ) { if ( com.android.ims.ImsManager.DBG ) { com.android.ims.ImsManager.log ( "registrationConnected ::" ) ; } if ( ( mListener ) != null ) { mListener.onImsConnected ( ServiceState.RIL_RADIO_TECHNOLOGY_UNKNOWN ) ; } }
public java.lang.String installId ( ) { if ( getRevision ( ) . isPreview ( ) ) { return com.android.sdklib.internal.repository.packages.PlatformToolPackage.INSTALL_ID_PREVIEW ; } else { return com.android.sdklib.internal.repository.packages.PlatformToolPackage.INSTALL_ID ; } }
public static com.google.gct.testing.CloudResultsAdapter getCloudResultsAdapter ( java.lang.String testRunId ) { return com.google.gct.testing.CloudTestConfigurationProviderImpl.testRunIdToCloudResultsAdapter.get ( testRunId ) ; }
public void testVroot ( ) throws java.lang.Exception { assertTrue ( android.security.cts.NativeCodeTest.doVrootTest ( ) ) ; }
java.util.Collection < com.android.builder.model.AndroidArtifactOutput > getOutputs ( ) ;
public void visitBlock ( com.android.dx.rop.code.BasicBlock b ) { reachableLabels.add ( b.getLabel ( ) ) ; }
public void onCallStateChanged ( com.android.server.telecom.Call call , int oldState , int newState ) { if ( call.isSelfManaged ( ) ) { android.telecom.Log.i ( this , "onExternalCallChanged: skipped self-managed %s" , call ) ; return ; } updateCall ( call ) ; }
public void setTrace ( @ com.android.annotations.NonNull com.android.tools.perflib.vmtrace.VmTraceData traceData , @ com.android.annotations.NonNull java.lang.String threadName , com.android.tools.perflib.vmtrace.ClockType renderClock ) { mTraceData = traceData ; displayThread ( threadName ) ; setRenderClock ( renderClock ) ; }
private static java.lang.String getDialogMessage ( com.android.internal.location.GpsNetInitiatedHandler.GpsNiNotification notif , android.content.Context context ) { return com.android.internal.location.GpsNetInitiatedHandler.getNotifMessage ( notif , context ) ; }
com.android.sched.util.location.Location getVDirLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent , @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return vfs.getVDirLocation ( parent.getWrappedDir ( ) , path ) ; }
public int setConfig ( int item , java.lang.String value ) { replaceConfig ( new com.android.phone.testapps.imstestapp.TestImsConfigImpl.ConfigItem ( item , value ) ) ; return ImsConfig.OperationStatusConstants.SUCCESS ; }
public com.android.ims.internal.IImsCallSession createCallSession ( android.telephony.ims.ImsCallProfile profile ) throws android.os.RemoteException { synchronized ( mLock ) { android.telephony.ims.stub.ImsCallSessionImplBase s = this . createCallSession ( profile ) ; return s != null ? s.getServiceImpl ( ) : null ; } }
public void visitAnyMethodrefConstant ( proguard.optimize.Clazz clazz , proguard.optimize.RefConstant methodrefConstant ) { recursive = targetMethod.equals ( methodrefConstant.referencedMember ) ; }
public void verifyParcelWithoutProtoPortMap ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; policy.setRequiredProtoPortMap ( null ) ; android.net.wifi.hotspot2.pps.PolicyTest.verifyParcel ( policy ) ; }
public void factory_ofEpochDay_belowMin ( ) { java.time.LocalDate.ofEpochDay ( ( ( tck.java.time.TCKLocalDate.MIN_VALID_EPOCHDAYS ) - 1 ) ) ; }
public java.lang.reflect.Type [ ] getGenericExceptionTypes ( ) { return libcore.reflect.Types.getTypeArray ( getMethodOrConstructorGenericInfoInternal ( ) . genericExceptionTypes , false ) ; }
public android.hardware.cts.helpers.sensoroperations.DelaySensorOperation clone ( ) { return new android.hardware.cts.helpers.sensoroperations.DelaySensorOperation ( mOperation.clone ( ) , mDelay , mTimeUnit ) ; }
private void onCall ( int call ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CALL ) ; event.valueInt = call ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
com.google.devtools.common.options.OptionsData.ExpansionData getExpansionDataForField ( com.google.devtools.common.options.OptionDefinition optionDefinition ) { com.google.devtools.common.options.OptionsData.ExpansionData result = expansionDataForFields.get ( optionDefinition ) ; return result != null ? result : com.google.devtools.common.options.OptionsData.EMPTY_EXPANSION_DATA ; }
private static com.android.sdklib.repository.PreciseRevision parseRevisionSilently ( java.lang.String versionString ) { try { return com.android.sdklib.repository.PreciseRevision.parseRevision ( versionString ) ; } catch ( java.lang.Throwable t ) { return null ; } }
public void sendSms ( int messageRef , java.lang.String format , java.lang.String smsc , boolean retry , byte [ ] pdu ) { synchronized ( mLock ) { this . sendSms ( messageRef , format , smsc , retry , pdu ) ; } }
public void findView_Ambiguous ( ) { android.view.View root = setUpViewHierarchy ( ) ; expectedException.expect ( android.support.test.espresso.AmbiguousViewMatcherException.class ) ; android.support.test.espresso.assertion.PositionAssertions.findView ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.widget.TextView.class ) , root ) ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > getAllModels ( boolean emulateStudio_1_0 ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection , emulateStudio_1_0 ) ; } finally { connection.close ( ) ; } }
public void testRefactor2 ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.renamepackage.TEST_PROJECT2 , "my.pkg.name" , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "[x] MainActivity.java - /testRefactor2/src/com/example/refactoringtest/MainActivity.java\n" ) + " @@ -7 +7\n" ) + " + import my.pkg.name.R;\n" ) + "\n" ) + "\n" ) + "[x] Make Manifest edits - /testRefactor2/AndroidManifest.xml\n" ) + " @@ -3 +3\n" ) + " - package=\"com.example.refactoringtest\"\n" ) + " + package=\"my.pkg.name\"\n" ) + " @@ -25 +25\n" ) + " - android:name=\".MainActivity2\"\n" ) + " + android:name=\"com.example.refactoringtest.MainActivity2\"" ) ) ) ; }
public java.nio.file.attribute.FileTime getLastModified ( ) throws com.android.sched.util.file.CannotGetModificationTimeException { assert ( file ) != null ; try { return java.nio.file.Files.getLastModifiedTime ( file.toPath ( ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.file.CannotGetModificationTimeException ( this , e ) ; } }
public void run ( ) { mScrollView.fling ( velocityX ) ; }
public void tearDown ( ) throws java.lang.Exception { if ( ! ( mTargetContext.getResources ( ) . getBoolean ( R.bool.profile_supported_pbap ) ) ) { return ; } mHandlerThread.quitSafely ( ) ; com.android.bluetooth.TestUtils.clearAdapterService ( mAdapterService ) ; }
public com.google.common.collect.ImmutableList < com.android.dialer.precall.PreCallAction > getActions ( ) { return com.google.common.collect.ImmutableList.of ( new com.android.dialer.precall.impl.PermissionCheckAction ( ) , new com.android.dialer.precall.impl.CallingAccountSelector ( ) , new com.android.dialer.precall.impl.AssistedDialAction ( ) ) ; }
public final double getDouble ( int index ) { checkNotFreed ( ) ; checkIndex ( index , SizeOf.DOUBLE ) ; return java.lang.Double.longBitsToDouble ( this . block.peekLong ( ( ( offset ) + index ) , order ) ) ; }
public com.android.sched.util.codec.OutputStreamCodec allowStandardOutputOrError ( ) { this . allowStandardIO = true ; this . allowStandardError = true ; return this ; }
synchronized long nScriptInvokeIDCreate ( long sid , int slot ) { validate ( ) ; return rsnScriptInvokeIDCreate ( mContext , sid , slot ) ; }
public java.lang.String telephonyGetCallState ( ) { return telephonyGetCallStateForSubscription ( android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
private void ensureCapacityInternal ( int minCapacity ) { if ( ( elementData ) == ( java.util.ArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA ) ) { minCapacity = java.lang.Math.max ( java.util.ArrayList.DEFAULT_CAPACITY , minCapacity ) ; } ensureExplicitCapacity ( minCapacity ) ; }
private boolean isLive ( ) { return ( ! ( markerRef.isEnqueued ( ) ) ) || ( ( org.apache.harmony.jpda.tests.share.GcMarker.mCount ) > 0 ) ; }
public java.lang.String getAbi ( ) { return com.android.compatibility.common.util.ModuleResult.parseId ( mId ) [ 0 ] ; }
native void rsnIncContextFinish ( long con ) ;
public com.google.dexmaker.stock.ProxyBuilder < T > dexCache ( java.io.File dexCacheParent ) { dexCache = new java.io.File ( dexCacheParent , ( "v" + ( java.lang.Integer.toString ( com.google.dexmaker.stock.ProxyBuilder.VERSION ) ) ) ) ; dexCache.mkdir ( ) ; return this ; }
public java.util.Iterator < com.android.jack.ir.ast.JMethod > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) throws java.lang.Exception { return new java.util.ArrayList < com.android.jack.ir.ast.JMethod > ( declaredType.getMethods ( ) ) . iterator ( ) ; }
public boolean startRinging ( ) { return mRinger.startRinging ( mForegroundCall , mCallAudioRouteStateMachine.isHfpDeviceAvailable ( ) ) ; }
public void testFailOnClearedUpClientId ( ) throws java.lang.Exception { int clientId = doConnect ( ) ; mDut.disconnect ( clientId , mBinderMock ) ; org.mockito.Mockito.verify ( mAwareStateManagerMock ) . disconnect ( clientId ) ; validateInternalStateCleanedUp ( clientId ) ; mDut.disconnect ( clientId , mBinderMock ) ; }
public void testInvalidReferenceValidator ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String input = "" + ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <permission android:name=\"permissionOne\" " ) + " android:permissionGroup=\"permissionGroupOne\"/>\n" ) + "\n" ) + " <permission-group android:name=\"permissionGroupXXX\" " ) + " android:label=\"@res/foo\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument xmlDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "testInvalidReferenceValidator" ) , input ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mILogger ) ; com.android.manifmerger.PostValidator.validate ( xmlDocument , mergingReportBuilder ) ; for ( com.android.manifmerger.MergingReport.Record record : mergingReportBuilder.build ( ) . getLoggingRecords ( ) ) { java.util.logging.Logger.getAnonymousLogger ( ) . severe ( record.toString ( ) ) ; if ( ( ( record.getSeverity ( ) ) == ( MergingReport.Record.Severity.ERROR ) ) && ( record.toString ( ) . contains ( "PostValidatorTest#testInvalidReferenceValidator:6:55 " ) ) ) { return ; } } fail ( "No reference to faulty PostValidatorTest#testInvalidReferenceValidator:6 found" ) ; }
private static native long getNativeBBinderHolder ( ) ;
public void execute ( @ com.android.annotations.NonNull java.util.List < java.lang.String > arguments , java.lang.String ... tasks ) { execute ( arguments , false , false , com.android.build.gradle.integration.common.fixture.GradleTestProject.ExpectedBuildResult.SUCCESS , tasks ) ; }
public void setRttMode ( java.lang.String callId , int mode ) { try { mAdapter.setRttMode ( callId , mode ) ; } catch ( android.os.RemoteException ignored ) { } }
public void onSetProtocol ( android.bluetooth.BluetoothDevice device , byte protocol ) { android.util.Log.d ( android.bluetooth.BluetoothHidDeviceCallback.TAG , ( ( ( "onSetProtocol: device=" + device ) + " protocol=" ) + protocol ) ) ; }
public java.lang.String [ ] saw ( java.lang.String name , int uid ) throws android.os.RemoteException ;
public void run ( ) { mDrawable = mContext.getResources ( ) . getDrawable ( android.R.drawable.btn_default ) ; mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setIcon ( android.R.drawable.btn_default ) ; mDialog = mBuilder.show ( ) ; }
private static void doFollowReferencesTestNonRoot ( java.util.ArrayList < java.lang.Object > tmpStorage ) { Main.Verifier v = new Main.Verifier ( ) ; Main.tagClasses ( v ) ; Main.A a = Main.createTree ( v ) ; tmpStorage.add ( a ) ; v.add ( "0@0" , "1@1000" ) ; Main.doFollowReferencesTestImpl ( null , java.lang.Integer.MAX_VALUE , ( - 1 ) , null , v , null ) ; Main.doFollowReferencesTestImpl ( a.foo2 , java.lang.Integer.MAX_VALUE , ( - 1 ) , null , v , "3@1001" ) ; tmpStorage.clear ( ) ; }
static void asLongs ( byte [ ] x , long [ ] z ) { org.bouncycastle.util.Pack.bigEndianToLong ( x , 0 , z ) ; }
void addResourceValue ( com.android.resources.ResourceType type , com.android.ide.common.rendering.api.ResourceValue value ) ;
private com.google.common.base.Objects.ToStringHelper addHolder ( java.lang.String name , @ javax.annotation.Nullable java.lang.Object value ) { com.google.common.base.Objects.ToStringHelper.ValueHolder valueHolder = addHolder ( ) ; valueHolder.value = value ; valueHolder.name = com.google.common.base.Preconditions.checkNotNull ( name ) ; return this ; }
public static native int SSL_read_BIO ( long sslNativePointer , byte [ ] dest , int destOffset , int destLength , long sourceBioRef , long sinkBioRef , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc ) throws java.io.IOException ;
public static native double sinh ( double x ) ;
private void exportModule ( java.io.File destDir , com.android.tools.gradle.eclipse.ImportModule module ) throws java.io.IOException { mkdirs ( destDir ) ; createModuleBuildGradle ( new java.io.File ( destDir , FN_BUILD_GRADLE ) , module ) ; module.copyInto ( destDir ) ; }
public boolean perform ( ) { synchronized ( lock ) { try { lock.wait ( Main.TimedWait.SLEEP_TIME , 0 ) ; } catch ( java.lang.InterruptedException ignored ) { } } return true ; }
public void changedMode ( @ javax.annotation.Nonnull com.android.jack.server.ServerMode oldMode , @ javax.annotation.Nonnull com.android.jack.server.ServerMode newMode ) { freeLoadedPrograms ( ) ; }
public static void setDisabledForTests ( boolean disabled ) { if ( disabled && ( ( org.chromium.base.metrics.RecordHistogram.sDisabledBy ) != null ) ) { throw new java.lang.IllegalStateException ( "Histograms are already disabled." , org.chromium.base.metrics.RecordHistogram.sDisabledBy ) ; } org.chromium.base.metrics.RecordHistogram.sDisabledBy = ( disabled ) ? new java.lang.Throwable ( ) : null ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , android.telephony.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) { isCreateCallSessionCalled = true ; return null ; }
public com.android.ide.common.api.IValidator getResourceValidator ( java.lang.String resourceTypeName , boolean uniqueInProject , boolean uniqueInLayout , boolean exists , java.lang.String ... allowed ) { fail ( "Not supported in tests yet" ) ; return null ; }
public void testSendMessageQueueRandomize ( ) throws java.lang.Exception { com.android.server.wifi.aware.WifiAwareNative.Capabilities cap = com.android.server.wifi.aware.WifiAwareStateManagerTest.getCapabilities ( ) ; testSendMessageQueue ( com.android.server.wifi.aware.WifiAwareStateManagerTest.SendMessageAnswer.OP_QUEUE_RANDOMIZE , cap , ( ( cap.maxQueuedTransmitMessages ) * 10 ) ) ; }
protected static boolean assertNotNull ( java.lang.String message , java.lang.Object actual ) { return com.ibm.icu.dev.test.TestFmwk.handleAssert ( ( actual != null ) , message , null , com.ibm.icu.dev.test.TestFmwk.stringFor ( actual ) , "!=" , true ) ; }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.setEncapType ( android.net.IpSecTransform.ENCAP_ESPINUDP ) ; mConfig.setEncapSocketResourceId ( localSocket.getResourceId ( ) ) ; mConfig.setEncapRemotePort ( remotePort ) ; return this ; }
public void setUp ( ) throws java.lang.Exception { mWifiInjector = org.mockito.Mockito.mock ( com.android.server.wifi.WifiInjector.class ) ; mWifiMonitor = org.mockito.Mockito.mock ( com.android.server.wifi.WifiMonitor.class ) ; mWificondControl = new com.android.server.wifi.WificondControl ( mWifiInjector , mWifiMonitor ) ; }
public static long $noinline$Add0 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return 0 + arg ; }
public static void computeFmax ( android.renderscript.cts.TestFmax.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Math.max ( args.inX , args.inY ) , 0 , 0 ) ; }
static java.lang.StringBuilder newStringBuilderForCollection ( int size ) { com.google.common.collect.CollectPreconditions.checkNonnegative ( size , "size" ) ; return new java.lang.StringBuilder ( ( ( int ) ( java.lang.Math.min ( ( size * 8L ) , com.google.common.primitives.Ints.MAX_POWER_OF_TWO ) ) ) ) ; }
private static float $opt$noinline$NegFloat ( float a ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return - a ; }
public void testIntentExtras ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } org.junit.Assert.assertThat ( mCall.getDetails ( ) . getIntentExtras ( ) , org.hamcrest.CoreMatchers.instanceOf ( android.os.Bundle.class ) ) ; }
public void setVideoQuality ( int quality , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { getImsConfigImpl ( ) . setVideoQuality ( quality , listener ) ; }
public void close ( ) throws java.io.IOException { try { addDirToZip ( zipOS , getRootInputOutputVDir ( ) ) ; } finally { zipOS.close ( ) ; com.android.sched.util.file.FileUtils.deleteDir ( dir ) ; } }
public java.lang.String getStringFormTarget ( ) { return ( ( ( ( ( typeLocator.getStringFormTarget ( ) ) + "#" ) + ( methodName ) ) + "(" ) + ( parameterMatcher.toStringForm ( ) ) ) + ")" ; }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , android.os.Handler handler ) { int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler ( handler ) ; requestNetwork ( request , networkCallback , 0 , legacyType , cbHandler ) ; }
public boolean isNormalMoveInsn ( ) { return ( insn.getOpcode ( ) . getOpcode ( ) ) == ( com.android.dx.rop.code.RegOps.MOVE ) ; }
public static boolean isPhoneNumber ( java.lang.String number ) { if ( android.text.TextUtils.isEmpty ( number ) ) { return false ; } java.util.regex.Matcher match = Patterns.PHONE.matcher ( number ) ; return match.matches ( ) ; }
private static com.android.dialer.common.PerAccountSharedPreferences getPreferenceForActivationState ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccountHandle ) { return new com.android.dialer.common.PerAccountSharedPreferences ( context , phoneAccountHandle , com.android.dialer.storage.StorageComponent.get ( context ) . unencryptedSharedPrefs ( ) ) ; }
public void testConflictsKeepFirst ( ) throws java.lang.Exception { java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream ( ) ; runTestConflict ( "keep-first" , errOut , com.android.jack.test.toolchain.JackBasedToolchain.class ) ; junit.framework.Assert.assertEquals ( "" , errOut.toString ( ) ) ; }
public void flush ( ) throws java.io.IOException { check ( false ) ; flushBuffer ( ) ; }
public void addTo ( @ com.android.annotations.NonNull com.android.manifmerger.ActionRecorder actionRecorder , @ com.android.annotations.NonNull com.android.manifmerger.XmlDocument document , @ com.android.annotations.NonNull java.lang.String value ) { com.android.manifmerger.ManifestMerger2.SystemProperty.addToElementInAndroidNS ( this , actionRecorder , value , com.android.manifmerger.ManifestMerger2.SystemProperty.createOrGetUseSdk ( actionRecorder , document ) ) ; }
static void $noinline$staticMethod ( ) { if ( Main.ClassWithClinit6.doThrow ) { throw new java.lang.Error ( ) ; } }
public void visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedInterface definedInterface , @ javax.annotation.Nonnull com.android.sched.transform.TransformRequest transformRequest ) throws java.lang.Exception { visit ( ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( definedInterface ) ) , transformRequest ) ; }
synchronized void nAllocationRead ( long id , short [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public void setSimState ( java.lang.String state ) { int phoneId = getPhoneId ( ) ; setSimStateForPhone ( phoneId , state ) ; }
public void requestIsimAuthenticationResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String response ) { responseString ( responseInfo , response ) ; }
private void free ( ) { if ( ( sslNativePointer ) == 0 ) { return ; } org.conscrypt.NativeCrypto.SSL_free ( sslNativePointer ) ; sslNativePointer = 0 ; org.conscrypt.Platform.closeGuardClose ( guard ) ; }
public void test_F32_3_SCALE05_20_inRectangle ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inY , Element.DataType.FLOAT_32 , 3 , 0.5F , 2.0F ) ; checkError ( ) ; }
protected void resetRecords ( ) { mIsimImpi = null ; mIsimDomain = null ; mIsimImpu = null ; mIsimIst = null ; mIsimPcscf = null ; auth_rsp = null ; mRecordsRequested = false ; mLockedRecordsReqReason = LOCKED_RECORDS_REQ_REASON_NONE ; mLoaded.set ( false ) ; }
com.android.sched.vfs.MessageDigestFS.MessageDigestVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVDir ( this , parent.getWrappedDir ( ) . getVDir ( name ) ) ; }
private void write ( java.lang.String command ) throws java.io.IOException { ctrlOutput.write ( command.getBytes ( java.nio.charset.StandardCharsets.ISO_8859_1 ) ) ; }
boolean isNumberMatchingDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.nationalNumberPattern ) . matcher ( nationalNumber ) ; return ( isNumberPossibleForDesc ( nationalNumber , numberDesc ) ) && ( nationalNumberPatternMatcher.matches ( ) ) ; }
public void binderDied ( ) { android.util.Log.e ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , ( ( "ImsService(" + ( mComponentName ) ) + ") died. Restarting..." ) ) ; notifyAllFeaturesRemoved ( ) ; cleanUpService ( ) ; startDelayedRebindToService ( ) ; }
public double readDouble ( ) { checkType ( com.android.dx.io.EncodedValueReader.ENCODED_DOUBLE ) ; type = com.android.dx.io.EncodedValueReader.MUST_READ ; return java.lang.Double.longBitsToDouble ( com.android.dx.util.EncodedValueUtils.readUnsignedLong ( in , arg , true ) ) ; }
public boolean hasChildren ( java.lang.Object element ) { if ( element instanceof com.android.hierarchyviewerlib.models.ViewNode ) { return ( ( ( com.android.hierarchyviewerlib.models.ViewNode ) ( element ) ) . children.size ( ) ) != 0 ; } return false ; }
public void setUp ( ) { previousDefaultTimeZone = java.util.TimeZone.getDefault ( ) ; java.util.TimeZone.setDefault ( java.util.TimeZone.getTimeZone ( "America/Los_Angeles" ) ) ; format = new java.text.SimpleDateFormat ( "" , java.util.Locale.ENGLISH ) ; pFormat = new java.text.SimpleDateFormat ( "" , java.util.Locale.ENGLISH ) ; }
protected java.io.File getTargetDir ( ) { java.io.File targetDir = new java.io.File ( getTempDir ( ) , ( ( ( getClass ( ) . getSimpleName ( ) ) + "_" ) + ( getName ( ) ) ) ) ; addCleanupDir ( targetDir ) ; return targetDir ; }
public static void assertEqualByteArrays ( byte [ ] [ ] expected , byte [ ] [ ] actual ) { assertEquals ( java.util.Arrays.deepToString ( expected ) , java.util.Arrays.deepToString ( actual ) ) ; }
int getDataLength ( ) { return ( mData ) != null ? mData.length : 0 ; }
public boolean hasIccCardUsingSlotIndex ( int slotIndex ) { final com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( slotIndex ) ; if ( phone != null ) { return phone.getIccCard ( ) . hasIccCard ( ) ; } else { return false ; } }
public static MergingReport.Result validate ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlDocument xmlDocument ) { com.android.manifmerger.PreValidator.validateManifestAttribute ( mergingReport , xmlDocument.getRootNode ( ) , xmlDocument.getFileType ( ) ) ; return com.android.manifmerger.PreValidator.validate ( mergingReport , xmlDocument.getRootNode ( ) ) ; }
public com.android.build.gradle.internal.dsl.BuildType testProguardFiles ( @ com.android.annotations.NonNull java.lang.Object ... proguardFileArray ) { getTestProguardFiles ( ) . addAll ( project.files ( proguardFileArray ) . getFiles ( ) ) ; return this ; }
private void expectNetworkStatsSummaryDev ( android.net.NetworkStats summary ) throws java.lang.Exception { org.mockito.Mockito.when ( mNetManager.getNetworkStatsSummaryDev ( ) ) . thenReturn ( summary ) ; }
public static boolean delete ( @ org.jetbrains.annotations.NotNull java.io.File file ) { if ( com.intellij.openapi.util.io.FileUtilRt.NIOReflect.IS_AVAILABLE ) { return com.intellij.openapi.util.io.FileUtilRt.deleteRecursivelyNIO ( file ) ; } return com.intellij.openapi.util.io.FileUtilRt.deleteRecursively ( file ) ; }
private native void startAdvertisingSetNative ( android.bluetooth.le.AdvertisingSetParameters parameters , byte [ ] advertiseData , byte [ ] scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , byte [ ] periodicData , int timeout , int reg_id ) ;
public int update ( android.net.Uri uri , android.content.ContentValues values , java.lang.String selection , java.lang.String [ ] selectionArgs ) { return mContentProvider.update ( uri , values , selection , selectionArgs ) ; }
public void testLaunchToSideSingleTask ( ) throws java.lang.Exception { if ( ! ( supportsMultiWindowMode ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchTargetToSide ( android.server.cts.ActivityManagerDockedStackTests.SINGLE_TASK_ACTIVITY_NAME , false ) ; }
public void onClick ( android.view.View v ) { animateExpandNotificationsPanel ( ) ; }
public void testVFE2 ( ) { try { new dot.junit.opcodes.invoke_interface_range.d.T_invoke_interface_range_4 ( ) . run ( ) ; fail ( "expected an IncompatibleClassChangeError" ) ; } catch ( java.lang.IncompatibleClassChangeError e ) { } }
void removeCall ( java.lang.String callId ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.removeCall ( callId , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
private com.android.compatibility.common.util.TestStatus getTestResultStatus ( int testResult ) { switch ( testResult ) { case TestResult.TEST_RESULT_PASSED : return com.android.compatibility.common.util.TestStatus.PASS ; case TestResult.TEST_RESULT_FAILED : return com.android.compatibility.common.util.TestStatus.FAIL ; case TestResult.TEST_RESULT_NOT_EXECUTED : return null ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown test result: " + testResult ) ) ; } }
public void add ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId method ) { com.android.jack.frontend.VirtualMethodsMarker.ComparableMethodId comparable = new com.android.jack.frontend.VirtualMethodsMarker.ComparableMethodId ( method ) ; virtualMethods.put ( comparable , comparable ) ; }
public void addFile ( com.android.ide.common.resources.ResourceFile file ) { if ( ( mFiles ) == null ) { mFiles = new java.util.ArrayList < com.android.ide.common.resources.ResourceFile > ( ) ; } mFiles.add ( file ) ; }
public void addValue ( com.android.ide.common.rendering.api.ResourceValue value , boolean isFrameworkAttr ) { addItem ( com.android.ide.common.rendering.api.ItemResourceValue.fromResourceValue ( value , isFrameworkAttr ) ) ; }
public void requestUpgrade ( @ android.support.annotation.NonNull android.content.Context context , android.telecom.Call call ) { com.android.dialer.common.Assert.isMainThread ( ) ; com.android.dialer.common.Assert.isNotNull ( call ) ; }
public void skip ( int i ) { mN.skip ( i ) ; mPos += i ; }
public void test_oneDex_simpleUse ( ) throws java.lang.Exception { java.lang.String result = ( ( java.lang.String ) ( createLoaderAndCallMethod ( "test.Test1" , "test" , dex1 ) ) ) ; assertSame ( "blort" , result ) ; }
private java.lang.String getPermaLinkURL ( java.lang.String phoneNumber , java.lang.String defaultCountry , java.util.Locale geocodingLocale , boolean absoluteURL ) { java.lang.StringBuilder permaLink = new java.lang.StringBuilder ( ( absoluteURL ? "http://libphonenumber.appspot.com/phonenumberparser" : "/phonenumberparser" ) ) ; try { permaLink.append ( ( "?number=" + ( java.net.URLEncoder.encode ( ( phoneNumber != null ? phoneNumber : "" ) , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ) ) ) ; if ( ( defaultCountry != null ) && ( ! ( defaultCountry.isEmpty ( ) ) ) ) { permaLink.append ( ( "&country=" + ( java.net.URLEncoder.encode ( defaultCountry , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ) ) ) ; } if ( ( ! ( geocodingLocale.getLanguage ( ) . equals ( java.util.Locale.ENGLISH.getLanguage ( ) ) ) ) || ( ! ( geocodingLocale.getCountry ( ) . isEmpty ( ) ) ) ) { permaLink.append ( ( "&geocodingLocale=" + ( java.net.URLEncoder.encode ( geocodingLocale.toLanguageTag ( ) , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ) ) ) ; } } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.AssertionError ( e ) ; } return permaLink.toString ( ) ; }
void updateRootCallTimeBounds ( ) { if ( ! ( mIsEmpty ) ) { mRootCall.mGlobalStartTime = mGlobalStartTime ; mRootCall.mGlobalEndTime = mGlobalEndTime ; mRootCall.mThreadStartTime = mThreadStartTime ; mRootCall.mThreadEndTime = mThreadEndTime ; } }
public void test_Shift_JIS_replacement_character ( ) throws java.lang.Exception { assertEncodes ( java.nio.charset.Charset.forName ( "Shift_JIS" ) , " � " , ' ' , 252 , 252 , ' ' ) ; assertDecodes ( java.nio.charset.Charset.forName ( "Shift_JIS" ) , " � " , ' ' , 252 , 252 , ' ' ) ; }
public int getDisplayRule ( android.telephony.ServiceState serviceState ) { return 0 ; }
public synchronized boolean addIfAbsent ( E object ) { if ( contains ( object ) ) { return false ; } add ( object ) ; return true ; }
public static double nextUp ( double d ) { return java.lang.Math.nextUp ( d ) ; }
public void test_getResourceLjava_lang_String ( ) { final java.lang.String name = "/resources/test_resource.txt" ; java.net.URL res = getClass ( ) . getResource ( name ) ; assertNotNull ( res ) ; }
public void TestJamo ( ) throws java.io.IOException { long start = java.lang.System.currentTimeMillis ( ) ; new android.icu.dev.test.translit.RoundTripTest.TransliterationTest ( "Latin-Jamo" ) . test ( "[a-zA-Z]" , "[ᄀ-ᄒ ᅡ-ᅵ ᆨ-ᇂ]" , "" , this , new android.icu.dev.test.translit.RoundTripTest.LegalJamo ( ) ) ; showElapsed ( start , "TestJamo" ) ; }
public static boolean isCallSubjectCompatible ( ) { return true ; }
public void factory_intMonth ( ) { org.testng.Assert.assertEquals ( tck.java.time.TCKMonthDay.TEST_07_15 , java.time.MonthDay.of ( java.time.Month.JULY , 15 ) ) ; }
public void testDump ( ) { android.view.inputmethod.cts.InputMethodInfoTest.MockPrinter printer = new android.view.inputmethod.cts.InputMethodInfoTest.MockPrinter ( ) ; java.lang.String prefix = "test" ; mInputMethodInfo.dump ( printer , prefix ) ; }
public void testConstructor_Main_RunnerType_MAIN ( ) throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( ) ; runner.run ( ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.Main.class . getName ( ) ) ) + "\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , ios.contents ( Stream.OUT ) ) ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( ( optionalAttributeVisitor ) != null ) { optionalAttributeVisitor.visitRuntimeVisibleAnnotationsAttribute ( clazz , field , runtimeVisibleAnnotationsAttribute ) ; } }
private void waitForDisableNotificationCompletion ( ) { synchronized ( mRequestNotificationLock ) { try { mRequestNotificationLock.wait ( ) ; } catch ( java.lang.InterruptedException e ) { android.util.Log.e ( com.android.cts.verifier.bluetooth.BleClientService.TAG , ( "Error in waitForDisableNotificationCompletion" + e ) ) ; } } }
public java.lang.String p2pGetSsid ( java.lang.String deviceAddress ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.getSsid ( deviceAddress ) ; } else { return p2pGetParam ( deviceAddress , "oper_ssid" ) ; } }
public java.lang.String getDisplayName ( java.util.Locale locale ) { return icuCurrency.getDisplayName ( java.util.Objects.requireNonNull ( locale ) ) ; }
protected java.lang.Void doInBackground ( java.lang.Void ... params ) { com.android.traceur.AtraceUtils.atraceDumpAndSend ( context , tags , Receiver.BUFFER_SIZE_KB ) ; return null ; }
synchronized void nScriptSetVarF ( long id , int slot , float val ) { validate ( ) ; rsnScriptSetVarF ( mContext , id , slot , val ) ; }
public com.android.manifmerger.AttributeOperationType getAttributeOperationType ( com.android.manifmerger.NodeName attributeName ) { return mAttributesOperationTypes.containsKey ( attributeName ) ? mAttributesOperationTypes.get ( attributeName ) : AttributeOperationType.STRICT ; }
public void setIsOptional ( boolean isOptional ) { this . mutableIsOptional = isOptional ; for ( com.android.build.gradle.internal.dependency.LibInfo libInfo : getLibInfoDependencies ( ) ) { libInfo.setIsOptional ( isOptional ) ; } }
public static void testSendCmasMonthlyTest ( android.app.Activity activity , int serialNumber ) { android.telephony.SmsCbMessage cbMessage = com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.createCmasSmsMessage ( SmsEnvelope.SERVICE_CATEGORY_CMAS_TEST_MESSAGE , serialNumber , "en" , com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.MONTHLY_TEST_ALERT , SmsCbCmasInfo.CMAS_CATEGORY_UNKNOWN , SmsCbCmasInfo.CMAS_RESPONSE_TYPE_UNKNOWN , SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN , SmsCbCmasInfo.CMAS_URGENCY_UNKNOWN , SmsCbCmasInfo.CMAS_CERTAINTY_UNKNOWN ) ; com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.sendBroadcast ( activity , cbMessage ) ; }
public void onNewIncomingConnection ( @ android.support.annotation.NonNull com.android.dialer.simulator.impl.SimulatorConnection connection ) { if ( isMyConnection ( connection ) ) { com.android.dialer.common.LogUtil.i ( "SimulatorVoiceCall.onNewIncomingConnection" , "connection created" ) ; handleNewConnection ( connection ) ; } }
public void setWifiLinkLayerStats ( java.lang.String iface , int enable ) { }
void onANQPResponse ( long bssid , java.util.Map < com.android.server.wifi.anqp.Constants.ANQPElementType , com.android.server.wifi.anqp.ANQPElement > anqpElements ) ;
public boolean setActiveDevice ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.hfp.HeadsetService service = getService ( ) ; if ( service == null ) { return false ; } return service.setActiveDevice ( device ) ; }
public abstract Phone.State getState ( ) ;
private java.lang.String generateUniquePackagePrefix ( java.lang.String newSuperPackagePrefix , proguard.obfuscate.NameFactory packageNameFactory ) { java.lang.String newPackagePrefix ; do { newPackagePrefix = ( newSuperPackagePrefix + ( packageNameFactory.nextName ( ) ) ) + ( ClassConstants.PACKAGE_SEPARATOR ) ; } while ( packagePrefixMap.containsValue ( newPackagePrefix ) ) ; return newPackagePrefix ; }
com.android.builder.model.ApiVersion getMinSdkVersion ( ) ;
private static native long nativeGetTotalStat ( int type , boolean useBpfStats ) ;
public boolean isHeader ( ) { return isFirst ( ) ; }
private static void encodeRegisterRange ( com.android.jack.dx.io.instructions.DecodedInstruction insn , com.android.jack.dx.io.instructions.CodeOutput out ) { out.write ( com.android.jack.dx.io.instructions.InstructionCodec.codeUnit ( insn.getOpcode ( ) , insn.getRegisterCount ( ) ) , insn.getFirstIndexUnit ( ) , insn.getAUnit ( ) ) ; }
public static float ulp ( float f ) { return java.lang.Math.ulp ( f ) ; }
public void setConferenceMergeFailed ( java.lang.String callId , android.telecom.Logging.Session.Info sessionInfo ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = callId ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_SET_CONFERENCE_MERGE_FAILED , args ) . sendToTarget ( ) ; }
public void dispose ( ) { if ( DBG ) log ( ( "Disposing RuimRecords " + ( this ) ) ) ; mCi.unregisterForIccRefresh ( this ) ; mParentApp.unregisterForReady ( this ) ; resetRecords ( ) ; super . dispose ( ) ; }
public void filter ( org.junit.runner.manipulation.Filter filter ) throws org.junit.runner.manipulation.NoTestsRemainException { super . filter ( filter ) ; description = null ; this . parametrizedTestMethodsFilter = new junitparams.internal.ParametrizedTestMethodsFilter ( this , filter ) ; }
private static android.net.Uri getContactUri ( android.database.Cursor cursor ) { long contactId = com.android.dialer.contactsfragment.ContactsAdapter.getContactId ( cursor ) ; java.lang.String lookupKey = cursor.getString ( ContactsCursorLoader.CONTACT_LOOKUP_KEY ) ; return android.provider.ContactsContract.Contacts.getLookupUri ( contactId , lookupKey ) ; }
public java.util.Collection < V > apply ( java.util.Collection < V > collection ) { return com.google.common.collect.Multimaps.unmodifiableValueCollection ( collection ) ; }
public void onDescriptorWrite ( java.lang.String address , int status , int handle ) throws android.os.RemoteException { }
public void testFailed ( com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) { mRunResult.testFailed ( test , trace ) ; }
public static void assertEquals ( double expected , double actual , double delta ) { if ( ! ( ( java.lang.Math.abs ( ( expected - actual ) ) ) <= delta ) ) throw new dot.junit.AssertionFailedException ( "not within delta" ) ; }
public void imsSetEnhanced4gMode ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "enable" ) java.lang.Boolean enable ) { mImsManager.setEnhanced4gLteModeSettingForSlot ( enable ) ; }
public void reset ( ) { for ( int i = 0 ; i < ( mBandCount ) ; i ++ ) { mPointsPerBand [ i ] = 0 ; mAverageEnergyPerBand [ i ] = 0 ; mInBoundPointsPerBand [ i ] = 0 ; } }
public com.android.jack.jayce.ParameterNode getParameterNode ( @ javax.annotation.Nonnegative int parameterNodeIndex ) { return getParameters ( ) . get ( parameterNodeIndex ) ; }
public void copy1DRangeFrom ( int off , int count , int [ ] d ) { validateIsInt32 ( ) ; copy1DRangeFromUnchecked ( off , count , d , Element.DataType.SIGNED_32 , d.length ) ; }
private static java.lang.String outcome ( java.lang.String testClassName , java.lang.String methodName , java.lang.String message , vogar.Result result ) { java.lang.String testName = vogar.target.junit.JUnitUtils.getTestName ( testClassName , methodName ) ; return java.lang.String.format ( ( "//00xx{\"outcome\":\"%s\"}\n" + ( "%s" + "//00xx{\"result\":\"%s\"}\n" ) ) , testName , ( message == null ? "" : message ) , result ) ; }
public void testFormat ( ) throws java.lang.Exception { android.text.format.Time t = new android.text.format.Time ( android.text.format.Time.TIMEZONE_UTC ) ; java.lang.String r = t.format ( "%Y%m%dT%H%M%S" ) ; assertEquals ( "19700101T000000" , r ) ; }
public void clearAll ( ) { mNetworkCapabilities = mTransportTypes = mUnwantedNetworkCapabilities = 0 ; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED ; mNetworkSpecifier = null ; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED ; mUids = null ; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID ; }
public void testOneLineComment ( ) throws java.lang.Exception { java.lang.String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" + " android:layout_width=\"match_parent\"\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " android:orientation=\"vertical\" >\n" ) + "\n" ) + " <!-- this is a comment ! -->\n" ) + " <Button\n" ) + " android:id=\"@+id/button1\"\n" ) + " android:layout_width=\"wrap_content\"\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " android:text=\"Button\" />\n" ) + " some text\n" ) + "\n" ) + "</LinearLayout>\n" ) ; java.io.File file = java.io.File.createTempFile ( "parsertest" , ".xml" ) ; file.deleteOnExit ( ) ; java.io.Writer fw = new java.io.BufferedWriter ( new java.io.FileWriter ( file ) ) ; fw.write ( xml ) ; fw.close ( ) ; org.w3c.dom.Document document = com.android.utils.PositionXmlParser.parse ( new java.io.FileInputStream ( file ) ) ; assertNotNull ( document ) ; org.w3c.dom.Element linearLayout = ( ( org.w3c.dom.Element ) ( document.getElementsByTagName ( "LinearLayout" ) . item ( 0 ) ) ) ; assertNotNull ( linearLayout ) ; org.w3c.dom.Node commentNode = linearLayout.getFirstChild ( ) . getNextSibling ( ) ; assertEquals ( org.w3c.dom.Node.COMMENT_NODE , commentNode.getNodeType ( ) ) ; com.android.ide.common.blame.SourcePosition position = com.android.utils.PositionXmlParser.getPosition ( commentNode ) ; assertNotNull ( position ) ; assertEquals ( 6 , position.getStartLine ( ) ) ; assertEquals ( 4 , position.getStartColumn ( ) ) ; assertEquals ( xml.indexOf ( "<!--" ) , position.getStartOffset ( ) ) ; org.w3c.dom.Element button = ( ( org.w3c.dom.Element ) ( document.getElementsByTagName ( "Button" ) . item ( 0 ) ) ) ; com.android.ide.common.blame.SourcePosition buttonPosition = com.android.utils.PositionXmlParser.getPosition ( button ) ; assertNotNull ( buttonPosition ) ; assertEquals ( 7 , buttonPosition.getStartLine ( ) ) ; assertEquals ( 4 , buttonPosition.getStartColumn ( ) ) ; }
public java.lang.String telephonyGetNetworkOperatorName ( ) { return telephonyGetNetworkOperatorNameForSubscription ( android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
public static boolean isFileBasedResourceType ( com.android.resources.ResourceType type ) { java.util.List < com.android.resources.ResourceFolderType > folderTypes = com.android.resources.FolderTypeRelationship.getRelatedFolders ( type ) ; for ( com.android.resources.ResourceFolderType folderType : folderTypes ) { if ( folderType != ( com.android.resources.ResourceFolderType.VALUES ) ) { return true ; } } return false ; }
public void find_offUiThread ( ) { android.support.test.espresso.ViewFinder finder = new android.support.test.espresso.base.ViewFinderImpl ( org.hamcrest.Matchers.sameInstance ( nestedChild ) , testViewProvider ) ; expectedException.expect ( java.lang.IllegalStateException.class ) ; finder.getView ( ) ; }
private static void callPostForkChildHooks ( int runtimeFlags , boolean isSystemServer , java.lang.String instructionSet ) { com.android.internal.os.Zygote.VM_HOOKS.postForkChild ( runtimeFlags , isSystemServer , instructionSet ) ; }
private static java.io.File createTemporaryZipFile ( ) throws java.io.IOException { java.io.File result = java.io.File.createTempFile ( "ZipFileTest" , ".zip" ) ; result.deleteOnExit ( ) ; return result ; }
private void sleep ( ) { try { java.lang.Thread.sleep ( ( 1000 / 4 ) ) ; } catch ( java.lang.InterruptedException ignored ) { } }
public boolean init ( java.util.Map < java.lang.String , java.lang.String > platformProperties , java.io.File fontLocation , java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Integer > > enumValueMap , com.android.ide.common.rendering.api.LayoutLog log ) { return false ; }
public void run ( ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNew = uiDoc.appendNewUiChild ( viewDesc ) ; uiNew.setAttributeValue ( LayoutConstants.ANDROID_NS_NAME , XmlnsAttributeDescriptor.XMLNS_URI , SdkConstants.NS_RESOURCES , true ) ; com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.setDefaultLayoutAttributes ( uiNew , false ) ; uiNew.createXmlNode ( ) ; }
public static void updateTile ( ) { if ( ( com.android.traceur.QsService.sListeningInstance ) != null ) { com.android.traceur.QsService.sListeningInstance.update ( ) ; } }
public native long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , android.system.Int64Ref offset , long byteCount ) throws android.system.ErrnoException ;
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newTool ( @ com.android.annotations.NonNull com.android.sdklib.repository.FullRevision revision , @ com.android.annotations.NonNull com.android.sdklib.repository.FullRevision minPlatformToolsRev ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_TOOLS ) ; p.mFullRevision = revision ; p.mMinPlatformToolsRev = minPlatformToolsRev ; return p ; }
public com.android.ide.common.rendering.api.Result createResult ( java.lang.String errorMessage , java.lang.Throwable throwable ) { return new com.android.ide.common.rendering.api.Result ( this , errorMessage , throwable ) ; }
public final com.android.ide.common.resources.ResourceFolder getFolder ( ) { return mFolder ; }
public com.android.sdklib.repository.descriptors.IPkgDesc getPkgDesc ( ) { return PkgDesc.Builder.newTool ( new com.android.sdklib.repository.FullRevision ( 1 , 2 , 3 , 4 ) , FullRevision.NOT_SPECIFIED ) . create ( ) ; }
public android.net.wifi.aware.ConfigRequest getConfigRequest ( ) { return mConfigRequest ; }
public void mouseMoved ( java.awt.event.MouseEvent event ) { checkLockedRegion ( event.getX ( ) , event.getY ( ) ) ; updateHoverRegion ( event.getX ( ) , event.getY ( ) ) ; repaint ( ) ; }
protected void forEach ( int slot , android.renderscript.Allocation [ ] ains , android.renderscript.Allocation aout , android.renderscript.FieldPacker v ) { forEach ( slot , ains , aout , v , new android.renderscript.Script.LaunchOptions ( ) ) ; }
public native java.lang.annotation.Annotation [ ] getDeclaredAnnotations ( ) ;
public void unregisterListener ( ) { if ( ( mTestSensorEventListener ) == null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "No listener registered, returning." ) ; return ; } mSensorManager.unregisterListener ( mTestSensorEventListener , mEnvironment.getSensor ( ) ) ; mTestSensorEventListener.assertEventsReceivedInHandler ( ) ; mTestSensorEventListener = null ; }
public com.android.ahat.heapdump.Value getBaselineDumpedValue ( java.lang.String name ) { return com.android.ahat.TestDump.getDumpedValue ( name , mBaselineMain ) ; }
private boolean matchesWifi ( android.net.NetworkIdentity ident ) { switch ( ident.mType ) { case android.net.ConnectivityManager.TYPE_WIFI : return java.util.Objects.equals ( android.net.wifi.WifiInfo.removeDoubleQuotes ( mNetworkId ) , android.net.wifi.WifiInfo.removeDoubleQuotes ( ident.mNetworkId ) ) ; default : return false ; } }
public void setDomains ( java.lang.String newDomains ) { domains = newDomains ; }
public int readArray ( ) { checkType ( com.android.dex.EncodedValueReader.ENCODED_ARRAY ) ; type = com.android.dex.EncodedValueReader.MUST_READ ; return com.android.dex.Leb128.readUnsignedLeb128 ( in ) ; }
public void process ( ) { mThread = new java.lang.Thread ( this , "SendTransaction" ) ; mThread.start ( ) ; }
native void rsnContextSendMessage ( long con , int id , int [ ] data ) ;
void expectAvailableAndSuspendedCallbacks ( com.android.server.ConnectivityServiceTest.MockNetworkAgent agent , boolean expectValidated ) { expectAvailableCallbacks ( agent , true , expectValidated , com.android.server.ConnectivityServiceTest.TestNetworkCallback.TIMEOUT_MS ) ; }
public com.android.build.gradle.tasks.ZipAlign getZipAlign ( ) { com.android.build.gradle.internal.variant.ApkVariantOutputData variantOutputData = getApkVariantData ( ) . getOutputs ( ) . get ( 0 ) ; return variantOutputData.zipAlignTask ; }
public void enter ( ) { if ( com.android.bluetooth.pbapclient.PbapClientStateMachine.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_DISCONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; quit ( ) ; }
public void put ( android.icu.impl.UResource.Key key , android.icu.impl.UResource.Value value ) { if ( key.contentEquals ( "per" ) ) { cacheData.styleToPerPattern.put ( width , android.icu.impl.SimplePatternFormatter.compileToStringMinMaxPlaceholders ( value.getString ( ) , sb , 2 , 2 ) ) ; } }
public int run ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.Nonnull java.lang.String mainClass , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) throws com.android.jack.test.runner.RuntimeRunnerException { return runOnHost ( buildCommandLine ( options , mainClass , classpathFiles ) , com.android.jack.test.runner.DalvikRunnerHost.ANDROID_ROOT ) ; }
public boolean print ( @ javax.annotation.Nonnull java.io.PrintWriter printer , @ javax.annotation.Nonnull java.lang.String value ) { printer.print ( ( ( "\"" + ( value.replace ( "\"" , "\\\"" ) ) ) + "\"" ) ) ; return true ; }
public com.android.io.NonClosingInputStream setCloseBehavior ( @ com.android.annotations.NonNull com.android.io.NonClosingInputStream.CloseBehavior closeBehavior ) { mCloseBehavior = closeBehavior ; return this ; }
public void startScan ( ) { if ( ( mBLEScanner ) != null ) { mBLEScanner.startScan ( mScanFilterList , mScanSettings , mScanCallback ) ; } else { android.util.Log.e ( com.android.pmc.GattClientListener.TAG , "BLEScanner is null" ) ; } }
public int getProtocolIdentifier ( ) { android.telephony.Rlog.w ( com.android.internal.telephony.cdma.SmsMessage.LOG_TAG , "getProtocolIdentifier: is not supported in CDMA mode." ) ; return 0 ; }
boolean isCondition1or2Violated ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JStatement startStmt ) { return traverse ( com.google.common.collect.Lists.newArrayList ( startStmt ) , ( ( byte ) ( ( com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ENTRY_POINT ) | ( com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_OR_READS_B ) ) ) , com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_A ) ; }
public void OnPnoNetworkFound ( ) { android.util.Log.d ( com.android.server.wifi.WificondControl.TAG , "Pno scan result event" ) ; mWifiMonitor.broadcastPnoScanResultEvent ( mClientInterfaceName ) ; }
public java.io.InputStream getInputStream ( ) throws java.io.IOException { if ( ( bufferedInputStream ) == null ) { bufferedInputStream = new java.io.BufferedInputStream ( zipInputStream ) ; } return bufferedInputStream ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > getAllModelsIgnoringSyncIssues ( ) { return getAllModels ( new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , false ) ; }
public void editUrl ( ) { if ( mOptionsMenuOpen ) mActivity.closeOptionsMenu ( ) ; mUi.editUrl ( false , true ) ; }
public void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotDeleteFileException { assert ! ( isClosed ( ) ) ; dir.delete ( path ) ; }
public int requestDownloadState ( android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.FileInfo fileInfo ) throws android.os.RemoteException { return 0 ; }
public void testInvalidAppDependencies ( ) throws java.lang.Exception { try { getModelForProject ( com.android.build.gradle.model.AndroidProjectTest.FOLDER_TEST_PROJECT , "invalidDependencyOnAppProject" ) ; fail ( "Should fail." ) ; } catch ( org.gradle.tooling.BuildException e ) { assertTrue ( e.getCause ( ) . getMessage ( ) . contains ( "Only Android library projects can act as dependencies of other projects." ) ) ; } }
boolean hasAccountEntryForPhoneAccount ( android.telecom.PhoneAccountHandle handle ) { synchronized ( mAccountsLock ) { for ( com.android.services.telephony.TelecomAccountRegistry.AccountEntry entry : mAccounts ) { if ( entry.getPhoneAccountHandle ( ) . equals ( handle ) ) { return true ; } } } return false ; }
public com.android.sdklib.ISystemImage getSystemImage ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IdDisplay tag , @ com.android.annotations.NonNull java.lang.String abiType ) ;
public void setIsVoipAudioMode ( java.lang.String callId , boolean isVoip , android.telecom.Logging.Session.Info sessionInfo ) { findConnectionForAction ( callId , "setIsVoipAudioMode" ) . setIsVoipAudioMode ( isVoip ) ; }
public static char checkedCast ( long value ) { char result = ( ( char ) ( value ) ) ; if ( result != value ) { throw new java.lang.IllegalArgumentException ( ( "Out of range: " + value ) ) ; } return result ; }
private void notifyScheduledRecordingStatusChanged ( com.android.tv.dvr.data.ScheduledRecording ... scheduledRecordings ) { for ( com.android.tv.dvr.DvrDataManager.ScheduledRecordingListener l : mScheduledRecordingListeners ) { l.onScheduledRecordingStatusChanged ( scheduledRecordings ) ; } }
public void abortCall ( ) { com.android.dialer.common.Assert.checkState ( ( ( currentAction ) != null ) ) ; aborted = true ; com.android.dialer.logging.Logger.get ( getActivity ( ) ) . logImpression ( Type.PRECALL_CANCELED ) ; }
public void setUserMobileDataEnabled ( boolean enable ) { setUserMobileDataEnabled ( getSubId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) , enable ) ; }
public void test_twoJar_diff_directGetResourceAsStream ( ) throws java.lang.Exception { java.lang.String result = createLoaderAndGetResource ( "test2/Resource2.txt" , jar1 , jar2 ) ; assertEquals ( "Who doesn\'t like a good biscuit?\n" , result ) ; }
public java.util.Set < java.lang.Class < ? > > getTopLevelClassesRecursive ( java.lang.String packageName ) { android.test.ClassPathPackageInfoSource.ClassPathPackageInfo packageInfo = cache.get ( packageName ) ; return packageInfo.getTopLevelClassesRecursive ( ) ; }
static boolean isServiceAvailable ( ) { return ( org.apache.harmony.security.provider.crypto.RandomBitsSupplier.devURandom ) != null ; }
private void enableNativeWithGuestFlag ( ) { boolean isGuest = android.os.UserManager.get ( this ) . isGuestUser ( ) ; if ( ! ( enableNative ( isGuest ) ) ) { android.util.Log.e ( com.android.bluetooth.btservice.AdapterService.TAG , "enableNative() returned false" ) ; } }
public static org.hamcrest.Matcher < java.lang.Object > notNullValue ( ) { return org.hamcrest.core.IsNot.not ( org.hamcrest.core.IsNull.nullValue ( ) ) ; }
private com.android.ims.internal.IImsMMTelFeature getServiceInterface ( android.os.IBinder b ) { return IImsMMTelFeature.Stub.asInterface ( b ) ; }
public void setFeatureValue ( int feature , int network , int value , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { getImsConfigImpl ( ) . setFeatureValue ( feature , network , value , listener ) ; }
public proguard.evaluation.value.ReferenceValue generalize ( proguard.evaluation.value.ReferenceValue other ) { return other.generalize ( this ) ; }
private void tryChangeIccLockState ( ) { android.os.Message callback = android.os.Message.obtain ( mHandler , com.android.settings.IccLockSettings.MSG_ENABLE_ICC_PIN_COMPLETE ) ; mPhone.getIccCard ( ) . setIccLockEnabled ( mToState , mPin , callback ) ; mPinToggle.setEnabled ( false ) ; }
public com.android.layoutlib.api.SceneResult createResult ( java.lang.String errorMessage , java.lang.Throwable throwable ) { return new com.android.layoutlib.api.SceneResult ( this , errorMessage , throwable ) ; }
public void setCallbackAction ( long rowId , @ com.android.dialer.calllogutils.CallbackActionHelper.CallbackAction int callbackAction ) { mCallbackActions.put ( rowId , callbackAction ) ; }
public void setNickname ( java.lang.String callingPackage , java.lang.String cardId , java.lang.String iccid , java.lang.String nickname , com.android.internal.telephony.euicc.ISetNicknameCallback callback ) { checkCallingPackage ( callingPackage ) ; }
public java.util.Iterator < com.ibm.icu.text.UnicodeSet.EntryRange > iterator ( ) { return new com.ibm.icu.text.UnicodeSet.EntryRangeIterator ( ) ; }
public void mouseDoubleClick ( org.eclipse.swt.events.MouseEvent e ) { if ( ( e.button ) == 1 ) { mCanvas.showXml ( e ) ; } }
public boolean containsValue ( @ javax.annotation.Nullable java.lang.Object value ) { return values ( ) . contains ( value ) ; }
public void acknowledgeSmsReport ( int token , int messageRef , @ android.telephony.ims.internal.SmsImplBase.StatusReportResult int result ) { android.util.Log.e ( android.telephony.ims.internal.SmsImplBase.LOG_TAG , "acknowledgeSmsReport() not implemented." ) ; }
public void onServiceConnected ( android.content.ComponentName name , android.os.IBinder service ) { mWapPushMan = IWapPushManager.Stub.asInterface ( service ) ; if ( false ) android.telephony.Rlog.v ( com.android.internal.telephony.WapPushOverSms.LOG_TAG , ( "wappush manager connected to " + ( mOwner.hashCode ( ) ) ) ) ; }
public java.lang.String getSigAlgName ( ) { java.lang.String oid = getSigAlgOID ( ) ; java.lang.String algName = org.conscrypt.Platform.oidToAlgorithmName ( oid ) ; if ( algName != null ) { return algName ; } return oid ; }
protected void setUp ( ) throws java.lang.Exception { mLog = new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ; super . setUp ( ) ; }
public void setOverrideBgColor ( int color ) { mCustomBackgroundEnabled = true ; mCustomBackgroundColor = color ; }
public static void throwExceptionDuringDeopt ( int i ) { if ( i == 0 ) { DeoptimizationController.startDeoptimization ( ) ; throw new java.lang.RuntimeException ( "Test exception" ) ; } else { DeoptimizationController.stopDeoptimization ( ) ; } }
public static double abs ( double a ) { return java.lang.Double.longBitsToDouble ( ( 9223372036854775807L & ( java.lang.Double.doubleToRawLongBits ( a ) ) ) ) ; }
public void executeShellCommand ( java.lang.String command , com.android.ddmlib.IShellOutputReceiver receiver ) throws java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand ( com.android.ddmlib.AndroidDebugBridge.getSocketAddress ( ) , command , this , receiver ) ; }
public void applyTransportModeTransform ( java.net.Socket socket , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromSocket ( socket ) ) { applyTransportModeTransform ( pfd , transform ) ; } }
public void setUp ( ) throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext ( ) ; com.android.bluetooth.btservice.AdapterService inst = mock ( com.android.bluetooth.btservice.AdapterService.class ) ; org.junit.Assert.assertTrue ( ( inst != null ) ) ; mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter ( ) ; }
public void onConfigurationChanged ( android.content.res.Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; dumpActivityDpi ( ) ; dumpFontSize ( ) ; }
private void handleClearItemSelected ( ) { android.content.ContentResolver resolver = getContentResolver ( ) ; resolver.delete ( TestResultsProvider.CONTENT_URI , "1" , null ) ; android.widget.Toast.makeText ( this , R.string.test_results_cleared , Toast.LENGTH_SHORT ) . show ( ) ; }
public void onStop ( ) { android.util.Log.d ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , "onStop" ) ; mAvrcpCommandQueue.obtainMessage ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.MSG_AVRCP_PASSTHRU , AvrcpControllerService.PASS_THRU_CMD_ID_STOP ) . sendToTarget ( ) ; }
public boolean install ( com.android.sdklib.internal.repository.ArchiveReplacement archiveInfo , java.lang.String osSdkRoot , boolean forceHttp , com.android.sdklib.SdkManager sdkManager , com.android.sdklib.internal.repository.DownloadCache cache , com.android.sdklib.internal.repository.ITaskMonitor monitor ) { mInstalled.add ( archiveInfo ) ; return true ; }
void setDisconnectCause ( com.android.internal.telephony.sip.DisconnectCause cause ) { if ( com.android.internal.telephony.sip.SipConnectionBase.DBG ) log ( ( ( ( "setDisconnectCause: prev=" + ( mCause ) ) + " new=" ) + cause ) ) ; mCause = cause ; }
protected void stdout ( java.lang.String format , java.lang.Object ... args ) { java.lang.String output = java.lang.String.format ( format , args ) ; output = reflowLine ( output ) ; mLog.printf ( "%s\n" , output ) ; }
private static javax.crypto.SecretKey getSecretKey2 ( ) { if ( ( libcore.java.security.KeyStoreTest.sSecretKey2 ) == null ) { libcore.java.security.KeyStoreTest.sSecretKey2 = libcore.java.security.KeyStoreTest.generateSecretKey ( ) ; } return libcore.java.security.KeyStoreTest.sSecretKey2 ; }
private void logOutAllUsers ( ) { for ( com.google.gct.login.CredentialedUser aUser : users.getAllUsers ( ) . values ( ) ) { aUser.getGoogleLoginState ( ) . logOut ( false ) ; } users.removeAllUsers ( ) ; }
void setupTests ( ) { mTestSpinner.setAdapter ( new android.widget.ArrayAdapter < com.android.rs.imagejb.IPTestListJB.TestName > ( this , R.layout.spinner_layout , IPTestListJB.TestName.values ( ) ) ) ; }
public static < T > org.hamcrest.Matcher < java.lang.Iterable < T > > hasItem ( org.hamcrest.Matcher < ? extends T > elementMatcher ) { return org.junit.internal.matchers.IsCollectionContaining.hasItem ( elementMatcher ) ; }
public void testSubscribeConfigBuilderBadMatchStyle ( ) { new android.net.wifi.aware.SubscribeConfig.Builder ( ) . setMatchStyle ( 10 ) ; }
protected void finalize ( ) { android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CdmaCallTracker.LOG_TAG , "CdmaCallTracker finalized" ) ; }
protected void engineUpdate ( byte arg0 ) throws java.security.SignatureException { getSpi ( ) . engineUpdate ( arg0 ) ; }
public static android.app.DialogFragment newInstance ( com.android.dialer.blocking.BlockedNumbersMigrator blockedNumbersMigrator , com.android.dialer.blocking.BlockedNumbersMigrator.Listener migrationListener ) { com.android.dialer.blocking.MigrateBlockedNumbersDialogFragment fragment = new com.android.dialer.blocking.MigrateBlockedNumbersDialogFragment ( ) ; fragment.blockedNumbersMigrator = java.util.Objects.requireNonNull ( blockedNumbersMigrator ) ; fragment.migrationListener = java.util.Objects.requireNonNull ( migrationListener ) ; return fragment ; }
public boolean keystoreSetPassword ( java.lang.String password ) { android.util.Log.d ( com.android.keychain.tests.support.KeyChainServiceTestSupport.TAG , "keystoreSetPassword" ) ; return mKeyStore.onUserPasswordChanged ( password ) ; }
public void testRSAllocationCopy ( ) { assertTrue ( test1DCopy ( this . getContext ( ) . getCacheDir ( ) . toString ( ) ) ) ; }
private static java.lang.String getAbiDisplayNameInternal ( java.lang.String abi ) { return abi.replace ( "armeabi" , "ARM EABI" ) . replace ( "x86" , "Intel x86 Atom" ) . replace ( "mips" , "MIPS" ) . replace ( "-" , " " ) ; }
public boolean isEnabled ( com.intellij.openapi.actionSystem.AnActionEvent e ) { return ( ( selectedConfiguration ) != null ) && ( selectedConfiguration.isEditable ( ) ) ; }
public com.google.common.base.Objects.ToStringHelper addValue ( double value ) { return addHolder ( java.lang.String.valueOf ( value ) ) ; }
public java.lang.Object getDefaultValue ( ) { return libcore.reflect.AnnotationAccess.getDefaultValue ( this ) ; }
private boolean checkDistroDataFilesExist ( java.io.File unpackedContentDir ) throws java.io.IOException { android.util.Slog.i ( logTag , "Verifying distro contents" ) ; return com.android.timezone.distro.FileUtils.filesExist ( unpackedContentDir , TimeZoneDistro.TZDATA_FILE_NAME , TimeZoneDistro.ICU_DATA_FILE_NAME ) ; }
public com.android.ide.common.rendering.api.Result animate ( java.lang.Object targetObject , java.lang.String animationName , boolean isFrameworkAnimation , com.android.ide.common.rendering.api.IAnimationListener listener ) { return Status.NOT_IMPLEMENTED.createResult ( ) ; }
public int accept ( java.lang.reflect.Method method , java.util.List < java.lang.reflect.Method > allMethods ) { return method.isBridge ( ) ? 1 : 0 ; }
public void requestIsimAuthentication ( java.lang.String nonce , android.os.Message result ) { android.telephony.Rlog.e ( com.android.internal.telephony.PhoneBase.LOG_TAG , "requestIsimAuthentication() is only supported on LTE devices" ) ; }
public static com.google.common.primitives.UnsignedLong valueOf ( long value ) { com.google.common.base.Preconditions.checkArgument ( ( value >= 0 ) , "value (%s) is outside the range for an unsigned long value" , value ) ; return com.google.common.primitives.UnsignedLong.fromLongBits ( value ) ; }
public static void computeConvert ( android.renderscript.cts.TestConvert.ArgumentsFloatUshort args ) { args.out = android.renderscript.cts.CoreMathVerifier.convertFloatToUshort ( args.inV ) ; }
public static java.util.Collection < java.io.File > defaultExpectations ( ) { return java.util.Collections.singletonList ( new java.io.File ( "libcore/expectations/knownfailures.txt" ) ) ; }
public void stopDtmfTone ( com.android.server.telecom.Call call ) { if ( ! ( mCalls.contains ( call ) ) ) { android.telecom.Log.i ( this , "Request to stop DTMF in a non-existent call %s" , call ) ; } else { call.stopDtmfTone ( ) ; mDtmfLocalTonePlayer.stopTone ( call ) ; } }
private static long getRawPkeyCtxForEncrypt ( ) throws java.lang.Exception { return org.conscrypt.NativeCrypto.EVP_PKEY_encrypt_init ( org.conscrypt.NativeCryptoTest.getRsaPkey ( org.conscrypt.NativeCryptoTest.generateRsaKey ( ) ) ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.TextFormat format ) { }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { if ( Intent.ACTION_USER_PRESENT.equals ( intent.getAction ( ) ) ) { for ( int slot = 0 ; slot < ( mSimCount ) ; slot ++ ) { cancelNotificationOnKeyguard ( slot ) ; } } }
public android.telephony.ims.stub.ImsConfigImplBase getConfig ( int slotId ) { return new android.telephony.ims.stub.ImsConfigImplBase ( ) ; }
public android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex ( java.net.InetAddress destinationAddress ) throws android.net.IpSecManager.ResourceUnavailableException { try { return new android.net.IpSecManager.SecurityParameterIndex ( mService , destinationAddress , android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX ) ; } catch ( android.net.IpSecManager.SpiUnavailableException unlikely ) { throw new android.net.IpSecManager.ResourceUnavailableException ( "No SPIs available" ) ; } }
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO SupportedKeyClasses" , "none" ) ; }
void updateConnectivity ( ) { setWimaxStatus ( ) ; setWifiStatus ( ) ; setBtStatus ( ) ; setIpAddressStatus ( ) ; setImsRegistrationStatus ( ) ; }
private static boolean invalidTimeZoneId ( java.lang.String timeZoneId ) { com.ibm.icu.util.TimeZone zone = com.ibm.icu.util.TimeZone.getTimeZone ( timeZoneId ) ; return ( ! ( zone instanceof com.ibm.icu.util.BasicTimeZone ) ) || ( zone.getID ( ) . equals ( TimeZone.UNKNOWN_ZONE_ID ) ) ; }
public void testComplexPermission2 ( ) throws java.lang.Exception { assertEquals ( "No warnings." , lintProject ( getManifestWithPermissions ( 14 , "android.permission.ACCESS_FINE_LOCATION" , "android.permission.BLUETOOTH" ) , mPermissionTest , mComplexLocationManagerStub , mRequirePermissionAnnotation ) ) ; }
public void addFailure ( java.lang.String message , java.lang.String stackTrace , java.lang.String deviceName , java.lang.String projectName , java.lang.String flavorName ) { classResults.failed ( this , deviceName , projectName , flavorName ) ; failures.add ( new org.gradle.api.internal.tasks.testing.junit.report.TestFailure ( message , stackTrace ) ) ; }
public boolean isGradleProject ( ) { return true ; }
public void testIssue33845 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "res/values/strings.xml:5: Error: \"dateTimeFormat\" is not translated in \"de\" (German) [MissingTranslation]\n" + " <string name=\"dateTimeFormat\">MM/dd/yyyy - HH:mm</string>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "locale33845/.classpath=>.classpath" , "locale33845/AndroidManifest.xml=>AndroidManifest.xml" , "locale33845/project.properties=>project.properties" , "locale33845/res/values/strings.xml=>res/values/strings.xml" , "locale33845/res/values-de/strings.xml=>res/values-de/strings.xml" , "locale33845/res/values-en-rGB/strings.xml=>res/values-en-rGB/strings.xml" ) ) ; }
private static long getLongValue ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.intellij.psi.PsiExpression argument ) { java.lang.Object value = com.android.tools.lint.detector.api.ConstantEvaluator.evaluate ( context , argument ) ; if ( value instanceof java.lang.Number ) { return ( ( java.lang.Number ) ( value ) ) . longValue ( ) ; } return java.lang.Long.MAX_VALUE ; }
public void requestFocus ( com.android.server.telecom.ConnectionServiceFocusManager.CallFocus focus , com.android.server.telecom.ConnectionServiceFocusManager.RequestFocusCallback callback ) { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_REQUEST_FOCUS , new com.android.server.telecom.ConnectionServiceFocusManager.MessageArgs ( android.telecom.Log.createSubsession ( ) , "CSFM.rF" , new com.android.server.telecom.ConnectionServiceFocusManager.FocusRequest ( focus , callback ) ) ) . sendToTarget ( ) ; }
public static void setLibraryLoaderForTesting ( org.chromium.base.library_loader.LibraryLoader loader ) { org.chromium.base.library_loader.LibraryLoader.sInstance = loader ; }
public long getNextValueAsArrayTypeID ( ) { return this . getNextValueAsReferenceTypeID ( ) ; }
private com.android.dialer.duo.Duo getDuo ( ) { return com.android.dialer.duo.DuoComponent.get ( mContext ) . getDuo ( ) ; }
public void copy1DRangeTo ( int off , int count , int [ ] d ) { validateIsInt32 ( ) ; copy1DRangeToUnchecked ( off , count , d , Element.DataType.SIGNED_32 , d.length ) ; }
public void test_withDayOfMonth_normal ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.withDayOfMonth ( 1 ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 7 , 1 ) ) ; }
public void testE1 ( ) { loadAndRun ( "dot.junit.opcodes.aget_char.d.T_aget_char_1" , java.lang.ArrayIndexOutOfBoundsException.class , new char [ 2 ] , 2 ) ; }
public void testAlternateFormatsContainsData ( ) throws java.lang.Exception { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata germanyAlternateFormats = com.google.i18n.phonenumbers.MetadataManager.getAlternateFormatsForCountry ( 49 ) ; assertNotNull ( germanyAlternateFormats ) ; assertTrue ( ( ( germanyAlternateFormats.numberFormats ( ) . size ( ) ) > 0 ) ) ; }
org.gradle.api.Task getTask ( ) ;
public void testNormaliseStripNonDiallableCharacters ( ) { java.lang.String inputNumber = "03*4-56&+1a#234" ; java.lang.String expectedOutput = "03*456+1#234" ; assertEquals ( "Conversion did not correctly remove non-diallable characters" , expectedOutput , com.google.i18n.phonenumbers.PhoneNumberUtil.normalizeDiallableCharsOnly ( inputNumber ) ) ; }
public void reloadAfterBootComplete ( com.android.server.telecom.CallerInfoLookupHelper callerInfoLookupHelper , com.android.server.telecom.tests.CallInfoFactory callInfoFactory ) { }
public void copy ( proguard.evaluation.TracedStack other ) { super . copy ( other ) ; producerStack.copy ( other.producerStack ) ; actualProducerStack.copy ( other.actualProducerStack ) ; }
public void addAdapterBinding ( com.android.ide.common.rendering.api.ResourceReference reference , com.android.ide.common.rendering.api.AdapterBinding data ) { if ( ( mAdapterBindingMap ) == null ) { mAdapterBindingMap = new java.util.HashMap < com.android.ide.common.rendering.api.ResourceReference , com.android.ide.common.rendering.api.AdapterBinding > ( ) ; } mAdapterBindingMap.put ( reference , data ) ; }
public java.lang.invoke.MethodType type ( ) { if ( ( nominalType ) != null ) { return nominalType ; } return type ; }
public java.util.ArrayList < com.android.tools.perflib.heap.Instance > getReferences ( ) { if ( ( mReferences ) == null ) { mReferences = new java.util.ArrayList < com.android.tools.perflib.heap.Instance > ( ) ; } return mReferences ; }
public void registerContentObservers ( android.content.Context appContext ) { appContext.getContentResolver ( ) . registerContentObserver ( FilteredNumber.CONTENT_URI , true , markDirtyObserver ) ; }
public void onUnhold ( ) { com.android.dialer.common.LogUtil.enterBlock ( "SimulatorConnection.onUnhold" ) ; onEvent ( new com.android.dialer.simulator.Simulator.Event ( com.android.dialer.simulator.Simulator.Event.UNHOLD ) ) ; }
public void test_F32_2_SCALE20_20_inRectangle ( ) { testResize ( inX , inY , Element.DataType.FLOAT_32 , 2 , 2.0F , 2.0F ) ; }
private void setMediaSessionActiveAndPlaybackState ( boolean isPlaying ) { if ( isPlaying ) { mMediaSession.setActive ( true ) ; mMediaSession.setPlaybackState ( com.android.tv.MainActivity.MEDIA_SESSION_STATE_PLAYING ) ; } else { mMediaSession.setPlaybackState ( com.android.tv.MainActivity.MEDIA_SESSION_STATE_STOPPED ) ; mMediaSession.setActive ( false ) ; } }
public void testMissingVersion ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.SET_VERSION ) ; assertEquals ( ( "" + ( ( ( ( ( ( "AndroidManifest.xml:2: Warning: Should set android:versionCode to specify the application version [MissingVersion]\n" + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + "^\n" ) + "AndroidManifest.xml:2: Warning: Should set android:versionName to specify the application version [MissingVersion]\n" ) + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + "^\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "no_version.xml=>AndroidManifest.xml" ) ) ; }
public void invokeInterface ( final org.objectweb.asm.Type owner , final org.objectweb.asm.commons.Method method ) { invokeInsn ( Opcodes.INVOKEINTERFACE , owner , method , true ) ; }
public void disconnectClientAfterStartingWifi ( ) throws java.lang.Exception { mWifiScanningServiceImpl.startService ( ) ; com.android.internal.util.test.BidirectionalAsyncChannel controlChannel = connectChannel ( mock ( android.os.Handler.class ) ) ; mLooper.dispatchAll ( ) ; setupAndLoadDriver ( com.android.server.wifi.scanner.WifiScanningServiceTest.TEST_MAX_SCAN_BUCKETS_IN_CAPABILITIES ) ; controlChannel.disconnect ( ) ; mLooper.dispatchAll ( ) ; }
public static void showMessage ( java.lang.String title , java.lang.Throwable t ) { java.io.StringWriter message = new java.io.StringWriter ( ) ; message.append ( "Internal error. Please report to https://" ) ; boolean studio = "AndroidStudio" . equalsIgnoreCase ( java.lang.System.getProperty ( com.intellij.idea.Main.PLATFORM_PREFIX_PROPERTY ) ) ; message.append ( ( studio ? "code.google.com/p/android/issues" : "youtrack.jetbrains.com" ) ) ; message.append ( "\n\n" ) ; t.printStackTrace ( new java.io.PrintWriter ( message ) ) ; com.intellij.idea.Main.showMessage ( title , message.toString ( ) , true ) ; }
public java.lang.String getBuildType ( ) { return "" ; }
private synchronized boolean addMediaPlayerPackage ( java.lang.String packageName ) { com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo ( null , AvrcpConstants.PLAYER_TYPE_AUDIO , AvrcpConstants.PLAYER_SUBTYPE_NONE , getPlayStateBytes ( null ) , getFeatureBitMask ( packageName ) , packageName , getAppLabel ( packageName ) ) ; return addMediaPlayerInfo ( info ) ; }
java.util.List < com.android.bluetooth.avrcp.Metadata > getCurrentQueue ( ) { return mCurrentData.queue ; }
private native < T extends java.lang.annotation.Annotation > T getAnnotationNative ( java.lang.Class < T > annotationClass ) ;
private static void test_init ( dalvik.system.DexClassLoaderTest.Configuration config ) { dalvik.system.DexClassLoaderTest.createInstance ( config ) ; int expectedFiles = config.expectedFiles ; int actualFiles = config.optimizedDir.listFiles ( ) . length ; assertEquals ( expectedFiles , actualFiles ) ; }
native void rsnScriptForEachClipped ( long con , long incCon , long id , int slot , long ain , long aout , int xstart , int xend , int ystart , int yend , int zstart , int zend , boolean mUseInc ) ;
public static void computeDegrees ( android.renderscript.cts.TestDegrees.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( ( ( args.inValue ) * ( ( float ) ( 180.0 / ( java.lang.Math.PI ) ) ) ) , 3 , 3 ) ; }
public void setDataEnabled ( boolean enable ) { setDataEnabled ( getSubId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) , enable ) ; }
private void startStateMachineUpdaters ( ) { try { mNwService.registerObserver ( mNetlinkTracker ) ; } catch ( android.os.RemoteException e ) { logError ( "Couldn't register NetlinkTracker: %s" , e ) ; } mMultinetworkPolicyTracker.start ( ) ; }
public java.lang.annotation.Annotation [ ] getAnnotations ( ) { try { java.lang.Class < ? > c = java.lang.Class.forName ( ( ( getName ( ) ) + ".package-info" ) ) ; return c.getAnnotations ( ) ; } catch ( java.lang.Exception ex ) { return java.lang.Package.NO_ANNOTATIONS ; } }
public final com.google.common.hash.Hasher putUnencodedChars ( java.lang.CharSequence charSequence ) { for ( int i = 0 ; i < ( charSequence.length ( ) ) ; i ++ ) { putChar ( charSequence.charAt ( i ) ) ; } return this ; }
protected void close ( ) { if ( ( mShell ) != null ) { saveSize ( ) ; getShell ( ) . close ( ) ; } mQuitRequested = true ; }
private static java.lang.CharSequence buildSecondaryVoicemailText ( com.android.dialer.voicemail.model.VoicemailEntry voicemailEntry ) { return voicemailEntry.getGeocodedLocation ( ) ; }
public boolean containsKey ( java.lang.Object key ) { return multimap.containsKey ( key ) ; }
public abstract void loadSettings ( java.util.Properties inSettings ) ;
public int hashCode ( ) { int result = mBuildConfigLines.hashCode ( ) ; result = ( 31 * result ) + ( mProguardFiles.hashCode ( ) ) ; return result ; }
public static void computeErfc ( android.renderscript.cts.TestErfc.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.erfc ( args.in ) , 16 , 128 ) ; }
protected void logv ( java.lang.String s ) { android.telephony.Rlog.v ( com.android.internal.telephony.gsm.SIMRecords.LOG_TAG , ( "[SIMRecords] " + s ) ) ; }
private static java.lang.String getMessageTag ( java.lang.String tag ) { java.util.Calendar c = java.util.Calendar.getInstance ( ) ; if ( tag == null ) { return java.lang.String.format ( Messages.DdmsPlugin_Message_Tag_Mask_1 , c ) ; } return java.lang.String.format ( Messages.DdmsPlugin_Message_Tag_Mask_2 , c , tag ) ; }
protected void onFinishInflate ( ) { super . onFinishInflate ( ) ; image = findViewById ( R.id.bottom_nav_item_image ) ; text = findViewById ( R.id.bottom_nav_item_text ) ; notificationBadge = findViewById ( R.id.notification_badge ) ; }
protected void preventAutomaticReconnect ( ) { if ( ( this ) != ( mNetworkAgent ) ) return ; unwantedNetwork ( com.android.server.wifi.WifiStateMachine.NETWORK_STATUS_UNWANTED_DISABLE_AUTOJOIN ) ; }
void enableScreenAfterBoot ( ) { android.util.EventLog.writeEvent ( EventLogTags.BOOT_PROGRESS_ENABLE_SCREEN , android.os.SystemClock.uptimeMillis ( ) ) ; mWindowManager.enableScreenAfterBoot ( ) ; }
public static native long EVP_DigestInit ( long evp_md ) ;
protected void attachBaseContext ( android.content.Context base ) { super . attachBaseContext ( base ) ; assert ( getBaseContext ( ) ) != null ; checkAppBeingReplaced ( ) ; org.chromium.base.multidex.ChromiumMultiDexInstaller.install ( this ) ; }
public void asStringBasic ( ) throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump ( ) ; com.android.tools.perflib.heap.Instance str = ( ( com.android.tools.perflib.heap.Instance ) ( dump.getDumpedThing ( "basicString" ) ) ) ; org.junit.Assert.assertEquals ( "hello, world" , com.android.ahat.InstanceUtils.asString ( str ) ) ; }
public void setHasEverConnectedTrueOnConnect ( ) throws java.lang.Exception { connect ( ) ; verify ( mWifiConfigManager , atLeastOnce ( ) ) . updateNetworkAfterConnect ( 0 ) ; }
public void callSessionConferenceExtended ( com.android.ims.internal.IImsCallSession i , com.android.ims.internal.IImsCallSession newSession , android.telephony.ims.ImsCallProfile imsCallProfile ) throws android.os.RemoteException { mNewListener.callSessionConferenceExtended ( newSession , imsCallProfile ) ; }
java.lang.String formatNsnUsingPattern ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.NumberFormat formattingPattern , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat numberFormat ) { return formatNsnUsingPattern ( nationalNumber , formattingPattern , numberFormat , null ) ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newSysImg ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IdDisplay tag , @ com.android.annotations.NonNull java.lang.String abi , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_SYS_IMAGES ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; p.mTag = tag ; p.mPath = abi ; return p ; }
private native void nativeDrawSelection ( android.graphics.Canvas content , float scale , int offset , int x , int y , boolean extendSelection ) ;
public void onSessionConfigFailed ( ) { android.os.Bundle mResults = new android.os.Bundle ( ) ; mResults.putInt ( "discoverySessionId" , mDiscoverySessionId ) ; mEventFacade.postEvent ( "WifiAwareSessionOnSessionConfigFailed" , mResults ) ; }
private native void setInt ( java.lang.Object object , int value , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public java.lang.String getTypeDescription ( ) { return "unvalidated android data in the format " + ( com.google.devtools.build.android.UnvalidatedAndroidData.expectedFormat ( ) ) ; }
public static void disableAutoRotation ( android.autofillservice.cts.UiBot uiBot ) { android.autofillservice.cts.Helper.runShellCommand ( android.autofillservice.cts.Helper.ACCELLEROMETER_CHANGE , 0 ) ; uiBot.setScreenOrientation ( android.autofillservice.cts.UiBot.PORTRAIT ) ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { return libcore.reflect.AnnotationAccess.getParameterAnnotations ( declaringClassOfOverriddenMethod , dexMethodIndex ) ; }
public static long ReturnLong34 ( ) { float imm = Main.$inline$float ( 34.0F ) ; return ( ( long ) ( imm ) ) ; }
public static void computePowr ( android.renderscript.cts.TestPowr.ArgumentsFloatFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 16 , 128 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.powr ( args.inBase , args.inExponent , t ) ; }
public static void computeMad ( android.renderscript.cts.TestMad.ArgumentsFloatFloatFloatFloat args ) { args.out = android.renderscript.cts.Floaty.add ( new android.renderscript.cts.Floaty ( ( ( args.inA ) * ( args.inB ) ) ) , new android.renderscript.cts.Floaty ( args.inC ) ) ; args.out.setMinimumError ( 1 , 4 ) ; }
public com.android.ide.common.process.ProcessResult assertNormalExitValue ( ) throws com.android.ide.common.process.ProcessException { return this ; }
void sendAccessibilityEventInternal ( int eventType ) { if ( android.view.accessibility.AccessibilityManager.getInstance ( mContext ) . isEnabled ( ) ) { sendAccessibilityEventUnchecked ( android.view.accessibility.AccessibilityEvent.obtain ( eventType ) ) ; } }
public com.google.common.primitives.UnsignedInteger minus ( com.google.common.primitives.UnsignedInteger val ) { return com.google.common.primitives.UnsignedInteger.fromIntBits ( ( ( value ) - ( com.google.common.base.Preconditions.checkNotNull ( val ) . value ) ) ) ; }
public static int $noinline$MulN1 ( int arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg * ( - 1 ) ; }
void start ( ) { mDeviceListMonitorTask = new com.android.ddmlib.DeviceMonitor.DeviceListMonitorTask ( mServer , new com.android.ddmlib.DeviceMonitor.DeviceListUpdateListener ( ) ) ; new java.lang.Thread ( mDeviceListMonitorTask , "Device List Monitor" ) . start ( ) ; }
private static com.intellij.openapi.vfs.VirtualFile [ ] getCompilationClasspath ( com.intellij.openapi.module.Module m ) { return com.intellij.openapi.roots.ModuleRootManager.getInstance ( m ) . orderEntries ( ) . recursively ( ) . exportedOnly ( ) . getClassesRoots ( ) ; }
public void test_EmptyMap_merge ( ) { try { java.util.Collections.emptyMap ( ) . merge ( 1 , 5.0 , ( k , v ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public static int randomIntInternal ( ) { return java.lang.Math.INSTANCE.nextInt ( ) ; }
public void test_oneDex_init ( ) throws java.lang.Exception { java.lang.ClassLoader cl = createLoader ( dex1 ) ; java.io.File [ ] files = optimizedDir.listFiles ( dalvik.system.DexClassLoaderTest.DEX_FILE_NAME_FILTER ) ; assertNotNull ( files ) ; assertEquals ( 1 , files.length ) ; }
public static void initialize ( ) { if ( org.chromium.base.metrics.RecordHistogram.sIsDisabledForTests ) return ; org.chromium.base.metrics.RecordHistogram.nativeInitialize ( ) ; }
public void clear ( ) { super . clear ( ) ; producerStack.clear ( ) ; actualProducerStack.clear ( ) ; }
public boolean stopService ( android.content.Intent service ) { warnIfCallingFromSystemProcess ( ) ; return stopServiceCommon ( service , mUser ) ; }
private void loadClass ( ) throws java.io.IOException { mInput.readInt ( ) ; long id = readId ( ) ; mInput.readInt ( ) ; java.lang.String name = mStrings.get ( readId ( ) ) ; mClassNames.put ( id , name ) ; }
public void addScheduledRecording ( com.android.tv.dvr.data.ScheduledRecording ... scheduledRecordings ) { for ( com.android.tv.dvr.data.ScheduledRecording r : scheduledRecordings ) { addScheduledRecordingInternal ( r ) ; } }
public void cancel ( ) { synchronized ( mLock ) { mCanceled = true ; mErrorListener = null ; } }
public static void setAppLayerName ( com.android.game.qualification.ApkInfo apk ) { com.android.game.qualification.metric.GameQualificationMetricCollector.mTestApk = apk ; }
void setJarJarRuleFiles ( java.util.List < java.io.File > jarJarRuleFiles ) ;
public static void v ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { android.telecom.Log.v ( objectPrefix , format , args ) ; }
private float getFontSizeFactor ( com.android.internal.telephony.cat.FontSize size ) { final float [ ] fontSizes = new float [ ] { com.android.stk.StkInputActivity.NORMAL_FONT_FACTOR , com.android.stk.StkInputActivity.LARGE_FONT_FACTOR , com.android.stk.StkInputActivity.SMALL_FONT_FACTOR } ; return fontSizes [ size.ordinal ( ) ] ; }
private java.lang.String cipherToString ( int cipher ) { switch ( cipher ) { case android.net.wifi.ScanResult.CIPHER_NONE : return "None" ; case android.net.wifi.ScanResult.CIPHER_CCMP : return "CCMP" ; case android.net.wifi.ScanResult.CIPHER_TKIP : return "TKIP" ; default : return "?" ; } }
private static int validate3DigitVersion ( int value ) throws libcore.tzdata.update2.BundleException { if ( ( value < 0 ) || ( value > 999 ) ) { throw new libcore.tzdata.update2.BundleException ( ( "Expected 0 <= value <= 999, was " + value ) ) ; } return value ; }
public boolean isEthernetAvailable ( ) { return ( mConnectivityManager.isNetworkSupported ( ConnectivityManager.TYPE_ETHERNET ) ) && ( ( mEthernetManager.getAvailableInterfaces ( ) . length ) > 0 ) ; }
native long rsnScriptGroup2Create ( long con , java.lang.String cachePath , long [ ] closures ) ;
public boolean remove ( java.lang.Object o ) { return ( map.remove ( o ) ) != null ; }
private int insertInitialPackageStatus ( ) throws java.io.IOException { final int initialOptimisticLockId = ( ( int ) ( java.lang.System.currentTimeMillis ( ) ) ) ; writePackageStatusLocked ( null , initialOptimisticLockId , null ) ; return initialOptimisticLockId ; }
private void addProviderLocked ( com.android.server.location.LocationProviderInterface provider ) { mProviders.add ( provider ) ; mProvidersByName.put ( provider.getName ( ) , provider ) ; }
public boolean getDataEnabled ( ) { return isDataEnabled ( ) ; }
protected void onDestroy ( ) { super . onDestroy ( ) ; unregisterReceiver ( mReceiver ) ; }
public void removeParticipants ( java.lang.String [ ] participants ) { this . removeParticipants ( participants ) ; }
public void factory_ofEpochDay_aboveMax ( ) { java.time.LocalDate.ofEpochDay ( ( ( tck.java.time.TCKLocalDate.MAX_VALID_EPOCHDAYS ) + 1 ) ) ; }
public final void testCertificate ( ) { org.apache.harmony.tests.javax.security.cert.CertificateTest.TBTCert tbt_cert = new org.apache.harmony.tests.javax.security.cert.CertificateTest.TBTCert ( ) ; assertNull ( "Public key should be null" , tbt_cert.getPublicKey ( ) ) ; assertEquals ( "Wrong string representation for Certificate" , "TBTCert" , tbt_cert.toString ( ) ) ; }
public void setQualifier ( com.android.ide.common.resources.configuration.ResourceQualifier qualifier ) { com.android.ide.common.resources.configuration.RegionQualifier q = ( ( com.android.ide.common.resources.configuration.RegionQualifier ) ( qualifier ) ) ; java.lang.String value = q.getValue ( ) ; if ( value != null ) { mRegion.setText ( q.getValue ( ) ) ; } }
public static float copySign ( float magnitude , float sign ) { return java.lang.StrictMath.copySign ( magnitude , sign ) ; }
protected void unregisterForRuimRecordEvents ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.unregisterForNewSms ( this ) ; super . unregisterForRuimRecordEvents ( ) ; }
java.lang.String fieldOrMethodName ( ) ;
void loadTimeZone ( com.ibm.icu.impl.ICUResourceBundle zoneStrings , java.lang.String tzID ) { java.lang.String key = tzID.replace ( '/' , ':' ) ; loadNames ( zoneStrings , key ) ; }
public static java.lang.String normalizeDigitsOnly ( java.lang.CharSequence number ) { return com.google.i18n.phonenumbers.PhoneNumberUtil.normalizeDigits ( number , false ) . toString ( ) ; }
private java.util.List < com.ibm.icu.dev.test.ModuleTest.TestDataPair > getTestData ( ) throws java.lang.Exception { return com.ibm.icu.dev.test.ModuleTest.getTestData ( "com/ibm/icu/dev/data/testdata/" , "conversion" ) ; }
public void onMetadataChanged ( android.media.MediaMetadata metadata ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) { android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , "onMetadataChanged" ) ; } updateCurrentMediaState ( ) ; }
public void testUsesFeatureSplit_elementDeleted ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String input = "" + ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <uses-feature android:required=\"false\"" ) + " android:glEsVersion=\"0x00020000\"/>\n" ) + " <uses-feature" ) + " android:required=\"false\"" ) + " android:glEsVersion=\"0x00030000\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument xmlDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "testUsesFeatureSplit" ) , input ) ; com.android.manifmerger.ActionRecorder mockActionRecorder = org.mockito.Mockito.mock ( com.android.manifmerger.ActionRecorder.class ) ; com.android.manifmerger.MergingReport.Builder mockReport = org.mockito.Mockito.mock ( MergingReport.Builder.class ) ; org.mockito.Mockito.when ( mockReport.getActionRecorder ( ) ) . thenReturn ( mockActionRecorder ) ; com.android.manifmerger.ElementsTrimmer.trim ( xmlDocument , mockReport ) ; org.w3c.dom.NodeList elementsByTagName = xmlDocument.getRootNode ( ) . getXml ( ) . getElementsByTagName ( "uses-feature" ) ; assertEquals ( 1 , elementsByTagName.getLength ( ) ) ; org.mockito.Mockito.verify ( mockActionRecorder ) . recordNodeAction ( org.mockito.Matchers.any ( com.android.manifmerger.XmlElement.class ) , org.mockito.Matchers.eq ( Actions.ActionType.REJECTED ) ) ; for ( int i = 0 ; i < ( elementsByTagName.getLength ( ) ) ; i ++ ) { org.w3c.dom.NamedNodeMap attributes = elementsByTagName.item ( i ) . getAttributes ( ) ; assertEquals ( 2 , attributes.getLength ( ) ) ; ensureOnlyOneKey ( attributes , ManifestModel.NodeTypes.USES_FEATURE ) ; } }
public abstract com.android.tools.lint.client.api.JavaParser.ResolvedField getField ( @ com.android.annotations.NonNull java.lang.String name , boolean includeInherited ) ;
public com.android.build.gradle.internal.dsl.SigningConfigDsl initWith ( com.android.builder.signing.SigningConfig that ) { setStoreLocation ( that.getStoreLocation ( ) ) ; setStorePassword ( that.getStorePassword ( ) ) ; setKeyAlias ( that.getKeyAlias ( ) ) ; setKeyPassword ( that.getKeyPassword ( ) ) ; return this ; }
public static android.os.ParcelFileDescriptor dup ( java.io.FileDescriptor orig ) throws java.io.IOException { try { final java.io.FileDescriptor fd = android.system.Os.dup ( orig ) ; return new android.os.ParcelFileDescriptor ( fd ) ; } catch ( android.system.ErrnoException e ) { throw e.rethrowAsIOException ( ) ; } }
public java.util.Iterator < com.android.ide.common.rendering.api.DataBindingItem > iterator ( ) { return mItems.iterator ( ) ; }
public static android.telephony.MbmsDownloadManager create ( android.content.Context context , android.telephony.mbms.MbmsDownloadManagerCallback listener ) throws android.telephony.mbms.MbmsException { return android.telephony.MbmsDownloadManager.create ( context , listener , android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
public com.android.internal.telephony.Connection dial ( java.lang.String dialString , com.android.internal.telephony.UUSInfo uusInfo , int videoState , android.os.Bundle intentExtras ) throws com.android.internal.telephony.CallStateException { return dialInternal ( dialString , videoState , intentExtras , null ) ; }
public int size ( ) { return multimap.keySet ( ) . size ( ) ; }
public void test_U8_1_SCALE20_20_inSqure ( ) { testResize ( inX , inX , Element.DataType.UNSIGNED_8 , 1 , 2.0F , 2.0F ) ; }
public void applyTransportModeTransform ( @ android.annotation.NonNull java.net.Socket socket , @ android.net.IpSecManager.PolicyDirection int direction , @ android.annotation.NonNull android.net.IpSecTransform transform ) throws java.io.IOException { socket.getSoLinger ( ) ; applyTransportModeTransform ( socket.getFileDescriptor$ ( ) , direction , transform ) ; }
public boolean isHidden ( ) { if ( Doclava.hiddenPackages.contains ( mName ) ) { return true ; } return comment ( ) . isHidden ( ) ; }
public void bool ( boolean v ) throws java.io.IOException { mBuffer [ 0 ] = ( ( byte ) ( ( v ) ? 1 : 0 ) ) ; mOutputStream.write ( mBuffer , 0 , 1 ) ; }
public void testPortWithMinusSign ( ) throws java.lang.Exception { try { new java.net.URL ( "http://host:-2/" ) ; fail ( ) ; } catch ( java.net.MalformedURLException expected ) { } }
public static int randomIntInternal ( ) { return java.lang.Math.RandomNumberGeneratorHolder.randomNumberGenerator.nextInt ( ) ; }
public void fatalError ( org.xml.sax.SAXParseException e ) { log.error ( Severity.ERROR , new com.android.manifmerger.IMergerLog.FileAndLine ( xmlFile.getName ( ) , 0 ) , "Fatal error when parsing: %1$s" , xmlFile.getName ( ) , e.toString ( ) ) ; }
public android.net.IpSecConfig getIpSecConfig ( ) { return mConfig ; }
public static void Print10 ( ) { ManyMethods.Printer2.Print ( ManyMethods.Strings.msg10 ) ; }
public java.lang.String getNai ( ) { return getNaiBySubscriberId ( getSubId ( ) ) ; }
public void run ( ) { synchronized ( this ) { mDidUpdate = true ; } com.android.server.am.ActivityManagerService.writeLastDonePreBootReceivers ( doneReceivers ) ; systemReady ( goingCallback ) ; }
public void testSubjectAltNameWithWildcard ( ) { assertTrue ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*.g.com" ) ) ) ; }
private java.lang.String getTimeZoneDataPackageName ( ) { org.junit.Assert.assertNotNull ( mOemDataAppPackageName ) ; return mOemDataAppPackageName ; }
public static long max ( long a , long b ) { return java.lang.Math.max ( a , b ) ; }
public void stopDrag ( ) { mCurrentElements = null ; mCurrentSelection = null ; mSourceCanvas = null ; mRemoveSourceHandler = null ; mDragBounds = null ; }
public void doubleClick ( org.eclipse.jface.viewers.DoubleClickEvent event ) { org.eclipse.ui.IWorkbenchPage page = getSite ( ) . getPage ( ) ; try { page.showView ( IPageLayout.ID_PROP_SHEET , null , IWorkbenchPage.VIEW_ACTIVATE ) ; } catch ( org.eclipse.ui.PartInitException e ) { com.android.ide.eclipse.adt.AdtPlugin.log ( e , "Could not activate property sheet" ) ; } }
private void moveConfigurationToIndex ( int index , com.google.gct.testing.CloudTestConfigurationImpl configuration ) { editableConfigurations.remove ( configuration ) ; editableConfigurations.add ( index , configuration ) ; removeConfigurationFromTree ( configuration ) ; addConfigurationToTree ( index , configuration , true ) ; updateConfigurationTree ( ) ; }
public void consumerProguardFiles ( java.lang.Object ... proguardFileArray ) { getConsumerProguardFiles ( ) . addAll ( project.files ( proguardFileArray ) . getFiles ( ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onButtonAddonSites ( ) ; }
public static int intReverseConditionNaN ( int i ) { return 42 != ( java.lang.Math.sqrt ( i ) ) ? 13 : 54 ; }
protected java.awt.Color getEmptySpaceColor ( ) { return com.intellij.util.ui.UIUtil.getBgFillColor ( getParent ( ) ) ; }
private static java.util.prefs.Preferences getPrefs ( ) { return java.util.prefs.Preferences.userRoot ( ) . node ( com.google.gct.login.GoogleLoginPrefs.PREFERENCES_PATH ) ; }
public static void setInstance ( com.android.server.telecom.TelecomSystem instance ) { if ( ( com.android.server.telecom.TelecomSystem.INSTANCE ) != null ) { com.android.server.telecom.Log.w ( "TelecomSystem" , "Attempt to set TelecomSystem.INSTANCE twice" ) ; } com.android.server.telecom.Log.i ( com.android.server.telecom.TelecomSystem.class , "TelecomSystem.INSTANCE being set" ) ; com.android.server.telecom.TelecomSystem.INSTANCE = instance ; }
public void out ( java.lang.String message ) { verboseStream.println ( message ) ; }
public void streamMethodUpdated ( int methodType ) throws android.os.RemoteException { }
private static void initAdbSocketAddr ( ) { try { com.android.ddmlib.AndroidDebugBridge.sAdbServerPort = com.android.ddmlib.AndroidDebugBridge.getAdbServerPort ( ) ; com.android.ddmlib.AndroidDebugBridge.sHostAddr = java.net.InetAddress.getByName ( com.android.ddmlib.AndroidDebugBridge.DEFAULT_ADB_HOST ) ; com.android.ddmlib.AndroidDebugBridge.sSocketAddr = new java.net.InetSocketAddress ( com.android.ddmlib.AndroidDebugBridge.sHostAddr , com.android.ddmlib.AndroidDebugBridge.sAdbServerPort ) ; } catch ( java.net.UnknownHostException e ) { } }
public static int $noinline$floatToDoubleToInt ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
private void enforceChangePermission ( ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.CHANGE_WIFI_STATE , com.android.server.wifi.aware.WifiAwareServiceImpl.TAG ) ; }
public static void computeConvert ( android.renderscript.cts.TestConvert.ArgumentsFloatShort args ) { args.out = android.renderscript.cts.CoreMathVerifier.convertFloatToShort ( args.inV ) ; }
public long getTotalCpuTime ( ) { return 0 ; }
public void initComponent ( ) { com.google.gct.idea.appengine.synchronization.SampleSyncScheduler.getInstance ( ) . startScheduleTask ( ) ; }
void onPackageInstalled ( int statusCode ) { android.os.Message msg = mHandler.obtainMessage ( INSTALL_COMPLETE ) ; msg.arg1 = statusCode ; mHandler.sendMessage ( msg ) ; }
public void comment ( java.lang.String comment ) throws java.io.IOException { check ( false ) ; append ( "<!--" ) ; append ( comment ) ; append ( "-->" ) ; }
public static long $noinline$NegNeg1 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return - ( - arg ) ; }
private void onDayChange ( ) { if ( ( computeCurrentConfig ( ) ) && ( ( mListener ) != null ) ) { mListener.onConfigurationChange ( ) ; } }
public com.android.ide.common.process.ProcessExecutor getProcessExecutor ( ) { return mProcessExecutor ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newSource ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_SOURCE ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; return p ; }
public static void computeDistance ( android.renderscript.cts.TestDistance.ArgumentsFloatFloatFloat args ) { args.out = android.renderscript.cts.CoreMathVerifier.distance ( new float [ ] { args.inLhs } , new float [ ] { args.inRhs } , 1 , 1 ) ; }
public void test_writeLong ( ) throws java.lang.Exception { os.writeLong ( 81985529216486895L ) ; assertEquals ( "0123456789ABCDEF" , libcore.util.HexEncoding.encodeToString ( bytes.toByteArray ( ) ) ) ; }
public void apply ( java.util.zip.ZipFile patchFile , java.io.File backupDir , java.io.File toDir ) throws java.io.IOException { doApply ( patchFile , backupDir , getFile ( toDir ) ) ; }
public java.lang.Void run ( ) { for ( java.util.logging.Handler hdl : l.accessCheckedHandlers ( ) ) { sysLogger.addHandler ( hdl ) ; } return null ; }
public final boolean isAccessModeSupported ( java.lang.invoke.VarHandle.AccessMode accessMode ) { final int testBit = 1 << ( accessMode.ordinal ( ) ) ; return ( ( accessModesBitMask ) & testBit ) == testBit ; }
native long rsnIncElementCreate ( long con , long type , int kind , boolean norm , int vecSize ) ;
public void render ( com.android.build.gradle.internal.variant.BaseVariantData variantData ) throws java.io.IOException { java.util.List < com.android.builder.dependency.AndroidDependency > libraries = variantData.getVariantConfiguration ( ) . getDirectLibraries ( ) ; renderNow ( libraries ) ; }
public int next ( ) { return libcore.icu.NativeBreakIterator.nextImpl ( this . address , this . string , 1 ) ; }
public final javax.crypto.ExemptionMechanism getExemptionMechanism ( ) { updateProviderIfNeeded ( ) ; return exmech ; }
private boolean handleTestLogData ( java.util.Map < java.lang.String , java.lang.String > values ) { java.lang.String newLog = values.get ( "dEQP-TestLogData-Log" ) ; if ( newLog == null ) { return false ; } mCurrentTestLog = ( mCurrentTestLog ) + newLog ; return true ; }
public V load ( K key ) { return computingFunction.apply ( com.google.common.base.Preconditions.checkNotNull ( key ) ) ; }
public com.ibm.icu.text.PluralRules.IFixedDecimal getFixedDecimal ( double number ) { com.ibm.icu.impl.number.FormatQuantity4 fq = new com.ibm.icu.impl.number.FormatQuantity4 ( number ) ; formatter.format ( fq ) ; return fq ; }
public org.eclipse.ltk.core.refactoring.CompositeChange getChange ( ) { java.util.Collections.reverse ( mChanges ) ; org.eclipse.ltk.core.refactoring.CompositeChange change = new org.eclipse.ltk.core.refactoring.CompositeChange ( "Refactoring Application package name" , mChanges.toArray ( new org.eclipse.ltk.core.refactoring.Change [ mChanges.size ( ) ] ) ) ; change.markAsSynthetic ( ) ; return change ; }
static java.lang.String getFlagName ( java.lang.reflect.Field field , com.google.devtools.common.options.OptionsData optionsData ) { java.lang.String name = field.getAnnotation ( com.google.devtools.common.options.Option.class ) . name ( ) ; return optionsData.isBooleanField ( field ) ? "[no]" + name : name ; }
public libcore.io.StructStatVfs fstatvfs ( java.io.FileDescriptor fd ) throws libcore.io.ErrnoException { return os.fstatvfs ( fd ) ; }
private void runKernelUnitTestSuite ( final java.lang.String [ ] tests ) { for ( final java.lang.String test : tests ) { assertTrue ( ( ( ( test + " failed. This test requires kernel functionality to pass. Please go to " ) + "http://source.android.com/devices/tech/config/kernel.html#Seccomp-BPF-TSYNC" ) + " for instructions on how to enable or backport the required functionality." ) , runKernelUnitTest ( test ) ) ; } }
public void visitDeprecatedAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.DeprecatedAttribute deprecatedAttribute ) { attributeVisitor.visitDeprecatedAttribute ( clazz , field , deprecatedAttribute ) ; }
public void removeTransportModeTransforms ( java.io.FileDescriptor socket , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.dup ( socket ) ) { removeTransportModeTransforms ( pfd , transform ) ; } }
public static float FloatMultiplication ( ) { float a ; float b ; float c ; a = Main.$inline$float ( 7.0F ) ; b = Main.$inline$float ( 3.0F ) ; c = a * b ; return c ; }
public T or ( T defaultValue ) { com.google.common.base.Preconditions.checkNotNull ( defaultValue , "use Optional.orNull() instead of Optional.or(null)" ) ; return reference ; }
protected boolean isImsConnection ( ) { android.telecom.Connection originalConnection = getOriginalConnection ( ) ; return ( originalConnection != null ) && ( ( originalConnection.getPhoneType ( ) ) == ( com.android.internal.telephony.PhoneConstants.PHONE_TYPE_IMS ) ) ; }
public void render ( T model , org.gradle.api.internal.html.SimpleHtmlWriter htmlWriter ) throws java.io.IOException { this . results = model ; tabsRenderer.clear ( ) ; registerTabs ( ) ; renderTabs ( htmlWriter ) ; }
protected void doOKAction ( ) { super . doOKAction ( ) ; org.jetbrains.plugins.github.util.GithubSettings.getInstance ( ) . setCreatePullRequestDefaultBranch ( getTargetBranch ( ) ) ; }
public static android.telecom.ParcelableCall toParcelableCall ( com.android.server.telecom.Call call , boolean includeVideoProvider , com.android.server.telecom.PhoneAccountRegistrar phoneAccountRegistrar , boolean supportsExternalCalls , boolean includeRttCall ) { return com.android.server.telecom.ParcelableCallUtils.toParcelableCall ( call , includeVideoProvider , phoneAccountRegistrar , supportsExternalCalls , com.android.server.telecom.ParcelableCallUtils.CALL_STATE_OVERRIDE_NONE , includeRttCall ) ; }
public static void computeCopysign ( android.renderscript.cts.TestCopysign.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Math.copySign ( args.inX , args.inY ) , 0 , 0 ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ( guard ) != null ) { guard.warnIfOpen ( ) ; } helpDestroy ( ) ; } finally { super . finalize ( ) ; } }
public void syncFailed ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project , @ org.jetbrains.annotations.NotNull final java.lang.String errorMessage ) { com.intellij.openapi.application.ApplicationManager.getApplication ( ) . invokeLater ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.intellij.openapi.ui.Messages.showErrorDialog ( ( "Error importing App Engine module : " + errorMessage ) , com.google.gct.idea.appengine.wizard.CloudModuleUtils.ERROR_MESSAGE_TITLE ) ; } } ) ; }
public void Test11619_UnrecognizedTimeZoneID ( ) { android.icu.util.VTimeZone vzone = android.icu.util.VTimeZone.create ( "ABadTimeZoneId" ) ; android.icu.dev.test.TestFmwk.assertNull ( "" , vzone ) ; }
public void registerContentObservers ( android.content.Context appContext , com.android.dialer.phonelookup.blockednumber.ContentObserverCallbacks contentObserverCallbacks ) { appContext.getContentResolver ( ) . registerContentObserver ( FilteredNumber.CONTENT_URI , true , new com.android.dialer.phonelookup.blockednumber.MarkDirtyObserver ( appContext , contentObserverCallbacks ) ) ; }
public void loadComponentsInApMode ( ) throws java.lang.Exception { mWsm.setHostApRunning ( new android.net.wifi.WifiConfiguration ( ) , true ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( "SoftApState" , getCurrentState ( ) . getName ( ) ) ; verify ( mSoftApManager ) . start ( ) ; }
public java.util.List < java.lang.String > getBootClasspath ( ) { return com.google.common.collect.ImmutableList.of ( getPath ( IAndroidTarget.ANDROID_JAR ) ) ; }
private com.android.jack.ir.ast.JStatement makeAssignStatement ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info , @ javax.annotation.Nonnull com.android.jack.ir.ast.JLocal local , com.android.jack.ir.ast.JExpression value ) { return new com.android.jack.ir.ast.JAsgOperation ( info , local.makeRef ( info ) , value ) . makeStatement ( ) ; }
public void onAbort ( ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "onAbort " + ( mCurrentCall ) ) ) ; } onDisconnect ( ) ; }
public java.nio.CharBuffer asReadOnlyBuffer ( ) { java.nio.ByteBufferAsCharBuffer buf = new java.nio.ByteBufferAsCharBuffer ( byteBuffer.asReadOnlyBuffer ( ) ) ; buf.limit = limit ; buf.position = position ; buf.mark = mark ; buf.byteBuffer.order = byteBuffer.order ; return buf ; }
public static void computeSign ( android.renderscript.cts.TestSign.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Math.signum ( args.inV ) , 0 , 0 ) ; }
public void onRecordLoaded ( android.os.AsyncResult ar ) { mEFpl = ( ( byte [ ] ) ( ar.result ) ) ; if ( DBG ) log ( ( "EF_PL=" + ( com.android.internal.telephony.uicc.IccUtils.bytesToHexString ( mEFpl ) ) ) ) ; }
public static native boolean BN_primality_test ( long candidate , int checks , boolean do_trial_division ) ;
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.SpecificKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO SupportedKeyClasses" , libcore.javax.crypto.MockKey.class . getName ( ) ) ; }
public static java.lang.String getTimeZoneDatabaseVersion ( ) { return libcore.util.ZoneInfoDB.getInstance ( ) . getVersion ( ) ; }
public java.util.Collection < java.io.File > getProguardFiles ( ) { return productFlavor.getProguardFiles ( ) ; }
public void testSetOnDismissListener ( ) throws java.lang.InterruptedException { if ( ( isTelevision ( ) ) || ( isWatch ( ) ) ) { return ; } android.app.stubs.SearchManagerStubActivity.setCTSResult ( this ) ; setupActivity ( SearchManagerStubActivity.TEST_ON_DISMISSLISTENER ) ; waitForResult ( ) ; }
void resetIdleManagementLocked ( ) { mNextIdlePendingDelay = 0 ; mNextIdleDelay = 0 ; cancelAlarmLocked ( ) ; cancelSensingAlarmLocked ( ) ; cancelLocatingLocked ( ) ; stopMonitoringMotionLocked ( ) ; mAnyMotionDetector.stop ( ) ; }
public void factory_ofEpochDay_belowMin ( ) { java.time.LocalDate.ofEpochDay ( ( ( tck.java.time.TCKLocalDate.MIN_VALID_EPOCHDAYS ) - 1 ) ) ; }
public void merge ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws com.android.jack.backend.dex.DexWritingException { com.android.sched.vfs.InputVFile vFile = getDexInputVFileOfType ( jackOutputLibrary , type ) ; try { mergeDex ( merger , vFile ) ; } catch ( com.android.jack.tools.merger.MergingOverflowException e ) { throw new com.android.jack.backend.dex.DexWritingException ( new com.android.jack.backend.dex.SingleDexOverflowException ( e ) ) ; } }
private native java.lang.reflect.Constructor < ? > [ ] getDeclaredConstructorsInternal ( boolean publicOnly ) ;
public void cancelSession ( java.lang.String callingPackage , java.lang.String cardId , byte [ ] transactionId , @ android.telephony.euicc.EuiccCardManager.CancelReason int reason , com.android.internal.telephony.euicc.ICancelSessionCallback callback ) { checkCallingPackage ( callingPackage ) ; }
public static android.telephony.SignalStrength convertHalSignalStrength_1_2 ( com.android.internal.telephony.V1_2.SignalStrength signalStrength ) { return new android.telephony.SignalStrength ( signalStrength.gsm.signalStrength , signalStrength.gsm.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , signalStrength.tdScdma.rscp , signalStrength.wcdma.base.signalStrength , signalStrength.wcdma.rscp ) ; }
public void testE2 ( ) { loadAndRun ( "dot.junit.opcodes.aget_char.d.T_aget_char_1" , java.lang.NullPointerException.class , null , 2 ) ; }
public void onConnectionServiceReleased ( com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionServiceFocus ) { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_RELEASE_CONNECTION_FOCUS , new com.android.server.telecom.ConnectionServiceFocusManager.MessageArgs ( android.telecom.Log.createSubsession ( ) , "CSFM.oCSR" , connectionServiceFocus ) ) . sendToTarget ( ) ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newSysImg ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IdDisplay tag , @ com.android.annotations.NonNull java.lang.String abi , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_SYS_IMAGES ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; p.mTag = tag ; p.mPath = abi ; return p ; }
public java.lang.String toString ( ) { return ( ( ( ( ( "[" + ( mComponentName ) ) + " supportsExternal? " ) + ( mIsExternalCallsSupported ) ) + " supportsSelfMg?" ) + ( mIsSelfManagedCallsSupported ) ) + "]" ; }
public static java.lang.String hidePii ( java.lang.String s ) { return com.android.internal.telephony.sip.SipPhone.VDBG ? android.telephony.Rlog.pii ( com.android.internal.telephony.sip.SipPhone.LOG_TAG , s ) : "xxxxx" ; }
public java.util.List < android.icu.util.TimeZone > lookupTimeZonesByCountry ( java.lang.String countryIso ) { libcore.util.CountryTimeZones countryTimeZones = lookupCountryTimeZones ( countryIso ) ; return countryTimeZones == null ? null : countryTimeZones.getIcuTimeZones ( ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession t ) throws java.lang.Exception { try { com.android.jack.util.StructurePrinter visitor = new com.android.jack.util.StructurePrinter ( stream ) ; visitor.accept ( t.getTypesToEmit ( ) ) ; } finally { stream.close ( ) ; } }
public void testConstructor_NullSerial_Success ( ) throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , "RSA" , 1024 , null , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , null , android.security.KeyPairGeneratorSpecTest.NOW , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; assertEquals ( android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_SERIAL_NUMBER , spec.getSerialNumber ( ) ) ; }
public void onSearchBarClicked ( ) { com.android.dialer.common.LogUtil.enterBlock ( "MainSearchController.onSearchBarClicked" ) ; com.android.dialer.logging.Logger.get ( mainActivity ) . logImpression ( DialerImpression.Type.NUI_CLICK_SEARCH_BAR ) ; openSearch ( com.google.common.base.Optional.absent ( ) ) ; }
java.lang.String chooseClientAlias ( javax.net.ssl.X509KeyManager keyManager , javax.security.auth.x500.X500Principal [ ] issuers , java.lang.String [ ] keyTypes ) ;
com.google.common.collect.ImmutableCollection < com.google.common.collect.Table.Cell < R , C , V > > delegateCollection ( ) { return this ; }
native boolean nLoadSO ( boolean useNative , int deviceApi ) ;
public void onAwareDownCleanupDataPaths ( ) { if ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.TAG , "onAwareDownCleanupDataPaths" ) ; for ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.AwareNetworkRequestInformation nnri : mNetworkRequestsCache.values ( ) ) { tearDownInterface ( nnri ) ; } mNetworkRequestsCache.clear ( ) ; }
public void testVFE1 ( ) { load ( "dot.junit.opcodes.rem_long.d.T_rem_long_2" , java.lang.VerifyError.class ) ; }
static byte [ ] asBytes ( int [ ] x ) { byte [ ] z = new byte [ 16 ] ; org.bouncycastle.util.Pack.intToBigEndian ( x , z , 0 ) ; return z ; }
void setDebuggable ( java.lang.Boolean isDebuggable ) ;
private void beginWaitingFor ( com.google.common.util.concurrent.Monitor.Guard guard ) { int waiters = ( guard.waiterCount ) ++ ; if ( waiters == 0 ) { guard.next = activeGuards ; activeGuards = guard ; } }
private native void gattServerConnectNative ( int serverIf , java.lang.String address , boolean isDirect , int transport ) ;
public com.android.layoutlib.api.SceneResult removeChild ( ) { return SceneStatus.NOT_IMPLEMENTED.getResult ( ) ; }
protected void saveCredentials ( org.jetbrains.plugins.github.util.GithubAuthData auth ) { final org.jetbrains.plugins.github.util.GithubSettings settings = org.jetbrains.plugins.github.util.GithubSettings.getInstance ( ) ; settings.setCredentials ( myGithubLoginPanel.getHost ( ) , auth , myGithubLoginPanel.isSavePasswordSelected ( ) ) ; }
public static final void err ( java.lang.String message ) { org.junit.Assert.fail ( message ) ; }
public com.android.dialer.spam.status.SimpleSpamStatus.Builder setTimestampMillis ( @ android.support.annotation.Nullable java.lang.Long timestampMillis ) { return setTimestampMillis ( com.google.common.base.Optional.fromNullable ( timestampMillis ) ) ; }
void expandViewHolderFirstTimeAndCollapseAllOtherVisibleViewHolders ( com.android.dialer.voicemail.listui.NewVoicemailViewHolder expandedViewHolder , com.android.dialer.voicemail.model.VoicemailEntry voicemailEntryOfViewHolder , com.android.dialer.voicemail.listui.NewVoicemailViewHolder.NewVoicemailViewHolderListener listener ) ;
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mPackageManager = getContext ( ) . getPackageManager ( ) ; mDpm = getContext ( ) . getSystemService ( android.app.admin.DevicePolicyManager.class ) ; mEnabledAppsBeforeTest = getSystemPackageNameList ( ) ; }
public void attach ( @ android.annotation.NonNull android.net.wifi.aware.AttachCallback attachCallback , @ android.annotation.Nullable android.os.Handler handler ) { attach ( handler , null , attachCallback , null ) ; }
public static java.nio.file.attribute.FileTime fromMillis ( long value ) { return new java.nio.file.attribute.FileTime ( value , java.util.concurrent.TimeUnit.MILLISECONDS , null ) ; }
public java.lang.String getDefaultSkin ( ) { if ( ( mSkins.length ) == 1 ) { return mSkins [ 0 ] ; } if ( ( mVersion.getApiLevel ( ) ) >= 4 ) { return "WVGA800" ; } return "HVGA" ; }
public void changeIccFdnPassword ( java.lang.String oldPassword , java.lang.String newPassword , android.os.Message onComplete ) { synchronized ( mLock ) { if ( com.android.internal.telephony.uicc.UiccCardApplication.DBG ) log ( "changeIccFdnPassword" ) ; mCi.changeIccPin2ForApp ( oldPassword , newPassword , mAid , mHandler.obtainMessage ( com.android.internal.telephony.uicc.UiccCardApplication.EVENT_CHANGE_PIN2_DONE , onComplete ) ) ; } }
public java.lang.String apply ( com.android.jack.plugin.v01.Plugin plugin ) { return plugin.getVersion ( ) . getVersion ( ) ; }
public void doWork ( ) throws android.os.RemoteException { mService.hasFeatures ( mResponse , account , features , mContext.getOpPackageName ( ) ) ; }
public java.lang.String getUnresolvedName ( ) { return null ; }
public void visitEnd ( ) { if ( ( ! ( isInterface ) ) && ( defaultMethodsDefined ( interfaces ) ) ) { recordInheritedMethods ( ) ; stubMissingDefaultMethods ( interfaces ) ; } super . visitEnd ( ) ; }
public com.android.tools.perflib.vmtrace.Call getTopLevelCall ( int threadId ) { return mCalls.get ( threadId ) ; }
public boolean disableCellBroadcastRange ( int startMessageId , int endMessageId ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.LOG_TAG , "Error! Not implemented for CDMA." ) ; return false ; }
public void onError ( java.lang.String id ) { android.widget.Toast.makeText ( getApplicationContext ( ) , R.string.error_loading_media , Toast.LENGTH_LONG ) . show ( ) ; }
public void perform ( android.support.test.espresso.UiController uiController , android.view.View view ) { ( ( android.support.v4.widget.DrawerLayout ) ( view ) ) . openDrawer ( gravity ) ; }
public void run ( ) { onInitializeAccessibilityNodeInfo ( info ) ; }
public int load ( android.content.res.AssetFileDescriptor afd , int priority ) { return 0 ; }
public boolean enableCellBroadcastRange ( int startMessageId , int endMessageId ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.LOG_TAG , "Error! Not implemented for CDMA." ) ; return false ; }
public boolean hasCredentialChanged ( ) { return credentialChanged ; }
public void copy1DRangeFrom ( int off , int count , int [ ] d ) { validateIsInt32 ( ) ; copy1DRangeFromUnchecked ( off , count , d , Element.DataType.SIGNED_32 , d.length ) ; }
public void test_withSecond_secondTooHigh ( ) { tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.withSecond ( 60 ) ; }
public com.android.tradefed.device.ITestDevice getDevice ( ) { return mDevice ; }
public com.android.apksig.SigningCertificateLineage.Builder setNewCapabilities ( com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities ) { if ( signerCapabilities == null ) { throw new java.lang.NullPointerException ( "signerCapabilities == null" ) ; } mNewCapabilities = signerCapabilities ; return this ; }
public java.lang.Object getViewCookie ( ) { return null ; }
public void testPlurals ( ) throws java.lang.Exception { assertEquals ( ( "res/values/plurals.xml:3: Warning: The resource R.plurals.my_plural appears to be unused [UnusedResources]\n" + ( ( ( " <plurals name=\"my_plural\">\n" + " ~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) + "" ) ) , lintProject ( "res/values/strings4.xml" , "res/values/plurals.xml" , "AndroidManifest.xml" ) ) ; }
private static com.ibm.icu.impl.SimplePatternFormatter compilePattern ( java.lang.String pattern ) { return com.ibm.icu.impl.SimplePatternFormatter.compileMinMaxPlaceholders ( pattern , 2 , 2 ) ; }
public java.lang.String getSubscriberId ( ) { return getSubscriberId ( getSubId ( ) ) ; }
public int syncAddOrUpdateNetwork ( com.android.internal.util.AsyncChannel channel , android.net.wifi.WifiConfiguration config ) { android.os.Message resultMsg = channel.sendMessageSynchronously ( com.android.server.wifi.WifiStateMachine.CMD_ADD_OR_UPDATE_NETWORK , config ) ; int result = resultMsg.arg1 ; resultMsg.recycle ( ) ; return result ; }
public void testExact ( ) { org.junit.Assert.assertTrue ( new org.jacoco.core.matcher.WildcardMatcher ( "abc/def.txt" ) . matches ( "abc/def.txt" ) ) ; }
protected com.android.builder.core.AndroidBuilder getBuilder ( ) { com.google.common.base.Preconditions.checkState ( ( ( androidBuilder ) != null ) , "androidBuilder required for task '%s'." , getName ( ) ) ; return androidBuilder ; }
public libcore.tzdata.testing.ZoneInfoTestHelper.ZoneInfoDataBuilder setMagic ( int magic ) { this . magic = magic ; return this ; }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsUcharUcharUcharUchar args ) { args.out = android.renderscript.cts.CoreMathVerifier.minU8 ( args.inMaxValue , android.renderscript.cts.CoreMathVerifier.maxU8 ( args.inValue , args.inMinValue ) ) ; }
private void checkIntentHelperInitializedAndReliabilityTrackingEnabled ( ) { mFakeIntentHelper.assertInitialized ( com.android.server.timezone.PackageTrackerTest.UPDATE_APP_PACKAGE_NAME , com.android.server.timezone.PackageTrackerTest.DATA_APP_PACKAGE_NAME ) ; mFakeIntentHelper.assertReliabilityTriggerScheduled ( ) ; }
public void test_getSubjectAlternativeNames ( ) throws java.lang.Exception { sun.security.x509.GeneralName san1 = new sun.security.x509.GeneralName ( new sun.security.x509.RFC822Name ( "rfc@822.Name" ) ) ; sun.security.x509.GeneralName san2 = new sun.security.x509.GeneralName ( new sun.security.x509.DNSName ( "dNSName" ) ) ; sun.security.x509.GeneralNames sans = new sun.security.x509.GeneralNames ( ) ; sans.add ( san1 ) ; sans.add ( san2 ) ; tests.security.cert.X509CertSelectorTest.TestCert cert_1 = new tests.security.cert.X509CertSelectorTest.TestCert ( sans ) ; java.security.cert.X509CertSelector selector = new java.security.cert.X509CertSelector ( ) ; assertNull ( "Selector should return null" , selector.getSubjectAlternativeNames ( ) ) ; selector.setSubjectAlternativeNames ( getGeneralNamePairList ( sans ) ) ; assertTrue ( "The certificate should match the selection criteria." , selector.match ( cert_1 ) ) ; selector.getSubjectAlternativeNames ( ) . clear ( ) ; assertTrue ( ( "The modification of initialization object " + ( "should not affect the modification " + "of internal object." ) ) , selector.match ( cert_1 ) ) ; }
long getHiSyncId ( android.bluetooth.BluetoothDevice device ) { if ( device == null ) { return android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID ; } return mDeviceHiSyncIdMap.getOrDefault ( device , BluetoothHearingAid.HI_SYNC_ID_INVALID ) ; }
private int getPhoneId ( int preferredSubId ) { return android.telephony.SubscriptionManager.getPhoneId ( getSubId ( preferredSubId ) ) ; }
com.android.ide.eclipse.adt.internal.editors.layout.gle2.ScaleInfo getVerticalTransform ( ) { return mVScale ; }
public void test_until_TemporalUnit_nullEnd ( ) { tck.java.time.TCKYearMonth.TEST_2008_06.until ( null , java.time.temporal.ChronoUnit.DAYS ) ; }
public native java.lang.Class < ? > getDeclaringClass ( ) ;
public long getExclusiveTime ( com.android.tools.perflib.vmtrace.ClockType clockType ) { long inclusiveTimeInCallees = ( clockType == ( ClockType.THREAD ) ) ? mInclusiveThreadTimeInCallees : mInclusiveGlobalTimeInCallees ; return ( getInclusiveTime ( clockType ) ) - inclusiveTimeInCallees ; }
public void stop ( ) { if ( ( mCurrentLogCatOutputReceiver ) != null ) { mCurrentLogCatOutputReceiver.mIsCancelled = true ; mCurrentLogCatOutputReceiver = null ; processLogMessages ( java.util.Collections.singletonList ( com.android.ddmuilib.logcat.LogCatReceiver.DEVICE_DISCONNECTED_MESSAGE ) ) ; } mCurrentDevice = null ; }
public static java.lang.String getCallId ( android.telecom.Call call ) { if ( call != null ) { return "Call:" + ( call.hashCode ( ) ) ; } else return "" ; }
public static native double exp ( double a ) ;
public void setDataEnabled ( boolean enable ) { setDataEnabled ( getSubId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) , enable ) ; }
native void rsnAllocationData2D ( long con , long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , int dt , int mSize , boolean usePadding ) ;
public android.os.Bundle addAccount ( android.accounts.AccountAuthenticatorResponse r , java.lang.String s , java.lang.String s2 , java.lang.String [ ] strings , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { if ( com.android.bluetooth.pbapclient.Authenticator.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; throw new java.lang.UnsupportedOperationException ( ) ; }
public static void computeConvert ( android.renderscript.cts.TestConvert.ArgumentsUshortInt args ) { args.out = android.renderscript.cts.CoreMathVerifier.convertUshortToInt ( args.inV ) ; }
public static java.lang.String toUnicode ( java.lang.String input , int flags ) { try { return java.net.IDN.convertFullStop ( com.ibm.icu.text.IDNA.convertIDNToUnicode ( input , flags ) ) . toString ( ) ; } catch ( java.net.com.ibm e ) { return input ; } }
public static com.android.io.IAbstractFile getManifest ( com.android.io.IAbstractFolder projectFolder ) { com.android.io.IAbstractFile file = projectFolder.getFile ( SdkConstants.FN_ANDROID_MANIFEST_XML ) ; if ( file.exists ( ) ) { return file ; } return null ; }
public void dispose ( ) { super . dispose ( ) ; if ( mDisposeImage ) { mImage.dispose ( ) ; } mImage = null ; }
public boolean remove ( java.lang.Object element ) { return ( contains ( element ) ) && ( unfiltered.remove ( element ) ) ; }
private android.net.ConnectivityManager.CallbackHandler getHandler ( ) { synchronized ( android.net.ConnectivityManager.sCallbacks ) { if ( ( android.net.ConnectivityManager.sCallbackHandler ) == null ) { android.net.ConnectivityManager.sCallbackHandler = new android.net.ConnectivityManager.CallbackHandler ( android.net.ConnectivityThread.getInstanceLooper ( ) ) ; } return android.net.ConnectivityManager.sCallbackHandler ; } }
public static int BoolCond_IntVarCst ( boolean cond , int x ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return cond ? x : 1 ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranchBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; branch_ = value ; onChanged ( ) ; return this ; }
void notifyFolderConfigChanged ( ) { if ( ( ( mDisableUpdates ) > 0 ) || ( ( mClient ) == null ) ) { return ; } if ( mClient.changed ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration.CFG_FOLDER ) ) { saveConstraints ( ) ; } }
public int getFolderVersion ( ) { return mDriver.getResourceFolderVersion ( file ) ; }
native long rsnScriptKernelIDCreate ( long con , long sid , int slot , int sig ) ;
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO SupportedKeyClasses" , libcore.javax.crypto.MockKey.class . getName ( ) ) ; }
public java.util.Optional < java.lang.String > getAuthorization ( ) { return ( mAuthorization ) == null ? java.util.Optional.empty ( ) : java.util.Optional.of ( mAuthorization ) ; }
public void testGetActivityThemes5 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " package=\'com.android.unittest\'>\n" + " <application\n" ) + " android:label=\'@string/app_name\'\n" ) + " android:theme=\'@style/NoBackground\'\n" ) + " android:name=\'.app.TestApp\' android:icon=\'@drawable/app_icon\'>\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.prefs.PrefsActivity\'\n" ) + " android:label=\'@string/prefs_title\' />\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.app.IntroActivity\'\n" ) + " android:label=\'@string/intro_title\'\n" ) + " android:theme=\'@android:style/Theme.Dialog\' />\n" ) + " </application>\n" ) + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) + "" ) ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenSize.XLARGE ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ; assertEquals ( "NoBackground" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ) ; java.util.Map < java.lang.String , com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.ActivityAttributes > map = info.getActivityAttributesMap ( ) ; assertEquals ( map.toString ( ) , 2 , map.size ( ) ) ; assertNull ( map.get ( "com.android.unittest.prefs.PrefsActivity" ) . getTheme ( ) ) ; assertEquals ( "@android:style/Theme.Dialog" , map.get ( "com.android.unittest.app.IntroActivity" ) . getTheme ( ) ) ; }
private long getVerificationTimeout ( ) { return android.provider.Settings.Global.getLong ( mContext.getContentResolver ( ) , android.provider.Settings.Global.PACKAGE_VERIFIER_TIMEOUT , com.android.server.pm.PackageManagerService.DEFAULT_VERIFICATION_TIMEOUT ) ; }
public static native boolean isInterpreted ( ) ;
public static float cos ( float angle ) { return ( ( float ) ( java.lang.Math.cos ( angle ) ) ) ; }
public void getNeighboringCids ( android.os.Message response ) { mCi.getNeighboringCids ( response ) ; }
private static java.lang.CharSequence getTtsSpannableLtrNumber ( java.lang.CharSequence number ) { return android.telephony.PhoneNumberUtils.createTtsSpannable ( android.text.BidiFormatter.getInstance ( ) . unicodeWrap ( number.toString ( ) , TextDirectionHeuristics.LTR ) ) ; }
public static boolean delete ( @ com.intellij.openapi.util.io.NotNull java.io.File file ) { if ( NIOReflect.IS_AVAILABLE ) { return deleteRecursivelyNIO ( file ) ; } return com.intellij.openapi.util.io.FileUtil.deleteRecursively ( file ) ; }
public void testE7 ( ) { loadAndRun ( "dot.junit.opcodes.invoke_static_range.d.T_invoke_static_range_14" , java.lang.ExceptionInInitializerError.class ) ; }
public void run ( ) { mAppErrors.appNotResponding ( proc , activity , parent , aboveSystem , annotation ) ; }
public static boolean hasMigratedToNewBlocking ( android.content.Context context ) { return com.android.dialer.strictmode.StrictModeUtils.bypass ( ( ) -> android.preference.PreferenceManager.getDefaultSharedPreferences ( context ) . getBoolean ( com.android.dialer.blocking.FilteredNumberCompat.HAS_MIGRATED_TO_NEW_BLOCKING_KEY , false ) ) ; }
public void setDataEnabled ( boolean enable ) { setDataEnabled ( getSubId ( ) , enable ) ; }
public void execute ( com.android.monkeyrunner.core.IMonkeyDevice device ) throws java.lang.Exception { long ms = ( ( long ) ( 1000.0F * ( howLongSeconds ) ) ) ; java.lang.Thread.sleep ( ms ) ; }
public boolean processMessage ( android.os.Message message ) { android.util.Log.d ( com.android.server.wifi.WifiStateMachinePrime.TAG , ( "received a message in WifiDisabledState: " + message ) ) ; if ( checkForAndHandleModeChange ( message ) ) { return HANDLED ; } return NOT_HANDLED ; }
public void run ( ) { task.run ( this ) ; if ( mAutomaticallyCloseOnTaskCompletion ) { mDialog.setAutoCloseRequested ( ) ; } else { mDialog.setManualCloseRequested ( ) ; } }
void expectCapabilitiesWith ( int capability , com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { com.android.server.ConnectivityServiceTest.CallbackInfo cbi = expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES , agent ) ; android.net.NetworkCapabilities nc = ( ( android.net.NetworkCapabilities ) ( cbi.arg ) ) ; org.junit.Assert.assertTrue ( nc.hasCapability ( capability ) ) ; }
public long get ( int index ) { checkIndex ( index ) ; return byteBuffer.getLong ( ( index * ( libcore.io.SizeOf.LONG ) ) ) ; }
public void testAddTableWithAlignment ( ) { com.android.utils.HtmlBuilder builder = new com.android.utils.HtmlBuilder ( ) ; builder.beginTable ( "valign=\"top\"" ) . addTableRow ( "Data1" , "Data2" ) . endTable ( ) ; assertEquals ( "<table><tr><td valign=\"top\">Data1</td><td valign=\"top\">Data2</td></tr></table>" , builder.getHtml ( ) ) ; }
public void test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6 ( ) throws java.lang.Exception { test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface ( ipv6NetworkInterface , org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6 , org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6 ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService create ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor , java.lang.Object credential ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService ( editor , credential ) ; }
public static java.lang.String intToDoubleToIntPrint ( int value ) { double d = ( ( double ) ( value ) ) ; int i = ( ( int ) ( d ) ) ; return ( ( "d=" + d ) + ", i=" ) + i ; }
public void run ( ) { synchronized ( this ) { loadImage ( ) ; } }
private java.text.NumberFormat getNumberFormat ( ) { java.util.Locale locale = com.android.dialer.compat.CompatUtils.getLocale ( getContext ( ) ) ; return "fas" . equals ( locale.getISO3Language ( ) ) ? java.text.DecimalFormat.getInstance ( locale ) : java.text.DecimalFormat.getInstance ( java.util.Locale.ENGLISH ) ; }
public static int $noinline$intAddSubSimplifyArg2 ( int x , int y ) { int sum = x + y ; return sum - y ; }
public void expect ( org.hamcrest.Matcher < ? > matcher ) { if ( ( fMatcher ) == null ) fMatcher = ( ( org.hamcrest.Matcher < java.lang.Object > ) ( matcher ) ) ; else fMatcher = org.junit.matchers.JUnitMatchers.both ( fMatcher ) . and ( matcher ) ; }
public java.util.List < com.android.ahat.heapdump.AhatInstance > getHardReverseReferences ( ) { if ( ( mHardReverseReferences ) != null ) { return mHardReverseReferences ; } return java.util.Collections.emptyList ( ) ; }
public java.lang.Object getDominatorsComputationState ( ) { return mDominatorsComputationState ; }
public static native boolean presentInProfile ( java.lang.String profile , java.lang.reflect.Method method ) ;
public final void test_getLocalPrincipal ( ) throws java.lang.Exception { java.net.URL url = new java.net.URL ( "https://localhost:55555" ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( ) ) ) ; try { connection.getLocalPrincipal ( ) ; fail ( "IllegalStateException wasn't thrown" ) ; } catch ( java.lang.IllegalStateException expected ) { } javax.net.ssl.HttpsURLConnection con = new org.apache.harmony.tests.javax.net.ssl.MyHttpsURLConnection ( new java.net.URL ( "https://www.fortify.net/" ) , "X.508" ) ; assertNull ( con.getLocalPrincipal ( ) ) ; con = new org.apache.harmony.tests.javax.net.ssl.MyHttpsURLConnection ( new java.net.URL ( "https://www.fortify.net/" ) , "X.509" ) ; assertNotNull ( "Local principal is null" , con.getLocalPrincipal ( ) ) ; }
public com.android.sched.util.log.DummyTracer.DummyTracerEvent start ( @ javax.annotation.Nonnull com.android.sched.util.log.EventType type ) { assert ( config ) == ( com.android.sched.util.config.ThreadConfig.getConfig ( ) ) ; return dummyEvent ; }
public int getReleaseCode ( ) { return releaseCode ; }
public java.lang.String getCompleteVoiceMailNumber ( ) { mContext.enforceCallingOrSelfPermission ( com.android.internal.telephony.PhoneSubInfo.CALL_PRIVILEGED , "Requires CALL_PRIVILEGED" ) ; java.lang.String number = mPhone.getVoiceMailNumber ( ) ; android.telephony.Rlog.d ( com.android.internal.telephony.PhoneSubInfo.LOG_TAG , "VM: PhoneSubInfo.getCompleteVoiceMailNUmber: " ) ; return number ; }
public void visitLookupSwitchInsn ( org.objectweb.asm.Label dflt , int [ ] keys , org.objectweb.asm.Label [ ] labels ) { printer.visitLookupSwitchInsn ( dflt , keys , labels ) ; printTypeOfOperandStack ( ) ; super . visitLookupSwitchInsn ( dflt , keys , labels ) ; }
com.google.common.collect.ImmutableList < java.io.File > getTestedApks ( int density , @ com.android.annotations.Nullable java.lang.String language , @ com.android.annotations.Nullable java.lang.String region , @ com.android.annotations.NonNull java.util.List < java.lang.String > abis ) ;
synchronized void nAllocationRead ( long id , long [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
private void updateConfigDisplay ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration fileConfig ) { java.lang.String current = fileConfig.toDisplayString ( ) ; java.lang.String layoutLabel = ( current != null ) ? current : "(Default)" ; mCurrentLayoutLabel.setText ( layoutLabel ) ; mCurrentLayoutLabel.setToolTipText ( layoutLabel ) ; }
public void validateSimCredentialWithEapAka ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithSimCredential ( ) ; cred.getSimCredential ( ) . setEapType ( EAPConstants.EAP_AKA ) ; org.junit.Assert.assertTrue ( cred.validate ( ) ) ; }
public native java.lang.Object getObjectVolatile ( java.lang.Object obj , long offset ) ;
public < T extends com.android.sched.util.log.stats.Statistic > T getStatistic ( @ javax.annotation.Nonnull com.android.sched.util.log.stats.StatisticId < T > id ) { assert ( config ) == ( com.android.sched.util.config.ThreadConfig.getConfig ( ) ) ; return dummyEvent.getStatistic ( id ) ; }
public final boolean isSocket$ ( ) { return java.io.FileDescriptor.isSocket ( descriptor ) ; }
public void onClick ( android.view.View v ) { mAdapter.setShowBackground ( false ) ; if ( ( mOwner ) != null ) { mOwner.getActivity ( ) . invalidateOptionsMenu ( ) ; } }
public static java.lang.String getDefaultLocaleString ( ) { return org.chromium.base.LocaleUtils.toLanguageTag ( java.util.Locale.getDefault ( ) ) ; }
private void parseAtr ( java.lang.String atr ) { mAtr = com.android.internal.telephony.uicc.AnswerToReset.parseAtr ( atr ) ; if ( ( mAtr ) == null ) { return ; } checkIsEuiccSupported ( ) ; }
public java.util.List < com.android.jack.ir.ast.JAnnotation > getAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationType annotationType ) { return com.android.jack.Jack.getUnmodifiableCollections ( ) . getUnmodifiableList ( com.android.jack.util.AnnotationUtils.getAnnotation ( annotations , annotationType ) ) ; }
public boolean isTrue ( ) { return toggleButton.exists ( ) ; }
private void logIncoming ( java.lang.String msg , java.lang.Object ... params ) { android.telecom.Log.d ( this , ( ( ( "ConnectionService -> Telecom[" + ( mComponentName.flattenToShortString ( ) ) ) + "]: " ) + msg ) , params ) ; }
public void setUp ( ) { mRequestQueue = org.mockito.Mockito.mock ( com.android.volley.RequestQueue.class ) ; mImageCache = org.mockito.Mockito.mock ( ImageLoader.ImageCache.class ) ; mImageLoader = new com.android.volley.toolbox.ImageLoader ( mRequestQueue , mImageCache ) ; }
public void clientCertificateRequested ( long s ) { org.junit.Assert.fail ( "Server asked for client certificates" ) ; }
private boolean isValidSuffix ( ) { return ( path.toString ( ) . indexOf ( separator ) ) == ( - 1 ) ; }
private void waitForStagedInstall ( java.lang.String versionString ) throws java.lang.Exception { com.android.timezone.xts.TimeZoneUpdateHostTest.waitForCondition ( ( ) -> isStagedInstall ( versionString ) ) ; }
public void setVar ( int index , long v ) { mRS.nScriptSetVarD ( getID ( mRS ) , index , v , mUseIncSupp ) ; }
public void lookupJavaLangStringError1 ( ) throws com.android.jack.ir.ast.JTypeLookupException { try { com.android.jack.gwt.BinaryLookup.lookup.getInterface ( CommonTypes.JAVA_LANG_STRING ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.lookup.JLookupException e ) { } }
public void onAudioRouteChanged ( android.telecom.Connection c , int audioRoute , java.lang.String bluetoothAddress ) { java.lang.String id = mIdByConnection.get ( c ) ; if ( id != null ) { mAdapter.setAudioRoute ( id , audioRoute , bluetoothAddress ) ; } }
public void testRefactor1_norefs ( ) throws java.lang.Exception { moveType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.CustomView1" , "src/com/example/refactoringtest/subpackage" , false , ( "CHANGES:\n" + ( ( ( "-------\n" + "[x] Move resource \'testRefactor1_norefs/src/com/example/refactoringtest/CustomView1.java\' to \'subpackage\'\n" ) + "\n" ) + "[x] Move resource 'testRefactor1_norefs/src/com/example/refactoringtest/CustomView1.java' to 'subpackage'" ) ) ) ; }
public void onRttModifyResponseReceived ( int status ) { updateConnectionProperties ( ) ; if ( status == ( RttModifyStatus.SESSION_MODIFY_REQUEST_SUCCESS ) ) { sendRttInitiationSuccess ( ) ; } else { sendRttInitiationFailure ( status ) ; } }
java.util.Set < E > createElementSet ( ) { return com.google.common.collect.Sets.union ( multiset1.elementSet ( ) , multiset2.elementSet ( ) ) ; }
public int count ( java.lang.Object element ) { return ( multiset1.count ( element ) ) + ( multiset2.count ( element ) ) ; }
public void sendAddExistingConnection ( java.lang.String id ) throws java.lang.Exception { for ( com.android.internal.telecom.IConnectionServiceAdapter a : mConnectionServiceAdapters ) { a.addExistingConnection ( id , parcelable ( mConnectionById.get ( id ) ) , null ) ; } }
private static android.system.StructGroupReq makeGroupReq ( java.net.InetAddress gr_group , java.net.NetworkInterface networkInterface ) { int gr_interface = ( networkInterface != null ) ? networkInterface.getIndex ( ) : 0 ; return new android.system.StructGroupReq ( gr_interface , gr_group ) ; }
void assertCtsConnectionServiceUnbound ( ) { if ( android.telecom.cts.CtsConnectionService.isBound ( ) ) { assertTrue ( "CtsConnectionService not yet unbound!" , android.telecom.cts.CtsConnectionService.waitForUnBinding ( ) ) ; } }
public static < T extends java.lang.reflect.Member > T reflectAs ( java.lang.Class < T > expected , java.lang.invoke.MethodHandle target ) { java.lang.invoke.MethodHandleImpl directTarget = java.lang.invoke.MethodHandles.getMethodHandleImpl ( target ) ; return expected.cast ( directTarget.getMemberInternal ( ) ) ; }
public void proceedAfterWildChar ( java.lang.String str ) { if ( com.android.internal.telephony.sip.SipConnectionBase.DBG ) log ( "proceedAfterWildChar: ignore" ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile ) throws android.os.RemoteException { synchronized ( mLock ) { return this . createCallSession ( sessionId , profile ) ; } }
public void testCanEncodeSurrogate() { assertFalse(encoder.canEncode('\ud800')); assertFalse(encoder.canEncode("\udc00")); }
public void test_plusWeeks_negative ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.plusWeeks ( ( - 1 ) ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 7 , 8 ) ) ; }
public void visitLdcInsn ( java.lang.Object cst ) { handleCodeConstant ( cst , "ldc" ) ; }
public void reportUserSelection ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull java.lang.String number , @ android.support.annotation.NonNull android.telecom.PhoneAccountHandle phoneAccountHandle , boolean rememberSelection ) { }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/namespace.xml:2: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" + ( ( ( ( ( ( "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:id=\"@+id/newlinear\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" orientation=\"true\">\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/namespace.xml:3: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" ) + " <Button style=\"@style/setupWizardOuterFrame\" android.text=\"Button\" android:id=\"@+id/button1\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"></Button>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "2 errors, 0 warnings\n" ) + "" ) ) , lintFiles ( "res/layout/namespace.xml" ) ) ; }
public void addProviderWithEmptyConfig ( ) throws java.lang.Exception { org.junit.Assert.assertFalse ( mManager.addOrUpdateProvider ( new android.net.wifi.hotspot2.PasspointConfiguration ( ) ) ) ; }
boolean hasInfoOnPackage ( java.lang.String packageName ) { return ( mPackageDexUsage.getPackageUseInfo ( packageName ) ) != null ; }
public void onResult ( byte [ ] result ) { try { callback.onComplete ( EuiccCardManager.RESULT_OK , result ) ; } catch ( android.os.RemoteException exception ) { throw exception.rethrowFromSystemServer ( ) ; } }
private native double getDouble ( java.lang.Object object , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public void installGeocodeProvider ( android.location.IGeocodeProvider provider ) { if ( ( mContext.checkCallingOrSelfPermission ( com.android.server.LocationManagerService.INSTALL_LOCATION_PROVIDER ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( "Requires INSTALL_LOCATION_PROVIDER permission" ) ; } mGeocodeProvider = provider ; }
private boolean hasAcknowledgedFeatures ( ) { if ( isVvm3 ( ) ) { return true ; } return ( preferences.getInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_DIALER_FEATURE_VERSION_ACKNOWLEDGED_KEY , 0 ) ) >= ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_VOICEMAIL_FEATURE_VERSION ) ; }
public void updateCursor ( android.database.Cursor updatedCursor ) { deletedVoicemailPosition.clear ( ) ; this . cursor = updatedCursor ; notifyDataSetChanged ( ) ; }
public java.util.Set < java.io.File > getCDirectories ( ) { return getJni ( ) . getSrcDirs ( ) ; }
void assertCtsConnectionServiceUnbound ( ) { if ( android.telecom.cts.CtsConnectionService.isBound ( ) ) { assertTrue ( "CtsConnectionService not yet unbound!" , android.telecom.cts.CtsConnectionService.waitForUnBinding ( ) ) ; } }
public void callSessionMultipartyStateChanged ( android.telephony.ims.ImsCallSession session , boolean isMultiParty ) { }
protected void finalize ( ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "CDMAPhone finalized" ) ; if ( mWakeLock.isHeld ( ) ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "UNEXPECTED; mWakeLock is held when finalizing." ) ; mWakeLock.release ( ) ; } }
public com.android.ims.internal.IImsRcsFeature createRcsFeature ( int slotId ) { return null ; }
public void setDataEnabled ( boolean enable ) { setDataEnabled ( getSubId ( ) , enable ) ; }
final boolean isPowered ( ) { return ( ( mAcOnline ) || ( mUsbOnline ) ) || ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_UNKNOWN ) ) ; }
public com.android.bluetooth.pbapclient.PbapClientConnectionHandler.Builder setLooper ( android.os.Looper loop ) { this . mLooper = loop ; return this ; }
private void initialization ( ) { buffer = java.nio.CharBuffer.allocate ( 1024 ) ; buffer.limit ( 0 ) ; matcher = delimiter.matcher ( buffer ) ; }
public final void onDeregistered ( android.telephony.ims.ImsReasonInfo info ) { onImsDisconnected ( info ) ; }
public java.lang.String getLine1AlphaTag ( ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "getLine1AlphaTag: not possible in CDMA" ) ; return null ; }
public void err ( java.lang.String message ) { verboseStream.println ( message ) ; }
protected void setValue ( java.lang.Object element , java.lang.Object value ) { com.android.ide.eclipse.adt.internal.wizards.newproject.ImportedProject project = ( ( com.android.ide.eclipse.adt.internal.wizards.newproject.ImportedProject ) ( element ) ) ; project.setProjectName ( value.toString ( ) ) ; mCheckboxTableViewer.update ( element , null ) ; validatePage ( ) ; }
public void test009 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST009 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.LegacyToolchain.class ) . compileAndRunTest ( ) ; }
public void test_equalsLjava_lang_Object ( ) throws java.lang.Exception { java.net.InetAddress ia1 = java.net.InetAddress.getByName ( "ip6-localhost" ) ; java.net.InetAddress ia2 = java.net.InetAddress.getByName ( "::1" ) ; assertEquals ( ia2 , ia1 ) ; }
public DST parseString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) { try { return convert ( codec.parseString ( context , string ) ) ; } catch ( com.android.sched.util.codec.ParsingException e ) { throw new com.android.sched.util.config.ConfigurationError ( e ) ; } }
public void accept ( final org.objectweb.asm.MethodVisitor mv ) { mv.visitIntInsn ( opcode , operand ) ; acceptAnnotations ( mv ) ; }
public com.android.ide.common.rendering.HardwareConfigHelper setOrientation ( com.android.resources.ScreenOrientation screenOrientation ) { mScreenOrientation = screenOrientation ; return this ; }
void expectAvailableCallbacksValidated ( com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { expectAvailableCallbacks ( agent , false , true , com.android.server.ConnectivityServiceTest.TestNetworkCallback.TIMEOUT_MS ) ; }
public void resetLengthForReceive ( ) { this . length = userSuppliedLength ; }
public void test_getByName_loopbackIpv4 ( ) throws java.lang.Exception { java.net.InetAddress inetAddress = java.net.InetAddress.getByName ( "127.0.0.1" ) ; libcore.java.net.InetAddressTest.checkInetAddress ( libcore.java.net.InetAddressTest.LOOPBACK4_BYTES , "localhost" , inetAddress ) ; org.junit.Assert.assertTrue ( inetAddress.isLoopbackAddress ( ) ) ; }
public static android.telephony.SignalStrength convertHalSignalStrength_1_2 ( com.android.internal.telephony.V1_2.SignalStrength signalStrength ) { return new android.telephony.SignalStrength ( signalStrength.gsm.signalStrength , signalStrength.gsm.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , signalStrength.tdScdma.rscp , signalStrength.wcdma.base.signalStrength , signalStrength.wcdma.rscp ) ; }
public void fatalError ( org.xml.sax.SAXParseException e ) throws org.xml.sax.SAXException { throw e ; }
public void enterSoftAPMode ( android.net.wifi.WifiConfiguration wifiConfig ) { if ( wifiConfig == null ) { wifiConfig = new android.net.wifi.WifiConfiguration ( ) ; } mApConfigQueue.offer ( wifiConfig ) ; changeMode ( com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SOFT_AP_MODE ) ; }
public android.net.IpSecTransform.Builder setAuthentication ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecAlgorithm algo ) { mConfig.setAuthentication ( direction , algo ) ; return this ; }
public final native int addOverlayPath ( java.lang.String idmapPath ) ;
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { printer.visitMethodInsn ( opcode , owner , name , desc ) ; printTypeOfOperandStack ( ) ; super . visitMethodInsn ( opcode , owner , name , desc ) ; }
public static long $noinline$Sub0 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg - 0 ; }
private static com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket ( java.net.Socket socket ) { if ( ! ( socket instanceof com.android.org.conscrypt.OpenSSLSocketImpl ) ) { throw new java.lang.IllegalArgumentException ( ( "Socket not created by this factory: " + socket ) ) ; } return ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( socket ) ) ; }
private void updateDefaultChannel ( ) { if ( ( com.intellij.util.PlatformConfig.FORCE_EAP_UPDATE_CHANNEL ) && ( com.intellij.openapi.application.impl.ApplicationInfoImpl.getShadowInstance ( ) . isEAP ( ) ) ) { myState.UPDATE_CHANNEL_TYPE = ChannelStatus.EAP_CODE ; } }
public void removeTransportModeTransforms ( java.net.DatagramSocket socket , android.net.IpSecTransform transform ) throws java.io.IOException { removeTransportModeTransforms ( socket.getFileDescriptor$ ( ) , transform ) ; }
public void setTestPssMode ( boolean enabled ) { synchronized ( this ) { mTestPssMode = enabled ; if ( enabled ) { requestPssAllProcsLocked ( android.os.SystemClock.uptimeMillis ( ) , true , true ) ; } } }
public static byte checkedCast ( long value ) { byte result = ( ( byte ) ( value ) ) ; if ( result != value ) { throw new java.lang.IllegalArgumentException ( ( "Out of range: " + value ) ) ; } return result ; }
protected void fillRandomFloats ( long seed , float min , float max , float [ ] inArray ) { android.renderscript.cts.RSUtils.genRandomFloats ( seed , 0.0F , 64.0F , inArray ) ; }
private java.lang.String getTargetPackage ( com.android.sdklib.xml.ManifestData manifestParser , java.lang.String runner ) { for ( com.android.sdklib.xml.ManifestData.Instrumentation instr : manifestParser.getInstrumentations ( ) ) { if ( instr.getName ( ) . equals ( runner ) ) { return instr.getTargetPackage ( ) ; } } return null ; }
public static void setSyncAutomatically ( android.accounts.Account account , java.lang.String authority , boolean sync ) { android.content.ContentResolver.setSyncAutomaticallyAsUser ( account , authority , sync , android.os.UserHandle.myUserId ( ) ) ; }
public void run ( ) { try { inBlock.countDown ( ) ; rq.remove ( 1000L ) ; } catch ( java.lang.InterruptedException ie ) { isThrown = true ; } outOfBlock.countDown ( ) ; }
public android.net.IpSecTransform.Builder setAuthentication ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecAlgorithm algo ) { mConfig.setAuthentication ( direction , algo ) ; return this ; }
public void onDestroy ( ) { com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkAppService.LOG_TAG , "onDestroy()" ) ; unregisterProcessObserver ( ) ; unregisterLocaleChangeReceiver ( ) ; com.android.stk.StkAppService.sInstance = null ; waitForLooper ( ) ; mServiceLooper.quit ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 0 ] ) ; Main st = new Main ( ) ; st.$noinline$f ( ) ; }
public void setDefaultSmdpAddress ( java.lang.String callingPackage , java.lang.String cardId , java.lang.String address , com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback callback ) { checkCallingPackage ( callingPackage ) ; }
public com.android.internal.telephony.cat.Tone createFromParcel ( android.os.Parcel in ) { return com.android.internal.telephony.cat.Tone.values ( ) [ in.readInt ( ) ] ; }
public static long BoolCond_LongVarVar ( boolean cond , long x , long y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return cond ? x : y ; }
protected java.lang.Iterable < ? extends com.android.dialer.rootcomponentgenerator.ProcessingStep > initSteps ( ) { return com.google.common.collect.ImmutableList.of ( new com.android.dialer.rootcomponentgenerator.MetadataGeneratingStep ( processingEnv ) , new com.android.dialer.rootcomponentgenerator.DaggerApplicationGeneratingStep ( processingEnv ) , new com.android.dialer.rootcomponentgenerator.RootComponentGeneratingStep ( processingEnv ) ) ; }
public void visitLater ( com.android.tools.perflib.heap.Instance parent , @ com.android.annotations.NonNull com.android.tools.perflib.heap.Instance child ) { if ( ! ( mSeen.contains ( child.getId ( ) ) ) ) { mStack.push ( child ) ; } }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newSource ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_SOURCES ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; return p ; }
public void compileOmnibus ( ) throws java.lang.Exception { com.android.jack.test.toolchain.AndroidToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.AndroidToolchain.class ) ; toolchain.addToClasspath ( com.android.jack.compile.androidtree.dalvik.omnibus.OmnibusCompilationTest.BOOTCLASSPATH ) . srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "out" , ".zip" ) , true , com.android.jack.TestTools.getArtTestFolder ( "003-omnibus-opcodes" ) ) ; }
public final void putExtras ( java.lang.String connectionId , android.os.Bundle extras , android.telecom.Logging.Session.Info sessionInfo ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = connectionId ; args.arg2 = extras ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_PUT_EXTRAS , args ) . sendToTarget ( ) ; }
private static com.ibm.icu.util.IslamicCalendar newIslamic ( ) { com.ibm.icu.util.IslamicCalendar civilCalendar = new com.ibm.icu.util.IslamicCalendar ( ) ; civilCalendar.setCalculationType ( CalculationType.ISLAMIC ) ; return civilCalendar ; }
public void setListener ( com.android.ims.internal.IImsEcbmListener listener ) { mListener = listener ; }
public boolean isDoneSoFar ( ) { return ( mDone ) && ( ! ( mInProgress ) ) ; }
public com.google.mockwebserver.MockResponse setBody ( java.lang.String body ) { try { return setBody ( body.getBytes ( "UTF-8" ) ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.AssertionError ( ) ; } }
public long getTotalStats ( int type ) { return com.android.server.net.NetworkStatsService.nativeGetTotalStat ( type , checkBpfStatsEnable ( ) ) ; }
public void carrierActionSetRadioEnabled ( boolean enabled ) { mCarrierActionAgent.carrierActionSetRadioEnabled ( enabled ) ; }
public static final boolean isSurrogatePair ( char high , char low ) { return java.lang.Character.isSurrogatePair ( high , low ) ; }
public void getCellBroadcastSmsConfig ( android.os.Message response ) { android.telephony.Rlog.e ( com.android.internal.telephony.gsm.GSMPhone.LOG_TAG , "[GSMPhone] getCellBroadcastSmsConfig() is obsolete; use SmsManager" ) ; response.sendToTarget ( ) ; }
public void accept ( int callType , android.telephony.ims.ImsStreamMediaProfile profile ) { this . accept ( callType , profile ) ; }
public void modifyText ( org.eclipse.swt.events.ModifyEvent e ) { validateAndSetMessage ( ) ; }
public void onBind ( java.net.InetAddress localAddress , int localPort ) { localport = localPort ; }
private void addScheduleInternal ( java.lang.String inputId , long channelId , long startTime , long endTime ) { mDataManager.addScheduledRecording ( com.android.tv.dvr.data.ScheduledRecording.builder ( inputId , channelId , startTime , endTime ) . setPriority ( mScheduleManager.suggestNewPriority ( ) ) . build ( ) ) ; }
public static com.google.common.base.Predicate < java.lang.CharSequence > containsPattern ( java.lang.String pattern ) { return new com.google.common.base.Predicates.ContainsPatternFromStringPredicate ( pattern ) ; }
void getAllItems ( android.icu.impl.UResource.Key key , android.icu.impl.ICUResourceBundleReader.ReaderValue readerValue , android.icu.impl.UResource.TableSink sink ) { android.icu.impl.ICUResourceBundleReader reader = wholeBundle.reader ; readerValue.reader = reader ; ( ( android.icu.impl.ICUResourceBundleReader.Table ) ( value ) ) . getAllItems ( reader , key , readerValue , sink ) ; }
public boolean getDataEnabled ( ) { return isUserMobileDataEnabled ( ) ; }
public void onComplete ( int resultCode ) { executor.execute ( ( ) -> callback.onComplete ( resultCode , null ) ) ; }
public static java.nio.DoubleBuffer allocate ( int capacity ) { if ( capacity < 0 ) { throw new java.lang.IllegalArgumentException ( ( "capacity < 0: " + capacity ) ) ; } return new java.nio.DoubleArrayBuffer ( new double [ capacity ] ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ( guard ) != null ) { org.conscrypt.Platform.closeGuardWarnIfOpen ( guard ) ; } free ( ) ; } finally { super . finalize ( ) ; } }
private void saveScanInfo ( int id , android.telephony.NetworkScanRequest request , java.util.concurrent.Executor executor , android.telephony.TelephonyScanManager.NetworkScanCallback callback ) { synchronized ( mScanInfo ) { mScanInfo.put ( id , new android.telephony.TelephonyScanManager.NetworkScanInfo ( request , executor , callback ) ) ; } }
static com.google.currysrc.api.process.DefaultRule createMandatoryRule ( com.google.currysrc.api.process.Processor processor ) { return new com.google.currysrc.api.process.DefaultRule ( processor , com.google.currysrc.api.match.SourceMatchers.all ( ) , true ) ; }
public java.io.FileDescriptor getFD$ ( ) { return fd ; }
public boolean answer ( com.android.server.wifi.WifiNative.ScanCapabilities capabilities ) { capabilities.max_scan_cache_size = java.lang.Integer.MAX_VALUE ; capabilities.max_scan_buckets = max_scan_buckets ; capabilities.max_ap_cache_per_scan = com.android.server.wifi.scanner.WifiScanningServiceTest.MAX_AP_PER_SCAN ; capabilities.max_rssi_sample_size = 8 ; capabilities.max_scan_reporting_threshold = 10 ; capabilities.max_hotlist_bssids = 0 ; capabilities.max_significant_wifi_change_aps = 0 ; return true ; }
protected org.eclipse.ui.IWorkbenchWizard instanciateWizard ( org.eclipse.jface.action.IAction action ) { return new com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard ( ) ; }
public void testRunFailed ( java.lang.String errorMessage ) { mRunResult.testRunFailed ( errorMessage ) ; }
protected org.bouncycastle.crypto.tls.TlsAEADCipher createCipher_Camellia_GCM ( org.bouncycastle.crypto.tls.TlsContext context , int cipherKeySize , int macSize ) throws java.io.IOException { return new org.bouncycastle.crypto.tls.TlsAEADCipher ( context , createAEADBlockCipher_Camellia_GCM ( ) , createAEADBlockCipher_Camellia_GCM ( ) , cipherKeySize , macSize ) ; }
public void visitEnd ( ) { if ( ( ! ( isInterface ) ) && ( defaultMethodsDefined ( directInterfaces ) ) ) { recordInheritedMethods ( ) ; stubMissingDefaultAndBridgeMethods ( ) ; } super . visitEnd ( ) ; }
public void testExternalCallChangedToNonExternalCall ( ) { mCallsManagerListener.onExternalCallChanged ( ( ( com.android.server.telecom.Call ) ( mActiveCall ) ) , false ) ; waitForHandlerAction ( mFocusManagerUT.getHandler ( ) , com.android.server.telecom.tests.ConnectionServiceFocusManagerTest.CHECK_HANDLER_INTERVAL_MS ) ; org.junit.Assert.assertTrue ( mFocusManagerUT.getAllCall ( ) . contains ( mActiveCall ) ) ; }
private void setAppliedVersion ( int version ) { final android.content.SharedPreferences sp = getContext ( ) . getSharedPreferences ( com.android.providers.telephony.CarrierIdProvider.PREF_FILE , Context.MODE_PRIVATE ) ; android.content.SharedPreferences.Editor editor = sp.edit ( ) ; editor.putInt ( com.android.providers.telephony.CarrierIdProvider.VERSION_PREF_KEY , version ) ; editor.apply ( ) ; }
void onPostDialChar ( java.lang.String callId , char nextChar ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.onPostDialChar ( callId , nextChar , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void testTargetAnnotationInner ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/ApiTargetTest2.java:32: Error: Call requires API level 14 (current min is 3): new android.widget.GridLayout [NewApi]\n" + ( ( " new GridLayout(null, null, 0);\n" + " ~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "apicheck/ApiTargetTest2.java.txt=>src/test/pkg/ApiTargetTest2.java" , "apicheck/ApiTargetTest2.class.data=>bin/classes/test/pkg/ApiTargetTest2.class" , "apicheck/ApiTargetTest2$1.class.data=>bin/classes/test/pkg/ApiTargetTest2$1.class" , "apicheck/ApiTargetTest2$1$2.class.data=>bin/classes/test/pkg/ApiTargetTest2$1$2.class" , "apicheck/ApiTargetTest2$1$1.class.data=>bin/classes/test/pkg/ApiTargetTest2$1$1.class" ) ) ; }
native void rsnScriptReduce ( long con , long id , int slot , long [ ] ains , long aout , int [ ] limits ) ;
public java.io.File getPrebuiltDirectory ( org.gradle.nativeplatform.platform.NativePlatform platform ) { return new java.io.File ( ndkDirectory , ( "prebuilt/android-" + ( com.android.build.gradle.ndk.internal.NdkHandler.ARCHITECTURE_STRING.get ( platform.getName ( ) ) ) ) ) ; }
public static byte $opt$noinline$getByteField ( Main m ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return m.byteField ; }
public com.ibm.icu.text.SpoofChecker.Builder setRestrictionLevel ( com.ibm.icu.text.SpoofChecker.RestrictionLevel restrictionLevel ) { fRestrictionLevel = restrictionLevel ; fChecks |= ( com.ibm.icu.text.SpoofChecker.RESTRICTION_LEVEL ) | ( com.ibm.icu.text.SpoofChecker.MIXED_NUMBERS ) ; return this ; }
private static void printUsage ( ) { java.lang.System.err.println ( ( "Usage:\n" + ( ( "create <old_version_description> <new_version_description> <old_version_folder> <new_version_folder>" + " <patch_file_name> [ignored=file1;file2;...] [critical=file1;file2;...] [optional=file1;file2;...]\n" ) + "install [--exit0] <destination_folder> [log_directory]\n" ) ) ) ; }
public void testCompleteIfNextLineBraceStyle2 ( ) throws java.lang.Exception { com.intellij.psi.codeStyle.CommonCodeStyleSettings settings = com.intellij.psi.codeStyle.CodeStyleSettingsManager.getSettings ( getProject ( ) ) . getCommonSettings ( JavaLanguage.INSTANCE ) ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; doTest ( ) ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; }
public int compare ( com.android.ahat.heapdump.AhatInstance a , com.android.ahat.heapdump.AhatInstance b ) { return com.android.ahat.heapdump.Sort.SIZE_BY_SIZE.compare ( b.getRetainedSize ( mHeap ) , a.getRetainedSize ( mHeap ) ) ; }
public java.lang.String getOriginalApplicationId ( ) { if ( ( mType ) == ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { return getApplicationId ( ) ; } return getPackageFromManifest ( ) ; }
public synchronized void setTextZoom ( int textZoom ) { if ( com.android.webview.chromium.ContentSettingsAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.ContentSettingsAdapter.LOGTAG , ( "setTextZoom=" + textZoom ) ) ; mAwSettings.setTextZoom ( textZoom ) ; }
public int getLteSignalStrength ( ) { return mLteSignalStrength ; }
public boolean onCreateOptionsMenu ( com.android.internal.telephony.cat.Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu.add ( 0 , StkApp.MENU_ID_END_SESSION , 1 , R.string.menu_end_session ) ; menu.add ( 0 , StkApp.MENU_ID_HELP , 2 , R.string.help ) ; return true ; }
public void testEquals_NonCharsetObject ( ) { org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset c1 = new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset ( "mock" , null ) ; assertFalse ( c1.equals ( "test" ) ) ; }
static int mainIndexReturnedN ( int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) ; return i ; }
private NetworkRequest.Builder newWifiRequestBuilder ( ) { return new android.net.NetworkRequest.Builder ( ) . addTransportType ( android.net.NetworkCapabilities.TRANSPORT_WIFI ) ; }
public void clearGrantedUriPermissions ( java.lang.String packageName , int userId ) { enforceCallingPermission ( android.Manifest.permission.CLEAR_APP_GRANTED_URI_PERMISSIONS , "clearGrantedUriPermissions" ) ; removeUriPermissionsForPackageLocked ( packageName , userId , true ) ; }
public java.lang.String getDescription ( ) { return getVFSLocation ( ) . getDescription ( ) ; }
public void testMoveAppForwardLocked ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } int installFlags = android.content.pm.PackageManager.INSTALL_FORWARD_LOCK ; int moveFlags = android.content.pm.PackageManager.MOVE_EXTERNAL_MEDIA ; boolean fail = true ; int result = android.content.pm.PackageManager.MOVE_FAILED_FORWARD_LOCKED ; sampleMoveFromRawResource ( installFlags , moveFlags , fail , result ) ; }
public static short $noinline$floatToIntToShort ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( value ) ) ; }
public void enter ( ) { mTimeoutMessage = new com.android.internal.util.WakeupMessage ( mContext , getHandler ( ) , com.android.server.wifi.aware.WifiAwareStateManager.HAL_COMMAND_TIMEOUT_TAG , com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_TYPE_RESPONSE_TIMEOUT , mCurrentCommand.arg1 , mCurrentTransactionId ) ; mTimeoutMessage.schedule ( ( ( android.os.SystemClock.elapsedRealtime ( ) ) + ( com.android.server.wifi.aware.WifiAwareStateManager.WifiAwareStateMachine.WaitForResponseState.AWARE_COMMAND_TIMEOUT ) ) ) ; }
public void close ( ) { try { mService.releaseSecurityParameterIndex ( mResourceId ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } mCloseGuard.close ( ) ; }
public void setCrosshairLocation ( int x , int y ) { synchronized ( this ) { crosshairLocation = new org.eclipse.swt.graphics.Point ( x , y ) ; } notifyCrosshairMoved ( ) ; }
public java.lang.String combineDateAndTime ( java.lang.String relativeDateString , java.lang.String timeString ) { return android.icu.impl.SimpleFormatterImpl.formatCompiledPattern ( combinedDateAndTime , timeString , relativeDateString ) ; }
public void onImsServiceStateChanged ( ) { sendMessage ( obtainMessage ( com.android.internal.telephony.ServiceStateTracker.EVENT_IMS_SERVICE_STATE_CHANGED ) ) ; }
private static java.net.Inet6Address localhost6 ( ) throws java.lang.Exception { return ( ( java.net.Inet6Address ) ( java.net.InetAddress.getByAddress ( "ip6-localhost" , libcore.java.net.InetAddressTest.LOOPBACK6_BYTES ) ) ) ; }
public static void sendWifiApStateChanged ( android.content.BroadcastReceiver broadcastReceiver , android.content.Context context , int wifiApState ) { android.content.Intent intent = new android.content.Intent ( android.net.wifi.WifiManager.WIFI_AP_STATE_CHANGED_ACTION ) ; intent.putExtra ( WifiManager.EXTRA_WIFI_AP_STATE , wifiApState ) ; broadcastReceiver.onReceive ( context , intent ) ; }
void onVideoStateChanged ( com.android.server.telecom.Call call , int previousVideoState , int newVideoState ) ;
public int setProvisionedStringValue ( int item , java.lang.String value ) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.FAILED ; }
public void test_F32_4_SCALE05_20_inSquare ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.FLOAT_32 , 4 , 0.5F , 2.0F ) ; checkError ( ) ; }
public void testCanStart ( ) { if ( ( android.os.Looper.myLooper ( ) ) == null ) { android.os.Looper.prepare ( ) ; } com.android.bluetooth.avrcp.Avrcp a = com.android.bluetooth.avrcp.Avrcp.make ( android.support.test.InstrumentationRegistry.getTargetContext ( ) ) ; }
protected void setUp ( ) throws java.io.IOException { f = java.io.File.createTempFile ( "FileReaderTest" , "tst" ) ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { model.removeTreeChangeListener ( this ) ; transform.dispose ( ) ; inverse.dispose ( ) ; }
private void sendCvvmMessage ( java.lang.String request , android.app.PendingIntent sentIntent ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) . append ( request ) ; sb.append ( OmtpConstants.SMS_PREFIX_SEPARATOR ) ; appendField ( sb , "dt" , "6" ) ; sendSms ( sb.toString ( ) , sentIntent ) ; }
public void binderDied ( ) { android.util.Slog.v ( com.android.server.fingerprint.FingerprintService.TAG , "fingerprintd died" ) ; mDaemon = null ; mCurrentUserId = android.os.UserHandle.USER_CURRENT ; handleError ( mHalDeviceId , FingerprintManager.FINGERPRINT_ERROR_HW_UNAVAILABLE ) ; }
public static com.android.internal.content.NativeLibraryHelper.Handle create ( android.content.pm.PackageParser.PackageLite lite ) throws java.io.IOException { return com.android.internal.content.NativeLibraryHelper.Handle.create ( lite.getAllCodePaths ( ) , lite.multiArch , lite.extractNativeLibs ) ; }
public com.android.ims.internal.IImsMMTelFeature createMMTelFeature ( int slotId ) { return null ; }
protected java.util.Collection < ? extends com.android.jack.server.HasVersion > getVersionedElements ( ) { return jackServer.getInstalledJacks ( ) ; }
private static void enableComponent ( android.content.Context context ) { context.getPackageManager ( ) . setComponentEnabledSetting ( new android.content.ComponentName ( context , com.android.dialer.app.MainComponent.getComponentName ( ) ) , PackageManager.COMPONENT_ENABLED_STATE_ENABLED , PackageManager.DONT_KILL_APP ) ; }
void stepAtomic ( ) { mCount.incrementAndGet ( ) ; }
native long rsnScriptKernelIDCreate ( long con , long sid , int slot , int sig , boolean mUseInc ) ;
public void stop ( ) { final boolean wasStarted = started ( ) ; mUpstreamLinkProperties = null ; mHwInterface.stopOffloadControl ( ) ; mControlInitialized = false ; mConfigInitialized = false ; if ( wasStarted ) mLog.log ( "tethering offload stopped" ) ; }
public void onConferenceableCallsChanged ( android.telecom.Call call , java.util.List < android.telecom.Call > conferenceableCalls ) { android.util.Log.i ( android.telecom.cts.TestUtils.TAG , ( ( ( "onConferenceableCallsChanged, Call: " + call ) + ", Conferenceables: " ) + conferenceableCalls ) ) ; }
public void setSystemSupportsFastBssTransition ( boolean supported ) { mWifiSupplicantControl.setSystemSupportsFastBssTransition ( supported ) ; }
public com.android.jack.api.JackProvider.SubReleaseKind getSubReleaseKind ( ) { return subReleaseKind ; }
public com.android.ahat.heapdump.Size getTotalSize ( ) { com.android.ahat.heapdump.Size total = Size.ZERO ; for ( int i = 0 ; i < ( mSizesByHeap.length ) ; i ++ ) { total = total.plus ( mSizesByHeap [ i ] ) ; } return total ; }
public int getCnapNamePresentation ( ) { return cnapNamePresentation ; }
private static com.android.ide.eclipse.gltrace.state.GLStateType getTextureUnitTargetName ( com.android.ide.eclipse.gltrace.GLEnum target ) { if ( target == ( com.android.ide.eclipse.gltrace.GLEnum.GL_TEXTURE_BINDING_CUBE_MAP ) ) { return com.android.ide.eclipse.gltrace.state.GLStateType.TEXTURE_BINDING_CUBE_MAP ; } else { return com.android.ide.eclipse.gltrace.state.GLStateType.TEXTURE_BINDING_2D ; } }
com.android.ide.common.api.Point canvasToControlPoint ( int canvasX , int canvasY ) { int x = mHScale.translate ( canvasX ) ; int y = mVScale.translate ( canvasY ) ; return new com.android.ide.common.api.Point ( x , y ) ; }
private static long $opt$noinline$NegLong ( long a ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return - a ; }
boolean isFiltered ( @ com.android.annotations.NonNull com.android.build.gradle.tasks.annotations.ApiDatabase database ) { return ! ( database.hasClass ( containingClass ) ) ; }
public void testConstructor_NullSerial_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , "RSA" , 1024 , null , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , null , android.security.KeyPairGeneratorSpecTest.NOW , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when startDate is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void testDeleteSdcard ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } deleteFromRawResource ( PackageManager.INSTALL_EXTERNAL , 0 ) ; }
public java.util.List < java.io.File > getImportedLibrary ( ) { return options.getJayceImport ( ) ; }
public java.util.Set < java.io.File > getAidlDirectories ( ) { return java.util.Collections.singleton ( new java.io.File ( mRoot , "aidl" ) ) ; }
public void run ( ) { view.requestLayout ( ) ; view.invalidate ( ) ; }
public void runLogService ( java.lang.String logname , com.android.ddmlib.log.LogReceiver receiver ) throws java.io.IOException { com.android.ddmlib.AdbHelper.runLogService ( com.android.ddmlib.AndroidDebugBridge.getSocketAddress ( ) , this , logname , receiver ) ; }
static int writeIntAsUint16 ( java.io.OutputStream os , int i ) throws java.io.IOException { os.write ( ( i & 255 ) ) ; os.write ( ( ( i > > 8 ) & 255 ) ) ; return i ; }
void setUp ( ) { mNm.setInterruptionFilter ( NotificationManager.INTERRUPTION_FILTER_NONE ) ; createChannels ( ) ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , false ) ; status = READY ; }
private void notifyDexLoad ( com.android.server.pm.dex.DexManagerTests.TestData testData , java.util.List < java.lang.String > classLoader , java.util.List < java.lang.String > classPaths , int loaderUserId ) { mDexManager.notifyDexLoad ( testData.mPackageInfo.applicationInfo , classLoader , classPaths , testData.mLoaderIsa , loaderUserId ) ; }
private static boolean isDalvikAnnotation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation ) { java.lang.String annotationType = com.android.jack.ecj.loader.jast.LoaderUtils.getSignatureFormatter ( ) . getName ( annotation.getType ( ) ) ; return com.android.jack.ecj.loader.jast.AnnotationUtils.dalvikAnnotations.contains ( annotationType ) ; }
public void setUp ( ) { org.mockito.MockitoAnnotations.initMocks ( this ) ; mAccount = new android.accounts.Account ( "coolperson" , "cooltype" ) ; mAuthenticator = new com.android.volley.toolbox.AndroidAuthenticator ( mAccountManager , mAccount , "cooltype" , false ) ; }
public android.uirendering.cts.testinfrastructure.ActivityTestBase.TestCaseBuilder addCanvasClient ( java.lang.String debugString , android.uirendering.cts.testinfrastructure.CanvasClient canvasClient , boolean useHardware ) { return addCanvasClientInternal ( debugString , canvasClient , useHardware , false ) . addCanvasClientInternal ( debugString , canvasClient , useHardware , true ) ; }
public void test3rdPartyTests ( ) throws java.lang.Exception { runTasksOn ( new java.io.File ( testDir , "3rdPartyTests" ) , BasePlugin.GRADLE_TEST_VERSION , "clean" , "deviceCheck" ) ; }
public boolean setPermission ( java.io.File f , int access , boolean enable , boolean owneronly ) { dalvik.system.BlockGuard.getThreadPolicy ( ) . onWriteToDisk ( ) ; return setPermission0 ( f , access , enable , owneronly ) ; }
public void testMultilineResultParse ( ) throws java.io.IOException { java.lang.String result = com.android.chimpchat.adb.AdbChimpDeviceTest.getResource ( "multiline_instrument_result.txt" ) ; java.util.Map < java.lang.String , java.lang.Object > convertedResult = com.android.chimpchat.adb.AdbChimpDevice.convertInstrumentResult ( result ) ; assertEquals ( com.android.chimpchat.adb.AdbChimpDeviceTest.MULTILINE_RESULT , convertedResult.get ( "stream" ) ) ; }
public java.util.Collection < ? extends com.android.sched.vfs.InputVElement > list ( ) { assert ! ( closed ) ; return dir.list ( ) ; }
public void routeAids ( java.lang.String aid , int route , int aidInfo ) { android.os.Message msg = mHandler.obtainMessage ( ) ; msg.what = com.android.nfc.NfcService.MSG_ROUTE_AID ; msg.arg1 = route ; msg.obj = aid ; msg.arg2 = aidInfo ; mHandler.sendMessage ( msg ) ; }
public static com.android.internal.telephony.NitzData createForTests ( int zoneOffsetMillis , java.lang.Integer dstOffsetMillis , long utcTimeMillis , java.util.TimeZone emulatorHostTimeZone ) { return new com.android.internal.telephony.NitzData ( "Test data" , zoneOffsetMillis , dstOffsetMillis , utcTimeMillis , emulatorHostTimeZone ) ; }
public java.util.Map < java.lang.String , java.lang.Boolean > getFeatures ( ) { return mFeatures ; }
static java.nio.DoubleBuffer asDoubleBuffer ( java.nio.ByteBuffer byteBuffer ) { java.nio.ByteBuffer slice = byteBuffer.slice ( ) ; slice.order ( byteBuffer.order ( ) ) ; return new java.nio.ByteBufferAsDoubleBuffer ( slice ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.Intent intent ) { return getCarrierPackageNamesForIntentAndPhone ( intent , getPhoneId ( ) ) ; }
public void setCurrentUserHandle ( android.os.UserHandle userHandle ) { if ( userHandle == null ) { android.telecom.Log.d ( this , "setCurrentUserHandle, userHandle = null" ) ; userHandle = java.lang.Process.myUserHandle ( ) ; } android.telecom.Log.d ( this , "setCurrentUserHandle, %s" , userHandle ) ; mCurrentUserHandle = userHandle ; }
public void hasClassNameTesting ( ) { org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasClassName ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.CLS ) . matches ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.c ) ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasClassName ( org.hamcrest.Matchers.equalTo ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.CLS ) ) . matches ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.c ) ) ; }
protected void onDestroy ( ) { super . onDestroy ( ) ; mChatService.stop ( ) ; unregisterReceiver ( mPairingActionReceiver ) ; }
public void testWildcardMatchesChildDomain ( ) { assertFalse ( verifyWithDomainNamePattern ( "a.b.c.d" , "*.c.d" ) ) ; }
com.google.common.util.concurrent.ListenableFuture < com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > > getMostRecentPhoneLookupInfo ( com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > existingInfoMap ) ;
public void stopJankRecorder ( java.lang.String eventName ) { com.android.dialer.common.LogUtil.d ( "StubMetrics.startJankRecorder" , "stopped jank recorder for %s" , eventName ) ; }
boolean disable ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; debugLog ( ( "disable() called with mRunningProfiles.size() = " + ( mRunningProfiles.size ( ) ) ) ) ; mAdapterStateMachine.sendMessage ( AdapterState.BLE_TURN_OFF ) ; return true ; }
public com.android.ide.common.res2.MergingException addFile ( @ com.android.annotations.NonNull java.io.File file ) { mFilePositions.add ( new com.android.ide.common.blame.SourceFilePosition ( file , com.android.ide.common.blame.SourcePosition.UNKNOWN ) ) ; return this ; }
public void onCallStateChanged ( android.content.Context context , int newState , android.telecom.PhoneAccountHandle phoneAccountHandle ) { }
public java.util.List < java.lang.Class < ? extends com.intellij.psi.PsiElement > > getApplicablePsiTypes ( ) { return java.util.Collections.< java.lang.Class < ? extends com.intellij.psi.PsiElement > > singletonList ( com.intellij.psi.PsiMethod.class ) ; }
public int untether ( java.lang.String iface , java.lang.String callerPkg ) { throw new java.lang.RuntimeException ( "not implemented" ) ; }
protected void dispose ( ) { for ( com.android.ide.common.resources.ResourceFile file : mFiles ) { file.dispose ( ) ; } mFiles.clear ( ) ; }
static short $opt$IntToShort ( int a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( short ) ( a ) ) ; }
public android.telephony.ims.aidl.IImsRegistration getRegistration ( int slotId ) throws android.os.RemoteException { return new android.telephony.ims.stub.ImsRegistrationImplBase ( ) . getBinder ( ) ; }
public void onServiceDisconnected ( android.content.ComponentName name ) { mWapPushMan = null ; if ( false ) android.telephony.Rlog.v ( com.android.internal.telephony.WapPushOverSms.LOG_TAG , "wappush manager disconnected." ) ; rebindWapPushManager ( ) ; }
private static dalvik.system.PathClassLoader createSystemServerClassLoader ( java.lang.String systemServerClasspath , int targetSdkVersion ) { java.lang.String libraryPath = java.lang.System.getProperty ( "java.library.path" ) ; return com.android.internal.os.PathClassLoaderFactory.createClassLoader ( systemServerClasspath , libraryPath , libraryPath , java.lang.ClassLoader.getSystemClassLoader ( ) , targetSdkVersion , true ) ; }
void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceParameterLoader loader ) ;
boolean isZipAlignEnabled ( ) ;
public void bool ( boolean v ) throws java.io.IOException { mBuffer [ 0 ] = ( ( byte ) ( ( v ) ? 1 : 0 ) ) ; mOutputStream.write ( mBuffer , 0 , 1 ) ; }
public static native void BIO_free ( long bioRef ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; if ( ( mResourceType ) == ( com.android.resources.ResourceType.STRING ) ) { createNewString ( ) ; } }
public void settingsSecurePutIntForUser ( java.lang.String key , int value , int userId ) { Settings.Secure.putIntForUser ( mContext.getContentResolver ( ) , key , value , userId ) ; }
public void testVFE5 ( ) { loadAndRun ( "dot.junit.opcodes.iget_wide.d.T_iget_wide_7" , java.lang.NoClassDefFoundError.class ) ; }
public java.io.InputStream getInputStream ( ) throws java.io.IOException { return new java.nio.SocketChannelImpl.BlockingCheckInputStream ( super . getInputStream ( ) , channel ) ; }
public java.util.List < com.android.sdklib.internal.androidTarget.OptionalLibrary > getAdditionalLibraries ( ) { return mOptionalLibraries ; }
public static void computeAbs ( android.renderscript.cts.TestAbs.ArgumentsShortUshort args ) { args.out = ( ( short ) ( java.lang.Math.abs ( args.inValue ) ) ) ; }
public void tearDown ( ) throws java.lang.IllegalAccessException , java.lang.NoSuchMethodException , java.lang.reflect.InvocationTargetException { mMockAdapterService.cleanupNative ( ) ; com.android.bluetooth.TestUtils.clearAdapterService ( mMockAdapterService ) ; mMockAdapterService = null ; mProfiles = null ; }
public void onCreate ( ) { super . onCreate ( ) ; android.util.Log.d ( com.android.cts.verifier.notifications.MockListener.TAG , "created" ) ; mTestPackages.add ( "com.android.cts.verifier" ) ; mTestPackages.add ( "com.android.cts.robot" ) ; }
public static void setAppLayerName ( com.android.graphics.benchmark.ApkInfo apk ) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk = apk ; }
public void onFailedUnknownCall ( com.android.server.telecom.Call call ) { android.telecom.Log.i ( this , "onFailedUnknownCall for call %s" , call ) ; setCallState ( call , CallState.DISCONNECTED , "failed unknown call" ) ; call.removeListener ( this ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { assert ( cfg.getMarker ( com.android.jack.transformations.ssa.SsaBasicBlockSplitterMarker.class ) ) == null ; removeExceptionHandlingContext ( cfg ) ; edgeSplit ( cfg ) ; cfg.addMarker ( SsaBasicBlockSplitterMarker.INSTANCE ) ; }
public void testBridge001 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( BRIDGE001 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . compileAndRunTest ( ) ; }
public java.lang.String getEncodedValues ( ) { return java.lang.String.format ( "%1$s|%2$s|%3$s|%4$s|%5$s" , mAnyDensity , mResizeable , mSmallScreens , mNormalScreens , mLargeScreens ) ; }
public android.telephony.mbms.DownloadRequest build ( ) { return new android.telephony.mbms.DownloadRequest ( fileServiceId , source , destination , subscriptionId , appIntent , version ) ; }
static int smear ( int hashCode ) { return ( com.google.common.base.SmallCharMatcher.C2 ) * ( java.lang.Integer.rotateLeft ( ( hashCode * ( com.google.common.base.SmallCharMatcher.C1 ) ) , 15 ) ) ; }
public void testRipple ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "res/drawable/ripple.xml:1: Error: <ripple> requires API level 21 (current min is 14) [NewApi]\n" + "<ripple\n" ) + "^\n" ) + "res/drawable/ripple.xml:4: Warning: Attribute tintMode is only used in API level 21 and higher (current min is 14) [UnusedAttribute]\n" ) + " android:tintMode=\"src_over\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 1 warnings\n" ) ) , lintProject ( "apicheck/minsdk14.xml=>AndroidManifest.xml" , "apicheck/ripple.xml=>res/drawable/ripple.xml" ) ) ; }
void onSearchCompleted ( int connId , int status ) throws android.os.RemoteException { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "onSearchCompleted() - connId=" + connId ) + ", status=" ) + status ) ) ; gattClientGetGattDbNative ( connId ) ; }
public com.google.common.base.Objects.ToStringHelper addValue ( boolean value ) { return addHolder ( java.lang.String.valueOf ( value ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { try { server.startHandshake ( ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } return null ; }
private void handleSetVPMessage ( ) { mPhone.getEnhancedVoicePrivacy ( android.os.Message.obtain ( mQueryVoicePrivacyComplete , com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED ) ) ; android.provider.Settings.System.putInt ( mPhone.getContext ( ) . getContentResolver ( ) , android.provider.Settings.System.ENHANCED_VOICE_PRIVACY_ENABLED , com.android.phone.CallFeaturesSetting.preferredVPMode ) ; }
public void testForName_IllegalName ( ) { try { java.nio.charset.Charset.forName ( " ///#$$" ) ; fail ( ) ; } catch ( java.nio.charset.IllegalCharsetNameException expected ) { } }
public void test_EUC_JP_replacement_character ( ) throws java.lang.Exception { assertEncodes ( java.nio.charset.Charset.forName ( "EUC-JP" ) , " � " , ' ' , 244 , 254 , ' ' ) ; assertDecodes ( java.nio.charset.Charset.forName ( "EUC-JP" ) , " � " , ' ' , 244 , 254 , ' ' ) ; }
private void assertTombstone ( java.lang.String alias ) { assertTrue ( org.conscrypt.TrustedCertificateStore.isUser ( alias ) ) ; java.io.File file = file ( alias ) ; assertTrue ( file.exists ( ) ) ; assertEquals ( 0 , file.length ( ) ) ; }
private static native int nativeGetSize ( long obj ) ;
public void registrationProgressing ( ) { if ( com.android.ims.ImsManager.DBG ) { com.android.ims.ImsManager.log ( "registrationProgressing ::" ) ; } if ( ( mListener ) != null ) { mListener.onImsProgressing ( ServiceState.RIL_RADIO_TECHNOLOGY_UNKNOWN ) ; } }
public com.android.builder.model.ProductFlavor previous ( ) { return immutableObjectProvider.getProductFlavor ( baseIterator.previous ( ) ) ; }
public void test_minus_longTemporalUnit_zero ( ) { java.time.LocalTime t = tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.minus ( 0 , java.time.temporal.ChronoUnit.MINUTES ) ; org.testng.Assert.assertEquals ( t , tck.java.time.TCKLocalTime.TEST_12_30_40_987654321 ) ; }
synchronized void reportConnectionEvent ( long connectionId , byte event ) { mLastMileLogger.reportConnectionEvent ( connectionId , event ) ; if ( event == ( CONNECTION_EVENT_FAILED ) ) { mPacketFatesForLastFailure = fetchPacketFates ( ) ; } }
private void printFilteredProblem ( @ javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel , @ javax.annotation.Nonnull java.lang.String message ) { printFilteredProblem ( problemLevel , message , null , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) ) ; }
static org.bouncycastle.asn1.ASN1Encodable extractParameters ( java.security.AlgorithmParameters params ) throws org.bouncycastle.cms.CMSException { try { return org.bouncycastle.jcajce.util.JcaJceUtils.extractParameters ( params ) ; } catch ( java.io.IOException e ) { throw new org.bouncycastle.cms.CMSException ( ( "cannot extract parameters: " + ( e.getMessage ( ) ) ) , e ) ; } }
private java.nio.ByteBuffer getBuffer ( long page ) { return getBufferWrapper ( page , true ) . getCachedBuffer ( ) ; }
public void setup ( ) { put ( "Signature.FOO" , libcore.java.security.ProviderTest.MockSpi.class . getName ( ) ) ; put ( "Signature.FOO SupportedKeyClasses" , java.security.interfaces.RSAPrivateKey.class . getName ( ) ) ; }
public android.telephony.euicc.EuiccInfo getEuiccInfo ( ) { if ( ! ( isEnabled ( ) ) ) { return null ; } try { return android.telephony.euicc.EuiccManager.getIEuiccController ( ) . getEuiccInfo ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void addU8 ( android.support.v8.renderscript.Short3 v ) { mN.addU8 ( new android.support.v8.renderscript.Short3 ( v.x , v.y , v.z ) ) ; mPos += 3 ; }
private void checkNoName ( android.system.UnixSocketAddress usa ) { assertEquals ( 0 , usa.getSunPath ( ) . length ) ; }
public void loadAll ( ) { com.android.resources.ResourceType [ ] types = getAvailableResourceTypes ( ) ; for ( com.android.resources.ResourceType type : types ) { checkAndUpdate ( type ) ; } }
public void onDescriptorWrite ( java.lang.String address , int status , int handle ) throws android.os.RemoteException { }
public void setOriginalCallIntent ( android.content.Intent intent ) { mOriginalCallIntent = intent ; }
public static double ReturnDouble34 ( ) { long imm = Main.$inline$long ( 34L ) ; return ( ( double ) ( imm ) ) ; }
public com.google.api.client.http.HttpRequestFactory createRequestFactory ( java.lang.String message ) { com.google.gct.login.CredentialedUser activeUser = users.getActiveUser ( ) ; if ( activeUser == null ) { return null ; } return activeUser.getGoogleLoginState ( ) . createRequestFactory ( message ) ; }
private java.lang.String getKey ( java.lang.String hostname , int port ) { return ( ( hostname + ":" ) + ( java.lang.String.valueOf ( port ) ) ) . toLowerCase ( java.util.Locale.ENGLISH ) ; }
public android.telephony.CellIdentityWcdma createFromParcel ( android.os.Parcel in ) { in.readInt ( ) ; return android.telephony.CellIdentityWcdma.createFromParcelBody ( in ) ; }
synchronized void messageFromNative ( com.android.bluetooth.hfp.HeadsetStackEvent stackEvent ) { mStateMachine.sendMessage ( HeadsetStateMachine.STACK_EVENT , stackEvent ) ; }
public void getClipResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , int status ) { responseInts ( responseInfo , status ) ; }
public void freeMemory ( ) { mWebViewCore.sendMessage ( EventHub.FREE_MEMORY ) ; }
public android.net.wifi.nan.PublishConfig.Builder setTerminateNotificationEnabled ( boolean enable ) { mEnableTerminateNotification = enable ; return this ; }
public static boolean isLowSurrogate ( char ch ) { return java.lang.Character.isLowSurrogate ( ch ) ; }
public static com.android.bluetooth.opp.BluetoothOppManager getInstance ( android.content.Context context ) { synchronized ( com.android.bluetooth.opp.BluetoothOppManager.INSTANCE_LOCK ) { if ( ( com.android.bluetooth.opp.BluetoothOppManager.sInstance ) == null ) { com.android.bluetooth.opp.BluetoothOppManager.sInstance = new com.android.bluetooth.opp.BluetoothOppManager ( ) ; } com.android.bluetooth.opp.BluetoothOppManager.sInstance.init ( context ) ; return com.android.bluetooth.opp.BluetoothOppManager.sInstance ; } }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBuildId ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 16 ; buildId_ = value ; onChanged ( ) ; return this ; }
void setProject ( org.eclipse.core.resources.IProject project ) { mInitialProject = project ; mValues.project = project ; }
public void selectionChanged ( org.eclipse.jface.viewers.SelectionChangedEvent event ) { fireSelectionChanged ( event ) ; firePostSelectionChanged ( event ) ; }
static < B > java.util.List < java.util.List < B > > cartesianProduct ( java.util.List < ? extends B > ... lists ) { return com.google.common.collect.Lists.cartesianProduct ( java.util.Arrays.asList ( lists ) ) ; }
public void testSetCallbackAndNotify ( ) throws java.lang.Exception { mTestImsService.addImsFeatureStatusCallback ( mTestStatusCallback ) ; mTestImsService.addImsFeatureStatusCallback ( mTestStatusCallback2 ) ; org.mockito.Mockito.verify ( mTestStatusCallback ) . notifyImsFeatureStatus ( org.mockito.Matchers.eq ( ImsFeature.STATE_NOT_AVAILABLE ) ) ; org.mockito.Mockito.verify ( mTestStatusCallback2 ) . notifyImsFeatureStatus ( org.mockito.Matchers.eq ( ImsFeature.STATE_NOT_AVAILABLE ) ) ; }
public void onClick ( android.content.DialogInterface dialog , int id ) { android.content.Intent denyIntent = new android.content.Intent ( BluetoothPeripheralHandover.ACTION_DENY_CONNECT ) ; denyIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; sendBroadcast ( denyIntent ) ; this . mAlert = null ; this . finish ( ) ; }
public void run ( ) { try { startUp ( ) ; notifyStarted ( ) ; } catch ( java.lang.Throwable t ) { notifyFailed ( t ) ; throw com.google.common.base.Throwables.propagate ( t ) ; } }
public boolean isNumberGeographical ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType numberType , int countryCallingCode ) { return ( ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE ) ) || ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE_OR_MOBILE ) ) ) || ( ( com.google.i18n.phonenumbers.PhoneNumberUtil.GEO_MOBILE_COUNTRIES.contains ( countryCallingCode ) ) && ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.MOBILE ) ) ) ; }
private android.renderscript.Long2 pack_l2 ( long [ ] val ) { assert ( val.length ) == 2 ; return new android.renderscript.Long2 ( val [ 0 ] , val [ 1 ] ) ; }
public void testNameSpecialChars_RFC1779_01 ( ) throws java.lang.Exception { java.lang.String dn = "CN=\\\nB" ; javax.security.auth.x500.X500Principal principal = new javax.security.auth.x500.X500Principal ( dn ) ; java.lang.String s = principal.getName ( javax.security.auth.x500.X500Principal.RFC1779 ) ; assertEquals ( "CN=\"\nB\"" , s ) ; }
public java.lang.String getDescription ( ) { return com.google.gct.idea.util.GctBundle.message ( "appengine.wizard.gallery_description" ) ; }
public static boolean isValueBasedResourceType ( com.android.resources.ResourceType type ) { java.util.List < com.android.resources.ResourceFolderType > folderTypes = com.android.resources.FolderTypeRelationship.getRelatedFolders ( type ) ; for ( com.android.resources.ResourceFolderType folderType : folderTypes ) { if ( folderType == ( com.android.resources.ResourceFolderType.VALUES ) ) { return true ; } } return false ; }
private void processIccRecordEvents ( int eventCode ) { switch ( eventCode ) { case com.android.internal.telephony.IccRecords.EVENT_CFI : notifyCallForwardingIndicator ( ) ; break ; case com.android.internal.telephony.IccRecords.EVENT_MWI : notifyMessageWaitingIndicator ( ) ; break ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { java.lang.String fqcn = createNewFragmentClass ( javaProject ) ; if ( fqcn != null ) { returnValue.set ( fqcn ) ; dialogHolder.get ( ) . close ( ) ; } }
public abstract com.android.vts.servlet.BaseServlet.PageType getNavParentType ( ) ;
public android.accounts.AuthenticatorDescription [ ] getAuthenticatorTypes ( ) { try { return mService.getAuthenticatorTypes ( android.os.UserHandle.getCallingUserId ( ) ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void onComplete ( int resultCode ) { executor.execute ( ( ) -> callback.onComplete ( resultCode , null ) ) ; }
public java.nio.file.Path pathFromRepository ( java.nio.file.Path relPath ) { return java.util.Objects.requireNonNull ( super . pathFromRepository ( relPath ) ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JLocalRef localRef ) { buildAssignVariableRef ( destReg , localRef , sourcePosition ) ; return false ; }
public void test_getLong_TemporalField ( ) { org.testng.Assert.assertEquals ( tck.java.time.TCKMonthDay.TEST_07_15.getLong ( java.time.temporal.ChronoField.DAY_OF_MONTH ) , 15 ) ; org.testng.Assert.assertEquals ( tck.java.time.TCKMonthDay.TEST_07_15.getLong ( java.time.temporal.ChronoField.MONTH_OF_YEAR ) , 7 ) ; }
public void startJankRecorder ( java.lang.String eventName ) { com.android.dialer.common.LogUtil.d ( "StubMetrics.startJankRecorder" , "started jank recorder for %s" , eventName ) ; }
public static float FloatMultiplication ( ) { float a ; float b ; float c ; a = Main.$inline$float ( 7.0F ) ; b = Main.$inline$float ( 3.0F ) ; c = a * b ; return c ; }
public static com.google.devtools.common.options.OptionsParser newOptionsParser ( java.lang.Iterable < ? extends java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > optionsClasses ) { return com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( com.google.common.collect.ImmutableList.< java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > copyOf ( optionsClasses ) ) ) ; }
public java.lang.String getHostExecutionFlags ( ) { return java.lang.String.format ( "-Xnorelocate -Ximage:%s" , getHostCoreImagePath ( ) ) ; }
public java.util.List < com.android.build.gradle.api.GroupableProductFlavor > getProductFlavors ( ) { return new com.android.build.gradle.internal.api.ImmutableFlavorList ( getVariantData ( ) . getVariantConfiguration ( ) . getProductFlavors ( ) , readOnlyObjectProvider ) ; }
void setConnectionState ( int connectionState ) { mConnectionState = connectionState ; }
private void validateScheduling ( java.util.TimerTask task , long delay , long period ) { validateScheduling ( task , new java.util.Date ( 1 ) , delay , period ) ; }
private native void gattSetScanParametersNative ( int client_if , int scan_interval , int scan_window ) ;
public com.google.common.collect.UnmodifiableIterator < E > descendingIterator ( ) { return com.google.common.collect.Iterators.emptyIterator ( ) ; }
public java.lang.annotation.Annotation [ ] getDeclaredAnnotations ( ) { return super . getDeclaredAnnotations ( ) ; }
public boolean setP2pSsidPostfix ( java.lang.String postfix ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setSsidPostfix ( postfix ) ; } else { return doBooleanCommand ( ( "SET p2p_ssid_postfix " + postfix ) ) ; } }
public void testApi4 ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/deprecation.xml:2: Warning: AbsoluteLayout is deprecated [Deprecated]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<AbsoluteLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" + "^\n" ) + "res/layout/deprecation.xml:16: Warning: android:autoText is deprecated: Use inputType instead [Deprecated]\n" ) + " android:autoText=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/deprecation.xml:17: Warning: android:capitalize is deprecated: Use inputType instead [Deprecated]\n" ) + " android:capitalize=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/deprecation.xml:18: Warning: android:editable is deprecated: Use an <EditText> to make it editable [Deprecated]\n" ) + " android:editable=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/deprecation.xml:20: Warning: android:inputMethod is deprecated: Use inputType instead [Deprecated]\n" ) + " android:inputMethod=\"@+id/foo\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/deprecation.xml:21: Warning: android:numeric is deprecated: Use inputType instead [Deprecated]\n" ) + " android:numeric=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/deprecation.xml:22: Warning: android:password is deprecated: Use inputType instead [Deprecated]\n" ) + " android:password=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/deprecation.xml:23: Warning: android:phoneNumber is deprecated: Use inputType instead [Deprecated]\n" ) + " android:phoneNumber=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 8 warnings\n" ) + "" ) ) , lintProject ( "apicheck/minsdk4.xml=>AndroidManifest.xml" , "res/layout/deprecation.xml" ) ) ; }
protected com.android.sdklib.internal.repository.DownloadCache getDownloadCache ( ) { if ( ( mDownloadCache ) == null ) { mDownloadCache = new com.android.sdklib.internal.repository.DownloadCache ( ( mSettingsController.getSettings ( ) . getUseDownloadCache ( ) ? DownloadCache.Strategy.FRESH_CACHE : DownloadCache.Strategy.DIRECT ) ) ; } return mDownloadCache ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBuildIdBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 32 ; buildId_ = value ; onChanged ( ) ; return this ; }
public void testRefactor1_noreferences ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT , false , false , "my.pkg.name" , ( "CHANGES:\n" + ( "-------\n" + "[x] Rename package 'com.example.refactoringtest' to 'my.pkg.name'" ) ) , false ) ; }
public boolean isChainValid ( java.lang.String hostname , java.util.List < java.security.cert.X509Certificate > chain ) throws org.conscrypt.PinManagerException { final org.conscrypt.PinListEntry entry = lookup ( hostname ) ; if ( entry == null ) { return true ; } return entry.isChainValid ( chain ) ; }
public void dispatchMediaKeyEvent ( android.view.KeyEvent keyEvent ) { android.media.session.MediaSessionLegacyHelper helper = android.media.session.MediaSessionLegacyHelper.getHelper ( getContext ( ) ) ; helper.sendMediaButtonEvent ( keyEvent , false ) ; }
public void set ( int n , com.android.jack.dx.rop.type.Type exceptionType , int handler ) { set0 ( n , new com.android.jack.dx.dex.code.CatchHandlerList.Entry ( exceptionType , handler ) ) ; }
private int getDefaultInstallLoc ( ) { int origDefaultLoc = android.content.pm.PackageInfo.INSTALL_LOCATION_AUTO ; try { origDefaultLoc = Settings.System.getInt ( mContext.getContentResolver ( ) , Settings.Secure.DEFAULT_INSTALL_LOCATION ) ; } catch ( android.provider.Settings.SettingNotFoundException e1 ) { } return origDefaultLoc ; }
public void showInputMethodAndSubtypeEnabler ( java.lang.String imiId ) { synchronized ( mH ) { try { mService.showInputMethodAndSubtypeEnablerFromClient ( mClient , imiId ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public static java.lang.String getStandardName ( java.lang.String algName ) { return org.apache.harmony.security.utils.AlgNameMapper.algAliasesMap.get ( algName.toUpperCase ( java.util.Locale.ROOT ) ) ; }
public void testDeserializeWasExternalizableClass ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737200336c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + "e546573742457617345787465726e616c697a61626c6500000000000000000c0000787078" ; assertFalse ( libcore.java.io.SerializationTest.wasExternalizableInitializedFlag ) ; try { libcore.libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertTrue ( libcore.java.io.SerializationTest.wasExternalizableInitializedFlag ) ; }
public boolean equals ( java.lang.Object obj ) { return ( obj instanceof com.android.jack.plugin.PluginLocation ) && ( plugin.getCanonicalName ( ) . equals ( ( ( com.android.jack.plugin.PluginLocation ) ( obj ) ) . plugin.getCanonicalName ( ) ) ) ; }
public void testConstructor ( ) throws java.lang.Exception { javax.net.ssl.SSLSocket ssl = getSSLSocket ( ) ; assertNotNull ( ssl ) ; ssl.close ( ) ; }
private void notifyHostEmuData ( int technology , byte [ ] data ) { mListener.onHostCardEmulationData ( technology , data ) ; }
private static void printUsage ( ) { java.lang.System.err.println ( ( "Usage:\n" + ( ( "create <old_version_description> <new_version_description> <old_version_folder> <new_version_folder>" + " <patch_file_name> [ignored=file1;file2;...] [critical=file1;file2;...] [optional=file1;file2;...]\n" ) + "install [--exit0] <destination_folder> [log_directory]\n" ) ) ) ; }
public native void putDouble ( long address , double x ) ;
public static native long [ ] X509_CRL_get_REVOKED ( long x509CrlCtx ) ;
public static < T > T get ( java.util.Iterator < ? extends T > iterator , int position , @ javax.annotation.Nullable T defaultValue ) { com.google.common.collect.Iterators.checkNonnegative ( position ) ; com.google.common.collect.Iterators.advance ( iterator , position ) ; return com.google.common.collect.Iterators.getNext ( iterator , defaultValue ) ; }
private static java.util.Properties createSystemProperties ( ) { java.util.Properties p = new java.lang.System.PropertiesWithNonOverrideableDefaults ( java.lang.System.unchangeableSystemProperties ) ; p.put ( "java.io.tmpdir" , "/tmp" ) ; return p ; }
public static com.android.jack.dx.rop.code.LocalItem make ( com.android.jack.dx.rop.cst.CstString name , com.android.jack.dx.rop.type.Type type , com.android.jack.dx.rop.cst.CstString signature ) { if ( ( name == null ) && ( type == null ) ) { return null ; } return new com.android.jack.dx.rop.code.LocalItem ( name , type , signature ) ; }
public java.lang.String call ( ) { return getTitle ( ) ; }
private native void initializeNative ( int maxHfClients , boolean inbandRingEnable ) ;
private java.awt.Color getFillColor ( com.android.tools.perflib.vmtrace.Call c ) { int percent = quantize ( getDurationPercentage ( c , EXCLUSIVE_TIME_SELECTOR ) ) ; return getFill ( percent ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setModulesDone ( int value ) { bitField0_ |= 131072 ; modulesDone_ = value ; onChanged ( ) ; return this ; }
public void testRemoveTransportModeTransform ( ) throws java.lang.Exception { android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromSocket ( new java.net.Socket ( ) ) ; mIpSecService.removeTransportModeTransforms ( pfd ) ; org.mockito.Mockito.verify ( mMockNetd ) . ipSecRemoveTransportModeTransform ( pfd.getFileDescriptor ( ) ) ; }
public java.lang.String getName ( ) { return com.android.server.wifi.RecommendedNetworkEvaluator.TAG ; }
public static void w ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { android.telecom.Log.w ( objectPrefix , format , args ) ; }
public java.io.File getSymbolLocation ( ) { return new java.io.File ( ( ( ( globalScope.getIntermediatesDir ( ) ) + "/symbols/" ) + ( variantData.getVariantConfiguration ( ) . getDirName ( ) ) ) ) ; }
private void setMediaSessionActiveAndPlaybackState ( boolean isPlaying ) { if ( isPlaying ) { mMediaSession.setActive ( true ) ; mMediaSession.setPlaybackState ( com.android.tv.MainActivity.MEDIA_SESSION_STATE_PLAYING ) ; } else { mMediaSession.setPlaybackState ( com.android.tv.MainActivity.MEDIA_SESSION_STATE_STOPPED ) ; mMediaSession.setActive ( false ) ; } }
android.os.Bundle createSaveState ( ) { android.os.Bundle saveState = new android.os.Bundle ( ) ; mTabControl.saveState ( saveState ) ; if ( ! ( saveState.isEmpty ( ) ) ) { saveState.putSerializable ( "lastActiveDate" , java.util.Calendar.getInstance ( ) ) ; } return saveState ; }
private java.lang.String formatNsn ( java.lang.String number , com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat numberFormat ) { return formatNsn ( number , metadata , numberFormat , null ) ; }
public void testCanEncodeSurrogate() { assertFalse(encoder.canEncode('\ud800')); assertFalse(encoder.canEncode("\udc00")); }
public android.net.IpSecTransform buildTunnelModeTransform ( java.net.InetAddress localAddress , java.net.InetAddress remoteAddress ) { mConfig.setLocalAddress ( localAddress.getHostAddress ( ) ) ; mConfig.setRemoteAddress ( remoteAddress.getHostAddress ( ) ) ; mConfig.setMode ( android.net.IpSecTransform.MODE_TUNNEL ) ; return new android.net.IpSecTransform ( mContext , mConfig ) ; }
public void handleNetworkAvailable ( ) { if ( com.android.internal.telephony.NitzStateMachine.DBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.NitzStateMachine.LOG_TAG , ( ( "handleNetworkAvailable: mNitzTimeZoneDetectionSuccessful=" + ( mNitzTimeZoneDetectionSuccessful ) ) + ", Setting mNitzTimeZoneDetectionSuccessful=false" ) ) ; } mNitzTimeZoneDetectionSuccessful = false ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( "ConfigurationResult{" + "configurationInstance='" ) + ( configurationInstance.getResultsViewerDisplayString ( ) ) ) + '\'' ) + ", result=" ) + ( result ) ) + ", isComplete=" ) + ( isComplete ) ) + '}' ; }
public void removeItems ( @ com.android.annotations.NonNull java.util.Collection < I > items ) { for ( I item : items ) { mItems.remove ( item.getKey ( ) ) ; item.setSource ( null ) ; } }
public void visitLater ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Instance instance ) ;
void writeTo ( byte [ ] b , int off ) { java.lang.System.arraycopy ( buf , 0 , b , off , count ) ; }
public void broadcastPnoScanResultEvent ( java.lang.String iface ) { sendMessage ( iface , com.android.server.wifi.WifiMonitor.PNO_SCAN_RESULTS_EVENT ) ; }
public int getWifiEnabledState ( ) { enforceAccessPermission ( ) ; mLog.trace ( "getWifiEnabledState uid=%" ) . c ( android.os.Binder.getCallingUid ( ) ) . flush ( ) ; return mWifiStateMachine.syncGetWifiState ( ) ; }
private void acknowledgeSms ( int messageRef , @ android.telephony.ims.internal.SmsImplBase.DeliverStatusResult int result ) { getSmsImplementation ( ) . acknowledgeSms ( messageRef , result ) ; }
public static native byte [ ] [ ] EC_GROUP_get_curve ( org.conscrypt.NativeRef.EC_GROUP groupRef ) ;
private static void resetWifiAwareNative ( ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.aware.WifiAwareNative.class . getDeclaredField ( "sWifiAwareNativeSingleton" ) ; field.setAccessible ( true ) ; field.set ( null , null ) ; }
public void dump ( java.io.FileDescriptor fd ) { doDump ( fd ) ; }
public void test3rdPartyTests ( ) throws java.lang.Exception { runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , new java.io.File ( testDir , "3rdPartyTests" ) , "clean" , "deviceCheck" ) ; }
static synchronized com.android.incallui.VideoPauseController getInstance ( ) { if ( ( com.android.incallui.VideoPauseController.videoPauseController ) == null ) { com.android.incallui.VideoPauseController.videoPauseController = new com.android.incallui.VideoPauseController ( ) ; } return com.android.incallui.VideoPauseController.videoPauseController ; }
public java.lang.String getPrefix ( ) { return prefix ; }
private int getPreciseDisconnectCauseFromReasonInfo ( android.telephony.ims.ImsReasonInfo reasonInfo ) { return com.android.internal.telephony.imsphone.ImsPhoneCallTracker.PRECISE_CAUSE_MAP.get ( maybeRemapReasonCode ( reasonInfo ) , PreciseDisconnectCause.ERROR_UNSPECIFIED ) ; }
public android.os.PersistableBundle getCarrierConfig ( ) { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService ( android.telephony.CarrierConfigManager.class ) ; return carrierConfigManager.getConfigForSubId ( getSubId ( ) ) ; }
synchronized void nScriptSetVarD ( long id , int slot , double val ) { validate ( ) ; rsnScriptSetVarD ( mContext , id , slot , val ) ; }
public static com.android.ide.eclipse.adt.internal.wizards.newxmlfile.ResourceNameValidator create ( boolean allowXmlExtension , com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType type ) { boolean isFileType = type != ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType.VALUES ) ; return new com.android.ide.eclipse.adt.internal.wizards.newxmlfile.ResourceNameValidator ( allowXmlExtension , null , isFileType ) ; }
public int getWordCount ( ) { if ( isCategory2 ( ) ) { return 2 ; } return 1 ; }
public void onSdkReload ( ) { com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . reparseSdk ( ) ; }
public void callSessionConferenceStateUpdated ( android.telephony.ims.ImsCallSession session , android.telephony.ims.ImsConferenceState state ) { logi ( ( "callSessionConferenceStateUpdated :: state=" + state ) ) ; conferenceStateUpdated ( state ) ; }
public void onChange ( boolean selfChange ) { if ( isNsdEnabled ( ) ) { mNsdStateMachine.sendMessage ( NsdManager.ENABLE ) ; } else { mNsdStateMachine.sendMessage ( NsdManager.DISABLE ) ; } }
public java.lang.String [ ] getDelegateClassNatives ( ) { return com.android.tools.layoutlib.create.AsmGeneratorTest.EMPTY_STRING_ARRAY ; }
void onProgressRefresh ( float scale , boolean fromUser ) { super . onProgressRefresh ( scale , fromUser ) ; if ( ! ( isAnimationRunning ( ) ) ) { setThumbPos ( scale ) ; } }
public static synchronized java.io.OutputStream getOutStream ( ) { return com.android.ide.eclipse.adt.AdtPlugin.sPlugin.mAndroidConsoleStream ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED : handleQueryVPModeMessage ( ( ( android.os.AsyncResult ) ( msg.obj ) ) ) ; break ; default : } }
public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { if ( PrefPage.PREFS_DEVTREE_DIR.equals ( event.getProperty ( ) ) ) { com.android.ide.eclipse.ddms.DdmsPlugin.setToolsLocation ( com.android.ide.eclipse.pdt.PdtPlugin.getAdbLocation ( ) , true , com.android.ide.eclipse.pdt.PdtPlugin.getHprofConvLocation ( ) , com.android.ide.eclipse.pdt.PdtPlugin.getTraceViewLocation ( ) ) ; } }
public void onChange ( boolean selfChange , android.net.Uri uri ) { com.android.dialer.common.Assert.isMainThread ( ) ; com.android.dialer.common.LogUtil.i ( "MarkDirtyObserver.onChange" , "Uri:%s, SelfChange:%b" , java.lang.String.valueOf ( uri ) , selfChange ) ; refreshAnnotatedCallLogNotifier.markDirtyAndNotify ( ) ; }
void setBits ( java.util.BitSet table ) { table.set ( startInclusive , ( endInclusive + 1 ) ) ; }
private void testExplicitSize ( ) { doLayoutParamTest ( ( android.view.WindowManager.LayoutParams params ) -> { params.width = ( 200 - ( mOutsets.left ) ) - ( mOutsets.right ) ; params.height = ( 200 - ( mOutsets.bottom ) ) - ( mOutsets.top ) ; } ) ; }
protected java.io.File getResultFile ( java.io.File reportDir ) throws java.io.IOException { return new java.io.File ( reportDir , ( ( ( ( ( ( "TEST-" + ( mDeviceName ) ) + "-" ) + ( mProjectName ) ) + "-" ) + ( mFlavorName ) ) + ".xml" ) ) ; }
public int checkPermission ( java.lang.String permission , int pid , int uid ) { if ( permission == null ) { return android.content.pm.PackageManager.PERMISSION_DENIED ; } return checkComponentPermission ( permission , pid , android.os.UserHandle.getAppId ( uid ) , ( - 1 ) , true ) ; }
public static void computeConvert ( android.renderscript.cts.TestConvert.ArgumentsIntInt args ) { args.out = android.renderscript.cts.CoreMathVerifier.convertIntToInt ( args.inV ) ; }
public void doesNotContainClass ( java.lang.String className ) throws com.android.ide.common.process.ProcessException , java.io.IOException { if ( checkForClass ( className ) ) { failWithRawMessage ( "'%s' unexpectedly contain '%s'" , getDisplaySubject ( ) , className ) ; } }
public boolean responderReportNfcHandover ( java.lang.String requestMessage ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.responderReportNfcHandover ( requestMessage ) ; } else { return doBooleanCommand ( ( ( "NFC_REPORT_HANDOVER RESP P2P " + requestMessage ) + " 00" ) ) ; } }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( numHashFunctions , funnel , strategy , bits ) ; }
public java.util.List < com.google.gct.testing.CloudConfigurationDimension > getDimensions ( ) { return com.google.common.collect.ImmutableList.of ( deviceDimension , apiDimension , languageDimension , orientationDimension ) ; }
public static final int toCodePoint ( char high , char low ) { return java.lang.Character.toCodePoint ( high , low ) ; }
public void onBootPhase ( int phase ) { if ( phase == ( PHASE_ACTIVITY_MANAGER_READY ) ) { mImpl.setSafeMode ( isSafeMode ( ) ) ; } }
private void applyLidSwitchState ( ) { if ( ( ( mLidState ) == ( android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED ) ) && ( mLidControlsSleep ) ) { mPowerManager.goToSleep ( android.os.SystemClock.uptimeMillis ( ) , PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH , PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE ) ; } synchronized ( mLock ) { updateWakeGestureListenerLp ( ) ; } }
public android.icu.impl.UResource.Key setToEmpty ( ) { bytes = null ; offset = length = 0 ; s = "" ; return this ; }
public static com.android.builder.model.ClassField createClassField ( @ com.android.annotations.NonNull java.lang.String type , @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String value ) { return new com.android.builder.internal.ClassFieldImpl ( type , name , value ) ; }
protected com.android.jack.tools.merger.JackMerger getNewJackMerger ( int firstTypeIndex ) { return new com.android.jack.tools.merger.JackMerger ( createDexFile ( ) , com.android.jack.tools.merger.ConstantManager.getDefaultInstance ( com.android.sched.util.config.ThreadConfig.get ( Options.BEST_MERGING_ACCURACY ) . booleanValue ( ) ) ) ; }
public void check ( org.xmlpull.v1.XmlPullParser parser ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { android.os.PersistableBundle b = com.android.carrierconfig.DefaultCarrierConfigService.readConfigFromXml ( parser , new android.service.carrier.CarrierIdentifier ( "001" , "001" , "Test" , "001001123456789" , "" , "" ) ) ; assertNotNull ( "got null bundle" , b ) ; }
synchronized java.lang.String [ ] [ ] internalZoneStrings ( ) { if ( ( zoneStrings ) == null ) { zoneStrings = libcore.icu.TimeZoneNames.getZoneStrings ( locale ) ; } return zoneStrings ; }
public void core ( ) throws java.lang.Exception { java.io.File coreOutFolder = com.android.jack.TestTools.createTempDir ( "core" , "dex" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , com.android.jack.ToolchainTest.corePath , coreOutFolder , false ) ; }
public void testRunStopped ( long elapsedTime ) { mElapsedTime += elapsedTime ; mIsRunComplete = true ; }
private long getGlobalLong ( java.lang.String name , long def ) { return Settings.Global.getLong ( mResolver , name , def ) ; }
public void onStop ( ) { super . onStop ( ) ; if ( ! ( mUnavailable ) ) { getActivity ( ) . unregisterReceiver ( mReceiver ) ; } }
public void onShellCommand ( java.io.FileDescriptor in , java.io.FileDescriptor out , java.io.FileDescriptor err , java.lang.String [ ] args , android.os.ResultReceiver resultReceiver ) { new com.android.server.pm.PackageManagerShellCommand ( this ) . exec ( this , in , out , err , args , resultReceiver ) ; }
public static int getCallbackAction ( java.lang.String number , int features , java.lang.String phoneAccountComponentName , android.content.Context context ) { return com.android.dialer.calllogutils.CallbackActionHelper.getCallbackAction ( number , features , com.android.dialer.calllogutils.CallbackActionHelper.isDuoCall ( phoneAccountComponentName , context ) ) ; }
private java.util.Map < java.lang.String , com.android.ide.common.resources.platform.DeclareStyleableInfo > collectManifestDefinitions ( com.android.ide.common.resources.platform.AttrsXmlParser attrsXmlParser ) { return attrsXmlParser.getDeclareStyleableList ( ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { onBrowseSdCard ( ) ; validatePage ( ) ; }
public void test_F32_3_SCALE20_05_inSqure ( ) { testResize ( inX , inX , Element.DataType.FLOAT_32 , 3 , 2.0F , 0.5F ) ; }
public void testBasicTrace ( ) throws java.io.IOException { java.lang.String expected = " -> AsyncTask #1.: -> android/os/Debug.startMethodTracing: (Ljava/lang/String;)V -> android/os/Debug.startMethodTracing: (Ljava/lang/String;II)V -> dalvik/system/VMDebug.startMethodTracing: (Ljava/lang/String;II)V\n" + ( " -> com/test/android/traceview/Basic.foo: ()V -> com/test/android/traceview/Basic.bar: ()I\n" + " -> android/os/Debug.stopMethodTracing: ()V -> dalvik/system/VMDebug.stopMethodTracing: ()V" ) ; testTrace ( "/basic.trace" , "AsyncTask #1" , expected ) ; testTrace ( "/basic-api10.trace" , "AsyncTask #1" , expected ) ; }
void notifyStateChanged ( ) ;
void addTo ( @ com.android.annotations.NonNull com.android.manifmerger.ActionRecorder actionRecorder , @ com.android.annotations.NonNull com.android.manifmerger.XmlDocument document , @ com.android.annotations.NonNull java.lang.String value ) ;
public static void wtf ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { java.lang.String msg = android.telecom.Log.buildMessage ( prefix , format , args ) ; android.util.Slog.wtf ( android.telecom.Log.TAG , msg , new java.lang.IllegalStateException ( msg ) ) ; }
private org.gradle.tooling.ProjectConnection getProjectConnection ( ) { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector ( ) ; ( ( org.gradle.tooling.internal.consumer.DefaultGradleConnector ) ( connector ) ) . daemonMaxIdleTime ( 10 , java.util.concurrent.TimeUnit.SECONDS ) ; return connector.useGradleVersion ( targetGradleVersion ) . forProjectDirectory ( testDir ) . connect ( ) ; }
protected java.lang.String getWizardActionDescription ( ) { return com.google.gct.idea.util.GctBundle.message ( "sample.import.title" ) ; }
public static native int EVP_VerifyFinal ( long ctx , byte [ ] signature , int offset , int length , long key ) ;
public java.lang.String getMessage ( ) { java.lang.Throwable cause = getCause ( ) ; if ( cause != null ) { return cause.getMessage ( ) ; } else { return null ; } }
public int availableProcessors ( ) { return ( ( int ) ( Libcore.os.sysconf ( libcore.io.OsConstants._SC_NPROCESSORS_CONF ) ) ) ; }
public void visitLdcInsn ( java.lang.Object cst ) { printer.visitLdcInsn ( cst ) ; printTypeOfOperandStack ( ) ; super . visitLdcInsn ( cst ) ; }
protected void onStop ( ) { mSensorManager.unregisterListener ( mListener ) ; super . onStop ( ) ; if ( android.util.Config.LOGD ) android.util.Log.d ( TAG , ( "stop " + ( mSensorManager ) ) ) ; }
public static void computeErf ( android.renderscript.cts.TestErf.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.erf ( args.in ) , 16 , 128 ) ; }
public java.lang.String nextTo ( java.lang.String excluded ) { if ( excluded == null ) { throw new java.lang.NullPointerException ( "excluded == null" ) ; } return nextToInternal ( excluded ) . trim ( ) ; }
private static com.android.jack.ir.ast.JMethodCall makeSuperCall ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info , @ javax.annotation.CheckForNull com.android.jack.ir.ast.JExpression instance , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface receiverType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod targetMethod ) { com.android.jack.ir.ast.JMethodCall call = new com.android.jack.ir.ast.JMethodCall ( info , instance , receiverType , targetMethod.getMethodId ( ) , false ) ; return call ; }
public com.android.ims.internal.IImsUt getUtInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getUtInterface ( ) ; } }
public java.io.File getOutput ( ) { return new java.io.File ( "" ) ; }
native void rsnScriptSetVarD ( long con , long id , int slot , double val , boolean mUseInc ) ;
public void testJustInfo ( ) { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder ( mLoggerMock ) . addMessage ( mSourceLocation , 0 , 0 , Severity.INFO , "merging info" ) . build ( ) ; assertEquals ( MergingReport.Result.SUCCESS , mergingReport.getResult ( ) ) ; }
public android.os.Bundle getAuthToken ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , java.lang.String s , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { if ( com.android.bluetooth.pbapclient.Authenticator.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; throw new java.lang.UnsupportedOperationException ( ) ; }
public static native int SSL_set_alpn_protos ( long sslPointer , byte [ ] protos ) ;
synchronized void nScriptReduce ( long id , int slot , long [ ] ains , long aout , int [ ] limits ) { validate ( ) ; rsnScriptReduce ( mContext , id , slot , ains , aout , limits ) ; }
void setCellInfoListRate ( ) { setCellInfoListRate ( java.lang.Integer.MAX_VALUE , null , mRILDefaultWorkSource ) ; }
public static native void EC_GROUP_set_point_conversion_form ( long groupRef , int form ) ;
public void test_U8_1_SCALE20_05_inRectangle ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inY , Element.DataType.UNSIGNED_8 , 1 , 2.0F , 0.5F ) ; checkError ( ) ; }
public static void permuteArguments_boxingCallee ( boolean a , java.lang.Integer b ) { if ( a && ( ( b.intValue ( ) ) == 42 ) ) { return ; } java.lang.System.out.println ( ( ( ( "Unexpected arguments: " + a ) + ", " ) + b ) ) ; }
public void test_U8_3_SCALE05_20_inSquare ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.UNSIGNED_8 , 3 , 0.5F , 2.0F ) ; checkError ( ) ; }
public com.google.mockwebserver.MockResponse setHeader ( java.lang.String name , java.lang.Object value ) { removeHeader ( name ) ; return addHeader ( name , value ) ; }
public java.lang.Boolean call ( ) { return onHoverEvent ( event ) ; }
public void setUnsolResponseFilter ( int filter , android.os.Message result ) { }
public void run ( ) { if ( ( mFolders.isDisposed ( ) ) == false ) { emptyTables ( ) ; } }
public java.lang.String formatNationalNumberWithPreferredCarrierCode ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.lang.CharSequence fallbackCarrierCode ) { return formatNationalNumberWithCarrierCode ( number , ( ( number.getPreferredDomesticCarrierCode ( ) . length ( ) ) > 0 ? number.getPreferredDomesticCarrierCode ( ) : fallbackCarrierCode ) ) ; }
public boolean equals ( java.lang.Object other ) { if ( other instanceof com.android.ahat.heapdump.Value.LongValue ) { com.android.ahat.heapdump.Value.LongValue value = ( ( com.android.ahat.heapdump.Value.LongValue ) ( other ) ) ; return ( mLong ) == ( value.mLong ) ; } return false ; }
private static void assertValidInstructionSet ( java.lang.String instructionSet ) throws com.android.server.pm.Installer.InstallerException { for ( java.lang.String abi : android.os.Build.SUPPORTED_ABIS ) { if ( dalvik.system.VMRuntime.getInstructionSet ( abi ) . equals ( instructionSet ) ) { return ; } } throw new com.android.server.pm.Installer.InstallerException ( ( "Invalid instruction set: " + instructionSet ) ) ; }
public int getRssi ( ) { evictOldScanResults ( ) ; int rssi = java.lang.Integer.MIN_VALUE ; for ( android.net.wifi.ScanResult result : mScanResultCache.values ( ) ) { if ( ( result.level ) > rssi ) { rssi = result.level ; } } return rssi ; }
private void setKeyFromKey16 ( int keyOffset , com.ibm.icu.impl.ICUResource.Key key ) { if ( keyOffset < ( localKeyLimit ) ) { key.setBytes ( keyBytes , keyOffset ) ; } else { key.setBytes ( poolBundleReader.keyBytes , ( keyOffset - ( localKeyLimit ) ) ) ; } }
public java.lang.String getName ( ) { com.android.dex.Dex dex = declaringClassOfOverriddenMethod.getDex ( ) ; int nameIndex = dex.nameIndexFromMethodIndex ( dexMethodIndex ) ; return declaringClassOfOverriddenMethod.getDexCacheString ( dex , nameIndex ) ; }
public static int getMaxSendRetryCount ( ) { return android.net.wifi.aware.DiscoverySession.MAX_SEND_RETRY_COUNT ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setSuiteNameBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4096 ; suiteName_ = value ; onChanged ( ) ; return this ; }
public void copyFrom ( float [ ] d ) { validateIsFloat32 ( ) ; copyFromUnchecked ( d , Element.DataType.FLOAT_32 , d.length ) ; }
public android.webkit.WebBackForwardList call ( ) { return saveState ( outState ) ; }
public void zoomChanged ( ) { synchronized ( this ) { if ( ( grid ) != null ) { grid.dispose ( ) ; grid = null ; zoom = model.getZoom ( ) ; } } doRedraw ( ) ; }
public void setFile ( java.io.File file ) { this . file = file ; this . cachedName = null ; }
static com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType createUninitialized ( int label ) { return com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType.create ( ( ( com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType.UNINITIALIZED_PREFIX ) + label ) ) ; }
protected com.android.tv.dialog.HalfSizedDialogFragment.OnActionClickListener getOnActionClickListener ( ) { return mOnActionClickListener ; }
public void shutdown ( ) { wifiNanDestroyAll ( ) ; mService.unregisterReceiver ( mStateChangedReceiver ) ; }
void destroyGL ( ) { mEgl.eglMakeCurrent ( mEglDisplay , EGL10.EGL_NO_SURFACE , EGL10.EGL_NO_SURFACE , EGL10.EGL_NO_CONTEXT ) ; mEgl.eglDestroyContext ( mEglDisplay , mEglContext ) ; mEgl.eglDestroySurface ( mEglDisplay , mEglSurface ) ; mEglContext = javax.microedition.khronos.egl.EGL10.EGL_NO_CONTEXT ; mEglSurface = javax.microedition.khronos.egl.EGL10.EGL_NO_SURFACE ; }
synchronized void nScriptSetVarI ( long id , int slot , int val ) { validate ( ) ; rsnScriptSetVarI ( mContext , id , slot , val ) ; }
private void showNoScreenshotsWarning ( com.intellij.openapi.actionSystem.AnActionEvent e ) { com.google.gct.testing.GoogleCloudTestingUtils.showBalloonMessage ( e.getData ( PlatformDataKeys.PROJECT ) , "Screenshots are not yet available for this configuration" , MessageType.WARNING , 3 ) ; }
private void filter ( ) { mScript.forEach_root ( mInPixelsAllocation , mOutPixelsAllocation ) ; mOutPixelsAllocation.ioSend ( ) ; mRS.finish ( ) ; }
private static java.lang.String getDialogMessage ( com.android.internal.location.GpsNetInitiatedHandler.GpsNiNotification notif , android.content.Context context ) { return com.android.internal.location.GpsNetInitiatedHandler.getNotifMessage ( notif , context ) ; }
private void onCallWaiting ( java.lang.String number ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CALL_WAITING ) ; event.valueString = number ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void isAvailable_nullService_shouldReturnFalse ( ) { com.google.common.truth.Truth.assertThat ( com.android.settings.wfd.WifiDisplaySettings.isAvailable ( mActivity ) ) . isFalse ( ) ; }
public static native int RSA_public_decrypt ( int flen , byte [ ] from , byte [ ] to , long pkey , int padding ) throws java.security.SignatureException , javax.crypto.BadPaddingException ;
public void testBind_Failure ( ) throws java.lang.Exception { assertNull ( channel1.socket ( ) . getLocalSocketAddress ( ) ) ; try { channel1.socket ( ) . bind ( localAddr1 ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } }
public void getAllowedCarriersResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , boolean allAllowed , android.hardware.radio.V1_0.CarrierRestrictions carriers ) { responseCarrierIdentifiers ( responseInfo , allAllowed , carriers ) ; }
public boolean isHidden ( ) { return ( ( documentationLevel ( ) ) == ( com.google.devtools.common.options.OptionsParser.DocumentationLevel.HIDDEN ) ) || ( ( documentationLevel ( ) ) == ( com.google.devtools.common.options.OptionsParser.DocumentationLevel.INTERNAL ) ) ; }
public void testIllegalLibraryVersionMerge ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application android:label=\"@string/lib_name\" />\n" ) + " <uses-sdk android:minSdkVersion=\"4\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <uses-sdk android:minSdkVersion=\"19\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlLibraryFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertFalse ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.MergingReport mergingReport = mergingReportBuilder.build ( ) ; assertEquals ( 1 , mergingReport.getLoggingRecords ( ) . size ( ) ) ; assertTrue ( ( ( mergingReport.getLoggingRecords ( ) . get ( 0 ) . getSeverity ( ) ) == ( Severity.ERROR ) ) ) ; assertTrue ( mergingReport.getLoggingRecords ( ) . get ( 0 ) . toString ( ) . contains ( "uses-sdk:minSdkVersion 4" ) ) ; }
public java.lang.Object [ ] toArray ( ) { return elements.clone ( ) ; }
public boolean hasFile ( java.lang.String name ) { if ( mNames.containsKey ( name ) ) { return true ; } return mFolder.hasFile ( name ) ; }
public abstract void installPackage ( @ com.android.annotations.NonNull java.io.File apkFile , int timeout ) throws com.android.builder.testing.api.DeviceException ;
public static float identity ( float val ) { return val ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , int value ) { return addHolder ( name , java.lang.String.valueOf ( value ) ) ; }
public static com.android.server.pm.PackageManagerException from ( com.android.server.pm.Installer.InstallerException e ) throws com.android.server.pm.PackageManagerException { throw new com.android.server.pm.PackageManagerException ( android.content.pm.PackageManager.INSTALL_FAILED_INTERNAL_ERROR , e.getMessage ( ) , e.getCause ( ) ) ; }
private static void usage ( ) { java.lang.System.err.println ( ( "Usage: signapk [-w] " + ( ( ( "[-providerClass <className>] " + "publickey.x509[.pem] privatekey.pk8 " ) + "[publickey2.x509[.pem] privatekey2.pk8 ...] " ) + "input.jar output.jar" ) ) ) ; java.lang.System.exit ( 2 ) ; }
public void onLost ( android.net.Network network ) { handleLost ( mCallbackType , network ) ; recomputeOffloadExemptPrefixes ( ) ; }
private boolean isWhitelistedPackage ( java.lang.String packageName ) { return ( packageName.startsWith ( "com.android.cts" ) ) || ( android.security.cts.PackageSignatureTest.WHITELISTED_PACKAGES.contains ( packageName ) ) ; }
protected void checkReportedError ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( issue == ( DuplicateResourceDetector.TYPE_MISMATCH ) ) { assertNotNull ( message , com.android.tools.lint.checks.DuplicateResourceDetector.getExpectedType ( message , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; } }
public void run ( ) { onWindowFocusChanged ( hasWindowFocus ) ; }
public void setMiracastMode ( int mode ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { mSupplicantP2pIfaceHal.setMiracastMode ( mode ) ; } else { doBooleanCommand ( ( "DRIVER MIRACAST " + mode ) ) ; } }
public static native byte [ ] [ ] EC_POINT_get_affine_coordinates ( org.conscrypt.NativeRef.EC_GROUP groupRef , org.conscrypt.NativeRef.EC_POINT pointRef ) ;
public void setOperationalMode ( int mode ) { if ( mVerboseLoggingEnabled ) log ( ( "setting operational mode to " + ( java.lang.String.valueOf ( mode ) ) ) ) ; sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_SET_OPERATIONAL_MODE , mode , 0 ) ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsUcharUcharUchar args ) { args.out = android.renderscript.cts.CoreMathVerifier.maxU8 ( args.inV1 , args.inV2 ) ; }
public void test_minusWeeks_overMonths ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.minusWeeks ( 9 ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 5 , 13 ) ) ; }
void viewDownloads ( android.net.Uri downloadRecord ) { android.content.Intent intent = new android.content.Intent ( this , com.android.browser.BrowserDownloadPage.class ) ; intent.setData ( downloadRecord ) ; startActivityForResult ( intent , com.android.browser.BrowserActivity.DOWNLOAD_PAGE ) ; }
public void onThemeChange ( ) { mConfigComposite.storeState ( ) ; mResourceResolver = null ; recomputeLayout ( ) ; reloadPalette ( ) ; }
public void execute ( com.android.build.gradle.model.AndroidBinary androidBinary ) { com.android.build.gradle.model.DefaultAndroidBinary binary = ( ( com.android.build.gradle.model.DefaultAndroidBinary ) ( androidBinary ) ) ; variantManager.createTasksForVariantData ( new com.android.build.gradle.model.TaskCollectionBuilderAdaptor ( tasks ) , binary.getVariantData ( ) ) ; }
void setRetry ( boolean isRetry ) ;
public static java.util.Collection < com.android.tools.perflib.heap.RootObj > getRoots ( com.android.tools.perflib.heap.Snapshot snapshot ) { java.util.HashSet < com.android.tools.perflib.heap.RootObj > result = new java.util.HashSet < com.android.tools.perflib.heap.RootObj > ( ) ; for ( com.android.tools.perflib.heap.Heap heap : snapshot.mHeaps.values ( ) ) { result.addAll ( heap.mRoots ) ; } return result ; }
public void compileExt ( ) throws java.lang.Exception { java.io.File outDexFolder = com.android.jack.TestTools.createTempDir ( "ext" , ".dex" ) ; com.android.jack.TestTools.compileSourceToDex ( new com.android.jack.Options ( ) , com.android.jack.compile.androidtree.ext.ExtCompilationTest.SOURCELIST , com.android.jack.TestTools.getClasspathAsString ( com.android.jack.compile.androidtree.ext.ExtCompilationTest.BOOTCLASSPATH ) , outDexFolder , false ) ; }
public java.util.Iterator < com.android.jack.ir.ast.cfg.JBasicBlock > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { return cfg.getAllBlocksUnordered ( ) . iterator ( ) ; }
public boolean verify ( java.lang.String key , byte [ ] data , byte [ ] signature ) { return verify ( android.security.KeyStore.getKeyBytes ( key ) , data , signature ) ; }
public void messageDoubleClicked ( com.android.ddmlib.logcat.LogCatMessage m ) { onDoubleClick ( m ) ; }
public void run ( ) { try { com.android.sched.util.file.FileUtils.deleteDir ( tmp ) ; } catch ( java.io.IOException e ) { java.lang.System.err.println ( e.getMessage ( ) ) ; } }
private java.lang.String [ ] getClientList ( int netId ) { java.lang.String p2pClients = mWifiNative.getP2pClientList ( netId ) ; if ( p2pClients == null ) { return null ; } return p2pClients.split ( " " ) ; }
public static java.util.Properties getCalendarProperties ( ) throws java.io.IOException { java.util.Properties calendarProps = new java.util.Properties ( ) ; try ( java.io.InputStream is = java.lang.ClassLoader.getSystemResourceAsStream ( "calendars.properties" ) ) { calendarProps.load ( is ) ; } return calendarProps ; }
public void setProcessorPath ( @ javax.annotation.Nonnull java.util.List < java.io.File > processorPath ) { throw new java.lang.AssertionError ( ) ; }
public void run ( ) { mLabel.setText ( label ) ; for ( com.android.ddmuilib.SysinfoPanel.BugReportParser.DataValue d : data ) { mDataset.setValue ( d.name , d.value ) ; } }
public static byte [ ] networkPortionToCalledPartyBCD ( java.lang.String s ) { java.lang.String networkPortion = android.telephony.PhoneNumberUtils.extractNetworkPortion ( s ) ; return android.telephony.PhoneNumberUtils.numberToCalledPartyBCDHelper ( networkPortion , false , android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN ) ; }
public void setDataRoamingEnabled ( boolean enable ) { mDcTracker.setDataRoamingEnabledByUser ( enable ) ; }
public boolean p2pFind ( int timeout ) { return mSupplicantP2pIfaceHal.find ( timeout ) ; }
public static java.lang.String internalPackagePrefix ( java.lang.String internalClassName ) { return internalClassName.substring ( 0 , ( ( internalClassName.lastIndexOf ( ClassConstants.PACKAGE_SEPARATOR , ( ( internalClassName.length ( ) ) - 2 ) ) ) + 1 ) ) ; }
public java.lang.String getNamespace ( ) { if ( ( ( mCurrentEvent ) != ( com.android.apksig.apk.AndroidBinXmlParser.EVENT_START_ELEMENT ) ) && ( ( mCurrentEvent ) != ( com.android.apksig.apk.AndroidBinXmlParser.EVENT_END_ELEMENT ) ) ) { return null ; } return mCurrentElementNamespace ; }
public void onCancel ( android.content.DialogInterface dialog ) { com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkDialogActivity.LOG_TAG , ( "Moving backward!, mSlotId: " + ( mSlotId ) ) ) ; cancelTimeOut ( ) ; sendResponse ( StkAppService.RES_ID_BACKWARD ) ; finish ( ) ; }
public boolean getBoolean ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException { return getBoolean ( object , isAccessible ( ) ) ; }
public static double signum ( double d ) { return java.lang.Math.signum ( d ) ; }
public static java.lang.Integer tryParse ( java.lang.String string ) { return com.google.common.primitives.Ints.tryParse ( string , 10 ) ; }
public void reportConnectionEventPropagatesFailureToLastMileLogger ( ) { final boolean verbosityToggle = false ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionEvent ( com.android.server.wifi.WifiDiagnosticsTest.FAKE_CONNECTION_ID , WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.mockito.Mockito.verify ( mLastMileLogger ) . reportConnectionEvent ( com.android.server.wifi.WifiDiagnosticsTest.FAKE_CONNECTION_ID , WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; }
private final com.google.common.collect.ImmutableSet < com.google.common.collect.Multiset.Entry < E > > createEntrySet ( ) { return isEmpty ( ) ? com.google.common.collect.ImmutableSet.< com.google.common.collect.Multiset.Entry < E > > of ( ) : new EntrySet ( ) ; }
private int getPhoneTypeFromProperty ( ) { return getPhoneTypeFromProperty ( getPhoneId ( ) ) ; }
public android.net.NetworkStats getDeviceSummaryForNetwork ( android.net.NetworkTemplate template , long start , long end ) { return internalGetSummaryForNetwork ( template , flags , start , end , mAccessLevel , mCallingUid ) ; }
public static void computeLgamma ( android.renderscript.cts.TestLgamma.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.lgamma ( args.in ) ) ; }
public long getRetryAfterDisconnectDelay ( ) { return mApnRetryAfterDisconnectDelay ; }
public void run ( ) { flingScroll ( vx , vy ) ; }
public void setProcessorNames ( @ javax.annotation.Nonnull java.util.List < java.lang.String > processorNames ) { options.processor = com.google.common.base.Joiner.on ( ',' ) . join ( processorNames ) ; }
public int getDataNetworkType ( ) { return getDataNetworkType ( getSubId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) ) ; }
native boolean createBondOutOfBandNative ( byte [ ] address , int transport , android.bluetooth.OobData oobData ) ;
private void endBlockSuppression ( ) { if ( getBlockSuppressionStatus ( ) . isSuppressed ) { writeBlockSuppressionExpiryTimePref ( 0 ) ; writeEmergencyCallNotificationPref ( false ) ; notifyBlockSuppressionStateChange ( ) ; } }
public static void computeRint ( android.renderscript.cts.TestRint.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.rint ( args.in ) , 0 , 0 ) ; }
public android.net.NetworkCapabilities [ ] getDefaultNetworkCapabilitiesForUser ( int userId ) { try { return mService.getDefaultNetworkCapabilitiesForUser ( userId ) ; } catch ( android.os.RemoteException e ) { return null ; } }
public static int $noinline$intToFloatToInt ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( float ) ( value ) ) ) ; }
public int getScaledImgSize ( ) { return ( ( int ) ( ( mImgSize ) * ( mScale ) ) ) ; }
private com.android.ide.common.rendering.api.ResourceValue parseValue ( @ com.android.annotations.NonNull com.android.ide.common.rendering.api.ResourceValue value ) { java.lang.String text = com.android.ide.common.res2.ResourceItem.getTextNode ( mValue.getChildNodes ( ) ) ; value.setValue ( com.android.ide.common.res2.ValueXmlHelper.unescapeResourceString ( text , false , true ) ) ; return value ; }
void expectCapabilitiesWithout ( int capability , com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { com.android.server.ConnectivityServiceTest.CallbackInfo cbi = expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES , agent ) ; android.net.NetworkCapabilities.NetworkCapabilities nc = ( ( android.net.NetworkCapabilities.NetworkCapabilities ) ( cbi.arg ) ) ; assertFalse ( nc.hasCapability ( capability ) ) ; }
static com.android.internal.telephony.dataconnection.ApnSetting createApnSetting ( java.lang.String [ ] apnTypes ) { return com.android.internal.telephony.dataconnection.ApnSettingTest.createApnSettingInternal ( apnTypes , true ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeParcelable ( homeSp , flags ) ; dest.writeParcelable ( credential , flags ) ; dest.writeParcelable ( policy , flags ) ; }
public static android.icu.util.UResourceBundle getBundleInstance ( android.icu.util.ULocale locale ) { if ( locale == null ) { locale = android.icu.util.ULocale.getDefault ( ) ; } return android.icu.util.UResourceBundle.getBundleInstance ( ICUData.ICU_BASE_NAME , locale.getBaseName ( ) , ICUResourceBundle.ICU_DATA_CLASS_LOADER , false ) ; }
public boolean p2pGroupAdd ( int netId ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.groupAdd ( netId , true ) ; } else { return doBooleanCommand ( ( "P2P_GROUP_ADD persistent=" + netId ) ) ; } }
private static void stackOverflowTestSub3 ( double pad1 , double pad2 , double pad3 ) { Main.stackOverflowTestSub3 ( pad1 , pad2 , pad3 ) ; }
public static com.google.gct.idea.appengine.util.PsiDirectory addIfMissingDirectory ( com.google.gct.idea.appengine.util.PsiDirectory parent , java.lang.String dirName ) { final com.google.gct.idea.appengine.util.PsiDirectory existingDir = parent.findSubdirectory ( dirName ) ; if ( existingDir != null ) { return existingDir ; } return parent.createSubdirectory ( dirName ) ; }
public com.google.common.collect.ImmutableCollection < V > values ( ) { com.google.common.collect.ImmutableCollection < V > result = values ; return result == null ? values = new com.google.common.collect.ImmutableMapValues < K , V > ( this ) : result ; }
public final android.telephony.ims.internal.feature.MmTelFeature.MmTelCapabilities queryCapabilityStatus ( ) { return new android.telephony.ims.internal.feature.MmTelFeature.MmTelCapabilities ( super . queryCapabilityStatus ( ) ) ; }
public static void computeConvert ( android.renderscript.cts.TestConvert.ArgumentsIntShort args ) { args.out = android.renderscript.cts.CoreMathVerifier.convertIntToShort ( args.inV ) ; }
public void testCookieStoreGetWithPort ( ) throws java.lang.Exception { java.net.CookieStore cookieStore = new java.net.CookieManager ( ) . getCookieStore ( ) ; java.net.HttpCookie cookie = new java.net.HttpCookie ( "theme" , "light" ) ; cookieStore.add ( new java.net.URI ( "http://a.com:12345" ) , cookie ) ; assertEquals ( 1 , cookieStore.get ( new java.net.URI ( "http://a.com:12345/path1" ) ) . size ( ) ) ; assertEquals ( 1 , cookieStore.get ( new java.net.URI ( "http://a.com/path1" ) ) . size ( ) ) ; }
public char readChar ( ) { checkType ( com.android.dex.EncodedValueReader.ENCODED_CHAR ) ; type = com.android.dex.EncodedValueReader.MUST_READ ; return ( ( char ) ( com.android.dex.EncodedValueCodec.readUnsignedInt ( in , arg , false ) ) ) ; }
private void addConnectionServiceAdapter ( com.android.internal.telecom.IConnectionServiceAdapter adapter ) { if ( isServiceValid ( "addConnectionServiceAdapter" ) ) { try { logOutgoing ( "addConnectionServiceAdapter %s" , adapter ) ; mServiceInterface.addConnectionServiceAdapter ( adapter , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException e ) { } } }
default boolean processCountryZones ( java.lang.String countryIso , java.lang.String defaultTimeZoneId , boolean everUsesUtc , java.util.List < libcore.util.CountryTimeZones.TimeZoneMapping > timeZoneMappings , java.lang.String debugInfo ) throws org.xmlpull.v1.XmlPullParserException { return libcore.util.TimeZoneFinder.TimeZonesProcessor.CONTINUE ; }
protected byte [ ] engineDigest ( ) { final byte [ ] result = new byte [ size ] ; org.conscrypt.NativeCrypto.EVP_DigestFinal ( ctx , result , 0 ) ; resetContext ( ) ; return result ; }
private void logi ( java.lang.String msg ) { android.util.Log.i ( com.android.phone.NotificationMgr.LOG_TAG , msg ) ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeByteArray ( leBluetoothDeviceAddress ) ; out.writeByteArray ( securityManagerTk ) ; out.writeByteArray ( leSecureConnectionsConfirmation ) ; out.writeByteArray ( leSecureConnectionsRandom ) ; }
public void testBridge002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( BRIDGE002 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.ANDROID_MIN_API_LEVEL.getName ( ) , java.lang.String.valueOf ( AndroidCompatibilityChecker.N_API_LEVEL ) ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . compileAndRunTest ( ) ; }
abstract void getUnchecked ( int pos , long [ ] dst , int dstOffset , int length ) ;
public void onDismiss ( android.content.DialogInterface dialog ) { super . onDismiss ( dialog ) ; if ( isAdded ( ) ) { getActivity ( ) . finish ( ) ; } }
public void test_with_TemporalField_long_invalidValue ( ) { tck.java.time.TCKLocalDate.TEST_2007_07_15.with ( java.time.temporal.ChronoField.DAY_OF_WEEK , ( - 1 ) ) ; }
private static void $opt$noinline$InplaceNegOneInt ( int a ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } a = - a ; Main.assertEquals ( ( - 1 ) , a ) ; }
public void onTargetInEditModeChanged ( @ org.jetbrains.annotations.NotNull java.lang.String value ) { for ( com.intellij.dvcs.push.RepositoryNodeListener listener : myListeners ) { listener.onTargetInEditMode ( value ) ; } }
public void onRttCallScreenUiUnready ( ) { com.android.dialer.common.LogUtil.enterBlock ( "RttCallPresenter.onRttCallScreenUiUnready" ) ; com.android.incallui.InCallPresenter.getInstance ( ) . removeListener ( this ) ; stopListenOnRemoteMessage ( ) ; }
public void removeActiveUser ( ) { synchronized ( this ) { if ( ( activeUser ) != null ) { activeUser.setActive ( false ) ; activeUser = null ; com.google.gct.login.GoogleLoginPrefs.removeActiveUser ( ) ; notifyLoginStatusChange ( ) ; } } }
public static long getLanguageLevel ( int major , int minor ) { assert major == 1 ; switch ( minor ) { case 5 : return org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_5 ; case 6 : return org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_6 ; case 8 : return org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_8 ; case 7 : default : return org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_8 ; } }
public java.lang.Boolean telephonyAdjustPreciseCallStateListenLevel ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "type" ) java.lang.String type , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "listen" ) java.lang.Boolean listen ) { return telephonyAdjustPreciseCallStateListenLevelForSubscription ( type , listen , SubscriptionManager.DEFAULT_SUBSCRIPTION_ID ) ; }
public final void addThread ( com.android.tools.perflib.heap.ThreadObj thread , int serialNumber ) { mThreads.put ( serialNumber , thread ) ; }
public void streamStateUpdated ( int state ) { onStreamStateUpdated ( state ) ; }
private static native java.lang.String canonicalizePath ( java.lang.String path ) ;
public void addImsServiceFeatureListener ( com.android.ims.internal.IImsServiceFeatureCallback callback ) { synchronized ( mLock ) { mImsStatusCallbacks.add ( callback ) ; } }
public static void startMethodTracingDdms ( int bufferSize , int flags , boolean samplingEnabled , int intervalUs ) { dalvik.system.VMDebug.startMethodTracingDdms ( bufferSize , flags , samplingEnabled , intervalUs ) ; }
static native boolean isAttached1 ( ) ;
private static native int nativeCopyNativeBinaries ( long handle , java.lang.String sharedLibraryPath , java.lang.String abiToCopy , boolean extractNativeLibs , boolean hasNativeBridge , boolean debuggable ) ;
public void addParameterAnnotations ( com.android.dx.rop.cst.CstMethodRef method , com.android.dx.rop.annotation.AnnotationsList list , com.android.dx.dex.file.DexFile dexFile ) { if ( ( parameterAnnotations ) == null ) { parameterAnnotations = new java.util.ArrayList < com.android.dx.dex.file.ParameterAnnotationStruct > ( ) ; } parameterAnnotations.add ( new com.android.dx.dex.file.ParameterAnnotationStruct ( method , list , dexFile ) ) ; }
boolean checkFreeStorage ( com.android.internal.app.IMediaContainerService imcs ) throws android.os.RemoteException { try { mContext.grantUriPermission ( com.android.server.pm.PackageManagerService.DEFAULT_CONTAINER_PACKAGE , packageURI , Intent.FLAG_GRANT_READ_URI_PERMISSION ) ; return imcs.checkExternalFreeStorage ( packageURI , isFwdLocked ( ) ) ; } finally { mContext.revokeUriPermission ( packageURI , Intent.FLAG_GRANT_READ_URI_PERMISSION ) ; } }
private void handleScanTimeout ( ) { android.util.Log.e ( com.android.server.wifi.scanner.WificondScannerImpl.TAG , "Timed out waiting for scan result from wificond" ) ; reportScanFailure ( ) ; android.util.Log.d ( com.android.server.wifi.scanner.WificondScannerImpl.TAG , "processPendingScans in request of handleScanTimeout" ) ; processPendingScans ( ) ; }
private native void doDump ( java.io.FileDescriptor fd ) ;
public com.google.common.collect.ImmutableSet < V > getValue ( ) { return com.google.common.collect.ImmutableSet.of ( backingEntry.getValue ( ) ) ; }
public java.lang.String getAppNameSpace ( ) { fail ( "Not supported in tests yet" ) ; return null ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeString ( encodedActivationCode ) ; dest.writeString ( confirmationCode ) ; dest.writeString ( carrierName ) ; dest.writeTypedList ( accessRules ) ; }
public void setPercent ( char value ) { this . percent = java.lang.String.valueOf ( value ) ; }
public void hasSchemeTesting ( ) { android.net.Uri schemeUri = android.net.Uri.parse ( "market://details?id=com.google.android.apps.plus" ) ; org.junit.Assert.assertTrue ( "HasPath didn't match" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( "market" ) . matches ( schemeUri ) ) ; org.junit.Assert.assertTrue ( "HasPath didn't match" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( org.hamcrest.CoreMatchers.equalTo ( "market" ) ) . matches ( schemeUri ) ) ; }
public void exit ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Exit Connecting: " + ( getCurrentMessage ( ) . what ) ) ) ; } removeMessages ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.CONNECTING_TIMEOUT ) ; }
public com.android.ide.common.rendering.api.ResourceValue getFrameworkResource ( com.android.resources.ResourceType resourceType , java.lang.String resourceName ) { return null ; }
public int getOtaStatus ( ) { if ( ! ( isEnabled ( ) ) ) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE ; } try { return android.telephony.euicc.EuiccManager.getIEuiccController ( ) . getOtaStatus ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public org.eclipse.ui.views.properties.IPropertyDescriptor [ ] getPropertyDescriptors ( ) { com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiView = getUiViewNode ( ) ; if ( uiView != null ) { return ( ( org.eclipse.ui.views.properties.IPropertySource ) ( uiView ) ) . getPropertyDescriptors ( ) ; } return null ; }
public void setTestVariantData ( @ com.android.annotations.NonNull com.android.build.gradle.internal.variant.TestVariantData testVariantData , @ com.android.annotations.NonNull com.android.builder.core.VariantType type ) { testVariants.put ( type , testVariantData ) ; }
public E ceiling ( E e ) { return com.google.common.collect.SortedMultisets.getElementOrNull ( multiset ( ) . tailMultiset ( e , com.google.common.collect.BoundType.CLOSED ) . firstEntry ( ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.String > run ( com.android.dialer.commandline.Arguments args ) throws com.android.dialer.commandline.impl.IllegalCommandLineArgumentException { return com.google.common.util.concurrent.Futures.immediateFuture ( android.text.TextUtils.join ( " " , args.getPositionals ( ) ) ) ; }
public void verifyParcelWithoutPolicy ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = android.net.wifi.hotspot2.PasspointConfigurationTest.createConfig ( ) ; config.setPolicy ( null ) ; android.net.wifi.hotspot2.PasspointConfigurationTest.verifyParcel ( config ) ; }
protected static boolean assertNotSame ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { return com.ibm.icu.dev.test.TestFmwk.handleAssert ( ( expected != actual ) , message , com.ibm.icu.dev.test.TestFmwk.stringFor ( expected ) , com.ibm.icu.dev.test.TestFmwk.stringFor ( actual ) , "!=" , true ) ; }
public proguard.gradle.ProGuardTask getProguard ( ) { return getVariantData ( ) . proguardTask ; }
private void reportNotSpamAndFinish ( java.lang.String number , com.android.dialer.logging.ContactLookupResult.Type contactLookupResultType ) { logCallImpression ( DialerImpression.Type.SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM ) ; com.android.dialer.spam.SpamComponent.get ( this ) . spam ( ) . reportNotSpamFromAfterCallNotification ( number , getCountryIso ( ) , CallLog.Calls.INCOMING_TYPE , ReportingLocation.Type.FEEDBACK_PROMPT , contactLookupResultType ) ; finish ( ) ; }
private static void assertValidSession ( byte [ ] data ) { org.junit.Assert.assertNotNull ( org.conscrypt.AbstractSessionContextTest.clientCtx.toSession ( data , "www.google.com" , 443 ) ) ; }
public java.io.FileDescriptor [ ] pipe2 ( int flags ) throws android.system.ErrnoException ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onDeviceChange ( true ) ; }
public boolean isVideoTelephonyAvailable ( ) { try { return getITelephony ( ) . isVideoTelephonyAvailable ( getSubId ( ) ) ; } catch ( android.os.RemoteException | java.lang.NullPointerException ex ) { return false ; } }
private boolean runCorrectnessPatterns ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s ) { boolean pass = true ; pass &= patternDuplicateAnonymousResult ( RS , s ) ; pass &= patternInterleavedReduce ( RS , s ) ; pass &= patternRedundantGet ( RS , s ) ; return pass ; }
public void replaceServer ( @ javax.annotation.Nonnull java.io.InputStream newServer , @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.lang.Object > parameters , boolean forced ) throws com.android.jack.server.api.v01.NotInstalledException , com.android.jack.server.api.v01.ServerException , java.io.IOException { this . replaceServer ( newServer , parameters , forced ) ; }
public static com.android.server.wifi.ScanResults create ( int id , com.android.server.wifi.ScanDetail ... nativeResults ) { return new com.android.server.wifi.ScanResults ( id , false , ( - 1 ) , nativeResults ) ; }
public java.lang.String toString ( ) { java.lang.String out = name ; if ( ( result ) == ( com.android.rs.test.UnitTest.TEST_PASSED ) ) { out += " - PASSED" ; } else if ( ( result ) == ( com.android.rs.test.UnitTest.TEST_FAILED ) ) { out += " - FAILED" ; } return out ; }
public void unplug ( long elapsedRealtime , long batteryUptime , long batteryRealtime ) { mUnpluggedStartTime = getStartTimeToNowLocked ( batteryUptime ) ; mUnpluggedStarts = mStarts ; mUnpluggedLaunches = mLaunches ; }
public static com.android.tools.perflib.heap.Instance findObject ( com.android.tools.perflib.heap.Snapshot snapshot , java.lang.String id ) { long id2 = java.lang.Long.parseLong ( id , 16 ) ; return snapshot.findReference ( id2 ) ; }
private void logError ( java.lang.String fmt , java.lang.Object ... args ) { final java.lang.String msg = "ERROR " + ( java.lang.String.format ( fmt , args ) ) ; android.util.Log.e ( mTag , msg ) ; mLocalLog.log ( msg ) ; }
public V get ( int index ) { return getValue ( index ) ; }
public boolean isValid ( ) { return ( templates [ com.ibm.icu.text.PluralRules.StandardPluralCategories.OTHER_INDEX ] ) != null ; }
public void testDebuggerdDomain ( ) throws java.io.FileNotFoundException { assertDomainN ( "u:r:debuggerd:s0" , "/system/bin/debuggerd" , "/system/bin/debuggerd64" ) ; }
public synchronized void shutdown ( ) { if ( ( mReceiveThread ) != null ) { log ( "shutting down" ) ; mReceiveThread.halt ( ) ; mReceiveThread = null ; } mRas.clear ( ) ; mContext.unregisterReceiver ( mDeviceIdleReceiver ) ; }
public static java.lang.String getProperty ( @ com.android.annotations.NonNull org.xmlpull.v1.XmlPullParser parser , @ com.android.annotations.NonNull java.lang.String name ) { java.lang.String value = parser.getAttributeValue ( com.android.tools.lint.detector.api.LintConstants.TOOLS_URI , name ) ; if ( ( value != null ) && ( value.isEmpty ( ) ) ) { value = null ; } return value ; }
private boolean hasTestRunnerLibrary ( com.android.sdklib.xml.ManifestData manifestData ) { for ( java.lang.String lib : manifestData.getUsesLibraries ( ) ) { if ( lib.equals ( AndroidConstants.LIBRARY_TEST_RUNNER ) ) { return true ; } } return false ; }
public native long getLong ( long address ) ;
native void rsnScriptForEachClipped ( long con , long incCon , long id , int slot , long ain , long aout , int xstart , int xend , int ystart , int yend , int zstart , int zend , boolean mUseInc ) ;
boolean isRecordingStats ( ) { return ( statsCounterSupplier ) == ( com.google.common.cache.CacheBuilder.CACHE_STATS_COUNTER ) ; }
android.content.BroadcastReceiver getBroadcastReceiver ( ) { return mReceiver ; }
protected javax.net.ssl.SSLSession wrapSSLSessionIfNeeded ( javax.net.ssl.SSLSession session ) { if ( session instanceof org.conscrypt.AbstractOpenSSLSession ) { return org.conscrypt.Platform.wrapSSLSession ( ( ( org.conscrypt.AbstractOpenSSLSession ) ( session ) ) ) ; } else { return session ; } }
public android.view.ActionProvider getActionProvider ( android.support.v7.app.AppCompatActivity activity ) { return new com.android.dialer.simulator.portal.SimulatorMainPortal ( activity ) . getActionProvider ( ) ; }
public static int $noinline$NegSub2 ( int arg1 , int arg2 ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int temp = arg1 - arg2 ; return ( - temp ) | ( - temp ) ; }
private void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , int timeoutMs , int legacyType , android.os.Handler handler ) { android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler ( handler ) ; android.net.NetworkCapabilities nc = request.networkCapabilities ; sendRequestForNetwork ( nc , networkCallback , timeoutMs , android.net.ConnectivityManager.REQUEST , legacyType , cbHandler ) ; }
public boolean getSampleEnabled ( ) { return getGlobalBoolean ( android.provider.Settings.Global.NETSTATS_SAMPLE_ENABLED , true ) ; }
void write ( com.android.dex.MethodId methodId ) { methodId.writeTo ( idsDefsOut ) ; }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , int timeoutMs ) { int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; requestNetwork ( request , networkCallback , timeoutMs , legacyType , getDefaultHandler ( ) ) ; }
private void intv ( long v ) throws java.io.IOException { long uv = v << 1 ; if ( v < 0 ) uv = ~ uv ; uintv ( uv ) ; }
public void testPerformanceSummaryGroupedNormal ( ) throws java.io.FileNotFoundException , java.io.IOException { setUp ( true ) ; java.lang.String output = com.android.vts.servlet.VtsPerformanceJobServlet.getPerformanceSummary ( "test" , dailySummaries , legendLabels ) ; com.android.vts.servlet.VtsPerformanceJobServletTest.compareToBaseline ( output , "performanceSummary4.html" ) ; }
public void applyTransportModeTransform ( java.io.FileDescriptor socket , int direction , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.dup ( socket ) ) { applyTransportModeTransform ( pfd , direction , transform ) ; } }
void setConnectionCapabilities ( java.lang.String callId , int capabilities ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.setConnectionCapabilities ( callId , capabilities , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public ScriptGroup.Closure prepInit ( android.renderscript.ScriptGroup.Builder2 b ) { return b.addInvoke ( s.getInvokeID_initialize ( ) , mInBlack , mOutBlack , mInWMinInB , mOutWMinOutB , mOverInWMinInB , mSatMatrix ) ; }
protected static boolean assertNull ( java.lang.String message , java.lang.Object actual ) { return android.icu.dev.test.TestFmwk.handleAssert ( ( actual == null ) , message , null , android.icu.dev.test.TestFmwk.stringFor ( actual ) ) ; }
public void reloadSdk ( @ com.android.annotations.NonNull com.android.utils.ILogger log ) { mCachedTargets = null ; mLocalSdk.clearLocalPkg ( PkgType.PKG_ALL ) ; }
private org.eclipse.swt.graphics.Image getImage ( java.lang.String filename ) { if ( ( mUpdaterData ) != null ) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory ( ) ; if ( imgFactory != null ) { return imgFactory.getImageByName ( filename ) ; } } return null ; }
public java.util.List < java.lang.String > getApplicableMethodNames ( ) { return java.util.Arrays.asList ( com.android.tools.lint.checks.CleanupDetector.BEGIN_TRANSACTION , com.android.tools.lint.checks.CleanupDetector.OBTAIN , com.android.tools.lint.checks.CleanupDetector.OBTAIN_NO_HISTORY , com.android.tools.lint.checks.CleanupDetector.OBTAIN_STYLED_ATTRIBUTES , com.android.tools.lint.checks.CleanupDetector.OBTAIN_ATTRIBUTES , com.android.tools.lint.checks.CleanupDetector.OBTAIN_TYPED_ARRAY ) ; }
public com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface ( ) throws android.os.RemoteException { return mCompatFeature.getMultiEndpointInterface ( ) ; }
public com.android.ide.common.api.Rect set ( com.android.ide.common.api.Rect r ) { set ( r.x , r.y , r.w , r.h ) ; return this ; }
public libcore.tzdata.update2.tools.TimeZoneDistroBuilder setIcuDataFile ( byte [ ] icuData ) { this . icuData = icuData ; return this ; }
public java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > getSuccessors ( ) { return hasPrimarySuccessor ( ) ? java.util.Collections.singletonList ( primarySuccessor ) : java.util.Collections.< com.android.jack.ir.ast.cfg.JBasicBlock > emptyList ( ) ; }
public java.util.List < android.net.wifi.hotspot2.PasspointConfiguration > getPasspointConfigurations ( ) { enforceAccessPermission ( ) ; mLog.trace ( "getPasspointConfigurations uid=%" ) . c ( android.os.Binder.getCallingUid ( ) ) . flush ( ) ; return mPasspointManager.getProviderConfigs ( ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { onDeviceSelection ( ) ; }
public boolean isMultiDexEnabled ( ) { java.lang.Boolean value = mBuildType.getMultiDexEnabled ( ) ; if ( value != null ) { return value ; } value = mMergedFlavor.getMultiDexEnabled ( ) ; if ( value != null ) { return value ; } return false ; }
public void onViewCreated ( android.view.View view , android.os.Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; view.setOnKeyListener ( this ) ; view.setFocusableInTouchMode ( true ) ; view.requestFocus ( ) ; }
public void updateMatchCount ( int matchIndex , int matchCount , boolean isEmptyFind ) { if ( ! isEmptyFind ) { mNumberOfMatches = matchCount ; mActiveMatchIndex = matchIndex ; updateMatchesString ( ) ; } else { mMatches.setVisibility ( View.GONE ) ; mNumberOfMatches = 0 ; } }
public void setupDataCallResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SetupDataCallResult setupDataCallResult ) { responseSetupDataCall ( responseInfo , setupDataCallResult ) ; }
public void deleteFromCache ( ) { ( ( com.android.sched.vfs.InMemoryVDir ) ( parent ) ) . internalDelete ( name ) ; }
protected void removeFile ( com.android.ide.common.resources.ResourceFile file , com.android.ide.common.resources.ScanningContext context ) { file.dispose ( context ) ; mFiles.remove ( file ) ; mNames.remove ( file.getFile ( ) . getName ( ) ) ; }
public void sendTree ( org.eclipse.jdt.internal.junit.runner.IVisitsTestTrees notified ) { notified.visitTreeEntry ( getIdentifier ( ) , true , countTestCases ( ) ) ; for ( com.android.ide.eclipse.adt.internal.launch.junit.runtime.AndroidTestReference ref : mTests ) { ref.sendTree ( notified ) ; } }
public java.lang.Iterable < com.android.jack.ir.ast.JSsaVariableRef > getRhs ( ) { return rhs.values ( ) ; }
public java.util.Set < K > keySet ( ) { java.util.Set < K > ks = keySet ; return ks != null ? ks : ( keySet = new KeySet ( this ) ) ; }
public void actionPerformed ( com.google.gct.login.ui.AnActionEvent e ) { showPopup ( e ) ; }
public void setSourceInfos ( @ javax.annotation.Nonnull com.android.jack.jayce.v0003.nodes.NSourceInfo sourceInfo ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private native < A extends java.lang.annotation.Annotation > A getAnnotationNative ( java.lang.Class < A > annotationType ) ;
public final native void autoPause ( ) ;
public android.icu.impl.UResource.ArraySink getOrCreateArraySink ( android.icu.impl.UResource.Key key ) { return null ; }
public java.net.URLStreamHandler createURLStreamHandler ( java.lang.String protocol ) { if ( "jar" . equals ( protocol ) ) { return new sun.net.www.protocol.jar.Handler ( ) ; } fail ( ( "Should be JarHandler. But " + protocol ) ) ; return null ; }
public static void addEntryToClasspath ( org.eclipse.jdt.core.IJavaProject javaProject , org.eclipse.jdt.core.IClasspathEntry newEntry ) throws org.eclipse.jdt.core.JavaModelException { org.eclipse.jdt.core.IClasspathEntry [ ] entries = javaProject.getRawClasspath ( ) ; entries = com.android.ide.eclipse.adt.internal.project.ProjectHelper.addEntryToClasspath ( entries , newEntry ) ; javaProject.setRawClasspath ( entries , new org.eclipse.core.runtime.NullProgressMonitor ( ) ) ; }
public boolean hasNext ( ) { return e.hasMoreElements ( ) ; }
com.android.sched.vfs.VPath getPathFromRoot ( @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file ) { return vfs.getPathFromRoot ( file.getWrappedFile ( ) ) ; }
public void setProcessorNames ( @ javax.annotation.Nonnull java.util.List < java.lang.String > processorNames ) { options.addProperty ( Options.ANNOTATION_PROCESSOR_MANUAL.getName ( ) , "true" ) ; options.addProperty ( Options.ANNOTATION_PROCESSOR_MANUAL_LIST.getName ( ) , Options.ANNOTATION_PROCESSOR_MANUAL_LIST.getCodec ( ) . formatValue ( processorNames ) ) ; }
private static java.lang.String host ( java.net.URL url ) { if ( url == null ) { return null ; } return url.getHost ( ) ; }
public int getEapMethod ( ) { java.lang.String eapMethod = mFields.get ( android.net.wifi.WifiEnterpriseConfig.EAP_KEY ) ; return getStringIndex ( android.net.wifi.WifiEnterpriseConfig.Eap.strings , eapMethod , android.net.wifi.WifiEnterpriseConfig.Eap.NONE ) ; }
public static void wtf ( java.lang.Object objectPrefix , java.lang.Throwable tr , java.lang.String format , java.lang.Object ... args ) { android.util.Slog.wtf ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) , tr ) ; }
public java.util.List < byte [ ] > getStatusResponses ( ) { if ( ( peerCertificateOcspData ) == null ) { return java.util.Collections.< byte [ ] > emptyList ( ) ; } return java.util.Collections.singletonList ( peerCertificateOcspData.clone ( ) ) ; }
public java.util.List < java.io.File > getFiles ( ) { return mFiles ; }
public void testGetAMPMString ( ) { if ( ! ( android.text.format.cts.LocaleUtils.isCurrentLocale ( mContext , java.util.Locale.US ) ) ) { return ; } assertEquals ( "am" , android.text.format.DateUtils.getAMPMString ( java.util.Calendar.AM ) ) ; assertEquals ( "pm" , android.text.format.DateUtils.getAMPMString ( java.util.Calendar.PM ) ) ; }
public com.android.server.wifi.aware.WifiAwareDiscoverySessionState getSession ( int sessionId ) { return mSessions.get ( sessionId ) ; }
public boolean shouldShow ( ) { return ( ( com.android.dialer.buildtype.BuildType.get ( ) ) == ( com.android.dialer.buildtype.BuildType.Type.BUGFOOD ) ) || ( com.android.dialer.common.LogUtil.isDebugEnabled ( ) ) ; }
public final java.nio.ByteBuffer order ( java.nio.ByteOrder byteOrder ) { if ( byteOrder == null ) { byteOrder = java.nio.ByteOrder.LITTLE_ENDIAN ; } order = byteOrder ; return this ; }
private static native void enableClassLoadPreparePrintEvents ( boolean b ) ;
public long maxSize ( ) { return delegate.maxSize ( ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JArrayLength expr ) { performCommonChecks ( expr ) ; otherOrMe ( expr ) ; }
private java.lang.String toZoneOffsetStr ( java.lang.String expected ) { return expected.replaceAll ( "GMT(?:\\+00:00)|UTC|UT" , "Z" ) . replaceAll ( "(?:GMT|UTC)([+\\-]?[0-9]{2}:[0-9]{2})" , "$1" ) ; }
public void onInterfaceAddressChangeNotification ( byte [ ] mac ) { android.os.Message msg = mSm.obtainMessage ( com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_TYPE_NOTIFICATION ) ; msg.arg1 = com.android.server.wifi.aware.WifiAwareStateManager.NOTIFICATION_TYPE_INTERFACE_CHANGE ; msg.obj = mac ; mSm.sendMessage ( msg ) ; }
public void setEnabled ( boolean isEnabled ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.CONNECTIVITY_INTERNAL , "NsdService" ) ; mNsdSettings.putEnabledStatus ( isEnabled ) ; notifyEnabled ( isEnabled ) ; }
public static java.lang.Iterable < java.lang.Class < ? extends com.android.rs.unittest.UnitTest > > getProperSubclasses ( android.content.Context ctx ) throws java.io.IOException , java.lang.ClassNotFoundException { return com.android.rs.unittest.UnitTest.getProperSubclasses ( com.android.rs.unittest.UnitTest.class , ctx ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mAdapter = android.nfc.NfcAdapter.getDefaultAdapter ( this ) ; mCardEmulation = android.nfc.cardemulation.CardEmulation.getInstance ( mAdapter ) ; android.content.IntentFilter filter = new android.content.IntentFilter ( HceUtils.ACTION_APDU_SEQUENCE_COMPLETE ) ; registerReceiver ( mReceiver , filter ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , boolean value ) { return addHolder ( name , java.lang.String.valueOf ( value ) ) ; }
public static final java.io.File getTestRootDir ( @ javax.annotation.Nonnull java.lang.String packageName ) { return new java.io.File ( com.android.jack.test.toolchain.AbstractTestTools.getTestsRootDir ( ) , packageName.replace ( '.' , java.io.File.separatorChar ) ) ; }
protected com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface ( @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JTypeLookupException { for ( com.android.jack.load.PackageLoader loader : loaders ) { try { return loader.loadClassOrInterface ( this , simpleName ) ; } catch ( com.android.jack.lookup.JLookupException e ) { } } throw new com.android.jack.ir.ast.MissingJTypeLookupException ( this , simpleName ) ; }
com.google.common.collect.ImmutableMap < K , com.google.common.collect.ImmutableSet < V > > map ( ) { return this ; }
public void testEnableUsage ( ) { mDut.enableUsage ( ) ; org.mockito.Mockito.verify ( mAwareStateManagerMock ) . enableUsage ( ) ; }
public void setApiLevel ( int apiLevel ) { this . opcodes = org.jf.dexlib2.Opcodes.forApi ( apiLevel ) ; this . apiLevel = apiLevel ; }
public void setObfuscationMappingOutputFile ( @ javax.annotation.Nonnull java.io.File obfuscationMappingOutputFile ) { options.addProperty ( MappingPrinter.MAPPING_OUTPUT_ENABLED.getName ( ) , "true" ) ; options.addProperty ( MappingPrinter.MAPPING_OUTPUT_FILE.getName ( ) , com.android.jack.api.v04.impl.Api04ConfigImpl.manageFileCharset ( obfuscationMappingOutputFile ) . getPath ( ) ) ; }
public org.objectweb.asm.tree.AbstractInsnNode clone ( final java.util.Map < org.objectweb.asm.tree.LabelNode , org.objectweb.asm.tree.LabelNode > labels ) { return new org.objectweb.asm.tree.MethodInsnNode ( opcode , owner , name , desc , itf ) ; }
public static void lowLevelShutdown ( java.lang.String reason ) { if ( reason == null ) { reason = "" ; } android.os.SystemProperties.set ( "sys.powerctl" , ( "shutdown," + reason ) ) ; }
public void freeCache ( java.lang.String uuid , long freeStorageSize ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.freeCache ( uuid , freeStorageSize ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void replaceWith ( com.android.ide.common.layoutlib.ResourceValue value ) { super . replaceWith ( value ) ; if ( value instanceof com.android.ide.common.layoutlib.StyleResourceValue ) { mItems.clear ( ) ; mItems.putAll ( ( ( com.android.ide.common.layoutlib.StyleResourceValue ) ( value ) ) . mItems ) ; } }
public static < T > org.hamcrest.org.hamcrest.Matcher < T > any ( java.lang.Class < T > type ) { return org.hamcrest.core.IsInstanceOf.< T > any ( type ) ; }
public void compileExt ( ) throws java.lang.Exception { com.android.jack.test.toolchain.AndroidToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.AndroidToolchain.class ) ; toolchain.addToClasspath ( com.android.jack.compile.androidtree.ext.ExtCompilationTest.CLASSPATH ) . srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false , com.android.jack.compile.androidtree.ext.ExtCompilationTest.SOURCELIST ) ; }
public void visitTypeInsn ( int opcode , java.lang.String type ) { printer.visitTypeInsn ( opcode , type ) ; printTypeOfOperandStack ( ) ; super . visitTypeInsn ( opcode , type ) ; }
public void removeRegistrationListener ( com.android.ims.internal.IImsRegistrationListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; getServiceInterface ( mBinder ) . removeRegistrationListener ( mSlotId , mSupportedFeature , listener ) ; } }
public void testExtractDecodeEditEncodeMuxAudioVideo ( ) throws java.lang.Throwable { if ( ! ( setSize ( 1280 , 720 ) ) ) return ; setSource ( R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz ) ; setCopyAudio ( ) ; setCopyVideo ( ) ; android.media.cts.ExtractDecodeEditEncodeMuxTest.TestWrapper.runTest ( this ) ; }
private static native java.lang.String getDisplayLanguageNative ( java.lang.String targetLanguageTag , java.lang.String languageTag ) ;
public void addData ( java.lang.String label , com.android.vts.entity.ProfilingPointRunEntity profilingPoint ) { com.android.vts.util.StatSummary stat = new com.android.vts.util.StatSummary ( label , VtsReportMessage.VtsProfilingRegressionMode.UNKNOWN_REGRESSION_MODE ) ; for ( long value : profilingPoint.values ) { stat.updateStats ( value ) ; } addSeriesData ( label , "" , stat ) ; }
public void testUserPrefOffUserE ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_EXTERNAL ; int iloc = android.content.pm.PackageInfo.INSTALL_LOCATION_UNSPECIFIED ; setUserX ( false , userSetting , iloc ) ; }
private synchronized int getNextMergerIdx ( int oldMergerIdx , int typeIdx ) { if ( ( currentMergerIdx ) > oldMergerIdx ) { return getCurrentMergerIdx ( ) ; } ( currentMergerIdx ) ++ ; mergers.add ( getNewJackMerger ( typeIdx ) ) ; return getCurrentMergerIdx ( ) ; }
public void setContentProvider ( com.android.sdkuilib.internal.repository.core.PkgContentProvider pkgContentProvider ) { mTreeViewer.setContentProvider ( pkgContentProvider ) ; }
private boolean isContactShareable ( ) { return ( ( mContactData ) != null ) && ( ! ( mContactData.isDirectoryEntry ( ) ) ) ; }
public static void setUp ( ) { tck.java.time.TCKYearMonth.TEST_2008_06 = java.time.YearMonth.of ( 2008 , 6 ) ; }
public void supplyPin ( java.lang.String pin , android.os.Message onComplete ) { synchronized ( mLock ) { mCi.supplyIccPinForApp ( pin , mAid , mHandler.obtainMessage ( com.android.internal.telephony.uicc.UiccCardApplication.EVENT_PIN1_PUK1_DONE , onComplete ) ) ; } }
public static java.net.InetAddress [ ] getAllByNameOnNet ( java.lang.String host , int netId ) throws java.net.UnknownHostException { return java.net.InetAddress.impl.lookupAllHostAddr ( host , netId ) . clone ( ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( mSignalStrength , mBitErrorRate , mTimingAdvance ) ; }
public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder forExpermimentalPlugin ( boolean mode ) { this . useExperimentalGradleVersion = mode ; this . experimentalMode = mode ; return this ; }
public void setDtmfText ( java.lang.String text ) { mDtmfDialerField.setText ( android.telephony.PhoneNumberUtils.createTtsSpannable ( text ) ) ; }
public double expectedFpp ( ) { return java.lang.Math.pow ( ( ( ( double ) ( bits.bitCount ( ) ) ) / ( bitSize ( ) ) ) , numHashFunctions ) ; }
public static java.io.File getJackTestFolder ( @ javax.annotation.Nonnull java.lang.String testName ) { return new java.io.File ( com.android.jack.test.TestsProperties.getJackRootDir ( ) , ( ( ( com.android.jack.TestTools.JACK_TESTS_PATH ) + ( com.android.jack.TestTools.JACK_PACKAGE ) ) + testName ) ) ; }
synchronized void nScriptInvoke ( long id , int slot , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptInvoke ( curCon , id , slot , mUseInc ) ; }
public int runJUnit ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.Nonnull java.lang.String jUnitRunnerName , @ javax.annotation.Nonnull java.lang.String [ ] jUnitTestClasses , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) throws com.android.jack.test.runner.RuntimeRunnerException { return runOnHost ( buildCommandLine ( options , jUnitRunnerName , jUnitTestClasses , classpathFiles ) , "ANDROID_HOST_OUT" ) ; }
public libcore.tzdata.testing.ZoneInfoTestHelper.TzDataBuilder setZoneTabOffsetOverride ( int zoneTabOffset ) { this . zoneTabOffsetOverride = zoneTabOffset ; return this ; }
public void onReceiveUssdResponse ( final android.telephony.TelephonyManager telephonyManager , java.lang.String request , java.lang.CharSequence response ) { }
public void traverse ( @ javax.annotation.Nonnull com.android.sched.scheduler.ScheduleInstance < ? super com.android.sched.item.Component > schedule ) throws java.lang.Exception { schedule.process ( this ) ; for ( com.android.jack.ir.ast.JAnnotation annotation : annotations ) { annotation.traverse ( schedule ) ; } }
public java.lang.String toString ( ) { return android.net.MacAddress.stringAddrFromLongAddr ( mAddr ) ; }
boolean isVisible ( ) { return ( ( u2accessFlags ) & ( ClassConstants.ACC_PUBLIC ) ) != 0 ; }
protected org.eclipse.core.runtime.IStatus run ( org.eclipse.core.runtime.IProgressMonitor monitor ) { try { if ( project.isAccessible ( ) ) { project.deleteMarkers ( markerType , true , IResource.DEPTH_INFINITE ) ; } } catch ( org.eclipse.core.runtime.CoreException e2 ) { return e2.getStatus ( ) ; } return org.eclipse.core.runtime.Status.OK_STATUS ; }
com.android.build.gradle.model.AndroidProjectTest.ProductFlavorTester setTestApplicationId ( java.lang.String testApplicationId ) { this . testApplicationId = testApplicationId ; return this ; }
public com.android.jack.test.toolchain.JackCliToolchain setVerbose ( boolean isVerbose ) { super . setVerbose ( isVerbose ) ; verbosityLevel = ( isVerbose ) ? com.android.jack.Options.VerbosityLevel.DEBUG : com.android.jack.Options.VerbosityLevel.WARNING ; return this ; }
public void onPlaybackStateChanged ( android.media.session.PlaybackState state ) { android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "MediaController playback changed: " + ( state.toString ( ) ) ) ) ; updatePlaybackState ( state ) ; }
public static native boolean isInInterpreter ( java.lang.String methodName ) ;
public static void loop9 ( ) { java.lang.System.out.println ( "Enter" ) ; while ( ( java.lang.Runtime.getRuntime ( ) ) != null ) { boolean incoming = Main.field ; while ( incoming ) { } } }
public java.lang.String toString ( ) { java.lang.String out = name ; if ( ( result ) == ( com.android.rs.test.UnitTest.TEST_PASSED ) ) { out += " - PASSED" ; } else if ( ( result ) == ( com.android.rs.test.UnitTest.TEST_FAILED ) ) { out += " - FAILED" ; } return out ; }
java.io.File getSrcFile ( ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { loadSkin ( ) ; }
private java.util.List < java.util.logging.LogManager.LoggerContext > contexts ( ) { java.util.List < java.util.logging.LogManager.LoggerContext > cxs = new java.util.ArrayList < > ( ) ; cxs.add ( getSystemContext ( ) ) ; cxs.add ( getUserContext ( ) ) ; return cxs ; }
public void addNetwork ( @ com.android.annotations.NonNull com.android.sdklib.devices.Network n ) { mNetworking.add ( n ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { exitGuest ( ) ; }
public void testMultiProjectIgnoreLibraries ( ) throws java.lang.Exception { assertEquals ( "No warnings." , lintProject ( "multiproject/main-manifest.xml=>AndroidManifest.xml" , "multiproject/main.properties=>project.properties" , "multiproject/MainCode.java.txt=>src/foo/main/MainCode.java" , "multiproject/library-manifest.xml=>../LibraryProject/AndroidManifest.xml" , "multiproject/library.properties=>../LibraryProject/project.properties" , "multiproject/LibraryCode.java.txt=>../LibraryProject/src/foo/library/LibraryCode.java" , "multiproject/strings.xml=>../LibraryProject/res/values/strings.xml" ) ) ; }
public static java.net.InetAddress getByName ( java.lang.String host ) throws java.net.UnknownHostException { return java.net.InetAddress.impl.lookupAllHostAddr ( host , java.net.InetAddress.NETID_UNSET ) [ 0 ] ; }
public libcore.tzdata.update2.tools.TimeZoneBundleBuilder replaceFormatVersionForTests ( int majorVersion , int minorVersion ) { try { bundleVersion = new libcore.tzdata.update2.BundleVersion ( majorVersion , minorVersion , bundleVersion.rulesVersion , bundleVersion.revision ) ; } catch ( libcore.tzdata.update2.BundleException e ) { throw new java.lang.IllegalArgumentException ( ) ; } return this ; }
public void callSessionMergeStarted ( com.android.ims.internal.IImsCallSession newSession , android.telephony.ims.ImsCallProfile profile ) { android.util.Log.d ( android.telephony.ims.ImsCallSession.TAG , "callSessionMergeStarted" ) ; }
void checkChainPinning ( java.lang.String hostname , java.util.List < java.security.cert.X509Certificate > chain ) throws java.security.cert.CertificateException ;
public com.google.common.primitives.UnsignedLong plus ( com.google.common.primitives.UnsignedLong val ) { return com.google.common.primitives.UnsignedLong.fromLongBits ( ( ( this . value ) + ( com.google.common.base.Preconditions.checkNotNull ( val ) . value ) ) ) ; }
public static int $noinline$intToDoubleToInt ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
static < V > V valueOrNull ( @ javax.annotation.Nullable java.util.Map.Entry < ? , V > entry ) { return entry == null ? null : entry.getValue ( ) ; }
private void emitUnsignedLeb128 ( int n ) throws java.io.IOException { if ( n < 0 ) { throw new java.lang.RuntimeException ( ( "Signed value where unsigned required: " + n ) ) ; } output.writeUnsignedLeb128 ( n ) ; }
public void run ( ) { director.initDebugBridge ( ) ; director.startListenForDevices ( ) ; director.populateDeviceSelectionModel ( ) ; }
protected void setProgressBarVisible ( boolean visible ) { if ( ( mProgressHeader ) != null ) { mProgressHeader.setVisibility ( ( visible && ( ! ( isUiRestricted ( ) ) ) ? android.view.View.VISIBLE : android.view.View.GONE ) ) ; } }
public static void computePow ( android.renderscript.cts.TestPow.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.pow ( args.inX , args.inY ) , 16 , 128 ) ; }
public boolean enqueue ( ) { return ( ( queue ) != null ) && ( queue.enqueue ( this ) ) ; }
private void addServerMode ( @ javax.annotation.Nonnegative int delay , @ javax.annotation.Nonnull com.android.jack.server.ServerMode newMode ) { if ( delay == ( ConfigFile.TIME_DISABLED_VALUE ) ) { return ; } delayedModes.add ( new com.android.jack.server.JackHttpServer.TimedServerMode ( ( delay * 1000L ) , newMode ) ) ; }
private final native boolean [ ] readBoolVectorAsArray ( ) ;
public boolean addOrUpdatePasspointConfiguration ( android.net.wifi.hotspot2.PasspointConfiguration config ) { enforceChangePermission ( ) ; return mPasspointManager.addOrUpdateProvider ( config ) ; }
public static com.google.gct.testing.CloudTestConfigurationImpl getSelectedGoogleCloudTestingConfiguration ( java.lang.String testRunId ) { return com.google.gct.testing.CloudTestConfigurationProviderImpl.testRunIdToCloudConfiguration.get ( testRunId ) ; }
public boolean setRadioPower ( boolean turnOn ) { final com.android.internal.telephony.Phone defaultPhone = com.android.internal.telephony.PhoneFactory.getDefaultPhone ( ) ; if ( defaultPhone != null ) { defaultPhone.setRadioPower ( turnOn ) ; return true ; } else { com.android.phone.PhoneInterfaceManager.loge ( "There's no default phone." ) ; return false ; } }
protected static java.lang.String spOptionsToString ( int option ) { return android.icu.dev.test.bidi.BidiFmwk.optionToString ( option , android.icu.dev.test.bidi.BidiFmwk.SETPARA_MASK , android.icu.dev.test.bidi.BidiFmwk.setParaDescriptions ) ; }
public void onChange ( boolean selfChange ) { updateSettings ( ) ; try { mWindowManager.setRotation ( com.android.internal.policy.impl.USE_LAST_ROTATION , false , mFancyRotationAnimation ) ; } catch ( android.os.RemoteException e ) { } }
public boolean matchesObject ( final java.lang.Object o ) { assertEquals ( message.getMessageText ( ) , ( ( com.android.messaging.datamodel.data.MessageData ) ( o ) ) . getMessageText ( ) ) ; return true ; }
public java.lang.String getMessage ( ) { return "Library writing phase: " + ( getCause ( ) . getMessage ( ) ) ; }
public static boolean getDebuggable ( com.android.io.IAbstractFile manifestFile ) throws com.android.io.StreamException , javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.sdklib.xml.AndroidXPathFactory.newXPath ( ) ; java.lang.String value = xPath.evaluate ( ( ( ( ( ( ( ( "/" + ( com.android.sdklib.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.sdklib.xml.AndroidManifest.NODE_APPLICATION ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.sdklib.xml.AndroidManifest.ATTRIBUTE_DEBUGGABLE ) ) , new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) ) ; return java.lang.Boolean.parseBoolean ( value ) ; }
public void testParsedResourcesByCount ( ) throws java.lang.Exception { java.util.List < com.android.ide.common.res2.ResourceItem > resources = com.android.ide.common.res2.ValueResourceParser2Test.getParsedResources ( ) ; assertEquals ( 19 , resources.size ( ) ) ; }
public void visitAnnotation ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.Annotation annotation ) { annotation.referencedClasses = findReferencedClasses ( clazz.getName ( ) , annotation.getType ( clazz ) ) ; annotation.elementValuesAccept ( clazz , this ) ; }
java.util.jar.JarFile getSharedJarFile ( ) throws java.io.IOException { synchronized ( this ) { if ( ( jarFile ) == null ) { jarFile = new java.util.jar.JarFile ( strictJarFile.getName ( ) ) ; } } return jarFile ; }
public void run ( com.android.jack.ir.ast.JMethodBodyCfg body ) { new com.android.jack.util.graph.DominanceFrontier ( body.getCfg ( ) ) . run ( ) ; }
public static int directIntrinsic ( int x ) { int abs1 = java.lang.Math.abs ( x ) ; int abs2 = java.lang.Math.abs ( x ) ; return abs1 + abs2 ; }
public java.lang.String getIccId ( ) { if ( ( mIccId ) != null ) { return mIccId ; } else if ( ( mUiccCard ) != null ) { return mUiccCard.getIccId ( ) ; } else { return null ; } }
private void startDelayedRebindToService ( ) { if ( ! ( mHandler.hasCallbacks ( mRestartImsServiceRunnable ) ) ) { mHandler.postDelayed ( mRestartImsServiceRunnable , mRebindRetry.getRetryTimeout ( ) ) ; } }
public com.android.sched.util.print.DataView getDataView ( ) { return com.android.sched.util.log.stats.Alloc.DATA_VIEW ; }
public void testSerializationGolden ( ) throws java.lang.Exception { org.apache.harmony.testframework.serialization.SerializationTest.verifyGolden ( this , getSerializationData ( ) , new org.apache.harmony.tests.javax.security.auth.callback.PasswordCallbackTest.PasswordCallbackAssert ( ) ) ; }
public java.lang.String [ ] getForbiddenPlmns ( ) { return getForbiddenPlmns ( getSubId ( ) , android.telephony.TelephonyManager.APPTYPE_USIM ) ; }
public java.lang.StringBuffer format ( long number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition ) { android.icu.impl.number.FormatQuantity4 fq = new android.icu.impl.number.FormatQuantity4 ( number ) ; formatter.format ( fq , result , fieldPosition ) ; fq.populateUFieldPosition ( fieldPosition ) ; return result ; }
public void setVideoQuality ( int quality , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { }
com.android.ide.eclipse.adt.editors.layout.gscripts.DropFeedback onDropEnter ( com.android.ide.eclipse.adt.editors.layout.gscripts.INode targetNode , com.android.ide.eclipse.adt.editors.layout.gscripts.IDragElement [ ] elements ) ;
public char getPercent ( ) { if ( ( percent.length ( ) ) == 1 ) { return percent.charAt ( 0 ) ; } return '%' ; }
public int doFinal ( byte [ ] out , int outOff ) throws java.lang.IllegalStateException , javax.crypto.BadPaddingException { try { return cipher.doFinal ( out , outOff ) ; } catch ( org.bouncycastle.crypto.InvalidCipherTextException e ) { throw new javax.crypto.BadPaddingException ( e.getMessage ( ) ) ; } }
protected void onQuitting ( ) { mService.cleanupDevice ( mCurrentDevice ) ; }
public void test_F32_3_SCALE10_10_inSqure ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.FLOAT_32 , 3 , 1.0F , 1.0F ) ; checkError ( ) ; }
public void testVFE1 ( ) { load ( "dot.junit.opcodes.sput_byte.d.T_sput_byte_3" , java.lang.VerifyError.class ) ; }
public void testDeserializeWasObject ( ) throws java.lang.Exception { final java.lang.String s = "aced00057372002b6c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + "e54657374245761734f626a656374000000000000000002000149000169787000000000" ; assertFalse ( libcore.java.io.SerializationTest.wasObjectInitializedFlag ) ; try { libcore.libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertFalse ( libcore.java.io.SerializationTest.wasObjectInitializedFlag ) ; }
public com.android.jack.library.OutputJackLibrary checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.vfs.VFS vfs = codec.checkString ( context , string ) ; return com.android.jack.library.JackLibraryFactory.getOutputLibrary ( vfs , com.android.jack.Jack.getEmitterId ( ) , com.android.jack.Jack.getVersion ( ) . getVerboseVersion ( ) ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , float value ) { return addHolder ( name , java.lang.String.valueOf ( value ) ) ; }
private void serializeNetworkList ( org.xmlpull.v1.XmlSerializer out , java.util.List < android.net.wifi.WifiConfiguration > networkList ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { if ( networkList == null ) { return ; } for ( android.net.wifi.WifiConfiguration network : networkList ) { serializeNetwork ( out , network ) ; } }
public void scheduleAtFixedRate ( java.util.TimerTask task , java.util.Date when , long period ) { validateScheduling ( task , when , 1 , period ) ; doSchedule ( task , when.getTime ( ) , period , true ) ; }
public void checkValidity ( ) { if ( ! ( ( parent ) instanceof com.android.jack.ir.ast.JAnnotation ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
public java.lang.Integer wifiNanAttach ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "nanConfig" ) org.json.JSONObject nanConfig ) throws android.os.RemoteException , org.json.JSONException { synchronized ( mLock ) { int sessionId = getNextSessionId ( ) ; mMgr.attach ( null , com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.getConfigRequest ( nanConfig ) , new com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.NanEventCallbackPostsEvents ( sessionId ) ) ; return sessionId ; } }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.setEncapType ( android.net.IpSecTransform.ENCAP_ESPINUDP ) ; mConfig.setEncapSocketResourceId ( localSocket.getResourceId ( ) ) ; mConfig.setEncapRemotePort ( remotePort ) ; return this ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranchBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; branch_ = value ; onChanged ( ) ; return this ; }
public void onAttached ( android.net.wifi.nan.WifiNanSession session ) { }
public void close ( ) throws com.android.sched.util.file.CannotCloseException ;
public java.lang.String getAuthTokenLabel ( java.lang.String s ) { if ( com.android.bluetooth.pbapclient.Authenticator.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; return null ; }
static void setExecutablePermission ( java.io.File file ) throws java.io.IOException { java.lang.Runtime.getRuntime ( ) . exec ( new java.lang.String [ ] { "chmod" , "+x" , file.getAbsolutePath ( ) } ) ; }
public android.telephony.CellLocation getCellLocation ( android.os.WorkSource workSource ) { return null ; }
protected java.lang.String getConfigurableDisplayName ( ) { return gsutilConfigurable.getDisplayName ( ) ; }
public static java.lang.String getPreferencesPath ( ) { return com.google.gct.login.GoogleLoginPrefs.PREFERENCES_PATH ; }
public static java.lang.String toOctalString ( int i ) { return java.lang.Integer.toUnsignedString0 ( i , 3 ) ; }
public void prependParam ( com.android.jack.ir.ast.JParameter parameter ) { params.add ( 0 , parameter ) ; hasPolymorphicSignature = com.android.jack.util.TriStateBoolean.UNDEFINED ; }
private java.lang.CharSequence getNewUserTosTitle ( ) { return isVvm3 ( ) ? context.getString ( R.string.verizon_terms_and_conditions_title ) : context.getString ( R.string.dialer_terms_and_conditions_title ) ; }
public proguard.evaluation.value.FloatValue floatValue ( ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( "Value \"" + ( this . toString ( ) ) ) + "\" is not a float value [" ) + ( this . getClass ( ) . getName ( ) ) ) + "]" ) ) ; }
public void setCamera ( java.lang.String cameraId ) { try { android.telecom.Log.w ( this , "setCamera: cameraId=%s, calling=%s" , cameraId , mCallingPackageName ) ; mVideoProvider.setCamera ( cameraId , mCallingPackageName ) ; } catch ( android.os.RemoteException e ) { } }
int copyIntoArray ( java.lang.Object [ ] dst , int dstOff ) { java.lang.System.arraycopy ( array , offset , dst , dstOff , size ) ; return dstOff + ( size ) ; }
public void testEncode_doesNotWrap ( ) throws java.lang.Exception { int [ ] data = new int [ 61 ] ; java.util.Arrays.fill ( data , 255 ) ; java.lang.String expected = "///////////////////////////////////////////////////////////////////////" + "//////////w==" ; libcore.io.Base64Test.assertEncodeDecode ( expected , data ) ; }
protected void unregisterForRuimRecordEvents ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.unregisterForRecordsEvents ( this ) ; r.unregisterForRecordsLoaded ( this ) ; }
public static com.intellij.codeInsight.daemon.impl.analysis.CreateNSDeclarationIntentionFix createFix ( @ org.jetbrains.annotations.NotNull final com.intellij.psi.PsiElement element , @ org.jetbrains.annotations.NotNull final java.lang.String namespacePrefix ) { com.intellij.psi.PsiFile file = element.getContainingFile ( ) ; return file instanceof com.intellij.codeInsight.daemon.impl.analysis.XmlFile ? new com.intellij.codeInsight.daemon.impl.analysis.CreateNSDeclarationIntentionFix ( element , namespacePrefix ) : null ; }
public void onScheduledRecordingAdded ( com.android.tv.dvr.data.ScheduledRecording ... scheduledRecordings ) { if ( ( mRowsAdapter ) != null ) { for ( com.android.tv.dvr.data.ScheduledRecording recording : scheduledRecordings ) { mRowsAdapter.onScheduledRecordingAdded ( recording ) ; } } }
private void updateFontLabel ( ) { mFontButton.setText ( mValues.getTextFont ( ) . getFontName ( ) ) ; }
public void tearDown ( ) throws java.lang.Exception { com.android.internal.telephony.CallManager.getInstance ( ) . unregisterPhone ( mPhone ) ; mCallManagerHandlerThread.quit ( ) ; super . tearDown ( ) ; }
static void constantIndexing4 ( int [ ] array ) { array [ 0 ] = - 1 ; }
public static native int getMethodTracingMode ( ) ;
public static void checkUiAutomation ( ) { if ( ! ( io.appium.droiddriver.helpers.DroidDrivers.hasUiAutomation ( ) ) ) { throw new io.appium.droiddriver.exceptions.DroidDriverException ( ( "UiAutomation is not available below API 18. " + "See http://developer.android.com/reference/android/app/UiAutomation.html" ) ) ; } if ( ( io.appium.droiddriver.util.InstrumentationUtils.getInstrumentation ( ) . getUiAutomation ( ) ) == null ) { throw new io.appium.droiddriver.exceptions.DroidDriverException ( "uiAutomation==null: did you forget to set '-w' flag for 'am instrument'?" ) ; } }
static com.google.common.collect.ImmutableList < com.android.dialer.phonelookup.PhoneLookup > providePhoneLookupList ( com.android.dialer.phonelookup.cp2.Cp2LocalPhoneLookup cp2LocalPhoneLookup , com.android.dialer.phonelookup.cp2.Cp2RemotePhoneLookup cp2RemotePhoneLookup , com.android.dialer.phonelookup.blockednumber.DialerBlockedNumberPhoneLookup dialerBlockedNumberPhoneLookup , com.android.dialer.phonelookup.blockednumber.SystemBlockedNumberPhoneLookup systemBlockedNumberPhoneLookup ) { return com.google.common.collect.ImmutableList.of ( cp2LocalPhoneLookup , cp2RemotePhoneLookup , dialerBlockedNumberPhoneLookup , systemBlockedNumberPhoneLookup ) ; }
public boolean onMenuItemClick ( android.view.MenuItem item ) { if ( com.android.browser.DataUri.isDataUri ( mText ) ) { saveDataUri ( ) ; } else { com.android.browser.DownloadHandler.onDownloadStartNoStream ( mActivity , mText , mUserAgent , null , null , mPrivateBrowsing ) ; } return true ; }
public void addUserDevice ( com.android.sdklib.devices.Device d ) { synchronized ( com.android.sdklib.devices.DeviceManager.sLock ) { if ( ( com.android.sdklib.devices.DeviceManager.mUserDevices ) == null ) { getUserDevices ( ) ; } com.android.sdklib.devices.DeviceManager.mUserDevices.add ( d ) ; } notifyListeners ( ) ; }
public void testInstrumentationRunnerArgument ( @ com.android.annotations.NonNull java.lang.String key , @ com.android.annotations.NonNull java.lang.String value ) { getTestInstrumentationRunnerArguments ( ) . put ( key , value ) ; }
public com.android.sched.vfs.ParentVDir getRootDir ( ) { used = true ; return root ; }
public void setClientKeyEntry ( java.security.PrivateKey privateKey , java.security.cert.X509Certificate clientCertificate ) { java.security.cert.X509Certificate [ ] clientCertificates = null ; if ( clientCertificate != null ) { clientCertificates = new java.security.cert.X509Certificate [ ] { clientCertificate } ; } setClientKeyEntryWithCertificateChain ( privateKey , clientCertificates ) ; }
private static native boolean native_test_startAudioSource ( ) ;
public boolean removePasspointConfiguration ( java.lang.String fqdn ) { enforceChangePermission ( ) ; return mPasspointManager.removeProvider ( fqdn ) ; }
public void onCharacteristicRead ( java.lang.String address , int status , int handle , byte [ ] value ) throws android.os.RemoteException { }
public void addExtension ( java.lang.String oid , boolean critical , byte [ ] value ) { this . addExtension ( new org.bouncycastle.asn1.ASN1ObjectIdentifier ( oid ) , critical , value ) ; }
public void verify ( java.security.PublicKey key , java.lang.String sigProvider ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , java.security.SignatureException , java.security.cert.CertificateException { wrapped.verify ( key , sigProvider ) ; }
public static com.android.internal.telephony.imsphone.ImsPhone.ImsDialArgs.Builder from ( com.android.internal.telephony.imsphone.DialArgs dialArgs ) { return new com.android.internal.telephony.imsphone.ImsPhone.ImsDialArgs.Builder ( ) . setUusInfo ( dialArgs.uusInfo ) . setVideoState ( dialArgs.videoState ) . setIntentExtras ( dialArgs.intentExtras ) ; }
public void disableSharedRelros ( ) { if ( DEBUG ) { org.chromium.base.Log.i ( org.chromium.base.library_loader.ModernLinker.TAG , "disableSharedRelros() called" ) ; } synchronized ( mLock ) { assert ! ( mPrepareLibraryLoadCalled ) ; mInBrowserProcess = false ; mWaitForSharedRelros = false ; } }
public static void enableFieldTracing ( java.lang.Class < ? > methodClass , java.lang.reflect.Method fieldAccess , java.lang.reflect.Method fieldModify , java.lang.Thread thr ) { art.Trace.enableTracing ( methodClass , null , null , fieldAccess , fieldModify , thr ) ; }
public org.gradle.api.tasks.compile.AbstractCompile getJavaCompiler ( ) { return getVariantData ( ) . javaCompilerTask ; }
void doQuit ( ) { removeUncleanAccounts ( ) ; if ( ( mHandlerThread ) != null ) { mHandlerThread.quitSafely ( ) ; } quitNow ( ) ; }
public com.android.jack.test.toolchain.JackCliToolchain setVerbose ( boolean isVerbose ) { super . setVerbose ( isVerbose ) ; verbosityLevel = ( isVerbose ) ? com.android.jack.Options.VerbosityLevel.INFO : com.android.jack.Options.VerbosityLevel.WARNING ; addProperty ( Options.USE_DEFAULT_LIBRARIES.getName ( ) , "false" ) ; return this ; }
final boolean equalNameAndParametersInternal ( java.lang.reflect.Method m ) { return ( getName ( ) . equals ( m.getName ( ) ) ) && ( equalMethodParameters ( m.getParameterTypes ( ) ) ) ; }
public final com.android.jack.ir.ast.cfg.JEntryBasicBlock getEntryBlock ( ) { return entry ; }
public void setProcessorOptions ( @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.lang.String > processorOptions ) { throw new java.lang.AssertionError ( ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JLiberateVariable x ) { print ( com.android.jack.ir.impl.BaseGenerationVisitor.CHARS_LIBERATE_variable ) ; space ( ) ; accept ( x.getClosure ( ) ) ; print ( "." ) ; accept ( x.getCapturedVariable ( ) ) ; return false ; }
public java.lang.String getSuffix ( boolean positive ) { return positive ? ( ( com.ibm.icu.text.DecimalFormat ) ( nf ) ) . getPositiveSuffix ( ) : ( ( com.ibm.icu.text.DecimalFormat ) ( nf ) ) . getNegativeSuffix ( ) ; }
public void onDismiss ( android.content.DialogInterface dialog ) { super . onDismiss ( dialog ) ; final android.app.Activity activity = getActivity ( ) ; if ( activity != null ) { activity.finish ( ) ; } }
public java.lang.String getPlatformToolsVersion ( ) { com.android.sdklib.repository.local.LocalPkgInfo info = mLocalSdk.getPkgInfo ( LocalSdk.PKG_PLATFORM_TOOLS ) ; if ( ( info != null ) && ( info.hasFullRevision ( ) ) ) { return info.getFullRevision ( ) . toShortString ( ) ; } return null ; }
public java.lang.String formatValue ( @ javax.annotation.Nonnull com.android.sched.util.file.InputStreamFile stream ) { if ( stream.isStandard ( ) ) { return STANDARD_IO_NAME ; } else { return stream.getPath ( ) ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { java.lang.String fqcn = getSelectedActivity ( ) ; com.android.ide.eclipse.adt.AdtPlugin.openJavaClass ( mEditedFile.getProject ( ) , fqcn ) ; }
public java.lang.String normalizeNumber ( com.android.dialer.DialerPhoneNumber number ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; return formatToE164 ( number ) . or ( android.telephony.PhoneNumberUtils.normalizeNumber ( number.getRawInput ( ) . getNumber ( ) ) ) ; }
public com.android.internal.util.test.BroadcastInterceptingContext.FutureIntent nextBroadcastIntent ( java.lang.String action ) { return nextBroadcastIntent ( new android.content.IntentFilter ( action ) ) ; }
public void stop ( ) { if ( mQueue.isEmpty ( ) ) { mAudioTrack.stop ( ) ; mNumBytesQueued = 0 ; } else { mStopped = true ; } }
public void run ( ) { destroy ( ) ; }
boolean disable ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; debugLog ( ( "disable() called with mRunningProfiles.size() = " + ( mRunningProfiles.size ( ) ) ) ) ; mAdapterStateMachine.sendMessage ( AdapterState.BLE_TURN_OFF ) ; return true ; }
public void test_isValid_OnChannelCloseWithJoinWithSource ( ) throws java.lang.Exception { init ( true ) ; check_isValid ( ) ; }
public void resetDownloadKnowledge ( android.telephony.mbms.DownloadRequest downloadRequest ) throws android.os.RemoteException { }
public com.android.ims.internal.IImsConfig getConfigInterface ( ) { return null ; }
private final native void _addCallbackBuffer ( byte [ ] callbackBuffer , int msgType ) ;
public com.android.build.gradle.internal.dsl.BuildType setConsumerProguardFiles ( @ com.android.annotations.NonNull java.lang.Iterable < ? > proguardFileIterable ) { getConsumerProguardFiles ( ) . clear ( ) ; for ( java.lang.Object proguardFile : proguardFileIterable ) { getConsumerProguardFiles ( ) . add ( project.file ( proguardFile ) ) ; } return this ; }
public java.lang.String getLine1Number ( ) { return getLine1Number ( getSubId ( ) ) ; }
public java.lang.String getPropertyCacheOrSync ( java.lang.String name ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException ;
public static int $noinline$intAddSubSimplifyArg1 ( int x , int y ) { int sum = x + y ; return sum - x ; }
public boolean isDataEnabled ( ) { return getDataEnabled ( getSubId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) ) ; }
private void notifyCharacteristicChanged ( java.lang.String value ) { showMessage ( ( "Characteristic changed: " + value ) ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CHARACTERISTIC_CHANGED ) ; intent.putExtra ( com.android.cts.verifier.bluetooth.BleClientService.EXTRA_CHARACTERISTIC_VALUE , value ) ; sendBroadcast ( intent ) ; }
private void sendInternalMessage ( int messageCode ) { android.telecom.Logging.Session subsession = android.telecom.Log.createSubsession ( ) ; if ( subsession != null ) { sendMessageAtFrontOfQueue ( messageCode , subsession ) ; } else { sendMessageAtFrontOfQueue ( messageCode ) ; } }
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; }
public java.util.Map.Entry < K , V > ceilingEntry ( K key ) { return getNearEntry ( key , ( ( java.util.concurrent.ConcurrentSkipListMap.GT ) | ( java.util.concurrent.ConcurrentSkipListMap.EQ ) ) ) ; }
public void testSeccomp ( ) { if ( android.os.cts.OSFeatures.needsSeccompSupport ( ) ) { assertTrue ( ( "Please enable seccomp support " + "in your kernel (CONFIG_SECCOMP_FILTER=y)" ) , android.os.cts.OSFeatures.hasSeccompSupport ( ) ) ; } }
public void testQueryCurrrentSubscription_wrongProjection ( ) { mContext.getContentResolver ( ) . query ( CarrierId.CONTENT_URI , new java.lang.String [ ] { android.provider.Telephony.CarrierId.CARRIER_ID , android.provider.Telephony.CarrierId.CARRIER_NAME , CarrierId.All.MCCMNC } , null , null ) ; }
public boolean setLine1NumberForDisplay ( java.lang.String alphaTag , java.lang.String number ) { return setLine1NumberForDisplay ( getSubId ( ) , alphaTag , number ) ; }
public void setClasspath ( @ javax.annotation.CheckForNull java.lang.String classpath ) { if ( classpath == null ) { this . classpath = "" ; } else { this . classpath = classpath ; } }
public void testConstructor_NullAliase ( ) { try { new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset ( "mockChar" , new java.lang.String [ ] { "mock" , null } ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public void execute ( java.lang.String split , java.io.File file ) { builder.add ( file ) ; }
public void invokeOemRilRequestStrings ( java.lang.String [ ] strings , android.os.Message response ) { }
protected int peek ( java.net.InetAddress arg0 ) throws java.io.IOException { return 0 ; }
public com.android.jack.frontend.generic.basic.jack.Generic < T > next ( ) { return new com.android.jack.frontend.generic.basic.jack.Generic < T > ( values.next ( ) ) ; }
public java.util.zip.ZipOutputStream getOutputStream ( ) { assert ( file ) != null ; clearRemover ( ) ; try { return new com.android.sched.util.file.OutputZipFile.CustomZipOutputStream ( new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( file ) ) ) ; } catch ( java.io.FileNotFoundException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public java.lang.String getTargetHash ( ) { try { return com.android.sdklib.AndroidTargetHash.getAddonHashString ( getVendorId ( ) , "name3" , new com.android.sdklib.AndroidVersion ( "3" ) ) ; } catch ( com.android.sdklib.AndroidVersion.AndroidVersionException e ) { fail ( ) ; return null ; } }
private void processSignature ( final java.lang.String sig ) { if ( sig != null ) { new org.jetbrains.org.objectweb.asm.signature.SignatureReader ( sig ) . accept ( mySignatureCrawler ) ; } }
public android.net.wifi.aware.LvBufferUtils.LvElement next ( ) { android.net.wifi.aware.TlvBufferUtils.TlvElement tlvE = mTlvIterator.next ( ) ; return new android.net.wifi.aware.LvBufferUtils.LvElement ( tlvE.length , tlvE.refArray , tlvE.offset ) ; }
public com.android.ide.common.layout.TestDragElement id ( java.lang.String id ) { return set ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , id ) ; }
public void test_dropSourceSpecific_twice_IPv4 ( ) throws java.lang.Exception { test_dropSourceSpecific_twice ( libcore.java.nio.channels.DatagramChannelMulticastTest.GOOD_MULTICAST_IPv4 , libcore.java.nio.channels.DatagramChannelMulticastTest.UNICAST_IPv4_1 , ipv4NetworkInterface ) ; }
public static float signum ( float f ) { return ( f == 0.0F ) || ( java.lang.Float.isNaN ( f ) ) ? f : java.lang.Math.copySign ( 1.0F , f ) ; }
protected void tearDown ( ) { java.util.Locale.setDefault ( originalLocale ) ; }
void riljLoge ( java.lang.String msg , java.lang.Exception e ) { android.telephony.Rlog.e ( com.android.internal.telephony.RIL.RILJ_LOG_TAG , ( msg + ( ( mPhoneId ) != null ? ( " [SUB" + ( mPhoneId ) ) + "]" : "" ) ) , e ) ; }
public void test1_findFirst2 ( ) { for ( int i = 0 ; i < 32 ; i ++ ) { assertEquals ( com.android.dx.util.BitsTest.label ( i ) , ( - 1 ) , com.android.dx.util.Bits.findFirst ( 0 , i ) ) ; } }
public void getModemActivityInfoResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.ActivityStatsInfo activityInfo ) { responseActivityData ( responseInfo , activityInfo ) ; }
private void onCurrentOperator ( java.lang.String name ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_OPERATOR_NAME ) ; event.valueString = name ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
static boolean expectAux ( java.lang.String tag , java.lang.String source , java.lang.String result , boolean pass , java.lang.String expectedResult ) { return com.ibm.icu.dev.test.translit.TransliteratorTest.expectAux ( tag , new java.lang.String [ ] { source , result } , pass , expectedResult ) ; }
public void testGetRulesVersion ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = ZoneInfoDB.TzData.loadTzData ( libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ; java.lang.String rulesVersion = ZoneInfoDB.TzData.getRulesVersion ( new java.io.File ( libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ) ; assertEquals ( data.getVersion ( ) , rulesVersion ) ; }
private void sendLinkConfigurationChangedBroadcast ( ) { android.content.Intent intent = new android.content.Intent ( android.net.wifi.WifiManager.LINK_CONFIGURATION_CHANGED_ACTION ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; intent.putExtra ( WifiManager.EXTRA_LINK_PROPERTIES , new android.net.LinkProperties ( mLinkProperties ) ) ; mContext.sendBroadcastAsUser ( intent , UserHandle.ALL ) ; }
int getBatteryLevel ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties ( device ) ; if ( deviceProp == null ) return android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN ; return deviceProp.getBatteryLevel ( ) ; }
public void copyTo ( short [ ] d ) { validateIsInt16 ( ) ; copyTo ( d , Element.DataType.SIGNED_16 , d.length ) ; }
private void openChannel ( int aidId ) { java.lang.String aid = ( aidId == ( com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.ARAD ) ) ? com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.ARAD_AID : com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.ARAM_AID ; int p2 = 0 ; mUiccCard.iccOpenLogicalChannel ( aid , p2 , obtainMessage ( com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.EVENT_OPEN_LOGICAL_CHANNEL_DONE , 0 , aidId , null ) ) ; }
public java.lang.String toString ( ) { return libcore.util.Objects.toString ( this ) ; }
protected com.android.jack.dx.dex.file.DexFile createDexFile ( ) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions ( ) ; options.forceJumbo = forceJumbo ; options.targetApiLevel = apiLevel ; return new com.android.jack.dx.dex.file.DexFile ( options ) ; }
private synchronized void cancelNotificationTaskOfSecureTestStartFailure ( ) { if ( ( mNotificationTaskOfSecureTestStartFailure ) != null ) { mHandler.removeCallbacks ( mNotificationTaskOfSecureTestStartFailure ) ; mNotificationTaskOfSecureTestStartFailure = null ; } }
public void testClear ( ) { java.util.Collection full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; full.clear ( ) ; assertEquals ( 0 , full.size ( ) ) ; assertTrue ( full.isEmpty ( ) ) ; }
public void testInterruptWritableSocketChannel ( ) throws java.lang.Exception { sockets = newSocketChannelPair ( ) ; testInterruptWritableChannel ( sockets [ 0 ] . getChannel ( ) ) ; }
public java.lang.Object getDefaultValue ( com.google.devtools.common.options.OptionDefinition optionDefinition ) { return optionDefaults.get ( optionDefinition ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object element ) { if ( com.google.common.collect.Collections2.safeContains ( unfiltered , element ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E e = ( ( E ) ( element ) ) ; return predicate.apply ( e ) ; } return false ; }
public boolean needsSequentialWriting ( ) { return ( outputVDir ) instanceof com.android.sched.vfs.SequentialOutputVDir ; }
public boolean isLocaleSpecificLayout ( ) { return ( ( mEditedConfig ) == null ) || ( ( mEditedConfig.getLocaleQualifier ( ) ) != null ) ; }
public com.android.ide.common.api.Point getBottomLeft ( ) { return new com.android.ide.common.api.Point ( x , ( ( y ) + ( ( h ) > 0 ? h : 0 ) ) ) ; }
public void setUseSessionTickets ( boolean useSessionTickets ) { sslParameters.useSessionTickets = useSessionTickets ; }
public static java.lang.String getSyntheticSwitchMapInitializerName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType ) { java.lang.String enumName = com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter ( ) . getName ( enumType ) ; return com.android.jack.util.NamingTools.getStrictNonSourceConflictingName ( ( ( "get" + enumName ) + ( com.android.jack.transformations.enums.OptimizationUtil.Suffix ) ) ) ; }
public native void putInt ( long address , int x ) ;
synchronized void nScriptSetVarI ( long id , int slot , int val ) { validate ( ) ; rsnScriptSetVarI ( mContext , id , slot , val ) ; }
public static java.io.File getTempDirectory ( ) { if ( ( com.android.voicemail.impl.mail.TempDirectory.tempDirectory ) == null ) { throw new java.lang.RuntimeException ( ( "TempDirectory not set. " + "If in a unit test, call Email.setTempDirectory(context) in setUp()." ) ) ; } return com.android.voicemail.impl.mail.TempDirectory.tempDirectory ; }
boolean waitForListener ( ) { try { return mBlocker.await ( android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE_SECS , java.util.concurrent.TimeUnit.SECONDS ) ; } catch ( java.lang.InterruptedException e ) { return false ; } }
public com.android.jack.shrob.obfuscation.key.MethodKey getNewKey ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodIdWide id ) { return newMethodKeys.get ( id ) ; }
public void testNoRootCmdSocket ( ) { assertFalse ( "/dev/socket/init_runit" , new java.io.File ( "/dev/socket/init_runit" ) . exists ( ) ) ; assertFalse ( "/dev/socket/fotabinder" , new java.io.File ( "/dev/socket/fotabinder" ) . exists ( ) ) ; }
private void sendLinkProperties ( ) { mTetherController.updateLinkProperties ( this , new android.net.LinkProperties ( mLinkProperties ) ) ; }
public com.android.server.net.NetworkStatsService.NetworkStatsSettings.Config getDevConfig ( ) { return new com.android.server.net.NetworkStatsService.NetworkStatsSettings.Config ( getGlobalLong ( android.provider.Settings.Global.NETSTATS_DEV_BUCKET_DURATION , android.text.format.DateUtils.HOUR_IN_MILLIS ) , getGlobalLong ( android.provider.Settings.Global.NETSTATS_DEV_ROTATE_AGE , ( 15 * ( android.text.format.DateUtils.DAY_IN_MILLIS ) ) ) , getGlobalLong ( android.provider.Settings.Global.NETSTATS_DEV_DELETE_AGE , ( 90 * ( android.text.format.DateUtils.DAY_IN_MILLIS ) ) ) ) ; }
public void mouseDown ( org.eclipse.swt.events.MouseEvent e ) { if ( ( ( e.stateMask ) & ( org.eclipse.swt.SWT.MOD1 ) ) != 0 ) { com.android.ide.eclipse.adt.AdtPlugin.openJavaClass ( mEditor.getProject ( ) , fqcn ) ; } }
private android.app.PendingIntent createIncomingCallPendingIntent ( ) { android.content.Intent intent = new android.content.Intent ( com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL ) ; intent.setPackage ( TelephonyManager.PHONE_PROCESS_NAME ) ; return android.app.PendingIntent.getBroadcast ( mContext , 0 , intent , PendingIntent.FLAG_UPDATE_CURRENT ) ; }
protected java.lang.String serviceName ( ) { return getClass ( ) . getSimpleName ( ) ; }
public void onVideoProviderChanged ( com.android.services.telephony.VideoProvider videoProvider ) { mHandler.obtainMessage ( com.android.services.telephony.TelephonyConnection.MSG_SET_VIDEO_PROVIDER , videoProvider ) . sendToTarget ( ) ; }
public com.android.build.gradle.internal.dsl.NdkOptions ldLibs ( java.lang.String lib ) { if ( ( ldLibs ) == null ) { ldLibs = com.google.common.collect.Lists.newArrayList ( ) ; } ldLibs.add ( lib ) ; return this ; }
public java.lang.String toString ( ) { java.lang.String micro = ( ( myMicroRevision ) == ( com.android.ide.common.repository.MavenCoordinate.PLUS_REV ) ) ? "+" : java.lang.Integer.toString ( myMicroRevision ) ; return java.lang.String.format ( java.util.Locale.US , "%s:%s:%d.%d.%s" , myGroupId , myArtifactId , myMajorRevision , myMinorRevision , micro ) ; }
public void test_invalidKeys ( ) throws java.lang.Exception { java.util.TreeMap m1 = new java.util.TreeMap ( ) ; try { m1.put ( new java.lang.Object ( ) , "val1" ) ; fail ( "ClassCastException expected" ) ; } catch ( java.lang.ClassCastException expected ) { } }
public void select ( org.w3c.dom.Node xmlNode ) { mCanvasViewer.getCanvas ( ) . getSelectionManager ( ) . select ( xmlNode ) ; }
public com.android.sdklib.repository.FullRevision convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { input = input.replace ( "-preview" , "" ) ; return com.android.sdklib.repository.FullRevision.parseRevision ( input ) ; } catch ( java.lang.NumberFormatException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( e.getMessage ( ) ) ; } }
public android.net.wifi.aware.WifiAwareCharacteristics getCharacteristics ( ) { enforceAccessPermission ( ) ; return ( mStateManager.getCapabilities ( ) ) == null ? null : mStateManager.getCapabilities ( ) . toPublicCharacteristics ( ) ; }
public void setMultiProcessEnabledFromContext ( android.content.Context context ) { }
public java.nio.channels.Selector wakeup ( ) { try { Libcore.os.write ( wakeupOut , new byte [ ] { 1 } , 0 , 1 ) ; } catch ( libcore.io.ErrnoException ignored ) { } catch ( java.io.InterruptedIOException ignored ) { } return this ; }
void addMessage ( com.android.manifmerger.MergingReport.Builder report , com.android.manifmerger.MergingReport.Record.Severity severity , java.lang.String message ) { addMessage ( report , getPosition ( ) , severity , message ) ; }
public com.google.common.collect.ImmutableList < com.android.dialer.precall.PreCallAction > getActions ( ) { return actions ; }
public abstract void installPackage ( @ com.android.annotations.NonNull java.io.File apkFile , int timeout , com.android.utils.ILogger logger ) throws com.android.builder.testing.api.DeviceException ;
public int compareTo ( android.support.v7.preference.Preference another ) { if ( ! ( another instanceof com.android.settings.bluetooth.BluetoothDevicePreference ) ) { return super . compareTo ( another ) ; } return mCachedDevice.compareTo ( ( ( com.android.settings.bluetooth.BluetoothDevicePreference ) ( another ) ) . mCachedDevice ) ; }
public boolean isValid ( ) { if ( ( mProtocol ) == null ) { return false ; } if ( isCarrierAppPreloaded ( ) ) { return false ; } return true ; }
public void analyzeExternalChangesAndUpdateIfNeed ( @ org.jetbrains.annotations.NotNull java.util.Collection < com.intellij.openapi.vfs.VirtualFile > changedFiles , @ org.jetbrains.annotations.NotNull java.util.Set < java.lang.String > componentNames ) { componentNames.add ( "NewModuleRootManager" ) ; if ( ( myStorageData ) != null ) { myStorageData.loaded = false ; } }
private void createTempDir ( ) throws java.lang.Exception { mTempDir = java.io.File.createTempFile ( "timeZoneUpdateTest" , null ) ; org.junit.Assert.assertTrue ( mTempDir.delete ( ) ) ; org.junit.Assert.assertTrue ( mTempDir.mkdir ( ) ) ; }
long getReceivedRealtimeMillis ( ) { return mNitzData.mElapsedRealtime ; }
synchronized boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "connect(): device=" + device ) ) ; } return mHidDeviceNativeInterface.connect ( device ) ; }
public void onParentChanged ( android.telecom.Call call , android.telecom.Call parent ) { android.util.Log.i ( android.telecom.cts.TestUtils.TAG , ( ( ( "onParentChanged, Call: " + call ) + ", Parent: " ) + parent ) ) ; this . lock.release ( ) ; }
public static < E extends java.lang.Enum < E > > com.google.common.collect.ImmutableSet < E > immutableEnumSet ( E anElement , E ... otherElements ) { return com.google.common.collect.ImmutableEnumSet.asImmutable ( java.util.EnumSet.of ( anElement , otherElements ) ) ; }
public void isAssignableFrom_notAnInstance ( ) { android.view.View v = new android.view.View ( context ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.widget.Spinner.class ) . matches ( v ) ) ; }
public void testInstallV1OneSignerSHA256withECDSA ( ) throws java.lang.Exception { assertInstallSucceedsForEach ( "v1-only-with-ecdsa-sha256-1.2.840.10045.2.1-%s.apk" , android.appsecurity.cts.PkgInstallSignatureVerificationTest.EC_KEY_NAMES ) ; assertInstallSucceedsForEach ( "v1-only-with-ecdsa-sha256-1.2.840.10045.4.3.2-%s.apk" , android.appsecurity.cts.PkgInstallSignatureVerificationTest.EC_KEY_NAMES ) ; }
private boolean processSetUpEventList ( com.android.internal.telephony.cat.CommandDetails cmdDet , java.util.List < com.android.internal.telephony.cat.ComprehensionTlv > ctlvs ) { com.android.internal.telephony.cat.CatLog.d ( this , "process SetUpEventList" ) ; return true ; }
static double $opt$ShortToDouble ( short a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( double ) ( a ) ) ; }
public void testPublishConfigBuilderNegativeTtl ( ) { new android.net.wifi.aware.PublishConfig.Builder ( ) . setTtlSec ( ( - 10 ) ) ; }
private int getSubId ( int preferredSubId ) { if ( android.telephony.SubscriptionManager.isUsableSubIdValue ( mSubId ) ) { return mSubId ; } return preferredSubId ; }
com.android.build.gradle.model.AndroidProjectTest.ProductFlavorTester setTargetSdkVersion ( int targetSdkVersion ) { this . targetSdkVersion = new com.android.build.gradle.model.AndroidProjectTest.DefaultApiVersion ( targetSdkVersion ) ; return this ; }
public void requestR1R2ANQPElementsWithRC ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mHandler.requestANQP ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1R2_ANQP_WITH_RC ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mManager.requestANQPElements ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_ANQP_KEY , true , true ) ) ; }
private void renameFingerPrint ( int fingerId , java.lang.String newName ) { mFingerprintManager.rename ( fingerId , mUserId , newName ) ; if ( ! ( android.text.TextUtils.isEmpty ( newName ) ) ) { mFingerprintsRenaming.put ( fingerId , newName ) ; } updatePreferences ( ) ; }
public android.telephony.mbms.DownloadRequest build ( ) { return new android.telephony.mbms.DownloadRequest ( id , serviceInfo , source , dest , sub , appIntent , appName ) ; }
public void testIOException ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/ApiCallTest6.java:8: Error: Call requires API level 9 (current min is 1): new java.io.IOException [NewApi]\n" + ( ( " IOException ioException = new IOException(throwable);\n" + " ~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "apicheck/Intermediate.java.txt=>src/test/pkg/Intermediate.java" , "apicheck/ApiCallTest6.java.txt=>src/test/pkg/ApiCallTest6.java" , "apicheck/ApiCallTest6.class.data=>bin/classes/test/pkg/ApiCallTest6.class" ) ) ; }
public com.android.dialer.smartdial.SmartDialMatchPosition matchesNumber ( android.content.Context context , java.lang.String phoneNumber ) { return matchesNumber ( context , phoneNumber , mQuery ) ; }
public boolean isConnected ( int callServiceType , int callType ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . isConnected ( mSlotId , mSupportedFeature , callServiceType , callType ) ; } }
public void clearWallpaper ( ) { if ( com.android.server.WallpaperManagerService.DEBUG ) android.util.Slog.v ( com.android.server.WallpaperManagerService.TAG , "clearWallpaper" ) ; synchronized ( mLock ) { clearWallpaperLocked ( false , android.os.UserId.getCallingUserId ( ) ) ; } }
private boolean isPolicyValid ( java.lang.String test ) { final android.content.pm.PackageManager pm = getPackageManager ( ) ; switch ( test ) { case PolicyTransparencyTestActivity.TEST_CHECK_PERMITTED_INPUT_METHOD : return pm.hasSystemFeature ( PackageManager.FEATURE_INPUT_METHODS ) ; case PolicyTransparencyTestActivity.TEST_CHECK_PERMITTED_ACCESSIBILITY_SERVICE : return pm.hasSystemFeature ( PackageManager.FEATURE_AUDIO_OUTPUT ) ; default : return true ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; org.apache.harmony.tests.java.nio.charset.CharsetDecoderTest.decoder = cs.newDecoder ( ) ; }
boolean isAudioOn ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return ( mStateMachine.getAudioState ( ) ) != ( android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ) ; }
public boolean hasBootSuccess ( ) { return ( ( bitField0_ ) & 4 ) == 4 ; }
public void updateWifiMetrics ( ) { mWifiMetrics.updateSavedNetworks ( mWifiConfigManager.getSavedNetworks ( ) ) ; }
public java.lang.String getBriefDescription ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue.OutputFormat format ) { switch ( format ) { case TEXT : return com.android.tools.lint.detector.api.Issue.convertMarkup ( mBriefDescription , false ) ; case HTML : return com.android.tools.lint.detector.api.Issue.convertMarkup ( mBriefDescription , true ) ; case RAW : default : return mBriefDescription ; } }
public static com.android.jack.dx.rop.code.Rop opCaptureVariable ( com.android.jack.dx.rop.type.TypeList sources ) { return new com.android.jack.dx.rop.code.Rop ( RegOps.CAPTURE_VARIABLE , com.android.jack.dx.rop.type.Type.VOID , sources , com.android.jack.dx.rop.type.StdTypeList.EMPTY , Rop.BRANCH_NONE , true , null ) ; }
synchronized void nContextDestroy ( ) { validate ( ) ; java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock wlock = mRWLock.writeLock ( ) ; wlock.lock ( ) ; int curCon = mContext ; mContext = 0 ; wlock.unlock ( ) ; rsnContextDestroy ( curCon ) ; }
boolean isCondition1or2Violated ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JStatement startStmt ) { return traverse ( com.google.common.collect.Lists.newArrayList ( startStmt ) , ( ( byte ) ( ( com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ENTRY_POINT ) | ( com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_OR_READS_B ) ) ) , com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_A ) ; }
public boolean isPlaceHolder ( ) { return false ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JThisRef expr ) { return visitNonThrowingTriviaRValue ( expr ) ; }
public E next ( ) { if ( ( index ) < ( to ) ) { return ( ( E ) ( snapshot [ ( ( index ) ++ ) ] ) ) ; } else { throw new java.util.NoSuchElementException ( ) ; } }
public static com.android.dialer.spam.status.SimpleSpamStatus create ( boolean isSpam , @ android.support.annotation.Nullable java.lang.Long timestampMillis ) { return com.android.dialer.spam.status.SimpleSpamStatus.builder ( ) . setSpam ( isSpam ) . setTimestampMillis ( timestampMillis ) . setSpamMetadata ( com.android.dialer.spam.status.SpamMetadata.empty ( ) ) . build ( ) ; }
public void visitAnyMember ( proguard.optimize.info.Clazz clazz , proguard.optimize.info.Member member ) { if ( ( ( member.getAccessFlags ( ) ) & ( ( ClassConstants.ACC_PUBLIC ) | ( ClassConstants.ACC_PRIVATE ) ) ) == 0 ) { proguard.optimize.info.PackageVisibleMemberInvokingClassMarker.setInvokesPackageVisibleMembers ( referencingClass ) ; } }
public boolean containsKey ( @ javax.annotation.Nullable java.lang.Object key ) { return backingSet ( ) . contains ( key ) ; }
public int hashCode ( ) { return ( ( super . hashCode ( ) ) ^ ( producerStack.hashCode ( ) ) ) ^ ( actualProducerStack.hashCode ( ) ) ; }
private native void enableAdvertisingSetNative ( int advertiserId , boolean enable , int duration , int maxExtAdvEvents ) ;
public java.util.Set < ? extends java.lang.Class < ? extends java.lang.annotation.Annotation > > annotations ( ) { return com.google.common.collect.ImmutableSet.of ( com.android.dialer.inject.IncludeInDialerRoot.class ) ; }
public int updateCallForward ( int action , int condition , java.lang.String number , int serviceClass , int timeSeconds ) throws android.os.RemoteException { return this . updateCallForward ( action , condition , number , serviceClass , timeSeconds ) ; }
protected void printMethodHeader ( com.android.jack.ir.ast.JMethod x ) { print ( com.android.jack.ir.ast.JModifier.getStringMethodModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; printParameterList ( x ) ; }
public void recomputeLayout ( ) { mGraphicalEditor.recomputeLayout ( ) ; }
protected void resetRecords ( ) { mMncLength = UNINITIALIZED ; log ( ( "setting0 mMncLength" + ( mMncLength ) ) ) ; mIccId = null ; mFullIccId = null ; mAdnCache.reset ( ) ; mRecordsRequested = false ; mLockedRecordsReqReason = LOCKED_RECORDS_REQ_REASON_NONE ; }
public void test_with_adjustment_null ( ) { tck.java.time.TCKLocalDate.TEST_2007_07_15.with ( ( ( java.time.temporal.TemporalAdjuster ) ( null ) ) ) ; }
public void validateSimCredentialWithEapSim ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithSimCredential ( ) ; org.junit.Assert.assertTrue ( cred.validate ( ) ) ; }
private void removeNotification ( ) { mNotificationManager.cancel ( null , com.android.networkrecommendation.WifiNotificationController.ICON_NETWORKS_AVAILABLE ) ; mNotificationShown = false ; }
public static void assertEquals ( java.lang.String message , long expected , long actual ) { if ( expected != actual ) { org.junit.Assert.failNotEquals ( message , java.lang.Long.valueOf ( expected ) , java.lang.Long.valueOf ( actual ) ) ; } }
protected long currentTimeSeconds ( ) { return ( android.os.SystemClock.elapsedRealtime ( ) ) / ( android.text.format.DateUtils.SECOND_IN_MILLIS ) ; }
public com.intellij.psi.impl.source.resolve.reference.impl.providers.PsiReference [ ] getReferencesByElement ( @ org.jetbrains.annotations.NotNull com.intellij.psi.impl.source.resolve.reference.impl.providers.PsiElement element , @ org.jetbrains.annotations.NotNull final com.intellij.util.ProcessingContext context ) { return getReferencesByElement ( element ) ; }
public void onFailure ( int reason , java.lang.String description ) { localLog ( ( ( ( ( "registerScanListener onFailure:" + " reason: " ) + reason ) + " description: " ) + description ) ) ; }
public java.util.List < android.hardware.cts.helpers.TestSensorEvent > getCollectedEvents ( ) { synchronized ( mCollectedEvents ) { java.util.List < android.hardware.cts.helpers.TestSensorEvent > collectedEventsList = ( ( java.util.List ) ( mCollectedEvents.clone ( ) ) ) ; return java.util.Collections.unmodifiableList ( collectedEventsList ) ; } }
public java.util.List < com.android.ide.eclipse.adt.editors.layout.gscripts.IDragElement > getInnerElements ( ) { if ( ( mReadOnlyElements ) == null ) { mReadOnlyElements = java.util.Collections.unmodifiableList ( mElements ) ; } return mReadOnlyElements ; }
private android.icu.text.PluralRules getPluralRule ( ) { synchronized ( android.content.res.Resources.sSync ) { if ( ( mPluralRule ) == null ) { mPluralRule = android.icu.text.PluralRules.forLocale ( mConfiguration.locale ) ; } return mPluralRule ; } }
private void setListener ( android.telephony.ims.aidl.IImsMmTelListener listener ) { synchronized ( mLock ) { mListener = listener ; } if ( ( mListener ) != null ) { onFeatureReady ( ) ; } }
public void recordsIntentsOnlyAfterInit ( ) { expectedException.expect ( junit.framework.AssertionFailedError.class ) ; android.support.test.espresso.intent.Intents.intended ( android.support.test.espresso.intent.matcher.IntentMatchers.hasComponent ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasShortClassName ( ".SendActivity" ) ) ) ; }
public java.lang.Object getViewCookie ( ) { return getCurrentNode ( ) ; }
private void addMapping ( java.lang.String jarItem , java.lang.String jarName ) { addToList ( jarItem , jarName , indexMap ) ; addToList ( jarName , jarItem , jarMap ) ; }
public boolean isValidValueForDevice ( ) { return ( ( this ) != ( com.android.resources.Density.NODPI ) ) && ( ( this ) != ( com.android.resources.Density.ANYDPI ) ) ; }
boolean isNumberPossibleForDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher possibleNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.possibleNumberPattern ) . matcher ( nationalNumber ) ; return possibleNumberPatternMatcher.matches ( ) ; }
public java.lang.String resolveStyleable ( int [ ] id ) { if ( ( mStyleableValueToNameMap ) != null ) { mWrapper.set ( id ) ; return mStyleableValueToNameMap.get ( mWrapper ) ; } return null ; }
public com.android.sdkuilib.ui.GridLayoutBuilder vSpacing ( int v ) { mGL.verticalSpacing = v ; return this ; }
public void testMoveAppInternalToInternal ( ) { int installFlags = android.content.pm.PackageManager.INSTALL_INTERNAL ; int moveFlags = android.content.pm.PackageManager.MOVE_INTERNAL ; boolean fail = true ; int result = android.content.pm.PackageManager.MOVE_FAILED_INVALID_LOCATION ; sampleMoveFromRawResource ( installFlags , moveFlags , fail , result ) ; }
public void testSAXNotSupportedException_String ( ) { org.xml.sax.SAXNotSupportedException e = new org.xml.sax.SAXNotSupportedException ( org.apache.harmony.tests.org.xml.sax.SAXNotSupportedExceptionTest.ERR ) ; assertEquals ( org.apache.harmony.tests.org.xml.sax.SAXNotSupportedExceptionTest.ERR , e.getMessage ( ) ) ; e = new org.xml.sax.SAXNotSupportedException ( null ) ; assertNull ( e.getMessage ( ) ) ; }
static void expect ( java.lang.String rules , java.lang.String source , java.lang.String expectedResult ) { com.ibm.icu.dev.test.translit.TransliteratorTest.expect ( rules , source , expectedResult , null ) ; }
public void run ( ) { com.intellij.openapi.ui.Messages.showErrorDialog ( ( "Error importing App Engine module : " + errorMessage ) , com.google.gct.idea.appengine.wizard.CloudModuleUtils.ERROR_MESSAGE_TITLE ) ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { return libcore.reflect.AnnotationAccess.getParameterAnnotations ( declaringClassOfOverriddenMethod , dexMethodIndex ) ; }
public void setProcessorOptions ( @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.lang.String > processorOptions ) { for ( java.util.Map.Entry < java.lang.String , java.lang.String > entry : processorOptions.entrySet ( ) ) { options.addAnnotationProcessorOption ( entry.getKey ( ) , entry.getValue ( ) ) ; } }
public void add ( @ javax.annotation.Nonnull com.android.jack.shrob.obfuscation.key.FieldKey key ) { newFieldKeys.add ( key ) ; }
public android.telephony.ims.aidl.IImsConfig getConfig ( int slotId ) throws android.os.RemoteException { synchronized ( mLock ) { return isServiceControllerAvailable ( ) ? mIImsServiceController.getConfig ( slotId ) : null ; } }
public void exit ( ) { logd ( "WifiStateMachine: Leaving Roaming state" ) ; }
private java.lang.String formatDateUtc ( java.util.Locale l , java.lang.String fmt ) { return formatDate ( l , fmt , libcore.java.text.SimpleDateFormatTest.UTC ) ; }
private native void gattClientSearchServiceNative ( int connId , boolean searchAll , long serviceUuidLsb , long serviceUuidMsb ) ;
public com.android.ide.common.rendering.api.Result createResult ( java.lang.String errorMessage ) { return new com.android.ide.common.rendering.api.Result ( this , errorMessage , null ) ; }
public void testExistingEUserI ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL ; int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL ; setExistingXUserX ( userSetting , iFlags , PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { state.mTouchExplorationGrantedServices.add ( service.mComponentName ) ; persistComponentNamesToSettingLocked ( Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES , state.mTouchExplorationGrantedServices , state.mUserId ) ; Settings.Secure.putIntForUser ( mContext.getContentResolver ( ) , Settings.Secure.TOUCH_EXPLORATION_ENABLED , 1 , service.mUserId ) ; }
public java.lang.String get ( java.lang.String tableName , java.lang.String subTableName , java.lang.String code ) { return android.icu.impl.ICUResourceTableAccess.getTableString ( bundle , tableName , subTableName , code , ( nullIfNotFound ? null : code ) ) ; }
public java.lang.String imsGetWfcMode ( ) { if ( ! ( mImsManager.isWfcEnabledByUser ( ) ) ) { return TelephonyConstants.WFC_MODE_DISABLED ; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString ( mImsManager.getWfcMode ( ) ) ; }
public void handleMessage ( android.os.Message msg ) { updateAudioRoute ( ) ; mWakeLock.release ( ) ; }
private java.lang.String getADBExecJavaLine ( java.lang.String classpath , java.lang.String mainclass ) { return ( ( ( "DeviceUtil.adbExec(getDevice(), \"" + classpath ) + "\", \"" ) + mainclass ) + "\");" ; }
public abstract long get ( com.android.tools.perflib.vmtrace.MethodInfo info , com.android.tools.perflib.vmtrace.ThreadInfo thread , java.util.concurrent.TimeUnit unit ) ;
public long allocate ( ) { fail ( "allocate function called" ) ; return dummyNativePtr ; }
com.android.sched.vfs.VPath getPathFromDir ( @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent , @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file ) { return vfs.getPathFromDir ( parent.getWrappedDir ( ) , file.getWrappedFile ( ) ) ; }
public java.util.SortedSet < E > tailSet ( E fromElement ) { return com.google.common.collect.Maps.removeOnlySortedSet ( super . tailSet ( fromElement ) ) ; }
public void onIsConferencedChanged ( com.android.server.telecom.Call call ) { android.telecom.Log.d ( this , "onIsConferencedChanged %s" , call ) ; updateCall ( call ) ; }
public static com.google.common.hash.Funnel < java.lang.CharSequence > unencodedCharsFunnel ( ) { return com.google.common.hash.Funnels.UnencodedCharsFunnel.INSTANCE ; }
public void validateFullConfig ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = android.net.wifi.hotspot2.PasspointConfigurationTest.createConfig ( ) ; org.junit.Assert.assertTrue ( config.validate ( ) ) ; }
public android.content.pm.ParceledListSlice < android.content.pm.ApplicationInfo > getPersistentApplications ( int flags ) { return new android.content.pm.ParceledListSlice ( getPersistentApplicationsInternal ( flags ) ) ; }
public static void applyDebuggerSystemProperty ( com.android.internal.os.ZygoteConnection.Arguments args ) { if ( RoSystemProperties.DEBUGGABLE ) { args.debugFlags |= Zygote.DEBUG_ENABLE_JDWP ; } }
void requestPairConfirmation ( ) { android.content.Intent dialogIntent = new android.content.Intent ( mContext , com.android.nfc.handover.ConfirmConnectActivity.class ) ; dialogIntent.setFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) | ( android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK ) ) ) ; dialogIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; mContext.startActivity ( dialogIntent ) ; }
public final void addInstance ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Instance instance ) { mShalowSize += instance.getSize ( ) ; mInstances.add ( instance ) ; }
public static java.lang.String toZid ( java.lang.String zid ) { java.lang.String canonicalCldrId = android.icu.impl.ZoneMeta.getCanonicalCLDRID ( zid ) ; if ( canonicalCldrId != null ) { return canonicalCldrId ; } return zid ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setModulesTotal ( int value ) { bitField0_ |= 262144 ; modulesTotal_ = value ; onChanged ( ) ; return this ; }
native void rsnAllocationData2D ( long con , long id , int xoff , int yoff , int mip , int face , int w , int h , int [ ] d , int sizeBytes ) ;
public void visitVariableInstruction ( proguard.optimize.evaluation.Clazz clazz , proguard.optimize.evaluation.Method method , proguard.optimize.evaluation.CodeAttribute codeAttribute , int offset , proguard.optimize.evaluation.VariableInstruction variableInstruction ) { if ( variableInstruction.isLoad ( ) ) { markVariableInitializersBefore ( offset , variableInstruction.variableIndex ) ; } }
public void onCallRemoved ( com.android.server.telecom.Call call ) { if ( call.isExternalCall ( ) ) { return ; } mClccIndexMap.remove ( call ) ; updateHeadsetWithCallState ( false ) ; }
private static java.lang.String getSortKey ( android.content.Context context ) { com.android.contacts.common.preference.ContactsPreferences contactsPrefs = new com.android.contacts.common.preference.ContactsPreferences ( context ) ; boolean sortOrderPrimary = ( contactsPrefs.getSortOrder ( ) ) == ( com.android.contacts.common.preference.ContactsPreferences.SORT_ORDER_PRIMARY ) ; return sortOrderPrimary ? android.provider.ContactsContract.Contacts.SORT_KEY_PRIMARY : android.provider.ContactsContract.Contacts.SORT_KEY_ALTERNATIVE ; }
private void signalAllWaiters ( ) { for ( com.google.common.util.concurrent.Monitor.Guard guard = activeGuards ; guard != null ; guard = guard.next ) { guard.condition.signalAll ( ) ; } }
public java.util.List < java.lang.Class < ? extends lombok.ast.Node > > getApplicableNodeTypes ( ) { return null ; }
public void testRotationVector_5hz ( ) throws java.lang.Throwable { runSensorTest ( Sensor.TYPE_ROTATION_VECTOR , android.hardware.cts.SingleSensorTests.RATE_5HZ , android.hardware.cts.SingleSensorTests.BATCHING_OFF ) ; }
public void testVP8EncodeDecodeVideoFromBufferToSurfaceQCIF ( ) throws java.lang.Throwable { setParameters ( 176 , 144 , 1000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_VP8 , true , false ) ; android.media.cts.EncodeDecodeTest.BufferToSurfaceWrapper.runTest ( this ) ; }
public static synchronized void setInstanceForTesting ( com.android.incallui.InCallPresenter inCallPresenter ) { com.android.incallui.InCallPresenter.inCallPresenter = inCallPresenter ; }
public void getLastCallFailCauseResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.LastCallFailCauseInfo fcInfo ) { responseLastCallFailCauseInfo ( responseInfo , fcInfo ) ; }
protected void classSetUp ( ) { com.google.android.droiddriver.helpers.BaseDroidDriverTest.DroidDriversInitializer.get ( com.google.android.droiddriver.helpers.BaseDroidDriverTest.getInstrumentation ( ) ) . singleRun ( ) ; }
public boolean isJniDebuggable ( ) { return com.google.common.base.Objects.firstNonNull ( buildType.getNdk ( ) . getDebuggable ( ) , false ) ; }
private static boolean $inline$false ( ) { return false ; }
public void callSessionHandoverFailed ( int srcAccessTech , int targetAccessTech , com.android.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mListener.callSessionHandoverFailed ( srcAccessTech , targetAccessTech , reasonInfo ) ; }
public void recycle ( ) { if ( ( spans ) != null ) { java.util.Arrays.fill ( spans , 0 , numberOfSpans , null ) ; } }
public com.android.ims.internal.IImsCallSession getPendingCallSession ( int sessionId , java.lang.String callId ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getPendingCallSession ( mSlotId , mSupportedFeature , sessionId , callId ) ; } }
public void test_minusWeeks_negative ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.minusWeeks ( ( - 1 ) ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 7 , 22 ) ) ; }
public static double DoubleSubtraction ( ) { double a ; double b ; double c ; a = Main.$inline$double ( 6.0 ) ; b = Main.$inline$double ( 2.0 ) ; c = a - b ; return c ; }
public void findNext ( boolean forward ) { checkThread ( ) ; if ( android.webkit.WebView.TRACE ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "findNext" ) ; mProvider.findNext ( forward ) ; }
private final void resetContext ( ) { org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = new org.conscrypt.NativeRef.EVP_MD_CTX ( org.conscrypt.NativeCrypto.EVP_MD_CTX_create ( ) ) ; org.conscrypt.NativeCrypto.EVP_MD_CTX_init ( ctxLocal ) ; org.conscrypt.NativeCrypto.EVP_DigestInit ( ctxLocal , evp_md ) ; ctx = ctxLocal ; }
private void sendMessage ( int what , java.lang.Object obj , int arg1 ) { sendMessage ( what , obj , arg1 , 0 , false ) ; }
private static boolean isInnerClass ( @ com.android.annotations.Nullable lombok.ast.ClassDeclaration node ) { return ( node == null ) || ( ( com.android.tools.lint.detector.api.JavaContext.getParentOfType ( node , lombok.ast.ClassDeclaration.class , true ) ) != null ) ; }
public static < T > org.hamcrest.Matcher < java.lang.Iterable < T > > hasItems ( T ... elements ) { return org.hamcrest.CoreMatchers.hasItems ( elements ) ; }
public void smsStartTrackingIncomingMmsMessage ( ) { android.content.IntentFilter mmsReceived = new android.content.IntentFilter ( android.provider.Telephony.Sms.Intents.MMS_DOWNLOADED_ACTION ) ; mmsReceived.addAction ( Intents.WAP_PUSH_RECEIVED_ACTION ) ; mmsReceived.addAction ( Intents.DATA_SMS_RECEIVED_ACTION ) ; mService.registerReceiver ( mMmsIncomingListener , mmsReceived ) ; mListeningIncomingMms = true ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { if ( ( mRawImage ) != null ) { mRotateCount = ( ( mRotateCount ) + 1 ) % 4 ; mRawImage = mRawImage.getRotated ( ) ; updateImageDisplay ( shell ) ; } }
public void prepareProgramForExecution ( java.lang.String programName ) { if ( ! ( dexfuzz.Options.executeOnHost ) ) { device.pushProgramToDevice ( programName , testLocation ) ; } if ( needsCleanCodeCache ) { device.cleanCodeCache ( architecture , testLocation , programName ) ; } }
public void test_CheckedList_sort ( ) { libcore.java.util.ListDefaultMethodTester.test_sort ( java.util.Collections.checkedList ( new java.util.ArrayList < > ( ) , java.lang.Double.class ) ) ; }
public void startDtmf ( char c ) { if ( ! ( android.telephony.PhoneNumberUtils.is12Key ( c ) ) ) { android.telephony.Rlog.e ( com.android.internal.telephony.sip.SipPhone.LOG_TAG , ( ( "startDtmf called with invalid character '" + c ) + "'" ) ) ; } else { sendDtmf ( c ) ; } }
private void updateDownloadCacheSize ( ) { long size = mDownloadCache.getCurrentSize ( ) ; java.lang.String str = com.android.sdklib.util.FormatUtils.byteSizeToString ( size ) ; mTextCacheSize.setText ( str ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( mType , mSubType , mSubscriberId , mNetworkId , mRoaming , mMetered , mDefaultNetwork ) ; }
public int read ( char [ ] buffer ) throws java.io.IOException { return read ( buffer , 0 , buffer.length ) ; }
void addDataToScores ( java.lang.String desired , java.lang.String supported , com.ibm.icu.impl.Row.R3 < com.ibm.icu.util.LocaleMatcher.LocalePatternMatcher , com.ibm.icu.util.LocaleMatcher.LocalePatternMatcher , java.lang.Double > data ) { boolean added = scores.add ( data ) ; if ( ! added ) { throw new com.ibm.icu.util.ICUException ( ( "trying to add duplicate data: " + data ) ) ; } }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType.isCreate ( ) ) { node.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_SRC , getSampleImageSrc ( ) ) ; } }
public void setSelection ( com.android.ddmlib.IDevice device , com.android.hierarchyviewerlib.device.Window window ) { synchronized ( deviceMap ) { selectedDevice = device ; selectedWindow = window ; } notifySelectionChanged ( device , window ) ; }
public boolean supportsParameter ( java.lang.Object parameter ) { fail ( "This should not be called" ) ; return false ; }
public void checkValidity ( ) { if ( ! ( ( ( parent ) instanceof com.android.jack.ir.ast.JMethodBody ) || ( ( parent ) instanceof com.android.jack.ir.ast.JCatchBlock ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
public void testQuickFix_withInvalidCharacters ( ) { com.google.gct.idea.appengine.validation.ApiNameInspection.MyQuickFix localQuickFix = new com.google.gct.idea.appengine.validation.ApiNameInspection ( ) . new com.google.gct.idea.appengine.validation.MyQuickFix ( ) ; junit.framework.Assert.assertEquals ( "invalidcharacters" , localQuickFix.getNameSuggestions ( "@invalid&characters#" ) ) ; junit.framework.Assert.assertEquals ( "invalidCharacters" , localQuickFix.getNameSuggestions ( "@Invalid&()Characters#" ) ) ; junit.framework.Assert.assertEquals ( "invalidCharacters" , localQuickFix.getNameSuggestions ( "@23Inval&*idChara(cters#" ) ) ; }
public void onExitedEcmMode ( ) { handleExitedEcmMode ( ) ; }
public static void booted ( ) { synchronized ( sun.misc.VM.lock ) { sun.misc.VM.booted = true ; sun.misc.VM.lock.notifyAll ( ) ; } }
synchronized void nAllocationRead1D ( long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead1D ( mContext , id , off , mip , count , d , sizeBytes , dt.mID ) ; }
public java.lang.Boolean telephonyAdjustPreciseCallStateListenLevel ( java.lang.String type , java.lang.Boolean listen ) { return telephonyAdjustPreciseCallStateListenLevelForSubscription ( type , listen , android.telephony.SubscriptionManager.getDefaultVoiceSubId ( ) ) ; }
public com.android.sched.vfs.VPath clone ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.ArrayList < com.android.sched.vfs.VPath.VPathFragment > clonedList = ( ( java.util.ArrayList < com.android.sched.vfs.VPath.VPathFragment > ) ( pathFragments.clone ( ) ) ) ; return new com.android.sched.vfs.VPath ( clonedList ) ; }
public static boolean supportsVersion ( int version ) { return version >= ( android.net.apf.ApfGenerator.MIN_APF_VERSION ) ; }
public void test_F32_2_SCALE05_05_inSqure ( ) { testResize ( inX , inX , Element.DataType.FLOAT_32 , 2 , 0.5F , 0.5F ) ; }
public com.android.sched.util.print.DataView getDataView ( ) ;
public static int getReleaseCode ( ) { return com.android.jack.test.toolchain.JackApiToolchainBase.releaseCode ; }
public void test_SCSU_replacement_character ( ) throws java.lang.Exception { assertDecodes ( java.nio.charset.Charset.forName ( "SCSU" ) , "�" , 14 , 255 ) ; assertEncodes ( java.nio.charset.Charset.forName ( "SCSU" ) , "�" , 14 , 255 ) ; }
public void binderDied ( ) { foregroundTokenDied ( this ) ; }
public static final native android.os.IHwBinder getService ( java.lang.String serviceName , int versionMajor , int versionMinor ) ;
public abstract com.android.dialer.speeddial.loader.SpeedDialUiItemMutator speedDialUiItemMutator ( ) ;
private static native < A extends java.lang.annotation.Annotation > A getAnnotationNative ( java.lang.reflect.Executable executable , int parameterIndex , java.lang.Class < A > annotationType ) ;
private com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor createTextAttrDesc ( java.lang.String xmlName ) { return new com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor ( xmlName , xmlName , com.android.sdklib.SdkConstants.NS_RESOURCES , "" , new com.android.ide.eclipse.adt.internal.resources.AttributeInfo ( xmlName , new com.android.ide.common.api.IAttributeInfo.Format [ ] { com.android.ide.common.api.IAttributeInfo.Format.STRING } ) ) ; }
java.net.InetAddress [ ] lookupAllHostAddr ( java.lang.String hostname , int netId ) throws java.net.UnknownHostException ;
public void run ( ) { com.android.hierarchyviewerlib.device.Window [ ] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows ( device ) ; com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel ( ) . updateDevice ( device , windows ) ; }
public void onDestroy ( ) { mNM.cancel ( NOTIFICATION ) ; android.widget.Toast.makeText ( this , R.string.local_service_stopped , Toast.LENGTH_SHORT ) . show ( ) ; }
public void writeToFile ( java.io.File file ) throws java.io.IOException { if ( file == null ) { throw new java.lang.NullPointerException ( "file == null" ) ; } java.io.RandomAccessFile outputFile = new java.io.RandomAccessFile ( file , "rw" ) ; writeToDataSink ( new com.android.apksig.internal.util.RandomAccessFileDataSink ( outputFile ) ) ; }
public static java.lang.String getFolderSegment ( int code ) { if ( ( ( code != ( com.android.ide.common.resources.configuration.NetworkCodeQualifier.DEFAULT_CODE ) ) && ( code >= 1 ) ) && ( code <= 999 ) ) { return java.lang.String.format ( java.util.Locale.US , "mnc%1$03d" , code ) ; } return "" ; }
public static int getIntFromObject ( java.lang.Object obj ) { return ( ( int ) ( com.android.jack.java7.boxing.test001.jack.UnBoxObject.getObject ( obj ) ) ) ; }
public java.lang.String toString ( ) { return ( ( ( ( mSourceLocation.print ( true ) ) + ":" ) + ( mPosition.getLine ( ) ) ) + ":" ) + ( mPosition.getColumn ( ) ) ; }
public static void computeExp2 ( android.renderscript.cts.TestExp2.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 16 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.exp2 ( args.inX , t ) ; }
public void exit ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Exit Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; } }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object obj ) { if ( obj instanceof java.util.Set ) { java.util.Set < ? > set = ( ( java.util.Set < ? > ) ( obj ) ) ; return inputSet.keySet ( ) . containsAll ( set ) ; } return false ; }
public void test009 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST009 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.LegacyBasedToolchain.class ) . compileAndRunTest ( ) ; }
public java.util.List < com.android.ide.common.resources.ResourceFolder > getFolders ( @ com.android.annotations.NonNull com.android.resources.ResourceFolderType type ) { ensureInitialized ( ) ; return mFolderMap.get ( type ) ; }
java.lang.String getCallId ( com.android.server.telecom.Call call ) { if ( ( call == null ) || ( ( mCalls.getKey ( call ) ) == null ) ) { return null ; } return mCallInfo.getCallId ( call ) ; }
public void test_U8_2_SCALE05_20_inSquare ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.UNSIGNED_8 , 2 , 0.5F , 2.0F ) ; checkError ( ) ; }
public void dontTestLoadConfigFromXml_Empty ( ) { createManager ( ( ( ( com.android.phone.vvm.omtp.TelephonyVvmConfigManagerTest.XML_HEADER ) + ( com.android.phone.vvm.omtp.TelephonyVvmConfigManagerTest.CARRIER_EMPTY ) ) + ( com.android.phone.vvm.omtp.TelephonyVvmConfigManagerTest.XML_FOOTER ) ) ) ; }
public void postForkChild ( int debugFlags , java.lang.String instructionSet ) { dalvik.system.ZygoteHooks.nativePostForkChild ( token , debugFlags , instructionSet ) ; }
public void testIsInManagedCall ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mFakeCallsManager.hasOngoingManagedCalls ( ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mTSIBinder.isInManagedCall ( com.android.server.telecom.tests.TelecomServiceImplTest.DEFAULT_DIALER_PACKAGE ) ) ; }
private static native void nativePostForkChild ( long token , int runtimeFlags , boolean isSystemServer , java.lang.String instructionSet ) ;
public final < T > M setExtension ( com.google.protobuf.nano.Extension < M , T > extension , T value ) { unknownFieldData = extension.setValueTo ( value , unknownFieldData ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) M typedThis = ( ( M ) ( this ) ) ; return typedThis ; }
public java.lang.Object getParent ( java.lang.Object element ) { if ( element instanceof com.android.hierarchyviewerlib.models.ViewNode ) { return ( ( com.android.hierarchyviewerlib.models.ViewNode ) ( element ) ) . parent ; } return null ; }
public int getVersionCodeFromManifest ( ) { java.io.File manifestLocation = mDefaultSourceProvider.getManifestFile ( ) ; return sManifestParser.getVersionCode ( manifestLocation ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , byte [ ] data ) { validateIsInt8 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_8 , data.length ) ; }
boolean isAllTrue ( ) { return ( ( ( ( code ) && ( resources ) ) && ( rClass ) ) && ( localeList ) ) && ( manifest ) ; }
public static org.bouncycastle.crypto.Digest getSHA512 ( ) { if ( ( org.bouncycastle.crypto.digests.AndroidDigestFactory.CONSCRYPT ) != null ) { try { return org.bouncycastle.crypto.digests.AndroidDigestFactory.CONSCRYPT.getSHA512 ( ) ; } catch ( java.lang.Exception ignored ) { } } return org.bouncycastle.crypto.digests.AndroidDigestFactory.BC.getSHA512 ( ) ; }
public void onStreamMethodUpdated ( int methodType ) { try { listener.streamMethodUpdated ( methodType ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public boolean isMinifyEnabled ( ) { return buildType.isMinifyEnabled ( ) ; }
public boolean hasUnsupportedCritical ( ) { java.lang.Boolean resultHasUnsupported = hasUnsupported ; if ( resultHasUnsupported == null ) { makeOidsLists ( ) ; resultHasUnsupported = hasUnsupported ; } return resultHasUnsupported.booleanValue ( ) ; }
public java.lang.String getLongDescription ( ) { if ( mSource.isEnabled ( ) ) { return mSource.getLongDescription ( ) ; } else { return "Loading from this site has been disabled. " + "To enable it, use Tools > Manage Add-ons Sites." ; } }
public com.android.ide.common.rendering.api.Result insertChild ( java.lang.Object parentView , com.android.ide.common.rendering.api.ILayoutPullParser childXml , int index , com.android.ide.common.rendering.api.IAnimationListener listener ) { return Status.NOT_IMPLEMENTED.createResult ( ) ; }
public void setSortingKey ( java.lang.String sortingKey ) { mSortingKey = sortingKey ; mSortedByName = ZoneGetter.KEY_DISPLAY_LABEL.equals ( sortingKey ) ; }
public static java.lang.String externalShortClassName ( java.lang.String externalClassName ) { int index = externalClassName.lastIndexOf ( JavaConstants.PACKAGE_SEPARATOR ) ; return externalClassName.substring ( ( index + 1 ) ) ; }
public void cleanup ( ) { if ( ( mPhonebook ) != null ) { mPhonebook.cleanup ( ) ; } mAudioParams.clear ( ) ; }
public int getAddressType ( ) { if ( equals ( android.net.MacAddress.BROADCAST_ADDRESS ) ) { return android.net.MacAddress.TYPE_BROADCAST ; } if ( isMulticastAddress ( ) ) { return android.net.MacAddress.TYPE_MULTICAST ; } return android.net.MacAddress.TYPE_UNICAST ; }
public com.android.ide.common.api.Rect set ( org.eclipse.swt.graphics.Rectangle swtRect ) { set ( swtRect.x , swtRect.y , swtRect.width , swtRect.height ) ; return this ; }
public void testGetName ( ) { android.location.LocationProvider locationProvider = mLocationManager.getProvider ( android.location.cts.LocationProviderTest.PROVIDER_NAME ) ; assertEquals ( android.location.cts.LocationProviderTest.PROVIDER_NAME , locationProvider.getName ( ) ) ; }
public void visitLocalVariableTypeInfo ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.Method method , proguard.classfile.util.CodeAttribute codeAttribute , proguard.classfile.util.LocalVariableTypeInfo localVariableTypeInfo ) { localVariableTypeInfo.referencedClasses = findReferencedClasses ( clazz.getName ( ) , localVariableTypeInfo.getSignature ( clazz ) ) ; }
protected void onSelected ( ) { getMainActivity ( ) . getOverlayManager ( ) . showDvrHistoryDialog ( ) ; }
boolean hasWriteObjectData ( ) { requireInitialized ( ) ; return hasWriteObjectData ; }
public com.android.build.gradle.internal.dependency.LibraryDependencyImpl getNonTransitiveRepresentation ( ) { return new com.android.build.gradle.internal.dependency.LibraryDependencyImpl ( getBundle ( ) , getBundleFolder ( ) , java.util.Collections.< com.android.builder.dependency.LibraryDependency > emptyList ( ) , getName ( ) , variantName , getProject ( ) , requestedCoordinates , resolvedCoordinates ) ; }
public static int internalMethodParameterSize ( java.lang.String internalMethodDescriptor , int accessFlags ) { return proguard.classfile.util.ClassUtil.internalMethodParameterSize ( internalMethodDescriptor , ( ( accessFlags & ( ClassConstants.ACC_STATIC ) ) != 0 ) ) ; }
public void init ( org.eclipse.ui.IWorkbench workbench , org.eclipse.jface.viewers.IStructuredSelection selection ) { setHelpAvailable ( false ) ; mInitialProject = guessProject ( selection ) ; mValues.project = mInitialProject ; }
public void setChecked ( boolean checked ) { super . setChecked ( checked ) ; mThumbPosition = ( isChecked ( ) ) ? getThumbScrollRange ( ) : 0 ; invalidate ( ) ; }
public com.android.ahat.heapdump.Field [ ] getInstanceFields ( ) { return getBaseline ( ) . asClassObj ( ) . getInstanceFields ( ) ; }
public void enableIms ( int slotId ) { enforceModifyPermission ( ) ; com.android.internal.telephony.PhoneFactory.getImsResolver ( ) . enableIms ( slotId ) ; }
public static void doRecurCnt ( java.lang.Runnable r , int cnt ) { if ( r != null ) { r.run ( ) ; } if ( cnt != 0 ) { art.Test1934.doRecurCnt ( r , ( cnt - 1 ) ) ; } }
public void doQuit ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "doQuit" ) ; if ( ( mAudioManager ) != null ) { mAudioManager.setParameters ( "hfp_enable=false" ) ; } quitNow ( ) ; }
public void removeLintListener ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.LintListener listener ) { mListeners.remove ( listener ) ; if ( mListeners.isEmpty ( ) ) { mListeners = null ; } }
public V get ( @ javax.annotation.Nullable java.lang.Object key ) { if ( com.google.common.collect.Collections2.safeContains ( backingSet ( ) , key ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) K k = ( ( K ) ( key ) ) ; return function.apply ( k ) ; } else { return null ; } }
public void test_channelWithJoinWithoutSource ( ) throws java.lang.Exception { init ( false ) ; assertEquals ( client , key.channel ( ) ) ; key.drop ( ) ; assertEquals ( client , key.channel ( ) ) ; }
void updateInCallButtonUiColors ( @ android.support.annotation.ColorInt int color ) ;
public boolean matchesObject ( final java.lang.Object arg ) { return android.text.TextUtils.equals ( id , ( ( com.android.messaging.datamodel.data.ConversationListItemData ) ( arg ) ) . getConversationId ( ) ) ; }
public void tearDown ( ) { mAdapterService.unregisterCallback ( mIBluetoothCallback ) ; mAdapterService.cleanup ( ) ; com.android.bluetooth.btservice.Config.init ( android.support.test.InstrumentationRegistry.getTargetContext ( ) ) ; }
public void setEcjExtraArguments ( @ javax.annotation.Nonnull java.util.List < java.lang.String > ecjArguments ) { this . ecjExtraArguments = ecjArguments ; }
private native void gattClientWriteCharacteristicNative ( int connId , int handle , int writeType , int authReq , byte [ ] value ) ;
public com.android.ide.eclipse.gltrace.state.IGLProperty getProperty ( int key ) { com.android.ide.eclipse.gltrace.state.IGLProperty p = mSparseArray.get ( key ) ; if ( ( p == null ) && ( mCreateOnAccess ) ) { add ( key ) ; p = mSparseArray.get ( key ) ; } return p ; }
public void run ( ) { selectionManager.selectDropped ( added ) ; }
public com.intellij.psi.JavaElementVisitor createPsiVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { return new com.android.tools.lint.checks.SupportAnnotationDetector.CallVisitor ( context ) ; }
private void setNavigationIconHints ( int hints ) { if ( hints == ( mNavigationIconHints ) ) return ; mNavigationIconHints = hints ; if ( ( mNavigationBarView ) != null ) { mNavigationBarView.setNavigationIconHints ( hints ) ; } checkBarModes ( ) ; }
public static int $noinline$NegSub1 ( int arg1 , int arg2 ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return - ( arg1 - arg2 ) ; }
public boolean contains ( java.lang.String key ) { return contains ( android.security.KeyStore.getKeyBytes ( key ) ) ; }
public void test_F32_1_SCALE20_05_inSqure ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.FLOAT_32 , 1 , 2.0F , 0.5F ) ; checkError ( ) ; }
public void addValue ( com.android.ide.common.rendering.api.AttrResourceValue attr ) { if ( ( mAttrMap ) == null ) { mAttrMap = new java.util.LinkedHashMap < java.lang.String , com.android.ide.common.rendering.api.AttrResourceValue > ( ) ; } mAttrMap.put ( attr.getName ( ) , attr ) ; }
public void logInteraction ( android.content.Context context ) { com.android.dialer.logging.Logger.get ( context ) . logImpression ( DialerImpression.Type.DUO_CALL_LOG_INVITE ) ; }
public void inRootUpdatesRef ( ) { initInteraction ( ) ; org.hamcrest.Matcher < android.support.test.espresso.Root > testMatcher = org.hamcrest.Matchers.nullValue ( android.support.test.espresso.Root.class ) ; testInteraction.inRoot ( testMatcher ) ; org.junit.Assert.assertEquals ( testMatcher , rootMatcherRef.get ( ) ) ; }
public static com.android.ide.common.repository.GradleCoordinate.ArtifactType getArtifactType ( @ com.android.annotations.Nullable java.lang.String name ) { if ( name != null ) { for ( com.android.ide.common.repository.GradleCoordinate.ArtifactType type : com.android.ide.common.repository.GradleCoordinate.ArtifactType.values ( ) ) { if ( type.mId.equalsIgnoreCase ( name ) ) { return type ; } } } return null ; }
public boolean generate ( java.lang.String key ) { try { return ( mBinder.generate ( key ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public void binderDied ( ) { if ( com.android.bluetooth.gatt.AdvertiseManager.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.AdvertiseManager.TAG , "Binder is dead - unregistering advertising set" ) ; stopAdvertisingSet ( callback ) ; }
public static native int getGlobal ( ) ;
public static native int ENGINE_ctrl_cmd_string ( long engineRef , java.lang.String cmd , java.lang.String arg , int cmd_optional ) ;
public void test_getDisplayName ( ) { assertEquals ( "English (Canada,WIN32)" , new java.util.Locale ( "en" , "CA" , "WIN32" ) . getDisplayName ( ) ) ; }
public java.lang.String [ ] getDigests ( ) { if ( ( mDigests ) == null ) { throw new java.lang.IllegalStateException ( "Digests not specified" ) ; } return android.security.ArrayUtils.cloneIfNotEmpty ( mDigests ) ; }
void onIncomingPostCallData ( @ android.support.annotation.NonNull android.content.BroadcastReceiver.PendingResult pendingResult , long sessionId , @ android.support.annotation.NonNull com.android.dialer.multimedia.MultimediaData multimediaData ) ;
public void TestNumberFormatTestDataToString ( ) { new com.ibm.icu.dev.test.format.NumberFormatTestData ( ) . toString ( ) ; }
public void testDependenciesMinSdkVersion ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( "" + ( ( ( "build.gradle:13: Warning: Using the appcompat library when minSdkVersion >= 14 and compileSdkVersion < 21 is not necessary [GradleDependency]\n" + " compile \'com.android.support:appcompat-v7:+\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( "gradle/Dependencies14.gradle=>build.gradle" ) ) ; }
private libcore.tzdata.shared2.DistroVersion createDistroVersion ( int majorFormatVersion , int minorFormatVersion ) throws libcore.tzdata.shared2.DistroException { return new libcore.tzdata.shared2.DistroVersion ( majorFormatVersion , minorFormatVersion , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , 3 ) ; }
protected void datagramSocketClose ( ) { try { libcore.io.IoBridge.closeAndSignalBlockedThreads ( fd ) ; } catch ( java.io.IOException ignored ) { } }
public void reopenTls ( ) { com.android.email.mail.transport.SmtpSenderUnitTests.assertTrue ( mOpen ) ; com.android.email.mail.transport.SmtpSenderUnitTests.assertTrue ( mTlsAllowed ) ; mTlsReopened = true ; }
static int getDescriptor ( long address ) { return sun.nio.ch.KQueue.unsafe.getInt ( ( address + ( sun.nio.ch.KQueue.OFFSET_IDENT ) ) ) ; }
public void parseAndKeepRawInput ( java.lang.CharSequence numberToParse , java.lang.String defaultRegion , com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber ) throws com.google.i18n.phonenumbers.NumberParseException { parseHelper ( numberToParse , defaultRegion , true , true , phoneNumber ) ; }
public final java.nio.charset.CharsetDecoder onMalformedInput ( java.nio.charset.CodingErrorAction newAction ) { if ( newAction == null ) { throw new java.lang.IllegalArgumentException ( "newAction == null" ) ; } malformedInputAction = newAction ; implOnMalformedInput ( newAction ) ; return this ; }
public int getCarrierPrivilegeStatus ( android.content.pm.PackageInfo packageInfo ) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules ( ) ; return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus ( packageInfo ) ; }
public void setup ( ) { put ( "Signature.FOO" , MockSignatureSpi.SpecificKeyTypes2.class . getName ( ) ) ; put ( "Signature.FOO SupportedKeyClasses" , libcore.java.security.MockPrivateKey2.class . getName ( ) ) ; }
public native T newInstance ( java.lang.Object [ ] args , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException , java.lang.InstantiationException , java.lang.reflect.InvocationTargetException ;
public boolean isBackgroundNetwork ( ) { return ( ( ( ! ( isVPN ( ) ) ) && ( ( numForegroundNetworkRequests ( ) ) == 0 ) ) && ( ( mNumBackgroundNetworkRequests ) > 0 ) ) && ( ! ( isLingering ( ) ) ) ; }
public boolean tearDown ( ) { if ( ! ( mWificondControl.tearDownInterfaces ( ) ) ) { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "Failed to teardown interfaces from Wificond" ) ; return false ; } stopHal ( ) ; return true ; }
public com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor getDescriptor ( java.lang.String xmlLocalName ) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor unknown = mUnknownDescriptorMap.get ( xmlLocalName ) ; if ( unknown == null ) { unknown = createUnknownDescriptor ( xmlLocalName ) ; mUnknownDescriptorMap.put ( xmlLocalName , unknown ) ; } return unknown ; }
public java.lang.reflect.Type [ ] getGenericExceptionTypes ( ) { return libcore.reflect.Types.getTypeArray ( getMethodOrConstructorGenericInfoInternal ( ) . genericExceptionTypes , false ) ; }
public void run ( ) { onVisibilityChanged ( changedView , visibility ) ; }
private org.chromium.android_webview.AwBrowserContext getBrowserContextLocked ( ) { assert java.lang.Thread.holdsLock ( mLock ) ; assert mStarted ; if ( ( mBrowserContext ) == null ) { mBrowserContext = new org.chromium.android_webview.AwBrowserContext ( mWebViewPrefs ) ; } return mBrowserContext ; }
public void testAtSignInUserInfo ( ) throws java.lang.Exception { try { new java.net.URL ( "http://user@userhost.com:password@host" ) ; fail ( ) ; } catch ( java.net.MalformedURLException expected ) { } }
public java.util.Set < java.util.Map.Entry < K , V > > entrySet ( ) { java.util.concurrent.ConcurrentHashMap.EntrySetView < K , V > es ; return ( es = entrySet ) != null ? es : ( entrySet = new java.util.concurrent.ConcurrentHashMap.EntrySetView < K , V > ( this ) ) ; }
public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder withName ( @ com.android.annotations.NonNull java.lang.String name ) { this . name = name ; return this ; }
public android.content.Intent getIntent ( android.content.Context context ) { return com.android.dialer.duo.DuoComponent.get ( context ) . getDuo ( ) . getActivateIntent ( ) . orNull ( ) ; }
public static native void registerAppInfo ( java.lang.String packageName , java.lang.String appDir , java.lang.String [ ] codePaths ) ;
protected java.util.Set < java.lang.String > getDefaultValues ( ) { java.util.Set < java.lang.String > values = com.google.common.collect.Sets.newHashSet ( ) ; for ( com.android.build.gradle.internal.core.Abi abi : com.android.build.gradle.internal.NdkHandler.getAbiList ( ) ) { values.add ( abi.getName ( ) ) ; } return values ; }
void call ( com.google.common.util.concurrent.Service.Listener listener ) { listener.failed ( from , cause ) ; }
public void run ( ) { setOverScrollMode ( mode ) ; }
public void setAutoPadding ( boolean useAutoPadding ) { mAutoPadding = useAutoPadding ; }
public boolean generalize ( proguard.evaluation.TracedStack other ) { return ( ( super . generalize ( other ) ) | ( producerStack.generalize ( other.producerStack ) ) ) | ( actualProducerStack.generalize ( other.actualProducerStack ) ) ; }
public static java.lang.String getProperty ( java.lang.String name , java.lang.String defaultValue ) { java.lang.System.checkPropertyName ( name ) ; return java.lang.System.systemProperties.getProperty ( name , defaultValue ) ; }
protected void resetRecords ( ) { mIsimImpi = null ; mIsimDomain = null ; mIsimImpu = null ; mIsimIst = null ; mIsimPcscf = null ; auth_rsp = null ; mRecordsRequested = false ; mLockedRecordsReqReason = LOCKED_RECORDS_REQ_REASON_NONE ; }
public static native byte [ ] i2d_X509_REVOKED ( long x509RevokedCtx ) ;
native long rsnScriptIntrinsicCreate ( long con , int id , long eid , boolean mUseInc ) ;
public void run ( ) { goBackOrForward ( steps ) ; }
public com.android.sdklib.BuildToolInfo getBuildTool ( @ com.android.annotations.Nullable com.android.sdklib.repository.FullRevision revision ) { com.android.sdklib.repository.local.LocalPkgInfo pkg = getPkgInfo ( PkgType.PKG_BUILD_TOOLS , revision ) ; if ( pkg instanceof com.android.sdklib.repository.local.LocalBuildToolPkgInfo ) { return ( ( com.android.sdklib.repository.local.LocalBuildToolPkgInfo ) ( pkg ) ) . getBuildToolInfo ( ) ; } return null ; }
public java.lang.String getDisplayName ( ) { return icuCurrency.getDisplayName ( ) ; }
public boolean p2pReject ( java.lang.String deviceAddress ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.reject ( deviceAddress ) ; } else { return doBooleanCommand ( ( "P2P_REJECT " + deviceAddress ) ) ; } }
public void postForkChild ( int debugFlags , java.lang.String instructionSet ) { dalvik.system.ZygoteHooks.nativePostForkChild ( token , debugFlags , instructionSet ) ; java.lang.Math.setRandomSeedInternal ( java.lang.System.currentTimeMillis ( ) ) ; }
protected void tearDown ( ) throws java.lang.Exception { mLocationManager.removeTestProvider ( android.location.cts.LocationProviderTest.PROVIDER_NAME ) ; super . tearDown ( ) ; }
void expectCapabilitiesWithout ( int capability , com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { com.android.server.ConnectivityServiceTest.CallbackInfo cbi = expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES , agent ) ; android.net.NetworkCapabilities nc = ( ( android.net.NetworkCapabilities ) ( cbi.arg ) ) ; org.junit.Assert.assertFalse ( nc.hasCapability ( capability ) ) ; }
public boolean imsIsVolteProvisionedOnDevice ( ) { return mImsManager.isVolteProvisionedOnDeviceForSlot ( ) ; }
public synchronized void setSoTimeout ( int readTimeoutMilliseconds ) throws java.net.SocketException { if ( ( socket ) != ( this ) ) { socket.setSoTimeout ( readTimeoutMilliseconds ) ; } else { super . setSoTimeout ( readTimeoutMilliseconds ) ; } this . readTimeoutMilliseconds = readTimeoutMilliseconds ; }
public void annotate ( com.android.dex.util.ExceptionWithContext ex ) { locals.annotate ( ex ) ; stack.annotate ( ex ) ; }
public void setInputSources ( @ javax.annotation.Nonnull java.util.List < java.io.File > inputSources ) { this . inputSources = inputSources ; }
public java.lang.CharSequence get ( int index ) { if ( ( ( appendTo ) == null ) || ( ( appendTo ) != ( values [ index ] ) ) ) { return values [ index ] ; } return appendToCopy ; }
protected void execute ( org.eclipse.core.runtime.IProgressMonitor monitor ) throws java.lang.reflect.InvocationTargetException { createProjectAsync ( monitor , mainData , testData , null , false ) ; }
public void getAllArrayItemsWithFallback ( java.lang.String path , android.icu.impl.UResource.ArraySink sink ) throws java.util.MissingResourceException { getAllItemsWithFallback ( path , null , sink , null ) ; }
public void setBackgroundColor ( int color ) { if ( ( mBGDrawable ) instanceof android.graphics.drawable.ColorDrawable ) { ( ( android.graphics.drawable.ColorDrawable ) ( mBGDrawable ) ) . setColor ( color ) ; } else { setBackgroundDrawable ( new android.graphics.drawable.ColorDrawable ( color ) ) ; } }
static com.android.internal.telephony.gsm.GsmMmiCode newFromUssdUserInput ( java.lang.String ussdMessge , com.android.internal.telephony.gsm.GSMPhone phone , com.android.internal.telephony.uicc.UiccCardApplication app ) { com.android.internal.telephony.gsm.GsmMmiCode ret = new com.android.internal.telephony.gsm.GsmMmiCode ( phone , app ) ; ret.message = ussdMessge ; ret.state = State.PENDING ; ret.isPendingUSSD = true ; return ret ; }
private native java.lang.reflect.Constructor < ? > [ ] getDeclaredConstructorsInternal ( boolean publicOnly ) ;
private static boolean isValidCapability ( @ android.net.NetworkCapabilities.NetCapability int capability ) { return ( capability >= ( android.net.NetworkCapabilities.MIN_NET_CAPABILITY ) ) && ( capability <= ( android.net.NetworkCapabilities.MAX_NET_CAPABILITY ) ) ; }
public void load ( java.lang.String filename ) { load0 ( dalvik.system.VMStack.getStackClass1 ( ) , filename ) ; }
public void sendMessage ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , com.example.android.multiproject.library.ShowPeopleActivity.class ) ; startActivity ( intent ) ; }
public void setPeriodicAdvertisingData ( android.bluetooth.le.AdvertiseData periodicData ) { try { gatt.setPeriodicAdvertisingData ( this . advertiserId , periodicData ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.le.AdvertisingSet.TAG , "remote exception - " , e ) ; } }
native void rsnAllocationRead ( int con , int id , java.lang.Object d , int dt ) ;
public com.android.ddmlib.RawImage getScreenshot ( ) throws java.io.IOException { return com.android.ddmlib.AdbHelper.getFrameBuffer ( com.android.ddmlib.AndroidDebugBridge.getSocketAddress ( ) , this ) ; }
public void onUiShowing ( boolean showing ) { if ( showing ) { hide ( ) ; } else { if ( com.android.dialer.telecom.TelecomUtil.isInManagedCall ( context ) ) { show ( ) ; } } }
public void setWebContentsDebuggingEnabled ( boolean enable ) { if ( ! ( com.android.webview.chromium.WebViewChromiumFactoryProvider.isBuildDebuggable ( ) ) ) { this . setWebContentsDebuggingEnabled ( enable ) ; } }
public static boolean setEnabled ( com.android.tv.menu.MenuAction action , boolean enabled ) { boolean changed = ( action.mEnabled ) != enabled ; action.mEnabled = enabled ; return changed ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { reloadSkinCombo ( ) ; validatePage ( ) ; }
private void testScriptSide ( android.renderscript.RenderScript pRS ) { com.android.rs.test.ScriptC_sampler s = new com.android.rs.test.ScriptC_sampler ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_sampler_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; }
java.util.Collection < java.io.File > getCDirectories ( ) ;
private static android.net.wifi.hotspot2.pps.Credential createCredentialWithSimCredential ( ) { android.net.wifi.hotspot2.pps.Credential.SimCredential simCred = new android.net.wifi.hotspot2.pps.Credential.SimCredential ( ) ; simCred.imsi = "1234*" ; simCred.eapType = android.net.wifi.EAPConstants.EAP_SIM ; return android.net.wifi.hotspot2.pps.CredentialTest.createCredential ( null , null , simCred , null , null , null ) ; }
public void test_RSA_public_encrypt_null_key_Failure ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.RSA_public_encrypt ( 0 , new byte [ 0 ] , new byte [ 0 ] , org.conscrypt.NativeCryptoTest.NULL_EVP_PKEY , 0 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public char [ ] getDigits ( ) { return digits.clone ( ) ; }
private static org.chromium.base.SystemMessageHandler create ( long messagePumpDelegateNative , long messagePumpNative ) { return new org.chromium.base.SystemMessageHandler ( messagePumpDelegateNative , messagePumpNative ) ; }
static com.android.sched.vfs.VPath getFilePath ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { return new com.android.sched.vfs.VPath ( ( ( com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter ( ) . getName ( type ) ) + ( BinaryKind.DEX.getFileExtension ( ) ) ) , '/' ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { if ( ( mReceiver ) != null ) { mReceiver.clearMessages ( ) ; refreshLogCatTable ( ) ; mRemovedEntriesCount = 0 ; updateAppliedFilters ( ) ; } }
public com.android.build.gradle.internal.variant.TestVariantData getTestVariantData ( @ com.android.annotations.NonNull com.android.builder.core.VariantType type ) { return testVariants.get ( type ) ; }
public int getRandomFoo ( ) { java.util.Random r = new java.util.Random ( java.lang.System.currentTimeMillis ( ) ) ; return r.nextInt ( com.android.tests.basicJavaProject.Foo.FOO ) ; }
void onContactsListScrolled ( boolean isDragging ) ;
public final void init ( java.security.Key key , java.security.spec.AlgorithmParameterSpec params ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { getSpi ( key ) . engineInit ( key , params , javax.crypto.KeyAgreement.RANDOM ) ; }
java.io.InputStream openRead ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file ) throws com.android.sched.util.file.WrongPermissionException { return new java.util.zip.InflaterInputStream ( vfs.openRead ( file.getWrappedFile ( ) ) , new java.util.zip.Inflater ( ) ) ; }
public void postResponseCallsDeliverResponse ( ) { mDelivery.postResponse ( mRequest , mSuccessResponse ) ; org.junit.Assert.assertTrue ( mRequest.deliverResponse_called ) ; org.junit.Assert.assertFalse ( mRequest.deliverError_called ) ; }
public void testReadShareStoreContainedUnknownData ( ) throws java.lang.Exception { java.lang.String storeFileData = "<?xml version=\'1.0\' encoding=\'utf-8\' standalone=\'yes\' ?>\n" + ( ( ( ( "<WifiConfigStoreData>\n" + "<int name=\"Version\" value=\"1\" />\n" ) + "<UnknownTag>\n" ) + "</UnknownTag>\n" ) + "</WifiConfigStoreData>\n" ) ; mSharedStore.storeRawDataToWrite ( storeFileData.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ) ; mWifiConfigStore.read ( ) ; }
public void run ( ) { mActivity.addErrorToDropBox ( "watchdog" , null , "system_server" , null , null , name , null , stack , null ) ; }
void registerForModemReset ( android.os.Handler h , int what , java.lang.Object obj ) ;
public static java.lang.String encode ( java.lang.String s ) { return java.net.URLEncoder.ENCODER.encode ( s , java.nio.charset.StandardCharsets.UTF_8 ) ; }
public static void assertSSLEngineDefaultProtocols ( java.lang.String [ ] protocols ) { libcore.java.security.StandardNames.assertValidProtocols ( protocols ) ; libcore.java.security.StandardNames.assertSupportedProtocols ( libcore.java.security.StandardNames.SSL_SOCKET_PROTOCOLS_CLIENT_DEFAULT , protocols ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { sortPackages ( true ) ; expandInitial ( mCategories ) ; }
public long getTagBits ( ) { long tagBits = com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits ( jMethod ) ; if ( jMethod.hasPolymorphicSignature ( ) ) { tagBits |= org.eclipse.jdt.internal.compiler.lookup.TagBits.AnnotationPolymorphicSignature ; } return tagBits ; }
public void testE3 ( ) { loadAndRun ( "dot.junit.opcodes.instance_of.d.T_instance_of_7" , java.lang.NoClassDefFoundError.class ) ; }
public long getTotalSpace ( ) { try { libcore.io.StructStatVfs sb = Libcore.os.statvfs ( path ) ; return ( sb.f_blocks ) * ( sb.f_bsize ) ; } catch ( libcore.io.ErrnoException errnoException ) { return 0 ; } }
public void setNetworkOperatorNumeric ( java.lang.String numeric ) { int phoneId = getPhoneId ( ) ; setNetworkOperatorNumericForPhone ( phoneId , numeric ) ; }
protected void setUp ( ) throws java.io.UnsupportedEncodingException { java.io.InputStream propertiesStream = new java.io.ByteArrayInputStream ( "p1=one\np2=two" . getBytes ( "ISO-8859-1" ) ) ; try { tests.api.java.util.PropertyResourceBundleTest.prb = new java.util.PropertyResourceBundle ( propertiesStream ) ; } catch ( java.io.IOException e ) { fail ( "Construction of PropertyResourceBundle threw IOException" ) ; } }
public void requestingPermission ( ) { com.android.dialer.common.LogUtil.enterBlock ( "MainSearchController.requestingPermission" ) ; requestingPermission = true ; }
public java.lang.String telephonyGetNetworkType ( ) { com.googlecode.android_scripting.Log.d ( ( "sl4a:getNetworkType() is deprecated!" + ( "Please use getVoiceNetworkType()" + " or getDataNetworkTpe()" ) ) ) ; return telephonyGetNetworkTypeForSubscription ( android.telephony.SubscriptionManager.getDefaultSubId ( ) ) ; }
public java.lang.Object getLayoutParamsObject ( ) { return mLayoutParamsObject ; }
private void bindToScoringServiceIfNeeded ( ) { if ( com.android.server.NetworkScoreService.DBG ) android.util.Log.d ( com.android.server.NetworkScoreService.TAG , "bindToScoringServiceIfNeeded" ) ; android.net.NetworkScorerAppManager.NetworkScorerAppData scorerData = mNetworkScorerAppManager.getActiveScorer ( ) ; bindToScoringServiceIfNeeded ( scorerData ) ; }
public int getMaxConnectedAudioDevices ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return AdapterProperties.MAX_CONNECTED_AUDIO_DEVICES_LOWER_BOND ; } return service.getMaxConnectedAudioDevices ( ) ; }
public void destroyAppProfiles ( java.lang.String packageName ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.destroyAppProfiles ( packageName ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public static android.telephony.MbmsDownloadManager create ( android.content.Context context , android.telephony.mbms.MbmsDownloadManagerCallback listener , int subscriptionId ) throws android.telephony.mbms.MbmsException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager ( context , listener , subscriptionId ) ; mdm.bindAndInitialize ( ) ; return mdm ; }
public native double getDouble ( java.lang.Object obj ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
android.app.PendingIntent getPrivateBroadcast ( java.lang.String action , int requestCode ) { android.content.Intent intent = new android.content.Intent ( action , null ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; intent.setPackage ( "android" ) ; return mFacade.getBroadcast ( mContext , requestCode , intent , 0 ) ; }
public static native long SSL_clear_options ( long ssl , long options ) ;
public java.lang.String getShortDescription ( ) { return java.lang.String.format ( "%1$s, Android API %2$s, revision %3$s%4$s" , getDisplayName ( ) , mVersion.getApiString ( ) , getRevision ( ) . toShortString ( ) , ( isObsolete ( ) ? " (Obsolete)" : "" ) ) ; }
public void notifyDataActivationStateChanged ( com.android.internal.telephony.Phone sender , int activationState ) { try { mRegistry.notifySimActivationStateChangedForPhoneId ( sender.getPhoneId ( ) , sender.getSubId ( ) , PhoneConstants.SIM_ACTIVATION_TYPE_DATA , activationState ) ; } catch ( android.os.RemoteException ex ) { } }
public static int getLevel ( int fullState ) { return fullState & ( com.android.settingslib.graph.SignalDrawable.LEVEL_MASK ) ; }
public java.util.Iterator < T > iterator ( ) { int toSkip = java.lang.Math.min ( list.size ( ) , numberToSkip ) ; return list.subList ( toSkip , list.size ( ) ) . iterator ( ) ; }
public static void dumpDisplayList ( @ com.android.annotations.NonNull com.android.ddmlib.Client client , @ com.android.annotations.NonNull java.lang.String viewRoot , @ com.android.annotations.NonNull java.lang.String view ) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendViewOpPacket ( client , com.android.ddmlib.HandleViewDebug.VUOP_DUMP_DISPLAYLIST , viewRoot , view , null , com.android.ddmlib.HandleViewDebug.sViewOpNullChunkHandler ) ; }
synchronized void nAllocationRead ( long id , java.lang.Object d , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationRead ( mContext , id , d , dt.mID , mSize , usePadding ) ; }
public org.junit.runners.model.Statement apply ( org.junit.runners.model.Statement base , org.junit.rules.Description description ) { return new org.junit.rules.ExpectedException.ExpectedExceptionStatement ( base ) ; }
public void setCallWaiting ( boolean enable , android.os.Message onComplete ) { android.telephony.Rlog.e ( com.android.internal.telephony.sip.SipPhoneBase.LOG_TAG , "call waiting not supported" ) ; }
private boolean result ( java.lang.String testName , final com.android.rs.test.UT_reduce.timing t , final int [ ] javaResult , final int [ ] rsResult ) { return result ( testName , t , intArrayToLong ( javaResult ) , intArrayToLong ( rsResult ) ) ; }
public boolean setOperatorBrandOverride ( int subId , java.lang.String brand ) { com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfCarrierPrivilege ( subId , "setOperatorBrandOverride" ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; return phone == null ? false : phone.setOperatorBrandOverride ( brand ) ; }
public void setWarnIfHeld ( java.lang.Object warnIfHeld ) { mInstaller.setWarnIfHeld ( warnIfHeld ) ; mWarnIfHeld = warnIfHeld ; }
public boolean restorePicture ( android.os.Bundle b , java.io.File src ) { checkThread ( ) ; if ( android.webkit.WebView.TRACE ) android.util.Log.d ( android.webkit.WebView.LOGTAG , ( "restorePicture=" + ( src.getName ( ) ) ) ) ; return mProvider.restorePicture ( b , src ) ; }
public void getIccSlotsStatus ( android.os.Message result ) { }
protected void engineInit ( byte [ ] params , java.lang.String format ) throws java.io.IOException { if ( ! ( isASN1FormatString ( format ) ) ) { throw new java.io.IOException ( "unknown format specified" ) ; } gcmParams = org.bouncycastle.asn1.cms.GCMParameters.getInstance ( params ) ; }
public java.util.Collection < com.android.ddmlib.IDevice > getLaunchingCloudDevices ( ) { synchronized ( com.google.gct.testing.CloudConfigurationProviderImpl.ghostCloudDevices ) { java.util.HashSet < com.android.ddmlib.IDevice > launchingCloudDevices = com.google.api.client.util.Sets.newHashSet ( ) ; launchingCloudDevices.addAll ( com.google.gct.testing.CloudConfigurationProviderImpl.ghostCloudDevices ) ; return launchingCloudDevices ; } }
public void testDecode_empty ( ) throws java.lang.Exception { byte [ ] decoded = libcore.io.Base64.decode ( new byte [ 0 ] ) ; assertEquals ( 0 , decoded.length ) ; }
public static java.net.InetAddress [ ] getAllByNameOnNet ( java.lang.String host , int netId ) throws java.net.UnknownHostException { return java.net.InetAddress.impl.lookupAllHostAddr ( host , netId ) . clone ( ) ; }
public void copy1DRangeFrom ( int off , int count , float [ ] d ) { validateIsFloat32 ( ) ; copy1DRangeFromUnchecked ( off , count , d , Element.DataType.FLOAT_32 , d.length ) ; }
long size ( java.io.FileDescriptor fd ) throws java.io.IOException { dalvik.system.BlockGuard.getThreadPolicy ( ) . onReadFromDisk ( ) ; return sun.nio.ch.FileDispatcherImpl.size0 ( fd ) ; }
public static native byte [ ] SSL_get_tls_channel_id ( long ssl ) throws javax.net.ssl.SSLException ;
private void forEachNonSubBlockDepthFirst ( int firstLabel , com.android.dx.rop.code.BasicBlock.Visitor v ) { forEachNonSubBlockDepthFirst0 ( labelToBlock ( firstLabel ) , v , new java.util.BitSet ( maxLabel ) ) ; }
public int settingsSecureGetIntForUser ( java.lang.String key , int def , int userId ) { return Settings.Secure.getIntForUser ( mContext.getContentResolver ( ) , key , def , userId ) ; }
protected java.lang.Object make ( java.lang.Object o ) { com.sun.javadoc.PackageDoc p = ( ( com.sun.javadoc.PackageDoc ) ( o ) ) ; return new com.google.doclava.PackageInfo ( p , p.name ( ) , com.google.doclava.Converter.convertSourcePosition ( p.position ( ) ) ) ; }
protected boolean cleanup ( ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , "cleanup()" ) ; } if ( mNativeAvailable ) { mHidDeviceNativeInterface.cleanup ( ) ; mNativeAvailable = false ; } return true ; }
public void onStreamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) { }
public java.util.Map < java.lang.String , java.lang.String > getTestInstrumentationRunnerArguments ( ) { return com.google.common.collect.Maps.newHashMap ( ) ; }
private void createIndices ( android.database.sqlite.SQLiteDatabase db ) { createThreadIdIndex ( db ) ; createThreadIdDateIndex ( db ) ; }
public void throwPending ( ) throws com.android.sched.scheduler.ProcessException , java.lang.AssertionError { }
java.util.Set < java.lang.String > getSupportedRegions ( ) { return com.google.i18n.phonenumbers.MetadataManager.getSupportedShortNumberRegions ( ) ; }
private javax.swing.JButton createToolbarButton ( com.android.chimpchat.core.PhysicalButton hardButton ) { javax.swing.JButton button = new javax.swing.JButton ( new com.android.monkeyrunner.controller.MonkeyControllerFrame.PressAction ( hardButton ) ) ; button.setText ( hardButton.getKeyName ( ) ) ; return button ; }
public boolean isVideoCall ( ) { return android.telecom.VideoProfile.isVideo ( android.telephony.ims.ImsCallProfile.getVideoStateFromCallType ( mCallType ) ) ; }
java.lang.String getDefaultBrowserPackageNameLPw ( int userId ) { return userId == ( android.os.UserHandle.USER_ALL ) ? null : mDefaultBrowserApp.get ( userId ) ; }
public void resetResolvedPadding ( ) { mPrivateFlags2 &= ~ ( android.view.View.PFLAG2_PADDING_RESOLVED ) ; }
public void test_F32_3_SCALE10_10_inSqure ( ) { testResize ( inX , inX , Element.DataType.FLOAT_32 , 3 , 1.0F , 1.0F ) ; }
private java.lang.String getCaptivePortalServerHttpsUrl ( ) { return mSettings.getSetting ( mContext , Settings.Global.CAPTIVE_PORTAL_HTTPS_URL , com.android.server.connectivity.NetworkMonitor.DEFAULT_HTTPS_URL ) ; }
public java.util.List < java.io.File > getInputSources ( ) { return ( inputSources ) == null ? java.util.Collections.< java.io.File > emptyList ( ) : inputSources ; }
public void onClick ( android.view.View v ) { android.widget.ImageView view1 = ( ( android.widget.ImageView ) ( findViewById ( R.id.img1 ) ) ) ; setAlarm ( ) ; view1.setImageResource ( R.drawable.fs_good ) ; }
public void fatalError ( org.xml.sax.SAXParseException e ) { log.error ( Severity.ERROR , new com.android.manifmerger.IMergerLog.FileAndLine ( xmlFile.getAbsolutePath ( ) , 0 ) , "Fatal error when parsing: %1$s" , xmlFile.getName ( ) , e.toString ( ) ) ; }
public void testInstall_withMissingBundleVersionFile ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , 1 ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE , installer.installWithErrorCode ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public static long LongSubtraction ( ) { long a ; long b ; long c ; a = Main.$inline$long ( 6L ) ; b = Main.$inline$long ( 2L ) ; c = a - b ; return c ; }
public abstract int runJUnit ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.Nonnull java.lang.String jUnitRunnerName , @ javax.annotation.Nonnull java.lang.String [ ] jUnitTestClasses , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) throws com.android.jack.test.runner.RuntimeRunnerException ;
protected byte [ ] engineDoFinal ( ) { final org.conscrypt.OpenSSLDigestContext ctxLocal = ctx ; final byte [ ] output = org.conscrypt.NativeCrypto.EVP_DigestSignFinal ( ctxLocal ) ; resetContext ( ) ; return output ; }
public java.lang.String toString ( ) { return descriptor.getString ( ) ; }
private void createLogger ( ) { mSdkLog = new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ; }
public java.util.List < com.android.build.gradle.internal.dependency.SymbolFileProviderImpl > call ( ) throws java.lang.Exception { return com.android.build.gradle.tasks.ProcessAndroidResources.ConfigAction.getTextSymbolDependencies ( config.getAllLibraries ( ) ) ; }
public void run ( ) { startInputInner ( startInputReason , null , 0 , 0 , 0 ) ; }
private boolean querySoundEffectsEnabled ( int user ) { return ( Settings.System.getIntForUser ( getContext ( ) . getContentResolver ( ) , Settings.System.SOUND_EFFECTS_ENABLED , 0 , user ) ) != 0 ; }
private native void dumpNative ( java.io.FileDescriptor fd , java.lang.String [ ] arguments ) ;
static void freeNativeStorage ( int nativeDataPtr , java.util.concurrent.CountDownLatch freeSignal ) { java.lang.System.out.println ( ( "freeNativeStorage: " + nativeDataPtr ) ) ; freeSignal.countDown ( ) ; }
public static int $noinline$intSubAddSimplifyRight ( int x , int y ) { int sub = x - y ; return y + sub ; }
private static java.lang.String getComponentName ( ) { return "com.android.dialer.app.DialtactsActivity" ; }
public void testLamba044_whole ( ) throws java.lang.Exception { java.io.File lib = makeLibrary ( new java.io.File [ ] { } , TEST001.directory ) ; test ( TEST001.jUnit , lib ) ; }
protected java.util.Properties createExpectedProps ( ) { java.util.Properties props = super . createExpectedProps ( ) ; props.setProperty ( PkgProps.VERSION_API_LEVEL , "5" ) ; props.setProperty ( PkgProps.PLATFORM_VERSION , "android-5" ) ; props.setProperty ( PkgProps.PLATFORM_INCLUDED_ABI , "armeabi" ) ; return props ; }
public static short $noinline$shortToCharToShort ( short value ) { return ( ( short ) ( ( char ) ( value ) ) ) ; }
public static com.android.server.pm.OtaDexoptService main ( android.content.Context context , com.android.server.pm.PackageManagerService packageManagerService ) { com.android.server.pm.OtaDexoptService ota = new com.android.server.pm.OtaDexoptService ( context , packageManagerService ) ; android.os.ServiceManager.addService ( "otadexopt" , ota ) ; ota.moveAbArtifacts ( packageManagerService.mInstaller ) ; return ota ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_BOOT_COMPLETED ) ; }
public void notifyImsFeatureReady ( int slotId , int featureType ) throws android.os.RemoteException { }
public com.android.ide.common.resources.platform.AttributeInfo [ ] getAttributes ( ) { return mAttributes ; }
public boolean isDeviceManaged ( ) { try { return mService.hasDeviceOwner ( ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } }
public void removeRange ( int start , int end ) { super . removeRange ( start , end ) ; }
public android.view.View findViewById ( int id ) ;
public org.w3c.dom.Node toXml ( org.w3c.dom.Document document ) { org.w3c.dom.Element location = document.createElement ( "source" ) ; location.setAttribute ( "name" , mName ) ; location.setAttribute ( "scheme" , "file://" ) ; location.setAttribute ( "value" , mFile.getAbsolutePath ( ) ) ; return location ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { userNewOrEdit ( false ) ; }
public java.io.Writer append ( char c ) { return this ; }
public void run ( ) { canRestart [ 0 ] = org.eclipse.jface.dialogs.MessageDialog.openQuestion ( getWindowShell ( ) , "ADB Restart" , ( "A package that depends on ADB has been updated. It is recommended " + ( "to restart ADB. Is it OK to do it now? If not, you can restart it " + "manually later." ) ) ) ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.internal.telephony.cat.CommandParamsFactory.MSG_ID_LOAD_ICON_DONE : if ( ( mIconLoader ) != null ) { sendCmdParams ( setIcons ( msg.obj ) ) ; } break ; } }
public void testMakeTimeZone_found ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = ZoneInfoDB.TzData.loadTzData ( libcore.util.ZoneInfoDBTest.SYSTEM_TZDATA_FILE ) ; assertNotNull ( data.makeTimeZone ( "Europe/London" ) ) ; assertTrue ( data.hasTimeZone ( "Europe/London" ) ) ; }
private int getSlotIdFromPhoneId ( int phoneId ) { return mPhoneIdToSlotId [ phoneId ] ; }
public void testMountSdNormalInternal ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } assertTrue ( mountFromRawResource ( ) ) ; }
public static int IntSubtraction ( ) { int a ; int b ; int c ; a = Main.$inline$int ( 6 ) ; b = Main.$inline$int ( 2 ) ; c = a - b ; return c ; }
private static java.lang.String [ ] getFolderSegments ( java.lang.String config ) { return ( ! ( config.isEmpty ( ) ) ? "foo-" + config : "foo" ) . split ( "-" ) ; }
public java.util.Iterator < E > descendingIterator ( ) { return com.google.common.collect.Iterators.filter ( unfiltered ( ) . descendingIterator ( ) , predicate ) ; }
public void testAospPropertyContexts ( ) throws java.lang.Exception { devicePcFile = java.io.File.createTempFile ( "property_contexts" , ".tmp" ) ; devicePcFile.deleteOnExit ( ) ; mDevice.pullFile ( "/plat_property_contexts" , devicePcFile ) ; aospPcFile = copyResourceToTempFile ( "/plat_property_contexts" ) ; assertFileEquals ( aospPcFile , devicePcFile ) ; }
public void setClirResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { responseVoid ( responseInfo ) ; }
public void java7Exception003 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST003 ) . setSourceLevel ( SourceLevel.JAVA_7 ) . compileAndRunTest ( ) ; }
protected void doBuildPatchFile ( java.io.File olderFile , java.io.File newerFile , java.util.zip.ZipOutputStream patchOutput ) throws java.io.IOException { }
public java.util.Set < K > createKeySet ( ) { return com.google.common.collect.Maps.removeOnlySet ( backingSet ( ) ) ; }
private static java.lang.String compilePattern ( java.lang.String pattern , java.lang.StringBuilder sb ) { return android.icu.impl.SimplePatternFormatter.compileToStringMinMaxPlaceholders ( pattern , sb , 2 , 2 ) ; }
public void getFeatureValue ( int feature , int network , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { getImsConfigImpl ( ) . getFeatureValue ( feature , network , listener ) ; }
java.util.logging.Handler [ ] accessCheckedHandlers ( ) { initializeGlobalHandlers ( ) ; return super . accessCheckedHandlers ( ) ; }
public static javax.net.ssl.SSLSession unwrapSSLSession ( javax.net.ssl.SSLSession sslSession ) { if ( ( Build.VERSION.SDK_INT ) <= 23 ) { return sslSession ; } if ( sslSession instanceof org.conscrypt.DelegatingExtendedSSLSession ) { return ( ( org.conscrypt.DelegatingExtendedSSLSession ) ( sslSession ) ) . getDelegate ( ) ; } return sslSession ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setStartTime ( long value ) { bitField0_ |= 256 ; startTime_ = value ; onChanged ( ) ; return this ; }
private void displayAvdList ( ) { try { com.android.sdklib.internal.avd.AvdManager avdManager = getAvdManager ( ) ; displayAvdList ( avdManager ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
public void onWiFiToLteHandover ( com.android.incallui.call.DialerCall call ) { if ( ( mInCallActivity ) != null ) { mInCallActivity.showToastForWiFiToLteHandover ( call ) ; } }
public static void computeRemainder ( android.renderscript.cts.TestRemainder.ArgumentsFloatFloatFloat args ) { android.renderscript.cts.CoreMathVerifier.RemquoResult result = android.renderscript.cts.CoreMathVerifier.remquo ( args.inX , args.inY ) ; args.out = new android.renderscript.cts.Floaty ( result.remainder , 0 , 0 ) ; }
public void getPreferredVoicePrivacy ( android.os.Message result ) { android.telephony.Rlog.w ( com.android.internal.telephony.test.SimulatedCommands.LOG_TAG , "CDMA not implemented in SimulatedCommands" ) ; unimplemented ( result ) ; }
public static native java.lang.String [ ] get_X509_ext_oids ( long x509ctx , int critical ) ;
public boolean isWfcProvisionedOnDeviceForSlot ( ) { if ( getBooleanCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_VOLTE_OVERRIDE_WFC_PROVISIONING_BOOL ) ) { if ( ! ( isVolteProvisionedOnDeviceForSlot ( ) ) ) { return false ; } } if ( getBooleanCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL ) ) { return isWfcProvisioned ( ) ; } return true ; }
public final com.android.jack.ir.ast.cfg.JExitBasicBlock getExitBlock ( ) { return exit ; }
private com.android.internal.app.IBatteryStats getBatteryStats ( ) { synchronized ( this ) { if ( ( mBatteryStats ) != null ) { return mBatteryStats ; } mBatteryStats = IBatteryStats.Stub.asInterface ( mServices.getService ( BatteryStats.SERVICE_NAME ) ) ; return mBatteryStats ; } }
public void testNewFullscreen ( ) throws java.lang.Exception { checkCreateTemplate ( "activities" , "FullscreenActivity" ) ; }
public com.android.internal.telephony.gsm.GsmCall getRingingCall ( ) { return mCT.mRingingCall ; }
public void apply ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.gradle.settings.GradleSettings settings ) { myBuilder.apply ( settings ) ; }
public boolean isMatchFor ( com.android.ide.common.resources.configuration.ResourceQualifier qualifier ) { if ( qualifier instanceof com.android.ide.common.resources.configuration.PixelDensityQualifier ) { return true ; } return false ; }
private void ensureDigestInitializedInContext ( ) { if ( ! ( mDigestInitializedInContext ) ) { final org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = ctx ; org.conscrypt.NativeCrypto.EVP_DigestInit ( ctxLocal , evp_md ) ; mDigestInitializedInContext = true ; } }
public static short $noinline$intAnd0x17fffToShort ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( value & 98303 ) ) ; }
public void onRenderingTargetPostChange ( com.android.sdklib.IAndroidTarget target ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTargetData ( target ) ; updateCapabilities ( targetData ) ; mPalette.reloadPalette ( target ) ; }
public java.lang.String getAdditionalProposalInfo ( ) { com.android.tools.lint.detector.api.Issue issue = com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.getRegistry ( ) . getIssue ( mId ) ; if ( issue != null ) { return issue.getExplanation ( OutputFormat.HTML ) ; } return null ; }
native void rsnScriptForEach ( long con , long incCon , long id , int slot , long ain , long aout , boolean mUseInc ) ;
public void testSetCallbackAndNotify ( ) throws java.lang.Exception { mTestImsService.addImsFeatureStatusCallback ( mTestStatusCallback ) ; mTestImsService.addImsFeatureStatusCallback ( mTestStatusCallback2 ) ; org.mockito.Mockito.verify ( mTestStatusCallback ) . notifyImsFeatureStatus ( org.mockito.Matchers.eq ( ImsFeature.STATE_NOT_AVAILABLE ) ) ; org.mockito.Mockito.verify ( mTestStatusCallback2 ) . notifyImsFeatureStatus ( org.mockito.Matchers.eq ( ImsFeature.STATE_NOT_AVAILABLE ) ) ; }
public void onCancel ( android.content.DialogInterface arg0 ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( getName ( ) ) + " ignore connect" ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_REJECT ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; reloadSkinCombo ( ) ; reloadAbiTypeCombo ( ) ; validatePage ( ) ; }
public void setSmsListener ( android.telephony.ims.aidl.IImsSmsListener l ) throws android.os.RemoteException { synchronized ( mLock ) { this . setSmsListener ( l ) ; } }
public void testVFE3 ( ) { load ( "dot.junit.opcodes.aput_object.d.T_aput_object_7" , java.lang.VerifyError.class ) ; }
private void expectFailedScanStart ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.ScanEventHandler eventHandler , java.util.Set < java.lang.Integer > scanFreqs ) { order.verify ( mWifiNative ) . scan ( eq ( scanFreqs ) , any ( java.util.Set.class ) ) ; }
private com.android.dx.cf.direct.DirectClassFile parseClass ( java.lang.String name , byte [ ] bytes ) { com.android.dx.cf.direct.DirectClassFile cf = new com.android.dx.cf.direct.DirectClassFile ( bytes , name , args.cfOptions.strictNameCheck ) ; cf.setAttributeFactory ( StdAttributeFactory.THE_ONE ) ; cf.getMagic ( ) ; return cf ; }
public java.lang.String getDeviceSoftwareVersion ( ) { return getDeviceSoftwareVersion ( getSlotIndex ( ) ) ; }
public static long ShrLongInt ( ) { long lhs = 9 ; int rhs = 2 ; return lhs > > rhs ; }
public com.android.ide.common.layout.Format [ ] getFormats ( ) { junit.framework.Assert.fail ( "Not supported yet in tests" ) ; return null ; }
private static void usage ( ) { java.lang.System.err.println ( ( "Usage: signapk [-w] " + ( ( ( ( ( ( "[-a <alignment>] " + "[-providerClass <className>] " ) + "[--min-sdk-version <n>] " ) + "[--disable-v2] " ) + "publickey.x509[.pem] privatekey.pk8 " ) + "[publickey2.x509[.pem] privatekey2.pk8 ...] " ) + "input.jar output.jar" ) ) ) ; java.lang.System.exit ( 2 ) ; }
public java.util.Iterator charsets ( ) { java.util.Vector v = new java.util.Vector ( ) ; v.add ( org.apache.harmony.tests.java.nio.charset.CharsetTest.charset1 ) ; v.add ( org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2 ) ; return v.iterator ( ) ; }
private final native long [ ] readInt64VectorAsArray ( ) ;
boolean waitForStateChange ( ) throws java.lang.InterruptedException { return mBlocker.await ( android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE_SECS , java.util.concurrent.TimeUnit.SECONDS ) ; }
final void setFocusedActivityLocked ( com.android.server.am.ActivityRecord r ) { if ( ( mFocusedActivity ) != r ) { mFocusedActivity = r ; if ( r != null ) { mWindowManager.setFocusedApp ( r.appToken , true ) ; } applyUpdateLockStateLocked ( r ) ; } }
public com.android.incallui.incalluilock.InCallUiLock acquireInCallUiLock ( java.lang.String tag ) { return com.android.incallui.InCallPresenter.getInstance ( ) . acquireInCallUiLock ( tag ) ; }
public java.io.File [ ] getDefaultBootClasspath ( ) { return new java.io.File [ ] { new java.io.File ( com.android.jack.test.TestsProperties.getJackRootDir ( ) , "jack-tests/prebuilts/core-stubs-mini.jack" ) , new java.io.File ( com.android.jack.test.TestsProperties.getJackRootDir ( ) , "jack-tests/prebuilts/junit4-lib.jack" ) } ; }
public java.lang.Boolean isInUserWhiteList ( ) { return isInUserWhiteList ; }
public android.security.KeyStoreParameter.Builder setDigests ( java.lang.String ... digests ) { mDigests = android.security.ArrayUtils.cloneIfNotEmpty ( digests ) ; return this ; }
public void setRingerModeInternal ( int ringerMode ) { try { android.media.AudioManager.getService ( ) . setRingerModeInternal ( ringerMode , mApplicationContext.getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.media.AudioManager.TAG , "Error calling setRingerModeInternal" , e ) ; } }
public boolean startInstrumentation ( android.content.ComponentName className , java.lang.String profileFile , int flags , android.os.Bundle arguments , android.app.IInstrumentationWatcher watcher , android.app.IUiAutomationConnection connection , int userId , java.lang.String abiOverride ) throws android.os.RemoteException ;
public static void main ( java.lang.String [ ] args ) { java.lang.Error error = null ; try { Main.$opt$TestInvokeStatic ( ) ; } catch ( java.lang.Error e ) { error = e ; } java.lang.System.out.println ( error ) ; Main.$opt$TestInvokeNew ( ) ; }
static com.google.common.util.concurrent.RateLimiter create ( com.google.common.util.concurrent.RateLimiter.SleepingStopwatch stopwatch , double permitsPerSecond ) { com.google.common.util.concurrent.RateLimiter rateLimiter = new com.google.common.util.concurrent.SmoothRateLimiter.SmoothBursty ( stopwatch , 1.0 ) ; rateLimiter.setRate ( permitsPerSecond ) ; return rateLimiter ; }
public void testNewInstanceString_NoArgConstructor ( ) { runTestNewInstanceString ( "()V" , new org.apache.harmony.jpda.tests.jdwp.ClassType.NoConstructorArgumentProvider ( ) ) ; }
static int getKeyTypeForAlgorithm ( java.lang.String keyType ) { if ( "RSA" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeConstants.EVP_PKEY_RSA ; } else if ( "EC" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeConstants.EVP_PKEY_EC ; } else { return - 1 ; } }
public static native java.lang.String EVP_PKEY_print_private ( long pkeyRef ) ;
private void checkPendingIntent ( android.app.PendingIntent intent ) { if ( intent == null ) { throw new java.lang.IllegalArgumentException ( "PendingIntent cannot be null." ) ; } }
private boolean deleted ( com.android.org.conscrypt.TrustedCertificateStore store , java.lang.String alias ) { switch ( this ) { case SYSTEM : return ! ( store.containsAlias ( alias ) ) ; case USER : return false ; } throw new java.lang.AssertionError ( ) ; }
public void run ( ) { setVerticalScrollbarOverlay ( overlay ) ; }
public int addStatusListener ( android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.DownloadStatusListener listener ) throws android.os.RemoteException { return 0 ; }
public void testOnSetUpAdapterFailed ( ) throws java.lang.Exception { java.io.File testAdapter = new java.io.File ( mTestDir , ( ( VTS_NATIVE_TEST_DIR ) + ( TEST_HAL_ADAPTER_BINARY ) ) ) ; testAdapter.createNewFile ( ) ; java.lang.String output = "android.hardware.foo@1.1::IFoo/default" ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mCmdUtil.mCmdSuccess = false ; try { mPreparer.setUp ( mDevice , mBuildInfo ) ; } catch ( com.android.tradefed.targetprep.TargetSetupError e ) { org.junit.Assert.assertEquals ( "HAL adapter setup failed." , e.getMessage ( ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public boolean lock ( int userId ) { try { return ( mBinder.lock ( userId ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public boolean isEmpty ( ) { return ! ( com.google.common.collect.Iterables.any ( unfiltered.entrySet ( ) , entryPredicate ) ) ; }
public java.util.Set < java.lang.String > getExcludes ( ) { return com.google.common.collect.Sets.newHashSet ( excludes ) ; }
public com.google.common.base.Objects.ToStringHelper addValue ( float value ) { return addHolder ( java.lang.String.valueOf ( value ) ) ; }
public void test_Any_Upper ( ) throws java.lang.Exception { android.icu.text.Transliterator t = android.icu.text.Transliterator.getInstance ( "Any-Upper" ) ; assertEquals ( "HELLO WORLD!" , t.transliterate ( "HeLlO WoRlD!" ) ) ; assertEquals ( "STRASSE" , t.transliterate ( "Straße" ) ) ; }
public void settingsSecurePutStringForUser ( java.lang.String key , java.lang.String value , int userId ) { Settings.Secure.putStringForUser ( mContext.getContentResolver ( ) , key , value , userId ) ; }
protected int [ ] getCipherSuites ( ) { return new int [ ] { CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 , CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 , CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 , CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA , CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA , CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384 , CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256 , CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA256 , CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256 , CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA , CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA } ; }
public void textViewWithHugePadding ( ) { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.view_with_padding ) ) . perform ( android.support.test.espresso.action.ViewActions.scrollTo ( ) , android.support.test.espresso.action.ViewActions.typeText ( "Hello World" ) ) ; }
public void testGetApplicationNoLabelOrIcon ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( " package=\'com.android.unittest\'>\n" + " <application>\n" ) + " </application>\n" ) + "" ) + "</manifest>\n" ) ) ) ; java.util.Map < java.lang.String , com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.ActivityAttributes > map = info.getActivityAttributesMap ( ) ; assertEquals ( map.toString ( ) , 0 , map.size ( ) ) ; assertEquals ( "com.android.unittest" , info.getPackage ( ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ) ; assertNull ( info.getApplicationIcon ( ) ) ; assertNull ( info.getApplicationLabel ( ) ) ; }
public android.net.IpSecTransform.Builder setEncryption ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecAlgorithm algo ) { mConfig.setEncryption ( direction , algo ) ; return this ; }
public com.android.ahat.DocString append ( java.lang.String text ) { mStringBuilder.append ( com.android.ahat.HtmlEscaper.escape ( text ) ) ; return this ; }
public boolean collect ( ) { return false ; }
public boolean isRttSupported ( ) { boolean isCarrierSupported = mApp.getCarrierConfig ( ) . getBoolean ( CarrierConfigManager.KEY_RTT_SUPPORTED_BOOL ) ; boolean isDeviceSupported = mPhone.getContext ( ) . getResources ( ) . getBoolean ( R.bool.config_support_rtt ) ; return isCarrierSupported && isDeviceSupported ; }
public int previous ( ) { return libcore.icu.NativeBreakIterator.previousImpl ( this . address , this . string ) ; }
private boolean keyguardIsShowingTq ( ) { return mKeyguardMediator.isShowingAndNotHidden ( ) ; }
java.lang.String getAddress ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.LOCAL_MAC_ADDRESS_PERM , "Need LOCAL_MAC_ADDRESS permission" ) ; java.lang.String addrString = null ; byte [ ] address = mAdapterProperties.getAddress ( ) ; return com.android.bluetooth.Utils.getAddressStringFromByte ( address ) ; }
public void ignore ( java.lang.String id ) { severities.put ( id , com.android.tools.lint.detector.api.Severity.IGNORE ) ; }
public void sendRttRequest ( ) { createRttStreams ( ) ; mConnectionService.startRtt ( this , getInCallToCsRttPipeForCs ( ) , getCsToInCallRttPipeForCs ( ) ) ; }
public static java.lang.String toMimeCharset ( java.lang.String charsetName ) { org.apache.james.mime4j.util.CharsetUtil.Charset c = org.apache.james.mime4j.util.CharsetUtil.charsetMap.get ( charsetName.toLowerCase ( java.util.Locale.US ) ) ; if ( c != null ) { return c.mime ; } return null ; }
public void exit ( ) { if ( mScanResultIsPending ) { mWifiNative.setScanResultHandling ( android.net.wifi.WifiStateMachine.CONNECT_MODE ) ; } }
protected void clean ( org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { super . clean ( monitor ) ; org.eclipse.core.resources.IProject project = getProject ( ) ; removeMarkersFromContainer ( project , AndroidConstants.MARKER_AAPT_PACKAGE ) ; removeMarkersFromContainer ( project , AndroidConstants.MARKER_PACKAGING ) ; }
public void addArgs ( @ javax.annotation.Nonnull java.util.List < com.android.jack.ir.ast.JExpression > toAdd ) { args.addAll ( toAdd ) ; }
public com.google.gct.testing.dimension.CloudTestingType getTypeForDimension ( com.google.gct.testing.dimension.CloudConfigurationDimension dimension ) { return typesByDimensionName.get ( dimension.getDisplayName ( ) ) ; }
public java.lang.Integer subscriptionGetDefaultSmsSubId ( ) { return android.telephony.SubscriptionManager.getDefaultSmsSubId ( ) ; }
public java.lang.String toString ( ) { return ( ( ( "ClientInfo[uid=" + ( mUid ) ) + "," ) + ( mMessenger ) ) + "]" ; }
public void testGetFirstCnWithUtf8 ( ) { assertFirstCn ( "cn=Lu\\C4\\8Di\\C4\\87" , "Lučić" ) ; }
public boolean onInfo ( android.media.MediaPlayer mp , int what , int extra ) { assertEquals ( mMediaPlayer2 , mp ) ; if ( what == ( android.media.MediaPlayer.MEDIA_INFO_STARTED_AS_NEXT ) ) { mOnInfoCalled.signal ( ) ; } return false ; }
public void onError ( ) { mHandler.post ( new android.telecom.Logging.Runnable ( "oAA.qRCS.oE" , null ) { @ java.lang.Override public void loggedRun ( ) { mAreAccountsInitialized = true ; } } . prepare ( ) ) ; }
synchronized void nScriptSetVarD ( long id , int slot , double val , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetVarD ( curCon , id , slot , val , mUseInc ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , double value ) { return addHolder ( name , java.lang.String.valueOf ( value ) ) ; }
public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.JMethodBodyCfg body ) { new com.android.jack.optimizations.cfg.CfgBasicBlockUtils ( body.getCfg ( ) ) . removeUnreachableBlocks ( ) ; }
public boolean disableCellBroadcastRange ( int startMessageId , int endMessageId ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.LOG_TAG , "Error! Not implemented for CDMA." ) ; return false ; }
public int getCarrierPrivilegeStatus ( android.content.pm.PackageInfo packageInfo ) { if ( ( mUiccProfile ) != null ) { return mUiccProfile.getCarrierPrivilegeStatus ( packageInfo ) ; } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED ; } }
public static native boolean isInterpreted ( ) ;
public void testNonexistentLibrary ( ) throws java.lang.Exception { checkDriver ( "" , "Library foo.jar does not exist.\n" , com.android.tools.lint.LintCliFlags.ERRNO_INVALID_ARGS , new java.lang.String [ ] { "--libraries" , "foo.jar" , "prj" } ) ; }
public void startDocument ( ) { data_isStartDocument.append ( true ) ; data_isStartDocument.append ( org.apache.harmony.tests.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_ELEMENT ) ; }
public com.android.sdklib.AndroidVersion getAndroidVersion ( ) { return ( mMainPkg ) instanceof com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ? ( ( com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ) ( mMainPkg ) ) . getAndroidVersion ( ) : null ; }
private boolean isWatch ( ) { return ( ( getInstrumentation ( ) . getContext ( ) . getResources ( ) . getConfiguration ( ) . uiMode ) & ( android.content.res.Configuration.UI_MODE_TYPE_MASK ) ) == ( android.content.res.Configuration.UI_MODE_TYPE_WATCH ) ; }
public boolean isBondingInitiatedLocally ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return false ; return service.isBondingInitiatedLocally ( device ) ; }
private android.graphics.Rect contentToViewRect ( android.graphics.Rect x ) { return new android.graphics.Rect ( contentToViewX ( x.left ) , contentToViewY ( x.top ) , contentToViewX ( x.right ) , contentToViewY ( x.bottom ) ) ; }
public void testWildcardCannotMatchChildDomain ( ) { assertFalse ( verifyWithDomainNamePattern ( "sub.www.example.com" , "*.example.com" ) ) ; }
public void testVFE15 ( ) { try { new dot.junit.opcodes.invoke_interface_range.d.T_invoke_interface_range_16 ( ) . run ( new dot.junit.opcodes.invoke_interface_range.ITestImpl ( ) ) ; fail ( "expected NoSuchMethodError" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
public java.lang.String getAidForAppType ( int appType ) { return getAidForAppType ( getSubId ( ) , appType ) ; }
public com.android.jack.dx.rop.type.Type getFrameTypeImpl ( ) { switch ( basicType ) { case com.android.jack.dx.rop.type.Type.BT_BOOLEAN : case com.android.jack.dx.rop.type.Type.BT_BYTE : case com.android.jack.dx.rop.type.Type.BT_CHAR : case com.android.jack.dx.rop.type.Type.BT_INT : case com.android.jack.dx.rop.type.Type.BT_SHORT : { return com.android.jack.dx.rop.type.Type.INT ; } } return this ; }
public static short $noinline$shortToCharToShort ( short value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( ( char ) ( value ) ) ) ; }
public void onError ( final int errorCode , final java.lang.String message ) { try { callback.onError ( errorCode , message ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public void onFailure ( ) { android.telecom.Log.e ( this , new java.lang.Exception ( ) , "Failure to call %s" , getComponentName ( ) ) ; response.handleCreateConnectionFailure ( new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.ERROR ) ) ; }
public static native int getDexOptNeeded ( java.lang.String fileName , java.lang.String pkgname , java.lang.String instructionSet , boolean defer ) throws java.io.FileNotFoundException , java.io.IOException ;
public void registerResourceWithNullName ( ) { expectedException.expect ( java.lang.RuntimeException.class ) ; android.support.test.espresso.Espresso.registerIdlingResources ( new android.support.test.espresso.EspressoTest.DummyIdlingResource ( null ) ) ; }
void reset ( ) { mN.reset ( ) ; mPos = 0 ; }
public void init ( org.eclipse.jface.viewers.IStructuredSelection selection , org.eclipse.ui.IWorkbenchPart activePart ) { setWorkingSets ( com.android.ide.eclipse.adt.internal.wizards.newproject.WorkingSetHelper.getSelectedWorkingSet ( selection , activePart ) ) ; }
public com.android.ide.common.rendering.api.Result render ( ) { return render ( RenderParams.DEFAULT_TIMEOUT ) ; }
private static com.android.build.VariantOutput getUniversalOutput ( int versionCode ) { return new com.android.ide.common.build.SplitOutputMatcherTest.FakeVariantOutput ( new com.android.ide.common.build.SplitOutputMatcherTest.FakeSplitOutput ( null , null , versionCode ) ) ; }
protected void handle ( long taskId , @ javax.annotation.Nonnull org.simpleframework.http.Request request , @ javax.annotation.Nonnull org.simpleframework.http.Response response ) { com.android.jack.server.tasks.Stop.logger.log ( java.util.logging.Level.INFO , "Force stop" ) ; jackServer.shutdown ( ) ; response.setStatus ( Status.OK ) ; }
public static java.lang.String getVersion ( ) { return libcore.util.ZoneInfoDB.version ; }
private static java.lang.String shell ( ) { java.lang.String deviceSh = ( java.lang.System.getenv ( "ANDROID_ROOT" ) ) + "/bin/sh" ; java.lang.String desktopSh = "/bin/sh" ; return new java.io.File ( deviceSh ) . exists ( ) ? deviceSh : desktopSh ; }
public void delete ( ) { this . detach ( getPrimarySuccessor ( ) ) ; }
public com.android.server.telecom.CallAudioModeStateMachine getCallAudioModeStateMachine ( ) { return mCallAudioModeStateMachine ; }
public static void main ( java.lang.String [ ] args ) { Main.tryBlah ( 1 ) ; java.lang.System.out.println ( "Zorch." ) ; java.lang.System.out.println ( ( "10 == " + ( Main.instanceOfTest ( 10 ) ) ) ) ; }
com.android.jack.api.v01.Api01CompilationTask getTask ( ) throws com.android.jack.api.v01.ConfigurationException ;
public void deviceConnected ( final com.android.ddmlib.IDevice device ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { treeViewer.refresh ( ) ; treeViewer.setExpandedState ( device , true ) ; } } ) ; }
public void disableOptionalCodecs ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.a2dp.A2dpService service = getService ( ) ; if ( service == null ) { return ; } service.disableOptionalCodecs ( device ) ; }
public java.lang.String toString ( ) { return ( ( ( getName ( ) ) + " {" ) + ( java.lang.Long.toHexString ( mWindowPtr ) ) ) + "}" ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; Main.testExceptionDetailMessages ( ) ; Main.testfindVirtual ( ) ; Main.testUnreflects ( ) ; }
public java.lang.Class < ? extends com.android.jack.jayce.v0004.NNode > getNNodeClass ( ) throws com.android.jack.jayce.v0004.io.InvalidTokenException { throw new com.android.jack.jayce.v0004.io.InvalidTokenException ( ( "No node corresponding to token " + ( this . toString ( ) ) ) ) ; }
public java.lang.String getStringValue ( ) { if ( ( mValue ) != null ) { return mValue.getDisplayValue ( ) ; } return "" ; }
public libcore.tzdata.testing.ZoneInfoTestHelper.ZoneInfoDataBuilder setTransitionsAndTypes ( int [ ] [ ] transitionPairs , int [ ] [ ] typePairs ) { setTransitions ( transitionPairs ) ; setTypes ( typePairs ) ; return this ; }
protected java.lang.String getWhatToString ( int what ) { return android.net.nsd.NsdManager.nameOf ( what ) ; }
public void onWiredHeadsetPluggedInChanged ( boolean oldIsPluggedIn , boolean newIsPluggedIn ) { android.telecom.Log.v ( this , "onWiredHeadsetPluggedInChanged" ) ; updateCurrentTtyMode ( ) ; }
public static java.lang.String oidToAlgorithmName ( java.lang.String oid ) { try { return sun.security.x509.AlgorithmId.get ( oid ) . getName ( ) ; } catch ( java.security.NoSuchAlgorithmException e ) { return oid ; } }
private void expandNotifications ( ) { final long token = android.os.Binder.clearCallingIdentity ( ) ; android.app.StatusBarManager statusBarManager = ( ( android.app.StatusBarManager ) ( mContext.getSystemService ( android.app.Service.STATUS_BAR_SERVICE ) ) ) ; statusBarManager.expandNotificationsPanel ( ) ; android.os.Binder.restoreCallingIdentity ( token ) ; }
public final com.android.jack.test.toolchain.JackBasedToolchain setAnnotationProcessorPath ( @ javax.annotation.Nonnull java.lang.String processorPath ) { this . processorPath = processorPath ; return this ; }
private void createSupplicantStaNetwork ( ) { mSupplicantNetwork = new com.android.server.wifi.SupplicantStaNetworkHal ( mISupplicantStaNetworkMock , com.android.server.wifi.SupplicantStaNetworkHalTest.IFACE_NAME , mContext , mWifiMonitor ) ; }
synchronized long nScriptGroup2Create ( java.lang.String cachePath , long [ ] closures ) { validate ( ) ; return rsnScriptGroup2Create ( mContext , cachePath , closures ) ; }
public java.util.Set < K > keySet ( ) { java.util.concurrent.ConcurrentHashMap.KeySetView < K , V > ks ; return ( ks = keySet ) != null ? ks : ( keySet = new java.util.concurrent.ConcurrentHashMap.KeySetView < K , V > ( this , null ) ) ; }
public void checkValidity ( ) { if ( ! ( ( ( ( parent ) instanceof com.android.jack.ir.ast.JLabeledStatement ) || ( ( parent ) instanceof com.android.jack.ir.ast.JBreakStatement ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JContinueStatement ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
static double getDoubleAttribute ( @ com.android.annotations.NonNull com.intellij.psi.PsiAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name , double defaultValue ) { java.lang.Double value = com.android.tools.lint.checks.PermissionRequirement.getAnnotationDoubleValue ( annotation , name ) ; if ( value != null ) { return value ; } return defaultValue ; }
public int hashCode ( ) { return java.util.Objects.hash ( timeZoneId , showInPicker , notUsedAfter ) ; }
public void test_SSL_CTX_free_NullArgument ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCryptoTest.NULL ) ; }
public android.net.wifi.IClientInterface setupDriverForClientMode ( ) { android.net.wifi.IClientInterface clientInterface = mWificondControl.setupDriverForClientMode ( ) ; if ( ! ( startHal ( true ) ) ) { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "Failed to start HAL for client mode" ) ; } return clientInterface ; }
public void monitorExit ( com.google.dexmaker.Local < ? > monitor ) { addInstruction ( new com.android.dx.rop.code.ThrowingInsn ( com.android.dx.rop.code.Rops.MONITOR_EXIT , sourcePosition , com.android.dx.rop.code.RegisterSpecList.make ( monitor.spec ( ) ) , catches ) ) ; }
public static void computeMin ( android.renderscript.cts.TestMin.ArgumentsUcharUcharUchar args ) { args.out = android.renderscript.cts.CoreMathVerifier.minU8 ( args.inV1 , args.inV2 ) ; }
protected java.security.Provider.Service revert ( @ javax.annotation.Nonnull com.android.sched.util.config.MessageDigestFactory dst ) { return dst.getService ( ) ; }
public void releaseNetworkRequest ( android.app.PendingIntent operation ) { android.net.ConnectivityManager.checkPendingIntentNotNull ( operation ) ; try { mService.releasePendingNetworkRequest ( operation ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public boolean isValidOn ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField field ) { return field.getEnclosingType ( ) . isToEmit ( ) ; }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "Test {@link OrientationListener#disable()}. " + ( ( "This method is simply called to make sure that no exception is thrown. " + "The registration of the listener can not be tested because there is no way " ) + "to simulate sensor events on the emulator" ) , method = "disable" , args = { } ) } ) public void testRegistrationOfOrientationListener ( ) { android.view.cts.OrientationListenerTest.MockOrientationListener listener = new android.view.cts.OrientationListenerTest.MockOrientationListener ( mContext ) ; listener.disable ( ) ; listener.enable ( ) ; }
private native java.lang.reflect.Method getDeclaredMethodInternal ( java.lang.String name , java.lang.Class < ? > [ ] args ) ;
public final void setAlpnProtocols ( java.lang.String [ ] alpnProtocols ) { setApplicationProtocols ( ( alpnProtocols == null ? EmptyArray.STRING : alpnProtocols ) ) ; }
public static com.android.jack.dx.rop.code.Rop opCaptureVariable ( com.android.jack.dx.rop.type.TypeList sources ) { return new com.android.jack.dx.rop.code.Rop ( RegOps.CAPTURE_VARIABLE , com.android.jack.dx.rop.type.Type.VOID , sources , com.android.jack.dx.rop.type.StdTypeList.EMPTY , Rop.BRANCH_NONE , true , null ) ; }
public static void checkMagicNumber ( int magicNumber ) throws java.lang.UnsupportedOperationException { if ( magicNumber != ( ClassConstants.MAGIC ) ) { throw new java.lang.UnsupportedOperationException ( ( ( "Invalid magic number [" + ( java.lang.Integer.toHexString ( magicNumber ) ) ) + "] in class" ) ) ; } }
public void sendSms ( int messageRef , java.lang.String format , java.lang.String smsc , boolean retry , byte [ ] pdu ) { synchronized ( mLock ) { this . sendSms ( messageRef , format , smsc , retry , pdu ) ; } }
public void clear ( ) { clearReferent ( ) ; }
private static synchronized native int lastImpl ( int address , java.lang.String text ) ;
public void execute ( final org.gradle.language.base.FunctionalSourceSet functionalSourceSet ) { functionalSourceSet.registerFactory ( languageRegistration.getSourceSetType ( ) , languageRegistration.getSourceSetFactory ( functionalSourceSet.getName ( ) ) ) ; }
protected void onDestroy ( ) { mAlertDialog.dismiss ( ) ; this . unregisterReceiver ( mBroadcastReceiver ) ; super . onDestroy ( ) ; }
public void setPermissionPolicy ( @ android.annotation.NonNull android.content.ComponentName admin , int policy ) { throwIfParentInstance ( "setPermissionPolicy" ) ; try { mService.setPermissionPolicy ( admin , mContext.getPackageName ( ) , policy ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } }
public synchronized android.bluetooth.BluetoothDevice getActiveDevice ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hearingaid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; synchronized ( mStateMachines ) { return mActiveDevice ; } }
static byte $opt$ShortToByte ( short a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( byte ) ( a ) ) ; }
public void testFlagIF ( ) { sampleInstallFromRawResource ( ( ( android.content.pm.PackageManager.INSTALL_FORWARD_LOCK ) | ( android.content.pm.PackageManager.INSTALL_INTERNAL ) ) , true ) ; }
public com.android.ide.common.xml.XmlAttributeSortOrder getAttributeSort ( ) { if ( ( mAttributeSort ) == null ) { return com.android.ide.common.xml.XmlAttributeSortOrder.LOGICAL ; } return mAttributeSort ; }
public void onProgramInfoChanged ( ) { if ( mTimeShiftManager.isAvailable ( ) ) { initializeTimeline ( ) ; updateControls ( false ) ; } }
public void testComplexPermission1 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "src/test/pkg/PermissionTest.java:7: Error: Missing permissions required by LocationManager.myMethod: android.permission.BLUETOOTH xor android.permission.READ_SMS [MissingPermission]\n" + " LocationManager.Location location = locationManager.myMethod(provider);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( getManifestWithPermissions ( 14 , "android.permission.ACCESS_FINE_LOCATION" ) , mPermissionTest , mComplexLocationManagerStub , mRequirePermissionAnnotation ) ) ; }
public java.util.List < android.telephony.UiccAccessRule > getAccessRules ( ) { if ( ! ( isEmbedded ( ) ) ) { throw new java.lang.UnsupportedOperationException ( "Not an embedded subscription" ) ; } if ( ( mAccessRules ) == null ) return null ; return java.util.Arrays.asList ( mAccessRules ) ; }
public abstract void setBlockNetworkImage ( boolean flag ) ;
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JEnumLiteral literal ) { result = new com.android.jack.dx.rop.cst.CstEnumRef ( new com.android.jack.dx.rop.cst.CstString ( literal.getFieldId ( ) . getName ( ) ) , com.android.jack.backend.dex.rop.RopHelper.getCstType ( literal.getType ( ) ) ) ; return false ; }
public void onSuccess ( ) { android.telecom.Log.d ( this , "Adding simService %s" , currentSimService.getComponentName ( ) ) ; simServiceComponentNames.add ( currentSimService.getComponentName ( ) ) ; simServiceBinders.add ( currentSimService.mServiceInterface.asBinder ( ) ) ; maybeComplete ( ) ; }
public static final void warnln ( java.lang.String message ) { org.junit.Assert.fail ( message ) ; }
public final int getDexMethodIndex ( ) { return dexMethodIndex ; }
public android.net.wifi.WifiConfiguration answer ( int netId ) { if ( ( netId >= 0 ) && ( netId < ( configs.length ) ) ) { return new android.net.wifi.WifiConfiguration ( configs [ netId ] ) ; } else { return null ; } }
public void run ( ) { if ( ( mChannelScanTask ) != null ) { mChannelScanTask.showFinishingProgressDialog ( ) ; } }
private void onGetImageError ( java.lang.String cacheKey , com.android.volley.VolleyError error ) { com.android.volley.toolbox.ImageLoader.BatchedImageRequest request = mInFlightRequests.remove ( cacheKey ) ; if ( request != null ) { request.setError ( error ) ; batchResponse ( cacheKey , request ) ; } }
public void testAddAllSelf ( ) { jsr166.AbstractQueueTest.Succeed q = new jsr166.AbstractQueueTest.Succeed ( ) ; try { q.addAll ( q ) ; shouldThrow ( ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
private java.io.File createEmptyLibrary ( ) throws java.io.IOException , java.lang.Exception { java.io.File emptyLib = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "empty" , ".jack" ) ; com.android.jack.test.toolchain.AndroidToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.AndroidToolchain.class ) ; toolchain.srcToLib ( emptyLib , true ) ; return emptyLib ; }
public final java.math.BigInteger getPrivateExponent ( ) { ensureReadParams ( ) ; return privateExponent ; }
public int indexOfKey ( long key ) { if ( mGarbage ) { gc ( ) ; } return com.android.layoutlib.bridge.util.SparseWeakArray.binarySearch ( mKeys , 0 , mSize , key ) ; }
public void onGnssMeasurementsReceived ( android.location.GnssMeasurementsEvent event ) { if ( ( event.getMeasurements ( ) . size ( ) ) > 0 ) { synchronized ( mMeasurementsEvents ) { mMeasurementsEvents.add ( event ) ; } mCountDownLatch.countDown ( ) ; } }
synchronized void nAllocationRead ( long id , byte [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public void traverse ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor.visit ( this ) ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock block : getBlocksDepthFirst ( false ) ) { visitor.accept ( block ) ; } } visitor.endVisit ( this ) ; }
static native java.lang.reflect.Member getDeclaredConstructorOrMethod ( java.lang.Class c , java.lang.String name , java.lang.Class [ ] args ) ;
public void test_getInstance_provider2 ( ) throws java.lang.Exception { test_getInstance ( 2 ) ; }
protected static void sleep ( long millis ) { try { java.lang.Thread.sleep ( millis ) ; } catch ( java.lang.InterruptedException e ) { com.android.voicemail.impl.VvmLog.e ( com.android.voicemail.impl.transcribe.TranscriptionTask.TAG , "interrupted" , e ) ; java.lang.Thread.currentThread ( ) . interrupt ( ) ; } }
public java.lang.Class < ? > getDeclaringClass ( ) { return declaringClass ; }
public int updateCallBarringForServiceClass ( int cbType , int action , java.lang.String [ ] barrList , int serviceClass ) throws android.os.RemoteException { return this . updateCallBarringForServiceClass ( cbType , action , barrList , serviceClass ) ; }
public boolean changeApplicationBluetoothState ( boolean on , android.bluetooth.BluetoothAdapter.BluetoothStateChangeCallback callback ) { return false ; }
public void registerContentObservers ( ) { if ( ( android.os.Build.VERSION.SDK_INT ) < ( android.os.Build.VERSION_CODES.N ) ) { return ; } appContext.getContentResolver ( ) . registerContentObserver ( BlockedNumbers.CONTENT_URI , true , markDirtyObserver ) ; }
private void checkStatus ( ) { if ( ( prePosition ) == ( - 1 ) ) { throw new java.lang.IllegalStateException ( ) ; } }
public int getCompilerSubReleaseCode ( ) { return 8 ; }
public void attach ( @ android.annotation.NonNull android.net.wifi.aware.WifiAwareAttachCallback attachCallback , @ android.annotation.Nullable android.os.Handler handler ) { attach ( handler , null , attachCallback , null ) ; }
public void test_setPerformancePreference_Int_Int_Int ( ) throws java.io.IOException { try ( java.net.Socket theSocket = new java.net.Socket ( ) ) { theSocket.setPerformancePreferences ( 1 , 1 , 1 ) ; } }
public void exit ( ) { checkAndSetConnectivityInstance ( ) ; mCm.requestNetworkTransitionWakelock ( android.net.wifi.WifiStateMachine.TAG ) ; }
public native int getInt ( java.lang.Object obj ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
boolean isPriority ( android.print.PrinterId printerId ) { return mTrackingIds.contains ( printerId ) ; }
final void putUnchecked ( int pos , int [ ] src , int srcOffset , int length ) { libcore.io.Memory.pokeIntArray ( ix ( pos ) , src , srcOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public void update ( java.net.CacheResponse conditionalCacheHit , java.net.HttpURLConnection connection ) throws java.io.IOException { delegate.update ( conditionalCacheHit , connection ) ; }
private void resolveIntent ( ) { android.content.Intent intent = getIntent ( ) ; mName = intent.getStringExtra ( com.android.phone.EditFdnContactScreen.INTENT_EXTRA_NAME ) ; mNumber = intent.getStringExtra ( com.android.phone.EditFdnContactScreen.INTENT_EXTRA_NUMBER ) ; mAddContact = android.text.TextUtils.isEmpty ( mNumber ) ; }
public void testGet_NullPointerException ( ) { java.util.concurrent.ConcurrentSkipListMap c = jsr166.ConcurrentSkipListMapTest.map5 ( ) ; try { c.get ( null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public static native void SSL_set_session ( long sslNativePointer , long sslSessionNativePointer ) throws javax.net.ssl.SSLException ;
public void componentMoved ( java.awt.event.ComponentEvent e ) { repaint ( ) ; }
public void cleanUp ( com.android.tradefed.build.IBuildInfo info ) { info.cleanUp ( ) ; }
private com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor getFqcnViewDescriptor ( java.lang.String fqcn ) { com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor = mNode.getEditor ( ) ; if ( editor instanceof com.android.ide.eclipse.adt.internal.editors.layout.LayoutEditor ) { return ( ( com.android.ide.eclipse.adt.internal.editors.layout.LayoutEditor ) ( editor ) ) . getFqcnViewDescriptor ( fqcn ) ; } return null ; }
final void getUnchecked ( int pos , long [ ] dst , int dstOffset , int length ) { libcore.io.Memory.peekLongArray ( ix ( pos ) , dst , dstOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public synchronized void setPolicyDataEnabled ( boolean enabled ) { boolean prevDataEnabled = isDataEnabled ( ) ; mPolicyDataEnabled = enabled ; if ( prevDataEnabled != ( isDataEnabled ( ) ) ) { notifyDataEnabledChanged ( ( ! prevDataEnabled ) , com.android.internal.telephony.dataconnection.DataEnabledSettings.REASON_POLICY_DATA_ENABLED ) ; } }
android.widget.LayoutParams createOrReuseLayoutParams ( android.view.View v ) { final android.widget.LayoutParams currentLp = v.getLayoutParams ( ) ; if ( currentLp != null ) { return currentLp ; } return new android.widget.LayoutParams ( 0 , 0 ) ; }
public java.lang.String getFolderSegment ( ) { if ( ( mValue ) != null ) { return com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier.getFolderSegment ( mValue ) ; } return "" ; }
private void updateContactEntry ( com.android.incallui.ContactInfoCache.ContactCacheEntry entry , boolean isPrimary ) { if ( isPrimary ) { mPrimaryContactInfo = entry ; updatePrimaryDisplayInfo ( ) ; } else { mSecondaryContactInfo = entry ; updateSecondaryDisplayInfo ( ) ; } }
final void putFloatUnchecked ( int i , float x ) { putFloat ( ix ( i ) , x ) ; }
public static void assertOnUiThread ( ) { assert org.chromium.base.ThreadUtils.runningOnUiThread ( ) ; }
final E itemAt ( int i ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E x = ( ( E ) ( items [ i ] ) ) ; return x ; }
public void resolveOperandBlockIndex ( int [ ] labelToIndex ) { for ( com.android.jack.dx.ssa.PhiInsn.Operand o : operands ) { o.blockIndex = labelToIndex [ o.ropLabel ] ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedInterface node ) { if ( ( node.getMarker ( com.android.jack.frontend.VirtualMethodsMarker.class ) ) != null ) { return false ; } handleDefinedClassOrInterface ( node ) ; return super . visit ( node ) ; }
public static android.graphics.Region_Delegate getDelegate ( long nativeShader ) { return android.graphics.Region_Delegate.sManager.getDelegate ( nativeShader ) ; }
public void testCornerCase ( ) throws java.lang.Exception { mEnableIds = true ; assertEquals ( "No warnings." , lintProject ( "src/test/pkg/Foo.java.txt=>src/test/pkg/Foo.java" , "AndroidManifest.xml" ) ) ; }
public static com.android.ahat.heapdump.Value getBaseline ( com.android.ahat.heapdump.Value value ) { return value == null ? null : value.getBaseline ( ) ; }
public int getSize ( ) { return mSize ; }
public static void setUpClass ( ) { com.android.jack.shrob.TreeTest.CORE_SOURCELIST = com.android.jack.TestTools.getTargetLibSourcelist ( "core-libart" ) ; }
public boolean p2pFind ( int timeout ) { return mSupplicantP2pIfaceHal.find ( timeout ) ; }
private static int writeSize ( com.android.jack.dx.rop.annotation.Annotations annotations ) { assert annotations != null ; return ( ( annotations.size ( ) ) * ( com.android.jack.dx.dex.file.AnnotationSetItem.ENTRY_WRITE_SIZE ) ) + 4 ; }
com.android.build.gradle.internal.variant.BaseVariantData createVariantData ( @ com.android.annotations.NonNull com.android.build.gradle.internal.core.GradleVariantConfiguration variantConfiguration , @ com.android.annotations.NonNull com.android.build.gradle.internal.TaskManager taskManager ) ;
public final E set ( int index , E element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void registerForDataEnabledChanged ( android.os.Handler h , int what , java.lang.Object obj ) { mDataEnabledChangedRegistrants.addUnique ( h , what , obj ) ; notifyDataEnabledChanged ( isDataEnabled ( ) , com.android.internal.telephony.dataconnection.DataEnabledSettings.REASON_REGISTERED ) ; }
public boolean setApfVersion ( int version ) { return version >= 2 ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( accepted ( clazz , runtimeVisibleAnnotationsAttribute ) ) { attributeVisitor.visitRuntimeVisibleAnnotationsAttribute ( clazz , method , runtimeVisibleAnnotationsAttribute ) ; } }
void runTask ( @ com.android.annotations.NonNull com.android.builder.tasks.Job < T > job ) throws java.lang.Exception ;
public static android.net.http.HttpResponseCache getInstalled ( ) { java.net.ResponseCache installed = java.net.ResponseCache.getDefault ( ) ; if ( installed instanceof android.net.http.HttpResponseCache ) { return ( ( android.net.http.HttpResponseCache ) ( installed ) ) ; } return null ; }
public void openModuleLibrarySettings ( final com.intellij.openapi.module.Module module ) { com.intellij.openapi.roots.ui.configuration.ModulesConfigurator.showDialog ( myProject , module.getName ( ) , ClasspathEditor.NAME ) ; }
public java.io.OutputStream getOutputStream ( ) throws com.android.sched.util.file.WrongPermissionException { return getOutputStream ( false ) ; }
private android.net.NetworkRequest sendRequestForNetwork ( android.net.NetworkCapabilities need , android.net.ConnectivityManager.NetworkCallback callback , int timeoutMs , int action , int legacyType ) { return sendRequestForNetwork ( need , callback , timeoutMs , action , legacyType , getHandler ( ) ) ; }
private java.lang.StringBuilder createSuccessTest ( ) { java.lang.StringBuilder output = buildCommonResult ( ) ; addSuccessCode ( output ) ; return output ; }
public void enter ( ) { super . enter ( ) ; mCurrInd = 0 ; mFolderList.clear ( ) ; callNativeFunctionForScope ( mStartInd , java.lang.Math.min ( mEndInd , ( ( ( mStartInd ) + ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.GET_FOLDER_ITEMS_PAGINATION_SIZE ) ) - 1 ) ) ) ; }
public void stopAdvertisingSet ( android.bluetooth.le.IAdvertisingSetCallback callback ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.stopAdvertisingSet ( callback ) ; }
public int queryCallForward ( int condition , java.lang.String number ) throws android.os.RemoteException { return this . queryCallForward ( condition , number ) ; }
public static double DoubleSubtraction ( ) { double a ; double b ; double c ; a = 6.0 ; b = 2.0 ; c = a - b ; return c ; }
public void err ( @ com.android.annotations.Nullable java.lang.String line ) { filterStdErr ( line ) ; }
public long beforeHandshake ( long context ) throws javax.net.ssl.SSLException { long s = super . beforeHandshake ( context ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_clear_mode ( s , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ; return s ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.doTest ( ) ; Main.doFollowReferencesTest ( ) ; }
public void sendHandleCreateConnectionComplete ( java.lang.String id ) throws java.lang.Exception { for ( com.android.internal.telecom.IConnectionServiceAdapter a : mConnectionServiceAdapters ) { a.handleCreateConnectionComplete ( id , mConnectionById.get ( id ) . request , parcelable ( mConnectionById.get ( id ) ) , null ) ; } }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , javax.net.ssl.SSLSession session ) throws java.security.cert.CertificateException { return checkTrusted ( chain , authType , session , null , false ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation ) { return false ; }
public void run ( ) { addDeviceMenuListener ( mDeviceCombo ) ; }
public void reject ( int reason ) { this . reject ( reason ) ; }
private static native boolean findImpl ( long addr , java.lang.String s , int startIndex , int [ ] offsets ) ;
public com.android.jack.tools.merger.JackMerger getNewJackMerger ( int firstTypeIndex ) { return new com.android.jack.tools.merger.JackMerger ( createDexFile ( ) , com.android.sched.util.config.ThreadConfig.get ( Options.BEST_MERGING_ACCURACY ) . booleanValue ( ) , firstTypeIndex ) ; }
public static int $noinline$floatToDoubleToInt ( float value ) { return ( ( int ) ( ( double ) ( value ) ) ) ; }
public boolean isInCall ( ) { return this . isInCall ( ) ; }
public static void reportValue ( java.lang.Object val ) { java.lang.System.out.println ( ( ( ( ( "\tValue is \'" + val ) + "' (class: " ) + ( val != null ? val.getClass ( ) : "NULL" ) ) + ")" ) ) ; }
public void callSessionInviteParticipantsRequestFailed ( com.android.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mListener.callSessionInviteParticipantsRequestFailed ( reasonInfo ) ; }
public libcore.io.BufferIterator littleEndianIterator ( ) { return new libcore.io.NioBufferIterator ( address , ( ( int ) ( size ) ) , ( ( java.nio.ByteOrder.nativeOrder ( ) ) != ( java.nio.ByteOrder.LITTLE_ENDIAN ) ) ) ; }
public void setUseJack ( @ com.android.annotations.Nullable java.lang.Boolean useJack ) { this . useJack = useJack ; }
public abstract void setPluginState ( android.webkit.WebSettings.PluginState state ) ;
static com.android.bluetooth.mapclient.MnsService newMnsServiceInstance ( com.android.bluetooth.mapclient.MapClientService mapClientService ) { return ( com.android.bluetooth.mapclient.MapUtils.sMnsService ) == null ? new com.android.bluetooth.mapclient.MnsService ( mapClientService ) : com.android.bluetooth.mapclient.MapUtils.sMnsService ; }
public int length ( ) { final boolean STRING_COMPRESSION_ENABLED = false ; if ( STRING_COMPRESSION_ENABLED ) { return ( count ) > > > 1 ; } else { return count ; } }
static void sendMessageResponse ( android.os.Message msg , java.lang.Object ret ) { if ( msg != null ) { android.os.AsyncResult.forMessage ( msg , ret , null ) ; msg.sendToTarget ( ) ; } }
public static void assertEqualSessions ( long expected , long actual ) { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertEqualByteArrays ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_SESSION_session_id ( expected ) , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_SESSION_session_id ( actual ) ) ; }
void add ( java.math.BigInt a ) { java.math.NativeBN.BN_add ( this . bignum , this . bignum , a.bignum ) ; }
public void testSendEtwsMessageTest ( ) throws java.lang.Exception { android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION ) ; intent.putExtra ( "message" , createFromPdu ( com.android.cellbroadcastreceiver.DialogSmsDisplayTests.etwsMessageTest ) ) ; mContext.sendOrderedBroadcast ( intent , "android.permission.RECEIVE_EMERGENCY_BROADCAST" ) ; }
public int getPoolIndex ( ) { return ( workQueue.poolIndex ) > > > 1 ; }
public void setModel ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo rootViewInfo ) { mRootWrapper.setRoot ( rootViewInfo ) ; if ( ( mTreeViewer ) != null ) { java.lang.Object [ ] expanded = mTreeViewer.getExpandedElements ( ) ; mTreeViewer.refresh ( ) ; mTreeViewer.setExpandedElements ( expanded ) ; } }
public void run ( ) { if ( ( mCallback ) != null ) { mCallback.onPhyUpdate ( this , txPhy , rxPhy , status ) ; } }
public java.lang.Class < ? > getDeclaringClass ( ) { if ( libcore.reflect.AnnotationAccess.isAnonymousClass ( this ) ) { return null ; } return libcore.reflect.AnnotationAccess.getEnclosingClass ( this ) ; }
abstract java.util.Set < java.util.Map.Entry < K , V > > createEntrySet ( ) ;
public void testReplaceValue2_NullPointerException ( ) { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( 5 ) ; try { c.replace ( "whatever" , null , "A" ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
void addDc ( com.android.internal.telephony.dataconnection.DataConnection dc ) { synchronized ( mDcListAll ) { mDcListAll.add ( dc ) ; } }
public static void assertDefaultEllipticCurves ( java.lang.String [ ] curves ) { org.junit.Assert.assertEquals ( libcore.java.security.StandardNames.ELLIPTIC_CURVES_DEFAULT , java.util.Arrays.asList ( curves ) ) ; }
public boolean exists ( com.android.monkeyrunner.easy.By selector ) { com.android.hierarchyviewerlib.device.ViewNode node = selector.findView ( mHierarchyViewer ) ; return node != null ; }
protected boolean isMarked ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node ) { return node.containsMarker ( markerClass ) ; }
public static float $noinline$floatAddSubSimplifyArg1 ( float x , float y ) { float sum = x + y ; return sum - x ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { rescaleToFit ( true ) ; }
public void run ( ) { director.populateDeviceSelectionModel ( ) ; }
protected com.android.build.gradle.internal.variant.ApkVariantOutputData doCreateOutput ( ) { return new com.android.build.gradle.internal.variant.ApkVariantOutputData ( this ) ; }
protected void finalize ( ) throws java.lang.Throwable { if ( ( mClosures ) != null ) { mClosures.clear ( ) ; } super . finalize ( ) ; }
public void unregisterActivityWatcher ( android.app.IActivityWatcher watcher ) { synchronized ( this ) { mWatchers.unregister ( watcher ) ; } }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ( mNativeChunk ) != 0 ) { android.graphics.NinePatch.nativeFinalize ( mNativeChunk ) ; mNativeChunk = 0 ; } } finally { super . finalize ( ) ; } }
public static java.lang.String getFreeWidgetId ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiRoot , java.lang.String name ) { if ( "TabWidget" . equals ( name ) ) { return "@android:id/tabs" ; } return ( com.android.ide.common.layout.LayoutConstants.NEW_ID_PREFIX ) + ( com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.getFreeWidgetId ( uiRoot , new java.lang.Object [ ] { name , null , null , null } ) ) ; }
public void visitProgramClass ( proguard.shrink.ProgramClass programClass ) { if ( usageMarker.isUsed ( programClass ) ) { attributeUsed = true ; } }
public final boolean equals ( java.lang.Object object ) { return object == ( this ) ; }
public void addNewOutgoingCall ( ) { if ( ! ( isVideoAccountEnabled ( ) ) ) { showVideoAccountSettings ( ) ; return ; } java.lang.String phoneNumber = "+44 (0) 20 7031 3000" ; connectionTag = com.android.dialer.simulator.impl.SimulatorSimCallManager.addNewOutgoingCall ( context , phoneNumber , SimulatorSimCallManager.CALL_TYPE_VIDEO ) ; }
public android.telephony.ims.ImsCallProfile createCallProfile ( int callSessionType , int callType ) throws android.os.RemoteException { synchronized ( mLock ) { try { return this . createCallProfile ( callSessionType , callType ) ; } catch ( java.lang.Exception e ) { throw new android.os.RemoteException ( e.getMessage ( ) ) ; } } }
private void resolveIntent ( ) { android.content.Intent intent = getIntent ( ) ; mName = intent.getStringExtra ( com.android.phone.DeleteFdnContactScreen.INTENT_EXTRA_NAME ) ; mNumber = intent.getStringExtra ( com.android.phone.DeleteFdnContactScreen.INTENT_EXTRA_NUMBER ) ; if ( android.text.TextUtils.isEmpty ( mNumber ) ) { finish ( ) ; } }
private void trace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId fid , @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface receiverType ) { trace ( receiverType ) ; com.android.jack.ir.ast.JField field = fid.getField ( ) ; if ( field != null ) { trace ( field ) ; } }
public void free ( ) { address = 0 ; }
public static void setUpClass ( ) { com.tonicsystems.jarjar.Rule rule = new com.tonicsystems.jarjar.Rule ( ) ; rule.setPattern ( "org.**" ) ; rule.setResult ( "foo.@1" ) ; com.android.jack.JarjarTest.remapper = new com.tonicsystems.jarjar.PackageRemapper ( com.tonicsystems.jarjar.PatternElement.createWildcards ( java.util.Collections.singletonList ( rule ) ) ) ; }
public java.lang.String [ ] saw ( java.lang.String prefix , int uid ) { try { return mBinder.saw ( prefix , uid ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return null ; } }
public void testCompareFiboDexFileWithJill ( ) throws java.lang.Exception { com.android.jill.JillTestTools.checkStructureWithJill ( null , com.android.jill.FibonacciThreeAddressTest.JAVA_FILEPATH , false ) ; }
public boolean isTerminated ( ) { return mIsTerminated ; }
private void assertVerdict ( int expected , android.net.apf.ApfGenerator gen , byte [ ] packet , int filterAge ) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfTest.assertReturnCodesEqual ( expected , android.net.apf.ApfTest.apfSimulate ( gen.generate ( ) , packet , null , filterAge ) ) ; }
public int getVersionCode ( ) { if ( ( versionCodeOverride ) > 0 ) { return versionCodeOverride ; } return variantData.getVariantConfiguration ( ) . getVersionCode ( ) ; }
public com.android.jack.dx.rop.cst.CstFieldRef getFieldRef ( ) { if ( ( fieldRef ) == null ) { fieldRef = new com.android.jack.dx.rop.cst.CstFieldRef ( getDefiningClass ( ) , getName ( ) , getDefiningClass ( ) ) ; } return fieldRef ; }
public void loggedRun ( ) { if ( mIsPending ) { android.telecom.Log.addEvent ( mCall , LogUtils.Events.FILTERING_COMPLETED , mResult ) ; mListener.onCallFilteringComplete ( mCall , mResult ) ; mIsPending = false ; } }
public void run ( ) { assert ( mRunLoopID ) != 0 : "The run loop cannot run once closed" ; nativeRun ( ) ; }
public void libToLib ( @ javax.annotation.Nonnull java.io.File [ ] in , @ javax.annotation.Nonnull java.io.File out , boolean zipFiles ) throws java.lang.Exception { libToCommon ( in ) ; setOutputJack ( out , zipFiles ) ; run ( ) ; }
public void forEach ( com.intellij.updater.PatchAction each ) throws java.io.IOException { com.intellij.updater.ValidationResult validationResult = each.validate ( toDir ) ; if ( validationResult != null ) result.add ( validationResult ) ; }
public boolean needsSequentialWriting ( ) { return baseVFS.needsSequentialWriting ( ) ; }
public com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return new com.android.sched.vfs.zip.OutputZipVFile ( zos , new java.util.zip.ZipEntry ( path.getPathAsString ( getSeparator ( ) ) ) , zipFile , this ) ; }
public static java.lang.String input ( java.lang.String message , java.lang.String initialValue , java.lang.String title ) { return ( ( java.lang.String ) ( javax.swing.JOptionPane.showInputDialog ( null , message , title , javax.swing.JOptionPane.QUESTION_MESSAGE , null , null , initialValue ) ) ) ; }
public void actionPerformed ( java.awt.event.ActionEvent e ) { synchronize ( true ) ; }
private boolean isMarked ( @ javax.annotation.Nonnull com.android.sched.marker.MarkerManager node ) { return node.containsMarker ( com.android.jack.shrob.obfuscation.KeepNameMarker.class ) ; }
public void testRemove2_NullPointerException ( ) { java.util.concurrent.ConcurrentSkipListMap c = new java.util.concurrent.ConcurrentSkipListMap ( ) ; c.put ( "sadsdf" , "asdads" ) ; try { c.remove ( null , "whatever" ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public com.android.ims.internal.IImsConfig getConfigInterface ( ) throws android.os.RemoteException { checkBinderConnection ( ) ; return getServiceInterface ( mBinder ) . getConfigInterface ( mSlotId ) ; }
void addOptionInstance ( com.google.devtools.common.options.ParsedOptionDescription parsedOption , java.util.List < java.lang.String > warnings ) { throw new java.lang.IllegalStateException ( ( "Cannot add values to the default option value. Create a modifiable " + "OptionValueDescription using createOptionValueDescription() instead." ) ) ; }
public void setSimPowerState ( int state ) { mCi.setSimCardPower ( state , null ) ; }
public static org.conscrypt.OpenSSLBIOSource wrap ( java.nio.ByteBuffer buffer ) { return new org.conscrypt.OpenSSLBIOSource ( new org.conscrypt.OpenSSLBIOInputStream ( new org.conscrypt.OpenSSLBIOSource.ByteBufferInputStream ( buffer ) , false ) ) ; }
public void registrationConnectedWithRadioTech ( int imsRadioTech ) { if ( com.android.ims.ImsManager.DBG ) { com.android.ims.ImsManager.log ( ( "registrationConnectedWithRadioTech :: imsRadioTech=" + imsRadioTech ) ) ; } if ( ( mListener ) != null ) { mListener.onImsConnected ( ) ; mListener.onImsConnected ( imsRadioTech ) ; } }
protected void tearDown ( ) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . resetData ( ) ; }
public java.lang.String getClasspathName ( ) { return getName ( ) ; }
public void initialize ( ) throws java.lang.Exception { this . socket = serverChannel.socket ( ) ; socket.bind ( null ) ; }
private static native java.lang.String nativeLoad ( java.lang.String filename , java.lang.ClassLoader loader ) ;
public void addNewOutgoingCall ( ) { java.lang.String callerId = "+55-31-2128-6800" ; connectionTag = com.android.dialer.simulator.impl.SimulatorSimCallManager.addNewOutgoingCall ( context , callerId , SimulatorSimCallManager.CALL_TYPE_RTT ) ; }
public void run ( ) { vibrate ( ) ; android.os.SystemClock.sleep ( 250 ) ; android.util.Log.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , "startTracing" ) ; android.os.Debug.startMethodTracing ( "/data/statusbar-traces/trace" ) ; mHandler.postDelayed ( mStopTracing , 10000 ) ; }
private static synchronized native int followingImpl ( int address , java.lang.String text , int offset ) ;
public com.android.ims.internal.IImsCallSession getPendingCallSession ( int sessionId , java.lang.String callId ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getPendingCallSession ( sessionId , callId ) ; } }
public static native long SSL_do_handshake ( long sslNativePointer , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc , int timeoutMillis , boolean client_mode ) throws java.net.SocketTimeoutException , java.security.cert.CertificateException , javax.net.ssl.SSLException ;
private native boolean dialMemoryNative ( byte [ ] address , int location ) ;
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; }
public static native long EVP_CIPHER_CTX_new ( ) ;
public void info ( java.lang.String msg ) { log ( java.util.logging.Level.INFO , msg ) ; }
private static void draw ( long nCanvas , com.android.layoutlib.bridge.impl.GcSnapshot.Drawable drawable ) { android.graphics.Canvas_Delegate canvasDelegate = android.graphics.Canvas_Delegate.sManager.getDelegate ( nCanvas ) ; if ( canvasDelegate == null ) { return ; } canvasDelegate.mSnapshot.draw ( drawable ) ; }
public java.lang.String getVersionName ( ) { if ( ( versionNameOverride ) != null ) { return versionNameOverride ; } return variantData.getVariantConfiguration ( ) . getVersionName ( ) ; }
public native void setDouble ( java.lang.Object obj , double d ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public void tearDown ( ) throws java.lang.Exception { if ( ( videoView ) != null ) { getHelper ( ) . cleanUpView ( videoView ) ; } if ( ( videoViewFactory ) != null ) { videoViewFactory.release ( ) ; } super . tearDown ( ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile ) throws android.os.RemoteException { synchronized ( mLock ) { return this . createCallSession ( sessionId , profile ) ; } }
static boolean native_isIdentity ( long native_object ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return false ; } return d.isIdentity ( ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > bluetoothA2dpGetConnectedDevices ( ) { while ( ! ( com.googlecode.android_scripting.facade.bluetooth.BluetoothA2dpFacade.sIsA2dpReady ) ) { continue ; } return com.googlecode.android_scripting.facade.bluetooth.BluetoothA2dpFacade.sA2dpProfile.getDevicesMatchingConnectionStates ( new int [ ] { android.bluetooth.BluetoothProfile.STATE_CONNECTED , android.bluetooth.BluetoothProfile.STATE_CONNECTING , android.bluetooth.BluetoothProfile.STATE_DISCONNECTING } ) ; }
public void run ( ) { synchronized ( this ) { loadImage ( ) ; crosshairLocation = model.getCrosshairLocation ( ) ; zoom = model.getZoom ( ) ; } }
public static void setUpClass ( ) throws java.lang.Exception { }
public void testConstructor4 ( ) { try { java.lang.Integer [ ] ints = new java.lang.Integer [ SIZE ] ; new java.util.concurrent.ConcurrentLinkedDeque ( java.util.Arrays.asList ( ints ) ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
static void native_reset ( long native_object ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return ; } android.graphics.Matrix_Delegate.reset ( d.mValues ) ; }
int getMinorVersion ( ) ;
public void run ( ) { mTextView.setKeyListener ( digitsKeyListener ) ; }
public void startLceService ( int report_interval_ms , boolean pullMode , android.os.Message result ) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance ( ) . startLceService ( report_interval_ms , pullMode , result ) ; }
public void testConnectWithDisconnectAndSingleExistingNetwork ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; executeAndValidateConnectSequence ( 0 , false , true ) ; }
protected void addRemovedFile ( org.eclipse.core.resources.IFile file ) { mRemoved.add ( file ) ; }
public java.net.Socket createSocket ( java.net.InetAddress host , int port ) throws java.io.IOException { javax.net.ssl.SSLSocket socket = ( ( javax.net.ssl.SSLSocket ) ( mDelegate.createSocket ( host , port ) ) ) ; return configureSocket ( socket ) ; }
protected void createSourceProps ( java.io.File parentDir , java.lang.String ... paramValuePairs ) throws java.io.IOException { createFileProps ( SdkConstants.FN_SOURCE_PROP , parentDir , paramValuePairs ) ; }
public java.lang.String p2pGetSsid ( java.lang.String deviceAddress ) { return mSupplicantP2pIfaceHal.getSsid ( deviceAddress ) ; }
private void sendNowPlayingListChanged ( ) { if ( ( mMediaInterface ) == null ) return ; if ( com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG , "sendNowPlayingListChanged()" ) ; mMediaInterface.nowPlayingChangedRsp ( AvrcpConstants.NOTIFICATION_TYPE_CHANGED ) ; }
private void setMobileDataAlwaysOn ( boolean enable ) { android.content.ContentResolver cr = mServiceContext.getContentResolver ( ) ; Settings.Global.putInt ( cr , Settings.Global.MOBILE_DATA_ALWAYS_ON , ( enable ? 1 : 0 ) ) ; mService.updateMobileDataAlwaysOn ( ) ; waitForIdle ( ) ; }
public boolean matchesPcAndIndex ( int pc , int index ) { return ( ( index == ( this . index ) ) && ( pc >= ( startPc ) ) ) && ( pc < ( ( startPc ) + ( length ) ) ) ; }
public void onCellLocationChanged ( android.telephony.CellLocation location ) { if ( ! ( mOnCellLocationChangedCalled ) ) { synchronized ( mLock ) { mOnCellLocationChangedCalled = true ; mLock.notify ( ) ; } } }
public void prepare ( ) { prepare ( null , null , null , null ) ; }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( com.android.bluetooth.a2dp.A2dpService svc , android.content.Context context ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpStateMachine.TAG , "make" ) ; com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( svc , context ) ; a2dpSm.start ( ) ; return a2dpSm ; }
protected abstract com.intellij.updater.ValidationResult validate ( java.io.File toDir ) throws java.io.IOException ;
public com.android.incallui.videotech.VideoTech getVideoTech ( ) { return videoTech ; }
public com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine getRulesEngine ( ) { return mGraphicalEditor.getRulesEngine ( ) ; }
public void tearDown ( ) throws java.lang.Exception { com.android.server.LocalServices.removeServiceForTest ( android.app.admin.DevicePolicyManagerInternal.class ) ; com.android.server.LocalServices.addService ( android.app.admin.DevicePolicyManagerInternal.class , mSystemDpmi ) ; }
public static com.android.tools.lint.client.api.JavaParser.ResolvedMethod createMethod ( java.lang.String containingClass , java.lang.String returnType , java.lang.String name , java.lang.String parameters ) { return com.android.tools.lint.ExternalAnnotationRepositoryTest.createMethod ( containingClass , returnType , name , parameters , false ) ; }
native void rsnAllocationData2D ( long con , long id , int xoff , int yoff , int mip , int face , android.graphics.Bitmap b ) ;
public java.io.File getOutputFile ( ) { return ( packageLibTask ) == null ? null : packageLibTask.getArchivePath ( ) ; }
public void run ( ) { synchronized ( this ) { tree = model.getTree ( ) ; setBounds ( ) ; setTransform ( ) ; } }
public static void computeNativeCospi ( android.renderscript.cts.TestNativeCospi.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( android.renderscript.cts.CoreMathVerifier.NATIVE_PRECISION , android.renderscript.cts.CoreMathVerifier.NATIVE_PRECISION , true ) ; args.out = android.renderscript.cts.CoreMathVerifier.cospi ( args.inV , t ) ; }
public void run ( ) { mTextView = findTextView ( R.id.textview_text ) ; }
public void testNfcFeatures ( ) { if ( ( android.nfc.NfcAdapter.getDefaultAdapter ( ) ) != null ) { assertAvailable ( PackageManager.FEATURE_NFC ) ; } else { assertNotAvailable ( PackageManager.FEATURE_NFC ) ; } }
public int callDrawGLFunction ( long drawGLFunction ) { return android.view.GLES20Canvas.nCallDrawGLFunction ( mRenderer , drawGLFunction ) ; }
public void registerContentObservers ( ) { appContext.getContentResolver ( ) . registerContentObserver ( BlockedNumbers.CONTENT_URI , true , markDirtyObserver ) ; }
protected byte [ ] engineGenerateSeed ( int numBytes ) { byte [ ] output = new byte [ numBytes ] ; org.conscrypt.NativeCrypto.RAND_bytes ( output ) ; return output ; }
public static com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.Directory readDirectory ( android.database.Cursor cursor ) { return com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.Directory.create ( cursor.getInt ( com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.ID ) , cursor.getString ( com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.DISPLAY_NAME ) , ( ( cursor.getInt ( com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.PHOTO_SUPPORT ) ) != 0 ) ) ; }
private static void $opt$InplaceNegOneInt ( int a ) { a = - a ; Main.assertEquals ( ( - 1 ) , a ) ; }
public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable , java.lang.Object data ) { }
private native boolean phoneStateChangeNative ( int numActive , int numHeld , int callState , java.lang.String number , int type , byte [ ] address ) ;
public void test_X509_NAME_hashes ( ) { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal ( "CN=localhost" ) ; org.junit.Assert.assertEquals ( ( - 1372642656 ) , org.conscrypt.NativeCrypto.X509_NAME_hash ( name ) ) ; org.junit.Assert.assertEquals ( ( - 1626170662 ) , org.conscrypt.NativeCrypto.X509_NAME_hash_old ( name ) ) ; }
public static void assertChainLength ( java.lang.Object [ ] chain ) { org.junit.Assert.assertEquals ( 3 , chain.length ) ; }
void detachFunctor ( long functor ) { if ( ( mCanvas ) != null ) { mCanvas.detachFunctor ( functor ) ; } }
public void callSessionRttModifyResponseReceived ( int status ) { try { mListener.callSessionRttModifyResponseReceived ( status ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void onMetadataChanged ( android.media.MediaMetadata metadata ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , "onMetadataChanged" ) ; updateCurrentMediaState ( ) ; }
public java.lang.String toString ( ) { synchronized ( mDcListAll ) { return ( ( "mDcListAll=" + ( mDcListAll ) ) + " mDcListActiveByCid=" ) + ( mDcListActiveByCid ) ; } }
public int queryCapabilityStatus ( ) throws android.os.RemoteException { return this . queryCapabilityStatus ( ) . mCapabilities ; }
public java.lang.String getProperty ( java.lang.String key ) { try { return manager.getVariable ( key ) ; } catch ( java.io.IOException e ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , ( "Unable to get variable: " + key ) , e ) ; return null ; } }
public static native long SSL_do_handshake ( long sslNativePointer , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc , int timeoutMillis , boolean client_mode , byte [ ] alpnProtocols ) throws java.net.SocketTimeoutException , java.security.cert.CertificateException , javax.net.ssl.SSLException ;
public void testRemove1_NullPointerException ( ) { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( 5 ) ; c.put ( "sadsdf" , "asdads" ) ; try { c.remove ( null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public void testGetCaptivePortalServerUrl ( ) throws java.lang.Exception { java.lang.String url = mCm.getCaptivePortalServerUrl ( ) ; org.junit.Assert.assertEquals ( "http://connectivitycheck.gstatic.com/generate_204" , url ) ; }
public void setUiTTYMode ( int slotId , int featureType , int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException { }
void onBatchScanThresholdCrossed ( int clientIf ) { if ( com.android.bluetooth.gatt.GattService.DBG ) { android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "onBatchScanThresholdCrossed() - clientIf=" + clientIf ) ) ; } flushPendingBatchResults ( clientIf ) ; }
public java.lang.String getPath ( ) { return ( ( com.android.sched.util.location.FileLocation ) ( location ) ) . getPath ( ) ; }
public void test_RAND_bytes_Null_Failure ( ) throws java.lang.Exception { byte [ ] output = null ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.RAND_bytes ( output ) ; fail ( "Should be an error on null buffer input" ) ; } catch ( java.lang.RuntimeException expected ) { } }
public static long max ( long l1 , long l2 ) { return l1 > l2 ? l1 : l2 ; }
public javax.net.ssl.SSLSocket createSocket ( java.net.Socket s , java.lang.String host , int port , boolean autoClose ) throws java.io.IOException { hostNameUsed.set ( host ) ; return ( ( javax.net.ssl.SSLSocket ) ( delegate.createSocket ( s , host , port , autoClose ) ) ) ; }
public android.view.MotionEvent getPendingTrackballMove ( android.view.IWindow window ) { if ( com.android.server.WindowManagerService.localLOGV ) android.util.Slog.v ( com.android.server.WindowManagerService.TAG , ( "IWindow getPendingMotionEvent called for " + window ) ) ; return mKeyWaiter.finishedKey ( this , window , false , com.android.server.WindowManagerService.KeyWaiter.RETURN_PENDING_TRACKBALL ) ; }
final void putLongUnchecked ( int i , long x ) { putLong ( ix ( i ) , x ) ; }
private void setClientInfo ( int pid , java.lang.String pkgName ) { if ( pkgName == null ) { pkgName = com.android.ddmlib.Device.UNKNOWN_PACKAGE ; } mClientInfo.put ( pid , pkgName ) ; }
public java.lang.String getEncoding ( ) { if ( ! ( isOpen ( ) ) ) { return null ; } return decoder.charset ( ) . name ( ) ; }
static long getBasePointer ( java.nio.Buffer b ) { long address = b.effectiveDirectAddress ; if ( address == 0L ) { return 0L ; } return address + ( ( b.position ) << ( b._elementSizeShift ) ) ; }
public void testInvalidInvokevirtual ( ) { mn.visitInsn ( org.objectweb.asm.tree.analysis.ACONST_NULL ) ; mn.visitTypeInsn ( org.objectweb.asm.tree.analysis.CHECKCAST , "java/lang/Object" ) ; mn.visitMethodInsn ( org.objectweb.asm.tree.analysis.INVOKEVIRTUAL , "java/util/ArrayList" , "size" , "()I" , false ) ; assertInvalid ( ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile ) { return null ; }
public void setNpnProtocols ( byte [ ] npnProtocols ) { }
public android.print.PrintDocumentAdapter createPrintDocumentAdapter ( ) { checkThread ( ) ; return new org.chromium.android_webview.AwPrintDocumentAdapter ( mAwContents.getPdfExporter ( ) ) ; }
public void testCustom ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/customview.xml:16: Error: When using a custom namespace attribute in a library project, use the namespace \"http://schemas.android.com/apk/res-auto\" instead. [LibraryCustomView]\n" + ( ( ( " foo:misc=\"Custom attribute\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) + "" ) ) , lintProject ( "multiproject/library-manifest.xml=>AndroidManifest.xml" , "multiproject/library.properties=>project.properties" , "res/layout/customview.xml" ) ) ; }
public android.telephony.mbms.DownloadRequest.Builder setSubscriptionId ( int subscriptionId ) { this . subscriptionId = subscriptionId ; return this ; }
private java.util.List < java.lang.reflect.Method > getTestMethods ( java.lang.Class < ? extends junit.framework.TestCase > testCaseClass ) { java.util.List < java.lang.reflect.Method > methods = java.util.Arrays.asList ( testCaseClass.getMethods ( ) ) ; return select ( methods , new android.test.suitebuilder.TestGrouping.TestMethodPredicate ( ) ) ; }
public void test_getOrDefault ( ) { libcore.java.util.MapDefaultMethodTester.test_getOrDefault ( new java.util.Hashtable < > ( ) , false , false , true ) ; }
public void dispose ( ) { if ( DBG ) log ( ( "Disposing RuimRecords " + ( this ) ) ) ; mParentApp.unregisterForReady ( this ) ; resetRecords ( ) ; super . dispose ( ) ; }
public void init ( ) throws java.lang.Exception { fFormat = android.icu.text.DateFormat.getInstance ( ) ; }
protected void cleanup ( ) { if ( ( mStateMachine ) != null ) { mStateMachine.cleanup ( ) ; } com.android.bluetooth.a2dpsink.A2dpSinkService.clearA2dpSinkService ( ) ; }
public void testCreateTooShortPdu ( ) { byte [ ] pdu = new byte [ 4 ] ; android.telephony.SmsCbMessage msg = createFromPdu ( pdu ) ; assertNull ( "createFromPdu(byte[] with too short pdu should return null" , msg ) ; }
public void testCancelSoon ( ) throws java.lang.Exception { doTestDragAndDrop ( android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON , android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE , null ) ; assertResult ( android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED , android.wm.cts.CrossAppDragAndDropTests.RESULT_OK ) ; assertResult ( android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS , android.wm.cts.CrossAppDragAndDropTests.RESULT_OK ) ; }
public boolean isHost ( ) { return ( this ) == ( vogar.ModeId.HOST ) ; }
public boolean migrateNetworksFromSupplicant ( java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configs , android.util.SparseArray < java.util.Map < java.lang.String , java.lang.String > > networkExtras ) { mWifiSupplicantControl.loadNetworks ( configs , networkExtras ) ; return true ; }
public java.io.File getJar ( ) { return jar ; }
public java.lang.String getMeid ( ) { return mMeid ; }
public void test001b ( ) throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; try { runTest001 ( jackOutput , "fail" , true ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.backend.jayce.ImportConflictException e ) { } }
public void testIsSupported_InvalidInitialCharacter ( ) { try { java.nio.charset.Charset.isSupported ( ".char" ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public void deleteEditor ( ) { mEntry.markDeleted ( ) ; final android.view.ViewGroup parent = ( ( android.view.ViewGroup ) ( getParent ( ) ) ) ; if ( parent != null ) { parent.removeView ( this ) ; } }
private void testUrlToUriMappingAuthority ( java.lang.String urlString , java.lang.String expectedUriString ) throws java.lang.Exception { java.net.URI authorityUri = backdoorUrlToUri ( new java.net.URL ( urlString ) ) ; org.junit.Assert.assertEquals ( expectedUriString , authorityUri.toString ( ) ) ; }
public java.util.List < android.telephony.NetworkRegistrationState > getNetworkRegistrationStates ( ) { synchronized ( mNetworkRegistrationStates ) { return new java.util.ArrayList ( mNetworkRegistrationStates ) ; } }
public com.google.mockwebserver.MockResponse peek ( ) { com.google.mockwebserver.MockResponse peek = responseQueue.peek ( ) ; if ( peek != null ) return peek ; if ( ( failFastResponse ) != null ) return failFastResponse ; return super . peek ( ) ; }
void onEvent ( @ android.support.annotation.NonNull com.android.dialer.simulator.Simulator.Event event ) { events.add ( com.android.dialer.common.Assert.isNotNull ( event ) ) ; for ( com.android.dialer.simulator.impl.SimulatorConnection.Listener listener : new java.util.ArrayList < > ( listeners ) ) { listener.onEvent ( this , event ) ; } }
public void handleMessage ( android.os.Message msg ) { super . handleMessage ( msg ) ; if ( ( msg.what ) == 0 ) { mHandler.sendMessageAtFrontOfQueue ( mHandler.obtainMessage ( 1 ) ) ; } }
com.android.ddmlib.Client [ ] getClients ( ) { synchronized ( mClientList ) { return mClientList.toArray ( new com.android.ddmlib.Client [ mClientList.size ( ) ] ) ; } }
public boolean isEmpty ( ) { return patterns.isEmpty ( ) ; }
public static void computeCross ( android.renderscript.cts.TestCross.ArgumentsFloatNFloatNFloatN args ) { android.renderscript.cts.CoreMathVerifier.cross ( args.inLhs , args.inRhs , args.out , 1 , 4 ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField field ) { return visit ( ( ( com.android.jack.ir.ast.JNode ) ( field ) ) ) ; }
private java.io.OutputStream openOutput ( java.lang.String name ) throws java.io.IOException { if ( ( name.equals ( "-" ) ) || ( name.startsWith ( "-." ) ) ) { return context.out ; } return new java.io.FileOutputStream ( name ) ; }
native void rsnAllocationData1D ( long con , long id , int off , int mip , int count , int [ ] d , int sizeBytes ) ;
private static native boolean findNextImpl ( long addr , int [ ] offsets ) ;
public void onDisplayChanged ( int displayId ) { if ( displayId == ( android.view.Display.DEFAULT_DISPLAY ) ) { final int oldState = mDefaultDisplayState ; mDefaultDisplayState = mDefaultDisplay.getState ( ) ; if ( ( mDefaultDisplayState ) != oldState ) { updateScreenState ( false ) ; } } }
public void testConstructor_EndBeforeStart_Failure ( ) throws java.lang.Exception { try { new android.security.AndroidKeyPairGeneratorSpec ( getContext ( ) , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorSpecTest.TEST_DN_1 , android.security.AndroidKeyPairGeneratorSpecTest.SERIAL_1 , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , android.security.AndroidKeyPairGeneratorSpecTest.NOW , 0 ) ; fail ( "Should throw IllegalArgumentException when end is before start" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void assignSim ( java.lang.String id , int state , java.lang.String link ) { if ( ( type ) == ( com.android.internal.telephony.HardwareConfig.DEV_HARDWARE_TYPE_SIM ) ) { uuid = id ; modemUuid = link ; this . state = state ; } }
public void testVector ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "res/drawable/vector.xml:1: Error: <vector> requires API level 21 (current min is 1) [NewApi]\n" + "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n" ) + "^\n" ) + "AndroidManifest.xml:8: Warning: Attribute \"viewportHeight\" is only used in API level 21 and higher (current min is 1) [UnusedAttribute]\n" ) + " android:viewportHeight=\"24\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:9: Warning: Attribute \"viewportWidth\" is only used in API level 21 and higher (current min is 1) [UnusedAttribute]\n" ) + " android:viewportWidth=\"24\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/drawable/vector.xml:8: Warning: Attribute \"viewportHeight\" is only used in API level 21 and higher (current min is 1) [UnusedAttribute]\n" ) + " android:viewportHeight=\"24\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/drawable/vector.xml:9: Warning: Attribute \"viewportWidth\" is only used in API level 21 and higher (current min is 1) [UnusedAttribute]\n" ) + " android:viewportWidth=\"24\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 4 warnings\n" ) ) , lintProject ( "apicheck/vector.xml=>AndroidManifest.xml" , "apicheck/vector.xml=>res/drawable/vector.xml" ) ) ; }
public void wake ( ) { try { manager.wake ( ) ; } catch ( java.io.IOException e ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , "Unable to wake device (too sleepy?)" , e ) ; } }
long getDisplayList ( long displayList ) { return android.view.GLES20Canvas.nGetDisplayList ( mRenderer , displayList ) ; }
public void addInstanceField ( com.android.jack.dx.dex.file.EncodedField field ) { assert field != null ; instanceFields.add ( field ) ; }
synchronized void nScriptSetVarV ( long id , int slot , byte [ ] val ) { validate ( ) ; rsnScriptSetVarV ( mContext , id , slot , val ) ; }
public void setUp ( ) throws java.lang.Exception { intento = new android.support.test.espresso.intent.Intents ( android.support.test.espresso.intent.IntentsTest.RESETTING_STUB ) ; intento.internalInit ( ) ; }
native void rsnAllocationData1D ( long con , long id , int off , int mip , int count , float [ ] d , int sizeBytes ) ;
public com.android.builder.model.AndroidProject executeAndReturnModel ( java.lang.String ... tasks ) { return execute ( java.util.Collections.< java.lang.String > emptyList ( ) , true , tasks ) ; }
public void testPass6 ( ) { metrics.addTestMetric ( "key2" , "value2" ) ; if ( mOption ) { metrics.addTestMetric ( "junit4-option" , "true" ) ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.IntLiteral x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { push ( new com.android.jack.ir.ast.JIntLiteral ( makeSourceInfo ( x ) , x.constant.intValue ( ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public void removeTransportModeTransforms ( java.net.Socket socket ) throws java.io.IOException { removeTransportModeTransforms ( socket.getFileDescriptor$ ( ) ) ; }
public com.android.volley.toolbox.ImageLoader.ImageContainer get ( java.lang.String requestUrl , final com.android.volley.toolbox.ImageLoader.ImageListener listener ) { return get ( requestUrl , listener , 0 , 0 ) ; }
public final java.lang.String getFormat ( ) { return "PKCS#8" ; }
public static void setUpClass ( ) { com.android.jack.compile.androidtree.core.CoreCompilationTest.SOURCELIST = com.android.jack.TestTools.getTargetLibSourcelist ( "core-libart" ) ; }
public int getTag ( ) { return tag ; }
public void testStagefright_cve_2015_3873_b_21814993 ( ) throws java.lang.Exception { doStagefrightTest ( R.raw.cve_2015_3873_b_21814993 ) ; }
public java.lang.String getLayoutResourceName ( ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart graphicalEditor = getGraphicalEditor ( ) ; return graphicalEditor.getLayoutResourceName ( ) ; }
private static java.util.List < java.io.File > splitLibraryPath ( java.lang.String path ) { return dalvik.system.DexPathList.splitPaths ( path , java.lang.System.getProperty ( "java.library.path" ) , true ) ; }
static void native_reset ( long native_object ) { android.graphics.Paint_Delegate delegate = android.graphics.Paint_Delegate.sManager.getDelegate ( native_object ) ; if ( delegate == null ) { return ; } delegate.reset ( ) ; }
public static void assertEquals ( int expected , int result ) { if ( expected != result ) { throw new java.lang.Error ( ( ( ( "Expected: " + expected ) + ", found: " ) + result ) ) ; } }
final void putFloat ( int offset , float value ) { sun.nio.ch.NativeObject.unsafe.putFloat ( ( offset + ( address ) ) , value ) ; }
public abstract void processAudioEvent ( int state ) ;
public void setUid ( java.lang.String uid ) { this . uid = uid ; }
public boolean isGetChannelsForBandSupported ( ) { return mWifiVendorHal.isGetChannelsForBandSupported ( ) ; }
public void playDtmfTone ( char digit ) { try { mConnectionService.playDtmfTone ( mId , digit , null ) ; } catch ( android.os.RemoteException e ) { } }
private static boolean isAospBuildEnvironment ( ) { if ( ( com.android.tools.lint.detector.api.Project.sAospBuild ) == null ) { com.android.tools.lint.detector.api.Project.sAospBuild = ( com.android.tools.lint.detector.api.Project.getAospTop ( ) ) != null ; } return com.android.tools.lint.detector.api.Project.sAospBuild ; }
public int getState ( ) { return this . getState ( ) ; }
public void TestNordic ( ) { java.lang.String result = android.icu.text.CompactDecimalFormat.getInstance ( new android.icu.util.ULocale ( "no_NO" ) , CompactDecimalFormat.CompactStyle.SHORT ) . format ( 12000 ) ; assertNotEquals ( "CDF(12,000) for no_NO shouldn't be 12 (12K or similar)" , "12" , result ) ; }
private static void log ( java.lang.Exception e ) { }
public android.bluetooth.BluetoothActivityEnergyInfo reportActivityInfo ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return null ; } return service.reportActivityInfo ( ) ; }
public void testResourceType ( ) throws java.lang.Exception { assertEquals ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( com.android.tools.lint.checks.SupportAnnotationDetectorTest.SDK_ANNOTATIONS_AVAILABLE ? "" + ( ( ( ( ( "src/p1/p2/Flow.java:13: Error: Expected resource of type drawable [ResourceType]\n" + " resources.getDrawable(10); // ERROR\n" ) + " ~~\n" ) + "src/p1/p2/Flow.java:18: Error: Expected resource of type drawable [ResourceType]\n" ) + " resources.getDrawable(R.string.my_string); // ERROR\n" ) + " ~~~~~~~~~~~~~~~~~~\n" ) : "" ) + "src/p1/p2/Flow.java:22: Error: Expected resource of type drawable [ResourceType]\n" ) + " myMethod(R.string.my_string, null); // ERROR\n" ) + " ~~~~~~~~~~~~~~~~~~\n" ) + "src/p1/p2/Flow.java:26: Error: Expected resource of type drawable [ResourceType]\n" ) + " resources.getDrawable(R.string.my_string); // ERROR\n" ) + " ~~~~~~~~~~~~~~~~~~\n" ) + "src/p1/p2/Flow.java:32: Error: Expected resource identifier (R.type.name) [ResourceType]\n" ) + " myAnyResMethod(50); // ERROR\n" ) + " ~~\n" ) + ( com.android.tools.lint.checks.SupportAnnotationDetectorTest.SDK_ANNOTATIONS_AVAILABLE ? "src/p1/p2/Flow.java:60: Error: Expected resource of type drawable [ResourceType]\n" + ( " resources.getDrawable(MimeTypes.getAnnotatedString()); // Error\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) : "" ) ) + "src/p1/p2/Flow.java:68: Error: Expected resource of type drawable [ResourceType]\n" ) + " myMethod(z, null); // ERROR\n" ) + " ~\n" ) + "src/p1/p2/Flow.java:71: Error: Expected resource of type drawable [ResourceType]\n" ) + " myMethod(w, null); // ERROR\n" ) + " ~\n" ) + ( com.android.tools.lint.checks.SupportAnnotationDetectorTest.SDK_ANNOTATIONS_AVAILABLE ? "8 errors, 0 warnings\n" : "5 errors, 0 warnings\n" ) ) , lintProject ( copy ( "src/p1/p2/Flow.java.txt" , "src/p1/p2/Flow.java" ) , copy ( "src/android/support/annotation/DrawableRes.java.txt" , "src/android/support/annotation/DrawableRes.java" ) , mStringResAnnotation , mStyleResAnnotation , mAnyResAnnotation ) ) ; }
private void assertIsActive ( int index ) { if ( ( index < ( mActiveStart ) ) || ( index >= ( mActiveEnd ) ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "%s not in (%s, %s)" , index , mActiveStart , mActiveEnd ) ) ; } }
public final T call ( ) { try { return realCall ( ) ; } catch ( java.lang.Throwable fail ) { threadUnexpectedException ( fail ) ; return null ; } }
public void run ( ) { mNM.notify ( 1 , notificationWithNumbers ( 1 ) ) ; }
public void testConstructor_NullSubjectDN_Failure ( ) throws java.lang.Exception { try { new android.security.AndroidKeyPairGeneratorSpec ( getContext ( ) , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , null , android.security.AndroidKeyPairGeneratorSpecTest.SERIAL_1 , android.security.AndroidKeyPairGeneratorSpecTest.NOW , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when subjectDN is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
void addResourceValue ( com.android.ide.common.rendering.api.ResourceValue value ) ;
public static void sort ( byte [ ] a ) { java.util.DualPivotQuicksort.sort ( a , 0 , ( ( a.length ) - 1 ) ) ; }
public void checkClientTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType ) throws java.security.cert.CertificateException { checkTrusted ( chain , authType , null , true ) ; }
private com.android.jack.server.ServerLogConfiguration.LogLevel parseLevel ( @ javax.annotation.Nonnull java.lang.String stringLevel ) throws com.android.sched.util.codec.ParsingException { return new com.android.sched.util.codec.EnumCodec ( com.android.jack.server.ServerLogConfiguration.LogLevel.class ) . checkString ( new com.android.sched.util.codec.CodecContext ( ) , stringLevel ) ; }
protected boolean stop ( ) { if ( ( mStateMachine ) != null ) mStateMachine.doQuit ( ) ; return true ; }
public void printmapping ( java.lang.Object printMapping ) throws proguard.ParseException { mappingFile = ( ( java.io.File ) ( printMapping ) ) ; super . printmapping ( printMapping ) ; }
public com.android.bluetooth.gatt.AdvertiseClient getAdvertiseClient ( int advertiserId ) { for ( com.android.bluetooth.gatt.AdvertiseClient client : mAdvertiseClients ) { if ( ( client.advertiserId ) == advertiserId ) { return client ; } } return null ; }
public java.lang.String getDescriptor ( ) { return descriptor ; }
public void copyFrom ( java.lang.Object array ) { try { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFrom" ) ; copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; } finally { android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; } }
public void testVersion14 ( ) { android.renderscript.cts.ScriptC_set_target_api_14 test14 = new android.renderscript.cts.ScriptC_set_target_api_14 ( mRS ) ; test14.invoke_check ( 14 ) ; waitForMessage ( ) ; checkForErrors ( ) ; }
private static java.lang.ThreadGroup [ ] allGroups ( java.lang.ThreadGroup parent ) { int count = parent.activeGroupCount ( ) ; java.lang.ThreadGroup [ ] all = new java.lang.ThreadGroup [ count ] ; parent.enumerate ( all , true ) ; return all ; }
public void writeTo ( com.google.protobuf.nano.CodedOutputByteBufferNano output ) throws java.io.IOException { }
public static void run ( ) throws java.lang.Exception { art.Test910.doTest ( ) ; }
public void test_unblockWithJoinWithSource ( ) throws java.lang.Exception { setup ( true ) ; try { key.unblock ( java.net.Inet4Address.getByName ( "127.0.0.2" ) ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public void out ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { logger.info ( line ) ; } }
public static native byte [ ] SSL_get_npn_negotiated_protocol ( long sslNativePointer ) ;
public boolean isBondingInitiatedLocally ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return false ; } return service.isBondingInitiatedLocally ( device ) ; }
public abstract void setRenderPriority ( android.webkit.WebSettings.RenderPriority priority ) ;
public static int $noinline$doubleConditionEqualZero ( double d ) { return ( d > 42.0 ) != false ? 13 : 54 ; }
public void addNewIncomingCall ( boolean isSpam ) { java.lang.String callerId = ( isSpam ) ? "+1-661-778-3020" : "+44 (0) 20 7031 3000" ; connectionTag = com.android.dialer.simulator.impl.SimulatorSimCallManager.addNewIncomingCall ( context , callerId , SimulatorSimCallManager.CALL_TYPE_RTT ) ; }
public com.android.dx.cf.direct.DirectClassFile call ( ) throws java.lang.Exception { com.android.dx.cf.direct.DirectClassFile cf = parseClass ( name , bytes ) ; return cf ; }
public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault ( ) { org.objectweb.asm.AnnotationVisitor av = super . visitAnnotationDefault ( ) ; return av == null ? av : new org.objectweb.asm.commons.RemappingAnnotationAdapter ( av , remapper ) ; }
public static void addDeviceChangeListener ( com.android.ddmlib.AndroidDebugBridge.IDeviceChangeListener listener ) { synchronized ( com.android.ddmlib.AndroidDebugBridge.sLock ) { if ( ! ( com.android.ddmlib.AndroidDebugBridge.sDeviceListeners.contains ( listener ) ) ) { com.android.ddmlib.AndroidDebugBridge.sDeviceListeners.add ( listener ) ; } } }
final native java.lang.String getMethodNameInternal ( ) ;
public void error ( java.lang.String tag , java.lang.String message , java.lang.Object data ) { }
public static android.support.v8.renderscript.ScriptIntrinsicYuvToRGB create ( android.support.v8.renderscript.RenderScript rs , android.support.v8.renderscript.Element e ) { long id = rs.nScriptIntrinsicCreate ( 6 , e.getID ( rs ) ) ; android.support.v8.renderscript.ScriptIntrinsicYuvToRGB si = new android.support.v8.renderscript.ScriptIntrinsicYuvToRGB ( id , rs ) ; return si ; }
public void onFullResult ( android.net.wifi.ScanResult fullScanResult ) { }
public boolean isOffloadedFilteringSupported ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return false ; } int val = service.getNumOfOffloadedScanFilterSupported ( ) ; return val >= ( com.android.bluetooth.btservice.AdapterService.MIN_OFFLOADED_FILTERS ) ; }
protected void tearDown ( ) { mNm.setInterruptionFilter ( NotificationManager.INTERRUPTION_FILTER_ALL ) ; mNm.cancelAll ( ) ; deleteChannels ( ) ; com.android.cts.verifier.notifications.MockListener.getInstance ( ) . resetData ( ) ; }
native void rsnScriptSetVarD ( long con , long id , int slot , double val ) ;
public static com.android.ide.common.resources.ResourceUrl create ( @ com.android.annotations.NonNull com.android.resources.ResourceType type , @ com.android.annotations.NonNull java.lang.String name , boolean framework , boolean create ) { return new com.android.ide.common.resources.ResourceUrl ( type , name , framework , create , false ) ; }
public libcore.java.security.TestKeyStore.Builder addSubjectAltName ( com.android.org.bouncycastle.asn1.x509.GeneralName generalName ) { subjectAltNames.add ( generalName ) ; return this ; }
public void callSessionMultipartyStateChanged ( boolean isMultiParty ) { try { mListener.callSessionMultipartyStateChanged ( isMultiParty ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public boolean hasSameBehavior ( java.lang.Object a , java.lang.Object b ) { return a == b ; }
public void setParent ( com.android.voicemail.impl.mail.Part parent ) throws com.android.voicemail.impl.mail.MessagingException { this . parent = parent ; }
public void visitElement ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Element element ) { context.report ( com.android.tools.lint.checks.DeprecationDetector.ISSUE , element , context.getLocation ( element ) , java.lang.String.format ( "`%1$s` is deprecated" , element.getTagName ( ) ) ) ; }
public java.lang.String getIdentity ( ) { return getFieldValue ( android.net.wifi.WifiEnterpriseConfig.IDENTITY_KEY ) ; }
public android.net.IpSecManager.UdpEncapsulationSocket openUdpEncapsulationSocket ( ) throws android.net.IpSecManager.ResourceUnavailableException , java.io.IOException { return new android.net.IpSecManager.UdpEncapsulationSocket ( mService ) ; }
public void addOutput ( @ javax.annotation.Nonnull byte [ ] data , int offset , int length ) { out.println ( new java.lang.String ( java.util.Arrays.copyOfRange ( data , offset , ( offset + length ) ) ) ) ; }
public void callSessionMergeStarted ( com.android.ims.internal.IImsCallSession newSession , com.android.ims.ImsCallProfile profile ) { android.util.Log.d ( com.android.ims.internal.ImsCallSession.TAG , "callSessionMergeStarted" ) ; }
void turnOffIms ( ) throws android.os.RemoteException ;
public static void sort ( long [ ] a ) { java.util.DualPivotQuicksort.sort ( a , 0 , ( ( a.length ) - 1 ) , null , 0 , 0 ) ; }
static boolean shouldPrefix ( java.lang.String typeName ) { return ( ( typeName.startsWith ( "java/" ) ) || ( typeName.startsWith ( "sun/" ) ) ) && ( ! ( com.google.devtools.build.android.desugar.CoreLibraryRewriter.except ( typeName ) ) ) ; }
void removeDc ( com.android.internal.telephony.dataconnection.DataConnection dc ) { synchronized ( mDcListAll ) { mDcListActiveByCid.remove ( dc.mCid ) ; mDcListAll.remove ( dc ) ; } }
private void updateCall ( com.android.server.telecom.Call call ) { updateCall ( call , false , false ) ; }
private void refresh ( ) { com.android.traceur.Receiver.updateTracing ( this , false ) ; }
public void onServiceConnected ( android.content.ComponentName className , android.os.IBinder service ) { android.bluetooth.BluetoothPbap.log ( "Proxy object connected" ) ; mService = IBluetoothPbap.Stub.asInterface ( service ) ; if ( ( mServiceListener ) != null ) { mServiceListener.onServiceConnected ( this ) ; } }
void addOptionInstance ( com.google.devtools.common.options.ParsedOptionDescription parsedOption , java.util.List < java.lang.String > warnings ) { }
static boolean native_rectStaysRect ( long native_object ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return true ; } return ( ( d.computeTypeMask ( ) ) & ( android.graphics.Matrix_Delegate.kRectStaysRect_Mask ) ) != 0 ; }
public static void computeAbs ( android.renderscript.cts.TestAbs.ArgumentsIntUint args ) { args.out = java.lang.Math.abs ( args.inV ) ; }
public void test_getSession ( ) throws java.lang.Exception { javax.net.ssl.SSLEngine sse = getEngine ( ) ; assertNotNull ( sse.getSession ( ) ) ; }
public abstract void setTextZoom ( int textZoom ) ;
public void unplug ( long batteryUptime , long batteryRealtime ) { mUnpluggedCount = mPluggedCount ; mCount.set ( mPluggedCount ) ; }
public void addAddress ( android.net.LinkAddress address ) throws java.io.IOException { try { mService.addAddressToTunnelInterface ( mResourceId , address ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
private static void updateOptions ( @ javax.annotation.Nonnull com.android.jack.Options options , @ javax.annotation.Nonnull java.util.Set < java.lang.String > javaFilesToRecompile ) { java.util.List < java.lang.String > newEcjArguments = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String ecjOptions : options.getEcjArguments ( ) ) { if ( ( ( ! ( ecjOptions.startsWith ( "@" ) ) ) && ( ! ( ecjOptions.endsWith ( ".java" ) ) ) ) && ( ! ( new java.io.File ( ecjOptions ) . isDirectory ( ) ) ) ) { newEcjArguments.add ( ecjOptions ) ; } } for ( java.lang.String fileToRecompile : javaFilesToRecompile ) { newEcjArguments.add ( fileToRecompile ) ; } assert ( com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder ) != null ; java.lang.StringBuilder newClasspath = new java.lang.StringBuilder ( com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder.getPath ( ) ) ; java.lang.String oldClasspath = options.getClasspathAsString ( ) ; if ( oldClasspath != null ) { newClasspath.append ( java.io.File.pathSeparator ) ; newClasspath.append ( oldClasspath ) ; } java.util.List < java.io.File > jayceImport = options.getJayceImport ( ) ; if ( ! ( jayceImport.isEmpty ( ) ) ) { for ( java.io.File importedJackFiles : jayceImport ) { newClasspath.append ( java.io.File.pathSeparator ) ; newClasspath.append ( importedJackFiles.getPath ( ) ) ; } options.setJayceImports ( java.util.Collections.< java.io.File > emptyList ( ) ) ; } options.setClasspath ( newClasspath.toString ( ) ) ; if ( ! ( newEcjArguments.isEmpty ( ) ) ) { options.setEcjArguments ( newEcjArguments ) ; } }
public com.android.dx.merge.SortableType adjust ( com.android.dx.merge.SortableType sortableType ) { return new com.android.dx.merge.SortableType ( sortableType.getDex ( ) , adjust ( sortableType.getClassDef ( ) ) ) ; }
public abstract boolean hasCookies ( boolean privateBrowsing ) ;
public static com.android.dialer.historyitemactions.HistoryItemActionBottomSheet show ( android.content.Context context , com.android.dialer.historyitemactions.HistoryItemBottomSheetHeaderInfo historyItemBottomSheetHeaderInfo , java.util.List < com.android.dialer.historyitemactions.HistoryItemActionModule > modules ) { com.android.dialer.historyitemactions.HistoryItemActionBottomSheet sheet = new com.android.dialer.historyitemactions.HistoryItemActionBottomSheet ( context , historyItemBottomSheetHeaderInfo , modules ) ; sheet.show ( ) ; return sheet ; }
public static void assertEquals ( long expected , long result ) { if ( expected != result ) { throw new java.lang.Error ( ( ( ( "Expected: " + expected ) + ", found: " ) + result ) ) ; } }
public boolean isConnected ( int callSessionType , int callType ) { return false ; }
public void testConstructor_IllegalAliases_Initial ( ) { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockChar" , new java.lang.String [ ] { "mock" , "-123" } ) ; fail ( ) ; } catch ( java.nio.charset.IllegalCharsetNameException e ) { } }
public com.google.common.collect.ImmutableList < com.android.manifmerger.Actions.NodeRecord > getNodeRecords ( com.android.manifmerger.XmlNode.NodeKey key ) { return mRecords.containsKey ( key ) ? mRecords.get ( key ) . getNodeRecords ( ) : com.google.common.collect.ImmutableList.< com.android.manifmerger.Actions.NodeRecord > of ( ) ; }
static void nativeSetLocalMatrix ( long native_shader , long native_skiaShader , long matrix_instance ) { android.graphics.Shader_Delegate shaderDelegate = android.graphics.Shader_Delegate.sManager.getDelegate ( native_shader ) ; if ( shaderDelegate == null ) { return ; } shaderDelegate.mLocalMatrix = android.graphics.Matrix_Delegate.getDelegate ( matrix_instance ) ; }
public static void computeClz ( android.renderscript.cts.TestClz.ArgumentsUintUint args ) { args.out = ( ( int ) ( java.lang.Integer.numberOfLeadingZeros ( args.inValue ) ) ) ; }
public void visitBaseType ( char descriptor ) { }
static final java.lang.Object unmaskNull ( java.lang.Object key ) { return key == ( java.util.IdentityHashMap.NULL_KEY ) ? null : key ; }
public static int [ ] copyOf ( int [ ] original , int newLength ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( java.lang.Integer.toString ( newLength ) ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public int queryCallBarringForServiceClass ( int cbType , int serviceClass ) throws android.os.RemoteException { return this . queryCallBarringForServiceClass ( cbType , serviceClass ) ; }
public android.icu.impl.UResource.TableSink getOrCreateTableSink ( int index ) { return null ; }
public boolean isContextSwitch ( ) { return ( mMethodData.getId ( ) ) == ( - 1 ) ; }
private boolean isInvalidOperatorNumeric ( java.lang.String operatorNumeric ) { return ( ( operatorNumeric == null ) || ( ( operatorNumeric.length ( ) ) < 5 ) ) || ( operatorNumeric.startsWith ( com.android.internal.telephony.ServiceStateTracker.INVALID_MCC ) ) ; }
public boolean setActiveDevice ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.hearingaid.HearingAidService service = getService ( ) ; if ( service == null ) { return false ; } return service.setActiveDevice ( device ) ; }
public void testVP8EncodeDecodeVideoFromBufferToSurface720p ( ) throws java.lang.Throwable { setParameters ( 1280 , 720 , 6000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_VP8 , true , true ) ; android.media.cts.EncodeDecodeTest.BufferToSurfaceWrapper.runTest ( this ) ; }
public java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedField field ) { com.android.tools.lint.ExternalAnnotationRepository.FieldInfo f = findField ( field ) ; if ( f == null ) { return null ; } return f.getAnnotations ( ) ; }
void libToLib ( @ javax.annotation.Nonnull java.io.File in , @ javax.annotation.Nonnull java.io.File out , boolean zipFiles ) throws java.lang.Exception ;
com.android.server.telecom.ConnectionServiceFocusManager create ( com.android.server.telecom.ConnectionServiceFocusManager.CallsManagerRequester requester ) ;
private javax.crypto.MacSpi getSpi ( ) { return getSpi ( null ) ; }
public boolean startTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField field ) { return markIfNecessary ( field ) ; }
void setJavaCompilerTask ( @ com.android.annotations.NonNull com.android.build.gradle.internal.scope.AndroidTask < ? extends org.gradle.api.tasks.compile.AbstractCompile > javaCompileTask ) ;
int getModuleCount ( ) { int moduleCount = 0 ; if ( ( mModules ) != null ) { for ( com.android.tools.gradle.eclipse.ImportModule module : mModules ) { if ( ! ( module.isReplacedWithDependency ( ) ) ) { moduleCount ++ ; } } } return moduleCount ; }
public void severe ( java.lang.String msg ) { log ( java.util.logging.Level.SEVERE , msg ) ; }
public static native java.lang.ClassLoader getClosestUserClassLoader ( ) ;
void libToLib ( @ javax.annotation.Nonnull java.io.File [ ] in , @ javax.annotation.Nonnull java.io.File out , boolean zipFiles ) throws java.lang.Exception ;
public final com.google.common.base.CharMatcher precomputed ( ) { return this ; }
boolean run ( vogar.target.Profiler profiler ) ;
public void setText ( java.text.CharacterIterator newText ) { newText.current ( ) ; wrapped.setText ( newText ) ; }
public int limit ( ) { return data [ ( ( pos ) + 2 ) ] ; }
public abstract void removeSessionCookies ( android.webkit.ValueCallback < java.lang.Boolean > callback ) ;
java.net.InetAddress [ ] lookupAllHostAddr ( java.lang.String hostname , int netId ) throws java.net.UnknownHostException ;
private java.lang.Object readResolve ( ) { java.util.EnumSet < E > result = java.util.EnumSet.noneOf ( elementType ) ; for ( java.lang.Enum < ? > e : elements ) result.add ( ( ( E ) ( e ) ) ) ; return result ; }
public void setTTYMode ( int ttyMode , android.os.Message onComplete ) { super . setTTYMode ( ttyMode , onComplete ) ; if ( ( mImsPhone ) != null ) { mImsPhone.setTTYMode ( ttyMode , onComplete ) ; } }
public synchronized java.io.PrintStream getPrintStream ( ) { if ( ( printer ) == null ) { printer = new java.io.PrintStream ( getOutputStream ( ) ) ; } return printer ; }
public java.lang.String toString ( ) { return ( "name" + ": " ) + ( value.toString ( ) ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws java.lang.Exception { for ( com.android.jack.ir.sourceinfo.FileSourceInfo info : session.getSourceInfoFactory ( ) . getFileSourceInfos ( ) ) { info.setFileName ( "" ) ; } }
private static android.net.Uri getBaseUri ( android.content.Context context ) { return com.android.dialer.blocking.FilteredNumberCompat.useNewFiltering ( context ) ? android.provider.BlockedNumberContract.BlockedNumbers.CONTENT_URI : com.android.dialer.database.FilteredNumberContract.FilteredNumber.CONTENT_URI ; }
public void bindProgramFragment ( android.renderscript.ProgramFragment p ) { validate ( ) ; nContextBindProgramFragment ( ( ( int ) ( safeID ( p ) ) ) ) ; }
public android.app.Notification.Builder addAction ( android.app.Notification.Action action ) { if ( action != null ) { mActions.add ( action ) ; } return this ; }
public void callSessionUssdMessageReceived ( int mode , java.lang.String ussdMessage ) { if ( ( mListener ) != null ) { mListener.callSessionUssdMessageReceived ( this , mode , ussdMessage ) ; } }
public void setCropRect ( android.graphics.Rect cropRect ) { if ( cropRect != null ) { cropRect = new android.graphics.Rect ( cropRect ) ; cropRect.intersect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; } mCropRect = cropRect ; }
private void badCallActionHelper ( android.net.Uri handle , int expectedCode ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_ALARM_CHANGED , handle ) ; int result = processIntent ( intent , true ) ; org.junit.Assert.assertEquals ( expectedCode , result ) ; verifyNoBroadcastSent ( ) ; verifyNoCallPlaced ( ) ; }
public void testInitialize_success ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , false , false , false ) ; }
native void rsnAllocationData2D ( long con , long id , int xoff , int yoff , int mip , int face , int w , int h , float [ ] d , int sizeBytes ) ;
public com.android.tools.r8.utils.AndroidApp.Builder addLibraryFiles ( java.util.Collection < java.nio.file.Path > files ) throws java.io.IOException { for ( java.nio.file.Path file : files ) { addFile ( file , ClassKind.LIBRARY , false ) ; } return this ; }
public void test_blockWithJoinWithSource ( ) throws java.lang.Exception { init ( true ) ; try { key.block ( sourceAddress ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
java.lang.String getName ( ) { return mName ; }
native void rsnAllocationRead ( long con , long id , long [ ] d ) ;
public java.util.Collection < V > values ( ) { java.util.Collection < V > vs = values ; return vs != null ? vs : ( values = new Values ( this ) ) ; }
public boolean unregisterApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "unregisterApp()" ) ; } com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.unregisterApp ( config ) ; }
public static long LongRemainder ( ) { long a ; long b ; long c ; a = 8L ; b = 3L ; c = a % b ; return c ; }
public static int $noinline$NegSub2 ( int arg1 , int arg2 ) { int temp = arg1 - arg2 ; return ( - temp ) | ( - temp ) ; }
private void expectNetworkStatsUidDetail ( android.net.NetworkStats detail ) throws java.lang.Exception { expectNetworkStatsUidDetail ( detail , new android.net.NetworkStats ( 0L , 0 ) ) ; }
public void initRttCallScreenDelegate ( com.android.incallui.rtt.protocol.RttCallScreen rttCallScreen ) { this . rttCallScreen = rttCallScreen ; }
public static void setUp ( android.telecom.PhoneAccountHandle phoneAccountHandle , android.telecom.ConnectionService connectionService ) throws java.lang.Exception { synchronized ( android.telecom.cts.CtsConnectionService.sLock ) { if ( ( android.telecom.cts.CtsConnectionService.sConnectionService ) != null ) { throw new java.lang.Exception ( "Mock ConnectionService exists. Failed to call tearDown()." ) ; } android.telecom.cts.CtsConnectionService.sConnectionService = connectionService ; } }
public boolean isCategory1 ( ) { switch ( basicType ) { case com.android.jack.dx.rop.type.Type.BT_LONG : case com.android.jack.dx.rop.type.Type.BT_DOUBLE : { return false ; } } return true ; }
public java.lang.String getValue ( java.lang.String name ) { return getValue ( new java.util.jar.Attributes.Name ( name ) ) ; }
public void testDigestFiles ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Long > checkSums = myPatch.digestFiles ( getDataDir ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , false , com.intellij.updater.TEST_UI ) ; org.junit.Assert.assertEquals ( 9 , checkSums.size ( ) ) ; }
public static double [ ] copyOf ( double [ ] original , int newLength ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( java.lang.Integer.toString ( newLength ) ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface t ) throws java.lang.Exception { t.removeMarker ( SwitchEnumSupport.UsedEnumField.class ) ; }
public static long $noinline$UShr0 ( long arg ) { return arg > > > 0 ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; }
boolean isExternalCall ( ) { return hasProperty ( CallCompat.Details.PROPERTY_IS_EXTERNAL_CALL ) ; }
public boolean onCreate ( ) { checkDatabases ( ) ; com.android.email.Email.setServicesEnabledAsync ( getContext ( ) ) ; return false ; }
public javax.net.ssl.SSLParameters getSSLParameters ( ) { javax.net.ssl.SSLParameters params = super . getSSLParameters ( ) ; org.conscrypt.Platform.getSSLParameters ( params , sslParameters , this ) ; return params ; }
public java.io.File getTextOutput ( ) { return textOutput ; }
public void onAppStatusChanged ( android.bluetooth.BluetoothDevice pluggedDevice , boolean registered ) { android.util.Log.d ( android.bluetooth.BluetoothHidDeviceCallback.TAG , ( ( ( "onAppStatusChanged: pluggedDevice=" + pluggedDevice ) + " registered=" ) + registered ) ) ; }
public abstract java.lang.String getName ( ) ;
static final java.text.DateFormatSymbols getInstanceRef ( java.util.Locale locale ) { return java.text.DateFormatSymbols.getCachedInstance ( locale ) ; }
public void testConstructor_NullSerial_Failure ( ) throws java.lang.Exception { try { new android.security.AndroidKeyPairGeneratorSpec ( getContext ( ) , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorSpecTest.TEST_DN_1 , null , android.security.AndroidKeyPairGeneratorSpecTest.NOW , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when startDate is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void realRun ( ) { java.util.concurrent.Future future = executor.submit ( sleeper ) ; assertFutureTimesOut ( future ) ; }
long length ( @ com.android.annotations.NonNull java.io.File file ) ;
public void noteVideoTurnedOffLocked ( ) { if ( mVideoTurnedOn ) { mVideoTurnedOn = false ; if ( ( mVideoTurnedOnTimer ) != null ) { mVideoTurnedOnTimer.stopRunningLocked ( this ) ; } } }
public void visitDeprecatedAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.DeprecatedAttribute deprecatedAttribute ) { attributeVisitor.visitDeprecatedAttribute ( clazz , field , deprecatedAttribute ) ; }
public void uncaughtException ( java.lang.Thread t , java.lang.Throwable e ) { if ( e instanceof java.lang.ThreadDeath ) { passed [ 0 ] = true ; } super . uncaughtException ( t , e ) ; }
protected void updateSearchPanel ( ) { super . updateSearchPanel ( ) ; if ( ( mNavigationBarView ) != null ) { mNavigationBarView.setDelegateView ( mSearchPanelView ) ; } }
protected java.net.URLConnection openConnection ( java.net.URL url ) throws java.io.IOException { return new libcore.io.ClassPathURLStreamHandler.ClassPathURLConnection ( url ) ; }
public static com.android.dialer.app.calllog.MissedCallNotifier getInstance ( android.content.Context context ) { return new com.android.dialer.app.calllog.MissedCallNotifier ( context , com.android.dialer.app.calllog.CallLogNotificationsQueryHelper.getInstance ( context ) ) ; }
public void middlewareReady ( ) throws android.os.RemoteException { listener.middlewareReady ( ) ; }
public static void startMethodTracing ( ) { dalvik.system.VMDebug.startMethodTracing ( android.os.Debug.DEFAULT_TRACE_FILE_PATH , 0 , 0 , false , 0 ) ; }
public void addMemberType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface jDeclaredType ) { synchronized ( inners ) { inners.add ( jDeclaredType ) ; } }
void setAvdName ( java.lang.String avdName ) { if ( ! ( isEmulator ( ) ) ) { throw new java.lang.IllegalArgumentException ( "Cannot set the AVD name of the device is not an emulator" ) ; } mAvdName = avdName ; }
public org.eclipse.ltk.core.refactoring.RefactoringStatus checkInitialConditions ( org.eclipse.core.runtime.IProgressMonitor pm ) throws org.eclipse.core.runtime.CoreException , org.eclipse.core.runtime.OperationCanceledException { if ( ( mProject.findMaxProblemSeverity ( IMarker.PROBLEM , true , IResource.DEPTH_INFINITE ) ) == ( org.eclipse.core.resources.IMarker.SEVERITY_ERROR ) ) { return org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus ( "Fix the errors in your project, first." ) ; } return new org.eclipse.ltk.core.refactoring.RefactoringStatus ( ) ; }
public void testManagedProvisioningPreInstalled ( ) throws java.lang.Exception { if ( mDeviceAdmin ) { assertTrue ( isPackageInstalledOnSystemImage ( android.admin.cts.DevicePolicyManagerTest.MANAGED_PROVISIONING_PKG ) ) ; } }
public boolean hasResources ( com.android.resources.ResourceType type ) { java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > list = mResourceItems.get ( type ) ; return ( list != null ) && ( ( list.size ( ) ) > 0 ) ; }
public void run ( ) { while ( scanner.hasNextLine ( ) ) { java.lang.String line = scanner.nextLine ( ) ; result.add ( line ) ; } }
public static long $noinline$NegNeg1 ( long arg ) { return - ( - arg ) ; }
private void unpackBundle ( byte [ ] content , java.io.File targetDir ) throws java.io.IOException { android.util.Slog.i ( logTag , ( "Unpacking update content to: " + targetDir ) ) ; libcore.tzdata.update2.ConfigBundle bundle = new libcore.tzdata.update2.ConfigBundle ( content ) ; bundle.extractTo ( targetDir ) ; }
void assertNoCallback ( ) { waitForIdle ( ) ; com.android.server.ConnectivityServiceTest.CallbackInfo c = mCallbacks.peek ( ) ; assertNull ( ( "Unexpected callback: " + c ) , c ) ; }
protected abstract android.webkit.WebHistoryItem clone ( ) ;
public static void computeFdim ( android.renderscript.cts.TestFdim.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Math.max ( 0.0F , ( ( args.inA ) - ( args.inB ) ) ) , 0 , 1 ) ; }
private void checkGraphic ( java.lang.String baseName ) throws java.io.IOException { com.android.assetstudiolib.MenuIconGenerator generator = new com.android.assetstudiolib.MenuIconGenerator ( ) ; checkGraphic ( 4 , "menus" , baseName , generator , new com.android.assetstudiolib.GraphicGenerator.Options ( ) ) ; }
public static int max ( int i1 , int i2 ) { return i1 > i2 ? i1 : i2 ; }
public void testOpenSocketAddress_Null ( ) throws java.io.IOException { try { java.nio.channels.SocketChannel.open ( null ) ; fail ( "Should throw an IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException e ) { } }
final long getLong ( int offset ) { return sun.nio.ch.NativeObject.unsafe.getLong ( ( offset + ( address ) ) ) ; }
public void setAudioRoute ( int route ) { try { mAdapter.setAudioRoute ( route , null ) ; } catch ( android.os.RemoteException e ) { } }
public static android.support.v8.renderscript.ScriptIntrinsicConvolve5x5 create ( android.support.v8.renderscript.RenderScript rs , android.support.v8.renderscript.Element e ) { long id = rs.nScriptIntrinsicCreate ( 4 , e.getID ( rs ) ) ; return new android.support.v8.renderscript.ScriptIntrinsicConvolve5x5 ( id , rs ) ; }
public static int $noinline$intReverseConditionNaN ( int i ) { return 42 != ( java.lang.Math.sqrt ( i ) ) ? 13 : 54 ; }
public void run ( ) { android.os.Looper.prepare ( ) ; mLooper = android.os.Looper.myLooper ( ) ; mInitErrors = mCamera.cameraInitUnspecified ( mCameraId ) ; mStartDone.open ( ) ; android.os.Looper.loop ( ) ; }
public static boolean equalMethodParameters ( java.lang.reflect.ArtMethod artMethod , java.lang.Class < ? > [ ] params ) { return java.lang.reflect.ArtMethod.equalConstructorParameters ( artMethod , params ) ; }
public java.io.File [ ] getSkins ( ) { return mSkins ; }
public void lockNow ( @ android.app.admin.DevicePolicyManager.LockNowFlag int flags ) { if ( ( mService ) != null ) { try { mService.lockNow ( flags , mParentInstance ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public void onActionModeStarted ( android.view.ActionMode mode ) { mUi.onActionModeStarted ( mode ) ; mActionMode = mode ; }
