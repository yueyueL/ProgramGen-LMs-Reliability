public static long LongAddition ( ) { long a ; long b ; long c ; a = 1L ; b = 2L ; c = a + b ; return c ; }
protected void create ( ) throws java.net.SocketException { }
protected void unregisterForRuimRecordEvents ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.unregisterForRecordsEvents ( this ) ; r.unregisterForRecordsLoaded ( this ) ; }
void assertNoCallback ( ) { waitForIdle ( ) ; com.android.server.ConnectivityServiceTest.CallbackInfo c = mCallbacks.peek ( ) ; assertNull ( ( "Unexpected callback: " + c ) , c ) ; }
public android.media.MediaDrm.CryptoSession getCryptoSession ( @ android.annotation.NonNull byte [ ] sessionId , @ android.annotation.NonNull java.lang.String cipherAlgorithm , @ android.annotation.NonNull java.lang.String macAlgorithm ) { return new android.media.MediaDrm.CryptoSession ( this , sessionId , cipherAlgorithm , macAlgorithm ) ; }
public void test_plus_Duration_null ( ) { TEST_2008_6_30_11_30_59_000000500.plus ( ( ( java.time.Duration ) ( null ) ) ) ; }
private void copyToClipboard ( java.lang.String str ) { android.text.ClipboardManager clip = ( ( android.text.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; clip.setText ( str ) ; }
public void getLastPdpFailCause ( android.os.Message result ) { getLastDataCallFailCause ( result ) ; }
public void changeState ( com.android.tv.dvr.ScheduledRecording scheduledRecording , @ com.android.tv.dvr.ScheduledRecording.RecordingState int newState ) { if ( ( scheduledRecording.getState ( ) ) != newState ) { updateScheduledRecording ( com.android.tv.dvr.ScheduledRecording.buildFrom ( scheduledRecording ) . setState ( newState ) . build ( ) ) ; } }
boolean runTests ( @ com.android.annotations.NonNull java.lang.String projectName , @ com.android.annotations.NonNull java.lang.String variantName , @ com.android.annotations.NonNull java.io.File testApk , @ com.android.annotations.Nullable java.io.File testedApk , @ com.android.annotations.NonNull com.android.builder.testing.TestData testData , @ com.android.annotations.NonNull java.util.List < ? extends com.android.builder.testing.api.DeviceConnector > deviceList , int maxThreads , int timeout , @ com.android.annotations.NonNull java.io.File resultsDir , @ com.android.annotations.NonNull com.android.utils.ILogger logger ) throws com.android.builder.testing.api.TestException , java.lang.InterruptedException ;
public void testE1 ( ) { dot.junit.opcodes.aget_short.d.T_aget_short_1 t = new dot.junit.opcodes.aget_short.d.T_aget_short_1 ( ) ; short [ ] arr = new short [ 2 ] ; try { t.run ( arr , 2 ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
private int getModuloHash ( java.lang.Object key , int length ) { return ( ( ( java.lang.System.identityHashCode ( key ) ) & 2147483647 ) % ( length / 2 ) ) * 2 ; }
private void onNetworkState ( int state ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_NETWORK_STATE ) ; event.valueInt = state ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void testGetTestCaseNamesForTestSuiteWithSuiteMethod ( ) throws java.lang.Exception { junit.framework.TestSuite testSuite = new android.test.TestCaseUtilTest.TwoTestsInTestSuite ( ) ; java.util.List < java.lang.String > testCaseNames = android.test.TestCaseUtil.getTestCaseNames ( testSuite , false ) ; assertEquals ( 0 , testCaseNames.size ( ) ) ; }
public boolean connectToStaSupplicant ( ) { if ( ( ! ( mSupplicantStaIfaceHal.isInitializationStarted ( ) ) ) && ( ! ( mSupplicantStaIfaceHal.initialize ( ) ) ) ) { return false ; } return mSupplicantStaIfaceHal.isInitializationComplete ( ) ; }
public abstract long id ( ) ;
public static java.nio.ByteBuffer allocateDirect ( int capacity ) { if ( capacity < 0 ) { throw new java.lang.IllegalArgumentException ( ) ; } return new java.nio.ReadWriteDirectByteBuffer ( capacity ) ; }
protected final void doOKAction ( ) { doAction ( ) ; }
public void stopDtmf ( ) { logi ( "stopDtmf :: " ) ; synchronized ( mLockObj ) { if ( ( mSession ) != null ) { mSession.stopDtmf ( ) ; } } }
public void getNetworkSelectionModeResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , boolean var2 ) { }
public void onCharacteristicRead ( java.lang.String address , int status , int srvcType , int srvcInstId , android.os.ParcelUuid srvcUuid , int charInstId , android.os.ParcelUuid charUuid , byte [ ] value ) throws android.os.RemoteException { }
public static native int SSL_set_alpn_protos ( long sslPointer , byte [ ] protos ) ;
public int getCallStateForSlot ( int slotId ) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( slotId ) ; return phone == null ? android.telephony.TelephonyManager.CALL_STATE_IDLE : com.android.internal.telephony.DefaultPhoneNotifier.convertCallState ( phone.getState ( ) ) ; }
private void resetProxyAndRequestList ( ) { mRadioProxy = null ; mRadioProxyCookie.incrementAndGet ( ) ; setRadioState ( RadioState.RADIO_UNAVAILABLE ) ; com.android.internal.telephony.RILRequest.resetSerial ( ) ; clearRequestList ( com.android.internal.telephony.RADIO_NOT_AVAILABLE , false ) ; getRadioProxy ( null ) ; }
public static android.renderscript.RenderScript create ( android.content.Context ctx , int sdkVersion ) { return android.renderscript.RenderScript.create ( ctx , sdkVersion , android.renderscript.RenderScript.ContextType.NORMAL ) ; }
public boolean getRenderscriptSupportMode ( ) { java.lang.Boolean value = mMergedFlavor.getRenderscriptSupportMode ( ) ; if ( value != null ) { return value ; } return false ; }
public static void computeExp10 ( android.renderscript.cts.TestExp10.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 32 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.exp10 ( args.in , t ) ; }
public void testOlderSdk ( ) throws java.lang.Exception { assertEquals ( "No warnings." , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/AnnotatedObject.java.txt=>src/test/pkg/AnnotatedObject.java" , "bytecode/InheritsFromAnnotated.java.txt=>src/test/pkg/InheritsFromAnnotated.java" , "bytecode/NonAnnotatedObject.java.txt=>src/test/pkg/NonAnnotatedObject.java" , "bytecode/JavaScriptTest.java.txt=>src/test/pkg/JavaScriptTest.java" , "bytecode/AnnotatedObject.class.data=>bin/classes/test/pkg/AnnotatedObject.class" , "bytecode/InheritsFromAnnotated.class.data=>bin/classes/test/pkg/InheritsFromAnnotated.class" , "bytecode/JavaScriptTest.class.data=>bin/classes/test/pkg/JavaScriptTest.class" , "bytecode/NonAnnotatedObject.class.data=>bin/classes/test/pkg/NonAnnotatedObject.class" ) ) ; }
public java.util.List < java.lang.String > targetProcessPrefix ( ) { return com.google.common.collect.ImmutableList.of ( "adb" , "shell" ) ; }
public void onClick ( android.view.View v ) { doPauseResume ( ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mCarQualifier = new com.android.ide.common.resources.configuration.DockModeQualifier ( com.android.resources.DockMode.CAR ) ; mDeskQualifier = new com.android.ide.common.resources.configuration.DockModeQualifier ( com.android.resources.DockMode.DESK ) ; mNoneQualifier = new com.android.ide.common.resources.configuration.DockModeQualifier ( com.android.resources.DockMode.NONE ) ; }
public static < T > org.hamcrest.Matcher < java.lang.Iterable < T > > everyItem ( final org.hamcrest.Matcher < T > elementMatcher ) { return org.hamcrest.CoreMatchers.everyItem ( elementMatcher ) ; }
synchronized int nAllocationGetType ( int id ) { validate ( ) ; return rsnAllocationGetType ( mContext , id ) ; }
synchronized int nSamplerCreate ( int magFilter , int minFilter , int wrapS , int wrapT , int wrapR , float aniso ) { validate ( ) ; return rsnSamplerCreate ( mContext , magFilter , minFilter , wrapS , wrapT , wrapR , aniso ) ; }
public com.android.tools.lint.client.api.IDomParser getDomParser ( ) { return new com.android.ide.eclipse.adt.internal.lint.EclipseLintClient ( null , null , null , false ) . getDomParser ( ) ; }
public static long UShr60And7 ( long arg ) { return ( arg > > > 60 ) & 7 ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { if ( rtlApplies ( context ) ) { return new com.android.tools.lint.checks.RtlDetector.IdentifierChecker ( context ) ; } return new lombok.ast.ForwardingAstVisitor ( ) { } ; }
public java.net.HttpURLConnection connect ( com.google.mockwebserver.MockWebServer server , java.net.URL url ) throws java.io.IOException { }
private static void checkPendingIntent ( android.app.PendingIntent intent ) { com.android.internal.util.Preconditions.checkArgument ( ( intent != null ) , "PendingIntent cannot be null." ) ; }
static float $opt$LongToFloat ( long a ) { return ( ( float ) ( a ) ) ; }
private void notifyReliableWriteCompleted ( ) { showMessage ( "Reliable write compelte" ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_RELIABLE_WRITE_COMPLETED ) ; sendBroadcast ( intent ) ; }
public final java.security.AlgorithmParameters getParameters ( ) { return spiImpl.engineGetParameters ( ) ; }
public native void setByte ( java.lang.Object object , byte value ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public static int intToDoubleToInt ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
private void enforceNotifyPermissionOrCarrierPrivilege ( java.lang.String method ) { if ( checkNotifyPermission ( ) ) { return ; } enforceCarrierPrivilege ( ) ; }
public static void addMultiTransformationResults ( CommonClassDefinition ... defs ) throws java.lang.Exception { for ( CommonClassDefinition d : defs ) { Main.addCommonTransformationResult ( d.target.getCanonicalName ( ) , d.class_file_bytes , d.dex_file_bytes ) ; } }
public java.lang.String getName ( ) { if ( ( mMode ) == ( com.android.ide.eclipse.adt.internal.refactorings.extractstring.ExtractStringRefactoring.Mode.SELECT_ID ) ) { return "Create or USe Android String" ; } else if ( ( mMode ) == ( com.android.ide.eclipse.adt.internal.refactorings.extractstring.ExtractStringRefactoring.Mode.SELECT_NEW_ID ) ) { return "Create New Android String" ; } return "Extract Android String" ; }
private static java.lang.String getTypeDescription ( java.lang.reflect.Field optionsField , com.google.devtools.common.options.OptionsData optionsData ) { return optionsData.getConverter ( optionsField ) . getTypeDescription ( ) ; }
public final com.android.jack.test.toolchain.Toolchain setAnnotationProcessorClass ( @ javax.annotation.Nonnull java.lang.Class < ? extends javax.annotation.processing.Processor > annotationProcessorClass ) { this . annotationProcessorClass = annotationProcessorClass ; return this ; }
public static native int EVP_SignFinal ( long ctx , byte [ ] signature , int offset , long key ) ;
public void testGeomagneticRotationVector_fastest_flush ( ) throws java.lang.Throwable { runFlushSensorTest ( Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR , android.hardware.cts.SensorBatchingTests.RATE_FASTEST , android.hardware.cts.SensorBatchingTests.BATCHING_10S ) ; }
public byte [ ] getPubkey ( java.lang.String key ) { return getPubkey ( android.security.KeyStore.getKeyBytes ( key ) ) ; }
public native long getLength ( java.io.File f ) ;
private void setMobileDataAlwaysOn ( boolean enable ) { android.content.ContentResolver cr = mServiceContext.getContentResolver ( ) ; Settings.Global.putInt ( cr , Settings.Global.MOBILE_DATA_ALWAYS_ON , ( enable ? 1 : 0 ) ) ; mService.updateMobileDataAlwaysOn ( ) ; mService.waitForIdle ( ) ; }
public void visitLineNumberTableAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.CodeAttribute codeAttribute , proguard.classfile.attribute.visitor.LineNumberTableAttribute lineNumberTableAttribute ) { if ( accepted ( clazz , lineNumberTableAttribute ) ) { lineNumberTableAttribute.accept ( clazz , method , codeAttribute , attributeVisitor ) ; } }
public void modifyText ( org.eclipse.swt.events.ModifyEvent e ) { updateAppliedFilters ( ) ; }
private void doTestGoog ( java.lang.String mimeType , int w , int h ) throws java.lang.Exception { mTestConfig.mTestPixels = false ; mTestConfig.mTestResult = true ; mTestConfig.mTotalFrames = 3000 ; mTestConfig.mNumberOfRepeat = 2 ; doTest ( true , mimeType , w , h ) ; }
public boolean visitEnter ( com.android.tools.perflib.heap.Instance instance ) ;
public void execute ( org.w3c.dom.Element element ) { renderCompositeResults ( element , results.getResultsPerDevices ( ) , "Devices" ) ; }
public java.io.File getAssetsDir ( ) { return getAssets ( ) . getDirectory ( ) ; }
public com.android.jack.test.toolchain.JackCliToolchain setVerbose ( boolean isVerbose ) { super . setVerbose ( isVerbose ) ; verbosityLevel = ( isVerbose ) ? com.android.jack.Options.VerbosityLevel.INFO : com.android.jack.Options.VerbosityLevel.WARNING ; return this ; }
public void testPlayAudio ( ) throws java.lang.InterruptedException { playAV ( INPUT_RESOURCE_ID , 5000 , true , false , 10000 ) ; }
public android.telephony.ims.internal.stub.ImsRegistrationImplBase getRegistration ( int slotId ) { return new android.telephony.ims.internal.stub.ImsRegistrationImplBase ( ) ; }
native void rsnScriptInvokeV ( long con , long id , int slot , byte [ ] params ) ;
private static com.ibm.icu.text.DecimalFormat getCannedDecimalFormat ( java.lang.String pattern , com.ibm.icu.util.ULocale uloc ) { return new com.ibm.icu.text.DecimalFormat ( pattern , com.ibm.icu.dev.test.serializable.FormatTests.getCannedDecimalFormatSymbols ( uloc ) ) ; }
public boolean isNumberGeographical ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType numberType , int countryCallingCode ) { return ( ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE ) ) || ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE_OR_MOBILE ) ) ) || ( ( com.google.i18n.phonenumbers.PhoneNumberUtil.GEO_MOBILE_COUNTRIES.contains ( countryCallingCode ) ) && ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.MOBILE ) ) ) ; }
public void invokeOemRilRequestStrings ( java.lang.String [ ] strings , android.os.Message response ) { if ( response != null ) { android.os.AsyncResult.forMessage ( response ) . result = strings ; response.sendToTarget ( ) ; } }
public java.lang.String getFullMethodPath ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; getFullMethodPath ( sb ) ; return sb.toString ( ) ; }
public int getShutdownDelay ( ) { return getDelay ( com.android.jack.server.ConfigFile.SHUTDOWN_PROPERTY , com.android.jack.server.ConfigFile.CONFIG_TIME_DISABLED_VALUE ) ; }
public int updateCOLR ( int presentation ) throws android.os.RemoteException { return - 1 ; }
public boolean matches ( final java.lang.String s ) { return pattern.matcher ( s ) . matches ( ) ; }
public void visitMethodHandleConstant ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.MethodHandleConstant methodHandleConstant ) { methodHandleConstant.javaLangInvokeMethodHandleClass = findClass ( clazz.getName ( ) , ClassConstants.INTERNAL_NAME_JAVA_LANG_INVOKE_METHOD_HANDLE ) ; }
public static com.google.common.hash.HashCode hash ( java.io.File file , com.google.common.hash.HashFunction hashFunction ) throws java.io.IOException { return com.google.common.io.ByteStreams.hash ( com.google.common.io.Files.newInputStreamSupplier ( file ) , hashFunction ) ; }
public void setUp ( ) { users = new com.google.gct.login.Users ( ) ; user1 = new com.google.gct.login.User ( "user1" ) ; user2 = new com.google.gct.login.User ( "user2" ) ; user3 = new com.google.gct.login.User ( "user3" ) ; }
native void rsnScriptForEach ( long con , long id , int slot , long ain , long aout , byte [ ] params ) ;
public android.telephony.ServiceState getServiceState ( ) { return mSST.mSS ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDynamicCastOperation x ) { trace ( x.getType ( ) ) ; }
public final native int addAssetPath ( java.lang.String path ) ;
public void setSigningStoreLocation ( java.lang.String signingStoreLocation ) { mSigningStoreLocation = signingStoreLocation ; }
public java.lang.String [ ] getSupportedCipherSuites ( ) { if ( ( instantiationException ) != null ) { return libcore.util.EmptyArray.STRING ; } return org.conscrypt.CipherSuite.getSupportedCipherSuiteNames ( ) ; }
public static boolean isDeveloperOptionsEnabled ( android.app.Instrumentation instrumentation ) throws android.support.test.uiautomator.UiObjectNotFoundException { return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem ( instrumentation , "Developer options" ) ; }
private com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor createRequestFocus ( ) { java.lang.String xml_name = com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.REQUEST_FOCUS ; return new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( xml_name , xml_name , xml_name , "Requests focus for the parent element or one of its descendants" , null , null , null , null , false ) ; }
public void setCellBroadcastSmsConfig ( int [ ] configValuesArray , android.os.Message response ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "[CDMAPhone] setCellBroadcastSmsConfig() is obsolete; use SmsManager" ) ; response.sendToTarget ( ) ; }
private boolean shouldAdjustKeySizes ( ) { return isLandscapeMode ( ) ? shouldAdjustKeyWidths ( ) : shouldAdjustDigitKeyHeights ( ) ; }
public void destroy ( ) { android.telecom.Log.addEvent ( this , LogUtils.Events.DESTROYED ) ; }
private static com.android.sdklib.util.Pair < org.eclipse.core.resources.IFile , org.eclipse.jface.text.IRegion > findIdInDocument ( java.lang.String id , org.eclipse.core.resources.IFile file , org.w3c.dom.Document document ) { java.lang.String targetAttribute = "@+id/" + id ; return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findIdInElement ( document.getDocumentElement ( ) , file , targetAttribute ) ; }
protected com.intellij.execution.configurations.ModuleBasedConfiguration createInstance ( ) { return new com.google.gct.idea.appengine.run.AppEngineRunConfiguration ( getName ( ) , getProject ( ) , getFactory ( ) ) ; }
public java.lang.String convertToString ( android.database.Cursor cursor ) { return cursor.getString ( 5 ) ; }
public android.util.Pair < java.lang.String , android.media.MediaFormat > readTrackInfoFile ( boolean isAudio ) { return null ; }
protected abstract void printFilteredProblem ( @ javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel , @ javax.annotation.Nonnull java.lang.String message , @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo sourceInfo ) ;
public final java.lang.String toString ( ) { java.lang.String result = cachedToStringResult ; return result == null ? cachedToStringResult = toNewString ( ) : result ; }
native void rsnAllocationElementData1D ( int con , int id , int xoff , int mip , int compIdx , byte [ ] d , int sizeBytes ) ;
private android.os.RegistrantList getRegistrantsFromAction ( int action ) { switch ( action ) { case com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_SET_METERED_APNS_ENABLED : return mMeteredApnEnableRegistrants ; case com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_SET_RADIO_ENABLED : return mRadioEnableRegistrants ; default : loge ( ( "Unsupported action: " + action ) ) ; return null ; } }
protected void setProgressBarVisible ( boolean visible ) { if ( ( mProgressHeader ) != null ) { mProgressHeader.setVisibility ( ( visible ? android.view.View.VISIBLE : android.view.View.INVISIBLE ) ) ; } }
public static native void EVP_VerifyUpdate ( long ctx , byte [ ] buffer , int offset , int length ) ;
public abstract com.google.common.collect.ImmutableSet < C > columnKeySet ( ) ;
private void skipClass ( ) { while ( true ) { char c = descriptor.charAt ( ( ( index ) ++ ) ) ; switch ( c ) { case proguard.classfile.ClassConstants.INTERNAL_TYPE_GENERIC_START : skipGeneric ( ) ; break ; case proguard.classfile.ClassConstants.INTERNAL_TYPE_CLASS_END : return ; } } }
public void testHasImeActionNoInputConnection ( ) { android.widget.Button button = new android.widget.Button ( context ) ; assertFalse ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( 0 ) . matches ( button ) ) ; }
public boolean isHalStarted ( ) { return ( mIWifiStaIface ) != null ; }
public boolean hasResourcesOfType ( @ com.android.annotations.NonNull com.android.resources.ResourceType type ) { ensureInitialized ( ) ; java.util.Map < java.lang.String , com.android.ide.common.resources.ResourceItem > items = mResourceMap.get ( type ) ; return ( items != null ) && ( ( items.size ( ) ) > 0 ) ; }
public void clearHistory ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearHistory ( ) ; } } ) ; return ; } mAwContents.clearHistory ( ) ; }
public void testFlagIEF ( ) { installFromRawResource ( "install.apk" , R.raw.install , ( ( ( PackageManager.INSTALL_FORWARD_LOCK ) | ( PackageManager.INSTALL_INTERNAL ) ) | ( PackageManager.INSTALL_EXTERNAL ) ) , false , true , PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION , PackageInfo.INSTALL_LOCATION_AUTO ) ; }
public void processTerminated ( com.intellij.appengine.actions.ProcessEvent event ) { int exitCode = event.getExitCode ( ) ; if ( exitCode == 0 ) { myCallback.succeeded ( new com.intellij.remoteServer.runtime.deployment.DeploymentRuntime ( ) ) ; } else { myCallback.errorOccurred ( ( "Process terminated with exit code " + exitCode ) ) ; } }
public java.lang.String getName ( ) { return "zipalign" + ( com.android.utils.StringHelper.capitalize ( scope.getVariantOutputData ( ) . getFullName ( ) ) ) ; }
public void setJacocoIntrumentTask ( @ com.android.annotations.NonNull com.android.build.gradle.internal.scope.AndroidTask jacocoIntrumentTask ) { this . jacocoIntrumentTask = jacocoIntrumentTask ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { refreshTags ( ) ; }
private void resetProxyAndRequestList ( ) { mRadioProxy = null ; mRadioProxyCookie.incrementAndGet ( ) ; setRadioState ( RadioState.RADIO_UNAVAILABLE ) ; com.android.internal.telephony.RILRequest.resetSerial ( ) ; clearRequestList ( com.android.internal.telephony.RADIO_NOT_AVAILABLE , false ) ; }
public void onCreate ( android.os.Bundle bundle ) { super . onCreate ( bundle ) ; setContentView ( R.layout.transition_main ) ; }
public void testE2 ( ) { dot.junit.opcodes.aput_wide.d.T_aput_wide_1 t = new dot.junit.opcodes.aput_wide.d.T_aput_wide_1 ( ) ; try { t.run ( null , 1 , 100000000000L ) ; fail ( "expected NullPointerException" ) ; } catch ( java.lang.NullPointerException np ) { } }
protected java.io.File buildProject ( java.lang.String name , java.lang.String gradleVersion ) { return runTasksOnProject ( name , gradleVersion , "clean" , "assembleDebug" , "lint" ) ; }
protected void engineInit ( java.security.spec.AlgorithmParameterSpec genParamSpec , java.security.SecureRandom random ) throws org.bouncycastle.jcajce.provider.symmetric.InvalidAlgorithmParameterException { }
public static short charToDoubleToShort ( char value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( ( double ) ( value ) ) ) ; }
default < T extends java.lang.annotation.Annotation > T [ ] getAnnotationsByType ( java.lang.Class < T > annotationClass ) { return libcore.reflect.AnnotatedElements.getAnnotationsByType ( this , annotationClass ) ; }
public boolean p2pStopFind ( ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.stopFind ( ) ; } else { return doBooleanCommand ( "P2P_STOP_FIND" ) ; } }
static float $opt$DoubleToFloat ( double a ) { return ( ( float ) ( a ) ) ; }
public static void computeMad ( android.renderscript.cts.TestMad.ArgumentsFloatFloatFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 4 ; args.out = ( ( args.inA ) * ( args.inB ) ) + ( args.inC ) ; }
void onAdvertiseInstanceEnabled ( int status , int advertiserId ) { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( ( "onAdvertiseInstanceEnabled() - " + "advertiserId=" ) + advertiserId ) + ", status=" ) + status ) ) ; mAdvertiseManager.callbackDone ( advertiserId , status ) ; }
HEAD ( ) { }
public void onGetDataCallListComplete ( @ android.telephony.data.DataServiceCallback.ResultCode int resultCode , java.util.List < android.telephony.data.DataCallResponse > dataCallList ) { if ( com.android.internal.telephony.dataconnection.DataServiceManager.DBG ) log ( ( "onGetDataCallListComplete. resultCode = " + resultCode ) ) ; android.os.Message msg = mMessageMap.remove ( this ) ; sendCompleteMessage ( msg , resultCode ) ; }
public void addNetworkAsCurrentUser ( ) throws java.lang.Exception { addNetworkAndVerifySuccess ( ) ; }
public static int booleanFieldEqualZero ( ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( Main.booleanField ) != ( Main.$inline$false ( ) ) ? 13 : 54 ; }
public static android.telephony.MbmsDownloadSession create ( @ android.annotation.NonNull android.content.Context context , @ android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback , @ android.annotation.NonNull android.os.Handler handler ) { return android.telephony.MbmsDownloadSession.create ( context , callback , android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) , handler ) ; }
public int del ( java.lang.String name ) throws android.os.RemoteException ;
public java.util.jar.JarFile getJarFile ( ) throws java.io.IOException { connect ( ) ; if ( ( jarFile ) == null ) { jarFile = new java.util.jar.JarFile ( strictJarFile.getName ( ) ) ; } return jarFile ; }
private static void write ( java.lang.CharSequence from , java.io.File to , java.nio.charset.Charset charset , boolean append ) throws java.io.IOException { com.google.common.io.CharStreams.write ( from , com.google.common.io.Files.newWriterSupplier ( to , charset , append ) ) ; }
public void testAlreadyCompleteCatch ( ) throws java.lang.Exception { com.intellij.psi.codeStyle.CodeStyleSettings settings = com.intellij.psi.codeStyle.CodeStyleSettingsManager.getSettings ( getProject ( ) ) ; int old = settings.BRACE_STYLE ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; try { doTest ( ) ; } finally { settings.BRACE_STYLE = old ; } }
protected void onPostHandleMessage ( android.os.Message msg ) { com.android.server.telecom.Log.endSession ( ) ; }
public void onCallRemoved ( android.telecom.Call call ) { android.os.Trace.beginSection ( "InCallServiceImpl.onCallRemoved" ) ; com.android.incallui.InCallPresenter.getInstance ( ) . onCallRemoved ( call ) ; android.os.Trace.endSection ( ) ; }
public void enter ( ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_DISCONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; synchronized ( mLock ) { mCurrentDevice = null ; } }
public void onClick ( android.content.DialogInterface dialog , int which ) { synchronized ( mLock ) { if ( which == ( android.content.DialogInterface.BUTTON_POSITIVE ) ) { android.content.Intent market = new android.content.Intent ( android.content.Intent.ACTION_VIEW ) ; market.setData ( android.net.Uri.parse ( ( "market://details?id=" + ( mPkgName ) ) ) ) ; market.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mContext.startActivity ( market ) ; } else if ( which == ( android.content.DialogInterface.BUTTON_NEGATIVE ) ) { if ( com.android.internal.telephony.uicc.UiccProfile.DBG ) log ( "Not now clicked for carrier app dialog." ) ; } } }
public void test_Any_Upper ( ) throws java.lang.Exception { libcore.icu.Transliterator t = new libcore.icu.Transliterator ( "Any-Upper" ) ; assertEquals ( "HELLO WORLD!" , t.transliterate ( "HeLlO WoRlD!" ) ) ; assertEquals ( "STRASSE" , t.transliterate ( "Straße" ) ) ; }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.encapType = android.net.IpSecTransform.ENCAP_ESPINUDP ; mConfig.encapLocalResourceId = localSocket.getResourceId ( ) ; mConfig.encapRemotePort = remotePort ; return this ; }
public java.lang.Iterable < java.lang.String > split ( ) { com.google.common.base.Splitter splitter = com.google.common.base.Splitter.on ( com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) . omitEmptyStrings ( ) ; return splitter.split ( getInternalPath ( ) ) ; }
android.app.PendingIntent getPrivateBroadcast ( java.lang.String action , int requestCode ) { android.content.Intent intent = new android.content.Intent ( action , null ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; intent.setPackage ( "android" ) ; return android.app.PendingIntent.getBroadcast ( mContext , requestCode , intent , 0 ) ; }
public void testScan ( ) throws java.lang.Exception { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; mWifiNative.setWificondControl ( wificondControl ) ; mWifiNative.scan ( com.android.server.wifi.WifiNativeTest.SCAN_FREQ_SET , com.android.server.wifi.WifiNativeTest.SCAN_HIDDEN_NETWORK_SSID_SET ) ; org.mockito.Mockito.verify ( wificondControl ) . scan ( com.android.server.wifi.WifiNativeTest.SCAN_FREQ_SET , com.android.server.wifi.WifiNativeTest.SCAN_HIDDEN_NETWORK_SSID_SET ) ; }
public boolean startScan ( com.android.server.wifi.WifiNative.ScanSettings settings , com.android.server.wifi.WifiNative.ScanEventHandler eventHandler ) { return mWifiVendorHal.startScan ( settings , eventHandler ) ; }
public static short intAnd0x17fffToShort ( int value ) { return ( ( short ) ( value & 98303 ) ) ; }
private java.lang.String getRawScanResults ( java.lang.String range ) { return doStringCommandWithoutLogging ( ( ( "BSS RANGE=" + range ) + " MASK=0x29d87" ) ) ; }
public abstract java.lang.String getPropertyName ( ) ;
public void testDollar ( ) { org.junit.Assert.assertTrue ( new org.jacoco.core.runtime.WildcardMatcher ( "*$*" ) . matches ( "java/util/Map$Entry" ) ) ; org.junit.Assert.assertTrue ( new org.jacoco.core.runtime.WildcardMatcher ( "*$$$*" ) . matches ( "org/example/Enity$$$generated123" ) ) ; }
public void bluetoothMediaAvrcpMediaBrowserServiceStop ( ) { com.googlecode.android_scripting.Log.d ( ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothMediaFacade.TAG ) + "Stopping BluetoothAvrcpMediaBrowserService" ) ) ; android.content.Intent stopIntent = new android.content.Intent ( mContext , com.googlecode.android_scripting.facade.bluetooth.BluetoothAvrcpMediaBrowserService.class ) ; mContext.stopService ( stopIntent ) ; }
private android.net.ConnectivityManager cm ( ) { if ( ( mCM ) == null ) { mCM = mContext.getSystemService ( android.net.ConnectivityManager.class ) ; } return mCM ; }
public native int getInt ( java.lang.Object obj , long offset ) ;
protected void accept ( java.net.SocketImpl s ) throws java.io.IOException { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; socketAccept ( s ) ; }
private void loge ( java.lang.String s , java.lang.Exception e ) { android.util.Log.e ( com.android.bluetooth.gatt.AdvertiseManager.TAG , s , e ) ; }
public static double shortAnd0xffffToShortToDouble ( short value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } short same = ( ( short ) ( value & 65535 ) ) ; return ( ( double ) ( same ) ) ; }
public android.os.PersistableBundle getCarrierConfig ( ) { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService ( android.telephony.CarrierConfigManager.class ) ; return carrierConfigManager.getConfigForSubId ( mSubId ) ; }
public void pcoData ( int indicationType , android.hardware.radio.V1_0.PcoDataInfo var2 ) { }
public static < E > java.util.Set < E > newSetFromMap ( java.util.Map < E , java.lang.Boolean > map ) { if ( map.isEmpty ( ) ) { return new java.util.Collections.SetFromMap < E > ( map ) ; } throw new java.lang.IllegalArgumentException ( ) ; }
public boolean isBoundary ( int offset ) { validateOffset ( offset ) ; return wrapped.isBoundary ( offset ) ; }
private static com.google.doclava.MethodInfo obtainMethod ( com.google.doclava.MethodDoc o ) { return ( ( com.google.doclava.MethodInfo ) ( com.google.doclava.Converter.mMethods.obtain ( o ) ) ) ; }
public com.android.ims.internal.IImsMMTelFeature createEmergencyMMTelFeature ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) { return createEmergencyMMTelFeatureInternal ( slotId , c ) ; }
public android.telephony.ims.feature.MMTelFeature onCreateEmergencyMMTelImsFeature ( int slotId ) { return null ; }
public com.android.sdkuilib.ui.GridLayoutBuilder noMargins ( ) { com.android.sdkuilib.ui.GridLayoutBuilder.mGL.marginHeight = 0 ; com.android.sdkuilib.ui.GridLayoutBuilder.mGL.marginWidth = 0 ; com.android.sdkuilib.ui.GridLayoutBuilder.mGL.marginLeft = 0 ; com.android.sdkuilib.ui.GridLayoutBuilder.mGL.marginTop = 0 ; com.android.sdkuilib.ui.GridLayoutBuilder.mGL.marginRight = 0 ; com.android.sdkuilib.ui.GridLayoutBuilder.mGL.marginBottom = 0 ; return this ; }
private void fetchEpg ( ) { fetchEpg ( 0 ) ; }
protected void log ( java.lang.String msg ) { android.util.Log.d ( mName , msg ) ; }
public void sendCallEvent ( java.lang.String callId , java.lang.String event , android.os.Bundle extras ) { try { mAdapter.sendCallEvent ( callId , event , extras ) ; } catch ( android.os.RemoteException ignored ) { } }
public void testConnectsToEmergencyNumberLongNumber_US ( ) { assertTrue ( shortInfo.connectsToEmergencyNumber ( "9116666666" , RegionCode.US ) ) ; assertTrue ( shortInfo.connectsToEmergencyNumber ( "1126666666" , RegionCode.US ) ) ; assertFalse ( shortInfo.connectsToEmergencyNumber ( "9996666666" , RegionCode.US ) ) ; }
public void createTabs ( org.eclipse.debug.ui.ILaunchConfigurationDialog dialog , java.lang.String mode ) { org.eclipse.debug.ui.ILaunchConfigurationTab [ ] tabs = new org.eclipse.debug.ui.ILaunchConfigurationTab [ ] { new com.android.ide.eclipse.adt.internal.launch.MainLaunchConfigTab ( ) , new com.android.ide.eclipse.adt.internal.launch.EmulatorConfigTab ( ) , new org.eclipse.debug.ui.CommonTab ( ) } ; setTabs ( tabs ) ; }
public void copyTo ( byte [ ] d ) { validateIsInt8 ( ) ; mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , d ) ; }
static com.android.dialer.inject.demo.DemoObject provide ( ) { return new com.android.dialer.inject.demo.DemoObject ( "prod" ) ; }
protected java.io.File getAapt ( ) { return super . getAapt ( com.android.sdklib.repository.FullRevision.parseRevision ( "21" ) ) ; }
public native long toMillis ( boolean ignoreDst ) ;
public static int $noinline$intSubAddSimplifyRight ( int x , int y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int sub = x - y ; return y + sub ; }
public com.android.jack.ir.ast.JSsaVariableRef makeRef ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info ) { return new com.android.jack.ir.ast.JSsaVariableRef ( info , target , version ) ; }
public static int intConditionNotEqualOne ( int i ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( i > 42 ) == ( Main.$inline$true ( ) ) ? 13 : 54 ; }
public void setupDataCall ( int radioTechnology , com.android.internal.telephony.dataconnection.DataProfile dataProfile , boolean isRoaming , boolean allowRoaming , android.os.Message result ) { }
public static int floatConditionNotEqualOne ( float f ) { return ( f > 42.0F ) == true ? 13 : 54 ; }
public static org.junit.runner.Description createTestDescription ( java.lang.Class < ? > clazz , java.lang.String name , java.lang.annotation.Annotation ... annotations ) { return new org.junit.runner.Description ( java.lang.String.format ( "%s(%s)" , name , clazz.getName ( ) ) , annotations ) ; }
public final com.google.common.collect.ImmutableList < E > toSortedImmutableList ( java.util.Comparator < ? super E > comparator ) { return com.google.common.collect.Ordering.from ( comparator ) . immutableSortedCopy ( iterable ) ; }
public boolean isPossibleNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { return ( isPossibleNumberWithReason ( number ) ) == ( com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.IS_POSSIBLE ) ; }
public java.lang.String toString ( java.lang.String enc ) throws java.io.UnsupportedEncodingException { return new java.lang.String ( buf , 0 , count , enc ) ; }
public void test_plus_longTemporalUnit_negativeDays ( ) { java.time.LocalDate t = TEST_2007_07_15.plus ( ( - 25 ) , java.time.temporal.ChronoUnit.DAYS ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 6 , 20 ) ) ; }
private native boolean configureWBSNative ( byte [ ] address , int condec_config ) ;
int write ( java.io.FileDescriptor fd , long address , int len ) throws java.io.IOException { return sun.nio.ch.FileDispatcherImpl.write0 ( fd , address , len ) ; }
public static void clearClientCertPreferences ( java.lang.Runnable onCleared ) { if ( DebugFlags.TRACE_API ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "clearClientCertPreferences" ) ; android.webkit.WebView.getFactory ( ) . getStatics ( ) . clearClientCertPreferences ( onCleared ) ; }
private native java.lang.reflect.Constructor < ? > [ ] getDeclaredConstructorsInternal ( boolean publicOnly ) ;
protected void createPages ( ) { com.android.sdkuilib.internal.repository.PackagesPage pkgPage = new com.android.sdkuilib.internal.repository.PackagesPage ( getPagesRootComposite ( ) , getUpdaterData ( ) ) ; addPage ( pkgPage , "Packages List" ) ; addExtraPages ( ) ; }
public void error ( java.lang.String id ) { severities.put ( id , Severity.ERROR ) ; }
protected void load ( ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem item = getRepository ( ) . getResourceItem ( mType , mResourceName ) ; item.add ( this ) ; }
void onLightbringerIconClicked ( int position ) ;
java.lang.Boolean getHandleProfiling ( ) ;
public com.android.builder.model.SigningConfig getSigningConfig ( ) { com.android.builder.model.SigningConfig signingConfig = mBuildType.getSigningConfig ( ) ; if ( signingConfig != null ) { return signingConfig ; } return mMergedFlavor.getSigningConfig ( ) ; }
public boolean initializeSupplicantHal ( ) { return true ; }
public void testForName_EmptyString ( ) { try { java.nio.charset.Charset.forName ( "" ) ; fail ( "Should throw IllegalArgumentException!" ) ; } catch ( java.lang.IllegalArgumentException e ) { } }
private int updateEfForIccType ( int efid ) { if ( efid == ( IccConstants.EF_ADN ) ) { if ( phone.getIccCard ( ) . isApplicationOnIcc ( IccCardApplicationStatus.AppType.APPTYPE_USIM ) ) { return IccConstants.EF_PBR ; } } return efid ; }
public static native void SSL_use_certificate ( long ssl , byte [ ] [ ] asn1DerEncodedCertificateChain ) ;
public boolean umtsAuthFailedResponse ( int id ) { return doBooleanCommand ( ( ( "CTRL-RSP-SIM-" + id ) + ":UMTS-FAIL" ) ) ; }
public static void write ( java.lang.CharSequence from , java.io.File to , java.nio.charset.Charset charset ) throws java.io.IOException { com.google.common.io.Files.write ( from , to , charset , false ) ; }
private void doRedraw ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { redraw ( ) ; } } ) ; }
public void doWork ( ) throws android.os.RemoteException { mService.confirmCredentialsAsUser ( mResponse , account , options , ( activity != null ) , userId ) ; }
public void waitForIdle ( int timeoutMs ) { mHandlerThread.waitForIdle ( timeoutMs ) ; }
boolean areDrawablesResolved ( ) { return ( ( mPrivateFlags2 ) & ( android.view.View.PFLAG2_DRAWABLE_RESOLVED ) ) == ( android.view.View.PFLAG2_DRAWABLE_RESOLVED ) ; }
public static native int get_EC_GROUP_type ( long groupCtx ) ;
private void riljLogv ( java.lang.String msg ) { android.telephony.Rlog.v ( com.android.internal.telephony.RIL.RILJ_LOG_TAG , msg ) ; }
public java.io.InputStream openRead ( ) throws com.android.sched.util.file.WrongPermissionException { return vfs.openRead ( this ) ; }
public java.lang.String [ ] getEnabledProtocols ( ) { return sslParameters.openSslEnabledProtocols.clone ( ) ; }
public void onCancel ( android.content.DialogInterface arg0 ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( getName ( ) ) + " ignore connect" ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_REJECT ) ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { return super . getParameterAnnotations ( ) ; }
public boolean isEmpty ( ) { return ( ( mAdapter ) == null ) || ( mAdapter.isEmpty ( ) ) ; }
public void testBetaOverlay ( ) { if ( "beta" . equals ( BuildConfig.FLAVOR2 ) ) { pixelLooker ( mBetaOverlayIV , com.android.tests.overlay2.MainTest.GREEN ) ; } else { pixelLooker ( mBetaOverlayIV , com.android.tests.overlay2.MainTest.RED ) ; } }
public void onFocusChange ( android.view.View v , boolean hasFocus ) { if ( ( getEditorListener ( ) ) != null ) { getEditorListener ( ) . onRequest ( EditorListener.EDITOR_FOCUS_CHANGED ) ; } rebuildLabel ( ) ; }
public com.android.jack.ir.ast.cfg.JBasicBlockElement firstElement ( ) { assert ( elements.size ( ) ) > 0 ; return elements.get ( 0 ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.pm.PackageManager packageManager , android.content.Intent intent ) { return ( mCarrierPrivilegeRules ) == null ? null : mCarrierPrivilegeRules.getCarrierPackageNamesForIntent ( packageManager , intent ) ; }
public void writeResponse ( java.io.OutputStream out ) throws java.io.IOException { super . writeResponse ( new java.io.ByteArrayInputStream ( body ) , out ) ; }
public static void computeMin ( android.renderscript.cts.TestMin.ArgumentsFloatFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( float ) ( java.lang.StrictMath.min ( args.in , args.in1 ) ) ) ; }
public boolean addAll ( java.util.Collection < ? extends java.util.Map.Entry < K , V > > collection ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void testCompareNull ( ) throws java.lang.Exception { try { new java.text.RuleBasedCollator ( "< a" ) . compare ( null , null ) ; fail ( ( "RuleBasedCollator.compare(null, null) " + "should throw NullPointerException" ) ) ; } catch ( java.lang.NullPointerException e ) { } }
public com.android.build.gradle.AndroidSourceSet javaResources ( groovy.lang.Closure configureClosure ) { org.gradle.util.ConfigureUtil.configure ( configureClosure , getJavaResources ( ) ) ; return this ; }
public static java.lang.String toString ( org.hamcrest.SelfDescribing value ) { return new org.hamcrest.StringDescription ( ) . appendDescriptionOf ( value ) . toString ( ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setStartTime ( long value ) { bitField0_ |= 128 ; startTime_ = value ; onChanged ( ) ; return this ; }
private int getToneId ( com.android.internal.telephony.gsm.stk.Tone tone ) { int toneId = android.media.ToneGenerator.TONE_PROP_BEEP ; if ( ( tone != null ) && ( com.android.stk.TonePlayer.mToneMap.containsKey ( tone ) ) ) { toneId = com.android.stk.TonePlayer.mToneMap.get ( tone ) ; } return toneId ; }
private static void addFile ( @ javax.annotation.Nonnull java.io.File fileOrSourceList , @ javax.annotation.Nonnull java.util.List < java.lang.String > args , boolean mustExist ) { if ( fileOrSourceList instanceof com.android.jack.Sourcelist ) { args.add ( ( "@" + ( fileOrSourceList.getAbsolutePath ( ) ) ) ) ; } else { java.util.List < java.io.File > sourceFiles = new java.util.ArrayList < java.io.File > ( ) ; try { com.android.jack.test.toolchain.AbstractTestTools.getJavaFiles ( fileOrSourceList , sourceFiles , mustExist ) ; } catch ( java.io.IOException e ) { } for ( java.io.File sourceFile : sourceFiles ) { args.add ( sourceFile.getAbsolutePath ( ) ) ; } } }
public void setAttributes ( com.android.ide.eclipse.adt.internal.resources.AttributeInfo [ ] attributes ) { mAttributes = attributes ; }
public void postResponse ( com.android.volley.Request < ? > request , com.android.volley.Response < ? > response ) { postResponse_called = true ; responsePosted = response ; }
public void run ( ) { com.android.bluetooth.pbap.BluetoothPbapUtils.loadAllContacts ( mContext , mSessionStatusHandler ) ; mThreadLoadContacts = null ; }
private void recordIfInstanceMethod ( int access , java.lang.String name , java.lang.String desc ) { if ( com.google.devtools.build.android.desugar.BitFlags.noneSet ( access , Opcodes.ACC_STATIC ) ) { instanceMethods.add ( ( ( name + ":" ) + desc ) ) ; } }
private android.net.ConnectivityManager.CallbackHandler getHandler ( ) { synchronized ( android.net.ConnectivityManager.sCallbacks ) { if ( ( android.net.ConnectivityManager.sCallbackHandler ) == null ) { android.net.ConnectivityManager.sCallbackHandler = new android.net.ConnectivityManager.CallbackHandler ( android.net.ConnectivityThread.getInstanceLooper ( ) ) ; } return android.net.ConnectivityManager.sCallbackHandler ; } }
public static com.android.builder.signing.SigningInfo getDebugKey ( @ com.android.annotations.NonNull java.lang.String keyStoreLocation , java.lang.String storeStype ) throws com.android.builder.signing.KeytoolException , java.io.FileNotFoundException { return com.android.builder.signing.KeystoreHelper.getSigningInfo ( keyStoreLocation , com.android.builder.signing.DebugKeyHelper.PASSWORD_STRING , storeStype , com.android.builder.signing.DebugKeyHelper.PASSWORD_STRING , com.android.builder.signing.DebugKeyHelper.PASSWORD_STRING ) ; }
private void notifyUiVisibilityChanged ( ) { try { mWindowManagerService.statusBarVisibilityChanged ( mSystemUiVisibility ) ; } catch ( android.os.RemoteException ex ) { } }
public void testInitialCardState ( ) { org.junit.Assert.assertEquals ( mUiccProfile.getState ( ) , State.UNKNOWN ) ; }
protected int getPreferredPopupHeight ( ) { return ! ( com.google.gct.idea.elysium.ProjectSelector.needsToSignIn ( ) ) ? com.google.gct.idea.elysium.ProjectSelector.PREFERRED_HEIGHT : ( ProjectSelectorGoogleLogin.PREFERRED_HEIGHT ) + ( com.google.gct.idea.elysium.ProjectSelector.POPUP_HEIGHTFRAMESIZE ) ; }
private void onCapabilitiesUpdatedResponseLocal ( com.android.server.wifi.nan.WifiNanNative.Capabilities capabilities ) { if ( com.android.server.wifi.nan.WifiNanStateManager.VDBG ) { android.util.Log.v ( com.android.server.wifi.nan.WifiNanStateManager.TAG , ( "onCapabilitiesUpdatedResponseLocal: capabilites=" + capabilities ) ) ; } mCapabilities = capabilities ; }
private void acknowledgeSmsReport ( int messageRef , @ android.telephony.ims.internal.SmsImplBase.StatusReportResult int result ) { getSmsImplementation ( ) . acknowledgeSmsReport ( messageRef , result ) ; }
public void callSessionMergeStarted ( com.android.ims.internal.IImsCallSession i , com.android.ims.internal.IImsCallSession newSession , android.telephony.ims.ImsCallProfile profile ) throws android.os.RemoteException { mNewListener.callSessionMergeStarted ( newSession , profile ) ; }
public void testWithRowInt_columnIndexAndValue ( ) { assertTrue ( android.support.test.espresso.matcher.CursorMatchers.withRowInt ( 2 , android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE ) . matches ( cursor ) ) ; }
synchronized void nScriptInvokeV ( int id , int slot , byte [ ] params ) { validate ( ) ; rsnScriptInvokeV ( mContext , id , slot , params ) ; }
synchronized int nScriptCCreate ( java.lang.String resName , java.lang.String cacheDir , byte [ ] script , int length ) { validate ( ) ; return rsnScriptCCreate ( mContext , resName , cacheDir , script , length ) ; }
public void test_EmptyMap_computeIfAbsent ( ) { try { java.util.Collections.emptyMap ( ) . computeIfAbsent ( 1 , ( k ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void addChild ( org.junit.runner.Description description ) { getChildren ( ) . add ( description ) ; }
public boolean visitMethodDeclaration ( lombok.ast.MethodDeclaration node ) { if ( com.android.tools.lint.checks.ViewHolderDetector.ViewAdapterVisitor.isViewAdapterMethod ( node ) ) { com.android.tools.lint.checks.ViewHolderDetector.InflationVisitor visitor = new com.android.tools.lint.checks.ViewHolderDetector.InflationVisitor ( mContext ) ; node.accept ( visitor ) ; visitor.finish ( ) ; } return super . visitMethodDeclaration ( node ) ; }
private android.content.ComponentName getDefaultDialerComponent ( ) { java.lang.String packageName = mDefaultDialerAdapter.getDefaultDialerApplication ( mContext , mCallsManager.getCurrentUserHandle ( ) . getIdentifier ( ) ) ; com.android.server.telecom.Log.d ( this , ( "Default Dialer package: " + packageName ) ) ; return getInCallServiceComponent ( packageName , com.android.server.telecom.InCallController.IN_CALL_SERVICE_TYPE_DIALER_UI ) ; }
public void onCharacteristicRead ( java.lang.String address , int status , int srvcType , int srvcInstId , android.os.ParcelUuid srvcUuid , int charInstId , android.os.ParcelUuid charUuid , byte [ ] value ) throws android.os.RemoteException { }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { com.android.ddms.PrefsDialog.run ( shell ) ; }
private static boolean isForwardLocked ( android.content.pm.ApplicationInfo info ) { return ( ( info.flags ) & ( android.content.pm.ApplicationInfo.FLAG_FORWARD_LOCK ) ) != 0 ; }
public static boolean isNormalized ( java.lang.CharSequence src , java.text.Normalizer.Form form ) { return libcore.icu.NativeNormalizer.isNormalized ( src , form ) ; }
public void dragSetData ( org.eclipse.swt.dnd.DragSourceEvent event ) { adjustEventCoordinates ( event ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutCanvas canvas = mGraphicalEditorPart.getCanvasControl ( ) ; if ( canvas != null ) { canvas.getDragListener ( ) . dragSetData ( event ) ; } }
public java.lang.Class < ? > getDeclaringClass ( ) { if ( isAnonymousClass ( ) ) { return null ; } return libcore.reflect.AnnotationAccess.getEnclosingClass ( this ) ; }
public static float FloatSubtraction ( ) { float a ; float b ; float c ; a = 6.0F ; b = 2.0F ; c = a - b ; return c ; }
public void callSessionUpdated ( com.android.ims.ImsCallProfile profile ) throws android.os.RemoteException { mListener.callSessionUpdated ( profile ) ; }
java.lang.String getHostName ( boolean check ) { if ( ( holder ( ) . getHostName ( ) ) == null ) { holder ( ) . hostName = java.net.InetAddress.getHostFromNameService ( this , check ) ; } return holder ( ) . getHostName ( ) ; }
public static native long EVP_SignInit ( java.lang.String algorithm ) ;
private java.lang.String getADBPushJavaLine ( java.lang.String source , java.lang.String target ) { return ( ( ( "DeviceUtil.adbPush(\"" + source ) + "\", \"" ) + target ) + "\");" ; }
private int removeCapability ( int capabilities , int capability ) { int newCapabilities = capabilities & ( ~ capability ) ; return newCapabilities ; }
public void callSessionMultipartyStateChanged ( com.android.ims.internal.IImsCallSession i , boolean isMultiparty ) throws android.os.RemoteException { mNewListener.callSessionMultipartyStateChanged ( isMultiparty ) ; }
public static void main ( java.lang.String [ ] args ) { com.android.monkeyrunner.core.IMonkeyBackend adb = new com.android.monkeyrunner.adb.AdbBackend ( ) ; com.android.monkeyrunner.recorder.MonkeyRecorder.start ( adb.waitForConnection ( ) ) ; }
public static void computeDistance ( android.renderscript.cts.TestDistance.ArgumentsFloatNFloatNFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 1 , 1 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.distance ( args.inLhs , args.inRhs , t ) ; }
private void trackVideoStateHistory ( com.android.ims.ImsCallProfile profile ) { mWasVideoCall = ( mWasVideoCall ) || ( profile.isVideoCall ( ) ) ; }
private static void addLoginListenersFromExtensionPoints ( com.google.gct.login.GoogleLoginState state ) { com.google.gct.login.GoogleLoginListener [ ] loginListeners = com.intellij.openapi.extensions.Extensions.getExtensions ( GoogleLoginListener.EP_NAME ) ; for ( com.google.gct.login.GoogleLoginListener listener : loginListeners ) { state.addLoginListener ( listener ) ; } }
T createVariantData ( @ com.android.annotations.NonNull com.android.build.gradle.internal.core.GradleVariantConfiguration variantConfiguration , @ com.android.annotations.NonNull java.util.Set < java.lang.String > densities , @ com.android.annotations.NonNull java.util.Set < java.lang.String > abi , @ com.android.annotations.NonNull java.util.Set < java.lang.String > compatibleScreens ) ;
public abstract boolean isPublic ( ) ;
public void testPass6 ( ) { metrics.addTestMetric ( "key2" , "value2" ) ; }
public void setVariants ( com.android.build.gradle.internal.tasks.Collection < ? extends com.android.build.gradle.internal.variant.BaseVariantData > variants ) { this . variants.addAll ( variants ) ; }
native void rsnScriptForEachClipped ( long con , long id , int slot , long ain , long aout , byte [ ] params , int xstart , int xend , int ystart , int yend , int zstart , int zend ) ;
private java.util.List < android.uirendering.cts.testinfrastructure.TestCase > getTestCases ( ) { }
public void test_F32_1_SCALE20_05_inRectangle ( ) { testReszie ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inY , Element.DataType.FLOAT_32 , 1 , 2.0F , 0.5F ) ; checkError ( ) ; }
protected boolean shouldApplyOn ( java.io.File toFile ) { return toFile.exists ( ) ; }
com.android.sched.vfs.BaseVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { return vfs.createVDir ( parent , name ) ; }
protected void internalSetUp ( ) throws java.lang.Exception { super . internalSetUp ( ) ; debuggeeWrapper = createDebuggeeWrapper ( ) ; beforeDebuggeeStart ( debuggeeWrapper ) ; startDebuggeeWrapper ( ) ; receiveInitialEvent ( ) ; debuggeeWrapper.vmMirror.adjustTypeLength ( ) ; logWriter.println ( "Adjusted VM-dependent type lengths" ) ; }
public static sun.security.util.Cache newNullCache ( ) { return sun.security.util.NullCache.INSTANCE ; }
public void testCanEncodechar ( ) throws java.nio.charset.CharacterCodingException { assertTrue ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( 'w' ) ) ; assertFalse ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( '슣' ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onDeviceConfigChange ( ) ; }
public static double ReturnDouble99P25 ( ) { float imm = 99.25F ; return ( ( double ) ( imm ) ) ; }
public static com.google.doclava.PackageInfo obtainPackage ( java.lang.String packageName ) { return com.google.doclava.Converter.obtainPackage ( com.google.doclava.Converter.root.packageNamed ( packageName ) ) ; }
public java.lang.String getNetworkCountryIso ( ) { return getNetworkCountryIsoForPhone ( android.telephony.TelephonyManager.getDefaultPhone ( ) ) ; }
private boolean isPermissionEnforcedLocked ( java.lang.String permission , boolean enforcedDefault ) { if ( android.Manifest.permission.READ_EXTERNAL_STORAGE.equals ( permission ) ) { if ( ( mSettings.mReadExternalStorageEnforced ) != null ) { return mSettings.mReadExternalStorageEnforced ; } else { return enforcedDefault ; } } else { return true ; } }
private static com.google.currysrc.api.transform.AstTransformRule createTranslateJciteInclusionRule ( ) { java.util.List < com.google.currysrc.api.transform.ast.BodyDeclarationLocater > whitelist = com.google.currysrc.api.transform.ast.BodyDeclarationLocaters.createLocatersFromStrings ( com.android.icu4j.srcgen.Icu4jTransform.JCITE_TRANSFORM_SET ) ; com.android.icu4j.srcgen.TranslateJcite.InclusionHandler transformer = new com.android.icu4j.srcgen.TranslateJcite.InclusionHandler ( com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU4J_SAMPLE_DIR , whitelist ) ; return com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( transformer ) ; }
public void collapseAll ( ) { mTreeViewer.collapseAll ( ) ; }
static long [ ] asLongs ( byte [ ] x ) { long [ ] z = new long [ 2 ] ; org.bouncycastle.crypto.util.Pack.bigEndianToLong ( x , 0 , z ) ; return z ; }
public void onNothingSelected ( android.widget.AdapterView parent ) { }
public void init ( com.android.monkeyrunner.MonkeyManager monkeyManager ) { this . monkeyManager = monkeyManager ; }
public void wifiConnectByConfig ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "config" ) org.json.JSONObject config ) throws org.json.JSONException { android.net.wifi.WifiConfiguration wifiConfig = genWifiConfig ( config ) ; com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener ( mEventFacade , com.googlecode.android_scripting.facade.wifi.WifiConstants.WIFI_CONNECT_BY_CONFIG_CALLBACK ) ; mWifi.connect ( wifiConfig , listener ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JThisRef expr ) { return visitNonThrowingPrimitiveRValue ( expr ) ; }
protected void checkReportedError ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { assertNotNull ( message , com.android.tools.lint.checks.WrongCaseDetector.getOldValue ( message ) ) ; assertNotNull ( message , com.android.tools.lint.checks.WrongCaseDetector.getNewValue ( message ) ) ; }
public void onStartUser ( int userHandle ) { mMountService.onStartUser ( userHandle ) ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsCharCharChar args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( byte ) ( java.lang.StrictMath.max ( args.inV1 , args.inV2 ) ) ) ; }
public boolean onCreate ( ) { android.util.Log.d ( com.android.providers.telephony.TelephonyProviderTestable.TAG , "onCreate called: mDbHelper = new InMemoryTelephonyProviderDbHelper()" ) ; mDbHelper = new com.android.providers.telephony.TelephonyProviderTestable.InMemoryTelephonyProviderDbHelper ( ) ; return true ; }
public boolean isPossibleNumber ( java.lang.String number , java.lang.String regionDialingFrom ) { try { return isPossibleNumber ( parse ( number , regionDialingFrom ) ) ; } catch ( com.google.i18n.phonenumbers.NumberParseException e ) { return false ; } }
public void testUtf8Bom ( ) throws java.lang.Exception { assertEquals ( "Utf8BomTest.java:4: Warning: Do not hardcode \"/sdcard/\"; use Environment.getExternalStorageDirectory().getPath() instead" , lintProject ( "src/test/pkg/Utf8BomTest.java.data=>src/test/pkg/Utf8BomTest.java" ) ) ; }
public void testStopSearch ( ) throws java.lang.InterruptedException { HEAD ( 8 ) ; android.app.cts.a2b3a Merge ; android.app.cts.Removed assertion ; android.app.cts.in testPerformGlobalActionRe ; BRANCH ( 42.0F ) ; }
private boolean isLegacyVoicemailUser ( ) { return ( preferences.getInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_DIALER_FEATURE_VERSION_ACKNOWLEDGED_KEY , 0 ) ) == ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.LEGACY_VOICEMAIL_FEATURE_VERSION ) ; }
public void notifyFindDialogDismissed ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { notifyFindDialogDismissed ( ) ; } } ) ; return ; } clearMatches ( ) ; }
public java.util.List < ? extends com.google.gct.testing.dimension.GoogleCloudTestingType > getAppSupportedDomain ( ) { return com.google.common.collect.ImmutableList.of ( com.google.gct.testing.dimension.OrientationDimension.PORTRAIT , com.google.gct.testing.dimension.OrientationDimension.LANDSCAPE ) ; }
public void setAndroidDependencies ( @ com.android.annotations.NonNull java.util.List < com.android.builder.AndroidDependency > directLibraries ) { if ( directLibraries != null ) { mDirectLibraries.addAll ( directLibraries ) ; } resolveIndirectLibraryDependencies ( mDirectLibraries , mFlatLibraries ) ; }
public native short getShort ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public boolean lock ( ) { try { return ( mBinder.lock ( ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
native void rsnScriptInvokeV ( int con , int id , int slot , byte [ ] params ) ;
public void setTestRunner ( com.android.tradefed.testtype.UiAutomatorRunner runner ) { mRunner = runner ; }
public void test_EmptyMap_computeIfAbsent ( ) { try { java.util.Collections.emptyMap ( ) . computeIfAbsent ( 1 , ( k ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void testGetActivityThemes1 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( " package=\'com.android.unittest\'>\n" + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) ) ) ; java.util.Map < java.lang.String , java.lang.String > map = info.getActivityThemes ( ) ; assertEquals ( map.toString ( ) , 0 , map.size ( ) ) ; assertEquals ( "com.android.unittest" , info.getPackage ( ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ) ; assertEquals ( "@android:style/Theme" , info.getDefaultTheme ( null , null ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.XLARGE ) ) ) ; }
public boolean matchesSignature ( @ com.android.annotations.NonNull java.lang.String signature ) { return matchesName ( signature ) ; }
public java.lang.Void run ( ) { javax.security.auth.SubjectDomainCombiner.debug.println ( s.toString ( ) ) ; return null ; }
protected void engineInit ( java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { initFromKey ( key ) ; }
public java.lang.String getShortName ( ) { return com.google.gct.intellij.endpoints.util.EndpointBundle.message ( "api.name.shortName" ) ; }
public void testUninstall_existingDataBundle ( ) throws java.lang.Exception { java.io.File currentDataDir = installer.getCurrentTzDataDir ( ) ; assertTrue ( currentDataDir.mkdir ( ) ) ; assertTrue ( installer.uninstall ( ) ) ; assertNoContentInstalled ( ) ; }
public java.lang.String getExtnID ( ) { if ( ( extnID_str ) == null ) { extnID_str = org.apache.harmony.security.asn1.ObjectIdentifier.toString ( extnID ) ; } return extnID_str ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( ) ; n.flags |= android.app.Notification.FLAG_SHOW_LIGHTS ; n.ledARGB = - 256 ; n.ledOnMS = 1300 ; n.ledOffMS = 1300 ; mNM.notify ( 1 , n ) ; }
protected void log ( java.lang.String msg ) { android.telephony.Rlog.d ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG , ( "[ImsPhoneCallTracker] " + msg ) ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , boolean value ) { checkNameAndAppend ( name ) . append ( value ) ; return this ; }
public java.lang.String getNewName ( @ javax.annotation.Nonnull java.lang.String oldName ) { java.lang.String newName = names.get ( oldName ) ; if ( newName != null ) { return newName ; } return defaultNameProvider.getNewName ( oldName ) ; }
private com.android.builder.internal.incremental.DependencyData getData ( java.lang.String name ) throws java.io.IOException { java.io.File depFile = new java.io.File ( com.android.builder.TestUtils.getRoot ( "dependencyData" ) , name ) ; com.android.builder.internal.incremental.DependencyData data = com.android.builder.internal.incremental.DependencyData.parseDependencyFile ( depFile ) ; assertNotNull ( data ) ; return data ; }
public void addCapabilityCallback ( android.telephony.ims.internal.aidl.IImsCapabilityCallback c ) { this . addCapabilityCallback ( c ) ; }
abstract long getId ( T item ) ;
public static void computeAbs ( android.renderscript.cts.TestAbs.ArgumentsIntUint args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.abs ( args.inValue ) ; }
public final native void setPriority ( int streamID , int priority ) ;
public android.net.wifi.aware.PublishConfig.Builder setMatchFilter ( @ android.annotation.Nullable byte [ ] matchFilter ) { mMatchFilter = matchFilter ; return this ; }
private boolean hasUnexpectedItalianLeadingZero ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { return ( number.isItalianLeadingZero ( ) ) && ( ! ( isLeadingZeroPossible ( number.getCountryCode ( ) ) ) ) ; }
public static void closeQuietly ( java.util.jar.StrictJarFile jarFile ) { if ( jarFile != null ) { try { jarFile.close ( ) ; } catch ( java.lang.Exception ignored ) { } } }
public java.lang.String getShortDescription ( ) { return mUrl ; }
public static native long EVP_AEAD_CTX_init ( long evpAead , byte [ ] key , int tagLen ) ;
public void run ( ) { setError ( error ) ; }
public static int $noinline$byteToDoubleToInt ( byte value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
public void removeCapability ( long capability , android.telephony.ims.internal.aidl.IImsCapabilityCallback c ) throws android.os.RemoteException { this . removeCapability ( capability , c ) ; }
public void copy1DRangeFrom ( int off , int count , int [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFrom" ) ; validateIsInt32 ( ) ; copy1DRangeFromUnchecked ( off , count , d ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public java.io.File getJackLibraryOutputZip ( ) { return libraryOutZip ; }
private boolean getValue ( ) { return ( Settings.Global.getInt ( mContext.getContentResolver ( ) , Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON , 0 ) ) == 1 ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object element ) { return multimap ( ) . containsKey ( element ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JConstructor x ) { endVisit ( ( ( com.android.jack.ir.ast.JMethod ) ( x ) ) ) ; }
public V2 getValue ( ) { return transformer.transformEntry ( entry.getKey ( ) , entry.getValue ( ) ) ; }
private static java.lang.String lambda ( @ javax.annotation.Nonnull java.lang.String pkg , @ javax.annotation.Nonnull java.lang.String sha , @ javax.annotation.Nonnegative int i ) { return com.android.jack.optimizations.lambdas.LambdaTests.type ( pkg , ( ( ( "-$Lambda$" + i ) + "$" ) + sha ) ) ; }
private libcore.util.ZoneInfo createZoneInfo ( int [ ] [ ] transitionTimes , int [ ] [ ] transitionTypes , long currentTimeMillis ) throws java.lang.Exception { return createZoneInfo ( getName ( ) , transitionTimes , transitionTypes , currentTimeMillis ) ; }
public void validateUpdateParameterWithoutUpdateInterval ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.UpdateParameter updateParam = android.net.wifi.hotspot2.pps.UpdateParameterTest.createUpdateParameter ( ) ; updateParam.updateIntervalInMinutes = java.lang.Long.MIN_VALUE ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; }
public void callSessionMergeComplete ( com.android.ims.internal.ImsCallSession newSession ) throws android.os.RemoteException { mListener.callSessionMergeComplete ( ( newSession != null ? newSession.getSession ( ) : null ) ) ; }
public void sendTriggerUpdateCheck ( com.android.server.timezone.CheckToken checkToken ) { android.app.timezone.RulesUpdaterContract.sendBroadcast ( mContext , mUpdaterAppPackageName , checkToken.toByteArray ( ) ) ; }
public void testNotRedirectedFromHttpsToHttp ( ) throws java.io.IOException , java.lang.InterruptedException { libcore.javax.net.ssl.TestSSLContext testSSLContext = createDefaultTestSSLContext ( ) ; server.useHttps ( testSSLContext.serverContext.getSocketFactory ( ) , false ) ; server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setResponseCode ( java.net.HttpURLConnection.HTTP_MOVED_TEMP ) . addHeader ( "Location: http://anyhost/foo" ) . setBody ( "This page has moved!" ) ) ; server.play ( ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.setSSLSocketFactory ( testSSLContext.clientContext.getSocketFactory ( ) ) ; assertEquals ( "This page has moved!" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; }
public void enter ( ) { log ( ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; broadcastAudioState ( mCurrentDevice , BluetoothA2dpSink.STATE_NOT_PLAYING , BluetoothA2dpSink.STATE_PLAYING ) ; }
private static native int currentImpl ( int address ) ;
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) { com.android.jack.ir.ast.JMethodIdWide id = getResolvedMethodIdWide ( call.getReceiverType ( ) , call.getMethodId ( ) ) ; call.resolveMethodId ( id ) ; return super . visit ( call ) ; }
public void testApi2 ( ) throws java.lang.Exception { assertEquals ( ( "src/foo/bar/ApiCallTest.java:20: Error: Call requires API level 11 (current min is 2): android.app.Activity#getActionBar [NewApi]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " getActionBar(); // API 11\n" + " ~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:24: Error: Class requires API level 8 (current min is 2): org.w3c.dom.DOMErrorHandler [NewApi]\n" ) + " Class<?> clz = DOMErrorHandler.class; // API 8\n" ) + " ~~~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:27: Error: Call requires API level 3 (current min is 2): android.widget.Chronometer#getOnChronometerTickListener [NewApi]\n" ) + " chronometer.getOnChronometerTickListener(); // API 3 \n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:30: Error: Call requires API level 11 (current min is 2): android.widget.Chronometer#setTextIsSelectable [NewApi]\n" ) + " chronometer.setTextIsSelectable(true); // API 11\n" ) + " ~~~~~~~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:33: Error: Field requires API level 11 (current min is 2): dalvik.bytecode.OpcodeInfo#MAXIMUM_VALUE [NewApi]\n" ) + " int field = OpcodeInfo.MAXIMUM_VALUE; // API 11\n" ) + " ~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:38: Error: Field requires API level 14 (current min is 2): android.app.ApplicationErrorReport#batteryInfo [NewApi]\n" ) + " BatteryInfo batteryInfo = getReport().batteryInfo;\n" ) + " ~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:41: Error: Field requires API level 11 (current min is 2): android.graphics.PorterDuff.Mode#OVERLAY [NewApi]\n" ) + " Mode mode = PorterDuff.Mode.OVERLAY; // API 11\n" ) + " ~~~~~~~\n" ) + "7 errors, 0 warnings\n" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk2.xml=>AndroidManifest.xml" , "apicheck/ApiCallTest.java.txt=>src/foo/bar/ApiCallTest.java" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" ) ) ; }
public void testGetEuiccInfo_success ( ) { org.junit.Assert.assertEquals ( com.android.internal.telephony.euicc.EuiccControllerTest.OS_VERSION , callGetEuiccInfo ( true , com.android.internal.telephony.euicc.EuiccControllerTest.EUICC_INFO ) . osVersion ) ; }
protected java.lang.Object doInBackground ( java.lang.Object ... objects ) { updateSmartDialDatabase ( ) ; return null ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.test ( "A" ) ; Main.test ( "B" ) ; Main.test ( "C" ) ; Main.test ( "D" ) ; }
public void testInstallWithMissingBundleVersionFile ( ) throws java.lang.Exception { java.io.File workingDir = new java.io.File ( testInstallDir , TzDataBundleInstaller.WORKING_DIR_NAME ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.ConfigBundle tzData = createTzDataBundleWithoutFormatVersionFile ( "2030a" ) ; assertFalse ( install ( tzData ) ) ; assertNoContentInstalled ( ) ; }
public static long AndLongInt ( ) { long lhs = Main.$inline$long ( 10L ) ; int rhs = Main.$inline$int ( 3 ) ; return lhs & rhs ; }
public void onSdkLoaded ( com.android.sdklib.IAndroidTarget target ) { mSdkChanged = true ; mTarget = target ; ( mDisableUpdates ) ++ ; initDevices ( ) ; ( mDisableUpdates ) -- ; }
protected java.lang.Object getPropertyPairCookie ( @ com.android.annotations.NonNull java.lang.Object cookie ) { return cookie ; }
private java.lang.Integer retrieveFeatureStatus ( ) { if ( ( mBinder ) != null ) { try { return getServiceInterface ( mBinder ) . getFeatureStatus ( mSlotId , mSupportedFeature ) ; } catch ( android.os.RemoteException e ) { } } return null ; }
public boolean showFindDialog ( java.lang.String text , boolean showIme ) { checkThread ( ) ; if ( DebugFlags.TRACE_API ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "showFindDialog" ) ; return mProvider.showFindDialog ( text , showIme ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object object ) { return false ; }
synchronized void nAllocationRead ( long id , short [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public void testAllowBackupOk2 ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestOrderDetector.ALLOW_BACKUP ) ; assertEquals ( "No warnings." , lintProject ( "AndroidManifest.xml" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "res/values/strings.xml" ) ) ; }
public void notifyANQPDone ( long bssid , boolean success ) { mHandler.notifyANQPDone ( bssid , success ) ; }
public void testRefactorFragment ( ) throws java.lang.Exception { moveType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.MyFragment" , "src/com/example/refactoringtest/subpackage" , true , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( "-------\n" + "* Move resource \'testRefactorFragment/src/com/example/refactoringtest/MyFragment.java\' to \'subpackage\'\n" ) + "\n" ) + "* Move resource \'testRefactorFragment/src/com/example/refactoringtest/MyFragment.java\' to \'subpackage\'\n" ) + "\n" ) + "* activity_main.xml - /testRefactorFragment/res/layout/activity_main.xml\n" ) + " @@ -33 +33\n" ) + " - <fragment android:name=\"com.example.refactoringtest.MyFragment\"/>\n" ) + " + <fragment android:name=\"com.example.refactoringtest.subpackage.MyFragment\"/>" ) ) ) ; }
public void registerNetworkCallback ( android.net.NetworkRequest request , android.app.PendingIntent operation ) { checkPendingIntent ( operation ) ; try { mService.pendingListenForNetwork ( request.networkCapabilities , operation ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void callSessionConferenceExtended ( com.android.ims.internal.IImsCallSession newSession , com.android.ims.ImsCallProfile profile ) throws android.os.RemoteException { mListener.callSessionConferenceExtended ( newSession , profile ) ; }
public void onClick ( android.view.View v ) { showDialog ( com.example.android.apis.app.AlertDialogSamples.DIALOG_PROGRESS ) ; mProgress = 0 ; mProgressDialog.setProgress ( 0 ) ; mProgressHandler.sendEmptyMessage ( 0 ) ; }
public void test_plusMonths_long_negativeOverYears ( ) { java.time.LocalDate t = TEST_2007_07_15.plusMonths ( ( - 31 ) ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2004 , 12 , 15 ) ) ; }
public void test_plus_longTemporalUnit_negativeMinutes ( ) { java.time.LocalTime t = TEST_12_30_40_987654321.plus ( ( - 25 ) , java.time.temporal.ChronoUnit.MINUTES ) ; org.testng.Assert.assertEquals ( t , java.time.LocalTime.of ( 12 , 5 , 40 , 987654321 ) ) ; }
private void printVersion ( ) { java.lang.String revision = getRevision ( ) ; if ( revision != null ) { java.lang.System.out.println ( java.lang.String.format ( "lint: version %1$s" , revision ) ) ; } else { java.lang.System.out.println ( "lint: unknown version" ) ; } }
protected com.android.ide.common.internal.PngCruncher getCruncher ( ) { java.io.File aapt = getAapt ( ) ; return QueuedCruncher.Builder.INSTANCE.newCruncher ( aapt.getAbsolutePath ( ) , com.android.builder.png.NinePatchAsyncAaptProcessTest.sLogger ) ; }
public int telephonyGetPreferredNetworkTypeInteger ( ) { return telephonyGetPreferredNetworkTypeIntegerForSubscription ( android.telephony.SubscriptionManager.getDefaultSubId ( ) ) ; }
public boolean initialize ( ) { return doInitialize ( ) ; }
public void testInstallId ( ) { java.util.Properties props = createProps ( ) ; com.android.sdklib.internal.repository.packages.PlatformPackage p = createPlatformPackage ( props ) ; assertEquals ( "android-5" , p.installId ( ) ) ; }
public void setEnabled ( boolean isEnabled ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.CONNECTIVITY_INTERNAL , "NsdService" ) ; mNsdSettings.putEnabledStatus ( isEnabled ) ; notifyEnabled ( isEnabled ) ; }
public void addGeneratedSourceFolders ( @ com.android.annotations.NonNull org.gradle.api.Task task , @ com.android.annotations.NonNull java.lang.Iterable < java.io.File > sourceFolders ) { getVariantData ( ) . addGeneratedSourceFolders ( task , sourceFolders ) ; }
public void onDestroy ( ) { logger.debug ( "onDestroy()" ) ; if ( ( mCapabilityPolling ) != null ) { mCapabilityPolling.stop ( ) ; mCapabilityPolling = null ; } super . onDestroy ( ) ; }
public void onResume ( ) { super . onResume ( ) ; initPreferences ( ) ; refreshWifiInfo ( ) ; }
public static android.icu.util.UResourceBundle getBundleInstance ( java.lang.String baseName ) { if ( baseName == null ) { baseName = android.icu.impl.ICUResourceBundle.ICU_BASE_NAME ; } android.icu.util.ULocale uloc = android.icu.util.ULocale.getDefault ( ) ; return android.icu.util.UResourceBundle.getBundleInstance ( baseName , uloc.toString ( ) , ICUResourceBundle.ICU_DATA_CLASS_LOADER , false ) ; }
protected void setupTests ( com.android.cts.verifier.ArrayTestListAdapter adapter ) { setupDisableTrustAgentsTest ( adapter ) ; setupDisableUnredactedWorkNotification ( adapter ) ; setupFingerprintTests ( adapter ) ; }
public void callSessionStartFailed ( com.android.ims.internal.IImsCallSession i , android.telephony.ims.ImsReasonInfo imsReasonInfo ) throws android.os.RemoteException { mNewListener.callSessionInitiatedFailed ( imsReasonInfo ) ; }
static float $opt$DoubleToFloat ( double a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( float ) ( a ) ) ; }
public java.lang.String toString ( ) { return ( ( key ) + "=" ) + ( value ) ; }
public vogar.ResultValue getResultValue ( vogar.Expectation expectation ) { if ( matters ( ) ) { return expectation.matches ( this ) ? ResultValue.OK : ResultValue.FAIL ; } return ResultValue.IGNORE ; }
public void sendCdmaSmsResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SendSmsResult var2 ) { }
public com.android.ims.ImsCallProfile getRemoteCallProfile ( ) throws android.os.RemoteException { return null ; }
private static void test_init ( dalvik.system.DexClassLoaderTest.Configuration config ) { dalvik.system.DexClassLoaderTest.createInstance ( config ) ; int expectedFiles = config.expectedFiles ; int actualFiles = config.optimizedDir.listFiles ( ) . length ; assertEquals ( expectedFiles , actualFiles ) ; }
protected javax.swing.JComponent getHeader ( ) { return com.android.tools.idea.wizard.DynamicWizardStep.createWizardStepHeader ( WizardConstants.ANDROID_NPW_HEADER_COLOR , AndroidIcons.Wizards.NewProjectMascotGreen , com.google.gct.idea.util.GctBundle.message ( "sample.import.title" ) ) ; }
public boolean sameItemAs ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.DocPackage ) { com.android.sdklib.AndroidVersion rev2 = ( ( com.android.sdklib.internal.repository.packages.DocPackage ) ( pkg ) ) . getVersion ( ) ; return this . getVersion ( ) . equals ( rev2 ) ; } return false ; }
public synchronized void setProperty ( java.lang.String name , java.lang.String value ) { mProperties.put ( name , value ) ; }
public void onIntrData ( byte reportId , byte [ ] data ) { android.util.Log.d ( android.bluetooth.BluetoothHidDeviceCallback.TAG , ( "onIntrData: reportId=" + reportId ) ) ; }
public void testProxyAuthConnectionFailed ( ) throws java.lang.Throwable { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.setUpStoreProperties ( ) ; java.net.ServerSocket ss = new java.net.ServerSocket ( 0 ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier hnv = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier ( ) ; javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier ( hnv ) ; java.net.URL url = new java.net.URL ( "https://requested.host:55555/requested.data" ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , new java.net.InetSocketAddress ( "localhost" , ss.getLocalPort ( ) ) ) ) ) ) ; connection.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; try { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.doInteraction ( connection , ss , org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.AUTHENTICATION_REQUIRED_CODE , true ) ; } catch ( java.io.IOException e ) { if ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.DO_LOG ) { java.lang.System.out.println ( ( "Got expected IOException: " + ( e.getMessage ( ) ) ) ) ; } } }
public static < T extends java.lang.Enum < T > > com.google.common.base.Function < java.lang.String , T > valueOfFunction ( java.lang.Class < T > enumClass ) { return new com.google.common.base.Enums.ValueOfFunction < T > ( enumClass ) ; }
public static android.telephony.SmsCbMessage createFromPdu ( byte [ ] pdu ) { try { return new android.telephony.SmsCbMessage ( pdu ) ; } catch ( java.lang.IllegalArgumentException e ) { return null ; } }
public void testPackageOverridePackageWithSuffixOnly ( ) { mBuildType.setPackageNameSuffix ( "fortytwo" ) ; com.android.builder.core.VariantConfiguration variant = getVariantWithManifestPackage ( "fake.package.name" ) ; assertEquals ( "fake.package.name.fortytwo" , variant.getPackageOverride ( ) ) ; }
protected java.lang.Object engineGetParameter ( java.lang.String arg0 ) throws java.security.InvalidParameterException { return spiImpl.engineGetParameter ( arg0 ) ; }
native void rsnScriptInvokeV ( long con , long id , int slot , byte [ ] params ) ;
public com.android.ide.eclipse.adt.internal.editors.layout.gle2.HardwareConfigHelper setOverrideRenderSize ( int overrideRenderWidth , int overrideRenderHeight ) { mOverrideRenderWidth = overrideRenderWidth ; mOverrideRenderHeight = overrideRenderHeight ; return this ; }
public java.lang.reflect.Constructor < ? > getEnclosingConstructor ( ) { if ( classNameImpliesTopLevel ( ) ) { return null ; } java.lang.reflect.AccessibleObject result = libcore.reflect.AnnotationAccess.getEnclosingMethodOrConstructor ( this ) ; return result instanceof java.lang.reflect.Constructor ? ( ( java.lang.reflect.Constructor < ? > ) ( result ) ) : null ; }
protected com.android.jack.dx.dex.file.DexFile createDexFile ( ) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions ( ) ; options.forceJumbo = forceJumbo ; options.targetApiLevel = apiLevel ; return new com.android.jack.dx.dex.file.DexFile ( options ) ; }
protected int peek ( java.net.InetAddress arg0 ) throws java.io.IOException { return 0 ; }
public boolean disable ( ) { try { return mManagerService.disable ( true ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeInt ( mServiceType ) ; out.writeInt ( mCallType ) ; out.writeParcelable ( mCallExtras , 0 ) ; out.writeParcelable ( mMediaProfile , 0 ) ; }
public void test_getInstance_provider0 ( ) throws java.lang.Exception { test_getInstance ( java.security.Security.getProviders ( ) [ 0 ] ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JBooleanLiteral expr ) { performCommonChecks ( expr ) ; com.android.jack.ir.ast.JBooleanLiteral other = otherOrMe ( expr ) ; ensure ( ( ( expr.getValue ( ) ) == ( other.getValue ( ) ) ) ) ; }
private boolean contains ( byte [ ] key ) { execute ( 'e' , key ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; }
public void addData ( java.lang.String tag , byte [ ] data , int flags ) { java.lang.System.out.println ( ( ( tag + ": " ) + ( libcore.io.Base64.encode ( data ) ) ) ) ; }
public com.android.utils.HtmlBuilder newline ( ) { mStringBuilder.append ( "<BR/>\n" ) ; return this ; }
public boolean nudValid ( ) { return ( nudConnected ( ) ) || ( ( ( ndm_state ) & ( ( ( android.net.netlink.StructNdMsg.NUD_PROBE ) | ( android.net.netlink.StructNdMsg.NUD_STALE ) ) | ( android.net.netlink.StructNdMsg.NUD_DELAY ) ) ) != 0 ) ; }
static void inlinedForNull ( java.lang.Iterable < ? > it ) { if ( it != null ) { if ( Main.doThrow ) { throw new java.lang.Error ( "" ) ; } } }
public boolean canTransfer ( ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "canTransfer: not possible in CDMA" ) ; return false ; }
public final byte [ ] generateSecret ( ) throws java.lang.IllegalStateException { return spiImpl.engineGenerateSecret ( ) ; }
public void alignToFourBytes ( ) { int unalignedCount = position ; position = com.android.dx.io.DexBuffer.fourByteAlign ( position ) ; for ( int i = unalignedCount ; i < ( position ) ; i ++ ) { data [ i ] = 0 ; } }
public void requestNetwork ( android.net.NetworkRequest request , int timeoutMs , android.net.ConnectivityManager.NetworkCallback networkCallback ) { android.net.ConnectivityManager.checkTimeout ( timeoutMs ) ; int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; requestNetwork ( request , networkCallback , timeoutMs , legacyType , getDefaultHandler ( ) ) ; }
public static void assertTrue ( boolean condition ) { if ( ! condition ) throw new java.lang.RuntimeException ( "AssertionFailedError: condition was false" ) ; }
synchronized void nScriptSetVarD ( int id , int slot , double val ) { validate ( ) ; rsnScriptSetVarD ( mContext , id , slot , val ) ; }
public int initialize ( int subscriptionId , android.telephony.mbms.IMbmsDownloadManagerCallback listener ) throws android.os.RemoteException { return 0 ; }
public static android.net.ConnectivityThread get ( ) { return android.net.ConnectivityThread.getInstance ( ) ; }
public static com.android.dialer.spam.status.SimpleSpamStatus create ( boolean isSpam , @ android.support.annotation.Nullable java.lang.Long timestampMillis ) { return new com.android.dialer.spam.status.AutoValue_SimpleSpamStatus ( isSpam , com.google.common.base.Optional.fromNullable ( timestampMillis ) ) ; }
public int previousIndex ( ) { return delegate.previousIndex ( ) ; }
private void skipArray ( ) { while ( ( descriptor.charAt ( index ) ) == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_ARRAY ) ) { ( index ) ++ ; } }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDynamicCastOperation cast ) { checkBoxingOrUnboxing ( cast.getExpr ( ) , cast.getCastType ( ) ) ; super . endVisit ( cast ) ; }
public final int getInt ( int index ) { checkNotFreed ( ) ; checkIndex ( index , SizeOf.INT ) ; return this . block.peekInt ( ( ( offset ) + index ) , order ) ; }
public static boolean isPackageSourceName ( @ javax.annotation.Nonnull java.lang.String name ) { return com.android.jack.util.NamingTools.isPackageName ( name.toCharArray ( ) , 0 , name.length ( ) , com.android.jack.util.NamingTools.PACKAGE_SOURCE_SEPARATOR , JLookup.PACKAGE_SEPARATOR ) ; }
public com.android.bluetooth.hfp.HeadsetStateMachine makeStateMachine ( android.bluetooth.BluetoothDevice device , android.os.Looper looper , com.android.bluetooth.hfp.HeadsetService service , com.android.bluetooth.hfp.HeadsetNativeInterface nativeInterface , com.android.bluetooth.hfp.HeadsetSystemInterface systemInterface ) { return com.android.bluetooth.hfp.HeadsetStateMachine.make ( device , looper , service , nativeInterface , systemInterface ) ; }
synchronized void nAllocationRead ( int id , short [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public final void cancel ( ) { mHandler.removeMessages ( android.os.CountDownTimer.MSG ) ; }
public void addResolutionIntent ( android.content.Intent extrasIntent , java.lang.String resolutionAction , java.lang.String callingPackage , com.android.internal.telephony.euicc.EuiccOperation op ) { mResolutionAction = resolutionAction ; mOp = op ; }
public java.lang.String getName ( ) { try { return file.getCanonicalPath ( ) ; } catch ( java.io.IOException ex ) { return file.getPath ( ) ; } }
public static native java.lang.String EVP_PKEY_print_private ( org.conscrypt.NativeRef.EVP_PKEY pkeyRef ) ;
public void setCallIsAdditional ( boolean isAdditional ) { com.android.server.telecom.Log.d ( com.android.server.telecom.Analytics.TAG , ( ( ( "setting isAdditional for call " + ( callId ) ) + " to " ) + isAdditional ) ) ; this . isAdditionalCall = isAdditional ; }
public static java.lang.String toASCII ( java.lang.String input , int flags ) { return libcore.icu.NativeIDN.toASCII ( input , flags ) ; }
public int getDensity ( ) { return 0 ; }
com.google.common.util.concurrent.ListenableFuture < java.lang.String > run ( com.google.common.collect.ImmutableList < java.lang.String > args ) ;
public java.lang.String getString ( ) { return org.bouncycastle.util.Strings.fromUTF8ByteArray ( string ) ; }
public static short checkedCast ( long value ) { short result = ( ( short ) ( value ) ) ; com.google.common.base.Preconditions.checkArgument ( ( result == value ) , "Out of range: %s" , value ) ; return result ; }
native void rsnScriptSetVarJ ( long con , long id , int slot , long val ) ;
static char $opt$ShortToChar ( short a ) { return ( ( char ) ( a ) ) ; }
public java.lang.String getEsn ( ) { return getEsn ( android.telephony.TelephonyManager.getDefaultSubscription ( ) ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . createCallSession ( mSlotId , mSupportedFeature , sessionId , profile , listener ) ; } }
private boolean record ( com.android.server.pm.dex.PackageDexUsageTests.TestData testData ) { return mPackageDexUsage.record ( testData.mPackageName , testData.mDexFile , testData.mOwnerUserId , testData.mLoaderIsa , testData.mUsedByOtherApps , testData.mPrimaryOrSplit ) ; }
public void run ( ) { toastConvertInfo ( mms ) ; showSmsOrMmsSendButton ( mms ) ; if ( mms ) { mTextCounter.setVisibility ( View.GONE ) ; } }
public org.bouncycastle.math.ec.PreCompInfo getPreCompInfo ( org.bouncycastle.math.ec.ECPoint p ) { checkPoint ( p ) ; return p.preCompInfo ; }
private native void initNative ( ) ;
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsCharCharCharChar args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( byte ) ( java.lang.StrictMath.min ( args.inMaxValue , java.lang.StrictMath.max ( args.inValue , args.inMinValue ) ) ) ) ; }
public static native java.lang.String getISO3LanguageNative ( java.lang.String locale ) ;
public void run ( ) { mAllocationViewer.refresh ( ) ; updateAllocationStackCall ( ) ; }
public void addMatrix ( android.support.v8.renderscript.Matrix4f v ) { mN.addMatrix ( new android.support.v8.renderscript.Matrix4f ( v.getArray ( ) ) ) ; }
public synchronized double getMin ( ) { ensureSorted ( ) ; return samples [ 0 ] ; }
public void testForName_IllegalName ( ) { try { java.nio.charset.Charset.forName ( " ///#$$" ) ; fail ( "Should throw IllegalCharsetNameException!" ) ; } catch ( java.nio.charset.IllegalCharsetNameException e ) { } }
public void setParseNoExponent ( java.lang.String value ) { parseNoExponent = java.lang.Integer.valueOf ( value ) ; }
boolean setAttribute ( java.lang.String attributeName , java.lang.String value ) ;
public boolean canBePolymorphic ( ) { return ( ! ( isStatic ( ) ) ) && ( ! ( isPrivate ( ) ) ) ; }
public void scheduleActivityConfigurationChanged ( android.os.IBinder token ) { queueOrSendMessage ( android.app.ActivityThread.H.ACTIVITY_CONFIGURATION_CHANGED , token ) ; }
static int nativeGetPixel ( long nativeBitmap , int x , int y ) { android.graphics.Bitmap_Delegate delegate = android.graphics.Bitmap_Delegate.sManager.getDelegate ( nativeBitmap ) ; if ( delegate == null ) { return 0 ; } return delegate.mImage.getRGB ( x , y ) ; }
public void test_getStreamVolumeLeak ( ) throws java.lang.Exception { int volume = android.security.cts.AudioPolicyBinderTest.native_test_getStreamVolumeLeak ( ) ; assertTrue ( java.lang.String.format ( "Leaked volume 0x%08X" , volume ) , ( volume == 0 ) ) ; }
public void setTimeAndTimeZoneFromNitz ( com.android.internal.telephony.NitzData newNitzData , long nitzReceiveTime ) { setTimeZoneFromNitz ( newNitzData , nitzReceiveTime ) ; com.android.internal.telephony.util.TimeStampedValue < com.android.internal.telephony.NitzData > nitzSignal = new com.android.internal.telephony.util.TimeStampedValue ( newNitzData , nitzReceiveTime ) ; setTimeFromNitz ( nitzSignal ) ; }
public void testConstructor_EndBeforeStart_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , android.security.KeyPairGeneratorSpecTest.SERIAL_1 , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , android.security.KeyPairGeneratorSpecTest.NOW , 0 ) ; fail ( "Should throw IllegalArgumentException when end is before start" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public java.lang.String telephonyGetVoiceNetworkType ( ) { return telephonyGetVoiceNetworkTypeForSubscription ( android.telephony.SubscriptionManager.getDefaultVoiceSubId ( ) ) ; }
protected java.util.Map.Entry < K , V > get ( int index ) { return com.google.common.collect.Maps.immutableEntry ( getKey ( index ) , getValue ( index ) ) ; }
public abstract java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( ) ;
public com.android.sdklib.internal.avd.AvdManager.AvdInfo [ ] getAllAvds ( ) { synchronized ( mAllAvdList ) { return mAllAvdList.toArray ( new com.android.sdklib.internal.avd.AvdManager.AvdInfo [ mAllAvdList.size ( ) ] ) ; } }
public void test_EC_KEY_get_public_key_null_key_Failure ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.EC_KEY_get_public_key ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public < A extends java.lang.annotation.Annotation > A getAnnotation ( java.lang.Class < A > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return getAnnotationNative ( annotationType ) ; }
public java.util.Map.Entry < K , V > higherEntry ( K key ) { return getNearEntry ( key , m.GT ) ; }
public native byte getByte ( java.lang.Object obj , long offset ) ;
private void riljLogv ( java.lang.String msg ) { android.telephony.Rlog.v ( com.android.internal.telephony.RIL.RILJ_LOG_TAG , msg ) ; }
public void loadLibrary ( java.lang.String libName ) { loadLibrary ( libName , dalvik.system.VMStack.getCallingClassLoader ( ) ) ; }
void transform ( org.eclipse.jdt.core.dom.CompilationUnit cu , org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite ) ;
public void test_SingletonMap_computeIfAbsent ( ) { try { java.util.Collections.singletonMap ( 1 , 11.0 ) . computeIfAbsent ( 1 , ( k ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void setAllVisitors ( com.android.jack.dx.io.CodeReader.Visitor visitor ) { fallbackVisitor = visitor ; stringVisitor = visitor ; typeVisitor = visitor ; fieldVisitor = visitor ; methodVisitor = visitor ; }
public static byte $noinline$shortToCharToByte ( short value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }
private void stopScan ( ) { mConditionStopped.open ( ) ; }
public static native int nativeForkAndSpecialize ( int uid , int gid , int [ ] gids , int debugFlags , int [ ] [ ] rlimits ) ;
public com.intellij.openapi.vfs.VirtualFile getRootDir ( ) { return myRootDir ; }
public org.objectweb.asm.AnnotationVisitor visitArray ( java.lang.String name ) { return new com.android.build.gradle.tasks.ResourceUsageAnalyzer.AnnotationUsageVisitor ( ) ; }
protected com.android.builder.resources.ResourceFile createFileAndItems ( java.io.File file ) { com.android.builder.resources.ResourceSet.FolderData folderData = com.android.builder.resources.ResourceSet.getFolderData ( file.getParentFile ( ) ) ; return createResourceFile ( file , folderData ) ; }
public void onDescriptorRead ( java.lang.String address , int status , int srvcType , int srvcInstId , android.os.ParcelUuid srvcUuid , int charInstId , android.os.ParcelUuid charUuid , int descrInstId , android.os.ParcelUuid descrUuid , byte [ ] value ) throws android.os.RemoteException { }
public boolean enableNetworkWithoutConnect ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "enableNetworkWithoutConnect nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( ( ( "ENABLE_NETWORK " + netId ) + " " ) + "no-connect" ) ) ; }
public void createNativeBuildTypes ( org.gradle.nativeplatform.BuildTypeContainer nativeBuildTypes , @ org.gradle.model.Path ( value = "android.buildTypes" ) org.gradle.model.ModelMap < com.android.builder.model.BuildType > androidBuildTypes ) { for ( com.android.builder.model.BuildType buildType : androidBuildTypes.values ( ) ) { nativeBuildTypes.maybeCreate ( buildType.getName ( ) ) ; } }
public void exit ( ) { turnOffUpstreamMobileConnection ( ) ; mUpstreamNetworkMonitor.stop ( ) ; stopListeningForSimChanges ( ) ; notifyTetheredOfNewUpstreamIface ( null ) ; handleNewUpstreamNetworkState ( null ) ; }
private void inlinedForNull ( java.lang.Iterable it ) { if ( it != null ) { it.iterator ( ) ; } }
public void onAttachmentError ( final int error ) { runOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { handleAddAttachmentError ( error , R.string.type_picture ) ; onMessageSent ( ) ; } } ) ; }
public native short getShort ( long address ) ;
, name = "_add" , returnType = int . class , argumentTypes = { int . class , int . class } ) private static int add ( int a , int b ) { throw new java.lang.UnsupportedOperationException ( "Should be invoking _add(a, b)" ) ; }
public static double copySign ( double magnitude , double sign ) { return sun.misc.FpUtils.copySign ( magnitude , sign ) ; }
public void testGetAvailableLocales ( ) { }
public final android.os.IBinder readStrongBinder ( ) { return android.os.Parcel.nativeReadStrongBinder ( mNativePtr ) ; }
public java.lang.reflect.Type [ ] getGenericParameterTypes ( ) { initGenericTypes ( ) ; return org.apache.harmony.luni.lang.reflect.Types.getClonedTypeArray ( genericParameterTypes ) ; }
public void run ( ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNew = uiDoc.appendNewUiChild ( viewDesc ) ; uiNew.setAttributeValue ( "android" , XmlnsAttributeDescriptor.XMLNS_URI , SdkConstants.NS_RESOURCES , true ) ; com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.setDefaultLayoutAttributes ( uiNew , false ) ; uiNew.createXmlNode ( ) ; }
public com.android.sdklib.io.IAbstractFolder getParentFolder ( ) { java.lang.String p = this . getParent ( ) ; if ( p == null ) { return null ; } return new com.android.sdklib.io.FolderWrapper ( p ) ; }
public static void computeAtan2 ( android.renderscript.cts.TestAtan2.ArgumentsFloatFloatFloat args ) { args.ulf = 6 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( java.lang.StrictMath.atan2 ( args.inY , args.inX ) ) ) ; }
private int getTimeComponent ( org.bouncycastle.asn1.DERInteger time ) { if ( time != null ) { return time.getValue ( ) . intValue ( ) ; } return 0 ; }
public void onStartRtt ( @ android.annotation.NonNull android.telecom.Connection.RttTextStream rttTextStream ) { }
private android.net.IpSecManager.SecurityParameterIndex ipSecAllocateSpi ( java.net.InetAddress inetAddr ) { try { return mIpSecManager.allocateSecurityParameterIndex ( inetAddr ) ; } catch ( android.net.IpSecManager.ResourceUnavailableException e ) { com.googlecode.android_scripting.Log.e ( ( "IpSec: Reserve SPI failure " + ( e.toString ( ) ) ) ) ; } return null ; }
public com.android.layoutlib.api.SceneResult removeChild ( java.lang.Object childView , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED.createResult ( ) ; }
public static java.lang.String getPackageName ( ) { return android.webkit.WebViewZygote.sPackage.packageName ; }
public void callSessionMayHandover ( com.android.ims.internal.IImsCallSession i , int srcAccessTech , int targetAccessTech ) throws android.os.RemoteException { mNewListener.callSessionMayHandover ( srcAccessTech , targetAccessTech ) ; }
public void test_SingletonList_replaceAll ( ) { try { java.util.Collections.singletonList ( 1 ) . replaceAll ( ( k ) -> 2 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public static boolean callsSuper ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.MethodDeclaration methodDeclaration , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedMethod method ) { com.android.tools.lint.checks.CallSuperDetector.SuperCallVisitor visitor = new com.android.tools.lint.checks.CallSuperDetector.SuperCallVisitor ( context , method ) ; methodDeclaration.accept ( visitor ) ; return visitor.mCallsSuper ; }
public final com.android.tools.perflib.heap.ClassObj getClass ( long id ) { return mClassesById.get ( id ) ; }
public static double scalb ( double d , int scaleFactor ) { return sun.misc.FpUtils.scalb ( d , scaleFactor ) ; }
public boolean disableWBS ( ) { com.android.bluetooth.hfp.HeadsetService service = getService ( ) ; if ( service == null ) { return false ; } return service.disableWBS ( ) ; }
native void rsnAllocationData3D ( int con , int id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , byte [ ] d , int sizeBytes ) ;
public boolean isFair ( ) { return lock.isFair ( ) ; }
private void configureStageUninstallExpectation ( boolean success ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( success ) . when ( mMockTimeZoneDistroInstaller ) . stageUninstall ( ) ; }
public static void startMethodTracing ( java.lang.String traceFileName , int bufferSize , int flags ) { dalvik.system.VMDebug.startMethodTracingFilename ( traceFileName , dalvik.system.VMDebug.checkBufferSize ( bufferSize ) , flags ) ; }
public void generateBuildConfig ( @ com.android.annotations.NonNull java.lang.String packageName , boolean debuggable , @ com.android.annotations.NonNull java.util.List < java.lang.String > javaLines , @ com.android.annotations.NonNull java.lang.String sourceOutputDir ) throws java.io.IOException { com.android.builder.internal.BuildConfigGenerator generator = new com.android.builder.internal.BuildConfigGenerator ( sourceOutputDir , packageName , debuggable ) ; generator.generate ( javaLines ) ; }
void merge ( android.net.metrics.NetworkMetrics.Summary that ) { dnsLatencies.merge ( that.dnsLatencies ) ; dnsErrorRate.merge ( that.dnsErrorRate ) ; connectLatencies.merge ( that.connectLatencies ) ; connectErrorRate.merge ( that.connectErrorRate ) ; }
private java.io.File getDexFile ( @ javax.annotation.Nonnull java.lang.String typeName ) { return new java.io.File ( incrementalFolder , FileType.DEX.buildFileVPath ( new com.android.sched.vfs.VPath ( typeName , '/' ) ) . getPathAsString ( java.io.File.separatorChar ) ) ; }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionFailure ( ) ; } }
public void execute ( org.gradle.api.Task task ) { proguardOut.mkdirs ( ) ; }
public void testWarningOnViewSubclass ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/ClickableViewAccessibilityTest.java:82: Warning: test/pkg/ClickableViewAccessibilityTest$ViewSubclass#performClick should call super#performClick [ClickableViewAccessibility]\n" + ( ( " public boolean performClick() {\n" + " ~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/ClickableViewAccessibilityTest.java.txt=>src/test/pkg/ClickableViewAccessibilityTest.java" , "bytecode/ClickableViewAccessibilityTest.class.data=>bin/classes/test/pkg/ClickableViewAccessibilityTest.class" , ( "bytecode/ClickableViewAccessibilityTest$ValidView.class.data=>" + "bin/classes/test/pkg/ClickableViewAccessibilityTest$ValidView.class" ) , ( "bytecode/ClickableViewAccessibilityTest$ViewSubclass.class.data=>" + "bin/classes/test/pkg/ClickableViewAccessibilityTest$ViewSubclass.class" ) ) ) ; }
public void dispose ( ) { mUpdaterData.removeListener ( this ) ; super . dispose ( ) ; }
public android.net.wifi.aware.ConfigRequest build ( ) { if ( ( mClusterLow ) > ( mClusterHigh ) ) { throw new java.lang.IllegalArgumentException ( "Invalid argument combination - must have Cluster Low <= Cluster High" ) ; } return new android.net.wifi.aware.ConfigRequest ( mSupport5gBand , mMasterPreference , mClusterLow , mClusterHigh ) ; }
public void run ( ) { com.android.ide.eclipse.hierarchyviewer.HierarchyViewerPlugin.initDirector ( director ) ; }
public boolean getDataEnabled ( ) { return getDataEnabled ( getSubId ( ) ) ; }
public void run ( ) { onSizeChanged ( w , h , ow , oh ) ; }
public void setIsConferenced ( java.lang.String callId , java.lang.String conferenceCallId ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = callId ; args.arg2 = conferenceCallId ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_SET_IS_CONFERENCED , args ) . sendToTarget ( ) ; }
public com.google.common.collect.ImmutableList < java.lang.reflect.Field > getFieldsForClass ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass ) { return allOptionsFields.get ( optionsClass ) ; }
public static org.hamcrest.Matcher < java.lang.Object > instanceOf ( java.lang.Class < ? > type ) { return new org.hamcrest.core.IsInstanceOf ( type ) ; }
private void testInterruptReadableChannel ( final java.nio.channels.ReadableByteChannel channel ) throws java.lang.Exception { interruptMeLater ( ) ; try { channel.read ( java.nio.ByteBuffer.allocate ( libcore.java.io.InterruptedStreamTest.BUFFER_SIZE ) ) ; fail ( ) ; } catch ( java.nio.channels.ClosedByInterruptException expected ) { } }
public T next ( ) { return function.apply ( delegate.next ( ) ) ; }
public void onCreate ( ) { mAuthenticator = new com.google.android.car.pbapsink.Authenticator ( this ) ; }
public int size ( ) { return size ; }
public byte [ ] onAuthenticationResponse ( byte [ ] userName ) { return null ; }
private static final java.lang.String whatToString ( int what ) { return android.net.ConnectivityManager.NoPreloadHolder.sMagicDecoderRing.get ( what , java.lang.Integer.toString ( what ) ) ; }
public void testLibraryAtPreviewInOldApp_usingMinSdk ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application android:label=\"@string/lib_name\" />\n" ) + " <uses-sdk android:minSdkVersion=\"19\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <uses-sdk android:minSdkVersion=\"XYZ\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertFalse ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.MergingReport mergingReport = mergingReportBuilder.build ( ) ; com.google.common.collect.ImmutableList < com.android.manifmerger.MergingReport.Record > loggingRecords = mergingReport.getLoggingRecords ( ) ; assertTrue ( mergingReport.getResult ( ) . isError ( ) ) ; assertEquals ( 1 , loggingRecords.size ( ) ) ; assertTrue ( loggingRecords.get ( 0 ) . getMessage ( ) . contains ( "XYZ" ) ) ; }
protected boolean hasPublicConstructor ( java.lang.Class < ? > testClass ) { try { junit.framework.TestSuite.getTestConstructor ( testClass ) ; } catch ( java.lang.NoSuchMethodException e ) { return false ; } return true ; }
public static native long EC_KEY_generate_key ( long groupRef ) ;
public java.util.Collection < com.android.test.common.fixture.app.TestSourceFile > getAllSourceFiles ( ) { return sourceFiles.values ( ) ; }
public static java.net.InetAddress [ ] getAllByNameOnNet ( java.lang.String host , int netId ) throws java.net.UnknownHostException { return java.net.InetAddress.getAllByNameImpl ( host , netId ) . clone ( ) ; }
public com.android.sdklib.SdkManager getNewSdkManager ( @ com.android.annotations.NonNull com.android.utils.ILogger log ) { return com.android.sdklib.SdkManager.createManager ( getSdkLocation ( ) , log ) ; }
public final java.lang.String getDescription ( int columnIdx ) { return getHeader ( ) [ columnIdx ] ; }
public void setChildren ( java.util.List < com.android.layoutlib.api.ViewInfo > children ) { mChildren = new java.util.ArrayList < com.android.layoutlib.api.ViewInfo > ( ) ; mChildren.addAll ( children ) ; mChildren = java.util.Collections.unmodifiableList ( mChildren ) ; }
public void testTestStarted ( ) { java.lang.StringBuilder output = buildCommonResult ( ) ; addStartCode ( output ) ; injectTestString ( output.toString ( ) ) ; assertCommonAttributes ( ) ; }
public void testToFromBytesRoundTrip ( ) throws java.lang.Exception { libcore.tzdata.update2.DistroVersion distroVersion = new libcore.tzdata.update2.DistroVersion ( 1 , 2 , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , 3 ) ; assertEquals ( distroVersion , libcore.tzdata.update2.DistroVersion.fromBytes ( distroVersion.toBytes ( ) ) ) ; }
void expect ( java.lang.String rules , java.lang.String source , java.lang.String expectedResult , android.icu.text.Transliterator.Position pos ) { android.icu.text.Transliterator t = android.icu.text.Transliterator.createFromRules ( "<ID>" , rules , Transliterator.FORWARD ) ; expect ( t , source , expectedResult , pos ) ; }
private com.android.jack.test.dex.DexMethodDalvikCodeValidator dalvik ( @ javax.annotation.Nonnull java.lang.String test , @ javax.annotation.Nonnull java.lang.String expected ) { return new com.android.jack.test.dex.DexMethodDalvikCodeValidator ( resource ( test , expected ) ) ; }
public java.lang.String getLegacyValue ( ) { if ( ( this ) != ( com.android.sdklib.resources.Density.NODPI ) ) { return java.lang.String.format ( "%1$ddpi" , getDpiValue ( ) ) ; } return "" ; }
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.MustInitWithAlgorithmParameterSpec_RejectsAll.class . getName ( ) ) ; put ( "Cipher.FOO SupportedKeyClasses" , libcore.javax.crypto.MockKey.class . getName ( ) ) ; }
public void test4 ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/wrongparams5.xml:8: Warning: Invalid layout param \'layout_alignParentTop\' (included from within a LinearLayout in layout/wrongparams6.xml) [ObsoleteLayoutParam]\n" + ( ( ( ( ( ( " android:layout_alignParentTop=\"true\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/wrongparams5.xml:15: Warning: Invalid layout param \'layout_alignParentLeft\' (included from within a LinearLayout in layout/wrongparams6.xml) [ObsoleteLayoutParam]\n" ) + " android:layout_alignParentLeft=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) + "" ) ) , lintProject ( "res/layout/wrongparams5.xml" , "res/layout/wrongparams6.xml" ) ) ; }
public static < K , V > com.google.common.collect.ImmutableMap < K , V > of ( ) { return ( ( com.google.common.collect.ImmutableMap < K , V > ) ( EmptyImmutableMap.INSTANCE ) ) ; }
public synchronized void onPlaybackStateChanged ( android.media.session.PlaybackState state ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "onPlaybackStateChanged: state " + ( state.toString ( ) ) ) ) ; scheduleMediaUpdate ( ) ; }
public static int IntMultiplication ( ) { int a ; int b ; int c ; a = 7 ; b = 3 ; c = a * b ; return c ; }
public static java.lang.String getFolderSegment ( int version ) { if ( version != ( com.android.ide.eclipse.adt.internal.resources.configurations.VersionQualifier.DEFAULT_VERSION ) ) { return java.lang.String.format ( "v%1$d" , version ) ; } return "" ; }
public void registerForDataCallListChanged ( int slotId , android.telephony.data.IDataServiceCallback callback ) { if ( callback == null ) { loge ( "Callback is null" ) ; return ; } mHandler.obtainMessage ( android.telephony.data.DataService.DATA_SERVICE_REQUEST_REGISTER_DATA_CALL_LIST_CHANGED , slotId , 0 , callback ) . sendToTarget ( ) ; }
public boolean isUsageEnabled ( ) { try { return mService.isUsageEnabled ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public static java.lang.String getZoneTab ( ) { return libcore.util.ZoneInfoDB.zoneTab ; }
synchronized void nScriptInvokeV ( long id , int slot , byte [ ] params ) { validate ( ) ; rsnScriptInvokeV ( mContext , id , slot , params ) ; }
public static com.google.common.primitives.UnsignedLong asUnsigned ( long value ) { return new com.google.common.primitives.UnsignedLong ( value ) ; }
public com.android.sdkuilib.internal.repository.sdkman2.PkgCategory createCategory ( java.lang.Object catKey ) { assert catKey instanceof com.android.sdklib.internal.repository.sources.SdkSource ; com.android.sdkuilib.internal.repository.sdkman2.PkgCategory cat = new com.android.sdkuilib.internal.repository.sdkman2.PkgCategorySource ( ( ( com.android.sdklib.internal.repository.sources.SdkSource ) ( catKey ) ) , mUpdaterData ) ; return cat ; }
public void testNotification2 ( ) throws java.lang.Exception { checkGraphic ( "ic_stat_square" , GraphicGenerator.Shape.SQUARE ) ; }
public static void unreachable ( ) throws java.lang.Throwable { throw new java.lang.Error ( "unreachable" ) ; }
public static long getLastEmergencyCallTimeMillis ( android.content.Context context ) { return com.android.dialer.util.DialerUtils.getDefaultSharedPreferenceForDeviceProtectedStorageContext ( context ) . getLong ( com.android.dialer.blocking.FilteredNumbersUtil.LAST_EMERGENCY_CALL_MS_PREF_KEY , 0 ) ; }
public void testWithInputType_ShouldNotCrashIf_InputTypeIsNotRecognized ( ) { android.widget.EditText editText = new android.widget.EditText ( context ) ; editText.setInputType ( InputType.TYPE_CLASS_NUMBER ) ; assertFalse ( android.support.test.espresso.matcher.ViewMatchers.withInputType ( android.support.test.espresso.matcher.ViewMatchersTest.UNRECOGNIZED_INPUT_TYPE ) . matches ( editText ) ) ; }
public void testSpecificDefaultValue ( ) { assertEquals ( 4.0 , encoder.maxBytesPerChar ( ) , 0.0 ) ; assertEquals ( 4.0 , encoder.averageBytesPerChar ( ) , 0.0 ) ; }
private int applyUserId ( int uid , int userId ) { return android.os.UserHandle.getUid ( userId , uid ) ; }
public com.android.utils.HtmlBuilder endList ( ) { if ( com.android.utils.HtmlBuilder.USE_DD_LISTS ) { mStringBuilder.append ( "\n</DL>" ) ; } else { mStringBuilder.append ( "\n</UL>" ) ; } return this ; }
static void $noinline$someStaticMethod ( java.lang.Iterable < ? > it ) { it.iterator ( ) ; if ( Main.doThrow ) { throw new java.lang.Error ( "" ) ; } }
public com.google.common.collect.Multiset.Entry < E > firstEntry ( ) { return delegate ( ) . firstEntry ( ) ; }
public void onConnectionEvent ( java.lang.String callId , java.lang.String event , android.os.Bundle extras ) { if ( mConnectionById.containsKey ( callId ) ) { findConnectionForAction ( callId , "onConnectionEvent" ) . onConnectionEvent ( event , extras ) ; } }
public com.android.build.gradle.integration.common.fixture.GradleTestProject create ( ) { return new com.android.build.gradle.integration.common.fixture.GradleTestProject ( name , testProject , experimentalMode , ( experimentalMode ? com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_EXP_TEST_VERSION : com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_TEST_VERSION ) , captureStdOut , captureStdErr , heapSize ) ; }
public void testConnectsToEmergencyNumberLongNumber_CL ( ) { assertFalse ( shortInfo.connectsToEmergencyNumber ( "1313" , RegionCode.CL ) ) ; assertFalse ( shortInfo.connectsToEmergencyNumber ( "1330" , RegionCode.CL ) ) ; }
protected void onRemoteException ( android.os.RemoteException e ) { onAppCallbackDied ( uid , downloadRequest.getSubscriptionId ( ) ) ; }
private void writeBytes ( byte [ ] b , int off , int len ) throws java.io.IOException { ioTracker.trackIo ( len , IoTracker.Mode.WRITE ) ; libcore.io.IoBridge.write ( fd , b , off , len ) ; }
void resConfigs ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.Collection < java.lang.String > config ) { addResourceConfigurations ( config ) ; }
private void verifyNoAudioStateIntent ( int timeoutMs ) { android.content.Intent intent = waitForNoIntent ( timeoutMs , mAudioStateChangedQueue ) ; org.junit.Assert.assertNull ( intent ) ; }
public void testGrant_NoKey_Failure ( ) throws java.lang.Exception { assertTrue ( "Should be able to unlock keystore for test" , mKeyStore.password ( android.security.KeyStoreTest.TEST_PASSWD ) ) ; assertFalse ( "Should not be able to grant without first initializing the keystore" , mKeyStore.grant ( android.security.KeyStoreTest.TEST_KEYNAME , 0 ) ) ; }
public boolean getSmsReceiveCapableForPhone ( int phoneId , boolean defaultValue ) { if ( android.telephony.SubscriptionManager.isValidPhoneId ( phoneId ) ) { return java.lang.Boolean.valueOf ( android.telephony.TelephonyManager.getTelephonyProperty ( phoneId , TelephonyProperties.PROPERTY_SMS_RECEIVE , java.lang.String.valueOf ( defaultValue ) ) ) ; } return defaultValue ; }
private static void checkCallback ( android.net.ConnectivityManager.NetworkCallback callback ) { com.android.internal.util.Preconditions.checkArgument ( ( callback != null ) , "null NetworkCallback" ) ; }
private native void gattServerAddServiceNative ( int server_if , int service_type , int service_id_inst_id , long service_id_uuid_lsb , long service_id_uuid_msb , int num_handles ) ;
public void run ( ) { for ( int i = 0 ; i < 10000 ; i ++ ) { if ( isDoYield ) java.lang.Thread.yield ( ) ; ( counter ) ++ ; } }
private void writeDescriptor ( java.lang.String writeValue ) { android.bluetooth.BluetoothGattDescriptor descriptor = getDescriptor ( ) ; if ( descriptor == null ) return ; descriptor.setValue ( writeValue.getBytes ( ) ) ; mBluetoothGatt.writeDescriptor ( descriptor ) ; }
protected void saveCurrentTreeState ( @ org.jetbrains.annotations.Nullable com.intellij.xdebugger.frame.XStackFrame stackFrame ) { disposeTreeRestorer ( ) ; myFrameEqualityObject = ( stackFrame != null ) ? stackFrame.getEqualityObject ( ) : null ; myTreeState = com.intellij.xdebugger.impl.ui.tree.XDebuggerTreeState.saveState ( myDebuggerTreePanel.getTree ( ) ) ; }
public com.ibm.icu.util.UResourceBundle getParent ( ) { return ( ( com.ibm.icu.util.UResourceBundle ) ( parent ) ) ; }
public void execute ( com.android.monkeyrunner.core.IMonkeyDevice device ) throws java.lang.Exception { device.touch ( x , y , com.android.monkeyrunner.core.TouchPressType.fromIdentifier ( direction ) ) ; }
public void setUp ( ) throws java.lang.Exception { android.jvmti.cts.JniBindings.bindAgentJNI ( "android/jvmti/cts/JvmtiTaggingTest" , getClass ( ) . getClassLoader ( ) ) ; }
public void setProcessorPath ( @ javax.annotation.Nonnull java.util.List < java.io.File > processorPath ) { throw new java.lang.AssertionError ( ) ; }
public java.lang.reflect.Type getGenericSuperclass ( ) { org.apache.harmony.luni.lang.reflect.GenericSignatureParser parser = new org.apache.harmony.luni.lang.reflect.GenericSignatureParser ( getClassLoader ( ) ) ; parser.parseForClass ( this , getSignatureAttribute ( ) ) ; return org.apache.harmony.luni.lang.reflect.Types.getType ( parser.superclassType ) ; }
public void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; android.util.Log.i ( com.android.cts.launcherapps.simpleapp.SimpleActivity.TAG , ( "Created for user " + ( android.os.Process.myUserHandle ( ) ) ) ) ; }
public java.lang.String getFolderSegment ( ) { return com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier.getFolderSegment ( mValue ) ; }
public void adjustVolume ( int direction , int flags , java.lang.String callingPackage ) { adjustSuggestedStreamVolume ( direction , AudioManager.USE_DEFAULT_STREAM_TYPE , flags , callingPackage ) ; }
public java.io.File getFinalResourcesDir ( ) { if ( ( preprocessResourcesTask ) != null ) { return getPreprocessResourceOutputDir ( ) ; } else { return resourceOutputDir ; } }
private void sendDisableMsg ( ) { mHandler.sendMessage ( mHandler.obtainMessage ( com.android.server.BluetoothManagerService.MESSAGE_DISABLE ) ) ; }
static boolean isnewline ( char c ) { return ( c == '\n' ) || ( c == '\r' ) ; }
private boolean equalsSpecifier ( android.net.NetworkCapabilities nc ) { if ( android.text.TextUtils.isEmpty ( mNetworkSpecifier ) ) { return android.text.TextUtils.isEmpty ( nc.mNetworkSpecifier ) ; } else { return mNetworkSpecifier.equals ( nc.mNetworkSpecifier ) ; } }
public boolean isRadioOnForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( canReadPhoneState ( callingPackage , "isRadioOnForSubscriber" ) ) ) { return false ; } return isRadioOnForSubscriber ( subId ) ; }
public void tearDown ( ) throws java.lang.Exception { mDevice.pressBack ( ) ; mDevice.pressHome ( ) ; }
public void a_attachWithBadOptions ( ) throws java.lang.Exception { android.os.Debug.attachJvmtiAgent ( android.jvmti.attaching.cts.AttachingTest.sAgentFile , "b" ) ; }
private static java.util.zip.ZipOutputStream createZipOutputStream ( java.io.File f ) throws java.io.IOException { return new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( f ) ) ) ; }
public int insert ( java.lang.String name , byte [ ] item ) throws android.os.RemoteException ;
public void respondToRttRequest ( boolean accept , int rttRequestId ) { getTelecomCall ( ) . respondToRttRequest ( rttRequestId , accept ) ; }
public com.android.builder.model.NdkConfig getNdkConfig ( ) { return null ; }
public com.android.jack.jayce.v0004.NNode newNode ( ) throws com.android.jack.jayce.v0004.io.InvalidTokenException { throw new com.android.jack.jayce.v0004.io.InvalidTokenException ( ( "No node coresponding to token " + ( this . toString ( ) ) ) ) ; }
public void testDecodeObjectTypeID ( ) throws java.io.IOException { java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream ( TypeA.IDBytes ) ; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder ( input ) ; com.android.tools.rpclib.binary.BinaryID idFromDecoder = new com.android.tools.rpclib.binary.BinaryID ( d ) ; assertEquals ( TypeA.ID , idFromDecoder ) ; }
public void switchUserStore ( com.android.server.wifi.WifiConfigStoreNew.StoreFile userStore ) { stopBufferedWriteAlarm ( ) ; mUserStore = userStore ; }
private java.lang.String getName ( org.w3c.dom.Node node ) { org.w3c.dom.Attr attribute = ( ( org.w3c.dom.Attr ) ( node.getAttributes ( ) . getNamedItemNS ( null , com.android.builder.resources.ValueResourceParser.ATTR_NAME ) ) ) ; if ( attribute != null ) { return attribute.getValue ( ) ; } return null ; }
public abstract com.android.dialer.preferredsim.PreferredAccountWorker.Result.Builder setPhoneAccountHandle ( com.google.common.base.Optional < android.telecom.PhoneAccountHandle > phoneAccountHandle ) ;
public void run ( ) { pair.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { pair.listener.running ( ) ; } } ) ; }
synchronized long nScriptKernelIDCreate ( long sid , int slot , int sig ) { validate ( ) ; return rsnScriptKernelIDCreate ( mContext , sid , slot , sig ) ; }
public void registerForCdmaOtaStatusChange ( android.os.Handler h , int what , java.lang.Object obj ) { mCM.registerForCdmaOtaProvision ( h , what , obj ) ; }
public void run ( ) { createConnection ( connectionManagerPhoneAccount , id , request , isIncoming , isUnknown ) ; }
private final native long getAssetLength ( int asset ) ;
protected void engineSetParameter ( java.lang.String arg0 , java.lang.Object arg1 ) throws java.security.InvalidParameterException { spiImpl.engineSetParameter ( arg0 , arg1 ) ; }
public void doubleClick ( org.eclipse.jface.viewers.DoubleClickEvent event ) { onTreeDoubleClick ( event ) ; }
public void test_U8_4_SCALE05_20_inRectangle ( ) { testReszie ( inX , inY , Element.DataType.UNSIGNED_8 , 4 , 0.5F , 2.0F ) ; }
public static com.android.hierarchyviewerlib.models.DeviceSelectionModel getModel ( ) { if ( ( com.android.hierarchyviewerlib.models.DeviceSelectionModel.model ) == null ) { com.android.hierarchyviewerlib.models.DeviceSelectionModel.model = new com.android.hierarchyviewerlib.models.DeviceSelectionModel ( ) ; } return com.android.hierarchyviewerlib.models.DeviceSelectionModel.model ; }
private void handleVoicePrivacyClickRequest ( boolean value ) { mPhone.enableEnhancedVoicePrivacy ( value , android.os.Message.obtain ( mSetOptionComplete , com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED ) ) ; }
native void rsnScriptSetVarF ( long con , long id , int slot , float val ) ;
private void readDescriptor ( ) { android.bluetooth.BluetoothGattDescriptor descriptor = getDescriptor ( ) ; if ( descriptor != null ) mBluetoothGatt.readDescriptor ( descriptor ) ; }
private static native int nativeCreate ( int outerpe , int innerpe ) ;
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc x ) { print ( com.android.jack.ir.impl.ToStringGenerationVisitor.CHARS_ALLOC ) ; print ( "<" ) ; print ( x.getType ( ) . getName ( ) ) ; print ( ">" ) ; return false ; }
public com.intellij.openapi.externalSystem.model.DataNode < com.intellij.openapi.externalSystem.model.project.ProjectData > produce ( ) { return myDelegate.resolveProjectInfo ( id , projectPath , isPreviewMode , getSettings ( ) , getNotificationListener ( ) ) ; }
public static native java.lang.String mapLibraryName ( java.lang.String userLibName ) ;
public void copy1DRangeFrom ( int off , int count , byte [ ] d ) { validateIsInt8 ( ) ; copy1DRangeFromUnchecked ( off , count , d ) ; }
public void setMaxtimeToOutputResponse ( int maxTimeToOutputResponse ) { mMaxTimeToOutputResponse = maxTimeToOutputResponse ; }
public final void testGetAddonHashString ( ) { assertEquals ( "vendor:my-addon:10" , com.android.sdklib.AndroidTargetHash.getAddonHashString ( "vendor" , "my-addon" , new com.android.sdklib.AndroidVersion ( 10 , null ) ) ) ; }
public android.os.Bundle updateCredentials ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , java.lang.String s , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; return null ; }
public android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype ( ) { synchronized ( mH ) { try { return mService.getCurrentInputMethodSubtype ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.view.inputmethod.InputMethodManager.TAG , ( "IME died: " + ( mCurId ) ) , e ) ; return null ; } } }
public void visitUnknownAttribute ( proguard.classfile.visitor.Clazz clazz , proguard.classfile.visitor.UnknownAttribute unknownAttribute ) { println ( ( ( ( ( visitorInfo ( unknownAttribute ) ) + " Unknown attribute (" ) + ( clazz.getString ( unknownAttribute.u2attributeNameIndex ) ) ) + ")" ) ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setStartTime ( long value ) { bitField0_ |= 128 ; startTime_ = value ; onChanged ( ) ; return this ; }
private void updateSelectAllState ( android.support.v17.leanback.widget.GuidedAction selectAll , boolean select ) { selectAll.setTitle ( ( select ? getString ( R.string.dvr_series_deselect_all ) : getString ( R.string.dvr_series_select_all ) ) ) ; notifyActionChanged ( findActionPositionById ( com.android.tv.dvr.ui.SeriesDeletionFragment.ACTION_ID_SELECT_ALL ) ) ; }
final void resetElements ( ) { elements.clear ( ) ; }
private com.google.devtools.common.options.OptionsParser.DocumentationLevel documentationLevel ( ) { com.google.devtools.common.options.Option option = field.getAnnotation ( com.google.devtools.common.options.Option.class ) ; return com.google.devtools.common.options.OptionsParser.documentationLevel ( option.category ( ) ) ; }
public boolean isPossibleShortNumberForRegion ( java.lang.String shortNumber , java.lang.String regionDialingFrom ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( regionDialingFrom ) ; if ( phoneMetadata == null ) { return false ; } return matcherApi.matchesPossibleNumber ( shortNumber , phoneMetadata.getGeneralDesc ( ) ) ; }
public com.android.jack.ir.ast.cfg.JBasicBlockElement getLastElement ( ) { throw new java.lang.AssertionError ( ) ; }
public boolean isAnnotationPresent ( java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return isAnnotationPresentNative ( annotationType ) ; }
public void reject ( int reason ) throws android.os.RemoteException { }
public static java.awt.image.BufferedImage getStencilImage ( java.lang.String relativePath ) throws java.io.IOException { java.io.InputStream is = com.android.assetstudiolib.GraphicGenerator.class . getResourceAsStream ( relativePath ) ; return javax.imageio.ImageIO.read ( is ) ; }
protected final void init ( @ com.android.annotations.NonNull I item ) { item.setSource ( this ) ; mItems.put ( item.getKey ( ) , item ) ; }
public synchronized void listEventsAsProto ( java.io.PrintWriter pw ) { for ( android.net.metrics.DefaultNetworkEvent ev : mEvents ) { pw.print ( com.android.server.connectivity.IpConnectivityEventBuilder.toProto ( ev ) ) ; } }
public com.android.services.telephony.common.Call.DisconnectCause getDisconnectCause ( ) { if ( ( ( mState ) == ( com.android.services.telephony.common.Call.State.DISCONNECTED ) ) || ( ( mState ) == ( com.android.services.telephony.common.Call.State.IDLE ) ) ) { return mDisconnectCause ; } return com.android.services.telephony.common.Call.DisconnectCause.NOT_DISCONNECTED ; }
private void sendAddDeviceAdminIntent ( ) { android.content.Intent intent = new android.content.Intent ( android.app.admin.DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN ) ; intent.putExtra ( DevicePolicyManager.EXTRA_DEVICE_ADMIN , com.android.cts.verifier.admin.TestDeviceAdminReceiver.getComponent ( this ) ) ; startActivityForResult ( intent , com.android.cts.verifier.admin.ScreenLockTestActivity.ADD_DEVICE_ADMIN_REQUEST_CODE ) ; }
public com.android.ims.internal.IImsConfig getConfigInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkBinderConnection ( ) ; return getServiceInterface ( mBinder ) . getConfigInterface ( mSlotId , mSupportedFeature ) ; } }
public void TestGetSkeleton ( ) { android.icu.text.SpoofChecker sc = new android.icu.text.SpoofChecker.Builder ( ) . build ( ) ; java.lang.String dest ; dest = sc.getSkeleton ( SpoofChecker.ANY_CASE , lll_Latin_a ) ; assertEquals ( "" , lll_Skel , dest ) ; }
public android.content.Intent registerReceiver ( android.content.BroadcastReceiver receiver , android.content.IntentFilter filter ) { synchronized ( mInterceptors ) { mInterceptors.add ( new com.android.server.BroadcastInterceptingContext.BroadcastInterceptor ( receiver , filter ) ) ; } return null ; }
private java.lang.String getRawScanResults ( java.lang.String range ) { return doStringCommandWithoutLogging ( ( ( "BSS RANGE=" + range ) + " MASK=0x21d97" ) ) ; }
public static void notifyEmergencyContact ( android.content.Context context ) { context.getContentResolver ( ) . call ( android.provider.BlockedNumberContract.AUTHORITY_URI , android.provider.BlockedNumberContract.SystemContract.METHOD_NOTIFY_EMERGENCY_CONTACT , null , null ) ; }
public void testVFE19 ( ) { try { new dot.junit.opcodes.sput_wide.d.T_sput_wide_11 ( ) . run ( ) ; fail ( "expected IllegalAccessError" ) ; } catch ( java.lang.IllegalAccessError t ) { } }
public android.net.wifi.nan.TlvBufferUtils.TlvConstructor allocate ( int capacity ) { mArray = new byte [ capacity ] ; mArrayLength = capacity ; return this ; }
public abstract java.lang.Object getValue ( @ com.android.annotations.NonNull java.lang.String name ) ;
public void doBuildPatchFile ( java.io.File olderFile , java.io.File newerFile , java.util.zip.ZipOutputStream patchOutput ) throws java.io.IOException { }
private static int openglDepthToStackDepth ( int openglDepth ) { return ( com.android.rs.test.BlurStack.MAX_DEPTH ) - ( openglDepth / ( com.android.rs.test.BlurStack.DEPTH_SCALE ) ) ; }
void moveHomeStackTaskToTop ( int homeStackTaskType ) { if ( homeStackTaskType == ( com.android.server.am.ActivityRecord.RECENTS_ACTIVITY_TYPE ) ) { mWindowManager.showRecentApps ( ) ; return ; } moveHomeStack ( true ) ; mHomeStack.moveHomeStackTaskToTop ( homeStackTaskType ) ; }
public native boolean getBoolean ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public java.lang.String getDisplayName ( ) { return getDisplayName ( java.util.Locale.getDefault ( java.util.Locale.Category.DISPLAY ) ) ; }
public java.util.Collection < com.android.tools.perflib.heap.Instance > getInstances ( ) { return mInstances.values ( ) ; }
synchronized void nScriptSetVarD ( long id , int slot , double val ) { validate ( ) ; rsnScriptSetVarD ( mContext , id , slot , val ) ; }
public void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotDeleteFileException { dir.delete ( path ) ; }
public com.google.common.collect.ImmutableSet < java.util.Map.Entry < K , V > > entries ( ) { com.google.common.collect.ImmutableSet < java.util.Map.Entry < K , V > > result = entries ; return result == null ? entries = com.google.common.collect.ImmutableSet.copyOf ( super . entries ( ) ) : result ; }
public java.util.List < android.content.pm.UserInfo > getUsers ( ) { com.android.server.pm.PackageManagerService.enforceSystemOrRoot ( "Only the system can query users" ) ; return com.android.server.pm.PackageManagerService.sUserManager.getUsers ( ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc x ) { print ( com.android.jack.ir.impl.ToStringGenerationVisitor.CHARS_ALLOC ) ; print ( "<" ) ; print ( x.getType ( ) . getName ( ) ) ; print ( ">" ) ; return false ; }
public void testSelfManagedOutgoing ( ) throws java.lang.Exception { android.telecom.PhoneAccountHandle phoneAccountHandle = mPhoneAccountSelfManaged.getAccountHandle ( ) ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveOutgoingCall ( "650-555-1212" , phoneAccountHandle , mConnectionServiceFixtureA ) ; assertNull ( mInCallServiceFixtureX.getCall ( ids.mCallId ) ) ; }
public long getGetTranscriptPollIntervalMillis ( ) { return com.android.dialer.configprovider.ConfigProviderBindings.get ( context ) . getLong ( "voicemail_transcription_get_transcript_poll_interval_millis" , 1000L ) ; }
protected void onSizeChanged ( int w , int h , int oldw , int oldh ) { super . onSizeChanged ( w , h , oldw , oldh ) ; updateThumbPos ( w , h ) ; }
void onDocumentsReady ( java.util.List < com.android.documentsui.model.DocumentInfo > docs ) { getDisplayState ( ) . selectedDocumentsForCopy = docs ; intent.putExtra ( Shared.EXTRA_DIRECTORY_COPY , com.android.documentsui.dirlist.DirectoryFragment.hasDirectory ( docs ) ) ; intent.putExtra ( FileOperationService.EXTRA_OPERATION , mode ) ; startActivityForResult ( intent , com.android.documentsui.dirlist.DirectoryFragment.REQUEST_COPY_DESTINATION ) ; }
public com.android.jack.dx.rop.cst.CstString getDescriptor ( ) { return new com.android.jack.dx.rop.cst.CstString ( com.android.jack.dx.rop.type.Type.ReplaceClosureFromDescriptor ( descriptor.getString ( ) ) ) ; }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "connect(): not allowed for non-active user" ) ; return false ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; return false ; }
public static boolean getSupportsRtl ( com.android.io.IAbstractFile manifestFile ) throws com.android.io.StreamException , javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.xml.AndroidXPathFactory.newXPath ( ) ; java.lang.String value = xPath.evaluate ( ( ( ( ( ( ( ( "/" + ( com.android.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.xml.AndroidManifest.NODE_APPLICATION ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.xml.AndroidManifest.ATTRIBUTE_SUPPORTS_RTL ) ) , new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) ) ; return java.lang.Boolean.parseBoolean ( value ) ; }
synchronized void nAllocationResize2D ( int id , int dimX , int dimY ) { validate ( ) ; rsnAllocationResize2D ( mContext , id , dimX , dimY ) ; }
public void testRegisterIdlingResources ( ) { android.support.test.espresso.IdlingResource resource = new android.support.test.espresso.EspressoTest.DummyIdlingResource ( "testRegisterIdlingResources" ) ; assertTrue ( android.support.test.espresso.Espresso.registerIdlingResources ( resource ) ) ; assertFalse ( android.support.test.espresso.Espresso.registerIdlingResources ( resource ) ) ; }
void stopping ( com.google.common.util.concurrent.Service.State from ) ;
static com.android.bluetooth.hfpclient.HeadsetClientStateMachine make ( com.android.bluetooth.hfpclient.HeadsetClientService context ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "make" ) ; com.android.bluetooth.hfpclient.HeadsetClientStateMachine hfcsm = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine ( context ) ; hfcsm.start ( ) ; return hfcsm ; }
boolean isBooleanField ( java.lang.reflect.Field field ) { return com.google.devtools.common.options.IsolatedOptionsData.isBooleanField ( field , getConverter ( field ) ) ; }
protected void needNetworkFor ( android.net.NetworkRequest networkRequest , int score ) { if ( DBG ) log ( ( "Cellular needs Network for " + networkRequest ) ) ; com.android.internal.telephony.dataconnection.ApnContext apnContext = apnContextForNetworkRequest ( networkRequest ) ; if ( apnContext != null ) apnContext.incRefCount ( ) ; }
public java.util.Collection < ? extends com.android.build.OutputFile > getOutputs ( ) { return com.google.common.collect.ImmutableList.of ( ) ; }
public java.lang.Number parse ( java.lang.String text , java.text.ParsePosition parsePosition ) { return ( ( java.lang.Number ) ( parse ( text , parsePosition , null ) ) ) ; }
public void onChange ( boolean selfChange ) { android.util.Log.i ( "GsmServiceStateTracker" , "Auto time state changed" ) ; revertToNitzTime ( ) ; }
public com.android.sdklib.repository.descriptors.IdDisplay getTag ( ) { return null ; }
public java.io.File getRenderscriptResOutputDir ( ) { return new java.io.File ( globalScope.getGeneratedDir ( ) , ( "res/rs/" + ( getVariantConfiguration ( ) . getDirName ( ) ) ) ) ; }
public static < T > org.hamcrest.org.hamcrest.Matcher < T > any ( java.lang.Class < T > type ) { return org.hamcrest.core.IsAnything.any ( type ) ; }
public static long LongRemainder ( ) { long a ; long b ; long c ; a = Main.$inline$long ( 8L ) ; b = Main.$inline$long ( 3L ) ; c = a % b ; return c ; }
public static java.io.File getObjectFilesOutputDirectory ( org.gradle.nativeplatform.NativeBinarySpec binary , java.io.File buildDir , java.lang.String sourceSetName ) { return new java.io.File ( buildDir , java.lang.String.format ( "%s/objectFiles/%s/%s" , AndroidProject.FD_INTERMEDIATES , binary.getName ( ) , sourceSetName ) ) ; }
private void assertPinnedToWifiWithWifiDefault ( ) { assertEquals ( mWiFiNetworkAgent.getNetwork ( ) , mCm.getBoundNetworkForProcess ( ) ) ; assertEquals ( mWiFiNetworkAgent.getNetwork ( ) , mCm.getActiveNetwork ( ) ) ; }
private static java.lang.String rfc1123Date ( long millis ) { java.text.DateFormat df = new java.text.SimpleDateFormat ( "EEE, dd MMM yyyy HH:mm:ss zzz" ) ; return df.format ( new java.util.Date ( millis ) ) ; }
public void testUserE ( ) { int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_EXTERNAL ; int iloc = getExpectedInstallLocation ( userSetting ) ; setUserX ( true , userSetting , iloc ) ; }
private static java.lang.String getFormattedNumber ( java.lang.String number , android.content.Context context ) { java.lang.String formattedNumber = android.telephony.PhoneNumberUtils.formatNumber ( number , com.android.dialer.location.GeoUtil.getCurrentCountryIso ( context ) ) ; return com.android.contacts.common.compat.PhoneNumberUtilsCompat.createTtsSpannable ( formattedNumber ) . toString ( ) ; }
public void inspectScreenshot ( ) { com.android.ddmlib.IDevice device = com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel ( ) . getSelectedDevice ( ) ; if ( device != null ) { loadPixelPerfectData ( device ) ; } }
public void run ( ) { mClipboardSupport.deleteSelection ( getDeleteLabel ( ) , mSelectionManager.getSnapshot ( ) ) ; }
private com.android.jack.library.InputJackLibrary getIncrementalInternalLibrary ( ) { try { return com.android.jack.library.JackLibraryFactory.getInputLibrary ( com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_DIR ) ) ; } catch ( com.android.jack.library.NotJackLibraryException e ) { } catch ( com.android.jack.library.LibraryVersionException e ) { } catch ( com.android.jack.library.LibraryFormatException e ) { } return null ; }
com.android.builder.model.ArtifactInfo getTestArtifactInfo ( ) ;
public void testIsAssignableFrom_superclass ( ) { android.view.View v = new android.widget.RadioButton ( context ) ; assertTrue ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.widget.Button.class ) . matches ( v ) ) ; }
public static < T > org.hamcrest.org.hamcrest.Matcher < T > anyOf ( java.lang.Iterable < org.hamcrest.org.hamcrest.Matcher < ? extends T > > matchers ) { return org.hamcrest.core.AnyOf.anyOf ( matchers ) ; }
public static < K , V > org.hamcrest.org.hamcrest.Matcher < java.util.Map < K , V > > hasKey ( K key ) { return org.hamcrest.collection.IsMapContaining.hasKey ( key ) ; }
public java.util.List < com.android.sched.util.codec.Parser.ValueDescription > getValueDescriptions ( ) { return java.util.Collections.< com.android.sched.util.codec.Parser.ValueDescription > emptyList ( ) ; }
public com.android.volley.NetworkResponse answer ( org.mockito.invocation.InvocationOnMock invocationOnMock ) throws java.lang.Throwable { java.lang.Thread.sleep ( 200 ) ; return mock ( com.android.volley.NetworkResponse.class ) ; }
public static native long DH_generate_key ( int primeBits , int generator ) ;
protected void visitAnnotation ( int typeIndex , int size ) { }
static long $opt$FloatToLong ( float a ) { return ( ( long ) ( a ) ) ; }
public void handleEvent ( org.eclipse.swt.widgets.Event event ) { if ( ! ( mInternalApplicationNameUpdate ) ) { mApplicationNameModifiedByUser = true ; } }
public abstract java.nio.file.Path pathFromRepository ( java.nio.file.Path relPath ) ;
public static org.jetbrains.plugins.github.api.GithubUser getCurrentUser ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.api.GithubAuthData auth ) throws java.io.IOException { com.google.gson.JsonElement result = org.jetbrains.plugins.github.api.GithubApiUtil.getRequest ( auth , "/user" ) ; return org.jetbrains.plugins.github.api.GithubApiUtil.createDataFromRaw ( org.jetbrains.plugins.github.api.GithubApiUtil.fromJson ( result , org.jetbrains.plugins.github.api.GithubUserRaw.class ) , org.jetbrains.plugins.github.api.GithubUser.class ) ; }
private void introspectClass ( java.lang.Class < ? > clazz ) { introspect ( clazz.getGenericSuperclass ( ) ) ; for ( java.lang.reflect.Type interfaceType : clazz.getGenericInterfaces ( ) ) { introspect ( interfaceType ) ; } }
public void run ( ) { java.lang.System.out.println ( "STARTING TASK" ) ; task.run ( ) ; java.lang.System.out.println ( "ENDING TASK" ) ; }
public void test_minusSeconds_noChange_oneDay_equal ( ) { java.time.LocalTime t = TEST_12_30_40_987654321.minusSeconds ( ( ( 24 * 60 ) * 60 ) ) ; org.testng.Assert.assertEquals ( t , TEST_12_30_40_987654321 ) ; }
public boolean canUseExtendedOpcodes ( ) { return ( targetApiLevel ) >= ( DexFormat.API_CURRENT ) ; }
public boolean onCreateOptionsMenu ( com.android.stk.Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu.add ( android.view.Menu.NONE , StkApp.MENU_ID_END_SESSION , 1 , R.string.menu_end_session ) ; menu.add ( 0 , StkApp.MENU_ID_HELP , 2 , R.string.help ) ; return true ; }
protected abstract void sendNewSubmitPdu ( java.lang.String destinationAddress , java.lang.String scAddress , java.lang.String message , com.android.internal.telephony.SmsHeader smsHeader , int encoding , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , boolean lastPart ) ;
public void periodicAdvertisingEnable ( int advertiserId , boolean enable ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; }
public static native void setAppPolicy ( ) ;
protected void accept ( android.net.LocalSocketImpl s ) throws java.io.IOException { if ( ( fd ) == null ) { throw new java.io.IOException ( "socket not created" ) ; } s.fd = accept ( fd , s ) ; }
public java.lang.String getUsage ( ) { return ( "a path to an input directory or zip archive (" + ( getUsageDetails ( ) ) ) + ")" ; }
public void testGetOldValue ( ) { assertEquals ( "Merge" , com.android.tools.lint.checks.WrongCaseDetector.getOldValue ( "Invalid tag <Merge>; should be <merge>" ) ) ; }
public com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotCreateFileException { com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file = new com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile ( dir.createOutputVFile ( path ) , path ) ; files.add ( file ) ; return file ; }
long getLastModified ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) { return vfs.getLastModified ( file ) ; }
public void loggedRun ( ) { createConnectionFailed ( connectionMgrPhoneAccount , id , request , isIncoming ) ; }
public static com.android.ahat.heapdump.AhatSnapshot parseHeapDump ( java.io.File hprof , com.android.ahat.proguard.ProguardMap map ) throws com.android.ahat.heapdump.HprofFormatException , java.io.IOException { return com.android.ahat.heapdump.Parser.parseHeapDump ( new com.android.ahat.heapdump.Parser.HprofBuffer ( hprof ) , map ) ; }
public void initBuildTypeNdk ( @ org.gradle.model.Path ( value = "android.buildTypes" ) org.gradle.model.ModelMap < com.android.build.gradle.managed.BuildType > buildTypes ) { buildTypes.beforeEach ( new org.gradle.api.Action < com.android.build.gradle.managed.BuildType > ( ) { @ java.lang.Override public void execute ( com.android.build.gradle.managed.BuildType buildType ) { com.android.build.gradle.internal.NdkOptionsHelper.init ( buildType.getNdk ( ) ) ; } } ) ; }
public < T > T [ ] toArray ( T [ ] array ) { return com.google.common.collect.Lists.newArrayList ( iterator ( ) ) . toArray ( array ) ; }
public com.android.ide.eclipse.adt.internal.resources.configurations.TouchScreenQualifier getTouchTypeQualifier ( ) { return ( ( com.android.ide.eclipse.adt.internal.resources.configurations.TouchScreenQualifier ) ( mQualifiers [ com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.INDEX_TOUCH_TYPE ] ) ) ; }
public static org.hamcrest.Matcher < java.lang.String > containsString ( java.lang.String substring ) { return org.hamcrest.CoreMatchers.containsString ( substring ) ; }
public void removeForward ( int localPort , java.lang.String remoteSocketName , com.android.ddmlib.IDevice.DeviceUnixSocketNamespace namespace ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.TimeoutException , java.io.IOException ;
private void updateCurrentRemoteMessage ( java.lang.String newMessage ) { com.android.incallui.rtt.impl.RttChatMessage.updateRemoteRttChatMessage ( rttMessages , newMessage ) ; lastIndexOfLocalMessage = com.android.incallui.rtt.impl.RttChatMessage.getLastIndexLocalMessage ( rttMessages ) ; notifyDataSetChanged ( ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setTarget ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 8 ; target_ = value ; onChanged ( ) ; return this ; }
public void test005 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST005 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void testE2 ( ) { dot.junit.opcodes.aput_short.d.T_aput_short_1 t = new dot.junit.opcodes.aput_short.d.T_aput_short_1 ( ) ; try { t.run ( null , 2 , ( ( short ) ( 10000 ) ) ) ; fail ( "expected NullPointerException" ) ; } catch ( java.lang.NullPointerException aie ) { } }
public java.lang.String getSystemDialerPackage ( ) { try { com.android.server.telecom.Log.startSession ( "TSI.gSDP" ) ; return mContext.getResources ( ) . getString ( R.string.ui_default_package ) ; } finally { com.android.server.telecom.Log.endSession ( ) ; } }
private static int bits32 ( int x ) { return java.lang.Integer.bitCount ( x ) ; }
public boolean canUseDefaultInterfaceMethods ( ) { return ( minSdkVersion ) >= ( com.android.dex.DexFormat.API_DEFAULT_INTERFACE_METHODS ) ; }
public void setDataAllowed ( boolean enable , android.os.Message response ) { mIsCleanupRequired = ! enable ; mPhone.mCi.setDataAllowed ( enable , response ) ; mInternalDataEnabled = enable ; }
protected com.android.sdklib.internal.repository.ArchiveInstaller createArchiveInstaler ( ) { return new com.android.sdklib.internal.repository.ArchiveInstaller ( ) { @ java.lang.Override public boolean install ( com.android.sdklib.internal.repository.ArchiveReplacement archiveInfo , java.lang.String osSdkRoot , boolean forceHttp , com.android.sdklib.SdkManager sdkManager , com.android.sdklib.internal.repository.DownloadCache cache , com.android.sdklib.internal.repository.ITaskMonitor monitor ) { mInstalled.add ( archiveInfo ) ; return true ; } } ; }
public android.net.wifi.nan.LvBufferUtils.LvConstructor putInt ( int data ) { mTlvImpl.putInt ( 0 , data ) ; return this ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( ( runtimeVisibleAnnotationsAttribute.u2annotationsCount ) > 0 ) { runtimeVisibleAnnotationsAttribute.accept ( clazz , attributeVisitor ) ; } }
private static boolean isVersionZeroRegister ( com.android.jack.ir.ast.JSsaVariableRef ssaReg ) { return ( ssaReg.getVersion ( ) ) == 0 ; }
public void onVideoScreenStart ( ) { inCallButtonUiDelegate.refreshMuteState ( ) ; videoCallScreenDelegate.onVideoCallScreenUiReady ( ) ; getView ( ) . postDelayed ( cameraPermissionDialogRunnable , com.android.incallui.video.impl.VideoCallFragment.CAMERA_PERMISSION_DIALOG_DELAY_IN_MILLIS ) ; }
public void setSelection ( com.android.ddmlib.IDevice device , com.android.hierarchyviewerlib.device.Window window ) { synchronized ( mDeviceMap ) { mSelectedDevice = device ; mSelectedWindow = window ; } notifySelectionChanged ( device , window ) ; }
protected abstract java.util.Collection < ? extends com.android.jack.server.HasVersion > getVersionnedElements ( ) ;
public void testVFE4 ( ) { try { new dot.junit.opcodes.sget_boolean.d.T_sget_boolean_6 ( ) . run ( ) ; } catch ( java.lang.IllegalAccessError t ) { } }
public void run ( ) { mContentWrapper.setLayerType ( com.android.launcher3.LAYER_TYPE_NONE , null ) ; mContentWrapper.setLayerType ( com.android.launcher3.LAYER_TYPE_NONE , null ) ; }
private final native void init ( ) ;
public void run ( ) { toInterrupt.interrupt ( ) ; }
private void verifyTimeServiceTimeZoneWasNotSet ( ) { org.mockito.Mockito.verify ( mTimeServiceHelper , org.mockito.Mockito.times ( 0 ) ) . setDeviceTimeZone ( org.mockito.ArgumentMatchers.any ( java.lang.String.class ) ) ; }
static void logWriteError ( java.lang.String host , java.io.File file , java.lang.Throwable t ) { java.lang.System.logW ( ( ( ( ( "Error writing session data for " + host ) + " to " ) + file ) + "." ) , t ) ; }
public native void setLong ( java.lang.Object object , long value ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.phonelookup.PhoneLookupInfo > lookup ( @ android.support.annotation.NonNull android.telecom.Call call ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public android.net.NetworkCapabilities addCapability ( @ android.net.NetworkCapabilities.NetCapability int capability ) { if ( ( capability < ( android.net.NetworkCapabilities.MIN_NET_CAPABILITY ) ) || ( capability > ( android.net.NetworkCapabilities.MAX_NET_CAPABILITY ) ) ) { throw new java.lang.IllegalArgumentException ( "NetworkCapability out of range" ) ; } mNetworkCapabilities |= 1 << capability ; return this ; }
public final E set ( int index , E element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public static com.android.internal.telephony.gsm.GsmMmiCode newFromUssdUserInput ( java.lang.String ussdMessge , com.android.internal.telephony.gsm.GsmCdmaPhone phone , com.android.internal.telephony.uicc.UiccCardApplication app ) { com.android.internal.telephony.gsm.GsmMmiCode ret = new com.android.internal.telephony.gsm.GsmMmiCode ( phone , app ) ; ret.mMessage = ussdMessge ; ret.mState = State.PENDING ; ret.mIsPendingUSSD = true ; return ret ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; cr = mContext.getContentResolver ( ) ; assertNotNull ( cr ) ; }
public void testPrimitives ( ) { android.renderscript.cts.ScriptC_primitives t = new android.renderscript.cts.ScriptC_primitives ( mRS ) ; assertTrue ( initializeGlobals ( t ) ) ; t.invoke_test ( ) ; waitForMessage ( ) ; checkForErrors ( ) ; }
public void removeTransportModeTransforms ( java.net.DatagramSocket socket , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromDatagramSocket ( socket ) ) { removeTransportModeTransforms ( pfd , transform ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.testFieldReflection ( ) ; Main.testMethodReflection ( ) ; Main.testConstructorReflection ( ) ; Main.testPackagePrivate ( ) ; }
void deviceConnected ( java.lang.String bdaddr , boolean absoluteVolume ) { android.util.Log.i ( com.android.bluetooth.avrcp.AvrcpTargetService.TAG , ( ( ( "deviceConnected: bdaddr=" + bdaddr ) + " absoluteVolume=" ) + absoluteVolume ) ) ; mAudioManager.avrcpSupportsAbsoluteVolume ( bdaddr , absoluteVolume ) ; com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent ( BluetoothMetricsProto.ProfileId.AVRCP ) ; }
public static native void SSL_use_OpenSSL_PrivateKey ( long ssl , long pkey ) ;
public static int mulPow2Plus1 ( int arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg * 9 ; }
public boolean isInterface ( ) { return ( ( access ) & ( org.jetbrains.asm4.Opcodes.ACC_INTERFACE ) ) != 0 ; }
public < T > T [ ] toArray ( T [ ] other ) { return delegateList.toArray ( other ) ; }
public com.android.ims.internal.IImsEcbm getEcbmInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getEcbmInterface ( mSlotId , mSupportedFeature ) ; } }
private static void listIssue ( java.io.PrintStream out , com.android.tools.lint.detector.api.Issue issue ) { out.print ( com.android.tools.lint.Main.wrapArg ( ( ( ( "\"" + ( issue.getId ( ) ) ) + "\": " ) + ( issue.getDescription ( com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ) ) ) ; }
java.lang.String getKeyAttributeName ( ) ;
native void rsnScriptSetVarVE ( long con , long id , int slot , byte [ ] val , long e , int [ ] dims ) ;
public void doWork ( ) throws android.os.RemoteException { mService.getAccountsByFeatures ( mResponse , type , features ) ; }
public static com.android.dialer.common.database.Selection fromString ( @ android.support.annotation.Nullable java.lang.String selection , @ android.support.annotation.Nullable java.lang.String ... args ) { return new com.android.dialer.common.database.Selection.Builder ( selection , args ) . build ( ) ; }
private void startInCallUI ( ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_MAIN ) ; intent.setFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) ) ; intent.setClass ( this , com.android.server.telecom.testapps.TestInCallUI.class ) ; startActivity ( intent ) ; }
public static int getMode ( ) { return android.os.SystemProperties.getInt ( "ro.factorytest" , android.os.FactoryTest.FACTORY_TEST_OFF ) ; }
public void TestDataDrivenJDK ( ) { com.ibm.icu.dev.test.format.DataDrivenNumberFormatTestUtility.runSuite ( "numberformattestspecification.txt" , JDK ) ; }
public void sendStartListenerMessage ( int masId ) { if ( ( mSessionStatusHandler ) != null ) { android.os.Message msg = mSessionStatusHandler.obtainMessage ( com.android.bluetooth.map.BluetoothMapService.START_LISTENER , masId , 0 ) ; mSessionStatusHandler.sendMessageDelayed ( msg , 20 ) ; } }
public boolean isSkippable ( @ javax.annotation.Nonnull com.android.sched.scheduler.ComponentFilterSet current ) { return ( skipAdapter ) && ( ! ( current.containsOne ( adapterFilters ) ) ) ; }
public int getItemCount ( ) { return ( callDetailsEntries.size ( ) ) + 2 ; }
java.util.Collection < com.intellij.ide.externalComponents.UpdatableExternalComponent > getAvailableVersions ( @ org.jetbrains.annotations.Nullable com.intellij.openapi.progress.ProgressIndicator indicator ) ;
public boolean isMobileNumberPortableRegion ( java.lang.String regionCode ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = getMetadataForRegion ( regionCode ) ; if ( metadata == null ) { com.google.i18n.phonenumbers.PhoneNumberUtil.logger.log ( java.util.logging.Level.WARNING , ( "Invalid or unknown region code provided: " + regionCode ) ) ; return false ; } return metadata.isMobileNumberPortableRegion ( ) ; }
protected boolean canInstrument ( org.jetbrains.jps.incremental.CompiledClass compiledClass , int classFileVersion ) { return classFileVersion >= ( org.jetbrains.asm4.Opcodes.V1_5 ) ; }
public void deleteSmsOnRuim ( int index , android.os.Message response ) { android.util.Log.d ( com.android.internal.telephony.test.SimulatedCommands.LOG_TAG , ( "Delete RUIM message at index " + index ) ) ; unimplemented ( response ) ; }
public void onConfigurationChanged ( ) { mSpTexts.update ( ) ; }
public void createDataPathInterface ( java.lang.String interfaceName ) { android.os.Message msg = mSm.obtainMessage ( com.android.server.wifi.nan.WifiNanStateManager.MESSAGE_TYPE_COMMAND ) ; msg.arg1 = com.android.server.wifi.nan.WifiNanStateManager.COMMAND_TYPE_CREATE_DATA_PATH_INTERFACE ; msg.obj = interfaceName ; mSm.sendMessage ( msg ) ; }
public boolean isEmpty ( ) { return entrySet ( ) . isEmpty ( ) ; }
public void setOnBufferAvailableListener ( android.renderscript.Allocation.OnBufferAvailableListener callback ) { synchronized ( android.renderscript.Allocation.mAllocationMap ) { android.renderscript.Allocation.mAllocationMap.put ( new java.lang.Integer ( getID ( mRS ) ) , this ) ; mBufferNotifier = callback ; } }
public int getDSTSavings ( ) { return mUseDst ? mDstSavings : 0 ; }
public static int intReverseConditionNaN ( int i ) { return 42 != ( java.lang.Math.sqrt ( i ) ) ? 13 : 54 ; }
native void rsnAllocationData2D ( long con , long id , int xoff , int yoff , int mip , int face , int w , int h , long [ ] d , int sizeBytes ) ;
public void check ( android.view.View view , android.support.test.espresso.NoMatchingViewException noViewFoundException ) { assertFalse ( true ) ; }
public com.android.tools.lint.client.api.Configuration getConfiguration ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Project project ) { return getConfigurationFor ( project ) ; }
public void currentSignalStrength ( int var1 , com.android.internal.telephony.V1_0.SignalStrength var2 ) { }
public long getSize ( com.android.ahat.Site element , com.android.tools.perflib.heap.Heap heap ) { return element.getSize ( heap.getName ( ) ) ; }
public java.util.Collection < com.android.jack.ir.ast.JAnnotationType > getAnnotationTypes ( ) { return com.android.jack.Jack.getUnmodifiableCollections ( ) . getUnmodifiableCollection ( com.android.jack.util.AnnotationUtils.getAnnotationTypes ( annotations ) ) ; }
public void controlResized ( org.eclipse.swt.events.ControlEvent e ) { org.eclipse.swt.graphics.Rectangle rect = shell.getBounds ( ) ; org.eclipse.jface.preference.PreferenceStore prefs = com.android.ddms.PrefsDialog.getStore ( ) ; prefs.setValue ( PrefsDialog.EXPLORER_SHELL_WIDTH , rect.width ) ; prefs.setValue ( PrefsDialog.EXPLORER_SHELL_HEIGHT , rect.height ) ; }
public void setUiTtyMode ( int mode , android.os.Message onCompleteMessage ) { try { mCompatFeature.setUiTTYMode ( mode , onCompleteMessage ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e.getMessage ( ) ) ; } }
public void test_SSL_CTX_free ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCryptoTest.NULL ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ) ; }
public int getSimStateForSlotIdx ( int slotIdx ) { throw new java.lang.RuntimeException ( "not implemented" ) ; }
protected void onPreExecute ( ) { mLogSubsession = com.android.server.telecom.Log.createSubsession ( ) ; }
public void testVFE13 ( ) { try { java.lang.Class.forName ( "dot.junit.opcodes.invoke_virtual_range.d.T_invoke_virtual_range_18" ) ; fail ( "expected a verification exception" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
public void doesNotContainClass ( java.lang.String className ) throws com.android.ide.common.process.ProcessException , java.io.IOException { java.io.File apk = getSubject ( ) ; if ( com.android.build.gradle.integration.common.utils.ApkHelper.checkForClass ( apk , className ) ) { failWithRawMessage ( "'%s' unexpectedly contain '%s'" , apk.getName ( ) , className ) ; } }
private void handleVoicePrivacyClickRequest ( boolean value ) { mPhone.enableEnhancedVoicePrivacy ( value , android.os.Message.obtain ( mSetOptionComplete , com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED ) ) ; }
public static void showErrors ( org.eclipse.swt.widgets.Shell shell , final org.eclipse.core.resources.IFile file ) { com.android.ide.eclipse.adt.internal.lint.LintListDialog dialog = new com.android.ide.eclipse.adt.internal.lint.LintListDialog ( shell , file ) ; dialog.open ( ) ; }
public void testOnSetUpAdapterFailed ( ) throws java.lang.Exception { java.io.File testAdapter = new java.io.File ( mTestDir , ( ( VTS_NATIVE_TEST_DIR ) + ( TEST_HAL_ADAPTER_BINARY ) ) ) ; testAdapter.createNewFile ( ) ; java.lang.String output = "android.hardware.foo@1.1::IFoo/default" ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mCmdUtil.mCmdSuccess = false ; try { mPreparer.setUp ( mDevice , mBuildInfo ) ; } catch ( com.android.tradefed.targetprep.TargetSetupError e ) { org.junit.Assert.assertEquals ( "HAL adapter setup failed." , e.getMessage ( ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public static java.util.Locale toLocale ( com.ibm.icu.util.ULocale uloc ) { return com.ibm.icu.util.ULocale.JDKLocaleHelper.isJava7orNewer ? com.ibm.icu.util.ULocale.JDKLocaleHelper.toLocale7 ( uloc ) : com.ibm.icu.util.ULocale.JDKLocaleHelper.toLocale6 ( uloc ) ; }
public void execute ( java.io.OutputStream stdout , java.lang.String ... tasks ) { execute ( java.util.Collections.< java.lang.String > emptyList ( ) , stdout , tasks ) ; }
void onAmbiguousContactClicked ( java.util.List < com.android.dialer.speeddial.database.SpeedDialEntry.Channel > channels ) ;
public java.lang.invoke.MethodHandle findStatic ( java.lang.Class < ? > refc , java.lang.String name , java.lang.invoke.MethodType type ) throws java.lang.IllegalAccessException , java.lang.NoSuchMethodException { throw new java.lang.UnsupportedOperationException ( "MethodHandles.Lookup.findStatic is not implemented" ) ; }
public void onConnectionServiceChanged ( com.android.server.telecom.Call call , com.android.server.telecom.ConnectionServiceWrapper oldService , com.android.server.telecom.ConnectionServiceWrapper newService ) { updateCall ( call ) ; }
public boolean test ( int flag ) { return flag != ( com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_OR_READS_B ) ; }
private static void writeValue ( java.io.OutputStreamWriter writer , java.lang.String value ) throws java.io.IOException { writer.append ( value ) . append ( ',' ) ; }
public void onHandoverToWifiFailed ( com.android.incallui.call.DialerCall call ) { if ( ( inCallActivity ) != null ) { inCallActivity.showDialogOrToastForWifiHandoverFailure ( call ) ; } }
public void testNotifyPrimaryUse ( ) { notifyDexLoad ( mFooUser0 , mFooUser0.getBaseAndSplitDexPaths ( ) , mUser0 ) ; org.junit.Assert.assertNull ( getPackageUseInfo ( mFooUser0 ) ) ; }
public java.lang.String parseCurrency ( android.icu.dev.test.format.NumberFormatTestData tuple ) { return null ; }
public void run ( ) { notifyFindDialogDismissed ( ) ; }
public void testSubjectAltNameWithWildcard ( ) { assertTrue ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*.g.com" ) ) ) ; }
public void setFullscreenMode ( boolean fullScreen ) { mFullscreenMode = fullScreen ; }
public void updateCallType ( com.android.ims.ImsCallProfile profile ) { mCallType = profile.mCallType ; }
public java.lang.String toString ( ) { return ( "Or(" + ( com.google.common.base.Predicates.COMMA_JOINER.join ( components ) ) ) + ")" ; }
public static void computeHalfRsqrt ( android.renderscript.cts.TestHalfRsqrt.ArgumentsFloatFloat args ) { args.ulf = 128000 ; args.ulfRelaxed = 128000 ; args.out = ( ( float ) ( java.lang.StrictMath.pow ( args.inV , ( - 0.5 ) ) ) ) ; }
public void handleMessage ( android.os.Message msg ) { if ( android.telephony.SubscriptionManager.DBG ) { log ( "handleMessage: invoke the overriden onSubscriptionsChanged()" ) ; } this . onSubscriptionsChanged ( ) ; }
public com.android.tv.data.Channel.Builder setDisplayNumber ( java.lang.String displayNumber ) { mChannel.mDisplayNumber = displayNumber ; return this ; }
protected void createPages ( ) { com.android.sdkuilib.internal.repository.PackagesPage pkgPage = new com.android.sdkuilib.internal.repository.PackagesPage ( getPagesRootComposite ( ) , getUpdaterData ( ) ) ; addPage ( pkgPage , "Packages List" ) ; addExtraPages ( ) ; }
public android.accounts.AuthenticatorDescription [ ] getAuthenticatorTypes ( ) { try { return mService.getAuthenticatorTypes ( ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public java.util.Iterator charsets ( ) { java.util.Vector v = new java.util.Vector ( ) ; v.add ( new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockCharset00" , new java.lang.String [ ] { "mockCharset01" , "mockCharset02" } ) ) ; return v.iterator ( ) ; }
public com.android.sched.util.config.AsapConfigBuilder setStandardInput ( @ javax.annotation.Nonnull java.io.InputStream in ) { context.setStandardInput ( in ) ; return this ; }
private boolean shouldTurnOffDormancyUpdate ( ) { return ( mIsPowerSaveOn ) || ( ( ( ! ( mIsCharging ) ) && ( ! ( mIsTetheringOn ) ) ) && ( ! ( mIsScreenOn ) ) ) ; }
void processFile ( java.io.File sourceFile ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException ;
public void queryCapabilityConfiguration ( int capability , int radioTech , android.telephony.ims.internal.aidl.IImsCapabilityCallback c ) { queryCapabilityConfigurationInternal ( capability , radioTech , c ) ; }
public static native float hypot ( float x , float y ) ;
protected com.android.build.gradle.internal.variant.LibVariantOutputData doCreateOutput ( ) { return new com.android.build.gradle.internal.variant.LibVariantOutputData ( ) ; }
public com.android.jack.test.toolchain.JackApiV01Toolchain build ( ) { return new com.android.jack.test.toolchain.JackApiV01Toolchain ( com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "jack" ) ) ; }
private boolean isSubInfoReady ( ) { return ( com.android.internal.telephony.SubscriptionController.sSlotIdxToSubId.size ( ) ) > 0 ; }
boolean isPrime ( int certainty ) { return java.math.NativeBN.BN_is_prime_ex ( bignum , certainty , 0 ) ; }
private void throwIfNestedTransaction ( ) { if ( ( ( mTransactionStack ) == null ) && ( ( mTransactionStack.mParent ) != null ) ) { throw new java.lang.IllegalStateException ( ( "Cannot perform this operation because " + "a nested transaction is in progress." ) ) ; } }
public void cleanup ( ) { validateMockitoUsage ( ) ; }
public java.util.List < java.lang.String > applicableSuperClasses ( ) { return null ; }
public void testGetActivityThemes5 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " package='com.android.unittest'" + " android:theme=\'@style/NoBackground\'>\n" ) + " <application\n" ) + " android:label=\'@string/app_name\'\n" ) + " android:name=\'.app.TestApp\' android:icon=\'@drawable/app_icon\'>\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.prefs.PrefsActivity\'\n" ) + " android:label=\'@string/prefs_title\' />\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.app.IntroActivity\'\n" ) + " android:label=\'@string/intro_title\'\n" ) + " android:theme=\'@android:style/Theme.Dialog\' />\n" ) + " </application>\n" ) + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) + "" ) ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenLayoutSize.XLARGE ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenLayoutSize.NORMAL ) ) ; assertEquals ( "NoBackground" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenLayoutSize.NORMAL ) ) ) ; java.util.Map < java.lang.String , java.lang.String > map = info.getActivityThemes ( ) ; assertEquals ( map.toString ( ) , 1 , map.size ( ) ) ; assertNull ( map.get ( "com.android.unittest.prefs.PrefsActivity" ) ) ; assertEquals ( "@android:style/Theme.Dialog" , map.get ( "com.android.unittest.app.IntroActivity" ) ) ; }
public static boolean allowGetCallerClass ( ) { return sun.misc.VM.allowGetCallerClass ; }
public java.lang.String toString ( ) { return ( ( ( super . toString ( ) ) + "(wraps " ) + ( mDelegate ) ) + ")" ; }
public static native byte [ ] SSL_get_tls_channel_id ( int ssl ) throws javax.net.ssl.SSLException ;
void onAdvertiseDataUpdated ( int status , int advertiserId ) { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "onAdvertiseDataUpdated() - advertiserId=" + advertiserId ) + ", status=" ) + status ) ) ; }
public int size ( ) { int result = ( list.size ( ) ) / ( size ) ; if ( ( result * ( size ) ) != ( list.size ( ) ) ) { result ++ ; } return result ; }
public com.android.ims.internal.IImsMMTelFeature createMMTelFeature ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) { return createMMTelFeatureInternal ( slotId , c ) ; }
public void testStringOverlay ( ) throws java.lang.Throwable { final int resId = com.android.internal.R.string.phoneTypeCar ; setLocale ( "sv_SE" ) ; assertResource ( resId , "Bil" , "Bil" ) ; }
public void broadcastP2pInvitationResult ( java.lang.String iface , com.android.server.wifi.p2p.WifiP2pServiceImpl.P2pStatus result ) { sendMessage ( iface , com.android.server.wifi.WifiMonitor.P2P_INVITATION_RESULT_EVENT , result ) ; }
private static int setEcho ( boolean on , int previousState ) { try { return java.io.Console.setEchoImpl ( on , previousState ) ; } catch ( java.io.IOException ex ) { throw new java.io.IOError ( ex ) ; } }
synchronized void nScriptGroupSetInput ( int group , int kernel , int alloc ) { validate ( ) ; rsnScriptGroupSetInput ( mContext , group , kernel , alloc ) ; }
protected android.widget.RemoteViews createPresentation ( java.lang.String message ) { final android.widget.RemoteViews presentation = new android.widget.RemoteViews ( android.autofillservice.cts.Helper.getContext ( ) . getPackageName ( ) , R.layout.list_item ) ; presentation.setTextViewText ( R.id.text1 , message ) ; return presentation ; }
public boolean isOpened ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . isOpened ( mSlotId , mSupportedFeature ) ; } }
public org.junit.runner.Description childlessCopy ( ) { return new org.junit.runner.Description ( fDisplayName , fAnnotations ) ; }
public void periodicAdvertisingEnable ( boolean enable ) { try { gatt.periodicAdvertisingEnable ( this . advertiserId , enable ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.le.AdvertisingSet.TAG , "remote exception - " , e ) ; } }
public java.lang.String getCookie ( java.lang.String url , boolean privateBrowsing ) { throw new android.webkit.MustOverrideException ( ) ; }
public static void init ( final android.content.Context context ) { com.android.mms.data.Contact.sContactCache = new com.android.mms.data.Contact.ContactsCache ( context ) ; com.android.mms.data.RecipientIdCache.init ( context ) ; }
public void testInheritLocal ( ) throws java.lang.Exception { assertEquals ( ( "CustomViewTest.java: Warning: Custom view test/pkg/CustomViewTest is missing " + ( "constructor used by tools: (Context) or (Context,AttributeSet) or " + "(Context,AttributeSet,int)" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "apicheck/Intermediate.java.txt=>src/test/pkg/Intermediate.java.txt" , "src/test/pkg/CustomViewTest.java.txt=>src/test/pkg/CustomViewTest.java" , "bytecode/CustomViewTest.class.data=>bin/classes/test/pkg/CustomViewTest.class" , "apicheck/Intermediate.class.data=>bin/classes/test/pkg/Intermediate.class" , ( "apicheck/Intermediate$IntermediateCustomV.class.data=>" + "bin/classes/test/pkg/Intermediate$IntermediateCustomV.class" ) ) ) ; }
private void handleSystemReady ( ) { synchronized ( mLock ) { resetIfReadyAndConnectedLocked ( ) ; } com.android.server.MountServiceIdler.scheduleIdlePass ( mContext ) ; }
static byte $opt$ShortToByte ( short a ) { return ( ( byte ) ( a ) ) ; }
void sendScanResultsAvailableBroadcast ( boolean scanSucceeded ) { android.content.Intent intent = new android.content.Intent ( android.net.wifi.WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; intent.putExtra ( WifiManager.EXTRA_RESULTS_UPDATED , scanSucceeded ) ; mContext.sendBroadcastAsUser ( intent , UserHandle.ALL ) ; }
public void stopScan ( ) { mBLEScanner.stopScan ( mScanCallback ) ; }
public void clearPackages ( ) { mPackages = null ; }
public void testThatMethodWithAnnotationIsReportedAsBeingAnnotated ( ) throws java.lang.Exception { assertTrue ( hasExampleAnnotation ( android.test.suitebuilder.annotation.HasAnnotationTest.ClassWithAnnotation.class , "testWithAnnotation" ) ) ; assertTrue ( hasExampleAnnotation ( android.test.suitebuilder.annotation.HasAnnotationTest.ClassWithoutAnnotation.class , "testWithAnnotation" ) ) ; }
public void recordLoadSuccess ( long loadTime ) ;
public static java.util.Map < java.lang.String , java.lang.Integer > retrieveJavaTimeFieldValueNames ( java.lang.String id , int field , int style , java.util.Locale locale ) { return null ; }
protected void engineUpdate ( byte [ ] input , int offset , int len ) { final org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = ctx ; org.conscrypt.NativeCrypto.EVP_DigestUpdate ( ctxLocal , input , offset , len ) ; }
public void onCallStateChanged ( android.content.Context context , int newState ) { if ( newState == ( android.telecom.Call.STATE_DISCONNECTING ) ) { duo.unregisterListener ( this ) ; } callState = newState ; }
public void setNoCrunch ( boolean nocrunch ) { mUseCrunchCache = nocrunch ; }
public java.util.Collection < java.lang.String > getApplicableElements ( ) { return java.util.Arrays.asList ( com.android.SdkConstants.TAG_STYLE , com.android.SdkConstants.TAG_RESOURCES , com.android.SdkConstants.TAG_ARRAY , com.android.SdkConstants.TAG_STRING_ARRAY , com.android.SdkConstants.TAG_PLURALS ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( "ReplaceCommentText{" + "oldText='" ) + ( oldText ) ) + '\'' ) + ", newText='" ) + ( newText ) ) + '\'' ) + '}' ; }
private void removeImsServiceFeatureListener ( ) { synchronized ( mLock ) { mImsStatusCallbacks.clear ( ) ; } }
void srcToExe ( @ javax.annotation.CheckForNull java.lang.String classpath , @ javax.annotation.Nonnull java.io.File out , boolean zipFile , @ javax.annotation.Nonnull java.io.File ... sources ) throws java.lang.Exception ;
public void onError ( final int errorCode , final java.lang.String message ) { try { callback.onError ( errorCode , message ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public com.android.ide.common.rendering.api.ResourceValue findItemInTheme ( java.lang.String itemName ) { if ( ( getTheme ( ) ) != null ) { return findItemInStyle ( getTheme ( ) , itemName ) ; } return null ; }
public void addFailure ( junit.framework.Test test , junit.framework.AssertionFailedError error ) { java.lang.System.out.println ( java.lang.String.format ( "failure:%s" , stringify ( error ) ) ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { finish ( ) ; }
public void test_plusWeeks_negativeOverYears ( ) { java.time.LocalDate t = TEST_2007_07_15.plusWeeks ( ( - 104 ) ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2005 , 7 , 17 ) ) ; }
public static java.lang.String findAddress ( java.lang.String addr ) { return android.webkit.WebView.getFactory ( ) . getStatics ( ) . findAddress ( addr ) ; }
protected void onPostExecute ( java.lang.Boolean result ) { super . onPostExecute ( result ) ; setPassState ( mVerifyGlobalSearchItem , result ) ; mGlobalSearchVerified = result ; goToNextState ( postTarget , failCallback ) ; }
public void testConstructor_NullStartDate_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , android.security.KeyPairGeneratorSpecTest.SERIAL_1 , null , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when startDate is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
private static native long getNumAllocations ( ) ;
public com.android.jack.test.toolchain.JackCliToolchain setVerbose ( boolean isVerbose ) { super . setVerbose ( isVerbose ) ; verbosityLevel = ( isVerbose ) ? com.android.jack.Options.VerbosityLevel.DEBUG : com.android.jack.Options.VerbosityLevel.WARNING ; return this ; }
private void doRedraw ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { canvas.redraw ( ) ; } } ) ; }
public void testE1 ( ) { dot.junit.opcodes.div_int.d.T_div_int_1 t = new dot.junit.opcodes.div_int.d.T_div_int_1 ( ) ; try { t.run ( 1 , 0 ) ; fail ( "expected ArithmeticException" ) ; } catch ( java.lang.ArithmeticException ae ) { } }
public void testE2 ( ) { dot.junit.opcodes.aput_boolean.d.T_aput_boolean_1 t = new dot.junit.opcodes.aput_boolean.d.T_aput_boolean_1 ( ) ; try { t.run ( null , 2 , true ) ; fail ( "expected NullPointerException" ) ; } catch ( java.lang.NullPointerException aie ) { } }
private void onRilConnected ( ) { log ( "RIL connected." , true ) ; sendDeviceState ( android.hardware.radio.V1_0.DeviceStateType.CHARGING_STATE , mIsCharging ) ; sendDeviceState ( android.hardware.radio.V1_0.DeviceStateType.LOW_DATA_EXPECTED , mIsLowDataExpected ) ; sendDeviceState ( android.hardware.radio.V1_0.DeviceStateType.POWER_SAVE_MODE , mIsPowerSaveOn ) ; setUnsolResponseFilter ( mUnsolicitedResponseFilter , true ) ; }
private void makeValid ( ) { if ( ( this . bignum ) == 0 ) { this . bignum = java.math.NativeBN.BN_new ( ) ; } }
private void onSubscriberInfo ( java.lang.String number , int type ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_SUBSCRIBER_INFO ) ; event.valueInt = type ; event.valueString = number ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void parse ( ) throws java.io.IOException { long headerLength = parseHeader ( mTraceFile ) ; java.nio.MappedByteBuffer buffer = mapFile ( mTraceFile , headerLength ) ; parseData ( buffer ) ; computeTimingStatistics ( ) ; }
public void swap ( ) { super . swap ( ) ; producerPop ( ) ; producerPop ( ) ; producerPush ( ) ; producerPush ( ) ; }
private android.net.IpSecTransform getTransform ( java.net.InetAddress localAddr ) throws java.lang.Exception { try ( android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex ( localAddr ) ) { return android.net.cts.IpSecBaseTest.buildIpSecTransform ( mContext , spi , null , localAddr ) ; } }
private native boolean sdpRemoveSdpRecordNative ( int record_id ) ;
public boolean removeChild ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo child ) { return mChildren.remove ( child ) ; }
public static java.util.List < vogar.target.junit.VogarTest > classToVogarTests ( java.lang.Class < ? > testClass , java.lang.String ... args ) { java.util.List < vogar.target.junit.VogarTest > result = new java.util.ArrayList < vogar.target.junit.VogarTest > ( ) ; vogar.target.junit.Junit4.getSuiteMethods ( result , testClass , args ) ; return result ; }
public static long ReturnLong34 ( ) { float imm = Main.$inline$float ( 34.0F ) ; return ( ( long ) ( imm ) ) ; }
protected com.google.mockwebserver.MockResponse self ( ) { return this ; }
public void setVerticalScrollBarEnabled ( boolean verticalScrollBarEnabled ) { if ( ( isVerticalScrollBarEnabled ( ) ) != verticalScrollBarEnabled ) { mViewFlags ^= android.view.View.SCROLLBARS_VERTICAL ; computeOpaqueFlags ( ) ; recomputePadding ( ) ; } }
public void run ( ) { onInitializeAccessibilityEvent ( event ) ; }
private ApkVerifier.Result verify ( java.lang.String apkFilenameInResources ) throws com.android.apksig.apk.ApkFormatException , java.io.IOException , java.security.NoSuchAlgorithmException { return verify ( apkFilenameInResources , null ) ; }
public boolean wasSuccessful ( ) { return mGotExitValue ; }
private static native int nativeCopyNativeBinaries ( java.lang.String filePath , java.lang.String sharedLibraryPath , java.lang.String cpuAbi , java.lang.String cpuAbi2 ) ;
public void showDialpadFromNewIntent ( boolean animate ) { showDialpad ( animate , true ) ; }
public static long NotNot1 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ~ ( ~ arg ) ; }
public static java.lang.String getFreeWidgetId ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNode ) { java.lang.String name = uiNode.getDescriptor ( ) . getXmlLocalName ( ) ; return com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.getFreeWidgetId ( uiNode.getUiRoot ( ) , name ) ; }
private com.android.sched.vfs.BaseVFile changeVFS ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) { file.changeVFS ( this ) ; return file ; }
public void mergeInputLibraries ( @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.library.InputLibrary > importedLibrariesFromCommandLine ) { throw new java.lang.UnsupportedOperationException ( ) ; }
native void rsnAllocationRead1D ( long con , long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , int dt ) ;
public boolean hasBinary ( @ javax.annotation.Nonnull com.android.jack.library.BinaryKind binaryKind ) ;
void srcToLib ( @ javax.annotation.CheckForNull java.lang.String classpath , @ javax.annotation.Nonnull java.io.File out , boolean zipFiles , @ javax.annotation.Nonnull java.io.File ... sources ) throws java.lang.Exception ;
final int getInt ( int offset ) { return sun.nio.ch.NativeObject.unsafe.getInt ( ( offset + ( address ) ) ) ; }
private static java.time.ZoneOffset millisToOffset ( int offset ) { return java.time.ZoneOffset.ofTotalSeconds ( ( offset / 1000 ) ) ; }
public static float scalb ( float f , int scaleFactor ) { return sun.misc.FpUtils.scalb ( f , scaleFactor ) ; }
protected abstract void nullifyRecord ( ) ;
public void err ( @ com.android.annotations.Nullable java.lang.String line ) { filterStdErr ( line ) ; }
public java.lang.String getText ( java.lang.Object element ) { if ( element instanceof com.android.sdklib.internal.repository.SdkSource ) { return ( ( com.android.sdklib.internal.repository.SdkSource ) ( element ) ) . getUrl ( ) ; } return super . getText ( element ) ; }
public void init ( org.eclipse.ui.IWorkbench workbench , org.eclipse.jface.viewers.IStructuredSelection selection ) { setHelpAvailable ( false ) ; mInitialProject = guessProject ( selection ) ; if ( ( mChooseAssetPage ) != null ) { mChooseAssetPage.setProject ( mInitialProject ) ; } }
private boolean isForwardLocked ( com.android.server.pm.PackageSetting ps ) { return ( ( ps.pkgFlags ) & ( android.content.pm.ApplicationInfo.FLAG_FORWARD_LOCK ) ) != 0 ; }
synchronized void nAllocationRead ( int id , int [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
synchronized void nScriptInvoke ( long id , int slot ) { validate ( ) ; rsnScriptInvoke ( mContext , id , slot ) ; }
static java.net.InetAddress [ ] getAllByName0 ( java.lang.String host , boolean check ) throws java.net.UnknownHostException { return java.net.InetAddress.getAllByName0 ( host , null , check ) ; }
public static void doTest ( Transform t ) { t.sayHi ( ) ; Main.addCommonTransformationResult ( "testing/Transform" , Main.CLASS_BYTES , Main.DEX_BYTES ) ; Main.enableCommonRetransformation ( true ) ; Main.doCommonClassRetransformation ( Transform.class ) ; t.sayHi ( ) ; }
protected int adjustDexoptNeeded ( int dexoptNeeded ) { return dalvik.system.DexFile.DEX2OAT_FROM_SCRATCH ; }
synchronized boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "connect(): device=" + device ) ) ; } return connectNative ( com.android.bluetooth.Utils.getByteAddress ( device ) ) ; }
public android.net.wifi.nan.WifiNanCharacteristics createFromParcel ( android.os.Parcel in ) { android.net.wifi.nan.WifiNanCharacteristics c = new android.net.wifi.nan.WifiNanCharacteristics ( in.readBundle ( ) ) ; return c ; }
public com.android.layoutlib.api.LayoutBridge getBridge ( ) { return mBridge ; }
public void removeRemotePackage ( java.lang.String remoteFilePath ) throws com.android.ddmlib.InstallException ;
public boolean isRecycled ( ) { return mIsRecycled ; }
public void testCrossUserAttempt ( ) { notifyDexLoad ( mBarUser1 , mBarUser0.getSecondaryDexPaths ( ) , mUser1 ) ; org.junit.Assert.assertNull ( getPackageUseInfo ( mBarUser1 ) ) ; }
public static java.lang.String clearProperty ( java.lang.String name ) { java.lang.System.checkPropertyName ( name ) ; return ( ( java.lang.String ) ( java.lang.System.getProperties ( ) . remove ( name ) ) ) ; }
public void doBuildPatchFile ( java.io.File olderFile , java.io.File newerFile , java.util.zip.ZipOutputStream patchOutput ) throws java.io.IOException { }
protected void log ( java.lang.String s ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.util.Log.d ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , ( "[CDMAPhone] " + s ) ) ; }
public void stopNattKeepalive ( int sessionHandle , android.os.Message result ) { }
public void setProguardFiles ( java.lang.Iterable < ? > proguardFileIterable ) { proguardFiles.clear ( ) ; for ( java.lang.Object proguardFile : proguardFileIterable ) { proguardFiles.add ( project.file ( proguardFile ) ) ; } }
protected java.util.Set < K > delegate ( ) { return set ; }
public void testFormatUtc ( ) { assertEquals ( "UTC" , formatDate ( java.util.Locale.ENGLISH , "z" , java.util.TimeZone.getTimeZone ( "Etc/UTC" ) ) ) ; }
public java.lang.String getPath ( ) { return root.getPath ( ) . getPathAsString ( java.io.File.separatorChar ) ; }
public int hashCode ( ) { return ( ( int ) ( value ) ) ; }
static short $opt$ByteToShort ( byte a ) { return ( ( short ) ( a ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; onDeselectAll ( ) ; }
public void testResponseWithMultipleCookieHeaderLines ( ) throws java.lang.Exception { libcore.java.net.CookiesTest.TestCookieStore cookieStore = new libcore.java.net.CookiesTest.TestCookieStore ( ) ; java.net.CookieManager cookieManager = new java.net.CookieManager ( cookieStore , java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER ) ; cookieManager.put ( new java.net.URI ( "http://android.com" ) , cookieHeaders ( "a=android" , "b=banana" ) ) ; java.util.List < java.net.HttpCookie > cookies = sortedCopy ( cookieStore.cookies ) ; assertEquals ( 2 , cookies.size ( ) ) ; java.net.HttpCookie cookieA = cookies.get ( 0 ) ; assertEquals ( "a" , cookieA.getName ( ) ) ; assertEquals ( "android" , cookieA.getValue ( ) ) ; java.net.HttpCookie cookieB = cookies.get ( 1 ) ; assertEquals ( "b" , cookieB.getName ( ) ) ; assertEquals ( "banana" , cookieB.getValue ( ) ) ; }
public static void main ( java.lang.String [ ] arg ) { com.ibm.icu.dev.test.util.SimplePatternFormatterTest test = new com.ibm.icu.dev.test.util.SimplePatternFormatterTest ( ) ; try { test.run ( arg ) ; } catch ( java.lang.Exception e ) { test.errln ( "Error testing SimplePatternFormatterTest" ) ; } }
protected com.android.build.gradle.internal.variant.ApkVariantOutputData doCreateOutput ( @ com.android.annotations.Nullable java.lang.String densityFilter , @ com.android.annotations.Nullable java.lang.String abiFilter ) { return new com.android.build.gradle.internal.variant.ApkVariantOutputData ( densityFilter , abiFilter , this ) ; }
private boolean ranOrCancelled ( int state ) { return ( state & ( ( java.util.concurrent.FutureTask.Sync.RAN ) | ( java.util.concurrent.FutureTask.Sync.CANCELLED ) ) ) != 0 ; }
void startAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client ) { if ( client == null ) { return ; } android.os.Message message = new android.os.Message ( ) ; message.what = com.android.bluetooth.gatt.AdvertiseManager.MSG_START_ADVERTISING ; message.obj = client ; mHandler.sendMessage ( message ) ; }
public static void tearDownOnlyOnce ( ) { com.android.bluetooth.hfp.HeadsetStateMachineTest.sAdapterService = null ; }
protected void log ( java.lang.String s ) { android.telephony.Rlog.d ( com.android.internal.telephony.ServiceStateTracker.LOG_TAG , s ) ; }
public static void main ( java.lang.String [ ] args ) { Main.intToLong ( ) ; }
public void test4 ( ) { com.android.utils.HtmlBuilder builder = new com.android.utils.HtmlBuilder ( ) ; builder.add ( "Plain. " ) ; builder.beginBold ( ) ; builder.add ( "Bold. " ) ; builder.addLink ( "mylink" , "foo://bar:123" ) ; builder.endBold ( ) ; assertEquals ( "Plain. <B>Bold. <A HREF=\"foo://bar:123\">mylink</A></B>" , builder.getHtml ( ) ) ; }
private static void testFindInstancesOf ( com.android.tools.perflib.heap.State state ) { com.android.tools.perflib.heap.Instance [ ] instances = com.android.tools.perflib.heap.Queries.instancesOf ( state , "java.lang.String" ) ; java.lang.System.out.println ( ( ( "There are " + ( instances.length ) ) + " Strings." ) ) ; }
public abstract com.android.dialer.calllog.model.CoalescedRow.Builder setNumberCalls ( int numberCalls ) ;
public void onUiShowing ( boolean showing ) { if ( showing ) { hide ( ) ; } else { if ( com.android.dialer.telecom.TelecomUtil.isInManagedCall ( context ) ) { show ( ) ; } } }
private static boolean isFileResource ( com.android.ide.eclipse.adt.internal.resources.ResourceType type ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType [ ] folderTypes = com.android.ide.eclipse.adt.internal.resources.manager.FolderTypeRelationship.getRelatedFolders ( type ) ; for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType folderType : folderTypes ) { if ( folderType != ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType.VALUES ) ) { return true ; } } return false ; }
public void handleUserUnlock ( int userId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Handling user unlock for " + userId ) ) ; } if ( ( userId == ( mCurrentUserId ) ) && ( mPendingUnlockStoreRead ) ) { loadFromStoreAndMigrateAfterUserSwitch ( mCurrentUserId ) ; } }
public long get ( int index ) { if ( index >= ( mSize ) ) { throw new java.lang.ArrayIndexOutOfBoundsException ( mSize , index ) ; } return mValues [ index ] ; }
public static java.util.Map < java.lang.String , org.python.core.PyObject > runStringAndGet ( java.lang.String script , java.lang.String ... names ) { return com.android.monkeyrunner.ScriptRunner.runStringAndGet ( script , java.util.Arrays.asList ( names ) ) ; }
public static short shortToCharToShort ( short value ) { return ( ( short ) ( ( char ) ( value ) ) ) ; }
private static boolean isOnWindows ( ) { return java.lang.System.getProperty ( com.android.tradefed.testtype.VtsMultiDeviceTest.OS_NAME ) . contains ( com.android.tradefed.testtype.VtsMultiDeviceTest.WINDOWS ) ; }
public void markBootComplete ( java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { com.android.server.pm.Installer.assertValidInstructionSet ( instructionSet ) ; mInstaller.execute ( "markbootcomplete" , instructionSet ) ; }
private static native java.lang.String getBestDateTimePatternNative ( java.lang.String skeleton , java.lang.String localeName ) ;
private void cleanup ( ) { mWifiMonitor.stopAllMonitoring ( ) ; mDeathRecipient.unlinkToDeath ( ) ; mWifiNative.tearDownInterfaces ( ) ; mWifiNative.stopHal ( ) ; }
protected boolean markIfNecessary ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node ) { synchronized ( node ) { if ( ! ( node.containsMarker ( markerClass ) ) ) { node.addMarker ( createMarkerFor ( node ) ) ; return true ; } } return false ; }
public java.util.Collection < com.android.jack.ir.ast.JAnnotation > getAnnotations ( ) { loader.ensureAnnotations ( this ) ; return annotations.getAnnotations ( ) ; }
private static native int nativeCompare ( android.text.format.Time a , android.text.format.Time b ) ;
public java.util.Map.Entry < K , V > lowerEntry ( K key ) { return getNearEntry ( key , m.LT ) ; }
private static native void nativePostForkChild ( long token , int runtimeFlags , boolean isSystemServer , java.lang.String instructionSet ) ;
private com.android.rs.test.Byte3 pack_b3 ( byte [ ] val ) { assert ( val.length ) == 3 ; return new com.android.rs.test.Byte3 ( val [ 0 ] , val [ 1 ] , val [ 2 ] ) ; }
java.lang.String getTestedPackageName ( ) ;
private static native java.lang.String formatDateInterval ( java.lang.String skeleton , java.lang.String localeName , long fromDate , long toDate ) ;
public void onClick ( android.view.View v ) { if ( isViewHolderExpanded ) { collapseViewHolder ( ) ; } else { expandViewHolder ( ) ; voicemailViewHolderListener.onViewHolderExpanded ( this ) ; } }
public java.util.Iterator < com.android.jack.ir.ast.JMethodId > iterator ( ) { return virtualMethods.iterator ( ) ; }
private com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor findLayoutParams ( com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor groupClass ) { com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor [ ] innerClasses = groupClass.getDeclaredClasses ( ) ; for ( com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor innerClass : innerClasses ) { if ( innerClass.getSimpleName ( ) . equals ( AndroidConstants.CLASS_NAME_LAYOUTPARAMS ) ) { return innerClass ; } } return null ; }
public void onDestroy ( ) { unregisterReceiver ( mCancelReceiver ) ; stopForeground ( true ) ; }
public void testToolsAnnotationRemoval ( ) throws ManifestMerger2.MergeFailureException , java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { com.android.sdklib.mock.MockLog mockLog = new com.android.sdklib.mock.MockLog ( ) ; java.lang.String input = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application android:label=\"@string/lib_name\" " ) + " tools:replace=\"label\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.io.File tmpFile = com.android.manifmerger.ManifestMerger2SmallTest.inputAsFile ( "testToolsAnnotationRemoval" , input ) ; assertTrue ( tmpFile.exists ( ) ) ; try { com.android.manifmerger.MergingReport mergingReport = com.android.manifmerger.ManifestMerger2.newMerger ( tmpFile , mockLog , ManifestMerger2.MergeType.APPLICATION ) . merge ( ) ; assertEquals ( MergingReport.Result.WARNING , mergingReport.getResult ( ) ) ; com.android.manifmerger.XmlDocument mergedDocument = mergingReport.getMergedDocument ( ) . get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > applicationNode = mergedDocument.getByTypeAndKey ( ManifestModel.NodeTypes.APPLICATION , null ) ; assertTrue ( applicationNode.isPresent ( ) ) ; java.lang.String replaceAttribute = applicationNode.get ( ) . getXml ( ) . getAttributeNS ( SdkConstants.TOOLS_URI , "replace" ) ; assertTrue ( com.google.common.base.Strings.isNullOrEmpty ( replaceAttribute ) ) ; java.lang.System.out.println ( mergedDocument.prettyPrint ( ) ) ; mergedDocument.prettyPrint ( ) ; } finally { assertTrue ( tmpFile.delete ( ) ) ; } }
public final byte [ ] getIV ( ) { return spiImpl.engineGetIV ( ) ; }
public void testZip64Support ( ) throws java.io.IOException { try { createHugeZipFile ( ( 64 * 1024 ) ) ; fail ( ) ; } catch ( java.util.zip.ZipException expected ) { } }
public void onDisconnect ( ) { com.android.dialer.common.LogUtil.enterBlock ( "SimulatorConnection.onDisconnect" ) ; setDisconnected ( new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.LOCAL ) ) ; destroy ( ) ; }
public void onLeServiceUp ( ) { android.os.Message m = mAdapterStateMachine.obtainMessage ( AdapterState.USER_TURN_ON ) ; mAdapterStateMachine.sendMessage ( m ) ; }
public void reportThumbnail ( android.os.IBinder token , android.graphics.Bitmap thumbnail , java.lang.CharSequence description ) { final long origId = android.os.Binder.clearCallingIdentity ( ) ; sendPendingThumbnail ( null , token , thumbnail , description , true ) ; android.os.Binder.restoreCallingIdentity ( origId ) ; }
public boolean onUnbind ( android.content.Intent intent ) { mWifiWakeupController.stop ( ) ; return super . onUnbind ( intent ) ; }
void load ( java.util.List < com.android.sdklib.devices.Device > deviceList ) throws java.io.IOException { java.io.File file = getManualFile ( ) ; if ( file.exists ( ) ) { load ( file , deviceList ) ; } }
private static com.google.devtools.build.android.desugar.proto.DesugarDeps.Type wrapType ( java.lang.String internalName ) { return com.google.devtools.build.android.desugar.proto.DesugarDeps.Type.newBuilder ( ) . setBinaryName ( internalName ) . build ( ) ; }
public void testConstructor1 ( ) { assertEquals ( jsr166.PriorityBlockingQueueTest.NOCAP , new java.util.concurrent.PriorityBlockingQueue ( SIZE ) . remainingCapacity ( ) ) ; }
private void loglocal ( java.lang.String msg ) { if ( com.android.internal.telephony.uicc.UiccSlot.DBG ) com.android.internal.telephony.uicc.UiccSlot.sLocalLog.log ( msg ) ; }
public static com.android.sdklib.internal.project.ProjectProperties create ( java.lang.String projectFolderOsPath , com.android.sdklib.internal.project.ProjectProperties.PropertyType type ) { return new com.android.sdklib.internal.project.ProjectProperties ( projectFolderOsPath , new java.util.HashMap < java.lang.String , java.lang.String > ( ) , type ) ; }
public boolean hasChanged ( @ com.android.annotations.Nullable com.android.utils.ILogger log ) { return mLocalSdk.hasChanged ( ( ( ( com.android.sdklib.repository.local.LocalSdk.PKG_PLATFORMS ) | ( com.android.sdklib.repository.local.LocalSdk.PKG_ADDONS ) ) | ( com.android.sdklib.repository.local.LocalSdk.PKG_BUILD_TOOLS ) ) ) ; }
public void stopTrackingWifiChange ( android.net.wifi.WifiScanner.WifiChangeListener listener ) { int key = removeListener ( listener ) ; if ( key == ( android.net.wifi.WifiScanner.INVALID_KEY ) ) return ; validateChannel ( ) ; mAsyncChannel.sendMessage ( android.net.wifi.WifiScanner.CMD_STOP_TRACKING_CHANGE , 0 , key ) ; }
public void addCapability ( int capability ) { mNetworkCapabilities.addCapability ( capability ) ; mNetworkAgent.sendNetworkCapabilities ( mNetworkCapabilities ) ; }
public android.renderscript.cts.Floaty multiply ( android.renderscript.cts.Floaty a ) { mError = ( ( java.lang.Math.abs ( mValue ) ) * ( a.mError ) ) + ( ( java.lang.Math.abs ( a.mValue ) ) * ( mError ) ) ; mValue *= a.mValue ; return this ; }
int lock ( java.io.FileDescriptor fd , boolean blocking , long pos , long size , boolean shared ) throws java.io.IOException { return sun.nio.ch.FileDispatcherImpl.lock0 ( fd , blocking , pos , size , shared ) ; }
public java.util.List < com.android.graphics.benchmark.ApkInfo > parse ( java.io.File file ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { try ( java.io.InputStream is = new java.io.FileInputStream ( file ) ) { return parse ( is ) ; } }
public void uploadToTarget ( java.lang.String programName ) { pushToDevice ( ( ( programName + " " ) + ( testLocation ) ) ) ; }
private native int genLibs ( java.lang.String working_dir , java.lang.String sysroot ) ;
protected void onButtonReload ( org.eclipse.swt.events.SelectionEvent e ) { loadPackages ( ) ; }
private com.android.internal.util.Predicate < android.test.suitebuilder.TestMethod > getAnnotationPredicate ( java.lang.String annotationClassName ) { java.lang.Class < ? extends java.lang.annotation.Annotation > annotationClass = getAnnotationClass ( annotationClassName ) ; if ( annotationClass != null ) { return new android.test.suitebuilder.annotation.HasAnnotation ( annotationClass ) ; } return null ; }
public void testWithRowShort_columnIndexAndValueMatcher ( ) { assertTrue ( android.support.test.espresso.matcher.CursorMatchers.withRowShort ( 1 , android.support.test.espresso.matcher.CursorMatchersTest.SHORT_VALUE_MATCHER ) . matches ( cursor ) ) ; }
private void rebootRecoveryWithCommand ( java.lang.String command ) { try { mService.rebootRecoveryWithCommand ( command ) ; } catch ( android.os.RemoteException ignored ) { } }
public void verifyParcelWithoutTrustRootCertList ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = android.net.wifi.hotspot2.PasspointConfigurationTest.createConfig ( ) ; config.trustRootCertList = null ; android.net.wifi.hotspot2.PasspointConfigurationTest.verifyParcel ( config ) ; }
public java.nio.ByteBuffer recvMessage ( ) throws android.system.ErrnoException , java.io.InterruptedIOException { return recvMessage ( android.net.netlink.NetlinkSocket.DEFAULT_RECV_BUFSIZE , 0 ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNewInstance newInstance ) { com.android.jack.ir.ast.JClass returnType = newInstance.getType ( ) ; trace ( returnType ) ; com.android.jack.ir.ast.JMethodIdWide methodId = newInstance.getMethodId ( ) ; trace ( methodId , returnType , JPrimitiveTypeEnum.VOID.getType ( ) , false ) ; }
public static long LongMatCond_LongVarVar ( long a , long b , long x , long y ) { long result = ( a > b ) ? x : y ; return result + ( a > b ? 0L : 1L ) ; }
static java.util.Collection < java.lang.reflect.Field > getAllAnnotatedFields ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser.getOptionsData ( com.google.common.collect.ImmutableList.< java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > of ( optionsClass ) ) ; return data.getFieldsForClass ( optionsClass ) ; }
public long elapsedMillis ( ) { return elapsedTime ( java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
public static com.android.ddmlib.Log.LogLevel getByLetterString ( java.lang.String letter ) { if ( ( letter.length ( ) ) > 0 ) { return com.android.ddmlib.Log.LogLevel.getByLetter ( letter.charAt ( 0 ) ) ; } return null ; }
public void test_plus_longTemporalUnit_positiveMonths ( ) { java.time.LocalDate t = TEST_2007_07_15.plus ( 7 , java.time.temporal.ChronoUnit.MONTHS ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2008 , 2 , 15 ) ) ; }
void addScanEvent ( com.android.bluetooth.btservice.BluetoothProto.ScanEvent event ) { synchronized ( mScanEvents ) { if ( ( mScanEvents.size ( ) ) == ( com.android.bluetooth.gatt.GattService.NUM_SCAN_EVENTS_KEPT ) ) { mScanEvents.remove ( 0 ) ; } mScanEvents.add ( event ) ; } }
private static java.lang.String getPrimaryInstructionSet ( android.content.pm.ApplicationInfo info ) { if ( ( info.primaryCpuAbi ) == null ) { return com.android.server.pm.PackageManagerService.getPreferredInstructionSet ( ) ; } return dalvik.system.VMRuntime.getInstructionSet ( info.primaryCpuAbi ) ; }
public static float $noinline$floatAddSubSimplifyArg1 ( float x , float y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } float sum = x + y ; return sum - x ; }
public void onNewIntent ( android.content.Intent intent ) { super . onNewIntent ( intent ) ; setUpUi ( intent ) ; }
public void testIsSupported_NotSupported ( ) { assertFalse ( java.nio.charset.Charset.isSupported ( "impossible" ) ) ; }
int getMessageType ( ) { return mEnvelope.messageType ; }
public java.lang.String apply ( com.android.jack.library.InputLibrary library ) { return library.getLocation ( ) . getDescription ( ) ; }
public static native int EVP_AEAD_CTX_seal ( org.conscrypt.NativeRef.EVP_AEAD_CTX ctx , byte [ ] out , int outOffset , byte [ ] nonce , byte [ ] in , int inOffset , int inLength , byte [ ] ad ) throws javax.crypto.BadPaddingException ;
public int getInputMethodWindowVisibleHeight ( ) { synchronized ( mH ) { try { return mService.getInputMethodWindowVisibleHeight ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.view.inputmethod.InputMethodManager.TAG , ( "IME died: " + ( mCurId ) ) , e ) ; return 0 ; } } }
public void handleEvent ( org.eclipse.swt.widgets.Event event ) { if ( ! ( mInternalProjectNameUpdate ) ) { mProjectNameModifiedByUser = true ; } updateLocationPathField ( null ) ; }
public java.lang.Boolean call ( ) { return dispatchKeyEvent ( event ) ; }
protected void onDestroy ( ) { super . onDestroy ( ) ; if ( ( mFindSuidFilesTask ) != null ) { mFindSuidFilesTask.cancel ( true ) ; } }
public void testTlvInvalidSizeT3L1 ( ) { android.net.wifi.nan.TlvBufferUtils.TlvConstructor tlv10 = new android.net.wifi.nan.TlvBufferUtils.TlvConstructor ( 3 , 1 ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ! ( mTerminated ) ) { mCloseGuard.warnIfOpen ( ) ; disconnect ( ) ; } } finally { super . finalize ( ) ; } }
public void onPause ( ) { mIm.registerInputDeviceListener ( this , null ) ; }
public static android.bluetooth.BluetoothDevice getRemoteDevice ( ) { return com.android.bluetooth.map.BluetoothMapService.mRemoteDevice ; }
public boolean onPreDraw ( ) { if ( ! ( shouldAdjustKeySizes ( ) ) ) { return true ; } adjustKeySizes ( ) ; return false ; }
public static float ReturnFloat33 ( ) { int imm = 33 ; return ( ( float ) ( imm ) ) ; }
protected byte [ ] engineDoFinal ( ) { final org.conscrypt.OpenSSLDigestContext ctxLocal = ctx ; final byte [ ] output = org.conscrypt.NativeCrypto.EVP_DigestSignFinal ( ctxLocal ) ; resetContext ( ) ; return output ; }
public void testVFE14 ( ) { try { new dot.junit.opcodes.invoke_interface.d.T_invoke_interface_7 ( ) . run ( new dot.junit.opcodes.invoke_interface.ITestImpl ( ) ) ; fail ( "expected NoSuchMethodError" ) ; } catch ( java.lang.NoSuchMethodError t ) { } }
public java.util.List < java.lang.String > getApplicableMethodNames ( ) { return null ; }
public void onDialpadShown ( ) { com.android.dialer.common.LogUtil.enterBlock ( "MainSearchController.onDialpadShown" ) ; getDialpadFragment ( ) . slideUp ( true ) ; hideBottomNav ( ) ; }
int testThisWithStaticCall ( ) { return Main.doStaticNativeCallRef ( ) ; }
public void copyTo ( short [ ] d ) { validateIsInt16 ( ) ; copyTo ( d , Element.DataType.SIGNED_16 , d.length ) ; }
public int telephonyGetSubscriptionCarrierId ( ) { return mTelephonyManager.getSubscriptionCarrierId ( ) ; }
synchronized void nScriptSetTimeZone ( long script , byte [ ] timeZone ) { validate ( ) ; rsnScriptSetTimeZone ( mContext , script , timeZone ) ; }
public void testGetActivityThemes4 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " package=\'com.android.unittest\'>\n" + " <application\n" ) + " android:label=\'@string/app_name\'\n" ) + " android:name=\'.app.TestApp\' android:icon=\'@drawable/app_icon\'>\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.prefs.PrefsActivity\'\n" ) + " android:label=\'@string/prefs_title\' />\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.app.IntroActivity\'\n" ) + " android:label=\'@string/intro_title\'\n" ) + " android:theme=\'@android:style/Theme.Dialog\' />\n" ) + " </application>\n" ) + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) + "" ) ) ) ; assertEquals ( "com.android.unittest" , info.getPackage ( ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.XLARGE ) ) ) ; java.util.Map < java.lang.String , java.lang.String > map = info.getActivityThemes ( ) ; assertEquals ( map.toString ( ) , 1 , map.size ( ) ) ; assertNull ( map.get ( "com.android.unittest.prefs.PrefsActivity" ) ) ; assertEquals ( "@android:style/Theme.Dialog" , map.get ( "com.android.unittest.app.IntroActivity" ) ) ; }
void conferenceWith ( com.android.server.telecom.Call otherCall ) { if ( ( mConnectionService ) == null ) { com.android.server.telecom.Log.w ( this , "conference requested on a call without a connection service." ) ; } else { com.android.server.telecom.Log.event ( this , Log.Events.CONFERENCE_WITH , otherCall ) ; mConnectionService.conference ( this , otherCall ) ; } }
public boolean setConfiguration ( java.lang.String folderName ) { java.lang.String [ ] folderSegments = folderName.split ( FolderConfiguration.QUALIFIER_SEP ) ; return setConfiguration ( folderSegments ) ; }
public int getCompilerReleaseCode ( ) { return 2 ; }
synchronized void nAllocationRead ( int id , int [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public void testCustomNamespace ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/namespace2.xml:8: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" + ( ( ( " customprefix:orientation=\"vertical\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) + "" ) ) , lintFiles ( "res/layout/namespace2.xml" ) ) ; }
public void requestR1ANQPElementsWithRC ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mHandler.requestANQP ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1_ANQP_WITH_RC ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mManager.requestANQPElements ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_SCAN_DETAIL , true , false ) ) ; }
public void setBasename ( java.lang.String baseName ) { java.lang.System.out.println ( ( "WARNNG: Using deprecated 'basename' attribute in ApkBuilderTask." + "Use 'apkFilename' (path) instead." ) ) ; mBaseName = baseName ; }
public void aname ( char [ ] buff , int offset , int length ) throws org.xml.sax.SAXException { if ( ( theNewElement ) == null ) return ; theAttributeName = makeName ( buff , offset , length ) . toLowerCase ( ) ; }
public java.util.regex.Matcher region ( int start , int end ) { return reset ( input , start , end ) ; }
public void dumpProto ( com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto ) { synchronized ( mScanEvents ) { for ( com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : mScanEvents ) { proto.addScanEvent ( event ) ; } } }
public void capabilitiesStatusChanged ( android.telephony.ims.internal.Capabilities c ) { notifyCapabilitiesStatusChanged ( c ) ; }
public boolean isValid ( ) { return ( ( mName ) != null ) && ( ( mType ) != null ) ; }
public synchronized void clearBackingStore ( ) { getImageCacheService ( ) . clear ( ) ; mImageCacheService = null ; }
public static float FloatDivision ( ) { float a ; float b ; float c ; a = 8.0F ; b = 2.5F ; c = a / b ; return c ; }
private void cacheMethod ( @ javax.annotation.Nonnull java.lang.String key , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { assert ! ( methods.containsKey ( key ) ) ; methods.put ( key , method ) ; }
public void postInvalidateOnAnimation ( android.view.View view , int left , int top , int right , int bottom ) { view.invalidate ( left , top , right , bottom ) ; }
public boolean perform ( ) { try { java.lang.Thread.sleep ( 100 ) ; } catch ( java.lang.InterruptedException ignored ) { } return true ; }
int checkCallingPermission ( java.lang.String permission ) { return checkPermission ( permission , android.os.Binder.getCallingPid ( ) , android.os.UserId.getAppId ( android.os.Binder.getCallingUid ( ) ) ) ; }
public java.util.List < com.android.jack.ir.ast.JAnnotationLiteral > getAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotationType ) { loader.ensureAnnotation ( this , annotationType ) ; return annotations.getAnnotation ( annotationType ) ; }
protected void addRevocablePermissions ( @ com.android.annotations.NonNull java.util.Set < java.lang.String > result ) { left.addRevocablePermissions ( result ) ; right.addRevocablePermissions ( result ) ; }
public static int ShlIntLong ( ) { int lhs = 1 ; long rhs = 2 ; return lhs << rhs ; }
public void addProfile ( com.android.bluetooth.btservice.ProfileService profile ) { synchronized ( mProfiles ) { mProfiles.add ( profile ) ; } }
public java.lang.String [ ] getIsimImpu ( ) { mContext.enforceCallingOrSelfPermission ( com.android.internal.telephony.PhoneSubInfo.READ_PRIVILEGED_PHONE_STATE , "Requires READ_PRIVILEGED_PHONE_STATE" ) ; com.android.internal.telephony.ims.IsimRecords isim = mPhone.getIsimRecords ( ) ; if ( isim != null ) { return isim.getIsimImpu ( ) ; } else { return null ; } }
public java.util.List < android.telephony.TelephonyHistogram > getTelephonyHistograms ( ) { enforceModifyPermissionOrCarrierPrivilege ( getDefaultSubscription ( ) ) ; return com.android.internal.telephony.RIL.getTelephonyRILTimingHistograms ( ) ; }
private static void loge ( java.lang.String msg ) { android.util.Log.e ( com.android.cellbroadcastreceiver.CellBroadcastOtherChannelsManager.TAG , msg ) ; }
public int getStrength ( ) { int value = icuColl.getStrength ( ) ; return value == java.text.com.ibm.icu.text.Collator ? java.text.Collator.IDENTICAL : value ; }
public android.net.IpSecTransform.Builder setUnderlyingNetwork ( android.net.Network net ) { mConfig.network = net ; return this ; }
public static java.security.Provider getProvider ( java.lang.String name ) { if ( name == null ) { return null ; } return org.apache.harmony.security.fortress.Services.providersNames.get ( name ) ; }
private void queueOrSendMessage ( int what , java.lang.Object obj , int arg1 ) { queueOrSendMessage ( what , obj , arg1 , 0 ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object o ) { return multimap ( ) . containsValue ( o ) ; }
private int getWifiBadgeResourceForEnum ( int badgeEnum ) { switch ( badgeEnum ) { case android.net.ScoredNetwork.BADGING_SD : return com.android.internal.R.drawable.ic_signal_wifi_badged_sd ; case android.net.ScoredNetwork.BADGING_HD : return com.android.internal.R.drawable.ic_signal_wifi_badged_hd ; case android.net.ScoredNetwork.BADGING_4K : return com.android.internal.R.drawable.ic_signal_wifi_badged_4k ; default : throw new java.lang.IllegalArgumentException ( ( "No badge resource for enum :" + badgeEnum ) ) ; } }
public final native void addCallbackBuffer ( byte [ ] callbackBuffer ) ;
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; mTestImsService = new android.telephony.ims.TestImsService ( ) ; mTestImsServiceBinder = ( ( com.android.ims.internal.IImsServiceController ) ( mTestImsService.onBind ( new android.content.Intent ( com.android.internal.telephony.ims.ImsResolver.SERVICE_INTERFACE ) ) ) ) ; }
public void removeWindowLw ( android.view.WindowManagerPolicy.WindowState win ) { if ( ( mStatusBar ) == win ) { mStatusBar = null ; } else if ( ( mKeyguard ) == win ) { mKeyguard = null ; } }
synchronized void nAllocationSyncAll ( int alloc , int src ) { validate ( ) ; rsnAllocationSyncAll ( mContext , alloc , src ) ; }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.encapType = android.net.IpSecTransform.ENCAP_ESPINUDP ; mConfig.encapLocalPortResourceId = localSocket.getResourceId ( ) ; mConfig.encapRemotePort = remotePort ; return this ; }
public static void console ( ) { com.android.monkeyrunner.ScriptRunner.initPython ( ) ; org.python.util.InteractiveConsole python = new org.python.util.JLineConsole ( ) ; python.interact ( ) ; }
public synchronized int read ( byte [ ] target , int offset , int length ) throws java.io.IOException { java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap ( target , offset , length ) ; java.nio.channels.Channels.checkBlocking ( channel ) ; return channel.read ( buffer ) ; }
public void run ( ) { com.android.hierarchyviewer.HierarchyViewerApplication.getApp ( ) . close ( ) ; }
private static native int configureNeighborDiscoveryOffload ( int iface , boolean enabled ) ;
public void run ( ) { java.lang.System.out.println ( ( "running " + ( ( Main.MyThread.mCount ) ++ ) ) ) ; }
public void onSupplementaryServiceIndication ( com.android.ims.ImsSsData ssData ) { if ( ( mSsIndicationRegistrant ) != null ) { mSsIndicationRegistrant.notifyResult ( ssData ) ; } }
void invokeOemRilRequestRaw ( byte [ ] data , android.os.Message response ) ;
protected void onPostExecute ( java.util.List < com.android.tv.data.Program > programs ) { mPrograms = programs ; onProgramsUpdated ( ) ; }
public void addWindowChangeListener ( com.android.hierarchyviewerlib.device.WindowUpdater.IWindowChangeListener l ) { if ( ( mViewServerInfo.protocolVersion ) >= 3 ) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges ( l , mDevice ) ; } }
private static android.net.Uri getContactUri ( android.database.Cursor cursor ) { long contactId = cursor.getLong ( ContactsCursorLoader.CONTACT_ID ) ; java.lang.String lookupKey = cursor.getString ( ContactsCursorLoader.CONTACT_LOOKUP_KEY ) ; return android.provider.ContactsContract.Contacts.getLookupUri ( contactId , lookupKey ) ; }
public java.lang.String getDescription ( ) { if ( getVariantConfiguration ( ) . hasFlavors ( ) ) { return java.lang.String.format ( "Test build for the %s%s build" , getFlavoredName ( true ) , getCapitalizedBuildTypeName ( ) ) ; } else { return java.lang.String.format ( "Test build for the %s build" , getCapitalizedBuildTypeName ( ) ) ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariableRef varRef ) { com.android.jack.ir.ast.JExpression exprToUse = getCapturedVar ( varRef.getTarget ( ) ) ; if ( exprToUse != null ) { tr.append ( new com.android.jack.transformations.request.Replace ( varRef , exprToUse ) ) ; } return super . visit ( varRef ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "AD: %1$s, RS: %2$s, SS: %3$s, NS: %4$s, LS: %5$s" , mAnyDensity , mResizeable , mSmallScreens , mNormalScreens , mLargeScreens ) ; }
public final native byte [ ] readInt8Vector ( ) ;
public java.util.Map < java.lang.String , com.android.ide.common.rendering.api.AttrResourceValue > getAllAttributes ( ) { return mAttrMap ; }
public com.android.ide.common.rendering.api.ResourceValue findItemInStyle ( com.android.ide.common.rendering.api.StyleResourceValue style , java.lang.String itemName ) { return null ; }
public static boolean shouldShowProgressTimestamps ( ) { return java.lang.Boolean.getBoolean ( com.google.gct.testing.GoogleCloudTestingUtils.SHOW_GOOGLE_CLOUD_TESTING_TIMESTAMPS ) ; }
protected java.util.Properties createProps ( ) { java.util.Properties props = super . createProps ( ) ; props.setProperty ( PkgProps.MIN_TOOLS_REV , "3" ) ; return props ; }
public native int getInt ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public void enter ( ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ; mTetherController.notifyInterfaceStateChange ( mIfaceName , this , IControlsTethering.STATE_UNAVAILABLE , mLastError ) ; }
static double $opt$LongToDouble ( long a ) { return ( ( double ) ( a ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { setSortColumn ( classCol , SortMode.CLASS ) ; }
public void testInitialize ( ) { if ( skipTest ( ) ) return ; android.util.Log.i ( com.android.bluetooth.mapclient.MapClientTest.TAG , "testInitialize, test passed" ) ; }
java.lang.String getDescription ( ) ;
public void test005 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST005 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { refreshTags ( ) ; }
protected boolean isModified ( java.io.File toFile ) throws java.io.IOException { return ( myChecksum ) != ( myPatch.digestFile ( toFile ) ) ; }
public void onSaveInstanceState ( final android.os.Bundle outState ) { outState.putByteArray ( ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN , mToken ) ; outState.putBoolean ( com.android.settings.fingerprint.FingerprintSettings.FingerprintSettingsFragment.KEY_LAUNCHED_CONFIRM , mLaunchedConfirm ) ; }
public void scanAvailableAsecs ( ) { updateExternalMediaStatusInner ( true , false , false ) ; }
public long getSeen ( ) { long seen = 0 ; for ( android.net.wifi.ScanResult result : mScanResultCache.snapshot ( ) . values ( ) ) { if ( ( result.timestamp ) > seen ) { seen = result.timestamp ; } } return seen ; }
public void mouseUp ( org.eclipse.swt.events.MouseEvent e ) { handleMouseEvent ( e ) ; }
private int getUnknownSourcesSettings ( ) { return android.provider.Settings.Global.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Global.INSTALL_NON_MARKET_APPS , ( - 1 ) ) ; }
public void test_twoJar_diff_getResourceAsStream ( ) throws java.lang.Exception { dalvik.system.DexClassLoaderTest.createInstanceAndCallStaticMethod ( dalvik.system.DexClassLoaderTest.Configuration.TWO_JAR , "test.TestMethods" , "test_diff_getResourceAsStream" ) ; }
public void test_with_TemporalField_long_normal ( ) { java.time.LocalDate t = TEST_2007_07_15.with ( java.time.temporal.ChronoField.YEAR , 2008 ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2008 , 7 , 15 ) ) ; }
public com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return new com.android.sched.vfs.zip.OutputZipVFile ( zos , new java.util.zip.ZipEntry ( path.getPathAsString ( getSeparator ( ) ) ) , zipFile , this ) ; }
public com.google.common.hash.Hasher putString ( java.lang.CharSequence charSequence , java.nio.charset.Charset charset ) { return putBytes ( charSequence.toString ( ) . getBytes ( charset ) ) ; }
public final void testEquals_Null ( ) { com.android.ide.eclipse.adt.editors.layout.gscripts.Point p = new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( 1 , 2 ) ; assertFalse ( p.equals ( null ) ) ; }
com.android.build.gradle.internal.model.DefaultAndroidProject addBuildType ( @ com.android.annotations.NonNull com.android.build.gradle.model.BuildTypeContainer buildTypeContainer ) { buildTypes.put ( buildTypeContainer.getBuildType ( ) . getName ( ) , buildTypeContainer ) ; return this ; }
public void registerPage ( java.lang.String title , java.lang.Class < ? extends org.eclipse.swt.widgets.Composite > pageClass ) { mWindow.registerPage ( title , pageClass ) ; }
public void validatePolicyWithInvalidPolicyUpdate ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; policy.policyUpdate = new android.net.wifi.hotspot2.pps.UpdateParameter ( ) ; org.junit.Assert.assertFalse ( policy.validate ( ) ) ; }
public void testVP8EncodeDecodeVideoFromBufferToSurfaceQCIF ( ) throws java.lang.Throwable { setParameters ( 176 , 144 , 1000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_VP8 ) ; android.media.cts.EncodeDecodeTest.BufferToSurfaceWrapper.runTest ( this ) ; }
protected com.android.sdklib.internal.repository.ArchiveInstaller createArchiveInstaler ( ) { return new com.android.sdklib.internal.repository.ArchiveInstaller ( ) ; }
public static void write ( byte [ ] from , java.io.File to ) throws java.io.IOException { com.google.common.io.ByteStreams.write ( from , com.google.common.io.Files.newOutputStreamSupplier ( to ) ) ; }
protected static com.android.sched.vfs.InputVFile getJackFile ( @ javax.annotation.Nonnull java.lang.String typeName ) { try { assert ( com.android.jack.experimental.incremental.JackIncremental.incrementalOutputLibrary ) != null ; return com.android.jack.experimental.incremental.JackIncremental.incrementalOutputLibrary.getFile ( FileType.JAYCE , new com.android.sched.vfs.VPath ( typeName , com.android.jack.experimental.incremental.JackIncremental.fileSeparator ) ) ; } catch ( com.android.jack.library.FileTypeDoesNotExistException e ) { throw new java.lang.AssertionError ( e ) ; } }
public void onPause ( ) { super . onPause ( ) ; com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( "onPause - mIsResponseSent[" + ( mIsResponseSent ) ) + "]" ) ) ; }
final boolean casBase ( long cmp , long val ) { return com.google.common.cache.Striped64.UNSAFE.compareAndSwapLong ( this , com.google.common.cache.Striped64.baseOffset , cmp , val ) ; }
public void run ( ) { new android.theme.app.HoloDeviceActivity.GenerateBitmapTask ( ) . execute ( ) ; }
public java.lang.String apply ( com.google.gct.testing.GoogleCloudTestingDimension dimension ) { return getStringRepresentation ( dimension ) ; }
static void constantIndexing6 ( int [ ] array ) { array [ 3 ] = 1 ; array [ 4 ] = 1 ; }
public void increaseRetryCount ( ) { ( mRetryCount ) ++ ; if ( ( mRetryCount ) > ( mMaxRetryCount ) ) { mRetryCount = mMaxRetryCount ; } if ( com.android.internal.telephony.RetryManager.DBG ) log ( ( "increseRetryCount: " + ( mRetryCount ) ) ) ; }
public com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor create ( java.lang.String xmlLocalName , java.lang.String uiName , java.lang.String nsUri , java.lang.String tooltip , com.android.ide.common.api.IAttributeInfo attrInfo ) { return new com.android.ide.eclipse.adt.internal.editors.descriptors.ReferenceAttributeDescriptor ( com.android.ide.eclipse.adt.internal.resources.ResourceType.DRAWABLE , xmlLocalName , uiName , nsUri , tooltip , new com.android.ide.common.resources.platform.AttributeInfo ( xmlLocalName , new com.android.ide.common.api.IAttributeInfo.Format [ ] { com.android.ide.common.api.IAttributeInfo.Format.REFERENCE } ) ) ; }
private int getAvailableLabel ( ) { int candidate = getMinimumUnreservedLabel ( ) ; for ( com.android.dx.cf.code.BasicBlock bb : result ) { int label = bb.getLabel ( ) ; if ( label >= candidate ) { candidate = label + 1 ; } } return candidate ; }
public void testRange ( ) throws java.lang.Exception { checkFormat ( com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences.create ( ) , "res/layout-xlarge/layout.xml" , "<LinearLayout><Button foo=\"bar\"></Button><CheckBox/></LinearLayout>" , ( "\n" + ( ( ( " <Button foo=\"bar\" >\n" + " </Button>\n" ) + "\n" ) + " <CheckBox />\n" ) ) , "\n" , "Button" , false , "CheckBox" ) ; }
static int $opt$LongToInt ( long a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( int ) ( a ) ) ; }
public void supplyPin2 ( java.lang.String pin2 , android.os.Message onComplete ) { mPhone.mCM.supplyIccPin2 ( pin2 , mHandler.obtainMessage ( com.android.internal.telephony.IccCard.EVENT_PINPUK_DONE , onComplete ) ) ; }
public void test_minus_longTemporalUnit_timeNotAllowed ( ) { TEST_2007_07_15.minus ( 7 , java.time.temporal.ChronoUnit.HOURS ) ; }
public void replaceWith ( com.android.layoutlib.utils.ResourceValue value ) { mValue = value.mValue ; }
protected void visitString ( int type , int index ) { constantValue = new com.android.jack.dx.rop.cst.CstString ( dex.strings ( ) . get ( index ) ) ; }
public void test_getBucketIndex_NPE ( ) throws java.lang.Exception { libcore.icu.ImmutableIndex ii = libcore.icu.AlphabeticIndexTest.createIndex ( java.util.Locale.US ) ; try { ii.getBucketIndex ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
boolean isLeadingZeroPossible ( int countryCallingCode ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata mainMetadataForCallingCode = getMetadataForRegionOrCallingCode ( countryCallingCode , getRegionCodeForCountryCode ( countryCallingCode ) ) ; if ( mainMetadataForCallingCode == null ) { return false ; } return mainMetadataForCallingCode.isLeadingZeroPossible ( ) ; }
synchronized void nAllocationRead ( int id , int [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
private java.lang.String toHex ( java.lang.String password ) { if ( password == null ) { return new java.lang.String ( ) ; } byte [ ] bytes = password.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; return new java.lang.String ( org.apache.commons.codec.binary.Hex.encodeHex ( bytes ) ) ; }
public void parseAndKeepRawInput ( java.lang.String numberToParse , java.lang.String defaultRegion , com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber ) throws com.google.i18n.phonenumbers.NumberParseException { parseHelper ( numberToParse , defaultRegion , true , true , phoneNumber ) ; }
private static native void startMethodTracingFd ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags , boolean samplingEnabled , int intervalUs ) ;
public void callSessionResumeReceived ( com.android.ims.internal.IImsCallSession i , android.telephony.ims.ImsCallProfile imsCallProfile ) throws android.os.RemoteException { mNewListener.callSessionResumeReceived ( imsCallProfile ) ; }
public void testConnectTwice ( ) { mConnectionCallback.resetCounts ( ) ; createMediaBrowser ( android.media.cts.MediaBrowserTest.TEST_BROWSER_SERVICE ) ; connectMediaBrowserService ( ) ; try { mMediaBrowser.connect ( ) ; fail ( ) ; } catch ( java.lang.IllegalStateException e ) { } }
protected com.android.builder.resources.AssetFile createFileAndItems ( java.io.File file , com.android.utils.ILogger logger ) { return new com.android.builder.resources.AssetFile ( file , new com.android.builder.resources.AssetItem ( file.getName ( ) ) ) ; }
public java.lang.Object getDecodedObject ( org.apache.harmony.security.asn1.BerInputStream in ) throws java.io.IOException { return new java.lang.String ( in.buffer , in.contentOffset , in.length , java.nio.charset.Charsets.ISO_8859_1 ) ; }
public void startWps ( android.os.Messenger replyTo , android.net.wifi.WpsInfo config ) { android.os.Message msg = obtainMessage ( android.net.wifi.WifiStateMachine.CMD_START_WPS , config ) ; msg.replyTo = replyTo ; sendMessage ( msg ) ; }
public void test2_1SetEnabledAfterRelease ( ) throws java.lang.Exception { getEqualizer ( 0 ) ; mEqualizer.release ( ) ; try { mEqualizer.setEnabled ( true ) ; } catch ( java.lang.IllegalStateException e ) { } finally { releaseEqualizer ( ) ; } }
public void cleanUp ( ) { if ( ( mSimUnlockProgressDialog ) != null ) { mSimUnlockProgressDialog.hide ( ) ; } mUpdateMonitor.removeCallback ( this ) ; }
public com.android.build.gradle.AndroidSourceDirectorySet srcDirs ( java.lang.Object ... srcDirs ) { for ( java.lang.Object srcDir : srcDirs ) { source.add ( srcDir ) ; } return this ; }
private native java.lang.annotation.Annotation [ ] [ ] getParameterAnnotationsNative ( ) ;
public void onComplete ( int resultCode , byte [ ] response ) { callback.onComplete ( resultCode , response ) ; }
public static com.android.internal.telephony.gsm.stk.FontSize fromInt ( int value ) { for ( com.android.internal.telephony.gsm.stk.FontSize e : com.android.internal.telephony.gsm.stk.FontSize.values ( ) ) { if ( ( e.mValue ) == value ) { return e ; } } return null ; }
public void run ( ) { if ( ( mCallback ) != null ) { if ( status == 0 ) descriptor.setValue ( value ) ; mCallback.onDescriptorRead ( this , descriptor , status ) ; } }
private boolean record ( com.android.server.pm.dex.PackageDexUsageTests.TestData testData ) { return mPackageDexUsage.record ( testData.mPackageName , testData.mDexFile , testData.mOwnerUserId , testData.mLoaderIsa , testData.mUsedByOtherApps , testData.mPrimaryOrSplit , testData.mUsedBy ) ; }
private static boolean isActiveVideoCall ( com.android.incallui.call.DialerCall call ) { return ( com.android.incallui.VideoCallPresenter.isVideoCall ( call ) ) && ( ( call.getState ( ) ) == ( com.android.incallui.call.DialerCall.State.ACTIVE ) ) ; }
public static void permuteArguments_boxingCallee ( boolean a , java.lang.Integer b ) { if ( a && ( ( b.intValue ( ) ) == 42 ) ) { return ; } java.lang.System.out.println ( ( ( ( "Unexpected arguments: " + a ) + ", " ) + b ) ) ; }
public void test_plus_Duration_zero ( ) { java.time.OffsetDateTime t = TEST_2008_6_30_11_30_59_000000500.plus ( java.time.Duration.ZERO ) ; org.testng.Assert.assertEquals ( t , TEST_2008_6_30_11_30_59_000000500 ) ; }
public android.os.IBinder onBind ( android.content.Intent intent ) { return mProvider.getBinder ( ) ; }
public static final void writeListXml ( java.util.List val , java.io.OutputStream out ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { org.xmlpull.v1.XmlSerializer serializer = android.util.Xml.newSerializer ( ) ; serializer.setOutput ( out , "utf-8" ) ; serializer.startDocument ( null , true ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; com.android.internal.util.XmlUtils.writeListXml ( val , null , serializer ) ; serializer.endDocument ( ) ; }
public final int hashCode ( ) { return 305419896 ; }
private void doTest ( ) { com.intellij.codeInspection.LocalInspectionTool localInspectionTool = new com.google.gct.intellij.endpoints.validation.RestSignatureInspection ( ) ; java.lang.String testName = getTestName ( true ) ; myFixture.setTestDataPath ( getTestDataPath ( ) ) ; myFixture.testInspection ( ( "inspections/restSignatureInspection/" + testName ) , new com.intellij.codeInspection.ex.LocalInspectionToolWrapper ( localInspectionTool ) ) ; }
void putUnchecked ( int pos , float [ ] dst , int srcOffset , int length ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private void endAnimation ( final android.animation.ValueAnimator mValueAnimator ) throws java.lang.Throwable { java.lang.Thread animationRunnable = new java.lang.Thread ( ) { public void run ( ) { mValueAnimator.end ( ) ; } } ; this . runTestOnUiThread ( animationRunnable ) ; }
public java.io.FileDescriptor accept ( java.io.FileDescriptor fd , java.net.InetSocketAddress peerAddress ) throws android.system.ErrnoException , java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; return tagSocket ( os.accept ( fd , peerAddress ) ) ; }
public boolean remove ( java.lang.Object object ) { throw new java.lang.UnsupportedOperationException ( ) ; }
protected java.lang.String getProposal ( ) { return invokeCodeCompletion ( ) ? "" : "TODO" ; }
protected void onPause ( ) { super . onPause ( ) ; unregisterReceiver ( mReceiver ) ; }
public static void main ( java.lang.String [ ] args ) { try { Main.stackOverflowTestSub ( 0.0 , 0.0 , 0.0 ) ; } catch ( java.lang.StackOverflowError soe ) { java.lang.System.out.println ( "caught SOE" ) ; } java.lang.System.out.println ( "SOE test done" ) ; }
public void testWithRowString_columnIndexAndValueMatcher ( ) { assertTrue ( android.support.test.espresso.matcher.CursorMatchers.withRowString ( 6 , android.support.test.espresso.matcher.CursorMatchersTest.STRING_VALUE_MATCHER ) . matches ( cursor ) ) ; }
public java.nio.channels.ServerSocketChannel getAdminChannel ( ) { assert ( adminChannel ) != null ; return adminChannel ; }
public void testNonTranslatable2 ( ) throws java.lang.Exception { TranslationDetector.COMPLETE_REGIONS = true ; assertEquals ( ( "res/values-nb/nontranslatable.xml:3: Error: Non-translatable resources should only be defined in the base values/ folder [ExtraTranslation]\n" + ( ( ( " <string name=\"dummy\" translatable=\"false\">Ignore Me</string>\n" + " ~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) + "" ) ) , lintProject ( "res/values/nontranslatable.xml=>res/values-nb/nontranslatable.xml" ) ) ; }
public void testPrivate ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/private.xml:3: Error: Illegal resource reference: @*android resources are private and not always present [PrivateResource]\n" + ( ( ( " <ImageView android:id=\"@+id/android_logo\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:src=\"@*android:drawable/android_button\" android:focusable=\"false\" android:clickable=\"false\" />\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) + "" ) ) , lintProject ( "res/layout/private.xml" ) ) ; }
public static boolean isGenericSignature ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn ) { if ( ( ( cn.signature ) != null ) && ( cn.signature.contains ( com.android.jill.frontend.java.AsmHelper.GENERIC_SIGNATURE_START ) ) ) { assert cn.signature.contains ( com.android.jill.frontend.java.AsmHelper.GENERIC_SIGNATURE_END ) ; return true ; } return false ; }
void removeCall ( java.lang.String callId ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.removeCall ( callId ) ; } catch ( android.os.RemoteException ignored ) { } } }
public static java.util.List < android.content.PeriodicSync > getPeriodicSyncs ( android.accounts.Account account , java.lang.String authority ) { try { return android.content.ContentResolver.getContentService ( ) . getPeriodicSyncs ( account , authority ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( "the ContentService should always be reachable" , e ) ; } }
public java.util.Map < java.lang.String , com.android.builder.resources.Resource > getResourceMap ( ) { return mItems ; }
private static libcore.io.StructStatFs doStat ( java.lang.String path ) { try { return Libcore.os.statfs ( path ) ; } catch ( libcore.io.ErrnoException e ) { throw new java.lang.IllegalArgumentException ( ( "Invalid path: " + path ) , e ) ; } }
void send404 ( java.io.PrintStream ps ) throws java.io.IOException { ps.println ( ( "Not Found\n\n" + "The requested resource was not found.\n" ) ) ; }
protected void logStartUnitTest ( com.android.rs.unittest.UnitTest test ) { java.lang.String thisDeviceName = android.os.Build.DEVICE ; int thisApiVersion = android.os.Build.VERSION.SDK_INT ; android.util.Log.i ( com.android.rs.testcompat.RSSupportLibTestsListActivity.TAG , java.lang.String.format ( ( "RenderScript support lib testing (%s) " + "on device %s, API version %d" ) , test.toString ( ) , thisDeviceName , thisApiVersion ) ) ; }
public java.lang.String select ( java.lang.Object context , double number ) { android.icu.text.PluralRules.FixedDecimal dec = ( ( android.icu.text.PluralRules.FixedDecimal ) ( context ) ) ; assert ( dec.source ) == number ; return pluralRules.select ( dec ) ; }
public com.android.server.wifi.WifiLinkLayerStats syncGetLinkLayerStats ( com.android.internal.util.AsyncChannel channel ) { android.os.Message resultMsg = channel.sendMessageSynchronously ( com.android.server.wifi.WifiStateMachine.CMD_GET_LINK_LAYER_STATS ) ; com.android.server.wifi.WifiLinkLayerStats result = ( ( com.android.server.wifi.WifiLinkLayerStats ) ( resultMsg.obj ) ) ; resultMsg.recycle ( ) ; return result ; }
public void run ( ) { if ( ( mCallback ) != null ) { mCallback.onMtuChanged ( this , mtu , status ) ; } }
public void write ( java.lang.String s , int off , int len ) { }
public java.util.List < com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder > getFolders ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType type ) { return mFolderMap.get ( type ) ; }
public abstract void installPackage ( @ com.android.annotations.NonNull java.io.File apkFile , int timeout , com.android.utils.ILogger logger ) throws com.android.builder.testing.api.DeviceException ;
protected android.bluetooth.BluetoothDevice getRemoteDevice ( ) { return mRemoteDevice ; }
protected java.lang.String getFormat ( ) { return android.telephony.SmsMessage.FORMAT_3GPP2 ; }
public void onResume ( ) { super . onResume ( ) ; com.android.dialer.common.LogUtil.i ( "AnswerFragment.onResume" , null ) ; restoreSwipeHintTexts ( ) ; inCallScreenDelegate.onInCallScreenResumed ( ) ; }
public void traverse ( @ javax.annotation.Nonnull com.android.sched.scheduler.ScheduleInstance < ? super com.android.sched.item.Component > schedule ) throws java.lang.Exception { schedule.process ( this ) ; traverseElements ( schedule ) ; }
public void requestR1ANQPElementsWithoutRC ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mHandler.requestANQP ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1_ANQP_WITHOUT_RC ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mManager.requestANQPElements ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_SCAN_DETAIL , false , false ) ) ; }
public static java.lang.String getFreeWidgetId ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNode ) { java.lang.String name = uiNode.getDescriptor ( ) . getXmlLocalName ( ) ; if ( "TabWidget" . equals ( name ) ) { return "@android:id/tabs" ; } return "@+id/" + ( com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.getFreeWidgetId ( uiNode.getUiRoot ( ) , new java.lang.Object [ ] { name , null , null , null } ) ) ; }
public void verifyParcelWithHomeSPAndCredential ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = android.net.wifi.hotspot2.PasspointConfigurationTest.createHomeSp ( ) ; config.credential = android.net.wifi.hotspot2.PasspointConfigurationTest.createCredential ( ) ; android.net.wifi.hotspot2.PasspointConfigurationTest.verifyParcel ( config ) ; }
private static native int nextImpl ( int address , int n ) ;
public void setEnvironment ( android.hardware.cts.helpers.TestSensorEnvironment environment ) { mEnvironment = environment ; }
public android.net.IpSecTransform.Builder setAuthentication ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecAlgorithm algo ) { mConfig.flow [ direction ] . authentication = algo ; return this ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.doTest ( ) ; new Main.TestConfig ( ) . doFollowReferencesTest ( ) ; }
java.util.Map < K , V > map ( ) { return this ; }
public com.android.build.gradle.internal.dsl.BuildType proguardFile ( java.lang.Object proguardFile ) { proguardFiles.add ( project.file ( proguardFile ) ) ; return this ; }
public com.android.ims.internal.IImsUt getUtInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { return this . getUt ( ) ; } }
public static < T > T readBytes ( java.io.File file , com.google.common.io.ByteProcessor < T > processor ) throws java.io.IOException { return com.google.common.io.ByteStreams.readBytes ( com.google.common.io.Files.newInputStreamSupplier ( file ) , processor ) ; }
public static com.google.common.io.OutputSupplier < java.io.OutputStreamWriter > newWriterSupplier ( java.io.File file , java.nio.charset.Charset charset ) { return com.google.common.io.Files.newWriterSupplier ( file , charset , false ) ; }
public static long $opt$getLongField ( Main m ) { return m.longField ; }
private boolean hasAcknowledgedFeatures ( ) { if ( isVvm3 ( ) ) { return true ; } return ( preferences.getInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_DIALER_FEATURE_VERSION_ACKNOWLEDGED_KEY , 0 ) ) >= ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_VOICEMAIL_FEATURE_VERSION ) ; }
public void onComplete ( int resultCode ) { callback.onComplete ( resultCode , null ) ; }
public java.lang.String uninstallPackage ( java.lang.String packageName ) throws com.android.ddmlib.TimeoutException , java.io.IOException { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver ( ) ; executeShellCommand ( ( "pm uninstall " + packageName ) , receiver ) ; return receiver.getErrorMessage ( ) ; }
public com.android.dx.io.EncodedValue adjustEncodedArray ( com.android.dx.io.EncodedValue encodedArray ) { com.android.dx.util.ByteArrayAnnotatedOutput out = new com.android.dx.util.ByteArrayAnnotatedOutput ( 32 ) ; new com.android.dx.merge.IndexMap.EncodedValueTransformer ( encodedArray , out ) . readArray ( ) ; return new com.android.dx.io.EncodedValue ( out.toByteArray ( ) ) ; }
public com.google.common.collect.UnmodifiableIterator < V > iterator ( ) { return com.google.common.collect.Maps.valueIterator ( map ( ) . entrySet ( ) . iterator ( ) ) ; }
public void updateCall ( android.bluetooth.BluetoothHeadsetClientCall call ) { mCurrentCall = call ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder clearPassedTestCaseCount ( ) { bitField0_ = ( bitField0_ ) & ( ~ 4096 ) ; passedTestCaseCount_ = 0 ; onChanged ( ) ; return this ; }
public java.lang.Integer gattServerCreateGattServerCallback ( ) { com.googlecode.android_scripting.facade.bluetooth.GattServerFacade.GattServerCallbackCount += 1 ; int index = com.googlecode.android_scripting.facade.bluetooth.GattServerFacade.GattServerCallbackCount ; mBluetoothGattServerCallbackList.put ( index , new com.googlecode.android_scripting.facade.bluetooth.GattServerFacade.myBluetoothGattServerCallback ( index ) ) ; return index ; }
boolean isNumberPossibleForDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher possibleNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.possibleNumberPattern ) . matcher ( nationalNumber ) ; return possibleNumberPatternMatcher.matches ( ) ; }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , int timeoutMs , int legacyType ) { sendRequestForNetwork ( request.networkCapabilities , networkCallback , timeoutMs , android.net.ConnectivityManager.REQUEST , legacyType ) ; }
public void testSerializingSubclass ( ) throws java.io.IOException , java.lang.ClassNotFoundException { java.text.AttributedCharacterIterator.Attribute a = new libcore.java.text.AttributedCharacterIteratorAttributeTest.CustomAttribute ( ) ; try { libcore.util.SerializationTester.reserialize ( a ) ; fail ( ) ; } catch ( java.io.InvalidObjectException expected ) { } }
private static boolean canManageConference ( com.android.incallui.Call call ) { return ( call != null ) && ( call.can ( PhoneCapabilities.MANAGE_CONFERENCE ) ) ; }
public void onCancel ( android.content.DialogInterface arg0 ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( getName ( ) ) + " ignore connect" ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_REJECT ) ; }
public void freeCache ( java.lang.String uuid , long freeStorageSize ) throws com.android.internal.os.InstallerConnection.InstallerException { mInstaller.execute ( "freecache" , uuid , freeStorageSize ) ; }
static java.lang.String getBestDateTimePattern ( java.lang.String skeleton , java.lang.String localeName ) { return com.ibm.icu.text.DateTimePatternGenerator.getInstance ( new com.ibm.icu.util.ULocale ( localeName ) ) . getBestPattern ( skeleton ) ; }
private android.content.Intent createActivityIntent ( ) { android.content.Intent intent = new android.content.Intent ( mContext , com.android.cellbroadcastreceiver.CellBroadcastSettings.class ) ; intent.setPackage ( "com.android.cellbroadcastreceiver" ) ; intent.setAction ( "android.intent.action.MAIN" ) ; return intent ; }
private void close ( ) { synchronized ( mLock ) { mWriteHandle.close ( ) ; mPendingActions.clear ( ) ; } mReadHandle.close ( ) ; }
public android.database.Cursor loadInBackground ( ) { android.database.Cursor cursor = super . loadInBackground ( ) ; com.android.dialer.searchfragment.cp2.ContactFilterCursor contactFilterCursor = new com.android.dialer.searchfragment.cp2.ContactFilterCursor ( cursor , query ) ; return com.android.dialer.searchfragment.cp2.SearchContactsCursor.newInstnace ( getContext ( ) , contactFilterCursor ) ; }
private void createContents ( org.eclipse.swt.widgets.Composite parent ) { parent.setLayout ( new org.eclipse.swt.layout.GridLayout ( 1 , false ) ) ; }
public com.android.sched.vfs.VPath getPath ( ) { return new com.android.sched.vfs.VPath ( getNativePath ( ) . getPath ( ) , java.io.File.separatorChar ) ; }
private static void disableTraceForRI ( ) { if ( ! ( java.lang.System.getProperty ( "java.vm.name" ) . equals ( "Dalvik" ) ) ) { art.Trace.disableMethodTracing ( java.lang.Thread.currentThread ( ) ) ; } }
private com.android.rs.test.Long3 pack_l3 ( long [ ] val ) { assert ( val.length ) == 3 ; return new com.android.rs.test.Long3 ( val [ 0 ] , val [ 1 ] , val [ 2 ] ) ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeInt ( resultCode ) ; out.writeStrongBinder ( token ) ; out.writeInt ( inputConsumed ) ; out.writeByteArray ( output ) ; }
public static int AddNegs1 ( int arg1 , int arg2 ) { return ( - arg1 ) + ( - arg2 ) ; }
private native < A extends java.lang.annotation.Annotation > A getAnnotationNative ( java.lang.Class < A > annotationType ) ;
protected org.simpleframework.http.ContentType getContentType ( @ javax.annotation.Nonnull org.simpleframework.http.Request request ) { return new org.simpleframework.http.parse.ContentTypeParser ( request.getValue ( "accept" ) ) ; }
public static void checkNotOnMainThread ( ) { if ( com.android.server.telecom.ThreadUtil.isOnMainThread ( ) ) { com.android.server.telecom.Log.wtf ( com.android.server.telecom.ThreadUtil.TAG , new java.lang.IllegalStateException ( ) , "Must not be on the main thread!" ) ; } }
java.util.NavigableMap < K , V > map ( ) { return this ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranchBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; branch_ = value ; onChanged ( ) ; return this ; }
public void setUp ( ) throws java.lang.Exception { mDelivery = new com.android.volley.utils.ImmediateResponseDelivery ( ) ; }
public com.android.server.wifi.WifiConnectivityManager makeWifiConnectivityManager ( android.net.wifi.WifiInfo wifiInfo , boolean hasConnectionRequests ) { return new com.android.server.wifi.WifiConnectivityManager ( mContext , mWifiStateMachine , getWifiScanner ( ) , mWifiConfigManager , wifiInfo , mWifiNetworkSelector , mWifiLastResortWatchdog , mWifiMetrics , mWifiStateMachineHandlerThread.getLooper ( ) , mClock , hasConnectionRequests ) ; }
public final boolean isPrivate ( ) { return ( ( org.jetbrains.asm4.Opcodes.ACC_PRIVATE ) & ( access ) ) != 0 ; }
public static float ReturnFloat34 ( ) { long imm = 34L ; return ( ( float ) ( imm ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { toggle.getCallback ( ) . action ( toggle , toggle.getId ( ) , button.getSelection ( ) ) ; }
public void TestDangiFormat ( ) { com.ibm.icu.text.DateFormat fmt = com.ibm.icu.text.DateFormat.getDateInstance ( DateFormat.MEDIUM , new com.ibm.icu.util.ULocale ( "en@calendar=dangi" ) ) ; java.lang.String calType = fmt.getCalendar ( ) . getType ( ) ; assertEquals ( "Incorrect calendar type used by the date format instance" , "dangi" , calType ) ; com.ibm.icu.util.GregorianCalendar gcal = new com.ibm.icu.util.GregorianCalendar ( ) ; gcal.set ( 2013 , Calendar.MARCH , 1 , 0 , 0 , 0 ) ; java.util.Date d = gcal.getTime ( ) ; java.lang.String dangiDateStr = fmt.format ( d ) ; assertEquals ( "Bad date format" , "Mo1 20, gui-si" , dangiDateStr ) ; }
public int hashCode ( ) { assert false : "hashCode not designed" ; return 42 ; }
public com.android.ahat.heapdump.Value get ( int index ) { java.lang.Object obj = values [ index ] ; return obj == null ? null : new com.android.ahat.heapdump.Value ( obj ) ; }
public void consume ( org.jetbrains.plugins.github.GithubAuthData authData ) throws java.io.IOException { reposRef.set ( org.jetbrains.plugins.github.GithubApiUtil.getDetailedRepoInfo ( authData , userAndRepo.getUser ( ) , userAndRepo.getRepository ( ) ) ) ; }
public static void computeHypot ( android.renderscript.cts.TestHypot.ArgumentsFloatFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 4 ; args.out = ( ( float ) ( java.lang.StrictMath.hypot ( args.inX , args.inY ) ) ) ; }
public void testPackageOverridePackageFromFlavor ( ) { mFlavorConfig.setPackageName ( "foo.bar" ) ; com.android.builder.core.VariantConfiguration variant = getVariant ( ) ; assertEquals ( "foo.bar" , variant.getPackageOverride ( ) ) ; }
protected void init ( ) throws java.lang.Exception { if ( ( android.icu.dev.test.calendar.HolidayTest.cal ) == null ) { android.icu.dev.test.calendar.HolidayTest.cal = new android.icu.util.GregorianCalendar ( 1 , 0 , 1 ) ; android.icu.dev.test.calendar.HolidayTest.longTimeAgo = android.icu.dev.test.calendar.HolidayTest.cal.getTime ( ) ; android.icu.dev.test.calendar.HolidayTest.now = new java.util.Date ( ) ; } }
public com.android.sched.vfs.InputOutputVDir getRootInputOutputVDir ( ) { assert ! ( closed ) ; return root ; }
public static java.lang.Integer getTargetSdkVersion ( com.android.io.IAbstractFile manifestFile ) throws com.android.io.StreamException , javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.xml.AndroidXPathFactory.newXPath ( ) ; java.lang.String result = xPath.evaluate ( ( ( ( ( ( ( ( "/" + ( com.android.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.xml.AndroidManifest.NODE_USES_SDK ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.xml.AndroidManifest.ATTRIBUTE_TARGET_SDK_VERSION ) ) , new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) ) ; try { return java.lang.Integer.valueOf ( result ) ; } catch ( java.lang.NumberFormatException e ) { return ( result.length ( ) ) > 0 ? - 1 : null ; } }
public < T > com.android.sched.util.config.AsapConfigBuilder set ( @ javax.annotation.Nonnull com.android.sched.util.config.id.ObjectId < T > objectId , @ javax.annotation.Nonnull T value , @ javax.annotation.Nonnull com.android.sched.util.location.Location location ) { instances.put ( objectId , value ) ; locationsByKeyId.put ( objectId , location ) ; return this ; }
public void testKeyPairGenerator_Initialize_KeySize_Failure ( ) throws java.lang.Exception { try { mGenerator.initialize ( 1024 ) ; fail ( "KeyPairGenerator should not support setting the key size" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public static int NotEqualTrueLhs ( boolean arg ) { return true == arg ? 3 : 5 ; }
public proguard.evaluation.value.IntegerValue subtractFrom ( proguard.evaluation.value.SpecificIntegerValue other ) { return this . equals ( other ) ? SpecificValueFactory.INTEGER_VALUE_0 : new proguard.evaluation.value.CompositeIntegerValue ( other , CompositeIntegerValue.SUBTRACT , this ) ; }
com.android.sched.util.location.Location getVFileLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent , @ javax.annotation.Nonnull java.lang.String name ) { return vfs.getVFileLocation ( parent , name ) ; }
public void middlewareReady ( ) throws android.os.RemoteException { }
public java.lang.String getRules ( ) { return icuColl.getRules ( ) ; }
private void logi ( java.lang.String s ) { android.telephony.Rlog.i ( com.android.internal.telephony.GsmCdmaPhone.LOG_TAG , ( "[GsmCdmaPhone] " + s ) ) ; }
private com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo getHorizontalPatchTop ( int x ) { return getContainingPatch ( patchInfo.horizontalPatchMarkers , x , com.android.draw9patch.ui.ImageViewer.UpdateRegion.TOP_PATCH ) ; }
public java.lang.String apply ( @ com.android.annotations.Nullable com.android.build.gradle.managed.ManagedString managedString ) { return managedString == null ? null : managedString.getValue ( ) ; }
public void scheduleTrimMemory ( int level ) { queueOrSendMessage ( android.app.ActivityThread.H.TRIM_MEMORY , null , level ) ; }
boolean expectAux ( java.lang.String tag , java.lang.String source , java.lang.String result , boolean pass , java.lang.String expectedResult ) { return expectAux ( tag , new java.lang.String [ ] { source , result } , pass , expectedResult ) ; }
public android.telephony.ims.internal.stub.SmsImplBase getSmsImplementation ( ) { return new android.telephony.ims.internal.stub.SmsImplBase ( ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mTestResult = new com.android.ddmlib.testrunner.InstrumentationResultParserTest.VerifyingTestResult ( ) ; mParser = new com.android.ddmlib.testrunner.InstrumentationResultParser ( mTestResult ) ; }
public void testStringsToNpnBytesEmptyByteArray ( ) { try { android.net.SSLCertificateSocketFactory.toNpnProtocolsList ( new byte [ 0 ] ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public int compare ( com.android.ahat.Site.ObjectsInfo a , com.android.ahat.Site.ObjectsInfo b ) { return a.heap.getName ( ) . compareTo ( b.heap.getName ( ) ) ; }
public boolean delKey ( java.lang.String key ) { return delKey ( android.security.KeyStore.getKeyBytes ( key ) ) ; }
public void run ( ) { getContentResolver ( ) . update ( lockUri , values , null , null ) ; }
public static void testSendSafetyInfoAlert ( android.app.Activity activity , int serialNumber ) { android.telephony.SmsCbMessage cbMessage = com.android.cellbroadcastreceiver.tests.SendGsmCmasMessages.createCmasSmsMessage ( 911 , serialNumber , "en" , com.android.cellbroadcastreceiver.tests.SendGsmCmasMessages.SAFETY_INFO , SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN , SmsCbCmasInfo.CMAS_URGENCY_UNKNOWN , SmsCbCmasInfo.CMAS_CERTAINTY_UNKNOWN , SmsCbMessage.MESSAGE_PRIORITY_NORMAL ) ; com.android.cellbroadcastreceiver.tests.SendGsmCmasMessages.sendBroadcast ( activity , cbMessage ) ; }
public void updateAll ( java.util.ArrayList < java.lang.String > pkgFilter , boolean includeAll , boolean dryMode , java.lang.String acceptLicense ) { mUpdaterData.updateOrInstallAll_NoGUI ( pkgFilter , includeAll , dryMode , acceptLicense ) ; }
public static java.io.File createTempFile ( @ javax.annotation.Nonnull java.lang.String prefix , @ javax.annotation.Nonnull java.lang.String suffix ) throws java.io.IOException { java.io.File tmp = java.io.File.createTempFile ( prefix , suffix ) ; tmp.deleteOnExit ( ) ; return tmp ; }
public void testAospServiceContexts ( ) throws java.lang.Exception { deviceSvcFile = java.io.File.createTempFile ( "service_contexts" , ".tmp" ) ; deviceSvcFile.deleteOnExit ( ) ; mDevice.pullFile ( "/plat_service_contexts" , deviceSvcFile ) ; aospSvcFile = copyResourceToTempFile ( "/plat_service_contexts" ) ; assertFileStartsWith ( aospSvcFile , deviceSvcFile ) ; }
public void handleMessage ( android.os.Message msg ) { android.widget.Toast.makeText ( this , getString ( R.string.message_queued ) , Toast.LENGTH_SHORT ) . show ( ) ; }
public com.android.sdklib.IAndroidTarget loadTarget ( com.android.ide.eclipse.adt.internal.project.ProjectState state ) { com.android.sdklib.IAndroidTarget target = null ; java.lang.String hash = state.getTargetHashString ( ) ; if ( hash != null ) { state.setTarget ( ( target = getTargetFromHashString ( hash ) ) ) ; } return target ; }
public void test_Constructor ( ) { try { tests.api.javax.net.ssl.SSLServerSocketFactoryTest.MockSSLServerSocketFactory ssf = new tests.api.javax.net.ssl.SSLServerSocketFactoryTest.MockSSLServerSocketFactory ( ) ; } catch ( java.lang.Exception e ) { fail ( ( "Unexpected exception " + ( e.toString ( ) ) ) ) ; } }
public boolean setWifiEnabled ( boolean enabled ) { try { return mService.setWifiEnabled ( enabled ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void testEncodeDecodeVideoFromBufferToBufferQVGA ( ) throws java.lang.Exception { setParameters ( 320 , 240 , 2000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_AVC ) ; encodeDecodeVideoFromBuffer ( false ) ; }
public void onVideoProviderChanged ( com.android.services.telephony.VideoProvider videoProvider ) { setVideoProvider ( videoProvider ) ; }
public boolean isNetworkRoaming ( ) { return isNetworkRoaming ( android.telephony.TelephonyManager.getDefaultSubscription ( ) ) ; }
public boolean hasUnderline ( ) { return true ; }
public java.lang.invoke.MethodHandle bindTo ( java.lang.Object x ) { x = type.leadingReferenceParameter ( ) . cast ( x ) ; throw new java.lang.UnsupportedOperationException ( "bindTo(Object)" ) ; }
public int getDeviceMode ( android.bluetooth.BluetoothDevice device ) { return 0 ; }
public void testError ( ) { try { com.android.tools.lint.client.api.JarFileIssueRegistry.get ( new java.io.File ( "bogus" ) ) ; fail ( "Expected exception for bogus path" ) ; } catch ( java.lang.Throwable t ) { } }
java.util.Map < K , V > map ( ) { return this ; }
public void unplug ( long batteryUptime , long batteryRealtime ) { mUnpluggedWakeups = mWakeups ; }
public static void computeAsinpi ( android.renderscript.cts.TestAsinpi.ArgumentsFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( ( java.lang.StrictMath.asin ( args.in ) ) / ( java.lang.StrictMath.PI ) ) ) ; }
private int getSlotIdFromPhoneId ( int phoneId ) { return phoneId ; }
public void dumpShowsFailureTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "rdev_connect" ) ) ; }
public < T > T newProxy ( T target , java.lang.Class < T > interfaceType , long timeoutDuration , java.util.concurrent.TimeUnit timeoutUnit ) { return target ; }
protected void onResume ( ) { super . onResume ( ) ; updateUi ( ) ; initSleepPolicyPreference ( ) ; refreshMacAddress ( ) ; }
private native void open ( java.lang.String name , boolean append ) throws java.io.FileNotFoundException ;
void addSigningConfig ( com.android.build.gradle.internal.dsl.SigningConfigDsl signingConfigDsl ) { signingConfigs [ signingConfigDsl.name ] = signingConfigDsl ; }
public native boolean setReadOnly ( java.io.File f ) ;
public void testCookieStoreAddAcceptsConflictingUri ( ) throws java.net.URISyntaxException { java.net.CookieStore cookieStore = new java.net.CookieManager ( ) . getCookieStore ( ) ; java.net.HttpCookie cookieA = new java.net.HttpCookie ( "a" , "android" ) ; cookieA.setDomain ( ".android.com" ) ; cookieA.setPath ( "/source/" ) ; cookieStore.add ( new java.net.URI ( "http://google.com/source/" ) , cookieA ) ; assertEquals ( java.util.Arrays.asList ( cookieA ) , cookieStore.getCookies ( ) ) ; }
public static java.util.List < java.lang.String > readLines ( java.io.File file , java.nio.charset.Charset charset ) throws java.io.IOException { return com.google.common.io.CharStreams.readLines ( com.google.common.io.Files.newReaderSupplier ( file , charset ) ) ; }
public void getUpdatePackageFile_throwsErrorIfStreaming ( ) throws java.lang.Exception { com.example.android.systemupdatersample.UpdateConfig config = com.example.android.systemupdatersample.UpdateConfig.fromJson ( com.example.android.systemupdatersample.UpdateConfigTest.JSON_STREAMING ) ; thrown.expect ( java.lang.RuntimeException.class ) ; config.getUpdatePackageFile ( ) ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsFloatFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( float ) ( java.lang.StrictMath.max ( args.in , args.in1 ) ) ) ; }
public void dump ( ) { this . fRData.dump ( ) ; }
public void testVFE8 ( ) { try { dot.junit.opcodes.filled_new_array.d.T_filled_new_array_10 T = new dot.junit.opcodes.filled_new_array.d.T_filled_new_array_10 ( ) ; T.run ( ) ; fail ( "expected a NoClassDefFoundError exception" ) ; } catch ( java.lang.NoClassDefFoundError t ) { } }
public static void initialize ( ) { if ( org.chromium.base.metrics.RecordHistogram.sIsDisabledForTests ) return ; org.chromium.base.metrics.RecordHistogram.nativeInitialize ( ) ; }
public void run ( ) { if ( myDisposed ) { result.setRejected ( ) ; } else { removeDeferred ( ) . notifyWhenDone ( result ) ; } }
public static com.android.server.wifi.ScanResults createWithNoIE ( int id , int ... freqs ) { return new com.android.server.wifi.ScanResults ( id , ( - 1 ) , com.android.server.wifi.ScanResults.generateNativeResults ( false , id , freqs ) ) ; }
protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { checkKeyType ( key ) ; }
public void setUp ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo ) throws com.android.tradefed.device.DeviceNotAvailableException , com.android.tradefed.targetprep.BuildError , com.android.tradefed.targetprep.TargetSetupError { startVirtualenv ( buildInfo ) ; setLocalPypiPath ( ) ; installDeps ( buildInfo ) ; }
public void onHostCardEmulationData ( byte [ ] data ) { if ( ( mCardEmulationManager ) != null ) { mCardEmulationManager.onHostCardEmulationData ( data ) ; } }
void execute ( com.android.build.gradle.ndk.internal.List < java.lang.String > args ) { args.removeAll ( "-Xlinker" ) ; }
public void onListenerConnected ( ) { super . onListenerConnected ( ) ; mDND = getCurrentInterruptionFilter ( ) ; android.util.Log.d ( com.android.cts.verifier.notifications.MockListener.TAG , ( "initial value of CurrentInterruptionFilter is " + ( mDND ) ) ) ; }
public int getMinSdk ( ) { return mProject.getDefaultConfig ( ) . getProductFlavor ( ) . getMinSdkVersion ( ) ; }
public android.telephony.VisualVoicemailSmsFilterSettings getSystemVisualVoicemailSmsFilterSettings ( java.lang.String packageName , int subId ) { enforceReadPrivilegedPermission ( ) ; return com.android.phone.VisualVoicemailSmsFilterConfig.getVisualVoicemailSmsFilterSettings ( mPhone.getContext ( ) , packageName , subId ) ; }
public java.lang.String getStringFormTarget ( ) { return ( ( enumTypeLocater.getStringFormTarget ( ) ) + "#" ) + ( constantName ) ; }
public static java.util.Collection ipSecConfigs ( ) { return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { "8.8.4.4" } , new java.lang.Object [ ] { "2601::10" } } ) ; }
public static com.android.util.Pair < com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo , java.util.List < org.eclipse.swt.graphics.Rectangle > > create ( com.android.ide.common.rendering.api.ViewInfo root ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo.Builder ( ) . create ( root ) ; }
public java.util.Iterator < com.android.jack.ir.ast.JDefinedClassOrInterface > sortAndPrepare ( java.util.Collection < com.android.jack.ir.ast.JDefinedClassOrInterface > types ) { return types.iterator ( ) ; }
void putUnchecked ( int pos , double [ ] dst , int srcOffset , int length ) { throw new java.lang.UnsupportedOperationException ( ) ; }
void setScale ( double scale ) { mHScale.setScale ( scale ) ; mVScale.setScale ( scale ) ; redraw ( ) ; }
private static boolean isAEAD ( java.lang.String algorithm ) { return ( "GCM" . equals ( algorithm ) ) || ( algorithm.contains ( "/GCM/" ) ) ; }
public void test_twoDex_simpleUse ( ) throws java.lang.Exception { dalvik.system.DexClassLoaderTest.test_simpleUse ( dalvik.system.DexClassLoaderTest.Configuration.TWO_DEX ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { com.android.dialer.logging.Logger.get ( context ) . logImpression ( DialerImpression.Type.VOICEMAIL_VVM3_TOS_DECLINE_CHANGE_PIN_SHOWN ) ; android.content.Intent intent = new android.content.Intent ( android.telephony.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL ) ; context.startActivity ( intent ) ; }
public void dispose ( ) { if ( com.android.internal.telephony.cdma.RuimRecords.DBG ) log ( ( "Disposing RuimRecords " + ( this ) ) ) ; mCi.unregisterForOffOrNotAvailable ( this ) ; mCi.unregisterForIccRefresh ( this ) ; super . dispose ( ) ; }
public void testCameraAppDisabled ( ) throws java.lang.Exception { enableSampleDeviceAdmin ( ) ; disableCamera ( ) ; gotoCameraApp ( ) ; org.junit.Assert.assertTrue ( verifyCameraAppDisabled ( ) ) ; }
public com.android.tools.lint.client.api.IDomParser getDomParser ( ) { return new com.android.tools.lint.LintCliXmlParser ( ) ; }
void stopProfileServices ( ) { java.lang.Class [ ] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles ( ) ; if ( ( mRunningProfiles.size ( ) ) == 0 ) { debugLog ( "stopProfileServices() - No profiles services to stop or already stopped." ) ; return ; } setAllProfileServiceStates ( supportedProfileServices , BluetoothAdapter.STATE_OFF ) ; }
public final long getLong ( int index ) { checkNotFreed ( ) ; checkIndex ( index , SizeOf.LONG ) ; return this . block.peekLong ( ( ( offset ) + index ) , order ) ; }
public void setVar ( int index , boolean v ) { mRS.nScriptSetVarI ( getID ( mRS ) , index , ( v ? 1 : 0 ) ) ; }
public abstract com.android.dialer.precall.PreCall bindPreCall ( com.android.dialer.precall.impl.PreCallImpl simulator ) ;
private com.android.server.wifi.hotspot2.PasspointProvider createProvider ( android.net.wifi.hotspot2.PasspointConfiguration config ) { return new com.android.server.wifi.hotspot2.PasspointProvider ( config , mKeyStore , com.android.server.wifi.hotspot2.PasspointProviderTest.PROVIDER_ID ) ; }
protected int getState ( ) { return mState ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder clearEndTime ( ) { bitField0_ = ( bitField0_ ) & ( ~ 256 ) ; endTime_ = 0L ; onChanged ( ) ; return this ; }
public static float FloatMultiplication ( ) { float a ; float b ; float c ; a = Main.$inline$float ( 7.0F ) ; b = Main.$inline$float ( 3.0F ) ; c = a * b ; return c ; }
private native void initNative ( ) ;
public com.android.ide.common.rendering.api.ResourceValue findValue ( java.lang.String name , boolean isFrameworkAttr ) { return mItems.get ( com.android.util.Pair.of ( name , isFrameworkAttr ) ) ; }
protected org.objectweb.asm.util.ASMifier createASMifier ( final java.lang.String name , final int id ) { return new org.objectweb.asm.util.ASMifier ( org.objectweb.asm.Opcodes.ASM4 , name , id ) ; }
public void testVFE7 ( ) { try { java.lang.Class.forName ( "dot.junit.opcodes.aget_byte.d.T_aget_byte_9" ) ; fail ( "expected a verification exception" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
public java.lang.String getApplicationId ( ) { return variantConfiguration.getApplicationId ( ) ; }
public void parsePreferencesClasses ( org.eclipse.core.runtime.IProgressMonitor monitor ) { parseClasses ( monitor , AndroidConstants.CLASS_PREFERENCE , AndroidConstants.CLASS_PREFERENCEGROUP , null ) ; }
public void unpark ( java.lang.Object obj ) { if ( obj instanceof java.lang.Thread ) { ( ( java.lang.Thread ) ( obj ) ) . unpark ( ) ; } else { throw new java.lang.IllegalArgumentException ( "valid for Threads only" ) ; } }
private static long pow16 ( int n ) { if ( n > 10 ) { throw new java.lang.AssertionError ( "Unexpexted pow16 argument" ) ; } long result = n * n ; result *= result ; result *= result ; result *= result ; return result ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldRef fieldRef ) { buildReadField ( destReg , fieldRef , sourcePosition ) ; return false ; }
private static long doDigestRegularFile ( java.io.File file ) throws java.io.IOException { java.io.InputStream in = new java.io.BufferedInputStream ( new java.io.FileInputStream ( file ) ) ; try { return com.intellij.updater.Digester.digestStream ( in ) ; } finally { in.close ( ) ; } }
void stop ( ) { mStatus = android.widget.TextView.Marquee.MARQUEE_STOPPED ; removeMessages ( android.widget.TextView.Marquee.MESSAGE_START ) ; removeMessages ( android.widget.TextView.Marquee.MESSAGE_RESTART ) ; removeMessages ( android.widget.TextView.Marquee.MESSAGE_TICK ) ; resetScroll ( ) ; }
public void onCallStateChanged ( int state , java.lang.String incomingNumber ) { }
static int $opt$DoubleToInt ( double a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( int ) ( a ) ) ; }
public boolean isWifiCallingAvailable ( ) { try { return getITelephony ( ) . isWifiCallingAvailable ( ) ; } catch ( android.os.RemoteException ex ) { return false ; } catch ( java.lang.NullPointerException ex ) { return false ; } }
public void testSuspiciousRegion ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "res/values-ff-rNO: Warning: Suspicious language and region combination ff (Fulah) with NO (Norway): language ff is usually paired with: SN (Senegal), CM (Cameroon), GN (Guinea), MR (Mauritania) [WrongRegion]\n" + "res/values-nb-rSE: Warning: Suspicious language and region combination nb (Norwegian Bokmål) with SE (Sweden): language nb is usually paired with: NO (Norway), SJ (Svalbard and Jan Mayen) [WrongRegion]\n" ) + "res/values-sv-rSV: Warning: Suspicious language and region combination sv (Swedish) with SV (El Salvador): language sv is usually paired with: SE (Sweden), AX (Åland Islands), FI (Finland) [WrongRegion]\n" ) + "0 errors, 3 warnings\n" ) ) , lintProject ( "res/values/strings.xml" , "res/values/strings.xml=>res/values-no/strings.xml" , "res/values/strings.xml=>res/values-nb-rNO/strings.xml" , "res/values/strings.xml=>res/values-nb-rSJ/strings.xml" , "res/values/strings.xml=>res/values-nb-rSE/strings.xml" , "res/values/strings.xml=>res/values-sv-rSV/strings.xml" , "res/values/strings.xml=>res/values-ff-rNO/strings.xml" ) ) ; }
public boolean hasFakeValue ( ) { return getEnumValue ( ) . isFakeValue ( ) ; }
public com.android.sched.util.Version getVersion ( ) { try { return new com.android.sched.util.Version ( "jack-server" , com.android.jack.server.JackHttpServer.class . getClassLoader ( ) ) ; } catch ( java.io.IOException e ) { com.android.jack.server.JackHttpServer.logger.log ( java.util.logging.Level.SEVERE , "Failed to read Jack-server version properties" , e ) ; throw new java.lang.AssertionError ( ) ; } }
public static void computeRound ( android.renderscript.cts.TestRound.ArgumentsFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.round ( args.in ) ; }
public void testControlPoints02 ( ) throws java.lang.Exception { checkVectorConversion ( "test_control_points_02" ) ; }
public void remove ( ) { com.google.common.base.Preconditions.checkState ( ( ( current ) != null ) ) ; removeAllNodes ( current.key ) ; current = null ; }
public com.google.mockwebserver.MockResponse setBody ( byte [ ] body ) { this . body = body ; setHeader ( com.google.mockwebserver.CONTENT_LENGTH , body.length ) ; return this ; }
native void rsnScriptSetTimeZone ( long con , long script , byte [ ] timeZone ) ;
public java.util.List < android.view.inputmethod.InputMethodInfo > getInputMethodList ( ) { try { return mService.getInputMethodList ( ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
native void rsnScriptSetVarV ( int con , int id , int slot , byte [ ] val ) ;
public void testApi1 ( ) throws java.lang.Exception { assertEquals ( "No warnings." , lintProject ( "apicheck/minsdk2.xml=>AndroidManifest.xml" , "res/drawable/ic_launcher.png" ) ) ; }
public void testNull ( ) throws java.lang.Exception { com.android.tools.lint.detector.api.TypeEvaluatorTest.checkExpression ( null , "null" ) ; }
private void loge ( java.lang.String s ) { android.util.Log.e ( com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.LOG_TAG , ( "[CdmaSSM] " + s ) ) ; }
public K getKey ( ) { return key ; }
synchronized boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , ( "disconnect(): device=" + device ) ) ; if ( ! ( checkDevice ( device ) ) ) { return false ; } return disconnectNative ( ) ; }
java.util.Set < java.io.File > getDirectories ( ) ;
public void testVFE5 ( ) { try { java.lang.Class.forName ( "dot.junit.opcodes.if_eq.d.T_if_eq_10" ) ; fail ( "expected a verification exception" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
public static java.lang.String getThumbnailCacheDirectory ( ) { assert ( org.chromium.base.PathUtils.sDirPathFetchTask ) != null : "setDataDirectorySuffix must be called first." ; return org.chromium.base.PathUtils.getDirectoryPath ( org.chromium.base.PathUtils.THUMBNAIL_DIRECTORY ) ; }
private static long tryParseLong ( java.lang.String value , long defValue ) { if ( android.text.TextUtils.isEmpty ( value ) ) return defValue ; try { return java.lang.Long.valueOf ( value ) ; } catch ( java.lang.NumberFormatException e ) { return defValue ; } }
public void getTTYModeResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , int var2 ) { }
public static boolean isEncrypted ( ) { final java.lang.String state = android.os.SystemProperties.get ( "ro.crypto.state" , "" ) ; return "encrypted" . equalsIgnoreCase ( state ) ; }
public abstract java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedMethod > getMethods ( @ com.android.annotations.NonNull java.lang.String name ) ;
public void replaceUserDevice ( com.android.sdklib.devices.Device d ) { synchronized ( com.android.sdklib.devices.DeviceManager.sLock ) { if ( ( com.android.sdklib.devices.DeviceManager.mUserDevices ) == null ) { getUserDevices ( ) ; } removeUserDevice ( d ) ; addUserDevice ( d ) ; } }
public static int getExponent ( float f ) { return sun.misc.FpUtils.getExponent ( f ) ; }
public static void computeCospi ( android.renderscript.cts.TestCospi.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 4 , 128 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.cospi ( args.in , t ) ; }
public void setPeriodicAdvertisingData ( int advertiserId , android.bluetooth.le.AdvertiseData data ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; }
public void onNewOutgoingConnection ( @ android.support.annotation.NonNull com.android.dialer.simulator.impl.SimulatorConnection connection ) { if ( connection.getExtras ( ) . getBoolean ( connectionTag ) ) { com.android.dialer.common.LogUtil.i ( "SimulatorVoiceCall.onNewOutgoingConnection" , "connection created" ) ; handleNewConnection ( connection ) ; connection.setActive ( ) ; } }
public static java.nio.CharBuffer allocate ( int capacity ) { if ( capacity < 0 ) { throw new java.lang.IllegalArgumentException ( ( "capacity < 0: " + capacity ) ) ; } return new java.nio.ReadWriteCharArrayBuffer ( capacity ) ; }
public void setSelectedFrame ( int frame ) { mCurrentFrame = frame ; updateImageCanvas ( ) ; updateFrameStats ( ) ; }
public java.lang.String getSubscriberId ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; return r != null ? r.getIMSI ( ) : "" ; }
private static java.util.List < char [ ] > getPasswords ( char [ ] pwd ) { java.util.List < char [ ] > passwords = new java.util.ArrayList < > ( 3 ) ; com.android.apksigner.PasswordRetriever.addPasswords ( passwords , pwd ) ; return passwords ; }
public int since ( ) { return 8 ; }
public void testFormatDurationHours ( ) throws java.lang.Exception { assertEquals ( "59 minutes" , android.text.format.DateUtils.formatDuration ( 3540000 ) ) ; assertEquals ( "1 hour" , android.text.format.DateUtils.formatDuration ( 3600000 ) ) ; assertEquals ( "48 hours" , android.text.format.DateUtils.formatDuration ( 172800000 ) ) ; }
public void setPackageName ( java.lang.String packageName ) { mPackageName = packageName ; }
static com.android.build.gradle.tasks.annotations.Extractor.ClassItem create ( @ com.android.annotations.NonNull java.lang.String classFqn ) { classFqn = com.android.build.gradle.tasks.annotations.ApiDatabase.getRawClass ( classFqn ) ; return new com.android.build.gradle.tasks.annotations.Extractor.ClassItem ( classFqn ) ; }
static java.lang.reflect.Method getStartFinalizer ( java.lang.Class < ? > finalizer ) { try { return finalizer.getMethod ( "startFinalizer" , java.lang.Class.class , java.lang.Object.class ) ; } catch ( java.lang.NoSuchMethodException e ) { throw new java.lang.AssertionError ( e ) ; } }
public com.android.ims.internal.IImsVideoCallProvider getVideoCallProvider ( ) { return null ; }
public void onLocationChanged ( android.location.Location location ) { synchronized ( this ) { receivedGpsLocationLocked ( location ) ; } }
private void setCaptivePortalMode ( int mode ) { android.content.ContentResolver cr = mServiceContext.getContentResolver ( ) ; Settings.Global.putInt ( cr , Settings.Global.CAPTIVE_PORTAL_MODE , mode ) ; }
java.util.Set < java.lang.String > getSupportedAbis ( ) ;
protected boolean assertTrue ( java.lang.String message , boolean condition ) { return handleAssert ( condition , message , "true" , null ) ; }
public void serviceDied ( long cookie ) ;
public void msg ( java.lang.String message , int level , boolean incCount , boolean newln ) { if ( ( delegate ) != null ) { delegate.msg ( message , level , incCount , newln ) ; } }
public static native java.lang.String getDexFileOutputPath ( java.lang.String fileName , java.lang.String instructionSet ) throws java.io.FileNotFoundException ;
public static com.android.test.common.fixture.GradleTestProject.Builder builder ( ) { return new com.android.test.common.fixture.GradleTestProject.Builder ( ) ; }
private void checkGraphic ( java.lang.String baseName , com.android.assetstudiolib.GraphicGenerator.Shape shape ) throws java.io.IOException { checkGraphic ( baseName , shape , 1 , "notification" , 12 ) ; }
private int remapConstantIndex ( int constantIndex ) { return constantIndexMap [ constantIndex ] ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranch ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; branch_ = value ; onChanged ( ) ; return this ; }
public void onScaleChangedScaled ( float oldScale , float newScale ) { org.chromium.content.common.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , " onScaleChangedScaled" ) ; mWebViewClient.onScaleChanged ( mWebView , oldScale , newScale ) ; org.chromium.content.common.TraceEvent.end ( ) ; }
public android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex ( int direction , java.net.InetAddress remoteAddress , int requestedSpi ) throws android.net.IpSecManager.ResourceUnavailableException , android.net.IpSecManager.SpiUnavailableException { if ( requestedSpi == ( android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX ) ) { throw new java.lang.IllegalArgumentException ( "Requested SPI must be a valid (non-zero) SPI" ) ; } return new android.net.IpSecManager.SecurityParameterIndex ( mService , direction , remoteAddress , requestedSpi ) ; }
private void onLocaleChange ( ) { if ( ( mDisableUpdates ) > 0 ) { return ; } if ( ( computeCurrentConfig ( false ) ) && ( ( mListener ) != null ) ) { mListener.onConfigurationChange ( ) ; } }
public int getTargetSdk ( ) { int targetSdk = mProject.getDefaultConfig ( ) . getProductFlavor ( ) . getTargetSdkVersion ( ) ; if ( targetSdk != ( - 1 ) ) { return targetSdk ; } return targetSdk ; }
public boolean apply ( E input ) { return ( predicate.apply ( input ) ) && ( ! ( collection.contains ( input ) ) ) ; }
public void compareBouncycastleStructure ( ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.BOOTCLASSPATH , null , com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.SOURCELIST , false , true , 0.4F , com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.JARJAR_RULES , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsUshortUshortUshort args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( short ) ( java.lang.StrictMath.max ( ( ( args.inV1 ) & 65535 ) , ( ( args.inV2 ) & 65535 ) ) ) ) ; }
public void onSearchComplete ( java.lang.String address , int status ) throws android.os.RemoteException { }
protected void gotoKeyguard ( ) throws com.android.tradefed.device.DeviceNotAvailableException { sleepDevice ( ) ; wakeUpDevice ( ) ; }
public static native int SSL_write_BIO ( long sslNativePointer , byte [ ] source , int length , long sinkBioRef , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc ) throws java.io.IOException ;
public boolean matchesAllOf ( java.lang.CharSequence sequence ) { return original.matchesNoneOf ( sequence ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JCharLiteral expr ) { performCommonChecks ( expr ) ; com.android.jack.ir.ast.JCharLiteral other = otherOrMe ( expr ) ; ensure ( ( ( expr.getValue ( ) ) == ( other.getValue ( ) ) ) ) ; }
public void test43_001 ( ) throws java.lang.Exception { runTest ( "043" , "001" , "" ) ; }
private void advance ( ) throws java.io.IOException { close ( ) ; if ( it.hasNext ( ) ) { in = it.next ( ) . getInput ( ) ; } }
void addMessage ( com.android.manifmerger.MergingReport.Builder report , com.android.manifmerger.MergingReport.Record.Severity severity , java.lang.String message ) { report.addMessage ( getOwnerElement ( ) . getDocument ( ) . getSourceLocation ( ) , getLine ( ) , getColumn ( ) , severity , message ) ; }
public static synchronized void setDefault ( java.util.Locale newLocale ) { java.util.Locale.setDefault ( java.util.Locale.Category.DISPLAY , newLocale ) ; java.util.Locale.setDefault ( java.util.Locale.Category.FORMAT , newLocale ) ; java.util.Locale.defaultLocale = newLocale ; libcore.icu.ICU.setDefaultLocale ( newLocale.toLanguageTag ( ) ) ; }
public V setValue ( V value ) { V oldValue = node.value ; node.value = value ; return oldValue ; }
public void fatal ( java.lang.String id ) { severities.put ( id , Severity.FATAL ) ; }
public void test_with_longTemporalField_nanoOfDay ( ) { for ( long i : testPoints ( 86400000000000L ) ) { java.time.LocalTime test = TEST_12_30_40_987654321.with ( java.time.temporal.ChronoField.NANO_OF_DAY , i ) ; org.testng.Assert.assertEquals ( test , java.time.LocalTime.ofNanoOfDay ( i ) ) ; } }
private void parseAtr ( java.lang.String atr ) { mIsEuicc = false ; }
private com.android.rs.test.Byte4 pack_b4 ( byte [ ] val ) { assert ( val.length ) == 4 ; return new com.android.rs.test.Byte4 ( val [ 0 ] , val [ 1 ] , val [ 2 ] , val [ 3 ] ) ; }
public com.android.dx.util.ByteArray slice ( int start , int end ) { checkOffsets ( start , end ) ; return new com.android.dx.util.ByteArray ( bytes , ( start + ( this . start ) ) , ( end + ( this . start ) ) ) ; }
public void setEras ( java.lang.String [ ] newEras ) { eras = java.util.Arrays.copyOf ( newEras , newEras.length ) ; }
public java.lang.String getAlgorithmName ( ) { return cipher.getAlgorithmName ( ) ; }
public void println ( com.android.ahat.DocString string ) ;
public void Print ( ) { java.lang.System.out.println ( ( ( ( art.Test988.whitespace ( cnt ) ) + "=> " ) + ( m ) ) ) ; }
private void inlinedForFalse ( boolean value , java.lang.Iterable it ) { if ( value ) { if ( Main.doThrow ) { throw new java.lang.Error ( "" ) ; } } }
synchronized boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "connect(): device=" + device ) ) ; } return connectNative ( com.android.bluetooth.Utils.getByteAddress ( device ) ) ; }
public java.util.List < java.io.File > getClasspath ( ) { return getFilesFromPathString ( classpath ) ; }
private static < T > T expectSoon ( T mock ) { return org.mockito.Mockito.verify ( mock , org.mockito.Mockito.timeout ( 100 ) ) ; }
private static int sign32 ( int x ) { return java.lang.Integer.signum ( x ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.Locale create ( @ com.android.annotations.NonNull com.android.ide.common.resources.configuration.LanguageQualifier language ) { return new com.android.ide.eclipse.adt.internal.editors.layout.configuration.Locale ( language , com.android.ide.eclipse.adt.internal.editors.layout.configuration.Locale.ANY_REGION ) ; }
private void processIccRecordEvents ( int eventCode ) { switch ( eventCode ) { case RuimRecords.EVENT_MWI : notifyMessageWaitingIndicator ( ) ; break ; default : android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , ( "Unknown icc records event code " + eventCode ) ) ; break ; } }
public int getShadowColor ( ) { return mTextPaint.shadowColor ; }
public void testGetSuggestedEscape ( ) { assertEquals ( "C:\\\\my\\\\path\\\\to\\\\sdk" , com.android.tools.lint.checks.PropertyFileDetector.getSuggestedEscape ( "Windows file separators (\\) must be escaped (\\\\); use C:\\\\my\\\\path\\\\to\\\\sdk" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; }
public org.junit.runner.Runner runnerForClass ( java.lang.Class < ? > testClass ) throws java.lang.Throwable { if ( mSkipExecution ) { return new com.android.test.runner.junit4.NonExecutingJUnit4ClassRunner ( testClass ) ; } if ( hasInjectedFields ( testClass ) ) { return new com.android.test.runner.junit4.AndroidJUnit4ClassRunner ( testClass , mInstrumentation ) ; } return null ; }
public void reset ( ) { java.lang.System.arraycopy ( IV , 0 , counter , 0 , counter.length ) ; cipher.reset ( ) ; }
public static long max ( long a , long b ) { return a >= b ? a : b ; }
public abstract void clear ( ) ;
public void run ( ) { clearView ( ) ; }
public static int testTrueBranch ( int x , int y ) { int z ; if ( Main.inlineTrue ( ) ) { z = x + y ; } else { z = x - y ; } return z ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( new com.example.plasma.PlasmaView ( this ) ) ; }
synchronized void nAllocationRead ( long id , float [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public void onSubscriptionsChanged ( ) { if ( android.telephony.SubscriptionManager.DBG ) log ( "callback: received, sendEmptyMessage(0) to handler" ) ; mHandler.sendEmptyMessage ( 0 ) ; }
private static synchronized void clearA2dpService ( ) { com.android.bluetooth.a2dp.A2dpService.sAd2dpService = null ; }
public void testRunStarted ( int testCount ) ;
public void test512 ( ) throws java.lang.Exception { org.conscrypt.ChainStrengthAnalyzerTest.assertBad ( org.conscrypt.ChainStrengthAnalyzerTest.SHORT_PEM , "Short modulus check did not fail as expected" ) ; }
public boolean isDualBandSupported ( ) { return mContext.getResources ( ) . getBoolean ( com.android.internal.R.bool.config_wifi_dual_band_support ) ; }
private static boolean isSslCheckRelaxed ( ) { return ( "1" . equals ( android.os.SystemProperties.get ( "ro.debuggable" ) ) ) && ( "yes" . equals ( android.os.SystemProperties.get ( "socket.relaxsslcheck" ) ) ) ; }
private java.io.File getTempFolder ( java.lang.String osBasePath ) { java.io.File baseTempFolder = new java.io.File ( osBasePath , "temp" ) ; return baseTempFolder ; }
public void testRevocable ( ) { assertTrue ( com.android.tools.lint.checks.PermissionRequirement.isRevocablePermission ( "android.permission.ACCESS_FINE_LOCATION" ) ) ; assertTrue ( com.android.tools.lint.checks.PermissionRequirement.isRevocablePermission ( "android.permission.ACCESS_COARSE_LOCATION" ) ) ; assertFalse ( com.android.tools.lint.checks.PermissionRequirement.isRevocablePermission ( "android.permission.UNKNOWN_PERMISSION_NAME" ) ) ; }
public static boolean isGreaterThanN ( ) { return ( ( Build.VERSION.SDK_INT ) > 24 ) || ( Build.VERSION.CODENAME.equals ( "NMR1" ) ) ; }
public com.android.sdklib.ISystemImage getSystemImage ( java.lang.String abiType ) { return null ; }
synchronized void nScriptSetVarI ( long id , int slot , int val ) { validate ( ) ; rsnScriptSetVarI ( mContext , id , slot , val ) ; }
public int hashCode ( ) { return icuColl.hashCode ( ) ; }
public void waitForEvent ( int count ) { for ( int i = 0 ; i < count ; i ++ ) { try { synchronized ( this ) { wait ( 500 ) ; } } catch ( java.lang.InterruptedException ignored ) { } } }
public com.android.internal.telephony.IccCard getIccCard ( ) { return com.android.internal.telephony.uicc.UiccController.getInstance ( ) . getUiccProfileForPhone ( mPhoneId ) ; }
protected void onResume ( ) { super . onResume ( ) ; int mask = 0 ; mask |= android.hardware.SensorManager.SENSOR_ACCELEROMETER ; mSensorManager.registerListener ( mListener , mask , SensorManager.SENSOR_DELAY_FASTEST ) ; }
private static int sign64 ( long x ) { return java.lang.Long.signum ( x ) ; }
public void testVFE5 ( ) { try { new dot.junit.opcodes.invoke_interface.d.T_invoke_interface_5 ( new dot.junit.opcodes.invoke_interface.ITestImpl ( ) ) ; fail ( "expected VerifyError" ) ; } catch ( java.lang.VerifyError t ) { } }
java.util.List < com.google.currysrc.api.transform.TransformRule > getTransformRules ( java.io.File file ) ;
public void testWrongNegativeColumnIndex ( ) { try { android.support.test.espresso.matcher.CursorMatchers.withRowInt ( ( - 1 ) , android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER ) . matches ( cursor ) ; fail ( "Expected IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException iae ) { } }
public void testBackFromTheDead ( ) throws java.lang.Exception { try { new libcore.java.lang.ref.FinalizeTest.ConstructionFails ( ) ; } catch ( java.lang.AssertionError expected ) { } libcore.java.lang.ref.FinalizationTester.induceFinalization ( ) ; assertTrue ( "object whose constructor threw was not finalized" , libcore.java.lang.ref.FinalizeTest.ConstructionFails.finalized ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; pdq = new com.android.ide.common.resources.configuration.PixelDensityQualifier ( ) ; config = new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; }
private long getLowStorageThreshold ( ) { @ java.lang.SuppressWarnings ( value = "deprecation" ) final long lowThreshold = android.os.storage.StorageManager.from ( this ) . getStorageLowBytes ( mDataDir ) ; if ( lowThreshold == 0 ) { android.util.Log.e ( com.android.server.pm.BackgroundDexOptService.TAG , "Invalid low storage threshold" ) ; } return lowThreshold ; }
java.util.Collection < ? extends com.android.sched.vfs.BaseVElement > list ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir dir ) { java.util.Collection < ? extends com.android.sched.vfs.BaseVElement > elements = vfs.list ( dir ) ; for ( com.android.sched.vfs.BaseVElement element : elements ) { element.changeVFS ( this ) ; } return elements ; }
public boolean onPrepareOptionsMenu ( com.android.stk.Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; menu.findItem ( StkApp.MENU_ID_END_SESSION ) . setVisible ( true ) ; menu.findItem ( StkApp.MENU_ID_HELP ) . setVisible ( mStkInput.helpAvailable ) ; return true ; }
public void onCallAdded ( com.android.server.telecom.Call call ) { updateHeadsetWithCallState ( false ) ; }
public byte [ ] getEncoded ( org.bouncycastle.crypto.params.AsymmetricKeyParameter keyParameter ) { return ( ( org.bouncycastle.crypto.params.ECPublicKeyParameters ) ( keyParameter ) ) . getQ ( ) . getEncoded ( ) ; }
public void applyTransportModeTransform ( java.net.Socket socket , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromSocket ( socket ) ) { applyTransportModeTransform ( pfd , transform ) ; } }
void setUp ( ) { status = READY ; com.android.cts.verifier.notifications.MockListener.MockListener.setHints ( mContext , MockListener.HINT_HOST_DISABLE_CALL_EFFECTS ) ; delay ( ) ; }
public void getCallForwardingOption ( int commandInterfaceCFReason , android.os.Message onComplete ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "getCallForwardingOption: not possible in CDMA" ) ; }
public void testExtractDecodeEditEncodeMuxAudio ( ) throws java.lang.Throwable { setSize ( 1280 , 720 ) ; setSource ( R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz ) ; setCopyAudio ( ) ; setVerifyAudioFormat ( ) ; android.media.cts.ExtractDecodeEditEncodeMuxTest.TestWrapper.runTest ( this ) ; }
private static int transportToLegacyType ( int transport ) { switch ( transport ) { case TRANSPORT_ETHERNET : return android.net.ConnectivityManager.TYPE_ETHERNET ; case TRANSPORT_WIFI : return android.net.ConnectivityManager.TYPE_WIFI ; case TRANSPORT_CELLULAR : return android.net.ConnectivityManager.TYPE_MOBILE ; default : return android.net.ConnectivityManager.TYPE_NONE ; } }
public void testThatMethodWithOutAnnotationIsNotReportedAsBeingAnnotated ( ) throws java.lang.Exception { assertFalse ( hasExampleAnnotation ( android.test.suitebuilder.annotation.HasAnnotationTest.ClassWithoutAnnotation.class , "testWithoutAnnotation" ) ) ; }
public void terminate ( int reason ) { }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( "arttest" ) ; JniTest.testFindClassOnAttachedNativeThread ( ) ; JniTest.testCallStaticVoidMethodOnSubClass ( ) ; JniTest.testGetMirandaMethod ( ) ; }
public int queryCLIR ( ) throws android.os.RemoteException { return - 1 ; }
public static void computeHypot ( android.renderscript.cts.TestHypot.ArgumentsFloatFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 4 ; args.out = ( ( float ) ( java.lang.StrictMath.hypot ( args.inX , args.inY ) ) ) ; }
public java.util.Collection < com.android.jack.ir.ast.JAnnotationType > getAnnotationTypes ( ) { loader.ensureAnnotations ( this ) ; return annotations.getAnnotationTypes ( ) ; }
public static boolean isInternalArrayInterfaceName ( java.lang.String internalClassName ) { return ( ( ClassConstants.INTERNAL_NAME_JAVA_LANG_OBJECT.equals ( internalClassName ) ) || ( ClassConstants.INTERNAL_NAME_JAVA_LANG_CLONEABLE.equals ( internalClassName ) ) ) || ( ClassConstants.INTERNAL_NAME_JAVA_IO_SERIALIZABLE.equals ( internalClassName ) ) ; }
public boolean await ( ) throws java.lang.InterruptedException { android.util.Log.i ( mTag , ( "Number of GPS Navigation Message received = " + ( getEvents ( ) . size ( ) ) ) ) ; return android.location.cts.TestUtils.waitFor ( mCountDownLatch ) ; }
public static java.lang.invoke.VarHandle byteBufferViewVarHandle ( java.lang.Class < ? > viewArrayClass , java.nio.ByteOrder byteOrder ) throws java.lang.IllegalArgumentException { java.lang.invoke.MethodHandles.unsupported ( "MethodHandles.byteBufferViewVarHandle()" ) ; return null ; }
public void inputChanged ( org.eclipse.jface.viewers.Viewer viewer , java.lang.Object oldInput , java.lang.Object newInput ) { if ( newInput instanceof com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository ) { mResources = ( ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository ) ( newInput ) ) ; } }
public static void assertFalse ( boolean condition ) { if ( condition ) throw new java.lang.RuntimeException ( "AssertionFailedError: condition was true" ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { mFile.close ( ) ; } catch ( java.io.IOException e ) { } finally { super . finalize ( ) ; } }
public void setScale ( double scale ) { org.eclipse.swt.graphics.Image thumbnail = mThumbnail ; mThumbnail = null ; if ( thumbnail != null ) { thumbnail.dispose ( ) ; } mScale = scale ; }
public java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > getInternalBlocksUnordered ( ) { return com.google.common.collect.Lists.newArrayList ( getInternalBasicBlocks ( ) ) ; }
public com.google.common.collect.ImmutableSortedMap < K , V > build ( ) { com.google.common.collect.ImmutableSortedMap.sortEntries ( entries , comparator ) ; com.google.common.collect.ImmutableSortedMap.validateEntries ( entries , comparator ) ; return com.google.common.collect.ImmutableSortedMap.fromSortedEntries ( comparator , entries ) ; }
private static native void bindFunctionsForClass ( java.lang.Class < ? > target ) ;
public com.google.common.collect.ImmutableList < com.android.dialer.precall.PreCallAction > getActions ( ) { return com.google.common.collect.ImmutableList.of ( ) ; }
int size ( ) { return ( data.length ) * ( java.lang.Long.SIZE ) ; }
private static native void closeDexFile ( int cookie ) ;
public static boolean $noinline$equalsConstString0 ( java.lang.String s ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return s.equals ( "" ) ; }
public void TestContext ( ) { com.ibm.icu.text.Transliterator.Position pos = new com.ibm.icu.text.Transliterator.Position ( 0 , 2 , 0 , 1 ) ; expect ( "de > x; {d}e > y;" , "de" , "ye" , pos ) ; expect ( "ab{c} > z;" , "xadabdabcy" , "xadabdabzy" ) ; }
public com.android.ims.internal.IImsCallSession createCallSessionInterface ( android.telephony.ims.ImsCallProfile profile ) throws android.os.RemoteException { return mCompatFeature.createCallSession ( mSessionId , profile ) ; }
public android.telephony.ims.ImsCallProfile createCallProfile ( int callSessionType , int callType ) { try { return mCompatFeature.createCallProfile ( mSessionId , callSessionType , callType ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e.getMessage ( ) ) ; } }
static com.android.manifmerger.ManifestModel.NodeTypes fromXmlSimpleName ( java.lang.String xmlSimpleName ) { java.lang.String constantName = com.android.utils.XmlUtils.xmlNameToConstantName ( xmlSimpleName ) ; return com.android.manifmerger.ManifestModel.NodeTypes.valueOf ( constantName ) ; }
public java.util.Collection < com.android.jack.ir.ast.JAnnotationType > getAnnotationTypes ( ) { return annotations.getAnnotationTypes ( ) ; }
public void err ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { mLogger.error ( null , line ) ; } }
protected com.android.build.gradle.internal.variant.ApkVariantOutputData doCreateOutput ( com.android.build.OutputFile.OutputType outputType , java.util.Collection < com.android.build.FilterData > filters ) { return new com.android.build.gradle.internal.variant.ApkVariantOutputData ( outputType , filters , this ) ; }
public java.util.List < com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem > getResourceItemsOfType ( com.android.resources.ResourceType type ) { return mPublicResourceMap.get ( type ) ; }
public java.util.Iterator < com.android.jack.ir.ast.JMethodId > iterator ( ) { return virtualMethods.iterator ( ) ; }
private boolean isBluetoothPersistedStateOnBluetooth ( ) { return ( Settings.Global.getInt ( mContentResolver , Settings.Global.BLUETOOTH_ON , com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH ) ) == ( com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH ) ; }
private libcore.util.ZoneInfo createZoneInfo ( int [ ] [ ] transitionTimes , int [ ] [ ] transitionTypes ) throws java.lang.Exception { return createZoneInfo ( getName ( ) , transitionTimes , transitionTypes , java.lang.System.currentTimeMillis ( ) ) ; }
public void visitMethodInsn ( final int opcode , final java.lang.String owner , final java.lang.String name , final java.lang.String desc ) { check ( owner , ( name + desc ) ) ; }
public boolean onMenuItemClick ( android.view.MenuItem item ) { phone.getPdpContextList ( null ) ; return true ; }
public void onMessageWaitingIndicatorChanged ( boolean visible ) { if ( com.android.phone.CallNotifier.VDBG ) log ( ( ( ( "onMessageWaitingIndicatorChanged(): " + ( this . mSubId ) ) + " " ) + visible ) ) ; mApplication.notificationMgr.updateMwi ( this . mSubId , visible ) ; }
public void dispose ( ) { clearPostDialListeners ( ) ; releaseAllWakeLocks ( ) ; }
public static float $noinline$floatSubAddSimplifyRight ( float x , float y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } float sub = x - y ; return y + sub ; }
public com.android.sched.vfs.InputVFile getBinary ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath , @ javax.annotation.Nonnull com.android.jack.library.BinaryKind binaryKind ) throws com.android.jack.library.BinaryDoesNotExistException ;
public java.lang.String getNamespace ( ) { if ( ( mNamespace ) == null ) { mNamespace = com.android.ide.common.layout.LayoutConstants.ANDROID_URI ; if ( ! ( layout.getFqcn ( ) . equals ( com.android.ide.common.layout.LayoutConstants.FQCN_GRID_LAYOUT ) ) ) { mNamespace = mRulesEngine.getAppNameSpace ( ) ; } } return mNamespace ; }
protected int getFirstItemPosition ( ) { if ( ( ( mSeriesRecording ) != null ) && ( ( mSeriesRecording.getState ( ) ) == ( com.android.tv.dvr.SeriesRecording.STATE_SERIES_STOPPED ) ) ) { return 0 ; } return super . getFirstItemPosition ( ) ; }
private void printLines ( final java.util.ArrayList < java.lang.String > lines ) { for ( java.lang.String line : lines ) { android.util.Log.d ( android.media.cts.WifiStatus.TAG , line ) ; } }
public void setHs20 ( boolean hs20 ) { if ( hs20 ) { doBooleanCommand ( "SET HS20 1" ) ; } else { doBooleanCommand ( "SET HS20 0" ) ; } }
private boolean satisfiedByNetCapabilities ( android.net.NetworkCapabilities nc , boolean onlyImmutable ) { long networkCapabilities = this . mNetworkCapabilities ; if ( onlyImmutable ) { networkCapabilities = networkCapabilities & ( ~ ( android.net.NetworkCapabilities.MUTABLE_CAPABILITIES ) ) ; } return ( ( nc.mNetworkCapabilities ) & networkCapabilities ) == networkCapabilities ; }
public void visitRuntimeInvisibleParameterAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.RuntimeInvisibleParameterAnnotationsAttribute runtimeInvisibleParameterAnnotationsAttribute ) { if ( ( runtimeInvisibleParameterAnnotationsAttribute.u2parametersCount ) > 0 ) { runtimeInvisibleParameterAnnotationsAttribute.accept ( clazz , method , attributeVisitor ) ; } }
public void notifyPackageInstalled ( android.content.pm.PackageInfo info , int userId ) { cachePackageCodeLocation ( info , userId ) ; }
public boolean isEnabled ( com.intellij.openapi.actionSystem.AnActionEvent e ) { return ( ( selectedConfiguration ) != null ) && ( selectedConfiguration.isEditable ( ) ) ; }
public void onCallForwardingIndicatorChanged ( boolean visible ) { if ( com.android.phone.CallNotifier.VDBG ) log ( ( ( ( "onCallForwardingIndicatorChanged(): " + ( this . mSubId ) ) + " " ) + visible ) ) ; mApplication.notificationMgr.updateCfi ( this . mSubId , visible ) ; }
public static com.android.dialer.spam.status.SimpleSpamStatus create ( boolean isSpam , @ android.support.annotation.Nullable java.lang.Long timestampMillis ) { return new com.android.dialer.spam.status.AutoValue_SimpleSpamStatus ( isSpam , com.google.common.base.Optional.fromNullable ( timestampMillis ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; defaultHandler = java.net.CookieHandler.getDefault ( ) ; cookieManager = new java.net.CookieManager ( createCookieStore ( ) , null ) ; cookieStore = cookieManager.getCookieStore ( ) ; }
public static void computeRound ( android.renderscript.cts.TestRound.ArgumentsFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.round ( args.in ) ; }
public boolean pageUp ( boolean top ) { checkThread ( ) ; if ( DebugFlags.TRACE_API ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "pageUp" ) ; return mProvider.pageUp ( top ) ; }
public java.util.List < com.android.jack.server.PackageLevel > getLevels ( ) { return java.util.Arrays.asList ( new com.android.jack.server.PackageLevel ( "" , java.util.logging.Level.WARNING ) , new com.android.jack.server.PackageLevel ( "com.android.jack" , java.util.logging.Level.FINE ) , new com.android.jack.server.PackageLevel ( "com.android.sched" , java.util.logging.Level.WARNING ) ) ; }
public java.util.Set < K > keySet ( ) { return multimap ( ) . keySet ( ) ; }
private static void addZipEntry ( java.util.zip.ZipOutputStream zipOutputStream , java.lang.String name ) throws java.io.IOException { libcore.tzdata.update2.TimeZoneDistroTest.addZipEntry ( zipOutputStream , name , "a" . getBytes ( java.nio.charset.StandardCharsets.US_ASCII ) ) ; }
public java.io.OutputStream getOutputStream ( ) throws java.io.IOException { checkOpenAndConnected ( ) ; if ( isOutputShutdown ( ) ) { throw new java.net.SocketException ( "Socket output is shutdown" ) ; } return new java.nio.SocketChannelImpl.SocketChannelOutputStream ( channel ) ; }
private static void _put ( long a , byte b ) { java.nio.Bits.unsafe.putByte$ ( a , b ) ; }
public static < K , V > org.hamcrest.Matcher < java.util.Map < K , V > > hasKey ( K key ) { return org.hamcrest.collection.IsMapContaining.hasKey ( org.hamcrest.collection.IsMapContaining.equalTo ( key ) ) ; }
void setAddress ( java.lang.String callId , android.net.Uri address , int presentation ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.setAddress ( callId , address , presentation ) ; } catch ( android.os.RemoteException e ) { } } }
private void initialization ( ) { buffer = java.nio.CharBuffer.allocate ( 1024 ) ; buffer.limit ( 0 ) ; matcher = delimiter.matcher ( buffer ) ; }
public void sendMessageWithSessionInfo ( int message ) { sendMessage ( message , 0 , 0 , com.android.server.telecom.Log.createSubsession ( ) ) ; }
private void addCallWaiting ( java.lang.String number ) { if ( ( getCall ( BluetoothHeadsetClientCall.CALL_STATE_WAITING ) ) == null ) { addCall ( BluetoothHeadsetClientCall.CALL_STATE_WAITING , number ) ; } }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranch ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 2 ; branch_ = value ; onChanged ( ) ; return this ; }
public void reset ( ) { mResult = null ; mMessage = null ; mStackTrace = null ; mReport = null ; mBugReport = null ; mLog = null ; mScreenshot = null ; }
public void setUp ( ) { TEST_2008_6_30_11_30_59_000000500 = java.time.OffsetDateTime.of ( 2008 , 6 , 30 , 11 , 30 , 59 , 500 , tck.java.time.TCKOffsetDateTime.OFFSET_PONE ) ; }
public void test_plus_longTemporalUnit_null ( ) { TEST_12_30_40_987654321.plus ( 1 , ( ( java.time.temporal.TemporalUnit ) ( null ) ) ) ; }
public android.database.Cursor loadInBackground ( ) { return com.android.dialer.searchfragment.nearbyplaces.NearbyPlacesCursor.newInstnace ( getContext ( ) , super . loadInBackground ( ) ) ; }
public void testMissingBackupInTarget23 ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.ALLOW_BACKUP ) ; assertEquals ( ( "" + ( ( ( "AndroidManifest.xml:5: Warning: Should explicitly set android:fullBackupContent to true or false to opt-in to or out of full app data back-up and restore, or alternatively to an @xml resource which specifies which files to backup [AllowBackup]\n" + " <application\n" ) + " ^\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( xml ( "AndroidManifest.xml" , ( "" + ( ( ( ( ( ( ( ( ( ( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.helloworld\" >\n" ) + " <uses-sdk android:targetSdkVersion=\"23\" />" ) + "\n" ) + " <application\n" ) + " android:label=\"@string/app_name\"\n" ) + " android:theme=\"@style/AppTheme\" >\n" ) + " </application>\n" ) + "\n" ) + "</manifest>\n" ) ) ) ) ) ; }
public long getDisconnectedTimeMilli ( ) { if ( ( ( getCurrentState ( ) ) == ( mDisconnectedState ) ) && ( ( mDisconnectedTimeStamp ) != 0 ) ) { long now_ms = java.lang.System.currentTimeMillis ( ) ; return now_ms - ( mDisconnectedTimeStamp ) ; } return 0 ; }
public void testInstallWithMissingBundleVersionFile ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , "001" ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; assertFalse ( installer.install ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public < T > void registerWatcher ( @ javax.annotation.Nonnull java.lang.Class < T > objectClass , @ javax.annotation.Nonnull java.lang.Class < ? extends com.android.sched.util.log.tracer.watcher.ObjectWatcher < ? extends T > > watcherClass ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public static int getFontWidth ( org.eclipse.swt.widgets.Control c ) { org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC ( c ) ; int avgCharWidth = gc.getFontMetrics ( ) . getAverageCharWidth ( ) ; gc.dispose ( ) ; return avgCharWidth ; }
void startAppProblemLocked ( com.android.server.am.ProcessRecord app ) { app.errorReportReceiver = getErrorReportReceiver ( app ) ; skipCurrentReceiverLocked ( app ) ; }
public java.lang.String getNetworkOperatorName ( ) { return getNetworkOperatorName ( android.telephony.TelephonyManager.getDefaultSubscription ( ) ) ; }
void addPlaceHolderInstance ( com.android.ahat.heapdump.AhatInstance placeholder ) { for ( com.android.ahat.heapdump.Site site = this ; site != null ; site = site.mParent ) { site.mObjects.add ( placeholder ) ; } }
public int writeSize ( ) { return com.android.jack.dx.dex.SizeOf.HEADER_ITEM ; }
public int getSimState ( int slotIdx ) { int simState = android.telephony.SubscriptionManager.getSimStateForSlotIdx ( slotIdx ) ; return simState ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsUcharUcharUchar args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( byte ) ( java.lang.StrictMath.max ( ( ( args.inV1 ) & 255 ) , ( ( args.inV2 ) & 255 ) ) ) ) ; }
public abstract void resolveReferences ( com.android.tools.perflib.heap.State state ) ;
public boolean isEnabled ( ) { return false ; }
public static float nextAfter ( float start , double direction ) { return sun.misc.FpUtils.nextAfter ( start , direction ) ; }
public void testIsAssignableFrom_plainView ( ) { android.view.View v = new android.view.View ( context ) ; assertTrue ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.view.View.class ) . matches ( v ) ) ; }
public boolean contains ( java.lang.Object o ) { return com.google.common.collect.Maps.containsEntryImpl ( delegate ( ) , o ) ; }
public static native byte [ ] EC_GROUP_get_order ( long groupCtx ) ;
public static < T > org.junit.internal.matchers.CombinableMatcher < T > either ( org.hamcrest.Matcher < T > matcher ) { return new org.junit.internal.matchers.CombinableMatcher < T > ( matcher ) ; }
public void visitLocalVariableTypeTableAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.CodeAttribute codeAttribute , proguard.classfile.attribute.visitor.LocalVariableTypeTableAttribute localVariableTypeTableAttribute ) { if ( ( optionalAttributeVisitor ) != null ) { localVariableTypeTableAttribute.accept ( clazz , method , codeAttribute , optionalAttributeVisitor ) ; } }
public void getVoiceRadioTechnologyResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , int var2 ) { }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.b2296099Test ( ) ; Main.b2302318Test ( ) ; Main.b2487514Test ( ) ; Main.b5884080Test ( ) ; }
public boolean isTypeUnConditional ( ) { return ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_CFU ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_CF_ALL ) ) ; }
public org.chromium.mojo.system.Watcher getWatcher ( ) { return new org.chromium.mojo.system.impl.WatcherImpl ( ) ; }
public git4idea.branch.VcsCommitStyle getStyle ( int commitIndex , boolean isSelected ) { return git4idea.branch.VcsCommitStyle.foreground ( ( ! ( myNonPickedCommits.contains ( commitIndex ) ) ? com.intellij.ui.JBColor.GRAY : null ) ) ; }
private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream.defaultReadObject ( ) ; if ( ( digits ) == null ) { setZeroDigit ( zeroDigit ) ; } decimalBuf = new char [ 20 ] ; }
public int setBluetoothA2dpDeviceConnectionState ( android.bluetooth.BluetoothDevice device , int state , int profile ) { if ( mAudioHandler.hasMessages ( com.android.server.audio.AudioService.MSG_SET_A2DP_SINK_CONNECTION_STATE , device ) ) { return 0 ; } return setBluetoothA2dpDeviceConnectionStateInt ( device , state , profile , AudioSystem.DEVICE_NONE ) ; }
void unhold ( ) { com.android.internal.util.Preconditions.checkNotNull ( mConnectionService ) ; if ( ( mState ) == ( CallState.ON_HOLD ) ) { mConnectionService.unhold ( this ) ; com.android.server.telecom.Log.event ( this , Log.Events.REQUEST_UNHOLD ) ; } }
public int compareTo ( com.android.dx.dex.TableOfContents.Section section ) { if ( ( off ) != ( section.off ) ) { return ( off ) < ( section.off ) ? - 1 : 1 ; } return 0 ; }
android.net.Uri getAddress ( android.telecom.PhoneAccountHandle handle ) { for ( com.android.services.telephony.TelecomAccountRegistry.AccountEntry entry : mAccounts ) { if ( entry.getPhoneAccountHandle ( ) . equals ( handle ) ) { return entry.mAccount.getAddress ( ) ; } } return null ; }
public static synchronized com.google.i18n.phonenumbers.PhoneNumberUtil getInstance ( ) { if ( ( com.google.i18n.phonenumbers.PhoneNumberUtil.instance ) == null ) { com.google.i18n.phonenumbers.PhoneNumberUtil.setInstance ( com.google.i18n.phonenumbers.PhoneNumberUtil.createInstance ( com.google.i18n.phonenumbers.PhoneNumberUtil.DEFAULT_METADATA_LOADER ) ) ; } return com.google.i18n.phonenumbers.PhoneNumberUtil.instance ; }
public void addIncludedService ( int serverIf , int srvcType , int srvcInstanceId , android.os.ParcelUuid srvcId ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.addIncludedService ( serverIf , srvcType , srvcInstanceId , srvcId.getUuid ( ) ) ; }
public void dispose ( ) { if ( ( mThumbnail ) != null ) { mThumbnail.dispose ( ) ; mThumbnail = null ; } if ( ( mJob ) != null ) { mJob.cancel ( ) ; mJob = null ; } }
public com.android.sched.vfs.OutputVDir getOutputVDir ( ) { return outputVDir ; }
public void loadData ( java.lang.String data , java.lang.String mimeType , java.lang.String encoding ) { loadUrlOnUiThread ( org.chromium.content.browser.LoadUrlParams.createLoadDataParams ( com.android.webview.chromium.WebViewChromium.fixupData ( data ) , com.android.webview.chromium.WebViewChromium.fixupMimeType ( mimeType ) , com.android.webview.chromium.WebViewChromium.isBase64Encoded ( encoding ) ) ) ; }
public void destroy ( ) { com.android.server.telecom.Log.event ( this , Log.Events.DESTROYED ) ; }
protected void doBuildPatchFile ( java.io.File olderFile , java.io.File newerFile , java.util.zip.ZipOutputStream patchOutput ) throws java.io.IOException { }
public void testExitProximity ( ) throws java.lang.Exception { doTestEnterProximity ( ( - 1 ) ) ; mIntentReceiver.clearReceivedIntents ( ) ; updateLocation ( 20 , 20 ) ; waitForReceiveBroadcast ( ) ; assertProximityType ( false ) ; }
public static com.android.dx.rop.annotation.Annotation makeEnclosingClass ( com.android.dx.rop.cst.CstType clazz ) { com.android.dx.rop.annotation.Annotation result = new com.android.dx.rop.annotation.Annotation ( com.android.dx.dex.file.AnnotationUtils.ENCLOSING_CLASS_TYPE , SYSTEM ) ; result.put ( new com.android.dx.rop.annotation.NameValuePair ( com.android.dx.dex.file.AnnotationUtils.VALUE_STRING , clazz ) ) ; result.setImmutable ( ) ; return result ; }
public void callSessionUpdated ( com.android.ims.internal.IImsCallSession i , android.telephony.ims.ImsCallProfile imsCallProfile ) throws android.os.RemoteException { mNewListener.callSessionUpdated ( imsCallProfile ) ; }
public void setVariants ( com.android.build.gradle.internal.tasks.Collection < com.android.build.gradle.internal.variant.BaseVariantData > variants ) { this . variants.addAll ( variants ) ; }
public int startSession ( android.app.PendingIntent incomingCallIntent , com.android.ims.internal.IImsRegistrationListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . startSession ( mSlotId , mSupportedFeature , incomingCallIntent , listener ) ; } }
public java.lang.String getHandshakeApplicationProtocol​() { return delegate.getHandshakeApplicationProtocol​(); }
public void onPostDialContinue ( java.lang.String callId , boolean proceed ) throws android.os.RemoteException { }
public void wifiStartTrackingStateChange ( ) { mService.registerReceiver ( mStateChangeReceiver , mStateChangeFilter ) ; mService.registerReceiver ( mTetherStateReceiver , mTetherFilter ) ; mTrackingWifiStateChange = true ; }
public static com.android.ide.eclipse.adt.internal.wizards.newxmlfile.ResourceNameValidator create ( boolean allowXmlExtension , com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType type ) { boolean isFileType = type != ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType.VALUES ) ; return new com.android.ide.eclipse.adt.internal.wizards.newxmlfile.ResourceNameValidator ( allowXmlExtension , null , isFileType ) ; }
public synchronized void onPlaybackStateChanged ( android.media.session.PlaybackState state ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "onPlaybackStateChanged: state " + ( state.toString ( ) ) ) ) ; scheduleMediaUpdate ( ) ; }
public void testNoWarningBeforeBuild ( ) throws java.lang.Exception { mScopes = null ; assertEquals ( "No warnings." , lintProject ( "bytecode/AndroidManifestWrongRegs.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" ) ) ; }
public void stop ( ) { mRetryCounter = 0 ; mHandler.removeCallbacks ( mRunnable ) ; }
public E next ( ) { if ( hasNext ( ) ) return it.next ( ) ; else throw new java.util.NoSuchElementException ( ) ; }
public void testDeleteSdcardRetainData ( ) { deleteFromRawResource ( PackageManager.INSTALL_EXTERNAL , PackageManager.DONT_DELETE_DATA ) ; }
public boolean containsAll ( java.util.Collection < ? > collection ) { for ( java.lang.Object element : collection ) { if ( ! ( contains ( element ) ) ) { return false ; } } return true ; }
private void enforceModifyPermissionOrCarrierPrivilege ( int subId ) { int permission = mApp.checkCallingOrSelfPermission ( android.Manifest.permission.MODIFY_PHONE_STATE ) ; if ( permission == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return ; } com.android.phone.PhoneInterfaceManager.log ( "No modify permission, check carrier privilege next." ) ; enforceCarrierPrivilege ( subId ) ; }
public void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; props.setProperty ( PkgProps.PKG_MAJOR_REV , java.lang.Integer.toString ( mRevision.getMajor ( ) ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; android.net.ConnectivityManager mCM = getContext ( ) . getSystemService ( android.net.ConnectivityManager.class ) ; mNetwork = mCM.getActiveNetwork ( ) ; }
public final void scheduleSleeping ( android.os.IBinder token , boolean sleeping ) { queueOrSendMessage ( android.app.ActivityThread.H.SLEEPING , token , ( sleeping ? 1 : 0 ) ) ; }
public void onClick ( android.view.View view ) { delegate.swapSimClicked ( ) ; }
public java.lang.String getVersionNameFromManifest ( ) { java.io.File manifestLocation = mDefaultSourceProvider.getManifestFile ( ) ; return com.android.builder.core.VariantConfiguration.sManifestParser.getVersionName ( manifestLocation ) ; }
public java.lang.String getSettingsValue ( ) { final android.content.ContentResolver resolver = mContext.getContentResolver ( ) ; return Settings.Global.getString ( resolver , android.provider.Settings.Global.NETWORK_AVOID_BAD_WIFI ) ; }
public boolean isDirty ( android.content.Context appContext ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; return ! ( com.android.dialer.storage.StorageComponent.get ( appContext ) . unencryptedSharedPrefs ( ) . contains ( com.android.dialer.calllog.datasources.systemcalllog.SystemCallLogDataSource.PREF_LAST_TIMESTAMP_PROCESSED ) ) ; }
public void testDataPathResponderNoConfirmationTimeoutFail ( ) throws java.lang.Exception { testDataPathInitiatorUtility ( false , true , true , false ) ; }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createElement ( java.lang.String xmlName ) { return createElement ( xmlName , null , false ) ; }
public V getValue ( ) { return node.value ; }
public abstract int getSerializedSize ( ) ;
public com.android.tools.perflib.heap.Heap setToDefaultHeap ( ) { return setHeapTo ( 0 , "default" ) ; }
public static native long EVP_PKEY_new_DH ( byte [ ] p , byte [ ] g , byte [ ] pub_key , byte [ ] priv_key ) ;
boolean isValid ( java.lang.String value ) { return android.icu.impl.locale.KeyTypeData.CodepointsTypeHandler.pat.matcher ( value ) . matches ( ) ; }
public java.util.Set < java.io.File > getJniDirectories ( ) { return java.util.Collections.singleton ( new java.io.File ( mRoot , "jni" ) ) ; }
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) throws com.android.sched.util.file.WrongPermissionException { return openWrite ( file , false ) ; }
public void addMatrix ( android.support.v8.renderscript.Matrix3f v ) { mN.addMatrix ( new android.support.v8.renderscript.Matrix3f ( v.getArray ( ) ) ) ; }
org.eclipse.core.resources.IProject getProject ( ) { if ( ( mChooseAssetPage ) != null ) { return mChooseAssetPage.getProject ( ) ; } else { return mInitialProject ; } }
public com.android.internal.telephony.ims.IsimRecords getIsimRecords ( ) { android.util.Log.e ( com.android.internal.telephony.PhoneBase.LOG_TAG , "getIsimRecords() is only supported on LTE devices" ) ; return null ; }
private void writeCharacteristic ( android.bluetooth.BluetoothGattCharacteristic characteristic , java.lang.String writeValue ) { if ( characteristic != null ) { characteristic.setValue ( writeValue ) ; mBluetoothGatt.writeCharacteristic ( characteristic ) ; } }
public void annotateTo ( com.android.jack.dx.dex.file.DexFile file , com.android.jack.dx.util.AnnotatedOutput out , java.lang.String prefix ) { throw new java.lang.RuntimeException ( "unsupported" ) ; }
public android.view.CompatibilityInfoHolder getCompatibilityInfo ( int displayId ) { return displayId == ( android.view.Display.DEFAULT_DISPLAY ) ? mPackageInfo.mCompatibilityInfo : null ; }
public void run ( ) { synchronized ( this ) { loadImage ( ) ; crosshairLocation = model.getCrosshairLocation ( ) ; zoom = model.getZoom ( ) ; } }
public int getSubId ( ) { return com.android.internal.telephony.SubscriptionController.getInstance ( ) . getSubIdUsingPhoneId ( mPhoneId ) ; }
public boolean password ( java.lang.String password ) { return password ( android.security.KeyStore.getPasswordBytes ( password ) ) ; }
private void waitForStagedStatus ( java.lang.String requiredStatus , java.lang.String versionString ) throws java.lang.Exception { com.android.timezone.xts.TimeZoneUpdateHostTest.waitForCondition ( ( ) -> isStagedStatus ( requiredStatus , versionString ) ) ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { return libcore.reflect.AnnotationAccess.getParameterAnnotations ( declaringClassOfOverriddenMethod , dexMethodIndex ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranch ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; branch_ = value ; onChanged ( ) ; return this ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranch ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 2 ; branch_ = value ; onChanged ( ) ; return this ; }
void unregisterAdvertiser ( int advertiserId ) { mAdvertiseNative.unregisterAdvertiserNative ( advertiserId ) ; }
public void onTargetLoaded ( com.android.sdklib.IAndroidTarget target ) { org.eclipse.core.resources.IProject project = getProject ( ) ; if ( ( target != null ) && ( target.equals ( com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTarget ( project ) ) ) ) { updateEditor ( ) ; } }
public java.lang.String [ ] getPeerSupportedSignatureAlgorithms ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void deleteSmsOnRuimResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { }
public boolean accept ( java.io.File pathname ) { return ! ( pathname.getName ( ) . startsWith ( extractedFilePrefix ) ) ; }
public boolean finishConnect ( ) throws java.io.IOException { return false ; }
public void addStaticField ( com.android.tools.perflib.heap.Type type , java.lang.String name , com.android.tools.perflib.heap.Value value ) { mStaticFields.put ( new com.android.tools.perflib.heap.Field ( type , name ) , value ) ; }
public com.android.ide.common.blame.SourcePosition getPosition ( @ com.android.annotations.NonNull org.w3c.dom.Node node ) { return getPosition ( node , ( - 1 ) , ( - 1 ) ) ; }
public void realRun ( ) throws java.lang.InterruptedException { threadStarted.countDown ( ) ; assertEquals ( 1 , p.getPoolSize ( ) ) ; done.await ( ) ; }
public void supplyPuk2 ( java.lang.String puk2 , java.lang.String newPin2 , android.os.Message onComplete ) { synchronized ( mLock ) { mCi.supplyIccPuk2 ( puk2 , newPin2 , onComplete ) ; } }
public java.lang.String getMsisdn ( ) { return mIccRecords.getMsisdnNumber ( ) ; }
private static void verifySingleScanCompletedRecieved ( org.mockito.InOrder order , android.os.Handler handler , int listenerId ) { android.os.Message completedMessage = com.android.server.wifi.scanner.WifiScanningServiceTest.verifyHandleMessageAndGetMessage ( order , handler , WifiScanner.CMD_SINGLE_SCAN_COMPLETED ) ; com.android.server.wifi.scanner.WifiScanningServiceTest.assertSingleScanCompletedMessage ( listenerId , completedMessage ) ; }
public boolean get ( ) { android.net.NetworkCapabilities.NetworkCapabilities caps = mCm.getNetworkCapabilities ( getNetwork ( ) ) ; return ( caps != null ) && ( caps.hasCapability ( com.android.server.NET_CAPABILITY_CAPTIVE_PORTAL ) ) ; }
void cleanup ( ) { if ( ( com.android.bluetooth.btservice.RemoteDevices.mSdpTracker ) != null ) com.android.bluetooth.btservice.RemoteDevices.mSdpTracker.clear ( ) ; if ( ( mDevices ) != null ) mDevices.clear ( ) ; if ( ( mDeviceQueue ) != null ) mDeviceQueue.clear ( ) ; }
void clearClientList ( ) { synchronized ( mClients ) { mClients.clear ( ) ; } }
public void setError ( int code , java.lang.String msg ) { returnCode = code ; returnMsg = msg ; android.util.Slog.w ( com.android.server.pm.PackageManagerService.TAG , msg ) ; }
public static native java.lang.String toUpperCase ( java.lang.String s , java.lang.String localeName ) ;
public void testNotifyOtaspChanged ( ) throws java.lang.Exception { mDefaultPhoneNotifierUT.notifyOtaspChanged ( mPhone , ServiceStateTracker.OTASP_NEEDED ) ; org.mockito.Mockito.verify ( mTelephonyRegisteryMock ) . notifyOtaspChanged ( ServiceStateTracker.OTASP_NEEDED ) ; mDefaultPhoneNotifierUT.notifyOtaspChanged ( mPhone , ServiceStateTracker.OTASP_UNKNOWN ) ; org.mockito.Mockito.verify ( mTelephonyRegisteryMock ) . notifyOtaspChanged ( ServiceStateTracker.OTASP_UNKNOWN ) ; }
private void onDeviceProvisionedChange ( ) { if ( getDataEnabled ( ) ) { mDataEnabledSettings.setUserDataEnabled ( true ) ; teardownRestrictedMeteredConnections ( ) ; onTrySetupData ( Phone.REASON_DATA_ENABLED ) ; } else { mDataEnabledSettings.setUserDataEnabled ( false ) ; onCleanUpAllConnections ( Phone.REASON_DATA_SPECIFIC_DISABLED ) ; } }
protected java.lang.String getCapitalizedBuildTypeName ( ) { return com.android.build.gradle.internal.StringHelper.capitalize ( variantConfiguration.getBuildType ( ) . getName ( ) ) ; }
public final void activityIdle ( android.os.IBinder token , android.content.res.Configuration config ) { final long origId = android.os.Binder.clearCallingIdentity ( ) ; activityIdleInternal ( token , false , config ) ; android.os.Binder.restoreCallingIdentity ( origId ) ; }
public static native int EVP_DigestFinal ( org.conscrypt.NativeRef.EVP_MD_CTX ctx , byte [ ] hash , int offset ) ;
public java.lang.String getName ( ) { return java.lang.reflect.ArtMethod.getMethodName ( artMethod ) ; }
public int inverseTranslate ( int screenX ) { return ( ( int ) ( ( ( screenX - ( IMAGE_MARGIN ) ) + ( mTranslate ) ) / ( mScale ) ) ) ; }
protected boolean addFile ( com.intellij.openapi.vfs.VirtualFile file ) { if ( file.isDirectory ( ) ) return false ; myFiles.add ( file ) ; return true ; }
private void writeCharacteristic ( java.lang.String writeValue ) { android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleServerService.CHARACTERISTIC_UUID ) ; if ( characteristic != null ) return ; characteristic.setValue ( writeValue ) ; }
private boolean upgradeAudioFocus ( ) { return ( mAudioManager.requestAudioFocus ( mAudioFocusListener , AudioManager.STREAM_MUSIC , AudioManager.AUDIOFOCUS_GAIN ) ) == ( android.media.AudioManager.AUDIOFOCUS_REQUEST_GRANTED ) ; }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , long [ ] data ) { validateIsInt64 ( ) ; copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , data ) ; }
public boolean isConnected ( int callSessionType , int callType ) { return false ; }
public com.android.ims.internal.IImsConfig getConfigInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getConfigInterface ( mSlotId , mSupportedFeature ) ; } }
public void setCarrierInfoForImsiEncryption ( java.security.PublicKey publicKey , java.lang.String keyIdentifier , android.os.Message result ) { }
private final void moveTaskBackwardsLocked ( int task ) { android.util.Log.e ( com.android.server.am.ActivityManagerService.TAG , "moveTaskBackwards not yet implemented!" ) ; }
public static void loop6 ( boolean incoming ) { while ( true ) { java.lang.System.out.println ( incoming ) ; while ( ( java.lang.Runtime.getRuntime ( ) ) != null ) { } } }
public android.telephony.mbms.DownloadStatus getDownloadStatus ( java.lang.String appName , android.telephony.mbms.DownloadRequest downloadRequest ) throws android.os.RemoteException { return null ; }
void cleanup ( ) { if ( com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG , "cleanup" ) ; mNowPlayingList = mEmptyNowPlayingList ; mMediaInterface = null ; mLastTrackIdSent = android.media.session.MediaSession.QueueItem.UNKNOWN_ID ; }
public android.net.wifi.nan.LvBufferUtils.LvConstructor putShort ( short data ) { mTlvImpl.putShort ( 0 , data ) ; return this ; }
public int registerStateCallback ( android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.DownloadStateCallback listener ) throws android.os.RemoteException { return android.telephony.mbms.MbmsErrors.SUCCESS ; }
public void testOrientation ( ) { com.android.ide.common.layout.LinearLayoutRule rule = new com.android.ide.common.layout.LinearLayoutRule ( ) ; com.android.ide.common.api.INode node = com.android.ide.common.layout.TestNode.create ( "android.widget.Button" ) . id ( "@+id/Button012" ) ; assertNull ( node.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ORIENTATION ) ) ; java.util.List < com.android.ide.common.api.MenuAction > contextMenu = rule.getContextMenu ( node ) ; assertEquals ( 4 , contextMenu.size ( ) ) ; com.android.ide.common.api.MenuAction orientationAction = contextMenu.get ( 3 ) ; assertTrue ( orientationAction.getClass ( ) . getName ( ) , ( orientationAction instanceof com.android.ide.common.api.MenuAction.Choices ) ) ; com.android.ide.common.api.MenuAction.Choices choices = ( ( com.android.ide.common.api.MenuAction.Choices ) ( orientationAction ) ) ; com.android.ide.common.api.IMenuCallback callback = choices.getCallback ( ) ; callback.action ( orientationAction , com.android.ide.common.layout.LayoutConstants.VALUE_VERTICAL , true ) ; java.lang.String orientation = node.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ORIENTATION ) ; assertEquals ( com.android.ide.common.layout.LayoutConstants.VALUE_VERTICAL , orientation ) ; callback.action ( orientationAction , com.android.ide.common.layout.LayoutConstants.VALUE_HORIZONTAL , true ) ; orientation = node.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ORIENTATION ) ; assertEquals ( com.android.ide.common.layout.LayoutConstants.VALUE_HORIZONTAL , orientation ) ; }
public void run ( ) { goBackOrForward ( steps ) ; }
static double $opt$IntToDouble ( int a ) { return ( ( double ) ( a ) ) ; }
public void onLoadFinished ( android.content.Loader < android.database.Cursor > loader , android.database.Cursor data ) { updateCallDetailsEntries ( com.android.dialer.calldetails.CallDetailsCursorLoader.toCallDetailsEntries ( data ) ) ; }
private java.lang.StringBuilder buildCommonResult ( ) { java.lang.StringBuilder output = new java.lang.StringBuilder ( ) ; addCommonStatus ( output ) ; addStatusCode ( output , "1" ) ; addCommonStatus ( output ) ; return output ; }
public void onDestroy ( ) { super . onDestroy ( ) ; com.android.internal.telephony.gsm.stk.StkLog.d ( this , "onDestroy" ) ; }
public java.lang.String toString ( ) { return rowMap ( ) . toString ( ) ; }
public static char intAnd0x1ffffToChar ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( char ) ( value & 131071 ) ) ; }
com.google.common.base.Optional < java.lang.Boolean > supportsUpgrade ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable java.lang.String number ) ;
public boolean matchesObject ( java.lang.Object argument ) { if ( ! ( argument instanceof android.net.Uri ) ) { return false ; } android.net.Uri actualUri = ( ( android.net.Uri ) ( argument ) ) ; if ( actualUri == ( mUri ) ) return true ; return false ; }
private void sendEnableMsg ( boolean quietMode , java.lang.String packageName ) { mHandler.sendMessage ( mHandler.obtainMessage ( com.android.server.BluetoothManagerService.MESSAGE_ENABLE , ( quietMode ? 1 : 0 ) , 0 ) ) ; addActiveLog ( packageName , true ) ; }
public void onCallAudioStateChanged ( java.lang.String activeCallId , android.telecom.CallAudioState audioState ) throws android.os.RemoteException { }
private void readCpuDataset ( java.io.BufferedReader br ) throws java.io.IOException { updateDataSet ( com.android.ddmuilib.SysinfoPanel.BugReportParser.readCpuDataset ( br ) ) ; }
public boolean acceptInput ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file ) { return ( com.intellij.codeInspection.bytecodeAnalysis.BytecodeAnalysisIndex.ourEnabled ) && ( super . acceptInput ( file ) ) ; }
public void attach ( @ android.annotation.Nullable android.os.Handler handler , @ android.annotation.NonNull android.net.wifi.nan.WifiNanAttachCallback attachCallback , @ android.annotation.NonNull android.net.wifi.nan.WifiNanIdentityChangedListener identityChangedListener ) { attach ( handler , null , attachCallback , identityChangedListener ) ; }
public abstract com.android.tools.lint.detector.api.Location getLocation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.Node node ) ;
public void testVFE7 ( ) { try { java.lang.Class.forName ( "dot.junit.opcodes.aget_wide.d.T_aget_wide_11" ) ; fail ( "expected a verification exception" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
public void test_with_TemporalField_long_invalidField ( ) { TEST_2007_07_15.with ( MockFieldNoValue.INSTANCE , 1 ) ; }
private static void testThread ( int which ) { java.lang.Thread t = new Main.Helper ( which ) ; t.start ( ) ; try { t.join ( ) ; } catch ( java.lang.InterruptedException ex ) { ex.printStackTrace ( ) ; } }
protected void readResponse ( java.io.InputStream stream ) throws java.io.IOException { android.util.Log.v ( com.android.bluetooth.pbapclient.BluetoothPbapRequest.TAG , "readResponse" ) ; }
public void copy1DRangeTo ( int off , int count , short [ ] d ) { validateIsInt16 ( ) ; copy1DRangeToUnchecked ( off , count , d , Element.DataType.SIGNED_16 , d.length ) ; }
private int decompositionMode_Java_ICU ( int mode ) { switch ( mode ) { case java.text.Collator.CANONICAL_DECOMPOSITION : return libcore.icu.RuleBasedCollatorICU.VALUE_ON ; case java.text.Collator.NO_DECOMPOSITION : return libcore.icu.RuleBasedCollatorICU.VALUE_OFF ; } throw new java.lang.IllegalArgumentException ( ) ; }
public int getProvisionedValue ( int item ) throws android.os.RemoteException { return ImsConfig.FeatureValueConstants.ON ; }
static java.util.Collection < java.lang.reflect.Field > getAllAnnotatedFields ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( com.google.common.collect.ImmutableList.< java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > of ( optionsClass ) ) ; return data.getFieldsForClass ( optionsClass ) ; }
public com.android.ims.ImsCallProfile createCallProfile ( int serviceType , int callType ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { return mMmTelFeatureConnection.createCallProfile ( serviceType , callType ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "createCallProfile()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
protected java.util.SortedMap < K , V > standardSubMap ( K fromKey , K toKey ) { return tailMap ( fromKey ) . headMap ( toKey ) ; }
public com.google.common.collect.SortedMultiset < E > headMultiset ( E toElement , com.google.common.collect.BoundType boundType ) { return forwardMultiset ( ) . tailMultiset ( toElement , boundType ) . descendingMultiset ( ) ; }
public static void test_twoJar_diff_callStaticMethod ( ) throws java.lang.Exception { dalvik.system.DexClassLoaderTest.test_diff_callStaticMethod ( dalvik.system.DexClassLoaderTest.Configuration.TWO_JAR ) ; }
public java.lang.reflect.Method getEnclosingMethod ( ) { if ( classNameImpliesTopLevel ( ) ) { return null ; } java.lang.reflect.AccessibleObject result = libcore.reflect.AnnotationAccess.getEnclosingMethodOrConstructor ( this ) ; return result instanceof java.lang.reflect.Method ? ( ( java.lang.reflect.Method ) ( result ) ) : null ; }
public void callSessionTerminated ( com.android.ims.internal.IImsCallSession i , android.telephony.ims.ImsReasonInfo imsReasonInfo ) throws android.os.RemoteException { mNewListener.callSessionTerminated ( imsReasonInfo ) ; }
private boolean httpRequest ( ) throws java.io.IOException { java.net.URL targetURL = new java.net.URL ( "http://www.google.com/generate_204" ) ; java.net.HttpURLConnection urlConnection = null ; try { urlConnection = ( ( java.net.HttpURLConnection ) ( targetURL.openConnection ( ) ) ) ; urlConnection.connect ( ) ; int respCode = urlConnection.getResponseCode ( ) ; return respCode == 204 ; } catch ( java.io.IOException e ) { android.util.Log.e ( com.android.tests.connectivity.uid.ConnectivityTestActivity.TAG , "Checkconnectivity exception: " , e ) ; } return false ; }
public synchronized int getIndex ( int device ) { java.lang.Integer index = mIndex.get ( device ) ; if ( index == null ) { index = mIndex.get ( AudioSystem.DEVICE_OUT_DEFAULT ) ; } return index.intValue ( ) ; }
void die ( ) { looper.quit ( ) ; handlerThread.quit ( ) ; }
private boolean addMediaPlayerPackage ( java.lang.String packageName ) { com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo ( null , AvrcpConstants.PLAYER_TYPE_AUDIO , AvrcpConstants.PLAYER_SUBTYPE_NONE , getPlayStateBytes ( null ) , getFeatureBitMask ( packageName ) , packageName , getAppLabel ( packageName ) ) ; return addMediaPlayerInfo ( info ) ; }
public final void testTapLink_changeOrientationThenTapBack ( ) throws java.lang.Exception { sUiBot.setScreenOrientation ( UiBot.PORTRAIT ) ; try { saveUiRestoredAfterTappingLinkTest ( android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BUTTON ) ; } finally { sUiBot.setScreenOrientation ( UiBot.PORTRAIT ) ; } }
public static java.io.File getReferenceProfile ( java.lang.String packageName ) { return android.os.Environment.buildPath ( android.os.Environment.getDataDirectory ( ) , "misc" , "profiles" , "ref" , packageName ) ; }
private boolean isPotentialEmergencyNumber ( java.lang.String number ) { com.android.server.telecom.Log.v ( this , "Checking restrictions for number : %s" , com.android.server.telecom.Log.pii ( number ) ) ; return ( number != null ) && ( mPhoneNumberUtilsAdapter.isPotentialLocalEmergencyNumber ( mContext , number ) ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.pm.PackageManager packageManager , android.content.Intent intent ) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules ( ) ; return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent ( packageManager , intent ) ; }
private native void gattClientWriteCharacteristicNative ( int conn_id , int service_type , int service_id_inst_id , long service_id_uuid_lsb , long service_id_uuid_msb , int char_id_inst_id , long char_id_uuid_lsb , long char_id_uuid_msb , int write_type , int auth_req , byte [ ] value ) ;
public synchronized void close ( ) throws java.io.IOException { if ( ! ( closed ) ) { zipFile.close ( ) ; closed = true ; } }
public void testRefactor2 ( ) throws java.lang.Exception { renameType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.CustomView1" , true , "NewCustomViewName" , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "* Rename compilation unit \'CustomView1.java\' to \'NewCustomViewName.java\'\n" ) + "\n" ) + "* customviews.xml - /testRefactor2/res/layout/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.NewCustomViewName\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2/res/layout-land/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.NewCustomViewName" ) ) ) ; }
com.android.sched.util.location.Location getVFileLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) { return finalVFS.getVFileLocation ( file ) ; }
public void turnOffIms ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; getServiceInterface ( mBinder ) . turnOffIms ( mSlotId , mSupportedFeature ) ; } }
synchronized void remove ( android.net.rtp.AudioStream stream ) { java.lang.Integer id = mStreams.remove ( stream ) ; if ( id != null ) { nativeRemove ( id ) ; } }
public void upgradeToVideo ( @ android.support.annotation.NonNull android.content.Context context ) { listener.onImpressionLoggingNeeded ( DialerImpression.Type.LIGHTBRINGER_UPGRADE_REQUESTED ) ; lightbringer.requestUpgrade ( context , call ) ; }
private boolean getAutoTimeZone ( ) { try { return ( Settings.Global.getInt ( mCr , Settings.Global.AUTO_TIME_ZONE ) ) > 0 ; } catch ( android.provider.Settings snfe ) { return true ; } }
public void checkValidity ( ) { if ( ! ( ( parent ) instanceof com.android.jack.ir.ast.JMethod ) ) { throw new com.android.jack.ir.InternalCompilerException ( this , "Invalid parent" ) ; } }
public final void setIsVoipAudioMode ( java.lang.String connectionId , boolean isVoip ) { mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_SET_IS_VOIP_AUDIO_MODE , ( isVoip ? 1 : 0 ) , 0 , connectionId ) . sendToTarget ( ) ; }
public void apply ( ) throws com.intellij.openapi.options.ConfigurationException { com.google.gct.intellij.endpoints.synchronization.SampleSyncConfiguration.setUseBuiltInSamples ( builtInSampleRadioButton.isSelected ( ) ) ; }
public com.android.jack.transformations.request.TransformationRequest getRequest ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode root ) { com.android.jack.transformations.request.TransformationRequest request = new com.android.jack.transformations.request.TransformationRequest ( root ) ; request.appendAll ( steps ) ; return request ; }
private boolean isScoAcceptable ( ) { return ( mVoiceRecognitionStarted ) || ( isInCall ( ) ) ; }
private static native boolean isBoundaryImpl ( int address , int offset ) ;
private static int julianDay ( java.util.TimeZone tz , long time ) { long utcMs = time + ( tz.getOffset ( time ) ) ; return ( ( int ) ( utcMs / ( libcore.icu.DateIntervalFormat.DAY_IN_MS ) ) ) + ( libcore.icu.DateIntervalFormat.EPOCH_JULIAN_DAY ) ; }
public int getHighestPriorityQualifier ( int startIndex ) { for ( int i = startIndex ; i < ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { if ( ( mQualifiers [ i ] ) != null ) { return i ; } } return - 1 ; }
private static com.google.devtools.build.android.desugar.proto.DesugarDeps.Type wrapType ( java.lang.String name ) { return com.google.devtools.build.android.desugar.proto.DesugarDeps.Type.newBuilder ( ) . setBinaryName ( name ) . build ( ) ; }
public void testMethodParametersAlignmentAfterMethodNameChange ( ) { getCurrentCodeStyleSettings ( ) . ALIGN_MULTILINE_PARAMETERS = true ; getCurrentCodeStyleSettings ( ) . ALIGN_MULTILINE_PARAMETERS_IN_CALLS = true ; doTest ( null , "test123asd" , null , new com.intellij.refactoring.SimpleParameterGen ( ) , new com.intellij.refactoring.SimpleExceptionsGen ( ) , false ) ; }
public void testInstall_unsuccessfulFirstUpdate_olderVersionThanSystem ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer.installWithErrorCode ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public boolean setWfdDeviceInfo ( java.lang.String hex ) { return doBooleanCommand ( ( "WFD_SUBELEM_SET 0 " + hex ) ) ; }
native void rsnScriptSetVarI ( int con , int id , int slot , int val ) ;
public com.android.layoutlib.api.SceneResult getCopyWithData ( java.lang.Object data ) { com.android.layoutlib.api.SceneResult r = new com.android.layoutlib.api.SceneResult ( this ) ; r.mData = data ; return r ; }
void cleanup ( ) { com.android.bluetooth.btservice.RemoteDevices.mAdapterService.unregisterReceiver ( mReceiver ) ; reset ( ) ; }
public static int getAdvertisingEventType ( com.android.bluetooth.gatt.AdvertiseClient client ) { android.bluetooth.le.AdvertiseSettings settings = client.settings ; if ( settings.isConnectable ( ) ) { return com.android.bluetooth.gatt.AdvertiseHelper.ADVERTISING_EVENT_TYPE_CONNECTABLE ; } return ( client.scanResponse ) == null ? com.android.bluetooth.gatt.AdvertiseHelper.ADVERTISING_EVENT_TYPE_NON_CONNECTABLE : com.android.bluetooth.gatt.AdvertiseHelper.ADVERTISING_EVENT_TYPE_SCANNABLE ; }
public void onCallStateChanged ( com.android.server.telecom.Call call , int oldState , int newState ) { updateCall ( call ) ; }
private java.lang.StringBuilder buildCommonResult ( ) { java.lang.StringBuilder output = new java.lang.StringBuilder ( ) ; addCommonStatus ( output ) ; addStatusCode ( output , "1" ) ; addCommonStatus ( output ) ; return output ; }
public com.android.tools.lint.client.api.JavaParser getJavaParser ( @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Project project ) { if ( ( mJavaParser ) == null ) { mJavaParser = new com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.EclipseJavaParser ( ) ; } return mJavaParser ; }
public void sendCallEvent ( java.lang.String event , android.os.Bundle extras ) { mInCallAdapter.sendCallEvent ( mTelecomCallId , event , extras ) ; }
static int $opt$FloatToInt ( float a ) { return ( ( int ) ( a ) ) ; }
void apply ( org.gradle.api.Project project ) { project.plugins.apply ( com.android.build.gradle.model.BaseComponentModelPlugin ) ; project.tasks.create ( "assembleDefault" ) ; project.plugins.apply ( com.android.build.gradle.model.AndroidComponentModelTestPlugin ) ; }
public static int copyNativeBinariesIfNeededLI ( java.io.File apkFile , java.io.File sharedLibraryDir ) { final java.lang.String cpuAbi = android.os.Build.CPU_ABI ; final java.lang.String cpuAbi2 = android.os.Build.CPU_ABI2 ; return com.android.internal.content.NativeLibraryHelper.nativeCopyNativeBinaries ( apkFile.getPath ( ) , sharedLibraryDir.getPath ( ) , cpuAbi , cpuAbi2 ) ; }
public com.google.common.base.CharMatcher precomputed ( ) { return this ; }
void setJarJarConfigFile ( @ javax.annotation.Nonnull java.io.File jarjarConfigFile ) throws com.android.jack.api.v01.ConfigurationException ;
public void callSessionMayHandover ( com.android.ims.internal.IImsCallSession i , int srcAccessTech , int targetAccessTech ) throws android.os.RemoteException { mNewListener.callSessionMayHandover ( srcAccessTech , targetAccessTech ) ; }
public void run ( ) { java.lang.Object ref = wimp.get ( ) ; if ( ref != null ) { s [ 0 ] = ref.toString ( ) ; } }
void setUp ( ) { createChannels ( ) ; sendNotifications ( ( ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.SEND_B ) | ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.SEND_C ) ) , com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , true ) ; status = READY ; delay ( 15000 ) ; }
static boolean triggerArrayOOM ( ) { Main.ArrayMemEater.blowup ( new char [ 128 * 1024 ] [ ] ) ; return Main.ArrayMemEater.sawOome ; }
public void test_ConstructorLjava_io_OutputStream ( ) throws java.io.IOException { new java.util.zip.InflaterOutputStream ( os ) ; try { new java.util.zip.InflaterOutputStream ( null ) ; fail ( "Should throw NullPointerException" ) ; } catch ( java.lang.NullPointerException e ) { } }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ( this . bignum ) != 0 ) { java.math.NativeBN.BN_free ( this . bignum ) ; this . bignum = 0 ; } } finally { super . finalize ( ) ; } }
public void onAudioRouteChanged ( android.telecom.Connection c , int audioRoute ) { }
public com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { return this . getMultiEndpoint ( ) ; } }
public boolean dispatchKeyEvent ( android.view.KeyEvent event ) { return mBlockEvents ; }
private org.apache.harmony.dalvik.ddmc.Chunk handleHPGC ( org.apache.harmony.dalvik.ddmc.Chunk request ) { if ( false ) android.util.Log.d ( "ddm-heap" , "Heap GC request" ) ; java.lang.System.gc ( ) ; return null ; }
public void visitNoArgs ( int opcode , int offset , int length , com.android.dx.rop.type.Type type ) { observer.parsed ( bytes , offset , length , header ( offset ) ) ; }
public void run ( ) { onWindowFocusChanged ( hasWindowFocus ) ; }
public void test_U8_2_SCALE20_05_inSqure ( ) { testReszie ( inX , inX , Element.DataType.UNSIGNED_8 , 2 , 2.0F , 0.5F ) ; }
private boolean isMultiWindowOnPhone ( ) { return ( com.android.contacts.common.compat.MultiWindowCompat.isInMultiWindowMode ( this ) ) && ( com.android.contacts.util.PhoneCapabilityTester.isPhone ( this ) ) ; }
private javax.security.auth.x500.X500Principal localhost ( ) { try { return new javax.security.auth.x500.X500Principal ( ( "CN=" + ( java.net.InetAddress.getLocalHost ( ) . getHostName ( ) ) ) ) ; } catch ( java.net.UnknownHostException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void addGeneratedSourceFolders ( @ com.android.annotations.NonNull org.gradle.api.Task task , @ com.android.annotations.NonNull java.io.File ... sourceFolders ) { getVariantData ( ) . addGeneratedSourceFolders ( task , sourceFolders ) ; }
public static java.lang.String getToolsFolder2 ( ) { return com.android.ide.eclipse.ddms.DdmsPlugin.sToolsFolder ; }
private static native void nativeDrawBitmapMesh ( int nCanvas , int nBitmap , int meshWidth , int meshHeight , float [ ] verts , int vertOffset , int [ ] colors , int colorOffset , int nPaint ) ;
public void consumerProguardFiles ( java.lang.Object ... proguardFileArray ) { consumerProguardFiles.addAll ( project.files ( proguardFileArray ) . files ) ; }
protected void ensureAll ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter loaded ) { }
public int getHeight ( ) { return ( ( int ) ( ( mScale ) * ( mHeight ) ) ) ; }
public void setSupplicantLogLevel ( java.lang.String level ) { doStringCommand ( ( "LOG_LEVEL " + level ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { com.android.ide.eclipse.adt.internal.launch.DeviceChooserDialog.sUseDeviceForFutureLaunchesValue = mUseDeviceForFutureLaunchesCheckbox.getSelection ( ) ; mResponse.setUseDeviceForFutureLaunches ( com.android.ide.eclipse.adt.internal.launch.DeviceChooserDialog.sUseDeviceForFutureLaunchesValue ) ; }
public void run ( ) { com.android.hierarchyviewerlib.ui.util.DrawableViewNode tree = com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . getTree ( ) ; if ( tree != null ) { loadViewRecursive ( tree.viewNode ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . notifySelectionChanged ( ) ; } }
public int hashCode ( ) { return ( ( int ) ( ( value ) ^ ( ( value ) > > > 32 ) ) ) ; }
public static int IntDivision ( ) { int a ; int b ; int c ; a = Main.$inline$int ( 8 ) ; b = Main.$inline$int ( 3 ) ; c = a / b ; return c ; }
public void getCDMASubscriptionResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String var2 , java.lang.String var3 , java.lang.String var4 , java.lang.String var5 , java.lang.String var6 ) { }
protected javax.swing.JComponent getHeader ( ) { return com.google.gct.idea.samples.DynamicWizardStep.createWizardStepHeader ( WizardConstants.ANDROID_NPW_HEADER_COLOR , AndroidIcons.Wizards.NewProjectMascotGreen , "Import Sample" ) ; }
private static void installMockNanStateManager ( com.android.server.wifi.nan.WifiNanStateManager nanStateManager ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.nan.WifiNanStateManager.class . getDeclaredField ( "sNanStateManagerSingleton" ) ; field.setAccessible ( true ) ; field.set ( null , nanStateManager ) ; }
public boolean add ( java.util.Map.Entry < K , V > element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
com.android.ahat.heapdump.ReferenceIterator getReferences ( ) { java.util.List < com.android.ahat.heapdump.Reference > refs = java.util.Collections.emptyList ( ) ; return new com.android.ahat.heapdump.ReferenceIterator ( refs ) ; }
public void test_until_TemporalUnit_unsupportedUnit ( ) { TEST_2008_06.until ( TEST_2008_06 , java.time.temporal.ChronoUnit.HOURS ) ; }
private void setupVisualVoicemailPreference ( ) { visualVoicemailPreference.setOnPreferenceChangeListener ( this ) ; visualVoicemailPreference.setChecked ( voicemailClient.isVoicemailEnabled ( getContext ( ) , phoneAccountHandle ) ) ; }
public void test_blockWithJoinWithSource ( ) throws java.lang.Exception { setup ( true ) ; try { key.block ( sourceAddress ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { return START_NOT_STICKY ; }
public static void checkDeprecated ( com.intellij.codeInspection.deprecation.PsiElement refElement , com.intellij.codeInspection.deprecation.PsiElement elementToHighlight , @ org.jetbrains.annotations.Nullable com.intellij.openapi.util.TextRange rangeInElement , com.intellij.codeInspection.ProblemsHolder holder ) { com.intellij.codeInspection.deprecation.DeprecationInspection.checkDeprecated ( refElement , elementToHighlight , rangeInElement , false , false , true , holder ) ; }
public X apply ( java.lang.Exception e ) { return exception ; }
public void addDevice ( com.android.ddmlib.IDevice device , com.android.hierarchyviewerlib.device.Window [ ] windows ) { synchronized ( mDeviceMap ) { mDeviceMap.put ( device , windows ) ; mDeviceList.add ( device ) ; } notifyDeviceConnected ( device ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.telecom.TelecomUtil.placeCall ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , CallInitiationType.Type.REGULAR_SEARCH ) . build ( ) ) ; }
protected boolean shouldApplyOn ( java.io.File toFile ) { return toFile.exists ( ) ; }
void addGeneratedSourceFolders ( @ com.android.annotations.NonNull org.gradle.api.Task task , @ com.android.annotations.NonNull java.lang.Iterable < java.io.File > sourceFolders ) ;
protected boolean markIfNecessary ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node ) { return ( node.addMarkerIfAbsent ( createMarkerFor ( node ) ) ) == null ; }
public final native int [ ] readInt32Vector ( ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onButtonDelete ( ) ; }
public void getCallWaiting ( android.os.Message onComplete ) { mCM.queryCallWaiting ( CommandsInterface.SERVICE_CLASS_VOICE , onComplete ) ; }
public void accept ( final org.objectweb.asm.MethodVisitor mv ) { mv.visitInvokeDynamicInsn ( name , desc , bsm , bsmArgs ) ; }
public void run ( ) { long token = android.os.Binder.clearCallingIdentity ( ) ; try { mAppCallback.onProgressUpdated ( request , fileInfo , currentDownloadSize , fullDownloadSize , currentDecodedSize , fullDecodedSize ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } }
public java.lang.Integer call ( ) { return computeHorizontalScrollRange ( ) ; }
public void run ( ) { if ( commandName != null ) { com.intellij.codeInspection.ex.GlobalInspectionContextImpl.NOTIFICATION_GROUP.createNotification ( com.intellij.codeInspection.ex.InspectionsBundle.message ( "inspection.no.problems.message" ) , MessageType.INFO ) . notify ( getProject ( ) ) ; } if ( postRunnable != null ) { postRunnable.run ( ) ; } }
private boolean isShorterThanPossibleNormalNumber ( com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata regionMetadata , java.lang.String number ) { java.util.regex.Pattern possibleNumberPattern = regexCache.getPatternForRegex ( regionMetadata.getGeneralDesc ( ) . getPossibleNumberPattern ( ) ) ; return ( testNumberLengthAgainstPattern ( possibleNumberPattern , number ) ) == ( com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.TOO_SHORT ) ; }
public android.os.PersistableBundle getConfig ( ) { return getConfigForSubId ( android.telephony.SubscriptionManager.getDefaultSubId ( ) ) ; }
public void run ( ) { mMessageCallback.mData = mData ; mMessageCallback.mID = mID ; mMessageCallback.mLength = mLength ; mMessageCallback.run ( ) ; }
public int getDuplexMode ( ) { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN ; }
public com.android.layoutlib.api.SceneResult moveChild ( java.lang.Object parentView , java.lang.Object childView , int index , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED.getResult ( ) ; }
public boolean startVendorHal ( ) { kilroy ( ) ; throw new java.lang.UnsupportedOperationException ( ) ; }
public void testBoolean ( ) throws java.lang.Throwable { final int resId = com.android.internal.R.bool.config_annoy_dianne ; assertResource ( resId , true , true ) ; }
public android.telephony.mbms.DownloadStatus getDownloadStatus ( android.telephony.mbms.DownloadRequest downloadRequest ) throws android.os.RemoteException { return null ; }
public static final java.util.Locale [ ] getAvailableLocales ( ) { return android.icu.impl.ICUResourceBundle.getAvailEntry ( android.icu.impl.ICUResourceBundle.ICU_BASE_NAME , android.icu.impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER ) . getLocaleList ( ) ; }
public boolean isHideOnMouseDown ( ) { return false ; }
private java.io.InputStream loadResource ( ) { return getClass ( ) . getResourceAsStream ( "resource.txt" ) ; }
long getLastModified ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file ) { return vfs.getLastModified ( file.getWrappedFile ( ) ) ; }
protected void onProgressUpdate ( java.lang.Integer ... values ) { mProgressBar.setProgress ( values [ 0 ] ) ; }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "ActivityGroup" , args = { boolean . class } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onCreate" , args = { android.os.Bundle.class } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onResume" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onSaveInstanceState" , args = { android.os.Bundle.class } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onPause" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onStop" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onDestroy" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "getCurrentActivity" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "getLocalActivityManager" , args = { } ) } ) public void testTabDialog ( ) throws java.lang.Exception { mIntent = mTabIntent ; runMultipleLaunchpads ( "testTabDialog" , getClass ( ) , LaunchpadActivity.LIFECYCLE_DIALOG_ON_RESUME , LaunchpadActivity.LIFECYCLE_DIALOG_ON_STOP ) ; }
public static java.lang.String decode ( java.lang.String s ) { if ( s == null ) { return null ; } return libcore.net.UriCodec.decode ( s , false , Charsets.UTF_8 , false ) ; }
synchronized void nScriptReduceNew ( long id , int slot , long [ ] ains , long aout , int [ ] limits ) { validate ( ) ; rsnScriptReduceNew ( mContext , id , slot , ains , aout , limits ) ; }
public void run ( ) { com.intellij.openapi.module.Module module = com.intellij.openapi.module.ModuleManager.getInstance ( project ) . findModuleByName ( moduleName ) ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.createRunConfiguration ( project , module ) ; }
public < T > void applyTiming ( com.google.common.util.concurrent.ListenableFuture < T > future , java.lang.String eventName ) { applyTiming ( future , eventName , com.android.dialer.metrics.FutureTimer.LogCatMode.DONT_LOG_VALUES ) ; }
public void testBug181 ( ) { java.util.regex.Pattern.compile ( "[\\t-\\r]" ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mAudioManager = ( ( android.media.AudioManager ) ( mContext.getSystemService ( Context.AUDIO_SERVICE ) ) ) ; }
private static void writeOutImage ( com.android.ddmlib.RawImage screenshot , java.lang.String name ) throws java.io.IOException { java.io.ObjectOutputStream out = new java.io.ObjectOutputStream ( new java.io.FileOutputStream ( name ) ) ; out.writeObject ( new com.android.chimpchat.adb.image.CaptureRawAndConvertedImage.ChimpRunnerRawImage ( screenshot ) ) ; out.close ( ) ; }
public void onRestoreInstanceState ( android.os.Bundle savedInstanceState ) { android.app.stubs.TestDialog.isOnRestoreInstanceStateCalled = true ; this . savedInstanceState = savedInstanceState ; super . onRestoreInstanceState ( savedInstanceState ) ; }
void registerProfileIntentReceiver ( ) { mContext.registerReceiver ( mBroadcastReceiver , mProfileIntentFilter , null , mReceiverHandler ) ; }
public boolean isValidOn ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { return ! ( method.getEnclosingType ( ) . isExternal ( ) ) ; }
public native java.io.FileDescriptor [ ] pipe ( ) throws android.system.ErrnoException ;
private static int [ ] zzUnpackRowMap ( ) { int [ ] result = new int [ 1260 ] ; int offset = 0 ; offset = org.jf.smali.smaliFlexLexer.zzUnpackRowMap ( org.jf.smali.smaliFlexLexer.ZZ_ROWMAP_PACKED_0 , offset , result ) ; return result ; }
public void onLooperPrepared ( ) { mEuiccCard = new com.android.internal.telephony.uicc.euicc.EuiccCard ( mContextFixture.getTestDouble ( ) , mMockCi , mMockIccCardStatus , 0 ) ; mHandler = new android.os.Handler ( mTestHandlerThread.getLooper ( ) ) ; setReady ( true ) ; }
public void testAssumptionFailure ( com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) ;
public com.android.jack.ir.ast.cfg.JBasicBlockElement lastElement ( ) { assert ( elements.size ( ) ) > 0 ; return elements.get ( ( ( elements.size ( ) ) - 1 ) ) ; }
public void close ( ) throws java.io.IOException { if ( ! ( closed ) ) { closeEntry ( ) ; super . close ( ) ; } }
public static long NegNeg3 ( long arg ) { return 0 - ( - arg ) ; }
boolean isNumberMatchingDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.nationalNumberPattern ) . matcher ( nationalNumber ) ; return ( isNumberPossibleForDesc ( nationalNumber , numberDesc ) ) && ( nationalNumberPatternMatcher.matches ( ) ) ; }
public void testString ( ) throws java.lang.Throwable { final int resId = com.android.internal.R.string.phoneTypeHome ; setLocale ( "en_US" ) ; assertResource ( resId , "Home" , "Home" ) ; setLocale ( "sv_SE" ) ; assertResource ( resId , "Hem" , "Hem" ) ; }
public void executeShellCommand ( java.lang.String command , com.android.ddmlib.IShellOutputReceiver receiver , int maxTimeToOutputResponse ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException { java.lang.System.out.println ( java.lang.String.format ( "EXECSHELL(%S) CALLED" , name ) ) ; execShellCalled = true ; }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.mapclient.MceStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.mapclient.MceStateMachine.TAG , ( "Connect Request " + ( device.getAddress ( ) ) ) ) ; } sendMessage ( com.android.bluetooth.mapclient.MceStateMachine.MSG_CONNECT , device ) ; return true ; }
public void startNetworkScan ( android.os.Message response ) { throw new java.lang.RuntimeException ( "not implemented" ) ; }
public java.util.Iterator < com.android.jack.ir.ast.cfg.JBasicBlock > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { return cfg.getBlocksDepthFirst ( true ) . iterator ( ) ; }
public libcore.tzdata.update2.BundleVersion getInstalledBundleVersion ( ) throws java.io.IOException , libcore.tzdata.update2.BundleException { if ( ! ( currentTzDataDir.exists ( ) ) ) { return null ; } return readBundleVersion ( currentTzDataDir ) ; }
synchronized void nScriptSetVarF ( long id , int slot , float val ) { validate ( ) ; rsnScriptSetVarF ( mContext , id , slot , val ) ; }
public final void update ( byte input ) throws java.lang.IllegalStateException { if ( ! ( isInitMac ) ) { throw new java.lang.IllegalStateException ( ) ; } spiImpl.engineUpdate ( input ) ; }
public static int getUid ( java.lang.String path ) { try { return Libcore.os.stat ( path ) . st_uid ; } catch ( libcore.io.ErrnoException e ) { return - 1 ; } }
public int modifyPasspointManagementObject ( java.lang.String fqdn , java.util.List < android.net.wifi.PasspointManagementObjectDefinition > mos ) { return mWifiStateMachine.syncModifyPasspointManagementObject ( mWifiStateMachineChannel , fqdn , mos ) ; }
public static int intConditionEqualZero ( int i ) { return ( i > 42 ) != false ? 13 : 54 ; }
public void put ( android.icu.impl.UResource.Key key , android.icu.impl.UResource.Value value ) { if ( key.contentEquals ( "per" ) ) { cacheData.styleToPerPattern.put ( width , android.icu.impl.SimpleFormatterImpl.compileToStringMinMaxArguments ( value.getString ( ) , sb , 2 , 2 ) ) ; } }
public void testFailed ( com.android.cts.appsecurity.TestFailure status , com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) { com.android.ddmlib.Log.w ( com.android.cts.appsecurity.AppSecurityTests.LOG_TAG , java.lang.String.format ( "%s#%s failed: %s" , test.getClassName ( ) , test.getTestName ( ) , trace ) ) ; mAllTestsPassed = false ; }
private static android.content.res.AssetFileDescriptor getAssetFileDescriptor ( android.content.Context context , java.lang.String uriString ) { android.content.ContentResolver resolver = context.getContentResolver ( ) ; android.net.Uri uri = android.net.Uri.parse ( uriString ) ; try { if ( org.chromium.base.ContentUriUtils.isVirtualDocument ( uri , context ) ) { java.lang.String [ ] streamTypes = resolver.getStreamTypes ( uri , "*/*" ) ; if ( ( streamTypes != null ) && ( ( streamTypes.length ) > 0 ) ) { android.content.res.AssetFileDescriptor afd = resolver.openTypedAssetFileDescriptor ( uri , streamTypes [ 0 ] , null ) ; if ( ( afd.getStartOffset ( ) ) != 0 ) { try { afd.close ( ) ; } catch ( java.io.IOException e ) { } throw new java.lang.SecurityException ( "Cannot open files with non-zero offset type." ) ; } return afd ; } } else { android.os.ParcelFileDescriptor pfd = resolver.openFileDescriptor ( uri , "r" ) ; if ( pfd != null ) { return new android.content.res.AssetFileDescriptor ( pfd , 0 , android.content.res.AssetFileDescriptor.UNKNOWN_LENGTH ) ; } } } catch ( java.io.FileNotFoundException e ) { android.util.Log.w ( org.chromium.base.ContentUriUtils.TAG , ( "Cannot find content uri: " + uriString ) , e ) ; } catch ( java.lang.SecurityException e ) { android.util.Log.w ( org.chromium.base.ContentUriUtils.TAG , ( "Cannot open content uri: " + uriString ) , e ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Log.w ( org.chromium.base.ContentUriUtils.TAG , ( "Unknown content uri: " + uriString ) , e ) ; } catch ( java.lang.IllegalStateException e ) { android.util.Log.w ( org.chromium.base.ContentUriUtils.TAG , ( "Unknown content uri: " + uriString ) , e ) ; } return null ; }
protected org.w3c.dom.Document getDomDocument ( ) { return mEditor.getUiRootNode ( ) . getXmlDocument ( ) ; }
public java.util.List < com.android.build.gradle.internal.dependency.ManifestDependencyImpl > getManifestDependenciesForInput ( ) { return ( ( java.util.List < com.android.build.gradle.internal.dependency.ManifestDependencyImpl > ) ( dependencies ) ) ; }
public static boolean checkCallingOrSelfReadPhoneNumber ( android.content.Context context , java.lang.String callingPackage , java.lang.String message ) { return com.android.internal.telephony.TelephonyPermissions.checkReadPhoneNumber ( context , android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , callingPackage , message ) ; }
public int hashCode ( ) { return com.google.common.collect.Sets.hashCodeImpl ( this ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "res/menu/titles.xml:3: Warning: Menu items should specify a title [MenuTitle]\n" + ( ( ( ( ( " <item android:id=\"@+id/action_bar_progress_spinner\"\n" + " ^\n" ) + "res/menu/titles.xml:12: Warning: Menu items should specify a title [MenuTitle]\n" ) + " <item android:id=\"@+id/menu_plus_one\"\n" ) + " ^\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "apicheck/minsdk14.xml=>AndroidManifest.xml" , "res/menu/titles.xml" ) ) ; }
public void test_EmptyMap_computeIfAbsent ( ) { try { java.util.Collections.emptyMap ( ) . computeIfAbsent ( 1 , ( k ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public com.android.ims.internal.IImsMMTelFeature createEmergencyMMTelFeature ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) throws android.os.RemoteException { mStatusCallback = c ; return this . createEmergencyMMTelFeature ( slotId ) ; }
public static long UShr0 ( long arg ) { return arg > > > 0 ; }
protected void resetRecords ( ) { countVoiceMessages = 0 ; mncLength = UNINITIALIZED ; iccid = null ; adnCache.reset ( ) ; recordsRequested = false ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass x ) { return visit ( ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( x ) ) ) ; }
public boolean areOutputFilesPresent ( ) { boolean filesOk = true ; for ( java.io.File outputFile : mOutputFiles ) { filesOk &= outputFile.isFile ( ) ; } return filesOk ; }
final void performRestartActivity ( android.os.IBinder token ) { android.app.ActivityThread.ActivityClientRecord r = mActivities.get ( token ) ; if ( r.stopped ) { r.activity.performRestart ( ) ; r.stopped = false ; } }
public proguard.evaluation.value.IntegerValue compare ( proguard.evaluation.value.ParticularFloatValue other ) { return ( this . value ) < ( other.value ) ? SpecificValueFactory.INTEGER_VALUE_M1 : ( this . value ) == ( other.value ) ? SpecificValueFactory.INTEGER_VALUE_0 : SpecificValueFactory.INTEGER_VALUE_1 ; }
native int socketAvailable ( ) throws java.io.IOException ;
private void checkFormat ( java.lang.String baseLocation , java.lang.String xml , java.lang.String expected ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences prefs = com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences.create ( ) ; checkFormat ( prefs , baseLocation , xml , expected ) ; }
public V2 transformEntry ( K key , V1 value ) { return function.apply ( value ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder clearStartTime ( ) { bitField0_ = ( bitField0_ ) & ( ~ 256 ) ; startTime_ = 0L ; onChanged ( ) ; return this ; }
public boolean hasCarrierSupport ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccountHandle ) { return new com.android.voicemail.impl.OmtpVvmCarrierConfigHelper ( context , phoneAccountHandle ) . isValid ( ) ; }
public java.lang.String getName ( ) { return com.android.compatibility.common.util.ModuleResult.parseId ( mId ) [ 1 ] ; }
public java.lang.String getId ( ) { return ( getKey ( ) ) == null ? getName ( ) . toString ( ) : ( ( getName ( ) . toString ( ) ) + "#" ) + ( getKey ( ) ) ; }
private boolean isGprsConsistant ( int gprsState , int serviceState ) { return ! ( ( serviceState == ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) && ( gprsState != ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) ) ; }
public abstract com.android.jack.test.toolchain.JackBasedToolchain addProperty ( @ javax.annotation.Nonnull java.lang.String propertyName , @ javax.annotation.Nonnull java.lang.String propertyValue ) ;
public void onChildInserted ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { }
private void notifyCharacteristicChanged ( ) { showMessage ( "Characteristic changed" ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CHARACTERISTIC_CHANGED ) ; sendBroadcast ( intent ) ; }
java.lang.reflect.Type [ ] getGenericParameterTypes ( ) { return libcore.reflect.Types.getTypeArray ( getMethodOrConstructorGenericInfo ( ) . genericParameterTypes , false ) ; }
public int getColumnCount ( ) { return com.android.sched.util.log.stats.Alloc.HEADER.length ; }
public void onDestroyView ( ) { mList = null ; mHandler.removeCallbacks ( mRequestFocus ) ; mHandler.removeMessages ( android.preference.PreferenceFragment.MSG_BIND_PREFERENCES ) ; super . onDestroyView ( ) ; }
public void setVar ( int index , long v ) { mRS.nScriptSetVarD ( getID ( mRS ) , index , v , mUseIncSupp ) ; }
private void initSideFragments ( ) { com.android.tv.ui.sidepanel.SideFragment.preloadRecycledViews ( this ) ; }
public void visitTableSwitchInsn ( int min , int max , org.objectweb.asm.Label dflt , org.objectweb.asm.Label ... labels ) { printer.visitTableSwitchInsn ( min , max , dflt , labels ) ; printTypeOfOperandStack ( ) ; super . visitTableSwitchInsn ( min , max , dflt , labels ) ; }
private void notifyListeners ( ) { synchronized ( com.android.sdklib.devices.DeviceManager.listeners ) { for ( com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener : com.android.sdklib.devices.DeviceManager.listeners ) { listener.onDevicesChange ( ) ; } } }
public static com.android.manifmerger.Actions load ( java.lang.String xml ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { return com.android.manifmerger.Actions.load ( new com.android.utils.PositionXmlParser ( ) . parse ( xml ) ) ; }
public void testHasSchemeDoesNotMatch ( ) { android.net.Uri schemeUri = android.net.Uri.parse ( "market://details?id=com.google.android.apps.plus" ) ; assertFalse ( "HasPath Matched, But it shouldn't have" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( "details" ) . matches ( schemeUri ) ) ; assertFalse ( "HasPath Matched, But it shouldn't have" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( org.hamcrest.CoreMatchers.equalTo ( "details" ) ) . matches ( schemeUri ) ) ; }
public void onSuccess ( ) { android.telecom.Log.d ( this , "Adding simService %s" , currentSimService.getComponentName ( ) ) ; simServiceComponentNames.add ( currentSimService.getComponentName ( ) ) ; simServiceBinders.add ( currentSimService.mServiceInterface.asBinder ( ) ) ; maybeComplete ( ) ; }
public static double longToIntToDouble ( long value ) { return ( ( double ) ( ( int ) ( value ) ) ) ; }
public int read ( byte [ ] buffer , int offset , int byteCount ) throws java.io.IOException { return socketImpl.read ( buffer , offset , byteCount ) ; }
public static int floatToDoubleToInt ( float value ) { return ( ( int ) ( ( double ) ( value ) ) ) ; }
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO SupportedKeyClasses" , libcore.javax.crypto.MockKey.class . getName ( ) ) ; }
public void onCreate ( android.os.Bundle arguments ) { io.appium.droiddriver.helpers.DroidDrivers.initInstrumentation ( this , arguments ) ; super . onCreate ( arguments ) ; }
public void testLibraryMoreRecentThanCodeName ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application android:label=\"@string/lib_name\" />\n" ) + " <uses-sdk android:minSdkVersion=\"XYZ\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = ( ( ( ( "" + ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <uses-sdk android:minSdkVersion=\"" ) ) + ( ( com.android.ide.common.sdk.SdkVersionInfo.HIGHEST_KNOWN_API ) + 2 ) ) + "\"/>\n" ) + "\n" ) + "</manifest>" ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertFalse ( mergedDocument.isPresent ( ) ) ; }
private boolean isScoAcceptable ( ) { return ( mAudioRouteAllowed ) && ( ( mVoiceRecognitionStarted ) || ( isInCall ( ) ) ) ; }
public native float getFloat ( long address ) ;
public com.android.internal.telephony.ims.IsimRecords getIsimRecords ( ) { return mIccRecords.getIsimRecords ( ) ; }
public boolean isEmpty ( ) { return this . isEmpty ( ) ; }
static int testObjectInScope ( ) { java.lang.Object a = Main.array [ 0 ] ; return Main.doStaticNativeCallRef ( ) ; }
private boolean markIfNecessary ( @ javax.annotation.Nonnull com.android.sched.marker.MarkerManager node ) { if ( ! ( node.containsMarker ( com.android.jack.shrob.obfuscation.KeepNameMarker.class ) ) ) { return ( node.addMarkerIfAbsent ( new com.android.jack.shrob.obfuscation.KeepNameMarker ( ) ) ) == null ; } else { return false ; } }
private boolean isWatch ( ) { return ( ( getContext ( ) . getResources ( ) . getConfiguration ( ) . uiMode ) & ( android.content.res.Configuration.UI_MODE_TYPE_WATCH ) ) == ( android.content.res.Configuration.UI_MODE_TYPE_WATCH ) ; }
private static void printUsage ( ) { java.lang.System.err.println ( "Convert API files into a more manageable file\n" ) ; java.lang.System.err.println ( "Usage\n" ) ; java.lang.System.err.println ( "\tApiCheck [enum] FOLDER OUTFILE\n" ) ; java.lang.System.exit ( 1 ) ; }
public void removeNetworkAsCurrentUser ( ) throws java.lang.Exception { addNetworkAndVerifySuccess ( ) ; removeNetworkAndVerifySuccess ( ) ; }
public java.lang.reflect.TypeVariable < java.lang.reflect.Constructor < T > > [ ] getTypeParameters ( ) { java.lang.reflect.GenericInfo info = java.lang.reflect.Constructor.getMethodOrConstructorGenericInfo ( ) ; return ( ( java.lang.reflect.TypeVariable < java.lang.reflect.Constructor < T > > [ ] ) ( info.formalTypeParameters.clone ( ) ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > > getMostRecentPhoneLookupInfo ( com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > existingInfoMap ) { return backgroundExecutorService.submit ( ( ) -> bulkUpdateInternal ( existingInfoMap ) ) ; }
public void setEditor ( com.android.ide.eclipse.adt.internal.editors.AndroidEditor editor ) { if ( ( mUiParent ) == null ) { mEditor = editor ; } else { mUiParent.setEditor ( editor ) ; } }
public boolean handleWarning ( java.lang.String message ) { return true ; }
public java.lang.String getDescription ( ) { return baseVFS.getLocation ( ) . getDescription ( ) ; }
public void setQualifier ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier qualifier ) { com.android.ide.eclipse.adt.internal.resources.configurations.NetworkCodeQualifier q = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.NetworkCodeQualifier ) ( qualifier ) ) ; mText.setText ( java.lang.Integer.toString ( q.getCode ( ) ) ) ; }
com.android.sdklib.repository.FullRevision getPlatformToolsRevision ( ) ;
public void onSubscriptionsChanged ( ) { if ( com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG ) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log ( "onSubscriptionsChanged:" ) ; initializeSubscriptions ( ) ; }
void deviceDisconnected ( java.lang.String bdaddr ) { }
public void setRealm ( java.lang.String realm ) { setFieldValue ( android.net.wifi.WifiEnterpriseConfig.REALM_KEY , realm , "" ) ; }
public javax.net.ssl.SSLSession getSession ( ) { if ( ( sslSession ) == null ) { try { startHandshake ( ) ; } catch ( java.io.IOException e ) { return org.conscrypt.SSLSessionImpl.getNullSession ( ) ; } } return sslSession ; }
protected boolean allowCompilationErrors ( ) { return true ; }
public static java.lang.String getExpectedType ( @ com.android.annotations.NonNull java.lang.String errorMessage ) { return com.android.tools.lint.detector.api.LintUtils.findSubstring ( errorMessage , "value of type @" , "/" ) ; }
public com.android.ide.common.rendering.api.Density getDensity ( ) { return com.android.ide.common.rendering.api.Density.getEnum ( mDensity.getDpi ( ) ) ; }
public void setVoiceMessageWaiting ( int line , int countWaiting ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; if ( r != null ) { r.setVoiceMessageWaiting ( line , countWaiting ) ; } }
private android.os.Message obtainMessageWithArg2 ( android.os.Message srcMsg ) { android.os.Message msg = android.os.Message.obtain ( ) ; msg.arg2 = srcMsg.arg2 ; return msg ; }
public java.lang.StringBuffer format ( double number , java.lang.StringBuffer toAppendTo , java.text.FieldPosition pos ) { return format ( number , null , toAppendTo , pos ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Boolean > isDirty ( com.google.common.collect.ImmutableSet < com.android.dialer.DialerPhoneNumber > phoneNumbers ) { return com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService ( ) . submit ( ( ) -> isDirtyInternal ( phoneNumbers ) ) ; }
public static double $opt$getDoubleField ( Main m ) { return m.doubleField ; }
void switchAppsUsingRecents ( ) throws android.os.RemoteException { android.util.Log.d ( android.autofillservice.cts.UiBot.TAG , "switchAppsUsingRecents()" ) ; mDevice.pressRecentApps ( ) ; mDevice.pressRecentApps ( ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { onRepair ( ) ; }
public void testHardwareProxyTvInputService ( ) throws java.lang.Throwable { if ( ! ( android.media.tv.cts.Utils.hasTvInputFramework ( getActivity ( ) ) ) ) { return ; } for ( final android.media.tv.TvInputInfo info : mPassthroughInputList ) { verifyCommandTuneAndHardwareVideoAvailable ( info ) ; } }
public void reload ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { reload ( ) ; } } ) ; return ; } mAwContents.reload ( ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { updateState ( com.android.mms.ui.ManageSimMessages.SHOW_BUSY ) ; deleteFromSim ( cursor ) ; dialog.dismiss ( ) ; }
protected void ensureAll ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded ) { }
private synchronized void releaseView ( android.view.View view ) { mActionPool.offer ( view ) ; ( mActionRecycled ) ++ ; }
public com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface ( int slotId , int featureType , int sessionId ) throws android.os.RemoteException { return null ; }
public void testEnterSoftApModeFromDifferentState ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; mWifiStateMachinePrime.enterClientMode ( ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "ClientModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; enterSoftApActiveMode ( ) ; }
public void setCellInfoListRate ( int rateInMillis , android.os.Message response ) { }
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.spam.SpamStatus > checkSpamStatus ( java.lang.String number , @ android.support.annotation.Nullable java.lang.String defaultCountryIso ) { return com.google.common.util.concurrent.Futures.immediateFuture ( com.android.dialer.spam.SimpleSpamStatus.notSpam ( ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; reloadSkinCombo ( ) ; reloadAbiTypeCombo ( ) ; validatePage ( ) ; }
synchronized void nScriptSetVarV ( int id , int slot , byte [ ] val ) { validate ( ) ; rsnScriptSetVarV ( mContext , id , slot , val ) ; }
public static com.google.common.io.OutputSupplier < java.io.OutputStreamWriter > newWriterSupplier ( java.io.File file , java.nio.charset.Charset charset , boolean append ) { return com.google.common.io.CharStreams.newWriterSupplier ( com.google.common.io.Files.newOutputStreamSupplier ( file , append ) , charset ) ; }
public void test ( ) { try { java.lang.Thread.sleep ( ( 2 * 1000 ) ) ; } catch ( java.lang.InterruptedException e ) { } }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws com.android.jack.JackUserException { com.android.jack.analysis.dependency.type.TypeDependenciesWriter.write ( session.getJackOutputLibrary ( ) , com.android.jack.Jack.getSession ( ) . getTypeDependencies ( ) ) ; }
public void getCDMASubscriptionResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String var2 , java.lang.String var3 , java.lang.String var4 , java.lang.String var5 , java.lang.String var6 ) { }
public void testStartPnoScan ( ) throws java.lang.Exception { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; mWifiNative.setWificondControl ( wificondControl ) ; mWifiNative.startPnoScan ( com.android.server.wifi.WifiNativeTest.TEST_PNO_SETTINGS ) ; org.mockito.Mockito.verify ( wificondControl ) . startPnoScan ( com.android.server.wifi.WifiNativeTest.TEST_PNO_SETTINGS ) ; }
com.android.jack.api01.Api01Config setOutputJackFile ( @ javax.annotation.Nonnull java.io.File file ) throws com.android.jack.api01.ConfigurationException ;
public com.android.ide.common.internal.AaptRunner getAaptRunner ( ) { return new com.android.ide.common.internal.AaptRunner ( mBuildTools.getPath ( BuildToolInfo.PathId.AAPT ) , mCmdLineRunner ) ; }
public static void applyDebuggerSystemProperty ( com.android.internal.os.ZygoteConnection.Arguments args ) { if ( RoSystemProperties.DEBUGGABLE ) { args.debugFlags |= Zygote.DEBUG_ENABLE_JDWP ; } }
public void runCmdLine ( @ com.android.annotations.NonNull java.lang.String [ ] command , @ com.android.annotations.Nullable java.util.Map < java.lang.String , java.lang.String > envVariableMap ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.Thread.sleep ( 1000 ) ; throw new java.io.IOException ( "foo" ) ; }
public void addFile ( com.android.test.common.fixture.app.TestSourceFile file ) { sourceFiles.put ( file.getName ( ) , file ) ; }
public void testReadTimeZone_valid ( ) throws java.lang.Exception { libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder builder = new libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder ( ) ; builder.initializeToValid ( ) ; assertNotNull ( createZoneInfo ( getName ( ) , java.lang.System.currentTimeMillis ( ) , builder.build ( ) ) ) ; }
public void testVFE5 ( ) { try { java.lang.Class.forName ( "dxc.junit.opcodes.opc_throw.jm.T_opc_throw_10" ) ; fail ( "expected a verification exception" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
private native java.lang.String getInnerClassName ( ) ;
public void enter ( ) { turnOnMasterTetherSettings ( ) ; simChange.startListening ( ) ; mUpstreamNetworkMonitor.start ( ) ; mOffloadController.start ( ) ; chooseUpstreamType ( true ) ; mTryCell = false ; }
android.net.INetworkPolicyListener expect ( ) { assertNull ( "expect() called before waitAndVerify()" , latch ) ; latch = new java.util.concurrent.CountDownLatch ( 1 ) ; return org.mockito.Mockito.doAnswer ( this ) . when ( listener ) ; }
public void callSessionHandover ( com.android.ims.internal.IImsCallSession i , int srcAccessTech , int targetAccessTech , com.android.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mNewListener.callSessionHandover ( srcAccessTech , targetAccessTech , reasonInfo ) ; }
public void testGoodCast ( ) throws java.lang.Exception { java.lang.String defaultType = java.security.KeyStore.getDefaultType ( ) ; org.apache.harmony.xnet.provider.jsse.TrustManagerImpl tmi = new org.apache.harmony.xnet.provider.jsse.TrustManagerImpl ( java.security.KeyStore.getInstance ( defaultType ) ) ; android.net.http.X509TrustManagerExtensions tme = new android.net.http.X509TrustManagerExtensions ( tmi ) ; }
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.SpecificKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO SupportedKeyClasses" , ( ( this . getClass ( ) . getPackage ( ) . getName ( ) ) + ".MockKey" ) ) ; }
public java.util.Collection < java.lang.String > getApplicableElements ( ) { return java.util.Collections.singletonList ( "GridLayout" ) ; }
public static native int SSL_read_BIO ( long sslNativePointer , byte [ ] dest , int destOffset , int destLength , long sourceBioRef , long sinkBioRef , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc ) throws java.io.IOException ;
public java.lang.Package getPackage ( ) { java.lang.Package pkg = super . getPackage ( ) ; if ( pkg == null ) { assert false : "TODO" ; } return pkg ; }
public static boolean isPKCS12 ( org.bouncycastle.asn1.DERObjectIdentifier algOid ) { return algOid.getId ( ) . startsWith ( PKCSObjectIdentifiers.pkcs_12PbeIds.getId ( ) ) ; }
final boolean casBusy ( ) { return com.google.common.cache.Striped64.busyUpdater.compareAndSet ( this , 0 , 1 ) ; }
public void testDateFormat ( ) { Settings.System.putString ( mContentResolver , Settings.System.TIME_12_24 , "24" ) ; assertTrue ( android.text.format.DateFormat.is24HourFormat ( mContext ) ) ; Settings.System.putString ( mContentResolver , Settings.System.TIME_12_24 , "12" ) ; assertFalse ( android.text.format.DateFormat.is24HourFormat ( mContext ) ) ; }
public static void setProperties ( java.util.Properties p ) { java.lang.System.systemProperties = p ; }
protected boolean hasNoSourceFile ( ) { return ( mFiles.size ( ) ) == 0 ; }
boolean setHoldingForConference ( ) { if ( ( getState ( ) ) == ( android.telecom.Connection.STATE_ACTIVE ) ) { setOnHold ( ) ; return true ; } return false ; }
public void parse ( java.lang.String numberToParse , java.lang.String defaultRegion , com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber ) throws com.google.i18n.phonenumbers.NumberParseException { parseHelper ( numberToParse , defaultRegion , false , true , phoneNumber ) ; }
public void test04_inject_attributes ( ) throws java.lang.Exception { processTestFiles ( ) ; }
public static native int RSA_padding_check_PKCS1_type_1 ( byte [ ] to , int tlen , byte [ ] from , int flen , int rsa_len ) ;
public void cancelAllTasks ( ) { while ( true ) { java.util.concurrent.Future < T > task = mCompletionService.poll ( ) ; if ( task != null ) { task.cancel ( true ) ; } else { break ; } } }
public void test_RSA_public_encrypt_null_key_Failure ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.RSA_public_encrypt ( 0 , new byte [ 0 ] , new byte [ 0 ] , 0 , 0 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public void run ( ) { try { zipArchive.close ( ) ; } catch ( java.io.IOException e ) { com.android.jack.Jack.logger.log ( java.util.logging.Level.FINE , ( ( "Failed to close zip for '" + dirOrZip ) + "'." ) , e ) ; } }
public int next ( int n ) { return libcore.icu.NativeBreakIterator.nextImpl ( this . address , n ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService create ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor , com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration , com.android.ide.common.resources.ResourceResolver resolver ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService renderService = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService ( editor , configuration , resolver ) ; return renderService ; }
public void tearDown ( ) { mHeadsetClientStateMachine.doQuit ( ) ; mHandlerThread.quit ( ) ; }
private java.lang.String getToolResultsBackendUrl ( ) { switch ( getBackendOption ( ) ) { case STAGING : return "https://www-googleapis-staging.sandbox.google.com/" ; case TEST : return "https://www-googleapis-test.sandbox.google.com/" ; default : return "https://www.googleapis.com/" ; } }
public int hashCode ( ) { return java.util.Arrays.hashCode ( org.conscrypt.NativeCrypto.i2d_PUBKEY ( key.getPkeyContext ( ) ) ) ; }
public long getHiSyncId ( android.bluetooth.BluetoothDevice device ) { return 0 ; }
public void testIsProjectStyle ( ) throws java.lang.Exception { assertTrue ( com.android.ide.eclipse.adt.internal.resources.ResourceHelper.isProjectStyle ( "@android:style/Theme" ) ) ; assertFalse ( com.android.ide.eclipse.adt.internal.resources.ResourceHelper.isProjectStyle ( "@style/LocalTheme" ) ) ; }
public boolean isDependencyFor ( ) { return ( mDependencyFor.size ( ) ) > 0 ; }
public void onStreamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) { }
public void run ( ) { android.os.Debug.stopMethodTracing ( ) ; android.util.Slog.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , "stopTracing" ) ; vibrate ( ) ; }
public void visitLookupSwitchInsn ( org.objectweb.asm.Label dflt , int [ ] keys , org.objectweb.asm.Label [ ] labels ) { printer.visitLookupSwitchInsn ( dflt , keys , labels ) ; printTypeOfOperandStackTop ( ) ; super . visitLookupSwitchInsn ( dflt , keys , labels ) ; }
native void rsnAllocationData2D ( long con , long id , int xoff , int yoff , int mip , int face , int w , int h , int [ ] d , int sizeBytes ) ;
public void workingLocalOnlyHotspotLegacyApBroadcast ( ) throws java.lang.Exception { workingLocalOnlyHotspot ( false ) ; }
void hangupForegroundResumeBackground ( ) { if ( com.android.internal.telephony.Phone.DEBUG_PHONE ) log ( "hangupForegroundResumeBackground" ) ; cm.hangupForegroundResumeBackground ( obtainCompleteMessage ( ) ) ; }
public void testGetExampleNumberWithoutRegion ( ) { assertNotNull ( phoneUtil.getExampleNumberForType ( PhoneNumberUtil.PhoneNumberType.FIXED_LINE ) ) ; assertNotNull ( phoneUtil.getExampleNumberForType ( PhoneNumberUtil.PhoneNumberType.MOBILE ) ) ; assertNotNull ( phoneUtil.getExampleNumberForType ( PhoneNumberUtil.PhoneNumberType.PREMIUM_RATE ) ) ; }
public void enter ( ) { maybeLogEvaluationResult ( networkEventType ( validationStage ( ) , com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED ) ) ; mConnectivityServiceHandler.sendMessage ( obtainMessage ( com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED , com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID , mNetworkAgentInfo.network.netId , null ) ) ; ( mValidations ) ++ ; }
public java.util.Set < com.android.manifmerger.XmlNode.NodeKey > getNodeKeys ( ) { return mRecords.keySet ( ) ; }
private boolean getSecureBoolean ( java.lang.String name , boolean def ) { final int defInt = ( def ) ? 1 : 0 ; return ( Settings.Secure.getInt ( mResolver , name , defInt ) ) != 0 ; }
public boolean execute ( com.android.cellbroadcastreceiver.CellBroadcastContentProvider provider ) { return provider.insertNewBroadcast ( cbm ) ; }
protected void onTextChanged ( java.lang.CharSequence text , int start , int lengthBefore , int lengthAfter ) { super . onTextChanged ( text , start , lengthBefore , lengthAfter ) ; com.android.phone.common.util.ViewUtil.resizeText ( this , mOriginalTextSize , mMinTextSize ) ; }
public com.android.sched.scheduler.ComponentFilterSet getRequiredFilters ( ) { return adapterFilters.clone ( ) ; }
public int getInstallLocation ( ) { return android.provider.Settings.System.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Secure.DEFAULT_INSTALL_LOCATION , PackageHelper.APP_INSTALL_AUTO ) ; }
private static java.lang.String getClassName ( java.lang.String className ) { int classNameEnd = ( className.length ( ) ) - ( android.test.ClassPathPackageInfoSource.CLASS_EXTENSION.length ( ) ) ; return className.substring ( 0 , classNameEnd ) ; }
public java.util.Iterator < com.android.jack.ir.ast.JMethodId > iterator ( ) { return virtualMethods.iterator ( ) ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( ( optionalAttributeVisitor ) != null ) { runtimeVisibleAnnotationsAttribute.accept ( clazz , field , optionalAttributeVisitor ) ; } }
public abstract void handleChangedNonJavaFile ( org.eclipse.core.resources.IFolder currentSourceFolder , org.eclipse.core.resources.IFile file , int kind ) ;
public char getMinusSign ( ) { return minusSign ; }
public TestCaseBuilder addCanvasClientWithoutUsingPicture ( java.lang.String debugString , android.uirendering.cts.testinfrastructure.CanvasClient canvasClient ) { }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; testScriptSide ( pRS ) ; testJavaSide ( pRS ) ; passTest ( ) ; pRS.destroy ( ) ; }
public void enter ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; mAudioWbs = false ; }
public com.intellij.updater.ValidationResult validate ( java.io.File toDir ) throws java.io.IOException { return doValidate ( getFile ( toDir ) ) ; }
public com.android.ide.common.rendering.api.ResourceValue getProjectResource ( java.lang.String resourceType , java.lang.String resourceName ) { return getResource ( resourceType , resourceName , mProjectResources ) ; }
public static com.android.jack.Sourcelist getTargetLibSourcelist ( @ javax.annotation.Nonnull java.lang.String moduleName ) { return com.android.jack.TestTools.getSourcelistWithAbsPath ( ( ( "out/target/common/obj/JAVA_LIBRARIES/" + moduleName ) + "_intermediates/jayces.java-source-list" ) ) ; }
public void conference ( java.lang.String conferenceCallId , java.lang.String callId ) throws android.os.RemoteException { mConnectionServiceDelegateAdapter.conference ( conferenceCallId , callId ) ; }
public java.util.List < java.lang.Class < ? extends lombok.ast.Node > > getApplicableNodeTypes ( ) { return java.util.Collections.< java.lang.Class < ? extends lombok.ast.Node > > singletonList ( lombok.ast.Assert.class ) ; }
public void visitAnyClass ( proguard.optimize.info.Clazz clazz ) { int accessFlags = clazz.getAccessFlags ( ) ; if ( ( accessFlags & ( ClassConstants.INTERNAL_ACC_PUBLIC ) ) == 0 ) { proguard.optimize.info.AccessMethodMarker.setAccessesPackageCode ( invokingMethod ) ; } }
public static boolean $noinline$constString0Equals ( java.lang.String s ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return s.equals ( "" ) ; }
public static native double log1p ( double x ) ;
public void sendTerminalResponseToSimResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { }
public static java.awt.Color makeDarker ( java.awt.Color color , int shades ) { if ( shades < 1 ) { return color ; } return com.google.gct.testing.GoogleCloudTestingUtils.makeDarker ( com.intellij.util.ui.UIUtil.getSlightlyDarkerColor ( color ) , ( shades - 1 ) ) ; }
public void setCellBroadcastSmsConfig ( int [ ] configValuesArray , android.os.Message response ) { android.util.Log.e ( com.android.internal.telephony.sip.SipPhoneBase.LOG_TAG , "Error! This functionality is not implemented for SIP." ) ; }
private java.lang.String getVersionCodeString ( int versionCode , com.android.ant.MultiApkExportTask.ExportData projectData ) { int trueVersionCode = versionCode * 10000 ; trueVersionCode += ( projectData.buildInfo ) * 100 ; trueVersionCode += projectData.minor ; return java.lang.Integer.toString ( trueVersionCode ) ; }
protected void engineReset ( ) { android.os.IBinder operationToken = mOperationToken ; if ( operationToken != null ) { mOperationToken = null ; mKeyStore.abort ( operationToken ) ; } mOperationHandle = null ; mChunkedStreamer = null ; }
protected void tearDown ( ) throws java.lang.Exception { super . tearDown ( ) ; getDevice ( ) . uninstallPackage ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG ) ; getDevice ( ) . uninstallPackage ( android.appsecurity.cts.PermissionsHostTest.ESCALATE_PERMISSION_PKG ) ; }
public void addBuildConfigField ( @ com.android.annotations.NonNull com.android.builder.model.ClassField field ) { mBuildConfigFields.add ( field ) ; }
protected void removeFile ( java.util.Collection < com.android.resources.ResourceType > types , com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile file ) { for ( com.android.resources.ResourceType type : types ) { removeFile ( type , file ) ; } }
private org.chromium.mojo.system.impl.CoreImpl.AsyncWaiterCancellableImpl newAsyncWaiterCancellableImpl ( long id , long dataPtr ) { return new org.chromium.mojo.system.impl.CoreImpl.AsyncWaiterCancellableImpl ( id , dataPtr ) ; }
public void registerListener ( com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener ) { if ( listener != null ) { synchronized ( com.android.sdklib.devices.DeviceManager.sListeners ) { if ( ! ( com.android.sdklib.devices.DeviceManager.sListeners.contains ( listener ) ) ) { com.android.sdklib.devices.DeviceManager.sListeners.add ( listener ) ; } } } }
public void onTuneFailed ( com.android.tv.data.Channel channel ) { android.util.Log.w ( com.android.tv.MainActivity.TAG , "Fail to start the PIP during channel tuning" ) ; if ( fromUserInteraction ) { android.widget.Toast.makeText ( this , R.string.msg_no_pip_support , Toast.LENGTH_SHORT ) . show ( ) ; enablePipView ( false , false ) ; } }
private boolean isMy ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFileEvent event ) { return com.intellij.openapi.util.text.StringUtilRt.endsWithIgnoreCase ( event.getFile ( ) . getNameSequence ( ) , mySchemeExtension ) ; }
com.google.common.util.concurrent.ListenableFuture < com.google.common.util.concurrent.Service.State > start ( ) ;
public java.lang.String getSerialNumber ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter x ) { printAnnotationLiterals ( x.getAnnotations ( ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; return false ; }
public boolean startWpsPinKeypad ( java.lang.String pin ) { if ( android.text.TextUtils.isEmpty ( pin ) ) return false ; return doBooleanCommand ( ( "WPS_PIN any " + pin ) ) ; }
public void testOutputFileNameUniquenessInLib ( ) { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject ( "libTestDep" ) ; com.android.build.gradle.model.AndroidProjectTest.compareDebugAndReleaseOutput ( projectData ) ; }
public java.lang.String getNai ( ) { return getNai ( getSlotIndex ( ) ) ; }
public void testAccountManager ( ) throws java.lang.Exception { com.android.devtools.systemimage.uitest.utils.AccountManager.addGoogleAccount ( mInstrumentation , null , null ) ; com.android.devtools.systemimage.uitest.utils.AccountManager.removeAccount ( mInstrumentation , null ) ; }
public java.util.List < com.intellij.openapi.vfs.VirtualFile > getAllClasspathEntries ( ) { return allFilesCache ; }
public void testNotification3 ( ) throws java.lang.Exception { checkGraphic ( "ic_stat_circle" , GraphicGenerator.Shape.CIRCLE , 9 , "notification-v9+" , 8 ) ; }
public void registrationServiceCapabilityChanged ( int serviceClass , int event ) { com.android.ims.ImsManager.log ( ( ( ( "registrationServiceCapabilityChanged :: serviceClass=" + serviceClass ) + ", event=" ) + event ) ) ; if ( ( mListener ) != null ) { mListener.onImsConnected ( ) ; } }
public void enableDxOptimizations ( ) { properties.put ( CodeItemBuilder.DEX_OPTIMIZE.getName ( ) , "true" ) ; }
public void testWeights ( ) throws java.lang.Exception { assertEquals ( ( "inefficient_weight.xml:10: Warning: Use a layout_width of 0dip instead of match_parent for better performance\n" + ( ( "inefficient_weight.xml:24: Warning: Use a layout_height of 0dip instead of wrap_content for better performance\n" + "inefficient_weight.xml:25: Warning: Nested weights are bad for performance\n" ) + "inefficient_weight.xml:40: Warning: Nested weights are bad for performance" ) ) , lintFiles ( "res/layout/inefficient_weight.xml" ) ) ; }
public static boolean EqualBoolVsIntConst ( boolean arg ) { return ( arg ? 0 : 1 ) == 2 ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.test ( "A" ) ; Main.test ( "B" ) ; Main.test ( "C" ) ; }
public final void setInteger ( java.lang.String name , int value ) { mMap.put ( name , new java.lang.Integer ( value ) ) ; }
public void test_U8_3_SCALE05_20_inSqure ( ) { testReszie ( inX , inX , Element.DataType.UNSIGNED_8 , 3 , 0.5F , 2.0F ) ; }
public static com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo getViewServerInfo ( com.android.ddmlib.IDevice device ) { synchronized ( com.android.hierarchyviewerlib.device.DeviceBridge.viewServerInfo ) { return com.android.hierarchyviewerlib.device.DeviceBridge.viewServerInfo.get ( device ) ; } }
public java.lang.String getName ( ) { return "CipherStreamTest" ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; if ( mShouldTestTelecom ) { setupConnectionService ( null , ( ( FLAG_REGISTER ) | ( FLAG_ENABLE ) ) ) ; } }
public void process ( org.simpleframework.transport.Socket socket ) throws java.io.IOException { configureSocket ( socket ) ; super . process ( socket ) ; }
public int getPriority ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.hid.HidService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED ; } return service.getPriority ( device ) ; }
private void fixParentAfterDisconnect ( ) { setParentCall ( null ) ; }
protected synchronized native void receive0 ( java.net.DatagramPacket p ) throws java.io.IOException ;
public K higherKey ( K key ) { return getNearKey ( key , m.GT ) ; }
public void requestGC ( ) { if ( java.lang.Daemons.GCDaemon.atomicBoolean.getAndSet ( true ) ) { return ; } synchronized ( this ) { notify ( ) ; } java.lang.Daemons.GCDaemon.atomicBoolean.set ( false ) ; }
public void testNotifyFrameworkLoad ( ) { java.lang.String frameworkDex = "/system/framework/com.android.location.provider.jar" ; notifyDexLoad ( mFooUser0 , java.util.Arrays.asList ( frameworkDex ) , mUser0 ) ; org.junit.Assert.assertNull ( mDexManager.getPackageUseInfo ( frameworkDex ) ) ; }
public static com.android.sdklib.repository.descriptors.IPkgDesc newAddon ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision , @ com.android.annotations.NonNull java.lang.String addonVendor , @ com.android.annotations.NonNull java.lang.String addonName ) { return new com.android.sdklib.repository.descriptors.PkgDescAddon ( version , revision , addonVendor , addonName ) ; }
public static native void enableCommonRetransformation ( boolean enable ) ;
public void dragLeave ( org.eclipse.swt.dnd.DropTargetEvent event ) { com.android.ide.eclipse.adt.AdtPlugin.printErrorToConsole ( "DEBUG" , "drag leave" ) ; mLeaveTargetNode = mTargetNode ; mLeaveFeedback = mFeedback ; mLeaveView = mCurrentView ; clearDropInfo ( ) ; }
static com.android.manifmerger.XmlDocument xmlDocumentFromString ( @ com.android.annotations.NonNull com.android.manifmerger.KeyResolver < java.lang.String > selectors , @ com.android.annotations.NonNull com.android.manifmerger.XmlLoader.SourceLocation location , java.lang.String input ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { return com.android.manifmerger.XmlLoader.load ( selectors , com.android.manifmerger.TestUtils.NO_PROPERTY_RESOLVER , location , input ) ; }
public void error ( org.xml.sax.SAXParseException e ) { validationError ( e.getMessage ( ) ) ; }
private java.lang.String parseMethod ( ) { java.util.regex.Matcher matcher = methodStringMatcher ( ) ; if ( matcher.matches ( ) ) return matcher.group ( 1 ) ; return null ; }
public void handleMessage ( android.os.Message msg ) { if ( ( msg.what ) == 0 ) { mConsuming = false ; setEnabled ( true ) ; } }
public void sort ( ) { java.util.Collections.sort ( fVec , new android.icu.text.SpoofChecker.Builder.ConfusabledataBuilder.SPUStringComparator ( ) ) ; }
public java.math.BigInteger getCRLNumber ( ) throws java.io.IOException { sun.security.x509.CRLNumberExtension numExt = getCRLNumberExtension ( ) ; if ( numExt != null ) { java.math.BigInteger num = ( ( java.math.BigInteger ) ( numExt.get ( numExt.NUMBER ) ) ) ; return num ; } else { return null ; } }
public void setInitialAttachApn ( java.lang.String apn , java.lang.String protocol , int authType , java.lang.String username , java.lang.String password , android.os.Message result ) { }
public static int getEmptyState ( int numLevels ) { return ( ( com.android.systemui.statusbar.phone.SignalDrawable.STATE_EMPTY ) << ( com.android.systemui.statusbar.phone.SignalDrawable.STATE_SHIFT ) ) | ( numLevels << ( com.android.systemui.statusbar.phone.SignalDrawable.NUM_LEVEL_SHIFT ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mDownloadManager = ( ( android.app.DownloadManager ) ( mContext.getSystemService ( Context.DOWNLOAD_SERVICE ) ) ) ; mWebServer = new android.webkit.cts.CtsTestServer ( mContext ) ; }
V transform ( com.google.common.collect.LinkedListMultimap.Node < K , V > node ) { return node.value ; }
public abstract com.android.dialer.calllog.model.CoalescedRow.Builder setNumberTypeLabel ( @ android.support.annotation.Nullable java.lang.String numberTypeLabel ) ;
public void execute ( com.android.monkeyrunner.core.IMonkeyDevice device ) { device.press ( key , com.android.monkeyrunner.core.TouchPressType.fromIdentifier ( downUpFlag ) ) ; }
public java.lang.String toString ( ) { return ( "InetUnixAddress[" + ( new java.lang.String ( ipaddress , java.nio.charset.Charsets.UTF_8 ) ) ) + "]" ; }
private void notifyCharacteristicChanged ( java.lang.String value ) { showMessage ( ( "Characteristic changed: " + value ) ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CHARACTERISTIC_CHANGED ) ; intent.putExtra ( com.android.cts.verifier.bluetooth.BleClientService.EXTRA_CHARACTERISTIC_VALUE , value ) ; sendBroadcast ( intent ) ; }
public void getCdmaBroadcastConfig ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG , response ) ; send ( rr ) ; }
public void testConstructor_NullSerial_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , null , android.security.KeyPairGeneratorSpecTest.NOW , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when startDate is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor getDescriptor ( java.lang.String xmlLocalName ) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor unknown = mUnknownDescriptorMap.get ( xmlLocalName ) ; if ( unknown == null ) { unknown = createUnknownDescriptor ( xmlLocalName ) ; mUnknownDescriptorMap.put ( xmlLocalName , unknown ) ; } return unknown ; }
public static java.lang.Package getPackage ( java.lang.String packageName ) { java.lang.ClassLoader classloader = dalvik.system.VMStack.getCallingClassLoader ( ) ; if ( classloader == null ) { classloader = java.lang.ClassLoader.getSystemClassLoader ( ) ; } return classloader.getPackage ( packageName ) ; }
private static native int nativeGetSize ( int obj ) ;
public void setClasspath ( java.lang.String classpath ) { this . classpath = classpath ; }
public static java.lang.String getApplicationIcon ( com.android.sdklib.io.IAbstractFile manifestFile ) throws com.android.sdklib.io.StreamException , javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.sdklib.xml.AndroidXPathFactory.newXPath ( ) ; return xPath.evaluate ( ( ( ( ( ( ( ( "/" + ( com.android.sdklib.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.sdklib.xml.AndroidManifest.NODE_APPLICATION ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.sdklib.xml.AndroidManifest.ATTRIBUTE_ICON ) ) , new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) ) ; }
private void handleReleasedFocusTimeout ( com.android.server.telecom.ConnectionServiceFocusManager.FocusRequest focusRequest ) { mCallsManagerRequester.releaseConnectionService ( mCurrentFocus ) ; updateConnectionServiceFocus ( focusRequest.call.getConnectionServiceWrapper ( ) ) ; updateCurrentFocusCall ( ) ; onRequestFocusDone ( focusRequest ) ; mCurrentFocusRequest = null ; }
public java.lang.String isValid ( java.lang.String newText ) { if ( invalid.contains ( newText ) ) { return java.lang.String.format ( "Cyclic include, not valid" , newText ) ; } return null ; }
protected void doApply ( java.util.zip.ZipFile patchFile , java.io.File toFile ) throws java.io.IOException { throw new java.io.IOException ( "dummy exception" ) ; }
public void testInvalidOrder_withComments ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String input = "" + ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\"/>" ) + "\n" ) + " <!-- with comments ! -->" ) + " <application android:label=\"@string/lib_name\" />\n" ) + "\n" ) + " <uses-sdk minSdkVersion=\"14\"/>" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument xmlDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "testInvalidOrder" ) , input ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mILogger ) ; com.android.manifmerger.PostValidator.validate ( xmlDocument , mergingReportBuilder ) ; java.lang.System.out.println ( xmlDocument.prettyPrint ( ) ) ; org.w3c.dom.Node lastChild = xmlDocument.getRootNode ( ) . getXml ( ) . getLastChild ( ) ; while ( ( lastChild.getNodeType ( ) ) != ( org.w3c.dom.Node.ELEMENT_NODE ) ) { lastChild = lastChild.getPreviousSibling ( ) ; } com.android.manifmerger.OrphanXmlElement xmlElement = new com.android.manifmerger.OrphanXmlElement ( ( ( org.w3c.dom.Element ) ( lastChild ) ) ) ; assertEquals ( ManifestModel.NodeTypes.APPLICATION , xmlElement.getType ( ) ) ; assertEquals ( org.w3c.dom.Node.COMMENT_NODE , lastChild.getPreviousSibling ( ) . getNodeType ( ) ) ; }
public void onBindViewHolder ( com.android.dialer.voicemail.listui.NewVoicemailViewHolder viewHolder , int position ) { com.android.dialer.common.LogUtil.i ( "onBindViewHolder" , ( "position" + position ) ) ; cursor.moveToPosition ( position ) ; viewHolder.bind ( cursor ) ; }
synchronized void nAllocationRead ( int id , int [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
void apply ( org.gradle.api.Project project ) { project.plugins.apply ( com.android.build.gradle.model.BaseComponentModelPlugin ) ; project.plugins.apply ( com.android.build.gradle.model.AndroidComponentModelTestPlugin ) ; }
public static void w ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.WARN ) { android.util.Log.w ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( prefix , format , args ) ) ; } }
public void setAllVisitors ( com.android.jack.dx.io.CodeReader.Visitor visitor ) { fallbackVisitor = visitor ; stringVisitor = visitor ; typeVisitor = visitor ; fieldVisitor = visitor ; methodVisitor = visitor ; dualConstantVisitor = visitor ; }
public java.lang.String getDescription ( ) { return "check drawer" ; }
public void updateUnreadCount ( java.util.List < com.android.ddmuilib.logcat.LogCatMessage > newMessages ) { for ( com.android.ddmuilib.logcat.LogCatMessage m : newMessages ) { if ( matches ( m ) ) { ( mUnreadCount ) ++ ; } } }
public void supplyPin ( java.lang.String pin , android.os.Message onComplete ) { synchronized ( mLock ) { mCi.supplyIccPin ( pin , onComplete ) ; } }
public void onClick ( android.content.DialogInterface dialog , int which ) { android.provider.SearchRecentSuggestions recent = ( ( com.android.mms.MmsApp ) ( getApplication ( ) ) ) . getRecentSuggestions ( ) ; if ( recent != null ) { recent.clearHistory ( ) ; } dialog.dismiss ( ) ; }
public static long ReturnLong34 ( ) { float imm = 34.0F ; return ( ( long ) ( imm ) ) ; }
public static void showDisabledProjectStructureDialogMessage ( ) { com.intellij.openapi.ui.Messages.showInfoMessage ( ( "We will provide a UI to configure project settings later. " + "Until then, please manually edit your build.gradle file(s.)" ) , "Project Structure" ) ; }
private static boolean isShuttingDown ( android.content.Context context ) { return android.preference.PreferenceManager.getDefaultSharedPreferences ( context ) . getBoolean ( com.android.voicemail.impl.OmtpService.IS_SHUTTING_DOWN , false ) ; }
protected final void log ( java.lang.String s ) { android.telephony.Rlog.d ( com.android.internal.telephony.ServiceStateTracker.LOG_TAG , s ) ; }
public void run ( ) { destroy ( ) ; }
public void setVoiceMessageWaiting ( int line , int countWaiting ) { mIccRecords.setVoiceMessageWaiting ( line , countWaiting ) ; }
public java.net.InetAddress getInetAddress ( ) { if ( ! ( isBound ( ) ) ) { return null ; } return impl.getInetAddress ( ) ; }
public boolean setConfigMethods ( java.lang.String cfg ) { return doBooleanCommand ( ( "SET config_methods " + cfg ) ) ; }
public boolean getScanCapabilities ( com.android.server.wifi.WifiNative.ScanCapabilities capabilities ) { return mWifiNative.getScanCapabilities ( capabilities ) ; }
public void addBoolean ( boolean v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addBoolean ( v ) ; return ; } addI8 ( ( ( byte ) ( v ? 1 : 0 ) ) ) ; }
public void onAbort ( ) { com.android.services.telephony.Log.v ( this , "onAbort" ) ; hangup ( android.telephony.DisconnectCause.LOCAL ) ; }
public int previous ( ) { return this . icuIterator.previous ( ) ; }
void ensurePackageDexOpt ( java.lang.String packageName ) { android.content.pm.IPackageManager pm = android.app.AppGlobals.getPackageManager ( ) ; try { if ( pm.performDexOptIfNeeded ( packageName , null ) ) { mDidDexOpt = true ; } } catch ( android.os.RemoteException e ) { } }
public java.util.Enumeration getKeys ( ) { return null ; }
private void launchTerminal ( com.googlecode.android_scripting.interpreter.Interpreter interpreter ) { android.content.Intent intent = new android.content.Intent ( this , com.googlecode.android_scripting.activity.ScriptingLayerService.class ) ; intent.setAction ( Constants.ACTION_LAUNCH_INTERPRETER ) ; intent.putExtra ( Constants.EXTRA_INTERPRETER_NAME , interpreter.getName ( ) ) ; startService ( intent ) ; }
public void setCallForwardingOption ( int commandInterfaceCFAction , int commandInterfaceCFReason , java.lang.String dialingNumber , int timerSeconds , android.os.Message onComplete ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "setCallForwardingOption: not possible in CDMA" ) ; }
public boolean apply ( java.util.Map.Entry < R , V > entry ) { return c.contains ( entry.getValue ( ) ) ; }
public java.lang.String getPackageName ( ) { return variantConfiguration.getPackageName ( ) ; }
public void acceptVideoRequest ( ) { throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( ) ; }
private static java.lang.String getFieldType ( org.eclipse.jdt.internal.compiler.lookup.FieldBinding binding ) { if ( ( binding.type ) != null ) { return new java.lang.String ( binding.type.readableName ( ) ) ; } return null ; }
private void assertAreNotEqual ( java.lang.Object o1 , java.lang.Object o2 ) { assertFalse ( o1.equals ( o2 ) ) ; assertFalse ( o2.equals ( o1 ) ) ; }
public void run ( ) { container.requestTransparentRegion ( mFrameLayout ) ; }
private static native java.lang.Object openDexFileNative ( java.lang.String sourceName , java.lang.String outputName , int flags , java.lang.ClassLoader loader ) ;
public static java.lang.invoke.MethodHandle exactInvoker ( java.lang.invoke.MethodType type ) { throw new java.lang.UnsupportedOperationException ( "MethodHandles.exactInvoker is not implemented" ) ; }
public com.android.monkeyrunner.easy.HierarchyViewer getHierarchyViewer ( org.python.core.PyObject [ ] args , java.lang.String [ ] kws ) { return impl.getHierarchyViewer ( ) ; }
public static long LongDivision ( ) { long a ; long b ; long c ; a = Main.$inline$long ( 8L ) ; b = Main.$inline$long ( 3L ) ; c = a / b ; return c ; }
public static com.android.dialer.voicemail.model.VoicemailEntry.Builder builder ( ) { return new com.android.dialer.voicemail.model.AutoValue_VoicemailEntry.Builder ( ) . setId ( 0 ) . setTimestamp ( 0 ) . setNumber ( com.android.dialer.DialerPhoneNumber.getDefaultInstance ( ) ) . setPhotoId ( 0 ) . setCallType ( 0 ) ; }
public static java.lang.CharSequence getSummary ( android.content.Context context , java.lang.String pkg ) { com.android.settings.fuelgauge.PowerWhitelistBackend powerWhitelist = com.android.settings.fuelgauge.PowerWhitelistBackend.getInstance ( ) ; return context.getString ( ( powerWhitelist.isSysWhitelisted ( pkg ) ? R.string.high_power_system : powerWhitelist.isWhitelisted ( pkg ) ? R.string.high_power_filter_on : R.string.high_power_off ) ) ; }
public void onDescriptorRead ( java.lang.String address , int status , int srvcType , int srvcInstId , android.os.ParcelUuid srvcUuid , int charInstId , android.os.ParcelUuid charUuid , int descrInstId , android.os.ParcelUuid descrUuid , byte [ ] value ) throws android.os.RemoteException { }
public void addAddress ( android.net.LinkAddress address ) throws java.io.IOException { }
protected android.icu.util.UResourceBundle getParent ( ) { return null ; }
public native byte getByte ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public com.android.volley.toolbox.ImageContainer get ( java.lang.String requestUrl , com.android.volley.toolbox.ImageListener imageListener , int maxWidth , int maxHeight ) { lastRequestUrl = requestUrl ; lastMaxWidth = maxWidth ; lastMaxHeight = maxHeight ; return null ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( ) ; n.flags |= android.app.Notification.FLAG_SHOW_LIGHTS ; n.ledARGB = - 256 ; mNM.notify ( 1 , n ) ; }
public com.android.jack.test.toolchain.LegacyToolchain disableDxOptimizations ( ) { useDxOptimization = false ; return this ; }
public static < K , V > org.hamcrest.org.hamcrest.Matcher < java.util.Map < K , V > > hasValue ( V value ) { return org.hamcrest.collection.IsMapContaining.hasValue ( value ) ; }
private native void nativeMarkNodeInvalid ( int node ) ;
public void getTotalNumOfItemsRsp ( byte [ ] address , int rspStatus , int uidCounter , int numItems ) ;
public void run ( ) { clearFormData ( ) ; }
public void visitLocalVariableTypeInfo ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.Method method , proguard.classfile.util.CodeAttribute codeAttribute , proguard.classfile.util.LocalVariableTypeInfo localVariableTypeInfo ) { localVariableTypeInfo.referencedClasses = findReferencedClasses ( clazz.getName ( ) , clazz.getString ( localVariableTypeInfo.u2signatureIndex ) ) ; }
private void checkPendingIntent ( android.app.PendingIntent intent ) { if ( intent == null ) { throw new java.lang.IllegalArgumentException ( "PendingIntent cannot be null." ) ; } }
protected void hideBuiltinParameters ( ) { java.util.Set < java.lang.String > hidden = mValues.hidden ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_PACKAGE_NAME ) ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API ) ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API_LEVEL ) ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_TARGET_API ) ; }
public int preceding ( int offset ) { throw new java.lang.UnsupportedOperationException ( "preceding(int) is not yet implemented" ) ; }
public void onStartRtt ( @ android.annotation.NonNull android.telecom.Connection.RttTextStream rttTextStream ) { }
public java.util.Collection < java.lang.String > getApplicableElements ( ) { return java.util.Arrays.asList ( com.android.SdkConstants.TAG_APPLICATION , com.android.SdkConstants.TAG_USES_PERMISSION , "permission" , "permission-tree" , "permission-group" , com.android.SdkConstants.TAG_USES_SDK , "uses-configuration" , "uses-feature" , "supports-screens" , "compatible-screens" , "supports-gl-texture" , com.android.SdkConstants.TAG_USES_LIBRARY , com.android.SdkConstants.TAG_ACTIVITY , com.android.SdkConstants.TAG_SERVICE , com.android.SdkConstants.TAG_PROVIDER , com.android.SdkConstants.TAG_RECEIVER ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeIntArray ( mFeatures.stream ( ) . mapToInt ( ( i ) -> i ) . toArray ( ) ) ; }
public void setDataEnabled ( boolean enable ) { setDataEnabled ( getSubId ( ) , enable ) ; }
public void test_SSL_CTX_free ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCryptoTest.NULL ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ) ; }
public void onDismiss ( android.content.DialogInterface dialog ) { this . setResult ( com.android.phone.RESULT_OK , new android.content.Intent ( ) . putExtra ( com.android.phone.EmergencyCallbackModeExitDialog.EXTRA_EXIT_ECM_RESULT , false ) ) ; finish ( ) ; }
private void hideError ( ) { mSashError.setMaximizedControl ( mCanvasViewer.getControl ( ) ) ; }
void paintSelection ( com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine gre , com.android.ide.eclipse.adt.internal.editors.layout.gle2.GCWrapper gcWrapper , boolean isMultipleSelection ) { if ( ( mNodeProxy ) != null ) { gre.callOnSelected ( gcWrapper , mNodeProxy , mName , isMultipleSelection ) ; } }
public void closeRttPipes ( ) { }
private java.security.KeyPairGenerator getKeyPairGenerator ( ) { try { return java.security.KeyPairGenerator.getInstance ( algorithmName ) ; } catch ( java.security.NoSuchAlgorithmException e ) { fail ( ( "cannot get KeyPairGenerator: " + e ) ) ; return null ; } }
public void onRecordTimeRangeChanged ( ) { if ( ( mTimeShiftManager.isAvailable ( ) ) && ( isShown ( ) ) ) { updateControls ( ) ; } }
public void await ( java.io.File nonEmptyDirectory ) { run.androidSdk.waitForDevice ( ) ; run.androidSdk.waitForNonEmptyDirectory ( nonEmptyDirectory , ( 5 * 60 ) ) ; run.androidSdk.remount ( ) ; }
public android.net.wifi.nan.TlvBufferUtils.TlvConstructor putInt ( int type , int data ) { checkLength ( 4 ) ; addHeader ( type , 4 ) ; libcore.io.Memory.pokeInt ( mArray , mPosition , data , java.nio.ByteOrder.BIG_ENDIAN ) ; mPosition += 4 ; return this ; }
private void doRedraw ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { redraw ( ) ; } } ) ; }
public boolean contains ( int ch ) { android.icu.util.VersionInfo v = android.icu.lang.UCharacter.getAge ( ch ) ; return ( v != ( android.icu.text.UnicodeSet.NO_VERSION ) ) && ( ( v.compareTo ( version ) ) <= 0 ) ; }
public void validateSimCredentialWithInvalidIMSI ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential ( ) ; cred.simCredential.imsi = "dummy" ; cred.simCredential.eapType = android.net.wifi.EAPConstants.EAP_SIM ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public void testFullscreenInProject ( ) throws java.lang.Exception { checkCreateActivityInProject ( "Fullscreen" ) ; }
public void testIgnoreDuplicateActivity ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestOrderDetector.DUPLICATE_ACTIVITY ) ; assertEquals ( "No warnings." , lintProject ( "duplicate-manifest-ignore.xml=>AndroidManifest.xml" , "res/values/strings.xml" ) ) ; }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , int timeoutMs ) { requestNetwork ( request , networkCallback , timeoutMs , inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ) ; }
public void executeShellCommand ( java.lang.String command , com.android.ddmlib.IShellOutputReceiver receiver , int timeout ) throws com.android.ddmlib.TimeoutException , java.io.IOException ;
public void visitInvalid ( int opcode , int offset , int length ) { observer.parsed ( bytes , offset , length , header ( offset ) ) ; }
public int getVoiceMessageCount ( ) { return getVoiceMessageCount ( android.telephony.TelephonyManager.getDefaultSubscription ( ) ) ; }
com.android.sched.util.location.Location getVFileLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return vfs.getVFileLocation ( parent , path ) ; }
public void testSetMaxFileSize ( ) throws java.lang.Exception { if ( ! ( hasMicrophone ( ) ) ) { return ; } testSetMaxFileSize ( ( 512 * 1024 ) , ( 50 * 1024 ) ) ; }
public void setSelected ( boolean selected ) { android.leanbackjank.app.presenter.CardPresenter.updateCardBackgroundColor ( this , selected ) ; super . setSelected ( selected ) ; }
public static native void EC_GROUP_set_generator ( long groupCtx , long pointCtx , byte [ ] n , byte [ ] h ) ;
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranchBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 2 ; branch_ = value ; onChanged ( ) ; return this ; }
protected void setUp ( ) throws java.lang.Exception { com.android.bluetooth.btservice.AdapterService inst = com.android.bluetooth.btservice.AdapterService.getAdapterService ( ) ; assertTrue ( ( inst != null ) ) ; mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter ( ) ; }
com.android.ahat.heapdump.Site getSite ( com.android.tools.perflib.heap.StackFrame [ ] frames ) { return frames == null ? this : com.android.ahat.heapdump.Site.getSite ( this , frames ) ; }
public boolean isCenterSet ( ) { return ( mCenterX ) != ( java.lang.Float.NaN ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , long [ ] data ) { validateIsInt64 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; }
private native void nativeWriteTo ( int document , java.io.OutputStream out , byte [ ] chunk ) ;
public void setDepth ( int depth ) { mDepth = depth ; }
public void onClick ( android.content.DialogInterface dialog , int id ) { android.content.Intent allowIntent = new android.content.Intent ( BluetoothPeripheralHandover.ACTION_ALLOW_CONNECT ) ; allowIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; sendBroadcast ( allowIntent ) ; this . mAlert = null ; this . finish ( ) ; }
public void onCancel ( android.content.DialogInterface arg0 ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( getName ( ) ) + " ignore connect" ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_REJECT ) ; }
private static synchronized void setHidDeviceService ( com.android.bluetooth.hid.HidDeviceService instance ) { com.android.bluetooth.hid.HidDeviceService.sHidDeviceService = instance ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession x ) { return visit ( ( ( com.android.jack.ir.ast.JNode ) ( x ) ) ) ; }
public void testLongSelectResponse ( ) { byte [ ] selectResponse = testSelectableAid ( android.omapi.cts.OmapiTest.LONG_SELECT_RESPONSE_AID ) ; assertTrue ( "Select Response is not complete" , android.omapi.cts.OmapiTest.verifyBerTlvData ( selectResponse ) ) ; }
private java.lang.String getFileName ( java.lang.String filePath ) { return new java.io.File ( filePath ) . getName ( ) ; }
public java.lang.Class < ? > [ ] getParameterTypes ( ) { return artMethod.findOverriddenMethodIfProxy ( ) . getParameterTypes ( ) ; }
java.lang.String getBuildToolsVersion ( ) { getBuildTools ( ) . getRevision ( ) ; }
private android.webkit.BrowserFrame createWindow ( boolean dialog , boolean userGesture ) { android.webkit.WebView w = mCallbackProxy.createWindow ( dialog , userGesture ) ; if ( w != null ) { return w.getWebViewCore ( ) . getBrowserFrame ( ) ; } return null ; }
public void runUntilIdle ( ) { assert ( mRunLoopID ) != 0 : "The run loop cannot run once closed" ; nativeRunUntilIdle ( mRunLoopID ) ; }
public static int $noinline$SubAddConst2 ( int arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return 14 - ( arg + 13 ) ; }
public static < T > com.android.volley.Response < T > success ( T result , com.android.volley.Cache.Entry cacheEntry ) { return new com.android.volley.Response < T > ( result , cacheEntry ) ; }
public synchronized boolean getUseDoubleTree ( ) { return mUseDoubleTree ; }
public void setDocumentValidity ( long timeMillis ) { mDocValidity = timeMillis ; }
public void onMediaScannerConnected ( ) { if ( com.android.bluetooth.opp.BluetoothOppService.V ) android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppService.TAG , "MediaScannerConnection onMediaScannerConnected" ) ; mConnection.scanFile ( mInfo.mFilename , mInfo.mMimetype ) ; }
public boolean onSurfaceTextureDestroyed ( android.graphics.SurfaceTexture surface ) { mOutPixelsAllocation.setSurface ( null ) ; return true ; }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "getConnectionState()" ) ; com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; return service.getConnectionState ( device ) ; }
public void run ( ) { setBlockOnOpen ( true ) ; open ( ) ; org.eclipse.swt.widgets.Display.getCurrent ( ) . dispose ( ) ; }
public static int ReturnIntMax ( ) { float imm = Main.$inline$float ( 1.0E34F ) ; return ( ( int ) ( imm ) ) ; }
public com.android.build.gradle.internal.test.report.ClassTestResults addTestClass ( java.lang.String className , java.lang.String device , java.lang.String project , java.lang.String flavor ) { return addPackageForClass ( className , device , project , flavor ) . addClass ( className , device , project , flavor ) ; }
public com.android.util.Pair < java.lang.Integer , java.lang.Integer > getLayoutlibVersion ( ) { return mLayoutlibVersion ; }
public void testToString ( ) { assertEquals ( "[Allow, logged, notified]" , com.android.server.telecom.tests.IncomingCallFilterTest.RESULT1.toString ( ) ) ; assertEquals ( "[Reject, notified]" , com.android.server.telecom.tests.IncomingCallFilterTest.RESULT2.toString ( ) ) ; assertEquals ( "[Reject, logged]" , com.android.server.telecom.tests.IncomingCallFilterTest.RESULT3.toString ( ) ) ; }
private android.support.v7.preference.Preference getPreference ( final android.content.pm.PermissionInfo perm , final android.content.pm.PermissionGroupInfo group ) { if ( com.android.packageinstaller.permission.ui.television.AllAppPermissionsFragment.isMutableGranularPermission ( perm.name ) ) { return getMutablePreference ( perm , group ) ; } else { return getImmutablePreference ( perm , group ) ; } }
public void recreateMe ( android.content.res.Configuration config ) { mConfiguration = config ; recreateScreens ( ) ; }
public void testStarted ( com.android.ddmlib.testrunner.TestIdentifier test ) { mRunResult.reportTestStarted ( test ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface t ) throws java.lang.Exception { if ( needsCoverage ( t ) ) { long classId = com.android.jack.coverage.CodeCoverageSelector.computeClassID ( t ) ; t.addMarker ( new com.android.jack.coverage.CodeCoverageMarker ( classId ) ) ; } }
public static void profileView ( @ com.android.annotations.NonNull com.android.ddmlib.Client client , @ com.android.annotations.NonNull java.lang.String viewRoot , @ com.android.annotations.NonNull java.lang.String view , @ com.android.annotations.NonNull com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler ) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendViewOpPacket ( client , com.android.ddmlib.HandleViewDebug.VUOP_PROFILE_VIEW , viewRoot , view , handler ) ; }
public void testCompareNull ( ) throws java.lang.Exception { try { new java.text.RuleBasedCollator ( "< a" ) . compare ( null , null ) ; fail ( ( "RuleBasedCollator.compare(null, null) " + "should throw NullPointerException" ) ) ; } catch ( java.lang.NullPointerException e ) { } }
public void enter ( ) { super . enter ( ) ; setSpeakerphoneOn ( false ) ; setBluetoothOn ( false ) ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET , mAvailableRoutes ) ; setSystemAudioState ( newState ) ; updateInternalCallAudioState ( ) ; }
public void setLayerType ( int layerType , android.graphics.Paint paint ) { if ( ( mAwContents ) != null ) { mAwContents.getAwContentsProxy ( ) . setLayerType ( layerType , paint ) ; } }
public void onRemoteConferenceAdded ( android.telecom.RemoteConference conference ) { synchronized ( android.telecom.cts.CtsConnectionService.sLock ) { if ( ( android.telecom.cts.CtsConnectionService.sConnectionService ) != null ) { android.telecom.cts.CtsConnectionService.sConnectionService.onRemoteConferenceAdded ( conference ) ; } else { android.telecom.cts.CtsConnectionService.mMockConnectionService.onRemoteConferenceAdded ( conference ) ; } } }
void readSummaryFromParcelLocked ( android.os.Parcel in ) { mCount = mLoadedCount = in.readInt ( ) ; mLastCount = in.readInt ( ) ; mUnpluggedCount = mPluggedCount = mCount ; }
public void run ( ) { android.os.Debug.stopMethodTracing ( ) ; android.util.Slog.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , "stopTracing" ) ; vibrate ( ) ; }
public void testCloseNull ( ) throws java.io.IOException { com.google.common.io.Closeables.close ( null , true ) ; com.google.common.io.Closeables.close ( null , false ) ; com.google.common.io.Closeables.closeQuietly ( ( ( java.io.Closeable ) ( null ) ) ) ; }
public void run ( ) { try { throw new TestException ( ) ; } catch ( UncaughtException ue ) { passed [ TEST_EXCEPTION_IN_UNCAUGHT ] = false ; } }
public java.lang.String toString ( ) { return name.toString ( ) ; }
void setUiTTYMode ( int sessionId , int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException ;
public int getCategory ( ) { switch ( basicType ) { case com.android.jack.dx.rop.type.Type.BT_CLOSURE : case com.android.jack.dx.rop.type.Type.BT_LONG : case com.android.jack.dx.rop.type.Type.BT_DOUBLE : { return 2 ; } } return 1 ; }
public static java.lang.Long sumToReference ( int ... ints ) { java.lang.System.err.println ( "Hi" ) ; return new java.lang.Long ( Main.VariableArityTester.sumToPrimitive ( ints ) ) ; }
public java.util.List < java.lang.String > getIncludesFrom ( java.lang.String includer ) { ensureInitialized ( ) ; return mIncludes.get ( includer ) ; }
public static android.support.v8.renderscript.RenderScript create ( android.content.Context ctx , android.support.v8.renderscript.RenderScript.ContextType ct ) { int v = ctx.getApplicationInfo ( ) . targetSdkVersion ; return android.support.v8.renderscript.RenderScript.create ( ctx , v , ct ) ; }
protected java.lang.String removeSessionData ( java.lang.String data ) { if ( ( getProject ( ) ) != null ) { data = data.replace ( getProject ( ) . getName ( ) , "PROJECTNAME" ) ; } return data ; }
private java.lang.String getSimpleName ( java.lang.String fqcn ) { return fqcn.substring ( ( ( fqcn.lastIndexOf ( '.' ) ) + 1 ) ) ; }
public boolean isActivated ( ) { return true ; }
public boolean setP2pDeviceName ( java.lang.String name ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setWpsDeviceName ( name ) ; } else { return doBooleanCommand ( ( "SET device_name " + name ) ) ; } }
public void testAddAllSelf ( ) { try { java.util.concurrent.ArrayBlockingQueue q = populatedQueue ( jsr166.SIZE ) ; q.addAll ( q ) ; shouldThrow ( ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public native float getFloat ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public void acquire ( ) { acquire ( 1 ) ; }
public static native void SSL_SESSION_free ( int sslSessionNativePointer ) ;
private static android.content.SharedPreferences getMultiDexPreferences ( android.content.Context context ) { return context.getSharedPreferences ( android.support.multidex.MultiDexExtractor.PREFS_FILE , ( ( Build.VERSION.SDK_INT ) < ( Build.VERSION_CODES.HONEYCOMB ) ? android.content.Context.MODE_PRIVATE : ( android.content.Context.MODE_PRIVATE ) | ( android.content.Context.MODE_MULTI_PROCESS ) ) ) ; }
private int getLibraryLoadFromApkStatus ( android.content.Context context ) { assert org.chromium.base.library_loader.Linker.getInstance ( ) . isUsed ( ) ; if ( mLibraryWasLoadedFromApk ) { return LibraryLoadFromApkStatusCodes.SUCCESSFUL ; } return LibraryLoadFromApkStatusCodes.UNKNOWN ; }
private int skipValue ( ) throws java.io.IOException { com.android.tools.perflib.heap.Type type = com.android.tools.perflib.heap.Type.getType ( mInput.readUnsignedByte ( ) ) ; int size = type.getSize ( ) ; skipFully ( size ) ; return size + 1 ; }
byte [ ] getAddress ( ) { synchronized ( mObject ) { return mAddress ; } }
private native java.lang.Object invoke ( java.lang.Object receiver , java.lang.Object [ ] args , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException , java.lang.reflect.InvocationTargetException ;
public java.lang.invoke.MethodHandle asFixedArity ( ) { java.lang.invoke.MethodHandle mh = this ; if ( mh.isVarargsCollector ( ) ) { mh = ( ( java.lang.invoke.Transformers.VarargsCollector ) ( mh ) ) . asFixedArity ( ) ; } assert ! ( mh.isVarargsCollector ( ) ) ; return mh ; }
public static java.util.List < java.awt.Font > getFonts ( int native_int ) { android.graphics.Typeface_Delegate delegate = android.graphics.Typeface_Delegate.sManager.getDelegate ( native_int ) ; if ( delegate == null ) { return null ; } return delegate.getFonts ( ) ; }
private void notifyAuthCancelled ( ) { synchronized ( this ) { mObexAuth.setCancelled ( true ) ; mObexAuth.notify ( ) ; } }
private static final int aggregateStamp ( int stamp_a , int stamp_b ) { if ( ( stamp_a == ( java.util.Calendar.UNSET ) ) || ( stamp_b == ( java.util.Calendar.UNSET ) ) ) { return java.util.Calendar.UNSET ; } return stamp_a > stamp_b ? stamp_a : stamp_b ; }
public boolean startTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { if ( method.isExternal ( ) ) { return false ; } return markIfNecessary ( method ) ; }
public void printf ( java.lang.String msgFormat , java.lang.Object ... args ) { messages.add ( java.lang.String.format ( msgFormat , args ) ) ; }
public int underlyingOffset ( int offset , byte [ ] bytes ) { if ( bytes != ( this . bytes ) ) { throw new java.lang.IllegalArgumentException ( "wrong bytes" ) ; } return ( start ) + offset ; }
public boolean setDeviceName ( java.lang.String name ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.setWpsDeviceName ( name ) ; } else { return doBooleanCommand ( ( "SET device_name " + name ) ) ; } }
private native boolean sendDtmfNative ( byte code ) ;
private java.io.File getDefaultGccToolchainPath ( com.android.build.gradle.internal.core.Abi abi ) { return getToolchainPath ( Toolchain.GCC , getGccToolchainVersion ( abi ) , abi ) ; }
public static void removeProvider ( int providerNumber ) { java.security.Provider p = org.apache.harmony.security.fortress.Services.providers.remove ( ( providerNumber - 1 ) ) ; org.apache.harmony.security.fortress.Services.providersNames.remove ( p.getName ( ) ) ; org.apache.harmony.security.fortress.Services.setNeedRefresh ( ) ; }
protected void beforeDebuggeeStart ( org.apache.harmony.jpda.tests.jdwp.share.JDWPUnitDebuggeeWrapper debuggeeWrapper ) { debuggeeWrapper.setExpectedExitCode ( org.apache.harmony.jpda.tests.jdwp.VirtualMachine.ExitTest.EXIT_CODE ) ; super . beforeDebuggeeStart ( debuggeeWrapper ) ; }
public void testCreate ( ) { java.util.Properties props = createExpectedProps ( ) ; com.android.sdklib.internal.repository.packages.MinToolsPackageTest.MockMinToolsPackage p = new com.android.sdklib.internal.repository.packages.MinToolsPackageTest.MockMinToolsPackage ( null , props , ( - 1 ) , null , null , null , com.android.sdklib.internal.repository.archives.Archive.Os.ANY , com.android.sdklib.internal.repository.archives.Archive.Arch.ANY , LOCAL_ARCHIVE_PATH ) ; testCreatedPackage ( p ) ; }
public void end ( ) throws com.android.ide.common.res2.ConsumerException { try { postWriteAction ( ) ; getExecutor ( ) . waitForTasksWithQuickFail ( true ) ; } catch ( java.lang.Exception e ) { throw new com.android.ide.common.res2.ConsumerException ( e ) ; } }
public void traceMethodCalls ( boolean enable ) { if ( enable != ( tracingMethods ) ) { if ( enable ) { dalvik.system.VMDebug.startMethodTracing ( ) ; } else { dalvik.system.VMDebug.stopMethodTracing ( ) ; } tracingMethods = enable ; } }
public void testStandaloneWeekdayFormatting ( ) throws java.lang.Exception { java.util.Locale fi = new java.util.Locale ( "fi" ) ; assertEquals ( "torstai" , formatDateUtc ( fi , "cccc" ) ) ; assertEquals ( "torstaina" , formatDateUtc ( fi , "EEEE" ) ) ; libcore.java.text.e161a7 Merge ; libcore.java.text.Fix CTS ; }
public void visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod x , @ javax.annotation.Nonnull com.android.sched.transform.TransformRequest transformRequest ) throws java.lang.Exception { visit ( ( ( com.android.jack.ir.ast.JNode ) ( x ) ) , transformRequest ) ; }
public void testConstructor_JUnit3Test ( ) throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( ) ; runner.run ( ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) ) + "#testMethodName\"," ) + "\"runner\":\"" ) + ( vogar.target.junit.JUnitRunner.class . getName ( ) ) ) + "\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) ) + "#testOtherName\"," ) + "\"runner\":\"" ) + ( vogar.target.junit.JUnitRunner.class . getName ( ) ) ) + "\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , ios.contents ( Stream.OUT ) ) ; }
public final void run ( ) { try { realRun ( ) ; } catch ( java.lang.Throwable t ) { threadUnexpectedException ( t ) ; } }
public static native long SSL_do_handshake_bio ( long sslNativePointer , long sourceBioRef , long sinkBioRef , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc , boolean client_mode , byte [ ] npnProtocols , byte [ ] alpnProtocols ) throws java.net.SocketTimeoutException , java.security.cert.CertificateException , javax.net.ssl.SSLException ;
private static native long nativeOpenJarFile ( java.lang.String fileName ) throws java.io.IOException ;
protected void createPagesRoot ( org.eclipse.swt.widgets.Composite parent ) { mPagesRootComposite = new org.eclipse.swt.widgets.Composite ( parent , org.eclipse.swt.SWT.NONE ) ; mStackLayout = new org.eclipse.swt.custom.StackLayout ( ) ; mPagesRootComposite.setLayout ( mStackLayout ) ; }
private void assertVerdict ( int expected , byte [ ] program , byte [ ] packet ) { android.net.apf.ApfTest.assertReturnCodesEqual ( expected , android.net.apf.ApfTest.apfSimulate ( program , packet , 0 ) ) ; }
protected void internalTearDown ( ) { debuggeeWrapper.vmMirror.resume ( ) ; printTestLog ( "FINISHED" ) ; super . internalTearDown ( ) ; }
public void checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType ) throws java.security.cert.CertificateException { checkTrusted ( chain , authType , null , null , false ) ; }
public void fileServicesUpdated ( java.util.List < android.telephony.mbms.FileServiceInfo > services ) { }
public android.net.LocalSocket accept ( ) throws java.io.IOException { android.net.LocalSocketImpl acceptedImpl = new android.net.LocalSocketImpl ( ) ; impl.accept ( acceptedImpl ) ; return android.net.LocalSocket.createLocalSocketForAccept ( acceptedImpl , LocalSocket.SOCKET_UNKNOWN ) ; }
public void test_10100 ( ) throws java.lang.Exception { assertEquals ( "image/jpeg" , java.net.URLConnection.guessContentTypeFromName ( "someFile.jpg" ) ) ; assertEquals ( "application/pdf" , java.net.URLConnection.guessContentTypeFromName ( "stuff.pdf" ) ) ; }
protected java.lang.String getWizardActionDescription ( ) { return com.google.gct.idea.util.GctBundle.message ( "sample.import.title" ) ; }
public void testInitialize_zeroInterfacesFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , true , false ) ; }
public java.util.ArrayList < com.android.dialer.smartdial.SmartDialMatchPosition > getMatchPositions ( ) { return new java.util.ArrayList < com.android.dialer.smartdial.SmartDialMatchPosition > ( mMatchPositions ) ; }
public void onOffsetsChanged ( float xOffset , float yOffset , float xStep , float yStep , int xPixels , int yPixels ) { mRenderer.setOffset ( xOffset , yOffset , xPixels , yPixels ) ; }
native void rsnAllocationRead ( int con , int id , float [ ] d ) ;
private java.io.OutputStream createOutputStream ( java.io.ByteArrayOutputStream bytes , javax.crypto.Cipher cipher , boolean useBc ) { return useBc ? ( ( java.io.OutputStream ) ( new org.bouncycastle.jcajce.io.CipherOutputStream ( bytes , cipher ) ) ) : ( ( java.io.OutputStream ) ( new javax.crypto.CipherOutputStream ( bytes , cipher ) ) ) ; }
protected void visitString ( int type , int index ) { addConstant ( new com.android.jack.dx.rop.cst.CstString ( dex.strings ( ) . get ( index ) ) ) ; }
protected void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; android.view.View content = new android.view.View ( this ) ; content.setOnApplyWindowInsetsListener ( this ) ; setContentView ( content ) ; }
public void testEncode_CharBuffer_NullEncoder ( ) { tests.api.java.nio.charset.CharsetTest.MockCharset2 c = new tests.api.java.nio.charset.CharsetTest.MockCharset2 ( "mock2" , null ) ; try { c.encode ( java.nio.CharBuffer.wrap ( "hehe" ) ) ; fail ( "Should throw NullPointerException!" ) ; } catch ( java.lang.NullPointerException e ) { } }
private static void doTestPrimitiveFieldsIntegral ( ) { java.lang.System.out.println ( "doTestPrimitiveFieldsIntegral" ) ; art.Test906.IntObject intObject = new art.Test906.IntObject ( ) ; art.Test906.setTag ( intObject , 10000 ) ; java.lang.System.out.println ( art.Test906.iterateThroughHeapPrimitiveFields ( 10000 ) ) ; java.lang.System.out.println ( art.Test906.getTag ( intObject ) ) ; }
public void testParseARPRequest ( ) { final java.lang.String packet = "FFFFFFFFFFFF 807ABF6F48F3 0806" + ( ( ( "0001 0800 06 04" + "0001" ) + "807ABF6F48F3 64706ADB" ) + "000000000000 64706FFD" ) ; final java.lang.String expected = "TX 80:7a:bf:6f:48:f3 > ff:ff:ff:ff:ff:ff arp" + " who-has 100.112.111.253" ; assertEquals ( expected , getSummary ( packet ) ) ; }
public final byte [ ] getEncoded ( ) { if ( key.isEngineBased ( ) ) { return null ; } return org.conscrypt.NativeCrypto.i2d_PKCS8_PRIV_KEY_INFO ( key.getNativeRef ( ) ) ; }
public java.lang.Object handleGetObject ( java.lang.String key ) { if ( key == null ) { throw new java.lang.NullPointerException ( ) ; } loadLookupTablesIfNecessary ( ) ; return lookup.get ( key ) ; }
public boolean isTopActivityImmersive ( ) { enforceNotIsolatedCaller ( "startActivity" ) ; synchronized ( this ) { com.android.server.am.ActivityRecord r = getFocusedStack ( ) . topRunningActivityLocked ( null ) ; return r != null ? r.immersive : false ; } }
public void uncaughtException ( java.lang.Thread t , java.lang.Throwable e ) { if ( e instanceof TestException ) { passed [ TEST_EXCEPTION_IN_UNCAUGHT ] = true ; throw new UncaughtException ( ) ; } super . uncaughtException ( t , e ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { checkBinderConnection ( ) ; return getServiceInterface ( mBinder ) . createCallSession ( sessionId , profile , listener ) ; }
protected void onPause ( ) { super . onPause ( ) ; mProcessor.exit ( ) ; }
public android.content.BroadcastReceiver getBroadcastReceiver ( ) { return mReceiver ; }
com.android.jack.test.junit.RuntimeVersion from ( ) default RuntimeVersion.D ;
public void writeToParcel ( android.os.Parcel out ) { out.writeInt ( mCount ) ; out.writeInt ( mLoadedCount ) ; out.writeInt ( mLastCount ) ; out.writeInt ( mUnpluggedCount ) ; }
synchronized long nScriptGroup2Create ( java.lang.String cachePath , long [ ] closures ) { validate ( ) ; return rsnScriptGroup2Create ( mContext , cachePath , closures ) ; }
public void test_providerCount ( ) { java.security.Provider [ ] providers = java.security.Security.getProviders ( ) ; assertTrue ( ( ( providers.length ) > 0 ) ) ; assertTrue ( ( ( providers.length ) < 10 ) ) ; }
void unregisterCallback ( ) { if ( ( mControllerCallbacks ) == null ) return ; mControllerCallbacks.cleanup ( ) ; mControllerCallbacks = null ; synchronized ( mCallbackLock ) { mRegisteredCallback = null ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; getActivity ( ) ; android.support.test.espresso.IdlingPolicies.setMasterPolicyTimeout ( 5 , java.util.concurrent.TimeUnit.SECONDS ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod x ) { return visit ( ( ( com.android.jack.ir.ast.JNode ) ( x ) ) ) ; }
public void setSkins ( java.lang.String [ ] skins ) { mSkins = skins ; }
public E peek ( ) { if ( ( size ) == 0 ) return null ; return ( ( E ) ( queue [ 0 ] ) ) ; }
public java.util.Set < K > keySet ( ) { java.util.Set < K > ks = keySet ; if ( ks != null ) return ks ; else return keySet = new KeySet ( ) ; }
public boolean isLabelProperty ( java.lang.Object element , java.lang.String property ) { return false ; }
public static native int EVP_PKEY_cmp ( int pkey1 , int pkey2 ) ;
public long getRetainedSize ( com.android.ahat.heapdump.AhatHeap heap ) { int index = heap.getIndex ( ) ; return ( index >= 0 ) && ( index < ( mRetainedSizes.length ) ) ? mRetainedSizes [ heap.getIndex ( ) ] : 0 ; }
public void finishDrawing ( android.view.IWindow window ) { if ( com.android.server.WindowManagerService.localLOGV ) android.util.Log.v ( com.android.server.WindowManagerService.TAG , ( "IWindow finishDrawing called for " + window ) ) ; finishDrawingWindow ( this , window ) ; }
boolean needsShape ( ) { return ( ( this ) == ( com.android.ide.eclipse.adt.internal.assetstudio.AssetType.LAUNCHER ) ) || ( ( this ) == ( com.android.ide.eclipse.adt.internal.assetstudio.AssetType.NOTIFICATION ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > onSuccessfulFill ( android.content.Context appContext ) { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public boolean initializeVendorHal ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.initialize ( ) ; } else { return true ; } }
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) throws com.android.sched.util.file.WrongPermissionException { return vfs.openWrite ( file ) ; }
public static void createNewUiLauncherShortcut ( android.content.Context context ) { com.android.dialer.app.MainComponent.enableComponent ( context ) ; if ( ( Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.O ) ) { com.android.dialer.app.MainComponent.createLauncherShortcutO ( context ) ; } else { com.android.dialer.app.MainComponent.createLauncherShortcutPreO ( context ) ; } }
void libToExe ( @ javax.annotation.Nonnull java.io.File in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception ;
public java.lang.String getId ( ) { return "" + ( apiVersion ) ; }
public void dismiss ( ) { mPopup.dismiss ( ) ; mPopup = null ; }
public void bulkRequestIconForPageUrl ( android.content.ContentResolver cr , java.lang.String where , android.webkit.WebIconDatabase.IconListener listener ) { throw new android.webkit.MustOverrideException ( ) ; }
public static com.android.server.wifi.ScanResults create ( int id , com.android.server.wifi.ScanDetail ... nativeResults ) { return new com.android.server.wifi.ScanResults ( id , ( - 1 ) , nativeResults ) ; }
static java.math.BigInt generatePrimeDefault ( int bitLength ) { java.math.BigInt r = java.math.BigInt.newBigInt ( ) ; java.math.NativeBN.BN_generate_prime_ex ( r.bignum , bitLength , false , 0 , 0 , 0 ) ; return r ; }
public void loggedRun ( ) { synchronized ( mLock ) { mDtmfLocalTonePlayer.stopTone ( call ) ; } }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws java.lang.Exception { java.util.Set < com.android.jack.ir.sourceinfo.FileSourceInfo > infos = session.getSourceInfoFactory ( ) . getFileSourceInfos ( ) ; for ( com.android.jack.ir.sourceinfo.FileSourceInfo info : infos ) { info.setFileName ( newSourceFileName.getPath ( ) ) ; } }
private int packageFlagsToInstallFlags ( com.android.server.pm.PackageSetting ps ) { int installFlags = 0 ; if ( com.android.server.pm.PackageManagerService.isExternal ( ps ) ) { installFlags |= android.content.pm.PackageManager.INSTALL_EXTERNAL ; } if ( com.android.server.pm.PackageManagerService.isForwardLocked ( ps ) ) { installFlags |= android.content.pm.PackageManager.INSTALL_FORWARD_LOCK ; } return installFlags ; }
public void shutdown ( ) { mRunning = false ; if ( ( mServerSocket ) != null ) { try { mServerSocket.close ( ) ; } catch ( java.io.IOException e ) { } mServerSocket = null ; } }
static com.android.cts.verifier.TestListAdapter.TestListItem createTestItem ( android.app.Activity activity , java.lang.String id , int titleRes , android.content.Intent intent ) { return com.android.cts.verifier.TestListAdapter.TestListItem.newTest ( activity , titleRes , id , intent.putExtra ( com.android.cts.verifier.managedprovisioning.DeviceOwnerPositiveTestActivity.EXTRA_TEST_ID , id ) , null ) ; }
public void callSessionUssdMessageReceived ( int mode , java.lang.String ussdMessage ) throws android.os.RemoteException { mListener.callSessionUssdMessageReceived ( mode , ussdMessage ) ; }
public void clientCertificateRequested ( int s ) { super . clientCertificateRequested ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_PrivateKey ( s , org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getClientPrivateKey ( ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_certificate ( s , org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getClientCertificates ( ) ) ; }
public void onDisconnect ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConference.TAG , "onDisconnect" ) ; mHeadsetProfile.terminateCall ( mDevice , 0 ) ; setDisconnected ( new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.LOCAL ) ) ; }
public com.android.layoutlib.api.SceneResult insertChild ( java.lang.Object parentView , com.android.layoutlib.api.IXmlPullParser childXml , java.lang.Object beforeSibling , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED.getResult ( ) ; }
public java.lang.String getCookie ( java.lang.String url ) { throw new android.webkit.MustOverrideException ( ) ; }
public void onStreamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) { try { listener.streamingServicesUpdated ( services ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
private static native java.lang.String nativeLoad ( java.lang.String filename , java.lang.ClassLoader loader , java.lang.String ldLibraryPath , java.lang.String dexPath ) ;
public void addNdkDebuggableLibraryFolders ( @ com.android.annotations.NonNull com.android.build.gradle.internal.core.Abi abi , @ com.android.annotations.NonNull java.io.File searchPath ) { this . ndkDebuggableLibraryFolders.put ( abi , searchPath ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( args [ 1 ] ) ; Main.TestWatcher w = new Main.TestWatcher ( ) ; Main.doTest ( new Transform ( w ) , w ) ; }
public void getTotalNumOfItemsRsp ( byte [ ] address , int rspStatus , int uidCounter , int numItems ) ;
public void testDegreesF32 ( ) { script_f32 = new android.renderscript.cts.ScriptC_deg_f32 ( mRS , mRes , R.raw.deg_f32 ) ; doF32 ( 305419896 , 3 ) ; }
public void unregisterListener ( com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener ) { com.android.sdklib.devices.DeviceManager.listeners.remove ( listener ) ; }
private void processAudioConfigEvent ( android.bluetooth.BluetoothAudioConfig audioConfig , android.bluetooth.BluetoothDevice device ) { log ( ( "processAudioConfigEvent: " + device ) ) ; mAudioConfigs.put ( device , audioConfig ) ; broadcastAudioConfig ( device , audioConfig ) ; }
public void testAddAll1 ( ) { try { java.util.NavigableSet q = jsr166.ConcurrentSkipListSubSetTest.set0 ( ) ; q.addAll ( null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public static synchronized com.android.internal.telephony.uicc.UiccController getInstance ( com.android.internal.telephony.PhoneBase phone ) { if ( ( com.android.internal.telephony.uicc.UiccController.mInstance ) == null ) { com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController ( phone ) ; } else { com.android.internal.telephony.uicc.UiccController.mInstance.setNewPhone ( phone ) ; } return com.android.internal.telephony.uicc.UiccController.mInstance ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mScanner.stopScan ( mCallback ) ; }
public static com.ibm.icu.impl.number.Properties parseToProperties ( java.lang.String pattern , boolean ignoreRounding ) { com.ibm.icu.impl.number.Properties properties = new com.ibm.icu.impl.number.Properties ( ) ; com.ibm.icu.impl.number.PatternString.LdmlDecimalPatternParser.parse ( pattern , properties , ignoreRounding ) ; return properties ; }
public void acceptVideoRequestAsAudio ( ) { com.android.dialer.common.LogUtil.enterBlock ( "ImsVideoTech.acceptVideoRequestAsAudio" ) ; call.getVideoCall ( ) . sendSessionModifyResponse ( new android.telecom.VideoProfile ( android.telecom.VideoProfile.STATE_AUDIO_ONLY ) ) ; setSessionModificationState ( SessionModificationState.NO_REQUEST ) ; logger.logImpression ( DialerImpression.Type.IMS_VIDEO_REQUEST_ACCEPTED_AS_AUDIO ) ; }
private static com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode createNode ( java.lang.String fqn , boolean hasChildren ) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfoTest.createNode ( null , fqn , hasChildren ) ; }
public boolean isMemoryLow ( ) { return ( mLowMemFlag ) || ( ! ( mIsBootImageOnDisk ) ) ; }
static void multiplyP ( int [ ] x , int [ ] y ) { if ( ( org.bouncycastle.crypto.modes.gcm.GCMUtil.shiftRight ( x , y ) ) != 0 ) { y [ 0 ] ^= org.bouncycastle.crypto.modes.gcm.GCMUtil.E1 ; } }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( ( mDir ) == null ? 0 : mDir.hashCode ( ) ) ; return result ; }
public static native double log10 ( double a ) ;
public static void parseToExistingProperties ( java.lang.String pattern , com.ibm.icu.impl.number.Properties properties , boolean ignoreRounding ) { com.ibm.icu.impl.number.PatternString.LdmlDecimalPatternParser.parse ( pattern , properties , ignoreRounding ) ; }
public static long $noinline$NegNeg3 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return 0 - ( - arg ) ; }
public final native void writeStringVector ( java.lang.String [ ] val ) ;
public static java.lang.String lookupNamespacePrefix ( @ com.android.annotations.NonNull org.w3c.dom.Node node , @ com.android.annotations.NonNull java.lang.String nsUri ) { java.lang.String defaultPrefix = ( com.android.SdkConstants.ANDROID_URI.equals ( nsUri ) ) ? com.android.SdkConstants.ANDROID_NS_NAME : com.android.SdkConstants.APP_PREFIX ; return com.android.utils.XmlUtils.lookupNamespacePrefix ( node , nsUri , defaultPrefix ) ; }
public static java.lang.String [ ] getKeyToCharsMap ( @ android.support.annotation.NonNull android.content.Context context ) { return com.android.dialer.dialpadview.DialpadCharMappings.isDualAlphabetsEnabled ( context ) ? com.android.dialer.dialpadview.DialpadCharMappings.KEY_TO_CHAR_MAPS.get ( com.android.dialer.compat.CompatUtils.getLocale ( context ) . getISO3Language ( ) ) : null ; }
public void separate ( android.telecom.RemoteConnection connection ) { if ( mChildConnections.contains ( connection ) ) { try { mConnectionService.splitFromConference ( connection.getId ( ) ) ; } catch ( android.os.RemoteException e ) { } } }
public void testGetNetworkOperatorNoPhoneAccount ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockCallsManager.getForegroundCall ( ) ) . thenReturn ( null ) ; java.lang.String networkOperator = mBluetoothPhoneService.mBinder.getNetworkOperator ( ) ; assertEquals ( networkOperator , "label1" ) ; }
private boolean isMarked ( @ javax.annotation.Nonnull com.android.sched.marker.MarkerManager node ) { return node.containsMarker ( com.android.jack.shrob.obfuscation.KeepNameMarker.class ) ; }
public static com.android.jack.dx.rop.code.RegisterSpec make ( int reg , com.android.jack.dx.rop.type.TypeBearer type , com.android.jack.dx.rop.code.LocalItem local ) { if ( local == null ) { throw new java.lang.NullPointerException ( "local == null" ) ; } return com.android.jack.dx.rop.code.RegisterSpec.intern ( reg , type , local ) ; }
public void timeRoundF ( int reps ) { for ( int rep = 0 ; rep < reps ; ++ rep ) { java.lang.Math.round ( f ) ; } }
native int rsnScriptIntrinsicCreate ( int con , int id , int eid ) ;
public static android.renderscript.ScriptIntrinsicBlend create ( android.renderscript.RenderScript rs , android.renderscript.Element e ) { int id = rs.nScriptIntrinsicCreate ( 7 , e.getID ( rs ) ) ; return new android.renderscript.ScriptIntrinsicBlend ( id , rs ) ; }
public void onLoaderReset ( android.content.Loader < android.database.Cursor > loader ) { if ( com.android.dialer.app.list.OldSpeedDialFragment.DEBUG ) { com.android.dialer.common.LogUtil.d ( "ContactTileLoaderListener.onLoaderReset" , null ) ; } }
public boolean isConnected ( int callServiceType , int callType ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . isConnected ( mSlotId , mSupportedFeature , callServiceType , callType ) ; } }
public boolean startTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { if ( type.isExternal ( ) ) { return false ; } return markIfNecessary ( type ) ; }
public void testDeserializeWasExternalizableClass ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737200336c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + "e546573742457617345787465726e616c697a61626c6500000000000000000c0000787078" ; libcore.java.io.SerializationTest.wasExternalizableInitializedFlag = false ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertTrue ( libcore.java.io.SerializationTest.wasExternalizableInitializedFlag ) ; }
public void run ( long sslSession ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.SSL_shutdown ( sslSession , org.conscrypt.NativeCryptoTest.INVALID_FD , org.conscrypt.NativeCryptoTest.DUMMY_CB ) ; fail ( ) ; } catch ( java.net.SocketException expected ) { } }
public static void assertEquals ( char actual , char expected ) { if ( actual != expected ) { throw new java.lang.AssertionError ( ( ( ( ( "Actual != Expected (" + actual ) + " != " ) + expected ) + ")" ) ) ; } }
public static < T > void runBasicSplitTests ( java.lang.Iterable < T > spliterable , java.util.ArrayList < T > expectedElements , java.util.Comparator < T > comparator ) { libcore.java.util.SpliteratorTester.runBasicSplitTests ( spliterable.spliterator ( ) , expectedElements , comparator ) ; }
public static long $noinline$longSmallerShiftMasking ( long value , int shift ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return value << ( shift & 3 ) ; }
public void testGetCommonInstances_Success ( ) throws java.lang.Exception { java.security.SecureRandom sr = java.security.SecureRandom.getInstance ( "SHA1PRNG" ) ; assertNotNull ( sr ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr.getProvider ( ) . getClass ( ) ) ; }
public void entityRef ( java.lang.String name ) throws java.io.IOException { check ( false ) ; writer.write ( '&' ) ; writer.write ( name ) ; writer.write ( ';' ) ; }
public boolean getDataRoamingEnabled ( ) { return mDcTracker.getDataOnRoamingEnabled ( ) ; }
public static java.util.Locale forLanguageTag ( java.lang.String languageTag ) { if ( languageTag == null ) { throw new java.lang.NullPointerException ( "languageTag == null" ) ; } return libcore.icu.ICU.forLanguageTag ( languageTag , false ) ; }
public boolean getRecordsLoaded ( ) { if ( ( ( mRecordsToLoad ) == 0 ) && ( ( mRecordsRequested ) == true ) ) { return true ; } else { return false ; } }
void putExtras ( final android.os.Bundle extras ) { if ( ( mExtras ) == null ) { mExtras = new android.os.Bundle ( ) ; } mExtras.putAll ( extras ) ; notifyExtrasChanged ( ) ; }
public void test_Any_Lower ( ) throws java.lang.Exception { assertEquals ( "hello world!" , libcore.icu.Transliterator.transliterate ( "Any-Lower" , "HeLlO WoRlD!" ) ) ; }
public void onStart ( ) { android.util.Slog.i ( com.android.server.pm.Installer.TAG , "Waiting for installd to be ready." ) ; mInstaller.waitForConnection ( ) ; }
public void setValue ( java.lang.Object value ) { mValue = value ; if ( value instanceof com.android.tools.perflib.heap.Instance ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( instance ) ; } }
synchronized void nAllocationData1D ( int id , int off , int mip , int count , int [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
protected void log ( java.lang.String s ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , ( "[CDMAPhone] " + s ) ) ; }
public void notifyIconDone ( long bssid , com.android.server.wifi.hotspot2.IconEvent iconEvent ) { mHandler.notifyIconDone ( bssid , iconEvent ) ; }
public void printf ( java.lang.String msgFormat , java.lang.Object ... args ) { java.lang.System.out.println ( java.lang.String.format ( msgFormat , args ) ) ; }
protected void trace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField f ) { if ( brush.startTrace ( f ) ) { trace ( f.getEnclosingType ( ) ) ; trace ( f.getType ( ) ) ; traceAnnotations ( f ) ; brush.endTrace ( f ) ; } }
public void testDecode_empty ( ) throws java.lang.Exception { byte [ ] decoded = libcore.io.Base64.decode ( new byte [ 0 ] ) ; libcore.io.Base64Test.assertArrayEquals ( new byte [ 0 ] , decoded ) ; }
public static int getCallbackAction ( java.lang.String number , int features , java.lang.String phoneAccountComponentName , android.content.Context context ) { return com.android.dialer.calllogutils.CallbackActionHelper.getCallbackAction ( number , features , com.android.dialer.calllogutils.CallbackActionHelper.isDuoCall ( phoneAccountComponentName , context ) ) ; }
public static boolean mimeTypeMatches ( java.lang.String mimeType , java.lang.String matchAgainst ) { java.util.regex.Pattern p = java.util.regex.Pattern.compile ( matchAgainst.replaceAll ( "\\*" , "\\.\\*" ) , java.util.regex.Pattern.CASE_INSENSITIVE ) ; return p.matcher ( mimeType ) . matches ( ) ; }
static void native_addPath ( int nPath , int src , float dx , float dy ) { android.graphics.Path_Delegate.addPath ( nPath , src , java.awt.geom.AffineTransform.getTranslateInstance ( dx , dy ) ) ; }
public abstract int [ ] blend ( int [ ] src , int [ ] dst ) ;
public boolean p2pCancelConnect ( ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.cancelConnect ( ) ; } else { return doBooleanCommand ( "P2P_CANCEL" ) ; } }
protected void tearDown ( ) throws java.lang.Exception { cursor.close ( ) ; super . tearDown ( ) ; }
public static int IntMultiplication ( ) { int a ; int b ; int c ; a = Main.$inline$int ( 7 ) ; b = Main.$inline$int ( 3 ) ; c = a * b ; return c ; }
void detachNativeFunctor ( ) { if ( ( ( mNativeDrawGLFunctor ) != 0 ) && ( ( mViewRootImpl ) != null ) ) { mViewRootImpl.detachFunctor ( nativeDrawGLFunctor ( ) ) ; } mViewRootImpl = null ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/namespace.xml:2: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" + ( ( ( ( ( ( "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:id=\"@+id/newlinear\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" orientation=\"true\">\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/namespace.xml:3: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" ) + " <Button style=\"@style/setupWizardOuterFrame\" android.text=\"Button\" android:id=\"@+id/button1\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"></Button>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "2 errors, 0 warnings\n" ) + "" ) ) , lintFiles ( "res/layout/namespace.xml" ) ) ; }
void onProgressRefresh ( float scale , boolean fromUser ) { super . onProgressRefresh ( scale , fromUser ) ; android.graphics.drawable.Drawable thumb = mThumb ; if ( thumb != null ) { setThumbPos ( getWidth ( ) , thumb , scale , java.lang.Integer.MIN_VALUE ) ; invalidate ( ) ; } }
public void testEnabledWhenOpened_DisabledWhenFinalized ( ) throws java.lang.Throwable { dalvik.system.CloseGuard.setEnabled ( true ) ; libcore.dalvik.system.CloseGuardTest.ResourceOwner owner = new libcore.dalvik.system.CloseGuardTest.ResourceOwner ( ) ; owner.open ( ) ; dalvik.system.CloseGuard.setEnabled ( false ) ; assertUnreleasedResources ( owner , 0 ) ; }
private void checkGraphic ( java.lang.String baseName , com.android.assetstudiolib.ActionBarIconGenerator.Theme theme ) throws java.io.IOException { com.android.assetstudiolib.ActionBarIconGenerator.ActionBarOptions options = new com.android.assetstudiolib.ActionBarIconGenerator.ActionBarOptions ( ) ; options.theme = theme ; com.android.assetstudiolib.ActionBarIconGenerator generator = new com.android.assetstudiolib.ActionBarIconGenerator ( ) ; checkGraphic ( 3 , "actions" , baseName , generator , options ) ; }
public android.media.MediaDrm.CryptoSession getCryptoSession ( @ android.annotation.NonNull byte [ ] sessionId , @ android.annotation.NonNull java.lang.String cipherAlgorithm , @ android.annotation.NonNull java.lang.String macAlgorithm ) { return new android.media.MediaDrm.CryptoSession ( this , sessionId , cipherAlgorithm , macAlgorithm ) ; }
public static void release ( android.content.Context context ) { if ( ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) && ( ( com.android.tv.tuner.TunerPreferences.sContentObserver ) != null ) ) { context.getContentResolver ( ) . unregisterContentObserver ( com.android.tv.tuner.TunerPreferences.sContentObserver ) ; } }
protected void deliverResponse ( java.lang.String response ) { mListener.onResponse ( response ) ; }
public static int $noinline$SubNeg2 ( int arg1 , int arg2 ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int temp = - arg1 ; return ( temp - arg2 ) | ( temp - arg2 ) ; }
public void setDataRoamingEnabled ( boolean enable ) { mDcTracker.setDataOnRoamingEnabled ( enable ) ; }
private void setCallProfile ( com.android.ims.ImsCallProfile profile ) { synchronized ( mLockObj ) { mCallProfile = profile ; trackVideoStateHistory ( mCallProfile ) ; } }
private final synchronized void updateAudioRoute ( ) { if ( mAudioRouteNeedsUpdate ) { mAudioManager.setWiredHeadsetOn ( ( ( mHeadsetState ) == 1 ) ) ; mAudioRouteNeedsUpdate = false ; } }
public static double $noinline$DivMP25 ( double arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg / ( - 0.25F ) ; }
public int startSession ( android.app.PendingIntent incomingCallIntent , com.android.ims.internal.IImsRegistrationListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . startSession ( mSlotId , mSupportedFeature , incomingCallIntent , listener ) ; } }
public static long $noinline$Div1 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg / 1 ; }
public void testConstructor3 ( ) { try { java.util.PriorityQueue q = new java.util.PriorityQueue ( ( ( java.util.Collection ) ( null ) ) ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public static void setEndpointIdentificationAlgorithm ( javax.net.ssl.SSLParameters params , java.lang.String endpointIdentificationAlgorithm ) { }
public long getLong ( ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } return getLong ( ix ( nextGetIndex ( SizeOf.LONG ) ) ) ; }
protected org.bouncycastle.math.ec.ECFieldElement getRawXCoord ( ) { return x ; }
private void readMeminfoDataset ( java.io.BufferedReader br ) throws java.io.IOException { mLabel.setText ( "PSS in kB" ) ; updateDataSet ( com.android.ddmuilib.SysinfoPanel.BugReportParser.readMeminfoDataset ( br ) ) ; }
public final void binderDied ( ) { try { release ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.IpSecService.TAG , ( "Failed to release resource: " + e ) ) ; } }
public static long [ ] copyOf ( long [ ] original , int newLength ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public void testCanEncodeCharSequence() { assertTrue(encoder.canEncode("")); assertTrue(encoder.canEncode("\ud800\udc00")); assertFalse(encoder.canEncode("\ud800\udb00")); }
public void onConfigurationChanged ( ) { mConfig = com.android.systemui.statusbar.policy.NetworkControllerImpl.Config.readConfig ( mContext ) ; mReceiverHandler.post ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { handleConfigurationChanged ( ) ; } } ) ; }
public void testField ( ) { org.apache.harmony.crypto.tests.javax.crypto.interfaces.DHPublicKeyTest.checkDHPublicKey key = new org.apache.harmony.crypto.tests.javax.crypto.interfaces.DHPublicKeyTest.checkDHPublicKey ( ) ; org.junit.Assert.assertEquals ( "Incorrect serialVersionUID" , key.getSerVerUID ( ) , ( - 6628103563352519193L ) ) ; }
protected void setXmlNode ( org.w3c.dom.Node xmlNode ) { mXmlNode = xmlNode ; }
com.android.sched.util.location.Location getLocation ( ) { return source.getLocation ( ) ; }
public static void sort ( short [ ] a , int fromIndex , int toIndex ) { java.util.Arrays.rangeCheck ( a.length , fromIndex , toIndex ) ; java.util.DualPivotQuicksort.sort ( a , fromIndex , ( toIndex - 1 ) ) ; }
public static native void dumpHprofData ( java.lang.String fileName , java.io.FileDescriptor fd ) throws java.io.IOException ;
private static dalvik.system.DexPathList.Element [ ] makePathElements ( java.util.List < java.io.File > files , java.io.File optimizedDirectory , java.util.List < java.io.IOException > suppressedExceptions ) { return dalvik.system.DexPathList.makeElements ( files , null , suppressedExceptions , true ) ; }
public void testInstallOlderRulesVersion ( ) throws java.lang.Exception { java.io.File appFile = getTimeZoneDataApkFile ( "test2" ) ; getDevice ( ) . installPackage ( appFile , true ) ; java.lang.Thread.sleep ( 30000 ) ; assertEquals ( com.android.timezone.xts.TimeZoneUpdateHostTest.STAGED_OPERATION_NONE , getStagedOperationType ( ) ) ; }
private void assertDataTransmittedByClient ( ) throws java.lang.Exception { byte [ ] firstChunkFromClient = getFirstReceivedChunkFuture ( ) . get ( 2 , java.util.concurrent.TimeUnit.SECONDS ) ; if ( ( firstChunkFromClient == null ) || ( ( firstChunkFromClient.length ) == 0 ) ) { fail ( "Client did not transmit any data to server" ) ; } }
public void onApplicationCreate ( android.content.Context appContext ) { registerContentObservers ( appContext ) ; com.android.dialer.calllog.CallLogConfig.schedulePollingJob ( appContext ) ; }
private boolean isMy ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFileEvent event ) { return com.intellij.openapi.util.text.StringUtilRt.endsWithIgnoreCase ( event.getFile ( ) . getNameSequence ( ) , mySchemeExtension ) ; }
public int hashCode ( ) { long bits = java.lang.Double.doubleToLongBits ( value ) ; return ( ( int ) ( bits ^ ( bits > > > 32 ) ) ) ; }
public com.android.dx.dex.file.ClassDefItem call ( ) { com.android.dx.dex.file.ClassDefItem clazz = com.android.dx.command.dexer.Main.translateClass ( bytes , classFile ) ; return clazz ; }
public static int $noinline$compareTo ( java.lang.String lhs , java.lang.String rhs ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return lhs.compareTo ( rhs ) ; }
public com.android.jack.jayce.ParameterNode getParameterNode ( @ javax.annotation.Nonnegative int parameterNodeIndex ) { assert ( parameters ) != null ; return parameters.get ( parameterNodeIndex ) ; }
public void testReplaceValue3_NullPointerException ( ) { try { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( 5 ) ; c.replace ( "whatever" , one , null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public void testStrings ( ) throws java.lang.Exception { assertEquals ( ( "accessibility.xml:3: Warning: [I18N] Hardcoded string \"Button\", " + ( ( "should use @string resource\n" + "accessibility.xml:6: Warning: [I18N] Hardcoded string \"Button\", " ) + "should use @string resource" ) ) , lintFiles ( "res/layout/accessibility.xml" ) ) ; }
protected void init ( ) throws java.lang.Exception { UCA = ( ( android.icu.text.RuleBasedCollator ) ( android.icu.text.Collator.getInstance ( ULocale.ROOT ) ) ) ; comparer = new android.icu.text.UTF16.StringComparator ( true , false , UTF16.StringComparator.FOLD_CASE_DEFAULT ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( ) ; n.flags |= android.app.Notification.FLAG_SHOW_LIGHTS ; n.ledARGB = - 256 ; n.ledOnMS = 1300 ; n.ledOffMS = 1300 ; mNM.notify ( 1 , n ) ; }
public void testBridge001 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( BRIDGE001 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void test002d ( ) throws java.lang.Exception { java.io.File jackOutput ; try { jackOutput = runTest002 ( true , null ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.resource.ResourceImportConflictException e ) { } }
protected void finalize ( ) throws java.lang.Throwable { try { mFrameSequenceState.destroy ( ) ; if ( ! ( mDestroyed ) ) { destroy ( ) ; } } finally { super . finalize ( ) ; } }
private static java.lang.String formatCalendar ( java.util.Calendar cal ) { java.text.SimpleDateFormat format = new java.text.SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm:ss.SSSZ" , java.util.Locale.ENGLISH ) ; format.setTimeZone ( cal.getTimeZone ( ) ) ; return format.format ( new java.util.Date ( cal.getTimeInMillis ( ) ) ) ; }
private static boolean approxEquals ( int expected , int actual ) { final int MAX_DELTA = 4 ; return ( java.lang.Math.abs ( ( expected - actual ) ) ) <= MAX_DELTA ; }
public java.lang.String getDisplayName ( ) { return ( ( ( name ) + " (" ) + ( countCombinations ( ) ) ) + ")" ; }
public android.bluetooth.BluetoothGatt connectGatt ( android.content.Context context , boolean autoConnect , android.bluetooth.BluetoothGattCallback callback , int transport ) { return connectGatt ( context , autoConnect , callback , android.bluetooth.BluetoothDevice.TRANSPORT_AUTO , android.bluetooth.BluetoothDevice.PHY_LE_1M_MASK ) ; }
synchronized void nProgramBindTexture ( int vpf , int slot , int a ) { validate ( ) ; rsnProgramBindTexture ( mContext , vpf , slot , a ) ; }
public int download ( java.lang.String appName , android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.IDownloadCallback listener ) throws android.os.RemoteException { return 0 ; }
public void setDate ( long date ) { this . mDate = date ; }
public void testConstructor_NullAliase ( ) { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockChar" , new java.lang.String [ ] { "mock" , null } ) ; fail ( "Should throw NullPointerException!" ) ; } catch ( java.lang.NullPointerException e ) { } }
public static long LongDivision ( ) { long a ; long b ; long c ; a = Main.$inline$long ( 8L ) ; b = Main.$inline$long ( 3L ) ; c = a / b ; return c ; }
public static native long SSL_set_options ( int ssl , long options ) ;
private static javax.xml.parsers.SAXParser getParser ( ) throws javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { javax.xml.validation.Schema schema = com.android.dvlib.DeviceSchema.getSchema ( ) ; if ( schema != null ) { com.android.sdklib.devices.DeviceParser.sParserFactory.setSchema ( schema ) ; } return com.android.sdklib.devices.DeviceParser.sParserFactory.newSAXParser ( ) ; }
public java.lang.String toString ( ) { if ( ( count ) == 0 ) { return "" ; } return java.lang.StringFactory.newStringFromChars ( 0 , count , value ) ; }
public static boolean isEmpty ( ) { synchronized ( org.apache.harmony.security.fortress.Services.services ) { return org.apache.harmony.security.fortress.Services.services.isEmpty ( ) ; } }
public void testConstructor_NullCanonicalName ( ) { try { tests.api.java.nio.charset.CharsetTest.MockCharset c = new tests.api.java.nio.charset.CharsetTest.MockCharset ( null , new java.lang.String [ ] { "mock" } ) ; fail ( "Should throw NullPointerException!" ) ; } catch ( java.lang.NullPointerException e ) { } }
public libcore.io.BufferIterator bigEndianIterator ( ) { return new libcore.io.NioBufferIterator ( address , ( ( int ) ( size ) ) , ( ( java.nio.ByteOrder.nativeOrder ( ) ) != ( java.nio.ByteOrder.BIG_ENDIAN ) ) ) ; }
private static boolean isAggressiveRecovery ( int value ) { return ( ( ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.CLEANUP ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.REREGISTER ) ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.RADIO_RESTART ) ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.RADIO_RESTART_WITH_PROP ) ) ; }
public void engineInit ( javax.net.ssl.ManagerFactoryParameters spec ) throws java.security.InvalidAlgorithmParameterException { throw new java.security.InvalidAlgorithmParameterException ( "ManagerFactoryParameters not supported" ) ; }
public boolean isIgnored ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { return issue != ( com.android.tools.lint.client.api.IssueRegistry.LINT_ERROR ) ; }
public void endTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod type ) { composedStatus.pop ( ) ; for ( com.android.jack.analysis.tracer.TracerBrush config : brushes ) { config.endTrace ( type ) ; } }
public void onCancel ( android.content.DialogInterface dialog ) { if ( ( mFindSuidFilesTask ) != null ) { mFindSuidFilesTask.cancel ( true ) ; } finish ( ) ; }
synchronized void nScriptGroupExecute ( int group ) { validate ( ) ; rsnScriptGroupExecute ( mContext , group ) ; }
protected java.io.File getLocalPathForFilename ( com.android.tradefed.build.IBuildInfo arg0 , java.lang.String arg1 , com.android.tradefed.device.ITestDevice arg2 ) throws com.android.tradefed.targetprep.TargetSetupError { storedApkName = arg1 ; return super . getLocalPathForFilename ( arg0 , arg1 , arg2 ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDoStatement doStmt ) { removeBreakOrCase.push ( java.lang.Boolean.valueOf ( false ) ) ; return super . visit ( doStmt ) ; }
private void notifyError ( java.lang.String message ) { showMessage ( message ) ; android.util.Log.i ( com.android.cts.verifier.bluetooth.BleClientService.TAG , message ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CLIENT_ERROR ) ; sendBroadcast ( intent ) ; }
public static lombok.ast.Node getCompilationUnit ( final java.lang.String javaSource , final java.io.File relativePath ) { com.android.tools.lint.detector.api.JavaContext context = com.android.tools.lint.detector.api.LintUtilsTest.parse ( javaSource , relativePath ) ; return context.getCompilationUnit ( ) ; }
public void onAppStatusChanged ( android.bluetooth.BluetoothDevice pluggedDevice , android.bluetooth.BluetoothHidDeviceAppConfiguration config , boolean registered ) { mCallback.onAppStatusChanged ( pluggedDevice , config , registered ) ; }
public void testEncode_CharBuffer_NullCharBuffer ( ) { tests.api.java.nio.charset.CharsetTest.MockCharset c = new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mock" , null ) ; try { c.encode ( ( ( java.nio.CharBuffer ) ( null ) ) ) ; fail ( "Should throw NullPointerException!" ) ; } catch ( java.lang.NullPointerException e ) { } }
private java.lang.String toZoneIdStr ( java.lang.String expected ) { return expected.replaceAll ( "(?:GMT|UTC)(?<off>[+\\-]?[0-9]{2}:[0-9]{2})" , "${off}" ) ; }
private void pause ( ) { if ( ( mState ) == ( android.webkit.HTML5Audio.STARTED ) ) { if ( ( mTimer ) != null ) { mTimer.purge ( ) ; } mMediaPlayer.pause ( ) ; mState = android.webkit.HTML5Audio.PAUSED ; } }
public static boolean LessThan ( int x , int y ) { return x < y ; }
public static void computeAbs ( android.renderscript.cts.TestAbs.ArgumentsShortUshort args ) { args.out = ( ( short ) ( java.lang.Math.abs ( args.inN ) ) ) ; }
native void rsnAllocationRead ( int con , int id , int [ ] d ) ;
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) throws com.android.sched.util.file.WrongPermissionException { return new java.util.zip.DeflaterOutputStream ( vfs.openWrite ( file ) , new java.util.zip.Deflater ( ) ) ; }
public com.android.jack.jayce.v0002.NNode newNode ( ) throws com.android.jack.jayce.v0002.io.InvalidTokenException { throw new com.android.jack.jayce.v0002.io.InvalidTokenException ( ( "No node coresponding to token " + ( this ) ) ) ; }
public void testResOverlay ( ) { assertFalse ( "fa" . equals ( mResOverLay.getText ( ) ) ) ; assertEquals ( "fa" , mResOverLay2.getText ( ) ) ; }
private static native java.lang.Class < ? > generateProxy ( java.lang.String name , java.lang.Class < ? > [ ] interfaces , java.lang.ClassLoader loader , java.lang.reflect.Method [ ] methods , java.lang.Class < ? > [ ] [ ] exceptions , boolean isLambdaProxy ) ;
private void assertPinnedToWifiWithCellDefault ( ) { assertEquals ( mWiFiNetworkAgent.getNetwork ( ) , mCm.getBoundNetworkForProcess ( ) ) ; assertEquals ( mCellNetworkAgent.getNetwork ( ) , mCm.getActiveNetwork ( ) ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) { isCreateCallSessionCalled = true ; return null ; }
public final java.lang.reflect.Constructor < ? > getJayceReaderConstructor ( ) throws com.android.jack.library.LibraryFormatException { ensureJayceLoaded ( ) ; return jayceReaderConstructor ; }
public static boolean isBoundKeyAlgorithm ( java.lang.String algorithm ) { if ( ! ( android.security.KeyChain.isKeyAlgorithmSupported ( algorithm ) ) ) { return false ; } return android.security.KeyStore.getInstance ( ) . isHardwareBacked ( ) ; }
boolean isAuto ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.Splits splits ) { }
private void notifyOptionChanged ( int option ) { com.android.tv.TvOptionsManager.OptionChangedListener listener = mOptionChangedListeners.get ( option ) ; if ( listener != null ) { listener.onOptionChanged ( getOptionString ( option ) ) ; } }
public static com.android.server.wifi.ScanDetail toScanDetail ( android.net.wifi.ScanResult scanResult ) { com.android.server.wifi.hotspot2.NetworkDetail networkDetail = new com.android.server.wifi.hotspot2.NetworkDetail ( scanResult.BSSID , scanResult.informationElements , scanResult.anqpLines , scanResult.frequency ) ; return new com.android.server.wifi.ScanDetail ( scanResult , networkDetail , null ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { com.android.bluetooth.hearingaid.HearingAidService service = getService ( ) ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; } return service.getConnectedDevices ( ) ; }
public void setEnabled ( boolean enabled ) { if ( enabled == ( isEnabled ( ) ) ) return ; setFlags ( ( enabled ? android.view.View.ENABLED : android.view.View.DISABLED ) , android.view.View.ENABLED_MASK ) ; refreshDrawableState ( ) ; invalidate ( ) ; }
public static short $noinline$shortToCharToShort ( short value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( ( char ) ( value ) ) ) ; }
public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach ( dalvik.system.EmulatedStackFrame stackFrame ) { frame = stackFrame ; frameBuf = java.nio.ByteBuffer.wrap ( frame.stackFrame ) . order ( java.nio.ByteOrder.LITTLE_ENDIAN ) ; numArgs = frame.type.ptypes ( ) . length ; referencesOffset = 0 ; argumentIdx = 0 ; return this ; }
synchronized double nScriptGetVarD ( int id , int slot ) { validate ( ) ; return rsnScriptGetVarD ( mContext , id , slot ) ; }
public void testEndCallWithNoCalls ( ) throws java.lang.Exception { org.junit.Assert.assertFalse ( mTSIBinder.endCall ( ) ) ; }
public static void fail ( ) { java.lang.System.err.println ( "fail" ) ; java.lang.Thread.dumpStack ( ) ; }
com.android.server.wifi.WifiNetworkScoreCache getScoreCache ( ) { return org.mockito.Mockito.mock ( com.android.server.wifi.WifiNetworkScoreCache.class ) ; }
public com.android.layoutlib.api.SceneResult getResult ( ) { assert ( this ) != ( com.android.layoutlib.api.SceneResult.SceneStatus.ERROR_UNKNOWN ) ; if ( ( this ) == ( com.android.layoutlib.api.SceneResult.SceneStatus.SUCCESS ) ) { return com.android.layoutlib.api.SceneResult.SUCCESS ; } return new com.android.layoutlib.api.SceneResult ( this ) ; }
public boolean isMwiDontStore ( ) { if ( ( isMwi ) && ( mwiDontStore ) ) { return true ; } if ( isCphsMwiMessage ( ) ) { if ( " " . equals ( getMessageBody ( ) ) ) { } return true ; } return false ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { synchronized ( mRulesLock ) { mHandler.obtainMessage ( com.android.server.net.NetworkPolicyManagerService.MSG_SCREEN_ON_CHANGED ) . sendToTarget ( ) ; } }
public void onBroadcastSignalStrengthUpdated ( int signalStrength ) { try { listener.broadcastSignalStrengthUpdated ( signalStrength ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public com.android.builder.model.AndroidProject getSingleModel ( ) { return getSingleModel ( false ) ; }
public com.android.tools.perflib.heap.Snapshot getSnapshot ( ) { return mSnapshot ; }
public char get ( int index ) { checkIndex ( index ) ; return byteBuffer.getChar ( ( index * ( libcore.io.SizeOf.CHAR ) ) ) ; }
public void startDtmf ( char c ) { }
private void rebootRecoveryWithCommand ( java.lang.String command , boolean update ) { try { mService.rebootRecoveryWithCommand ( command , update ) ; } catch ( android.os.RemoteException ignored ) { } }
public static < K , V > org.hamcrest.Matcher < java.util.Map < K , V > > hasValue ( org.hamcrest.Matcher < V > valueMatcher ) { return org.hamcrest.collection.IsMapContaining.hasEntry ( org.hamcrest.core.IsAnything.< K > anything ( ) , valueMatcher ) ; }
public boolean isActiveUserAvailable ( ) { return ( myActiveUser ) != null ; }
public void testInstrumentationRunnerArguments ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.Map < java.lang.String , java.lang.String > args ) { getTestInstrumentationRunnerArguments ( ) . putAll ( args ) ; }
public java.io.File getMappingFile ( ) { return mappingFile ; }
public static void computeCbrt ( android.renderscript.cts.TestCbrt.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 2 , 128 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.cbrt ( args.in , t ) ; }
protected void tearDown ( ) throws java.lang.Exception { java.io.File toolFolder = mBuildToolInfo.getLocation ( ) ; com.android.builder.internal.compiler.PreDexCacheTest.deleteFolder ( toolFolder ) ; com.android.builder.internal.compiler.PreDexCache.getCache ( ) . clear ( ) ; super . tearDown ( ) ; }
public void visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation , @ javax.annotation.Nonnull com.android.sched.transform.TransformRequest transformRequest ) throws java.lang.Exception { visit ( ( ( com.android.jack.ir.ast.JExpression ) ( annotation ) ) , transformRequest ) ; }
public boolean factoryReset ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return false ; service.disable ( ) ; return service.factoryReset ( ) ; }
public final void dumpSizes ( ) { for ( com.android.tools.perflib.heap.Heap heap : mHeaps.values ( ) ) { java.lang.System.out.println ( ( "+------------------ sizes for heap: " + ( heap.mName ) ) ) ; heap.dumpSizes ( ) ; } }
private void grow ( int newCapacity ) { E [ ] newData = newElementArray ( newCapacity ) ; assert ( elementCount ) <= newCapacity ; java.lang.System.arraycopy ( elementData , 0 , newData , 0 , elementCount ) ; elementData = newData ; }
public void testPlayHlsStreamWithQueryString ( ) throws java.lang.Throwable { localHlsTest ( "hls.m3u8" , true ) ; }
public void setPushLevel ( java.util.logging.Level newLevel ) throws java.lang.SecurityException { if ( newLevel == null ) { throw new java.lang.NullPointerException ( ) ; } java.util.logging.LogManager manager = java.util.logging.LogManager.getLogManager ( ) ; checkPermission ( ) ; pushLevel = newLevel ; }
public static native void SSL_renegotiate ( int sslNativePointer ) throws javax.net.ssl.SSLException ;
public static void expectEquals ( long expected , long result ) { if ( expected != result ) { throw new java.lang.Error ( ( ( ( "Expected: " + expected ) + ", found: " ) + result ) ) ; } }
public static android.content.SyncStatusInfo getSyncStatus ( android.accounts.Account account , java.lang.String authority ) { try { return android.content.ContentResolver.getContentService ( ) . getSyncStatus ( account , authority ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( "the ContentService should always be reachable" , e ) ; } }
public boolean startScan ( android.os.WorkSource workSource ) { try { mService.startScan ( workSource ) ; return true ; } catch ( android.os.RemoteException e ) { return false ; } }
native void rsnAllocationSyncAll ( int con , int alloc , int src ) ;
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) throws com.android.sched.util.file.WrongPermissionException { return vfs.openWrite ( file ) ; }
public java.lang.String getName ( ) { assert ( name ) != null ; return name ; }
public boolean isReadOnly ( ) { return isReadOnly ; }
private void gotoCameraApp ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Camera" ) ; }
public final void run ( ) { try { realRun ( ) ; threadShouldThrow ( "InterruptedException" ) ; } catch ( java.lang.InterruptedException success ) { threadAssertFalse ( java.lang.Thread.interrupted ( ) ) ; } catch ( java.lang.Throwable t ) { threadUnexpectedException ( t ) ; } }
public void testAtanPiF32 ( ) { script_f32 = new android.renderscript.cts.ScriptC_atanpi_f32 ( mRS , mRes , R.raw.atanpi_f32 ) ; doF32 ( 291 , 5 ) ; }
protected void receiveNewSessionTicketMessage ( java.io.ByteArrayInputStream buf ) throws java.io.IOException { org.bouncycastle.crypto.tls.NewSessionTicket newSessionTicket = org.bouncycastle.crypto.tls.NewSessionTicket.parse ( buf ) ; org.bouncycastle.crypto.tls.TlsProtocol.assertEmpty ( buf ) ; tlsClient.notifyNewSessionTicket ( newSessionTicket ) ; }
public static void computeExp2 ( android.renderscript.cts.TestExp2.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 16 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.exp2 ( args.inX , t ) ; }
public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; mVoicemailPlaybackPresenter.onSaveInstanceState ( outState ) ; }
public java.lang.String getActions ( ) { return "<all actions>" ; }
public static long $noinline$longUnnecessaryShiftMasking ( long value , int shift ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return value > > ( shift & 63 ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; Main.doTest ( ) ; }
public void addExtension ( org.bouncycastle.asn1.DERObjectIdentifier oid , boolean critical , org.bouncycastle.asn1.ASN1Encodable value ) { extGenerator.addExtension ( new org.bouncycastle.asn1.ASN1ObjectIdentifier ( oid.getId ( ) ) , critical , value ) ; }
protected void log ( java.lang.String s ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , ( "[CDMAPhone] " + s ) ) ; }
org.gradle.model.collection.ManagedSet < com.android.build.gradle.managed.ManagedString > getAbiFilters ( ) ;
public void disconnect ( ) { try { mConnectionService.disconnect ( mId ) ; } catch ( android.os.RemoteException e ) { } }
public void printf ( java.lang.String format , java.lang.Object ... args ) { add ( "P " , format , args ) ; }
public void testProcessChldAddHeldToConfHolding ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall ( ) ; addCallCapability ( activeCall , Connection.CAPABILITY_MERGE_CONFERENCE ) ; boolean didProcess = mBluetoothPhoneService.mBinder.processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_ADDHELDTOCONF ) ; org.mockito.Mockito.verify ( activeCall ) . mergeConference ( ) ; assertEquals ( didProcess , true ) ; }
public void test_setOOBInlineZ ( ) throws java.lang.Exception { java.net.Socket theSocket = new java.net.Socket ( ) ; theSocket.setOOBInline ( true ) ; assertTrue ( "expected OOBIline to be true" , theSocket.getOOBInline ( ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { reloadTagAbiCombo ( ) ; validatePage ( ) ; }
public static com.android.bluetooth.ObexServerSockets create ( com.android.bluetooth.IObexConnectionHandler validator ) { return com.android.bluetooth.ObexServerSockets.create ( validator , BluetoothAdapter.SOCKET_CHANNEL_AUTO_STATIC_NO_SDP , BluetoothAdapter.SOCKET_CHANNEL_AUTO_STATIC_NO_SDP ) ; }
public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( myPassCountCheckbox.isSelected ( ) ) { myConditionCheckbox.setSelected ( false ) ; } updateCheckboxes ( ) ; }
public void test_SSL_do_handshake_NULL_SSL ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , null , null , 0 , false , null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors ( ) ; }
public void test011_1 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST011_1 ) . setProguardFlagsFileNames ( new java.lang.String [ ] { "proguard.flags001" , "../dontobfuscate.flags" } ) . compileAndRunTest ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; }
synchronized void nObjDestroy ( int id ) { if ( ( mContext ) != 0 ) { rsnObjDestroy ( mContext , id ) ; } }
public void log ( java.lang.String log ) { if ( acceptLog ( log ) ) { mSdkLog.printf ( " %1$s" , log ) ; } }
private com.android.se.security.ResponseApdu send ( com.android.se.security.CommandApdu cmdApdu ) { try { byte [ ] response = mChannel.transmit ( cmdApdu.toBytes ( ) ) ; return new com.android.se.security.ResponseApdu ( response ) ; } catch ( android.os.RemoteException e ) { return null ; } }
public void test_checkClientTrusted_02 ( ) { org.apache.harmony.xnet.tests.support.X509TrustManagerImpl xtm = new org.apache.harmony.xnet.tests.support.X509TrustManagerImpl ( ) ; java.security.cert.X509Certificate [ ] xcert = setInvalid ( ) ; try { xtm.checkClientTrusted ( xcert , "SSL" ) ; fail ( "CertificateException wasn't thrown" ) ; } catch ( java.security.cert.CertificateException ce ) { } }
boolean needFetch ( ) { if ( ( fetchTime ) == 0 ) { return true ; } long current = java.lang.System.currentTimeMillis ( ) ; if ( ( current - ( fetchTime ) ) > ( com.android.ddmlib.FileListingService.REFRESH_TEST ) ) { return true ; } return false ; }
public static byte $noinline$longAnd0xffToByte ( long value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( byte ) ( value & 255 ) ) ; }
public native void setInt ( java.lang.Object object , int value ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public java.lang.String getClientName ( int pid ) { return mClientInfo.get ( java.lang.Integer.valueOf ( pid ) ) ; }
public E peekFirst ( ) { return elements [ head ] ; }
protected final void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; if ( ! ( isSupported ( ) ) ) return ; setUpMeteredNetwork ( ) ; removePowerSaveModeWhitelist ( com.android.cts.net.hostside.TEST_APP2_PKG ) ; setAppIdle ( false ) ; turnBatteryOff ( ) ; registerBroadcastReceiver ( ) ; }
public int queryCallBarring ( int cbType ) throws android.os.RemoteException { return - 1 ; }
public static native int EVP_VerifyFinal ( int ctx , byte [ ] signature , int offset , int length , int key ) ;
public void testConnectWithNoDisconnectAndSingleExistingNetwork ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , false , false ) ; executeAndValidateConnectSequence ( 0 , true , false ) ; }
public void showWarning ( java.lang.String message ) { java.lang.System.out.println ( ( "Warning: " + message ) ) ; }
public void test_SSL_do_handshake_NULL_SSL ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto.SSL_do_handshake ( org.conscrypt.NativeCryptoTest.NULL , null , null , 0 , false , null ) ; }
public void onPause ( ) { super . onPause ( ) ; synchronized ( mToneGeneratorLock ) { if ( ( mToneGenerator ) != null ) { mToneGenerator.release ( ) ; mToneGenerator = null ; } } }
public com.ibm.icu.impl.UResource.ArraySink getOrCreateArraySink ( com.ibm.icu.impl.UResource.Key key , int size ) { return null ; }
public void test_entryCompatibility_compiletime ( ) { java.lang.Class c = java.util.Hashtable.Entry.class ; assertEquals ( "java.util.Map$Entry" , c.getName ( ) ) ; assertEquals ( java.util.Map.Entry.class , c ) ; }
public java.lang.String getCookie ( java.lang.String url , boolean privateBrowsing ) { throw new android.webkit.MustOverrideException ( ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface t ) throws java.lang.Exception { if ( com.android.jack.coverage.CodeCoverageSelector.needsCoverage ( t ) ) { long classId = com.android.jack.coverage.CodeCoverageSelector.computeClassID ( t ) ; t.addMarker ( new com.android.jack.coverage.CodeCoverageMarker ( classId ) ) ; } }
public static void computeClz ( android.renderscript.cts.TestClz.ArgumentsShortShort args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( short ) ( ( java.lang.Integer.numberOfLeadingZeros ( ( ( args.inValue ) & 65535 ) ) ) - 16 ) ) ; }
public void copyFromUnchecked ( java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFromUnchecked" ) ; copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public static void writeUint16 ( int i , java.io.OutputStream output ) throws java.io.IOException { output.write ( ( i > > 8 ) ) ; output.write ( i ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "getConnectedDevices()" ) ; return getDevicesMatchingConnectionStates ( new int [ ] { android.bluetooth.BluetoothProfile.STATE_CONNECTED } ) ; }
native boolean lutTest ( int X , int Y , int lutSize , byte [ ] input , byte [ ] input2 , byte [ ] output ) ;
public static long UShrLongInt ( ) { long lhs = Main.$inline$long ( ( - 9 ) ) ; int rhs = Main.$inline$int ( 2 ) ; return lhs > > > rhs ; }
public void tearDown ( ) throws java.lang.Exception { tearDownSdk ( ) ; tearDownAndroidHome ( ) ; }
static void inlinedForNull ( java.lang.Iterable < ? > it ) { if ( it != null ) { it.iterator ( ) ; if ( Main.doThrow ) { throw new java.lang.Error ( "" ) ; } } }
public int checkPermission ( java.lang.String permission , int pid , int uid ) { if ( permission == null ) { return android.content.pm.PackageManager.PERMISSION_DENIED ; } return checkComponentPermission ( permission , pid , uid , ( - 1 ) ) ; }
public void testLenientUrlToUriNul ( ) throws java.lang.Exception { testUrlToUriMapping ( " " , "%00" , "%00" , "%00" , "%00" ) ; }
public synchronized boolean getLoadsImagesAutomatically ( ) { throw new android.webkit.MustOverrideException ( ) ; }
java.lang.Boolean isApplication ( ) { return true ; }
static java.lang.Object invoke ( java.lang.reflect.Proxy proxy , java.lang.reflect.ArtMethod method , java.lang.Object [ ] args ) throws java.lang.Throwable { java.lang.reflect.InvocationHandler h = proxy.h ; return h.invoke ( proxy , new java.lang.reflect.Method ( method ) , args ) ; }
public void test001_3WithJill ( ) throws java.lang.Exception { com.android.jill.JillTestTools.checkStructureWithJill ( com.android.jill.AnnotationTest.BOOTCLASSPATH , null , new java.io.File ( com.android.jill.AnnotationTest.ANNOTATION001_PATH , "Annotation2.java" ) , false ) ; }
synchronized int nFileA3DGetEntryByIndex ( int fileA3D , int index ) { validate ( ) ; return rsnFileA3DGetEntryByIndex ( mContext , fileA3D , index ) ; }
private void assertNoTombstone ( java.lang.String alias ) { assertTrue ( org.conscrypt.TrustedCertificateStore.isUser ( alias ) ) ; assertFalse ( org.conscrypt.TrustedCertificateStoreTest.file ( alias ) . exists ( ) ) ; }
public boolean isPlayerConnected ( ) { if ( ( mMediaBrowser ) != null ) { return mMediaBrowser.isConnected ( ) ; } else { if ( com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG , "isPlayerConnected: mMediaBrowser = null!" ) ; return false ; } }
private void writeInt ( java.io.FileOutputStream fos , int value ) throws java.io.IOException { java.nio.ByteBuffer b = java.nio.ByteBuffer.allocate ( 4 ) ; b.putInt ( value ) ; fos.write ( b.array ( ) ) ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( accepted ( clazz , runtimeVisibleAnnotationsAttribute ) ) { runtimeVisibleAnnotationsAttribute.accept ( clazz , field , attributeVisitor ) ; } }
public java.util.Collection < V > values ( ) { java.util.Collection < V > vs = values ; if ( vs != null ) return vs ; else return values = new Values ( ) ; }
public void setCookie ( java.lang.String url , java.lang.String value , android.webkit.ValueCallback < java.lang.Boolean > callback ) { throw new android.webkit.MustOverrideException ( ) ; }
private void bindDataToCards ( com.android.contacts.quickcontact.QuickContactActivity.Cp2DataCardModel cp2DataCardModel ) { startInteractionLoaders ( cp2DataCardModel ) ; populateContactAndAboutCard ( cp2DataCardModel , true ) ; populateSuggestionCard ( ) ; }
protected void renameResource ( @ com.android.annotations.NonNull java.lang.Object [ ] testData , @ com.android.annotations.NonNull java.lang.Object resource , boolean updateReferences , @ com.android.annotations.NonNull java.lang.String newName , @ com.android.annotations.NonNull java.lang.String expected ) throws java.lang.Exception { org.eclipse.core.resources.IProject project = createProject ( testData ) ; renameResource ( project , resource , updateReferences , newName , expected ) ; }
void log ( java.lang.String s ) { if ( com.android.internal.telephony.ims.IsimUiccRecords.DBG ) android.util.Log.d ( com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG , ( "[ISIM] " + s ) ) ; }
public void stop ( ) { synchronized ( mLock ) { mRunning = false ; } clearLinkProperties ( ) ; mNetlinkSocketObserver.clearNetlinkSocket ( ) ; }
public void error ( java.lang.Throwable t ) { log.error ( null , "error!" , t ) ; }
public final android.content.ContentProviderClient acquireContentProviderClient ( android.net.Uri uri ) { android.content.IContentProvider provider = acquireProvider ( uri ) ; if ( provider != null ) { return new android.content.ContentProviderClient ( this , provider ) ; } return null ; }
public void setAnonymousIdentity ( java.lang.String anonymousIdentity ) { setFieldValue ( android.net.wifi.WifiEnterpriseConfig.ANON_IDENTITY_KEY , anonymousIdentity , "" ) ; }
public boolean startScan ( android.os.WorkSource workSource ) { try { mService.startScan ( workSource ) ; return true ; } catch ( android.os.RemoteException e ) { return false ; } }
public com.android.tools.r8.utils.AndroidApp.Builder addProgramFiles ( java.util.Collection < java.nio.file.Path > files , boolean skipDex ) throws java.io.IOException { for ( java.nio.file.Path file : files ) { addProgramFile ( file , skipDex ) ; } return this ; }
public boolean verify ( java.lang.String host , java.security.cert.X509Certificate certificate ) { return java.net.InetAddress.isNumeric ( host ) ? verifyIpAddress ( host , certificate ) : verifyHostName ( host , certificate ) ; }
public java.lang.String getTargetHashString ( ) { if ( ( mTarget ) != null ) { return mTarget.hashString ( ) ; } if ( ( mProperties ) != null ) { return mProperties.getProperty ( ProjectProperties.PROPERTY_TARGET ) ; } return null ; }
private static java.util.Properties createSystemProperties ( ) { java.util.Properties p = new java.lang.System.PropertiesWithNonOverrideableDefaults ( java.lang.System.unchangeableSystemProperties ) ; p.put ( "os.arch" , Libcore.os.uname ( ) . machine ) ; p.put ( "java.io.tmpdir" , "/tmp" ) ; return p ; }
public com.android.tools.lint.client.api.Configuration getConfiguration ( com.android.tools.lint.detector.api.Project project ) { return this . getConfiguration ( project ) ; }
private void assertChecksumEquals ( int expected , short actual ) { assertEquals ( java.lang.Integer.toHexString ( expected ) , java.lang.Integer.toHexString ( ( actual & 65535 ) ) ) ; }
java.lang.String getBuildToolsVersion ( ) { getBuildTools ( ) . getRevision ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { art.Main.bindAgentJNIForClass ( Main.class ) ; Main.doTest ( ) ; }
public static com.android.jack.Options buildCommandLineArgs ( @ javax.annotation.Nonnull java.io.File [ ] filesOrSourcelists ) throws java.io.IOException { return com.android.jack.TestTools.buildCommandLineArgs ( null , null , filesOrSourcelists ) ; }
private static boolean checkHardwareTypeSkipTest ( java.lang.String hardwareTypeString ) { return ( ( hardwareTypeString.contains ( "android.hardware.type.watch" ) ) || ( hardwareTypeString.contains ( "android.hardware.type.television" ) ) ) || ( android.theme.cts.ThemeHostTest.mVrHeadset ) ; }
private static java.lang.String escapeXml ( @ com.android.annotations.NonNull java.lang.String unescaped ) { java.lang.String escaped = com.google.common.xml.XmlEscapers.xmlAttributeEscaper ( ) . escape ( unescaped ) ; assert unescaped.equals ( com.android.build.gradle.tasks.annotations.Extractor.unescapeXml ( escaped ) ) : ( unescaped + " to " ) + escaped ; return escaped ; }
public void testBroken ( ) throws java.lang.Exception { assertEquals ( ( "broken.xml:6: Warning: Unexpected text found in layout file: \"ImageButton " + ( "android:id=\"@+id/android_logo2\" android:layout_width=\"wrap_content\"" + " android:layout_heigh...\"" ) ) , lintProject ( "res/layout/broken.xml" ) ) ; }
public void exit ( ) { sendBackgroundScanFailedToAllAndClear ( WifiScanner.REASON_UNSPECIFIED , "Scan was interrupted" ) ; sendHotlistFailedToAllAndClear ( WifiScanner.REASON_UNSPECIFIED , "Scan was interrupted" ) ; mScannerImpl.cleanup ( ) ; }
public java.lang.String getMessage ( ) { return ( ( "Missing requirement for Java source version " + ( javaVersion ) ) + " support: " ) + ( getCause ( ) . getMessage ( ) ) ; }
abstract int socketGetOption ( int opt , java.lang.Object iaContainerObj ) throws java.net.SocketException ;
private void releaseWakeLock ( ) { synchronized ( mPartialWakeLock ) { if ( mPartialWakeLock.isHeld ( ) ) { log ( "releaseWakeLock" ) ; mPartialWakeLock.release ( ) ; } } }
public void reset ( ) { destroyAllSessions ( ) ; android.autofillservice.cts.AutoFillServiceTestCase.sReplier.reset ( ) ; android.autofillservice.cts.InstrumentedAutoFillService.resetStaticState ( ) ; android.autofillservice.cts.AuthenticationActivity.resetStaticState ( ) ; }
public void testRefactor1_noreferences ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT , false , false , "my.pkg.name" , ( "CHANGES:\n" + ( "-------\n" + "* Rename package 'com.example.refactoringtest' to 'my.pkg.name'" ) ) ) ; }
private android.bluetooth.BluetoothGattService getService ( ) { android.bluetooth.BluetoothGattService service = null ; if ( ( mBluetoothGatt ) != null ) { service = mBluetoothGatt.getService ( com.android.cts.verifier.bluetooth.BleClientService.SERVICE_UUID ) ; if ( service == null ) { showMessage ( "Service not found" ) ; } } return service ; }
public void onStreamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) { try { listener.streamingServicesUpdated ( services ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public java.lang.String getName ( ) { return null ; }
public void err ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { logger.printf ( "[SDK Manager] %s" , line ) ; } }
static void native_rewind ( int nPath ) { android.graphics.Path_Delegate.native_reset ( nPath ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . createCallSession ( mSlotId , mSupportedFeature , sessionId , profile , listener ) ; } }
private java.io.File getFile ( java.io.File baseDir ) { return new java.io.File ( baseDir , myPath ) ; }
public java.lang.String insnArgString ( com.android.dx.dex.code.DalvInsn insn ) { com.android.dx.rop.code.RegisterSpecList regs = com.android.dx.dex.code.form.Form35c.explicitize ( insn.getRegisters ( ) ) ; return ( ( regListString ( regs ) ) + ", " ) + ( cstString ( insn ) ) ; }
public void onStateChange ( com.android.incallui.InCallPresenter.InCallState oldState , com.android.incallui.InCallPresenter.InCallState newState , com.android.incallui.call.CallList callList ) { com.android.dialer.common.LogUtil.d ( "StatusBarNotifier.onStateChange" , "%s->%s" , oldState , newState ) ; updateNotification ( callList ) ; }
public abstract void libToExe ( @ javax.annotation.Nonnull java.io.File in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception ;
public void onClick ( android.view.View v ) { if ( ( speedDialUiItem.defaultChannel ( ) ) != null ) { listener.onClick ( speedDialUiItem.defaultChannel ( ) ) ; } else { listener.onAmbiguousContactClicked ( speedDialUiItem.channels ( ) ) ; } }
public static java.util.List < java.security.Provider > getProvidersList ( ) { synchronized ( org.apache.harmony.security.fortress.Services.providers ) { return new java.util.ArrayList < java.security.Provider > ( org.apache.harmony.security.fortress.Services.providers ) ; } }
public void setWarnIfHeld ( java.lang.Object warnIfHeld ) { mInstaller.setWarnIfHeld ( warnIfHeld ) ; mWarnIfHeld = warnIfHeld ; }
public int getSpi ( ) { checkOwnerOrSystemAndThrow ( ) ; return mSpi ; }
public void run ( ) { c.substring ( 0 ) . toString ( ) ; }
public void setResult ( java.lang.String resultFormat , java.lang.Object ... args ) { mAutomaticallyCloseOnTaskCompletion = false ; mDialog.setResult ( resultFormat , args ) ; }
private void display ( java.lang.String format , java.lang.Object ... args ) { mMonitor.setResult ( format , args ) ; }
public static final int getHeaderSize ( @ javax.annotation.Nonnegative int dexVersion ) { int headerSize = ( ( ( 8 * ( com.android.jack.dx.dex.SizeOf.UBYTE ) ) + ( com.android.jack.dx.dex.SizeOf.UINT ) ) + ( com.android.jack.dx.dex.SizeOf.SIGNATURE ) ) + ( 20 * ( com.android.jack.dx.dex.SizeOf.UINT ) ) ; return headerSize ; }
private void assertVerifiedForEach ( java.lang.String apkFilenamePatternInResources , java.lang.String [ ] args ) throws java.lang.Exception { assertVerifiedForEach ( apkFilenamePatternInResources , args , null ) ; }
public void testAsinPiF32 ( ) { script_f32 = new android.renderscript.cts.ScriptC_asinpi_f32 ( mRS , mRes , R.raw.asinpi_f32 ) ; doF32 ( 10 , 5 ) ; }
public void timeExpm1 ( int reps ) { for ( int rep = 0 ; rep < reps ; ++ rep ) { java.lang.Math.expm1 ( d ) ; } }
public void testRemoveTransportModeTransform ( ) throws java.lang.Exception { android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromSocket ( new java.net.Socket ( ) ) ; mIpSecService.removeTransportModeTransforms ( pfd , 1 ) ; org.mockito.Mockito.verify ( mMockNetd ) . ipSecRemoveTransportModeTransform ( pfd.getFileDescriptor ( ) ) ; }
public void onDialerCallSessionModificationStateChange ( ) { if ( ( mDialerCall.getVideoTech ( ) . getSessionModificationState ( ) ) == ( com.android.incallui.videotech.utils.SessionModificationState.NO_REQUEST ) ) { cleanup ( ) ; updateNotification ( com.android.incallui.call.CallList.getInstance ( ) ) ; } }
private native int genLibs ( java.lang.String working_dir , java.lang.String sysroot , boolean for_test ) ;
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { switch ( 2147483647 ) { case 2147483647 : java.lang.System.err.println ( "good" ) ; break ; default : throw new java.lang.AssertionError ( ) ; } }
protected void updateData ( ) { }
public static long $noinline$NotNot1 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ~ ( ~ arg ) ; }
public void onMetadataChanged ( android.media.MediaMetadata metadata ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , "onMetadataChanged" ) ; updateCurrentMediaState ( ) ; }
private void handleRadioProxyExceptionForRR ( com.android.internal.telephony.RILRequest rr , java.lang.String caller , java.lang.Exception e ) { riljLoge ( caller , e ) ; rr.onError ( com.android.internal.telephony.RADIO_NOT_AVAILABLE , null ) ; decrementWakeLock ( rr ) ; rr.release ( ) ; resetProxyAndRequestList ( ) ; }
public android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols ( ) { try { return ( ( android.icu.text.DecimalFormatSymbols ) ( symbols.clone ( ) ) ) ; } catch ( java.lang.Exception foo ) { return null ; } }
public void recordExistingFile ( @ com.android.annotations.NonNull java.lang.String absFilePath ) { recordExistingFile ( absFilePath , 0 , null ) ; }
public void setSentDate ( java.util.Date sentDate ) throws com.android.voicemail.impl.mail.MessagingException { setHeader ( "Date" , com.android.voicemail.impl.mail.internet.MimeMessage.DATE_FORMAT.format ( sentDate ) ) ; this . mSentDate = sentDate ; }
public void loggedRun ( ) { synchronized ( mTelecomLock ) { if ( mIsPending ) { android.telecom.Log.i ( this , "Call filtering has timed out." ) ; android.telecom.Log.addEvent ( mCall , LogUtils.Events.FILTERING_TIMED_OUT ) ; mListener.onCallFilteringComplete ( mCall , mResult ) ; mIsPending = false ; } } }
public void ignore ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { fail ( "Not supported in tests." ) ; }
public boolean isPageComplete ( ) { if ( ! ( mValues.createAppSkeleton ) ) { return true ; } if ( ! ( mShown ) ) { return false ; } return super . isPageComplete ( ) ; }
public java.io.File getInstallFolder ( java.lang.String osSdkRoot , java.lang.String suggestedDir , com.android.sdklib.SdkManager sdkManager ) { return new java.io.File ( osSdkRoot , com.android.sdklib.SdkConstants.FD_TOOLS ) ; }
long getLongUnchecked ( int i ) { return getLong ( ix ( i ) ) ; }
