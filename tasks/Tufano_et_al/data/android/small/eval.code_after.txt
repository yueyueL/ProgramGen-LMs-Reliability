public static long LongAddition ( ) { long a ; long b ; long c ; a = Main.$inline$long ( 1L ) ; b = Main.$inline$long ( 2L ) ; c = a + b ; return c ; }
protected void close ( ) { }
protected void registerForRuimRecordEvents ( ) { com.android.internal.telephony.uicc.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.registerForRecordsEvents ( this , com.android.internal.telephony.cdma.EVENT_ICC_RECORD_EVENTS , null ) ; r.registerForRecordsLoaded ( this , com.android.internal.telephony.cdma.EVENT_RUIM_RECORDS_LOADED , null ) ; }
void assertNoCallback ( ) { waitForIdle ( ) ; com.android.server.ConnectivityServiceTest.CallbackInfo c = mCallbacks.peek ( ) ; org.junit.Assert.assertNull ( ( "Unexpected callback: " + c ) , c ) ; }
public boolean verify ( @ android.annotation.NonNull byte [ ] keyid , @ android.annotation.NonNull byte [ ] message , @ android.annotation.NonNull byte [ ] signature ) { return android.media.MediaDrm.verifyNative ( this , mSessionId , keyid , message , signature ) ; }
public void test_truncatedTo_null ( ) { tck.java.time.TCKOffsetDateTime.TEST_2008_6_30_11_30_59_000000500.truncatedTo ( null ) ; }
private void copyToClipboard ( java.lang.String str ) { android.content.ClipboardManager clipboard = ( ( android.content.ClipboardManager ) ( getSystemService ( Context.CLIPBOARD_SERVICE ) ) ) ; clipboard.setPrimaryClip ( android.content.ClipData.newPlainText ( null , str ) ) ; }
public void getLastPdpFailCause ( android.os.Message result ) { throw new java.lang.RuntimeException ( "getLastPdpFailCause not expected to be called" ) ; }
public void changeState ( com.android.tv.dvr.data.ScheduledRecording scheduledRecording , @ com.android.tv.dvr.data.ScheduledRecording.RecordingState int newState ) { if ( ( scheduledRecording.getState ( ) ) != newState ) { updateScheduledRecording ( com.android.tv.dvr.data.ScheduledRecording.buildFrom ( scheduledRecording ) . setState ( newState ) . build ( ) ) ; } }
boolean runTests ( @ com.android.annotations.NonNull java.lang.String projectName , @ com.android.annotations.NonNull java.lang.String variantName , @ com.android.annotations.NonNull java.io.File testApk , @ com.android.annotations.Nullable java.io.File testedApk , @ com.android.annotations.NonNull com.android.builder.testing.TestData testData , @ com.android.annotations.NonNull java.util.List < ? extends com.android.builder.testing.api.DeviceConnector > deviceList , int maxThreads , int timeout , @ com.android.annotations.NonNull java.io.File resultsDir , @ com.android.annotations.NonNull java.io.File coverageDir , @ com.android.annotations.NonNull com.android.utils.ILogger logger ) throws com.android.builder.testing.api.TestException , java.lang.InterruptedException ;
public void testE2 ( ) { loadAndRun ( "dot.junit.opcodes.aget_short.d.T_aget_short_1" , java.lang.NullPointerException.class , null , 2 ) ; }
private int getModuloHash ( java.lang.Object key , int length ) { return ( ( ( java.util.Collections.secondaryIdentityHash ( key ) ) & 2147483647 ) % ( length / 2 ) ) * 2 ; }
private void onInBandRing ( int in_band ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_IN_BAND_RING ) ; event.valueInt = in_band ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void testGetTests_ForTestSuiteWithSuiteMethod ( ) throws java.lang.Exception { junit.framework.TestSuite testSuite = new android.test.TestCaseUtilTest.TwoTestsInTestSuite ( ) ; java.util.List < java.lang.String > testCaseNames = android.test.TestCaseUtilTest.getTestCaseNames ( testSuite ) ; assertEquals ( 0 , testCaseNames.size ( ) ) ; }
public boolean connectToSupplicant ( ) { if ( ( ! ( mSupplicantStaIfaceHal.isInitializationStarted ( ) ) ) && ( ! ( mSupplicantStaIfaceHal.initialize ( ) ) ) ) { return false ; } return mSupplicantStaIfaceHal.isInitializationComplete ( ) ; }
public abstract java.lang.Long id ( ) ;
public static java.nio.ByteBuffer allocateDirect ( int capacity ) { if ( capacity < 0 ) { throw new java.lang.IllegalArgumentException ( ( "capacity < 0: " + capacity ) ) ; } return new java.nio.ReadWriteDirectByteBuffer ( capacity ) ; }
protected final void doOKAction ( ) { if ( com.intellij.openapi.project.DumbService.isDumb ( myProject ) ) { com.intellij.openapi.ui.Messages.showMessageDialog ( myProject , "Refactoring is not available while indexing is in progress" , "Indexing" , null ) ; return ; } doAction ( ) ; }
public void sendDtmf ( char c , android.os.Message result ) { logi ( ( "sendDtmf :: code=" + c ) ) ; synchronized ( mLockObj ) { if ( ( mSession ) != null ) { mSession.sendDtmf ( c , result ) ; } } }
public void getNetworkSelectionModeResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , boolean selection ) { responseInts ( responseInfo , ( selection ? 1 : 0 ) ) ; }
public void onCharacteristicRead ( java.lang.String address , int status , int handle , byte [ ] value ) throws android.os.RemoteException { }
public static native int ENGINE_SSL_write_heap ( long sslNativePointer , byte [ ] sourceJava , int sourceOffset , int sourceLength , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc ) throws java.io.IOException ;
public int getCallStateForSlot ( int slotIndex ) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( slotIndex ) ; return phone == null ? android.telephony.TelephonyManager.CALL_STATE_IDLE : com.android.internal.telephony.DefaultPhoneNotifier.convertCallState ( phone.getState ( ) ) ; }
private void resetProxyAndRequestList ( ) { mRadioProxy = null ; mOemHookProxy = null ; mRadioProxyCookie.incrementAndGet ( ) ; setRadioState ( RadioState.RADIO_UNAVAILABLE ) ; com.android.internal.telephony.RILRequest.resetSerial ( ) ; clearRequestList ( com.android.internal.telephony.RADIO_NOT_AVAILABLE , false ) ; getRadioProxy ( null ) ; }
public static android.renderscript.RenderScript create ( android.content.Context ctx , int sdkVersion ) { return android.renderscript.RenderScript.create ( ctx , sdkVersion , android.renderscript.RenderScript.ContextType.NORMAL , android.renderscript.RenderScript.CREATE_FLAG_NONE ) ; }
public boolean getRenderscriptSupportModeEnabled ( ) { java.lang.Boolean value = mMergedFlavor.getRenderscriptSupportModeEnabled ( ) ; if ( value != null ) { return value ; } return false ; }
public static void computeExp10 ( android.renderscript.cts.TestExp10.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 32 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.exp10 ( args.inX , t ) ; }
public void testOlderSdk ( ) throws java.lang.Exception { assertEquals ( "No warnings." , lintProject ( "bytecode/.classpath=>.classpath" , "project.properties19=>project.properties" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/AnnotatedObject.java.txt=>src/test/pkg/AnnotatedObject.java" , "bytecode/InheritsFromAnnotated.java.txt=>src/test/pkg/InheritsFromAnnotated.java" , "bytecode/NonAnnotatedObject.java.txt=>src/test/pkg/NonAnnotatedObject.java" , "bytecode/JavaScriptTest.java.txt=>src/test/pkg/JavaScriptTest.java" , "bytecode/AnnotatedObject.class.data=>bin/classes/test/pkg/AnnotatedObject.class" , "bytecode/InheritsFromAnnotated.class.data=>bin/classes/test/pkg/InheritsFromAnnotated.class" , "bytecode/JavaScriptTest.class.data=>bin/classes/test/pkg/JavaScriptTest.class" , "bytecode/NonAnnotatedObject.class.data=>bin/classes/test/pkg/NonAnnotatedObject.class" ) ) ; }
protected com.google.common.collect.ImmutableList < java.lang.String > targetProcessPrefix ( ) { return vogar.android.AdbTarget.TARGET_PROCESS_PREFIX ; }
public void onClick ( android.view.View v ) { if ( ( getMediaController ( ) ) == null ) return ; getMediaController ( ) . getTransportControls ( ) . skipToNext ( ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mCarQualifier = new com.android.ide.common.resources.configuration.DockModeQualifier ( com.android.resources.DockMode.CAR ) ; mDeskQualifier = new com.android.ide.common.resources.configuration.DockModeQualifier ( com.android.resources.DockMode.DESK ) ; mTVQualifier = new com.android.ide.common.resources.configuration.DockModeQualifier ( com.android.resources.DockMode.TELEVISION ) ; mNoneQualifier = new com.android.ide.common.resources.configuration.DockModeQualifier ( com.android.resources.DockMode.NONE ) ; }
public static < T > org.hamcrest.Matcher < java.lang.Iterable < T > > everyItem ( final org.hamcrest.Matcher < T > elementMatcher ) { return org.junit.internal.matchers.Each.each ( elementMatcher ) ; }
synchronized void nAllocationRead ( long id , int [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
synchronized long nScriptCCreate ( java.lang.String resName , java.lang.String cacheDir , byte [ ] script , int length ) { validate ( ) ; return rsnScriptCCreate ( mContext , resName , cacheDir , script , length ) ; }
public com.android.tools.lint.client.api.XmlParser getXmlParser ( ) { return new com.android.ide.eclipse.adt.internal.lint.EclipseLintClient ( null , null , null , false ) . getXmlParser ( ) ; }
public static long $noinline$UShr60And7 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( arg > > > 60 ) & 7 ; }
public com.intellij.psi.JavaElementVisitor createPsiVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { if ( rtlApplies ( context ) ) { return new com.android.tools.lint.checks.RtlDetector.IdentifierChecker ( context ) ; } return null ; }
public java.net.HttpURLConnection connect ( com.google.mockwebserver.MockWebServer server , java.net.URL url ) throws java.io.IOException { return ( ( java.net.HttpURLConnection ) ( url.openConnection ( server.toProxyAddress ( ) ) ) ) ; }
private static void checkPendingIntentNotNull ( android.app.PendingIntent intent ) { com.android.internal.util.Preconditions.checkNotNull ( intent , "PendingIntent cannot be null." ) ; }
static float $opt$CharToFloat ( char a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( float ) ( a ) ) ; }
private void notifyReliableWriteCompleted ( ) { showMessage ( "Reliable write complete" ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_RELIABLE_WRITE_COMPLETED ) ; sendBroadcast ( intent ) ; }
public final java.security.AlgorithmParameters getParameters ( ) { return getSpi ( ) . engineGetParameters ( ) ; }
private native void setByte ( java.lang.Object object , byte value , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public static int $noinline$intToDoubleToInt ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
private void enforceNotifyPermissionOrCarrierPrivilege ( java.lang.String method ) { if ( checkNotifyPermission ( ) ) { return ; } com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfCarrierPrivilege ( android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) , method ) ; }
private static Redefinition.CommonClassDefinition mapCCD ( CommonClassDefinition d ) { return new art.Redefinition.CommonClassDefinition ( d.target , d.class_file_bytes , d.dex_file_bytes ) ; }
public java.lang.String getName ( ) { if ( ( mMode ) == ( com.android.ide.eclipse.adt.internal.refactorings.extractstring.ExtractStringRefactoring.Mode.SELECT_ID ) ) { return "Create or Use Android String" ; } else if ( ( mMode ) == ( com.android.ide.eclipse.adt.internal.refactorings.extractstring.ExtractStringRefactoring.Mode.SELECT_NEW_ID ) ) { return "Create New Android String" ; } return "Extract Android String" ; }
private static java.lang.String getTypeDescription ( com.google.devtools.common.options.OptionDefinition optionsField , com.google.devtools.common.options.OptionsData optionsData ) { return optionsData.getConverter ( optionsField ) . getTypeDescription ( ) ; }
public final com.android.jack.test.toolchain.Toolchain setAnnotationProcessorClasses ( @ javax.annotation.Nonnull java.util.List < java.lang.String > annotationProcessorClasses ) { this . annotationProcessorClasses = annotationProcessorClasses ; return this ; }
public static native void EVP_SignUpdate ( org.conscrypt.OpenSSLDigestContext ctx , byte [ ] buffer , int offset , int length ) ;
public void testGeomagneticRotationVector_50hz_batching ( ) throws java.lang.Throwable { runBatchingSensorTest ( Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR , android.hardware.cts.SensorBatchingTests.RATE_50HZ , android.hardware.cts.SensorBatchingTests.BATCHING_PERIOD ) ; }
public byte [ ] getPubkey ( java.lang.String key ) { try { return mBinder.get_pubkey ( key ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return null ; } }
public long getLastModifiedTime ( java.io.File f ) { dalvik.system.BlockGuard.getThreadPolicy ( ) . onReadFromDisk ( ) ; return getLastModifiedTime0 ( f ) ; }
private void setCaptivePortalMode ( int mode ) { android.content.ContentResolver cr = mServiceContext.getContentResolver ( ) ; Settings.Global.putInt ( cr , Settings.Global.CAPTIVE_PORTAL_MODE , mode ) ; }
public void visitRuntimeVisibleTypeAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.RuntimeVisibleTypeAnnotationsAttribute runtimeVisibleTypeAnnotationsAttribute ) { if ( accepted ( clazz , runtimeVisibleTypeAnnotationsAttribute ) ) { attributeVisitor.visitRuntimeVisibleTypeAnnotationsAttribute ( clazz , field , runtimeVisibleTypeAnnotationsAttribute ) ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { selectContext ( ( ( mContextSwitchCombo.getSelectionIndex ( ) ) - 1 ) ) ; }
private void doTestGoog ( java.lang.String mimeType , int w , int h , long testTimeoutMs ) throws java.lang.Exception { mTestConfig.mTestPixels = false ; mTestConfig.mTestResult = true ; mTestConfig.mTotalFrames = 3000 ; mTestConfig.mNumberOfRepeat = 2 ; doTest ( true , mimeType , w , h , testTimeoutMs ) ; }
public void visitArrayInstance ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.ArrayInstance instance ) ;
public void doExecute ( org.gradle.api.internal.html.SimpleHtmlWriter writer ) throws java.io.IOException { renderCompositeResults ( writer , results.getResultsPerDevices ( ) , "Devices" ) ; }
public java.util.Set < java.io.File > getAssetsDirectories ( ) { return getAssets ( ) . getDirectories ( ) ; }
public com.android.jack.test.toolchain.JackCliToolchain setVerbose ( boolean isVerbose ) { super . setVerbose ( isVerbose ) ; verbosityLevel = ( isVerbose ) ? com.android.jack.VerbosityLevel.INFO : com.android.jack.VerbosityLevel.WARNING ; return this ; }
public void testPlayAudio ( ) throws java.lang.InterruptedException { if ( ! ( hasAudioOutput ( ) ) ) { android.util.Log.w ( android.media.cts.MediaSyncTest.LOG_TAG , ( "AUDIO_OUTPUT feature not found. This system might not have a valid " + "audio output HAL" ) ) ; return ; } playAV ( INPUT_RESOURCE_ID , 5000 , true , false , 10000 ) ; }
public android.telephony.ims.stub.ImsRegistrationImplBase getRegistration ( int slotId ) { return new android.telephony.ims.stub.ImsRegistrationImplBase ( ) ; }
native long rsnScriptKernelIDCreate ( long con , long sid , int slot , int sig , boolean mUseInc ) ;
private static com.ibm.icu.text.DecimalFormat getCannedDecimalFormat ( java.lang.String pattern , com.ibm.icu.util.ULocale uloc ) { return new com.ibm.icu.text.DecimalFormat ( pattern , com.ibm.icu.dev.test.serializable.FormatHandler.getCannedDecimalFormatSymbols ( uloc ) ) ; }
public boolean isNumberGeographical ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType phoneNumberType , int countryCallingCode ) { return ( ( phoneNumberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE ) ) || ( phoneNumberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE_OR_MOBILE ) ) ) || ( ( com.google.i18n.phonenumbers.PhoneNumberUtil.GEO_MOBILE_COUNTRIES.contains ( countryCallingCode ) ) && ( phoneNumberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.MOBILE ) ) ) ; }
public void setLogicalToPhysicalSlotMapping ( int [ ] physicalSlots , android.os.Message result ) { unimplemented ( result ) ; }
public java.lang.String getFullMethodPath ( boolean truncatePath ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; getFullMethodPath ( sb , truncatePath ) ; return sb.toString ( ) ; }
public int getShutdownDelay ( ) { return getDelay ( com.android.jack.server.ConfigFile.SHUTDOWN_PROPERTY , ( ( 6 * 60 ) * 60 ) ) ; }
public int queryCallForward ( int condition , java.lang.String number ) { return - 1 ; }
public boolean apply ( final java.lang.String s ) { return pattern.matcher ( s ) . matches ( ) ; }
public void visitInvokeDynamicConstant ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.InvokeDynamicConstant invokeDynamicConstant ) { invokeDynamicConstant.referencedClasses = findReferencedClasses ( clazz.getName ( ) , invokeDynamicConstant.getType ( clazz ) ) ; }
public static com.google.common.hash.HashCode hash ( java.io.File file , com.google.common.hash.HashFunction hashFunction ) throws java.io.IOException { return com.google.common.io.Files.asByteSource ( file ) . hash ( hashFunction ) ; }
public void setUp ( ) { users = new com.google.gct.login.CredentialedUserRoster ( ) ; user1 = new com.google.gct.login.CredentialedUser ( "user1" ) ; user2 = new com.google.gct.login.CredentialedUser ( "user2" ) ; user3 = new com.google.gct.login.CredentialedUser ( "user3" ) ; }
native void rsnScriptForEachClipped ( long con , long incCon , long id , int slot , long ain , long aout , int xstart , int xend , int ystart , int yend , int zstart , int zend , boolean mUseInc ) ;
public android.telephony.ServiceState getServiceState ( ) { if ( ( mSST ) != null ) { return mSST.mSS ; } else { return new android.telephony.ServiceState ( ) ; } }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JReinterpretCastOperation x ) { trace ( x.getType ( ) ) ; }
public final int addAssetPath ( java.lang.String path ) { int res = addAssetPathNative ( path ) ; return res ; }
public com.android.builder.ProductFlavor setSigningStoreLocation ( java.lang.String signingStoreLocation ) { mSigningStoreLocation = signingStoreLocation ; return this ; }
public java.lang.String [ ] getSupportedCipherSuites ( ) { if ( ( instantiationException ) != null ) { return org.conscrypt.util.EmptyArray.STRING ; } return org.conscrypt.CipherSuite.getSupportedCipherSuiteNames ( ) ; }
public static boolean isDeveloperOptionsEnabled ( final android.app.Instrumentation instrumentation ) throws android.support.test.uiautomator.UiObjectNotFoundException { com.android.devtools.systemimage.uitest.utils.SettingsUtil.findItem ( instrumentation , "Developer options" ) . waitForExists ( java.util.concurrent.TimeUnit.MILLISECONDS.convert ( 5L , java.util.concurrent.TimeUnit.SECONDS ) ) ; return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem ( instrumentation , "Developer options" ) ; }
private com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor createRequestFocus ( ) { java.lang.String xmlName = com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.REQUEST_FOCUS ; return new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( xmlName , xmlName , xmlName , "Requests focus for the parent element or one of its descendants" , null , null , null , null , false ) ; }
public void setCellBroadcastSmsConfig ( int [ ] configValuesArray , android.os.Message response ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "[CDMAPhone] setCellBroadcastSmsConfig() is obsolete; use SmsManager" ) ; response.sendToTarget ( ) ; }
private boolean shouldAdjustKeySizes ( ) { return mIsLandscapeMode ? shouldAdjustKeyWidths ( ) : shouldAdjustDigitKeyHeights ( ) ; }
public void destroy ( ) { if ( ( mCallerInfo ) != null ) { mCallerInfo.cachedPhotoIcon = null ; mCallerInfo.cachedPhoto = null ; } android.telecom.Log.addEvent ( this , LogUtils.Events.DESTROYED ) ; }
private static com.android.sdklib.util.Pair < org.eclipse.core.resources.IFile , org.eclipse.jface.text.IRegion > findIdInDocument ( java.lang.String id , org.eclipse.core.resources.IFile file , org.w3c.dom.Document document ) { java.lang.String targetAttribute = ( com.android.ide.common.layout.LayoutConstants.NEW_ID_PREFIX ) + id ; return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findIdInElement ( document.getDocumentElement ( ) , file , targetAttribute ) ; }
protected com.google.gct.idea.appengine.run.ModuleBasedConfiguration createInstance ( ) { return new com.google.gct.idea.appengine.run.AppEngineRunConfiguration ( getName ( ) , getProject ( ) , getFactory ( ) ) ; }
public java.lang.String convertToString ( android.database.Cursor cursor ) { return cursor.getString ( com.example.android.apis.view.AutoComplete4.COLUMN_DISPLAY_NAME ) ; }
public java.util.List < com.android.tv.tuner.exoplayer.buffer.BufferManager.TrackFormat > readTrackInfoFiles ( boolean isAudio ) { return null ; }
protected abstract void printFilteredProblem ( @ javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel , @ javax.annotation.Nonnull java.lang.String message , @ javax.annotation.CheckForNull com.android.sched.util.location.Location location ) ;
public final java.lang.String toString ( ) { java.lang.String result = cachedToStringResult ; if ( result == null ) { result = cachedToStringResult = java.util.Locale.toNewString ( languageCode , countryCode , variantCode ) ; } return result ; }
native void rsnAllocationData1D ( long con , long id , int off , int mip , int count , byte [ ] d , int sizeBytes ) ;
private android.os.RegistrantList getRegistrantsFromAction ( int action ) { switch ( action ) { case com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_SET_METERED_APNS_ENABLED : return mMeteredApnEnableRegistrants ; case com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_SET_RADIO_ENABLED : return mRadioEnableRegistrants ; case com.android.internal.telephony.CarrierActionAgent.CARRIER_ACTION_REPORT_DEFAULT_NETWORK_STATUS : return mDefaultNetworkReportRegistrants ; default : loge ( ( "Unsupported action: " + action ) ) ; return null ; } }
protected void setProgressBarVisible ( boolean visible ) { if ( ( mProgressHeader ) != null ) { mProgressHeader.setVisibility ( ( visible ? android.view.View.VISIBLE : android.view.View.GONE ) ) ; } }
public static native int EVP_SignFinal ( org.conscrypt.OpenSSLDigestContext ctx , byte [ ] signature , int offset , long key ) ;
final com.google.common.collect.UnmodifiableIterator < com.google.common.collect.Table.Cell < R , C , V > > cellIterator ( ) { throw new java.lang.AssertionError ( "should never be called" ) ; }
private void skipClass ( ) { while ( true ) { char c = descriptor.charAt ( ( ( index ) ++ ) ) ; switch ( c ) { case proguard.classfile.ClassConstants.TYPE_GENERIC_START : skipGeneric ( ) ; break ; case proguard.classfile.ClassConstants.TYPE_CLASS_END : return ; } } }
public void hasImeActionNoInputConnection ( ) { android.widget.Button button = new android.widget.Button ( context ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( 0 ) . matches ( button ) ) ; }
public boolean isHalStarted ( ) { return ( ( mIWifiStaIface ) != null ) || ( ( mIWifiApIface ) != null ) ; }
public boolean hasResourcesOfType ( @ com.android.annotations.NonNull com.android.resources.ResourceType type ) { ensureInitialized ( ) ; java.util.Map < java.lang.String , com.android.ide.common.resources.ResourceItem > items = mResourceMap.get ( type ) ; return ( items != null ) && ( ! ( items.isEmpty ( ) ) ) ; }
public void clearFormData ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearFormData ( ) ; } } ) ; return ; } mAwContents.hideAutofillPopup ( ) ; }
public void testFlagIE ( ) { installFromRawResource ( "install.apk" , R.raw.install , ( ( android.content.pm.PackageManager.INSTALL_EXTERNAL ) | ( android.content.pm.PackageManager.INSTALL_INTERNAL ) ) , false , true , PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION , PackageInfo.INSTALL_LOCATION_AUTO ) ; }
public void undeploy ( @ org.jetbrains.annotations.NotNull com.intellij.appengine.actions.UndeploymentTaskCallback callback ) { }
public java.lang.String getName ( ) { return scope.getTaskName ( "zipalign" ) ; }
public void setMergeAssetsTask ( @ com.android.annotations.Nullable com.android.build.gradle.internal.scope.AndroidTask < com.android.build.gradle.tasks.MergeAssets > mergeAssetsTask ) { this . mergeAssetsTask = mergeAssetsTask ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { refresh ( ) ; }
private void resetProxyAndRequestList ( ) { mRadioProxy = null ; mRadioProxyCookie.incrementAndGet ( ) ; setRadioState ( RadioState.RADIO_UNAVAILABLE ) ; com.android.internal.telephony.RILRequest.resetSerial ( ) ; clearRequestList ( com.android.internal.telephony.RADIO_NOT_AVAILABLE , false ) ; getRadioProxy ( null ) ; }
public void onCreate ( android.os.Bundle bundle ) { super . onCreate ( bundle ) ; setContentView ( R.layout.transition_main ) ; mContent = findViewById ( R.id.container ) ; mContent.setOnApplyWindowInsetsListener ( this ) ; }
public void testVFE1 ( ) { load ( "dot.junit.opcodes.aput_wide.d.T_aput_wide_3" , java.lang.VerifyError.class ) ; }
protected java.io.File buildProject ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String gradleVersion ) { return runTasksOnProject ( name , gradleVersion , java.util.Collections.< java.lang.String > emptyList ( ) , "clean" , "assembleDebug" , "lint" ) ; }
protected void engineInit ( byte [ ] params ) throws java.io.IOException { gcmParams = org.bouncycastle.asn1.cms.GCMParameters.getInstance ( params ) ; }
public static short $noinline$charToDoubleToShort ( char value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( ( double ) ( value ) ) ) ; }
default < T extends java.lang.annotation.Annotation > T [ ] getDeclaredAnnotationsByType ( java.lang.Class < T > annotationClass ) { return libcore.reflect.AnnotatedElements.getDirectOrIndirectAnnotationsByType ( this , annotationClass ) ; }
public boolean setWfdEnable ( boolean enable ) { return mSupplicantP2pIfaceHal.enableWfd ( enable ) ; }
static int $opt$DoubleToInt ( double a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( int ) ( a ) ) ; }
public static void computeAtanh ( android.renderscript.cts.TestAtanh.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.atanh ( args.in ) , 5 , 128 ) ; }
void onAdvertiseParamsSet ( int status , int advertiserId ) { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "onAdvertiseParamsSet() - advertiserId=" + advertiserId ) + ", status=" ) + status ) ) ; mAdvertiseManager.callbackDone ( advertiserId , status ) ; }
protected void tearDown ( ) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . resetData ( ) ; }
public void onGetDataCallListComplete ( @ android.telephony.data.DataServiceCallback.ResultCode int resultCode , java.util.List < android.telephony.data.DataCallResponse > dataCallList ) { if ( com.android.internal.telephony.dataconnection.DataServiceManager.DBG ) log ( ( "onGetDataCallListComplete. resultCode = " + resultCode ) ) ; android.os.Message msg = mMessageMap.remove ( asBinder ( ) ) ; sendCompleteMessage ( msg , resultCode ) ; }
public void setHasEverConnectedTrueOnConnect ( ) throws java.lang.Exception { connect ( ) ; verify ( mWifiConfigManager , atLeastOnce ( ) ) . updateNetworkAfterConnect ( 0 ) ; }
public static int $noinline$booleanFieldEqualZero ( ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( Main.booleanField ) != ( Main.$inline$false ( ) ) ? 13 : 54 ; }
public static android.telephony.MbmsDownloadSession create ( @ android.annotation.NonNull android.content.Context context , @ android.annotation.NonNull java.util.concurrent.Executor executor , @ android.annotation.NonNull android.telephony.mbms.MbmsDownloadSessionCallback callback ) { return android.telephony.MbmsDownloadSession.create ( context , executor , android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) , callback ) ; }
public int import_key ( java.lang.String name , byte [ ] data , int uid ) throws android.os.RemoteException ;
public void close ( ) throws java.io.IOException { super . close ( ) ; if ( ( ( jarFile ) != null ) && ( ! ( jarFileMustBehaveAsCached ) ) ) { jarFile.close ( ) ; closed = true ; } }
private static void write ( java.lang.CharSequence from , java.io.File to , java.nio.charset.Charset charset , boolean append ) throws java.io.IOException { com.google.common.io.Files.asCharSink ( to , charset , com.google.common.io.Files.modes ( append ) ) . write ( from ) ; }
public void testAlreadyCompleteCatch ( ) throws java.lang.Exception { com.intellij.psi.codeStyle.CommonCodeStyleSettings settings = com.intellij.psi.codeStyle.CodeStyleSettingsManager.getSettings ( getProject ( ) ) . getCommonSettings ( JavaLanguage.INSTANCE ) ; int old = settings.BRACE_STYLE ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; try { doTest ( ) ; } finally { settings.BRACE_STYLE = old ; } }
protected void onPostHandleMessage ( android.os.Message msg ) { android.telecom.Log.endSession ( ) ; }
public void onCallRemoved ( android.telecom.Call call ) { android.os.Trace.beginSection ( "InCallServiceImpl.onCallRemoved" ) ; speakEasyCallManager.onCallRemoved ( com.android.incallui.call.CallList.getInstance ( ) . getDialerCallFromTelecomCall ( call ) ) ; com.android.incallui.InCallPresenter.getInstance ( ) . onCallRemoved ( call ) ; android.os.Trace.endSection ( ) ; }
public void enter ( ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_DISCONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; quit ( ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { synchronized ( mLock ) { if ( which == ( android.content.DialogInterface.BUTTON_POSITIVE ) ) { android.content.Intent market = new android.content.Intent ( android.content.Intent.ACTION_VIEW ) ; market.setData ( android.net.Uri.parse ( ( "market://details?id=" + ( mPkgName ) ) ) ) ; market.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mContext.startActivity ( market ) ; } else if ( which == ( android.content.DialogInterface.BUTTON_NEGATIVE ) ) { if ( com.android.internal.telephony.uicc.UiccProfile.DBG ) com.android.internal.telephony.uicc.UiccProfile.log ( "Not now clicked for carrier app dialog." ) ; } } }
public void test_Any_Lower ( ) throws java.lang.Exception { android.icu.text.Transliterator t = android.icu.text.Transliterator.getInstance ( "Any-Lower" ) ; assertEquals ( "hello world!" , t.transliterate ( "HeLlO WoRlD!" ) ) ; }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.encapType = android.net.IpSecTransform.ENCAP_ESPINUDP ; mConfig.encapLocalPortResourceId = localSocket.getResourceId ( ) ; mConfig.encapRemotePort = remotePort ; return this ; }
public java.lang.Iterable < java.lang.String > split ( ) { return com.android.sched.vfs.VPath.splitter.split ( getInternalPath ( ) ) ; }
android.app.PendingIntent getPrivateBroadcast ( java.lang.String action , int requestCode ) { android.content.Intent intent = new android.content.Intent ( action , null ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; intent.setPackage ( "android" ) ; return mFacade.getBroadcast ( mContext , requestCode , intent , 0 ) ; }
public void testEnableSupplicant ( ) { org.mockito.Mockito.when ( mWificondControl.enableSupplicant ( ) ) . thenReturn ( true ) ; mWifiNative.enableSupplicant ( ) ; org.mockito.Mockito.verify ( mWificondControl ) . enableSupplicant ( ) ; }
public boolean startBgScan ( com.android.server.wifi.WifiNative.ScanSettings settings , com.android.server.wifi.WifiNative.ScanEventHandler eventHandler ) { return mWifiVendorHal.startBgScan ( settings , eventHandler ) ; }
public static short $noinline$intAnd0x17fffToShort ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( value & 98303 ) ) ; }
private java.lang.String getRawScanResults ( java.lang.String range ) { return doStringCommandWithoutLogging ( ( ( "BSS RANGE=" + range ) + " MASK=0x21d97" ) ) ; }
public java.lang.String getPropertyPrefix ( ) { return propertyPrefix ; }
public void testDollar ( ) { org.junit.Assert.assertTrue ( new org.jacoco.core.matcher.WildcardMatcher ( "*$*" ) . matches ( "java/util/Map$Entry" ) ) ; org.junit.Assert.assertTrue ( new org.jacoco.core.matcher.WildcardMatcher ( "*$$$*" ) . matches ( "org/example/Enity$$$generated123" ) ) ; }
public void bluetoothMediaPhoneSL4AMBSStart ( ) { com.googlecode.android_scripting.Log.d ( ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothMediaFacade.TAG ) + "Starting BluetoothSL4AAudioSrcMBS" ) ) ; android.content.Intent startIntent = new android.content.Intent ( mContext , com.googlecode.android_scripting.facade.bluetooth.media.BluetoothSL4AAudioSrcMBS.class ) ; mContext.startService ( startIntent ) ; }
private android.net.ConnectivityManager cm ( ) { if ( ( mCM ) == null ) { mCM = ( ( android.net.ConnectivityManager ) ( mContext.getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; } return mCM ; }
public native void putObjectVolatile ( java.lang.Object obj , long offset , java.lang.Object newValue ) ;
protected void accept ( java.net.SocketImpl s ) throws java.io.IOException { acquireFD ( ) ; try { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; socketAccept ( s ) ; } finally { releaseFD ( ) ; } }
private native void stopAdvertisingSetNative ( int advertiser_id ) ;
public static double $noinline$shortAnd0xffffToShortToDouble ( short value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } short same = ( ( short ) ( value & 65535 ) ) ; return ( ( double ) ( same ) ) ; }
private int getSubId ( ) { if ( android.telephony.SubscriptionManager.isUsableSubIdValue ( mSubId ) ) { return mSubId ; } return android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ; }
public void resendIncallMute ( int indicationType ) { mRil.processIndication ( indicationType ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLog ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RESEND_INCALL_MUTE ) ; mRil.mResendIncallMuteRegistrants.notifyRegistrants ( ) ; }
public static < E > java.util.Set < E > newSetFromMap ( java.util.Map < E , java.lang.Boolean > map ) { if ( map.isEmpty ( ) ) { return new java.util.Collections.SetFromMap < E > ( map ) ; } throw new java.lang.IllegalArgumentException ( "map not empty" ) ; }
public int preceding ( int offset ) { checkOffset ( offset ) ; return wrapped.preceding ( offset ) ; }
private static com.google.doclava.MethodInfo obtainMethod ( com.sun.javadoc.ConstructorDoc o ) { return ( ( com.google.doclava.MethodInfo ) ( com.google.doclava.Converter.mMethods.obtain ( o ) ) ) ; }
public void notifyImsFeatureReady ( int slotId , int featureType ) throws android.os.RemoteException { this . notifyImsFeatureReady ( slotId , featureType ) ; }
public android.telephony.ims.stub.ImsFeatureConfiguration querySupportedImsFeatures ( ) { return new android.telephony.ims.stub.ImsFeatureConfiguration ( ) ; }
public com.android.sdkuilib.ui.GridLayoutBuilder noMargins ( ) { mGL.marginHeight = 0 ; mGL.marginWidth = 0 ; mGL.marginLeft = 0 ; mGL.marginTop = 0 ; mGL.marginRight = 0 ; mGL.marginBottom = 0 ; return this ; }
public void start ( ) { if ( ( ( java.lang.System.currentTimeMillis ( ) ) - ( getLastUpdatedEpgTimestamp ( ) ) ) > ( com.android.tv.data.epg.EpgFetcher.EPG_PREFETCH_RECURRING_PERIOD_MS ) ) { startImmediately ( false ) ; } else { startInternal ( false ) ; } }
public boolean onUnbind ( android.content.Intent intent ) { if ( com.android.bluetooth.btservice.ProfileService.DBG ) { android.util.Log.d ( mName , "onUnbind" ) ; } return super . onUnbind ( intent ) ; }
public void sendCallEvent ( java.lang.String callId , java.lang.String event , int targetSdkVer , android.os.Bundle extras ) { try { mAdapter.sendCallEvent ( callId , event , targetSdkVer , extras ) ; } catch ( android.os.RemoteException ignored ) { } }
public void testConnectsToEmergencyNumberLongNumber_US ( ) { assertTrue ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "9116666666" , RegionCode.US ) ) ; assertTrue ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "1126666666" , RegionCode.US ) ) ; assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "9996666666" , RegionCode.US ) ) ; }
public void createTabs ( org.eclipse.debug.ui.ILaunchConfigurationDialog dialog , java.lang.String mode ) { org.eclipse.debug.ui.ILaunchConfigurationTab [ ] tabs = new org.eclipse.debug.ui.ILaunchConfigurationTab [ ] { new com.android.ide.eclipse.adt.internal.launch.MainLaunchConfigTab ( ) , new com.android.ide.eclipse.adt.internal.launch.EmulatorConfigTab ( ILaunchManager.RUN_MODE.equals ( mode ) ) , new org.eclipse.debug.ui.CommonTab ( ) } ; setTabs ( tabs ) ; }
public void copy1DRangeTo ( int off , int count , byte [ ] d ) { validateIsInt8 ( ) ; copy1DRangeToUnchecked ( off , count , d , Element.DataType.SIGNED_8 , d.length ) ; }
static com.android.dialer.inject.demo.DemoObject provide ( ) { return com.android.dialer.inject.demo.DemoObject.create ( "prod" ) ; }
protected java.io.File getAapt ( ) { return super . getAapt ( com.android.sdklib.repository.FullRevision.parseRevision ( "22" ) ) ; }
public long toMillis ( boolean ignoreDst ) { calculator.copyFieldsFromTime ( this ) ; return calculator.toMillis ( ignoreDst ) ; }
public static int $noinline$intAddSubSimplifyArg1 ( int x , int y ) { int sum = x + y ; return sum - x ; }
public com.android.jack.ir.ast.JSsaVariableRef makeRef ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info ) { com.android.jack.ir.ast.JSsaVariableRef ref = new com.android.jack.ir.ast.JSsaVariableRef ( info , target , version , def , false ) ; uses.add ( ref ) ; ref.uses.add ( this ) ; return ref ; }
public static int $noinline$intConditionNotEqualOne ( int i ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( i > 42 ) == ( Main.$inline$true ( ) ) ? 13 : 54 ; }
public void setupDataCall ( int accessNetworkType , android.telephony.data.DataProfile dataProfile , boolean isRoaming , boolean allowRoaming , int reason , android.net.LinkProperties linkProperties , android.os.Message result ) { }
public static int $noinline$floatConditionNotEqualOne ( float f ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( f > 42.0F ) == true ? 13 : 54 ; }
public static org.junit.runner.Description createTestDescription ( java.lang.Class < ? > clazz , java.lang.String name ) { return new org.junit.runner.Description ( clazz , org.junit.runner.Description.formatDisplayName ( name , clazz.getName ( ) ) ) ; }
public final com.google.common.collect.ImmutableList < E > toSortedList ( java.util.Comparator < ? super E > comparator ) { return com.google.common.collect.Ordering.from ( comparator ) . immutableSortedCopy ( iterable ) ; }
public boolean isPossibleNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult result = isPossibleNumberWithReason ( number ) ; return ( result == ( com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.IS_POSSIBLE ) ) || ( result == ( com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.IS_POSSIBLE_LOCAL_ONLY ) ) ; }
public java.lang.String toString ( java.lang.String charsetName ) throws java.io.UnsupportedEncodingException { return new java.lang.String ( buf , 0 , count , charsetName ) ; }
public void test_plus_longTemporalUnit_negativeDays ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.plus ( ( - 25 ) , java.time.temporal.ChronoUnit.DAYS ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 6 , 20 ) ) ; }
private native boolean configureWBSNative ( byte [ ] address , int condecConfig ) ;
int write ( java.io.FileDescriptor fd , long address , int len ) throws java.io.IOException { dalvik.system.BlockGuard.getThreadPolicy ( ) . onWriteToDisk ( ) ; return sun.nio.ch.FileDispatcherImpl.write0 ( fd , address , len ) ; }
public static void clearClientCertPreferences ( java.lang.Runnable onCleared ) { if ( android.webkit.WebView.TRACE ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "clearClientCertPreferences" ) ; android.webkit.WebView.getFactory ( ) . getStatics ( ) . clearClientCertPreferences ( onCleared ) ; }
public native java.lang.reflect.Method [ ] getDeclaredMethodsUnchecked ( boolean publicOnly ) ;
private org.eclipse.swt.graphics.Image getImage ( java.lang.String filename ) { if ( ( mUpdaterData ) != null ) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory ( ) ; if ( imgFactory != null ) { return imgFactory.getImageByName ( filename ) ; } } return null ; }
public void error ( java.lang.String id ) { severities.put ( id , com.android.tools.lint.detector.api.Severity.ERROR ) ; }
protected void load ( ) { com.android.ide.common.resources.ResourceItem item = getRepository ( ) . getResourceItem ( mType , mResourceName ) ; item.add ( this ) ; }
void onDuoVideoIconClicked ( int position ) ;
java.lang.String getFlavorName ( ) ;
public com.android.builder.model.SigningConfig getSigningConfig ( ) { if ( ( mSigningConfigOverride ) != null ) { return mSigningConfigOverride ; } com.android.builder.model.SigningConfig signingConfig = mBuildType.getSigningConfig ( ) ; if ( signingConfig != null ) { return signingConfig ; } return mMergedFlavor.getSigningConfig ( ) ; }
public boolean initializeVendorHal ( ) { if ( ! ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) ) { return true ; } return mWifiVendorHal.initialize ( ) ; }
public void test_EUC_JP_replacement_character ( ) throws java.lang.Exception { assertEncodes ( java.nio.charset.Charset.forName ( "EUC-JP" ) , "�" , 244 , 254 ) ; }
private int updateEfForIccType ( int efid ) { if ( efid == ( com.android.internal.telephony.uicc.IccConstants.EF_ADN ) ) { if ( ( phone.getCurrentUiccAppType ( ) ) == ( com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType.APPTYPE_USIM ) ) { return com.android.internal.telephony.uicc.IccConstants.EF_PBR ; } } return efid ; }
public static native void SSL_use_certificate ( long ssl , long [ ] x509refs ) ;
public boolean umtsAuthFailedResponse ( int id ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.sendCurrentNetworkEapSimUmtsAuthFailure ( ) ; } else { return doBooleanCommand ( ( ( "CTRL-RSP-SIM-" + id ) + ":UMTS-FAIL" ) ) ; } }
private static void write ( java.lang.CharSequence from , java.io.File to , java.nio.charset.Charset charset , boolean append ) throws java.io.IOException { com.google.common.io.Files.asCharSink ( to , charset , com.google.common.io.Files.modes ( append ) ) . write ( from ) ; }
public void imageChanged ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( this ) { loadImage ( ) ; } } } ) ; doRedraw ( ) ; }
public void doWork ( ) throws android.os.RemoteException { mService.removeAccountAsUser ( mResponse , account , ( activity != null ) , userHandle.getIdentifier ( ) ) ; }
public void waitForIdle ( int timeoutMs ) { com.android.server.ConnectivityServiceTest.waitForIdleHandler ( mHandlerThread , timeoutMs ) ; }
private boolean isDrawablesResolved ( ) { return ( ( mPrivateFlags2 ) & ( android.view.View.PFLAG2_DRAWABLE_RESOLVED ) ) == ( android.view.View.PFLAG2_DRAWABLE_RESOLVED ) ; }
public static native byte [ ] EC_GROUP_get_cofactor ( org.conscrypt.NativeRef.EC_GROUP groupRef ) ;
private void riljLogv ( java.lang.String msg ) { android.telephony.Rlog.v ( com.android.internal.telephony.RIL.RILJ_LOG_TAG , ( msg + ( ( mInstanceId ) != null ? ( " [SUB" + ( mInstanceId ) ) + "]" : "" ) ) ) ; }
public java.io.InputStream getInputStream ( ) throws com.android.sched.util.file.WrongPermissionException { return vfs.openRead ( this ) ; }
public java.lang.String [ ] getEnabledProtocols ( ) { return sslParameters.getEnabledProtocols ( ) ; }
private void sendP2pPersistentGroupsChangedBroadcast ( ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( "sending p2p persistent groups changed broadcast" ) ; android.content.Intent intent = new android.content.Intent ( WifiP2pManager.WIFI_P2P_PERSISTENT_GROUPS_CHANGED_ACTION ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; mContext.sendStickyBroadcast ( intent ) ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { return super . getParameterAnnotationsInternal ( ) ; }
public boolean isEmpty ( ) { return ( ( ( mAdapter ) == null ) || ( mAdapter.isEmpty ( ) ) ) && ( ( ( getFootersCount ( ) ) + ( getHeadersCount ( ) ) ) == 0 ) ; }
public void testBetaOverlay ( ) { if ( "beta" . equals ( BuildConfig.FLAVOR_releaseType ) ) { pixelLooker ( mBetaOverlayIV , com.android.tests.overlay2.MainTest.GREEN ) ; } else { pixelLooker ( mBetaOverlayIV , com.android.tests.overlay2.MainTest.RED ) ; } }
public void onFocusChange ( android.view.View v , boolean hasFocus ) { if ( ( getEditorListener ( ) ) != null ) { getEditorListener ( ) . onRequest ( EditorListener.EDITOR_FOCUS_CHANGED ) ; } rebuildLabel ( ) ; if ( hasFocus ) { needInputInitialize = true ; } }
public com.android.jack.ir.ast.cfg.JBasicBlockElement getFirstElement ( ) { assert ( elements.size ( ) ) > 0 ; return elements.get ( 0 ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.pm.PackageManager packageManager , android.content.Intent intent ) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules ( ) ; return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent ( packageManager , intent ) ; }
public com.google.mockwebserver.MockResponse setBytesPerSecond ( int bytesPerSecond ) { this . bytesPerSecond = bytesPerSecond ; return this ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Math.max ( args.in , args.in1 ) , 0 , 0 ) ; }
public boolean addAll ( java.util.Collection < ? extends E > es ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void testNullPointerException ( ) throws java.lang.Exception { try { new java.text.RuleBasedCollator ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public com.android.build.gradle.AndroidSourceSet resources ( groovy.lang.Closure configureClosure ) { org.gradle.util.ConfigureUtil.configure ( configureClosure , getResources ( ) ) ; return this ; }
public static java.lang.String toString ( org.hamcrest.SelfDescribing selfDescribing ) { return new org.hamcrest.StringDescription ( ) . appendDescriptionOf ( selfDescribing ) . toString ( ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder clearResultPath ( ) { bitField0_ = ( bitField0_ ) & ( ~ 2 ) ; resultPath_ = com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.getDefaultInstance ( ) . getResultPath ( ) ; onChanged ( ) ; return this ; }
private int getToneId ( com.android.internal.telephony.cat.Tone tone ) { int toneId = android.media.ToneGenerator.TONE_PROP_BEEP ; if ( ( tone != null ) && ( com.android.stk.TonePlayer.mToneMap.containsKey ( tone ) ) ) { toneId = com.android.stk.TonePlayer.mToneMap.get ( tone ) ; } return toneId ; }
private static void addFile ( @ javax.annotation.Nonnull java.io.File fileOrSourceList , @ javax.annotation.Nonnull java.util.List < java.lang.String > commandLine , boolean mustExist ) { if ( fileOrSourceList instanceof com.android.jack.Sourcelist ) { commandLine.add ( ( "@" + ( fileOrSourceList.getAbsolutePath ( ) ) ) ) ; } else { java.util.List < java.io.File > sourceFiles = new java.util.ArrayList < java.io.File > ( ) ; try { com.android.jack.test.toolchain.AbstractTestTools.getJavaFiles ( fileOrSourceList , sourceFiles , mustExist ) ; } catch ( java.io.IOException e ) { } for ( java.io.File sourceFile : sourceFiles ) { commandLine.add ( sourceFile.getAbsolutePath ( ) ) ; } } }
public void setAttributes ( com.android.ide.common.resources.platform.AttributeInfo [ ] attributes ) { mAttributes = attributes ; }
public void postResponse ( com.android.volley.Request < ? > request , com.android.volley.Response < ? > response ) { postResponse_called = true ; ( postResponse_calledNtimes ) ++ ; responsePosted = response ; }
public void run ( ) { com.android.bluetooth.pbap.BluetoothPbapUtils.updateSecondaryVersionCounter ( mContext , mSessionStatusHandler ) ; mThreadUpdateSecVersionCounter = null ; }
private void recordIfInstanceMethod ( int access , java.lang.String name , java.lang.String desc ) { if ( com.google.devtools.build.android.desugar.io.BitFlags.noneSet ( access , Opcodes.ACC_STATIC ) ) { instanceMethods.add ( ( ( name + ":" ) + desc ) ) ; } }
private android.net.ConnectivityManager.CallbackHandler getDefaultHandler ( ) { synchronized ( android.net.ConnectivityManager.sCallbacks ) { if ( ( android.net.ConnectivityManager.sCallbackHandler ) == null ) { android.net.ConnectivityManager.sCallbackHandler = new android.net.ConnectivityManager.CallbackHandler ( android.net.ConnectivityThread.getInstanceLooper ( ) ) ; } return android.net.ConnectivityManager.sCallbackHandler ; } }
public static com.android.builder.signing.SigningInfo getDebugKey ( @ com.android.annotations.NonNull java.lang.String keyStoreLocation , java.lang.String storeStype ) throws com.android.builder.signing.KeytoolException , java.io.FileNotFoundException { return com.android.builder.signing.KeystoreHelper.getSigningInfo ( keyStoreLocation , com.android.builder.signing.DebugKeyHelper.PASSWORD_STRING , storeStype , com.android.builder.signing.DebugKeyHelper.DEBUG_ALIAS , com.android.builder.signing.DebugKeyHelper.PASSWORD_STRING ) ; }
private void notifyUiVisibilityChanged ( int vis ) { try { mWindowManagerService.statusBarVisibilityChanged ( vis ) ; } catch ( android.os.RemoteException ex ) { } }
public void testInitialCardState ( ) { org.junit.Assert.assertEquals ( mUiccProfile.getState ( ) , State.NOT_READY ) ; }
protected int getPreferredPopupHeight ( ) { return ! ( com.google.gct.idea.elysium.ProjectSelector.needsToSignIn ( ) ) ? com.google.gct.idea.elysium.ProjectSelector.PREFERRED_HEIGHT : ( BaseGoogleLoginUI.PREFERRED_HEIGHT ) + ( com.google.gct.idea.elysium.ProjectSelector.POPUP_HEIGHTFRAMESIZE ) ; }
private void onCapabilitiesUpdatedResponseLocal ( com.android.server.wifi.nan.WifiNanNative.Capabilities capabilities ) { if ( com.android.server.wifi.nan.WifiNanStateManager.VDBG ) { android.util.Log.v ( com.android.server.wifi.nan.WifiNanStateManager.TAG , ( "onCapabilitiesUpdatedResponseLocal: capabilites=" + capabilities ) ) ; } mCapabilities = capabilities ; mCharacteristics = null ; }
public void acknowledgeSms ( int token , int messageRef , int result ) { synchronized ( mLock ) { this . acknowledgeSms ( token , messageRef , result ) ; } }
public void callSessionRemoveParticipantsRequestFailed ( com.android.ims.internal.IImsCallSession i , android.telephony.ims.ImsReasonInfo imsReasonInfo ) throws android.os.RemoteException { mNewListener.callSessionRemoveParticipantsRequestFailed ( imsReasonInfo ) ; }
public void withRowInt_columnIndexAndValue ( ) { org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.CursorMatchers.withRowInt ( 2 , android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE ) . matches ( cursor ) ) ; }
synchronized void nScriptSetTimeZone ( long script , byte [ ] timeZone ) { validate ( ) ; rsnScriptSetTimeZone ( mContext , script , timeZone ) ; }
synchronized void nScriptSetVarJ ( long id , int slot , long val ) { validate ( ) ; rsnScriptSetVarJ ( mContext , id , slot , val ) ; }
public void test_SingletonMap_computeIfAbsent ( ) { try { java.util.Collections.singletonMap ( 1 , 11.0 ) . computeIfAbsent ( 1 , ( k ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void addChild ( org.junit.runner.Description description ) { fChildren.add ( description ) ; }
public void visitMethod ( com.intellij.psi.PsiMethod method ) { if ( com.android.tools.lint.checks.ViewHolderDetector.ViewAdapterVisitor.isViewAdapterMethod ( mContext , method ) ) { com.android.tools.lint.checks.ViewHolderDetector.InflationVisitor visitor = new com.android.tools.lint.checks.ViewHolderDetector.InflationVisitor ( mContext ) ; method.accept ( visitor ) ; visitor.finish ( ) ; } }
private android.content.ComponentName getDefaultDialerComponent ( ) { java.lang.String packageName = mDefaultDialerAdapter.getDefaultDialerApplication ( mContext , mCallsManager.getCurrentUserHandle ( ) . getIdentifier ( ) ) ; android.telecom.Log.d ( this , ( "Default Dialer package: " + packageName ) ) ; return getInCallServiceComponent ( packageName , com.android.server.telecom.InCallController.IN_CALL_SERVICE_TYPE_DIALER_UI ) ; }
public void onDescriptorRead ( java.lang.String address , int status , int handle , byte [ ] value ) throws android.os.RemoteException { }
public void onPreferencesMenuSelected ( ) { com.android.ddms.PrefsDialog.run ( shell ) ; }
private static boolean isForwardLocked ( android.content.pm.ApplicationInfo info ) { return ( ( info.privateFlags ) & ( android.content.pm.ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK ) ) != 0 ; }
public static java.lang.String normalize ( java.lang.CharSequence src , java.text.Normalizer.Form form ) { return java.text.com.ibm.icu.text.Normalizer.normalize ( src.toString ( ) , form.getIcuForm ( ) ) ; }
public java.lang.String getId ( ) { return ActionFactory.SELECT_ALL.getId ( ) ; }
public java.lang.reflect.Method getEnclosingMethod ( ) { if ( classNameImpliesTopLevel ( ) ) { return null ; } return getEnclosingMethodNative ( ) ; }
public static float FloatSubtraction ( ) { float a ; float b ; float c ; a = Main.$inline$float ( 6.0F ) ; b = Main.$inline$float ( 2.0F ) ; c = a - b ; return c ; }
public void callSessionResumeReceived ( android.telephony.ims.ImsCallProfile profile ) { try { mListener.callSessionResumeReceived ( profile ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public java.lang.String getCanonicalHostName ( ) { if ( ( canonicalHostName ) == null ) { canonicalHostName = java.net.InetAddress.getHostFromNameService ( this ) ; } return canonicalHostName ; }
public static native byte [ ] EVP_DigestSignFinal ( org.conscrypt.OpenSSLDigestContext evp_md_ctx ) ;
private java.lang.String getADBPushJavaLine ( java.lang.String source , java.lang.String target ) { return ( ( ( "DeviceUtil.adbPush(getDevice(), \"" + source ) + "\", \"" ) + target ) + "\");" ; }
private int changeBitmask ( int bitmask , int bitfield , boolean enabled ) { if ( enabled ) { return bitmask | bitfield ; } else { return bitmask & ( ~ bitfield ) ; } }
public void callSessionConferenceExtended ( com.android.ims.internal.IImsCallSession i , com.android.ims.internal.IImsCallSession newSession , android.telephony.ims.ImsCallProfile imsCallProfile ) throws android.os.RemoteException { mNewListener.callSessionConferenceExtended ( newSession , imsCallProfile ) ; }
public static void main ( java.lang.String [ ] args ) { com.android.chimpchat.ChimpChat chimp = com.android.chimpchat.ChimpChat.getInstance ( ) ; com.android.monkeyrunner.recorder.MonkeyRecorder.start ( chimp.waitForConnection ( ) ) ; }
public static void computeDistance ( android.renderscript.cts.TestDistance.ArgumentsFloatNFloatNFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 1 , 1 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.distance ( args.inLeftVector , args.inRightVector , t ) ; }
private void trackVideoStateHistory ( android.telephony.ims.ImsCallProfile profile ) { mWasVideoCall = ( mWasVideoCall ) || ( profile.isVideoCall ( ) ) ; }
private static void addLoginListenersFromExtensionPoints ( com.google.gdt.eclipse.login.common.GoogleLoginState state ) { com.google.gct.login.GoogleLoginListener [ ] loginListeners = com.intellij.openapi.extensions.Extensions.getExtensions ( GoogleLoginListener.EP_NAME ) ; for ( com.google.gct.login.GoogleLoginListener listener : loginListeners ) { state.addLoginListener ( listener ) ; } }
T createVariantData ( @ com.android.annotations.NonNull com.android.build.gradle.internal.core.GradleVariantConfiguration variantConfiguration , @ com.android.annotations.NonNull java.util.Set < java.lang.String > densities , @ com.android.annotations.NonNull java.util.Set < java.lang.String > abi , @ com.android.annotations.NonNull java.util.Set < java.lang.String > compatibleScreens , @ com.android.annotations.NonNull com.android.build.gradle.internal.TaskManager taskManager ) ;
public java.util.Collection < java.lang.Class < ? extends com.android.sched.util.config.category.Category > > getCategories ( ) { return java.util.Collections.unmodifiableCollection ( categories ) ; }
public void testPass6 ( ) { metrics.addTestMetric ( "key2" , "value2" ) ; if ( mOption ) { metrics.addTestMetric ( "junit4-option" , "true" ) ; } }
public void setVariants ( @ com.android.annotations.NonNull java.util.Collection < ? extends com.android.build.gradle.internal.variant.BaseVariantData > variants ) { this . variants.addAll ( variants ) ; }
native void rsnScriptForEach ( long con , long incCon , long id , int slot , long ain , long aout , boolean mUseInc ) ;
private java.util.List < android.uirendering.cts.testinfrastructure.ActivityTestBase.TestCase > getTestCases ( ) { return mTestCases ; }
public void test_F32_1_SCALE20_05_inRectangle ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inY , Element.DataType.FLOAT_32 , 1 , 2.0F , 0.5F ) ; checkError ( ) ; }
protected void doBackup ( java.io.File toFile , java.io.File backupFile ) throws java.io.IOException { com.intellij.updater.Utils.mirror ( toFile , backupFile ) ; }
com.android.sched.vfs.BaseVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { return changeVFS ( vfs.createVDir ( parent , name ) ) ; }
protected void setUpDebuggeeWrapperConnection ( ) { debuggeeWrapper.setUpConnection ( ) ; logWriter.println ( "Set up server side JDWP connection." ) ; }
public static < K , V > sun.security.util.Cache < K , V > newNullCache ( ) { return ( ( sun.security.util.Cache < K , V > ) ( sun.security.util.NullCache.INSTANCE ) ) ; }
public void testCanEncodechar ( ) throws java.nio.charset.CharacterCodingException { assertTrue ( encoder.canEncode ( 'w' ) ) ; assertFalse ( encoder.canEncode ( '슣' ) ) ; }
public void handleEvent ( org.eclipse.swt.widgets.Event event ) { if ( ( event.detail ) == ( org.eclipse.swt.SWT.ARROW ) ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.OrientationMenuAction.showMenu ( this , combo ) ; } else { flipOrientation ( ) ; } }
public static int ReturnInt33 ( ) { long imm = Main.$inline$long ( 33L ) ; return ( ( int ) ( imm ) ) ; }
public static com.google.doclava.ClassInfo obtainClass ( java.lang.String className ) { return com.google.doclava.Converter.obtainClass ( com.google.doclava.Converter.root.classNamed ( className ) ) ; }
public java.lang.String getNetworkOperator ( ) { return getNetworkOperatorForPhone ( getPhoneId ( ) ) ; }
public void addPreferredActivity ( android.content.IntentFilter filter , int match , android.content.ComponentName [ ] set , android.content.ComponentName activity , int userId ) { addPreferredActivityInternal ( filter , match , set , activity , true , userId ) ; }
private static com.google.currysrc.api.process.Rule createTranslateJciteInclusionRule ( ) { java.util.List < com.google.currysrc.api.process.ast.BodyDeclarationLocator > whitelist = com.google.currysrc.api.process.ast.BodyDeclarationLocators.createLocatorsFromStrings ( com.android.icu4j.srcgen.Icu4jTransform.JCITE_TRANSFORM_SET ) ; com.android.icu4j.srcgen.TranslateJcite.InclusionHandler transformer = new com.android.icu4j.srcgen.TranslateJcite.InclusionHandler ( com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU4J_SAMPLE_DIR , whitelist ) ; return com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( transformer ) ; }
public void collapseAll ( ) { mTreeViewer.collapseAll ( ) ; mExpandedIds = null ; }
public static long [ ] asLongs ( byte [ ] x ) { long [ ] z = new long [ 2 ] ; org.bouncycastle.util.Pack.bigEndianToLong ( x , 0 , z ) ; return z ; }
public void go ( long t ) { synchronized ( this ) { mNextSleep = t ; notifyAll ( ) ; } }
public void init ( com.android.chimpchat.core.IChimpDevice device ) { this . device = device ; }
public void wifiConnectByConfig ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "config" ) org.json.JSONObject config ) throws org.json.JSONException { android.net.wifi.WifiConfiguration wifiConfig = genWifiConfig ( config ) ; com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener ( mEventFacade , WifiConstants.WIFI_CONNECT_BY_CONFIG_CALLBACK ) ; mWifi.connect ( wifiConfig , listener ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNullLiteral expr ) { return visitNonThrowingTriviaRValue ( expr ) ; }
public void testGetNewValue ( ) { assertEquals ( "merge" , com.android.tools.lint.checks.WrongCaseDetector.getNewValue ( "Invalid tag <Merge>; should be <merge>" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; assertEquals ( "merge" , com.android.tools.lint.checks.WrongCaseDetector.getNewValue ( "Invalid tag `<Merge>`; should be `<merge>`" , com.android.tools.lint.detector.api.TextFormat.RAW ) ) ; }
public void onUnlockUser ( int userHandle ) { mMountService.onUnlockUser ( userHandle ) ; }
public static void computeAtan2 ( android.renderscript.cts.TestAtan2.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.atan2 ( args.inY , args.inX ) , 6 , 128 ) ; }
public boolean onCreate ( ) { android.util.Log.d ( com.android.providers.telephony.TelephonyProviderTestable.TAG , "onCreate called: mDbHelper = new InMemoryTelephonyProviderDbHelper()" ) ; mDbHelper = new com.android.providers.telephony.TelephonyProviderTestable.InMemoryTelephonyProviderDbHelper ( ) ; s_apnSourceServiceExists = false ; return true ; }
public boolean isPossibleNumberForType ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType type ) { com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult result = isPossibleNumberForTypeWithReason ( number , type ) ; return ( result == ( com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.IS_POSSIBLE ) ) || ( result == ( com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.IS_POSSIBLE_LOCAL_ONLY ) ) ; }
public void testUtf8Bom ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/Utf8BomTest.java:4: Warning: Do not hardcode \"/sdcard/\"; use Environment.getExternalStorageDirectory().getPath() instead [SdCardPath]\n" + ( ( ( " String s = \"/sdcard/mydir\";\n" + " ~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) + "" ) ) , lintProject ( "src/test/pkg/Utf8BomTest.java.data=>src/test/pkg/Utf8BomTest.java" ) ) ; }
public void testStopSearch ( ) throws java.lang.InterruptedException { if ( ( isTelevision ( ) ) || ( isWatch ( ) ) ) { return ; } android.app.stubs.SearchManagerStubActivity.setCTSResult ( this ) ; setupActivity ( SearchManagerStubActivity.TEST_STOP_SEARCH ) ; waitForResult ( ) ; }
private boolean hasAcceptedTos ( ) { if ( isVvm3 ( ) ) { return ( preferences.getInt ( VoicemailVersionConstants.PREF_VVM3_TOS_VERSION_ACCEPTED_KEY , 0 ) ) >= ( com.android.voicemail.VoicemailVersionConstants.CURRENT_VVM3_TOS_VERSION ) ; } else { return ( preferences.getInt ( VoicemailVersionConstants.PREF_DIALER_TOS_VERSION_ACCEPTED_KEY , 0 ) ) >= ( com.android.voicemail.VoicemailVersionConstants.CURRENT_DIALER_TOS_VERSION ) ; } }
public void clearMatches ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearMatches ( ) ; } } ) ; return ; } mAwContents.clearMatches ( ) ; }
public java.util.List < ? extends com.google.gct.testing.dimension.GoogleCloudTestingType > getAppSupportedDomain ( ) { return com.google.gct.testing.dimension.OrientationDimension.getFullDomain ( ) ; }
public com.android.builder.VariantConfiguration setAndroidDependencies ( @ com.android.annotations.NonNull java.util.List < com.android.builder.AndroidDependency > directLibraries ) { if ( directLibraries != null ) { mDirectLibraries.addAll ( directLibraries ) ; } resolveIndirectLibraryDependencies ( mDirectLibraries , mFlatLibraries ) ; return this ; }
public long getLong ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException { return getLong ( object , isAccessible ( ) ) ; }
public java.lang.String [ ] list ( java.lang.String prefix ) { return list ( prefix , android.security.KeyStore.UID_SELF ) ; }
synchronized void nScriptBindAllocation ( long script , long alloc , int slot ) { validate ( ) ; rsnScriptBindAllocation ( mContext , script , alloc , slot ) ; }
public void setRunName ( java.lang.String runName ) { mRunName = runName ; }
public void test_SingletonMap_compute ( ) { try { java.util.Collections.singletonMap ( 1 , 11.0 ) . compute ( 1 , ( k , v ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void testGetActivityThemes1 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( " package=\'com.android.unittest\'>\n" + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) ) ) ; java.util.Map < java.lang.String , com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.ActivityAttributes > map = info.getActivityAttributesMap ( ) ; assertEquals ( map.toString ( ) , 0 , map.size ( ) ) ; assertEquals ( "com.android.unittest" , info.getPackage ( ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ) ; assertEquals ( "@android:style/Theme" , info.getDefaultTheme ( null , null ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.XLARGE ) ) ) ; }
public com.android.tools.lint.ResolvedClass getTypeClass ( ) { if ( ! ( mBinding.isPrimitiveType ( ) ) ) { return new com.android.tools.lint.EcjParser.EcjResolvedClass ( mBinding ) ; } return null ; }
public java.security.ProtectionDomain [ ] combine ( java.security.ProtectionDomain [ ] currentDomains , java.security.ProtectionDomain [ ] assignedDomains ) { return null ; }
protected void engineInit ( java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( params != null ) { throw new java.security.InvalidAlgorithmParameterException ( "No algorithm parameters supported" ) ; } initFromKey ( key ) ; }
public java.lang.String getShortName ( ) { return com.google.gct.intellij.endpoints.util.EndpointBundle.message ( "api.name.short.name" ) ; }
public void testUninstall_existingDataDistro ( ) throws java.lang.Exception { java.io.File currentDataDir = installer.getCurrentTzDataDir ( ) ; assertTrue ( currentDataDir.mkdir ( ) ) ; assertTrue ( installer.uninstall ( ) ) ; assertNoContentInstalled ( ) ; }
public java.lang.String getId ( ) { if ( ( extnID_str ) == null ) { extnID_str = org.apache.harmony.security.asn1.ObjectIdentifier.toString ( extnID ) ; } return extnID_str ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( ) ; n.flags |= android.app.Notification.FLAG_SHOW_LIGHTS ; n.ledARGB = - 16776961 ; n.ledOnMS = 1300 ; n.ledOffMS = 1300 ; mNM.notify ( 1 , n ) ; }
protected void loge ( java.lang.String msg ) { android.telephony.Rlog.e ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG , ( ( ( "[" + ( mPhone.getPhoneId ( ) ) ) + "] " ) + msg ) ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , boolean value ) { return addHolder ( name , java.lang.String.valueOf ( value ) ) ; }
public java.lang.String getNewName ( @ javax.annotation.Nonnull com.android.jack.shrob.obfuscation.key.Key key ) { java.lang.String newName = names.get ( key ) ; if ( newName != null ) { return newName ; } return defaultNameProvider.getNewName ( key ) ; }
private com.android.builder.internal.incremental.DependencyData getData ( java.lang.String name ) throws java.io.IOException { java.io.File depFile = new java.io.File ( com.android.testutils.TestUtils.getRoot ( "dependencyData" ) , name ) ; com.android.builder.internal.incremental.DependencyData data = com.android.builder.internal.incremental.DependencyData.parseDependencyFile ( depFile ) ; assertNotNull ( data ) ; return data ; }
public void addCapabilityCallback ( android.telephony.ims.aidl.IImsCapabilityCallback c ) { this . addCapabilityCallback ( c ) ; }
public final boolean contains ( T item ) { return ( indexWithId ( item ) ) != ( - 1 ) ; }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsUcharUcharUcharUchar args ) { args.out = android.renderscript.cts.CoreMathVerifier.minU8 ( args.inMaxValue , android.renderscript.cts.CoreMathVerifier.maxU8 ( args.inValue , args.inMinValue ) ) ; }
public final native void setLoop ( int streamID , int loop ) ;
public android.net.wifi.aware.PublishConfig.Builder setMatchFilter ( @ android.annotation.Nullable java.util.List < byte [ ] > matchFilter ) { mMatchFilter = new android.net.wifi.aware.TlvBufferUtils.TlvConstructor ( 0 , 1 ) . allocateAndPut ( matchFilter ) . getArray ( ) ; return this ; }
public java.util.Set < java.lang.Integer > getSupportedCallingCodes ( ) { return java.util.Collections.unmodifiableSet ( countryCallingCodeToRegionCodeMap.keySet ( ) ) ; }
public static void closeQuietly ( android.util.jar.StrictJarFile jarFile ) { if ( jarFile != null ) { try { jarFile.close ( ) ; } catch ( java.lang.Exception ignored ) { } } }
public java.lang.String getShortDescription ( ) { if ( ( ( mUiName ) != null ) && ( ( mUiName.length ( ) ) > 0 ) ) { return mUiName ; } return mUrl ; }
public static native int EVP_AEAD_CTX_seal ( long evpAead , byte [ ] key , int tagLengthInBytes , byte [ ] out , int outOffset , byte [ ] nonce , byte [ ] in , int inOffset , int inLength , byte [ ] ad ) throws javax.crypto.BadPaddingException ;
public void run ( ) { if ( ( ( mEditor ) == null ) || ( ! ( mEditor.mErrorWasChanged ) ) ) { setError ( error ) ; } }
public static int $noinline$shortToLongToInt ( short value ) { return ( ( int ) ( ( long ) ( value ) ) ) ; }
public void acknowledgeSms ( int messageRef , int result ) { synchronized ( mLock ) { this . acknowledgeSms ( messageRef , result ) ; } }
public void copy1DRangeFromUnchecked ( int off , int count , int [ ] d ) { copy1DRangeFromUnchecked ( off , count , ( ( java.lang.Object ) ( d ) ) , Element.DataType.SIGNED_32 , d.length ) ; }
public void setEmitSyntheticDebugInfo ( boolean emitSyntheticDebugInfo ) { this . emitSyntheticDebugInfo = emitSyntheticDebugInfo ; }
private boolean getValue ( ) { return ( Settings.Global.getInt ( mContentResolver , Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON , 0 ) ) == 1 ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object element ) { return multimap.containsKey ( element ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JConstructor constructor ) { endVisit ( ( ( com.android.jack.ir.ast.JMethod ) ( constructor ) ) ) ; }
public V2 apply ( java.util.Map.Entry < K , V1 > entry ) { return transformer.transformEntry ( entry.getKey ( ) , entry.getValue ( ) ) ; }
private static java.lang.String lambda ( @ javax.annotation.Nonnull java.lang.String pkg , @ javax.annotation.Nonnull java.lang.String sha , @ javax.annotation.Nonnegative int i ) { return com.android.jack.optimizations.lambdas.LambdaTests.type ( pkg , ( ( "-$Lambda$" + sha ) + ( i == 0 ? "" : "$" + i ) ) ) ; }
private libcore.util.ZoneInfo createZoneInfo ( int [ ] [ ] transitions , int [ ] [ ] types , long currentTimeMillis ) throws java.lang.Exception { return createZoneInfo ( getName ( ) , transitions , types , currentTimeMillis ) ; }
public void validateUpdateParameterWithoutUpdateInterval ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.UpdateParameter updateParam = android.net.wifi.hotspot2.pps.UpdateParameterTest.createUpdateParameter ( ) ; updateParam.setUpdateIntervalInMinutes ( java.lang.Long.MIN_VALUE ) ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; }
public void callSessionResumed ( android.telephony.ims.ImsCallProfile profile ) { try { mListener.callSessionResumed ( profile ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void sendTriggerUpdateCheck ( com.android.server.timezone.CheckToken checkToken ) { android.app.timezone.RulesUpdaterContract.sendBroadcast ( mContext , mUpdaterAppPackageName , checkToken.toByteArray ( ) ) ; com.android.server.EventLogTags.writeTimezoneTriggerCheck ( checkToken.toString ( ) ) ; }
public void testNotRedirectedFromHttpToHttps ( ) throws java.io.IOException , java.lang.InterruptedException { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setResponseCode ( java.net.HttpURLConnection.HTTP_MOVED_TEMP ) . addHeader ( "Location: https://anyhost/foo" ) . setBody ( "This page has moved!" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; org.junit.Assert.assertEquals ( "This page has moved!" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; }
public void enter ( ) { log ( ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; broadcastAudioState ( mCurrentDevice , BluetoothA2dpSink.STATE_NOT_PLAYING , BluetoothA2dpSink.STATE_PLAYING ) ; com.android.bluetooth.a2dp.A2dpSinkStateMachine.mAvrcpPlaySent = false ; }
private static native void closeImpl ( int address ) ;
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) { com.android.jack.ir.ast.JMethodId id = getResolvedMethodId ( call.getReceiverType ( ) , call.getMethodId ( ) ) ; call.resolveMethodId ( id ) ; return super . visit ( call ) ; }
public void testApi2 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "src/foo/bar/ApiCallTest.java:33: Warning: Field requires API level 11 (current min is 2): dalvik.bytecode.OpcodeInfo#MAXIMUM_VALUE [InlinedApi]\n" + " int field = OpcodeInfo.MAXIMUM_VALUE; // API 11\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:20: Error: Call requires API level 11 (current min is 2): android.app.Activity#getActionBar [NewApi]\n" ) + " getActionBar(); // API 11\n" ) + " ~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:24: Error: Class requires API level 8 (current min is 2): org.w3c.dom.DOMErrorHandler [NewApi]\n" ) + " Class<?> clz = DOMErrorHandler.class; // API 8\n" ) + " ~~~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:27: Error: Call requires API level 3 (current min is 2): android.widget.Chronometer#getOnChronometerTickListener [NewApi]\n" ) + " chronometer.getOnChronometerTickListener(); // API 3 \n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:30: Error: Call requires API level 11 (current min is 2): android.widget.Chronometer#setTextIsSelectable [NewApi]\n" ) + " chronometer.setTextIsSelectable(true); // API 11\n" ) + " ~~~~~~~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:33: Error: Field requires API level 11 (current min is 2): dalvik.bytecode.OpcodeInfo#MAXIMUM_VALUE [NewApi]\n" ) + " int field = OpcodeInfo.MAXIMUM_VALUE; // API 11\n" ) + " ~~~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:38: Error: Field requires API level 14 (current min is 2): android.app.ApplicationErrorReport#batteryInfo [NewApi]\n" ) + " BatteryInfo batteryInfo = getReport().batteryInfo;\n" ) + " ~~~~~~~~~~~\n" ) + "src/foo/bar/ApiCallTest.java:41: Error: Field requires API level 11 (current min is 2): android.graphics.PorterDuff.Mode#OVERLAY [NewApi]\n" ) + " Mode mode = PorterDuff.Mode.OVERLAY; // API 11\n" ) + " ~~~~~~~\n" ) + "7 errors, 1 warnings\n" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk2.xml=>AndroidManifest.xml" , "apicheck/ApiCallTest.java.txt=>src/foo/bar/ApiCallTest.java" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" ) ) ; }
public void testGetEuiccInfo_success ( ) { org.junit.Assert.assertEquals ( com.android.internal.telephony.euicc.EuiccControllerTest.OS_VERSION , callGetEuiccInfo ( true , com.android.internal.telephony.euicc.EuiccControllerTest.EUICC_INFO ) . getOsVersion ( ) ) ; }
public java.lang.Void doInBackground ( @ android.support.annotation.Nullable java.lang.Void input ) throws java.lang.Throwable { updateSmartDialDatabase ( ) ; return null ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.test ( "A" ) ; Main.test ( "B" ) ; Main.test ( "C" ) ; Main.test ( "D" ) ; Main.test ( "E" ) ; }
public void testUnsuccessfulFirstUpdate_olderVersionThanSystem ( ) throws java.lang.Exception { libcore.tzdata.update2.ConfigBundle tzData1 = createValidTzDataBundle ( libcore.tzdata.update2.TzDataBundleInstallerTest.OLDER_RULES_VERSION ) ; assertFalse ( installer.install ( tzData1.getBundleBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public static long AndIntLong ( ) { int lhs = 10 ; long rhs = 3 ; return lhs & rhs ; }
public void onSdkLoaded ( com.android.sdklib.IAndroidTarget target ) { mSdkChanged = true ; mTarget = target ; ( mDisableUpdates ) ++ ; try { initDevices ( ) ; initTargets ( ) ; } finally { ( mDisableUpdates ) -- ; } }
protected java.lang.Object getPropertyKeyCookie ( @ com.android.annotations.NonNull java.lang.Object cookie ) { return cookie ; }
public com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getMultiEndpointInterface ( mSlotId , mSupportedFeature ) ; } }
public boolean showFindDialog ( java.lang.String text , boolean showIme ) { checkThread ( ) ; if ( android.webkit.WebView.TRACE ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "showFindDialog" ) ; return mProvider.showFindDialog ( text , showIme ) ; }
com.google.common.collect.Multiset.Entry < E > getEntry ( int index ) { throw new java.lang.AssertionError ( "should never be called" ) ; }
synchronized void nScriptSetVarI ( long id , int slot , int val , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetVarI ( curCon , id , slot , val , mUseInc ) ; }
public void testAllowBackupOk2 ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.ALLOW_BACKUP ) ; assertEquals ( "No warnings." , lintProject ( "AndroidManifest.xml" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "res/values/strings.xml" ) ) ; }
public void notifyANQPDone ( com.android.server.wifi.hotspot2.AnqpEvent anqpEvent ) { mHandler.notifyANQPDone ( anqpEvent ) ; }
public void testRefactorFragment ( ) throws java.lang.Exception { moveType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.MyFragment" , "src/com/example/refactoringtest/subpackage" , true , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( "-------\n" + "[x] Move resource \'testRefactorFragment/src/com/example/refactoringtest/MyFragment.java\' to \'subpackage\'\n" ) + "\n" ) + "[x] Move resource \'testRefactorFragment/src/com/example/refactoringtest/MyFragment.java\' to \'subpackage\'\n" ) + "\n" ) + "[x] activity_main.xml - /testRefactorFragment/res/layout/activity_main.xml\n" ) + " @@ -33 +33\n" ) + " - <fragment android:name=\"com.example.refactoringtest.MyFragment\"/>\n" ) + " + <fragment android:name=\"com.example.refactoringtest.subpackage.MyFragment\"/>" ) ) ) ; }
public void startCaptivePortalApp ( android.net.Network network ) { try { mService.startCaptivePortalApp ( network ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void callSessionMergeStarted ( com.android.ims.internal.IImsCallSession newSession , android.telephony.ims.ImsCallProfile profile ) { try { mListener.callSessionMergeStarted ( newSession , profile ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void onClick ( android.view.View v ) { showDialog ( com.example.android.apis.app.AlertDialogSamples.DIALOG_LIST ) ; }
public void test_plusMonths_long_negativeOverYears ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.plusMonths ( ( - 31 ) ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2004 , 12 , 15 ) ) ; }
public void test_plus_longTemporalUnit_zero ( ) { java.time.LocalTime t = tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.plus ( 0 , java.time.temporal.ChronoUnit.MINUTES ) ; org.testng.Assert.assertEquals ( t , tck.java.time.TCKLocalTime.TEST_12_30_40_987654321 ) ; }
private void printVersion ( com.android.tools.lint.LintCliClient client ) { java.lang.String revision = client.getRevision ( ) ; if ( revision != null ) { java.lang.System.out.println ( java.lang.String.format ( "lint: version %1$s" , revision ) ) ; } else { java.lang.System.out.println ( "lint: unknown version" ) ; } }
public static java.util.Collection < java.lang.Object [ ] > getNinePatches ( ) { java.util.Collection < java.lang.Object [ ] > params = com.android.builder.png.NinePatchAaptProcessorTestUtils.getNinePatches ( ) ; com.android.builder.png.NinePatchAsyncAaptProcessTest.classStartTime.set ( java.lang.System.currentTimeMillis ( ) ) ; return params ; }
public int telephonyGetPreferredNetworkTypeInteger ( ) { return telephonyGetPreferredNetworkTypeIntegerForSubscription ( android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
public boolean initialize ( ) { boolean ret = doInitialize ( ) ; mIsoDepMaxTransceiveLength = getIsoDepMaxTransceiveLength ( ) ; return ret ; }
public void testSaveProperties ( ) { java.util.Properties expected = createExpectedProps ( ) ; com.android.sdklib.internal.repository.packages.PlatformPackage p = createPlatformPackage ( expected ) ; java.util.Properties actual = new java.util.Properties ( ) ; p.saveProperties ( actual ) ; assertEquals ( expected , actual ) ; }
public void setEnabled ( boolean enable ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.CONNECTIVITY_INTERNAL , "NsdService" ) ; mNsdSettings.putEnabledStatus ( enable ) ; if ( enable ) { mNsdStateMachine.sendMessage ( NsdManager.ENABLE ) ; } else { mNsdStateMachine.sendMessage ( NsdManager.DISABLE ) ; } }
public void registerJavaGeneratingTask ( @ com.android.annotations.NonNull org.gradle.api.Task task , @ com.android.annotations.NonNull java.util.Collection < java.io.File > sourceFolders ) { getVariantData ( ) . registerJavaGeneratingTask ( task , sourceFolders ) ; }
public void onDestroy ( ) { logger.debug ( "onDestroy()" ) ; if ( ( mCapabilityPolling ) != null ) { mCapabilityPolling.stop ( ) ; mCapabilityPolling = null ; } unregisterReceiver ( mReceiver ) ; super . onDestroy ( ) ; }
public void onResume ( ) { super . onResume ( ) ; initPreferences ( ) ; getActivity ( ) . registerReceiver ( mReceiver , mFilter , android.Manifest.permission.CHANGE_NETWORK_STATE , null ) ; refreshWifiInfo ( ) ; }
public static android.icu.util.UResourceBundle getBundleInstance ( java.lang.String baseName ) { if ( baseName == null ) { baseName = android.icu.impl.ICUData.ICU_BASE_NAME ; } android.icu.util.ULocale uloc = android.icu.util.ULocale.getDefault ( ) ; return android.icu.util.UResourceBundle.getBundleInstance ( baseName , uloc.getBaseName ( ) , ICUResourceBundle.ICU_DATA_CLASS_LOADER , false ) ; }
protected void setupTests ( com.android.cts.verifier.ArrayTestListAdapter adapter ) { if ( hasTrustAgents ( ) ) { setupDisableTrustAgentsTest ( adapter ) ; } setupDisableUnredactedWorkNotification ( adapter ) ; setupFingerprintTests ( adapter ) ; }
public void callSessionRttModifyRequestReceived ( com.android.ims.internal.IImsCallSession i , android.telephony.ims.ImsCallProfile imsCallProfile ) throws android.os.RemoteException { mNewListener.callSessionRttModifyRequestReceived ( imsCallProfile ) ; }
static float $opt$noinline$DoubleToFloat ( double a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( float ) ( a ) ) ; }
public V setValue ( @ javax.annotation.Nullable V newValue ) { V result = value ; this . value = newValue ; return result ; }
public vogar.ResultValue getResultValue ( vogar.Expectation expectation ) { if ( matters ( ) ) { return expectation.matches ( this ) ? ResultValue.OK : ResultValue.WARNING ; } return ResultValue.IGNORE ; }
public void getDeviceIdentityResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String imei , java.lang.String imeisv , java.lang.String esn , java.lang.String meid ) { responseStrings ( responseInfo , imei , imeisv , esn , meid ) ; }
public java.lang.String getCallId ( ) { return null ; }
public void test_oneDex_simpleUse ( ) throws java.lang.Exception { java.lang.String result = ( ( java.lang.String ) ( createLoaderAndCallMethod ( "test.Test1" , "test" , dex1 ) ) ) ; assertSame ( "blort" , result ) ; }
protected com.google.gct.idea.samples.WizardStepHeaderSettings getStepHeader ( ) { return com.google.gct.idea.samples.WizardStepHeaderSettings.createProductHeader ( com.google.gct.idea.util.GctBundle.message ( "sample.import.title" ) ) ; }
public boolean sameItemAs ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.DocPackage ) { com.android.sdklib.AndroidVersion rev2 = ( ( com.android.sdklib.internal.repository.packages.DocPackage ) ( pkg ) ) . getAndroidVersion ( ) ; return this . getAndroidVersion ( ) . equals ( rev2 ) ; } return false ; }
public boolean isKnownProperty ( java.lang.String name ) { for ( java.lang.String propRegex : mKnownProps ) { if ( ( propRegex.equals ( name ) ) || ( java.util.regex.Pattern.matches ( propRegex , name ) ) ) { return true ; } } return false ; }
public void onIntrData ( android.bluetooth.BluetoothDevice device , byte reportId , byte [ ] data ) { android.util.Log.d ( android.bluetooth.BluetoothHidDeviceCallback.TAG , ( ( ( "onIntrData: device=" + device ) + " reportId=" ) + reportId ) ) ; }
public com.google.mockwebserver.MockResponse dispatch ( com.google.mockwebserver.RecordedRequest request ) throws java.lang.InterruptedException { assertEquals ( "CONNECT" , request.getMethod ( ) ) ; com.google.mockwebserver.MockResponse response = new com.google.mockwebserver.MockResponse ( ) ; response.setResponseCode ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.AUTHENTICATION_REQUIRED_CODE ) ; response.addHeader ( "Proxy-authenticate: Basic realm=\"localhost\"" ) ; log ( ( "Authentication required. Sending response: " + response ) ) ; return response ; }
public static < T extends java.lang.Enum < T > > com.google.common.base.Converter < java.lang.String , T > stringConverter ( final java.lang.Class < T > enumClass ) { return new com.google.common.base.Enums.StringConverter < T > ( enumClass ) ; }
public static android.telephony.SmsCbMessage createFromPdu ( byte [ ] pdu ) { try { return new android.telephony.SmsCbMessage ( pdu ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Log.w ( android.telephony.SmsCbMessage.LOG_TAG , "Failed parsing SMS-CB pdu" , e ) ; return null ; } }
public void testPackageOverridePackageWithSuffixOnly ( ) { mBuildType.setApplicationIdSuffix ( "fortytwo" ) ; com.android.builder.core.VariantConfiguration variant = getVariantWithManifestPackage ( "fake.package.name" ) ; assertEquals ( "fake.package.name.fortytwo" , variant.getIdOverride ( ) ) ; }
protected java.lang.Object engineGetParameter ( java.lang.String arg0 ) throws java.security.InvalidParameterException { return getSpi ( ) . engineGetParameter ( arg0 ) ; }
native void rsnScriptSetVarObj ( long con , long id , int slot , long val , boolean mUseInc ) ;
public com.android.ide.common.rendering.HardwareConfigHelper setOverrideRenderSize ( int overrideRenderWidth , int overrideRenderHeight ) { mOverrideRenderWidth = overrideRenderWidth ; mOverrideRenderHeight = overrideRenderHeight ; return this ; }
private native java.lang.reflect.Method getEnclosingMethodNative ( ) ;
protected com.android.jack.dx.dex.file.DexFile createDexFile ( ) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions ( ) ; options.forceJumbo = forceJumbo ; options.targetApiLevel = apiLevel.getReleasedLevel ( ) ; return new com.android.jack.dx.dex.file.DexFile ( options ) ; }
protected void leave ( java.net.InetAddress arg0 ) throws java.io.IOException { }
public boolean disable ( ) { try { return mManagerService.disable ( android.app.ActivityThread.currentPackageName ( ) , true ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { android.os.Bundle filteredExtras = maybeCleanseExtras ( mCallExtras ) ; out.writeInt ( mServiceType ) ; out.writeInt ( mCallType ) ; out.writeBundle ( filteredExtras ) ; out.writeParcelable ( mMediaProfile , 0 ) ; }
public void test_providerCount ( ) { java.security.Provider [ ] providers = java.security.Security.getProviders ( ) ; assertTrue ( ( ( providers.length ) > 0 ) ) ; assertTrue ( ( ( providers.length ) < 10 ) ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JConditionalBasicBlock block ) { super . endVisit ( block ) ; com.android.jack.ir.ast.cfg.JConditionalBasicBlock other = otherOrMe ( block ) ; ensure ( ( ( other.isInverted ( ) ) == ( block.isInverted ( ) ) ) ) ; }
public boolean delete ( java.lang.String key ) { try { return ( mBinder.del ( key ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public void addData ( java.lang.String tag , byte [ ] data , int flags ) { java.lang.System.out.println ( ( ( tag + ": " ) + ( java.util.Base64.getEncoder ( ) . encodeToString ( data ) ) ) ) ; }
public com.android.utils.HtmlBuilder newline ( ) { mStringBuilder.append ( "<BR/>" ) ; return this ; }
public boolean nudValid ( ) { return android.net.netlink.StructNdMsg.isNudStateValid ( ndm_state ) ; }
static void inlinedForNull ( java.lang.Iterable < ? > it ) { if ( it != null ) { it.iterator ( ) ; } }
public boolean canTransfer ( ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "canTransfer: not possible in CDMA" ) ; return false ; }
public final byte [ ] generateSecret ( ) throws java.lang.IllegalStateException { return getSpi ( ) . engineGenerateSecret ( ) ; }
public void alignToFourBytes ( ) { int unalignedCount = position ; position = com.android.dex.Dex.fourByteAlign ( position ) ; for ( int i = unalignedCount ; i < ( position ) ; i ++ ) { data [ i ] = 0 ; } }
private static java.lang.RuntimeException convertServiceException ( android.os.ServiceSpecificException e ) { switch ( e.errorCode ) { case android.net.ConnectivityManager.Errors.TOO_MANY_REQUESTS : return new android.net.ConnectivityManager.TooManyRequestsException ( ) ; default : android.util.Log.w ( android.net.ConnectivityManager.TAG , ( "Unknown service error code " + ( e.errorCode ) ) ) ; return new java.lang.RuntimeException ( e ) ; } }
public static void assertTrue ( boolean condition ) { if ( ! condition ) throw new dot.junit.AssertionFailedException ( "condition was false" ) ; }
synchronized long nScriptIntrinsicCreate ( int id , long eid ) { validate ( ) ; return rsnScriptIntrinsicCreate ( mContext , id , eid ) ; }
public void error ( int errorCode , java.lang.String message ) throws android.os.RemoteException { callback.error ( errorCode , message ) ; }
public static android.net.ConnectivityThread get ( ) { return android.net.ConnectivityThread.Singleton.INSTANCE ; }
public static com.android.dialer.spam.status.SimpleSpamStatus create ( boolean isSpam , @ android.support.annotation.Nullable java.lang.Long timestampMillis ) { return com.android.dialer.spam.status.SimpleSpamStatus.builder ( ) . setSpam ( isSpam ) . setTimestampMillis ( timestampMillis ) . setSpamMetadata ( com.android.dialer.spam.status.SpamMetadata.empty ( ) ) . build ( ) ; }
public java.util.ListIterator < T > listIterator ( final int index ) { return new com.google.common.collect.TransformedListIterator < F , T > ( fromList.listIterator ( index ) ) { @ java.lang.Override T transform ( F from ) { return function.apply ( from ) ; } } ; }
private void skipArray ( ) { while ( ( descriptor.charAt ( index ) ) == ( proguard.classfile.ClassConstants.TYPE_ARRAY ) ) { ( index ) ++ ; } }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDynamicCastOperation cast ) { checkBoxingOrUnboxing ( cast.getExpr ( ) , cast.getType ( ) ) ; super . endVisit ( cast ) ; }
public final int getInt ( int index ) { checkIsAccessible ( ) ; checkIndex ( index , SizeOf.INT ) ; return this . block.peekInt ( ( ( offset ) + index ) , order ) ; }
public static boolean isPackageSourceName ( @ javax.annotation.Nonnull java.lang.String name ) { return com.android.jack.util.NamingTools.isClassOrPackageName ( name.toCharArray ( ) , 0 , name.length ( ) , com.android.jack.util.NamingTools.PACKAGE_SOURCE_SEPARATOR , JLookup.PACKAGE_SEPARATOR ) ; }
public com.android.bluetooth.hfp.HeadsetStateMachine makeStateMachine ( android.bluetooth.BluetoothDevice device , android.os.Looper looper , com.android.bluetooth.hfp.HeadsetService headsetService , com.android.bluetooth.btservice.AdapterService adapterService , com.android.bluetooth.hfp.HeadsetNativeInterface nativeInterface , com.android.bluetooth.hfp.HeadsetSystemInterface systemInterface ) { return com.android.bluetooth.hfp.HeadsetStateMachine.make ( device , looper , headsetService , adapterService , nativeInterface , systemInterface ) ; }
synchronized void nAllocationRead1D ( int id , int off , int mip , int count , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead1D ( mContext , id , off , mip , count , d , sizeBytes , dt.mID ) ; }
public final synchronized void cancel ( ) { mCancelled = true ; mHandler.removeMessages ( android.os.CountDownTimer.MSG ) ; }
public void addResolutionIntent ( android.content.Intent extrasIntent , java.lang.String resolutionAction , java.lang.String callingPackage , boolean retried , com.android.internal.telephony.euicc.EuiccOperation op ) { mResolutionAction = resolutionAction ; mOp = op ; }
private java.lang.String getUncachedName ( ) { try { return file.getCanonicalPath ( ) ; } catch ( java.io.IOException ex ) { return file.getPath ( ) ; } }
public static native java.lang.String EVP_PKEY_print_params ( org.conscrypt.NativeRef.EVP_PKEY pkeyRef ) ;
public void setCallIsAdditional ( boolean isAdditional ) { android.telecom.Log.d ( com.android.server.telecom.Analytics.TAG , ( ( ( "setting isAdditional for call " + ( callId ) ) + " to " ) + isAdditional ) ) ; this . isAdditionalCall = isAdditional ; }
public static java.lang.String toASCII ( java.lang.String input , int flags ) { try { return com.ibm.icu.text.IDNA.convertIDNToASCII ( input , flags ) . toString ( ) ; } catch ( java.net.com.ibm e ) { throw new java.lang.IllegalArgumentException ( ( "Invalid input to toASCII: " + input ) , e ) ; } }
public int getDensity ( ) { return iDevice.getDensity ( ) ; }
com.google.common.util.concurrent.ListenableFuture < java.lang.String > run ( com.android.dialer.commandline.Arguments args ) throws com.android.dialer.commandline.Command.IllegalCommandLineArgumentException ;
public java.lang.String getString ( ) { return org.bouncycastle.util.Strings.fromByteArray ( string ) ; }
public static short checkedCast ( long value ) { short result = ( ( short ) ( value ) ) ; if ( result != value ) { throw new java.lang.IllegalArgumentException ( ( "Out of range: " + value ) ) ; } return result ; }
native void rsnScriptForEach ( long con , long incCon , long id , int slot , long ain , long aout , boolean mUseInc ) ;
static double $opt$FloatToDouble ( float a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( double ) ( a ) ) ; }
public void setDataNetworkType ( int type ) { int phoneId = getPhoneId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) ; setDataNetworkTypeForPhone ( phoneId , type ) ; }
public com.android.ims.ImsCallProfile createCallProfile ( int sessionId , int callServiceType , int callType ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . createCallProfile ( mSlotId , mSupportedFeature , sessionId , callServiceType , callType ) ; } }
private boolean record ( com.android.server.pm.dex.PackageDexUsageTests.TestData testData ) { return mPackageDexUsage.record ( testData.mPackageName , testData.mDexFile , testData.mOwnerUserId , testData.mLoaderIsa , testData.mUsedByOtherApps , testData.mPrimaryOrSplit , testData.mUsedBy ) ; }
public void onFocusChange ( android.view.View v , boolean hasFocus ) { if ( ! hasFocus ) { com.android.mms.ui.RecipientsEditor editor = ( ( com.android.mms.ui.RecipientsEditor ) ( v ) ) ; com.android.mms.data.ContactList contacts = editor.constructContactsFromInput ( false ) ; updateTitle ( contacts ) ; } }
public org.bouncycastle.math.ec.PreCompInfo getPreCompInfo ( org.bouncycastle.math.ec.ECPoint point , java.lang.String name ) { checkPoint ( point ) ; synchronized ( point ) { java.util.Hashtable table = point.preCompTable ; return table == null ? null : ( ( org.bouncycastle.math.ec.PreCompInfo ) ( table.get ( name ) ) ) ; } }
private native void initNative ( android.bluetooth.BluetoothCodecConfig [ ] codecConfigPriorites ) ;
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsCharCharCharChar args ) { args.out = android.renderscript.cts.CoreMathVerifier.minI8 ( args.inMaxValue , android.renderscript.cts.CoreMathVerifier.maxI8 ( args.inValue , args.inMinValue ) ) ; }
private static native java.lang.String getISO3LanguageNative ( java.lang.String languageTag ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { setSortColumn ( threadCol , SortMode.THREAD ) ; }
public void addMatrix ( android.support.v8.renderscript.Matrix4f v ) { mN.addMatrix ( new android.support.v8.renderscript.Matrix4f ( v.getArray ( ) ) ) ; mPos += ( 4 * 4 ) * 4 ; }
public synchronized double getMin ( ) { return min ; }
public void test_Shift_JIS_replacement_character ( ) throws java.lang.Exception { assertDecodes ( java.nio.charset.Charset.forName ( "Shift_JIS" ) , "�" , 252 ) ; assertEncodes ( java.nio.charset.Charset.forName ( "Shift_JIS" ) , "�" , 252 ) ; }
public void setDecimalPatternMatchRequired ( java.lang.String value ) { decimalPatternMatchRequired = java.lang.Integer.valueOf ( value ) ; }
boolean setAttribute ( java.lang.String uri , java.lang.String localName , java.lang.String value ) ;
public boolean canBeVirtual ( ) { return ( ! ( isStatic ( ) ) ) && ( ! ( isPrivate ( ) ) ) ; }
public void scheduleActivityConfigurationChanged ( android.os.IBinder token ) { sendMessage ( android.app.ActivityThread.H.ACTIVITY_CONFIGURATION_CHANGED , token ) ; }
static int nativeGetPixel ( long nativeBitmap , int x , int y , boolean isPremultiplied ) { android.graphics.Bitmap_Delegate delegate = android.graphics.Bitmap_Delegate.sManager.getDelegate ( nativeBitmap ) ; if ( delegate == null ) { return 0 ; } return delegate.mImage.getRGB ( x , y ) ; }
public void test_startAudioSource ( ) throws java.lang.Exception { assertTrue ( android.security.cts.AudioPolicyBinderTest.native_test_startAudioSource ( ) ) ; }
public void handleNitzReceived ( com.android.internal.telephony.util.TimeStampedValue < com.android.internal.telephony.NitzData > nitzSignal ) { handleTimeZoneFromNitz ( nitzSignal ) ; handleTimeFromNitz ( nitzSignal ) ; }
public void testConstructor_NullEndDate_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , "RSA" , 1024 , null , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , android.security.KeyPairGeneratorSpecTest.SERIAL_1 , android.security.KeyPairGeneratorSpecTest.NOW , null , 0 ) ; fail ( "Should throw IllegalArgumentException when keystoreAlias is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public java.lang.String telephonyGetNetworkType ( ) { com.googlecode.android_scripting.Log.d ( ( "sl4a:getNetworkType() is deprecated!" + ( "Please use getVoiceNetworkType()" + " or getDataNetworkTpe()" ) ) ) ; return telephonyGetNetworkTypeForSubscription ( android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
public com.google.common.collect.Table.Cell < R , C , V > get ( int index ) { return getCell ( index ) ; }
public abstract java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getParameterAnnotations ( int index ) ;
public com.android.sdklib.internal.avd.AvdInfo [ ] getAllAvds ( ) { synchronized ( mAllAvdList ) { return mAllAvdList.toArray ( new com.android.sdklib.internal.avd.AvdInfo [ mAllAvdList.size ( ) ] ) ; } }
public void get_RSA_public_params_NullArgument ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto.get_RSA_public_params ( null ) ; }
public java.lang.Class < ? > [ ] getExceptionTypes ( ) { if ( getDeclaringClass ( ) . isProxy ( ) ) { return getExceptionTypesNative ( ) ; } else { return libcore.reflect.AnnotationAccess.getExceptions ( this ) ; } }
public java.util.Map.Entry < K , V > higherEntry ( K key ) { return getNearEntry ( key , java.util.concurrent.ConcurrentSkipListMap.GT ) ; }
public native boolean getBoolean ( java.lang.Object obj , long offset ) ;
private void riljLog ( java.lang.String msg ) { android.telephony.Rlog.d ( com.android.internal.telephony.RIL.RILJ_LOG_TAG , ( msg + ( ( mInstanceId ) != null ? ( " [SUB" + ( mInstanceId ) ) + "]" : "" ) ) ) ; }
public void loadLibrary ( java.lang.String nickname ) { loadLibrary ( nickname , dalvik.system.VMStack.getCallingClassLoader ( ) ) ; }
void process ( com.google.currysrc.api.process.Context context , org.eclipse.jdt.core.dom.CompilationUnit cu ) ;
public void test_EmptyMap_merge ( ) { try { java.util.Collections.emptyMap ( ) . merge ( 1 , 5.0 , ( k , v ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void setAllVisitors ( com.android.jack.dx.io.CodeReader.Visitor visitor ) { fallbackVisitor = visitor ; stringVisitor = visitor ; typeVisitor = visitor ; fieldVisitor = visitor ; methodVisitor = visitor ; dualConstantVisitor = visitor ; }
public static int $noinline$intToDoubleToInt ( int value ) { return ( ( int ) ( ( double ) ( value ) ) ) ; }
private void stopScan ( ) { if ( ( mLatch ) != null ) { mLatch.countDown ( ) ; } mConditionStopped.open ( ) ; }
public static native int nativeForkAndSpecialize ( int uid , int gid , int [ ] gids , int debugFlags , int [ ] [ ] rlimits , java.lang.String seInfo , java.lang.String niceName ) ;
public java.io.File getRootDirPath ( ) { if ( ( myRootDir ) == null ) { com.intellij.openapi.vfs.VirtualFile found = com.intellij.openapi.vfs.VfsUtil.findFileByIoFile ( myRootDirPath , true ) ; assert found != null ; myRootDir = found ; } return myRootDirPath ; }
public org.objectweb.asm.AnnotationVisitor visitAnnotation ( java.lang.String name , java.lang.String desc ) { return new com.android.build.gradle.tasks.ResourceUsageAnalyzer.UsageVisitor.AnnotationUsageVisitor ( ) ; }
protected com.android.builder.resources.ResourceFile createFileAndItems ( java.io.File file , com.android.utils.ILogger logger ) throws java.io.IOException { com.android.builder.resources.ResourceSet.FolderData folderData = com.android.builder.resources.ResourceSet.getFolderData ( file.getParentFile ( ) ) ; return createResourceFile ( file , folderData , logger ) ; }
public void onNotify ( java.lang.String address , int handle , byte [ ] value ) throws android.os.RemoteException { }
public boolean p2pStopFind ( ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.stopFind ( ) ; } else { return doBooleanCommand ( "P2P_STOP_FIND" ) ; } }
public void createNativeBuildTypes ( org.gradle.nativeplatform.BuildTypeContainer nativeBuildTypes , @ org.gradle.model.Path ( value = "android.buildTypes" ) org.gradle.model.ModelMap < com.android.build.gradle.managed.BuildType > androidBuildTypes ) { for ( com.android.build.gradle.managed.BuildType buildType : androidBuildTypes.values ( ) ) { nativeBuildTypes.maybeCreate ( buildType.getName ( ) ) ; } }
public void enter ( ) { turnOnMasterTetherSettings ( ) ; simChange.startListening ( ) ; mUpstreamNetworkMonitor.start ( ) ; mTryCell = true ; chooseUpstreamType ( mTryCell ) ; mTryCell = ! ( mTryCell ) ; }
private void inlinedForNull ( java.lang.Iterable it ) { if ( it != null ) { if ( Main.doThrow ) { throw new java.lang.Error ( "" ) ; } } }
public void onAttachmentChanged ( ) { runOnUiThread ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { drawBottomPanel ( ) ; updateSendButtonState ( ) ; drawTopPanel ( isSubjectEditorVisible ( ) ) ; } } ) ; }
public native void freeMemory ( long address ) ;
, name = "_add" , returnType = int . class , argumentTypes = { int . class , int . class } ) private static int add ( int a , int b ) { assertNotReached ( ) ; return - 1 ; }
public static double copySign ( double magnitude , double sign ) { return java.lang.Math.copySign ( magnitude , ( java.lang.Double.isNaN ( sign ) ? 1.0 : sign ) ) ; }
public void testGetAvailableLocales ( ) { assertTrue ( ( ( java.text.Collator.getAvailableLocales ( ) . length ) > 0 ) ) ; }
public final java.lang.String readString ( ) { return android.os.Parcel.nativeReadString ( mNativePtr ) ; }
public java.lang.reflect.Type [ ] getGenericExceptionTypes ( ) { initGenericTypes ( ) ; return libcore.reflect.Types.getClonedTypeArray ( genericExceptionTypes ) ; }
public void run ( ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNew = uiDoc.appendNewUiChild ( viewDesc ) ; uiNew.setAttributeValue ( LayoutConstants.ANDROID_NS_PREFIX , XmlnsAttributeDescriptor.XMLNS_URI , SdkConstants.NS_RESOURCES , true ) ; com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.setDefaultLayoutAttributes ( uiNew , false ) ; uiNew.createXmlNode ( ) ; }
public com.android.io.IAbstractFolder getParentFolder ( ) { java.lang.String p = this . getParent ( ) ; if ( p == null ) { return null ; } return new com.android.io.FolderWrapper ( p ) ; }
public static void computeAtan2 ( android.renderscript.cts.TestAtan2.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.atan2 ( args.inY , args.inX ) , 6 , 128 ) ; }
private int getTimeComponent ( org.bouncycastle.asn1.ASN1Integer time ) { if ( time != null ) { return time.getValue ( ) . intValue ( ) ; } return 0 ; }
public void onStopRtt ( ) { }
private android.net.IpSecManager.SecurityParameterIndex allocateSpi ( java.net.InetAddress inetAddr ) { try { return mIpSecManager.allocateSecurityParameterIndex ( inetAddr ) ; } catch ( android.net.IpSecManager.ResourceUnavailableException e ) { com.googlecode.android_scripting.Log.e ( ( "IpSec: Reserve SPI failure " + ( e.toString ( ) ) ) ) ; } return null ; }
public com.android.ide.common.rendering.api.Result removeChild ( java.lang.Object childView , com.android.ide.common.rendering.api.IAnimationListener listener ) { return Status.NOT_IMPLEMENTED.createResult ( ) ; }
public static java.lang.String getPackageName ( ) { synchronized ( android.webkit.WebViewZygote.sLock ) { return android.webkit.WebViewZygote.sPackage.packageName ; } }
public void callSessionHandover ( com.android.ims.internal.IImsCallSession i , int srcAccessTech , int targetAccessTech , android.telephony.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mNewListener.callSessionHandover ( srcAccessTech , targetAccessTech , reasonInfo ) ; }
public void test_SingletonMap_computeIfAbsent ( ) { try { java.util.Collections.singletonMap ( 1 , 11.0 ) . computeIfAbsent ( 1 , ( k ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public static boolean callsSuper ( @ com.android.annotations.NonNull com.intellij.psi.PsiMethod method , @ com.android.annotations.NonNull com.intellij.psi.PsiMethod superMethod ) { com.android.tools.lint.checks.CallSuperDetector.SuperCallVisitor visitor = new com.android.tools.lint.checks.CallSuperDetector.SuperCallVisitor ( superMethod ) ; method.accept ( visitor ) ; return visitor.mCallsSuper ; }
public final com.android.tools.perflib.heap.Instance getInstance ( long id ) { return mInstances.get ( id ) ; }
public static double ulp ( double d ) { return java.lang.Math.ulp ( d ) ; }
public android.bluetooth.BluetoothDevice getActiveDevice ( ) { com.android.bluetooth.hfp.HeadsetService service = getService ( ) ; if ( service == null ) { return null ; } return service.getActiveDevice ( ) ; }
native void rsnAllocationData3D ( long con , long dstAlloc , int dstXoff , int dstYoff , int dstZoff , int dstMip , int width , int height , int depth , long srcAlloc , int srcXoff , int srcYoff , int srcZoff , int srcMip ) ;
public boolean isFair ( ) { return fair ; }
private void configureStageUninstallExpectation ( int resultCode ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( resultCode ) . when ( mMockTimeZoneDistroInstaller ) . stageUninstall ( ) ; }
public static void startMethodTracing ( java.lang.String traceFileName , int bufferSize , int flags , boolean samplingEnabled , int intervalUs ) { dalvik.system.VMDebug.startMethodTracingFilename ( traceFileName , dalvik.system.VMDebug.checkBufferSize ( bufferSize ) , flags , samplingEnabled , intervalUs ) ; }
public com.android.builder.AndroidBuilder setBuildingLibrary ( boolean library ) { mLibrary = library ; return this ; }
void merge ( android.net.metrics.NetworkMetrics.Summary that ) { dnsLatencies.merge ( that.dnsLatencies ) ; dnsErrorRate.merge ( that.dnsErrorRate ) ; connectLatencies.merge ( that.connectLatencies ) ; connectErrorRate.merge ( that.connectErrorRate ) ; tcpLossRate.merge ( that.tcpLossRate ) ; }
public com.android.jack.library.OutputJackLibrary getOutputJackLibrary ( ) { return outputJackLibrary ; }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } }
public void execute ( org.gradle.api.Task task ) { if ( ! ( proguardOut.mkdirs ( ) ) ) { throw new java.lang.RuntimeException ( ( "Cannot create proguard output folder " + proguardOut ) ) ; } }
public void testWarningOnViewSubclass ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/ClickableViewAccessibilityTest.java:84: Warning: test/pkg/ClickableViewAccessibilityTest$ViewSubclass#performClick should call super#performClick [ClickableViewAccessibility]\n" + ( ( " public boolean performClick() {\n" + " ~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/ClickableViewAccessibilityTest.java.txt=>src/test/pkg/ClickableViewAccessibilityTest.java" , "bytecode/ClickableViewAccessibilityTest.class.data=>bin/classes/test/pkg/ClickableViewAccessibilityTest.class" , ( "bytecode/ClickableViewAccessibilityTest$ValidView.class.data=>" + "bin/classes/test/pkg/ClickableViewAccessibilityTest$ValidView.class" ) , ( "bytecode/ClickableViewAccessibilityTest$ViewSubclass.class.data=>" + "bin/classes/test/pkg/ClickableViewAccessibilityTest$ViewSubclass.class" ) ) ) ; }
public void dispose ( ) { mUpdaterData.removeListener ( this ) ; mDeviceManager.unregisterListener ( this ) ; super . dispose ( ) ; }
public android.net.wifi.aware.ConfigRequest build ( ) { if ( ( mClusterLow ) > ( mClusterHigh ) ) { throw new java.lang.IllegalArgumentException ( "Invalid argument combination - must have Cluster Low <= Cluster High" ) ; } return new android.net.wifi.aware.ConfigRequest ( mSupport5gBand , mMasterPreference , mClusterLow , mClusterHigh , mDiscoveryWindowInterval ) ; }
public void bridgeChanged ( com.android.ddmlib.AndroidDebugBridge bridge ) { director.acquireBridge ( bridge ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.Intent intent ) { return getCarrierPackageNamesForIntentAndPhone ( intent , getPhoneId ( ) ) ; }
public java.lang.Boolean call ( ) { return dispatchKeyEvent ( event ) ; }
public void setIsConferenced ( java.lang.String callId , java.lang.String conferenceCallId , android.telecom.Logging.Session.Info sessionInfo ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = callId ; args.arg2 = conferenceCallId ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_SET_IS_CONFERENCED , args ) . sendToTarget ( ) ; }
public com.google.common.collect.ImmutableList < com.google.devtools.common.options.OptionDefinition > getOptionDefinitionsFromClass ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass ) { return allOptionsFields.get ( optionsClass ) ; }
public static < T > org.hamcrest.Matcher < T > instanceOf ( java.lang.Class < ? > type ) { return ( ( org.hamcrest.Matcher < T > ) ( new org.hamcrest.core.IsInstanceOf ( type ) ) ) ; }
private void testInterruptReader ( final java.io.PipedReader reader ) throws java.lang.Exception { java.lang.Thread thread = interruptMeLater ( ) ; try { reader.read ( ) ; fail ( ) ; } catch ( java.io.InterruptedIOException expected ) { } finally { libcore.java.io.InterruptedStreamTest.confirmInterrupted ( thread ) ; } }
T transform ( F from ) { return function.apply ( from ) ; }
public void onCreate ( ) { mAuthenticator = new com.android.bluetooth.pbapclient.Authenticator ( this ) ; }
public int getWordCount ( ) { return size ; }
public byte [ ] onAuthenticationResponse ( byte [ ] userName ) { android.util.Log.v ( com.android.bluetooth.pbapclient.BluetoothPbapObexAuthenticator.TAG , ( "onAuthenticationResponse: " + userName ) ) ; return null ; }
public int getMultipathPreference ( android.net.Network network ) { try { return mService.getMultipathPreference ( network ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void testMultipleIntentFilter_sameKey_removalAll ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application>\n" ) + " <activity android:name=\"activityOne\">\n" ) + " <intent-filter tools:node=\"removeAll\"/>\n" ) + " </activity>\n" ) + " </application>" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application>\n" ) + " <activity android:name=\"activityOne\">\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.SEARCH\" />\n" ) + " </intent-filter>\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.VIEW\"/>\n" ) + " <category android:name=\"android.intent.category.DEFAULT\"/>\n" ) + " <category android:name=\"android.intent.category.BROWSABLE\"/>\n" ) + " <data android:scheme=\"https\"/>\n" ) + " <data android:host=\"www.bar.com\"/>\n" ) + " </intent-filter>\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.VIEW\"/>\n" ) + " <category android:name=\"android.intent.category.DEFAULT\"/>\n" ) + " <category android:name=\"android.intent.category.BROWSABLE\"/>\n" ) + " <data android:scheme=\"https\"/>\n" ) + " <data android:host=\"www.foo.com\"/>\n" ) + " </intent-filter>\n" ) + " </activity>" ) + " </application>" ) + " <uses-sdk android:targetSdkVersion=\"3\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlLibraryFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertTrue ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.XmlDocument xmlDocument = mergedDocument.get ( ) ; java.util.List < com.android.manifmerger.XmlElement > allIntentFilters = com.android.manifmerger.XmlDocumentTest.getAllElementsOfType ( xmlDocument , ManifestModel.NodeTypes.INTENT_FILTER ) ; assertEquals ( 1 , allIntentFilters.size ( ) ) ; }
protected boolean hasPublicConstructor ( java.lang.Class < ? > testClass ) { try { junit.framework.TestSuite.getTestConstructor ( ( ( java.lang.Class < ? extends junit.framework.TestCase > ) ( testClass ) ) ) ; } catch ( java.lang.NoSuchMethodException e ) { return false ; } return true ; }
public static native long EC_KEY_generate_key ( org.conscrypt.NativeRef.EC_GROUP groupRef ) ;
public java.util.Collection < com.android.build.gradle.integration.common.fixture.app.TestSourceFile > getAllSourceFiles ( ) { return sourceFiles.values ( ) ; }
public static java.net.InetAddress getByNameOnNet ( java.lang.String host , int netId ) throws java.net.UnknownHostException { return java.net.InetAddress.impl.lookupAllHostAddr ( host , netId ) [ 0 ] ; }
public com.android.sdklib.SdkManager getNewSdkManager ( @ com.android.annotations.NonNull com.android.utils.ILogger log ) { return com.android.sdklib.SdkManager.createManager ( getSdkOsLocation ( ) , log ) ; }
public final java.lang.String getDescription ( int columnIdx ) { return getDataView ( ) . getDataNames ( ) [ columnIdx ] ; }
public java.lang.String getClassName ( ) { return mName ; }
public void testParse_empty ( ) { mMockListener.testRunStarted ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.RUN_NAME , 0 ) ; mMockListener.testRunFailed ( InstrumentationResultParser.NO_TEST_RESULTS_MSG ) ; mMockListener.testRunEnded ( 0 , java.util.Collections.EMPTY_MAP ) ; injectAndVerifyTestString ( "" ) ; }
public void testToFromBytesRoundTrip ( ) throws java.lang.Exception { libcore.tzdata.shared2.DistroVersion distroVersion = new libcore.tzdata.shared2.DistroVersion ( 1 , 2 , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , 3 ) ; assertEquals ( distroVersion , libcore.tzdata.shared2.DistroVersion.fromBytes ( distroVersion.toBytes ( ) ) ) ; }
static void expect ( java.lang.String rules , java.lang.String source , java.lang.String expectedResult , android.icu.text.Transliterator.Position pos ) { android.icu.text.Transliterator t = android.icu.text.Transliterator.createFromRules ( "<ID>" , rules , Transliterator.FORWARD ) ; android.icu.dev.test.translit.TransliteratorTest.expect ( t , source , expectedResult , pos ) ; }
private com.android.jack.test.dex.DexValidator < com.android.jack.test.dex.DexMethod > dalvik ( @ javax.annotation.Nonnull java.lang.String test , @ javax.annotation.Nonnull java.lang.String expected ) { return usingLegacyCompiler ( ) ? new com.android.jack.test.dex.DexNoOpValidator < com.android.jack.test.dex.DexMethod > ( ) : new com.android.jack.test.dex.DexMethodDalvikCodeValidator ( resource ( test , expected ) ) ; }
public java.lang.String getLegacyValue ( ) { if ( ( this ) != ( com.android.resources.Density.NODPI ) ) { return java.lang.String.format ( "%1$ddpi" , getDpiValue ( ) ) ; } return "" ; }
public void setup ( ) { put ( "Cipher.FOO/FOO/FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; }
public void test4 ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/wrongparams5.xml:8: Warning: Invalid layout param \'layout_alignParentTop\' (included from within a LinearLayout in layout/wrongparams6.xml) [ObsoleteLayoutParam]\n" + ( ( ( ( ( ( ( ( ( ( ( " android:layout_alignParentTop=\"true\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/wrongparams5.xml:15: Warning: Invalid layout param \'layout_alignParentLeft\' (included from within a LinearLayout in layout/wrongparams6.xml) [ObsoleteLayoutParam]\n" ) + " android:layout_alignParentLeft=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/wrongparams6.xml:16: Warning: Invalid layout param in a LinearLayout: layout_alignStart [ObsoleteLayoutParam]\n" ) + " android:layout_alignStart=\"@+id/include1\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/wrongparams6.xml:17: Warning: Invalid layout param in a LinearLayout: layout_toEndOf [ObsoleteLayoutParam]\n" ) + " android:layout_toEndOf=\"@+id/include1\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 4 warnings\n" ) ) , lintProject ( "res/layout/wrongparams5.xml" , "res/layout/wrongparams6.xml" ) ) ; }
private static < K , V > com.google.common.collect.ImmutableMap < K , V > copyOfEnumMapUnsafe ( java.util.Map < ? extends K , ? extends V > map ) { return com.google.common.collect.ImmutableMap.copyOfEnumMap ( ( ( java.util.EnumMap ) ( map ) ) ) ; }
public synchronized void onPlaybackStateChanged ( android.media.session.PlaybackState state ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) { android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "onPlaybackStateChanged: state " + ( state.toString ( ) ) ) ) ; } updateCurrentMediaState ( ) ; }
public static int IntSubtraction ( ) { int a ; int b ; int c ; a = Main.$inline$int ( 6 ) ; b = Main.$inline$int ( 2 ) ; c = a - b ; return c ; }
public static java.lang.String getFolderSegment ( int version ) { if ( version != ( com.android.ide.common.resources.configuration.VersionQualifier.DEFAULT_VERSION ) ) { return java.lang.String.format ( "v%1$d" , version ) ; } return "" ; }
public void getDataCallList ( int slotId , android.telephony.data.IDataServiceCallback callback ) { if ( callback == null ) { loge ( "getDataCallList: callback is null" ) ; return ; } mHandler.obtainMessage ( android.telephony.data.DataService.DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST , slotId , 0 , callback ) . sendToTarget ( ) ; }
public boolean isAvailable ( ) { try { return mService.isUsageEnabled ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public static java.lang.String getVersion ( ) { return libcore.util.ZoneInfoDB.DATA.getVersion ( ) ; }
synchronized void nScriptSetVarObj ( long id , int slot , long val , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetVarObj ( curCon , id , slot , val , mUseInc ) ; }
public static com.google.common.primitives.UnsignedLong fromLongBits ( long bits ) { return new com.google.common.primitives.UnsignedLong ( bits ) ; }
public com.android.sdkuilib.internal.repository.core.PkgCategory createCategory ( java.lang.Object catKey ) { assert catKey instanceof com.android.sdklib.internal.repository.sources.SdkSource ; com.android.sdkuilib.internal.repository.core.PkgCategory cat = new com.android.sdkuilib.internal.repository.core.PkgCategorySource ( ( ( com.android.sdklib.internal.repository.sources.SdkSource ) ( catKey ) ) , mUpdaterData ) ; return cat ; }
public void testNotification3 ( ) throws java.lang.Exception { checkGraphic ( "ic_stat_1" , 11 , "notification-v11+" , 3 ) ; }
public static void fail ( ) throws java.lang.Throwable { throw new java.lang.Error ( "fail" ) ; }
public static long getLastEmergencyCallTimeMillis ( android.content.Context context ) { return com.android.dialer.storage.StorageComponent.get ( context ) . unencryptedSharedPrefs ( ) . getLong ( com.android.dialer.blocking.FilteredNumbersUtil.LAST_EMERGENCY_CALL_MS_PREF_KEY , 0 ) ; }
public void withInputType_ShouldNotCrashIf_InputTypeIsNotRecognized ( ) { android.widget.EditText editText = new android.widget.EditText ( context ) ; editText.setInputType ( InputType.TYPE_CLASS_NUMBER ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.matcher.ViewMatchers.withInputType ( android.support.test.espresso.matcher.ViewMatchersTest.UNRECOGNIZED_INPUT_TYPE ) . matches ( editText ) ) ; }
public void testSpecificDefaultValue ( ) { assertEquals ( 4.0 , encoder.maxBytesPerChar ( ) , 0.0 ) ; assertEquals ( 2.5 , encoder.averageBytesPerChar ( ) , 0.0 ) ; }
public boolean unlockUser ( int userId , byte [ ] token , byte [ ] secret , android.os.IProgressListener listener ) { return mUserController.unlockUser ( userId , token , secret , listener ) ; }
public com.android.utils.HtmlBuilder endList ( ) { if ( com.android.utils.HtmlBuilder.USE_DD_LISTS ) { mStringBuilder.append ( "</DL>" ) ; } else { mStringBuilder.append ( "</UL>" ) ; } return this ; }
static void someStaticMethod ( java.lang.Iterable < ? > it ) { it.iterator ( ) ; }
java.util.Set < E > createElementSet ( ) { return com.google.common.collect.Sets.filter ( unfiltered.elementSet ( ) , predicate ) ; }
public void onConnectionEvent ( java.lang.String callId , java.lang.String event , android.os.Bundle extras , android.telecom.Logging.Session.Info sessionInfo ) { if ( mConnectionById.containsKey ( callId ) ) { findConnectionForAction ( callId , "onConnectionEvent" ) . onConnectionEvent ( event , extras ) ; } }
public com.android.build.gradle.integration.common.fixture.GradleTestProject create ( ) { return new com.android.build.gradle.integration.common.fixture.GradleTestProject ( name , testProject , experimentalMode , ( useExperimentalGradleVersion ? com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_EXP_TEST_VERSION : com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_TEST_VERSION ) , captureStdOut , captureStdErr , heapSize ) ; }
public void testConnectsToEmergencyNumberLongNumber_CL ( ) { assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "1313" , RegionCode.CL ) ) ; assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "1330" , RegionCode.CL ) ) ; }
public void binderDied ( ) { onAppCallbackDied ( uid , downloadRequest.getSubscriptionId ( ) ) ; mDownloadCallbackBinderMap.remove ( callback.asBinder ( ) ) ; mDownloadCallbackDeathRecipients.remove ( callback.asBinder ( ) ) ; }
private void writeBytes ( byte [ ] b , int off , int len ) throws java.io.IOException { ioTracker.trackIo ( len , IoTracker.Mode.WRITE ) ; libcore.io.IoBridge.write ( fd , b , off , len ) ; maybeSync ( ) ; }
public void setConsumerProguardFiles ( @ com.android.annotations.NonNull java.lang.Iterable < ? > proguardFileIterable ) { getConsumerProguardFiles ( ) . clear ( ) ; for ( java.lang.Object proguardFile : proguardFileIterable ) { getConsumerProguardFiles ( ) . add ( project.file ( proguardFile ) ) ; } }
private void verifyNoAudioStateIntent ( int timeoutMs ) { android.content.Intent intent = com.android.bluetooth.TestUtils.waitForNoIntent ( timeoutMs , mAudioStateChangedQueue ) ; org.junit.Assert.assertNull ( intent ) ; }
public void testGrant_NoKey_Failure ( ) throws java.lang.Exception { assertTrue ( "Should be able to unlock keystore for test" , mKeyStore.onUserPasswordChanged ( android.security.KeyStoreTest.TEST_PASSWD ) ) ; assertFalse ( "Should not be able to grant without first initializing the keystore" , mKeyStore.grant ( android.security.KeyStoreTest.TEST_KEYNAME , 0 ) ) ; }
public boolean getSmsReceiveCapableForPhone ( int phoneId , boolean defaultValue ) { if ( android.telephony.SubscriptionManager.isValidPhoneId ( phoneId ) ) { return java.lang.Boolean.parseBoolean ( android.telephony.TelephonyManager.getTelephonyProperty ( phoneId , TelephonyProperties.PROPERTY_SMS_RECEIVE , java.lang.String.valueOf ( defaultValue ) ) ) ; } return defaultValue ; }
private static void checkCallbackNotNull ( android.net.ConnectivityManager.NetworkCallback callback ) { com.android.internal.util.Preconditions.checkNotNull ( callback , "null NetworkCallback" ) ; }
private native void gattServerAddServiceNative ( int server_if , java.util.List < com.android.bluetooth.gatt.GattDbElement > service ) ;
public void run ( ) { for ( int i = 0 ; i < 1000 ; i ++ ) { if ( isDoYield ) java.lang.Thread.yield ( ) ; ( counter ) ++ ; } }
private void writeDescriptor ( java.util.UUID uid , java.lang.String writeValue ) { android.bluetooth.BluetoothGattDescriptor descriptor = getDescriptor ( uid ) ; if ( descriptor != null ) { descriptor.setValue ( writeValue.getBytes ( ) ) ; mBluetoothGatt.writeDescriptor ( descriptor ) ; } }
protected void saveCurrentTreeState ( @ org.jetbrains.annotations.Nullable com.intellij.xdebugger.frame.XStackFrame stackFrame ) { disposeTreeRestorer ( ) ; removeSelectionListener ( ) ; myFrameEqualityObject = ( stackFrame != null ) ? stackFrame.getEqualityObject ( ) : null ; myTreeState = com.intellij.xdebugger.impl.ui.tree.XDebuggerTreeState.saveState ( myDebuggerTreePanel.getTree ( ) ) ; }
public com.ibm.icu.impl.ICUResourceBundle getParent ( ) { return ( ( com.ibm.icu.impl.ICUResourceBundle ) ( parent ) ) ; }
public void execute ( com.android.chimpchat.core.IChimpDevice device ) throws java.lang.Exception { device.touch ( x , y , com.android.chimpchat.core.TouchPressType.fromIdentifier ( direction ) ) ; }
public void setUp ( ) throws java.lang.Exception { art.Main.bindAgentJNI ( "android/jvmti/cts/JvmtiTaggingTest" , getClass ( ) . getClassLoader ( ) ) ; }
public void setProcessorPath ( @ javax.annotation.Nonnull java.util.List < java.io.File > processorPath ) { options.processorPath = com.google.common.base.Joiner.on ( java.io.File.pathSeparatorChar ) . join ( processorPath ) ; }
public java.lang.reflect.Type getGenericSuperclass ( ) { libcore.reflect.GenericSignatureParser parser = new libcore.reflect.GenericSignatureParser ( getClassLoader ( ) ) ; parser.parseForClass ( this , getSignatureAttribute ( ) ) ; return libcore.reflect.Types.getType ( parser.superclassType ) ; }
public void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; getWindow ( ) . addFlags ( WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD ) ; android.util.Log.i ( com.android.cts.launcherapps.simpleapp.SimpleActivity.TAG , ( "Created for user " + ( android.os.Process.myUserHandle ( ) ) ) ) ; }
public java.lang.String getFolderSegment ( ) { return com.android.ide.common.resources.configuration.RegionQualifier.getFolderSegment ( mValue ) ; }
public void adjustSuggestedStreamVolume ( int direction , int suggestedStreamType , int flags , java.lang.String callingPackage ) { adjustSuggestedStreamVolume ( direction , suggestedStreamType , flags , callingPackage , android.os.Binder.getCallingUid ( ) ) ; }
public java.io.File getFinalResourcesDir ( ) { return com.google.common.base.Objects.firstNonNull ( resourceOutputDir , getDefaultMergeResourcesOutputDir ( ) ) ; }
private void sendDisableMsg ( java.lang.String packageName ) { mHandler.sendMessage ( mHandler.obtainMessage ( com.android.server.BluetoothManagerService.MESSAGE_DISABLE ) ) ; addActiveLog ( packageName , false ) ; }
static boolean isNewline ( char c ) { return ( c == '\n' ) || ( c == '\r' ) ; }
private void combineSpecifiers ( android.net.NetworkCapabilities nc ) { if ( ( ( mNetworkSpecifier ) != null ) && ( ! ( mNetworkSpecifier.equals ( nc.mNetworkSpecifier ) ) ) ) { throw new java.lang.IllegalStateException ( "Can't combine two networkSpecifiers" ) ; } setNetworkSpecifier ( nc.mNetworkSpecifier ) ; }
public boolean isRadioOnForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "isRadioOnForSubscriber" ) ) ) { return false ; } return isRadioOnForSubscriber ( subId ) ; }
public void tearDown ( ) throws java.lang.Exception { mDevice.unfreezeRotation ( ) ; mDevice.pressBack ( ) ; mDevice.pressHome ( ) ; }
public void a_attachInvalidPath ( ) throws java.lang.Exception { android.os.Debug.attachJvmtiAgent ( ( ( agentString ) + ".invalid" ) , null , classLoader ) ; }
protected java.util.zip.ZipOutputStream createZipOutputStream ( java.io.OutputStream wrapped ) { return new java.util.zip.ZipOutputStream ( wrapped ) ; }
public int del_key ( java.lang.String name , int uid ) throws android.os.RemoteException ;
public void respondToRttRequest ( boolean accept , int rttRequestId ) { com.android.dialer.logging.Logger.get ( context ) . logCallImpression ( ( accept ? com.android.dialer.logging.ContactLookupResult.Type.RTT_MID_CALL_ACCEPTED : com.android.dialer.logging.ContactLookupResult.Type.RTT_MID_CALL_REJECTED ) , getUniqueCallId ( ) , getTimeAddedMs ( ) ) ; getTelecomCall ( ) . respondToRttRequest ( rttRequestId , accept ) ; }
public com.android.builder.internal.NdkConfig getNdkConfig ( ) { return null ; }
public com.android.jack.jayce.v0004.NNode newNode ( ) throws com.android.jack.jayce.v0004.io.InvalidTokenException { throw new com.android.jack.jayce.v0004.io.InvalidTokenException ( ( "No node corresponding to token " + ( this . toString ( ) ) ) ) ; }
public void testDecodeObjectTypeID ( ) throws java.io.IOException { java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream ( TypeA.ID.getBytes ( ) ) ; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder ( input ) ; com.android.tools.rpclib.binary.BinaryID idFromDecoder = new com.android.tools.rpclib.binary.BinaryID ( d ) ; assertEquals ( TypeA.ID , idFromDecoder ) ; }
public void switchUserStore ( com.android.server.wifi.WifiConfigStore.StoreFile userStore ) { stopBufferedWriteAlarm ( ) ; mUserStore = userStore ; }
private java.lang.String getName ( org.w3c.dom.Node node ) { org.w3c.dom.Attr attribute = ( ( org.w3c.dom.Attr ) ( node.getAttributes ( ) . getNamedItemNS ( null , com.android.SdkConstants.ATTR_NAME ) ) ) ; if ( attribute != null ) { return attribute.getValue ( ) ; } return null ; }
public abstract com.google.common.base.Optional < com.android.contacts.common.widget.SelectPhoneAccountDialogOptions.Builder > getDialogOptionsBuilder ( ) ;
private void running ( ) { com.google.common.util.concurrent.AbstractService.RUNNING_CALLBACK.enqueueOn ( listeners ) ; }
synchronized long nScriptFieldIDCreate ( long sid , int slot , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } return rsnScriptFieldIDCreate ( curCon , sid , slot , mUseInc ) ; }
public void unregisterForCdmaOtaStatusChange ( android.os.Handler h ) { mCi.unregisterForCdmaOtaProvision ( h ) ; }
public void loggedRun ( ) { createConnection ( connectionManagerPhoneAccount , id , request , isIncoming , isUnknown ) ; }
private final native int readAsset ( long asset , byte [ ] b , int off , int len ) ;
protected void engineSetParameter ( java.lang.String arg0 , java.lang.Object arg1 ) throws java.security.InvalidParameterException { getSpi ( ) . engineSetParameter ( arg0 , arg1 ) ; }
public boolean select ( org.eclipse.jface.viewers.Viewer viewer , java.lang.Object parentElement , java.lang.Object element ) { return filterViewerItem ( element ) ; }
public void test_U8_4_SCALE05_20_inRectangle ( ) { testResize ( inX , inY , Element.DataType.UNSIGNED_8 , 4 , 0.5F , 2.0F ) ; }
public static com.android.hierarchyviewerlib.models.DeviceSelectionModel getModel ( ) { if ( ( com.android.hierarchyviewerlib.models.DeviceSelectionModel.sModel ) == null ) { com.android.hierarchyviewerlib.models.DeviceSelectionModel.sModel = new com.android.hierarchyviewerlib.models.DeviceSelectionModel ( ) ; } return com.android.hierarchyviewerlib.models.DeviceSelectionModel.sModel ; }
private void handleSetVPMessage ( ) { mPhone.getEnhancedVoicePrivacy ( android.os.Message.obtain ( mQueryVoicePrivacyComplete , com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED ) ) ; android.provider.Settings.System.putInt ( mPhone.getContext ( ) . getContentResolver ( ) , android.provider.Settings.System.ENHANCED_VOICE_PRIVACY_ENABLED , com.android.phone.CallFeaturesSetting.preferredVPMode ) ; }
native void rsnScriptSetVarVE ( long con , long id , int slot , byte [ ] val , long e , int [ ] dims , boolean mUseInc ) ;
private void readDescriptor ( java.util.UUID uuid ) { android.bluetooth.BluetoothGattDescriptor descriptor = getDescriptor ( uuid ) ; if ( descriptor != null ) { mBluetoothGatt.readDescriptor ( descriptor ) ; } }
private static native long nativeCreate ( long nativeOuterpe , long nativeInnerpe ) ;
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField x ) { print ( com.android.jack.ir.ast.JModifier.getStringFieldModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; return false ; }
public com.intellij.openapi.externalSystem.model.DataNode < com.intellij.openapi.externalSystem.model.project.ProjectData > produce ( ) { return myDelegate.resolveProjectInfo ( id , projectPath , isPreviewMode , settings , getNotificationListener ( ) ) ; }
public static native java.lang.String mapLibraryName ( java.lang.String nickname ) ;
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { copy1DRangeFromUnchecked ( off , count , ( ( java.lang.Object ) ( d ) ) , Element.DataType.SIGNED_8 , d.length ) ; }
public void setMaxTimeToOutputResponse ( long maxTimeToOutputResponse , java.util.concurrent.TimeUnit maxTimeUnits ) { mMaxTimeToOutputResponse = maxTimeToOutputResponse ; mMaxTimeUnits = maxTimeUnits ; }
public final void testGetAddonHashString ( ) { assertEquals ( "The Vendor Inc.:My Addon:10" , com.android.sdklib.AndroidTargetHash.getAddonHashString ( "The Vendor Inc." , "My Addon" , new com.android.sdklib.AndroidVersion ( 10 , null ) ) ) ; }
public android.os.Bundle updateCredentials ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , java.lang.String s , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { if ( com.android.bluetooth.pbapclient.Authenticator.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; return null ; }
public android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype ( ) { try { return mService.getCurrentInputMethodSubtype ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void visitUnknownAttribute ( proguard.classfile.visitor.Clazz clazz , proguard.classfile.visitor.UnknownAttribute unknownAttribute ) { println ( ( ( ( ( visitorInfo ( unknownAttribute ) ) + " Unknown attribute (" ) + ( unknownAttribute.getAttributeName ( clazz ) ) ) + ")" ) ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setEndTime ( long value ) { bitField0_ |= 512 ; endTime_ = value ; onChanged ( ) ; return this ; }
private void updateSelectAllState ( android.support.v17.leanback.widget.GuidedAction selectAll , boolean select ) { selectAll.setTitle ( ( select ? getString ( R.string.dvr_series_deselect_all ) : getString ( R.string.dvr_series_select_all ) ) ) ; notifyActionChanged ( findActionPositionById ( com.android.tv.dvr.ui.DvrSeriesDeletionFragment.ACTION_ID_SELECT_ALL ) ) ; }
public int indexOf ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlockElement element ) { assert ( element.getBasicBlock ( ) ) == ( this ) ; int index = elements.indexOf ( element ) ; assert index >= 0 ; return index ; }
private com.google.devtools.common.options.OptionsParser.OptionUsageRestrictions optionUsageRestrictions ( ) { com.google.devtools.common.options.Option option = field.getAnnotation ( com.google.devtools.common.options.Option.class ) ; return com.google.devtools.common.options.OptionsParser.documentationLevel ( option ) ; }
public boolean isPossibleShortNumberForRegion ( java.lang.String shortNumber , java.lang.String regionDialingFrom ) { com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( regionDialingFrom ) ; if ( phoneMetadata == null ) { return false ; } return matcherApi.matchesPossibleNumber ( shortNumber , phoneMetadata.generalDesc ) ; }
public com.android.jack.ir.ast.cfg.JBasicBlockElement getLastElement ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public boolean isAnnotationPresent ( java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return libcore.reflect.AnnotationAccess.isDeclaredAnnotationPresent ( this , annotationType ) ; }
public void terminate ( int reason ) { this . terminate ( reason ) ; }
public static java.awt.image.BufferedImage getStencilImage ( java.lang.String relativePath ) throws java.io.IOException { java.io.InputStream is = com.android.assetstudiolib.GraphicGenerator.class . getResourceAsStream ( relativePath ) ; try { return javax.imageio.ImageIO.read ( is ) ; } finally { com.google.common.io.Closeables.closeQuietly ( is ) ; } }
public void addItem ( @ com.android.annotations.NonNull I item ) { item.setSource ( this ) ; mItems.put ( item.getKey ( ) , item ) ; }
public synchronized void listEventsAsProto ( java.io.PrintWriter pw ) { for ( android.net.metrics.DefaultNetworkEvent ev : mEventsLog.toArray ( ) ) { pw.print ( com.android.server.connectivity.IpConnectivityEventBuilder.toProto ( ev ) ) ; } }
public int getDisconnectCause ( ) { if ( ( ( mState ) == ( com.android.services.telephony.common.Call.State.DISCONNECTED ) ) || ( ( mState ) == ( com.android.services.telephony.common.Call.State.IDLE ) ) ) { return mDisconnectCause ; } return android.telephony.DisconnectCause.NOT_DISCONNECTED ; }
private void sendAddDeviceAdminIntent ( ) { android.content.Intent intent = new android.content.Intent ( android.app.admin.DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN ) ; intent.putExtra ( DevicePolicyManager.EXTRA_DEVICE_ADMIN , com.android.cts.verifier.managedprovisioning.DeviceAdminTestReceiver.getReceiverComponentName ( ) ) ; startActivityForResult ( intent , com.android.cts.verifier.admin.ScreenLockTestActivity.ADD_DEVICE_ADMIN_REQUEST_CODE ) ; }
public com.android.ims.internal.IImsConfig getConfigInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getConfigInterface ( mSlotId , mSupportedFeature ) ; } }
public void TestGetSkeleton ( ) { android.icu.text.SpoofChecker sc = new android.icu.text.SpoofChecker.Builder ( ) . setChecks ( SpoofChecker.CONFUSABLE ) . build ( ) ; java.lang.String dest ; dest = sc.getSkeleton ( SpoofChecker.ANY_CASE , lll_Latin_a ) ; assertEquals ( "" , lll_Skel , dest ) ; }
public android.content.Intent registerReceiver ( android.content.BroadcastReceiver receiver , android.content.IntentFilter filter ) { synchronized ( mInterceptors ) { mInterceptors.add ( new com.android.internal.util.test.BroadcastInterceptingContext.BroadcastInterceptor ( receiver , filter ) ) ; } return null ; }
public boolean scan ( java.util.Set < java.lang.Integer > freqs , java.util.Set < java.lang.String > hiddenNetworkSSIDs ) { return mWificondControl.scan ( freqs , hiddenNetworkSSIDs ) ; }
public static void notifyEmergencyContact ( android.content.Context context ) { try { context.getContentResolver ( ) . call ( android.provider.BlockedNumberContract.AUTHORITY_URI , android.provider.BlockedNumberContract.SystemContract.METHOD_NOTIFY_EMERGENCY_CONTACT , null , null ) ; } catch ( java.lang.NullPointerException | java.lang.IllegalArgumentException ex ) { android.telecom.Log.w ( null , "notifyEmergencyContact: provider not ready." ) ; } }
public void testE6 ( ) { loadAndRun ( "dot.junit.opcodes.sput_wide.d.T_sput_wide_13" , java.lang.ExceptionInInitializerError.class ) ; }
public android.net.wifi.aware.TlvBufferUtils.TlvConstructor allocate ( int capacity ) { mArray = new byte [ capacity ] ; mArrayLength = capacity ; return this ; }
public java.lang.Object getValue ( @ com.android.annotations.NonNull java.lang.String name ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation.Value value : getValues ( ) ) { if ( name.equals ( value.name ) ) { return value.value ; } } return null ; }
public void doBuildPatchFile ( java.io.File toFile , com.intellij.updater.MultiZipFile.OutputStream patchOutput ) throws java.io.IOException { }
private static int openglDepthToStackDepth ( int openglDepth ) { return ( com.android.rs.refocus.BlurStack.MAX_DEPTH ) - ( openglDepth / ( com.android.rs.refocus.BlurStack.DEPTH_SCALE ) ) ; }
void moveHomeStackTaskToTop ( int homeStackTaskType , java.lang.String reason ) { if ( homeStackTaskType == ( com.android.server.am.ActivityRecord.RECENTS_ACTIVITY_TYPE ) ) { mWindowManager.showRecentApps ( ) ; return ; } moveHomeStack ( true , reason ) ; mHomeStack.moveHomeStackTaskToTop ( homeStackTaskType ) ; }
private native short getShort ( java.lang.Object object , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public java.lang.String getSymbol ( java.util.Locale locale ) { if ( locale == null ) { throw new java.lang.NullPointerException ( "locale == null" ) ; } return icuCurrency.getSymbol ( locale ) ; }
public boolean execute ( com.android.tools.perflib.heap.Instance instance ) { result.add ( instance ) ; return true ; }
synchronized long nIncElementCreate ( long type , int kind , boolean norm , int vecSize ) { validate ( ) ; return rsnIncElementCreate ( mIncCon , type , kind , norm , vecSize ) ; }
public void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotDeleteFileException { assert ! ( closed ) ; dir.delete ( path ) ; }
public com.google.common.collect.ImmutableSet < java.util.Map.Entry < K , V > > entries ( ) { com.google.common.collect.ImmutableSet < java.util.Map.Entry < K , V > > result = entries ; return result == null ? entries = new com.google.common.collect.ImmutableSetMultimap.EntrySet < K , V > ( this ) : result ; }
public void scanAvailableAsecs ( ) { updateExternalMediaStatusInner ( true , false , false ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass x ) { printTypeFlags ( x ) ; print ( com.android.jack.ir.impl.CHARS_CLASS ) ; printTypeName ( x ) ; return false ; }
public void testSelfManagedOutgoing ( ) throws java.lang.Exception { android.telecom.PhoneAccountHandle phoneAccountHandle = mPhoneAccountSelfManaged.getAccountHandle ( ) ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveOutgoingCall ( "650-555-1212" , phoneAccountHandle , mConnectionServiceFixtureA ) ; org.junit.Assert.assertNull ( mInCallServiceFixtureX.getCall ( ids.mCallId ) ) ; }
public long getInitialGetTranscriptPollDelayMillis ( ) { return com.android.dialer.configprovider.ConfigProviderBindings.get ( context ) . getLong ( "voicemail_transcription_get_initial_transcript_poll_delay_millis" , java.util.concurrent.TimeUnit.SECONDS.toMillis ( 1 ) ) ; }
public void setSplitTrack ( boolean splitTrack ) { mSplitTrack = splitTrack ; invalidate ( ) ; }
protected void onPostExecute ( java.util.List < com.android.documentsui.model.DocumentInfo > docs ) { copyDocuments ( docs , destination ) ; }
public com.android.jack.dx.rop.cst.CstString getDescriptor ( ) { return new com.android.jack.dx.rop.cst.CstString ( com.android.jack.dx.rop.type.Type.replaceClosureFromDescriptor ( descriptor.getString ( ) ) ) ; }
public void disconnect ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "disconnect" ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM ) ; if ( service == null ) return ; service.disconnect ( ) ; }
public static boolean getSupportsRtl ( com.android.io.IAbstractFile manifestFile ) throws com.android.io.StreamException , javax.xml.xpath.XPathExpressionException { java.lang.String value = com.android.xml.AndroidManifest.getStringValue ( manifestFile , ( ( ( ( ( ( ( "/" + ( com.android.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.xml.AndroidManifest.NODE_APPLICATION ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.xml.AndroidManifest.ATTRIBUTE_SUPPORTS_RTL ) ) ) ; return java.lang.Boolean.parseBoolean ( value ) ; }
synchronized void nAllocationResize1D ( long id , int dimX ) { validate ( ) ; rsnAllocationResize1D ( mContext , id , dimX ) ; }
public void registerIdlingResources ( ) { android.support.test.espresso.IdlingResource resource = new android.support.test.espresso.EspressoTest.DummyIdlingResource ( "testRegisterIdlingResources" ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.Espresso.registerIdlingResources ( resource ) ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.Espresso.registerIdlingResources ( resource ) ) ; }
public void terminated ( com.google.common.util.concurrent.Service.State from ) { }
static com.android.bluetooth.hfpclient.HeadsetClientStateMachine make ( com.android.bluetooth.hfpclient.HeadsetClientService context ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "make" ) ; } com.android.bluetooth.hfpclient.HeadsetClientStateMachine hfcsm = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine ( context ) ; hfcsm.start ( ) ; return hfcsm ; }
boolean isBooleanField ( com.google.devtools.common.options.OptionDefinition optionDefinition ) { return com.google.devtools.common.options.IsolatedOptionsData.isBooleanField ( optionDefinition , getConverter ( optionDefinition ) ) ; }
public void incApnRefCount ( java.lang.String name ) { com.android.internal.telephony.dataconnection.ApnContext apnContext = mApnContexts.get ( name ) ; if ( apnContext != null ) { apnContext.incRefCount ( ) ; } }
public java.util.Collection < ? extends com.android.build.OutputFile > getOutputs ( ) { return com.google.common.collect.ImmutableList.of ( mainOutputFile ) ; }
public synchronized void setDecimalSeparatorAlwaysShown ( boolean value ) { properties.setDecimalSeparatorAlwaysShown ( value ) ; refreshFormatter ( ) ; }
public void onChange ( boolean selfChange ) { android.telephony.Rlog.i ( "GsmServiceStateTracker" , "Auto time state changed" ) ; revertToNitzTime ( ) ; }
public com.android.sdklib.repository.descriptors.IdDisplay getTag ( ) { return mTag ; }
public java.io.File getGeneratedResOutputDir ( ) { return getGeneratedResourcesDir ( "resValues" ) ; }
public static < T > org.hamcrest.core.AnyOf < T > anyOf ( org.hamcrest.org.hamcrest.Matcher < T > first , org.hamcrest.org.hamcrest.Matcher < ? extends T > second ) { return org.hamcrest.core.AnyOf.< org.hamcrest.T > anyOf ( first , second ) ; }
public static long LongAddition ( ) { long a ; long b ; long c ; a = 1L ; b = 2L ; c = a + b ; return c ; }
public static java.io.File getObjectFilesOutputDirectory ( org.gradle.nativeplatform.NativeBinarySpec binary , java.io.File buildDir , java.lang.String sourceSetName ) { return new java.io.File ( buildDir , java.lang.String.format ( "%s/objectFiles/%s/%s" , com.android.builder.model.AndroidProject.FD_INTERMEDIATES , binary.getName ( ) , sourceSetName ) ) ; }
private void assertPinnedToWifiWithCellDefault ( ) { org.junit.Assert.assertEquals ( mWiFiNetworkAgent.getNetwork ( ) , mCm.getBoundNetworkForProcess ( ) ) ; org.junit.Assert.assertEquals ( mCellNetworkAgent.getNetwork ( ) , mCm.getActiveNetwork ( ) ) ; }
private static java.lang.String rfc1123Date ( long millis ) { java.text.DateFormat df = new java.text.SimpleDateFormat ( "EEE, dd MMM yyyy HH:mm:ss zzz" , java.util.Locale.ENGLISH ) ; return df.format ( new java.util.Date ( millis ) ) ; }
public void testUserE ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_EXTERNAL ; int iloc = getExpectedInstallLocation ( userSetting ) ; setUserX ( true , userSetting , iloc ) ; }
private static java.lang.String getFormattedNumber ( java.lang.String number , android.content.Context context ) { java.lang.String formattedNumber = com.android.dialer.phonenumberutil.PhoneNumberHelper.formatNumber ( context , number , com.android.dialer.location.GeoUtil.getCurrentCountryIso ( context ) ) ; return android.telephony.PhoneNumberUtils.createTtsSpannable ( formattedNumber ) . toString ( ) ; }
public void loadCaptureInBackground ( final com.android.hierarchyviewerlib.models.ViewNode viewNode ) { executeInBackground ( "Capturing node" , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { loadCapture ( viewNode ) ; } } ) ; }
public void run ( ) { mClipboardSupport.pasteSelection ( mSelectionManager.getSnapshot ( ) ) ; updateMenuActionState ( ) ; }
private com.android.jack.library.InputJackLibrary getIncrementalInternalLibrary ( ) { try { return com.android.jack.library.JackLibraryFactory.getInputLibrary ( incrementalVfs ) ; } catch ( com.android.jack.library.NotJackLibraryException e ) { } catch ( com.android.jack.library.LibraryVersionException e ) { } catch ( com.android.jack.library.LibraryFormatException e ) { } return null ; }
java.util.Collection < com.android.builder.model.AndroidArtifact > getExtraAndroidArtifacts ( ) ;
public void isAssignableFrom_superclass ( ) { android.view.View v = new android.widget.RadioButton ( context ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.widget.Button.class ) . matches ( v ) ) ; }
public static < T > org.hamcrest.core.AnyOf < T > anyOf ( java.lang.Iterable < org.hamcrest.org.hamcrest.Matcher < ? extends T > > matchers ) { return org.hamcrest.core.AnyOf.< org.hamcrest.T > anyOf ( matchers ) ; }
public static < K , V > org.hamcrest.org.hamcrest.Matcher < java.util.Map < ? extends K , ? extends V > > aMapWithSize ( org.hamcrest.org.hamcrest.Matcher < ? extends java.lang.Integer > sizeMatcher ) { return org.hamcrest.collection.IsMapWithSize.< org.hamcrest.K , org.hamcrest.V > aMapWithSize ( sizeMatcher ) ; }
public java.util.List < com.android.sched.util.codec.ValueDescription > getValueDescriptions ( ) { return java.util.Collections.< com.android.sched.util.codec.ValueDescription > emptyList ( ) ; }
public com.android.volley.NetworkResponse answer ( org.mockito.invocation.InvocationOnMock invocationOnMock ) throws java.lang.Throwable { java.lang.Thread.sleep ( 200 ) ; return org.mockito.Mockito.mock ( com.android.volley.NetworkResponse.class ) ; }
public static native long DH_generate_parameters_ex ( int primeBits , long generator ) ;
public long readLong ( ) { checkType ( com.android.dx.io.EncodedValueReader.ENCODED_LONG ) ; type = com.android.dx.io.EncodedValueReader.MUST_READ ; return com.android.dx.util.EncodedValueUtils.readSignedLong ( in , arg ) ; }
static double $opt$ShortToDouble ( short a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( double ) ( a ) ) ; }
public void handleEvent ( org.eclipse.swt.widgets.Event event ) { onApplicationFieldModified ( ) ; }
public java.nio.file.Path pathFromRepository ( java.nio.file.Path relPath ) { if ( libcore.Repository.OPENJDK_REL_PATH.containsKey ( relPath ) ) { relPath = libcore.Repository.OPENJDK_REL_PATH.get ( relPath ) ; } return super . pathFromRepository ( relPath ) ; }
public static org.jetbrains.plugins.github.api.GithubUser getCurrentUser ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.util.GithubAuthData auth ) throws java.io.IOException { com.google.gson.JsonElement result = org.jetbrains.plugins.github.api.GithubApiUtil.getRequest ( auth , "/user" ) ; return org.jetbrains.plugins.github.api.GithubApiUtil.createDataFromRaw ( org.jetbrains.plugins.github.api.GithubApiUtil.fromJson ( result , org.jetbrains.plugins.github.api.GithubUserRaw.class ) , org.jetbrains.plugins.github.api.GithubUser.class ) ; }
void visitWildcardType ( java.lang.reflect.WildcardType t ) { visit ( t.getUpperBounds ( ) ) ; }
public void run ( ) { com.android.hierarchyviewer.HierarchyViewerApplication.getApp ( ) . startTask ( taskName ) ; task.run ( ) ; com.android.hierarchyviewer.HierarchyViewerApplication.getApp ( ) . endTask ( ) ; }
public void test_minusSeconds_noChange_oneDay_equal ( ) { java.time.LocalTime t = tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.minusSeconds ( ( ( 24 * 60 ) * 60 ) ) ; org.testng.Assert.assertEquals ( t , tck.java.time.TCKLocalTime.TEST_12_30_40_987654321 ) ; }
public boolean canUseExtendedOpcodes ( ) { return ( targetApiLevel ) >= ( com.android.dex.DexFormat.API_CURRENT ) ; }
public boolean onCreateOptionsMenu ( android.view.Menu menu ) { super . onCreateOptionsMenu ( menu ) ; createOptionsMenuInternal ( menu ) ; return true ; }
protected abstract void sendNewSubmitPdu ( java.lang.String destinationAddress , java.lang.String scAddress , java.lang.String message , com.android.internal.telephony.SmsHeader smsHeader , int encoding , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , boolean lastPart , java.util.concurrent.atomic.AtomicInteger unsentPartCount , java.util.concurrent.atomic.AtomicBoolean anyPartFailed , android.net.Uri messageUri ) ;
public void setPeriodicAdvertisingData ( int advertiserId , android.bluetooth.le.AdvertiseData data ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.setPeriodicAdvertisingData ( advertiserId , data ) ; }
public static final native void setPolicy ( ) ;
protected void accept ( android.net.LocalSocketImpl s ) throws java.io.IOException { if ( ( fd ) == null ) { throw new java.io.IOException ( "socket not created" ) ; } s.fd = accept ( fd , s ) ; s.mFdCreatedInternally = true ; }
public java.lang.String getUsage ( ) { return ( "a path to a directory or zip archive (" + ( getUsageDetails ( ) ) ) + ")" ; }
public void testGetOldValue ( ) { assertEquals ( "Merge" , com.android.tools.lint.checks.WrongCaseDetector.getOldValue ( "Invalid tag `<Merge>`; should be `<merge>`" , com.android.tools.lint.detector.api.TextFormat.RAW ) ) ; assertEquals ( "Merge" , com.android.tools.lint.checks.WrongCaseDetector.getOldValue ( "Invalid tag <Merge>; should be <merge>" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; }
public synchronized com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( closed ) ; com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file = new com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile ( dir.createOutputVFile ( path ) , path ) ; files.add ( file ) ; return file ; }
com.android.sched.util.location.Location getVDirLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVDir dir ) { return vfs.getVDirLocation ( dir.getWrappedDir ( ) ) ; }
public void loggedRun ( ) { notifyCreateConnectionComplete ( id ) ; }
public static com.android.ahat.heapdump.AhatSnapshot parseHeapDump ( java.io.File hprof , com.android.ahat.proguard.ProguardMap map ) throws com.android.ahat.heapdump.HprofFormatException , java.io.IOException { try { return com.android.ahat.heapdump.Parser.parseHeapDump ( new com.android.ahat.heapdump.Parser.HprofBuffer ( hprof ) , map ) ; } catch ( java.nio.BufferUnderflowException e ) { throw new com.android.ahat.heapdump.HprofFormatException ( "Unexpected end of file" , e ) ; } }
public void execute ( com.android.build.gradle.managed.BuildType buildType ) { if ( ( buildType.getNdk ( ) . getIsDebuggable ( ) ) == null ) { buildType.getNdk ( ) . setIsDebuggable ( true ) ; } }
public boolean removeAll ( java.util.Collection < ? > c ) { return removeIf ( com.google.common.base.Predicates.in ( c ) ) ; }
public com.android.ide.common.resources.configuration.TouchScreenQualifier getTouchTypeQualifier ( ) { return ( ( com.android.ide.common.resources.configuration.TouchScreenQualifier ) ( mQualifiers [ com.android.ide.common.resources.configuration.FolderConfiguration.INDEX_TOUCH_TYPE ] ) ) ; }
public static org.hamcrest.Matcher < java.lang.String > containsString ( java.lang.String substring ) { return org.junit.internal.matchers.StringContains.containsString ( substring ) ; }
void createForward ( int localPort , int remotePort ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.TimeoutException , java.io.IOException ;
private void updateCurrentRemoteMessage ( java.lang.String newMessage ) { com.android.incallui.rtt.protocol.RttChatMessage.updateRemoteRttChatMessage ( rttMessages , newMessage ) ; lastIndexOfLocalMessage = com.android.incallui.rtt.protocol.RttChatMessage.getLastIndexLocalMessage ( rttMessages ) ; notifyDataSetChanged ( ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBuildSystemFingerprintBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 8192 ; buildSystemFingerprint_ = value ; onChanged ( ) ; return this ; }
public void test005 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST005 ) . addProperty ( Optimizations.UseDefSimplifier.OPTIMIZE_CST_DEF.getName ( ) , "false" ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void testVFE1 ( ) { load ( "dot.junit.opcodes.aput_short.d.T_aput_short_2" , java.lang.VerifyError.class ) ; }
public java.lang.String getSystemDialerPackage ( ) { try { android.telecom.Log.startSession ( "TSI.gSDP" ) ; return mContext.getResources ( ) . getString ( R.string.ui_default_package ) ; } finally { android.telecom.Log.endSession ( ) ; } }
private static int $noinline$BitCountByte ( byte x ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return java.lang.Integer.bitCount ( x ) ; }
public boolean apiIsSupported ( int apiLevel ) { return ( minSdkVersion ) >= apiLevel ; }
public void setDataAllowed ( boolean enable , android.os.Message response ) { if ( DBG ) log ( ( "setDataAllowed: enable=" + enable ) ) ; mIsCleanupRequired = ! enable ; mPhone.mCi.setDataAllowed ( enable , response ) ; mInternalDataEnabled = enable ; }
protected com.android.sdklib.internal.repository.archives.ArchiveInstaller createArchiveInstaler ( ) { return new com.android.sdklib.internal.repository.archives.ArchiveInstaller ( ) { @ java.lang.Override public boolean install ( com.android.sdklib.internal.repository.archives.ArchiveReplacement archiveInfo , java.lang.String osSdkRoot , boolean forceHttp , com.android.sdklib.SdkManager sdkManager , com.android.sdklib.internal.repository.DownloadCache cache , com.android.sdklib.internal.repository.ITaskMonitor monitor ) { mInstalled.add ( archiveInfo ) ; return true ; } } ; }
public android.net.wifi.aware.LvBufferUtils.LvConstructor putInt ( int data ) { mTlvImpl.putInt ( 0 , data ) ; return this ; }
public void visitCodeAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.CodeAttribute codeAttribute ) { attributeVisitor.visitCodeAttribute ( clazz , method , codeAttribute ) ; }
private static boolean isVersionZeroRegister ( com.android.jack.ir.ast.JSsaVariableUseRef ssaReg ) { return ( ( ssaReg.getVersion ( ) ) == 0 ) && ( ssaReg instanceof com.android.jack.ir.ast.JSsaVariableUseRefPlaceHolder ) ; }
public void onVideoScreenStart ( ) { inCallButtonUiDelegate.refreshMuteState ( ) ; videoCallScreenDelegate.onVideoCallScreenUiReady ( ) ; getView ( ) . postDelayed ( cameraPermissionDialogRunnable , com.android.incallui.video.impl.VideoCallFragment.CAMERA_PERMISSION_DIALOG_DELAY_IN_MILLIS ) ; getView ( ) . postDelayed ( videoChargesAlertDialogRunnable , com.android.incallui.video.impl.VideoCallFragment.VIDEO_CHARGES_ALERT_DIALOG_DELAY_IN_MILLIS ) ; }
public void setSelection ( com.android.hierarchyviewerlib.device.IHvDevice device , com.android.hierarchyviewerlib.models.Window window ) { synchronized ( mDeviceMap ) { mSelectedDevice = device ; mSelectedWindow = window ; } notifySelectionChanged ( device , window ) ; }
protected abstract java.util.Collection < ? extends com.android.jack.server.HasVersion > getVersionedElements ( ) ;
public void testVFE4 ( ) { loadAndRun ( "dot.junit.opcodes.sget_boolean.d.T_sget_boolean_6" , java.lang.IllegalAccessError.class ) ; }
public void run ( ) { mContentWrapper.setLayerType ( com.android.launcher3.LAYER_TYPE_NONE , null ) ; mFooter.setLayerType ( com.android.launcher3.LAYER_TYPE_NONE , null ) ; }
private final native void init ( boolean isSystem ) ;
public void run ( ) { try { java.lang.Thread.sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ex ) { } toInterrupt.interrupt ( ) ; }
void verifyTimeZoneWasNotSet ( ) { org.mockito.Mockito.verify ( mTimeServiceHelper , org.mockito.Mockito.times ( 0 ) ) . setDeviceTimeZone ( org.mockito.ArgumentMatchers.any ( java.lang.String.class ) ) ; }
static void logWriteError ( java.lang.String host , java.io.File file , java.lang.Throwable t ) { java.lang.System.err.println ( ( ( ( ( "FileClientSessionCache: Error writing session data for " + host ) + " to " ) + file ) + "." ) ) ; t.printStackTrace ( ) ; }
private native void setLong ( java.lang.Object object , long value , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.phonelookup.PhoneLookupInfo > lookup ( @ android.support.annotation.NonNull android.telecom.Call call ) { return com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService ( ) . submit ( PhoneLookupInfo :: getDefaultInstance ) ; }
public android.net.NetworkCapabilities addCapability ( @ android.net.NetworkCapabilities.NetCapability int capability ) { android.net.NetworkCapabilities.checkValidCapability ( capability ) ; mNetworkCapabilities |= 1 << capability ; mUnwantedNetworkCapabilities &= ~ ( 1 << capability ) ; return this ; }
public final void add ( int index , E element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public static com.android.internal.telephony.gsm.GsmMmiCode newFromUssdUserInput ( java.lang.String ussdMessge , com.android.internal.telephony.GsmCdmaPhone phone , com.android.internal.telephony.uicc.UiccCardApplication app ) { com.android.internal.telephony.gsm.GsmMmiCode ret = new com.android.internal.telephony.gsm.GsmMmiCode ( phone , app ) ; ret.mMessage = ussdMessge ; ret.mState = State.PENDING ; ret.mIsPendingUSSD = true ; return ret ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; cr = mContext.getContentResolver ( ) ; assertNotNull ( cr ) ; assertSettingsForTests ( ) ; }
public void testPrimitives ( ) { android.renderscript.cts.ScriptC_primitives t = new android.renderscript.cts.ScriptC_primitives ( mRS ) ; assertTrue ( initializeGlobals ( t ) ) ; t.invoke_test ( ) ; waitForMessage ( ) ; checkForErrors ( ) ; t.destroy ( ) ; }
public void removeTransportModeTransforms ( java.net.Socket socket , android.net.IpSecTransform transform ) throws java.io.IOException { removeTransportModeTransforms ( socket.getFileDescriptor$ ( ) , transform ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.testFieldReflection ( ) ; Main.testMethodReflection ( ) ; Main.testConstructorReflection ( ) ; Main.testPackagePrivateConstructor ( ) ; Main.testPackagePrivateAccessibleConstructor ( ) ; }
void deviceConnected ( java.lang.String bdaddr , boolean absoluteVolume ) { android.util.Log.i ( com.android.bluetooth.avrcp.AvrcpTargetService.TAG , ( ( ( "deviceConnected: bdaddr=" + bdaddr ) + " absoluteVolume=" ) + absoluteVolume ) ) ; mVolumeManager.deviceConnected ( bdaddr , absoluteVolume ) ; com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent ( BluetoothMetricsProto.ProfileId.AVRCP ) ; }
public static native void SSL_use_PrivateKey ( long ssl , long pkey ) ;
public static int $noinline$mulPow2Plus1 ( int arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg * 9 ; }
public boolean isInterface ( ) { return ( ( access ) & ( org.jetbrains.org.objectweb.asm.Opcodes.ACC_INTERFACE ) ) != 0 ; }
int copyIntoArray ( java.lang.Object [ ] dst , int offset ) { return delegateList.copyIntoArray ( dst , offset ) ; }
public com.android.ims.internal.IImsConfig getConfigInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getConfigInterface ( mSlotId , mSupportedFeature ) ; } }
private static void listIssue ( java.io.PrintStream out , com.android.tools.lint.detector.api.Issue issue ) { out.print ( com.android.tools.lint.Main.wrapArg ( ( ( ( "\"" + ( issue.getId ( ) ) ) + "\": " ) + ( issue.getBriefDescription ( com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ) ) ) ; }
com.google.common.collect.ImmutableList < java.lang.String > getKeyAttributesNames ( ) ;
synchronized void nScriptBindAllocation ( long script , long alloc , int slot , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptBindAllocation ( curCon , script , alloc , slot , mUseInc ) ; }
public void doWork ( ) throws android.os.RemoteException { mService.getAccountsByFeatures ( mResponse , type , features , mContext.getOpPackageName ( ) ) ; }
public static com.android.dialer.common.database.Selection fromString ( @ android.support.annotation.Nullable java.lang.String selection , @ android.support.annotation.Nullable java.lang.String ... args ) { return new com.android.dialer.common.database.Selection.Builder ( selection , ( args == null ? java.util.Collections.emptyList ( ) : java.util.Arrays.asList ( args ) ) ) . build ( ) ; }
private void startInCallUI ( ) { com.android.server.telecom.testapps.TestInCallServiceImpl.sInstance = this ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_MAIN ) ; intent.setFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION ) | ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) ) ) ; intent.setClass ( this , com.android.server.telecom.testapps.TestInCallUI.class ) ; startActivity ( intent ) ; }
public static int getMode ( ) { return com.android.internal.os.RoSystemProperties.FACTORYTEST ; }
public void TestDataDrivenJDK ( ) { if ( ( com.ibm.icu.dev.test.TestUtil.getJavaVendor ( ) ) == ( TestUtil.JavaVendor.Android ) ) return ; com.ibm.icu.dev.test.format.DataDrivenNumberFormatTestUtility.runSuite ( "numberformattestspecification.txt" , JDK ) ; }
private void sendConnectMessage ( int masId ) { if ( ( mSessionStatusHandler ) != null ) { android.os.Message msg = mSessionStatusHandler.obtainMessage ( com.android.bluetooth.map.BluetoothMapService.MSG_MAS_CONNECT , masId , 0 ) ; mSessionStatusHandler.sendMessageDelayed ( msg , 20 ) ; } }
public boolean isSkippable ( @ javax.annotation.Nonnull com.android.sched.scheduler.ComponentFilterSet current ) { return ( canBeSkipped ) && ( ! ( current.containsOne ( adapterFilters ) ) ) ; }
public int getItemCount ( ) { return callDetailsEntries.isEmpty ( ) ? 0 : ( callDetailsEntries.size ( ) ) + 2 ; }
java.util.Collection < com.intellij.ide.externalComponents.UpdatableExternalComponent > getAvailableVersions ( @ org.jetbrains.annotations.Nullable com.intellij.openapi.progress.ProgressIndicator indicator , @ org.jetbrains.annotations.Nullable com.intellij.openapi.updateSettings.impl.UpdateSettings updateSettings ) ;
public boolean isMobileNumberPortableRegion ( java.lang.String regionCode ) { com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata metadata = getMetadataForRegion ( regionCode ) ; if ( metadata == null ) { com.google.i18n.phonenumbers.PhoneNumberUtil.logger.log ( java.util.logging.Level.WARNING , ( "Invalid or unknown region code provided: " + regionCode ) ) ; return false ; } return metadata.mobileNumberPortableRegion ; }
protected boolean canInstrument ( org.jetbrains.jps.incremental.CompiledClass compiledClass , int classFileVersion ) { return classFileVersion >= ( org.jetbrains.org.objectweb.asm.Opcodes.V1_5 ) ; }
public void deleteSmsOnRuim ( int index , android.os.Message response ) { android.telephony.Rlog.d ( com.android.internal.telephony.test.SimulatedCommands.LOG_TAG , ( "Delete RUIM message at index " + index ) ) ; unimplemented ( response ) ; }
public void onConfigurationChanged ( ) { mSpTexts.update ( ) ; com.android.systemui.volume.Util.setText ( mEndNowButton , mContext.getString ( R.string.volume_zen_end_now ) ) ; }
public void createDataPathInterface ( java.lang.String interfaceName ) { android.os.Message msg = mSm.obtainMessage ( com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_TYPE_COMMAND ) ; msg.arg1 = com.android.server.wifi.aware.WifiAwareStateManager.COMMAND_TYPE_CREATE_DATA_PATH_INTERFACE ; msg.obj = interfaceName ; mSm.sendMessage ( msg ) ; }
protected A doBackward ( B b ) { return com.google.common.collect.Maps.BiMapConverter.convert ( bimap.inverse ( ) , b ) ; }
public void setOnBufferAvailableListener ( android.renderscript.Allocation.OnBufferAvailableListener callback ) { synchronized ( android.renderscript.Allocation.mAllocationMap ) { android.renderscript.Allocation.mAllocationMap.put ( new java.lang.Long ( getID ( mRS ) ) , this ) ; mBufferNotifier = callback ; } }
public boolean inDaylightTime ( java.util.Date time ) { long when = time.getTime ( ) ; int offsetIndex = findOffsetIndexForTimeInMilliseconds ( when ) ; if ( offsetIndex == ( - 1 ) ) { return false ; } return ( mIsDsts [ offsetIndex ] ) == 1 ; }
public static int $noinline$intReverseConditionNaN ( int i ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return 42 != ( java.lang.Math.sqrt ( i ) ) ? 13 : 54 ; }
native void rsnAllocationRead1D ( long con , long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , int dt ) ;
public void check ( android.view.View view , android.support.test.espresso.NoMatchingViewException noViewFoundException ) { org.junit.Assert.assertFalse ( true ) ; }
public com.android.tools.lint.client.api.Configuration getConfiguration ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Project project , @ com.android.annotations.Nullable com.android.tools.lint.client.api.LintDriver driver ) { return getConfigurationFor ( project ) ; }
public void currentSignalStrength ( int indicationType , com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { mRil.processIndication ( indicationType ) ; }
public long getSize ( com.android.ahat.heapdump.Site element , com.android.ahat.heapdump.AhatHeap heap ) { return element.getSize ( heap ) ; }
public java.util.Set < com.android.jack.ir.ast.JAnnotationType > getAnnotationTypes ( ) { return com.android.jack.Jack.getUnmodifiableCollections ( ) . getUnmodifiableSet ( com.android.jack.util.AnnotationUtils.getAnnotationTypes ( annotations ) ) ; }
public void controlResized ( org.eclipse.swt.events.ControlEvent e ) { org.eclipse.swt.graphics.Rectangle controlBounds = shell.getBounds ( ) ; org.eclipse.jface.preference.PreferenceStore currentPrefs = com.android.ddms.PrefsDialog.getStore ( ) ; currentPrefs.setValue ( PrefsDialog.EXPLORER_SHELL_WIDTH , controlBounds.width ) ; currentPrefs.setValue ( PrefsDialog.EXPLORER_SHELL_HEIGHT , controlBounds.height ) ; }
public android.telephony.ims.ImsCallProfile createCallProfile ( int callSessionType , int callType ) { try { return mCompatFeature.createCallProfile ( mSessionId , callSessionType , callType ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e.getMessage ( ) ) ; } }
public void EVP_PKEY_cmp_BothNullParameters ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto.EVP_PKEY_cmp ( null , null ) ; }
public int getSimStateForSlotIndex ( int slotIndex ) { throw new java.lang.RuntimeException ( "not implemented" ) ; }
protected void onPreExecute ( ) { mLogSubsession = android.telecom.Log.createSubsession ( ) ; }
public void testVFE13 ( ) { try { new dot.junit.opcodes.invoke_virtual_range.d.T_invoke_virtual_range_18 ( ) . run ( new dot.junit.opcodes.invoke_virtual_range.TestStubs ( ) ) ; fail ( "expected IllegalAccessError" ) ; } catch ( java.lang.IllegalAccessError t ) { } }
public void containsClass ( java.lang.String className ) throws com.android.ide.common.process.ProcessException , java.io.IOException { if ( ! ( checkForClass ( className ) ) ) { failWithRawMessage ( "'%s' does not contain '%s'" , getDisplaySubject ( ) , className ) ; } }
private void handleVoicePrivacyClickRequest ( boolean value ) { mPhone.enableEnhancedVoicePrivacy ( value , android.os.Message.obtain ( mSetVoicePrivacyComplete , com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED ) ) ; }
public static void showErrors ( @ com.android.annotations.NonNull org.eclipse.swt.widgets.Shell shell , @ com.android.annotations.NonNull org.eclipse.core.resources.IFile file , @ com.android.annotations.Nullable org.eclipse.ui.IEditorPart editor ) { com.android.ide.eclipse.adt.internal.lint.LintListDialog dialog = new com.android.ide.eclipse.adt.internal.lint.LintListDialog ( shell , file , editor ) ; dialog.open ( ) ; }
public void testOnSetUpAdapterFailed ( ) throws java.lang.Exception { java.io.File testAdapter = createTestAdapter ( ) ; java.lang.String output = "android.hardware.foo@1.1::IFoo/default" ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mCmdUtil.mCmdSuccess = false ; try { mPreparer.setUp ( mDevice , mBuildInfo ) ; } catch ( com.android.tradefed.targetprep.TargetSetupError e ) { org.junit.Assert.assertEquals ( "HAL adapter setup failed." , e.getMessage ( ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public static java.util.Locale toLocale ( com.ibm.icu.util.ULocale uloc ) { return com.ibm.icu.util.ULocale.JDKLocaleHelper.hasScriptsAndUnicodeExtensions ? com.ibm.icu.util.ULocale.JDKLocaleHelper.toLocale7 ( uloc ) : com.ibm.icu.util.ULocale.JDKLocaleHelper.toLocale6 ( uloc ) ; }
public com.android.builder.model.AndroidProject executeAndReturnModel ( java.lang.String ... tasks ) { return execute ( java.util.Collections.< java.lang.String > emptyList ( ) , null , true , tasks ) ; }
void onAmbiguousContactClicked ( com.android.dialer.speeddial.loader.SpeedDialUiItem speedDialUiItem ) ;
private java.lang.invoke.MethodHandle findVirtualForMH ( java.lang.String name , java.lang.invoke.MethodType type ) { if ( "invoke" . equals ( name ) ) return java.lang.invoke.MethodHandles.invoker ( type ) ; if ( "invokeExact" . equals ( name ) ) return java.lang.invoke.MethodHandles.exactInvoker ( type ) ; return null ; }
public void onConnectionServiceChanged ( com.android.server.telecom.Call call , com.android.server.telecom.ConnectionServiceWrapper oldService , com.android.server.telecom.ConnectionServiceWrapper newService ) { if ( call.isSelfManaged ( ) ) { android.telecom.Log.i ( this , "onConnectionServiceChanged: skipped self-managed %s" , call ) ; return ; } updateCall ( call ) ; }
boolean isCondition4Violated ( @ javax.annotation.Nonnull java.util.List < com.android.jack.ir.ast.JStatement > startStmts ) { return traverse ( startStmts , com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_A , com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_OR_READS_B ) ; }
private void write ( java.lang.StringBuilder sb , java.lang.String name , java.lang.Object value ) { sb.append ( ( name + "=" ) ) . append ( value ) . append ( ';' ) ; }
public void onHandoverToWifiFailed ( com.android.incallui.call.DialerCall call ) { if ( ( inCallActivity ) != null ) { inCallActivity.showDialogOrToastForWifiHandoverFailure ( call ) ; } else { android.widget.Toast.makeText ( context , R.string.video_call_lte_to_wifi_failed_message , Toast.LENGTH_SHORT ) . show ( ) ; } }
public void testNotifyPrimaryUse ( ) { notifyDexLoad ( mFooUser0 , mFooUser0.getBaseAndSplitDexPaths ( ) , mUser0 ) ; assertNoUseInfo ( mFooUser0 ) ; }
public java.lang.String parse ( android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple ) { if ( ( ( tuple.output ) != null ) && ( tuple.output.equals ( "fail" ) ) ) return "fail" ; return null ; }
public void run ( ) { clearMatches ( ) ; }
public void testSubjectAltNameWithWildcard ( ) { assertTrue ( verifyWithServerCertificate ( "imap.g.com" , libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate.dns ( "*.g.com" ) ) ) ; }
public void onReportFullscreenMode ( boolean fullScreen , boolean calledInBackground , java.lang.String inputMethodId ) { synchronized ( mH ) { if ( ( ! calledInBackground ) || ( android.text.TextUtils.equals ( mCurId , inputMethodId ) ) ) { mFullscreenMode = fullScreen ; } } }
public void updateCallType ( android.telephony.ims.ImsCallProfile profile ) { mCallType = profile.mCallType ; }
public java.lang.String toString ( ) { return ( "Predicates.or(" + ( com.google.common.base.Predicates.COMMA_JOINER.join ( components ) ) ) + ")" ; }
public static void computeAcospi ( android.renderscript.cts.TestAcospi.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( ( ( android.renderscript.cts.CoreMathVerifier.acos ( args.inV ) ) / ( ( float ) ( java.lang.Math.PI ) ) ) , 5 , 128 ) ; }
public void onSubscriptionsChanged ( ) { if ( android.telephony.SubscriptionManager.DBG ) log ( "callback: received, sendEmptyMessage(0) to handler" ) ; mHandler.sendEmptyMessage ( 0 ) ; }
public com.android.tv.data.Channel.Builder setDisplayNumber ( java.lang.String displayNumber ) { mChannel.mDisplayNumber = com.android.tv.data.Channel.normalizeDisplayNumber ( displayNumber ) ; return this ; }
private void initializeSettings ( ) { com.android.sdkuilib.internal.repository.SettingsController c = mUpdaterData.getSettingsController ( ) ; c.loadSettings ( ) ; c.applySettings ( ) ; }
public android.accounts.Account [ ] getAccounts ( ) { try { return mService.getAccounts ( null , mContext.getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public java.util.Iterator charsets ( ) { java.util.Vector v = new java.util.Vector ( ) ; v.add ( tests.api.java.nio.charset.CharsetTest.charset1 ) ; v.add ( tests.api.java.nio.charset.CharsetTest.charset2 ) ; return v.iterator ( ) ; }
public com.android.sched.util.config.AsapConfigBuilder setCodecContext ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context ) { this . context = context ; return this ; }
private boolean shouldTurnOffLinkCapacityEstimate ( ) { if ( ( ( ( mIsCharging ) || ( mIsScreenOn ) ) || ( mIsTetheringOn ) ) || ( ( mUpdateModes.get ( TelephonyManager.INDICATION_FILTER_LINK_CAPACITY_ESTIMATE ) ) == ( android.telephony.TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF ) ) ) { return false ; } return true ; }
void processFile ( @ com.android.annotations.NonNull java.io.File sourceFolder , @ com.android.annotations.NonNull java.io.File sourceFile ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException ;
public void queryCapabilityConfiguration ( int capability , int radioTech , android.telephony.ims.aidl.IImsCapabilityCallback c ) { queryCapabilityConfigurationInternal ( capability , radioTech , c ) ; }
public static float pow ( float x , float y ) { return ( ( float ) ( java.lang.Math.pow ( x , y ) ) ) ; }
protected com.android.build.gradle.internal.variant.LibVariantOutputData doCreateOutput ( @ com.android.annotations.Nullable java.lang.String densityFilter , @ com.android.annotations.Nullable java.lang.String abiFilter ) { return new com.android.build.gradle.internal.variant.LibVariantOutputData ( densityFilter , abiFilter , this ) ; }
public com.android.jack.test.toolchain.JackApiV01Toolchain build ( ) { java.io.File jackPrebuilt = ( com.android.jack.test.toolchain.AbstractTestTools.isPrebuiltAvailable ( "jack" ) ) ? com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "jack" ) : null ; return new com.android.jack.test.toolchain.JackApiV01Toolchain ( jackPrebuilt ) ; }
private boolean isSubInfoReady ( ) { return ( com.android.internal.telephony.SubscriptionController.sSlotIndexToSubId.size ( ) ) > 0 ; }
boolean isPrime ( int certainty ) { return java.math.NativeBN.BN_primality_test ( bignum , certainty , false ) ; }
private void throwIfNestedTransaction ( ) { if ( hasNestedTransaction ( ) ) { throw new java.lang.IllegalStateException ( ( "Cannot perform this operation because " + "a nested transaction is in progress." ) ) ; } }
public void cleanup ( ) { org.mockito.Mockito.validateMockitoUsage ( ) ; }
public java.util.List < java.lang.String > getApplicableMethodNames ( ) { return null ; }
public void testGetActivityThemes5 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " package='com.android.unittest'" + " android:theme=\'@style/NoBackground\'>\n" ) + " <application\n" ) + " android:label=\'@string/app_name\'\n" ) + " android:name=\'.app.TestApp\' android:icon=\'@drawable/app_icon\'>\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.prefs.PrefsActivity\'\n" ) + " android:label=\'@string/prefs_title\' />\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.app.IntroActivity\'\n" ) + " android:label=\'@string/intro_title\'\n" ) + " android:theme=\'@android:style/Theme.Dialog\' />\n" ) + " </application>\n" ) + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) + "" ) ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenSize.XLARGE ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ; assertEquals ( "NoBackground" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ) ; java.util.Map < java.lang.String , java.lang.String > map = info.getActivityThemes ( ) ; assertEquals ( map.toString ( ) , 1 , map.size ( ) ) ; assertNull ( map.get ( "com.android.unittest.prefs.PrefsActivity" ) ) ; assertEquals ( "@android:style/Theme.Dialog" , map.get ( "com.android.unittest.app.IntroActivity" ) ) ; }
public static void awaitBooted ( ) throws java.lang.InterruptedException { synchronized ( sun.misc.VM.lock ) { while ( ! ( sun.misc.VM.booted ) ) { sun.misc.VM.lock.wait ( ) ; } } }
public java.lang.String toString ( ) { android.media.MediaMetadata data = getMetadata ( ) ; android.media.MediaDescription desc = ( data == null ) ? null : data.getDescription ( ) ; return ( ( ( ( "MediaController (" + ( getPackageName ( ) ) ) + "@" ) + ( java.lang.Integer.toHexString ( mDelegate.hashCode ( ) ) ) ) + ") " ) + desc ; }
public static native java.lang.String [ ] get_X509_CRL_ext_oids ( long x509ctx , int critical ) ;
void onAdvertiseParamsSet ( int status , int advertiserId ) { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "onAdvertiseParamsSet() - advertiserId=" + advertiserId ) + ", status=" ) + status ) ) ; mAdvertiseManager.callbackDone ( advertiserId , status ) ; }
public int size ( ) { return com.google.common.math.IntMath.divide ( list.size ( ) , size , java.math.RoundingMode.CEILING ) ; }
public android.telephony.ims.aidl.IImsMmTelFeature createMmTelFeature ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) { return createMmTelFeatureInternal ( slotId , c ) ; }
private int getExpected ( int no , int so , int mo ) { switch ( mMode ) { case com.android.overlaytest.OverlayBaseTest.MODE_NO_OVERLAY : return no ; case com.android.overlaytest.OverlayBaseTest.MODE_SINGLE_OVERLAY : return so ; case com.android.overlaytest.OverlayBaseTest.MODE_MULTIPLE_OVERLAYS : return mo ; default : fail ( "Unknown mode!" ) ; return no ; } }
public void broadcastPnoScanResultEvent ( java.lang.String iface ) { sendMessage ( iface , com.android.server.wifi.WifiMonitor.PNO_SCAN_RESULTS_EVENT ) ; }
public char [ ] readPassword ( java.lang.String format , java.lang.Object ... args ) { throw new java.lang.UnsupportedOperationException ( ) ; }
synchronized void nScriptSetVarVE ( long id , int slot , byte [ ] val , long e , int [ ] dims ) { validate ( ) ; rsnScriptSetVarVE ( mContext , id , slot , val , e , dims ) ; }
protected static android.widget.RemoteViews createPresentation ( java.lang.String message ) { final android.widget.RemoteViews presentation = new android.widget.RemoteViews ( android.autofillservice.cts.AutoFillServiceTestCase.getContext ( ) . getPackageName ( ) , R.layout.list_item ) ; presentation.setTextViewText ( R.id.text1 , message ) ; return presentation ; }
public void addRegistrationListener ( com.android.ims.internal.IImsRegistrationListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; getServiceInterface ( mBinder ) . addRegistrationListener ( listener ) ; } }
public org.junit.runner.Description childlessCopy ( ) { return new org.junit.runner.Description ( fTestClass , fDisplayName , fAnnotations ) ; }
public void setPeriodicAdvertisingEnable ( boolean enable ) { try { gatt.setPeriodicAdvertisingEnable ( this . advertiserId , enable ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.le.AdvertisingSet.TAG , "remote exception - " , e ) ; } }
public abstract boolean hasCookies ( boolean privateBrowsing ) ;
public static void init ( final android.content.Context context ) { if ( ( com.android.mms.data.Contact.sContactCache ) != null ) { com.android.mms.data.Contact.sContactCache.mTaskQueue.mWorkerThread.interrupt ( ) ; } com.android.mms.data.Contact.sContactCache = new com.android.mms.data.Contact.ContactsCache ( context ) ; com.android.mms.data.RecipientIdCache.init ( context ) ; }
public void testInheritLocal ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/CustomViewTest.java: Warning: Custom view test/pkg/CustomViewTest is missing constructor used by tools: (Context) or (Context,AttributeSet) or (Context,AttributeSet,int) [ViewConstructor]\n" + ( "0 errors, 1 warnings\n" + "" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "apicheck/Intermediate.java.txt=>src/test/pkg/Intermediate.java.txt" , "src/test/pkg/CustomViewTest.java.txt=>src/test/pkg/CustomViewTest.java" , "bytecode/CustomViewTest.class.data=>bin/classes/test/pkg/CustomViewTest.class" , "apicheck/Intermediate.class.data=>bin/classes/test/pkg/Intermediate.class" , ( "apicheck/Intermediate$IntermediateCustomV.class.data=>" + "bin/classes/test/pkg/Intermediate$IntermediateCustomV.class" ) ) ) ; }
private void handleSystemReady ( ) { initIfReadyAndConnected ( ) ; resetIfReadyAndConnected ( ) ; com.android.server.MountServiceIdler.scheduleIdlePass ( mContext ) ; }
static byte $opt$ShortToByte ( short a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( byte ) ( a ) ) ; }
public void setIpReachabilityDisconnectEnabled ( boolean enabled ) { mIpReachabilityDisconnectEnabled = enabled ; }
public void stopScan ( ) { if ( ( mBLEScanner ) != null ) { mBLEScanner.stopScan ( mScanCallback ) ; } else { android.util.Log.e ( com.android.pmc.GattClientListener.TAG , "BLEScanner is null" ) ; } }
public void clearPackages ( ) { setPackages ( null ) ; }
public void testThatMethodWithAnnotationIsReportedAsBeingAnnotated ( ) throws java.lang.Exception { assertTrue ( hasExampleAnnotation ( android.test.suitebuilder.TestPredicatesTest.ClassWithAnnotation.class , "testWithAnnotation" ) ) ; assertTrue ( hasExampleAnnotation ( android.test.suitebuilder.TestPredicatesTest.ClassWithoutAnnotation.class , "testWithAnnotation" ) ) ; }
void recordLoadException ( long loadTime ) ;
public static java.util.Map < java.lang.String , java.lang.Integer > retrieveJavaTimeFieldValueNames ( java.lang.String id , int field , int style , java.util.Locale locale ) { return sun.util.locale.provider.CalendarDataUtility.retrieveFieldValueNames ( id , field , style , locale ) ; }
protected void engineUpdate ( byte [ ] input , int offset , int len ) { final org.conscrypt.NativeRef.HMAC_CTX ctxLocal = ctx ; org.conscrypt.NativeCrypto.HMAC_Update ( ctxLocal , input , offset , len ) ; }
public void onCallStateChanged ( android.content.Context context , int newState , android.telecom.PhoneAccountHandle phoneAccountHandle ) { if ( newState == ( android.telecom.Call.STATE_DISCONNECTING ) ) { duo.unregisterListener ( this ) ; } callState = newState ; }
public void setNoCrunch ( boolean usecrunch ) { mUseCrunchCache = usecrunch ; }
public java.util.Collection < java.lang.String > getApplicableElements ( ) { return java.util.Arrays.asList ( com.android.SdkConstants.TAG_STYLE , com.android.SdkConstants.TAG_RESOURCES , com.android.SdkConstants.TAG_ARRAY , com.android.SdkConstants.TAG_STRING_ARRAY , com.android.SdkConstants.TAG_INTEGER_ARRAY , com.android.SdkConstants.TAG_PLURALS ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( "ReplaceTextCommentScanner{" + "oldText='" ) + ( oldText ) ) + '\'' ) + ", newText='" ) + ( newText ) ) + '\'' ) + '}' ; }
public void removeImsServiceFeatureCallbacks ( ) { synchronized ( mLock ) { mImsStatusCallbacks.clear ( ) ; } }
void libToExe ( @ javax.annotation.Nonnull java.io.File [ ] in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception ;
public void onStreamingServicesUpdated ( final java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) { try { callback.onStreamingServicesUpdated ( services ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public com.android.ide.common.rendering.api.ResourceValue findItemInTheme ( java.lang.String itemName ) { com.android.ide.common.rendering.api.StyleResourceValue currentTheme = getCurrentTheme ( ) ; if ( currentTheme != null ) { return findItemInStyle ( currentTheme , itemName ) ; } return null ; }
public void addFailure ( junit.framework.Test test , junit.framework.AssertionFailedError error ) { java.lang.System.out.println ( java.lang.String.format ( "failure:%s" , com.android.compatibility.dalvik.DalvikTestRunner.DalvikTestListener.stringify ( error ) ) ) ; }
public void onDismiss ( android.content.DialogInterface dialog ) { finish ( ) ; }
public void test_plusWeeks_negativeOverYears ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.plusWeeks ( ( - 104 ) ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2005 , 7 , 17 ) ) ; }
public static java.lang.String findAddress ( java.lang.String addr ) { if ( addr == null ) { throw new java.lang.NullPointerException ( "addr is null" ) ; } return android.webkit.FindAddress.findAddress ( addr ) ; }
public void run ( ) { postTarget.removeCallbacks ( failCallback ) ; setPassState ( mVerifyOverlayViewItem , true ) ; mOverlayViewVerified = true ; goToNextState ( postTarget , failCallback ) ; }
public void testConstructor_NullSerial_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , "RSA" , 1024 , null , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , null , android.security.KeyPairGeneratorSpecTest.NOW , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when startDate is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
private static native long getNumNativeBytesAllocated ( ) ;
protected com.android.jack.test.toolchain.JackCliToolchain setVerbosityLevel ( @ javax.annotation.Nonnull com.android.jack.Options.VerbosityLevel level ) { verbosityLevel = level ; return this ; }
private void doRedraw ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { canvas.redraw ( ) ; } } ) ; }
public void testVFE1 ( ) { load ( "dot.junit.opcodes.div_int.d.T_div_int_2" , java.lang.VerifyError.class ) ; }
public void testVFE1 ( ) { load ( "dot.junit.opcodes.aput_boolean.d.T_aput_boolean_2" , java.lang.VerifyError.class ) ; }
private void onRilConnected ( ) { log ( "RIL connected." , true ) ; sendDeviceState ( android.hardware.radio.V1_0.DeviceStateType.CHARGING_STATE , mIsCharging ) ; sendDeviceState ( android.hardware.radio.V1_0.DeviceStateType.LOW_DATA_EXPECTED , mIsLowDataExpected ) ; sendDeviceState ( android.hardware.radio.V1_0.DeviceStateType.POWER_SAVE_MODE , mIsPowerSaveOn ) ; setUnsolResponseFilter ( mUnsolicitedResponseFilter , true ) ; setSignalStrengthReportingCriteria ( ) ; setLinkCapacityReportingCriteria ( ) ; }
private void makeValid ( ) { if ( ( this . bignum ) == 0 ) { this . bignum = java.math.NativeBN.BN_new ( ) ; java.math.BigInt.registry.registerNativeAllocation ( this , this . bignum ) ; } }
private void onVrStateChanged ( int state ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_VR_STATE_CHANGED ) ; event.valueInt = state ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void parse ( ) throws java.io.IOException { long headerLength = parseHeader ( mTraceFile ) ; java.nio.ByteBuffer buffer = com.android.tools.perflib.vmtrace.VmTraceParser.mapFile ( mTraceFile , headerLength ) ; parseData ( buffer ) ; computeTimingStatistics ( ) ; }
public void swap ( ) { super . swap ( ) ; producerStack.pop ( ) ; producerStack.pop ( ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; actualProducerStack.swap ( ) ; }
private android.net.IpSecTransform buildDefaultTransform ( java.net.InetAddress localAddr ) throws java.lang.Exception { try ( android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex ( localAddr ) ) { return android.net.cts.IpSecBaseTest.buildIpSecTransform ( mContext , spi , null , localAddr ) ; } }
private native boolean sdpRemoveSdpRecordNative ( int recordId ) ;
private void addChildAt ( int index , com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo child ) { mChildren.add ( index , child ) ; }
static java.util.List < vogar.target.junit.VogarTest > classToVogarTests ( java.lang.Class < ? > testClass , java.util.Collection < java.lang.String > methodNames ) { java.util.List < vogar.target.junit.VogarTest > result = new java.util.ArrayList < vogar.target.junit.VogarTest > ( ) ; vogar.target.junit.Junit4.getSuiteMethods ( result , testClass , methodNames ) ; return result ; }
public static float ReturnFloat99P25 ( ) { double imm = 99.25 ; return ( ( float ) ( imm ) ) ; }
public com.google.mockwebserver.MockResponse addHeader ( java.lang.String header ) { headers.add ( header ) ; return this ; }
public void setVerticalScrollBarEnabled ( boolean verticalScrollBarEnabled ) { if ( ( isVerticalScrollBarEnabled ( ) ) != verticalScrollBarEnabled ) { mViewFlags ^= android.view.View.SCROLLBARS_VERTICAL ; computeOpaqueFlags ( ) ; resolvePadding ( ) ; } }
public java.lang.Boolean call ( ) { return performAccessibilityAction ( action , arguments ) ; }
private ApkVerifier.Result verifyForMaxSdkVersion ( java.lang.String apkFilenameInResources , int maxSdkVersion ) throws com.android.apksig.apk.ApkFormatException , java.io.IOException , java.security.NoSuchAlgorithmException { return verify ( apkFilenameInResources , null , maxSdkVersion ) ; }
public boolean wasSuccessful ( ) { return ( mGotExitValue ) && ( mParseSuccessful ) ; }
private static native int nativeCopyNativeBinaries ( long handle , java.lang.String sharedLibraryPath , java.lang.String abiToCopy ) ;
public void showDialpadFromNewIntent ( ) { com.android.dialer.common.LogUtil.enterBlock ( "MainSearchController.showDialpadFromNewIntent" ) ; showDialpad ( false , true ) ; }
public static long $noinline$NotNot1 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ~ ( ~ arg ) ; }
public static java.lang.String getFreeWidgetId ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNode ) { java.lang.String name = com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.getBasename ( uiNode.getDescriptor ( ) . getXmlLocalName ( ) ) ; return com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.getFreeWidgetId ( uiNode.getUiRoot ( ) , name ) ; }
com.android.sched.vfs.DeflateFS.DeflateVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { return new com.android.sched.vfs.DeflateFS.DeflateVDir ( this , vfs.getVDir ( parent.getWrappedDir ( ) , name ) ) ; }
public void mergeInputLibraries ( @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.library.InputLibrary > inputLibraries ) { throw new java.lang.UnsupportedOperationException ( ) ; }
native void rsnAllocationRead ( long con , long id , java.lang.Object d , int dt , int mSize , boolean usePadding ) ;
public boolean containsFileType ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) ;
void libToExe ( @ javax.annotation.Nonnull java.io.File in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception ;
final int getInt ( int offset ) { return sun.nio.ch.NativeObject.unsafe.getInt$ ( ( offset + ( address ) ) ) ; }
private static java.time.ZoneOffset millisToOffset ( int offset ) { return java.time.ZoneOffset.ofTotalSeconds ( ( ( int ) ( java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds ( offset ) ) ) ) ; }
public static float scalb ( float f , int scaleFactor ) { return java.lang.Math.scalb ( f , scaleFactor ) ; }
public boolean isReferenced ( ) { return ( mReferenceCount.get ( ) ) > 0 ; }
public void out ( @ com.android.annotations.Nullable java.lang.String line ) { filterStdOut ( line ) ; }
public java.lang.String getText ( java.lang.Object element ) { if ( element instanceof com.android.sdklib.internal.repository.sources.SdkSource ) { return ( ( com.android.sdklib.internal.repository.sources.SdkSource ) ( element ) ) . getUrl ( ) ; } return super . getText ( element ) ; }
public void init ( org.eclipse.ui.IWorkbench workbench , org.eclipse.jface.viewers.IStructuredSelection selection ) { setHelpAvailable ( false ) ; mInitialProject = guessProject ( selection ) ; mValues.project = mInitialProject ; }
private boolean isForwardLocked ( com.android.server.pm.PackageSetting ps ) { return ( ( ps.pkgPrivateFlags ) & ( android.content.pm.ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK ) ) != 0 ; }
native void rsnAllocationRead2D ( int con , int id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , int dt ) ;
synchronized void nScriptSetVarObj ( long id , int slot , long val , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetVarObj ( curCon , id , slot , val , mUseInc ) ; }
static java.net.InetAddress [ ] getAllByName0 ( java.lang.String authHost , boolean check ) throws java.net.UnknownHostException { throw new java.lang.UnsupportedOperationException ( ) ; }
public static void doTest ( Transform t ) { t.sayHi ( ) ; art.Redefinition.addCommonTransformationResult ( "testing/Transform" , Main.CLASS_BYTES , Main.DEX_BYTES ) ; art.Redefinition.enableCommonRetransformation ( true ) ; art.Redefinition.doCommonClassRetransformation ( Transform.class ) ; t.sayHi ( ) ; }
protected int adjustDexoptNeeded ( int dexoptNeeded ) { if ( dexoptNeeded == ( dalvik.system.DexFile.NO_DEXOPT_NEEDED ) ) { return - ( dalvik.system.DexFile.DEX2OAT_FOR_FILTER ) ; } return dexoptNeeded ; }
synchronized boolean unplug ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "unplug(): device=" + device ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return mHidDeviceNativeInterface.unplug ( ) ; }
public android.net.wifi.aware.WifiAwareCharacteristics createFromParcel ( android.os.Parcel in ) { android.net.wifi.aware.WifiAwareCharacteristics c = new android.net.wifi.aware.WifiAwareCharacteristics ( in.readBundle ( ) ) ; return c ; }
public java.lang.String getLoadMessage ( ) { return mLoadMessage ; }
java.lang.String installRemotePackage ( java.lang.String remoteFilePath , boolean reinstall , java.lang.String ... extraArgs ) throws com.android.ddmlib.InstallException ;
public boolean isCleanedUp ( ) { return mIsCleanedUp ; }
public void testPackageNotInstalledForUser ( ) { notifyDexLoad ( mBarUser0 , mFooUser0.getBaseAndSplitDexPaths ( ) , mUser1 ) ; assertNoUseInfo ( mBarUser1 ) ; }
public static java.lang.String clearProperty ( java.lang.String name ) { java.lang.System.checkPropertyName ( name ) ; return ( ( java.lang.String ) ( java.lang.System.systemProperties.remove ( name ) ) ) ; }
public void doBuildPatchFile ( java.io.File olderDir , java.io.File newerFile , java.util.zip.ZipOutputStream patchOutput ) throws java.io.IOException { }
protected void log ( java.lang.String s ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , ( "[CDMAPhone] " + s ) ) ; }
public void stopNattKeepalive ( int sessionHandle , android.os.Message result ) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance ( ) . stopNattKeepalive ( sessionHandle , result ) ; }
public void setProguardFiles ( @ com.android.annotations.NonNull java.lang.Iterable < ? > proguardFileIterable ) { getProguardFiles ( ) . clear ( ) ; for ( java.lang.Object proguardFile : proguardFileIterable ) { getProguardFiles ( ) . add ( project.file ( proguardFile ) ) ; } }
public int size ( ) { return backingSet ( ) . size ( ) ; }
public void testFormatUtc ( ) { java.text.DateFormat dateFormat = new java.text.SimpleDateFormat ( "z" , java.util.Locale.ENGLISH ) ; dateFormat.setTimeZone ( libcore.java.text.SimpleDateFormatTest.UTC ) ; assertEquals ( "UTC" , dateFormat.format ( new java.util.Date ( 0 ) ) ) ; }
private java.io.File getNativeFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return new java.io.File ( dir.getFile ( ) , path.getPathAsString ( java.io.File.separatorChar ) ) ; }
public int hashCode ( ) { return java.lang.Short.hashCode ( value ) ; }
static float $opt$LongToFloat ( long a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( float ) ( a ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { if ( mCheckSortApi.getSelection ( ) ) { refreshViewerInput ( ) ; copySelection ( true ) ; syncViewerSelection ( ) ; } }
public void tearDown ( ) throws java.lang.Exception { java.net.CookieHandler.setDefault ( defaultHandler ) ; super . tearDown ( ) ; }
public static void main ( java.lang.String [ ] arg ) { com.ibm.icu.dev.test.util.SimpleFormatterTest test = new com.ibm.icu.dev.test.util.SimpleFormatterTest ( ) ; try { test.run ( arg ) ; } catch ( java.lang.Exception e ) { test.errln ( "Error testing SimpleFormatterTest" ) ; } }
protected com.android.build.gradle.internal.variant.ApkVariantOutputData doCreateOutput ( com.android.build.OutputFile.OutputType outputType , java.util.Collection < com.android.build.FilterData > filters ) { return new com.android.build.gradle.internal.variant.ApkVariantOutputData ( outputType , filters , this ) ; }
public V get ( ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException { int s = state ; if ( s <= ( java.util.concurrent.FutureTask.COMPLETING ) ) s = awaitDone ( false , 0L ) ; return report ( s ) ; }
android.os.IBinder toBinder ( android.bluetooth.le.IAdvertisingSetCallback e ) { return ( ( android.os.IInterface ) ( e ) ) . asBinder ( ) ; }
public static void tearDownOnlyOnce ( ) throws java.lang.Exception { java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class . getDeclaredMethod ( "clearAdapterService" ) ; method.setAccessible ( true ) ; method.invoke ( null ) ; com.android.bluetooth.hfp.HeadsetStateMachineTest.sAdapterService = null ; }
protected final void log ( java.lang.String s ) { android.telephony.Rlog.d ( com.android.internal.telephony.ServiceStateTracker.LOG_TAG , ( ( ( "[" + ( mPhone.getPhoneId ( ) ) ) + "] " ) + s ) ) ; }
public static void main ( java.lang.String [ ] args ) { Main.byteToLong ( ) ; Main.shortToLong ( ) ; Main.intToLong ( ) ; }
public void testNestLinkInBold ( ) { com.android.utils.HtmlBuilder builder = new com.android.utils.HtmlBuilder ( ) ; builder.add ( "Plain. " ) ; builder.beginBold ( ) ; builder.add ( "Bold. " ) ; builder.addLink ( "mylink" , "foo://bar:123" ) ; builder.endBold ( ) ; assertEquals ( "Plain. <B>Bold. <A HREF=\"foo://bar:123\">mylink</A></B>" , builder.getHtml ( ) ) ; }
private static void testFindInstancesOf ( com.android.tools.perflib.heap.Snapshot snapshot ) { com.android.tools.perflib.heap.Instance [ ] instances = com.android.tools.perflib.heap.Queries.instancesOf ( snapshot , "java.lang.String" ) ; java.lang.System.out.println ( ( ( "There are " + ( instances.length ) ) + " Strings." ) ) ; }
public abstract com.android.dialer.calllog.model.CoalescedRow.Builder setCoalescedIds ( com.android.dialer.CoalescedIds coalescedIds ) ;
public void onUiShowing ( boolean showing ) { if ( showing ) { hide ( ) ; } else { if ( ( getCall ( ) ) != null ) { show ( ) ; } } }
private static boolean isFileResource ( com.android.resources.ResourceType type ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType [ ] folderTypes = com.android.ide.eclipse.adt.internal.resources.manager.FolderTypeRelationship.getRelatedFolders ( type ) ; for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType folderType : folderTypes ) { if ( folderType != ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType.VALUES ) ) { return true ; } } return false ; }
public void handleUserUnlock ( int userId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Handling user unlock for " + userId ) ) ; } if ( ( userId == ( mCurrentUserId ) ) && ( mPendingUnlockStoreRead ) ) { handleUserUnlockOrSwitch ( mCurrentUserId ) ; } }
private void checkBounds ( int index ) { if ( ( index < 0 ) || ( ( mSize ) <= index ) ) { throw new java.lang.ArrayIndexOutOfBoundsException ( mSize , index ) ; } }
public static java.util.Map < java.lang.String , org.python.core.PyObject > runStringAndGet ( java.lang.String executablePath , java.lang.String script , java.lang.String ... names ) { return com.android.monkeyrunner.ScriptRunner.runStringAndGet ( executablePath , script , java.util.Arrays.asList ( names ) ) ; }
public static int $noinline$floatToDoubleToInt ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
public com.android.tradefed.invoker.IInvocationContext getInvocationContext ( ) { return mInvocationContext ; }
public void clearAppProfiles ( java.lang.String packageName ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.clearAppProfiles ( packageName ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
private static native java.lang.String getCurrencySymbol ( java.lang.String languageTag , java.lang.String currencyCode ) ;
private void cleanup ( ) { mWifiMonitor.stopAllMonitoring ( ) ; mDeathRecipient.unlinkToDeath ( ) ; mWifiNative.tearDown ( ) ; }
protected boolean markIfNecessary ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node ) { return ( node.addMarkerIfAbsent ( createMarkerFor ( node ) ) ) == null ; }
public java.util.Collection < com.android.jack.ir.ast.JAnnotationType > getAnnotationTypes ( ) { return com.android.jack.Jack.getUnmodifiableCollections ( ) . getUnmodifiableCollection ( com.android.jack.util.AnnotationUtils.getAnnotationTypes ( annotations ) ) ; }
public java.lang.String toString ( ) { android.text.format.Time.TimeCalculator calculator = new android.text.format.Time.TimeCalculator ( this . timezone ) ; calculator.copyFieldsFromTime ( this ) ; return calculator.toStringInternal ( ) ; }
public java.util.Map.Entry < K , V > lowerEntry ( K key ) { return getNearEntry ( key , java.util.concurrent.ConcurrentSkipListMap.LT ) ; }
private static native void nativePostForkChild ( long token , int runtimeFlags , boolean isSystemServer , boolean isZygote , java.lang.String instructionSet ) ;
private android.renderscript.Byte3 pack_b3 ( byte [ ] val ) { assert ( val.length ) == 3 ; return new android.renderscript.Byte3 ( val [ 0 ] , val [ 1 ] , val [ 2 ] ) ; }
java.lang.String getTestedApplicationId ( ) ;
private static native java.lang.String formatDateInterval ( java.lang.String skeleton , java.lang.String localeName , java.lang.String timeZoneName , long fromDate , long toDate ) ;
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailViewHolder.onClick" , "voicemail id: %d" , viewHolderId ) ; if ( isViewHolderExpanded ) { collapseViewHolder ( ) ; } else { expandViewHolder ( ) ; voicemailViewHolderListener.onViewHolderExpanded ( this ) ; } }
public void remove ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor findLayoutParams ( com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor groupClass ) { com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor [ ] innerClasses = groupClass.getDeclaredClasses ( ) ; for ( com.android.ide.eclipse.adt.internal.sdk.IAndroidClassLoader.IClassDescriptor innerClass : innerClasses ) { if ( innerClass.getSimpleName ( ) . equals ( SdkConstants.CLASS_NAME_LAYOUTPARAMS ) ) { return innerClass ; } } return null ; }
public void onDestroy ( ) { if ( mRegistered ) { unregisterReceiver ( mCancelReceiver ) ; mRegistered = false ; } stopForeground ( true ) ; }
public void testToolsAnnotationRemoval ( ) throws ManifestMerger2.MergeFailureException , java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { com.android.sdklib.mock.MockLog mockLog = new com.android.sdklib.mock.MockLog ( ) ; java.lang.String input = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application android:label=\"@string/lib_name\" " ) + " tools:replace=\"label\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.io.File tmpFile = com.android.manifmerger.ManifestMerger2SmallTest.inputAsFile ( "testToolsAnnotationRemoval" , input ) ; assertTrue ( tmpFile.exists ( ) ) ; try { com.android.manifmerger.MergingReport mergingReport = com.android.manifmerger.ManifestMerger2.newMerger ( tmpFile , mockLog , ManifestMerger2.MergeType.APPLICATION ) . withFeatures ( ManifestMerger2.Invoker.Feature.REMOVE_TOOLS_DECLARATIONS ) . merge ( ) ; assertEquals ( MergingReport.Result.WARNING , mergingReport.getResult ( ) ) ; com.android.manifmerger.XmlDocument mergedDocument = mergingReport.getMergedDocument ( ) . get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > applicationNode = mergedDocument.getByTypeAndKey ( ManifestModel.NodeTypes.APPLICATION , null ) ; assertTrue ( applicationNode.isPresent ( ) ) ; java.lang.String replaceAttribute = applicationNode.get ( ) . getXml ( ) . getAttributeNS ( SdkConstants.TOOLS_URI , "replace" ) ; assertTrue ( com.google.common.base.Strings.isNullOrEmpty ( replaceAttribute ) ) ; java.lang.System.out.println ( mergedDocument.prettyPrint ( ) ) ; mergedDocument.prettyPrint ( ) ; } finally { assertTrue ( tmpFile.delete ( ) ) ; } }
public final byte [ ] getIV ( ) { return getSpi ( ) . engineGetIV ( ) ; }
public void testZip64Support ( ) throws java.io.IOException { try { createZipFile ( ( 64 * 1024 ) , 0 ) ; fail ( ) ; } catch ( java.util.zip.ZipException expected ) { } }
public java.util.List < com.android.dialer.simulator.Simulator.Event > getEvents ( ) { return events ; }
public void onBrEdrDown ( ) { mAdapterStateMachine.sendMessage ( AdapterState.USER_TURN_OFF ) ; }
public boolean isImmersive ( android.os.IBinder token ) { synchronized ( this ) { com.android.server.am.ActivityRecord r = mMainStack.isInStackLocked ( token ) ; if ( r == null ) { throw new java.lang.IllegalArgumentException ( ) ; } return r.immersive ; } }
public boolean onUnbind ( android.content.Intent intent ) { mWifiWakeupController.stop ( ) ; mWifiNotificationController.stop ( ) ; return super . onUnbind ( intent ) ; }
void load ( java.util.Collection < com.android.sdklib.devices.Device > deviceList ) throws java.io.IOException { java.io.File file = getManualFile ( ) ; if ( file.exists ( ) ) { load ( file , deviceList ) ; } }
private static DesugarDeps.Type wrapType ( java.lang.String internalName ) { return DesugarDeps.Type.newBuilder ( ) . setBinaryName ( internalName ) . build ( ) ; }
public void testConstructor1 ( ) { assertEquals ( java.lang.Integer.MAX_VALUE , new java.util.concurrent.PriorityBlockingQueue ( SIZE ) . remainingCapacity ( ) ) ; }
public boolean isExtendedApduSupported ( ) { return ( ( mAtr ) != null ) && ( mAtr.isExtendedApduSupported ( ) ) ; }
public static com.android.sdklib.internal.project.ProjectProperties create ( com.android.sdklib.io.IAbstractFolder projectFolder , com.android.sdklib.internal.project.ProjectProperties.PropertyType type ) { return new com.android.sdklib.internal.project.ProjectProperties ( projectFolder , new java.util.HashMap < java.lang.String , java.lang.String > ( ) , type ) ; }
public boolean hasChanged ( @ com.android.annotations.Nullable com.android.utils.ILogger log ) { return mLocalSdk.hasChanged ( java.util.EnumSet.of ( PkgType.PKG_PLATFORMS , PkgType.PKG_ADDONS , PkgType.PKG_BUILD_TOOLS ) ) ; }
public void stopTrackingWifiChange ( android.net.wifi.WifiScanner.WifiChangeListener listener ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void setNetworkSpecifier ( android.net.NetworkSpecifier networkSpecifier ) { mNetworkCapabilities.setNetworkSpecifier ( networkSpecifier ) ; mNetworkAgent.sendNetworkCapabilities ( mNetworkCapabilities ) ; }
public static android.renderscript.cts.Floaty abs ( android.renderscript.cts.Floaty a ) { android.renderscript.cts.Floaty c = new android.renderscript.cts.Floaty ( java.lang.Math.abs ( a.mValue ) ) ; c.mError = a.mError ; return c ; }
int lock ( java.io.FileDescriptor fd , boolean blocking , long pos , long size , boolean shared ) throws java.io.IOException { dalvik.system.BlockGuard.getThreadPolicy ( ) . onWriteToDisk ( ) ; return sun.nio.ch.FileDispatcherImpl.lock0 ( fd , blocking , pos , size , shared ) ; }
public java.util.List < com.android.game.qualification.ApkInfo > parse ( java.io.File file ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { try ( java.io.InputStream is = new java.io.FileInputStream ( file ) ) { return parse ( is ) ; } }
public void prepareProgramForExecution ( java.lang.String programName ) { if ( ! ( dexfuzz.Options.executeOnHost ) ) { device.pushProgramToDevice ( programName , testLocation ) ; } if ( needsCleanCodeCache ) { device.cleanCodeCache ( architecture , testLocation , programName ) ; } }
private native int genLibs ( java.lang.String working_dir , java.lang.String sysroot , boolean for_test ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onButtonDelete ( ) ; }
private com.android.internal.util.Predicate < android.test.suitebuilder.TestMethod > getNotAnnotationPredicate ( java.lang.String annotationClassName ) { java.lang.Class < ? extends java.lang.annotation.Annotation > annotationClass = getAnnotationClass ( annotationClassName ) ; if ( annotationClass != null ) { return android.test.suitebuilder.TestPredicates.not ( android.test.suitebuilder.TestPredicates.hasAnnotation ( annotationClass ) ) ; } return null ; }
public void withRowShort_columnIndexAndValueMatcher ( ) { org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.CursorMatchers.withRowShort ( 1 , android.support.test.espresso.matcher.CursorMatchersTest.SHORT_VALUE_MATCHER ) . matches ( cursor ) ) ; }
private void rebootRecoveryWithCommand ( java.lang.String command , boolean update ) { try { mService.rebootRecoveryWithCommand ( command , update ) ; } catch ( android.os.RemoteException ignored ) { } }
public void validateConfigWithoutHomeSp ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = android.net.wifi.hotspot2.PasspointConfigurationTest.createConfig ( ) ; config.setHomeSp ( null ) ; org.junit.Assert.assertFalse ( config.validate ( ) ) ; }
public static java.io.FileDescriptor forProto ( int nlProto ) throws android.system.ErrnoException { final java.io.FileDescriptor fd = android.system.Os.socket ( android.system.OsConstants.AF_NETLINK , android.system.OsConstants.SOCK_DGRAM , nlProto ) ; android.system.Os.setsockoptInt ( fd , android.system.OsConstants.SOL_SOCKET , android.system.OsConstants.SO_RCVBUF , android.net.netlink.NetlinkSocket.SOCKET_RECV_BUFSIZE ) ; return fd ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNewInstance newInstance ) { com.android.jack.ir.ast.JClass returnType = newInstance.getType ( ) ; trace ( returnType ) ; com.android.jack.ir.ast.JMethodIdWide methodId = newInstance.getMethodIdWide ( ) ; trace ( methodId , returnType , JPrimitiveTypeEnum.VOID.getType ( ) , false ) ; }
public static long IntNonmatCond_LongVarVar ( int a , int b , long x , long y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return a > b ? x : y ; }
static java.util.Collection < java.lang.reflect.Field > getAllAnnotatedFields ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( com.google.common.collect.ImmutableList.< java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > of ( optionsClass ) ) ; return data.getFieldsForClass ( optionsClass ) ; }
public static com.google.common.base.Stopwatch createStarted ( ) { return new com.google.common.base.Stopwatch ( ) . start ( ) ; }
public static com.android.ddmlib.Log.LogLevel getByLetterString ( java.lang.String letter ) { if ( ! ( letter.isEmpty ( ) ) ) { return com.android.ddmlib.Log.LogLevel.getByLetter ( letter.charAt ( 0 ) ) ; } return null ; }
public void test_plus_longTemporalUnit_positiveMonths ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.plus ( 7 , java.time.temporal.ChronoUnit.MONTHS ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2008 , 2 , 15 ) ) ; }
void addScanEvent ( com.android.bluetooth.BluetoothMetricsProto.ScanEvent event ) { synchronized ( mScanEvents ) { if ( ( mScanEvents.size ( ) ) == ( com.android.bluetooth.gatt.GattService.NUM_SCAN_EVENTS_KEPT ) ) { mScanEvents.remove ( 0 ) ; } mScanEvents.add ( event ) ; } }
private static java.lang.String getPrimaryInstructionSet ( android.content.pm.ApplicationInfo info ) { if ( ( info.primaryCpuAbi ) == null ) { return com.android.server.pm.InstructionSets.getPreferredInstructionSet ( ) ; } return dalvik.system.VMRuntime.getInstructionSet ( info.primaryCpuAbi ) ; }
public static float $noinline$floatAddSubSimplifyArg2 ( float x , float y ) { float sum = x + y ; return sum - y ; }
protected void onResume ( ) { super . onResume ( ) ; setNextLayout ( ) ; }
public void test_SCSU_replacement_character ( ) throws java.lang.Exception { assertDecodes ( java.nio.charset.Charset.forName ( "SCSU" ) , "�" , 14 , 255 ) ; assertEncodes ( java.nio.charset.Charset.forName ( "SCSU" ) , "�" , 14 , 255 ) ; }
int getMessageType ( ) { if ( ( mEnvelope.serviceCategory ) != 0 ) { return com.android.internal.telephony.cdma.sms.SmsEnvelope.MESSAGE_TYPE_BROADCAST ; } else { return com.android.internal.telephony.cdma.sms.SmsEnvelope.MESSAGE_TYPE_POINT_TO_POINT ; } }
public java.lang.String apply ( com.android.jack.library.InputLibrary library ) { return ( "\"" + ( library.getLocation ( ) . getDescription ( ) ) ) + "\"" ; }
public static native int EVP_AEAD_CTX_seal ( long evpAead , byte [ ] key , int tagLengthInBytes , byte [ ] out , int outOffset , byte [ ] nonce , byte [ ] in , int inOffset , int inLength , byte [ ] ad ) throws javax.crypto.BadPaddingException ;
public void clearLastInputMethodWindowForTransition ( final android.os.IBinder token ) { synchronized ( mH ) { try { mService.clearLastInputMethodWindowForTransition ( token ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public void handleEvent ( org.eclipse.swt.widgets.Event event ) { onProjectFieldModified ( ) ; }
public void run ( ) { onSizeChanged ( w , h , ow , oh ) ; }
protected void onDestroy ( ) { android.util.Log.e ( "Suid" , "onDestroy" ) ; super . onDestroy ( ) ; if ( ( mFindSuidFilesTask ) != null ) { mFindSuidFilesTask.cancel ( true ) ; } }
public void testTlvInvalidSizeT3L1 ( ) { android.net.wifi.aware.TlvBufferUtils.TlvConstructor tlv10 = new android.net.wifi.aware.TlvBufferUtils.TlvConstructor ( 3 , 1 ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ! ( mTerminated ) ) { mCloseGuard.warnIfOpen ( ) ; destroy ( ) ; } } finally { super . finalize ( ) ; } }
public void onResume ( ) { mIm.registerInputDeviceListener ( this , null ) ; }
public static android.bluetooth.BluetoothDevice getRemoteDevice ( ) { return com.android.bluetooth.map.BluetoothMapService.sRemoteDevice ; }
public boolean onPreDraw ( ) { if ( ! ( shouldAdjustKeySizes ( ) ) ) { return true ; } adjustKeySizes ( ) ; getViewTreeObserver ( ) . removeOnPreDrawListener ( this ) ; return false ; }
public static float ReturnFloat34 ( ) { long imm = Main.$inline$long ( 34L ) ; return ( ( float ) ( imm ) ) ; }
protected byte [ ] engineDoFinal ( ) { final org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = ctx ; final byte [ ] output = org.conscrypt.NativeCrypto.EVP_DigestSignFinal ( ctxLocal ) ; resetContext ( ) ; return output ; }
public void testE5 ( ) { loadAndRun ( "dot.junit.opcodes.invoke_interface.d.T_invoke_interface_12" , java.lang.UnsatisfiedLinkError.class , new dot.junit.opcodes.invoke_interface.ITestImpl ( ) ) ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { return null ; }
public void onDialpadShown ( ) { com.android.dialer.common.LogUtil.enterBlock ( "MainSearchController.onDialpadShown" ) ; dialpadFragment.slideUp ( true ) ; hideBottomNav ( ) ; }
int $noinline$testThisWithStaticCall ( ) { return Main.doStaticNativeCallRef ( ) ; }
public void copyTo ( short [ ] d ) { validateIsInt16OrFloat16 ( ) ; copyTo ( d , Element.DataType.SIGNED_16 , d.length ) ; }
public void telephonySetSimPowerState ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "state" ) java.lang.Integer state ) { mTelephonyManager.setSimPowerState ( state ) ; }
synchronized void nScriptSetTimeZone ( long script , byte [ ] timeZone , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetTimeZone ( curCon , script , timeZone , mUseInc ) ; }
public void testGetActivityThemes4 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " package=\'com.android.unittest\'>\n" + " <application\n" ) + " android:label=\'@string/app_name\'\n" ) + " android:name=\'.app.TestApp\' android:icon=\'@drawable/app_icon\'>\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.prefs.PrefsActivity\'\n" ) + " android:label=\'@string/prefs_title\' />\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.app.IntroActivity\'\n" ) + " android:label=\'@string/intro_title\'\n" ) + " android:theme=\'@android:style/Theme.Dialog\' />\n" ) + " </application>\n" ) + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) + "" ) ) ) ; assertEquals ( "com.android.unittest" , info.getPackage ( ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenLayoutSize.XLARGE ) ) ) ; java.util.Map < java.lang.String , java.lang.String > map = info.getActivityThemes ( ) ; assertEquals ( map.toString ( ) , 1 , map.size ( ) ) ; assertNull ( map.get ( "com.android.unittest.prefs.PrefsActivity" ) ) ; assertEquals ( "@android:style/Theme.Dialog" , map.get ( "com.android.unittest.app.IntroActivity" ) ) ; }
void unhold ( ) { com.android.internal.util.Preconditions.checkNotNull ( mConnectionService ) ; if ( ( mState ) == ( CallState.ON_HOLD ) ) { mConnectionService.unhold ( this ) ; android.telecom.Log.addEvent ( this , LogUtils.Events.REQUEST_UNHOLD ) ; } }
public boolean setConfiguration ( java.lang.String folderName ) { java.lang.String [ ] folderSegments = folderName.split ( AndroidConstants.RES_QUALIFIER_SEP ) ; return setConfiguration ( folderSegments ) ; }
public int getCompilerReleaseCode ( ) { return com.android.jack.Jack.getVersion ( ) . getReleaseCode ( ) ; }
synchronized long nAllocationGetType ( long id ) { validate ( ) ; return rsnAllocationGetType ( mContext , id ) ; }
public void testCustomNamespace ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/namespace2.xml:9: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" + ( ( " orientation=\"true\">\n" + " ~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintFiles ( "res/layout/namespace2.xml" ) ) ; }
public void requestR1ANQPElementsWithRC ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mHandler.requestANQP ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1_ANQP_WITH_RC ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mManager.requestANQPElements ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_ANQP_KEY , true , false ) ) ; }
public void setBasename ( java.lang.String baseName ) { java.lang.System.out.println ( ( "WARNNG: Using deprecated 'basename' attribute in ApkBuilderTask." + "Use 'apkfilepath' (path) instead." ) ) ; mBaseName = baseName ; }
public void aname ( char [ ] buff , int offset , int length ) throws org.xml.sax.SAXException { if ( ( theNewElement ) == null ) return ; theAttributeName = makeName ( buff , offset , length ) . toLowerCase ( java.util.Locale.ROOT ) ; }
public java.util.regex.Matcher region ( int start , int end ) { return reset ( originalInput , start , end ) ; }
public void dumpProto ( com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder builder ) { synchronized ( mScanEvents ) { builder.addAllScanEvent ( mScanEvents ) ; } }
public void capabilitiesStatusChanged ( android.telephony.ims.Capabilities c ) { notifyCapabilitiesStatusChanged ( c ) ; }
public boolean isValidForUi ( ) { return ( mType ) != ( com.android.sdklib.internal.avd.HardwareProperties.ValueType.STRING ) ; }
public synchronized void clearBackingStore ( ) { if ( ( mImageCacheService ) == null ) { com.android.mms.util.CacheManager.clear ( mContext ) ; } else { getImageCacheService ( ) . clear ( ) ; mImageCacheService = null ; } }
public static float FloatMultiplication ( ) { float a ; float b ; float c ; a = Main.$inline$float ( 7.0F ) ; b = Main.$inline$float ( 3.0F ) ; c = a * b ; return c ; }
private void cacheMethod ( @ javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper.SignatureKey key , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { assert ! ( methods.containsKey ( key ) ) ; methods.put ( key , method ) ; }
public void postInvalidateOnAnimation ( android.view.View view , int left , int top , int right , int bottom ) { view.postInvalidate ( left , top , right , bottom ) ; }
public boolean perform ( ) { try { java.lang.Thread.sleep ( Main.Sleep.SLEEP_TIME ) ; } catch ( java.lang.InterruptedException ignored ) { } return true ; }
int checkCallingPermission ( java.lang.String permission ) { return checkPermission ( permission , android.os.Binder.getCallingPid ( ) , android.os.UserHandle.getAppId ( android.os.Binder.getCallingUid ( ) ) ) ; }
public java.util.List < com.android.jack.ir.ast.JAnnotationLiteral > getAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationType annotationType ) { loader.ensureAnnotation ( this , annotationType ) ; return annotations.getAnnotation ( annotationType ) ; }
protected void addRevocablePermissions ( @ com.android.annotations.NonNull java.util.Set < java.lang.String > result , @ com.android.annotations.NonNull com.android.tools.lint.checks.PermissionHolder revocable ) { left.addRevocablePermissions ( result , revocable ) ; right.addRevocablePermissions ( result , revocable ) ; }
public static long ShlLongInt ( ) { long lhs = Main.$inline$long ( 3L ) ; int rhs = Main.$inline$int ( 2 ) ; return lhs << rhs ; }
public void addProfile ( com.android.bluetooth.btservice.ProfileService profile ) { synchronized ( mProfiles ) { if ( ! ( mProfiles.contains ( profile ) ) ) { mProfiles.add ( profile ) ; } } }
public java.lang.String [ ] getIsimImpu ( ) { mContext.enforceCallingOrSelfPermission ( com.android.internal.telephony.PhoneSubInfo.READ_PRIVILEGED_PHONE_STATE , "Requires READ_PRIVILEGED_PHONE_STATE" ) ; com.android.internal.telephony.uicc.IsimRecords isim = mPhone.getIsimRecords ( ) ; if ( isim != null ) { return isim.getIsimImpu ( ) ; } else { return null ; } }
public boolean switchSlots ( int [ ] physicalSlots ) { enforceModifyPermission ( ) ; return ( ( java.lang.Boolean ) ( sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_SWITCH_SLOTS , physicalSlots ) ) ) ; }
private static void loge ( java.lang.String msg ) { android.util.Log.e ( com.android.cellbroadcastreceiver.CellBroadcastChannelManager.TAG , msg ) ; }
public int getStrength ( ) { return strength_ICU_Java ( icuColl.getStrength ( ) ) ; }
public android.net.IpSecTransform.Builder setUnderlyingNetwork ( android.net.Network net ) { mConfig.setNetwork ( net ) ; return this ; }
public static java.security.Provider getProvider ( java.lang.String name ) { if ( name == null ) { return null ; } synchronized ( org.apache.harmony.security.fortress.Services.providers ) { return org.apache.harmony.security.fortress.Services.providersNames.get ( name ) ; } }
private void sendMessage ( int what , java.lang.Object obj ) { sendMessage ( what , obj , 0 , 0 , false ) ; }
void removeValuesForKey ( java.lang.Object key ) { multimap.keySet ( ) . remove ( key ) ; }
private int getWifiBadgeResourceForEnum ( int badgeEnum ) { switch ( badgeEnum ) { case android.net.ScoredNetwork.BADGING_SD : return R.drawable.ic_signal_wifi_badged_sd ; case android.net.ScoredNetwork.BADGING_HD : return R.drawable.ic_signal_wifi_badged_hd ; case android.net.ScoredNetwork.BADGING_4K : return R.drawable.ic_signal_wifi_badged_4k ; default : throw new java.lang.IllegalArgumentException ( ( "No badge resource for enum :" + badgeEnum ) ) ; } }
public final void addCallbackBuffer ( byte [ ] callbackBuffer ) { _addCallbackBuffer ( callbackBuffer , android.hardware.Camera.CAMERA_MSG_PREVIEW_FRAME ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; mTestImsService = new android.telephony.ims.TestImsService ( mMockContext ) ; mTestImsServiceBinder = ( ( com.android.ims.internal.IImsServiceController ) ( mTestImsService.onBind ( new android.content.Intent ( com.android.internal.telephony.ims.ImsResolver.SERVICE_INTERFACE ) ) ) ) ; }
public void removeWindowLw ( com.android.internal.policy.impl.WindowState win ) { if ( ( mStatusBar ) == win ) { mStatusBar = null ; } else if ( ( mKeyguard ) == win ) { mKeyguard = null ; } else { mStatusBarPanels.remove ( win ) ; } }
synchronized void nAllocationCopyToBitmap ( long alloc , android.graphics.Bitmap bmp ) { validate ( ) ; rsnAllocationCopyToBitmap ( mContext , alloc , bmp ) ; }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.setEncapType ( android.net.IpSecTransform.ENCAP_ESPINUDP ) ; mConfig.setEncapSocketResourceId ( localSocket.getResourceId ( ) ) ; mConfig.setEncapRemotePort ( remotePort ) ; return this ; }
public static void console ( java.lang.String executablePath ) { com.android.monkeyrunner.ScriptRunner.initPython ( executablePath ) ; org.python.util.InteractiveConsole python = new org.python.util.JLineConsole ( ) ; python.interact ( ) ; }
public synchronized int read ( byte [ ] target , int byteOffset , int byteCount ) throws java.io.IOException { java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap ( target , byteOffset , byteCount ) ; java.nio.channels.Channels.checkBlocking ( channel ) ; return channel.read ( buffer ) ; }
public void run ( ) { com.android.hierarchyviewer.HierarchyViewerApplication.getMainWindow ( ) . close ( ) ; }
public boolean configureNeighborDiscoveryOffload ( boolean enabled ) { return mWifiVendorHal.configureNeighborDiscoveryOffload ( enabled ) ; }
public void run ( ) { synchronized ( Main.MyThread.class ) { ++ ( Main.MyThread.mCount ) ; } }
public void onSupplementaryServiceIndication ( android.telephony.ims.ImsSsData ssData ) { if ( ( mSsIndicationRegistrant ) != null ) { mSsIndicationRegistrant.notifyResult ( ssData ) ; } }
void setLogicalToPhysicalSlotMapping ( int [ ] physicalSlots , android.os.Message result ) ;
protected void onPostExecute ( java.util.List < com.android.tv.data.Program > programs ) { mPrograms = ( programs == null ) ? java.util.Collections.EMPTY_LIST : programs ; onProgramsUpdated ( ) ; }
public void addWindowChangeListener ( com.android.hierarchyviewerlib.device.WindowUpdater.IWindowChangeListener l ) { if ( ( ( mViewServerInfo ) != null ) && ( ( mViewServerInfo.protocolVersion ) >= 3 ) ) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges ( l , mDevice ) ; } }
private static long getContactId ( android.database.Cursor cursor ) { return cursor.getLong ( ContactsCursorLoader.CONTACT_ID ) ; }
public java.lang.String getDescription ( ) { if ( getVariantConfiguration ( ) . hasFlavors ( ) ) { return java.lang.String.format ( "Test build for the %s%s build" , getCapitalizedFlavorName ( ) , getCapitalizedBuildTypeName ( ) ) ; } else { return java.lang.String.format ( "Test build for the %s build" , getCapitalizedBuildTypeName ( ) ) ; } }
public com.android.jack.ir.ast.JFieldRef getInnerPath ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression capturedVar , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass innerClass , @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression instance ) { assert captureVar2InnerPath.containsKey ( capturedVar ) ; com.android.jack.ir.ast.JField innerField = captureVar2InnerPath.get ( capturedVar ) ; return new com.android.jack.ir.ast.JFieldRef ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , instance , innerField.getId ( ) , innerClass ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%1$s|%2$s|%3$s|%4$s|%5$s" , mAnyDensity , mResizeable , mSmallScreens , mNormalScreens , mLargeScreens ) ; }
private final native byte [ ] readInt8VectorAsArray ( ) ;
public java.util.List < com.android.ide.common.rendering.api.AttrResourceValue > getAllAttributes ( ) { return mAttrs ; }
public com.android.ide.common.rendering.api.ResourceValue findItemInStyle ( com.android.ide.common.rendering.api.StyleResourceValue style , java.lang.String attrName ) { return null ; }
public static boolean shouldShowProgressTimestamps ( ) { return java.lang.Boolean.getBoolean ( com.google.gct.testing.CloudTestingUtils.SHOW_GOOGLE_CLOUD_TESTING_TIMESTAMPS ) ; }
protected java.util.Properties createProps ( ) { java.util.Properties props = super . createProps ( ) ; props.setProperty ( PkgProps.MIN_TOOLS_REV , "3.0.1" ) ; return props ; }
private native int getInt ( java.lang.Object object , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public void enter ( ) { if ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG ) android.util.Log.d ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Local hotspot " + ( mIfaceName ) ) ) ; sendInterfaceState ( IControlsTethering.STATE_LOCAL_HOTSPOT ) ; }
static double $opt$ByteToDouble ( byte a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( double ) ( a ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { mAllocationViewer.refresh ( ) ; }
public void testInitialize ( ) { org.junit.Assert.assertNotNull ( com.android.bluetooth.mapclient.MapClientService.getMapClientService ( ) ) ; }
boolean isManifestEntryRequired ( ) ;
public void test005 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST005 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addProperty ( CodeItemBuilder.DEX_OPTIMIZE.getName ( ) , "true" ) . compileAndRunTest ( ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { refreshTags ( ) ; refreshApps ( ) ; }
protected boolean isModified ( java.io.File toFile ) throws java.io.IOException { return ( myChecksum ) != ( myPatch.digestFile ( toFile , myPatch.isNormalized ( ) ) ) ; }
public void onSaveInstanceState ( final android.os.Bundle outState ) { outState.putByteArray ( ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN , mToken ) ; outState.putBoolean ( com.android.settings.fingerprint.FingerprintSettings.FingerprintSettingsFragment.KEY_LAUNCHED_CONFIRM , mLaunchedConfirm ) ; outState.putSerializable ( "mFingerprintsRenaming" , mFingerprintsRenaming ) ; }
public void scanAvailableAsecs ( ) { updateExternalMediaStatusInner ( true , false , false ) ; if ( mShouldRestoreconData ) { com.android.server.pm.SELinuxMMAC.setRestoreconDone ( ) ; mShouldRestoreconData = false ; } }
public long getSeen ( ) { evictOldScanResults ( ) ; long seen = 0 ; for ( android.net.wifi.ScanResult result : mScanResultCache.values ( ) ) { if ( ( result.timestamp ) > seen ) { seen = result.timestamp ; } } return seen ; }
public void mouseDown ( org.eclipse.swt.events.MouseEvent e ) { handleMouseEvent ( e ) ; }
private int getUnknownSourcesSettings ( ) { return android.provider.Settings.Secure.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS , ( - 1 ) ) ; }
public void test_twoJar_diff_getResourceAsStream ( ) throws java.lang.Exception { createLoaderAndCallMethod ( "test.TestMethods" , "test_diff_getResourceAsStream" , jar1 , jar2 ) ; }
public void test_withYear_int_normal ( ) { java.time.LocalDate t = tck.java.time.TCKLocalDate.TEST_2007_07_15.withYear ( 2008 ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2008 , 7 , 15 ) ) ; }
public com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return new com.android.sched.vfs.OutputZipVFile ( zos , new java.util.zip.ZipEntry ( path.getPathAsString ( getSeparator ( ) ) ) , zipFile , this ) ; }
protected void update ( byte [ ] b ) { checkNotDone ( ) ; digest.update ( b ) ; }
public final void testEquals_Null ( ) { com.android.ide.common.api.Point p = new com.android.ide.common.api.Point ( 1 , 2 ) ; assertFalse ( p.equals ( null ) ) ; }
com.android.build.gradle.internal.model.DefaultAndroidProject addBuildType ( @ com.android.annotations.NonNull com.android.builder.model.BuildTypeContainer buildTypeContainer ) { buildTypes.put ( buildTypeContainer.getBuildType ( ) . getName ( ) , buildTypeContainer ) ; return this ; }
public void registerPage ( java.lang.Class < ? extends com.android.sdkuilib.internal.repository.UpdaterPage > pageClass , com.android.sdkuilib.internal.repository.UpdaterPage.Purpose purpose ) { mWindow.registerPage ( pageClass , purpose ) ; }
public void validatePolicyWithInvalidPolicyUpdate ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; policy.setPolicyUpdate ( new android.net.wifi.hotspot2.pps.UpdateParameter ( ) ) ; org.junit.Assert.assertFalse ( policy.validate ( ) ) ; }
public void testVP8EncodeDecodeVideoFromBufferToBuffer720p ( ) throws java.lang.Exception { setParameters ( 1280 , 720 , 6000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_VP8 , true , false ) ; encodeDecodeVideoFromBuffer ( false ) ; }
protected com.android.sdklib.internal.repository.archives.ArchiveInstaller createArchiveInstaler ( ) { return new com.android.sdklib.internal.repository.archives.ArchiveInstaller ( ) ; }
public static void write ( byte [ ] from , java.io.File to ) throws java.io.IOException { com.google.common.io.Files.asByteSink ( to ) . write ( from ) ; }
protected static com.android.sched.vfs.InputVFile getJackFile ( @ javax.annotation.Nonnull java.lang.String typeName ) { try { assert ( com.android.jack.experimental.incremental.JackIncremental.incrementalInputLibrary ) != null ; return com.android.jack.experimental.incremental.JackIncremental.incrementalInputLibrary.getFile ( FileType.JAYCE , new com.android.sched.vfs.VPath ( typeName , com.android.jack.experimental.incremental.JackIncremental.fileSeparator ) ) ; } catch ( com.android.jack.library.FileTypeDoesNotExistException e ) { throw new java.lang.AssertionError ( e ) ; } }
public void onPause ( ) { super . onPause ( ) ; com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( "onPause - mIsResponseSent[" + ( mIsResponseSent ) ) + "]" ) ) ; if ( ( mPopupMenu ) != null ) { mPopupMenu.dismiss ( ) ; } }
final boolean casBusy ( ) { return com.google.common.cache.Striped64.busyUpdater.compareAndSet ( this , 0 , 1 ) ; }
public void run ( ) { new android.theme.app.HoloDeviceActivity.GenerateBitmapTask ( view , layoutName ) . execute ( ) ; }
public java.lang.String apply ( com.google.gct.testing.CloudConfigurationDimension dimension ) { return getStringRepresentation ( dimension ) ; }
static void constantIndexing6 ( int [ ] array ) { array [ 3 ] = 111 ; array [ 4 ] = 111 ; }
public void increaseRetryCount ( ) { ( mRetryCount ) ++ ; if ( ( mRetryCount ) > ( mMaxRetryCount ) ) { mRetryCount = mMaxRetryCount ; } if ( com.android.internal.telephony.RetryManager.DBG ) log ( ( "increaseRetryCount: " + ( mRetryCount ) ) ) ; }
public com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor create ( java.lang.String xmlLocalName , java.lang.String uiName , java.lang.String nsUri , java.lang.String tooltip , com.android.ide.common.api.IAttributeInfo attrInfo ) { return new com.android.ide.eclipse.adt.internal.editors.descriptors.ReferenceAttributeDescriptor ( com.android.resources.ResourceType.DRAWABLE , xmlLocalName , uiName , nsUri , tooltip , new com.android.ide.common.resources.platform.AttributeInfo ( xmlLocalName , new com.android.ide.common.api.IAttributeInfo.Format [ ] { com.android.ide.common.api.IAttributeInfo.Format.REFERENCE } ) ) ; }
private int getAvailableLabel ( ) { int candidate = getMinimumUnreservedLabel ( ) ; for ( com.android.dx.rop.code.BasicBlock bb : result ) { int label = bb.getLabel ( ) ; if ( label >= candidate ) { candidate = label + 1 ; } } return candidate ; }
public void testRange ( ) throws java.lang.Exception { checkFormat ( com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences.create ( ) , "res/layout-xlarge/layout.xml" , "<LinearLayout><Button foo=\"bar\"></Button><CheckBox/></LinearLayout>" , ( "\n" + ( ( ( " <Button foo=\"bar\" >\n" + " </Button>\n" ) + "\n" ) + " <CheckBox />\n" ) ) , "\n" , "Button" , false , "CheckBox" ) ; }
static int $opt$noinline$LongToInt ( long a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( int ) ( a ) ) ; }
public void supplyPin ( java.lang.String pin , android.os.Message onComplete ) { mPhone.mCM.supplyIccPin ( pin , onComplete ) ; }
public void test_minus_longTemporalUnit_timeNotAllowed ( ) { tck.java.time.TCKLocalDate.TEST_2007_07_15.minus ( 7 , java.time.temporal.ChronoUnit.HOURS ) ; }
public void replaceWith ( com.android.ide.common.layoutlib.ResourceValue value ) { mValue = value.mValue ; }
protected void visitString ( int type , int index ) { assert ( cstIndexMap ) != null ; constantValue = cstIndexMap.getCstString ( index ) ; }
public void test_getBucketIndex_NPE ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex.ImmutableIndex ii = libcore.icu.AlphabeticIndexTest.createIndex ( java.util.Locale.US ) ; try { ii.getBucketIndex ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
boolean isLeadingZeroPossible ( int countryCallingCode ) { com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata mainMetadataForCallingCode = getMetadataForRegionOrCallingCode ( countryCallingCode , getRegionCodeForCountryCode ( countryCallingCode ) ) ; if ( mainMetadataForCallingCode == null ) { return false ; } return mainMetadataForCallingCode.leadingZeroPossible ; }
native void rsnAllocationRead ( long con , long id , short [ ] d ) ;
private java.lang.String toHex ( java.lang.String password ) { if ( password == null ) { return "" ; } byte [ ] bytes = password.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; return new java.lang.String ( libcore.util.HexEncoding.encode ( bytes ) ) ; }
public com.google.i18n.phonenumbers.Phonenumber.PhoneNumber parse ( java.lang.CharSequence numberToParse , java.lang.String defaultRegion ) throws com.google.i18n.phonenumbers.NumberParseException { com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber = new com.google.i18n.phonenumbers.Phonenumber.PhoneNumber ( ) ; parse ( numberToParse , defaultRegion , phoneNumber ) ; return phoneNumber ; }
private static native void startMethodTracingFd ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags , boolean samplingEnabled , int intervalUs , boolean streamingOutput ) ;
public void callSessionRemoveParticipantsRequestDelivered ( com.android.ims.internal.IImsCallSession i ) throws android.os.RemoteException { mNewListener.callSessionRemoveParticipantsRequestDelivered ( ) ; }
protected boolean check ( ) { return ( ( ( mConnectionCallback.mConnectionFailedCount ) > 0 ) && ( ( mConnectionCallback.mConnectedCount ) == 0 ) ) && ( ( mConnectionCallback.mConnectionSuspendedCount ) == 0 ) ; }
protected com.android.builder.resources.AssetFile createFileAndItems ( java.io.File sourceFolder , java.io.File file , com.android.utils.ILogger logger ) { return new com.android.builder.resources.AssetFile ( file , com.android.builder.resources.AssetItem.create ( sourceFolder , file ) ) ; }
public java.lang.Object getDecodedObject ( org.apache.harmony.security.asn1.BerInputStream in ) throws java.io.IOException { return new java.lang.String ( in.buffer , in.contentOffset , in.length , java.nio.charset.StandardCharsets.ISO_8859_1 ) ; }
public java.lang.String getConfigFile ( ) { return mWifiConfigStore.getConfigFile ( ) ; }
public void test2_1SetEnabledAfterRelease ( ) throws java.lang.Exception { getEqualizer ( getSessionId ( ) ) ; mEqualizer.release ( ) ; try { mEqualizer.setEnabled ( true ) ; } catch ( java.lang.IllegalStateException e ) { } finally { releaseEqualizer ( ) ; } }
public void cleanUp ( ) { if ( ( mSimUnlockProgressDialog ) != null ) { mSimUnlockProgressDialog.dismiss ( ) ; mSimUnlockProgressDialog = null ; } mUpdateMonitor.removeCallback ( this ) ; }
public com.android.build.gradle.AndroidSourceDirectorySet srcDirs ( java.lang.Object ... srcDirs ) { java.util.Collections.addAll ( source , srcDirs ) ; return this ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { return libcore.reflect.AnnotationAccess.getParameterAnnotations ( declaringClassOfOverriddenMethod , dexMethodIndex ) ; }
public void onComplete ( int resultCode , android.telephony.euicc.EuiccNotification [ ] notifications ) { executor.execute ( ( ) -> callback.onComplete ( resultCode , notifications ) ) ; }
public static com.android.internal.telephony.cat.FontSize fromInt ( int value ) { for ( com.android.internal.telephony.cat.FontSize e : com.android.internal.telephony.cat.FontSize.values ( ) ) { if ( ( e.mValue ) == value ) { return e ; } } return null ; }
public void run ( ) { final android.bluetooth.BluetoothGattCallback callback = mCallback ; if ( callback != null ) { if ( status == 0 ) descriptor.setValue ( value ) ; callback.onDescriptorRead ( this , descriptor , status ) ; } }
private boolean record ( com.android.server.pm.dex.PackageDexUsageTests.TestData testData ) { return mPackageDexUsage.record ( testData.mPackageName , testData.mDexFile , testData.mOwnerUserId , testData.mLoaderIsa , testData.mUsedByOtherApps , testData.mPrimaryOrSplit , testData.mUsedBy , testData.mClassLoaderContext ) ; }
private static boolean isActiveVideoCall ( com.android.incallui.call.DialerCall call ) { return ( com.android.incallui.VideoCallPresenter.isVideoCall ( call ) ) && ( ( call.getState ( ) ) == ( com.android.incallui.call.state.DialerCallState.ACTIVE ) ) ; }
public static void fail ( java.lang.String message ) { java.lang.System.out.println ( ( "fail: " + message ) ) ; java.lang.Thread.dumpStack ( ) ; }
public void test_plus_Duration_zero ( ) { java.time.OffsetDateTime t = tck.java.time.TCKOffsetDateTime.TEST_2008_6_30_11_30_59_000000500.plus ( java.time.Duration.ZERO ) ; org.testng.Assert.assertEquals ( t , tck.java.time.TCKOffsetDateTime.TEST_2008_6_30_11_30_59_000000500 ) ; }
protected void dump ( java.io.FileDescriptor fd , java.io.PrintWriter writer , java.lang.String [ ] args ) { mProvider.dump ( fd , writer , args ) ; }
public static final void writeListXml ( java.util.List val , java.io.OutputStream out ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { org.xmlpull.v1.XmlSerializer serializer = android.util.Xml.newSerializer ( ) ; serializer.setOutput ( out , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ; serializer.startDocument ( null , true ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; com.android.internal.util.XmlUtils.writeListXml ( val , null , serializer ) ; serializer.endDocument ( ) ; }
public final int hashCode ( ) { return com.android.sched.util.location.NoLocation.class . hashCode ( ) ; }
private void doTest ( ) { com.intellij.codeInspection.LocalInspectionTool localInspectionTool = new com.google.gct.idea.appengine.validation.RestSignatureInspection ( ) ; java.lang.String testName = getTestName ( true ) ; myFixture.setTestDataPath ( getTestDataPath ( ) ) ; myFixture.testInspection ( ( "inspections/restSignatureInspection/" + testName ) , new com.intellij.codeInspection.ex.LocalInspectionToolWrapper ( localInspectionTool ) ) ; }
abstract void getUnchecked ( int pos , float [ ] dst , int dstOffset , int length ) ;
private void cancelAnimation ( final android.animation.ValueAnimator animator ) throws java.lang.Throwable { this . runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { animator.cancel ( ) ; } } ) ; }
public java.io.FileDescriptor accept ( java.io.FileDescriptor fd , java.net.SocketAddress peerAddress ) throws android.system.ErrnoException , java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; return tagSocket ( os.accept ( fd , peerAddress ) ) ; }
public boolean add ( E element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
protected java.lang.String getProposal ( org.w3c.dom.Element element ) { return invokeCodeCompletion ( ) ? "" : "TODO" ; }
protected void onPause ( ) { super . onPause ( ) ; if ( ( ( ( mVirtualizerSupported ) || ( mBassBoostSupported ) ) || ( mEqualizerSupported ) ) || ( mPresetReverbSupported ) ) { unregisterReceiver ( mReceiver ) ; } }
public static void main ( java.lang.String [ ] args ) { Main.testSelfRecursion ( ) ; Main.testMutualRecursion ( ) ; java.lang.System.out.println ( "SOE test done" ) ; }
public void withRowString_columnIndexAndValueMatcher ( ) { org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.CursorMatchers.withRowString ( 6 , android.support.test.espresso.matcher.CursorMatchersTest.STRING_VALUE_MATCHER ) . matches ( cursor ) ) ; }
public com.android.jack.server.ServerParameters getServerParameters ( ) { assert ( serverParameters ) != null ; return serverParameters ; }
public void testNonTranslatable2 ( ) throws java.lang.Exception { TranslationDetector.sCompleteRegions = true ; assertEquals ( ( "res/values-nb/nontranslatable.xml:3: Error: Non-translatable resources should only be defined in the base values/ folder [ExtraTranslation]\n" + ( ( ( " <string name=\"dummy\" translatable=\"false\">Ignore Me</string>\n" + " ~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) + "" ) ) , lintProject ( "res/values/nontranslatable.xml=>res/values-nb/nontranslatable.xml" ) ) ; }
public void testPrivateInXml ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "res/layout/private.xml:11: Warning: The resource @string/my_private_string is marked as private in the library [PrivateResource]\n" + " android:text=\"@string/my_private_string\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( xml ( "res/layout/private.xml" , ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " android:id=\"@+id/newlinear\"\n" ) + " android:orientation=\"vertical\"\n" ) + " android:layout_width=\"match_parent\"\n" ) + " android:layout_height=\"match_parent\">\n" ) + "\n" ) + " <TextView\n" ) + " android:layout_width=\"wrap_content\"\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " android:text=\"@string/my_private_string\" />\n" ) + "\n" ) + " <TextView\n" ) + " android:layout_width=\"wrap_content\"\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " android:text=\"@string/my_public_string\" />\n" ) + "</LinearLayout>\n" ) ) ) ) ) ; }
public static boolean hasValidGenericSignature ( @ javax.annotation.Nonnull org.objectweb.asm.tree.MethodNode mn ) { if ( ( mn.signature ) != null ) { try { GenericSignatureParser.PARSER.parseMethodSignature ( mn.signature ) ; return true ; } catch ( java.lang.reflect.GenericSignatureFormatError e ) { } } return false ; }
void addConferenceCall ( java.lang.String callId , android.telecom.ParcelableConference parcelableConference ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.addConferenceCall ( callId , parcelableConference , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public static void cancelSync ( android.accounts.Account account , java.lang.String authority ) { try { android.content.ContentResolver.getContentService ( ) . cancelSync ( account , authority , null ) ; } catch ( android.os.RemoteException e ) { } }
public com.google.common.collect.ListMultimap < java.lang.String , com.android.builder.resources.Resource > getResourceMap ( ) { return mItems ; }
private static libcore.io.StructStatVfs doStat ( java.lang.String path ) { try { return Libcore.os.statvfs ( path ) ; } catch ( libcore.io.ErrnoException e ) { throw new java.lang.IllegalArgumentException ( ( "Invalid path: " + path ) , e ) ; } }
void send404 ( java.io.PrintStream ps ) throws java.io.IOException { if ( ( delay ) > 0 ) { try { java.lang.Thread.sleep ( delay ) ; } catch ( java.lang.InterruptedException e ) { } } ps.println ( ( "Not Found\n\n" + "The requested resource was not found.\n" ) ) ; }
protected void logStartUnitTest ( com.android.rs.unittest.UnitTest test ) { test.logStart ( com.android.rs.testcompat.RSSupportLibTestsListActivity.TAG , "RenderScript Support Library Testing" ) ; }
public java.lang.String select ( java.lang.Object context , double number ) { android.icu.text.PluralRules.FixedDecimal dec = ( ( android.icu.text.PluralRules.FixedDecimal ) ( context ) ) ; assert ( dec.source ) == ( dec.isNegative ? - number : number ) ; return pluralRules.select ( dec ) ; }
public android.net.wifi.WifiLinkLayerStats syncGetLinkLayerStats ( com.android.internal.util.AsyncChannel channel ) { android.os.Message resultMsg = channel.sendMessageSynchronously ( com.android.server.wifi.WifiStateMachine.CMD_GET_LINK_LAYER_STATS ) ; android.net.wifi.WifiLinkLayerStats result = ( ( android.net.wifi.WifiLinkLayerStats ) ( resultMsg.obj ) ) ; resultMsg.recycle ( ) ; return result ; }
public void run ( ) { final android.bluetooth.BluetoothGattCallback callback = mCallback ; if ( callback != null ) { callback.onReadRemoteRssi ( this , rssi , status ) ; } }
protected static boolean getBooleanProperty ( java.lang.String key , boolean defVal ) { return com.ibm.icu.dev.test.TestFmwk.getParams ( ) . getBooleanProperty ( key , defVal ) ; }
public java.util.List < com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder > getFolders ( com.android.resources.ResourceFolderType type ) { return mFolderMap.get ( type ) ; }
public abstract void installPackage ( @ com.android.annotations.NonNull java.io.File apkFile , @ com.android.annotations.NonNull java.util.Collection < java.lang.String > options , int timeout , com.android.utils.ILogger logger ) throws com.android.builder.testing.api.DeviceException ;
java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; java.util.List < android.bluetooth.BluetoothDevice > devices = new java.util.ArrayList < > ( ) ; if ( ( mRemoteDevice ) != null ) { devices.add ( mRemoteDevice ) ; } return devices ; }
protected java.lang.String getFormat ( ) { return com.android.internal.telephony.SmsConstants.FORMAT_3GPP2 ; }
public void onResume ( ) { android.os.Trace.beginSection ( "AnswerFragment.onResume" ) ; super . onResume ( ) ; com.android.dialer.common.LogUtil.i ( "AnswerFragment.onResume" , null ) ; restoreSwipeHintTexts ( ) ; inCallScreenDelegate.onInCallScreenResumed ( ) ; android.os.Trace.endSection ( ) ; }
public void traverse ( @ javax.annotation.Nonnull com.android.sched.scheduler.ScheduleInstance < ? super com.android.sched.item.Component > schedule ) throws java.lang.Exception { schedule.process ( this ) ; catchLocal.traverse ( schedule ) ; traverseElements ( schedule ) ; }
public void requestR1ANQPElementsWithoutRC ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mHandler.requestANQP ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1_ANQP_WITHOUT_RC ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mManager.requestANQPElements ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_ANQP_KEY , false , false ) ) ; }
public static java.lang.String getFreeWidgetId ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiRoot , java.lang.String name ) { if ( "TabWidget" . equals ( name ) ) { return "@android:id/tabs" ; } return "@+id/" + ( com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.getFreeWidgetId ( uiRoot , new java.lang.Object [ ] { name , null , null , null } ) ) ; }
public void verifyParcelWithoutPolicy ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = android.net.wifi.hotspot2.PasspointConfigurationTest.createConfig ( ) ; config.policy = null ; android.net.wifi.hotspot2.PasspointConfigurationTest.verifyParcel ( config ) ; }
private static native int currentImpl ( int address , java.lang.String text ) ;
public void clearEvents ( ) { synchronized ( mCollectedEvents ) { mCollectedEvents.clear ( ) ; } }
public android.net.IpSecTransform.Builder setEncryption ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecAlgorithm algo ) { mConfig.setEncryption ( direction , algo ) ; return this ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.doTest ( ) ; new Main.TestConfig ( ) . doFollowReferencesTest ( ) ; Main.doStringTest ( ) ; }
public java.util.NavigableSet < K > navigableKeySet ( ) { java.util.NavigableSet < K > result = navigableKeySet ; return result == null ? navigableKeySet = new com.google.common.collect.Maps.NavigableKeySet < K , V > ( this ) : result ; }
public com.android.build.gradle.internal.dsl.BuildType consumerProguardFiles ( @ com.android.annotations.NonNull java.lang.Object ... proguardFileArray ) { getConsumerProguardFiles ( ) . addAll ( project.files ( proguardFileArray ) . getFiles ( ) ) ; return this ; }
public com.android.ims.internal.IImsUt getUtInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { return this . getUt ( ) . getInterface ( ) ; } }
public static < T > T readBytes ( java.io.File file , com.google.common.io.ByteProcessor < T > processor ) throws java.io.IOException { return com.google.common.io.Files.asByteSource ( file ) . read ( processor ) ; }
public static com.google.common.io.CharSink asCharSink ( java.io.File file , java.nio.charset.Charset charset , com.google.common.io.FileWriteMode ... modes ) { return com.google.common.io.Files.asByteSink ( file , modes ) . asCharSink ( charset ) ; }
public static long $opt$noinline$getLongField ( Main m ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return m.longField ; }
private boolean hasAcknowledgedFeatures ( ) { if ( isVvm3 ( ) ) { return true ; } return ( preferences.getInt ( VoicemailVersionConstants.PREF_DIALER_FEATURE_VERSION_ACKNOWLEDGED_KEY , 0 ) ) >= ( com.android.voicemail.VoicemailVersionConstants.CURRENT_VOICEMAIL_FEATURE_VERSION ) ; }
public void onComplete ( int resultCode , java.lang.String address ) { executor.execute ( ( ) -> callback.onComplete ( resultCode , address ) ) ; }
public java.lang.String uninstallPackage ( java.lang.String packageName ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver ( ) ; executeShellCommand ( ( "pm uninstall " + packageName ) , receiver , com.android.ddmlib.Device.INSTALL_TIMEOUT ) ; return receiver.getErrorMessage ( ) ; }
public com.android.dx.io.EncodedValue adjustEncodedArray ( com.android.dx.io.EncodedValue encodedArray ) { com.android.dx.util.ByteArrayAnnotatedOutput out = new com.android.dx.util.ByteArrayAnnotatedOutput ( 32 ) ; new com.android.dx.merge.IndexMap.EncodedValueTransformer ( out ) . transformArray ( new com.android.dx.io.EncodedValueReader ( encodedArray.asByteInput ( ) , ENCODED_ARRAY ) ) ; return new com.android.dx.io.EncodedValue ( out.toByteArray ( ) ) ; }
public int size ( ) { return map.size ( ) ; }
public void updateCall ( android.bluetooth.BluetoothHeadsetClientCall call ) { if ( call == null ) { android.util.Log.e ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , "Updating call to a null value." ) ; return ; } mCurrentCall = call ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBuildSystemFingerprintBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4096 ; buildSystemFingerprint_ = value ; onChanged ( ) ; return this ; }
public java.lang.Integer gattServerCreateGattServerCallback ( ) { com.googlecode.android_scripting.facade.bluetooth.GattServerFacade.sGattServerCallbackCount += 1 ; int index = com.googlecode.android_scripting.facade.bluetooth.GattServerFacade.sGattServerCallbackCount ; mBluetoothGattServerCallbackList.put ( index , new com.googlecode.android_scripting.facade.bluetooth.GattServerFacade.BtGattServerCallback ( index ) ) ; return index ; }
boolean isNumberPossibleForDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher possibleNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.getPossibleNumberPattern ( ) ) . matcher ( nationalNumber ) ; return possibleNumberPatternMatcher.matches ( ) ; }
private void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , int timeoutMs , int legacyType , android.os.Handler handler ) { android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler ( handler ) ; android.net.NetworkCapabilities nc = request.networkCapabilities ; sendRequestForNetwork ( nc , networkCallback , timeoutMs , android.net.ConnectivityManager.REQUEST , legacyType , cbHandler ) ; }
public void testSerializingSubclass ( ) throws java.io.IOException , java.lang.ClassNotFoundException { java.text.AttributedCharacterIterator.Attribute a = new libcore.java.text.AttributedCharacterIteratorAttributeTest.CustomAttribute ( ) ; try { libcore.libcore.util.SerializationTester.reserialize ( a ) ; fail ( ) ; } catch ( java.io.InvalidObjectException expected ) { } }
private boolean shouldShowManageConference ( ) { if ( ( mPrimary ) == null ) { return false ; } return mPrimary.can ( PhoneCapabilities.MANAGE_CONFERENCE ) ; }
public void onDeleteGroup ( int netId ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( "called onDeleteGroup() netId=" + netId ) ) ; mWifiNative.removeNetwork ( netId ) ; mWifiNative.saveConfig ( ) ; sendP2pPersistentGroupsChangedBroadcast ( ) ; }
public void destroyAppProfiles ( java.lang.String packageName ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.destroyAppProfiles ( packageName ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
static java.lang.String getBestDateTimePatternNative ( java.lang.String skeleton , java.lang.String localeName ) { return com.ibm.icu.text.DateTimePatternGenerator.getInstance ( new com.ibm.icu.util.ULocale ( localeName ) ) . getBestPattern ( skeleton ) ; }
private android.content.Intent createActivityIntent ( ) { android.content.Intent intent = new android.content.Intent ( mContext , com.android.cellbroadcastreceiver.CellBroadcastSettings.class ) ; intent.setPackage ( "com.android.cellbroadcastreceiver" ) ; intent.setAction ( "android.intent.action.MAIN" ) ; intent.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; return intent ; }
private void close ( ) { synchronized ( mLock ) { mWriteHandle.close ( ) ; mPendingActions.clear ( ) ; } mWatcher.cancel ( ) ; mWatcher.destroy ( ) ; mReadHandle.close ( ) ; }
public android.database.Cursor loadInBackground ( ) { android.database.Cursor cursor = super . loadInBackground ( ) ; com.android.dialer.searchfragment.cp2.ContactFilterCursor contactFilterCursor = new com.android.dialer.searchfragment.cp2.ContactFilterCursor ( cursor , query ) ; return com.android.dialer.searchfragment.cp2.SearchContactsCursor.newInstance ( getContext ( ) , contactFilterCursor ) ; }
public java.lang.String getPageTitle ( ) { return "Settings" ; }
private java.io.File getNativeFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path , @ javax.annotation.Nonnull java.lang.String name ) { return new java.io.File ( new java.io.File ( dir.getFile ( ) , path.getPathAsString ( java.io.File.separatorChar ) ) , name ) ; }
private static void disableTraceForRI ( ) { if ( ! ( java.lang.System.getProperty ( "java.vm.name" ) . equals ( "Dalvik" ) ) ) { art.Trace.disableTracing ( java.lang.Thread.currentThread ( ) ) ; } }
private android.renderscript.Long3 pack_l3 ( long [ ] val ) { assert ( val.length ) == 3 ; return new android.renderscript.Long3 ( val [ 0 ] , val [ 1 ] , val [ 2 ] ) ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeInt ( resultCode ) ; out.writeStrongBinder ( token ) ; out.writeLong ( operationHandle ) ; out.writeInt ( inputConsumed ) ; out.writeByteArray ( output ) ; }
public static int $noinline$AddNegs1 ( int arg1 , int arg2 ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( - arg1 ) + ( - arg2 ) ; }
public boolean isAnnotationPresent ( java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return libcore.reflect.AnnotationAccess.isDeclaredAnnotationPresent ( this , annotationType ) ; }
protected org.simpleframework.http.ContentType getContentType ( @ javax.annotation.Nonnull org.simpleframework.http.Request request ) { java.lang.String accept = request.getValue ( "accept" ) ; return accept != null ? new org.simpleframework.http.parse.ContentTypeParser ( accept ) : null ; }
public static void checkNotOnMainThread ( ) { if ( com.android.server.telecom.ThreadUtil.isOnMainThread ( ) ) { android.telecom.Log.wtf ( com.android.server.telecom.ThreadUtil.TAG , new java.lang.IllegalStateException ( ) , "Must not be on the main thread!" ) ; } }
public java.util.Collection < V > values ( ) { return new com.google.common.collect.Maps.Values < K , V > ( this ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder clearBootSuccess ( ) { bitField0_ = ( bitField0_ ) & ( ~ 4 ) ; bootSuccess_ = true ; onChanged ( ) ; return this ; }
public void setUp ( ) throws java.lang.Exception { mDelivery = new com.android.volley.utils.ImmediateResponseDelivery ( ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; }
public com.android.server.wifi.WifiConnectivityManager makeWifiConnectivityManager ( android.net.wifi.WifiInfo wifiInfo , boolean hasConnectionRequests ) { return new com.android.server.wifi.WifiConnectivityManager ( mContext , mWifiStateMachine , getWifiScanner ( ) , mWifiConfigManager , wifiInfo , mWifiNetworkSelector , mWifiNetworkScoreCache , mWifiLastResortWatchdog , mWifiMetrics , mWifiStateMachineHandlerThread.getLooper ( ) , mClock , hasConnectionRequests ) ; }
public final boolean isPrivate ( ) { return ( ( org.jetbrains.org.objectweb.asm.Opcodes.ACC_PRIVATE ) & ( access ) ) != 0 ; }
public static float ReturnFloat33 ( ) { int imm = Main.$inline$int ( 33 ) ; return ( ( float ) ( imm ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { toggle.getCallback ( ) . action ( toggle , toggle.getId ( ) , button.getSelection ( ) ) ; updateSelection ( ) ; }
public void TestDangiFormat ( ) { com.ibm.icu.text.DateFormat fmt = com.ibm.icu.text.DateFormat.getDateInstance ( DateFormat.MEDIUM , new com.ibm.icu.util.ULocale ( "en@calendar=dangi" ) ) ; java.lang.String calType = fmt.getCalendar ( ) . getType ( ) ; assertEquals ( "Incorrect calendar type used by the date format instance" , "dangi" , calType ) ; com.ibm.icu.util.GregorianCalendar gcal = new com.ibm.icu.util.GregorianCalendar ( ) ; gcal.set ( 2013 , Calendar.MARCH , 1 , 0 , 0 , 0 ) ; java.util.Date d = gcal.getTime ( ) ; java.lang.String dangiDateStr = fmt.format ( d ) ; assertEquals ( "Bad date format" , "Mo1 20, 2013" , dangiDateStr ) ; }
public int hashCode ( ) { return ( ( pluralCountToCurrencyUnitPattern.hashCode ( ) ) ^ ( pluralRules.hashCode ( ) ) ) ^ ( ulocale.hashCode ( ) ) ; }
public com.android.ahat.heapdump.Value get ( int index ) { return com.android.ahat.heapdump.Value.pack ( values [ index ] ) ; }
public void consume ( org.jetbrains.plugins.github.util.GithubAuthData authData ) throws java.io.IOException { reposRef.set ( org.jetbrains.plugins.github.GithubApiUtil.getDetailedRepoInfo ( authData , userAndRepo.getUser ( ) , userAndRepo.getRepository ( ) ) ) ; }
public static void computeNextafter ( android.renderscript.cts.TestNextafter.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Math.nextAfter ( args.inX , args.inY ) , 0 , 0 ) ; }
public void testPackageOverridePackageFromFlavor ( ) { mFlavorConfig.setApplicationId ( "foo.bar" ) ; com.android.builder.core.VariantConfiguration variant = getVariant ( ) ; assertEquals ( "foo.bar" , variant.getIdOverride ( ) ) ; }
public void init ( ) throws java.lang.Exception { if ( ( cal ) == null ) { cal = new android.icu.util.GregorianCalendar ( 1 , 0 , 1 ) ; longTimeAgo = cal.getTime ( ) ; now = new java.util.Date ( ) ; } }
public com.android.sched.vfs.InputOutputVDir getRootInputOutputVDir ( ) { assert ! ( isClosed ( ) ) ; return root ; }
public static java.lang.Integer getTargetSdkVersion ( com.android.io.IAbstractFile manifestFile ) throws com.android.io.StreamException , javax.xml.xpath.XPathExpressionException { java.lang.String result = com.android.xml.AndroidManifest.getStringValue ( manifestFile , ( ( ( ( ( ( ( "/" + ( com.android.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.xml.AndroidManifest.NODE_USES_SDK ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.xml.AndroidManifest.ATTRIBUTE_TARGET_SDK_VERSION ) ) ) ; try { return java.lang.Integer.valueOf ( result ) ; } catch ( java.lang.NumberFormatException e ) { return ! ( result.isEmpty ( ) ) ? - 1 : null ; } }
public < T > com.android.sched.util.config.AsapConfigBuilder set ( @ javax.annotation.Nonnull com.android.sched.util.config.id.ObjectId < T > objectId , @ javax.annotation.Nonnull T value , @ javax.annotation.Nonnull com.android.sched.util.location.Location location ) { instances.put ( objectId , value ) ; valueLocationsByKeyId.put ( objectId , location ) ; return this ; }
public void testKeyPairGenerator_Initialize_KeySize_Encrypted_Failure ( ) throws java.lang.Exception { setupPassword ( ) ; try { mGenerator.initialize ( 1024 ) ; fail ( "KeyPairGenerator should not support setting the key size" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public static char intAnd0x1ffffToChar ( int value ) { return ( ( char ) ( value & 131071 ) ) ; }
public proguard.evaluation.value.IntegerValue subtractFrom ( proguard.evaluation.value.SpecificIntegerValue other ) { return this . equals ( other ) ? ParticularValueFactory.INTEGER_VALUE_0 : new proguard.evaluation.value.CompositeIntegerValue ( other , CompositeIntegerValue.SUBTRACT , this ) ; }
com.android.sched.util.location.Location getVDirLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent , @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return vfs.getVDirLocation ( parent.getWrappedDir ( ) , path ) ; }
public void onMiddlewareReady ( ) { }
public java.lang.String getRules ( ) { return collAsICU ( ) . getRules ( ) ; }
private void logi ( java.lang.String s ) { android.telephony.Rlog.i ( com.android.internal.telephony.GsmCdmaPhone.LOG_TAG , ( ( ( "[" + ( mPhoneId ) ) + "] " ) + s ) ) ; }
private void updateDrawMode ( java.awt.event.MouseEvent event ) { if ( event.isShiftDown ( ) ) { currentMode = com.android.draw9patch.ui.ImageViewer.DrawMode.ERASE ; } else if ( event.isControlDown ( ) ) { currentMode = com.android.draw9patch.ui.ImageViewer.DrawMode.LAYOUT_BOUND ; } else { currentMode = com.android.draw9patch.ui.ImageViewer.DrawMode.PATCH ; } }
public java.util.Set < java.lang.String > getAbiFilters ( ) { return ndkConfig.getAbiFilters ( ) ; }
public void scheduleTrimMemory ( int level ) { sendMessage ( android.app.ActivityThread.H.TRIM_MEMORY , null , level ) ; }
static boolean expectAux ( java.lang.String tag , java.lang.String source , java.lang.String result , java.lang.String expectedResult ) { return com.ibm.icu.dev.test.translit.TransliteratorTest.expectAux ( tag , new java.lang.String [ ] { source , result } , result.equals ( expectedResult ) , expectedResult ) ; }
protected android.telephony.ims.stub.ImsSmsImplBase getSmsImplementation ( ) { return new android.telephony.ims.stub.ImsSmsImplBase ( ) ; }
private void assertCommonAttributes ( ) { assertEquals ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.RUN_NAME , mTestResult.mTestRunName ) ; assertEquals ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.CLASS_NAME , mTestResult.mSuiteName ) ; assertEquals ( 1 , mTestResult.mTestCount ) ; assertEquals ( com.android.ddmlib.testrunner.InstrumentationResultParserTest.TEST_NAME , mTestResult.mTestName ) ; }
public void testStringsToLengthPrefixedBytesEmptyByteArray ( ) { try { android.net.SSLCertificateSocketFactory.toLengthPrefixedList ( new byte [ 0 ] ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public int compare ( com.android.ahat.heapdump.NativeAllocation a , com.android.ahat.heapdump.NativeAllocation b ) { return a.heap.getName ( ) . compareTo ( b.heap.getName ( ) ) ; }
public byte [ ] sign ( java.lang.String key , byte [ ] data ) { try { return mBinder.sign ( key , data ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return null ; } }
public void run ( ) { if ( ( mTempMmsUri ) == null ) { return ; } android.content.Intent intent = new android.content.Intent ( this , com.android.mms.ui.SlideshowEditActivity.class ) ; intent.setData ( mTempMmsUri ) ; startActivityForResult ( intent , com.android.mms.ui.ComposeMessageActivity.REQUEST_CODE_CREATE_SLIDESHOW ) ; }
public static void testSendPublicSafetyMessagesAlert ( android.app.Activity activity , int serialNumber ) { android.telephony.SmsCbMessage cbMessage = com.android.cellbroadcastreceiver.tests.SendGsmCmasMessages.createCmasSmsMessage ( 911 , serialNumber , "en" , com.android.cellbroadcastreceiver.tests.SendGsmCmasMessages.PUBLIC_SAFETY_MESSAGE , SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN , SmsCbCmasInfo.CMAS_URGENCY_UNKNOWN , SmsCbCmasInfo.CMAS_CERTAINTY_UNKNOWN , SmsCbMessage.MESSAGE_PRIORITY_NORMAL ) ; com.android.cellbroadcastreceiver.tests.SendGsmCmasMessages.sendBroadcast ( activity , cbMessage ) ; }
public void updateAll ( java.util.ArrayList < java.lang.String > pkgFilter , boolean includeAll , boolean dryMode , java.lang.String acceptLicense , boolean includeDependencies ) { mUpdaterData.updateOrInstallAll_NoGUI ( pkgFilter , includeAll , dryMode , acceptLicense , includeDependencies ) ; }
public static java.io.File createTempFile ( @ javax.annotation.Nonnull java.lang.String prefix , @ javax.annotation.Nonnull java.lang.String suffix ) throws com.android.sched.util.file.CannotChangePermissionException , com.android.sched.util.file.CannotCreateFileException { java.io.File tmp = com.android.sched.util.file.Files.createTempFile ( ( ( com.android.jack.test.toolchain.AbstractTestTools.TMP_PREFIX ) + prefix ) , suffix ) ; tmp.deleteOnExit ( ) ; return tmp ; }
public void testAospServiceContexts ( ) throws java.lang.Exception { deviceSvcFile = java.io.File.createTempFile ( "service_contexts" , ".tmp" ) ; deviceSvcFile.deleteOnExit ( ) ; mDevice.pullFile ( "/plat_service_contexts" , deviceSvcFile ) ; aospSvcFile = copyResourceToTempFile ( "/plat_service_contexts" ) ; assertFileEquals ( aospSvcFile , deviceSvcFile ) ; }
public void handleMessage ( android.os.Message msg ) { android.widget.Toast.makeText ( this , getString ( msg.what ) , Toast.LENGTH_SHORT ) . show ( ) ; }
public com.android.sdklib.IAndroidTarget loadTarget ( com.android.ide.eclipse.adt.internal.sdk.ProjectState state ) { com.android.sdklib.IAndroidTarget target = null ; java.lang.String hash = state.getTargetHashString ( ) ; if ( hash != null ) { state.setTarget ( ( target = getTargetFromHashString ( hash ) ) ) ; } return target ; }
public void test_Constructor ( ) { try { org.apache.harmony.tests.javax.net.ssl.SSLServerSocketFactoryTest.MockSSLServerSocketFactory ssf = new org.apache.harmony.tests.javax.net.ssl.SSLServerSocketFactoryTest.MockSSLServerSocketFactory ( ) ; } catch ( java.lang.Exception e ) { fail ( ( "Unexpected exception " + ( e.toString ( ) ) ) ) ; } }
public boolean pingSupplicant ( ) { return isWifiEnabled ( ) ; }
public void testVP8EncodeDecodeVideoFromSurfaceToSurfaceQVGA ( ) throws java.lang.Throwable { setParameters ( 320 , 240 , 2000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_VP8 , true , false ) ; android.media.cts.EncodeDecodeTest.SurfaceToSurfaceWrapper.runTest ( this ) ; }
public void onCallPullFailed ( android.telecom.Connection externalConnection ) { if ( externalConnection == null ) { return ; } com.android.services.telephony.Log.i ( this , "onCallPullFailed - pull failed; swapping back to call: %s" , externalConnection ) ; sendConnectionEvent ( Connection.EVENT_CALL_PULL_FAILED , null ) ; setOriginalConnection ( externalConnection ) ; setActiveInternal ( ) ; }
private int getPhoneTypeFromProperty ( ) { return getPhoneTypeFromProperty ( getPhoneId ( ) ) ; }
public int getToolbarInset ( ) { return 1 ; }
public java.lang.invoke.MethodHandle bindTo ( java.lang.Object x ) { x = type.leadingReferenceParameter ( ) . cast ( x ) ; return new java.lang.invoke.Transformers.BindTo ( this , x ) ; }
public long getHiSyncId ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.hearingaid.HearingAidService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID ; } return service.getHiSyncId ( device ) ; }
public void testError ( ) { try { com.android.tools.lint.client.api.JarFileIssueRegistry.get ( new com.android.tools.lint.client.api.TestLintClient ( ) , new java.io.File ( "bogus" ) ) ; fail ( "Expected exception for bogus path" ) ; } catch ( java.lang.Throwable t ) { } }
java.util.Collection < V > createValues ( ) { return new com.google.common.collect.Maps.Values < K , V > ( this ) ; }
public void unplug ( long elapsedRealtime , long batteryUptime , long batteryRealtime ) { mUnpluggedWakeups = mWakeups ; }
public static void computeAsinpi ( android.renderscript.cts.TestAsinpi.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( ( ( android.renderscript.cts.CoreMathVerifier.asin ( args.inV ) ) / ( ( float ) ( java.lang.Math.PI ) ) ) , 5 , 128 ) ; }
private int getSlotIdFromPhoneId ( int phoneId ) { return mPhoneIdToSlotId [ phoneId ] ; }
public void connectionEventFailedDoesNotCrashOnRepeatedCalls ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; }
public < T > T newProxy ( T target , java.lang.Class < T > interfaceType , long timeoutDuration , java.util.concurrent.TimeUnit timeoutUnit ) { com.google.common.base.Preconditions.checkNotNull ( target ) ; com.google.common.base.Preconditions.checkNotNull ( interfaceType ) ; com.google.common.base.Preconditions.checkNotNull ( timeoutUnit ) ; return target ; }
protected void onResume ( ) { super . onResume ( ) ; updateUi ( ) ; initSleepPolicyPreference ( ) ; refreshWifiInfo ( ) ; }
private native void open0 ( java.lang.String name , boolean append ) throws java.io.FileNotFoundException ;
public void addSigningConfig ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.SigningConfigDsl signingConfigDsl ) { signingConfigs.put ( signingConfigDsl.getName ( ) , signingConfigDsl ) ; }
private native boolean setReadOnly0 ( java.io.File f ) ;
public void testCookieStoreAddAcceptsConflictingUri ( ) throws java.net.URISyntaxException { java.net.CookieStore cookieStore = new java.net.CookieManager ( ) . getCookieStore ( ) ; java.net.HttpCookie cookieA = libcore.java.net.CookiesTest.createCookie ( "a" , "android" , ".android.com" , "/source/" ) ; cookieStore.add ( new java.net.URI ( "http://google.com/source/" ) , cookieA ) ; assertEquals ( java.util.Arrays.asList ( cookieA ) , cookieStore.getCookies ( ) ) ; }
public static com.google.common.base.Predicate < java.io.File > isFile ( ) { return com.google.common.io.Files.FilePredicate.IS_FILE ; }
public void getUpdatePackageFile_throwsErrorIfStreaming ( ) throws java.lang.Exception { com.example.android.systemupdatersample.UpdateConfig config = com.example.android.systemupdatersample.UpdateConfig.fromJson ( mJsonStreaming001 ) ; thrown.expect ( java.lang.RuntimeException.class ) ; config.getUpdatePackageFile ( ) ; }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsIntIntIntInt args ) { args.out = android.renderscript.cts.CoreMathVerifier.minI32 ( args.inMaxValue , android.renderscript.cts.CoreMathVerifier.maxI32 ( args.inValue , args.inMinValue ) ) ; }
public void dump ( java.io.PrintStream out ) { if ( out == null ) { out = java.lang.System.out ; } this . fRData.dump ( out ) ; }
public void testVFE4 ( ) { load ( "dot.junit.opcodes.filled_new_array.d.T_filled_new_array_6" , java.lang.VerifyError.class ) ; }
public static void initialize ( ) { if ( ( org.chromium.base.metrics.RecordHistogram.sDisabledBy ) != null ) return ; org.chromium.base.metrics.RecordHistogram.nativeInitialize ( ) ; }
public com.intellij.ui.tabs.impl.ActionCallback run ( ) { return executeSelectionChange ( info , requestFocus ) ; }
public static com.android.server.wifi.ScanResults createWithNoIE ( int id , int ... freqs ) { return com.android.server.wifi.ScanResults.create ( id , com.android.server.wifi.ScanResults.generateNativeResults ( false , id , freqs ) ) ; }
protected void engineInit ( int opmode , java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { checkKeyType ( key ) ; checkAlgorithmParameterSpec ( params ) ; }
public void setUp ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo ) throws com.android.tradefed.device.DeviceNotAvailableException , com.android.tradefed.targetprep.BuildError , com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = buildInfo ; startVirtualenv ( buildInfo ) ; setLocalPypiPath ( ) ; installDeps ( buildInfo ) ; }
public void onHostCardEmulationData ( int technology , byte [ ] data ) { if ( ( mCardEmulationManager ) != null ) { mCardEmulationManager.onHostCardEmulationData ( technology , data ) ; } }
public void execute ( java.util.List < java.lang.String > args ) { args.removeAll ( java.util.Collections.singleton ( "-Xlinker" ) ) ; }
public void onListenerConnected ( ) { super . onListenerConnected ( ) ; mDND = getCurrentInterruptionFilter ( ) ; android.util.Log.d ( com.android.cts.verifier.notifications.MockListener.TAG , ( "initial value of CurrentInterruptionFilter is " + ( mDND ) ) ) ; com.android.cts.verifier.notifications.MockListener.sNotificationListenerInstance = this ; isConnected = true ; }
public int getMinSdk ( ) { int minSdk = mProject.getDefaultConfig ( ) . getProductFlavor ( ) . getMinSdkVersion ( ) ; if ( minSdk != ( - 1 ) ) { return minSdk ; } return mMinSdk ; }
public android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings ( int subId ) { enforceReadPrivilegedPermission ( ) ; return com.android.phone.VisualVoicemailSmsFilterConfig.getActiveVisualVoicemailSmsFilterSettings ( mPhone.getContext ( ) , subId ) ; }
public java.lang.String getStringFormTarget ( ) { return ( ( typeLocator.getStringFormTarget ( ) ) + "#" ) + ( constantName ) ; }
public static java.util.Collection ipSecConfigs ( ) { return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { "1.2.3.4" , "8.8.4.4" } , new java.lang.Object [ ] { "2601::2" , "2601::10" } } ) ; }
public static com.android.util.Pair < com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo , java.util.List < org.eclipse.swt.graphics.Rectangle > > create ( com.android.ide.common.rendering.api.ViewInfo root , boolean layoutlib5 ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo.Builder ( layoutlib5 ) . create ( root ) ; }
public java.util.Iterator < com.android.jack.ir.ast.JDefinedClassOrInterface > sortAndNumber ( java.util.Collection < com.android.jack.ir.ast.JDefinedClassOrInterface > types ) { return types.iterator ( ) ; }
abstract void getUnchecked ( int pos , double [ ] dst , int dstOffset , int length ) ;
void setScale ( double scale , boolean redraw ) { mHScale.setScale ( scale ) ; mVScale.setScale ( scale ) ; if ( redraw ) { redraw ( ) ; } }
private static boolean isAEAD ( java.lang.String algorithm ) { return ( ( "GCM" . equals ( algorithm ) ) || ( algorithm.contains ( "/GCM/" ) ) ) || ( algorithm.equals ( "CHACHA20" ) ) ; }
public void test_twoDex_simpleUse ( ) throws java.lang.Exception { java.lang.String result = ( ( java.lang.String ) ( createLoaderAndCallMethod ( "test.Test1" , "test" , dex1 , dex2 ) ) ) ; assertSame ( "blort" , result ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { com.android.dialer.logging.Logger.get ( context ) . logImpression ( DialerImpression.Type.VOICEMAIL_VVM3_TOS_DECLINE_CHANGE_PIN_SHOWN ) ; android.content.Intent intent = new android.content.Intent ( android.telephony.TelephonyManager.ACTION_CONFIGURE_VOICEMAIL ) ; intent.putExtra ( TelephonyManager.EXTRA_PHONE_ACCOUNT_HANDLE , phoneAccountHandle ) ; context.startActivity ( intent ) ; }
public void dispose ( ) { if ( com.android.internal.telephony.cdma.RuimRecords.DBG ) log ( ( "Disposing RuimRecords " + ( this ) ) ) ; mCi.unregisterForIccRefresh ( this ) ; mParentApp.unregisterForReady ( this ) ; resetRecords ( ) ; super . dispose ( ) ; }
public void testCameraAppDisabled ( ) throws java.lang.Exception { if ( ( testFramework.getApi ( ) ) == 27 ) { return ; } enableSampleDeviceAdmin ( ) ; disableCamera ( ) ; gotoCameraApp ( ) ; org.junit.Assert.assertTrue ( verifyCameraAppDisabled ( ) ) ; }
public com.android.tools.lint.client.api.XmlParser getXmlParser ( ) { return new com.android.tools.lint.LintCliXmlParser ( ) ; }
private void stopGattProfileService ( ) { mAdapterProperties.onBleDisable ( ) ; if ( ( mRunningProfiles.size ( ) ) == 0 ) { debugLog ( "stopGattProfileService() - No profiles services to stop." ) ; mAdapterStateMachine.sendMessage ( AdapterState.BLE_STOPPED ) ; } setProfileServiceState ( com.android.bluetooth.gatt.GattService.class , BluetoothAdapter.STATE_OFF ) ; }
public final long getLong ( int index ) { checkIsAccessible ( ) ; checkIndex ( index , SizeOf.LONG ) ; return this . block.peekLong ( ( ( offset ) + index ) , order ) ; }
public void setVar ( int index , boolean v ) { mRS.nScriptSetVarI ( getID ( mRS ) , index , ( v ? 1 : 0 ) , mUseIncSupp ) ; }
public abstract com.android.dialer.precall.PreCall to ( com.android.dialer.precall.impl.PreCallImpl impl ) ;
private com.android.server.wifi.hotspot2.PasspointProvider createProvider ( android.net.wifi.hotspot2.PasspointConfiguration config ) { return new com.android.server.wifi.hotspot2.PasspointProvider ( config , mKeyStore , mSimAccessor , com.android.server.wifi.hotspot2.PasspointProviderTest.PROVIDER_ID ) ; }
int getConnectionState ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return mState ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder clearEndTime ( ) { bitField0_ = ( bitField0_ ) & ( ~ 512 ) ; endTime_ = 0L ; onChanged ( ) ; return this ; }
public static float FloatDivision ( ) { float a ; float b ; float c ; a = 8.0F ; b = 2.5F ; c = a / b ; return c ; }
private native boolean setCodecConfigPreferenceNative ( android.bluetooth.BluetoothCodecConfig [ ] codecConfigArray ) ;
public com.android.ide.common.rendering.api.ResourceValue findValue ( java.lang.String name , boolean isFrameworkAttr ) { return getItem ( name , isFrameworkAttr ) ; }
protected org.objectweb.asm.util.ASMifier createASMifier ( final java.lang.String name , final int id ) { return new org.objectweb.asm.util.ASMifier ( org.objectweb.asm.Opcodes.ASM5 , name , id ) ; }
public void testE3 ( ) { loadAndRun ( "dot.junit.opcodes.aget_byte.d.T_aget_byte_1" , java.lang.ArrayIndexOutOfBoundsException.class , new byte [ 2 ] , ( - 1 ) ) ; }
protected java.lang.String getCapitalizedBuildTypeName ( ) { return com.android.build.gradle.internal.StringHelper.capitalize ( variantConfiguration.getBuildType ( ) . getName ( ) ) ; }
public void parsePreferencesClasses ( org.eclipse.core.runtime.IProgressMonitor monitor ) { parseClasses ( monitor , SdkConstants.CLASS_PREFERENCE , SdkConstants.CLASS_PREFERENCEGROUP , null ) ; }
public void unpark ( java.lang.Object obj ) { if ( obj instanceof java.lang.Thread ) { ( ( java.lang.Thread ) ( obj ) ) . unpark$ ( ) ; } else { throw new java.lang.IllegalArgumentException ( "valid for Threads only" ) ; } }
private static long pow16 ( int n ) { if ( n > 10 ) { throw new java.lang.AssertionError ( "Unexpected pow16 argument" ) ; } long result = n * n ; result *= result ; result *= result ; result *= result ; return result ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameterRef paramRef ) { buildAssignVariableRef ( destReg , paramRef , sourcePosition ) ; return false ; }
public static long digestRegularFile ( java.io.File file ) throws java.io.IOException { java.io.InputStream in = new java.io.BufferedInputStream ( new java.io.FileInputStream ( file ) ) ; try { return com.intellij.updater.Digester.digestStream ( in ) ; } finally { in.close ( ) ; } }
public void doFrame ( long frameTimeNanos ) { mStatus = android.widget.TextView.Marquee.MARQUEE_RUNNING ; mLastAnimationMs = mChoreographer.getFrameTime ( ) ; tick ( ) ; }
public void onCallStateChanged ( int state , java.lang.String phoneNumber ) { }
static int $opt$noinline$DoubleToInt ( double a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( int ) ( a ) ) ; }
public int getCarrierIdListVersion ( ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getCarrierIdListVersion ( getSubId ( ) ) ; } } catch ( android.os.RemoteException ex ) { } return android.telephony.TelephonyManager.UNKNOWN_CARRIER_ID_LIST_VERSION ; }
public void testSuspiciousRegion ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "res/values-ff-rNO: Warning: Suspicious language and region combination ff (Fulah) with NO (Norway): language ff is usually paired with: SN (Senegal), CM (Cameroon), GN (Guinea), MR (Mauritania) [WrongRegion]\n" + "res/values-nb-rSE: Warning: Suspicious language and region combination nb (Norwegian Bokmål) with SE (Sweden): language nb is usually paired with: NO (Norway), SJ (Svalbard & Jan Mayen) [WrongRegion]\n" ) + "res/values-sv-rSV: Warning: Suspicious language and region combination sv (Swedish) with SV (El Salvador): language sv is usually paired with: SE (Sweden), AX (Åland Islands), FI (Finland) [WrongRegion]\n" ) + "0 errors, 3 warnings\n" ) ) , lintProject ( "res/values/strings.xml" , "res/values/strings.xml=>res/values-no/strings.xml" , "res/values/strings.xml=>res/values-nb-rNO/strings.xml" , "res/values/strings.xml=>res/values-nb-rSJ/strings.xml" , "res/values/strings.xml=>res/values-nb-rSE/strings.xml" , "res/values/strings.xml=>res/values-sv-rSV/strings.xml" , "res/values/strings.xml=>res/values-ff-rNO/strings.xml" ) ) ; }
public boolean hasFakeValue ( ) { com.android.resources.ResourceEnum value = getEnumValue ( ) ; return ( value != null ) && ( value.isFakeValue ( ) ) ; }
public static com.android.sched.util.Version getServerVersion ( ) { try { return new com.android.sched.util.Version ( "jack-server" , com.android.jack.server.JackHttpServer.class . getClassLoader ( ) ) ; } catch ( java.io.IOException e ) { com.android.jack.server.JackHttpServer.logger.log ( java.util.logging.Level.SEVERE , "Failed to read Jack-server version properties" , e ) ; throw new java.lang.AssertionError ( ) ; } }
public static void computeConvert ( android.renderscript.cts.TestConvert.ArgumentsShortUshort args ) { args.out = android.renderscript.cts.CoreMathVerifier.convertShortToUshort ( args.inV ) ; }
public void testShapes ( ) throws java.lang.Exception { checkVectorConversion ( "ic_shapes" ) ; }
public void remove ( ) { checkForConcurrentModification ( ) ; com.google.common.collect.CollectPreconditions.checkRemove ( ( ( current ) != null ) ) ; removeAllNodes ( current.key ) ; current = null ; expectedModCount = modCount ; }
public com.google.mockwebserver.MockResponse setBody ( byte [ ] body ) { setHeader ( "Content-Length" , body.length ) ; this . body = body ; this . bodyStream = null ; return this ; }
native long rsnScriptKernelIDCreate ( long con , long sid , int slot , int sig , boolean mUseInc ) ;
public java.util.List < android.view.inputmethod.InputMethodInfo > getInputMethodList ( ) { try { return mService.getInputMethodList ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
native void rsnScriptSetVarJ ( long con , long id , int slot , long val ) ;
public void testApi1 ( ) throws java.lang.Exception { mEnabled = com.android.tools.lint.checks.IconDetectorTest.ALL ; assertEquals ( "No warnings." , lintProject ( "apicheck/minsdk2.xml=>AndroidManifest.xml" , "res/drawable/ic_launcher.png" ) ) ; }
public void testNull ( ) throws java.lang.Exception { com.android.tools.lint.detector.api.TypeEvaluatorTest.checkExpression ( PsiType.NULL , "null" ) ; }
private void loge ( java.lang.String s ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.LOG_TAG , ( "[CdmaSSM] " + s ) ) ; }
java.util.Iterator < java.util.Map.Entry < K , V > > entryIterator ( ) { return map.entrySet ( ) . iterator ( ) ; }
synchronized boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDevService.TAG , ( "connect(): device=" + device ) ) ; } return connectNative ( com.android.bluetooth.Utils.getByteAddress ( device ) ) ; }
java.util.Set < java.io.File > getSrcDirs ( ) ;
public void testVFE5 ( ) { load ( "dot.junit.opcodes.if_eq.d.T_if_eq_10" , java.lang.VerifyError.class ) ; }
public static java.lang.String getThumbnailCacheDirectory ( android.content.Context appContext ) { assert ( org.chromium.base.PathUtils.sDirPathFetchTask ) != null : "setDataDirectorySuffix must be called first." ; return org.chromium.base.PathUtils.getDirectoryPath ( org.chromium.base.PathUtils.THUMBNAIL_DIRECTORY ) ; }
private static long tryParseLong ( java.lang.String value , long defValue ) { if ( android.text.TextUtils.isEmpty ( value ) ) return defValue ; try { return java.lang.Long.parseLong ( value ) ; } catch ( java.lang.NumberFormatException e ) { return defValue ; } }
public void getSmscAddressResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String smsc ) { responseString ( responseInfo , smsc ) ; }
public static boolean isEncrypted ( ) { return com.android.internal.os.RoSystemProperties.CRYPTO_ENCRYPTED ; }
public abstract java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedMethod > getMethods ( @ com.android.annotations.NonNull java.lang.String name , boolean includeInherited ) ;
public void replaceUserDevice ( com.android.sdklib.devices.Device d ) { synchronized ( mLock ) { if ( ( mUserDevices ) == null ) { initUserDevices ( ) ; } removeUserDevice ( d ) ; addUserDevice ( d ) ; } }
public static float scalb ( float f , int scaleFactor ) { return java.lang.Math.scalb ( f , scaleFactor ) ; }
public static void computeCospi ( android.renderscript.cts.TestCospi.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 4 , 128 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.cospi ( args.inX , t ) ; }
public void setPeriodicAdvertisingParameters ( int advertiserId , android.bluetooth.le.PeriodicAdvertisingParameters parameters ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.setPeriodicAdvertisingParameters ( advertiserId , parameters ) ; }
public void onNewOutgoingConnection ( @ android.support.annotation.NonNull com.android.dialer.simulator.impl.SimulatorConnection connection ) { if ( isMyConnection ( connection ) ) { com.android.dialer.common.LogUtil.i ( "SimulatorVoiceCall.onNewOutgoingConnection" , "connection created" ) ; handleNewConnection ( connection ) ; com.android.dialer.common.concurrent.ThreadUtil.postOnUiThread ( connection :: setActive ) ; } }
public static java.nio.CharBuffer allocate ( int capacity ) { if ( capacity < 0 ) { throw new java.lang.IllegalArgumentException ( ( "capacity < 0: " + capacity ) ) ; } return new java.nio.CharArrayBuffer ( new char [ capacity ] ) ; }
public void setSelectedFrame ( int frame ) { mCurrentFrame = frame ; if ( ( mTrace ) == null ) { return ; } updateImageCanvas ( ) ; updateFrameStats ( ) ; }
public java.lang.String getLine1Number ( ) { com.android.internal.telephony.uicc.IccRecords r = mIccRecords.get ( ) ; return r != null ? r.getMsisdnNumber ( ) : "" ; }
private java.util.List < char [ ] > getPasswords ( char [ ] pwd , java.nio.charset.Charset ... additionalEncodings ) { java.util.List < char [ ] > passwords = new java.util.ArrayList < > ( 3 ) ; addPasswords ( passwords , pwd , additionalEncodings ) ; return passwords ; }
public int since ( ) { if ( ( mValue ) != null ) { return mValue.since ( ) ; } return 8 ; }
public void test_formatDuration_Hours ( ) throws java.lang.Exception { assertEquals ( "59 minutes" , android.text.format.DateUtils.formatDuration ( 3540000 ) ) ; assertEquals ( "1 hour" , android.text.format.DateUtils.formatDuration ( 3600000 ) ) ; assertEquals ( "48 hours" , android.text.format.DateUtils.formatDuration ( 172800000 ) ) ; }
public com.android.builder.ProductFlavor setPackageName ( java.lang.String packageName ) { mPackageName = packageName ; return this ; }
static com.android.build.gradle.tasks.annotations.Extractor.ClassItem create ( @ com.android.annotations.NonNull java.lang.String classFqn , @ com.android.annotations.NonNull com.android.build.gradle.tasks.annotations.Extractor.ClassKind kind ) { classFqn = com.android.build.gradle.tasks.annotations.ApiDatabase.getRawClass ( classFqn ) ; return new com.android.build.gradle.tasks.annotations.Extractor.ClassItem ( classFqn , kind ) ; }
static java.lang.reflect.Method getStartFinalizer ( java.lang.Class < ? > finalizer ) { try { return finalizer.getMethod ( "startFinalizer" , java.lang.Class.class , java.lang.ref.ReferenceQueue.class , java.lang.ref.PhantomReference.class ) ; } catch ( java.lang.NoSuchMethodException e ) { throw new java.lang.AssertionError ( e ) ; } }
public java.lang.String getProperty ( java.lang.String name ) { return null ; }
public void onSensorChanged ( android.hardware.SensorEvent event ) { synchronized ( this ) { mSensorManager.unregisterListener ( this , mMotionSensor ) ; active = false ; motionLocked ( ) ; } }
private void setMobileDataAlwaysOn ( boolean enable ) { android.content.ContentResolver cr = mServiceContext.getContentResolver ( ) ; Settings.Global.putInt ( cr , Settings.Global.MOBILE_DATA_ALWAYS_ON , ( enable ? 1 : 0 ) ) ; mService.updateMobileDataAlwaysOn ( ) ; mService.waitForIdle ( ) ; }
java.io.File getTestedApk ( int density , @ com.android.annotations.NonNull java.util.List < java.lang.String > abis ) ;
protected static boolean assertTrue ( java.lang.String message , boolean condition ) { return com.ibm.icu.dev.test.TestFmwk.handleAssert ( condition , message , "true" , null ) ; }
public boolean linkToDeath ( android.os.IHwBinder.DeathRecipient recipient , long cookie ) ;
public void msg ( java.lang.String message , int level , boolean incCount , boolean newln ) { if ( ( delegate ) != null ) { com.ibm.icu.dev.test.TestFmwk.msg ( message , level , incCount , newln ) ; } }
public static native java.lang.String [ ] getDexFileOutputPaths ( java.lang.String fileName , java.lang.String instructionSet ) throws java.io.FileNotFoundException ;
public static com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder builder ( ) { return new com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder ( ) ; }
public void testNotification1 ( ) throws java.lang.Exception { checkGraphic ( "ic_stat_1" ) ; }
private int remapConstantIndex ( int constantIndex ) { int remappedConstantIndex = constantIndexMap [ constantIndex ] ; if ( remappedConstantIndex < 0 ) { throw new java.lang.IllegalArgumentException ( ( ( "Can't remap constant index [" + constantIndex ) + "]" ) ) ; } return remappedConstantIndex ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBuildVendorFingerprint ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 16384 ; buildVendorFingerprint_ = value ; onChanged ( ) ; return this ; }
public void onScaleChangedScaled ( float oldScale , float newScale ) { org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , " onScaleChangedScaled" ) ; mWebViewClient.onScaleChanged ( mWebView , oldScale , newScale ) ; org.chromium.base.TraceEvent.end ( ) ; }
public void applyTransportModeTransform ( java.net.DatagramSocket socket , int direction , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromDatagramSocket ( socket ) ) { applyTransportModeTransform ( pfd , direction , transform ) ; } }
private void onDeviceConfigChange ( ) { if ( ( mDisableUpdates ) > 0 ) { return ; } if ( ( computeCurrentConfig ( ) ) && ( ( mListener ) != null ) ) { mListener.onConfigurationChange ( ) ; } }
public int getTargetSdk ( ) { com.android.builder.model.ApiVersion targetSdk = mProject.getDefaultConfig ( ) . getProductFlavor ( ) . getTargetSdkVersion ( ) ; if ( targetSdk != null ) { return targetSdk.getApiLevel ( ) ; } return mTargetSdk ; }
public boolean removeAll ( final java.util.Collection < ? > collection ) { return com.google.common.collect.Iterables.removeIf ( unfiltered , com.google.common.base.Predicates.and ( predicate , com.google.common.base.Predicates.in ( collection ) ) ) ; }
public void compareBouncycastleStructure ( ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( new com.android.jack.Options ( ) , com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.BOOTCLASSPATH , null , com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.REF_BOOTCLASSPATH , null , com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.SOURCELIST , false , true , 0.4F , com.android.jack.compile.androidtree.bouncycastle.BouncycastleCompilationTest.JARJAR_RULES , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public static void computeMin ( android.renderscript.cts.TestMin.ArgumentsIntIntInt args ) { args.out = android.renderscript.cts.CoreMathVerifier.minI32 ( args.inV1 , args.inV2 ) ; }
public void onSearchComplete ( java.lang.String address , java.util.List < android.bluetooth.BluetoothGattService > services , int status ) throws android.os.RemoteException { }
protected void gotoKeyguard ( ) throws java.lang.Exception { sleepDevice ( ) ; wakeUpDevice ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; }
public static native int ENGINE_SSL_read_direct ( long sslNativePointer , long address , int length , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc ) throws java.io.IOException ;
public int countIn ( java.lang.CharSequence sequence ) { return ( sequence.length ( ) ) - ( original.countIn ( sequence ) ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAbstractStringLiteral expr ) { performCommonChecks ( expr ) ; com.android.jack.ir.ast.JAbstractStringLiteral other = otherOrMe ( expr ) ; ensure ( expr.getValue ( ) . equals ( other.getValue ( ) ) ) ; }
public void test43_001 ( ) throws java.lang.Exception { runTest ( "043" , "001" , "" , "lower-case" ) ; }
private void advance ( ) throws java.io.IOException { close ( ) ; if ( it.hasNext ( ) ) { in = it.next ( ) . openStream ( ) ; } }
void addMessage ( com.android.manifmerger.MergingReport.Builder report , com.android.utils.PositionXmlParser.Position position , com.android.manifmerger.MergingReport.Record.Severity severity , java.lang.String message ) { report.addMessage ( getOwnerElement ( ) . getDocument ( ) . getSourceLocation ( ) , position.getLine ( ) , position.getColumn ( ) , severity , message ) ; }
public static synchronized void setDefault ( java.util.Locale newLocale ) { java.util.Locale.setDefault ( java.util.Locale.Category.DISPLAY , newLocale ) ; java.util.Locale.setDefault ( java.util.Locale.Category.FORMAT , newLocale ) ; java.util.Locale.NoImagePreloadHolder.defaultLocale = newLocale ; libcore.icu.ICU.setDefaultLocale ( newLocale.toLanguageTag ( ) ) ; }
public java.util.List < java.util.Map.Entry < K , V > > entries ( ) { return ( ( java.util.List < java.util.Map.Entry < K , V > > ) ( super . entries ( ) ) ) ; }
public void check ( java.lang.String id ) { check.add ( id ) ; }
public void test_with_longTemporalField_nanoOfDay ( ) { for ( long i : testPoints ( 86400000000000L ) ) { java.time.LocalTime test = tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.with ( java.time.temporal.ChronoField.NANO_OF_DAY , i ) ; org.testng.Assert.assertEquals ( test , java.time.LocalTime.ofNanoOfDay ( i ) ) ; } }
private void checkIsEuiccSupported ( ) { if ( ( ( mAtr ) != null ) && ( mAtr.isEuiccSupported ( ) ) ) { mIsEuicc = true ; } else { mIsEuicc = false ; } }
private android.renderscript.Byte4 pack_b4 ( byte [ ] val ) { assert ( val.length ) == 4 ; return new android.renderscript.Byte4 ( val [ 0 ] , val [ 1 ] , val [ 2 ] , val [ 3 ] ) ; }
public com.android.dx.util.ByteArray slice ( int start , int end ) { checkOffsets ( start , end ) ; byte [ ] slicedOut = java.util.Arrays.copyOfRange ( bytes , start , end ) ; return new com.android.dx.util.ByteArray ( slicedOut ) ; }
public void setEras ( java.lang.String [ ] newEras ) { eras = java.util.Arrays.copyOf ( newEras , newEras.length ) ; cachedHashCode = 0 ; }
public org.bouncycastle.crypto.BlockCipher getUnderlyingCipher ( ) { return cipher ; }
void big ( com.android.ahat.DocString string ) ;
public void Print ( ) { java.lang.System.out.println ( ( ( ( art.Test988.whitespace ( cnt ) ) + "=> " ) + ( art.Test988.methodToString ( m ) ) ) ) ; }
private void inlinedForFalse ( boolean value , java.lang.Iterable it ) { if ( value ) { it.iterator ( ) ; } }
synchronized boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "connect(): device=" + device ) ) ; } return ( checkCallingUid ( ) ) && ( mHidDeviceNativeInterface.connect ( device ) ) ; }
public void setInputSources ( @ javax.annotation.Nonnull java.util.List < java.io.File > inputSources ) { this . inputSources = inputSources ; }
private static < T > T expectSoon ( T mock ) { return org.mockito.Mockito.verify ( mock , org.mockito.Mockito.timeout ( 200 ) ) ; }
private static int signInt ( int x ) { return java.lang.Integer.signum ( x ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.Locale create ( @ com.android.annotations.NonNull java.lang.String localeString ) { com.android.ide.common.resources.configuration.LocaleQualifier qualifier = com.android.ide.common.resources.configuration.LocaleQualifier.getQualifier ( localeString ) ; if ( qualifier != null ) { return new com.android.ide.eclipse.adt.internal.editors.layout.configuration.Locale ( qualifier ) ; } else { return com.android.ide.eclipse.adt.internal.editors.layout.configuration.Locale.ANY ; } }
private void processIccRecordEvents ( int eventCode ) { switch ( eventCode ) { case com.android.internal.telephony.uicc.RuimRecords.EVENT_MWI : notifyMessageWaitingIndicator ( ) ; break ; default : android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , ( "Unknown icc records event code " + eventCode ) ) ; break ; } }
, @ ViewDebug.IntToString ( from = android.graphics.Typeface.BOLD , to = "BOLD" ) , @ ViewDebug.IntToString ( from = android.graphics.Typeface.ITALIC , to = "ITALIC" ) , @ ViewDebug.IntToString ( from = android.graphics.Typeface.BOLD_ITALIC , to = "BOLD_ITALIC" ) } ) public int getTypefaceStyle ( ) { return mTextPaint.getTypeface ( ) . getStyle ( ) ; }
public void testGetSuggestedEscape ( ) { assertEquals ( "C:\\\\my\\\\path\\\\to\\\\sdk" , com.android.tools.lint.checks.PropertyFileDetector.getSuggestedEscape ( "Windows file separators (\\) must be escaped (\\\\); use C:\\\\my\\\\path\\\\to\\\\sdk" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; assertEquals ( "C\\:\\\\my\\\\path\\\\to\\\\sdk" , com.android.tools.lint.checks.PropertyFileDetector.getSuggestedEscape ( "local.properties:11: Error: Windows file separators (\\) and drive letter separators (\':\') must be escaped (\\\\) in property files; use C\\:\\\\my\\\\path\\\\to\\\\sdk" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; }
public org.junit.runner.Runner runnerForClass ( java.lang.Class < ? > testClass ) throws java.lang.Throwable { if ( mSkipExecution ) { return new com.android.test.runner.junit4.NonExecutingJUnit4ClassRunner ( testClass ) ; } if ( hasInjectedFields ( testClass ) ) { return new com.android.test.runner.junit4.AndroidJUnit4ClassRunner ( testClass , mInstrumentation , mBundle ) ; } return null ; }
public void reset ( ) { java.lang.System.arraycopy ( IV , 0 , counter , 0 , counter.length ) ; cipher.reset ( ) ; this . byteCount = 0 ; }
public static long min ( long a , long b ) { return java.lang.Math.min ( a , b ) ; }
public abstract void removeType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JType type ) ;
public java.lang.Boolean call ( ) { return pageDown ( bottom ) ; }
public static int testTrueBranch ( int x , int y ) { int z ; if ( Main.inlineTrue ( ) ) { z = x + y ; } else { z = x - y ; java.lang.System.nanoTime ( ) ; } return z ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; android.view.Display display = getWindowManager ( ) . getDefaultDisplay ( ) ; setContentView ( new com.example.plasma.PlasmaView ( this , display.getWidth ( ) , display.getHeight ( ) ) ) ; }
synchronized void nScriptSetVarF ( long id , int slot , float val , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetVarF ( curCon , id , slot , val , mUseInc ) ; }
public void handleMessage ( android.os.Message msg ) { if ( android.telephony.SubscriptionManager.DBG ) { log ( "handleMessage: invoke the overriden onSubscriptionsChanged()" ) ; } this . onSubscriptionsChanged ( ) ; }
private static synchronized void clearA2dpService ( ) { com.android.bluetooth.a2dp.A2dpService.sA2dpService = null ; }
public void testRunStarted ( java.lang.String runName , int testCount ) ;
public void testRsa512 ( ) throws java.lang.Exception { org.conscrypt.ChainStrengthAnalyzerTest.assertBad ( org.conscrypt.ChainStrengthAnalyzerTest.SHORT_RSA_PEM , "Short RSA modulus check did not fail as expected" ) ; }
public boolean isDualBandSupported ( ) { mLog.trace ( "isDualBandSupported uid=%" ) . c ( android.os.Binder.getCallingUid ( ) ) . flush ( ) ; return mContext.getResources ( ) . getBoolean ( com.android.internal.R.bool.config_wifi_dual_band_support ) ; }
private static boolean isSslCheckRelaxed ( ) { return ( com.android.internal.os.RoSystemProperties.DEBUGGABLE ) && ( android.os.SystemProperties.getBoolean ( "socket.relaxsslcheck" , false ) ) ; }
private java.io.File getTempFolder ( java.lang.String osBasePath ) { java.io.File baseTempFolder = new java.io.File ( osBasePath , com.android.sdklib.repository.RepoConstants.FD_TEMP ) ; return baseTempFolder ; }
public void testRevocable ( ) { assertTrue ( com.android.tools.lint.checks.PermissionRequirement.isRevocableSystemPermission ( "android.permission.ACCESS_FINE_LOCATION" ) ) ; assertTrue ( com.android.tools.lint.checks.PermissionRequirement.isRevocableSystemPermission ( "android.permission.ACCESS_COARSE_LOCATION" ) ) ; assertFalse ( com.android.tools.lint.checks.PermissionRequirement.isRevocableSystemPermission ( "android.permission.UNKNOWN_PERMISSION_NAME" ) ) ; }
public static java.lang.String getPackageName ( ) { if ( ( org.chromium.base.ContextUtils.getApplicationContext ( ) ) == null ) { return "" ; } return org.chromium.base.ContextUtils.getApplicationContext ( ) . getPackageName ( ) ; }
public com.android.sdklib.ISystemImage getSystemImage ( com.android.sdklib.repository.descriptors.IdDisplay tag , java.lang.String abiType ) { return null ; }
synchronized long nIncContextCreate ( long dev , int ver , int sdkVer , int contextType ) { return rsnIncContextCreate ( dev , ver , sdkVer , contextType ) ; }
public int hashCode ( ) { return icuColl.getRules ( ) . hashCode ( ) ; }
public void childRemoved ( java.util.prefs.NodeChangeEvent e ) { if ( libcore.java.util.prefs.OldPreferencesTest.ENCOURAGE_RACES ) try { java.lang.Thread.sleep ( 1000 ) ; } catch ( java.lang.InterruptedException ignored ) { } synchronized ( this ) { ++ ( eventCount ) ; ++ ( removed ) ; notifyAll ( ) ; } }
public com.android.internal.telephony.IccCard getIccCard ( ) { com.android.internal.telephony.IccCard iccCard = getUiccProfile ( ) ; return iccCard != null ? iccCard : new com.android.internal.telephony.IccCard ( ) ; }
protected void onResume ( ) { super . onResume ( ) ; mSensorManager.registerListener ( mListener , mSensor , SensorManager.SENSOR_DELAY_FASTEST ) ; if ( android.util.Config.LOGD ) android.util.Log.d ( TAG , ( "resume " + ( mSensorManager ) ) ) ; }
private static int signLong ( long x ) { return java.lang.Long.signum ( x ) ; }
public void testVFE5 ( ) { load ( "dot.junit.opcodes.invoke_interface.d.T_invoke_interface_5" , java.lang.VerifyError.class ) ; }
java.util.List < com.google.currysrc.api.process.Rule > getRuleList ( java.io.File file ) ;
public void wrongNegativeColumnIndex ( ) { expectedException.expect ( java.lang.IllegalArgumentException.class ) ; android.support.test.espresso.matcher.CursorMatchers.withRowInt ( ( - 1 ) , android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER ) . matches ( cursor ) ; }
public void testBackFromTheDead ( ) throws java.lang.Exception { exceptionInConstructor ( ) ; libcore.java.lang.ref.FinalizationTester.induceFinalization ( ) ; assertTrue ( "object whose constructor threw was not finalized" , libcore.java.lang.ref.FinalizeTest.ConstructionFails.finalized ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; pdq = new com.android.ide.common.resources.configuration.DensityQualifier ( ) ; config = new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; }
private long getLowStorageThreshold ( android.content.Context context ) { @ java.lang.SuppressWarnings ( value = "deprecation" ) final long lowThreshold = android.os.storage.StorageManager.from ( context ) . getStorageLowBytes ( mDataDir ) ; if ( lowThreshold == 0 ) { android.util.Log.e ( com.android.server.pm.BackgroundDexOptService.TAG , "Invalid low storage threshold" ) ; } return lowThreshold ; }
com.android.sched.vfs.DeflateFS.DeflateVFile createVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { return new com.android.sched.vfs.DeflateFS.DeflateVFile ( this , vfs.createVFile ( parent.getWrappedDir ( ) , name ) ) ; }
private void prepareOptionsMenuInternal ( android.view.Menu menu ) { menu.findItem ( StkApp.MENU_ID_END_SESSION ) . setVisible ( true ) ; menu.findItem ( StkApp.MENU_ID_HELP ) . setVisible ( mStkInput.helpAvailable ) ; }
public void onCallAdded ( com.android.server.telecom.Call call ) { if ( call.isExternalCall ( ) ) { return ; } updateHeadsetWithCallState ( false ) ; }
public byte [ ] getEncoded ( org.bouncycastle.crypto.params.AsymmetricKeyParameter keyParameter ) { return ( ( org.bouncycastle.crypto.params.ECPublicKeyParameters ) ( keyParameter ) ) . getQ ( ) . getEncoded ( usePointCompression ) ; }
private void applyTransportModeTransform ( android.os.ParcelFileDescriptor pfd , int direction , android.net.IpSecTransform transform ) throws java.io.IOException { try { mService.applyTransportModeTransform ( pfd , direction , transform.getResourceId ( ) ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
void setUp ( ) { status = READY ; com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . requestInterruptionFilter ( MockListener.HINT_HOST_DISABLE_CALL_EFFECTS ) ; }
public void setCallForwardingOption ( int commandInterfaceCFAction , int commandInterfaceCFReason , java.lang.String dialingNumber , int timerSeconds , android.os.Message onComplete ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "setCallForwardingOption: not possible in CDMA" ) ; }
public void testExtractDecodeEditEncodeMuxAudioVideo ( ) throws java.lang.Throwable { if ( ! ( setSize ( 1280 , 720 ) ) ) return ; setSource ( R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz ) ; setCopyAudio ( ) ; setCopyVideo ( ) ; setVerifyAudioFormat ( ) ; android.media.cts.ExtractDecodeEditEncodeMuxTest.TestWrapper.runTest ( this ) ; }
private static int transportToLegacyType ( int transport ) { switch ( transport ) { case TRANSPORT_ETHERNET : return android.net.ConnectivityManager.TYPE_ETHERNET ; case TRANSPORT_WIFI : return android.net.ConnectivityManager.TYPE_WIFI ; case TRANSPORT_CELLULAR : return android.net.ConnectivityManager.TYPE_MOBILE ; default : throw new java.lang.IllegalStateException ( ( "Unknown transport " + transport ) ) ; } }
public void testThatMethodWithOutAnnotationIsNotReportedAsBeingAnnotated ( ) throws java.lang.Exception { assertFalse ( hasExampleAnnotation ( android.test.suitebuilder.TestPredicatesTest.ClassWithoutAnnotation.class , "testWithoutAnnotation" ) ) ; }
public void reject ( int reason ) { this . reject ( reason ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( "arttest" ) ; JniTest.testFindClassOnAttachedNativeThread ( ) ; JniTest.testFindFieldOnAttachedNativeThread ( ) ; JniTest.testCallStaticVoidMethodOnSubClass ( ) ; JniTest.testGetMirandaMethod ( ) ; }
public int updateClip ( boolean enable ) { return - 1 ; }
public static void computeLgamma ( android.renderscript.cts.TestLgamma.ArgumentsFloatIntFloat args ) { android.renderscript.cts.CoreMathVerifier.LgammaResult result = android.renderscript.cts.CoreMathVerifier.lgamma2 ( args.inX ) ; args.out = new android.renderscript.cts.Floaty ( result.lgamma ) ; args.outY = result.gammaSign ; }
public java.util.Collection < com.android.jack.ir.ast.JAnnotationType > getAnnotationTypes ( ) { loader.ensureAnnotations ( this ) ; return com.android.jack.Jack.getUnmodifiableCollections ( ) . getUnmodifiableCollection ( com.android.jack.util.AnnotationUtils.getAnnotationTypes ( annotations ) ) ; }
public static boolean isInternalArrayInterfaceName ( java.lang.String internalClassName ) { return ( ( ClassConstants.NAME_JAVA_LANG_OBJECT.equals ( internalClassName ) ) || ( ClassConstants.NAME_JAVA_LANG_CLONEABLE.equals ( internalClassName ) ) ) || ( ClassConstants.NAME_JAVA_IO_SERIALIZABLE.equals ( internalClassName ) ) ; }
public boolean await ( ) throws java.lang.InterruptedException { android.util.Log.i ( mTag , ( "Number of GPS Navigation Message received = " + ( getEvents ( ) . size ( ) ) ) ) ; return android.location.cts.TestUtils.waitFor ( mCountDownLatch , android.location.cts.TestGnssNavigationMessageListener.TIMEOUT_IN_SEC ) ; }
public static java.lang.invoke.VarHandle byteBufferViewVarHandle ( java.lang.Class < ? > viewArrayClass , java.nio.ByteOrder byteOrder ) throws java.lang.IllegalArgumentException { java.lang.invoke.MethodHandles.checkClassIsArray ( viewArrayClass ) ; java.lang.invoke.MethodHandles.checkTypeIsViewable ( viewArrayClass.getComponentType ( ) ) ; return java.lang.invoke.ByteBufferViewVarHandle.create ( viewArrayClass , byteOrder ) ; }
public void inputChanged ( org.eclipse.jface.viewers.Viewer viewer , java.lang.Object oldInput , java.lang.Object newInput ) { if ( newInput instanceof com.android.ide.common.resources.ResourceRepository ) { mResources = ( ( com.android.ide.common.resources.ResourceRepository ) ( newInput ) ) ; } }
public static void assertFalse ( boolean condition ) { if ( condition ) throw new dot.junit.AssertionFailedException ( "condition was true" ) ; }
public void close ( ) { try { mFile.close ( ) ; } catch ( java.io.IOException ignored ) { } }
int getArea ( ) { return ( mWidth ) * ( mHeight ) ; }
public java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > getAllBlocksUnordered ( ) { return com.google.common.collect.Lists.newArrayList ( getInternalBasicBlocks ( false ) ) ; }
public com.google.common.collect.ImmutableSortedMap < K , V > build ( ) { return com.google.common.collect.ImmutableSortedMap.fromEntries ( comparator , false , size , entries ) ; }
private static void DisableReporting ( ) { if ( ( Main.doDisableReporting ) == null ) { return ; } try { Main.doDisableReporting.invoke ( null ) ; } catch ( java.lang.Exception e ) { throw new java.lang.Error ( "Unable to disable reporting!" ) ; } }
public com.google.common.collect.ImmutableList < com.android.dialer.precall.PreCallAction > getActions ( ) { return com.google.common.collect.ImmutableList.of ( new com.android.dialer.precall.impl.CallingAccountSelector ( ) , new com.android.dialer.precall.impl.AssistedDialAction ( ) ) ; }
long bitSize ( ) { return ( ( long ) ( data.length ) ) * ( java.lang.Long.SIZE ) ; }
private static native java.lang.String [ ] getClassNameList ( long cookie ) ;
public static boolean $noinline$equalsConstString3 ( java.lang.String s ) { return s.equals ( "012" ) ; }
public void TestContext ( ) { com.ibm.icu.text.Transliterator.Position pos = new com.ibm.icu.text.Transliterator.Position ( 0 , 2 , 0 , 1 ) ; com.ibm.icu.dev.test.translit.TransliteratorTest.expect ( "de > x; {d}e > y;" , "de" , "ye" , pos ) ; com.ibm.icu.dev.test.translit.TransliteratorTest.expect ( "ab{c} > z;" , "xadabdabcy" , "xadabdabzy" ) ; }
public com.android.ims.internal.IImsUt getUtInterface ( ) throws android.os.RemoteException { return mCompatFeature.getUtInterface ( ) ; }
public com.android.ims.internal.IImsCallSession createCallSessionInterface ( android.telephony.ims.ImsCallProfile profile ) throws android.os.RemoteException { return mCompatFeature.createCallSession ( mSessionId , profile ) ; }
static com.android.manifmerger.ManifestModel.NodeTypes fromXmlSimpleName ( java.lang.String xmlSimpleName ) { java.lang.String constantName = com.android.utils.SdkUtils.xmlNameToConstantName ( xmlSimpleName ) ; return com.android.manifmerger.ManifestModel.NodeTypes.valueOf ( constantName ) ; }
public java.util.Collection < com.android.jack.ir.ast.JAnnotation > getAnnotations ( ) { return com.android.jack.Jack.getUnmodifiableCollections ( ) . getUnmodifiableCollection ( annotations ) ; }
public void err ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { mLogger.error ( null , line ) ; mFoundError = true ; } }
protected com.android.build.gradle.internal.variant.ApkVariantOutputData doCreateOutput ( com.android.build.OutputFile.OutputType outputType , java.util.Collection < com.android.build.FilterData > filters ) { return new com.android.build.gradle.internal.variant.ApkVariantOutputData ( outputType , filters , this , taskManager ) ; }
public java.util.List < com.android.ide.common.resources.ResourceItem > getResourceItemsOfType ( com.android.resources.ResourceType type ) { return mPublicResourceMap.get ( type ) ; }
public boolean hasNext ( ) { return iterator.hasNext ( ) ; }
private boolean isBluetoothPersistedStateOnBluetooth ( ) { if ( ! ( supportBluetoothPersistedState ( ) ) ) { return false ; } return ( Settings.Global.getInt ( mContentResolver , Settings.Global.BLUETOOTH_ON , com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH ) ) == ( com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH ) ; }
private libcore.util.ZoneInfo createZoneInfo ( int [ ] [ ] transitions , int [ ] [ ] types ) throws java.lang.Exception { return createZoneInfo ( getName ( ) , transitions , types , java.lang.System.currentTimeMillis ( ) ) ; }
public void visitMethodInsn ( final int opcode , final java.lang.String owner , final java.lang.String name , final java.lang.String desc , final boolean itf ) { check ( owner , ( name + desc ) ) ; }
public boolean onMenuItemClick ( android.view.MenuItem item ) { phone.getDataCallList ( null ) ; return true ; }
public void onMessageWaitingIndicatorChanged ( boolean visible ) { if ( com.android.phone.CallNotifier.VDBG ) log ( ( ( ( "onMessageWaitingIndicatorChanged(): " + ( this . mSubId ) ) + " " ) + visible ) ) ; mMWIStatus.put ( this . mSubId , visible ) ; updatePhoneStateListeners ( false ) ; }
public void dispose ( ) { clearPostDialListeners ( ) ; if ( ( mParent ) != null ) { mParent.detach ( this ) ; } releaseAllWakeLocks ( ) ; }
public static float $noinline$floatSubAddSimplifyLeft ( float x , float y ) { float sub = x - y ; return sub + y ; }
public java.util.Iterator < com.android.sched.vfs.InputVFile > iterator ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) ;
public java.lang.String getNamespace ( ) { if ( ( mNamespace ) == null ) { mNamespace = com.android.util.XmlUtils.ANDROID_URI ; if ( ! ( layout.getFqcn ( ) . equals ( com.android.ide.common.layout.LayoutConstants.FQCN_GRID_LAYOUT ) ) ) { mNamespace = mRulesEngine.getAppNameSpace ( ) ; } } return mNamespace ; }
protected int getFirstItemPosition ( ) { if ( ( ( mSeriesRecording ) != null ) && ( ( mSeriesRecording.getState ( ) ) == ( com.android.tv.dvr.data.SeriesRecording.STATE_SERIES_STOPPED ) ) ) { return 0 ; } return super . getFirstItemPosition ( ) ; }
private void printLines ( final java.util.ArrayList < java.lang.String > lines ) { for ( java.lang.String line : lines ) { android.util.Log.d ( android.media.cts.ConnectionStatus.TAG , line ) ; } }
public boolean p2pServiceFlush ( ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.serviceFlush ( ) ; } else { return doBooleanCommand ( "P2P_SERVICE_FLUSH" ) ; } }
private void combineNetCapabilities ( android.net.NetworkCapabilities nc ) { this . mNetworkCapabilities |= nc.mNetworkCapabilities ; this . mUnwantedNetworkCapabilities |= nc.mUnwantedNetworkCapabilities ; }
public void visitRuntimeVisibleParameterAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.RuntimeVisibleParameterAnnotationsAttribute runtimeVisibleParameterAnnotationsAttribute ) { if ( ( runtimeVisibleParameterAnnotationsAttribute.u1parametersCount ) > 0 ) { attributeVisitor.visitRuntimeVisibleParameterAnnotationsAttribute ( clazz , method , runtimeVisibleParameterAnnotationsAttribute ) ; } }
public void notifyPackageInstalled ( android.content.pm.PackageInfo pi , int userId ) { if ( userId == ( android.os.UserHandle.USER_ALL ) ) { throw new java.lang.IllegalArgumentException ( "notifyPackageInstalled called with USER_ALL" ) ; } cachePackageCodeLocation ( pi.packageName , pi.applicationInfo.sourceDir , pi.applicationInfo.splitSourceDirs , pi.applicationInfo.dataDir , userId ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { com.google.gct.testing.CloudConfigurationImpl newConfiguration = ( ( selectedConfiguration ) != null ) ? selectedConfiguration.copy ( "Copy of " ) : new com.google.gct.testing.CloudConfigurationImpl ( facet , configurationKind ) ; addNewConfiguration ( newConfiguration ) ; }
public void onMessageWaitingIndicatorChanged ( boolean visible ) { if ( com.android.phone.CallNotifier.VDBG ) log ( ( ( ( "onMessageWaitingIndicatorChanged(): " + ( this . mSubId ) ) + " " ) + visible ) ) ; mMWIStatus.put ( this . mSubId , visible ) ; updatePhoneStateListeners ( false ) ; }
public com.android.dialer.spam.status.SimpleSpamStatus.Builder setTimestampMillis ( @ android.support.annotation.Nullable java.lang.Long timestampMillis ) { return setTimestampMillis ( com.google.common.base.Optional.fromNullable ( timestampMillis ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; server = new com.google.mockwebserver.MockWebServer ( ) ; defaultHandler = java.net.CookieHandler.getDefault ( ) ; cookieManager = new java.net.CookieManager ( createCookieStore ( ) , null ) ; cookieStore = cookieManager.getCookieStore ( ) ; }
public static void computeExpm1 ( android.renderscript.cts.TestExpm1.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.expm1 ( args.in ) , 3 , 16 ) ; }
public boolean pageUp ( boolean top ) { checkThread ( ) ; if ( android.webkit.WebView.TRACE ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "pageUp" ) ; return mProvider.pageUp ( top ) ; }
public java.util.List < com.android.sched.util.log.LoggerConfiguration.PackageLevel > getLevels ( ) { return java.util.Arrays.asList ( new com.android.sched.util.log.LoggerConfiguration.PackageLevel ( "" , java.util.logging.Level.WARNING ) , new com.android.sched.util.log.LoggerConfiguration.PackageLevel ( "com.android.jack" , java.util.logging.Level.FINE ) , new com.android.sched.util.log.LoggerConfiguration.PackageLevel ( "com.android.sched" , java.util.logging.Level.WARNING ) ) ; }
public java.util.Set < K > keySet ( ) { return multimap.keySet ( ) ; }
private static void addZipEntry ( java.util.zip.ZipOutputStream zipOutputStream , java.lang.String name ) throws java.io.IOException { libcore.tzdata.shared2.TimeZoneDistroTest.addZipEntry ( zipOutputStream , name , "a" . getBytes ( java.nio.charset.StandardCharsets.US_ASCII ) ) ; }
public java.io.OutputStream getOutputStream ( ) throws java.io.IOException { return new java.nio.SocketChannelImpl.BlockingCheckOutputStream ( super . getOutputStream ( ) , channel ) ; }
private static void _put ( long a , byte b ) { java.nio.Bits.unsafe.putByte ( a , b ) ; }
public static < K > org.hamcrest.Matcher < java.util.Map < ? extends K , ? > > hasKey ( K key ) { return new org.hamcrest.collection.IsMapContaining < K , java.lang.Object > ( org.hamcrest.collection.IsMapContaining.equalTo ( key ) , org.hamcrest.collection.IsMapContaining.anything ( ) ) ; }
void setAddress ( java.lang.String callId , android.net.Uri address , int presentation ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.setAddress ( callId , address , presentation , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException e ) { } } }
private void setInput ( java.lang.Readable input ) { this . input = input ; buffer.limit ( 0 ) ; matcher = delimiter.matcher ( buffer ) ; }
public void sendMessageWithSessionInfo ( int message ) { sendMessage ( message , 0 , 0 , android.telecom.Log.createSubsession ( ) ) ; }
private void updateClip ( java.lang.String number ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "updateClip " + number ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.QUERY_CURRENT_CALLS ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setSuiteNameBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 2048 ; suiteName_ = value ; onChanged ( ) ; return this ; }
public void reset ( ) { mResult = null ; mMessage = null ; mStackTrace = null ; mReport = null ; mBugReport = null ; mLog = null ; mScreenshot = null ; mIsRetry = false ; }
public static void setUp ( ) { tck.java.time.TCKOffsetDateTime.TEST_2008_6_30_11_30_59_000000500 = java.time.OffsetDateTime.of ( 2008 , 6 , 30 , 11 , 30 , 59 , 500 , tck.java.time.TCKOffsetDateTime.OFFSET_PONE ) ; }
public void test_truncatedTo_null ( ) { tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.truncatedTo ( null ) ; }
public android.database.Cursor loadInBackground ( ) { if ( ( directoryId ) == ( com.android.dialer.searchfragment.nearbyplaces.NearbyPlacesCursorLoader.INVALID_DIRECTORY_ID ) ) { com.android.dialer.common.LogUtil.i ( "NearbyPlacesCursorLoader.loadInBackground" , "directory id not set." ) ; return null ; } return com.android.dialer.searchfragment.nearbyplaces.NearbyPlacesCursor.newInstance ( getContext ( ) , super . loadInBackground ( ) , directoryId ) ; }
public void testMissingBackupInTarget23 ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.ALLOW_BACKUP ) ; assertEquals ( ( "" + ( ( ( ( ( ( ( "AndroidManifest.xml:5: Warning: On SDK version 23 and up, your app data will " + "be automatically backed up and restored on app install. Consider " ) + "adding the attribute android:fullBackupContent to specify an @xml " ) + "resource which configures which files to backup. More info: " ) + "https://developer.android.com/preview/backup/index.html [AllowBackup]\n" ) + " <application\n" ) + " ^\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( xml ( "AndroidManifest.xml" , ( "" + ( ( ( ( ( ( ( ( ( ( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.helloworld\" >\n" ) + " <uses-sdk android:targetSdkVersion=\"23\" />" ) + "\n" ) + " <application\n" ) + " android:label=\"@string/app_name\"\n" ) + " android:theme=\"@style/AppTheme\" >\n" ) + " </application>\n" ) + "\n" ) + "</manifest>\n" ) ) ) ) ) ; }
public long getDisconnectedTimeMilli ( ) { if ( ( ( getCurrentState ( ) ) == ( mDisconnectedState ) ) && ( ( mDisconnectedTimeStamp ) != 0 ) ) { long now_ms = mClock.getWallClockMillis ( ) ; return now_ms - ( mDisconnectedTimeStamp ) ; } return 0 ; }
public void testInstall_withMissingBundleVersionFile ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , "001" ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; assertFalse ( installer.install ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public void registerObject ( @ javax.annotation.Nonnull java.lang.Object object , @ javax.annotation.Nonnegative long size , int count ) { assert ( config ) == ( com.android.sched.util.config.ThreadConfig.getConfig ( ) ) ; throw new java.lang.UnsupportedOperationException ( ) ; }
public static int getApproximateFontWidth ( org.eclipse.swt.widgets.Control c ) { org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC ( c ) ; int avgCharWidth = gc.getFontMetrics ( ) . getAverageCharWidth ( ) ; gc.dispose ( ) ; return java.lang.Math.max ( avgCharWidth , com.android.ide.eclipse.gltrace.SwtUtils.MIN_CHAR_WIDTH ) ; }
void startAppProblemLocked ( com.android.server.am.ProcessRecord app ) { app.errorReportReceiver = android.app.ApplicationErrorReport.getErrorReportReceiver ( mContext , app.info.packageName , app.info.flags ) ; skipCurrentReceiverLocked ( app ) ; }
public java.lang.String getNetworkOperator ( ) { return getNetworkOperatorForPhone ( getPhoneId ( ) ) ; }
com.android.ahat.heapdump.Site getSite ( com.android.tools.perflib.heap.StackFrame [ ] frames ) { return frames == null ? this : com.android.ahat.heapdump.Site.getSite ( this , frames ) ; }
public int writeSize ( ) { return com.android.jack.dx.dex.SizeOf.getHeaderSize ( apiLevel ) ; }
public int getSimState ( int slotIndex ) { int simState = android.telephony.SubscriptionManager.getSimStateForSlotIndex ( slotIndex ) ; return simState ; }
public static void computeMin ( android.renderscript.cts.TestMin.ArgumentsUintUintUint args ) { args.out = android.renderscript.cts.CoreMathVerifier.minU32 ( args.inV1 , args.inV2 ) ; }
public com.android.tools.perflib.heap.ClassObj getClassObj ( ) { return mClass ; }
public boolean isEnabled ( @ android.support.annotation.NonNull android.content.Context context ) { return false ; }
public static float nextAfter ( float start , double direction ) { return java.lang.Math.nextAfter ( start , direction ) ; }
public void isAssignableFrom_plainView ( ) { android.view.View v = new android.view.View ( context ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.view.View.class ) . matches ( v ) ) ; }
public static < K , V > java.util.Map < K , java.util.Collection < V > > asMap ( com.google.common.collect.Multimap < K , V > multimap ) { return multimap.asMap ( ) ; }
public static native long EC_POINT_new ( org.conscrypt.NativeRef.EC_GROUP groupRef ) ;
public static < T extends java.lang.Throwable > org.hamcrest.Matcher < T > isThrowable ( org.hamcrest.Matcher < T > throwableMatcher ) { return org.junit.internal.matchers.StacktracePrintingMatcher.isThrowable ( throwableMatcher ) ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( ( optionalAttributeVisitor ) != null ) { optionalAttributeVisitor.visitRuntimeVisibleAnnotationsAttribute ( clazz , method , runtimeVisibleAnnotationsAttribute ) ; } }
public void getAvailableBandModesResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.util.ArrayList < java.lang.Integer > bandModes ) { responseIntArrayList ( responseInfo , bandModes ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.b2296099Test ( ) ; Main.b2302318Test ( ) ; Main.b2487514Test ( ) ; Main.b5884080Test ( ) ; Main.zeroTest ( ) ; }
public boolean isTypeUnConditional ( ) { return ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_CFU ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_CF_ALL ) ) ; }
private org.chromium.mojo.system.impl.CoreImpl.AsyncWaiterCancellableImpl newAsyncWaiterCancellableImpl ( long id , long dataPtr ) { return new org.chromium.mojo.system.impl.CoreImpl.AsyncWaiterCancellableImpl ( id , dataPtr ) ; }
public git4idea.branch.VcsCommitStyle getStyle ( int commitIndex , boolean isSelected ) { return git4idea.branch.VcsCommitStyleFactory.foreground ( ( ! ( myNonPickedCommits.contains ( commitIndex ) ) ? com.intellij.ui.JBColor.GRAY : null ) ) ; }
private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream.defaultReadObject ( ) ; if ( ( digits ) == null ) { setZeroDigit ( zeroDigit ) ; } decimalBuf = new char [ com.ibm.icu.impl.DateNumberFormat.DECIMAL_BUF_SIZE ] ; }
public int setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent ( android.bluetooth.BluetoothDevice device , int state , int profile , boolean suppressNoisyIntent ) { if ( mAudioHandler.hasMessages ( com.android.server.audio.AudioService.MSG_SET_A2DP_SINK_CONNECTION_STATE , device ) ) { return 0 ; } return setBluetoothA2dpDeviceConnectionStateInt ( device , state , profile , suppressNoisyIntent , AudioSystem.DEVICE_NONE ) ; }
void unhold ( ) { com.android.internal.util.Preconditions.checkNotNull ( mConnectionService ) ; if ( ( mState ) == ( CallState.ON_HOLD ) ) { mConnectionService.unhold ( this ) ; android.telecom.Log.addEvent ( this , LogUtils.Events.REQUEST_UNHOLD ) ; } }
public int compareTo ( com.android.dex.TableOfContents.Section section ) { if ( ( off ) != ( section.off ) ) { return ( off ) < ( section.off ) ? - 1 : 1 ; } return 0 ; }
android.net.Uri getAddress ( android.telecom.PhoneAccountHandle handle ) { synchronized ( mAccountsLock ) { for ( com.android.services.telephony.TelecomAccountRegistry.AccountEntry entry : mAccounts ) { if ( entry.getPhoneAccountHandle ( ) . equals ( handle ) ) { return entry.mAccount.getAddress ( ) ; } } } return null ; }
public static synchronized com.google.i18n.phonenumbers.PhoneNumberUtil getInstance ( ) { if ( ( com.google.i18n.phonenumbers.PhoneNumberUtil.instance ) == null ) { com.google.i18n.phonenumbers.PhoneNumberUtil.setInstance ( com.google.i18n.phonenumbers.PhoneNumberUtil.createInstance ( MetadataManager.DEFAULT_METADATA_LOADER ) ) ; } return com.google.i18n.phonenumbers.PhoneNumberUtil.instance ; }
public void removeService ( int serverIf , int handle ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.removeService ( serverIf , handle ) ; }
void disposeThumbnail ( ) { if ( ( mThumbnail ) != null ) { mThumbnail.dispose ( ) ; mThumbnail = null ; } }
public com.android.sched.vfs.OutputVFile getJayceOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { return outputVDir.createOutputVFile ( new com.android.sched.vfs.VPath ( ( ( typePath.getPathAsString ( '/' ) ) + ( com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION ) ) , '/' ) ) ; }
public void loadData ( java.lang.String data , java.lang.String mimeType , java.lang.String encoding ) { loadUrlOnUiThread ( org.chromium.content_public.browser.LoadUrlParams.createLoadDataParams ( com.android.webview.chromium.WebViewChromium.fixupData ( data ) , com.android.webview.chromium.WebViewChromium.fixupMimeType ( mimeType ) , com.android.webview.chromium.WebViewChromium.isBase64Encoded ( encoding ) ) ) ; }
public void destroy ( ) { android.telecom.Log.addEvent ( this , LogUtils.Events.DESTROYED ) ; }
protected void doBuildPatchFile ( java.io.File toFile , com.intellij.updater.MultiZipFile.OutputStream patchOutput ) throws java.io.IOException { }
public void testExitProximity ( ) throws java.lang.Exception { doTestEnterProximity ( ( - 1 ) ) ; mIntentReceiver.clearReceivedIntents ( ) ; java.lang.Thread.sleep ( 2000 ) ; updateLocation ( 20 , 20 ) ; waitForReceiveBroadcast ( ) ; assertProximityType ( false ) ; }
public static com.android.dx.rop.annotation.Annotation makeEnclosingClass ( com.android.dx.rop.cst.CstType clazz ) { com.android.dx.rop.annotation.Annotation result = new com.android.dx.rop.annotation.Annotation ( com.android.dx.dex.file.AnnotationUtils.ENCLOSING_CLASS_TYPE , com.android.dx.rop.annotation.AnnotationVisibility.SYSTEM ) ; result.put ( new com.android.dx.rop.annotation.NameValuePair ( com.android.dx.dex.file.AnnotationUtils.VALUE_STRING , clazz ) ) ; result.setImmutable ( ) ; return result ; }
public void callSessionHandoverFailed ( com.android.ims.internal.IImsCallSession i , int srcAccessTech , int targetAccessTech , android.telephony.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mNewListener.callSessionHandoverFailed ( srcAccessTech , targetAccessTech , reasonInfo ) ; }
public void setVariants ( @ com.android.annotations.NonNull java.util.Collection < com.android.build.gradle.internal.variant.BaseVariantData > variants ) { this . variants.addAll ( variants ) ; }
private java.lang.Integer retrieveFeatureStatus ( ) { if ( ( mBinder ) != null ) { try { return getServiceInterface ( mBinder ) . getFeatureStatus ( mSlotId , mSupportedFeature ) ; } catch ( android.os.RemoteException e ) { } } return null ; }
public java.lang.String getHandshakeApplicationProtocol ( ) { return delegate.getHandshakeApplicationProtocol ( ) ; }
public void onPostDialContinue ( java.lang.String callId , boolean proceed , android.telecom.Logging.Session.Info info ) throws android.os.RemoteException { }
public void wifiStartTrackingTetherStateChange ( ) { mService.registerReceiver ( mTetherStateReceiver , mTetherFilter ) ; mTrackingTetherStateChange = true ; }
public static com.android.ide.eclipse.adt.internal.resources.ResourceNameValidator create ( boolean allowXmlExtension , com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType type ) { boolean isFileType = type != ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType.VALUES ) ; return new com.android.ide.eclipse.adt.internal.resources.ResourceNameValidator ( allowXmlExtension , null , isFileType ) ; }
public void onMetadataChanged ( android.media.MediaMetadata metadata ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , "onMetadataChanged" ) ; updateCurrentMediaState ( false ) ; }
public void testOkLibraries ( ) throws java.lang.Exception { mScopes = null ; mEnabled = com.google.common.collect.Sets.newHashSet ( com.android.tools.lint.checks.MissingClassDetector.MISSING , com.android.tools.lint.checks.MissingClassDetector.INSTANTIATABLE , com.android.tools.lint.checks.MissingClassDetector.INNERCLASS ) ; assertEquals ( "No warnings." , lintProject ( "bytecode/AndroidManifestRegs.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "bytecode/classes.jar=>libs/classes.jar" ) ) ; }
public void start ( ) { mRetryCounter = 0 ; mCurrentDelayMs = mStartDelayMs ; mHandlerAdapter.removeCallbacks ( mRunnable ) ; mHandlerAdapter.postDelayed ( mRunnable , mCurrentDelayMs ) ; }
public E previous ( ) { if ( ( index ) > ( from ) ) { return ( ( E ) ( snapshot [ ( -- ( index ) ) ] ) ) ; } else { throw new java.util.NoSuchElementException ( ) ; } }
public void testDeleteSdcardRetainData ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } deleteFromRawResource ( PackageManager.INSTALL_EXTERNAL , PackageManager.DONT_DELETE_DATA ) ; }
public boolean remove ( java.lang.Object element ) { return ( contains ( element ) ) && ( unfiltered.remove ( element ) ) ; }
public int getSubscriptionCarrierId ( int subId ) { final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; return phone == null ? android.telephony.TelephonyManager.UNKNOWN_CARRIER_ID : phone.getCarrierId ( ) ; }
public void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; props.setProperty ( PkgProps.PKG_REVISION , mRevision.toString ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { mNetwork = new android.net.Network ( ConnectivityManager.NETID_UNSET ) ; mServer = new android.net.SntpClientTest.SntpTestServer ( ) ; mClient = new android.net.SntpClient ( ) ; }
public final void scheduleSleeping ( android.os.IBinder token , boolean sleeping ) { sendMessage ( android.app.ActivityThread.H.SLEEPING , token , ( sleeping ? 1 : 0 ) ) ; }
public void onClick ( android.view.View view ) { android.graphics.drawable.AnimationDrawable drawable = ( ( android.graphics.drawable.AnimationDrawable ) ( button.getIconDrawable ( ) ) ) ; drawable.stop ( ) ; drawable.start ( ) ; delegate.swapSimClicked ( ) ; }
public java.lang.String getVersionNameFromManifest ( ) { java.io.File manifestLocation = mDefaultSourceProvider.getManifestFile ( ) ; return sManifestParser.getVersionName ( manifestLocation ) ; }
public java.lang.String getSettingsValue ( ) { return Settings.Global.getString ( mResolver , android.provider.Settings.Global.NETWORK_AVOID_BAD_WIFI ) ; }
private boolean isDirtyInternal ( android.content.Context appContext ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; return ! ( com.android.dialer.storage.StorageComponent.get ( appContext ) . unencryptedSharedPrefs ( ) . contains ( com.android.dialer.calllog.datasources.systemcalllog.SystemCallLogDataSource.PREF_LAST_TIMESTAMP_PROCESSED ) ) ; }
public void testDataPathResponderNoConfirmationTimeoutFail ( ) throws java.lang.Exception { testDataPathResponderUtility ( false , true , true , false ) ; }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createElement ( java.lang.String xmlName ) { return createElement ( xmlName , null , Mandatory.NOT_MANDATORY ) ; }
public java.util.List < java.util.Map.Entry < K , V > > entries ( ) { return ( ( java.util.List < java.util.Map.Entry < K , V > > ) ( super . entries ( ) ) ) ; }
public int getSerializedSize ( ) { cachedSize = 0 ; return 0 ; }
public com.android.tools.perflib.heap.Heap setToDefaultHeap ( ) { return setHeapTo ( com.android.tools.perflib.heap.Snapshot.DEFAULT_HEAP_ID , "default" ) ; }
public static native void EVP_PKEY_CTX_set_rsa_padding ( long ctx , int pad ) ;
boolean isWellFormed ( java.lang.String value ) { return android.icu.impl.locale.KeyTypeData.CodepointsTypeHandler.pat.matcher ( value ) . matches ( ) ; }
public java.util.Set < java.io.File > getCDirectories ( ) { return java.util.Collections.singleton ( new java.io.File ( mRoot , "jni" ) ) ; }
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file ) throws com.android.sched.util.file.WrongPermissionException { return openWrite ( file , false ) ; }
public void addMatrix ( android.support.v8.renderscript.Matrix3f v ) { mN.addMatrix ( new android.support.v8.renderscript.Matrix3f ( v.getArray ( ) ) ) ; mPos += ( 3 * 3 ) * 4 ; }
public void addPages ( ) { mValues.project = mInitialProject ; mChooseAssetPage = new com.android.ide.eclipse.adt.internal.assetstudio.ChooseAssetTypePage ( mValues ) ; mConfigureAssetPage = new com.android.ide.eclipse.adt.internal.assetstudio.ConfigureAssetSetPage ( mValues ) ; addPage ( mChooseAssetPage ) ; addPage ( mConfigureAssetPage ) ; }
public com.android.internal.telephony.ims.IsimRecords getIsimRecords ( ) { android.telephony.Rlog.e ( com.android.internal.telephony.PhoneBase.LOG_TAG , "getIsimRecords() is only supported on LTE devices" ) ; return null ; }
private void writeCharacteristic ( java.lang.String writeValue ) { android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.CHARACTERISTIC_UUID ) ; if ( characteristic == null ) return ; characteristic.setValue ( writeValue ) ; mBluetoothGatt.writeCharacteristic ( characteristic ) ; }
public void annotateTo ( com.android.jack.dx.dex.file.DexFile file , com.android.jack.dx.util.AnnotatedOutput out , java.lang.String prefix ) { out.annotate ( " debug info not available (imported)" ) ; }
public android.view.DisplayAdjustments getDisplayAdjustments ( int displayId ) { return mDisplayAdjustments ; }
public void run ( ) { synchronized ( this ) { loadImage ( ) ; crosshairLocation = model.getCrosshairLocation ( ) ; zoom = model.getZoom ( ) ; overlayImage = model.getOverlayImage ( ) ; } }
public int getSubId ( ) { if ( ( com.android.internal.telephony.SubscriptionController.getInstance ( ) ) == null ) { android.telephony.Rlog.e ( com.android.internal.telephony.Phone.LOG_TAG , "SubscriptionController.getInstance = null! Returning default subId" ) ; return android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID ; } return com.android.internal.telephony.SubscriptionController.getInstance ( ) . getSubIdUsingPhoneId ( mPhoneId ) ; }
public boolean password ( java.lang.String password ) { try { return ( mBinder.password ( password ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
private void waitForStagedUninstall ( ) throws java.lang.Exception { com.android.timezone.xts.TimeZoneUpdateHostTest.waitForCondition ( ( ) -> isStagedUninstall ( ) ) ; }
private native java.lang.annotation.Annotation [ ] [ ] getParameterAnnotationsNative ( ) ;
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranchBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 8 ; branch_ = value ; onChanged ( ) ; return this ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranchBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; branch_ = value ; onChanged ( ) ; return this ; }
void unregisterAdvertiser ( int advertiserId ) { com.android.bluetooth.gatt.AdvertiseClient client = getAdvertiseClient ( advertiserId ) ; if ( ( client != null ) && ( mAdvertiseClients.contains ( client ) ) ) { mAdvertiseClients.remove ( client ) ; } mAdvertiseNative.unregisterAdvertiserNative ( advertiserId ) ; }
public void onTargetLoaded ( com.android.sdklib.IAndroidTarget loadedTarget ) { com.android.sdklib.IAndroidTarget target = getRenderingTarget ( ) ; if ( ( target != null ) && ( target.equals ( loadedTarget ) ) ) { updateEditor ( ) ; } }
public java.lang.String [ ] getPeerSupportedSignatureAlgorithms ( ) { return new java.lang.String [ ] { "SHA1withRSA" , "SHA1withECDSA" } ; }
public void getCDMASubscriptionResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String mdn , java.lang.String hSid , java.lang.String hNid , java.lang.String min , java.lang.String prl ) { responseStrings ( responseInfo , mdn , hSid , hNid , min , prl ) ; }
public boolean accept ( java.io.File pathname ) { java.lang.String name = pathname.getName ( ) ; return ! ( ( name.startsWith ( extractedFilePrefix ) ) || ( name.equals ( android.support.multidex.MultiDexExtractor.LOCK_FILENAME ) ) ) ; }
public boolean isConnected ( ) { return false ; }
java.lang.Object getStaticField ( com.android.tools.perflib.heap.Type type , java.lang.String name ) { return getStaticFieldValues ( ) . get ( new com.android.tools.perflib.heap.Field ( type , name ) ) ; }
public static com.android.ide.common.blame.SourcePosition getPosition ( @ com.android.annotations.NonNull org.w3c.dom.Node node ) { return com.android.utils.PositionXmlParser.getPosition ( node , ( - 1 ) , ( - 1 ) ) ; }
public void realRun ( ) throws java.lang.InterruptedException { threadStarted.countDown ( ) ; assertEquals ( 0 , p.getCompletedTaskCount ( ) ) ; threadProceed.await ( ) ; threadDone.countDown ( ) ; }
public void supplyPin ( java.lang.String pin , android.os.Message onComplete ) { synchronized ( mLock ) { mCi.supplyIccPinForApp ( pin , mAid , mHandler.obtainMessage ( com.android.internal.telephony.uicc.UiccCardApplication.EVENT_PIN1_PUK1_DONE , onComplete ) ) ; } }
protected void unregisterForRuimRecordEvents ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.unregisterForNewSms ( this ) ; super . unregisterForRuimRecordEvents ( ) ; }
private static void verifySingleScanCompletedReceived ( org.mockito.InOrder order , android.os.Handler handler , int listenerId ) { android.os.Message completedMessage = com.android.server.wifi.scanner.WifiScanningServiceTest.verifyHandleMessageAndGetMessage ( order , handler , WifiScanner.CMD_SINGLE_SCAN_COMPLETED ) ; com.android.server.wifi.scanner.WifiScanningServiceTest.assertSingleScanCompletedMessage ( listenerId , completedMessage ) ; }
public android.os.ConditionVariable getPreventReconnectReceived ( ) { return mPreventReconnectReceived ; }
void reset ( ) { if ( ( com.android.bluetooth.btservice.RemoteDevices.mSdpTracker ) != null ) com.android.bluetooth.btservice.RemoteDevices.mSdpTracker.clear ( ) ; if ( ( mDevices ) != null ) mDevices.clear ( ) ; if ( ( mDeviceQueue ) != null ) mDeviceQueue.clear ( ) ; }
public java.lang.String getClientName ( int pid ) { return mClientInfo.get ( java.lang.Integer.valueOf ( pid ) ) ; }
public void setError ( int code , java.lang.String msg ) { setReturnCode ( code ) ; setReturnMessage ( msg ) ; android.util.Slog.w ( com.android.server.pm.PackageManagerService.TAG , msg ) ; }
private static native java.lang.String getDisplayCountryNative ( java.lang.String targetLanguageTag , java.lang.String languageTag ) ;
public void testNotifyOtaspChanged ( ) throws java.lang.Exception { mDefaultPhoneNotifierUT.notifyOtaspChanged ( mPhone , TelephonyManager.OTASP_NEEDED ) ; org.mockito.Mockito.verify ( mTelephonyRegisteryMock ) . notifyOtaspChanged ( TelephonyManager.OTASP_NEEDED ) ; mDefaultPhoneNotifierUT.notifyOtaspChanged ( mPhone , TelephonyManager.OTASP_UNKNOWN ) ; org.mockito.Mockito.verify ( mTelephonyRegisteryMock ) . notifyOtaspChanged ( TelephonyManager.OTASP_UNKNOWN ) ; }
private void onDeviceProvisionedChange ( ) { if ( getDataEnabled ( ) ) { mDataEnabledSettings.setUserDataEnabled ( true ) ; reevaluateDataConnections ( ) ; onTrySetupData ( Phone.REASON_DATA_ENABLED ) ; } else { mDataEnabledSettings.setUserDataEnabled ( false ) ; onCleanUpAllConnections ( Phone.REASON_DATA_SPECIFIC_DISABLED ) ; } }
public java.lang.String getPackageName ( ) { return variantConfiguration.getApplicationId ( ) ; }
public final void activityIdle ( android.os.IBinder token , android.content.res.Configuration config ) { final long origId = android.os.Binder.clearCallingIdentity ( ) ; mMainStack.activityIdleInternal ( token , false , config ) ; android.os.Binder.restoreCallingIdentity ( origId ) ; }
public static native int EVP_DigestFinal_ex ( org.conscrypt.NativeRef.EVP_MD_CTX ctx , byte [ ] hash , int offset ) ;
public java.lang.String getName ( ) { java.lang.reflect.ArtMethod nonProxyMethod = java.lang.Class.findOverriddenMethodIfProxy ( artMethod ) ; return java.lang.reflect.ArtMethod.getMethodName ( nonProxyMethod ) ; }
public int inverseTranslate ( int screenX ) { return ( ( int ) ( ( ( screenX - ( mMargin ) ) + ( mTranslate ) ) / ( mScale ) ) ) ; }
protected boolean addFile ( com.intellij.openapi.vfs.VirtualFile file ) { if ( ( file instanceof com.intellij.openapi.vfs.newvfs.impl.StubVirtualFile ) || ( file.isDirectory ( ) ) ) return false ; myFiles.add ( file ) ; return true ; }
private void notifyAdvertiseUnsupported ( ) { if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) { android.util.Log.d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , "notifyAdvertiseUnsupported" ) ; } android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleServerService.BLE_ADVERTISE_UNSUPPORTED ) ; sendBroadcast ( intent ) ; }
private int requestAudioFocus ( ) { int focusRequestStatus = mAudioManager.requestAudioFocus ( mAudioFocusListener , AudioManager.STREAM_MUSIC , AudioManager.AUDIOFOCUS_GAIN ) ; if ( focusRequestStatus == ( android.media.AudioManager.AUDIOFOCUS_REQUEST_GRANTED ) ) { startAvrcpUpdates ( ) ; startFluorideStreaming ( ) ; mAudioFocus = android.media.AudioManager.AUDIOFOCUS_GAIN ; } return focusRequestStatus ; }
public void copyTo ( short [ ] d ) { validateIsInt16 ( ) ; copyTo ( d , Element.DataType.SIGNED_16 , d.length ) ; }
public boolean queryCapabilityConfiguration ( @ android.telephony.ims.internal.feature.MmTelFeature.MmTelCapabilities.MmTelCapability int capability , @ android.telephony.ims.internal.stub.ImsRegistrationImplBase.ImsRegistrationTech int radioTech ) { return false ; }
public com.android.ims.internal.IImsCallSession getPendingCallSession ( int sessionId , java.lang.String callId ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getPendingCallSession ( mSlotId , mSupportedFeature , sessionId , callId ) ; } }
public void setCarrierInfoForImsiEncryption ( android.telephony.ImsiEncryptionInfo imsiEncryptionInfo , android.os.Message result ) { }
private final void moveTaskBackwardsLocked ( int task ) { android.util.Slog.e ( com.android.server.am.ActivityManagerService.TAG , "moveTaskBackwards not yet implemented!" ) ; }
public static void loop7 ( boolean incoming ) { while ( ( java.lang.Runtime.getRuntime ( ) ) != null ) { java.lang.System.out.println ( incoming ) ; while ( incoming ) { } java.lang.System.nanoTime ( ) ; } }
public java.util.List < android.telephony.mbms.DownloadRequest > listPendingDownloads ( java.lang.String appName , int subscriptionId ) throws android.os.RemoteException { return null ; }
void cleanup ( ) { if ( com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG , "cleanup" ) ; mNowPlayingList = mEmptyNowPlayingList ; mMediaInterface = null ; mLastTrackIdSent = android.media.session.MediaSession.QueueItem.UNKNOWN_ID ; mNowPlayingListUpdated = false ; }
public android.net.wifi.aware.LvBufferUtils.LvConstructor putShort ( short data ) { mTlvImpl.putShort ( 0 , data ) ; return this ; }
public int download ( android.telephony.mbms.DownloadRequest downloadRequest ) { mReceivedRequests.add ( downloadRequest ) ; return android.telephony.mbms.MbmsErrors.SUCCESS ; }
public void testOrientation ( ) { com.android.ide.common.layout.LinearLayoutRule rule = new com.android.ide.common.layout.LinearLayoutRule ( ) ; initialize ( rule , "android.widget.LinearLayout" ) ; com.android.ide.common.api.INode node = com.android.ide.common.layout.TestNode.create ( "android.widget.Button" ) . id ( "@+id/Button012" ) ; assertNull ( node.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ORIENTATION ) ) ; java.util.List < com.android.ide.common.api.MenuAction > contextMenu = rule.getContextMenu ( node ) ; assertEquals ( 4 , contextMenu.size ( ) ) ; com.android.ide.common.api.MenuAction orientationAction = contextMenu.get ( 3 ) ; assertTrue ( orientationAction.getClass ( ) . getName ( ) , ( orientationAction instanceof com.android.ide.common.api.MenuAction.Choices ) ) ; com.android.ide.common.api.MenuAction.Choices choices = ( ( com.android.ide.common.api.MenuAction.Choices ) ( orientationAction ) ) ; com.android.ide.common.api.IMenuCallback callback = choices.getCallback ( ) ; callback.action ( orientationAction , com.android.ide.common.layout.LayoutConstants.VALUE_VERTICAL , true ) ; java.lang.String orientation = node.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ORIENTATION ) ; assertEquals ( com.android.ide.common.layout.LayoutConstants.VALUE_VERTICAL , orientation ) ; callback.action ( orientationAction , com.android.ide.common.layout.LayoutConstants.VALUE_HORIZONTAL , true ) ; orientation = node.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ORIENTATION ) ; assertEquals ( com.android.ide.common.layout.LayoutConstants.VALUE_HORIZONTAL , orientation ) ; }
public java.lang.Boolean call ( ) { return canGoBackOrForward ( steps ) ; }
static double $opt$IntToDouble ( int a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( double ) ( a ) ) ; }
public void onLoadFinished ( android.content.Loader < android.database.Cursor > loader , android.database.Cursor data ) { updateCallDetailsEntries ( com.android.dialer.calldetails.CallDetailsCursorLoader.toCallDetailsEntries ( data ) ) ; activity.loadRttTranscriptAvailability ( ) ; }
public void testTestSuccessMetrics ( ) { java.lang.StringBuilder output = buildCommonResult ( ) ; addStatusKey ( output , "randomKey" , "randomValue" ) ; assertNotNull ( mTestResult.mTestMetrics ) ; assertEquals ( "randomValue" , mTestResult.mTestMetrics.get ( "randomKey" ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; com.android.internal.telephony.cat.CatLog.d ( this , "onDestroy" ) ; }
public com.google.common.collect.ImmutableSet < R > rowKeySet ( ) { return rowMap ( ) . keySet ( ) ; }
public static char $noinline$intAnd0x1ffffToChar ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( char ) ( value & 131071 ) ) ; }
com.google.common.base.Optional < java.lang.Boolean > supportsUpgrade ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle ) ;
public boolean matches ( android.net.Uri actualUri ) { return actualUri == ( mUri ) ; }
private void sendEnableMsg ( boolean quietMode , java.lang.String packageName ) { mHandler.sendMessage ( mHandler.obtainMessage ( com.android.server.BluetoothManagerService.MESSAGE_ENABLE , ( quietMode ? 1 : 0 ) , 0 ) ) ; addActiveLog ( packageName , true ) ; mLastEnabledTime = android.os.SystemClock.elapsedRealtime ( ) ; }
public void onCallAudioStateChanged ( java.lang.String activeCallId , android.telecom.CallAudioState audioState , android.telecom.Logging.Session.Info info ) throws android.os.RemoteException { }
private void readCpuDataset ( java.io.BufferedReader br ) throws java.io.IOException { updateDataSet ( com.android.ddmuilib.SysinfoPanel.BugReportParser.readCpuDataset ( br ) , "" ) ; }
public boolean acceptInput ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file ) { return ( ( com.intellij.codeInspection.bytecodeAnalysis.BytecodeAnalysisIndex.ourEnabled ) && ( super . acceptInput ( file ) ) ) && ( file.getPath ( ) . contains ( "android.jar!/" ) ) ; }
public void attach ( @ android.annotation.Nullable android.os.Handler handler , @ android.annotation.NonNull android.net.wifi.aware.WifiAwareAttachCallback attachCallback , @ android.annotation.NonNull android.net.wifi.aware.WifiAwareIdentityChangedListener identityChangedListener ) { attach ( handler , null , attachCallback , identityChangedListener ) ; }
public abstract com.intellij.psi.PsiJavaFile parseJavaToPsi ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) ;
public void testE3 ( ) { loadAndRun ( "dot.junit.opcodes.aget_wide.d.T_aget_wide_1" , java.lang.ArrayIndexOutOfBoundsException.class , new long [ 2 ] , ( - 1 ) ) ; }
public void test_with_TemporalField_long_invalidField ( ) { tck.java.time.TCKLocalDate.TEST_2007_07_15.with ( MockFieldNoValue.INSTANCE , 1 ) ; }
private static void testThread ( int which ) { java.lang.Thread t = new Main.Helper ( which ) ; t.start ( ) ; try { t.join ( ) ; } catch ( java.lang.InterruptedException ex ) { ex.printStackTrace ( java.lang.System.out ) ; } }
protected void readResponse ( java.io.InputStream stream ) throws java.io.IOException { if ( com.android.bluetooth.pbapclient.BluetoothPbapRequest.DBG ) android.util.Log.v ( com.android.bluetooth.pbapclient.BluetoothPbapRequest.TAG , "readResponse" ) ; }
public void copy1DRangeTo ( int off , int count , short [ ] d ) { validateIsInt16OrFloat16 ( ) ; copy1DRangeToUnchecked ( off , count , d , Element.DataType.SIGNED_16 , d.length ) ; }
private int decompositionMode_Java_ICU ( int mode ) { switch ( mode ) { case java.text.Collator.CANONICAL_DECOMPOSITION : return libcore.icu.RuleBasedCollatorICU.VALUE_ON ; case java.text.Collator.NO_DECOMPOSITION : return libcore.icu.RuleBasedCollatorICU.VALUE_OFF ; } throw new java.lang.IllegalArgumentException ( ( "Bad mode: " + mode ) ) ; }
public int getConfigInt ( int item ) { replaceConfig ( new com.android.phone.testapps.imstestapp.TestImsConfigImpl.ConfigItem ( item , ImsConfig.FeatureValueConstants.ON ) ) ; return ImsConfig.FeatureValueConstants.ON ; }
static com.google.devtools.common.options.OptionsData getOptionsDataInternal ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass ) throws com.google.devtools.common.options.OptionsParser.ConstructionException { return com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( com.google.common.collect.ImmutableList.< java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > of ( optionsClass ) ) ; }
public android.telephony.ims.ImsCallProfile createCallProfile ( int serviceType , int callType ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { return mMmTelFeatureConnection.createCallProfile ( serviceType , callType ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "createCallProfile()" , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
protected java.util.SortedMap < K , V > standardSubMap ( K fromKey , K toKey ) { com.google.common.base.Preconditions.checkArgument ( ( ( unsafeCompare ( fromKey , toKey ) ) <= 0 ) , "fromKey must be <= toKey" ) ; return tailMap ( fromKey ) . headMap ( toKey ) ; }
public E floor ( E e ) { return com.google.common.collect.SortedMultisets.getElementOrNull ( multiset ( ) . headMultiset ( e , com.google.common.collect.BoundType.CLOSED ) . lastEntry ( ) ) ; }
public void test_twoDex_init ( ) throws java.lang.Exception { java.lang.ClassLoader cl = createLoader ( dex1 , dex2 ) ; java.io.File [ ] files = optimizedDir.listFiles ( dalvik.system.DexClassLoaderTest.DEX_FILE_NAME_FILTER ) ; assertNotNull ( files ) ; assertEquals ( 2 , files.length ) ; }
public java.lang.reflect.Constructor < ? > getEnclosingConstructor ( ) { if ( classNameImpliesTopLevel ( ) ) { return null ; } return getEnclosingConstructorNative ( ) ; }
public void callSessionMergeComplete ( com.android.ims.internal.IImsCallSession iImsCallSession ) throws android.os.RemoteException { mNewListener.callSessionMergeComplete ( iImsCallSession ) ; }
private boolean httpRequest ( ) { java.net.HttpURLConnection urlConnection = null ; try { java.net.URL targetURL = new java.net.URL ( "http://www.google.com/generate_204" ) ; urlConnection = ( ( java.net.HttpURLConnection ) ( targetURL.openConnection ( ) ) ) ; urlConnection.connect ( ) ; int respCode = urlConnection.getResponseCode ( ) ; return respCode == 204 ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.tests.connectivity.uid.ConnectivityTestActivity.TAG , "Checkconnectivity exception: " , e ) ; } return false ; }
public int getIndex ( int device ) { synchronized ( android.media.AudioService.VolumeStreamState.class ) { java.lang.Integer index = mIndex.get ( device ) ; if ( index == null ) { index = mIndex.get ( AudioSystem.DEVICE_OUT_DEFAULT ) ; } return index.intValue ( ) ; } }
void die ( ) { connectivityServiceMock.die ( ) ; looper.quit ( ) ; handlerThread.quit ( ) ; }
private boolean addMediaPlayerPackage ( java.lang.String packageName ) { com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo ( null , AvrcpConstants.PLAYER_TYPE_AUDIO , AvrcpConstants.PLAYER_SUBTYPE_NONE , com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED , getFeatureBitMask ( packageName ) , packageName , getAppLabel ( packageName ) ) ; return addMediaPlayerInfo ( info ) ; }
public final void testTapLink_changeOrientationThenTapBack ( ) throws java.lang.Exception { sUiBot.setScreenOrientation ( UiBot.PORTRAIT ) ; try { android.autofillservice.cts.Helper.runShellCommand ( "wm density 420" ) ; saveUiRestoredAfterTappingLinkTest ( android.autofillservice.cts.CustomDescriptionWithLinkTestCase.PostSaveLinkTappedAction.ROTATE_THEN_TAP_BACK_BUTTON ) ; } finally { android.autofillservice.cts.Helper.runShellCommand ( "wm density reset" ) ; sUiBot.setScreenOrientation ( UiBot.PORTRAIT ) ; } }
public static java.io.File getProfileSnapshotPath ( java.lang.String packageName , java.lang.String codePath ) { return android.os.Environment.buildPath ( android.os.Environment.buildPath ( android.os.Environment.getDataDirectory ( ) , "misc" , "profiles" , "ref" , packageName , "primary.prof.snapshot" ) ) ; }
private boolean isPotentialEmergencyNumber ( java.lang.String number ) { android.telecom.Log.v ( this , "Checking restrictions for number : %s" , android.telecom.Log.pii ( number ) ) ; return ( number != null ) && ( mPhoneNumberUtilsAdapter.isPotentialLocalEmergencyNumber ( mContext , number ) ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.pm.PackageManager packageManager , android.content.Intent intent ) { if ( ( mUiccProfile ) != null ) { return mUiccProfile.getCarrierPackageNamesForIntent ( packageManager , intent ) ; } else { return null ; } }
private native void gattClientWriteCharacteristicNative ( int conn_id , int handle , int write_type , int auth_req , byte [ ] value ) ;
public synchronized void close ( ) throws com.android.sched.util.file.CannotCloseInputException { if ( ! ( closed ) ) { try { zipFile.close ( ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.file.CannotCloseInputException ( this , e ) ; } closed = true ; } }
public void testRefactor2 ( ) throws java.lang.Exception { renameType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.CustomView1" , true , "NewCustomViewName" , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "[x] Rename compilation unit \'CustomView1.java\' to \'NewCustomViewName.java\'\n" ) + "\n" ) + "[x] attrs_custom_view.xml - /testRefactor2/res/values/attrs_custom_view.xml\n" ) + " @@ -4 +4\n" ) + " - <declare-styleable name=\"CustomView1\">\n" ) + " + <declare-styleable name=\"NewCustomViewName\">\n" ) + "\n" ) + "\n" ) + "[x] customviews.xml - /testRefactor2/res/layout/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.NewCustomViewName\n" ) + "\n" ) + "\n" ) + "[x] customviews.xml - /testRefactor2/res/layout-land/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.NewCustomViewName" ) ) ) ; }
com.android.sched.util.location.Location getVFileLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) { return workVFS.getVFileLocation ( file ) ; }
public com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getMultiEndpointInterface ( ) ; } }
synchronized void remove ( android.net.rtp.AudioStream stream ) { java.lang.Long id = mStreams.remove ( stream ) ; if ( id != null ) { nativeRemove ( id ) ; } }
public void upgradeToVideo ( @ android.support.annotation.NonNull android.content.Context context ) { listener.onImpressionLoggingNeeded ( DialerImpression.Type.LIGHTBRINGER_UPGRADE_REQUESTED ) ; duo.requestUpgrade ( context , call ) ; }
public boolean getIgnoreNitz ( ) { java.lang.String ignoreNitz = android.os.SystemProperties.get ( "gsm.ignore-nitz" ) ; return ( ignoreNitz != null ) && ( ignoreNitz.equals ( "yes" ) ) ; }
public void checkValidity ( ) { if ( ! ( ( parent ) instanceof com.android.jack.ir.ast.JMethod ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
public final void setIsVoipAudioMode ( java.lang.String connectionId , boolean isVoip , android.telecom.Logging.Session.Info sessionInfo ) { mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_SET_IS_VOIP_AUDIO_MODE , ( isVoip ? 1 : 0 ) , 0 , connectionId ) . sendToTarget ( ) ; }
public void apply ( ) throws com.intellij.openapi.options.ConfigurationException { com.google.gct.idea.appengine.synchronization.SampleSyncConfiguration.setUseBuiltInSamples ( builtInSampleRadioButton.isSelected ( ) ) ; }
public void addAnnotate ( @ javax.annotation.Nonnull com.android.jack.preprocessor.AddAnnotationStep toAdd ) { steps.add ( toAdd ) ; }
private boolean isScoAcceptable ( ) { return ( mAudioRouteAllowed ) && ( ( mVoiceRecognitionStarted ) || ( isInCall ( ) ) ) ; }
private static native int firstImpl ( int address , java.lang.String text ) ;
static java.util.TimeZone icuTimeZone ( java.util.TimeZone tz ) { com.ibm.icu.impl.JavaTimeZone javaTimeZone = new com.ibm.icu.impl.JavaTimeZone ( tz , null ) ; javaTimeZone.freeze ( ) ; return javaTimeZone ; }
public int getHighestPriorityQualifier ( int startIndex ) { for ( int i = startIndex ; i < ( com.android.ide.common.resources.configuration.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { if ( ( mQualifiers [ i ] ) != null ) { return i ; } } return - 1 ; }
private static DesugarDeps.Type wrapType ( java.lang.String name ) { return DesugarDeps.Type.newBuilder ( ) . setBinaryName ( name ) . build ( ) ; }
public void testMethodParametersAlignmentAfterMethodNameChange ( ) { getJavaSettings ( ) . ALIGN_MULTILINE_PARAMETERS = true ; getJavaSettings ( ) . ALIGN_MULTILINE_PARAMETERS_IN_CALLS = true ; doTest ( null , "test123asd" , null , new com.intellij.refactoring.SimpleParameterGen ( ) , new com.intellij.refactoring.SimpleExceptionsGen ( ) , false ) ; }
public void testInstall_unsuccessfulFirstUpdate_olderVersionThanSystem ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer.installWithErrorCode ( distro.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public boolean setWfdDeviceInfo ( java.lang.String hex ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setWfdDeviceInfo ( hex ) ; } else { return doBooleanCommand ( ( "WFD_SUBELEM_SET 0 " + hex ) ) ; } }
native void rsnScriptForEach ( long con , long id , int slot , long ain , long aout , byte [ ] params ) ;
public com.android.ide.common.rendering.api.Result getCopyWithData ( java.lang.Object data ) { com.android.ide.common.rendering.api.Result r = new com.android.ide.common.rendering.api.Result ( this ) ; r.mData = data ; return r ; }
void cleanup ( ) { com.android.bluetooth.btservice.RemoteDevices.sAdapterService.unregisterReceiver ( mReceiver ) ; reset ( ) ; }
public static int getAdvertisingEventProperties ( com.android.bluetooth.gatt.AdvertiseClient client ) { android.bluetooth.le.AdvertiseSettings settings = client.settings ; if ( settings.isConnectable ( ) ) { return com.android.bluetooth.gatt.AdvertiseHelper.ADVERTISING_EVENT_TYPE_LEGACY_CONNECTABLE ; } return ( client.scanResponse ) == null ? com.android.bluetooth.gatt.AdvertiseHelper.ADVERTISING_EVENT_TYPE_LEGACY_NON_CONNECTABLE : com.android.bluetooth.gatt.AdvertiseHelper.ADVERTISING_EVENT_TYPE_LEGACY_SCANNABLE ; }
public void onConnectionServiceChanged ( com.android.server.telecom.Call call , com.android.server.telecom.ConnectionServiceWrapper oldService , com.android.server.telecom.ConnectionServiceWrapper newService ) { if ( call.isSelfManaged ( ) ) { android.telecom.Log.i ( this , "onConnectionServiceChanged: skipped self-managed %s" , call ) ; return ; } updateCall ( call ) ; }
private java.lang.StringBuilder buildCommonResult ( ) { java.lang.StringBuilder output = new java.lang.StringBuilder ( ) ; addCommonStatus ( output ) ; addStartCode ( output ) ; addCommonStatus ( output ) ; return output ; }
public com.android.tools.lint.client.api.IJavaParser getJavaParser ( ) { if ( ( mJavaParser ) == null ) { mJavaParser = new com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.EclipseJavaParser ( ) ; } return mJavaParser ; }
public void sendCallEvent ( java.lang.String event , android.os.Bundle extras ) { mInCallAdapter.sendCallEvent ( mTelecomCallId , event , mTargetSdkVersion , extras ) ; }
static byte $opt$CharToByte ( char a ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; return ( ( byte ) ( a ) ) ; }
public void apply ( org.gradle.api.Project project ) { project.getPluginManager ( ) . apply ( com.android.build.gradle.model.BaseComponentModelPlugin.class ) ; project.getTasks ( ) . create ( "assembleDefault" ) ; project.getPluginManager ( ) . apply ( com.android.build.gradle.model.AndroidComponentModelTestPlugin.class ) ; }
public static int copyNativeBinariesIfNeededLI ( com.android.internal.content.NativeLibraryHelper.ApkHandle handle , java.io.File sharedLibraryDir , java.lang.String abi ) { return com.android.internal.content.NativeLibraryHelper.nativeCopyNativeBinaries ( handle.apkHandle , sharedLibraryDir.getPath ( ) , abi ) ; }
public com.google.common.base.CharMatcher and ( com.google.common.base.CharMatcher other ) { com.google.common.base.Preconditions.checkNotNull ( other ) ; return this ; }
void setJarJarConfigFiles ( @ javax.annotation.Nonnull java.util.List < java.io.File > jarjarConfigFiles ) throws com.android.jack.api.v01.ConfigurationException ;
public void callSessionUpdateFailed ( com.android.ims.internal.IImsCallSession i , android.telephony.ims.ImsReasonInfo imsReasonInfo ) throws android.os.RemoteException { mNewListener.callSessionUpdateFailed ( imsReasonInfo ) ; }
public void run ( ) { Main.FinalizerTest ref = wimp.get ( ) ; if ( ref != null ) { s [ 0 ] = ref.toString ( ) ; } }
void setUp ( ) { delayTime = 15000 ; createChannels ( ) ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.SEND_B , com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , true ) ; sleep ( 1000 ) ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.SEND_C , com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , true ) ; status = READY_AFTER_LONG_DELAY ; }
static boolean triggerArrayOOM ( char [ ] [ ] holder ) { Main.ArrayMemEater.blowup ( holder ) ; return Main.ArrayMemEater.sawOome ; }
public void test_ConstructorLjava_io_OutputStream ( ) throws java.io.IOException { new java.util.zip.InflaterOutputStream ( os ) . close ( ) ; try { new java.util.zip.InflaterOutputStream ( null ) ; fail ( "Should throw NullPointerException" ) ; } catch ( java.lang.NullPointerException e ) { } }
private void makeValid ( ) { if ( ( this . bignum ) == 0 ) { this . bignum = java.math.NativeBN.BN_new ( ) ; java.math.BigInt.registry.registerNativeAllocation ( this , this . bignum ) ; } }
public void onAudioRouteChanged ( android.telecom.Connection c , int audioRoute , java.lang.String bluetoothAddress ) { }
public com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface ( ) throws android.os.RemoteException { synchronized ( mLock ) { android.telephony.ims.stub.ImsMultiEndpointImplBase multiEndPoint = this . getMultiEndpoint ( ) ; return multiEndPoint != null ? multiEndPoint.getIImsMultiEndpoint ( ) : null ; } }
public boolean dispatchKeyShortcutEvent ( android.view.KeyEvent event ) { return mBlockEvents ; }
private org.apache.harmony.dalvik.ddmc.Chunk handleHPGC ( org.apache.harmony.dalvik.ddmc.Chunk request ) { if ( false ) android.util.Log.d ( "ddm-heap" , "Heap GC request" ) ; java.lang.Runtime.getRuntime ( ) . gc ( ) ; return null ; }
public void visitInvalid ( int opcode , int offset , int length ) { observer.parsed ( bytes , offset , length , header ( offset ) ) ; }
public java.lang.Boolean call ( ) { return onKeyUp ( keyCode , event ) ; }
public void test_U8_2_SCALE20_05_inSqure ( ) { testResize ( inX , inX , Element.DataType.UNSIGNED_8 , 2 , 2.0F , 0.5F ) ; }
private boolean isMultiWindowOnPhone ( ) { return ( com.android.contacts.compat.MultiWindowCompat.isInMultiWindowMode ( this ) ) && ( com.android.contacts.util.PhoneCapabilityTester.isPhone ( this ) ) ; }
private javax.security.auth.x500.X500Principal localhost ( ) { return new javax.security.auth.x500.X500Principal ( ( "CN=" + ( libcore.java.security.TestKeyStore.LOCAL_HOST_NAME ) ) ) ; }
public void addJavaSourceFoldersToModel ( @ com.android.annotations.NonNull java.io.File ... generatedSourceFolders ) { getVariantData ( ) . addJavaSourceFoldersToModel ( generatedSourceFolders ) ; }
public static java.lang.String getToolsFolder ( ) { return com.android.ide.eclipse.ddms.DdmsPlugin.sToolsFolder ; }
private static native void nativeDrawBitmapMesh ( long nativeCanvas , long nativeBitmap , int meshWidth , int meshHeight , float [ ] verts , int vertOffset , int [ ] colors , int colorOffset , long nativePaint ) ;
public void testProguardFiles ( java.lang.Object ... proguardFileArray ) { getTestProguardFiles ( ) . addAll ( project.files ( proguardFileArray ) . getFiles ( ) ) ; }
public void ensureAnnotation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter loaded , @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationType annotation ) { }
int getArea ( ) { return ( mWidth ) * ( mHeight ) ; }
public void setWifiSupplicantControl ( com.android.server.wifi.WifiSupplicantControl wifiSupplicantControl ) { mWifiSupplicantControl = wifiSupplicantControl ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { mUseDeviceForFutureLaunches = mUseDeviceForFutureLaunchesCheckbox.getSelection ( ) ; mResponse.setUseDeviceForFutureLaunches ( mUseDeviceForFutureLaunches ) ; }
public void run ( ) { com.android.hierarchyviewerlib.device.IHvDevice hvDevice = getHvDevice ( selectedNode.viewNode.window.getDevice ( ) ) ; hvDevice.loadProfileData ( selectedNode.viewNode.window , selectedNode.viewNode ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . notifySelectionChanged ( ) ; }
public int hashCode ( ) { return java.lang.Long.hashCode ( value ) ; }
public static double DoubleDivision ( ) { double a ; double b ; double c ; a = 8.0 ; b = 2.5 ; c = a / b ; return c ; }
public void getCDMASubscriptionResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String mdn , java.lang.String hSid , java.lang.String hNid , java.lang.String min , java.lang.String prl ) { responseStrings ( responseInfo , mdn , hSid , hNid , min , prl ) ; }
protected javax.swing.JComponent getHeader ( ) { return com.google.gct.idea.samples.DynamicWizardStep.createWizardStepHeader ( WizardConstants.ANDROID_NPW_HEADER_COLOR , AndroidIcons.Wizards.NewProjectMascotGreen , com.google.gct.idea.util.GctBundle.message ( "sample.import.title" ) ) ; }
private static void installMockAwareStateManager ( com.android.server.wifi.aware.WifiAwareStateManager awareStateManager ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.aware.WifiAwareStateManager.class . getDeclaredField ( "sAwareStateManagerSingleton" ) ; field.setAccessible ( true ) ; field.set ( null , awareStateManager ) ; }
public boolean add ( E element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
java.lang.Iterable < com.android.ahat.heapdump.Reference > getReferences ( ) { java.util.List < com.android.ahat.heapdump.Reference > refs = java.util.Collections.emptyList ( ) ; return refs ; }
public void test_until_TemporalUnit_unsupportedUnit ( ) { tck.java.time.TCKYearMonth.TEST_2008_06.until ( tck.java.time.TCKYearMonth.TEST_2008_06 , java.time.temporal.ChronoUnit.HOURS ) ; }
private void setupVisualVoicemailPreference ( ) { visualVoicemailPreference.setOnPreferenceChangeListener ( this ) ; visualVoicemailPreference.setChecked ( voicemailClient.isVoicemailEnabled ( getContext ( ) , phoneAccountHandle ) ) ; updateVoicemailSummaryMessage ( ) ; }
public void test_blockWithJoinWithSource ( ) throws java.lang.Exception { init ( true ) ; try { key.block ( sourceAddress ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public void run ( ) { onTestFinish ( intent.getAction ( ) ) ; }
public static void checkDeprecated ( com.intellij.codeInspection.deprecation.PsiElement refElement , com.intellij.codeInspection.deprecation.PsiElement elementToHighlight , @ org.jetbrains.annotations.Nullable com.intellij.openapi.util.TextRange rangeInElement , com.intellij.codeInspection.deprecation.ProblemsHolder holder ) { com.intellij.codeInspection.deprecation.DeprecationInspection.checkDeprecated ( refElement , elementToHighlight , rangeInElement , false , false , true , holder ) ; }
public void onFailure ( java.lang.Throwable t ) { if ( running.isCancelled ( ) ) { cancel ( false ) ; } else { setException ( t ) ; } }
public void addDevice ( com.android.ddmlib.IDevice device , com.android.hierarchyviewerlib.device.Window [ ] windows , com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo info ) { synchronized ( mDeviceMap ) { mDeviceMap.put ( device , new com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo ( windows , info ) ) ; mDeviceList.add ( device ) ; } notifyDeviceConnected ( device ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.precall.PreCall.start ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , CallInitiationType.Type.REGULAR_SEARCH ) ) ; }
protected boolean doShouldApply ( java.io.File toDir ) { return getFile ( toDir ) . exists ( ) ; }
void addJavaSourceFoldersToModel ( @ com.android.annotations.NonNull java.util.Collection < java.io.File > sourceFolders ) ;
protected boolean markIfNecessary ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node ) { synchronized ( node ) { if ( ! ( node.containsMarker ( markerClass ) ) ) { node.addMarker ( createMarkerFor ( node ) ) ; return true ; } } return false ; }
private final native int [ ] readInt32VectorAsArray ( ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { if ( mCheckSortSource.getSelection ( ) ) { refreshViewerInput ( ) ; copySelection ( false ) ; syncViewerSelection ( ) ; } }
public void getCallWaiting ( android.os.Message onComplete ) { mCi.queryCallWaiting ( CommandsInterface.SERVICE_CLASS_VOICE , onComplete ) ; }
public void accept ( final org.objectweb.asm.MethodVisitor mv ) { mv.visitInvokeDynamicInsn ( name , desc , bsm , bsmArgs ) ; acceptAnnotations ( mv ) ; }
public void run ( ) { long token = android.os.Binder.clearCallingIdentity ( ) ; try { mAppListener.onProgressUpdated ( request , fileInfo , currentDownloadSize , fullDownloadSize , currentDecodedSize , fullDecodedSize ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } }
public void run ( ) { setLayerType ( layerType , paint ) ; }
public void run ( @ org.jetbrains.annotations.NotNull com.intellij.codeInspection.ex.ProgressIndicator indicator ) { cleanup ( scope , profile , project , postRunnable , commandName ) ; }
private boolean isShorterThanPossibleNormalNumber ( com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata regionMetadata , java.lang.String number ) { java.util.regex.Pattern possibleNumberPattern = regexCache.getPatternForRegex ( regionMetadata.generalDesc.possibleNumberPattern ) ; return ( testNumberLengthAgainstPattern ( possibleNumberPattern , number ) ) == ( com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.TOO_SHORT ) ; }
public android.os.PersistableBundle getConfig ( ) { return getConfigForSubId ( android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
public void setMessageHandler ( android.support.v8.renderscript.RenderScript.RSMessageHandler msg ) { mMessageCallback = msg ; if ( android.support.v8.renderscript.RenderScript.isNative ) { android.support.v8.renderscript.RenderScriptThunker rst = ( ( android.support.v8.renderscript.RenderScriptThunker ) ( this ) ) ; rst.setMessageHandler ( msg ) ; } }
public int getDuplexMode ( ) { if ( ! ( android.telephony.ServiceState.isLte ( mRilDataRadioTechnology ) ) ) { return android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN ; } int band = android.telephony.AccessNetworkUtils.getOperatingBandForEarfcn ( mChannelNumber ) ; return android.telephony.AccessNetworkUtils.getDuplexModeForEutranBand ( band ) ; }
public com.android.layoutlib.api.SceneResult moveChild ( java.lang.Object parentView , java.lang.Object childView , int index , java.util.Map < java.lang.String , java.lang.String > layoutParams , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED.getResult ( ) ; }
public boolean initialize ( ) { mHalDeviceManager.initialize ( ) ; mHalDeviceManager.registerStatusListener ( mHalDeviceManagerStatusCallbacks , mWifiStateMachineHandlerThread.getLooper ( ) ) ; return true ; }
public void testFrameworkBooleanOverlay ( ) throws java.lang.Throwable { final int resId = com.android.internal.R.bool.config_annoy_dianne ; assertResource ( resId , true , false , false ) ; }
public int getDownloadStatus ( android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.FileInfo fileInfo ) throws android.os.RemoteException { return 0 ; }
public static final java.util.Locale [ ] getAvailableLocales ( ) { return android.icu.impl.ICUResourceBundle.getAvailEntry ( ICUData.ICU_BASE_NAME , android.icu.impl.ICUResourceBundle.ICU_DATA_CLASS_LOADER ) . getLocaleList ( ) ; }
private boolean isMessageAccepted ( com.android.ddmuilib.logcat.LogCatMessage msg , java.util.List < com.android.ddmuilib.logcat.LogCatFilter > filters ) { for ( com.android.ddmuilib.logcat.LogCatFilter f : filters ) { if ( ! ( f.matches ( msg ) ) ) { return false ; } } return true ; }
private java.io.InputStream loadResource ( ) throws java.io.FileNotFoundException { java.io.InputStream is = new java.io.BufferedInputStream ( new java.io.FileInputStream ( mFile ) ) ; assertNotNull ( "test.txt not found" , is ) ; return is ; }
java.nio.file.attribute.FileTime getLastModified ( @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file ) throws com.android.sched.util.file.CannotGetModificationTimeException { return vfs.getLastModified ( file.getWrappedFile ( ) ) ; }
protected void onProgressUpdate ( java.lang.Integer ... values ) { if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.N ) ) { mProgressBar.setProgress ( values [ 0 ] , true ) ; } else { mProgressBar.setProgress ( values [ 0 ] ) ; } }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "ActivityGroup" , args = { boolean . class } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onCreate" , args = { android.os.Bundle.class } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onResume" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onSaveInstanceState" , args = { android.os.Bundle.class } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onPause" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onStop" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "onDestroy" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "getCurrentActivity" , args = { } ) , @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "" , method = "getLocalActivityManager" , args = { } ) } ) public void testTabDialog ( ) throws java.lang.Exception { mIntent = mTabIntent ; runLaunchpad ( LaunchpadActivity.LIFECYCLE_DIALOG ) ; }
public static java.lang.String decode ( java.lang.String s ) { if ( s == null ) { return null ; } return libcore.net.UriCodec.decode ( s , false , java.nio.charset.StandardCharsets.UTF_8 , false ) ; }
synchronized void nScriptReduce ( long id , int slot , long [ ] ains , long aout , int [ ] limits ) { validate ( ) ; rsnScriptReduce ( mContext , id , slot , ains , aout , limits ) ; }
public void run ( ) { final com.intellij.openapi.module.Module module = com.intellij.openapi.module.ModuleManager.getInstance ( project ) . findModuleByName ( moduleName ) ; com.google.gct.idea.appengine.wizard.CloudModuleUtils.createRunConfiguration ( project , module ) ; }
public < T > void applyTiming ( com.google.common.util.concurrent.ListenableFuture < T > future , java.lang.String eventName ) { applyTiming ( future , ( unused ) -> eventName , com.android.dialer.metrics.FutureTimer.LogCatMode.DONT_LOG_VALUES ) ; }
public void test_bug_181 ( ) { java.util.regex.Pattern.compile ( "[\\t-\\r]" ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mAudioManager = ( ( android.media.AudioManager ) ( mContext.getSystemService ( Context.AUDIO_SERVICE ) ) ) ; mSession = new android.media.session.MediaSession ( getContext ( ) , android.media.cts.MediaSessionTest.TEST_SESSION_TAG ) ; }
private static void writeOutImage ( com.android.ddmlib.RawImage screenshot , java.lang.String name ) throws java.io.IOException { java.io.ObjectOutputStream out = new java.io.ObjectOutputStream ( new java.io.FileOutputStream ( name ) ) ; out.writeObject ( new com.android.chimpchat.adb.image.CaptureRawAndConvertedImage.ChimpRawImage ( screenshot ) ) ; out.close ( ) ; }
public void onRestoreInstanceState ( android.os.Bundle savedInstanceState ) { this . savedInstanceState = savedInstanceState ; android.app.stubs.TestDialog.onRestoreInstanceStateObserver.onObserved ( ) ; super . onRestoreInstanceState ( savedInstanceState ) ; }
void registerProfileIntentReceiver ( ) { mContext.registerReceiver ( mProfileBroadcastReceiver , mProfileIntentFilter , null , mReceiverHandler ) ; }
public boolean isValidOn ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { return method.getEnclosingType ( ) . isToEmit ( ) ; }
public native java.io.FileDescriptor [ ] pipe2 ( int flags ) throws android.system.ErrnoException ;
private static int [ ] zzUnpackRowMap ( ) { int [ ] result = new int [ 1209 ] ; int offset = 0 ; offset = org.jf.smali.smaliFlexLexer.zzUnpackRowMap ( org.jf.smali.smaliFlexLexer.ZZ_ROWMAP_PACKED_0 , offset , result ) ; return result ; }
protected byte [ ] getDeviceId ( ) { return com.android.internal.telephony.uicc.IccUtils.bcdToBytes ( "987654321012345" ) ; }
void testIgnored ( com.android.ddmlib.testrunner.TestIdentifier test ) ;
public com.android.jack.ir.ast.cfg.JBasicBlockElement getLastElement ( ) { assert ( elements.size ( ) ) > 0 ; return elements.get ( ( ( elements.size ( ) ) - 1 ) ) ; }
public void close ( ) throws java.io.IOException { if ( ! ( closed ) ) { try { closeEntry ( ) ; } catch ( java.io.IOException ignored ) { } super . close ( ) ; } }
public static long $noinline$NegNeg3 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return 0 - ( - arg ) ; }
boolean isNumberPossibleForDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher possibleNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.getPossibleNumberPattern ( ) ) . matcher ( nationalNumber ) ; return possibleNumberPatternMatcher.matches ( ) ; }
public void testMatrix100110 ( ) throws java.lang.Throwable { final int resId = R.integer.matrix_100110 ; setLocale ( "sv_SE" ) ; assertResource ( resId , 100 , 400 , 400 ) ; }
public void executeShellCommand ( java.lang.String command , com.android.ddmlib.IShellOutputReceiver receiver , int maxTimeToOutputResponse ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException { throw new java.lang.UnsupportedOperationException ( "Wrong executeShellCommand" ) ; }
protected void onQuitting ( ) { if ( ( mService ) != null ) { mService.cleanupDevice ( mDevice ) ; } }
public void startNetworkScan ( android.telephony.NetworkScanRequest nsr , android.os.Message response ) { throw new java.lang.RuntimeException ( "not implemented" ) ; }
public java.util.Iterator < com.android.jack.ir.ast.cfg.JBasicBlock > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { return com.google.common.collect.Lists.newArrayList ( cfg.getBlocksDepthFirst ( true ) ) . iterator ( ) ; }
public libcore.tzdata.update2.DistroVersion getInstalledDistroVersion ( ) throws java.io.IOException , libcore.tzdata.update2.DistroException { if ( ! ( currentTzDataDir.exists ( ) ) ) { return null ; } return readDistroVersion ( currentTzDataDir ) ; }
synchronized void nScriptSetVarF ( long id , int slot , float val , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetVarF ( curCon , id , slot , val , mUseInc ) ; }
public final void update ( byte input ) throws java.lang.IllegalStateException { if ( ! ( isInitMac ) ) { throw new java.lang.IllegalStateException ( ) ; } getSpi ( ) . engineUpdate ( input ) ; }
public static int getUid ( java.lang.String path ) { try { return android.system.Os.stat ( path ) . st_uid ; } catch ( android.system.ErrnoException e ) { return - 1 ; } }
public boolean removePasspointConfiguration ( java.lang.String fqdn ) { enforceChangePermission ( ) ; return mPasspointManager.removeProvider ( fqdn ) ; }
private static boolean $inline$false ( ) { return false ; }
void consumeCompoundPattern ( android.icu.impl.UResource.Key key , android.icu.impl.UResource.Value value ) { if ( key.contentEquals ( "per" ) ) { cacheData.styleToPerPattern.put ( width , android.icu.impl.SimpleFormatterImpl.compileToStringMinMaxArguments ( value.getString ( ) , sb , 2 , 2 ) ) ; } }
public void testFailed ( com.android.cts.appsecurity.TestFailure status , com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) { com.android.ddmlib.Log.logAndDisplay ( LogLevel.WARN , com.android.cts.appsecurity.AppSecurityTests.LOG_TAG , java.lang.String.format ( "%s#%s failed: %s" , test.getClassName ( ) , test.getTestName ( ) , trace ) ) ; mAllTestsPassed = false ; }
public static int openContentUriForRead ( android.content.Context context , java.lang.String uriString ) { android.os.ParcelFileDescriptor pfd = org.chromium.base.ContentUriUtils.getParcelFileDescriptor ( context , uriString ) ; if ( pfd != null ) { return pfd.detachFd ( ) ; } return - 1 ; }
protected org.w3c.dom.Document getDomDocument ( ) { if ( ( mEditor.getUiRootNode ( ) ) != null ) { return mEditor.getUiRootNode ( ) . getXmlDocument ( ) ; } else { return getElements ( ) . get ( 0 ) . getOwnerDocument ( ) ; } }
public java.util.List < ? extends com.android.builder.dependency.ManifestDependency > getManifestDependencies ( ) { return dependencies ; }
public static boolean checkCallingOrSelfReadPhoneNumber ( android.content.Context context , int subId , java.lang.String callingPackage , java.lang.String message ) { return com.android.internal.telephony.TelephonyPermissions.checkReadPhoneNumber ( context , com.android.internal.telephony.TelephonyPermissions.TELEPHONY_SUPPLIER , subId , android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , callingPackage , message ) ; }
java.util.Iterator < com.google.common.collect.Table.Cell < R , C , V2 > > cellIterator ( ) { return com.google.common.collect.Iterators.transform ( fromTable.cellSet ( ) . iterator ( ) , cellFunction ( ) ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "res/menu/titles.xml:3: Error: Menu items should specify a title [MenuTitle]\n" + ( ( ( ( ( " <item android:id=\"@+id/action_bar_progress_spinner\"\n" + " ^\n" ) + "res/menu/titles.xml:12: Error: Menu items should specify a title [MenuTitle]\n" ) + " <item android:id=\"@+id/menu_plus_one\"\n" ) + " ^\n" ) + "2 errors, 0 warnings\n" ) ) , lintProject ( "apicheck/minsdk14.xml=>AndroidManifest.xml" , "res/menu/titles.xml" ) ) ; }
public void test_EmptyMap_merge ( ) { try { java.util.Collections.emptyMap ( ) . merge ( 1 , 5.0 , ( k , v ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void setListener ( android.telephony.ims.aidl.IImsServiceControllerListener l ) { }
public static long $noinline$UShr0 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg > > > 0 ; }
protected void resetRecords ( ) { mCountVoiceMessages = 0 ; mMncLength = UNINITIALIZED ; mIccId = null ; mAdnCache.reset ( ) ; mRecordsRequested = false ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass definedClass ) { return visit ( ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( definedClass ) ) ) ; }
public boolean areOutputFilesPresent ( ) { boolean filesOk = ! ( mOutputFiles.isEmpty ( ) ) ; for ( java.io.File outputFile : mOutputFiles ) { filesOk &= outputFile.isFile ( ) ; } return filesOk ; }
final android.os.Bundle performPauseActivity ( android.os.IBinder token , boolean finished , boolean saveState ) { android.app.ActivityThread.ActivityClientRecord r = mActivities.get ( token ) ; return r != null ? performPauseActivity ( r , finished , saveState ) : null ; }
public proguard.evaluation.value.IntegerValue compare ( proguard.evaluation.value.ParticularFloatValue other ) { return ( this . value ) < ( other.value ) ? ParticularValueFactory.INTEGER_VALUE_M1 : ( this . value ) == ( other.value ) ? ParticularValueFactory.INTEGER_VALUE_0 : ParticularValueFactory.INTEGER_VALUE_1 ; }
int socketAvailable ( ) throws java.io.IOException { return libcore.io.IoBridge.available ( fd ) ; }
private void checkFormat ( java.lang.String baseLocation , java.lang.String xml , java.lang.String expected ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences prefs = com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences.create ( ) ; checkFormat ( prefs , baseLocation , xml , expected ) ; }
java.util.List < V2 > transform ( K key , java.util.Collection < V1 > values ) { return com.google.common.collect.Lists.transform ( ( ( java.util.List < V1 > ) ( values ) ) , com.google.common.collect.Maps.asValueToValueFunction ( transformer , key ) ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder clearEndTime ( ) { bitField0_ = ( bitField0_ ) & ( ~ 1024 ) ; endTime_ = 0L ; onChanged ( ) ; return this ; }
public boolean hasCarrierSupport ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccountHandle ) { com.android.voicemail.impl.OmtpVvmCarrierConfigHelper config = new com.android.voicemail.impl.OmtpVvmCarrierConfigHelper ( context , phoneAccountHandle ) ; return ( config.isValid ( ) ) && ( ! ( config.isCarrierAppInstalled ( ) ) ) ; }
public java.lang.String getName ( ) { return com.android.compatibility.common.util.AbiUtils.parseTestName ( mId ) ; }
public java.lang.String getId ( ) { return com.google.common.base.Strings.isNullOrEmpty ( getKey ( ) ) ? getName ( ) . toString ( ) : ( ( getName ( ) . toString ( ) ) + "#" ) + ( getKey ( ) ) ; }
private boolean isGprsConsistent ( int gprsState , int serviceState ) { return ! ( ( serviceState == ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) && ( gprsState != ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) ) ; }
public final com.android.jack.test.toolchain.JackBasedToolchain addProperty ( @ javax.annotation.Nonnull java.lang.String propertyName , @ javax.annotation.Nonnull java.lang.String propertyValue ) { properties.put ( propertyName , propertyValue ) ; return this ; }
public void onChildInserted ( com.android.ide.common.api.INode child , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { }
private void notifyCharacteristicChanged ( java.lang.String value ) { showMessage ( ( "Characteristic changed: " + value ) ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CHARACTERISTIC_CHANGED ) ; intent.putExtra ( com.android.cts.verifier.bluetooth.BleClientService.EXTRA_CHARACTERISTIC_VALUE , value ) ; sendBroadcast ( intent ) ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { java.lang.annotation.Annotation [ ] [ ] parameterAnnotations = getParameterAnnotationsNative ( ) ; if ( parameterAnnotations == null ) { parameterAnnotations = new java.lang.annotation.Annotation [ getParameterTypes ( ) . length ] [ 0 ] ; } return parameterAnnotations ; }
public long getSize ( ) { return 0 ; }
public void onDestroyView ( ) { if ( ( mList ) != null ) { mList.setOnKeyListener ( null ) ; } mList = null ; mHandler.removeCallbacks ( mRequestFocus ) ; mHandler.removeMessages ( android.preference.PreferenceFragment.MSG_BIND_PREFERENCES ) ; super . onDestroyView ( ) ; }
public void setVar ( int index , long v ) { mRS.nScriptSetVarJ ( getID ( mRS ) , index , v , mUseIncSupp ) ; }
private void initSideFragments ( ) { com.android.tv.ui.sidepanel.SideFragment.preloadItemViews ( this ) ; }
public void visitIincInsn ( int var , int increment ) { printer.visitIincInsn ( var , increment ) ; printTypeOfOperandStackTop ( ) ; super . visitIincInsn ( var , increment ) ; }
private void notifyListeners ( ) { synchronized ( com.android.sdklib.devices.DeviceManager.sListeners ) { for ( com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener : com.android.sdklib.devices.DeviceManager.sListeners ) { listener.onDevicesChange ( ) ; } } }
public static com.android.manifmerger.Actions load ( java.lang.String xml ) { return com.android.manifmerger.Actions.getGsonParser ( ) . fromJson ( xml , com.android.manifmerger.Actions.class ) ; }
public void hasSchemeDoesNotMatch ( ) { android.net.Uri schemeUri = android.net.Uri.parse ( "market://details?id=com.google.android.apps.plus" ) ; org.junit.Assert.assertFalse ( "HasPath Matched, But it shouldn't have" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( "details" ) . matches ( schemeUri ) ) ; org.junit.Assert.assertFalse ( "HasPath Matched, But it shouldn't have" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( org.hamcrest.CoreMatchers.equalTo ( "details" ) ) . matches ( schemeUri ) ) ; }
public void onSuccess ( ) { try { mServiceInterface.connectionServiceFocusLost ( android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { android.telecom.Log.d ( this , "failed to inform the focus lost event" ) ; } }
public static long $noinline$longToIntToLong ( long value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( long ) ( ( int ) ( value ) ) ) ; }
public int read ( byte [ ] buffer , int byteOffset , int byteCount ) throws java.io.IOException { return socketImpl.read ( buffer , byteOffset , byteCount ) ; }
public static int $noinline$floatToDoubleToInt ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
public void setup ( ) { put ( "Cipher.BAR" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; put ( "Alg.Alias.Cipher.FOO" , "BAR" ) ; }
public void onCreate ( android.os.Bundle arguments ) { io.appium.droiddriver.util.InstrumentationUtils.init ( this , arguments ) ; super . onCreate ( arguments ) ; }
public void testLibraryAtReleaseAgainstAppInPreview_usingTargetSdk ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application android:label=\"@string/lib_name\" />\n" ) + " <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"XYZ\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"14\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlLibraryFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertTrue ( mergedDocument.isPresent ( ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > usesSdk = mergedDocument.get ( ) . getByTypeAndKey ( ManifestModel.NodeTypes.USES_SDK , null ) ; com.google.common.base.Optional < com.android.manifmerger.XmlAttribute > attribute = usesSdk.get ( ) . getAttribute ( com.android.manifmerger.XmlNode.fromXmlName ( "android:targetSdkVersion" ) ) ; assertTrue ( attribute.isPresent ( ) ) ; assertEquals ( "XYZ" , attribute.get ( ) . getValue ( ) ) ; }
private boolean isScoAcceptable ( ) { return ( mAudioRouteAllowed ) && ( ( ( mVoiceRecognitionStarted ) || ( isInCall ( ) ) ) || ( ( android.bluetooth.BluetoothHeadset.isInbandRingingSupported ( mService ) ) && ( isRinging ( ) ) ) ) ; }
public native float getFloat$ ( long address ) ;
protected void registerForRuimRecordEvents ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.registerForNewSms ( this , com.android.internal.telephony.cdma.EVENT_NEW_ICC_SMS , null ) ; super . registerForRuimRecordEvents ( ) ; }
public java.util.Collection < V > values ( ) { java.util.Collection < V > vs = values ; return vs != null ? vs : ( values = new Values ( this ) ) ; }
static int $noinline$testObjectInScope ( ) { java.lang.Object a = Main.array [ 0 ] ; return Main.doStaticNativeCallRef ( ) ; }
private boolean markIfNecessary ( @ javax.annotation.Nonnull com.android.sched.marker.MarkerManager node ) { synchronized ( node ) { if ( ! ( isMarked ( node ) ) ) { node.addMarker ( new com.android.jack.shrob.obfuscation.KeepNameMarker ( ) ) ; return true ; } return false ; } }
private boolean isWatch ( ) { return ( ( getContext ( ) . getResources ( ) . getConfiguration ( ) . uiMode ) & ( android.content.res.Configuration.UI_MODE_TYPE_MASK ) ) == ( android.content.res.Configuration.UI_MODE_TYPE_WATCH ) ; }
private static void printUsage ( ) { java.lang.System.err.println ( "Generates a single API file from the content of an SDK.\n" ) ; java.lang.System.err.println ( "Usage\n" ) ; java.lang.System.err.println ( "\tApiCheck SDKFOLDER OUTFILE\n" ) ; java.lang.System.exit ( 1 ) ; }
public void connectionFailureDoesNotSetHasEverConnectedTrue ( ) throws java.lang.Exception { testDhcpFailure ( ) ; verify ( mWifiConfigManager , never ( ) ) . updateNetworkAfterConnect ( 0 ) ; }
public java.lang.reflect.TypeVariable < java.lang.reflect.Constructor < T > > [ ] getTypeParameters ( ) { java.lang.reflect.GenericInfo info = java.lang.reflect.Constructor.getMethodOrConstructorGenericInfoInternal ( ) ; return ( ( java.lang.reflect.TypeVariable < java.lang.reflect.Constructor < T > > [ ] ) ( info.formalTypeParameters.clone ( ) ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > > getMostRecentPhoneLookupInfo ( com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > existingInfoMap ) { return backgroundExecutorService.submit ( ( ) -> getMostRecentPhoneLookupInfoInternal ( existingInfoMap ) ) ; }
public void setEditor ( com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor ) { if ( ( mUiParent ) == null ) { mEditor = editor ; } else { mUiParent.setEditor ( editor ) ; } }
public boolean handleWarning ( java.lang.String message ) { com.android.ide.eclipse.adt.AdtPlugin.displayWarning ( "Android SDK Verification" , message ) ; return true ; }
protected com.android.sched.util.location.Location getVFSLocation ( ) { return baseVFS.getLocation ( ) ; }
public void setQualifier ( com.android.ide.common.resources.configuration.ResourceQualifier qualifier ) { com.android.ide.common.resources.configuration.NetworkCodeQualifier q = ( ( com.android.ide.common.resources.configuration.NetworkCodeQualifier ) ( qualifier ) ) ; mText.setText ( java.lang.Integer.toString ( q.getCode ( ) ) ) ; }
com.android.sdklib.IAndroidTarget getTarget ( ) ;
public void onServiceDisconnected ( android.content.ComponentName className ) { if ( com.android.phone.MobileNetworkSettings.MobileNetworkFragment.DBG ) com.android.phone.MobileNetworkSettings.MobileNetworkFragment.log ( "connection disconnected, cleaning local binding." ) ; mNetworkQueryService = null ; setNetworkQueryService ( ) ; }
void deviceDisconnected ( java.lang.String bdaddr ) { android.util.Log.i ( com.android.bluetooth.avrcp.AvrcpTargetService.TAG , ( "deviceDisconnected: bdaddr=" + bdaddr ) ) ; mVolumeManager.deviceDisconnected ( bdaddr ) ; }
public java.lang.String getRealm ( ) { return getFieldValue ( android.net.wifi.WifiEnterpriseConfig.REALM_KEY ) ; }
public javax.net.ssl.SSLSession getSession ( ) { if ( ( sslSession ) == null ) { try { waitForHandshake ( ) ; } catch ( java.io.IOException e ) { return org.conscrypt.SSLSessionImpl.getNullSession ( ) ; } } return sslSession ; }
protected boolean skipExtraTokenChecks ( ) { return true ; }
public static java.lang.String getExpectedType ( @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.TextFormat format ) { return com.android.tools.lint.detector.api.LintUtils.findSubstring ( format.toText ( message ) , "value of type @" , "/" ) ; }
public com.android.ide.common.rendering.api.Density getDensity ( ) { return com.android.ide.common.rendering.api.Density.getEnum ( mDensity.getDpiValue ( ) ) ; }
public com.android.internal.telephony.uicc.UsimServiceTable getUsimServiceTable ( ) { com.android.internal.telephony.uicc.IccRecords r = mIccRecords.get ( ) ; return r != null ? r.getUsimServiceTable ( ) : null ; }
private android.os.Message obtainMessageWithWhatAndArg2 ( android.os.Message srcMsg , int what ) { android.os.Message msg = android.os.Message.obtain ( ) ; msg.what = what ; msg.arg2 = srcMsg.arg2 ; return msg ; }
public android.icu.util.CurrencyAmount parseCurrency ( java.lang.CharSequence text , java.text.ParsePosition parsePosition ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Boolean > isDirty ( com.google.common.collect.ImmutableSet < com.android.dialer.DialerPhoneNumber > phoneNumbers ) { return backgroundExecutorService.submit ( ( ) -> isDirtyInternal ( phoneNumbers ) ) ; }
public static double $opt$noinline$getDoubleField ( Main m ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return m.doubleField ; }
void switchAppsUsingRecents ( ) throws java.lang.Exception { android.util.Log.d ( android.autofillservice.cts.UiBot.TAG , "switchAppsUsingRecents()" ) ; mDevice.pressRecentApps ( ) ; android.os.SystemClock.sleep ( android.autofillservice.cts.Helper.UI_RECENTS_SWITCH_TIMEOUT_MS ) ; mDevice.pressRecentApps ( ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { onDelete ( ) ; }
public void testHardwareProxyTvInputService ( ) throws java.lang.Throwable { if ( ! ( android.media.tv.cts.Utils.hasTvInputFramework ( getActivity ( ) ) ) ) { return ; } for ( final android.media.tv.TvInputInfo info : mPassthroughInputList ) { verifyCommandTuneAndHardwareVideoAvailability ( info ) ; } }
public void stopLoading ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { stopLoading ( ) ; } } ) ; return ; } mAwContents.stopLoading ( ) ; }
public void onChange ( boolean selfUpdate ) { refreshMessageList ( ) ; }
public void ensureBody ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded ) { }
private synchronized void releaseView ( android.view.View view ) { if ( ! ( view instanceof com.android.contacts.ui.widget.CheckableImageView ) ) { return ; } mActionPool.offer ( view ) ; ( mActionRecycled ) ++ ; }
public com.android.ims.internal.IImsUt getUtInterface ( int slotId , int featureType ) throws android.os.RemoteException { return null ; }
public void testWificondExistsOnStartup ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; com.android.server.wifi.WifiStateMachinePrime testWifiStateMachinePrime = new com.android.server.wifi.WifiStateMachinePrime ( mWifiInjector , mLooper.getLooper ( ) , mNMService ) ; verify ( mWificond ) . tearDownInterfaces ( ) ; }
public void sendDeviceState ( int stateType , boolean state , android.os.Message result ) { }
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.spam.status.SpamStatus > checkSpamStatus ( java.lang.String number , @ android.support.annotation.Nullable java.lang.String defaultCountryIso ) { return com.google.common.util.concurrent.Futures.immediateFuture ( com.android.dialer.spam.status.SimpleSpamStatus.notSpam ( ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; reloadSkinCombo ( ) ; reloadAbiTypeCombo ( ) ; reloadDeviceCombo ( ) ; validatePage ( ) ; }
synchronized void nScriptSetVarJ ( long id , int slot , long val ) { validate ( ) ; rsnScriptSetVarJ ( mContext , id , slot , val ) ; }
private static com.google.common.io.FileWriteMode [ ] modes ( boolean append ) { return append ? new com.google.common.io.FileWriteMode [ ] { com.google.common.io.FileWriteMode.APPEND } : new com.google.common.io.FileWriteMode [ 0 ] ; }
public void test ( ) { try { java.lang.Thread.sleep ( ( 2 * 1000 ) ) ; } catch ( java.lang.InterruptedException ignored ) { } }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws com.android.jack.JackUserException { com.android.jack.analysis.dependency.type.TypeDependenciesInLibraryWriter.write ( session.getJackOutputLibrary ( ) , com.android.jack.Jack.getSession ( ) . getTypeDependencies ( ) ) ; }
public void getMuteResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , boolean enable ) { responseInts ( responseInfo , ( enable ? 1 : 0 ) ) ; }
public void testStartPnoScan ( ) throws java.lang.Exception { mWifiNative.startPnoScan ( com.android.server.wifi.WifiNativeTest.TEST_PNO_SETTINGS ) ; org.mockito.Mockito.verify ( mWificondControl ) . startPnoScan ( com.android.server.wifi.WifiNativeTest.TEST_PNO_SETTINGS ) ; }
void setOutputJackFile ( @ javax.annotation.Nonnull java.io.File outputJackFile ) throws com.android.jack.api01.ConfigurationException ;
public com.android.ide.common.internal.PngCruncher getAaptCruncher ( ) { return new com.android.ide.common.internal.AaptCruncher ( mBuildTools.getPath ( BuildToolInfo.PathId.AAPT ) , mCmdLineRunner ) ; }
public static void applyDebuggerSystemProperty ( com.android.internal.os.ZygoteConnection.Arguments args ) { if ( RoSystemProperties.DEBUGGABLE ) { args.runtimeFlags |= Zygote.DEBUG_ENABLE_JDWP ; } }
public int getExitValue ( ) { return 0 ; }
public void addFile ( com.android.build.gradle.integration.common.fixture.app.TestSourceFile file ) { sourceFiles.put ( file.getName ( ) , file ) ; }
public void testReadTimeZone_valid ( ) throws java.lang.Exception { libcore.tzdata.testing.ZoneInfoTestHelper.ZoneInfoDataBuilder builder = new libcore.tzdata.testing.ZoneInfoTestHelper.ZoneInfoDataBuilder ( ) ; builder.initializeToValid ( ) ; assertNotNull ( createZoneInfo ( getName ( ) , java.lang.System.currentTimeMillis ( ) , builder.build ( ) ) ) ; }
public void testE1 ( ) { loadAndRun ( "dot.junit.opcodes.opc_throw.d.T_opc_throw_4" , java.lang.NullPointerException.class ) ; }
private native java.lang.reflect.Constructor < T > getDeclaredConstructorInternal ( java.lang.Class < ? > [ ] args ) ;
public void enter ( ) { turnOnMasterTetherSettings ( ) ; simChange.startListening ( ) ; mUpstreamNetworkMonitor.start ( ) ; mOffloadController.start ( ) ; if ( upstreamWanted ( ) ) { mUpstreamWanted = true ; chooseUpstreamType ( true ) ; mTryCell = false ; } }
android.net.INetworkPolicyListener expect ( ) { org.junit.Assert.assertNull ( "expect() called before waitAndVerify()" , latch ) ; latch = new java.util.concurrent.CountDownLatch ( 1 ) ; return org.mockito.Mockito.doAnswer ( this ) . when ( listener ) ; }
public void callSessionHandover ( com.android.ims.internal.IImsCallSession i , int srcAccessTech , int targetAccessTech , android.telephony.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mNewListener.callSessionHandover ( srcAccessTech , targetAccessTech , reasonInfo ) ; }
public void testGoodCast ( ) throws java.lang.Exception { java.lang.String defaultType = java.security.KeyStore.getDefaultType ( ) ; com.android.org.conscrypt.TrustManagerImpl tmi = new com.android.org.conscrypt.TrustManagerImpl ( java.security.KeyStore.getInstance ( defaultType ) ) ; android.net.http.X509TrustManagerExtensions tme = new android.net.http.X509TrustManagerExtensions ( tmi ) ; }
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; }
public java.util.Collection < java.lang.String > getApplicableElements ( ) { return java.util.Arrays.asList ( com.android.SdkConstants.GRID_LAYOUT , com.android.SdkConstants.FQCN_GRID_LAYOUT_V7 ) ; }
public static native int ENGINE_SSL_write_BIO_heap ( long sslRef , long bioRef , byte [ ] sourceJava , int sourceOffset , int sourceLength , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc ) throws java.io.IOException ;
public java.lang.Package getPackage ( ) { java.lang.Package pkg = super . getPackage ( ) ; if ( pkg != null ) { return pkg ; } pkg = createPackage ( ) ; setPackage ( pkg ) ; return pkg ; }
public static boolean isPKCS12 ( org.bouncycastle.asn1.ASN1ObjectIdentifier algOid ) { return algOid.getId ( ) . startsWith ( PKCSObjectIdentifiers.pkcs_12PbeIds.getId ( ) ) ; }
final boolean casBusy ( ) { return com.google.common.cache.Striped64.UNSAFE.compareAndSwapInt ( this , com.google.common.cache.Striped64.busyOffset , 0 , 1 ) ; }
public void test_is24HourFormat ( ) { Settings.System.putString ( mContentResolver , Settings.System.TIME_12_24 , "24" ) ; assertTrue ( android.text.format.DateFormat.is24HourFormat ( mContext ) ) ; Settings.System.putString ( mContentResolver , Settings.System.TIME_12_24 , "12" ) ; assertFalse ( android.text.format.DateFormat.is24HourFormat ( mContext ) ) ; }
public static void setProperties ( java.util.Properties p ) { java.lang.System.PropertiesWithNonOverrideableDefaults userProperties = new java.lang.System.PropertiesWithNonOverrideableDefaults ( java.lang.System.unchangeableSystemProperties ) ; if ( p != null ) { userProperties.putAll ( p ) ; } java.lang.System.systemProperties = userProperties ; }
protected boolean hasNoSourceFile ( ) { return mFiles.isEmpty ( ) ; }
boolean setHoldingForConference ( ) { if ( ( getState ( ) ) == ( android.telecom.Connection.STATE_ACTIVE ) ) { setStateOverride ( Call.State.HOLDING ) ; return true ; } return false ; }
public void parseAndKeepRawInput ( java.lang.CharSequence numberToParse , java.lang.String defaultRegion , com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber ) throws com.google.i18n.phonenumbers.NumberParseException { parseHelper ( numberToParse , defaultRegion , true , true , phoneNumber ) ; }
public boolean getShouldFail ( ) { return mShouldFail ; }
public static native int RSA_private_decrypt ( int flen , byte [ ] from , byte [ ] to , int pkey , int padding ) throws java.security.SignatureException , javax.crypto.BadPaddingException ;
public void cancelAllTasks ( ) { for ( java.util.concurrent.Future < T > future : mFutureSet ) { future.cancel ( true ) ; } }
public void test_RSA_size_null_key_Failure ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.RSA_size ( org.conscrypt.NativeCryptoTest.NULL_EVP_PKEY ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public void run ( ) { try { vfs.close ( ) ; } catch ( java.io.IOException e ) { com.android.jack.Jack.logger.log ( java.util.logging.Level.FINE , ( ( "Failed to close vfs for '" + dirOrZip ) + "'." ) , e ) ; } }
public int next ( int n ) { return libcore.icu.NativeBreakIterator.nextImpl ( this . address , this . string , n ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService create ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor , com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration , com.android.ide.common.resources.ResourceResolver resolver , java.lang.Object credential ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService ( editor , configuration , resolver , credential ) ; }
public void tearDown ( ) { if ( ! ( mTargetContext.getResources ( ) . getBoolean ( R.bool.profile_supported_hfpclient ) ) ) { return ; } mHeadsetClientStateMachine.doQuit ( ) ; mHandlerThread.quit ( ) ; }
private java.lang.String getToolResultsBackendUrl ( ) { switch ( getBackendOption ( ) ) { case STAGING : case TEST : return "https://www-googleapis-test.sandbox.google.com/" ; default : return "https://www.googleapis.com/" ; } }
public int hashCode ( ) { return java.util.Arrays.hashCode ( org.conscrypt.NativeCrypto.i2d_PUBKEY ( key.getNativeRef ( ) ) ) ; }
public int getDeviceMode ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.hearingaid.HearingAidService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothHearingAid.MODE_BINAURAL ; } return ( ( service.getCapabilities ( device ) ) > > 1 ) & 1 ; }
public void testIsProjectStyle ( ) throws java.lang.Exception { assertFalse ( com.android.ide.eclipse.adt.internal.resources.ResourceHelper.isProjectStyle ( "@android:style/Theme" ) ) ; assertTrue ( com.android.ide.eclipse.adt.internal.resources.ResourceHelper.isProjectStyle ( "@style/LocalTheme" ) ) ; }
public boolean isDependencyFor ( ) { return ! ( mDependencyFor.isEmpty ( ) ) ; }
public void streamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) throws android.os.RemoteException { }
public void run ( ) { if ( com.android.systemui.statusbar.phone.PhoneStatusBar.DEBUG ) { android.util.Log.v ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , "running post-collapse cleanup" ) ; } try { mPile.setViewRemoval ( true ) ; mBarService.onClearAllNotifications ( ) ; } catch ( java.lang.Exception ex ) { } }
public void visitMultiANewArrayInsn ( java.lang.String desc , int dims ) { printer.visitMultiANewArrayInsn ( desc , dims ) ; printTypeOfOperandStack ( ) ; super . visitMultiANewArrayInsn ( desc , dims ) ; }
native void rsnAllocationRead1D ( long con , long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , int dt , int mSize , boolean usePadding ) ;
public void workingLocalOnlyHotspotEnrichedApBroadcast ( ) throws java.lang.Exception { workingLocalOnlyHotspot ( true , true ) ; }
void hangupForegroundResumeBackground ( ) { if ( com.android.internal.telephony.Phone.DEBUG_PHONE ) log ( "hangupForegroundResumeBackground" ) ; mCi.hangupForegroundResumeBackground ( obtainCompleteMessage ( ) ) ; }
public void testGetExampleNumberWithoutRegion ( ) { assertNotNull ( phoneUtil.getExampleNumberForType ( PhoneNumberType.FIXED_LINE ) ) ; assertNotNull ( phoneUtil.getExampleNumberForType ( PhoneNumberType.MOBILE ) ) ; assertNotNull ( phoneUtil.getExampleNumberForType ( PhoneNumberType.PREMIUM_RATE ) ) ; }
public void enter ( ) { maybeLogEvaluationResult ( networkEventType ( validationStage ( ) , com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED ) ) ; mConnectivityServiceHandler.sendMessage ( obtainMessage ( com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED , com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID , mNetId , null ) ) ; ( mValidations ) ++ ; }
public com.google.common.collect.ImmutableSet < com.android.manifmerger.XmlNode.NodeKey > getNodeKeys ( ) { return mRecords.keySet ( ) ; }
private long getGlobalLong ( java.lang.String name , long def ) { return Settings.Global.getLong ( mResolver , name , def ) ; }
public boolean execute ( com.android.cellbroadcastreceiver.CellBroadcastContentProvider provider ) { if ( provider.insertNewBroadcast ( cbm ) ) { startService ( alertIntent ) ; return true ; } else { return false ; } }
protected void onTextChanged ( java.lang.CharSequence text , int start , int lengthBefore , int lengthAfter ) { super . onTextChanged ( text , start , lengthBefore , lengthAfter ) ; if ( mIsResizeEnabled ) { com.android.phone.common.util.ViewUtil.resizeText ( this , mOriginalTextSize , mMinTextSize ) ; } }
public com.android.sched.scheduler.ComponentFilterSet getRequiredFilters ( ) { return runnableFilters.clone ( ) ; }
public int getInstallLocation ( ) { return android.provider.Settings.Global.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Global.DEFAULT_INSTALL_LOCATION , PackageHelper.APP_INSTALL_AUTO ) ; }
public int hashCode ( ) { return packageName.hashCode ( ) ; }
public com.android.jack.ir.ast.JMethodId next ( ) { return iterator.next ( ) . methodId ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( ( optionalAttributeVisitor ) != null ) { optionalAttributeVisitor.visitRuntimeVisibleAnnotationsAttribute ( clazz , method , runtimeVisibleAnnotationsAttribute ) ; } }
protected abstract java.lang.String getSavePropertyName ( ) ;
public java.lang.String getMinusSignString ( ) { return minusSign ; }
public android.uirendering.cts.testinfrastructure.ActivityTestBase.TestCaseBuilder addCanvasClientWithoutUsingPicture ( java.lang.String debugString , android.uirendering.cts.testinfrastructure.CanvasClient canvasClient ) { return addCanvasClientInternal ( debugString , canvasClient , false , false ) . addCanvasClientInternal ( debugString , canvasClient , true , false ) ; }
public void run ( ) { android.renderscript.RenderScript pRS = createRenderScript ( true ) ; testScriptSide ( pRS ) ; testJavaSide ( pRS ) ; passTest ( ) ; pRS.destroy ( ) ; }
public void enter ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; } mAudioWbs = false ; }
public void buildPatchFile ( java.io.File toDir , java.util.zip.ZipOutputStream patchOutput ) throws java.io.IOException { doBuildPatchFile ( getFile ( toDir ) , new com.intellij.updater.MultiZipFile.OutputStream ( patchOutput ) ) ; }
public com.android.ide.common.rendering.api.ResourceValue getProjectResource ( com.android.resources.ResourceType resourceType , java.lang.String resourceName ) { return getResource ( resourceType , resourceName , mProjectResources ) ; }
public static com.android.jack.Sourcelist getTargetLibSourcelist ( @ javax.annotation.Nonnull java.lang.String moduleName ) { return com.android.jack.TestTools.getSourcelistWithAbsPath ( ( ( "out/target/common/obj/JAVA_LIBRARIES/" + moduleName ) + "_intermediates/jack.java-source-list" ) ) ; }
public void onExtrasChanged ( java.lang.String callId , android.os.Bundle extras , android.telecom.Logging.Session.Info info ) throws android.os.RemoteException { mConnectionServiceDelegateAdapter.onExtrasChanged ( callId , extras , info ) ; }
public java.util.List < java.lang.Class < ? extends com.intellij.psi.PsiElement > > getApplicablePsiTypes ( ) { return java.util.Collections.< java.lang.Class < ? extends com.intellij.psi.PsiElement > > singletonList ( com.intellij.psi.PsiAssertStatement.class ) ; }
public void visitAnyClass ( proguard.optimize.info.Clazz clazz ) { int accessFlags = clazz.getAccessFlags ( ) ; if ( ( accessFlags & ( ClassConstants.ACC_PUBLIC ) ) == 0 ) { proguard.optimize.info.AccessMethodMarker.setAccessesPackageCode ( invokingMethod ) ; } }
public static boolean $noinline$equalsConstString0 ( java.lang.String s ) { return s.equals ( "" ) ; }
public static native double hypot ( double x , double y ) ;
public void requestIsimAuthenticationResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String response ) { responseString ( responseInfo , response ) ; }
public static java.awt.Color makeDarker ( java.awt.Color color , int shades ) { if ( shades < 1 ) { return color ; } return com.google.gct.testing.CloudTestingUtils.makeDarker ( com.intellij.util.ui.UIUtil.getSlightlyDarkerColor ( color ) , ( shades - 1 ) ) ; }
public void setCellBroadcastSmsConfig ( int [ ] configValuesArray , android.os.Message response ) { android.telephony.Rlog.e ( com.android.internal.telephony.sip.SipPhoneBase.LOG_TAG , "Error! This functionality is not implemented for SIP." ) ; }
private java.lang.String getVersionCodeString ( int versionCode , com.android.ant.MultiApkExportTask.ApkData apkData ) { int trueVersionCode = versionCode * ( com.android.ant.MultiApkExportTask.OFFSET_VERSION_CODE ) ; trueVersionCode += ( apkData.buildInfo ) * ( com.android.ant.MultiApkExportTask.OFFSET_BUILD_INFO ) ; trueVersionCode += apkData.minor ; return java.lang.Integer.toString ( trueVersionCode ) ; }
private void resetWhilePreservingInitState ( ) { android.os.IBinder operationToken = mOperationToken ; if ( operationToken != null ) { mOperationToken = null ; mKeyStore.abort ( operationToken ) ; } mOperationHandle = null ; mChunkedStreamer = null ; }
protected void tearDown ( ) throws java.lang.Exception { super . tearDown ( ) ; getDevice ( ) . uninstallPackage ( android.appsecurity.cts.PermissionsHostTest.PKG ) ; }
private void setBuildConfigFields ( @ com.android.annotations.NonNull java.util.Map < java.lang.String , com.android.builder.model.ClassField > fields ) { mBuildConfigFields.clear ( ) ; mBuildConfigFields.putAll ( fields ) ; }
protected void removeFile ( java.util.Collection < com.android.resources.ResourceType > types , com.android.ide.common.resources.ResourceFile file ) { for ( com.android.resources.ResourceType type : types ) { removeFile ( type , file ) ; } }
public org.chromium.mojo.system.Watcher getWatcher ( ) { return new org.chromium.mojo.system.impl.WatcherImpl ( ) ; }
public void registerListener ( com.android.sdklib.devices.DeviceManager.DevicesChangedListener listener ) { if ( listener != null ) { synchronized ( sListeners ) { if ( ! ( sListeners.contains ( listener ) ) ) { sListeners.add ( listener ) ; } } } }
private void setMediaSessionActiveAndPlaybackState ( boolean isPlaying ) { if ( isPlaying ) { mMediaSession.setActive ( true ) ; mMediaSession.setPlaybackState ( com.android.tv.MainActivity.MEDIA_SESSION_STATE_PLAYING ) ; } else { mMediaSession.setPlaybackState ( com.android.tv.MainActivity.MEDIA_SESSION_STATE_STOPPED ) ; mMediaSession.setActive ( false ) ; } }
private boolean isMy ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file ) { return com.intellij.openapi.util.text.StringUtilRt.endsWithIgnoreCase ( file.getNameSequence ( ) , mySchemeExtension ) ; }
com.google.common.util.concurrent.Service startAsync ( ) ;
public java.lang.String getSerialNumber ( ) { return "fakeserial" ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter x ) { printAnnotationLiterals ( x.getAnnotations ( ) ) ; print ( com.android.jack.ir.ast.JModifier.getStringVariableModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; return false ; }
public boolean startWpsPinKeypad ( java.lang.String pin ) { if ( android.text.TextUtils.isEmpty ( pin ) ) return false ; if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.startWpsPinKeypad ( pin ) ; } else { return doBooleanCommand ( ( "WPS_PIN any " + pin ) ) ; } }
public void testOutputFileNameUniquenessInLib ( ) { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject ( com.android.build.gradle.model.AndroidProjectTest.FOLDER_TEST_REGULAR , "libTestDep" ) ; com.android.build.gradle.model.AndroidProjectTest.compareDebugAndReleaseOutput ( projectData ) ; }
public java.lang.String getNai ( int slotIndex ) { int [ ] subId = android.telephony.SubscriptionManager.getSubId ( slotIndex ) ; if ( subId == null ) { return null ; } return getNaiBySubscriberId ( subId [ 0 ] ) ; }
public void testAccountManager ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; com.android.devtools.systemimage.uitest.utils.AccountManager.addGoogleAccount ( instrumentation , null , null ) ; com.android.devtools.systemimage.uitest.utils.AccountManager.removeAccount ( instrumentation , null ) ; }
public java.util.List < com.intellij.openapi.vfs.VirtualFile > getAllClasspathEntries ( ) { checkRootsValidity ( allFilesCache ) ; return allFilesCache ; }
public void testNotification2 ( ) throws java.lang.Exception { checkGraphic ( "ic_stat_1" , 9 , "notification-v9+" , 6 ) ; }
public void registrationServiceCapabilityChanged ( int serviceClass , int event ) { com.android.ims.ImsManager.log ( ( ( ( "registrationServiceCapabilityChanged :: serviceClass=" + serviceClass ) + ", event=" ) + event ) ) ; if ( ( mListener ) != null ) { mListener.onImsConnected ( ServiceState.RIL_RADIO_TECHNOLOGY_UNKNOWN ) ; } }
public void setMetaDirs ( @ javax.annotation.Nonnull java.util.List < java.io.File > metaDirs ) { metaImport = metaDirs ; }
public void testWeights ( ) throws java.lang.Exception { assertEquals ( ( "inefficient_weight.xml:10: Warning: Use a layout_width of 0dip instead of match_parent for better performance\n" + "inefficient_weight.xml:24: Warning: Use a layout_height of 0dip instead of wrap_content for better performance" ) , lintFiles ( "res/layout/inefficient_weight.xml" ) ) ; }
public static boolean NotEqualBoolVsIntConst ( boolean arg ) { return ( arg ? 0 : 1 ) == 2 ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.test ( "A" ) ; Main.test ( "B" ) ; Main.test ( "C" ) ; Main.test ( "D" ) ; }
public final void setInteger ( java.lang.String name , int value ) { mMap.put ( name , java.lang.Integer.valueOf ( value ) ) ; }
public void test_U8_3_SCALE05_20_inSqure ( ) { testResize ( inX , inX , Element.DataType.UNSIGNED_8 , 3 , 0.5F , 2.0F ) ; }
public static com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo getViewServerInfo ( com.android.ddmlib.IDevice device ) { synchronized ( com.android.hierarchyviewerlib.device.DeviceBridge.sViewServerInfo ) { return com.android.hierarchyviewerlib.device.DeviceBridge.sViewServerInfo.get ( device ) ; } }
public java.lang.String getName ( ) { return "CipherStreamTest2" ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; if ( mShouldTestTelecom ) { setupConnectionService ( null , ( ( FLAG_REGISTER ) | ( FLAG_ENABLE ) ) ) ; mInitialRttMode = getRttMasterSwitch ( ) ; setRttMasterSwitch ( false ) ; } }
public void changedMode ( @ javax.annotation.Nonnull com.android.jack.server.ServerMode oldMode , @ javax.annotation.Nonnull com.android.jack.server.ServerMode newMode ) { cleanJacks ( java.util.EnumSet.of ( Category.CODE , Category.MEMORY ) , java.util.EnumSet.of ( Impact.LATENCY , Impact.PERFORMANCE ) ) ; }
public int getPriority ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.hid.HidHostService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED ; } return service.getPriority ( device ) ; }
private void fixParentAfterDisconnect ( ) { setParentAndChildCall ( null ) ; }
protected synchronized void receive0 ( java.net.DatagramPacket p ) throws java.io.IOException { doRecv ( p , 0 ) ; }
public K higherKey ( K key ) { return getNearKey ( key , java.util.concurrent.ConcurrentSkipListMap.GT ) ; }
public void interrupt ( java.lang.Thread thread ) { dalvik.system.VMRuntime.getRuntime ( ) . requestConcurrentGC ( ) ; }
public void testNotifyFrameworkLoad ( ) { java.lang.String frameworkDex = "/system/framework/com.android.location.provider.jar" ; notifyDexLoad ( mFooUser0 , java.util.Arrays.asList ( frameworkDex ) , mUser0 ) ; org.junit.Assert.assertFalse ( mDexManager.hasInfoOnPackage ( frameworkDex ) ) ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newAddon ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision , @ com.android.annotations.NonNull java.lang.String addonVendor , @ com.android.annotations.NonNull java.lang.String addonName ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_ADDONS ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; p.mAddonVendor = addonVendor ; p.mAddonName = addonName ; return p ; }
public static void enableCommonRetransformation ( boolean enable ) { art.Redefinition.enableCommonRetransformation ( enable ) ; }
public void dragLeave ( org.eclipse.swt.dnd.DropTargetEvent event ) { if ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasDropListener.DEBUG ) com.android.ide.eclipse.adt.AdtPlugin.printErrorToConsole ( "DEBUG" , "drag leave" ) ; mLeaveTargetNode = mTargetNode ; mLeaveFeedback = mFeedback ; mLeaveView = mCurrentView ; clearDropInfo ( ) ; }
static com.android.manifmerger.XmlDocument xmlLibraryFromString ( com.android.manifmerger.XmlLoader.SourceLocation location , java.lang.String input ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { return com.android.manifmerger.XmlLoader.load ( com.android.manifmerger.TestUtils.NULL_RESOLVER , com.android.manifmerger.TestUtils.NO_PROPERTY_RESOLVER , location , input , XmlDocument.Type.LIBRARY ) ; }
public void error ( org.xml.sax.SAXParseException e ) throws org.xml.sax.SAXException { throw e ; }
private java.lang.String methodAndClassNamePatternGroupOrDefault ( int group , java.lang.String defaultString ) { java.util.regex.Matcher matcher = org.junit.runner.Description.METHOD_AND_CLASS_NAME_PATTERN.matcher ( toString ( ) ) ; return matcher.matches ( ) ? matcher.group ( group ) : defaultString ; }
public void handleMessage ( android.os.Message msg ) { if ( ( msg.what ) == ( com.android.server.am.BaseErrorDialog.ENABLE_BUTTONS ) ) { mConsuming = false ; setEnabled ( true ) ; } else if ( ( msg.what ) == ( com.android.server.am.BaseErrorDialog.DISABLE_BUTTONS ) ) { setEnabled ( false ) ; } }
public void sort ( ) { java.util.Collections.sort ( fVec , android.icu.text.SpoofChecker.Builder.ConfusabledataBuilder.SPUStringComparator.INSTANCE ) ; }
public java.math.BigInteger getCRLNumber ( ) throws java.io.IOException { sun.security.x509.CRLNumberExtension numExt = getCRLNumberExtension ( ) ; if ( numExt != null ) { java.math.BigInteger num = numExt.get ( sun.security.x509.CRLNumberExtension.NUMBER ) ; return num ; } else { return null ; } }
public void sendDeviceState ( int stateType , boolean state , android.os.Message result ) { }
public static int getEmptyState ( int numLevels ) { return ( ( com.android.settingslib.graph.SignalDrawable.STATE_EMPTY ) << ( com.android.settingslib.graph.SignalDrawable.STATE_SHIFT ) ) | ( numLevels << ( com.android.settingslib.graph.SignalDrawable.NUM_LEVEL_SHIFT ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mDownloadManager = ( ( android.app.DownloadManager ) ( mContext.getSystemService ( Context.DOWNLOAD_SERVICE ) ) ) ; mWebServer = new android.webkit.cts.CtsTestServer ( mContext ) ; clearDownloads ( ) ; }
V transform ( java.util.Map.Entry < K , V > entry ) { return entry.getValue ( ) ; }
public abstract com.android.dialer.calllog.model.CoalescedRow.Builder setNumberAttributes ( com.android.dialer.NumberAttributes numberAttributes ) ;
public void execute ( com.android.chimpchat.core.IChimpDevice device ) { device.press ( key , com.android.chimpchat.core.TouchPressType.fromIdentifier ( downUpFlag ) ) ; }
public java.lang.String toString ( ) { return ( "InetUnixAddress[" + ( new java.lang.String ( ipaddress , java.nio.charset.StandardCharsets.UTF_8 ) ) ) + "]" ; }
private void notifyCharacteristicChanged ( ) { showMessage ( "Characteristic changed" ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CHARACTERISTIC_CHANGED ) ; sendBroadcast ( intent ) ; }
public void getCdmaBroadcastConfig ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG , response , mRILDefaultWorkSource ) ; send ( rr ) ; }
public void testConstructor_NullKeystoreAlias_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , null , "RSA" , 1024 , null , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , android.security.KeyPairGeneratorSpecTest.SERIAL_1 , android.security.KeyPairGeneratorSpecTest.NOW , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when keystoreAlias is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void selectionChanged ( org.eclipse.ui.IWorkbenchPart part , org.eclipse.jface.viewers.ISelection selection ) { if ( getEditor ( ) . isEditorPageActive ( ) ) { mCheckOutlineAdapter = true ; } }
public static java.lang.Package [ ] getPackages ( ) { java.lang.ClassLoader classLoader = dalvik.system.VMStack.getCallingClassLoader ( ) ; if ( classLoader == null ) { classLoader = java.lang.ClassLoader.getSystemClassLoader ( ) ; } return classLoader.getPackages ( ) ; }
private static native void nativeDestroy ( long obj ) ;
public void addAnnotationProcessorOption ( @ javax.annotation.Nonnull java.lang.String propertyName , @ javax.annotation.Nonnull java.lang.String propertyValue ) { annotationProcessorOption.put ( propertyName , propertyValue ) ; }
public static java.lang.String getApplicationIcon ( com.android.io.IAbstractFile manifestFile ) throws com.android.io.StreamException , javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.sdklib.xml.AndroidXPathFactory.newXPath ( ) ; return xPath.evaluate ( ( ( ( ( ( ( ( "/" + ( com.android.sdklib.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.sdklib.xml.AndroidManifest.NODE_APPLICATION ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.sdklib.xml.AndroidManifest.ATTRIBUTE_ICON ) ) , new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) ) ; }
private void handleReleasedFocusTimeout ( com.android.server.telecom.ConnectionServiceFocusManager.FocusRequest focusRequest ) { android.telecom.Log.d ( this , "handleReleasedFocusTimeout req = %s" , focusRequest ) ; mCallsManagerRequester.releaseConnectionService ( mCurrentFocus ) ; updateConnectionServiceFocus ( focusRequest.call.getConnectionServiceWrapper ( ) ) ; updateCurrentFocusCall ( ) ; onRequestFocusDone ( focusRequest ) ; mCurrentFocusRequest = null ; }
public void run ( ) { selectionManager.select ( nodes ) ; }
protected void doApply ( java.util.zip.ZipFile patchFile , java.io.File backupDir , java.io.File toFile ) throws java.io.IOException { throw new java.io.IOException ( "dummy exception" ) ; }
public void testApplicationInvalidOrder_withComments ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String input = "" + ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\"/>" ) + "\n" ) + " <!-- with comments ! -->" ) + " <application android:label=\"@string/lib_name\" />\n" ) + "\n" ) + " <uses-sdk minSdkVersion=\"14\"/>" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument xmlDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "testApplicationInvalidOrder" ) , input ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mILogger ) ; com.android.manifmerger.PostValidator.validate ( xmlDocument , mergingReportBuilder ) ; java.lang.System.out.println ( xmlDocument.prettyPrint ( ) ) ; org.w3c.dom.Node lastChild = xmlDocument.getRootNode ( ) . getXml ( ) . getLastChild ( ) ; while ( ( lastChild.getNodeType ( ) ) != ( org.w3c.dom.Node.ELEMENT_NODE ) ) { lastChild = lastChild.getPreviousSibling ( ) ; } com.android.manifmerger.OrphanXmlElement xmlElement = new com.android.manifmerger.OrphanXmlElement ( ( ( org.w3c.dom.Element ) ( lastChild ) ) ) ; assertEquals ( ManifestModel.NodeTypes.APPLICATION , xmlElement.getType ( ) ) ; assertEquals ( org.w3c.dom.Node.COMMENT_NODE , lastChild.getPreviousSibling ( ) . getNodeType ( ) ) ; }
public void onBindViewHolder ( com.android.dialer.voicemail.listui.NewVoicemailViewHolder viewHolder , int position ) { com.android.dialer.common.LogUtil.i ( "onBindViewHolder" , ( "position" + position ) ) ; cursor.moveToPosition ( position ) ; viewHolder.bind ( cursor ) ; expandOrCollapseViewHolder ( viewHolder ) ; }
synchronized long nScriptInvokeIDCreate ( long sid , int slot ) { validate ( ) ; return rsnScriptInvokeIDCreate ( mContext , sid , slot ) ; }
public void apply ( org.gradle.api.Project project ) { project.getPluginManager ( ) . apply ( com.android.build.gradle.model.BaseComponentModelPlugin.class ) ; project.getPluginManager ( ) . apply ( com.android.build.gradle.model.AndroidComponentModelTestPlugin.class ) ; }
public static void wtf ( java.lang.String prefix , java.lang.Throwable tr , java.lang.String format , java.lang.Object ... args ) { android.util.Slog.wtf ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( prefix , format , args ) , tr ) ; }
public void setAllVisitors ( com.android.jack.dx.io.CodeReader.Visitor visitor ) { fallbackVisitor = visitor ; stringVisitor = visitor ; typeVisitor = visitor ; fieldVisitor = visitor ; methodVisitor = visitor ; dualConstantVisitor = visitor ; callSiteVisitor = visitor ; }
protected org.hamcrest.Matcher < android.view.View > checkAction ( ) { return android.support.test.espresso.contrib.DrawerMatchers.isClosed ( gravity ) ; }
public void updateUnreadCount ( java.util.List < com.android.ddmlib.logcat.LogCatMessage > newMessages ) { for ( com.android.ddmlib.logcat.LogCatMessage m : newMessages ) { if ( matches ( m ) ) { ( mUnreadCount ) ++ ; } } }
public void supplyPuk2 ( java.lang.String puk2 , java.lang.String newPin2 , android.os.Message onComplete ) { synchronized ( mLock ) { mCi.supplyIccPuk2ForApp ( puk2 , newPin2 , mAid , mHandler.obtainMessage ( com.android.internal.telephony.uicc.UiccCardApplication.EVENT_PIN2_PUK2_DONE , onComplete ) ) ; } }
public void onNumberSet ( int limit ) { mMmsRecycler.setMessageLimit ( this , limit ) ; setMmsDisplayLimit ( ) ; }
public static float ReturnFloat99P25 ( ) { double imm = Main.$inline$double ( 99.25 ) ; return ( ( float ) ( imm ) ) ; }
public static void showDisabledProjectStructureDialogMessage ( ) { com.intellij.openapi.ui.Messages.showWarningDialog ( ( "We will provide a UI to configure project settings later. " + ( ( ( "Until then, please manually edit your build.gradle file to " + "configure source folders, libraries and dependencies.\n\n" ) + "NOTE THAT EDITS MADE IN THE FOLLOWING DIALOG DO NOT AFFECT THE GRADLE BUILD.\n" ) + "The dialog can be used for temporary adjustments to SDKs etc." ) ) , "Project Structure" ) ; }
private static boolean isShuttingDown ( android.content.Context context ) { return android.preference.PreferenceManager.getDefaultSharedPreferences ( context.getApplicationContext ( ) ) . getBoolean ( com.android.voicemail.impl.OmtpService.IS_SHUTTING_DOWN , false ) ; }
protected final void loge ( java.lang.String s ) { android.telephony.Rlog.e ( com.android.internal.telephony.ServiceStateTracker.LOG_TAG , ( ( ( "[" + ( mPhone.getPhoneId ( ) ) ) + "] " ) + s ) ) ; }
public java.lang.String [ ] call ( ) { return getHttpAuthUsernamePassword ( host , realm ) ; }
public void setVoiceMessageWaiting ( int line , int countWaiting ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; if ( r != null ) { r.setVoiceMessageWaiting ( line , countWaiting ) ; } }
private void readBackBindState ( ) throws java.net.SocketException { localAddress = libcore.io.IoBridge.getSocketLocalAddress ( impl.fd ) ; isBound = true ; }
public boolean setConfigMethods ( java.lang.String cfg ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.setWpsConfigMethods ( cfg ) ; } else { return doBooleanCommand ( ( "SET config_methods " + cfg ) ) ; } }
public boolean getScanCapabilities ( com.android.server.wifi.WifiNative.ScanCapabilities capabilities ) { return mWifiNative.getBgScanCapabilities ( capabilities ) ; }
public void addI8 ( android.support.v8.renderscript.Byte3 v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addI8 ( v ) ; return ; } addI8 ( v.x ) ; addI8 ( v.y ) ; addI8 ( v.z ) ; }
public void onDisconnect ( ) { com.android.services.telephony.Log.v ( this , "onDisconnect" ) ; mHandler.obtainMessage ( com.android.services.telephony.TelephonyConnection.MSG_HANGUP , android.telephony.DisconnectCause.LOCAL ) . sendToTarget ( ) ; }
public int next ( ) { return this . icuIterator.next ( ) ; }
void notifyPackageUse ( java.lang.String packageName , int reason ) { android.content.pm.IPackageManager pm = android.app.AppGlobals.getPackageManager ( ) ; try { pm.notifyPackageUse ( packageName , reason ) ; } catch ( android.os.RemoteException e ) { } }
protected java.lang.String getLocaleID ( ) { return null ; }
private void launchTerminal ( com.googlecode.android_scripting.interpreter.Interpreter interpreter ) { android.content.Intent intent = new android.content.Intent ( this , com.googlecode.android_scripting.service.ScriptingLayerService.class ) ; intent.setAction ( Constants.ACTION_LAUNCH_INTERPRETER ) ; intent.putExtra ( Constants.EXTRA_INTERPRETER_NAME , interpreter.getName ( ) ) ; startService ( intent ) ; }
public void getOutgoingCallerIdDisplay ( android.os.Message onComplete ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "getOutgoingCallerIdDisplay: not possible in CDMA" ) ; }
public boolean removeAll ( final java.util.Collection < ? > c ) { return removeFromColumnIf ( com.google.common.collect.Maps.< V > valuePredicateOnEntries ( com.google.common.base.Predicates.in ( c ) ) ) ; }
public java.lang.String getPackageName ( ) { return variantConfiguration.getApplicationId ( ) ; }
public void acceptVideoRequest ( @ android.support.annotation.NonNull android.content.Context context ) { throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( ) ; }
boolean isValid ( ) { return true ; }
private void assertAreEqual ( java.lang.Object o1 , java.lang.Object o2 ) { org.junit.Assert.assertTrue ( o1.equals ( o2 ) ) ; org.junit.Assert.assertTrue ( o2.equals ( o1 ) ) ; }
public void run ( ) { container.requestTransparentRegion ( mFrameLayout ) ; drawWaiter.registerDrawCompleteCallback ( mFrameLayout ) ; }
private static native java.lang.Object openDexFileNative ( java.lang.String sourceName , java.lang.String outputName , int flags , java.lang.ClassLoader loader , dalvik.system.DexPathList [ ] elements ) ;
public static java.lang.invoke.MethodHandle exactInvoker ( java.lang.invoke.MethodType type ) { return new java.lang.invoke.Transformers.Invoker ( type , true ) ; }
public com.android.chimpchat.hierarchyviewer.HierarchyViewer getHierarchyViewer ( org.python.core.PyObject [ ] args , java.lang.String [ ] kws ) { return impl.getHierarchyViewer ( ) ; }
public static float FloatDivision ( ) { float a ; float b ; float c ; a = 8.0F ; b = 2.5F ; c = a / b ; return c ; }
public static com.android.dialer.voicemail.model.VoicemailEntry.Builder builder ( ) { return new com.android.dialer.voicemail.model.AutoValue_VoicemailEntry.Builder ( ) . setId ( 0 ) . setTimestamp ( 0 ) . setNumber ( com.android.dialer.DialerPhoneNumber.getDefaultInstance ( ) ) . setPhotoId ( 0 ) . setDuration ( 0 ) . setCallType ( 0 ) ; }
public static java.lang.CharSequence getSummary ( android.content.Context context , java.lang.String pkg ) { com.android.settings.fuelgauge.PowerWhitelistBackend powerWhitelist = com.android.settings.fuelgauge.PowerWhitelistBackend.getInstance ( ) ; return context.getString ( ( powerWhitelist.isSysWhitelisted ( pkg ) ? R.string.high_power_system : powerWhitelist.isWhitelisted ( pkg ) ? R.string.high_power_on : R.string.high_power_off ) ) ; }
public void onDescriptorRead ( java.lang.String address , int status , int handle , byte [ ] value ) throws android.os.RemoteException { }
public void addAddress ( android.net.LinkAddress address ) { try { mService.addAddressToTunnelInterface ( mResourceId , address ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
protected java.lang.String getBaseName ( ) { return null ; }
private native byte getByte ( java.lang.Object object , boolean accessible ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public com.android.volley.toolbox.ImageContainer get ( java.lang.String requestUrl , com.android.volley.toolbox.ImageListener imageListener , int maxWidth , int maxHeight , android.widget.ImageView.ScaleType scaleType ) { lastRequestUrl = requestUrl ; lastMaxWidth = maxWidth ; lastMaxHeight = maxHeight ; return null ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( ) ; n.flags |= android.app.Notification.FLAG_SHOW_LIGHTS ; n.ledARGB = - 256 ; n.ledOnMS = 1 ; n.ledOffMS = 0 ; mNM.notify ( 1 , n ) ; }
public com.android.jack.test.toolchain.LegacyBasedToolchain disableDxOptimizations ( ) { useDxOptimization = false ; return this ; }
public static < K , V > org.hamcrest.org.hamcrest.Matcher < java.util.Map < ? extends K , ? extends V > > aMapWithSize ( org.hamcrest.org.hamcrest.Matcher < ? extends java.lang.Integer > sizeMatcher ) { return org.hamcrest.collection.IsMapWithSize.< org.hamcrest.K , org.hamcrest.V > aMapWithSize ( sizeMatcher ) ; }
private native boolean nativeCursorWantsKeyEvents ( ) ;
void playItemRsp ( byte [ ] address , int rspStatus ) ;
public void run ( ) { clearCache ( includeDiskFiles ) ; }
public void visitLocalVariableTypeInfo ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.Method method , proguard.classfile.util.CodeAttribute codeAttribute , proguard.classfile.util.LocalVariableTypeInfo localVariableTypeInfo ) { localVariableTypeInfo.referencedClasses = findReferencedClasses ( clazz.getName ( ) , localVariableTypeInfo.getSignature ( clazz ) ) ; }
private static void checkTimeout ( int timeoutMs ) { com.android.internal.util.Preconditions.checkArgumentPositive ( timeoutMs , "timeoutMs must be strictly positive." ) ; }
protected void hideBuiltinParameters ( ) { java.util.Set < java.lang.String > hidden = mValues.hidden ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_PACKAGE_NAME ) ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API ) ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API_LEVEL ) ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_TARGET_API ) ; hidden.add ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_BUILD_API ) ; }
public int following ( int offset ) { return internalNext ( delegate.following ( offset ) ) ; }
public void handleRttUpgradeResponse ( @ android.annotation.Nullable android.telecom.Connection.RttTextStream rttTextStream ) { }
public java.util.Collection < java.lang.String > getApplicableElements ( ) { return java.util.Arrays.asList ( com.android.SdkConstants.TAG_APPLICATION , com.android.SdkConstants.TAG_USES_PERMISSION , com.android.SdkConstants.TAG_PERMISSION , "permission-tree" , "permission-group" , com.android.SdkConstants.TAG_USES_SDK , "uses-configuration" , "uses-feature" , "supports-screens" , "compatible-screens" , "supports-gl-texture" , com.android.SdkConstants.TAG_USES_LIBRARY , com.android.SdkConstants.TAG_ACTIVITY , com.android.SdkConstants.TAG_SERVICE , com.android.SdkConstants.TAG_PROVIDER , com.android.SdkConstants.TAG_RECEIVER ) ; }
public java.util.Set < android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair > getServiceFeatures ( ) { return new android.util.ArraySet ( mFeatures ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.Intent intent ) { return getCarrierPackageNamesForIntentAndPhone ( intent , getPhoneId ( ) ) ; }
public void test_SSL_CTX_free ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCryptoTest.NULL ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ) ; }
public void onCancel ( android.content.DialogInterface dialog ) { this . setResult ( com.android.phone.RESULT_OK , new android.content.Intent ( ) . putExtra ( com.android.phone.EmergencyCallbackModeExitDialog.EXTRA_EXIT_ECM_RESULT , false ) ) ; finish ( ) ; }
private void hideError ( ) { mErrorLabel.setText ( "" ) ; mSashError.setMaximizedControl ( mCanvasViewer.getControl ( ) ) ; }
com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy getNode ( ) { return mNodeProxy ; }
private void updateVideoHistoryViaState ( int oldState , int newState ) { if ( ( ( oldState == ( CallState.DIALING ) ) || ( oldState == ( CallState.RINGING ) ) ) && ( newState == ( CallState.ACTIVE ) ) ) { mVideoStateHistory = mVideoState ; } mVideoStateHistory |= mVideoState ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; generator = java.security.KeyPairGenerator.getInstance ( algorithmName ) ; }
public void onCurrentPositionChanged ( ) { if ( mTimeShiftManager.isAvailable ( ) ) { initializeTimeline ( ) ; updateControls ( false ) ; } }
public void await ( java.io.File directory ) { run.androidSdk.waitForDevice ( ) ; run.androidSdk.ensureDirectory ( directory ) ; run.androidSdk.remount ( ) ; }
public android.net.wifi.aware.TlvBufferUtils.TlvConstructor putInt ( int type , int data ) { checkLength ( 4 ) ; addHeader ( type , 4 ) ; libcore.io.Memory.pokeInt ( mArray , mPosition , data , java.nio.ByteOrder.BIG_ENDIAN ) ; mPosition += 4 ; return this ; }
private void doRedraw ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { redraw ( ) ; } } ) ; }
public boolean contains ( int ch ) { android.icu.util.VersionInfo v = android.icu.lang.UCharacter.getAge ( ch ) ; return ( ! ( android.icu.impl.Utility.sameObjects ( v , android.icu.text.UnicodeSet.NO_VERSION ) ) ) && ( ( v.compareTo ( version ) ) <= 0 ) ; }
public void validateSimCredentialWithInvalidIMSI ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithSimCredential ( ) ; cred.getSimCredential ( ) . setImsi ( "dummy" ) ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public void testFullscreenInProject ( ) throws java.lang.Exception { checkCreateActivityInProject ( "FullscreenActivity" ) ; }
public void testIgnoreDuplicateActivity ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.DUPLICATE_ACTIVITY ) ; assertEquals ( "No warnings." , lintProject ( "duplicate-manifest-ignore.xml=>AndroidManifest.xml" , "res/values/strings.xml" ) ) ; }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback , int timeoutMs ) { int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; requestNetwork ( request , networkCallback , timeoutMs , legacyType ) ; }
public void executeShellCommand ( java.lang.String command , com.android.ddmlib.IShellOutputReceiver receiver , int maxTimeToOutputResponse ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException ;
public void visitNoArgs ( int opcode , int offset , int length , com.android.dx.rop.type.Type type ) { observer.parsed ( bytes , offset , length , header ( offset ) ) ; }
public java.lang.String getLine1Number ( ) { return getLine1Number ( getSubId ( ) ) ; }
com.android.sched.util.location.Location getVDirLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir dir ) { return vfs.getVDirLocation ( dir ) ; }
public void testSetMaxFileSize ( ) throws java.lang.Exception { if ( ( ! ( hasMicrophone ( ) ) ) || ( ! ( hasCamera ( ) ) ) ) { return ; } testSetMaxFileSize ( ( 512 * 1024 ) , ( 50 * 1024 ) ) ; }
public void setSelected ( boolean selected ) { findViewById ( R.id.info_field ) . setBackgroundColor ( ( selected ? android.leanbackjank.app.presenter.CardPresenter.sSelectedBackgroundColor : android.leanbackjank.app.presenter.CardPresenter.sDefaultBackgroundColor ) ) ; super . setSelected ( selected ) ; }
public static native long EC_GROUP_get_generator ( org.conscrypt.NativeRef.EC_GROUP groupRef ) ;
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBranch ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; branch_ = value ; onChanged ( ) ; return this ; }
protected void setUp ( ) throws java.lang.Exception { com.android.bluetooth.btservice.AdapterService inst = mock ( com.android.bluetooth.btservice.AdapterService.class ) ; assertTrue ( ( inst != null ) ) ; mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter ( ) ; }
com.android.ahat.heapdump.Site getSite ( com.android.ahat.proguard.ProguardMap [ ] frames ) { return frames == null ? this : com.android.ahat.heapdump.Site.getSite ( this , frames ) ; }
public boolean isCenterSet ( ) { return ! ( java.lang.Float.isNaN ( mCenterX ) ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , short [ ] data ) { validateIsInt16 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_16 , data.length ) ; }
private native void nativeWriteTo ( long nativeDocument , java.io.OutputStream out , byte [ ] chunk ) ;
public void setStackDepth ( int depth ) { mDepth = depth ; }
public void onClick ( android.content.DialogInterface dialog , int id ) { android.content.Intent denyIntent = new android.content.Intent ( BluetoothPeripheralHandover.ACTION_DENY_CONNECT ) ; denyIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; sendBroadcast ( denyIntent ) ; this . mAlert = null ; this . finish ( ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( getName ( ) ) + " ignore connect" ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_REJECT ) ; }
private static synchronized void setHidDeviceService ( com.android.bluetooth.hid.HidDeviceService instance ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "setHidDeviceService(): set to: " + instance ) ) ; } com.android.bluetooth.hid.HidDeviceService.sHidDeviceService = instance ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) { return visit ( ( ( com.android.jack.ir.ast.JNode ) ( session ) ) ) ; }
public void testLongSelectResponse ( ) { byte [ ] selectResponse = testSelectableAid ( android.omapi.cts.OmapiTest.LONG_SELECT_RESPONSE_AID ) ; if ( selectResponse == null ) { return ; } assertTrue ( "Select Response is not complete" , android.omapi.cts.OmapiTest.verifyBerTlvData ( selectResponse ) ) ; }
private static java.lang.String getFileName ( java.lang.String filePath ) { return new java.io.File ( filePath ) . getName ( ) ; }
public java.lang.Class < ? > [ ] getParameterTypes ( ) { return java.lang.Class.findOverriddenMethodIfProxy ( artMethod ) . getParameterTypes ( ) ; }
public java.lang.String getBuildToolsVersion ( ) { return getBuildTools ( ) . getRevision ( ) . toString ( ) ; }
private android.webkit.BrowserFrame createWindow ( boolean dialog , boolean userGesture ) { return mCallbackProxy.createWindow ( dialog , userGesture ) ; }
public void runUntilIdle ( ) { assert ( mRunLoopID ) != 0 : "The run loop cannot run once closed" ; nativeRunUntilIdle ( ) ; }
public static int $noinline$SubAddConst2 ( int arg ) { return 14 - ( arg + 13 ) ; }
public static < T > com.android.volley.Response < T > success ( T result , com.android.volley.Cache.Entry cacheEntry ) { return new com.android.volley.Response ( result , cacheEntry ) ; }
public synchronized boolean getUseDoubleTree ( ) { return false ; }
public synchronized void setDocumentValidity ( long timeMillis ) { mDocValidity = timeMillis ; }
public void onMediaScannerConnected ( ) { if ( com.android.bluetooth.opp.BluetoothOppService.V ) { android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppService.TAG , "MediaScannerConnection onMediaScannerConnected" ) ; } mConnection.scanFile ( mInfo.mFilename , mInfo.mMimetype ) ; }
public boolean onSurfaceTextureDestroyed ( android.graphics.SurfaceTexture surface ) { return true ; }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "getConnectionState()" ) ; } com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; } return service.getConnectionState ( device ) ; }
public void run ( ) { setBlockOnOpen ( true ) ; open ( ) ; }
public static int ReturnIntMax ( ) { float imm = 1.0E34F ; return ( ( int ) ( imm ) ) ; }
public com.android.build.gradle.internal.test.report.ClassTestResults addTestClass ( java.lang.String className ) { return addPackageForClass ( className ) . addClass ( className ) ; }
public com.android.util.Pair < java.lang.Integer , java.lang.Integer > getLayoutlibVersion ( ) { return mLayoutlibVersion.getLayoutlibVersion ( ) ; }
public void testToString ( ) { org.junit.Assert.assertEquals ( "[Allow, logged, notified]" , com.android.server.telecom.tests.IncomingCallFilterTest.RESULT1.toString ( ) ) ; org.junit.Assert.assertEquals ( "[Reject, notified]" , com.android.server.telecom.tests.IncomingCallFilterTest.RESULT2.toString ( ) ) ; org.junit.Assert.assertEquals ( "[Reject, logged]" , com.android.server.telecom.tests.IncomingCallFilterTest.RESULT3.toString ( ) ) ; }
private android.support.v7.preference.Preference getPreference ( final android.content.pm.PermissionInfo perm , final android.content.pm.PermissionGroupInfo group ) { if ( isMutableGranularPermission ( perm.name ) ) { return getMutablePreference ( perm , group ) ; } else { return getImmutablePreference ( perm , group ) ; } }
public void run ( ) { recreateScreens ( ) ; }
public void testStarted ( com.android.ddmlib.testrunner.TestIdentifier test ) { mRunResult.testStarted ( test ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface t ) throws java.lang.Exception { if ( needsCoverage ( t ) ) { t.addMarker ( new com.android.jack.coverage.CodeCoverageMarker ( ) ) ; } }
public static void profileView ( @ com.android.annotations.NonNull com.android.ddmlib.Client client , @ com.android.annotations.NonNull java.lang.String viewRoot , @ com.android.annotations.NonNull java.lang.String view , @ com.android.annotations.NonNull com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler ) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendViewOpPacket ( client , com.android.ddmlib.HandleViewDebug.VUOP_PROFILE_VIEW , viewRoot , view , null , handler ) ; }
public void testCompareNull ( ) throws java.lang.Exception { try { new java.text.RuleBasedCollator ( "< a" ) . compare ( null , null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public void enter ( ) { super . enter ( ) ; setSpeakerphoneOn ( false ) ; setBluetoothOn ( false ) ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET , mAvailableRoutes ) ; setSystemAudioState ( newState , true ) ; updateInternalCallAudioState ( ) ; }
public void setLayerType ( int layerType , android.graphics.Paint paint ) { if ( ( mAwContents ) != null ) { mAwContents.setLayerType ( layerType , paint ) ; } }
public void onRemoteConferenceAdded ( android.telecom.RemoteConference conference ) { synchronized ( android.telecom.cts.CtsConnectionService.sLock ) { if ( ( android.telecom.cts.CtsConnectionService.sConnectionService ) != null ) { android.telecom.cts.CtsConnectionService.sConnectionService.onRemoteConferenceAdded ( conference ) ; } } }
void readSummaryFromParcelLocked ( android.os.Parcel in ) { mLoadedCount = in.readInt ( ) ; mCount.set ( mLoadedCount ) ; mLastCount = in.readInt ( ) ; mUnpluggedCount = mPluggedCount = mLoadedCount ; }
public void run ( ) { android.os.Debug.stopMethodTracing ( ) ; android.util.Log.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , "stopTracing" ) ; vibrate ( ) ; }
public void testCloseNull ( ) throws java.io.IOException { com.google.common.io.Closeables.close ( null , true ) ; com.google.common.io.Closeables.close ( null , false ) ; }
public void run ( ) { throw new java.lang.RuntimeException ( ) ; }
public java.lang.String toString ( ) { return ( super . toString ( ) ) + ( name.toString ( ) ) ; }
void setUiTTYMode ( int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException ;
public int getCategory ( ) { switch ( basicType ) { case com.android.jack.dx.rop.type.Type.BT_LONG : case com.android.jack.dx.rop.type.Type.BT_DOUBLE : { return 2 ; } } return 1 ; }
public static java.lang.Long sumToReference ( int ... ints ) { java.lang.System.out.println ( "Hi" ) ; return new java.lang.Long ( Main.VariableArityTester.sumToPrimitive ( ints ) ) ; }
private java.util.List < java.lang.String > getIncludesFrom ( java.lang.String includer ) { ensureInitialized ( ) ; return mIncludes.get ( includer ) ; }
public static android.support.v8.renderscript.RenderScript create ( android.content.Context ctx , android.support.v8.renderscript.RenderScript.ContextType ct , int flags ) { int v = ctx.getApplicationInfo ( ) . targetSdkVersion ; return android.support.v8.renderscript.RenderScript.create ( ctx , v , ct , flags ) ; }
protected java.lang.String removeSessionData ( java.lang.String data ) { data = super . removeSessionData ( data ) ; if ( ( getProject ( ) ) != null ) { data = data.replace ( getProject ( ) . getName ( ) , "PROJECTNAME" ) ; } return data ; }
public static java.lang.String getSimpleName ( java.lang.String fqcn ) { return fqcn.substring ( ( ( fqcn.lastIndexOf ( '.' ) ) + 1 ) ) ; }
private boolean isActivated ( ) { return true ; }
public boolean setP2pDeviceName ( java.lang.String name ) { return mSupplicantP2pIfaceHal.setWpsDeviceName ( name ) ; }
public void testAddAllSelf ( ) { java.util.concurrent.ArrayBlockingQueue q = populatedQueue ( jsr166.SIZE ) ; try { q.addAll ( q ) ; shouldThrow ( ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public native float getFloat ( java.lang.Object obj ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public double acquire ( ) { return acquire ( 1 ) ; }
public static native void SSL_SESSION_free ( long sslSessionNativePointer ) ;
private static android.content.SharedPreferences getMultiDexPreferences ( android.content.Context context ) { return context.getSharedPreferences ( android.support.multidex.MultiDexExtractor.PREFS_FILE , ( ( Build.VERSION.SDK_INT ) < 11 ? android.content.Context.MODE_PRIVATE : ( android.content.Context.MODE_PRIVATE ) | 4 ) ) ; }
private int getLibraryLoadFromApkStatus ( ) { assert org.chromium.base.library_loader.Linker.getInstance ( ) . isUsed ( ) ; if ( mLibraryWasLoadedFromApk ) { return LibraryLoadFromApkStatusCodes.SUCCESSFUL ; } return LibraryLoadFromApkStatusCodes.UNKNOWN ; }
private int skipValue ( ) throws java.io.IOException { com.android.tools.perflib.heap.Type type = com.android.tools.perflib.heap.Type.getType ( readUnsignedByte ( ) ) ; int size = type.getSize ( ) ; skipFully ( size ) ; return size + 1 ; }
byte [ ] getAddress ( ) { return mAddress ; }
public native java.lang.Object invoke ( java.lang.Object receiver , java.lang.Object ... args ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException , java.lang.reflect.InvocationTargetException ;
public java.lang.invoke.MethodHandle asFixedArity ( ) { assert ! ( isVarargsCollector ( ) ) ; return this ; }
public static java.util.List < java.awt.Font > getFonts ( long native_int ) { android.graphics.Typeface_Delegate delegate = android.graphics.Typeface_Delegate.sManager.getDelegate ( native_int ) ; if ( delegate == null ) { return null ; } return delegate.getFonts ( ) ; }
private synchronized void notifyAuthCancelled ( ) { mObexAuth.setCancelled ( true ) ; }
private static int aggregateStamp ( int stamp_a , int stamp_b ) { if ( ( stamp_a == ( java.util.Calendar.UNSET ) ) || ( stamp_b == ( java.util.Calendar.UNSET ) ) ) { return java.util.Calendar.UNSET ; } return stamp_a > stamp_b ? stamp_a : stamp_b ; }
public boolean startTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { return markIfNecessary ( method ) ; }
public void info ( java.lang.String msgFormat , java.lang.Object ... args ) { messages.add ( java.lang.String.format ( msgFormat , args ) ) ; }
public int underlyingOffset ( int offset ) { return ( start ) + offset ; }
public boolean setDeviceName ( java.lang.String name ) { return mSupplicantStaIfaceHal.setWpsDeviceName ( name ) ; }
private native boolean sendDtmfNative ( byte [ ] address , byte code ) ;
public java.io.File getDefaultGccToolchainPath ( com.android.build.gradle.internal.core.Abi abi ) { return getToolchainPath ( Toolchain.GCC , getGccToolchainVersion ( abi ) , abi ) ; }
public static void removeProvider ( int providerNumber ) { synchronized ( org.apache.harmony.security.fortress.Services.providers ) { java.security.Provider p = org.apache.harmony.security.fortress.Services.providers.remove ( ( providerNumber - 1 ) ) ; org.apache.harmony.security.fortress.Services.providersNames.remove ( p.getName ( ) ) ; org.apache.harmony.security.fortress.Services.setNeedRefresh ( ) ; } }
protected void beforeDebuggeeStart ( ) { debuggeeWrapper.setExpectedExitCode ( org.apache.harmony.jpda.tests.jdwp.VirtualMachine.ExitTest.EXIT_CODE ) ; super . beforeDebuggeeStart ( ) ; }
public void testCreate ( ) { java.util.Properties props = createExpectedProps ( ) ; com.android.sdklib.internal.repository.packages.MinToolsPackageTest.MockMinToolsPackage p = new com.android.sdklib.internal.repository.packages.MinToolsPackageTest.MockMinToolsPackage ( null , props , ( - 1 ) , null , null , null , LOCAL_ARCHIVE_PATH ) ; testCreatedPackage ( p ) ; }
public void end ( ) throws com.android.ide.common.res2.ConsumerException { try { postWriteAction ( ) ; getExecutor ( ) . waitForTasksWithQuickFail ( true ) ; } catch ( com.android.ide.common.res2.ConsumerException e ) { throw e ; } catch ( java.lang.Exception e ) { throw new com.android.ide.common.res2.ConsumerException ( e ) ; } }
public void traceMethodCalls ( boolean on ) { if ( on != ( tracingMethods ) ) { if ( on ) { dalvik.system.VMDebug.startMethodTracing ( ) ; } else { dalvik.system.VMDebug.stopMethodTracing ( ) ; } tracingMethods = on ; } }
public void testStandaloneWeekdayFormatting ( ) throws java.lang.Exception { java.util.Locale fi = new java.util.Locale ( "fi" ) ; assertEquals ( "torstai" , formatDateUtc ( fi , "cccc" ) ) ; assertEquals ( "torstaina" , formatDateUtc ( fi , "EEEE" ) ) ; }
public void visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method , @ javax.annotation.Nonnull com.android.sched.transform.TransformRequest transformRequest ) throws java.lang.Exception { visit ( ( ( com.android.jack.ir.ast.JNode ) ( method ) ) , transformRequest ) ; }
public void testConstructor_JUnit3Test ( ) throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( ) ; runner.run ( ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) ) + "#testMethodName\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) ) + "#testOtherName\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , ios.contents ( Stream.OUT ) ) ; }
public final void run ( ) { try { realRun ( ) ; } catch ( java.lang.Throwable fail ) { threadUnexpectedException ( fail ) ; } }
public static native long SSL_do_handshake_bio ( long sslNativePointer , long sourceBioRef , long sinkBioRef , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc , boolean client_mode , byte [ ] alpnProtocols ) throws java.net.SocketTimeoutException , java.security.cert.CertificateException , javax.net.ssl.SSLException ;
private static native long nativeOpenJarFile ( java.lang.String name , int fd ) throws java.io.IOException ;
private void createPagesRoot ( org.eclipse.swt.widgets.Composite parent ) { mPagesRootComposite = new org.eclipse.swt.widgets.Composite ( parent , org.eclipse.swt.SWT.NONE ) ; mStackLayout = new org.eclipse.swt.custom.StackLayout ( ) ; mPagesRootComposite.setLayout ( mStackLayout ) ; }
private void assertVerdict ( int expected , byte [ ] program , byte [ ] packet ) { android.net.apf.ApfTest.assertReturnCodesEqual ( expected , android.net.apf.ApfTest.apfSimulate ( program , packet , null , 0 ) ) ; }
protected void internalTearDown ( ) { printTestLog ( "FINISHED" ) ; super . internalTearDown ( ) ; }
public void checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType ) throws java.security.cert.CertificateException { checkTrusted ( chain , authType , null , false ) ; }
public void fileServicesUpdated ( java.util.List < android.telephony.mbms.FileServiceInfo > services ) throws android.os.RemoteException { }
public android.net.LocalSocket accept ( ) throws java.io.IOException { android.net.LocalSocketImpl acceptedImpl = new android.net.LocalSocketImpl ( ) ; impl.accept ( acceptedImpl ) ; return android.net.LocalSocket.createLocalSocketForAccept ( acceptedImpl ) ; }
public void test_10100 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "image/jpeg" , java.net.URLConnection.guessContentTypeFromName ( "someFile.jpg" ) ) ; org.junit.Assert.assertEquals ( "application/pdf" , java.net.URLConnection.guessContentTypeFromName ( "stuff.pdf" ) ) ; }
public java.lang.String getWizardActionDescription ( ) { return com.google.gct.idea.util.GctBundle.message ( "sample.import.title" ) ; }
public void testInitialize_zeroInterfacesFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , true , false , false ) ; }
public java.util.ArrayList < com.android.dialer.smartdial.SmartDialMatchPosition > getMatchPositions ( ) { return new java.util.ArrayList ( mMatchPositions ) ; }
public void onOffsetsChanged ( float xOffset , float yOffset , float xStep , float yStep , int xPixels , int yPixels ) { if ( ( mRenderer ) != null ) mRenderer.setOffset ( xOffset , yOffset , xPixels , yPixels ) ; }
native void rsnAllocationRead ( long con , long id , float [ ] d ) ;
private java.io.OutputStream createOutputStream ( java.io.ByteArrayOutputStream bytes , javax.crypto.Cipher cipher , boolean useBc ) { return useBc ? ( ( java.io.OutputStream ) ( new javax.crypto.CipherOutputStream ( bytes , cipher ) ) ) : ( ( java.io.OutputStream ) ( new javax.crypto.CipherOutputStream ( bytes , cipher ) ) ) ; }
protected void visitString ( int index ) { addConstant ( new com.android.jack.dx.rop.cst.CstString ( dex.strings ( ) . get ( index ) ) ) ; }
protected void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; }
public void testEncode_CharBuffer_NullEncoder ( ) { tests.api.java.nio.charset.CharsetTest.MockCharset2 c = new tests.api.java.nio.charset.CharsetTest.MockCharset2 ( "mock2" , null ) ; try { c.encode ( java.nio.CharBuffer.wrap ( "hehe" ) ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
private static void doTestPrimitiveFieldsIntegral ( ) { art.Test906.IntObject intObject = new art.Test906.IntObject ( ) ; art.Test906.setTag ( intObject , 10000 ) ; java.lang.System.out.println ( art.Test906.iterateThroughHeapPrimitiveFields ( 10000 ) ) ; java.lang.System.out.println ( art.Test906.getTag ( intObject ) ) ; }
public void testParseARPRequest ( ) { final java.lang.String packet = "FFFFFFFFFFFF 807ABF6F48F3 0806" + ( ( ( "0001 0800 06 04" + "0001" ) + "807ABF6F48F3 64706ADB" ) + "000000000000 64706FFD" ) ; final java.lang.String expected = "TX 80:7a:bf:6f:48:f3 > ff:ff:ff:ff:ff:ff arp" + " who-has 100.112.111.253" ; org.junit.Assert.assertEquals ( expected , getSummary ( packet ) ) ; }
public final byte [ ] getEncoded ( ) { return org.conscrypt.NativeCrypto.i2d_PKCS8_PRIV_KEY_INFO ( key.getNativeRef ( ) ) ; }
protected java.lang.Object handleGetObject ( java.lang.String key ) { if ( key == null ) { throw new java.lang.NullPointerException ( ) ; } loadLookupTablesIfNecessary ( ) ; return lookup.get ( key ) ; }
public boolean isTopActivityImmersive ( ) { enforceNotIsolatedCaller ( "startActivity" ) ; synchronized ( this ) { com.android.server.am.ActivityRecord r = getFocusedStack ( ) . topRunningActivityLocked ( ) ; return r != null ? r.immersive : false ; } }
public void uncaughtException ( java.lang.Thread t , java.lang.Throwable e ) { throw new UncaughtException ( ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile ) throws android.os.RemoteException { checkBinderConnection ( ) ; return getServiceInterface ( mBinder ) . createCallSession ( sessionId , profile , null ) ; }
protected void onPause ( ) { super . onPause ( ) ; if ( ( mProcessor ) != null ) { mProcessor.exit ( ) ; } }
android.content.BroadcastReceiver getBroadcastReceiver ( ) { return mReceiver ; }
com.android.jack.test.junit.RuntimeVersion value ( ) ;
public void writeToParcel ( android.os.Parcel out ) { out.writeInt ( mCount.get ( ) ) ; out.writeInt ( mLoadedCount ) ; out.writeInt ( mLastCount ) ; out.writeInt ( mUnpluggedCount ) ; }
synchronized long nScriptGroup2Create ( java.lang.String name , java.lang.String cachePath , long [ ] closures ) { validate ( ) ; return rsnScriptGroup2Create ( mContext , name , cachePath , closures ) ; }
public void test_providerCount ( ) { assertTrue ( ( ( providers.size ( ) ) > 0 ) ) ; assertTrue ( ( ( providers.size ( ) ) < 10 ) ) ; }
void unregisterCallback ( ) { synchronized ( mCallbackLock ) { mRegisteredCallback = null ; } if ( ( mControllerCallbacks ) == null ) return ; mControllerCallbacks.cleanup ( ) ; mControllerCallbacks = null ; }
public void setUp ( ) throws java.lang.Exception { android.support.test.espresso.IdlingPolicies.setMasterPolicyTimeout ( 5 , java.util.concurrent.TimeUnit.SECONDS ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { return visit ( ( ( com.android.jack.ir.ast.JNode ) ( method ) ) ) ; }
public void setSkins ( @ com.android.annotations.NonNull java.io.File [ ] skins ) { mSkins = skins ; }
public E peek ( ) { return ( size ) == 0 ? null : ( ( E ) ( queue [ 0 ] ) ) ; }
public java.util.Set < K > keySet ( ) { java.util.Set < K > ks = keySet ; if ( ks == null ) { ks = new KeySet ( ) ; keySet = ks ; } return ks ; }
public boolean isLabelProperty ( java.lang.Object element , java.lang.String property ) { return super . isLabelProperty ( element , property ) ; }
public static native int EVP_PKEY_cmp ( long pkey1 , long pkey2 ) ;
public long getRetainedSize ( com.android.ahat.heapdump.AhatHeap heap ) { int index = heap.getIndex ( ) ; return ( 0 <= index ) && ( index < ( mRetainedSizes.length ) ) ? mRetainedSizes [ heap.getIndex ( ) ] : 0 ; }
public void finishDrawing ( android.view.IWindow window ) { if ( com.android.server.WindowManagerService.localLOGV ) android.util.Slog.v ( com.android.server.WindowManagerService.TAG , ( "IWindow finishDrawing called for " + window ) ) ; finishDrawingWindow ( this , window ) ; }
boolean needsShape ( ) { return ( this ) == ( com.android.ide.eclipse.adt.internal.assetstudio.AssetType.LAUNCHER ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > onSuccessfulFill ( ) { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public boolean initializeVendorHal ( ) { return mWifiVendorHal.initialize ( ) ; }
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file , boolean append ) throws com.android.sched.util.file.WrongPermissionException { return vfs.openWrite ( file , append ) ; }
public static void createNewUiLauncherShortcut ( android.content.Context context ) { com.android.dialer.app.MainComponent.enableComponent ( context ) ; }
void libToExe ( @ javax.annotation.Nonnull java.io.File [ ] in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception ;
public java.lang.String getId ( ) { return id ; }
public void dismiss ( ) { if ( ( mPopup ) != null ) { mPopup.dismiss ( ) ; mPopup = null ; } }
public abstract void bulkRequestIconForPageUrl ( android.content.ContentResolver cr , java.lang.String where , android.webkit.WebIconDatabase.IconListener listener ) ;
public static com.android.server.wifi.ScanResults create ( int id , com.android.server.wifi.ScanDetail ... nativeResults ) { return new com.android.server.wifi.ScanResults ( id , false , ( - 1 ) , nativeResults ) ; }
static java.math.BigInt generatePrimeDefault ( int bitLength ) { java.math.BigInt r = java.math.BigInt.newBigInt ( ) ; java.math.NativeBN.BN_generate_prime_ex ( r.bignum , bitLength , false , 0 , 0 ) ; return r ; }
public void loggedRun ( ) { mDtmfLocalTonePlayer.stopTone ( call ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws java.lang.Exception { for ( com.android.jack.ir.sourceinfo.FileSourceInfo info : session.getSourceInfoFactory ( ) . getFileSourceInfos ( ) ) { info.setFileName ( newSourceFileName.getPath ( ) ) ; } }
private int packageFlagsToInstallFlags ( com.android.server.pm.PackageSetting ps ) { int installFlags = 0 ; if ( com.android.server.pm.PackageManagerService.isExternal ( ps ) ) { installFlags |= android.content.pm.PackageManager.INSTALL_EXTERNAL ; } if ( ps.isForwardLocked ( ) ) { installFlags |= android.content.pm.PackageManager.INSTALL_FORWARD_LOCK ; } return installFlags ; }
public void shutdown ( ) { synchronized ( this ) { mRunning = false ; if ( ( mServerSocket ) != null ) { try { mServerSocket.close ( ) ; } catch ( java.io.IOException e ) { } mServerSocket = null ; } } }
static com.android.cts.verifier.TestListAdapter.TestListItem createTestItem ( android.app.Activity activity , java.lang.String id , int titleRes , android.content.Intent intent ) { return com.android.cts.verifier.TestListAdapter.TestListItem.newTest ( activity , titleRes , id , intent.putExtra ( com.android.cts.verifier.managedprovisioning.DeviceOwnerPositiveTestActivity.EXTRA_TEST_ID , id ) ) ; }
public void callSessionUssdMessageReceived ( int mode , java.lang.String ussdMessage ) { try { mListener.callSessionUssdMessageReceived ( mode , ussdMessage ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void clientCertificateRequested ( long s ) { super . clientCertificateRequested ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_PrivateKey ( s , org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getClientPrivateKey ( ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_certificate ( s , org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getClientCertificates ( ) ) ; }
public void onDisconnect ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConference.TAG , "onDisconnect" ) ; mHeadsetProfile.terminateCall ( mDevice , null ) ; setDisconnected ( new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.LOCAL ) ) ; }
public com.android.layoutlib.api.SceneResult insertChild ( java.lang.Object parentView , com.android.layoutlib.api.IXmlPullParser childXml , int index , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED.getResult ( ) ; }
public abstract java.lang.String getCookie ( java.lang.String url ) ;
public void onStreamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) { try { callback.streamingServicesUpdated ( services ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
private static native java.lang.String nativeLoad ( java.lang.String filename , java.lang.ClassLoader loader , java.lang.String ldLibraryPath ) ;
void addNdkDebuggableLibraryFolders ( @ com.android.annotations.NonNull com.android.build.gradle.internal.core.Abi abi , @ com.android.annotations.NonNull java.io.File searchPath ) ;
public static void main ( java.lang.String [ ] args ) { Main.TestWatcher w = new Main.TestWatcher ( ) ; Main.doTest ( new Transform ( w ) , w ) ; }
void getTotalNumOfItemsRsp ( byte [ ] address , int rspStatus , int uidCounter , int numItems ) ;
public void testDegreesF32 ( ) { doF32 ( 305419896 , 3 ) ; }
public boolean unregisterListener ( com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener ) { return com.android.sdklib.devices.DeviceManager.listeners.remove ( listener ) ; }
private void processAudioConfigEvent ( android.bluetooth.BluetoothDevice device , android.bluetooth.BluetoothAudioConfig audioConfig ) { log ( ( "processAudioConfigEvent: " + device ) ) ; mAudioConfigs.put ( device , audioConfig ) ; broadcastAudioConfig ( device , audioConfig ) ; }
public void testAddAll1 ( ) { java.util.NavigableSet q = jsr166.ConcurrentSkipListSubSetTest.set0 ( ) ; try { q.addAll ( null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public static synchronized com.android.internal.telephony.uicc.UiccController getInstance ( com.android.internal.telephony.PhoneBase phone ) { if ( ( com.android.internal.telephony.uicc.UiccController.mInstance ) == null ) { com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController ( phone ) ; } else if ( phone != null ) { com.android.internal.telephony.uicc.UiccController.mInstance.setNewPhone ( phone ) ; } return com.android.internal.telephony.uicc.UiccController.mInstance ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( ( mScanner ) != null ) { mScanner.stopScan ( mCallback ) ; } }
public static com.ibm.icu.impl.number.Properties parseToProperties ( java.lang.String pattern , int ignoreRounding ) { com.ibm.icu.impl.number.Properties properties = new com.ibm.icu.impl.number.Properties ( ) ; com.ibm.icu.impl.number.PatternString.LdmlDecimalPatternParser.parse ( pattern , properties , ignoreRounding ) ; return properties ; }
public void acceptVideoRequestAsAudio ( ) { com.android.dialer.common.LogUtil.enterBlock ( "ImsVideoTech.acceptVideoRequestAsAudio" ) ; call.getVideoCall ( ) . sendSessionModifyResponse ( new android.telecom.VideoProfile ( android.telecom.VideoProfile.STATE_AUDIO_ONLY ) ) ; logger.logImpression ( DialerImpression.Type.IMS_VIDEO_REQUEST_ACCEPTED_AS_AUDIO ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode createNode ( java.lang.String fqn , boolean hasChildren ) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfoTest.createNode ( null , fqn , hasChildren ) ; }
public boolean isMemoryLow ( ) { return mLowMemFlag ; }
public static void multiplyP ( int [ ] x ) { int m = ( org.bouncycastle.crypto.modes.gcm.GCMUtil.shiftRight ( x ) ) > > 8 ; x [ 0 ] ^= m & ( org.bouncycastle.crypto.modes.gcm.GCMUtil.E1 ) ; }
public int hashCode ( ) { return mDir.hashCode ( ) ; }
public static native double log ( double a ) ;
public static void parseToExistingProperties ( java.lang.String pattern , com.ibm.icu.impl.number.Properties properties , int ignoreRounding ) { com.ibm.icu.impl.number.PatternString.LdmlDecimalPatternParser.parse ( pattern , properties , ignoreRounding ) ; }
public static long $noinline$NegNeg3 ( long arg ) { return 0 - ( - arg ) ; }
private final native void writeStringVector ( java.lang.String [ ] val ) ;
public static java.lang.String lookupNamespacePrefix ( @ com.android.annotations.NonNull org.w3c.dom.Node node , @ com.android.annotations.NonNull java.lang.String nsUri ) { java.lang.String defaultPrefix = ( com.android.SdkConstants.ANDROID_URI.equals ( nsUri ) ) ? com.android.SdkConstants.ANDROID_NS_NAME : com.android.SdkConstants.APP_PREFIX ; return com.android.utils.XmlUtils.lookupNamespacePrefix ( node , nsUri , defaultPrefix , true ) ; }
static java.lang.String [ ] getKeyToCharsMap ( @ android.support.annotation.NonNull android.content.Context context ) { return com.android.dialer.dialpadview.DialpadCharMappings.KEY_TO_CHAR_MAPS.get ( com.android.dialer.compat.CompatUtils.getLocale ( context ) . getISO3Language ( ) ) ; }
public void separate ( android.telecom.RemoteConnection connection ) { if ( mChildConnections.contains ( connection ) ) { try { mConnectionService.splitFromConference ( connection.getId ( ) , null ) ; } catch ( android.os.RemoteException e ) { } } }
public void testGetNetworkOperatorNoPhoneAccount ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockCallsManager.getForegroundCall ( ) ) . thenReturn ( null ) ; java.lang.String networkOperator = mBluetoothPhoneService.mBinder.getNetworkOperator ( ) ; org.junit.Assert.assertEquals ( networkOperator , "label1" ) ; }
private boolean isMarked ( @ javax.annotation.Nonnull com.android.sched.marker.MarkerManager node ) { synchronized ( node ) { return node.containsMarker ( com.android.jack.shrob.obfuscation.KeepNameMarker.class ) ; } }
public static com.android.jack.dx.rop.code.RegisterSpec make ( int reg , com.android.jack.dx.rop.type.TypeBearer type , com.android.jack.dx.rop.code.LocalItem local ) { assert local != null ; return com.android.jack.dx.rop.code.RegisterSpec.intern ( reg , type , local ) ; }
public int timeRoundF ( int reps ) { int result = i ; for ( int rep = 0 ; rep < reps ; ++ rep ) { result = java.lang.Math.round ( f ) ; } return result ; }
native long rsnScriptIntrinsicCreate ( long con , int id , long eid ) ;
public static android.renderscript.ScriptIntrinsicBlend create ( android.renderscript.RenderScript rs , android.renderscript.Element e ) { long id = rs.nScriptIntrinsicCreate ( 7 , e.getID ( rs ) ) ; return new android.renderscript.ScriptIntrinsicBlend ( id , rs ) ; }
public void onLoaderReset ( android.content.Loader < android.database.Cursor > loader ) { }
public boolean isConnected ( int callServiceType , int callType ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . isConnected ( callServiceType , callType ) ; } }
public boolean startTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { return markIfNecessary ( type ) ; }
public void testDeserializeWasExternalizableClass ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737200336c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + "e546573742457617345787465726e616c697a61626c6500000000000000000c0000787078" ; assertFalse ( libcore.java.io.SerializationTest.wasExternalizableInitializedFlag ) ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertTrue ( libcore.java.io.SerializationTest.wasExternalizableInitializedFlag ) ; }
public void run ( long sslSession ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.SSL_shutdown ( sslSession , null , org.conscrypt.NativeCryptoTest.DUMMY_CB ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public static void assertEquals ( char expected , char actual ) { if ( actual != expected ) { throw new java.lang.AssertionError ( ( ( ( ( "Actual != Expected (" + actual ) + " != " ) + expected ) + ")" ) ) ; } }
public static < T > void runBasicSplitTests ( java.lang.Iterable < T > spliterable , java.util.List < T > expectedElements , java.util.Comparator < T > comparator ) { libcore.java.util.SpliteratorTester.runBasicSplitTests ( spliterable.spliterator ( ) , expectedElements , comparator ) ; }
public static long $noinline$longSmallerShiftMasking ( long value , int shift ) { return value << ( shift & 3 ) ; }
public void testGetCommonInstances_Success ( ) throws java.lang.Exception { java.security.SecureRandom sr = java.security.SecureRandom.getInstance ( "SHA1PRNG" ) ; assertNotNull ( sr ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr.getProvider ( ) . getClass ( ) . getName ( ) ) ; }
public void entityRef ( java.lang.String name ) throws java.io.IOException { check ( false ) ; append ( '&' ) ; append ( name ) ; append ( ';' ) ; }
public boolean getDataRoamingEnabled ( ) { return mDcTracker.getDataRoamingEnabled ( ) ; }
public static java.util.Locale forLanguageTag ( java.lang.String languageTag ) { if ( languageTag == null ) { throw new java.lang.NullPointerException ( "languageTag == null" ) ; } return java.util.Locale.forLanguageTag ( languageTag , false ) ; }
public boolean getRecordsLoaded ( ) { return ( ( mRecordsToLoad ) == 0 ) && ( mRecordsRequested ) ; }
void putExtras ( final android.os.Bundle extras ) { if ( extras == null ) { return ; } if ( ( mExtras ) == null ) { mExtras = new android.os.Bundle ( ) ; } mExtras.putAll ( extras ) ; notifyExtrasChanged ( ) ; }
public void test_Any_Lower ( ) throws java.lang.Exception { libcore.icu.Transliterator t = new libcore.icu.Transliterator ( "Any-Lower" ) ; assertEquals ( "hello world!" , t.transliterate ( "HeLlO WoRlD!" ) ) ; }
public void onStart ( ) { if ( ( mInstaller ) != null ) { android.util.Slog.i ( com.android.server.pm.Installer.TAG , "Waiting for installd to be ready." ) ; mInstaller.waitForConnection ( ) ; } }
public void setValue ( java.lang.Object value ) { mValue = value ; if ( value instanceof com.android.tools.perflib.heap.Instance ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( null , instance ) ; } }
synchronized void nAllocationData1D ( long id , int off , int mip , int count , int [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
protected void loge ( java.lang.String s , java.lang.Exception e ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , s , e ) ; }
public void notifyIconDone ( com.android.server.wifi.hotspot2.IconEvent iconEvent ) { mHandler.notifyIconDone ( iconEvent ) ; }
public void info ( java.lang.String msgFormat , java.lang.Object ... args ) { java.lang.System.out.println ( java.lang.String.format ( msgFormat , args ) ) ; }
private void trace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField f ) { if ( brush.startTrace ( f ) ) { trace ( f.getEnclosingType ( ) ) ; trace ( f.getType ( ) ) ; traceAnnotations ( f ) ; brush.endTrace ( f ) ; } }
public void testDecode_empty ( ) throws java.lang.Exception { byte [ ] decoded = libcore.io.Base64.decode ( new byte [ 0 ] ) ; assertEquals ( 0 , decoded.length ) ; }
public static int getCallbackAction ( java.lang.String number , int features , java.lang.String phoneAccountComponentName ) { return com.android.dialer.calllogutils.CallbackActionHelper.getCallbackAction ( number , features , com.android.dialer.calllogutils.CallbackActionHelper.isDuoCall ( phoneAccountComponentName ) ) ; }
private static boolean mimeTypeMatches ( java.lang.String mimeType , java.lang.String matchAgainst ) { java.util.regex.Pattern p = java.util.regex.Pattern.compile ( matchAgainst.replaceAll ( "\\*" , "\\.\\*" ) , java.util.regex.Pattern.CASE_INSENSITIVE ) ; return p.matcher ( mimeType ) . matches ( ) ; }
static void native_addPath ( long nPath , int src , float dx , float dy ) { android.graphics.Path_Delegate.addPath ( nPath , src , java.awt.geom.AffineTransform.getTranslateInstance ( dx , dy ) ) ; }
public abstract int [ ] blend ( int [ ] src , int [ ] dst , int [ ] result ) ;
public boolean p2pCancelConnect ( ) { return mSupplicantP2pIfaceHal.cancelConnect ( ) ; }
public void tearDown ( ) throws java.lang.Exception { cursor.close ( ) ; }
public static int IntMultiplication ( ) { int a ; int b ; int c ; a = 7 ; b = 3 ; c = a * b ; return c ; }
void detachNativeFunctor ( ) { if ( ( ( mNativeDrawGLFunctor ) != 0 ) && ( ( mViewRootImpl ) != null ) ) { mViewRootImpl.detachFunctor ( mNativeDrawGLFunctor ) ; } mViewRootImpl = null ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/namespace.xml:2: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" + ( ( ( ( ( ( ( ( "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:other=\"http://foo.bar\" android:id=\"@+id/newlinear\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" orientation=\"true\">\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/namespace.xml:3: Error: Attribute is missing the Android namespace prefix [MissingPrefix]\n" ) + " <Button style=\"@style/setupWizardOuterFrame\" android.text=\"Button\" android:id=\"@+id/button1\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"></Button>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/namespace.xml:5: Error: Unexpected namespace prefix \"other\" found for tag LinearLayout [MissingPrefix]\n" ) + " <LinearLayout other:orientation=\"horizontal\"/>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "3 errors, 0 warnings\n" ) ) , lintFiles ( "res/layout/namespace.xml" ) ) ; }
private void setThumbPos ( float scale ) { final android.graphics.drawable.Drawable thumb = mThumb ; if ( thumb != null ) { setThumbPos ( getWidth ( ) , thumb , scale , java.lang.Integer.MIN_VALUE ) ; invalidate ( ) ; } }
public void testEnabledWhenOpened_DisabledWhenFinalized ( ) throws java.lang.Throwable { dalvik.system.CloseGuard.setEnabled ( true ) ; libcore.dalvik.system.CloseGuardTest.ResourceOwner owner = new libcore.dalvik.system.CloseGuardTest.ResourceOwner ( ) ; owner.open ( ) ; dalvik.system.CloseGuard.setEnabled ( false ) ; assertUnreleasedResources ( owner , 1 ) ; }
private void checkGraphic ( java.lang.String baseName , com.android.assetstudiolib.ActionBarIconGenerator.Theme theme ) throws java.io.IOException { com.android.assetstudiolib.ActionBarIconGenerator.ActionBarOptions options = new com.android.assetstudiolib.ActionBarIconGenerator.ActionBarOptions ( ) ; options.theme = theme ; com.android.assetstudiolib.ActionBarIconGenerator generator = new com.android.assetstudiolib.ActionBarIconGenerator ( ) ; checkGraphic ( 4 , "actions" , baseName , generator , options ) ; }
public android.media.MediaDrm.CryptoSession getCryptoSession ( @ android.annotation.NonNull byte [ ] sessionId , @ android.annotation.NonNull java.lang.String cipherAlgorithm , @ android.annotation.NonNull java.lang.String macAlgorithm ) { return new android.media.MediaDrm.CryptoSession ( sessionId , cipherAlgorithm , macAlgorithm ) ; }
public static synchronized void release ( android.content.Context context ) { if ( ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) && ( ( com.android.tv.tuner.TunerPreferences.sContentObserver ) != null ) ) { context.getContentResolver ( ) . unregisterContentObserver ( com.android.tv.tuner.TunerPreferences.sContentObserver ) ; } }
protected void deliverResponse ( java.lang.String response ) { if ( ( mListener ) != null ) { mListener.onResponse ( response ) ; } }
public static int $noinline$SubNeg2 ( int arg1 , int arg2 ) { int temp = - arg1 ; return ( temp - arg2 ) | ( temp - arg2 ) ; }
public void setDataRoamingEnabled ( boolean enable ) { mDcTracker.setDataRoamingEnabled ( enable ) ; }
public void setCallProfile ( com.android.ims.ImsCallProfile profile ) { synchronized ( mLockObj ) { mCallProfile = profile ; trackVideoStateHistory ( mCallProfile ) ; } }
private final synchronized void updateAudioRoute ( ) { if ( mAudioRouteNeedsUpdate ) { mAudioManager.setWiredHeadsetOn ( ( ( mHeadsetState ) > 0 ) ) ; mAudioRouteNeedsUpdate = false ; } }
public static double $noinline$DivMP25 ( double arg ) { return arg / ( - 0.25F ) ; }
public int startSession ( android.app.PendingIntent incomingCallIntent , com.android.ims.internal.IImsRegistrationListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . startSession ( incomingCallIntent , listener ) ; } }
public static long $noinline$Div1 ( long arg ) { return arg / 1 ; }
public void testConstructor3 ( ) { try { new java.util.PriorityQueue ( ( ( java.util.Collection ) ( null ) ) ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public static void setEndpointIdentificationAlgorithm ( javax.net.ssl.SSLParameters params , java.lang.String endpointIdentificationAlgorithm ) { params.setEndpointIdentificationAlgorithm ( endpointIdentificationAlgorithm ) ; }
public final long getLong ( ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } return getLong ( ix ( nextGetIndex ( SizeOf.LONG ) ) ) ; }
protected final org.bouncycastle.math.ec.ECFieldElement getRawXCoord ( ) { return x ; }
private void readMeminfoDataset ( java.io.BufferedReader br ) throws java.io.IOException { updateDataSet ( com.android.ddmuilib.SysinfoPanel.BugReportParser.readMeminfoDataset ( br ) , "PSS in kB" ) ; }
public final void binderDied ( ) { try { release ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.server.IpSecService.TAG , ( "Failed to release resource: " + e ) ) ; } }
public static long [ ] copyOf ( long [ ] original , int newLength ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( java.lang.Integer.toString ( newLength ) ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public void testCanEncodeCharSequence() { assertTrue(encoder.canEncode("\ud800\udc00")); assertFalse(encoder.canEncode("\ud800\udb00")); }
public void run ( ) { handleConfigurationChanged ( ) ; }
public void testField ( ) { org.apache.harmony.crypto.tests.javax.crypto.interfaces.DHPublicKeyTest.checkDHPublicKey key = new org.apache.harmony.crypto.tests.javax.crypto.interfaces.DHPublicKeyTest.checkDHPublicKey ( ) ; assertEquals ( "Incorrect serialVersionUID" , key.getSerVerUID ( ) , ( - 6628103563352519193L ) ) ; }
public void setXmlNode ( org.w3c.dom.Node xmlNode ) { mXmlNode = xmlNode ; }
com.android.sched.util.location.Location getLocation ( ) { return location ; }
public static void sort ( char [ ] a ) { java.util.DualPivotQuicksort.sort ( a , 0 , ( ( a.length ) - 1 ) , null , 0 , 0 ) ; }
private static native void dumpHprofData ( java.lang.String fileName , int fd ) throws java.io.IOException ;
private static dalvik.system.DexPathList.Element [ ] makePathElements ( java.util.List < java.io.File > files , java.io.File optimizedDirectory , java.util.List < java.io.IOException > suppressedExceptions ) { return dalvik.system.DexPathList.makeElements ( files , null , suppressedExceptions , true , null ) ; }
public void testInstallOlderRulesVersion ( ) throws java.lang.Exception { java.io.File appFile = getTimeZoneDataApkFile ( "test2" ) ; getDevice ( ) . installPackage ( appFile , true ) ; java.lang.Thread.sleep ( 30000 ) ; org.junit.Assert.assertEquals ( com.android.timezone.xts.TimeZoneUpdateHostTest.STAGED_OPERATION_NONE , getStagedOperationType ( ) ) ; }
private void assertDataTransmittedByClient ( ) throws java.lang.Exception { byte [ ] firstChunkFromClient = getFirstReceivedChunkFuture ( ) . get ( 4 , java.util.concurrent.TimeUnit.SECONDS ) ; if ( ( firstChunkFromClient == null ) || ( ( firstChunkFromClient.length ) == 0 ) ) { fail ( "Client did not transmit any data to server" ) ; } }
public void onApplicationCreate ( ) { registerContentObservers ( ) ; com.android.dialer.calllog.CallLogConfig.schedulePollingJob ( appContext ) ; }
private boolean isMy ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFileEvent event ) { return isMy ( event.getFile ( ) ) ; }
public int hashCode ( ) { return java.lang.Double.hashCode ( value ) ; }
public com.android.dx.dex.file.ClassDefItem call ( ) { com.android.dx.dex.file.ClassDefItem clazz = translateClass ( bytes , classFile ) ; return clazz ; }
public static int $noinline$compareTo ( java.lang.String lhs , java.lang.String rhs ) { return lhs.compareTo ( rhs ) ; }
public java.lang.String getName ( ) { assert ( name ) != null ; return name ; }
public void testReplaceValue3_NullPointerException ( ) { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( 5 ) ; try { c.replace ( "whatever" , one , null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public void testStrings ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/accessibility.xml:3: Warning: [I18N] Hardcoded string \"Button\", should use @string resource [HardcodedText]\n" + ( ( ( ( ( ( " <Button android:text=\"Button\" android:id=\"@+id/button1\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"></Button>\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/accessibility.xml:6: Warning: [I18N] Hardcoded string \"Button\", should use @string resource [HardcodedText]\n" ) + " <Button android:text=\"Button\" android:id=\"@+id/button2\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"></Button>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) + "" ) ) , lintFiles ( "res/layout/accessibility.xml" ) ) ; }
public void init ( ) throws java.lang.Exception { UCA = ( ( android.icu.text.RuleBasedCollator ) ( android.icu.text.Collator.getInstance ( ULocale.ROOT ) ) ) ; comparer = new android.icu.text.UTF16.StringComparator ( true , false , UTF16.StringComparator.FOLD_CASE_DEFAULT ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( ) ; n.flags |= android.app.Notification.FLAG_SHOW_LIGHTS ; n.ledARGB = - 256 ; n.ledOnMS = 1 ; n.ledOffMS = 0 ; mNM.notify ( 1 , n ) ; }
public void testBridge001 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( BRIDGE001 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . compileAndRunTest ( ) ; }
public void test002d ( ) throws java.lang.Exception { java.io.File jackOutput ; try { jackOutput = runTest002 ( true , null , true ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.resource.ResourceImportConflictException e ) { } }
protected void finalize ( ) throws java.lang.Throwable { try { mFrameSequenceState.destroy ( ) ; } finally { super . finalize ( ) ; } }
public static java.lang.String formatCalendar ( java.util.Calendar cal ) { java.text.SimpleDateFormat format = new java.text.SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm:ss.SSSZ" , java.util.Locale.ENGLISH ) ; format.setTimeZone ( cal.getTimeZone ( ) ) ; return format.format ( new java.util.Date ( cal.getTimeInMillis ( ) ) ) ; }
private static boolean approxEquals ( int expected , int actual ) { final int MAX_DELTA = 7 ; return ( java.lang.Math.abs ( ( expected - actual ) ) ) <= MAX_DELTA ; }
public java.lang.String getDisplayName ( ) { return ( ( ( name ) + " (" ) + ( count ( ) ) ) + ")" ; }
public android.bluetooth.BluetoothGatt connectGatt ( android.content.Context context , boolean autoConnect , android.bluetooth.BluetoothGattCallback callback , int transport ) { return connectGatt ( context , autoConnect , callback , transport , android.bluetooth.BluetoothDevice.PHY_LE_1M_MASK ) ; }
synchronized void nProgramBindTexture ( long vpf , int slot , long a ) { validate ( ) ; rsnProgramBindTexture ( mContext , vpf , slot , a ) ; }
public int download ( android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.IDownloadCallback listener ) throws android.os.RemoteException { return 0 ; }
public void setDate ( long date ) { this . date = date ; }
public void testConstructor_NullAliase ( ) { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockChar" , new java.lang.String [ ] { "mock" , null } ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public static long LongDivision ( ) { long a ; long b ; long c ; a = 8L ; b = 3L ; c = a / b ; return c ; }
public static native long SSL_set_options ( long ssl , long options ) ;
private static javax.xml.parsers.SAXParser getParser ( int version ) throws javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { javax.xml.validation.Schema schema = com.android.dvlib.DeviceSchema.getSchema ( version ) ; if ( schema != null ) { com.android.sdklib.devices.DeviceParser.sParserFactory.setSchema ( schema ) ; } return com.android.sdklib.devices.DeviceParser.sParserFactory.newSAXParser ( ) ; }
public java.lang.String toString ( ) { if ( ( count ) == 0 ) { return "" ; } return new java.lang.String ( value , 0 , count ) ; }
public static synchronized boolean isEmpty ( ) { return org.apache.harmony.security.fortress.Services.services.isEmpty ( ) ; }
public void testConstructor_NullCanonicalName ( ) { try { tests.api.java.nio.charset.CharsetTest.MockCharset c = new tests.api.java.nio.charset.CharsetTest.MockCharset ( null , new java.lang.String [ ] { "mock" } ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public libcore.io.BufferIterator bigEndianIterator ( ) { return new libcore.io.NioBufferIterator ( this , address , size , ( ( java.nio.ByteOrder.nativeOrder ( ) ) != ( java.nio.ByteOrder.BIG_ENDIAN ) ) ) ; }
private static boolean isAggressiveRecovery ( int value ) { return ( ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.CLEANUP ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.REREGISTER ) ) ) || ( value == ( com.android.internal.telephony.dataconnection.DcTracker.RecoveryAction.RADIO_RESTART ) ) ; }
protected void engineInit ( javax.net.ssl.ManagerFactoryParameters spec ) throws java.security.InvalidAlgorithmParameterException { throw new java.security.InvalidAlgorithmParameterException ( "ManagerFactoryParameters not supported" ) ; }
public boolean isIgnored ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { return issue != ( com.android.tools.lint.client.api.IssueRegistry.LINT_ERROR ) ; }
public void endTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { composedStatus.pop ( ) ; for ( com.android.jack.analysis.tracer.TracerBrush config : brushes ) { config.endTrace ( method ) ; } }
public void onCancel ( android.content.DialogInterface dialog ) { finish ( ) ; }
synchronized void nScriptGroupExecute ( long group ) { validate ( ) ; rsnScriptGroupExecute ( mContext , group ) ; }
protected java.io.File getLocalPathForFilename ( com.android.tradefed.build.IBuildInfo arg0 , java.lang.String arg1 ) throws com.android.tradefed.targetprep.TargetSetupError { storedApkName = arg1 ; return super . getLocalPathForFilename ( arg0 , arg1 ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDoStatement doStmt ) { removeBreakOrCase.push ( java.lang.Boolean.FALSE ) ; return super . visit ( doStmt ) ; }
private void notifyError ( java.lang.String message ) { showMessage ( message ) ; }
public static lombok.ast.Node getCompilationUnit ( @ org.intellij.lang.annotations.Language ( value = "JAVA" ) java.lang.String javaSource , java.io.File relativePath ) { com.android.tools.lint.detector.api.JavaContext context = com.android.tools.lint.detector.api.LintUtilsTest.parse ( javaSource , relativePath ) ; return context.getCompilationUnit ( ) ; }
public void onAppStatusChanged ( android.bluetooth.BluetoothDevice pluggedDevice , boolean registered ) { mCallback.onAppStatusChanged ( pluggedDevice , registered ) ; }
public void testEncode_CharBuffer_NullCharBuffer ( ) { tests.api.java.nio.charset.CharsetTest.MockCharset c = new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mock" , null ) ; try { c.encode ( ( ( java.nio.CharBuffer ) ( null ) ) ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
private java.lang.String toZoneIdStr ( java.lang.String expected ) { return expected ; }
private void pause ( ) { pause ( android.webkit.HTML5Audio.PAUSED ) ; }
public static boolean LessThan ( int x , int y ) { return x < y ? true : false ; }
public static void computeAbs ( android.renderscript.cts.TestAbs.ArgumentsShortUshort args ) { args.out = ( ( short ) ( java.lang.Math.abs ( args.inV ) ) ) ; }
native void rsnAllocationRead ( long con , long id , int [ ] d ) ;
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) throws com.android.sched.util.file.WrongPermissionException { return openWrite ( file , false ) ; }
public com.android.jack.jayce.v0002.NNode newNode ( ) throws com.android.jack.jayce.v0002.io.InvalidTokenException { throw new com.android.jack.jayce.v0002.io.InvalidTokenException ( ( "No node coresponding to token " + ( this . toString ( ) ) ) ) ; }
public void testResOverlay ( ) { assertFalse ( "fa" . equals ( mResOverLay.getText ( ) . toString ( ) ) ) ; assertEquals ( "fa" , mResOverLay2.getText ( ) . toString ( ) ) ; }
private static native java.lang.Class < ? > generateProxy ( java.lang.String name , java.lang.Class < ? > [ ] interfaces , java.lang.ClassLoader loader , java.lang.reflect.Method [ ] methods , java.lang.Class < ? > [ ] [ ] exceptions ) ;
private void assertPinnedToWifiWithCellDefault ( ) { org.junit.Assert.assertEquals ( mWiFiNetworkAgent.getNetwork ( ) , mCm.getBoundNetworkForProcess ( ) ) ; org.junit.Assert.assertEquals ( mCellNetworkAgent.getNetwork ( ) , mCm.getActiveNetwork ( ) ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile ) { isCreateCallSessionCalled = true ; return null ; }
public final java.lang.reflect.Constructor < ? > getJayceReaderConstructor ( ) throws com.android.jack.library.LibraryFormatException { ensureJayceLoaded ( ) ; assert ( jayceReaderConstructor ) != null ; return jayceReaderConstructor ; }
public static boolean isBoundKeyAlgorithm ( java.lang.String algorithm ) { if ( ! ( android.security.KeyChain.isKeyAlgorithmSupported ( algorithm ) ) ) { return false ; } return android.security.KeyStore.getInstance ( ) . isHardwareBacked ( algorithm ) ; }
boolean isAuto ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.Splits splits ) { return false ; }
private void notifyOptionChanged ( @ com.android.tv.TvOptionsManager.OptionType int option ) { com.android.tv.TvOptionsManager.OptionChangedListener listener = mOptionChangedListeners.get ( option ) ; if ( listener != null ) { listener.onOptionChanged ( option , getOptionString ( option ) ) ; } }
public static com.android.server.wifi.ScanDetail toScanDetail ( android.net.wifi.ScanResult scanResult ) { com.android.server.wifi.hotspot2.NetworkDetail networkDetail = new com.android.server.wifi.hotspot2.NetworkDetail ( scanResult.BSSID , scanResult.informationElements , scanResult.anqpLines , scanResult.frequency ) ; return new com.android.server.wifi.ScanDetail ( scanResult , networkDetail ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { com.android.bluetooth.hearingaid.HearingAidService service = getService ( ) ; if ( service == null ) { return new java.util.ArrayList < > ( ) ; } return service.getConnectedDevices ( ) ; }
public void setEnabled ( boolean enabled ) { if ( enabled == ( isEnabled ( ) ) ) return ; setFlags ( ( enabled ? android.view.View.ENABLED : android.view.View.DISABLED ) , android.view.View.ENABLED_MASK ) ; refreshDrawableState ( ) ; invalidate ( true ) ; }
public static short $noinline$shortToCharToShort ( short value ) { return ( ( short ) ( ( char ) ( value ) ) ) ; }
public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach ( dalvik.system.EmulatedStackFrame stackFrame ) { return attach ( stackFrame , 0 , 0 , 0 ) ; }
synchronized double nScriptGetVarD ( long id , int slot ) { validate ( ) ; return rsnScriptGetVarD ( mContext , id , slot ) ; }
public void testEndCallWithNoCalls ( ) throws java.lang.Exception { org.junit.Assert.assertFalse ( mTSIBinder.endCall ( null ) ) ; }
public static void fail ( ) { java.lang.System.out.println ( "fail" ) ; java.lang.Thread.dumpStack ( ) ; }
com.android.server.wifi.WifiNetworkScoreCache getScoreCache ( ) { return mock ( com.android.server.wifi.WifiNetworkScoreCache.class ) ; }
public com.android.layoutlib.api.SceneResult getResult ( ) { assert ( this ) != ( com.android.layoutlib.api.SceneResult.SceneStatus.ERROR_UNKNOWN ) ; return new com.android.layoutlib.api.SceneResult ( this ) ; }
public boolean isMwiDontStore ( ) { if ( ( isMwi ) && ( mwiDontStore ) ) { return true ; } if ( isCphsMwiMessage ( ) ) { if ( " " . equals ( getMessageBody ( ) ) ) { return true ; } } return false ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { mHandler.obtainMessage ( com.android.server.net.NetworkPolicyManagerService.MSG_SCREEN_ON_CHANGED ) . sendToTarget ( ) ; }
public void onBroadcastSignalStrengthUpdated ( int signalStrength ) { try { callback.broadcastSignalStrengthUpdated ( signalStrength ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public com.android.builder.model.AndroidProject getSingleModel ( ) { return getSingleModel ( false , true ) ; }
public com.android.tools.perflib.heap.Snapshot build ( ) { return mSnapshot ; }
public char get ( int index ) { return byteBuffer.getChar ( ( index * ( libcore.io.SizeOf.CHAR ) ) ) ; }
public void startDtmf ( char c ) { this . startDtmf ( c ) ; }
private void rebootRecoveryWithCommand ( java.lang.String command ) { try { mService.rebootRecoveryWithCommand ( command ) ; } catch ( android.os.RemoteException ignored ) { } }
public static < V > org.hamcrest.Matcher < java.util.Map < ? , ? extends V > > hasValue ( org.hamcrest.Matcher < ? super V > valueMatcher ) { return new org.hamcrest.collection.IsMapContaining < java.lang.Object , V > ( org.hamcrest.collection.IsMapContaining.anything ( ) , valueMatcher ) ; }
public boolean isActiveUserAvailable ( ) { synchronized ( this ) { return ( myActiveUser ) != null ; } }
public void testInstrumentationRunnerArguments ( @ com.android.annotations.NonNull java.util.Map < java.lang.String , java.lang.String > args ) { getTestInstrumentationRunnerArguments ( ) . putAll ( args ) ; }
public java.io.File get ( ) { return mappingFile ; }
public static void computeCbrt ( android.renderscript.cts.TestCbrt.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 2 , 128 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.cbrt ( args.inV , t ) ; }
protected void tearDown ( ) throws java.lang.Exception { java.io.File toolFolder = mBuildToolInfo.getLocation ( ) ; com.android.builder.internal.compiler.PreDexCacheTest.deleteFolder ( toolFolder ) ; com.android.builder.internal.compiler.PreDexCache.getCache ( ) . clear ( null , null ) ; super . tearDown ( ) ; }
public void visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation , @ javax.annotation.Nonnull com.android.sched.transform.TransformRequest transformRequest ) throws java.lang.Exception { }
public boolean factoryReset ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return false ; } service.disable ( ) ; return service.factoryReset ( ) ; }
public final void dumpSizes ( ) { for ( com.android.tools.perflib.heap.Heap heap : mHeaps ) { java.lang.System.out.println ( ( "+------------------ sizes for heap: " + ( heap.getName ( ) ) ) ) ; heap.dumpSizes ( ) ; } }
private void grow ( int newCapacity ) { E [ ] newData = newElementArray ( newCapacity ) ; java.lang.System.arraycopy ( elementData , 0 , newData , 0 , elementCount ) ; elementData = newData ; }
public void testPlayHlsStreamWithQueryString ( ) throws java.lang.Throwable { localHlsTest ( "hls.m3u8" , true , false ) ; }
public synchronized void setPushLevel ( java.util.logging.Level newLevel ) throws java.lang.SecurityException { if ( newLevel == null ) { throw new java.lang.NullPointerException ( ) ; } checkPermission ( ) ; pushLevel = newLevel ; }
public static native void SSL_renegotiate ( long sslNativePointer ) throws javax.net.ssl.SSLException ;
public static void assertEquals ( long expected , long result ) { if ( expected != result ) { throw new java.lang.Error ( ( ( ( "Expected: " + expected ) + ", found: " ) + result ) ) ; } }
public static android.content.SyncStatusInfo getSyncStatus ( android.accounts.Account account , java.lang.String authority ) { try { return android.content.ContentResolver.getContentService ( ) . getSyncStatus ( account , authority , null ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( "the ContentService should always be reachable" , e ) ; } }
public boolean startScan ( android.os.WorkSource workSource ) { try { mService.startScan ( null , workSource ) ; return true ; } catch ( android.os.RemoteException e ) { return false ; } }
native void rsnAllocationSyncAll ( long con , long alloc , int src ) ;
java.io.OutputStream openWrite ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file ) throws com.android.sched.util.file.WrongPermissionException { return openWrite ( file , false ) ; }
public java.lang.String getName ( ) { return name ; }
public final boolean isReadOnly ( ) { return isReadOnly ; }
private void gotoCameraApp ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Camera" ) ; }
public final void run ( ) { try { realRun ( ) ; threadShouldThrow ( "InterruptedException" ) ; } catch ( java.lang.InterruptedException success ) { threadAssertFalse ( java.lang.Thread.interrupted ( ) ) ; } catch ( java.lang.Throwable fail ) { threadUnexpectedException ( fail ) ; } }
public void testAtanPiF32 ( ) { doF32 ( 291 , 5 ) ; }
protected void receiveNewSessionTicketMessage ( java.io.ByteArrayInputStream buf ) throws java.io.IOException { org.bouncycastle.crypto.tls.NewSessionTicket newSessionTicket = org.bouncycastle.crypto.tls.NewSessionTicket.parse ( buf ) ; assertEmpty ( buf ) ; tlsClient.notifyNewSessionTicket ( newSessionTicket ) ; }
public static void computeExp2 ( android.renderscript.cts.TestExp2.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 16 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.exp2 ( args.inV , t ) ; }
public void onSaveInstanceState ( android.os.Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( ( mVoicemailPlaybackPresenter ) != null ) { mVoicemailPlaybackPresenter.onSaveInstanceState ( outState ) ; } }
public java.lang.String getActions ( ) { return null ; }
public static long $noinline$longUnnecessaryShiftMasking ( long value , int shift ) { return value > > ( shift & 63 ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.doTest ( ) ; }
public void addExtension ( org.bouncycastle.asn1.ASN1ObjectIdentifier oid , boolean critical , org.bouncycastle.asn1.ASN1Encodable value ) { extGenerator.addExtension ( new org.bouncycastle.asn1.ASN1ObjectIdentifier ( oid.getId ( ) ) , critical , value ) ; }
protected void log ( java.lang.String s ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , s ) ; }
java.util.Set < java.lang.String > getAbiFilters ( ) ;
public void disconnect ( ) { try { mConnectionService.disconnect ( mId , null ) ; } catch ( android.os.RemoteException e ) { } }
public void info ( java.lang.String format , java.lang.Object ... args ) { add ( "P " , format , args ) ; }
public void testProcessChldAddHeldToConfHolding ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall ( ) ; addCallCapability ( activeCall , Connection.CAPABILITY_MERGE_CONFERENCE ) ; boolean didProcess = mBluetoothPhoneService.mBinder.processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_ADDHELDTOCONF ) ; org.mockito.Mockito.verify ( activeCall ) . mergeConference ( ) ; org.junit.Assert.assertEquals ( didProcess , true ) ; }
public void test_setOOBInlineZ ( ) throws java.lang.Exception { try ( java.net.Socket theSocket = new java.net.Socket ( ) ) { theSocket.setOOBInline ( true ) ; assertTrue ( "expected OOBIline to be true" , theSocket.getOOBInline ( ) ) ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { validatePage ( ) ; }
public static com.android.bluetooth.ObexServerSockets create ( com.android.bluetooth.IObexConnectionHandler validator ) { return com.android.bluetooth.ObexServerSockets.create ( validator , BluetoothAdapter.SOCKET_CHANNEL_AUTO_STATIC_NO_SDP , BluetoothAdapter.SOCKET_CHANNEL_AUTO_STATIC_NO_SDP , true ) ; }
public void actionPerformed ( java.awt.event.ActionEvent event ) { if ( myConditionCheckbox.isSelected ( ) ) { myPassCountCheckbox.setSelected ( false ) ; } updateCheckboxes ( ) ; }
public void test_SSL_do_handshake_NULL_SSL ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , null , null , 0 , false , null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public void test011_1 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST011_1 ) . compileAndRunTest ( ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; }
synchronized void nObjDestroy ( long id ) { if ( ( mContext ) != 0 ) { rsnObjDestroy ( mContext , id ) ; } }
public void log ( java.lang.String log ) { if ( acceptLog ( log ) ) { mSdkLog.info ( " %1$s" , log ) ; } }
private com.android.se.security.ResponseApdu send ( com.android.se.security.CommandApdu cmdApdu ) throws java.io.IOException { byte [ ] response = mChannel.transmit ( cmdApdu.toBytes ( ) ) ; return new com.android.se.security.ResponseApdu ( response ) ; }
public void test_checkClientTrusted_02 ( ) throws java.lang.Exception { org.apache.harmony.xnet.tests.support.X509TrustManagerImpl xtm = new org.apache.harmony.xnet.tests.support.X509TrustManagerImpl ( ) ; java.security.cert.X509Certificate [ ] xcert = setInvalid ( ) ; try { xtm.checkClientTrusted ( xcert , "SSL" ) ; fail ( "CertificateException wasn't thrown" ) ; } catch ( java.security.cert.CertificateException expected ) { } }
boolean needFetch ( ) { if ( ( fetchTime ) == 0 ) { return true ; } long current = java.lang.System.currentTimeMillis ( ) ; return ( current - ( fetchTime ) ) > ( com.android.ddmlib.FileListingService.REFRESH_TEST ) ; }
public static byte $noinline$longAnd0xffToByte ( long value ) { return ( ( byte ) ( value & 255 ) ) ; }
public native void setInt ( java.lang.Object obj , int i ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public java.lang.String getClientName ( int pid ) { return mClientInfo.get ( pid ) ; }
public E peekFirst ( ) { return ( ( E ) ( elements [ head ] ) ) ; }
protected final void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; if ( ! ( isSupported ( ) ) ) return ; removePowerSaveModeWhitelist ( com.android.cts.net.hostside.TEST_APP2_PKG ) ; setAppIdle ( false ) ; turnBatteryOff ( ) ; registerBroadcastReceiver ( ) ; }
public int queryCallBarring ( int cbType ) throws android.os.RemoteException { return this . queryCallBarring ( cbType ) ; }
public static native int EVP_VerifyFinal ( long ctx , byte [ ] signature , int offset , int length , long key ) ;
public void testConnectWithNoDisconnectAndSingleExistingNetwork ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; executeAndValidateConnectSequence ( 0 , true , false ) ; }
public boolean showWarning ( java.lang.String message ) { java.lang.System.out.println ( ( "Warning: " + message ) ) ; return false ; }
public void test_SSL_do_handshake_NULL_SSL ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto.SSL_do_handshake ( org.conscrypt.NativeCryptoTest.NULL , null , null , 0 , false ) ; }
public void onPause ( ) { super . onPause ( ) ; }
public com.ibm.icu.impl.UResource.ArraySink getOrCreateArraySink ( com.ibm.icu.impl.UResource.Key key ) { return null ; }
public void test_entryCompatibility_compiletime ( ) { assertEquals ( java.util.Map.Entry.class , java.util.Hashtable.Entry.class ) ; }
public abstract java.lang.String getCookie ( java.lang.String url , boolean privateBrowsing ) ;
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface t ) throws java.lang.Exception { if ( needsCoverage ( t ) ) { long classId = com.android.jack.coverage.CodeCoverageSelector.computeClassID ( t ) ; t.addMarker ( new com.android.jack.coverage.CodeCoverageMarker ( classId ) ) ; } }
public static void computeClz ( android.renderscript.cts.TestClz.ArgumentsShortShort args ) { args.out = ( ( short ) ( ( java.lang.Integer.numberOfLeadingZeros ( ( ( args.inValue ) & 65535 ) ) ) - 16 ) ) ; }
public void copyFromUnchecked ( java.lang.Object array ) { try { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFromUnchecked" ) ; copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; } finally { android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; } }
public static void writeUint16 ( int i , java.io.OutputStream output ) throws java.io.IOException { output.write ( ( i > > > 8 ) ) ; output.write ( i ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "getConnectedDevices()" ) ; } return getDevicesMatchingConnectionStates ( new int [ ] { android.bluetooth.BluetoothProfile.STATE_CONNECTED } ) ; }
native boolean lutTest ( java.lang.String path , int X , int Y , int lutSize , byte [ ] input , byte [ ] input2 , byte [ ] output ) ;
public static long UShrLongInt ( ) { long lhs = - 9 ; int rhs = 2 ; return lhs > > > rhs ; }
public void tearDown ( ) throws java.lang.Exception { tearDownSdk ( ) ; super . tearDown ( ) ; }
static void inlinedForNull ( java.lang.Iterable < ? > it ) { if ( it != null ) { it.iterator ( ) ; throw new java.lang.Error ( "" ) ; } }
public int checkPermission ( java.lang.String permission , int pid , int uid ) { if ( permission == null ) { return android.content.pm.PackageManager.PERMISSION_DENIED ; } return checkComponentPermission ( permission , pid , uid , ( - 1 ) , true ) ; }
public void testLenientUrlToUriNul ( ) throws java.lang.Exception { testUrlToUriMapping ( " " , null , "%00" , "%00" , "%00" ) ; }
public abstract boolean getLoadsImagesAutomatically ( ) ;
public java.lang.Boolean isApplication ( ) { return true ; }
private static java.lang.Object invoke ( java.lang.reflect.Proxy proxy , java.lang.reflect.Method method , java.lang.Object [ ] args ) throws java.lang.Throwable { java.lang.reflect.InvocationHandler h = proxy.h ; return h.invoke ( proxy , method , args ) ; }
public void test001_3WithJill ( ) throws java.lang.Exception { com.android.jill.JillTestTools.checkStructureWithJill ( null , new java.io.File ( com.android.jill.AnnotationTest.ANNOTATION001_PATH , "Annotation2.java" ) , false ) ; }
synchronized int nFileA3DGetEntryByIndex ( long fileA3D , int index ) { validate ( ) ; return rsnFileA3DGetEntryByIndex ( mContext , fileA3D , index ) ; }
private void assertNoTombstone ( java.lang.String alias ) { assertTrue ( org.conscrypt.TrustedCertificateStore.isUser ( alias ) ) ; assertFalse ( file ( alias ) . exists ( ) ) ; }
public boolean isPlayerConnected ( ) { if ( ( mMediaBrowser ) == null ) { if ( com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG , "isPlayerConnected: mMediaBrowser = null!" ) ; return false ; } return mMediaBrowser.isConnected ( ) ; }
private static void writeInt ( @ com.android.annotations.NonNull java.io.FileOutputStream fos , int value ) throws java.io.IOException { java.nio.ByteBuffer b = java.nio.ByteBuffer.allocate ( 4 ) ; b.putInt ( value ) ; fos.write ( b.array ( ) ) ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( accepted ( clazz , runtimeVisibleAnnotationsAttribute ) ) { attributeVisitor.visitRuntimeVisibleAnnotationsAttribute ( clazz , field , runtimeVisibleAnnotationsAttribute ) ; } }
public java.util.Collection < V > values ( ) { java.util.Collection < V > vs = values ; if ( vs == null ) { vs = new Values ( ) ; values = vs ; } return vs ; }
public abstract void setCookie ( java.lang.String url , java.lang.String value , android.webkit.ValueCallback < java.lang.Boolean > callback ) ;
private void bindDataToCards ( com.android.contacts.quickcontact.QuickContactActivity.Cp2DataCardModel cp2DataCardModel ) { startInteractionLoaders ( cp2DataCardModel ) ; populateContactAndAboutCard ( cp2DataCardModel , true ) ; }
protected void renameResource ( @ com.android.annotations.NonNull java.lang.Object [ ] testData , @ com.android.annotations.NonNull java.lang.Object resource , boolean updateReferences , @ com.android.annotations.NonNull java.lang.String newName , @ com.android.annotations.NonNull java.lang.String expected ) throws java.lang.Exception { renameResource ( testData , resource , updateReferences , newName , expected , null ) ; }
protected void log ( java.lang.String s ) { if ( com.android.internal.telephony.ims.IsimUiccRecords.DBG ) android.util.Log.d ( com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG , ( "[ISIM] " + s ) ) ; }
public void stop ( ) { mRunning = false ; clearLinkProperties ( ) ; mNetlinkSocketObserver.clearNetlinkSocket ( ) ; }
public void error ( java.lang.Throwable t ) { log.error ( null , "error!" , t , null ) ; }
public final android.content.ContentProviderClient acquireContentProviderClient ( android.net.Uri uri ) { android.content.IContentProvider provider = acquireProvider ( uri ) ; if ( provider != null ) { return new android.content.ContentProviderClient ( this , provider , true ) ; } return null ; }
public void setAnonymousIdentity ( java.lang.String anonymousIdentity ) { setFieldValue ( android.net.wifi.WifiEnterpriseConfig.ANON_IDENTITY_KEY , anonymousIdentity ) ; }
public boolean startScan ( ) { try { mService.startScan ( null , null ) ; return true ; } catch ( android.os.RemoteException e ) { return false ; } }
public com.android.tools.r8.utils.AndroidApp.Builder addProgramFiles ( java.util.Collection < java.nio.file.Path > files ) throws java.io.IOException { for ( java.nio.file.Path file : files ) { addProgramFile ( file ) ; } return this ; }
private boolean verify ( java.lang.String host , java.security.cert.X509Certificate certificate ) { return java.net.InetAddress.isNumeric ( host ) ? verifyIpAddress ( host , certificate ) : verifyHostName ( host , certificate ) ; }
public java.lang.String getTargetHashString ( ) { if ( ( mTarget ) != null ) { return mTarget.hashString ( ) ; } return mProperties.getProperty ( ProjectProperties.PROPERTY_TARGET ) ; }
private static java.util.Properties createSystemProperties ( ) { java.util.Properties p = new java.lang.System.PropertiesWithNonOverrideableDefaults ( java.lang.System.unchangeableSystemProperties ) ; p.put ( "java.io.tmpdir" , "/tmp" ) ; return p ; }
public com.android.tools.lint.client.api.Configuration getConfiguration ( com.android.tools.lint.detector.api.Project project ) { return this . getConfiguration ( this , project ) ; }
private void assertChecksumEquals ( int expected , short actual ) { org.junit.Assert.assertEquals ( java.lang.Integer.toHexString ( expected ) , java.lang.Integer.toHexString ( ( actual & 65535 ) ) ) ; }
java.lang.String getBuildToolsVersion ( ) { return getBuildTools ( ) . getRevision ( ) . toString ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.doTest ( ) ; }
public static com.android.jack.Options buildCommandLineArgs ( @ javax.annotation.Nonnull java.io.File [ ] filesOrSourcelists ) throws java.io.IOException { return com.android.jack.TestTools.buildCommandLineArgs ( null , filesOrSourcelists ) ; }
private static boolean checkHardwareTypeSkipTest ( java.lang.String hardwareTypeString ) { return ( hardwareTypeString.contains ( "android.hardware.type.watch" ) ) || ( hardwareTypeString.contains ( "android.hardware.type.television" ) ) ; }
private static java.lang.String escapeXml ( @ com.android.annotations.NonNull java.lang.String unescaped ) { return com.google.common.xml.XmlEscapers.xmlAttributeEscaper ( ) . escape ( unescaped ) ; }
public void testBroken ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/broken.xml:6: Warning: Unexpected text found in layout file: \"ImageButton android:id=\"@+id/android_logo2\" android:layout_width=\"wrap_content\" android:layout_heigh...\" [ExtraText]\n" + ( ( ( " <Button android:text=\"Button\" android:id=\"@+id/button2\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"></Button>\n" + " ^\n" ) + "0 errors, 1 warnings\n" ) + "" ) ) , lintProject ( "res/layout/broken.xml" ) ) ; }
public void exit ( ) { sendBackgroundScanFailedToAllAndClear ( WifiScanner.REASON_UNSPECIFIED , "Scan was interrupted" ) ; mScannerImpl.cleanup ( ) ; }
public java.lang.String getMessage ( ) { return ( ( "Missing requirement for Java source version " + ( javaVersion.toString ( ) ) ) + " support: " ) + ( getCause ( ) . getMessage ( ) ) ; }
abstract java.lang.Object socketGetOption ( int opt ) throws java.net.SocketException ;
private void releaseWakeLock ( ) { if ( ( mPartialWakeLock ) != null ) { synchronized ( mPartialWakeLock ) { if ( mPartialWakeLock.isHeld ( ) ) { log ( "releaseWakeLock" ) ; mPartialWakeLock.release ( ) ; } } } }
public void reset ( ) { android.autofillservice.cts.AutoFillServiceTestCase.sReplier.reset ( ) ; }
public void testRefactor1_noreferences ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT , false , false , "my.pkg.name" , ( "CHANGES:\n" + ( "-------\n" + "* Rename package 'com.example.refactoringtest' to 'my.pkg.name'" ) ) , false ) ; }
private android.bluetooth.BluetoothGattService getService ( ) { if ( ( mBluetoothGatt ) == null ) return null ; android.bluetooth.BluetoothGattService service = mBluetoothGatt.getService ( com.android.cts.verifier.bluetooth.BleClientService.SERVICE_UUID ) ; if ( service == null ) { showMessage ( "Service not found" ) ; return null ; } return service ; }
public void streamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) throws android.os.RemoteException { listener.streamingServicesUpdated ( services ) ; }
public java.lang.String getName ( ) { return name ; }
public void err ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { logger.info ( "[SDK Manager] %s" , line ) ; } }
static void native_rewind ( long nPath ) { android.graphics.Path_Delegate.native_reset ( nPath ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . createCallSession ( sessionId , profile , listener ) ; } }
protected java.io.File getFile ( java.io.File baseDir ) { return new java.io.File ( baseDir , myPath ) ; }
public java.lang.String insnArgString ( com.android.dx.dex.code.DalvInsn insn ) { com.android.dx.rop.code.RegisterSpecList regs = com.android.dx.dex.code.form.Form35c.explicitize ( insn.getRegisters ( ) ) ; return ( ( regListString ( regs ) ) + ", " ) + ( insn.cstString ( ) ) ; }
public void onStateChange ( com.android.incallui.InCallPresenter.InCallState oldState , com.android.incallui.InCallPresenter.InCallState newState , com.android.incallui.call.CallList callList ) { com.android.dialer.common.LogUtil.d ( "StatusBarNotifier.onStateChange" , "%s->%s" , oldState , newState ) ; updateNotification ( ) ; }
public final void libToExe ( @ javax.annotation.Nonnull java.io.File in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception { libToExe ( new java.io.File [ ] { in } , out , zipFile ) ; }
public void onClick ( android.view.View v ) { if ( ( speedDialUiItem.defaultChannel ( ) ) != null ) { listener.onClick ( speedDialUiItem.defaultChannel ( ) ) ; } else { listener.onAmbiguousContactClicked ( speedDialUiItem ) ; } }
public static synchronized java.util.List < java.security.Provider > getProvidersList ( ) { return new java.util.ArrayList < java.security.Provider > ( org.apache.harmony.security.fortress.Services.providers ) ; }
public void setWarnIfHeld ( java.lang.Object warnIfHeld ) { if ( ( mInstaller ) != null ) { mInstaller.setWarnIfHeld ( warnIfHeld ) ; } mWarnIfHeld = warnIfHeld ; }
public int getSpi ( ) { return mSpi ; }
public void f ( java.lang.String s ) { c.substring ( 0 ) . toString ( ) ; }
public void setResult ( java.lang.String resultFormat , java.lang.Object ... args ) { mAutomaticallyCloseOnTaskCompletion = false ; super . setResult ( resultFormat , args ) ; }
private void display ( java.lang.String format , java.lang.Object ... args ) { mMonitor.log ( format , args ) ; }
public static int getHeaderSize ( ) { int headerSize = ( ( ( 8 * ( com.android.jack.dx.dex.SizeOf.UBYTE ) ) + ( com.android.jack.dx.dex.SizeOf.UINT ) ) + ( com.android.jack.dx.dex.SizeOf.SIGNATURE ) ) + ( 20 * ( com.android.jack.dx.dex.SizeOf.UINT ) ) ; return headerSize ; }
private void assertVerifiedForEach ( java.lang.String apkFilenamePatternInResources , java.lang.String [ ] args ) throws java.lang.Exception { assertVerifiedForEach ( apkFilenamePatternInResources , args , null , null ) ; }
public void testAsinPiF32 ( ) { doF32 ( 10 , 5 ) ; }
public double timeExpm1 ( int reps ) { double result = d ; for ( int rep = 0 ; rep < reps ; ++ rep ) { result = java.lang.Math.expm1 ( d ) ; } return result ; }
public void testRemoveTransportModeTransform ( ) throws java.lang.Exception { android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromSocket ( new java.net.Socket ( ) ) ; mIpSecService.removeTransportModeTransforms ( pfd ) ; org.mockito.Mockito.verify ( mMockNetd ) . ipSecRemoveTransportModeTransform ( pfd.getFileDescriptor ( ) ) ; }
public void onDialerCallSessionModificationStateChange ( ) { if ( ( mDialerCall.getVideoTech ( ) . getSessionModificationState ( ) ) == ( com.android.incallui.videotech.utils.SessionModificationState.NO_REQUEST ) ) { cleanup ( ) ; updateNotification ( ) ; } }
private native int genLibs ( java.lang.String working_dir , java.lang.String sysroot ) ;
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { switch ( 2147483647 ) { case 2147483647 : java.lang.System.out.println ( "good" ) ; break ; default : throw new java.lang.AssertionError ( ) ; } }
protected abstract void updateData ( ) ;
public static long $noinline$NotNot1 ( long arg ) { return ~ ( ~ arg ) ; }
public void onMetadataChanged ( android.media.MediaMetadata metadata ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , "onMetadataChanged" ) ; updateCurrentMediaState ( false ) ; }
private void handleRadioProxyExceptionForRR ( com.android.internal.telephony.RILRequest rr , java.lang.String caller , java.lang.Exception e ) { riljLoge ( caller , e ) ; resetProxyAndRequestList ( ) ; }
public synchronized android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols ( ) { return ( ( android.icu.text.DecimalFormatSymbols ) ( symbols.clone ( ) ) ) ; }
public void recordExistingFile ( @ com.android.annotations.NonNull java.lang.String absFilePath ) { recordExistingFile ( absFilePath , 0 , ( ( byte [ ] ) ( null ) ) ) ; }
public void setSentDate ( java.util.Date sentDate ) throws com.android.voicemail.impl.mail.MessagingException { setHeader ( "Date" , com.android.voicemail.impl.mail.internet.MimeMessage.DATE_FORMAT.format ( sentDate ) ) ; this . sentDate = sentDate ; }
public void loggedRun ( ) { if ( mIsPending ) { android.telecom.Log.i ( this , "Call filtering has timed out." ) ; android.telecom.Log.addEvent ( mCall , LogUtils.Events.FILTERING_TIMED_OUT ) ; mListener.onCallFilteringComplete ( mCall , mResult ) ; mIsPending = false ; } }
public void ignore ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { fail ( "Not supported in tests." ) ; }
public boolean isPageComplete ( ) { if ( ! ( mShown ) ) { return false ; } return super . isPageComplete ( ) ; }
public java.io.File getInstallFolder ( java.lang.String osSdkRoot , com.android.sdklib.SdkManager sdkManager ) { return new java.io.File ( osSdkRoot , com.android.sdklib.SdkConstants.FD_TOOLS ) ; }
final long getLongUnchecked ( int i ) { return getLong ( ix ( i ) ) ; }
