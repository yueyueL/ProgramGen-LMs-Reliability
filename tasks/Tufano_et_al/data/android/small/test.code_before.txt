static android.icu.impl.TimeZoneNamesImpl.ZNamesLoader forMetaZoneNames ( ) { return new android.icu.impl.TimeZoneNamesImpl.ZNamesLoader ( android.icu.impl.TimeZoneNamesImpl.ZNamesLoader.NUM_META_ZONE_NAMES ) ; }
public android.net.wifi.WifiConfiguration buildWifiConfig ( java.lang.String uriString , java.lang.String mimeType , byte [ ] data ) { try { return mService.buildWifiConfig ( uriString , mimeType , data ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
com.google.common.collect.ImmutableSet < com.google.common.collect.Multiset.Entry < E > > createEntrySet ( ) { throw new java.lang.AssertionError ( "should never be called" ) ; }
public com.android.builder.model.AndroidProject executeAndReturnModel ( boolean emulateStudio_1_0 , java.lang.String ... tasks ) { return execute ( java.util.Collections.< java.lang.String > emptyList ( ) , true , emulateStudio_1_0 , tasks ) ; }
public void testFlagEManifestA ( ) { installFromRawResource ( "install.apk" , R.raw.install_loc_auto , PackageManager.INSTALL_EXTERNAL , true , false , ( - 1 ) , PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL ) ; }
public static native byte [ ] SSL_SESSION_session_id ( int sslSessionNativePointer ) ;
native boolean nIncLoadSO ( ) ;
public static int IntSubtraction ( ) { int a ; int b ; int c ; a = 6 ; b = 2 ; c = a - b ; return c ; }
public void enter ( ) { cleanup ( ) ; }
public void removeProfile ( com.android.bluetooth.btservice.ProfileService profile ) { android.os.Message m = mHandler.obtainMessage ( com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED , profile ) ; mHandler.sendMessage ( m ) ; }
static void asInts ( byte [ ] x , int [ ] z ) { org.bouncycastle.crypto.util.Pack.bigEndianToInt ( x , 0 , z ) ; }
protected void onStop ( ) { super . onStop ( ) ; closeAccessory ( ) ; }
public java.util.Collection < java.lang.Class < ? extends com.android.jack.api.JackConfig > > getSupportedConfigs ( ) { return com.android.jack.api.impl.JackProviderImpl.map.keySet ( ) ; }
public void addRegistrationListener ( int sessionId , com.android.ims.internal.IImsRegistrationListener listener ) { }
public void copy1DRangeFrom ( int off , int count , byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFrom" ) ; validateIsInt8 ( ) ; copy1DRangeFromUnchecked ( off , count , d ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
android.net.ip.IpReachabilityMonitor makeMonitor ( ) { return new android.net.ip.IpReachabilityMonitor ( "fake0" , 1 , mHandler , mLog , mCallback , null , mDependencies ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( "EnumConstantLocater{" + "enumTypeLocater=" ) + ( enumTypeLocater ) ) + ", constantName='" ) + ( constantName ) ) + '\'' ) + '}' ; }
public int hashCode ( ) { int result = 0 ; for ( int i = 0 ; i < ( original.length ) ; ++ i ) { result ^= original [ i ] . hashCode ( ) ; } return result ; }
public static void wtf ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { java.lang.String msg = android.telecom.Log.buildMessage ( prefix , format , args ) ; android.util.Log.wtf ( android.telecom.Log.TAG , msg , new java.lang.IllegalStateException ( msg ) ) ; }
public static float abs ( float a ) { return a <= 0.0F ? 0.0F - a : a ; }
private static com.android.build.SplitOutput getUniversalOutput ( ) { return new com.android.ide.common.build.SplitOutputMatcherTest.FakeSplitOutput ( null , null ) ; }
static byte $opt$ShortToByte ( short a ) { return ( ( byte ) ( a ) ) ; }
public void removeRecordedProgram ( com.android.tv.dvr.RecordedProgram scheduledRecording ) { mRecordedPrograms.remove ( scheduledRecording.getId ( ) ) ; notifyRecordedProgramsRemoved ( scheduledRecording ) ; }
public synchronized void close ( ) throws android.system.ErrnoException { if ( ( address ) != 0 ) { Libcore.os.munmap ( address , size ) ; address = 0 ; } }
public static < V > com.google.common.util.concurrent.ListenableFuture < java.util.List < V > > allAsList ( com.google.common.util.concurrent.ListenableFuture < ? extends V > ... futures ) { return new com.google.common.util.concurrent.Futures.ListFuture < V > ( com.google.common.collect.ImmutableList.copyOf ( futures ) , true , com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor ( ) ) ; }
private void enforceReadPhoneStatePermission ( java.lang.String fn ) { if ( ( checkCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PHONE_STATE , fn ) ; } }
public com.android.jack.ir.ast.JAnnotation getType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pack , @ javax.annotation.Nonnull java.lang.String simpleName ) { return pack.getPhantomAnnotation ( simpleName ) ; }
public native void setShort ( java.lang.Object object , short value ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata getMetadataForRegion ( java.lang.String regionCode ) { synchronized ( regionToMetadataMap ) { if ( ! ( regionToMetadataMap.containsKey ( regionCode ) ) ) { loadMetadataFromFile ( regionCode , 0 ) ; } } return regionToMetadataMap.get ( regionCode ) ; }
public com.android.ide.common.resources.configuration.FolderConfiguration getConfiguration ( ) { java.lang.String qualifier = getQualifiers ( ) ; if ( qualifier.isEmpty ( ) ) { return new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; } return com.android.ide.common.resources.configuration.FolderConfiguration.getConfigFromQualifiers ( com.google.common.base.Splitter.on ( '-' ) . split ( qualifier ) ) ; }
protected void connect ( java.net.InetAddress address , int port ) throws java.net.SocketException { connect0 ( address , port ) ; connectedAddress = address ; connectedPort = port ; connected = true ; }
public void sendMessage ( @ android.annotation.NonNull java.lang.Object peerHandle , int messageId , @ android.annotation.Nullable byte [ ] message ) { sendMessage ( peerHandle , messageId , message , 0 ) ; }
public void visitTableSwitchInsn ( int min , int max , org.objectweb.asm.Label dflt , org.objectweb.asm.Label ... labels ) { printer.visitTableSwitchInsn ( min , max , dflt , labels ) ; printTypeOfOperandStackTop ( ) ; super . visitTableSwitchInsn ( min , max , dflt , labels ) ; }
public static void computeMin ( android.renderscript.cts.TestMin.ArgumentsCharCharChar args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( byte ) ( java.lang.StrictMath.min ( args.inV1 , args.inV2 ) ) ) ; }
public void testRemainderF32 ( ) { script_f32 = new android.renderscript.cts.ScriptC_remainder_f32 ( mRS , mRes , R.raw.remainder_f32 ) ; android.renderscript.cts.ScriptField_remainder_f32 in = new android.renderscript.cts.ScriptField_remainder_f32 ( mRS , INPUTSIZE ) ; mIn = in.getAllocation ( ) ; doF32 ( 1193592 , 0 ) ; }
public int poll ( libcore.io.StructPollfd [ ] fds , int timeoutMs ) throws libcore.io.ErrnoException { return os.poll ( fds , timeoutMs ) ; }
public native boolean setLastModifiedTime ( java.io.File f , long time ) ;
public void resetDownloadKnowledge ( java.lang.String appName , android.telephony.mbms.DownloadRequest downloadRequest ) throws android.os.RemoteException { }
public void enableDiscovery ( com.android.nfc.NfcDiscoveryParameters params , boolean restart ) { doEnableDiscovery ( params.getTechMask ( ) , params.shouldEnableLowPowerDiscovery ( ) , params.shouldEnableReaderMode ( ) , restart ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; }
public void testAdd3 ( ) { java.util.concurrent.CopyOnWriteArraySet full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; full.add ( three ) ; assertTrue ( full.contains ( three ) ) ; }
public org.objectweb.asm.tree.AbstractInsnNode clone ( final java.util.Map < org.objectweb.asm.tree.LabelNode , org.objectweb.asm.tree.LabelNode > labels ) { return new org.objectweb.asm.tree.JumpInsnNode ( opcode , clone ( label , labels ) ) ; }
public void testDisconnectCause ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } org.junit.Assert.assertThat ( mCall.getDetails ( ) . getDisconnectCause ( ) , org.hamcrest.CoreMatchers.is ( android.telecom.DisconnectCause.class ) ) ; }
public final double getDouble ( int index ) { checkNotFreed ( ) ; checkIndex ( index , SizeOf.DOUBLE ) ; return java.lang.Double.longBitsToDouble ( this . block.peekLong ( ( ( offset ) + index ) , order ) ) ; }
protected java.io.File downloadFile ( com.android.sdklib.internal.repository.Archive archive , java.lang.String osSdkRoot , com.android.sdklib.internal.repository.ITaskMonitor monitor , boolean forceHttp ) { java.io.File file = mDownloadMap.get ( archive ) ; this . mFile.recordExistingFile ( file ) ; return file ; }
public void requestNetwork ( android.net.NetworkRequest request , int timeoutMs , android.net.ConnectivityManager.NetworkCallback networkCallback ) { android.net.ConnectivityManager.checkTimeout ( timeoutMs ) ; int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; requestNetwork ( request , networkCallback , timeoutMs , legacyType , getDefaultHandler ( ) ) ; }
public void setBounds ( int startInd , int endInd ) { if ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG ) { android.util.Log.d ( STATE_TAG , ( ( ( "startInd " + startInd ) + " endInd " ) + endInd ) ) ; } mStartInd = startInd ; mEndInd = endInd ; }
public static short $noinline$floatToIntToShort ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( value ) ) ; }
public java.util.Set < java.lang.String > getApplicationFilters ( ) { return ( include ) == null ? new java.util.HashSet < java.lang.String > ( ) : include ; }
public int hashCode ( ) { return getHandle ( ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { mWipeData = wipeButton.getSelection ( ) ; }
native void rsnScriptForEach ( long con , long id , int slot , long ain , long aout , byte [ ] params ) ;
public static int Xor0 ( int arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg ^ 0 ; }
private static byte [ ] generateAdditionalAttributes ( com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig ) { if ( ( signerConfig.mSigningCertificateLineage ) == null ) { return new byte [ 0 ] ; } throw new java.lang.UnsupportedOperationException ( ) ; }
public static com.android.ide.eclipse.ddms.DdmsPlugin.IDebugLauncher getRunningAppDebugLauncher ( ) { return com.android.ide.eclipse.ddms.DdmsPlugin.sRunningAppDebugLauncher ; }
public android.net.wifi.nan.LvBufferUtils.LvConstructor putByte ( byte b ) { mTlvImpl.putByte ( 0 , b ) ; return this ; }
public static void v ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.VERBOSE ) { android.util.Log.v ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public void loadBoundProfilePackage ( java.lang.String callingPackage , byte [ ] boundProfilePackage , com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback callback ) { checkCallingPackage ( callingPackage ) ; }
public void notifyChange ( android.net.Uri uri , android.database.ContentObserver observer , boolean syncToNetwork , int userHandle ) { ( notifyChangeCount ) ++ ; }
public void handshakeCompleted ( ) { if ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.DEBUG ) { java.lang.System.out.println ( ( ( "ssl=0x" + ( java.lang.Integer.toString ( sslNativePointer , 16 ) ) ) + " handshakeCompleted" ) ) ; } this . handshakeCompletedCalled = true ; }
public com.android.build.gradle.integration.common.fixture.GradleTestProject create ( ) { return new com.android.build.gradle.integration.common.fixture.GradleTestProject ( name , testProject , experimentalMode , ( experimentalMode ? com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_EXP_TEST_VERSION : com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_TEST_VERSION ) , captureStdOut ) ; }
public void testGetNonStartedScheduledRecordings ( ) { com.android.tv.dvr.ScheduledRecording recording = mDvrDataManager.addScheduledRecordingInternal ( createNewScheduledRecordingStartingNow ( ) ) ; java.util.List < com.android.tv.dvr.ScheduledRecording > result = mDvrDataManager.getNonStartedScheduledRecordings ( ) ; android.test.MoreAsserts.assertContentsInAnyOrder ( result , recording ) ; }
void putUnchecked ( int pos , int [ ] dst , int srcOffset , int length ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void reloadFromXmlNode ( org.w3c.dom.Node xml_node ) { com.android.ide.eclipse.adt.internal.editors.AndroidEditor editor = getEditor ( ) ; clearContent ( ) ; setEditor ( editor ) ; if ( xml_node != null ) { setXmlDocument ( xml_node.getOwnerDocument ( ) ) ; } loadFromXmlNode ( xml_node ) ; }
public void onRemovingChildren ( @ com.android.annotations.NonNull java.util.List < com.android.ide.common.api.INode > deleted , @ com.android.annotations.NonNull com.android.ide.common.api.INode parent ) { super . onRemovingChildren ( deleted , parent ) ; com.android.ide.common.layout.grid.GridModel grid = com.android.ide.common.layout.grid.GridModel.get ( mRulesEngine , parent , null ) ; grid.onDeleted ( deleted ) ; }
public void test_until_TemporalUnit_nullUnit ( ) { TEST_12345_123456789.until ( TEST_12345_123456789 , null ) ; }
public < A extends java.lang.annotation.Annotation > A getAnnotation ( java.lang.Class < A > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return getAnnotationNative ( annotationType ) ; }
public void invokeOemRilRequestStrings ( java.lang.String [ ] strings , android.os.Message response ) { if ( response != null ) { android.os.AsyncResult.forMessage ( response ) . result = strings ; response.sendToTarget ( ) ; } }
public void onClick ( android.view.View v ) { mPrivateHandler.removeCallbacks ( mZoomControlRunnable ) ; mPrivateHandler.postDelayed ( mZoomControlRunnable , android.webkit.WebView.ZOOM_CONTROLS_TIMEOUT ) ; zoomScrollOut ( ) ; }
public void testTranslatedArrays ( ) throws java.lang.Exception { TranslationDetector.COMPLETE_REGIONS = true ; assertEquals ( "No warnings." , lintProject ( "res/values/translatedarrays.xml" , "res/values-cs/translatedarrays.xml" ) ) ; }
private void debugLog ( java.lang.String msg ) { if ( com.android.bluetooth.btservice.AdapterState.DBG ) { android.util.Log.d ( com.android.bluetooth.btservice.AdapterState.TAG , msg ) ; } }
public static native double hypot ( double x , double y ) ;
void expect ( java.lang.String rules , java.lang.String source , java.lang.String expectedResult ) { expect ( rules , source , expectedResult , null ) ; }
public boolean contains ( java.lang.String key ) { return contains ( key , ( - 1 ) ) ; }
public native void set ( java.lang.Object object , java.lang.Object value ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public static short charToDoubleToShort ( char value ) { return ( ( short ) ( ( double ) ( value ) ) ) ; }
public static byte checkedCast ( long value ) { com.google.common.base.Preconditions.checkArgument ( ( ( value > > ( java.lang.Byte.SIZE ) ) == 0 ) , "out of range: %s" , value ) ; return ( ( byte ) ( value ) ) ; }
public abstract boolean handleChangedGeneratedJavaFile ( org.eclipse.core.resources.IFolder currentSourceFolder , org.eclipse.core.resources.IFile file , java.util.List < org.eclipse.core.runtime.IPath > sourceFolders ) ;
public static boolean isCleartextTrafficPermitted ( ) { return libcore.net.NetworkSecurityPolicy.cleartextTrafficPermitted ; }
final void putFloat ( int offset , float value ) { sun.nio.ch.NativeObject.unsafe.putFloat ( ( offset + ( address ) ) , value ) ; }
public java.lang.String getTypeDescription ( ) { return "a list of dependency android data in the format " + ( "resources[#resources]:assets[#assets]:manifest:r.txt" + "[,resources[#resources]:assets[#assets]:manifest:r.txt]" ) ; }
public void test1 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "res/values-pl/plurals2.xml:3: Error: For locale \"pl\" (Polish) the following quantities should also be defined: many [MissingQuantity]\n" + " <plurals name=\"numberOfSongsAvailable\">\n" ) + " ^\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "res/values/plurals.xml" , "res/values/plurals2.xml" , "res/values-pl/plurals2.xml" ) ) ; }
public int getCompilerSubReleaseCode ( ) { return 8 ; }
public void addFailure ( junit.framework.Test test , junit.framework.AssertionFailedError error ) { java.lang.System.out.println ( java.lang.String.format ( "failure:%s" , stringify ( error ) ) ) ; }
public void actionPerformed ( java.awt.event.ActionEvent e ) { updateCheckboxes ( ) ; }
private void handleChannelChanged ( ) { if ( mStarted ) { if ( needToStop ( ) ) { stop ( ) ; } } else { start ( ) ; } }
static float $opt$ShortToFloat ( short a ) { return ( ( float ) ( a ) ) ; }
public void registrationProgressing ( ) { if ( com.android.ims.ImsManager.DBG ) { com.android.ims.ImsManager.log ( "registrationProgressing ::" ) ; } if ( ( mListener ) != null ) { mListener.onImsProgressing ( ) ; } }
public java.lang.String installId ( ) { return com.android.sdklib.internal.repository.packages.PlatformToolPackage.INSTALL_ID ; }
public static com.google.gct.testing.CloudResultsAdapter getCloudResultsAdapter ( java.lang.String testRunId ) { return com.google.gct.testing.GoogleCloudTestingConfigurationFactoryImpl.testRunIdToCloudResultsAdapter.get ( testRunId ) ; }
public void testVroot ( ) throws java.lang.Exception { assertTrue ( ( "Device is vulnerable to CVE-2013-6282. Please apply security patch at " + ( ( "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/" + "commit/arch/arm/include/asm/uaccess.h?id=" ) + "8404663f81d212918ff85f493649a7991209fa04" ) ) , android.security.cts.NativeCodeTest.doVrootTest ( ) ) ; }
java.io.File getOutputFile ( ) ;
public void visitBlock ( com.android.dx.cf.code.BasicBlock b ) { reachableLabels.add ( b.getLabel ( ) ) ; }
public void onConnectionServiceChanged ( com.android.server.telecom.Call call , com.android.server.telecom.ConnectionServiceWrapper oldService , com.android.server.telecom.ConnectionServiceWrapper newService ) { updateCall ( call ) ; }
public void setTrace ( @ com.android.annotations.NonNull com.android.tools.perflib.vmtrace.VmTraceData traceData , @ com.android.annotations.NonNull java.lang.String threadName , com.android.tools.perflib.vmtrace.ClockType renderClockType ) { mTraceData = traceData ; displayThread ( threadName ) ; }
public static java.lang.String getDialogTitle ( com.android.internal.location.GpsNetInitiatedHandler.GpsNiNotification notif ) { return com.android.internal.location.GpsNetInitiatedHandler.getNotifTitle ( notif ) ; }
com.android.sched.util.location.Location getVFileLocation ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull java.lang.String name ) { return vfs.getVFileLocation ( parent , name ) ; }
public int setProvisionedValue ( int item , int value ) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.SUCCESS ; }
public com.android.ims.internal.IImsCallSession createCallSession ( com.android.ims.ImsCallProfile profile ) throws android.os.RemoteException { synchronized ( mLock ) { com.android.ims.internal.ImsCallSession s = this . createCallSession ( profile ) ; return s != null ? s.getSession ( ) : null ; } }
public void visitMethodrefConstant ( proguard.optimize.Clazz clazz , proguard.classfile.constant.MethodrefConstant methodrefConstant ) { recursive = targetMethod.equals ( methodrefConstant.referencedMember ) ; }
public void verifyParcelWithoutPolicyUpdate ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; policy.policyUpdate = null ; android.net.wifi.hotspot2.pps.PolicyTest.verifyParcel ( policy ) ; }
public void factory_ofEpochDay_belowMin ( ) { java.time.LocalDate.ofEpochDay ( ( ( MIN_VALID_EPOCHDAYS ) - 1 ) ) ; }
java.lang.String toGenericString ( ) { return toGenericStringHelper ( ) ; }
public android.hardware.cts.helpers.SensorStats getStats ( ) { return mOperation.getStats ( ) ; }
private void onCall ( int call ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CALL ) ; event.valueInt = call ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
com.google.devtools.common.options.OptionsData.ExpansionData getExpansionDataForField ( java.lang.reflect.Field field ) { com.google.devtools.common.options.OptionsData.ExpansionData result = expansionDataForFields.get ( field ) ; return result != null ? result : com.google.devtools.common.options.OptionsData.EMPTY_EXPANSION_DATA ; }
private static com.android.sdklib.repository.FullRevision parseRevisionSilently ( java.lang.String versionString ) { try { return com.android.sdklib.repository.FullRevision.parseRevision ( versionString ) ; } catch ( java.lang.Throwable t ) { return null ; } }
public long queryCapabilities ( ) throws android.os.RemoteException { return this . queryCapabilities ( ) . mCapabilities ; }
public void testFindView_Ambiguous ( ) { android.view.View root = setUpViewHierarchy ( ) ; try { android.support.test.espresso.assertion.PositionAssertions.findView ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.widget.TextView.class ) , root ) ; } catch ( android.support.test.espresso.AmbiguousViewMatcherException expected ) { return ; } fail ( "AmbiguousViewMatcherException is expected." ) ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > getAllModels ( ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection ) ; } finally { connection.close ( ) ; } }
public void testRefactor2 ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.renamepackage.TEST_PROJECT2 , "my.pkg.name" , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "[x] MyFragment.java - /testRefactor2/src/com/example/refactoringtest/MyFragment.java\n" ) + " @@ -3 +3\n" ) + " + import my.pkg.name.R;\n" ) + "\n" ) + "\n" ) + "[x] MainActivity.java - /testRefactor2/src/com/example/refactoringtest/MainActivity.java\n" ) + " @@ -7 +7\n" ) + " + import my.pkg.name.R;\n" ) + "\n" ) + "\n" ) + "[x] CustomView1.java - /testRefactor2/src/com/example/refactoringtest/CustomView1.java\n" ) + " @@ -5 +5\n" ) + " + import my.pkg.name.R;\n" ) + "\n" ) + "\n" ) + "[x] Make Manifest edits - /testRefactor2/AndroidManifest.xml\n" ) + " @@ -3 +3\n" ) + " - package=\"com.example.refactoringtest\"\n" ) + " + package=\"my.pkg.name\"\n" ) + " @@ -25 +25\n" ) + " - android:name=\".MainActivity2\"\n" ) + " + android:name=\"com.example.refactoringtest.MainActivity2\"" ) ) ) ; }
public long getLastModified ( ) { assert ( file ) != null ; return file.lastModified ( ) ; }
public void run ( ) { mScrollView.fling ( 2000 ) ; }
public void tearDown ( ) { mHandlerThread.quitSafely ( ) ; }
public com.google.common.collect.ImmutableList < com.android.dialer.precall.PreCallAction > getActions ( ) { return com.google.common.collect.ImmutableList.of ( new com.android.dialer.precall.impl.CallingAccountSelector ( ) , new com.android.dialer.precall.impl.AssistedDialAction ( ) ) ; }
public final double getDouble ( int index ) { checkIndex ( index , SizeOf.DOUBLE ) ; return java.lang.Double.longBitsToDouble ( this . block.peekLong ( ( ( offset ) + index ) , order ) ) ; }
public com.android.sched.util.codec.OutputStreamCodec allowStandard ( ) { this . allowStandard = true ; return this ; }
synchronized long nScriptFieldIDCreate ( long sid , int slot ) { validate ( ) ; return rsnScriptFieldIDCreate ( mContext , sid , slot ) ; }
public java.lang.String telephonyGetCallState ( ) { return telephonyGetCallStateForSubscription ( android.telephony.SubscriptionManager.getDefaultSubId ( ) ) ; }
public void ensureCapacity ( int minCapacity ) { int minExpand = ( ( elementData ) != ( java.util.ArrayList.EMPTY_ELEMENTDATA ) ) ? 0 : java.util.ArrayList.DEFAULT_CAPACITY ; if ( minCapacity > minExpand ) { ensureExplicitCapacity ( minCapacity ) ; } }
private boolean isLive ( ) { return ( markerRef.get ( ) ) != null ; }
public java.lang.String getAbi ( ) { return com.android.compatibility.common.util.AbiUtils.parseAbi ( mId ) ; }
native long rsnScriptFieldIDCreate ( long con , long sid , int slot ) ;
public com.google.dexmaker.stock.ProxyBuilder < T > dexCache ( java.io.File dexCache ) { this . dexCache = dexCache ; return this ; }
public java.util.Iterator < com.android.jack.ir.ast.JMethod > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) throws java.lang.Exception { return declaredType.getCallables ( ) . iterator ( ) ; }
public boolean startRinging ( ) { return mRinger.startRinging ( mForegroundCall ) ; }
public void testFailOnClearedUpClientId ( ) throws java.lang.Exception { int clientId = doConnect ( ) ; mDut.disconnect ( clientId , mBinderMock ) ; org.mockito.Mockito.verify ( mNanStateManagerMock ) . disconnect ( clientId ) ; validateInternalStateCleanedUp ( clientId ) ; mDut.disconnect ( clientId , mBinderMock ) ; }
public void testInvalidReferenceValidator ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String input = "" + ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <permission android:name=\"permissionOne\" " ) + " android:permissionGroup=\"permissionGroupOne\"/>\n" ) + "\n" ) + " <permission-group android:name=\"permissionGroupXXX\" " ) + " android:label=\"@res/foo\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument xmlDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "testInvalidReferenceValidator" ) , input ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mILogger ) ; com.android.manifmerger.PostValidator.validate ( xmlDocument , mergingReportBuilder ) ; for ( com.android.manifmerger.MergingReport.Record record : mergingReportBuilder.build ( ) . getLoggingRecords ( ) ) { java.util.logging.Logger.getAnonymousLogger ( ) . severe ( record.toString ( ) ) ; if ( ( ( record.getSeverity ( ) ) == ( MergingReport.Record.Severity.ERROR ) ) && ( record.toString ( ) . contains ( "PostValidatorTest#testInvalidReferenceValidator:6 " ) ) ) { return ; } } fail ( "No reference to faulty PostValidatorTest#testInvalidReferenceValidator:6 found" ) ; }
private final native void init ( ) ;
public void execute ( @ com.android.annotations.NonNull java.util.List < java.lang.String > arguments , java.lang.String ... tasks ) { execute ( arguments , false , false , tasks ) ; }
public void respondToRttRequest ( int id , boolean accept ) { try { mAdapter.respondToRttRequest ( id , accept ) ; } catch ( android.os.RemoteException ignored ) { } }
public void onIntrData ( byte reportId , byte [ ] data ) { android.util.Log.d ( android.bluetooth.BluetoothHidDeviceCallback.TAG , ( "onIntrData: reportId=" + reportId ) ) ; }
public int exist ( java.lang.String name ) throws android.os.RemoteException ;
public void run ( ) { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setCustomTitle ( view ) ; mDialog = mBuilder.show ( ) ; }
private static void doFollowReferencesTestNonRoot ( java.util.ArrayList < java.lang.Object > tmpStorage ) { Main.Verifier v = new Main.Verifier ( ) ; Main.tagClasses ( v ) ; Main.A a = Main.createTree ( v ) ; tmpStorage.add ( a ) ; v.add ( "0@0" , "1@1000" ) ; Main.doFollowReferencesTestImpl ( null , java.lang.Integer.MAX_VALUE , ( - 1 ) , null , v , null ) ; Main.doFollowReferencesTestImpl ( a.foo , java.lang.Integer.MAX_VALUE , ( - 1 ) , null , v , "2@1000" ) ; tmpStorage.clear ( ) ; }
static void asLongs ( byte [ ] x , long [ ] z ) { org.bouncycastle.crypto.util.Pack.bigEndianToLong ( x , 0 , z ) ; }
void addResourceValue ( java.lang.String resType , com.android.ide.common.rendering.api.ResourceValue value ) ;
public com.google.common.base.Objects.ToStringHelper addValue ( long value ) { addHolder ( ) . builder.append ( value ) ; return this ; }
public static native int SSL_read_BIO ( long sslNativePointer , byte [ ] dest , long sourceBioRef , long sinkBioRef , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc ) throws java.io.IOException ;
public static native double atan2 ( double y , double x ) ;
private void exportModule ( java.io.File destDir , com.android.tools.gradle.eclipse.ImportModule module ) throws java.io.IOException { mkdirs ( destDir ) ; createModuleBuildGradle ( new java.io.File ( destDir , com.android.SdkConstants.FN_BUILD_GRADLE ) , module ) ; module.copyInto ( destDir ) ; }
public boolean perform ( ) { try { java.lang.Thread.sleep ( 100 ) ; } catch ( java.lang.InterruptedException ignored ) { } return true ; }
public void run ( ) { cancelTimer ( ) ; freeLoadedPrograms ( ) ; }
public static void disableForTests ( ) { org.chromium.base.metrics.RecordHistogram.sIsDisabledForTests = true ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , android.telephony.ims.ImsCallProfile profile ) { isCreateCallSessionCalled = true ; return null ; }
public com.android.ide.common.api.IValidator getResourceValidator ( ) { fail ( "Not supported in tests yet" ) ; return null ; }
public void testSendMessageQueueRandomize ( ) throws java.lang.Exception { com.android.server.wifi.nan.WifiNanNative.Capabilities cap = com.android.server.wifi.nan.WifiNanStateManagerTest.getCapabilities ( ) ; testSendMessageQueue ( com.android.server.wifi.nan.WifiNanStateManagerTest.SendMessageAnswer.OP_QUEUE_RANDOMIZE , cap , ( ( cap.maxQueuedTransmitMessages ) * 10 ) ) ; }
protected boolean assertNotNull ( java.lang.String message , java.lang.Object actual ) { return handleAssert ( ( actual != null ) , message , null , stringFor ( actual ) , "!=" , true ) ; }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.encapType = android.net.IpSecTransform.ENCAP_ESPINUDP ; mConfig.encapLocalPort = localSocket.getPort ( ) ; mConfig.encapRemotePort = remotePort ; return this ; }
public void setUp ( ) throws java.lang.Exception { mWifiInjector = org.mockito.Mockito.mock ( com.android.server.wifi.WifiInjector.class ) ; mWificondControl = new com.android.server.wifi.WificondControl ( mWifiInjector ) ; }
public static long Add0 ( long arg ) { return 0 + arg ; }
public static void computeFmax ( android.renderscript.cts.TestFmax.ArgumentsFloatFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.max ( args.inX , args.inY ) ; }
static java.lang.StringBuilder newStringBuilderForCollection ( int size ) { com.google.common.base.Preconditions.checkArgument ( ( size >= 0 ) , "size must be non-negative" ) ; return new java.lang.StringBuilder ( ( ( int ) ( java.lang.Math.min ( ( size * 8L ) , com.google.common.primitives.Ints.MAX_POWER_OF_TWO ) ) ) ) ; }
static float $opt$NegFloat ( float a ) { return - a ; }
public void testIntentExtras ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } org.junit.Assert.assertThat ( mCall.getDetails ( ) . getIntentExtras ( ) , org.hamcrest.CoreMatchers.is ( android.os.Bundle.class ) ) ; }
public void setVideoQuality ( int quality , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { }
public void close ( ) throws java.io.IOException { try { addDirToZip ( zipOS , getRootDir ( ) ) ; } finally { zipOS.close ( ) ; com.android.sched.util.file.FileUtils.deleteDir ( dir ) ; } }
public java.lang.String getStringFormTarget ( ) { return ( ( ( ( ( typeLocater.getStringFormTarget ( ) ) + "#" ) + ( methodName ) ) + "(" ) + ( parameterMatcher.toStringForm ( ) ) ) + ")" ; }
public void registerDefaultNetworkCallback ( android.net.ConnectivityManager.NetworkCallback networkCallback ) { sendRequestForNetwork ( null , networkCallback , 0 , android.net.ConnectivityManager.REQUEST , android.net.ConnectivityManager.TYPE_NONE ) ; }
public boolean isNormalMoveInsn ( ) { return ( insn.getOpcode ( ) . getOpcode ( ) ) == ( RegOps.MOVE ) ; }
public static boolean isPhoneNumber ( java.lang.String number ) { if ( android.text.TextUtils.isEmpty ( number ) ) { return false ; } java.util.regex.Matcher match = Regex.PHONE_PATTERN.matcher ( number ) ; return match.matches ( ) ; }
private static com.android.dialer.common.PerAccountSharedPreferences getPreferenceForActivationState ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccountHandle ) { return new com.android.dialer.common.PerAccountSharedPreferences ( context , phoneAccountHandle , com.android.dialer.util.DialerUtils.getDefaultSharedPreferenceForDeviceProtectedStorageContext ( context ) ) ; }
public void testConflictsKeepFirst ( ) throws java.lang.Exception { java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream ( ) ; runTestConflict ( "keep-first" , errOut ) ; junit.framework.Assert.assertEquals ( "" , errOut.toString ( ) ) ; }
public void flush ( ) throws java.io.IOException { check ( false ) ; writer.flush ( ) ; }
public void addTo ( @ com.android.annotations.NonNull org.w3c.dom.Document document , @ com.android.annotations.NonNull java.lang.String value ) { com.android.manifmerger.ManifestMerger2.SystemProperty.addToElementInAndroidNS ( this , value , com.android.manifmerger.ManifestMerger2.SystemProperty.createOrGetUseSdk ( document ) ) ; }
static void staticMethod ( ) { if ( Main.ClassWithClinit6.doThrow ) { throw new java.lang.Error ( ) ; } }
public void visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedInterface x , @ javax.annotation.Nonnull com.android.sched.transform.TransformRequest transformRequest ) throws java.lang.Exception { visit ( ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( x ) ) , transformRequest ) ; }
synchronized void nScriptInvoke ( int id , int slot ) { validate ( ) ; rsnScriptInvoke ( mContext , id , slot ) ; }
public java.lang.String getEsn ( ) { return getEsn ( android.telephony.TelephonyManager.getDefaultSubscription ( ) ) ; }
public void requestIsimAuthenticationResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String var2 ) { }
private void free ( ) { if ( ( sslNativePointer ) == 0 ) { return ; } org.conscrypt.NativeCrypto.SSL_free ( sslNativePointer ) ; sslNativePointer = 0 ; guard.close ( ) ; }
public void test_F32_3_SCALE05_20_inRectangle ( ) { testReszie ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inY , Element.DataType.FLOAT_32 , 3 , 0.5F , 2.0F ) ; checkError ( ) ; }
protected void resetRecords ( ) { mIsimImpi = null ; mIsimDomain = null ; mIsimImpu = null ; mIsimIst = null ; mIsimPcscf = null ; auth_rsp = null ; mRecordsRequested = false ; mLockedRecordsRequested = false ; }
com.android.sched.vfs.BaseVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { return changeVFS ( vfs.getVDir ( parent , name ) ) ; }
private void write ( java.lang.String command ) throws java.io.IOException { ctrlOutput.write ( command.getBytes ( Charsets.ISO_8859_1 ) ) ; }
boolean isNumberMatchingDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.getNationalNumberPattern ( ) ) . matcher ( nationalNumber ) ; return ( isNumberPossibleForDesc ( nationalNumber , numberDesc ) ) && ( nationalNumberPatternMatcher.matches ( ) ) ; }
public void binderDied ( ) { android.util.Log.e ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , ( ( "ImsService(" + ( mComponentName ) ) + ") died. Cleaning up." ) ) ; notifyAllFeaturesRemoved ( ) ; cleanUpService ( ) ; mHandler.postDelayed ( mRestartImsServiceRunnable , mRebindRetry.getRetryTimeout ( ) ) ; }
protected void visitPrimitive ( int argAndType , int type , int arg , int size ) { for ( int i = 0 ; i < size ; i ++ ) { in.readByte ( ) ; } }
public boolean hasChildren ( java.lang.Object element ) { if ( element instanceof com.android.hierarchyviewerlib.device.ViewNode ) { return ( ( ( com.android.hierarchyviewerlib.device.ViewNode ) ( element ) ) . children.size ( ) ) != 0 ; } return false ; }
public void setUp ( ) { previousDefaultTimeZone = java.util.TimeZone.getDefault ( ) ; java.util.TimeZone.setDefault ( java.util.TimeZone.getTimeZone ( "America/Los_Angeles" ) ) ; }
protected java.io.File getTargetDir ( ) { return new java.io.File ( getTempDir ( ) , ( ( ( getClass ( ) . getSimpleName ( ) ) + "_" ) + ( getName ( ) ) ) ) ; }
public byte [ ] addCustomExtension ( int ext_type ) { return SERVER_DATA ; }
int getLength ( ) { return ( mData ) != null ? mData.length : 0 ; }
public android.net.NetworkStats getVtDataUsage ( int subId , boolean perUidStats ) { mApp.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_NETWORK_USAGE_HISTORY , null ) ; com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.getVtDataUsage ( perUidStats ) ; } return null ; }
public static MergingReport.Result validate ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlDocument xmlDocument ) { com.android.manifmerger.PreValidator.validateManifestAttribute ( mergingReport , xmlDocument.getRootNode ( ) ) ; return com.android.manifmerger.PreValidator.validate ( mergingReport , xmlDocument.getRootNode ( ) ) ; }
public com.android.build.gradle.internal.dsl.BuildType proguardFiles ( java.lang.Object ... proguardFileArray ) { proguardFiles.addAll ( project.files ( proguardFileArray ) . files ) ; return this ; }
private void expectNetworkStatsSummaryDev ( android.net.NetworkStats summary ) throws java.lang.Exception { org.easymock.EasyMock.expect ( mNetManager.getNetworkStatsSummaryDev ( ) ) . andReturn ( summary ) . atLeastOnce ( ) ; }
public static boolean delete ( @ org.jetbrains.annotations.NotNull java.io.File file ) { if ( com.intellij.openapi.util.io.FileUtilRt.NIO_FILE_API_AVAILABLE ) { return com.intellij.openapi.util.io.FileUtilRt.deleteRecursivelyNIO ( file ) ; } return com.intellij.openapi.util.io.FileUtilRt.deleteRecursively ( file ) ; }
private native void startAdvertisingSetNative ( android.bluetooth.le.AdvertisingSetParameters parameters , byte [ ] advertiseData , byte [ ] scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , byte [ ] periodicData , int reg_id ) ;
public int update ( android.net.Uri uri , android.content.ContentValues values , java.lang.String selection , java.lang.String [ ] selectionArgs ) { for ( java.lang.String key : values.keySet ( ) ) { mSubscriptionContent.put ( key , values.get ( key ) ) ; } return 1 ; }
public void testLaunchToSideSingleTask ( ) throws java.lang.Exception { launchTargetToSide ( android.server.cts.ActivityManagerDockedStackTests.SINGLE_TASK_ACTIVITY_NAME , false ) ; }
public void run ( ) { android.os.Debug.stopMethodTracing ( ) ; android.util.Slog.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , "stopTracing" ) ; vibrate ( ) ; }
public void testVFE2 ( ) { try { new dot.junit.opcodes.invoke_interface_range.d.T_invoke_interface_range_4 ( ) . run ( ) ; fail ( "expected NoSuchMethodError or IncompatibleClassChangeError" ) ; } catch ( java.lang.NoSuchMethodError t ) { } catch ( java.lang.IncompatibleClassChangeError e ) { } }
void removeCall ( java.lang.String callId ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.removeCall ( callId ) ; } catch ( android.os.RemoteException ignored ) { } } }
private java.lang.String getTestResultString ( int testResult ) { switch ( testResult ) { case TestResult.TEST_RESULT_PASSED : return "pass" ; case TestResult.TEST_RESULT_FAILED : return "fail" ; case TestResult.TEST_RESULT_NOT_EXECUTED : return "not-executed" ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown test result: " + testResult ) ) ; } }
public void add ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId method ) { virtualMethods.add ( method ) ; }
public void addFile ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile file ) { if ( ( mFiles ) == null ) { mFiles = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile > ( ) ; } mFiles.add ( file ) ; }
public void addValue ( com.android.ide.common.rendering.api.ResourceValue value , boolean isFrameworkAttr ) { mItems.put ( com.android.util.Pair.of ( value.getName ( ) , isFrameworkAttr ) , value ) ; }
public void requestUpgrade ( android.telecom.Call call ) { com.android.dialer.common.Assert.isMainThread ( ) ; com.android.dialer.common.Assert.isNotNull ( call ) ; }
public void skip ( int i ) { mN.skip ( i ) ; }
private static void test_diff_callInstanceMethod ( dalvik.system.DexClassLoaderTest.Configuration config ) throws java.lang.Exception { dalvik.system.DexClassLoaderTest.createInstanceAndCallStaticMethod ( config , "test.TestMethods" , "test_diff_callInstanceMethod" ) ; }
private java.lang.String getPermaLinkURL ( java.lang.String phoneNumber , java.lang.String defaultCountry , java.util.Locale geocodingLocale , boolean absoluteURL ) { java.lang.StringBuilder permaLink = new java.lang.StringBuilder ( ( absoluteURL ? "http://libphonenumber.appspot.com/phonenumberparser" : "/phonenumberparser" ) ) ; try { permaLink.append ( ( "?number=" + ( java.net.URLEncoder.encode ( phoneNumber , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ) ) ) ; if ( ! ( defaultCountry.isEmpty ( ) ) ) { permaLink.append ( ( "&country=" + ( java.net.URLEncoder.encode ( defaultCountry , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ) ) ) ; } if ( ( ! ( geocodingLocale.getLanguage ( ) . equals ( java.util.Locale.ENGLISH.getLanguage ( ) ) ) ) || ( ! ( geocodingLocale.getCountry ( ) . isEmpty ( ) ) ) ) { permaLink.append ( ( "&geocodingLocale=" + ( java.net.URLEncoder.encode ( geocodingLocale.toLanguageTag ( ) , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ) ) ) ; } } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.AssertionError ( e ) ; } return permaLink.toString ( ) ; }
public void setGlobalEndTime ( long globalEndTime ) { mGlobalEndTime = globalEndTime ; }
public void test_Shift_JIS_replacement_character ( ) throws java.lang.Exception { assertDecodes ( java.nio.charset.Charset.forName ( "Shift_JIS" ) , "�" , 252 ) ; assertEncodes ( java.nio.charset.Charset.forName ( "Shift_JIS" ) , "�" , 252 ) ; }
public int getDisplayRule ( java.lang.String plmn ) { return 0 ; }
public java.util.Spliterator < E > spliterator ( ) { return java.util.Spliterators.spliterator ( getArray ( ) , ( ( java.util.Spliterator.IMMUTABLE ) | ( java.util.Spliterator.ORDERED ) ) ) ; }
public static double nextUp ( double d ) { return sun.misc.FpUtils.nextUp ( d ) ; }
public void test_getResourceLjava_lang_String ( ) { final java.lang.String name = "/org/apache/harmony/luni/tests/test_resource.txt" ; java.net.URL res = getClass ( ) . getResource ( name ) ; assertNotNull ( res ) ; }
public void TestJamo ( ) throws java.io.IOException { long start = java.lang.System.currentTimeMillis ( ) ; new android.icu.dev.test.translit.RoundTripTest.Test ( "Latin-Jamo" ) . test ( "[a-zA-Z]" , "[ᄀ-ᄒ ᅡ-ᅵ ᆨ-ᇂ]" , "" , this , new android.icu.dev.test.translit.RoundTripTest.LegalJamo ( ) ) ; showElapsed ( start , "TestJamo" ) ; }
public static boolean isVideoPresenceCompatible ( ) { return true ; }
public void factory_intMonth ( ) { org.testng.Assert.assertEquals ( TEST_07_15 , java.time.MonthDay.of ( java.time.Month.JULY , 15 ) ) ; }
public void testDump ( ) { android.view.inputmethod.cts.MockPrinter printer = new android.view.inputmethod.cts.MockPrinter ( ) ; java.lang.String prefix = "test" ; mInputMethodInfo.dump ( printer , prefix ) ; }
public void testConstructor_Main ( ) throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( ) ; runner.run ( ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.Main.class . getName ( ) ) ) + "\"," ) + "\"runner\":\"" ) + ( vogar.target.MainRunner.class . getName ( ) ) ) + "\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , ios.contents ( Stream.OUT ) ) ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( ( optionalAttributeVisitor ) != null ) { runtimeVisibleAnnotationsAttribute.accept ( clazz , method , optionalAttributeVisitor ) ; } }
private void setNotification ( boolean enable ) { android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.UPDATE_CHARACTERISTIC_UUID ) ; if ( characteristic != null ) { setNotification ( characteristic , enable ) ; } }
public java.lang.String p2pGetSsid ( java.lang.String deviceAddress ) { return p2pGetParam ( deviceAddress , "oper_ssid" ) ; }
public java.lang.String getDisplayName ( java.util.Locale locale ) { return icuCurrency.getDisplayName ( locale ) ; }
protected java.lang.Void doInBackground ( java.lang.Void ... params ) { com.google.android.traceur.AtraceUtils.atraceDumpAndSend ( context , tags , Receiver.BUFFER_SIZE_KB ) ; return null ; }
synchronized int nScriptIntrinsicCreate ( int id , int eid ) { validate ( ) ; return rsnScriptIntrinsicCreate ( mContext , id , eid ) ; }
public com.android.manifmerger.AttributeOperationType getAttributeOperationType ( java.lang.String attributeName ) { return mAttributesOperationTypes.containsKey ( attributeName ) ? mAttributesOperationTypes.get ( attributeName ) : AttributeOperationType.STRICT ; }
public void setIsOptional ( boolean isOptional ) { this . isOptional = isOptional ; }
public static void testSendCmasMonthlyTest ( android.app.Activity activity , int messageId ) { android.telephony.SmsCbMessage cbMessage = com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.createCmasSmsMessage ( SmsEnvelope.SERVICE_CATEGORY_CMAS_TEST_MESSAGE , messageId , "en" , com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.MONTHLY_TEST_ALERT , SmsCbCmasInfo.CMAS_CATEGORY_UNKNOWN , SmsCbCmasInfo.CMAS_RESPONSE_TYPE_UNKNOWN , SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN , SmsCbCmasInfo.CMAS_URGENCY_UNKNOWN , SmsCbCmasInfo.CMAS_CERTAINTY_UNKNOWN ) ; com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.sendBroadcast ( activity , cbMessage ) ; }
public void onNewIncomingConnection ( @ android.support.annotation.NonNull com.android.dialer.simulator.impl.SimulatorConnection connection ) { if ( connection.getExtras ( ) . getBoolean ( connectionTag ) ) { com.android.dialer.common.LogUtil.i ( "SimulatorVoiceCall.onNewIncomingConnection" , "connection created" ) ; handleNewConnection ( connection ) ; } }
private static native void setWifiLinkLayerStatsNative ( int iface , int enable ) ;
void notifyANQPResponse ( com.android.server.wifi.ScanDetail scanDetail , java.util.Map < com.android.server.wifi.anqp.Constants.ANQPElementType , com.android.server.wifi.anqp.ANQPElement > anqpElements ) ;
public void bindResponse ( int indId , boolean indStatus ) { com.android.bluetooth.hfp.HeadsetService service = getService ( ) ; if ( service == null ) { return ; } service.bindResponse ( indId , indStatus ) ; }
public abstract java.util.List getPendingMmiCodes ( ) ;
private java.lang.String generateUniquePackagePrefix ( java.lang.String newSuperPackagePrefix , proguard.obfuscate.NameFactory packageNameFactory ) { java.lang.String newPackagePrefix ; do { newPackagePrefix = ( newSuperPackagePrefix + ( packageNameFactory.nextName ( ) ) ) + ( ClassConstants.INTERNAL_PACKAGE_SEPARATOR ) ; } while ( packagePrefixMap.containsValue ( newPackagePrefix ) ) ; return newPackagePrefix ; }
int getMinSdkVersion ( ) ;
private static native long nativeGetTotalStat ( int type ) ;
public android.database.Cursor loadInBackground ( ) { android.database.Cursor cursor = super . loadInBackground ( ) ; com.android.dialer.searchfragment.cp2.ContactFilterCursor contactFilterCursor = new com.android.dialer.searchfragment.cp2.ContactFilterCursor ( cursor , query , getContext ( ) ) ; return com.android.dialer.searchfragment.cp2.SearchContactsCursor.newInstance ( getContext ( ) , contactFilterCursor ) ; }
private static void encodeRegisterRange ( com.android.jack.dx.io.instructions.DecodedInstruction insn , com.android.jack.dx.io.instructions.CodeOutput out ) { out.write ( com.android.jack.dx.io.instructions.InstructionCodec.codeUnit ( insn.getOpcode ( ) , insn.getRegisterCount ( ) ) , insn.getIndexUnit ( ) , insn.getAUnit ( ) ) ; }
public static float scalb ( float f , int scaleFactor ) { return sun.misc.FpUtils.scalb ( f , scaleFactor ) ; }
public void setConferenceMergeFailed ( java.lang.String callId ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = callId ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_SET_CONFERENCE_MERGE_FAILED , args ) . sendToTarget ( ) ; }
public void dispose ( ) { if ( com.android.internal.telephony.uicc.RuimRecords.DBG ) log ( ( "Disposing RuimRecords " + ( this ) ) ) ; mCi.unregisterForIccRefresh ( this ) ; mParentApp.unregisterForReady ( this ) ; resetRecords ( ) ; super . dispose ( ) ; }
public void filter ( org.junit.runner.manipulation.Filter filter ) throws org.junit.runner.manipulation.NoTestsRemainException { super . filter ( filter ) ; this . parametrizedTestMethodsFilter = new junitparams.internal.ParametrizedTestMethodsFilter ( this , filter ) ; }
private static android.net.Uri getContactUri ( android.database.Cursor cursor ) { long contactId = cursor.getLong ( ContactsCursorLoader.CONTACT_ID ) ; java.lang.String lookupKey = cursor.getString ( ContactsCursorLoader.CONTACT_LOOKUP_KEY ) ; return android.provider.ContactsContract.Contacts.getLookupUri ( contactId , lookupKey ) ; }
public java.util.Collection < V > transformEntry ( K key , java.util.Collection < V > collection ) { return filterCollection ( collection , new ValuePredicate ( key ) ) ; }
public void onSearchComplete ( java.lang.String address , int status ) throws android.os.RemoteException { }
public void testStarted ( com.android.ddmlib.testrunner.TestIdentifier test ) { mRunResult.reportTestStarted ( test ) ; }
public static void assertEquals ( double expected , double actual , double delta ) { if ( ! ( ( java.lang.Math.abs ( ( expected - actual ) ) ) <= delta ) ) throw new java.lang.RuntimeException ( "AssertionFailedError: not within delta" ) ; }
public boolean imsIsVolteProvisionedOnDevice ( ) { return mImsManager.isVolteProvisionedOnDevice ( mContext ) ; }
public boolean testLevel ( ) { if ( ( mAverageEnergyPerBand [ 1 ] ) >= ( com.android.cts.verifier.audio.AudioFrequencyUnprocessedActivity.MIN_ENERGY_BAND_1 ) ) { return true ; } return false ; }
public com.android.jack.jayce.ParameterNode getParameterNode ( @ javax.annotation.Nonnegative int parameterNodeIndex ) { assert ( parameters ) != null ; return parameters.get ( parameterNodeIndex ) ; }
public void copy1DRangeFrom ( int off , int count , byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFrom" ) ; validateIsInt8 ( ) ; copy1DRangeFromUnchecked ( off , count , d ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private static java.lang.String outcome ( java.lang.String testClassName , java.lang.String methodName , java.lang.String message , vogar.Result result ) { java.lang.String testName = vogar.target.AbstractTestRunnerTest.ExpectedResults.testName ( testClassName , methodName ) ; return java.lang.String.format ( ( "//00xx{\"outcome\":\"%s\"}\n" + ( "%s" + "//00xx{\"result\":\"%s\"}\n" ) ) , testName , ( message == null ? "" : message ) , result ) ; }
public void testFormat0 ( ) throws java.lang.Exception { android.text.format.Time t = new android.text.format.Time ( android.text.format.Time.TIMEZONE_UTC ) ; java.lang.String r = t.format ( "%Y%m%dT%H%M%S" ) ; assertEquals ( "19700101T000000" , r ) ; }
public void clearAll ( ) { mNetworkCapabilities = mTransportTypes = 0 ; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED ; mNetworkSpecifier = null ; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED ; mUids = null ; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID ; }
public void testOneLineComment ( ) throws java.lang.Exception { java.lang.String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" + " android:layout_width=\"match_parent\"\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " android:orientation=\"vertical\" >\n" ) + "\n" ) + " <!-- this is a comment ! -->\n" ) + " <Button\n" ) + " android:id=\"@+id/button1\"\n" ) + " android:layout_width=\"wrap_content\"\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " android:text=\"Button\" />\n" ) + " some text\n" ) + "\n" ) + "</LinearLayout>\n" ) ; com.android.utils.PositionXmlParser parser = new com.android.utils.PositionXmlParser ( ) ; java.io.File file = java.io.File.createTempFile ( "parsertest" , ".xml" ) ; file.deleteOnExit ( ) ; java.io.Writer fw = new java.io.BufferedWriter ( new java.io.FileWriter ( file ) ) ; fw.write ( xml ) ; fw.close ( ) ; org.w3c.dom.Document document = parser.parse ( new java.io.FileInputStream ( file ) ) ; assertNotNull ( document ) ; org.w3c.dom.Element linearLayout = ( ( org.w3c.dom.Element ) ( document.getElementsByTagName ( "LinearLayout" ) . item ( 0 ) ) ) ; assertNotNull ( linearLayout ) ; org.w3c.dom.Node commentNode = linearLayout.getFirstChild ( ) . getNextSibling ( ) ; assertEquals ( org.w3c.dom.Node.COMMENT_NODE , commentNode.getNodeType ( ) ) ; com.android.ide.common.blame.SourcePosition position = parser.getPosition ( commentNode ) ; assertNotNull ( position ) ; assertEquals ( 6 , position.getStartLine ( ) ) ; assertEquals ( 4 , position.getStartColumn ( ) ) ; assertEquals ( xml.indexOf ( "<!--" ) , position.getStartOffset ( ) ) ; org.w3c.dom.Element button = ( ( org.w3c.dom.Element ) ( document.getElementsByTagName ( "Button" ) . item ( 0 ) ) ) ; com.android.ide.common.blame.SourcePosition buttonPosition = parser.getPosition ( button ) ; assertNotNull ( buttonPosition ) ; assertEquals ( 7 , buttonPosition.getStartLine ( ) ) ; assertEquals ( 4 , buttonPosition.getStartColumn ( ) ) ; }
public java.lang.String telephonyGetNetworkType ( ) { com.googlecode.android_scripting.Log.d ( ( "sl4a:getNetworkType() is deprecated!" + ( "Please use getVoiceNetworkType()" + " or getDataNetworkTpe()" ) ) ) ; return telephonyGetNetworkTypeForSubscription ( android.telephony.SubscriptionManager.getDefaultSubId ( ) ) ; }
public static boolean isFileBasedResourceType ( com.android.resources.ResourceType type ) { java.util.List < com.android.resources.ResourceFolderType > folderTypes = com.android.ide.eclipse.adt.internal.resources.manager.FolderTypeRelationship.getRelatedFolders ( type ) ; for ( com.android.resources.ResourceFolderType folderType : folderTypes ) { if ( folderType != ( com.android.resources.ResourceFolderType.VALUES ) ) { return true ; } } return false ; }
public void testGetView_missing ( ) { android.support.test.espresso.ViewFinder finder = new android.support.test.espresso.base.ViewFinderImpl ( org.hamcrest.Matchers.nullValue ( android.view.View.class ) , testViewProvider ) ; try { finder.getView ( ) ; fail ( "No children should pass that matcher!" ) ; } catch ( android.support.test.espresso.NoMatchingViewException expected ) { } }
private static void callPostForkChildHooks ( int debugFlags , boolean isSystemServer , java.lang.String instructionSet ) { com.android.internal.os.Zygote.VM_HOOKS.postForkChild ( debugFlags , isSystemServer , instructionSet ) ; }
private java.io.File createTemporaryZipFile ( ) throws java.io.IOException { java.io.File result = java.io.File.createTempFile ( "ZipFileTest" , "zip" ) ; result.deleteOnExit ( ) ; return result ; }
private void sleep ( ) { try { java.lang.Thread.sleep ( ( ( 1 * 1000 ) / 4 ) ) ; } catch ( java.lang.InterruptedException e ) { } }
public boolean init ( java.io.File fontLocation , java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Integer > > enumValueMap , com.android.ide.common.rendering.api.LayoutLog log ) { return false ; }
public void run ( ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiNew = uiDoc.appendNewUiChild ( viewDesc ) ; uiNew.setAttributeValue ( LayoutConstants.ANDROID_NS_PREFIX , XmlnsAttributeDescriptor.XMLNS_URI , SdkConstants.NS_RESOURCES , true ) ; com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.setDefaultLayoutAttributes ( uiNew , false ) ; uiNew.createXmlNode ( ) ; }
public static void requestListeningState ( android.content.Context context ) { if ( ( com.android.traceur.QsService.sListeningInstance ) != null ) { com.android.traceur.QsService.sListeningInstance.update ( ) ; } else { com.android.traceur.QsService.requestListeningState ( context , new android.content.ComponentName ( context , com.android.traceur.QsService.class ) ) ; } }
public native long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , libcore.util.MutableLong inOffset , long byteCount ) throws android.system.ErrnoException ;
public com.android.sdklib.repository.FullRevision getFullRevision ( ) { return revision ; }
public com.android.layoutlib.api.SceneResult createResult ( java.lang.String errorMessage , java.lang.Throwable throwable ) { return new com.android.layoutlib.api.SceneResult ( this , errorMessage , throwable ) ; }
public final com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder getFolder ( ) { return mFolder ; }
public com.android.sdklib.repository.descriptors.IPkgDesc getPkgDesc ( ) { return com.android.sdklib.repository.descriptors.PkgDesc.newTool ( new com.android.sdklib.repository.FullRevision ( 1 , 2 , 3 , 4 ) , FullRevision.NOT_SPECIFIED ) ; }
public android.net.wifi.nan.ConfigRequest getConfigRequest ( ) { return mConfigRequest ; }
public void mouseMoved ( java.awt.event.MouseEvent event ) { checkLockedRegion ( event.getX ( ) , event.getY ( ) ) ; }
protected void forEach ( int slot , android.renderscript.Allocation [ ] ains , android.renderscript.Allocation aout , android.renderscript.FieldPacker v ) { forEach ( slot , ains , aout , v , null ) ; }
public native long getArtField ( ) ;
public void unregisterListener ( ) { if ( ( mTestSensorEventListener ) == null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "No listener registered, returning." ) ; return ; } mSensorManager.unregisterListener ( mTestSensorEventListener , mEnvironment.getSensor ( ) ) ; mTestSensorEventListener = null ; }
public com.android.ahat.heapdump.Value getDumpedValue ( java.lang.String name ) { return getDumpedValue ( name , mSnapshot ) ; }
private boolean matchesWifi ( android.net.NetworkIdentity ident ) { switch ( ident.mType ) { case android.net.ConnectivityManager.TYPE_WIFI : return com.android.internal.util.Objects.equal ( android.net.wifi.WifiInfo.removeDoubleQuotes ( mNetworkId ) , android.net.wifi.WifiInfo.removeDoubleQuotes ( ident.mNetworkId ) ) ; default : return false ; } }
public void setDomains ( java.lang.String domains ) { domains = domains ; }
public int readArray ( ) { checkType ( com.android.dx.io.EncodedValueReader.ENCODED_ARRAY ) ; type = com.android.dx.io.EncodedValueReader.MUST_READ ; return com.android.dx.util.Leb128Utils.readUnsignedLeb128 ( in ) ; }
public void process ( ) { mThread = new java.lang.Thread ( this ) ; mThread.start ( ) ; }
native void rsnObjDestroy ( int con , int id ) ;
void expectAvailableCallbacks ( com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { expectAvailableCallbacks ( agent , false , com.android.server.ConnectivityServiceTest.TestNetworkCallback.TIMEOUT_MS ) ; }
public org.gradle.api.DefaultTask getInstall ( ) { return getApkVariantData ( ) . installTask ; }
public void enter ( ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_DISCONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; quit ( ) ; }
public void put ( android.icu.impl.UResource.Key key , android.icu.impl.UResource.Value value ) { if ( key.contentEquals ( "per" ) ) { cacheData.styleToPerPattern.put ( width , android.icu.impl.SimplePatternFormatter.compile ( value.getString ( ) ) ) ; } }
public int run ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.Nonnull java.lang.String mainClass , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) throws com.android.jack.test.runner.RuntimeRunnerException { return runOnHost ( buildCommandLine ( options , mainClass , classpathFiles ) , "ANDROID_HOST_OUT" ) ; }
public boolean print ( @ javax.annotation.Nonnull java.io.PrintStream printer , @ javax.annotation.Nonnull java.lang.String value ) { printer.print ( ( ( "\"" + ( value.replace ( "\"" , "\\\"" ) ) ) + "\"" ) ) ; return true ; }
public com.android.sdklib.io.NonClosingInputStream setCloseBehavior ( @ com.android.annotations.NonNull com.android.sdklib.io.NonClosingInputStream.CloseBehavior closeBehavior ) { mCloseBehavior = closeBehavior ; return this ; }
public void startScan ( ) { mBLEScanner.startScan ( mScanFilterList , mScanSettings , mScanCallback ) ; }
public int getProtocolIdentifier ( ) { android.util.Log.w ( com.android.internal.telephony.cdma.SmsMessage.LOG_TAG , "getProtocolIdentifier: is not supported in CDMA mode." ) ; return 0 ; }
public boolean test ( int flag ) { return flag == ( com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.BB_ASSIGNS_A ) ; }
public void OnPnoNetworkFound ( ) { android.util.Log.d ( com.android.server.wifi.WificondControl.TAG , "Pno scan result event" ) ; mWifiMonitor.broadcastScanResultEvent ( mClientInterfaceName ) ; }
public java.io.InputStream getInputStream ( ) throws java.io.IOException { return zipInputStream ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > getAllModels ( ) { return getAllModels ( new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , false ) ; }
public void revertVoiceSearchMode ( com.android.browser.Tab tab ) { mUi.revertVoiceTitleBar ( tab ) ; }
public void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotDeleteFileException { assert ! ( closed ) ; dir.delete ( path ) ; }
public int getDownloadStatus ( android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.FileInfo fileInfo ) throws android.os.RemoteException { return 0 ; }
public void testInvalidAppDependencies ( ) throws java.lang.Exception { try { getModelForProject ( com.android.build.gradle.model.AndroidProjectTest.FOLDER_TEST_MANUAL , "invalidDependencyOnAppProject" ) ; fail ( "Should fail." ) ; } catch ( org.gradle.tooling.BuildException e ) { assertTrue ( e.getCause ( ) . getMessage ( ) . contains ( "Only Android library projects can act as dependencies of other projects." ) ) ; } }
boolean hasAccountEntryForPhoneAccount ( android.telecom.PhoneAccountHandle handle ) { for ( com.android.services.telephony.TelecomAccountRegistry.AccountEntry entry : mAccounts ) { if ( entry.getPhoneAccountHandle ( ) . equals ( handle ) ) { return true ; } } return false ; }
public com.android.sdklib.ISystemImage getSystemImage ( java.lang.String abiType ) ;
public void setIsVoipAudioMode ( java.lang.String callId , boolean isVoip ) { findConnectionForAction ( callId , "setIsVoipAudioMode" ) . setIsVoipAudioMode ( isVoip ) ; }
public static char checkedCast ( long value ) { char result = ( ( char ) ( value ) ) ; com.google.common.base.Preconditions.checkArgument ( ( result == value ) , "Out of range: %s" , value ) ; return result ; }
private void notifyScheduledRecordingRemoved ( com.android.tv.dvr.ScheduledRecording ... scheduledRecordings ) { for ( com.android.tv.dvr.DvrDataManager.ScheduledRecordingListener l : mScheduledRecordingListeners ) { l.onScheduledRecordingRemoved ( scheduledRecordings ) ; } }
public void abortCall ( ) { com.android.dialer.common.Assert.checkState ( ( ( currentAction ) != null ) ) ; aborted = true ; }
public boolean getDataEnabled ( ) { return isDataEnabled ( ) ; }
public void test_twoJar_diff_directGetResourceAsStream ( ) throws java.lang.Exception { dalvik.system.DexClassLoaderTest.test_directGetResourceAsStream ( dalvik.system.DexClassLoaderTest.Configuration.TWO_JAR , "test2/Resource2.txt" , "Who doesn\'t like a good biscuit?\n" ) ; }
public android.test.ClassPathPackageInfo getPackageInfo ( java.lang.String pkgName ) { return cache.get ( pkgName ) ; }
static boolean isServiceAvailable ( ) { return org.apache.harmony.security.provider.crypto.RandomBitsSupplier.serviceAvailable ; }
boolean enableNativeFromStateMachine ( ) { boolean isGuest = android.os.UserManager.get ( this ) . isGuestUser ( ) ; android.util.Log.d ( "ATST" , ( "enableNativeUser() - isGuest = " + isGuest ) ) ; return enableNative ( isGuest ) ; }
public static < T > org.hamcrest.Matcher < T > notNullValue ( ) { return org.hamcrest.core.IsNot.not ( org.hamcrest.core.IsNull.< T > nullValue ( ) ) ; }
private com.android.ims.internal.IImsServiceController getServiceInterface ( android.os.IBinder b ) { return IImsServiceController.Stub.asInterface ( b ) ; }
public void getFeatureValue ( int feature , int network , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { }
public int equal ( proguard.evaluation.value.ReferenceValue other ) { return this . equals ( other ) ? ALWAYS : MAYBE ; }
private void tryChangeIccLockState ( ) { android.os.Message callback = android.os.Message.obtain ( mHandler , com.android.settings.IccLockSettings.MSG_ENABLE_ICC_PIN_COMPLETE ) ; mPhone.getIccCard ( ) . setIccLockEnabled ( mToState , mPin , callback ) ; }
public com.android.layoutlib.api.SceneResult getResult ( java.lang.String errorMessage , java.lang.Throwable throwable ) { return new com.android.layoutlib.api.SceneResult ( this , errorMessage , throwable ) ; }
public void setDayGroup ( long rowId , int dayGroup ) { if ( ! ( mDayGroups.containsKey ( rowId ) ) ) { mDayGroups.put ( rowId , dayGroup ) ; } }
public void setNickname ( java.lang.String callingPackage , java.lang.String iccid , java.lang.String nickname , com.android.internal.telephony.euicc.ISetNicknameCallback callback ) { checkCallingPackage ( callingPackage ) ; }
public java.util.Iterator < com.ibm.icu.text.UnicodeSet.EntryRange > iterator ( ) { return this ; }
public void mouseDoubleClick ( org.eclipse.swt.events.MouseEvent e ) { mCanvas.showXml ( e ) ; }
public boolean containsValue ( @ javax.annotation.Nullable java.lang.Object value ) { return ( value != null ) && ( com.google.common.collect.Maps.containsValueImpl ( this , value ) ) ; }
public void acknowledgeSmsReport ( int token , int messageRef , @ android.telephony.ims.internal.SmsImplBase.StatusReportResult int result ) { }
public void onServiceConnected ( android.content.ComponentName name , android.os.IBinder service ) { mWapPushMan = IWapPushManager.Stub.asInterface ( service ) ; if ( false ) android.util.Log.v ( com.android.internal.telephony.WapPushOverSms.LOG_TAG , ( "wappush manager connected to " + ( mOwner.hashCode ( ) ) ) ) ; }
public java.lang.String getSigAlgName ( ) { java.lang.String oid = getSigAlgOID ( ) ; java.lang.String algName = org.apache.harmony.security.utils.AlgNameMapper.map2AlgName ( oid ) ; if ( algName != null ) { return algName ; } return oid ; }
protected void setUp ( ) throws java.lang.Exception { mLog = new com.android.sdklib.StdSdkLog ( ) ; super . setUp ( ) ; }
public void setCustomBackgroundColor ( int color ) { mCustomBackgroundEnabled = true ; mCustomBackgroundColor = color ; }
public static void throwExceptionDuringDeopt ( int i ) { if ( i == 0 ) { DeoptimizationController.startDeoptomization ( ) ; throw new java.lang.RuntimeException ( "Test exception" ) ; } else { DeoptimizationController.stopDeoptomization ( ) ; } }
public static double abs ( double a ) { return a <= 0.0 ? 0.0 - a : a ; }
public void executeShellCommand ( java.lang.String command , com.android.ddmlib.IShellOutputReceiver receiver ) throws java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand ( AndroidDebugBridge.sSocketAddr , command , this , receiver ) ; }
public void applyTransportModeTransform ( java.net.DatagramSocket socket , android.net.IpSecTransform transform ) throws java.io.IOException { applyTransportModeTransform ( android.os.ParcelFileDescriptor.fromDatagramSocket ( socket ) , transform ) ; }
protected void setUp ( ) throws java.lang.Exception { com.android.bluetooth.btservice.AdapterService inst = mock ( com.android.bluetooth.btservice.AdapterService.class ) ; assertTrue ( ( inst != null ) ) ; mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter ( ) ; }
public void onConfigurationChanged ( android.content.res.Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; dumpFontSize ( ) ; }
private boolean isTestActivity ( int position ) { java.util.Map < java.lang.String , ? > item = getItem ( position ) ; return ( item.get ( com.android.cts.verifier.TestListActivity.TestListAdapter.INTENT ) ) != null ; }
public void onStop ( ) { android.util.Log.d ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , "onStop" ) ; }
public boolean install ( com.android.sdklib.internal.repository.ArchiveReplacement archiveInfo , java.lang.String osSdkRoot , boolean forceHttp , com.android.sdklib.SdkManager sdkManager , com.android.sdklib.internal.repository.ITaskMonitor monitor ) { mInstalled.add ( archiveInfo ) ; return true ; }
void setDisconnectCause ( com.android.internal.telephony.sip.DisconnectCause cause ) { mCause = cause ; }
protected void stdout ( java.lang.String format , java.lang.Object ... args ) { mLog.printf ( ( format + '\n' ) , args ) ; }
private static javax.crypto.SecretKey getSecretKey ( ) { if ( ( libcore.java.security.KeyStoreTest.SECRET_KEY ) == null ) { libcore.java.security.KeyStoreTest.SECRET_KEY = libcore.java.security.KeyStoreTest.generateSecretKey ( ) ; } return libcore.java.security.KeyStoreTest.SECRET_KEY ; }
public void stop ( ) { if ( com.google.gct.login.GoogleLoginPrefs.getLogoutOnExitPref ( ) ) { logOut ( false ) ; } }
void setupTests ( ) { mTestSpinner.setAdapter ( new android.widget.ArrayAdapter < com.android.rs.imagejb.ImageProcessingActivityJB.TestName > ( this , R.layout.spinner_layout , com.android.rs.imagejb.ImageProcessingActivityJB.TestName.values ( ) ) ) ; }
public static < T > org.hamcrest.Matcher < java.lang.Iterable < ? super T > > hasItem ( org.hamcrest.Matcher < ? super T > elementMatcher ) { return org.hamcrest.CoreMatchers.< T > hasItem ( elementMatcher ) ; }
public void testSubscribeConfigBuilderBadMatchStyle ( ) { new android.net.wifi.nan.SubscribeConfig.Builder ( ) . setMatchStyle ( 10 ) ; }
protected void finalize ( ) { android.util.Log.d ( com.android.internal.telephony.cdma.CdmaCallTracker.LOG_TAG , "CdmaCallTracker finalized" ) ; }
protected void engineUpdate ( byte arg0 ) throws java.security.SignatureException { spiImpl.engineUpdate ( arg0 ) ; }
public static android.app.DialogFragment newInstance ( com.android.dialer.blocking.BlockedNumbersMigrator blockedNumbersMigrator , com.android.dialer.blocking.BlockedNumbersMigrator.Listener migrationListener ) { com.android.dialer.blocking.MigrateBlockedNumbersDialogFragment fragment = new com.android.dialer.blocking.MigrateBlockedNumbersDialogFragment ( ) ; fragment.mBlockedNumbersMigrator = java.util.Objects.requireNonNull ( blockedNumbersMigrator ) ; fragment.mMigrationListener = java.util.Objects.requireNonNull ( migrationListener ) ; return fragment ; }
public boolean keystorePassword ( java.lang.String password ) { android.util.Log.d ( com.android.keychain.tests.support.KeyChainServiceTestSupport.TAG , "keystorePassword" ) ; return mKeyStore.password ( password ) ; }
public void testRSAllocationSetElementAt ( ) { assertTrue ( testSetElementAt ( ) ) ; }
private static java.lang.String getAbiDisplayNameInternal ( java.lang.String abi ) { return abi.replace ( "armeabi" , "ARM EABI" ) . replace ( "x86" , "Intel x86 Atom" ) . replace ( "mips" , "Mips" ) . replace ( "-" , " " ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { com.google.gct.testing.CloudTestConfigurationImpl newConfiguration = ( ( selectedConfiguration ) != null ) ? selectedConfiguration.copy ( "Copy of " ) : new com.google.gct.testing.CloudTestConfigurationImpl ( facet ) ; addNewConfiguration ( newConfiguration ) ; }
public com.google.common.base.Objects.ToStringHelper addValue ( double value ) { addHolder ( ) . builder.append ( value ) ; return this ; }
public native java.lang.Object getDefaultValue ( ) ;
private boolean checkDistroDataFilesExist ( java.io.File unpackedContentDir ) throws java.io.IOException { android.util.Slog.i ( logTag , "Verifying distro contents" ) ; return libcore.tzdata.shared2.FileUtils.filesExist ( unpackedContentDir , TimeZoneDistro.TZDATA_FILE_NAME , TimeZoneDistro.ICU_DATA_FILE_NAME ) ; }
public com.android.layoutlib.api.SceneResult animate ( java.lang.Object targetObject , java.lang.String animationName , boolean isFrameworkAnimation , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED.createResult ( ) ; }
public int accept ( java.lang.reflect.Method method ) { return method.isBridge ( ) ? 1 : 0 ; }
public void requestIsimAuthentication ( java.lang.String nonce , android.os.Message result ) { android.util.Log.e ( com.android.internal.telephony.PhoneBase.LOG_TAG , "requestIsimAuthentication() is only supported on LTE devices" ) ; }
public static com.google.common.primitives.UnsignedLong asUnsigned ( long value ) { return new com.google.common.primitives.UnsignedLong ( value ) ; }
public static void computeAtanpi ( android.renderscript.cts.TestAtanpi.ArgumentsFloatFloat args ) { args.ulf = 5 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( ( java.lang.StrictMath.atan ( args.in ) ) / ( java.lang.StrictMath.PI ) ) ) ; }
public boolean accept ( java.io.File dir , java.lang.String name ) { return ( ! ( name.endsWith ( "~" ) ) ) && ( ! ( name.startsWith ( "." ) ) ) ; }
public void stopDtmfTone ( com.android.server.telecom.Call call ) { if ( ! ( mCalls.contains ( call ) ) ) { com.android.server.telecom.Log.i ( this , "Request to stop DTMF in a non-existent call %s" , call ) ; } else { call.stopDtmfTone ( ) ; mDtmfLocalTonePlayer.stopTone ( call ) ; } }
private static NativeRef.EVP_PKEY_CTX getPkeyCtxForEncrypt ( ) throws java.lang.Exception { return new org.conscrypt.NativeRef.EVP_PKEY_CTX ( org.conscrypt.NativeCrypto.EVP_PKEY_encrypt_init ( org.conscrypt.NativeCryptoTest.getRsaPkey ( org.conscrypt.NativeCryptoTest.generateRsaKey ( ) ) ) ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { }
public void onForegroundActivitiesChanged ( int pid , int uid , boolean fg ) { if ( isScreenIdle ( ) ) { android.os.Message message = mServiceHandler.obtainMessage ( ) ; message.arg1 = com.android.stk.StkAppService.OP_IDLE_SCREEN ; mServiceHandler.sendMessage ( message ) ; unregisterProcessObserver ( ) ; } }
public android.telephony.ims.feature.RcsFeature onCreateRcsFeature ( int slotId ) { return null ; }
public android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex ( int direction , java.net.InetAddress remoteAddress ) throws android.net.IpSecManager.ResourceUnavailableException { try { return new android.net.IpSecManager.SecurityParameterIndex ( mService , direction , remoteAddress , android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX ) ; } catch ( android.net.IpSecManager.SpiUnavailableException unlikely ) { throw new android.net.IpSecManager.ResourceUnavailableException ( "No SPIs available" ) ; } }
public void setup ( ) { put ( "Cipher.FOO/FOO/FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO/FOO/FOO SupportedKeyClasses" , "none" ) ; }
void updateConnectivity ( ) { setWimaxStatus ( ) ; setWifiStatus ( ) ; setBtStatus ( ) ; setIpAddressStatus ( ) ; }
private static boolean validTimeZoneId ( java.lang.String timeZoneId ) { com.ibm.icu.util.TimeZone zone = com.ibm.icu.util.TimeZone.getTimeZone ( timeZoneId ) ; return ! ( zone.getID ( ) . equals ( TimeZone.UNKNOWN_ZONE_ID ) ) ; }
public void testComplexPermission3 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "src/test/pkg/PermissionTest.java:7: Error: Missing permissions required by LocationManager.myMethod: com.android.voicemail.permission.ADD_VOICEMAIL xor android.permission.AUTHENTICATE_ACCOUNTS [MissingPermission]\n" + " LocationManager.Location location = locationManager.myMethod(provider);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( getManifestWithPermissions ( 14 , "android.permission.ACCESS_FINE_LOCATION" , "com.android.voicemail.permission.ADD_VOICEMAIL" , "android.permission.AUTHENTICATE_ACCOUNTS" ) , mPermissionTest , mComplexLocationManagerStub , mRequirePermissionAnnotation ) ) ; }
public void addFailure ( java.lang.String message , java.lang.String stackTrace ) { classResults.failed ( this ) ; failures.add ( new org.gradle.api.internal.tasks.testing.junit.report.TestFailure ( message , stackTrace ) ) ; }
protected com.android.tools.lint.checks.TestLintClient createClient ( ) { return new com.android.tools.lint.checks.TestLintClient ( ) { @ com.android.annotations.NonNull @ java.lang.Override protected com.android.tools.lint.detector.api.Project createProject ( @ com.android.annotations.NonNull java.io.File dir , @ com.android.annotations.NonNull java.io.File referenceDir ) { return new com.android.tools.lint.checks.ManifestDetectorTest.MyProject ( this , dir , referenceDir ) ; } } ; }
public void testIssue33845 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "res/values/strings.xml:5: Error: \"dateTimeFormat\" is not translated in de [MissingTranslation]\n" + " <string name=\"dateTimeFormat\">MM/dd/yyyy - HH:mm</string>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "locale33845/.classpath=>.classpath" , "locale33845/AndroidManifest.xml=>AndroidManifest.xml" , "locale33845/project.properties=>project.properties" , "locale33845/res/values/strings.xml=>res/values/strings.xml" , "locale33845/res/values-de/strings.xml=>res/values-de/strings.xml" , "locale33845/res/values-en-rGB/strings.xml=>res/values-en-rGB/strings.xml" ) ) ; }
private static long getLongValue ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.Expression argument ) { java.lang.Object value = com.android.tools.lint.detector.api.ConstantEvaluator.evaluate ( context , argument ) ; if ( value instanceof java.lang.Number ) { return ( ( java.lang.Number ) ( value ) ) . longValue ( ) ; } return java.lang.Long.MAX_VALUE ; }
public void requestFocus ( com.android.server.telecom.ConnectionServiceFocusManager.CallFocus focus , com.android.server.telecom.ConnectionServiceFocusManager.RequestFocusCallback callback ) { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_REQUEST_FOCUS , new com.android.server.telecom.ConnectionServiceFocusManager.FocusRequest ( focus , callback ) ) . sendToTarget ( ) ; }
private static boolean isAbiSplit ( java.lang.String splitName ) { return splitName.startsWith ( "abi_" ) ; }
public long getNextValueAsReferenceTypeID ( ) { return this . getNextValueAsObjectID ( ) ; }
private com.android.dialer.lightbringer.Lightbringer getLightbringer ( ) { return com.android.dialer.lightbringer.LightbringerComponent.get ( mContext ) . getLightbringer ( ) ; }
public void copyTo ( int [ ] d ) { validateIsInt32 ( ) ; mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , d ) ; }
public void test_withDayOfMonth_normal ( ) { java.time.LocalDate t = TEST_2007_07_15.withDayOfMonth ( 1 ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 7 , 1 ) ) ; }
public void testVFE8 ( ) { try { java.lang.Class.forName ( "dot.junit.opcodes.aget_char.d.T_aget_char_8" ) ; fail ( "expected a verification exception" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
public void testAlternateFormatsContainsData ( ) throws java.lang.Exception { com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata germanyAlternateFormats = com.google.i18n.phonenumbers.MetadataManager.getAlternateFormatsForCountry ( 49 ) ; assertNotNull ( germanyAlternateFormats ) ; assertTrue ( ( ( germanyAlternateFormats.numberFormat.length ) > 0 ) ) ; }
java.io.File getMappingFile ( ) ;
public void testNormaliseStripNonDiallableCharacters ( ) { java.lang.String inputNumber = "03*4-56&+a#234" ; java.lang.String expectedOutput = "03*456+234" ; assertEquals ( "Conversion did not correctly remove non-diallable characters" , expectedOutput , com.google.i18n.phonenumbers.PhoneNumberUtil.normalizeDiallableCharsOnly ( inputNumber ) ) ; }
public void reloadFromDatabase ( com.android.server.telecom.TelecomSystem.SyncRoot lock , com.android.server.telecom.CallsManager callsManager , com.android.server.telecom.ContactsAsyncHelper contactsAsyncHelper , com.android.server.telecom.CallerInfoAsyncQueryFactory callerInfoAsyncQueryFactory , android.os.UserHandle userHandle ) { }
public void copy ( proguard.evaluation.TracedStack other ) { super . copy ( other ) ; producerStack.copy ( other.producerStack ) ; }
public void addAdapterBinding ( com.android.ide.common.rendering.api.ResourceReference reference , com.android.ide.common.rendering.api.SessionParams.AdapterBinding data ) { if ( ( mAdapterBindingMap ) == null ) { mAdapterBindingMap = new java.util.HashMap < com.android.ide.common.rendering.api.ResourceReference , com.android.ide.common.rendering.api.SessionParams.AdapterBinding > ( ) ; } mAdapterBindingMap.put ( reference , data ) ; }
public java.lang.invoke.MethodType type ( ) { return type ; }
public java.lang.String describeReferenceTo ( long id ) { return "No reference to 0x" + ( java.lang.Long.toHexString ( id ) ) ; }
public void registerContentObservers ( android.content.Context appContext , com.android.dialer.phonelookup.blockednumber.ContentObserverCallbacks contentObserverCallbacks ) { appContext.getContentResolver ( ) . registerContentObserver ( FilteredNumber.CONTENT_URI , true , new com.android.dialer.phonelookup.blockednumber.MarkDirtyObserver ( appContext , contentObserverCallbacks ) ) ; }
public void onUnhold ( ) { com.android.dialer.common.LogUtil.enterBlock ( "SimulatorConnection.onUnhold" ) ; setActive ( ) ; }
public void test_F32_2_SCALE20_20_inRectangle ( ) { testReszie ( inX , inY , Element.DataType.FLOAT_32 , 2 , 2.0F , 2.0F ) ; }
public void onStreamInfoChanged ( com.android.tv.data.StreamInfo info ) { mTvViewUiManager.updatePipView ( ) ; mHandler.removeCallbacks ( mRestoreMainViewRunnable ) ; restoreMainTvView ( ) ; }
public void testMissingVersion ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestOrderDetector.SET_VERSION ) ; assertEquals ( ( "" + ( ( ( ( ( ( "AndroidManifest.xml:2: Warning: Should set android:versionCode to specify the application version [MissingVersion]\n" + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + "^\n" ) + "AndroidManifest.xml:2: Warning: Should set android:versionName to specify the application version [MissingVersion]\n" ) + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + "^\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "no_version.xml=>AndroidManifest.xml" ) ) ; }
public void invokeVirtual ( final org.objectweb.asm.Type owner , final org.objectweb.asm.commons.Method method ) { invokeInsn ( Opcodes.INVOKEVIRTUAL , owner , method ) ; }
public void disconnectClientAfterStartingWifi ( ) throws java.lang.Exception { mWifiScanningServiceImpl.startService ( ) ; com.android.internal.util.test.BidirectionalAsyncChannel controlChannel = connectChannel ( mock ( android.os.Handler.class ) ) ; mLooper.dispatchAll ( ) ; setupAndLoadDriver ( ) ; controlChannel.disconnect ( ) ; mLooper.dispatchAll ( ) ; }
public static void showMessage ( java.lang.String title , java.lang.Throwable t ) { java.io.StringWriter message = new java.io.StringWriter ( ) ; message.append ( "Internal error. Please report to http://" ) ; boolean studio = "AndroidStudio" . equalsIgnoreCase ( java.lang.System.getProperty ( com.intellij.idea.Main.PLATFORM_PREFIX_PROPERTY ) ) ; message.append ( ( studio ? "code.google.com/p/android/issues" : "youtrack.jetbrains.com" ) ) ; message.append ( "\n\n" ) ; t.printStackTrace ( new java.io.PrintWriter ( message ) ) ; com.intellij.idea.Main.showMessage ( title , message.toString ( ) , true ) ; }
public java.lang.String getBuildType ( ) { return null ; }
private synchronized void addMediaPlayerBrowsable ( java.lang.String packageName ) { com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo ( null , AvrcpConstants.PLAYER_TYPE_AUDIO , AvrcpConstants.PLAYER_SUBTYPE_NONE , getPlayStateBytes ( null ) , getFeatureBitMask ( packageName ) , packageName , getAppLabel ( packageName ) ) ; addMediaPlayerInfo ( info ) ; }
java.util.List < com.android.bluetooth.avrcp.Metadata > getCurrentQueue ( ) { return com.android.bluetooth.avrcp.Util.toMetadataList ( getQueue ( ) ) ; }
public < T extends java.lang.annotation.Annotation > T getAnnotation ( java.lang.Class < T > annotationClass ) { return super . getAnnotation ( annotationClass ) ; }
private static void test_init ( dalvik.system.DexClassLoaderTest.Configuration config ) { dalvik.system.DexClassLoaderTest.createInstance ( config ) ; int expectedFiles = config.expectedFiles ; int actualFiles = dalvik.system.DexClassLoaderTest.OPTIMIZED_DIR.listFiles ( ) . length ; assertEquals ( expectedFiles , actualFiles ) ; }
native void rsnAllocationData3D ( long con , long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , int [ ] d , int sizeBytes ) ;
public static void computeRadians ( android.renderscript.cts.TestRadians.ArgumentsFloatFloat args ) { args.ulf = 3 ; args.ulfRelaxed = 3 ; args.out = ( ( float ) ( ( ( double ) ( args.inValue ) ) * ( ( java.lang.StrictMath.PI ) / 180.0 ) ) ) ; }
public boolean getDataEnabled ( ) { return getDataEnabled ( getSubId ( ) ) ; }
private void startStateMachineUpdaters ( ) { try { mNwService.registerObserver ( mNetlinkTracker ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( mTag , ( "Couldn't register NetlinkTracker: " + ( e.toString ( ) ) ) ) ; } mMultinetworkPolicyTracker.start ( ) ; }
public java.lang.annotation.Annotation [ ] getDeclaredAnnotations ( ) { return java.lang.Package.NO_ANNOTATIONS ; }
public final com.google.common.hash.Hasher putString ( java.lang.CharSequence charSequence ) { for ( int i = 0 ; i < ( charSequence.length ( ) ) ; i ++ ) { putChar ( charSequence.charAt ( i ) ) ; } return this ; }
protected void close ( ) { saveSize ( ) ; getShell ( ) . close ( ) ; }
private static java.lang.CharSequence buildSecondaryVoicemailText ( com.android.dialer.voicemail.model.VoicemailEntry voicemailEntry ) { return voicemailEntry.geocodedLocation ( ) ; }
public boolean containsKey ( java.lang.Object key ) { return multimap ( ) . containsKey ( key ) ; }
public abstract void loadSettings ( java.util.Properties in_settings ) ;
public int hashCode ( ) { return mBuildConfigLines.hashCode ( ) ; }
public static void computeSqrt ( android.renderscript.cts.TestSqrt.ArgumentsFloatFloat args ) { args.ulf = 3 ; args.ulfRelaxed = 3 ; args.out = ( ( float ) ( java.lang.StrictMath.sqrt ( args.in ) ) ) ; }
protected void logv ( java.lang.String s ) { android.util.Log.v ( com.android.internal.telephony.gsm.SIMRecords.LOG_TAG , ( "[SIMRecords] " + s ) ) ; }
private static java.lang.String getMessageTag ( java.lang.String tag ) { java.util.Calendar c = java.util.Calendar.getInstance ( ) ; if ( tag == null ) { return java.lang.String.format ( "[%1$tF %1$tT]" , c ) ; } return java.lang.String.format ( "[%1$tF %1$tT - %2$s]" , c , tag ) ; }
protected void onFinishInflate ( ) { super . onFinishInflate ( ) ; image = findViewById ( R.id.bottom_nav_item_image ) ; text = findViewById ( R.id.bottom_nav_item_text ) ; }
protected void unwanted ( ) { if ( ( this ) != ( mNetworkAgent ) ) return ; if ( com.android.server.wifi.WifiStateMachine.DBG ) log ( ( "WifiNetworkAgent -> Wifi unwanted score " + ( java.lang.Integer.toString ( mWifiInfo.score ) ) ) ) ; unwantedNetwork ( com.android.server.wifi.WifiStateMachine.network_status_unwanted_disconnect ) ; }
void enableScreenAfterBoot ( ) { android.util.EventLog.writeEvent ( com.android.server.am.ActivityManagerService.LOG_BOOT_PROGRESS_ENABLE_SCREEN , android.os.SystemClock.uptimeMillis ( ) ) ; mWindowManager.enableScreenAfterBoot ( ) ; }
public static native int EVP_MD_block_size ( int evp_md ) ;
protected void attachBaseContext ( android.content.Context base ) { super . attachBaseContext ( base ) ; org.chromium.base.multidex.ChromiumMultiDexInstaller.install ( this ) ; }
public void basicString ( ) throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump ( ) ; com.android.tools.perflib.heap.Instance str = ( ( com.android.tools.perflib.heap.Instance ) ( dump.getDumpedThing ( "basicString" ) ) ) ; org.junit.Assert.assertEquals ( "hello, world" , com.android.ahat.InstanceUtils.asString ( str ) ) ; }
public void setHasEverConnectedTrueOnConnect ( ) throws java.lang.Exception { connect ( ) ; android.net.wifi.WifiConfiguration checkConfig = getWifiConfigurationForNetwork ( com.android.server.wifi.WifiStateMachineTest.DEFAULT_TEST_SSID ) ; org.junit.Assert.assertTrue ( checkConfig.getNetworkSelectionStatus ( ) . getHasEverConnected ( ) ) ; }
public void callSessionConferenceExtendReceived ( com.android.ims.internal.IImsCallSession i , com.android.ims.internal.IImsCallSession newSession , android.telephony.ims.ImsCallProfile imsCallProfile ) throws android.os.RemoteException { mNewListener.callSessionConferenceExtendReceived ( newSession , imsCallProfile ) ; }
java.lang.String formatNsnUsingPattern ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat formattingPattern , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat numberFormat ) { return formatNsnUsingPattern ( nationalNumber , formattingPattern , numberFormat , null ) ; }
public java.lang.String getPath ( ) { return abi ; }
private native void nativeDrawSelection ( android.graphics.Canvas content , int x , int y , boolean extendSelection ) ;
public void onSessionConfigFailed ( ) { android.os.Bundle mResults = new android.os.Bundle ( ) ; mResults.putInt ( "discoverySessionId" , mDiscoverySessionId ) ; mEventFacade.postEvent ( "WifiNanSessionOnSessionConfigFailed" , mResults ) ; }
public native void setInt ( java.lang.Object object , int value ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public java.lang.String getTypeDescription ( ) { return "unvalidated android data in the format " + "resources[#resources]:assets[#assets]:manifest" ; }
public static void disableAutoRotation ( android.autofillservice.cts.UiBot uiBot ) { android.autofillservice.cts.Helper.runShellCommand ( android.autofillservice.cts.Helper.ACCELLEROMETER_CHANGE , 0 ) ; android.autofillservice.cts.Helper.setOrientation ( uiBot , android.autofillservice.cts.Helper.PORTRAIT ) ; }
public java.lang.annotation.Annotation [ ] [ ] getParameterAnnotations ( ) { return super . getParameterAnnotations ( ) ; }
public static float ReturnFloat99P25 ( ) { double imm = 99.25 ; return ( ( float ) ( imm ) ) ; }
public static void computePowr ( android.renderscript.cts.TestPowr.ArgumentsFloatFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 16 , 128 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.powr ( args.inX , args.inY , t ) ; }
public static void computeMad ( android.renderscript.cts.TestMad.ArgumentsFloatFloatFloatFloat args ) { args.out = android.renderscript.cts.Floaty.add ( new android.renderscript.cts.Floaty ( ( ( args.inA ) * ( args.inB ) ) ) , new android.renderscript.cts.Floaty ( args.inC ) ) ; }
public void runCmdLine ( @ com.android.annotations.NonNull java.lang.String [ ] command , @ com.android.annotations.Nullable java.util.Map < java.lang.String , java.lang.String > envVariableMap ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.Thread.sleep ( 1000 ) ; throw new java.io.IOException ( "foo" ) ; }
public void sendAccessibilityEvent ( int eventType ) { if ( android.view.accessibility.AccessibilityManager.getInstance ( mContext ) . isEnabled ( ) ) { sendAccessibilityEventUnchecked ( android.view.accessibility.AccessibilityEvent.obtain ( eventType ) ) ; } }
public com.google.common.primitives.UnsignedInteger subtract ( com.google.common.primitives.UnsignedInteger val ) { com.google.common.base.Preconditions.checkNotNull ( val ) ; return com.google.common.primitives.UnsignedInteger.asUnsigned ( ( ( this . value ) - ( val.value ) ) ) ; }
public static int MulN1 ( int arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg * ( - 1 ) ; }
void start ( ) { new java.lang.Thread ( "Device List Monitor" ) { @ java.lang.Override public void run ( ) { deviceMonitorLoop ( ) ; } } . start ( ) ; }
private static com.intellij.openapi.vfs.VirtualFile [ ] getCompilationClasspath ( com.intellij.openapi.module.Module m ) { return com.intellij.roots.ModuleRootManager.getInstance ( m ) . orderEntries ( ) . recursively ( ) . exportedOnly ( ) . getClassesRoots ( ) ; }
public void test_EmptyMap_computeIfPresent ( ) { try { java.util.Collections.emptyMap ( ) . computeIfPresent ( 1 , ( k , v ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public static synchronized double random ( ) { if ( ( java.lang.Math.random ) == null ) { java.lang.Math.random = new java.util.Random ( ) ; } return java.lang.Math.random.nextDouble ( ) ; }
private static void test_diff_getStaticVariable ( dalvik.system.DexClassLoaderTest.Configuration config ) throws java.lang.Exception { dalvik.system.DexClassLoaderTest.createInstanceAndCallStaticMethod ( config , "test.TestMethods" , "test_diff_getStaticVariable" ) ; }
public static void initialize ( ) { if ( ( org.chromium.base.metrics.RecordHistogram.sDisabledBy ) != null ) return ; org.chromium.base.metrics.RecordHistogram.nativeInitialize ( ) ; }
public void dup ( ) { super . dup ( ) ; producerPop ( ) ; producerPush ( ) ; producerPush ( ) ; }
public boolean stopService ( android.content.Intent service ) { warnIfCallingFromSystemProcess ( ) ; return stopServiceAsUser ( service , mUser ) ; }
private void loadString ( int length ) throws java.io.IOException { long id = readId ( ) ; java.lang.String string = readUTF8 ( length ) ; mStrings.put ( id , string ) ; }
public void addScheduledRecording ( com.android.tv.dvr.ScheduledRecording ... scheduledRecordings ) { for ( com.android.tv.dvr.ScheduledRecording r : scheduledRecordings ) { addScheduledRecordingInternal ( r ) ; } }
public void cancel ( ) { mCanceled = true ; }
public static void setAppLayerName ( com.android.graphics.benchmark.ApkInfo apk ) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTestApk = apk ; }
void setJarJarRuleFile ( java.lang.String jarJarRuleFile ) ;
public static void v ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { if ( com.android.services.telephony.Log.VERBOSE ) { android.util.Log.v ( com.android.services.telephony.Log.TAG , com.android.services.telephony.Log.buildMessage ( prefix , format , args ) ) ; } }
private float getFontSizeFactor ( com.android.internal.telephony.gsm.stk.FontSize size ) { final float [ ] fontSizes = new float [ ] { com.android.stk.StkInputActivity.NORMAL_FONT_FACTOR , com.android.stk.StkInputActivity.LARGE_FONT_FACTOR , com.android.stk.StkInputActivity.SMALL_FONT_FACTOR } ; return fontSizes [ size.ordinal ( ) ] ; }
private static java.lang.String rsnCipherToString ( int cipher ) { switch ( cipher ) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.RSN_CIPHER_NONE : return "NONE" ; case com.android.server.wifi.util.InformationElementUtil.Capabilities.RSN_CIPHER_TKIP : return "TKIP" ; case com.android.server.wifi.util.InformationElementUtil.Capabilities.RSN_CIPHER_CCMP : return "CCMP" ; case com.android.server.wifi.util.InformationElementUtil.Capabilities.RSN_CIPHER_NO_GROUP_ADDRESSED : return "GTK_NOT_USED" ; default : return "?" ; } }
private static int validate3DigitVersion ( int value ) throws libcore.tzdata.update2.BundleException { if ( ( value < 1 ) || ( value > 999 ) ) { throw new libcore.tzdata.update2.BundleException ( ( "Expected 1 <= value <= 999, was " + value ) ) ; } return value ; }
public boolean isEthernetAvailable ( ) { return ( mConnectivityManager.isNetworkSupported ( ConnectivityManager.TYPE_ETHERNET ) ) && ( mEthernetManager.isAvailable ( ) ) ; }
synchronized long nScriptGroup2Create ( long [ ] closures ) { validate ( ) ; return rsnScriptGroup2Create ( mContext , closures ) ; }
public boolean remove ( java.lang.Object o ) { return ( this . remove ( o ) ) != null ; }
private int insertInitialPackageStatus ( ) throws java.io.IOException { final int initialOptimisticLockId = ( ( int ) ( java.lang.System.currentTimeMillis ( ) ) ) ; writePackageStatusInternal ( null , initialOptimisticLockId , null ) ; return initialOptimisticLockId ; }
private void addProvider ( com.android.server.location.LocationProviderInterface provider ) { mProviders.add ( provider ) ; mProvidersByName.put ( provider.getName ( ) , provider ) ; }
public boolean getDataEnabled ( ) { return getDataEnabled ( android.telephony.SubscriptionManager.getDefaultDataSubId ( ) ) ; }
protected void onPause ( ) { super . onPause ( ) ; unregisterReceiver ( mReceiver ) ; }
public void startConference ( java.lang.String [ ] participants , com.android.ims.ImsCallProfile profile ) throws android.os.RemoteException { }
public void factory_ofEpochDay_belowMin ( ) { java.time.LocalDate.ofEpochDay ( ( ( MIN_VALID_EPOCHDAYS ) - 1 ) ) ; }
public final void testCertificate ( ) { tests.api.javax.security.cert.CertificateTest.TBTCert tbt_cert = new tests.api.javax.security.cert.CertificateTest.TBTCert ( ) ; assertNull ( "Public key should be null" , tbt_cert.getPublicKey ( ) ) ; assertEquals ( "Wrong string representation for Certificate" , "TBTCert" , tbt_cert.toString ( ) ) ; }
public void setQualifier ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier qualifier ) { com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier q = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier ) ( qualifier ) ) ; java.lang.String value = q.getValue ( ) ; if ( value != null ) { mRegion.setText ( q.getValue ( ) ) ; } }
public static float copySign ( float magnitude , float sign ) { return sun.misc.FpUtils.rawCopySign ( magnitude , ( sun.misc.FpUtils.isNaN ( sign ) ? 1.0F : sign ) ) ; }
protected void initSstIcc ( ) { mIccCard.set ( com.android.internal.telephony.uicc.UiccController.getInstance ( this ) . getIccCard ( ) ) ; mIccRecords = mIccCard.get ( ) . getIccRecords ( ) ; mSST = new com.android.internal.telephony.cdma.CdmaLteServiceStateTracker ( this ) ; }
annotations.LinkerFieldHandle [ ] fieldMethodHandle ( ) default { } ;
static com.ibm.icu.impl.TimeZoneNamesImpl.ZNamesLoader forTimeZoneNames ( ) { return new com.ibm.icu.impl.TimeZoneNamesImpl.ZNamesLoader ( com.ibm.icu.impl.TimeZoneNamesImpl.ZNamesLoader.NUM_TIME_ZONE_NAMES ) ; }
public static java.lang.String normalizeDigitsOnly ( java.lang.String number ) { return com.google.i18n.phonenumbers.PhoneNumberUtil.normalizeDigits ( number , false ) . toString ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { new com.ibm.icu.dev.test.charset.TestConversion ( ) . run ( args ) ; }
public void onMetadataChanged ( android.media.MediaMetadata metadata ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , "onMetadataChanged" ) ; scheduleMediaUpdate ( ) ; }
public void testUsesFeatureSplit_elementDeleted ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String input = "" + ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <uses-feature android:required=\"false\"" ) + " android:glEsVersion=\"0x00020000\"/>\n" ) + " <uses-feature" ) + " android:required=\"false\"" ) + " android:glEsVersion=\"0x00030000\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument xmlDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "testUsesFeatureSplit" ) , input ) ; com.android.manifmerger.ActionRecorder.Builder mockActionRecorder = org.mockito.Mockito.mock ( ActionRecorder.Builder.class ) ; com.android.manifmerger.MergingReport.Builder mockReport = org.mockito.Mockito.mock ( MergingReport.Builder.class ) ; org.mockito.Mockito.when ( mockReport.getActionRecorder ( ) ) . thenReturn ( mockActionRecorder ) ; com.android.manifmerger.ElementsTrimmer.trim ( xmlDocument , mockReport ) ; org.w3c.dom.NodeList elementsByTagName = xmlDocument.getRootNode ( ) . getXml ( ) . getElementsByTagName ( "uses-feature" ) ; assertEquals ( 1 , elementsByTagName.getLength ( ) ) ; org.mockito.Mockito.verify ( mockActionRecorder ) . recordNodeAction ( org.mockito.Matchers.any ( com.android.manifmerger.XmlElement.class ) , org.mockito.Matchers.eq ( ActionRecorder.ActionType.REJECTED ) ) ; for ( int i = 0 ; i < ( elementsByTagName.getLength ( ) ) ; i ++ ) { org.w3c.dom.NamedNodeMap attributes = elementsByTagName.item ( i ) . getAttributes ( ) ; assertEquals ( 2 , attributes.getLength ( ) ) ; ensureOnlyOneKey ( attributes , ManifestModel.NodeTypes.USES_FEATURE ) ; } }
public abstract com.android.tools.lint.client.api.JavaParser.ResolvedField getField ( @ com.android.annotations.NonNull java.lang.String name ) ;
public com.android.build.gradle.internal.dsl.SigningConfigDsl initWith ( com.android.builder.SigningConfig that ) { setStoreLocation ( that.getStoreLocation ( ) ) ; setStorePassword ( that.getStorePassword ( ) ) ; setKeyAlias ( that.getKeyAlias ( ) ) ; setKeyPassword ( that.getKeyPassword ( ) ) ; return this ; }
public static android.os.ParcelFileDescriptor dup ( java.io.FileDescriptor orig ) throws java.io.IOException { try { final java.io.FileDescriptor fd = Libcore.os.dup ( orig ) ; return new android.os.ParcelFileDescriptor ( fd ) ; } catch ( libcore.io.ErrnoException e ) { throw e.rethrowAsIOException ( ) ; } }
public void addItem ( com.android.ide.common.rendering.api.AdapterBinding.AdapterItemReference itemInfo ) { mItems.add ( itemInfo ) ; }
public static android.telephony.MbmsDownloadManager create ( android.content.Context context , android.telephony.mbms.IMbmsDownloadManagerCallback listener ) throws android.telephony.mbms.MbmsException { return android.telephony.MbmsDownloadManager.create ( context , listener , android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
public com.android.internal.telephony.Connection dial ( java.lang.String dialString , int videoState ) throws com.android.internal.telephony.CallStateException { return dialInternal ( dialString , videoState , null ) ; }
public int size ( ) { return multimap ( ) . size ( ) ; }
public void test_U8_1_SCALE20_20_inSqure ( ) { testReszie ( inX , inX , Element.DataType.UNSIGNED_8 , 1 , 2.0F , 2.0F ) ; }
public void applyTransportModeTransform ( @ android.annotation.NonNull java.net.Socket socket , @ android.net.IpSecManager.PolicyDirection int direction , @ android.annotation.NonNull android.net.IpSecTransform transform ) throws java.io.IOException { applyTransportModeTransform ( socket.getFileDescriptor$ ( ) , direction , transform ) ; }
public boolean isHidden ( ) { return comment ( ) . isHidden ( ) ; }
private void write ( int count ) throws java.io.IOException { mOutputStream.write ( mBuffer , 0 , count ) ; }
public void testNegativePort ( ) throws java.lang.Exception { try { new java.net.URL ( "http://host:-2/" ) ; fail ( ) ; } catch ( java.net.MalformedURLException expected ) { } }
public static int randomIntInternal ( ) { return java.lang.Math.NoImagePreloadHolder.INSTANCE.nextInt ( ) ; }
public void warning ( org.xml.sax.SAXParseException e ) { log.printf ( "Warning when parsing %s: %s" , xmlFile.getName ( ) , e.toString ( ) ) ; }
public android.net.IpSecTransform buildTransportModeTransform ( java.net.InetAddress remoteAddress , android.net.IIpSecService ipSecSrv ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { mConfig.mode = android.net.IpSecTransform.MODE_TRANSPORT ; mConfig.remoteAddress = remoteAddress ; return new android.net.IpSecTransform ( mContext , mConfig ) . setIpSecService ( ipSecSrv ) . activate ( ) ; }
public static void Print4 ( ) { ManyMethods.Printer.Print ( ManyMethods.Strings.msg2 ) ; }
public java.lang.String getNai ( ) { return getNai ( getSlotIndex ( ) ) ; }
public void performReceive ( android.content.Intent intent , int resultCode , java.lang.String data , android.os.Bundle extras , boolean ordered , boolean sticky ) throws android.os.RemoteException { synchronized ( this ) { mDidUpdate = true ; } systemReady ( goingCallback ) ; }
public void testSubjectAltNameWithWildcard ( ) { assertTrue ( verifier.verify ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*.g.com" ) ) ) ; }
private java.lang.String getTimeZoneDataPackageName ( ) { assertNotNull ( mOemDataAppPackageName ) ; return mOemDataAppPackageName ; }
public static long max ( long a , long b ) { return a >= b ? a : b ; }
public void stopDrag ( ) { mCurrentElements = null ; mSourceCanvas = null ; mRemoveSourceHandler = null ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { dispose ( ) ; }
private void moveConfigurationToIndex ( int index , com.google.gct.testing.GoogleCloudTestingConfigurationImpl configuration ) { editableConfigurations.remove ( configuration ) ; editableConfigurations.add ( index , configuration ) ; removeConfigurationFromTree ( configuration ) ; addConfigurationToTree ( index , configuration , true ) ; updateConfigurationTree ( ) ; }
public void consumerProguardFiles ( java.lang.Object ... proguardFileArray ) { consumerProguardFiles.addAll ( project.files ( proguardFileArray ) . files ) ; }
protected void onButtonAddonSites ( org.eclipse.swt.events.SelectionEvent e ) { com.android.sdkuilib.internal.repository.AddonSitesDialog d = new com.android.sdkuilib.internal.repository.AddonSitesDialog ( getShell ( ) , mUpdaterData ) ; if ( d.open ( ) ) { loadPackages ( ) ; } }
public static int booleanFieldNotEqualOne ( ) { return ( Main.booleanField ) == true ? 13 : 54 ; }
protected java.awt.Color getEmptySpaceColor ( ) { return com.intellij.util.ui.UIUtil.getPanelBackground ( ) ; }
private static java.util.prefs.Preferences getPrefs ( ) { return java.util.prefs.Preferences.userRoot ( ) . node ( com.google.gct.login.GoogleLoginPrefs.preferencesPath ) ; }
public static void setInstance ( com.android.server.telecom.TelecomSystem instance ) { if ( ( com.android.server.telecom.TelecomSystem.INSTANCE ) != null ) { throw new java.lang.RuntimeException ( "Attempt to set TelecomSystem.INSTANCE twice" ) ; } com.android.server.telecom.Log.i ( com.android.server.telecom.TelecomSystem.class , "TelecomSystem.INSTANCE being set" ) ; com.android.server.telecom.TelecomSystem.INSTANCE = instance ; }
public void out ( java.lang.String message ) { mVerboseStream.println ( message ) ; }
public void onStreamMethodUpdated ( int methodType ) { }
private static void initAdbSocketAddr ( ) { try { int adb_port = com.android.ddmlib.AndroidDebugBridge.determineAndValidateAdbPort ( ) ; com.android.ddmlib.AndroidDebugBridge.sHostAddr = java.net.InetAddress.getByName ( com.android.ddmlib.AndroidDebugBridge.ADB_HOST ) ; com.android.ddmlib.AndroidDebugBridge.sSocketAddr = new java.net.InetSocketAddress ( com.android.ddmlib.AndroidDebugBridge.sHostAddr , adb_port ) ; } catch ( java.net.UnknownHostException e ) { } }
public static short floatToIntToShort ( float value ) { return ( ( short ) ( value ) ) ; }
private void enforceChangePermission ( ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.CHANGE_WIFI_STATE , com.android.server.wifi.nan.WifiNanServiceImpl.TAG ) ; }
public static void computeAtan2 ( android.renderscript.cts.TestAtan2.ArgumentsFloatFloatFloat args ) { args.ulf = 6 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( java.lang.StrictMath.atan2 ( args.inY , args.inX ) ) ) ; }
public long getEndTime ( ) { return 0 ; }
public void initComponent ( ) { com.google.gct.intellij.endpoints.synchronization.SampleSyncScheduler.getInstance ( ) . startScheduleTask ( ) ; }
public void packageInstalled ( java.lang.String packageName , int returnCode ) { android.os.Message msg = mHandler.obtainMessage ( INSTALL_COMPLETE ) ; msg.arg1 = returnCode ; mHandler.sendMessage ( msg ) ; }
public void processingInstruction ( java.lang.String pi ) throws java.io.IOException { check ( false ) ; writer.write ( "<?" ) ; writer.write ( pi ) ; writer.write ( "?>" ) ; }
public static long NegNeg1 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return - ( - arg ) ; }
private void onDeviceConfigChange ( ) { if ( ( mDisableUpdates ) > 0 ) { return ; } if ( ( computeCurrentConfig ( false ) ) && ( ( mListener ) != null ) ) { mListener.onConfigurationChange ( ) ; } }
public com.android.ide.common.process.ProcessResult executeProcess ( @ com.android.annotations.NonNull com.android.ide.common.process.ProcessInfo processInfo ) { return mProcessExecutor.execute ( processInfo , mProcessOutputHandler ) ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newSource ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_SOURCES ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; return p ; }
public static void computeAbs ( android.renderscript.cts.TestAbs.ArgumentsIntUint args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.abs ( args.inValue ) ; }
public void test_writeLong ( ) throws java.lang.Exception { os.writeLong ( 81985529216486895L ) ; assertEquals ( "[01, 23, 45, 67, 89, ab, cd, ef]" , libcore.java.io.DataOutputStreamTest.toHexString ( bytes.toByteArray ( ) ) ) ; }
protected abstract void doApply ( java.util.zip.ZipFile patchFile , java.io.File toFile ) throws java.io.IOException ;
public java.lang.Void run ( ) { for ( java.util.logging.Handler hdl : l.getHandlers ( ) ) { sysLogger.addHandler ( hdl ) ; } return null ; }
public final boolean isAccessModeSupported ( java.lang.invoke.VarHandle.AccessMode accessMode ) { unsupported ( ) ; return false ; }
native void rsnScriptSetVarD ( long con , long id , int slot , double val ) ;
public void render ( com.android.build.gradle.internal.ApplicationVariant variant ) throws java.io.IOException { java.util.List < com.android.builder.dependency.AndroidDependency > libraries = variant.getVariantConfiguration ( ) . getDirectLibraries ( ) ; renderNow ( libraries ) ; }
public int next ( ) { return libcore.icu.NativeBreakIterator.nextImpl ( this . address , 1 ) ; }
public final javax.crypto.ExemptionMechanism getExemptionMechanism ( ) { chooseFirstProvider ( ) ; return exmech ; }
private void handleTestLogData ( java.util.Map < java.lang.String , java.lang.String > values ) { mCurrentTestLog = ( mCurrentTestLog ) + ( values.get ( "dEQP-TestLogData-Log" ) ) ; }
public V load ( K key ) { return computingFunction.apply ( key ) ; }
com.ibm.icu.text.DigitList toDigitList ( double number ) { com.ibm.icu.text.DigitList result = new com.ibm.icu.text.DigitList ( ) ; result.set ( number , precision ( false ) , false ) ; return result ; }
public org.eclipse.ltk.core.refactoring.CompositeChange getChange ( ) { java.util.Collections.reverse ( mChanges ) ; org.eclipse.ltk.core.refactoring.CompositeChange change = new org.eclipse.ltk.core.refactoring.CompositeChange ( "Refactoring Application package name" , mChanges.toArray ( new org.eclipse.ltk.core.refactoring.Change [ mChanges.size ( ) ] ) ) ; return change ; }
static java.lang.String getFlagName ( java.lang.reflect.Field field ) { java.lang.String name = field.getAnnotation ( com.google.devtools.common.options.Option.class ) . name ( ) ; return com.google.devtools.common.options.OptionsData.isBooleanField ( field ) ? "[no]" + name : name ; }
public libcore.io.StructStatFs fstatfs ( java.io.FileDescriptor fd ) throws libcore.io.ErrnoException { return os.fstatfs ( fd ) ; }
private void runKernelUnitTestSuite ( final java.lang.String [ ] tests ) { for ( final java.lang.String test : tests ) { assertTrue ( ( ( ( test + " failed. This test requires kernel functionality to pass. " ) + "Please go to http://XXXXX for instructions on how to enable or " ) + "backport the required functionality." ) , runKernelUnitTest ( test ) ) ; } }
public void visitSourceDirAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.SourceDirAttribute sourceDirAttribute ) { sourceDirAttribute.accept ( clazz , attributeVisitor ) ; }
private void removeTransportModeTransform ( android.os.ParcelFileDescriptor pfd , android.net.IpSecTransform transform ) { try { mService.removeTransportModeTransform ( pfd , transform.getResourceId ( ) ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public static long LongMultiplication ( ) { long a ; long b ; long c ; a = 7L ; b = 3L ; c = a * b ; return c ; }
public T or ( T defaultValue ) { com.google.common.base.Preconditions.checkNotNull ( defaultValue , "use orNull() instead of or(null)" ) ; return reference ; }
protected boolean isImsConnection ( ) { return ( getOriginalConnection ( ) ) instanceof com.android.internal.telephony.imsphone.ImsPhoneConnection ; }
public void render ( T model , org.w3c.dom.Element content ) { this . results = model ; tabsRenderer.clear ( ) ; registerTabs ( ) ; renderTabs ( content ) ; }
protected void doOKAction ( ) { super . doOKAction ( ) ; org.jetbrains.plugins.github.GithubSettings.getInstance ( ) . setCreatePullRequestDefaultBranch ( getTargetBranch ( ) ) ; }
public static android.telecom.ParcelableCall toParcelableCall ( com.android.server.telecom.Call call , boolean includeVideoProvider , com.android.server.telecom.PhoneAccountRegistrar phoneAccountRegistrar , boolean supportsExternalCalls ) { return com.android.server.telecom.ParcelableCallUtils.toParcelableCall ( call , includeVideoProvider , phoneAccountRegistrar , supportsExternalCalls , com.android.server.telecom.ParcelableCallUtils.CALL_STATE_OVERRIDE_NONE ) ; }
public static void computeRemainder ( android.renderscript.cts.TestRemainder.ArgumentsFloatFloatFloat args ) { args.ulf = 64 ; args.ulfRelaxed = 128 ; args.out = android.renderscript.cts.CoreMathVerifier.remainderAndQuotient ( args.inX , args.inY ) . remainder ; }
protected void finalize ( ) throws java.lang.Throwable { helpDestroy ( ) ; super . finalize ( ) ; }
public void syncFailed ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project , @ org.jetbrains.annotations.NotNull final java.lang.String errorMessage ) { com.intellij.openapi.application.ApplicationManager.getApplication ( ) . invokeLater ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.intellij.openapi.ui.Messages.showErrorDialog ( ( "Error importing App Engine module : " + errorMessage ) , com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.ERROR_MESSAGE_TITLE ) ; } } ) ; }
public void Test11619_UnrecognizedTimeZoneID ( ) { android.icu.util.VTimeZone vzone = android.icu.util.VTimeZone.create ( "ABadTimeZoneId" ) ; this . assertNull ( "" , vzone ) ; }
public void registerContentObservers ( android.content.Context appContext , com.android.dialer.phonelookup.blockednumber.ContentObserverCallbacks contentObserverCallbacks ) { appContext.getContentResolver ( ) . registerContentObserver ( FilteredNumber.CONTENT_URI , true , new com.android.dialer.phonelookup.blockednumber.DialerBlockedNumberPhoneLookup.FilteredNumberObserver ( appContext , contentObserverCallbacks ) ) ; }
public void shouldRequireSupplicantStartupToLeaveInitialState ( ) throws java.lang.Exception { when ( mClientInterface.enableSupplicant ( ) ) . thenReturn ( false ) ; mWsm.setSupplicantRunning ( true ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( "InitialState" , getCurrentState ( ) . getName ( ) ) ; }
public java.util.List < java.lang.String > getBootClasspath ( ) { return java.util.Collections.singletonList ( getPath ( IAndroidTarget.ANDROID_JAR ) ) ; }
private com.android.jack.ir.ast.JStatement makeAssignStatement ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info , @ javax.annotation.Nonnull com.android.jack.ir.ast.JLocal local , com.android.jack.ir.ast.JExpression value ) { return new com.android.jack.ir.ast.JAsgOperation ( info , new com.android.jack.ir.ast.JLocalRef ( info , local ) , value ) . makeStatement ( ) ; }
public void onAbort ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "onAbort " + ( mCurrentCall ) ) ) ; onDisconnect ( ) ; }
public java.nio.CharBuffer asReadOnlyBuffer ( ) { java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter ( byteBuffer.asReadOnlyBuffer ( ) ) ; buf.limit = limit ; buf.position = position ; buf.mark = mark ; buf.byteBuffer.order = byteBuffer.order ; return buf ; }
public static void computeSign ( android.renderscript.cts.TestSign.ArgumentsFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.Math.signum ( args.inV ) ; }
public void onRecordLoaded ( android.os.AsyncResult ar ) { mEFpl = ( ( byte [ ] ) ( ar.result ) ) ; if ( com.android.internal.telephony.uicc.RuimRecords.DBG ) log ( ( "EF_PL=" + ( com.android.internal.telephony.uicc.IccUtils.bytesToHexString ( mEFpl ) ) ) ) ; }
public static native boolean BN_is_prime_ex ( long p , int nchecks , long cb ) ;
public void setup ( ) { put ( "Cipher.FOO" , MockCipherSpi.SpecificKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO SupportedKeyClasses" , ( ( this . getClass ( ) . getPackage ( ) . getName ( ) ) + ".MockKey" ) ) ; }
public static java.lang.String getTimeZoneDatabaseVersion ( ) { return libcore.util.ZoneInfoDB.getVersion ( ) ; }
public java.util.Collection < java.io.File > getProguardFiles ( ) { return com.google.common.collect.Lists.newArrayList ( ) ; }
public void testSetOnCancelListener ( ) throws java.lang.InterruptedException { HEAD ( 8 ) ; android.app.cts.a2b3a Merge ; android.app.cts.Removed assertion ; android.app.cts.in testPerformGlobalActionRe ; BRANCH ( 42.0F ) ; }
void resetIdleManagementLocked ( ) { mNextIdlePendingDelay = 0 ; mNextIdleDelay = 0 ; cancelAlarmLocked ( ) ; cancelSensingAlarmLocked ( ) ; cancelLocatingLocked ( ) ; stopMonitoringSignificantMotion ( ) ; mAnyMotionDetector.stop ( ) ; }
public void factory_ofEpochDay_aboveMax ( ) { java.time.LocalDate.ofEpochDay ( ( ( MAX_VALID_EPOCHDAYS ) + 1 ) ) ; }
public com.android.sched.vfs.InputVFile apply ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { return getDexInputVFileOfType ( jackOutputLibrary , type ) ; }
private native java.lang.reflect.Field [ ] getPublicDeclaredFields ( ) ;
public void cancelSession ( java.lang.String callingPackage , byte [ ] transactionId , @ android.telephony.euicc.EuiccCardManager.CancelReason int reason , com.android.internal.telephony.euicc.ICancelSessionCallback callback ) { checkCallingPackage ( callingPackage ) ; }
static android.telephony.SignalStrength convertHalSignalStrength ( com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { return new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , signalStrength.tdScdma.rscp , false ) ; }
public void testE1 ( ) { dot.junit.opcodes.aget_char.d.T_aget_char_1 t = new dot.junit.opcodes.aget_char.d.T_aget_char_1 ( ) ; char [ ] arr = new char [ 2 ] ; try { t.run ( arr , 2 ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
public void onConnectionServiceReleased ( com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionServiceFocus ) { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_RELEASE_CONNECTION_FOCUS , connectionServiceFocus ) . sendToTarget ( ) ; }
public com.android.sdklib.AndroidVersion getAndroidVersion ( ) { return version ; }
public java.lang.String toString ( ) { return ( ( ( "[" + ( mComponentName ) ) + " supportsExternal? " ) + ( mIsExternalCallsSupported ) ) + "]" ; }
public static java.lang.String hidePii ( java.lang.String s ) { return com.android.internal.telephony.sip.SipPhone.VDBG ? s : "xxxxx" ; }
public java.util.List < android.icu.util.TimeZone > lookupTimeZonesByCountry ( java.lang.String countryIso ) { countryIso = libcore.util.TimeZoneFinder.normalizeCountryIso ( countryIso ) ; libcore.util.TimeZoneFinder.CountryTimeZones countryTimeZones = findCountryTimeZones ( countryIso ) ; return countryTimeZones == null ? null : countryTimeZones.getTimeZones ( ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession t ) throws java.lang.Exception { try { com.android.jack.shrob.shrink.StructurePrinter.Visitor visitor = new com.android.jack.shrob.shrink.StructurePrinter.Visitor ( ) ; visitor.accept ( t.getTypesToEmit ( ) ) ; } finally { stream.close ( ) ; } }
public void testConstructor_NullSerial_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , "RSA" , 1024 , null , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , null , android.security.KeyPairGeneratorSpecTest.NOW , android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , 0 ) ; fail ( "Should throw IllegalArgumentException when startDate is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void onSearchBarClicked ( ) { com.android.dialer.logging.Logger.get ( mainActivity ) . logImpression ( DialerImpression.Type.NUI_CLICK_SEARCH_BAR ) ; openSearch ( com.google.common.base.Optional.absent ( ) ) ; }
public void setSession ( org.conscrypt.OpenSSLSessionImpl sslSession ) { this . sslSession = sslSession ; }
com.google.common.collect.ImmutableMap < K , V > map ( ) { return this ; }
native boolean nLoadSO ( boolean useNative ) ;
public void onNanDownCleanupDataPaths ( ) { if ( com.android.server.wifi.nan.WifiNanDataPathStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.nan.WifiNanDataPathStateManager.TAG , "onNanDownCleanupDataPaths" ) ; for ( com.android.server.wifi.nan.WifiNanDataPathStateManager.NanNetworkRequestInformation nnri : mNetworkRequestsCache.values ( ) ) { tearDownInterface ( nnri ) ; } mNetworkRequestsCache.clear ( ) ; }
public void testE1 ( ) { dot.junit.opcodes.rem_long.d.T_rem_long_1 t = new dot.junit.opcodes.rem_long.d.T_rem_long_1 ( ) ; try { t.run ( 1234567890123L , 0L ) ; fail ( "expected ArithmeticException" ) ; } catch ( java.lang.ArithmeticException ae ) { } }
static byte [ ] asBytes ( int [ ] x ) { byte [ ] z = new byte [ 16 ] ; org.bouncycastle.crypto.util.Pack.intToBigEndian ( x , z , 0 ) ; return z ; }
void setIsDebuggable ( java.lang.Boolean isDebuggable ) ;
private void incrementWaiters ( com.google.common.util.concurrent.Monitor.Guard guard ) { int waiters = ( guard.waiterCount ) ++ ; if ( waiters == 0 ) { activeGuards.add ( guard ) ; } }
private native void gattServerConnectNative ( int server_if , java.lang.String address , boolean is_direct , int transport ) ;
public com.android.layoutlib.api.SceneResult removeChild ( ) { return new com.android.layoutlib.api.SceneResult ( com.android.layoutlib.api.SceneResult.LayoutStatus.NOT_IMPLEMENTED ) ; }
protected void saveCredentials ( org.jetbrains.plugins.github.GithubAuthData auth ) { final org.jetbrains.plugins.github.GithubSettings settings = org.jetbrains.plugins.github.GithubSettings.getInstance ( ) ; settings.setCredentials ( myGithubLoginPanel.getHost ( ) , auth , myGithubLoginPanel.isSavePasswordSelected ( ) ) ; }
public final void err ( java.lang.String message ) { msg ( message , android.icu.dev.test.ERR , true , false ) ; }
public final com.android.dialer.spam.status.SpamMetadata getSpamMetadata ( ) { return com.android.dialer.spam.status.SpamMetadata.empty ( ) ; }
void onViewHolderCollapsed ( com.android.dialer.voicemail.listui.NewVoicemailViewHolder expandedViewHolder ) ;
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mPackageManager = getContext ( ) . getPackageManager ( ) ; mDpm = getContext ( ) . getSystemService ( android.app.admin.DevicePolicyManager.class ) ; mEnabledAppsBeforeTest = getPackageNameList ( ) ; }
public void attach ( @ android.annotation.NonNull android.net.wifi.aware.WifiAwareAttachCallback attachCallback , @ android.annotation.Nullable android.os.Handler handler ) { attach ( handler , null , attachCallback , null ) ; }
public static java.nio.file.attribute.FileTime from ( long value , java.util.concurrent.TimeUnit unit ) { return new java.nio.file.attribute.FileTime ( value , unit ) ; }
public java.lang.String getDefaultSkin ( ) { return "HVGA" ; }
public void supplyPin ( java.lang.String pin , android.os.Message onComplete ) { synchronized ( mLock ) { mCi.supplyIccPin ( pin , onComplete ) ; } }
public java.lang.String apply ( com.android.jack.plugin.Plugin plugin ) { return plugin.getVersion ( ) . getVersion ( ) ; }
public void doWork ( ) throws android.os.RemoteException { mService.hasFeatures ( mResponse , account , features ) ; }
public java.lang.String getActions ( ) { return "" ; }
public void visitEnd ( ) { if ( ( ! ( isInterface ) ) && ( ! ( interfaces.isEmpty ( ) ) ) ) { recordInheritedMethods ( ) ; stubMissingDefaultMethods ( interfaces ) ; } super . visitEnd ( ) ; }
public java.util.List < com.android.tools.perflib.vmtrace.Call > getCalls ( int threadId ) { return mCalls.get ( threadId ) ; }
public boolean enableCellBroadcastRange ( int startMessageId , int endMessageId ) { android.util.Log.e ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.LOG_TAG , "Error! Not implemented for CDMA." ) ; return false ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { getExpandableListView ( ) . invalidateViews ( ) ; com.android.music.MusicUtils.updateNowPlaying ( this ) ; }
public void perform ( android.support.test.espresso.UiController uiController , android.view.View view ) { ( ( android.support.v4.widget.DrawerLayout ) ( view ) ) . openDrawer ( GravityCompat.START ) ; }
public android.view.accessibility.AccessibilityNodeProvider call ( ) { return getAccessibilityNodeProvider ( ) ; }
public int load ( android.content.Context context , int resId , int priority ) { return 0 ; }
public boolean enableCellBroadcastRange ( int startMessageId , int endMessageId ) { android.util.Log.e ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.LOG_TAG , "Error! Not implemented for CDMA." ) ; return false ; }
public void setProxyChanged ( boolean proxy ) { proxyChanged = proxy ; }
public void copy1DRangeFrom ( int off , int count , int [ ] d ) { validateIsInt32 ( ) ; copy1DRangeFromUnchecked ( off , count , d ) ; }
public void test_withMinute_minuteTooLow ( ) { TEST_12_30_40_987654321.withMinute ( ( - 1 ) ) ; }
public void createTempDir ( ) throws java.lang.Exception { mTempDir = java.io.File.createTempFile ( "timeZoneUpdateTest" , null ) ; assertTrue ( mTempDir.delete ( ) ) ; assertTrue ( mTempDir.mkdir ( ) ) ; }
public void spawnDescendant ( com.android.apksig.SigningCertificateLineage.SignerConfig parent , com.android.apksig.SigningCertificateLineage.SignerConfig child ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.SignatureException , java.security.cert.CertificateEncodingException { com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities = new com.android.apksig.SigningCertificateLineage.SignerCapabilities.Builder ( ) . build ( ) ; spawnDescendant ( parent , signerCapabilities , child , signerCapabilities ) ; }
public java.lang.Object getViewKey ( ) { return null ; }
public void testPlurals ( ) throws java.lang.Exception { assertEquals ( "plurals.xml:3: Warning: The resource R.plurals.my_plural appears to be unused" , lintProject ( "res/values/strings4.xml" , "res/values/plurals.xml" , "AndroidManifest.xml" ) ) ; }
static void add ( java.lang.String locale , java.lang.String ... data ) { com.ibm.icu.text.ListFormatter.localeToData.put ( new com.ibm.icu.util.ULocale ( locale ) , new com.ibm.icu.text.ListFormatter ( data [ 0 ] , data [ 1 ] , data [ 2 ] , data [ 3 ] ) ) ; }
public java.lang.String getSubscriberId ( ) { return getSubscriberId ( android.telephony.TelephonyManager.getDefaultSubscription ( ) ) ; }
public int syncAddOrUpdateNetwork ( com.android.internal.util.AsyncChannel channel , com.android.server.wifi.WifiConfiguration config ) { android.os.Message resultMsg = channel.sendMessageSynchronously ( com.android.server.wifi.WifiStateMachine.CMD_ADD_OR_UPDATE_NETWORK , config ) ; int result = resultMsg.arg1 ; resultMsg.recycle ( ) ; return result ; }
public void testExact ( ) { org.junit.Assert.assertTrue ( new org.jacoco.core.matcher.WildcardMatcher ( "abc/def.txt" ) . apply ( "abc/def.txt" ) ) ; }
protected com.android.builder.core.AndroidBuilder getBuilder ( ) { return androidBuilder ; }
public libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder setMagic ( int magic ) { this . magic = magic ; return this ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsIntIntInt args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.max ( args.inV1 , args.inV2 ) ; }
private void checkIntentHelperInitializedAndReliabilityTrackingEnabled ( ) { mFakeIntentHelper.assertInitialized ( com.android.server.timezone.PackageTrackerTest.UPDATE_APP_PACKAGE_NAME , com.android.server.timezone.PackageTrackerTest.DATA_APP_PACKAGE_NAME ) ; mFakeIntentHelper.assertReliabilityTriggeringEnabled ( ) ; }
public void test_getSubjectAlternativeNames ( ) throws java.lang.Exception { org.apache.harmony.security.x509.GeneralName san1 = new org.apache.harmony.security.x509.GeneralName ( 1 , "rfc@822.Name" ) ; org.apache.harmony.security.x509.GeneralName san2 = new org.apache.harmony.security.x509.GeneralName ( 2 , "dNSName" ) ; org.apache.harmony.security.x509.GeneralNames sans = new org.apache.harmony.security.x509.GeneralNames ( ) ; sans.addName ( san1 ) ; sans.addName ( san2 ) ; tests.security.cert.X509CertSelectorTest.TestCert cert_1 = new tests.security.cert.X509CertSelectorTest.TestCert ( sans ) ; java.security.cert.X509CertSelector selector = new java.security.cert.X509CertSelector ( ) ; assertNull ( "Selector should return null" , selector.getSubjectAlternativeNames ( ) ) ; selector.setSubjectAlternativeNames ( sans.getPairsList ( ) ) ; assertTrue ( "The certificate should match the selection criteria." , selector.match ( cert_1 ) ) ; selector.getSubjectAlternativeNames ( ) . clear ( ) ; assertTrue ( ( "The modification of initialization object " + ( "should not affect the modification " + "of internal object." ) ) , selector.match ( cert_1 ) ) ; }
long getHiSyncId ( android.bluetooth.BluetoothDevice device ) { if ( ! ( mDeviceHiSyncIdMap.containsKey ( device ) ) ) { return android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID ; } return mDeviceHiSyncIdMap.get ( device ) ; }
public int getDefaultSim ( ) { return android.telephony.SubscriptionManager.getSlotId ( android.telephony.SubscriptionManager.getDefaultSubId ( ) ) ; }
com.android.ide.common.api.Point canvasToControlPoint ( int canvasX , int canvasY ) { int x = mHScale.translate ( canvasX ) ; int y = mVScale.translate ( canvasY ) ; return new com.android.ide.common.api.Point ( x , y ) ; }
public void test_until_TemporalUnit_nullUnit ( ) { TEST_2008_06.until ( TEST_2008_06 , null ) ; }
public native java.lang.Class < ? > getEnclosingClass ( ) ;
public long getExclusiveThreadTime ( ) { return ( getInclusiveThreadTime ( ) ) - ( mInclusiveThreadTimeInCallees ) ; }
public void stop ( ) { if ( ( mCurrentLogCatOutputReceiver ) != null ) { mCurrentLogCatOutputReceiver.mIsCancelled = true ; mCurrentLogCatOutputReceiver = null ; } mLogMessages = null ; mCurrentDevice = null ; }
public static java.lang.String getCallId ( android.telecom.Call call ) { if ( call != null ) { return call.toString ( ) ; } else return "" ; }
public static native double log ( double a ) ;
public boolean isUserMobileDataEnabled ( ) { return isUserMobileDataEnabled ( getSubId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) ) ; }
native void rsnAllocationData1D ( long con , long id , int off , int mip , int count , float [ ] d , int sizeBytes ) ;
public android.os.Bundle confirmCredentials ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; return null ; }
public static void computeSinh ( android.renderscript.cts.TestSinh.ArgumentsFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( java.lang.StrictMath.sinh ( args.in ) ) ) ; }
public static java.lang.String toUnicode ( java.lang.String input ) { return libcore.icu.NativeIDN.toUnicode ( input , 0 ) ; }
public static com.android.sdklib.io.IAbstractFile getManifest ( com.android.sdklib.io.IAbstractFolder projectFolder ) { com.android.sdklib.io.IAbstractFile file = projectFolder.getFile ( SdkConstants.FN_ANDROID_MANIFEST_XML ) ; if ( file.exists ( ) ) { return file ; } return null ; }
public void dispose ( ) { super . dispose ( ) ; mImage.dispose ( ) ; mImage = null ; }
public boolean apply ( E input ) { return ( predicate.apply ( input ) ) && ( collection.contains ( input ) ) ; }
private void decCallbackHandlerRefCount ( ) { synchronized ( android.net.ConnectivityManager.sCallbackRefCount ) { if ( ( android.net.ConnectivityManager.sCallbackRefCount.decrementAndGet ( ) ) == 0 ) { android.net.ConnectivityManager.sCallbackHandler.obtainMessage ( android.net.ConnectivityManager.CALLBACK_EXIT ) . sendToTarget ( ) ; android.net.ConnectivityManager.sCallbackHandler = null ; } } }
public static int BoolCond_IntVarCst ( boolean cond , int x ) { return cond ? x : 1 ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setSuiteVersionBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 32 ; suiteVersion_ = value ; onChanged ( ) ; return this ; }
void notifyFolderConfigChanged ( ) { if ( ( ( mDisableUpdates ) > 0 ) || ( ( mClient ) == null ) ) { return ; } if ( mClient.changed ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationClient.CHANGED_FOLDER ) ) { saveConstraints ( ) ; } }
public int getFolderVersion ( ) { return com.android.tools.lint.detector.api.ResourceContext.getFolderVersion ( file ) ; }
native void rsnScriptInvoke ( int con , int id , int slot ) ;
public void setup ( ) { put ( "Cipher.FOO/FOO/FOO" , MockCipherSpi.AllKeyTypes.class . getName ( ) ) ; put ( "Cipher.FOO/FOO/FOO SupportedKeyClasses" , "none" ) ; }
public java.util.Optional < java.lang.String > getAuthorization ( ) { return java.util.Optional.of ( mAuthorization ) ; }
public void testGetActivityThemes5 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " package=\'com.android.unittest\'>\n" + " <application\n" ) + " android:label=\'@string/app_name\'\n" ) + " android:theme=\'@style/NoBackground\'\n" ) + " android:name=\'.app.TestApp\' android:icon=\'@drawable/app_icon\'>\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.prefs.PrefsActivity\'\n" ) + " android:label=\'@string/prefs_title\' />\n" ) + "\n" ) + " <activity\n" ) + " android:name=\'.app.IntroActivity\'\n" ) + " android:label=\'@string/intro_title\'\n" ) + " android:theme=\'@android:style/Theme.Dialog\' />\n" ) + " </application>\n" ) + " <uses-sdk android:minSdkVersion=\'3\' android:targetSdkVersion=\'4\'/>\n" ) + "</manifest>\n" ) + "" ) ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenSize.XLARGE ) ) ; assertEquals ( "@style/NoBackground" , info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ; assertEquals ( "NoBackground" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ) ; java.util.Map < java.lang.String , java.lang.String > map = info.getActivityThemes ( ) ; assertEquals ( map.toString ( ) , 1 , map.size ( ) ) ; assertNull ( map.get ( "com.android.unittest.prefs.PrefsActivity" ) ) ; assertEquals ( "@android:style/Theme.Dialog" , map.get ( "com.android.unittest.app.IntroActivity" ) ) ; }
private long getVerificationTimeout ( ) { return android.provider.Settings.Secure.getLong ( mContext.getContentResolver ( ) , android.provider.Settings.Secure.PACKAGE_VERIFIER_TIMEOUT , com.android.server.pm.PackageManagerService.DEFAULT_VERIFICATION_TIMEOUT ) ; }
public static native int numberOfDeoptimizations ( ) ;
public static native float sin ( float angle ) ;
public void getDataCallList ( android.os.Message response ) { mCM.getDataCallList ( response ) ; }
public static java.lang.CharSequence getTtsSpannableLtrNumber ( java.lang.CharSequence number ) { return com.android.contacts.common.compat.PhoneNumberUtilsCompat.createTtsSpannable ( android.text.BidiFormatter.getInstance ( ) . unicodeWrap ( number.toString ( ) , TextDirectionHeuristics.LTR ) ) ; }
public static boolean delete ( @ com.intellij.openapi.util.io.NotNull java.io.File file ) { if ( NIO_FILE_API_AVAILABLE ) { return deleteRecursivelyNIO ( file ) ; } return com.intellij.openapi.util.io.FileUtil.deleteRecursively ( file ) ; }
public void testE2 ( ) { dot.junit.opcodes.invoke_static_range.d.T_invoke_static_range_6 t = new dot.junit.opcodes.invoke_static_range.d.T_invoke_static_range_6 ( ) ; try { t.run ( ) ; fail ( "expected UnsatisfiedLinkError" ) ; } catch ( java.lang.UnsatisfiedLinkError ule ) { } }
private void makeAppNotRespondingLocked ( com.android.server.am.ProcessRecord app , java.lang.String activity , java.lang.String shortMsg , java.lang.String longMsg ) { app.notResponding = true ; app.notRespondingReport = generateProcessError ( app , ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING , activity , shortMsg , longMsg , null ) ; startAppProblemLocked ( app ) ; app.stopFreezingAllLocked ( ) ; }
public static boolean hasMigratedToNewBlocking ( android.content.Context context ) { return com.android.dialer.strictmode.DialerStrictMode.bypass ( ( ) -> android.preference.PreferenceManager.getDefaultSharedPreferences ( context ) . getBoolean ( com.android.dialer.blocking.FilteredNumberCompat.HAS_MIGRATED_TO_NEW_BLOCKING_KEY , false ) ) ; }
public void setDataEnabled ( boolean enable ) { setDataEnabled ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) , enable ) ; }
public void execute ( com.android.monkeyrunner.MonkeyDevice device ) throws java.lang.Exception { long ms = ( ( long ) ( 1000.0F * ( howLongSeconds ) ) ) ; java.lang.Thread.sleep ( ms ) ; }
public void exit ( ) { tearDownInterfaces ( ) ; }
public void setResult ( java.lang.String resultFormat , java.lang.Object ... args ) { mAutomaticallyCloseOnTaskCompletion = false ; mDialog.setResult ( resultFormat , args ) ; }
void expectCapabilitiesWithout ( int capability , com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { com.android.server.ConnectivityServiceTest.CallbackInfo cbi = expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES , agent ) ; android.net.NetworkCapabilities.NetworkCapabilities nc = ( ( android.net.NetworkCapabilities.NetworkCapabilities ) ( cbi.arg ) ) ; org.junit.Assert.assertFalse ( nc.hasCapability ( capability ) ) ; }
public long get ( int index ) { return byteBuffer.getLong ( ( index * ( libcore.io.SizeOf.LONG ) ) ) ; }
public void testTable2 ( ) { com.android.utils.HtmlBuilder builder = new com.android.utils.HtmlBuilder ( ) ; builder.beginTable ( "valign=\"top\"" ) . addTableRow ( "Data1" , "Data2" ) . endTable ( ) ; assertEquals ( "<table><tr><td valign=\"top\">Data1</td><td valign=\"top\">Data2</td></tr></table>" , builder.getHtml ( ) ) ; }
public void test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6 ( ) throws java.lang.Exception { test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface ( org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6 , org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6 ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService create ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService renderService = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService ( editor ) ; return renderService ; }
public static int EqualTrueLhs ( boolean arg ) { return true != arg ? 3 : 5 ; }
public void run ( ) { synchronized ( this ) { if ( ( grid ) != null ) { grid.dispose ( ) ; grid = null ; zoom = model.getZoom ( ) ; } } }
public void setShowVoicemailButton ( boolean show ) { android.view.View view = findViewById ( R.id.dialpad_key_voicemail ) ; if ( view != null ) { view.setVisibility ( ( show ? android.view.View.VISIBLE : android.view.View.INVISIBLE ) ) ; } }
public static int $noinline$intSubAddSimplifyLeft ( int x , int y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int sub = x - y ; return sub + y ; }
public org.junit.rules.ExpectedException handleAssertionErrors ( ) { return this ; }
public java.util.List < com.android.ahat.heapdump.AhatInstance > getHardReverseReferences ( ) { return java.util.Arrays.asList ( mHardReverseReferences ) ; }
void setSite ( com.android.ahat.heapdump.Site site ) { mSite = site ; }
public static native boolean profileHasMethod ( boolean hot , java.lang.String profile , java.lang.reflect.Method method ) ;
public final void test_getLocalPrincipal ( ) throws java.lang.Exception { java.net.URL url = new java.net.URL ( "https://localhost:55555" ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( ) ) ) ; try { connection.getLocalPrincipal ( ) ; fail ( "IllegalStateException wasn't thrown" ) ; } catch ( java.lang.IllegalStateException expected ) { } javax.net.ssl.HttpsURLConnection con = new tests.api.javax.net.ssl.MyHttpsURLConnection ( new java.net.URL ( "https://www.fortify.net/" ) , "X.508" ) ; assertNull ( con.getLocalPrincipal ( ) ) ; con = new tests.api.javax.net.ssl.MyHttpsURLConnection ( new java.net.URL ( "https://www.fortify.net/" ) , "X.509" ) ; assertNotNull ( "Local principal is null" , con.getLocalPrincipal ( ) ) ; }
public com.android.sched.util.log.DummyTracer.DummyTracerEvent start ( @ javax.annotation.Nonnull com.android.sched.util.log.EventType type ) { return dummyEvent ; }
public static int getReleaseCode ( ) { return com.android.jack.test.toolchain.JackApiToolchainBase.releaseCode ; }
public java.lang.String getCompleteVoiceMailNumber ( ) { mContext.enforceCallingOrSelfPermission ( com.android.internal.telephony.PhoneSubInfo.CALL_PRIVILEGED , "Requires CALL_PRIVILEGED" ) ; java.lang.String number = mPhone.getVoiceMailNumber ( ) ; android.util.Log.d ( com.android.internal.telephony.PhoneSubInfo.LOG_TAG , "VM: PhoneSubInfo.getCompleteVoiceMailNUmber: " ) ; return number ; }
public void visitLookupSwitchInsn ( org.objectweb.asm.Label dflt , int [ ] keys , org.objectweb.asm.Label [ ] labels ) { printer.visitLookupSwitchInsn ( dflt , keys , labels ) ; printTypeOfOperandStackTop ( ) ; super . visitLookupSwitchInsn ( dflt , keys , labels ) ; }
com.google.common.collect.ImmutableList < java.io.File > getTestedApks ( int density , @ com.android.annotations.NonNull java.util.List < java.lang.String > abis ) ;
synchronized void nAllocationResize2D ( int id , int dimX , int dimY ) { validate ( ) ; rsnAllocationResize2D ( mContext , id , dimX , dimY ) ; }
private void updateConfigDisplay ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration fileConfig ) { java.lang.String current = fileConfig.toDisplayString ( ) ; mCurrentLayoutLabel.setText ( ( current != null ? current : "(Default)" ) ) ; }
public void validateSimCredentialWithEapAka ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential ( ) ; cred.simCredential.imsi = "1234*" ; cred.simCredential.eapType = android.net.wifi.EAPConstants.EAP_AKA ; org.junit.Assert.assertTrue ( cred.validate ( ) ) ; }
public native void putObjectVolatile ( java.lang.Object obj , long offset , java.lang.Object newValue ) ;
public < T extends com.android.sched.util.log.stats.Statistic > T getStatistic ( @ javax.annotation.Nonnull com.android.sched.util.log.stats.StatisticId < T > id ) { return dummyEvent.getStatistic ( id ) ; }
public boolean isSocket ( ) { return java.io.FileDescriptor.isSocket ( descriptor ) ; }
public void onClick ( android.view.View v ) { mAdapter.setShowBackground ( false ) ; }
public static java.lang.String getDefaultLocale ( ) { return org.chromium.base.LocaleUtils.getLocale ( java.util.Locale.getDefault ( ) ) ; }
private void parseAtr ( java.lang.String atr ) { mIsEuicc = false ; }
public java.util.List < com.android.jack.ir.ast.JAnnotation > getAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationType annotationType ) { return annotations.getAnnotation ( annotationType ) ; }
public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.GOOGLE_PLAY_FILTER_TOGGLE_RES ) ) . exists ( ) ; }
private void logIncoming ( java.lang.String msg , java.lang.Object ... params ) { android.telecom.Log.d ( this , ( "ConnectionService -> Telecom: " + msg ) , params ) ; }
public void setUp ( ) { mRequestQueue = mock ( com.android.volley.RequestQueue.class ) ; mImageCache = mock ( ImageLoader.ImageCache.class ) ; mImageLoader = new com.android.volley.toolbox.ImageLoader ( mRequestQueue , mImageCache ) ; }
public void clientCertificateRequested ( long s ) { fail ( "Server asked for client certificates" ) ; }
private boolean isValidSuffix ( ) { return ! ( path.toString ( ) . contains ( java.lang.String.valueOf ( separator ) ) ) ; }
private java.io.File getTimeZoneDataApkFile ( java.lang.String testId ) throws java.lang.Exception { java.lang.String resourceName = getTimeZoneDataApkResourceName ( testId ) ; return extractResourceToFile ( resourceName ) ; }
public void setVar ( int index , long v ) { mRS.nScriptSetVarJ ( getID ( mRS ) , index , v ) ; }
public void lookupJavaLangStringError1 ( ) throws com.android.jack.ir.ast.JTypeLookupException { boolean fail = false ; try { com.android.jack.gwt.BinaryLookup.lookup.getInterface ( CommonTypes.JAVA_LANG_STRING ) ; fail = true ; } catch ( java.lang.AssertionError e ) { } junit.framework.Assert.assertFalse ( fail ) ; }
public void onAudioRouteChanged ( android.telecom.Connection c , int audioRoute ) { java.lang.String id = mIdByConnection.get ( c ) ; if ( id != null ) { mAdapter.setAudioRoute ( id , audioRoute ) ; } }
public void testRefactor1_norefs ( ) throws java.lang.Exception { moveType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.CustomView1" , "src/com/example/refactoringtest/subpackage" , false , ( "CHANGES:\n" + ( ( ( "-------\n" + "* Move resource \'testRefactor1_norefs/src/com/example/refactoringtest/CustomView1.java\' to \'subpackage\'\n" ) + "\n" ) + "* Move resource 'testRefactor1_norefs/src/com/example/refactoringtest/CustomView1.java' to 'subpackage'" ) ) ) ; }
public void onRttModifyResponseReceived ( int status ) { if ( status == ( RttModifyStatus.SESSION_MODIFY_REQUEST_SUCCESS ) ) { sendRttInitiationSuccess ( ) ; } else { sendRttInitiationFailure ( status ) ; } }
public int add ( E element , int occurrences ) { throw new java.lang.UnsupportedOperationException ( ) ; }
com.google.common.collect.Multiset.Entry < E > transform ( E e ) { return com.google.common.collect.Multisets.immutableEntry ( e , 1 ) ; }
public void sendConnectionEvent ( java.lang.String id , java.lang.String event , android.os.Bundle extras ) throws java.lang.Exception { for ( com.android.internal.telecom.IConnectionServiceAdapter a : mConnectionServiceAdapters ) { a.onConnectionEvent ( id , event , extras ) ; } }
private static libcore.io.StructGroupReq makeGroupReq ( java.net.InetAddress gr_group , java.net.NetworkInterface networkInterface ) { int gr_interface = ( networkInterface != null ) ? networkInterface.getIndex ( ) : 0 ; return new libcore.io.StructGroupReq ( gr_interface , gr_group ) ; }
public java.lang.Object actual ( ) { return android.telecom.cts.CtsConnectionService.isServiceBound ( ) ; }
public static < T extends java.lang.reflect.Member > T reflectAs ( java.lang.Class < T > expected , java.lang.invoke.MethodHandle target ) { java.lang.invoke.MethodHandleImpl directTarget = java.lang.invoke.MethodHandles.getMethodHandleImpl ( target ) ; return ( ( T ) ( directTarget.getMemberInternal ( ) ) ) ; }
public void proceedAfterWildChar ( java.lang.String str ) { }
public final com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile ) { return createCallSession ( sessionId , profile , null ) ; }
public void testCanEncodechar ( ) throws java.nio.charset.CharacterCodingException { assertTrue ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( 'w' ) ) ; assertFalse ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( '슣' ) ) ; }
public void test_plusWeeks_negative ( ) { java.time.LocalDate t = TEST_2007_07_15.plusWeeks ( ( - 1 ) ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 7 , 8 ) ) ; }
public void visitLdcInsn ( java.lang.Object cst ) { handleCodeConstant ( cst ) ; }
public void reportUserSelection ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull java.lang.String number , @ android.support.annotation.NonNull android.telecom.PhoneAccountHandle phoneAccountHandle ) { }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/namespace.xml:2: Warning: Attribute is missing the Android namespace prefix [MissingPrefix]\n" + ( ( ( ( ( ( "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:id=\"@+id/newlinear\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" orientation=\"true\">\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/namespace.xml:3: Warning: Attribute is missing the Android namespace prefix [MissingPrefix]\n" ) + " <Button style=\"@style/setupWizardOuterFrame\" android.text=\"Button\" android:id=\"@+id/button1\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"></Button>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) + "" ) ) , lintFiles ( "res/layout/namespace.xml" ) ) ; }
public void addProviderWithNullConfig ( ) throws java.lang.Exception { org.junit.Assert.assertFalse ( mManager.addProvider ( null ) ) ; }
public com.android.server.pm.dex.PackageDexUsage.PackageUseInfo getPackageUseInfo ( java.lang.String packageName ) { return mPackageDexUsage.getPackageUseInfo ( packageName ) ; }
public void getEuiccInfo2 ( java.lang.String callingPackage , com.android.internal.telephony.euicc.IGetEuiccInfo2Callback callback ) { checkCallingPackage ( callingPackage ) ; }
public native double getDouble ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
private java.lang.String [ ] getPackageNames ( ) { return mContext.getPackageManager ( ) . getPackagesForUid ( android.os.Binder.getCallingUid ( ) ) ; }
private boolean hasAcceptedTos ( ) { if ( isVvm3 ( ) ) { return ( preferences.getInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.VVM3_TOS_VERSION_ACCEPTED_KEY , 0 ) ) >= ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_VVM3_TOS_VERSION ) ; } else { return ( preferences.getInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.DIALER_TOS_VERSION_ACCEPTED_KEY , 0 ) ) >= ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_DIALER_TOS_VERSION ) ; } }
public void updateCursor ( android.database.Cursor updatedCursor ) { this . cursor = updatedCursor ; notifyDataSetChanged ( ) ; }
public java.util.Set < java.io.File > getJniDirectories ( ) { return getJni ( ) . getSrcDirs ( ) ; }
public java.lang.Object expected ( ) { return false ; }
public void callSessionMultipartyStateChanged ( com.android.ims.internal.ImsCallSession session , boolean isMultiParty ) { }
protected void finalize ( ) { if ( com.android.internal.telephony.cdma.CDMAPhone.DBG ) android.util.Log.d ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "CDMAPhone finalized" ) ; if ( mWakeLock.isHeld ( ) ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "UNEXPECTED; mWakeLock is held when finalizing." ) ; mWakeLock.release ( ) ; } }
public void createImsFeature ( int subId , int feature ) throws android.os.RemoteException { }
public boolean getDataEnabled ( ) { return getDataEnabled ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) ; }
final boolean isPowered ( ) { return ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_CHARGING ) ) || ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_UNKNOWN ) ) ; }
public com.android.bluetooth.pbapclient.PbapClientConnectionHandler.Builder setLooper ( android.os.Looper loop ) { this . looper = loop ; return this ; }
private void initialization ( ) { buffer = java.nio.CharBuffer.allocate ( java.util.Scanner.DEFAULT_TRUNK_SIZE ) ; buffer.limit ( 0 ) ; matcher = delimiter.matcher ( buffer ) ; }
public final void onDeregistered ( com.android.ims.ImsReasonInfo info ) { onImsDisconnected ( info ) ; }
public java.lang.String getLine1AlphaTag ( ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "getLine1AlphaTag: not possible in CDMA" ) ; return null ; }
public void out ( java.lang.String message ) { mVerboseStream.println ( message ) ; }
public org.eclipse.swt.graphics.Color getBackground ( java.lang.Object element ) { return mTable.getDisplay ( ) . getSystemColor ( SWT.COLOR_LIST_BACKGROUND ) ; }
public void test009 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST009 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void test_equalsLjava_lang_Object ( ) throws java.lang.Exception { java.net.InetAddress ia1 = java.net.InetAddress.getByName ( "localhost" ) ; java.net.InetAddress ia2 = java.net.InetAddress.getByName ( "::1" ) ; assertEquals ( ia2 , ia1 ) ; }
public DST parseString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) { return convert ( codec.parseString ( context , string ) ) ; }
public void accept ( final org.objectweb.asm.MethodVisitor mv ) { mv.visitIntInsn ( opcode , operand ) ; }
public com.android.ide.eclipse.adt.internal.editors.layout.gle2.HardwareConfigHelper setOrientation ( com.android.resources.ScreenOrientation screenOrientation ) { mScreenOrientation = screenOrientation ; return this ; }
void expectAvailableAndValidatedCallbacks ( com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { expectAvailableCallbacks ( agent , false , com.android.server.ConnectivityServiceTest.TestNetworkCallback.TIMEOUT_MS ) ; expectCapabilitiesWith ( android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED , agent ) ; }
public synchronized void setLength ( int length ) { setLengthOnly ( length ) ; this . capacity = length ; }
public void test_getByName_empty ( ) throws java.lang.Exception { java.net.InetAddress inetAddress = java.net.InetAddress.getByName ( "" ) ; libcore.java.net.InetAddressTest.assertEquals ( libcore.java.net.InetAddressTest.LOOPBACK6_BYTES , "ip6-localhost" , inetAddress ) ; assertTrue ( inetAddress.isLoopbackAddress ( ) ) ; }
static android.telephony.SignalStrength convertHalSignalStrength ( com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { return new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , signalStrength.tdScdma.rscp ) ; }
public void fatalError ( org.xml.sax.SAXParseException e ) { validationError ( e.getMessage ( ) ) ; }
public void enterSoftAPMode ( ) { changeMode ( com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SOFT_AP_MODE ) ; }
public android.net.IpSecTransform.Builder setNattKeepalive ( int intervalSeconds ) { mConfig.nattKeepaliveInterval = intervalSeconds ; return this ; }
public final native int addAssetPath ( java.lang.String path ) ;
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { printer.visitMethodInsn ( opcode , owner , name , desc ) ; printTypeOfOperandStackTop ( ) ; super . visitMethodInsn ( opcode , owner , name , desc ) ; }
public static long Sub0 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg - 0 ; }
private static org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl castToOpenSSLSocket ( java.net.Socket socket ) { if ( ! ( socket instanceof org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ) ) { throw new java.lang.IllegalArgumentException ( ( "Socket not created by this factory: " + socket ) ) ; } return ( ( org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ) ( socket ) ) ; }
private void updateDefaultChannel ( ) { if ( com.intellij.openapi.application.impl.ApplicationInfoImpl.getShadowInstance ( ) . isEAP ( ) ) { myState.UPDATE_CHANNEL_TYPE = ChannelStatus.EAP_CODE ; } }
public void removeTransportModeTransforms ( java.net.DatagramSocket socket , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromDatagramSocket ( socket ) ) { removeTransportModeTransforms ( pfd , transform ) ; } }
public void goingToSleep ( ) { this . goingToSleep ( ) ; }
public static byte checkedCast ( long value ) { byte result = ( ( byte ) ( value ) ) ; com.google.common.base.Preconditions.checkArgument ( ( result == value ) , "Out of range: %s" , value ) ; return result ; }
protected void fillRandomFloats ( long seed , int fact , int offset , float [ ] inArray ) { android.renderscript.cts.RSUtils.genRandomFloats ( seed , 64 , 0 , inArray ) ; }
private java.lang.String getTargetPackage ( com.android.sdklib.xml.AndroidManifestParser.ManifestData manifestParser , java.lang.String runner ) { for ( com.android.sdklib.xml.AndroidManifestParser.Instrumentation instr : manifestParser.getInstrumentations ( ) ) { if ( instr.getName ( ) . equals ( runner ) ) { return instr.getTargetPackage ( ) ; } } return null ; }
public static boolean isSyncPending ( android.accounts.Account account , java.lang.String authority ) { try { return android.content.ContentResolver.getContentService ( ) . isSyncPending ( account , authority ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( "the ContentService should always be reachable" , e ) ; } }
public void run ( ) { try { rq.remove ( 1000L ) ; } catch ( java.lang.InterruptedException ie ) { isThrown = true ; } }
public android.net.IpSecTransform.Builder setUnderlyingNetwork ( android.net.Network net ) { mConfig.network = net ; return this ; }
public void onDestroy ( ) { com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkAppService.LOG_TAG , "onDestroy()" ) ; unregisterProcessObserver ( ) ; com.android.stk.StkAppService.sInstance = null ; waitForLooper ( ) ; mServiceLooper.quit ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main st = new Main ( ) ; st.$noinline$f ( ) ; }
public void setDefaultSmdpAddress ( java.lang.String callingPackage , java.lang.String address , com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback callback ) { checkCallingPackage ( callingPackage ) ; }
public com.android.internal.telephony.gsm.stk.Tone createFromParcel ( android.os.Parcel in ) { return com.android.internal.telephony.gsm.stk.Tone.values ( ) [ in.readInt ( ) ] ; }
public static float BoolCond_FloatVarVar ( boolean cond , float x , float y ) { return cond ? x : y ; }
protected java.lang.Iterable < ? extends com.android.dialer.rootcomponentgenerator.ProcessingStep > initSteps ( ) { return com.google.common.collect.ImmutableList.of ( new com.android.dialer.rootcomponentgenerator.MetadataGeneratingStep ( processingEnv ) , new com.android.dialer.rootcomponentgenerator.RootComponentGeneratingStep ( processingEnv ) ) ; }
public void visitLater ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Instance instance ) { if ( ! ( mSeen.contains ( instance.getId ( ) ) ) ) { mStack.push ( instance ) ; } }
public com.android.sdklib.repository.MajorRevision getMajorRevision ( ) { return revision ; }
public void compileOmnibus ( ) throws java.lang.Exception { com.android.jack.test.toolchain.AndroidToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.AndroidToolchain.class ) ; toolchain.srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( com.android.jack.compile.androidtree.dalvik.omnibus.OmnibusCompilationTest.BOOTCLASSPATH ) , com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "out" , ".zip" ) , true , com.android.jack.TestTools.getArtTestFolder ( "003-omnibus-opcodes" ) ) ; }
public final void putExtras ( java.lang.String connectionId , android.os.Bundle extras ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = connectionId ; args.arg2 = extras ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_PUT_EXTRAS , args ) . sendToTarget ( ) ; }
private static com.ibm.icu.util.IslamicCalendar newIslamic ( ) { com.ibm.icu.util.IslamicCalendar civilCalendar = new com.ibm.icu.util.IslamicCalendar ( ) ; civilCalendar.setType ( CalculationType.ISLAMIC ) ; return civilCalendar ; }
public void setListener ( com.android.ims.internal.IImsEcbmListener listener ) throws android.os.RemoteException { }
public boolean isDone ( ) { return mDone ; }
public com.google.mockwebserver.MockResponse setChunkedBody ( java.lang.String body , int maxChunkSize ) throws java.io.IOException { return setChunkedBody ( body.getBytes ( com.google.mockwebserver.MockWebServer.ASCII ) , maxChunkSize ) ; }
public long getTotalStats ( int type ) { android.util.Slog.w ( com.android.server.net.NetworkStatsService.TAG , "calling native method from Stats Service" ) ; return com.android.server.net.NetworkStatsService.nativeGetTotalStat ( type ) ; }
public void carrierActionSetMeteredApnsEnabled ( boolean enabled ) { if ( ( mDcTracker ) != null ) { mDcTracker.setApnsEnabledByCarrier ( enabled ) ; } }
public static final boolean isSurrogatePair ( char high , char low ) { return ( android.icu.lang.UCharacter.isHighSurrogate ( high ) ) && ( android.icu.lang.UCharacter.isLowSurrogate ( low ) ) ; }
public void getCellBroadcastSmsConfig ( android.os.Message response ) { android.util.Log.e ( com.android.internal.telephony.gsm.GSMPhone.LOG_TAG , "[GSMPhone] getCellBroadcastSmsConfig() is obsolete; use SmsManager" ) ; response.sendToTarget ( ) ; }
public void accept ( int callType , com.android.ims.ImsStreamMediaProfile profile ) { }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { java.lang.String fName = openBrowseDialog ( ) ; if ( fName == null ) { return ; } mTraceFilePathText.setText ( fName ) ; validateAndSetMessage ( ) ; }
public void initLocalPort ( int localPort ) { this . localport = localPort ; }
private void addScheduleInternal ( java.lang.String inputId , long channelId , long startTime , long endTime ) { mDataManager.addScheduledRecording ( com.android.tv.dvr.ScheduledRecording.builder ( inputId , channelId , startTime , endTime ) . setPriority ( mScheduleManager.suggestNewPriority ( ) ) . build ( ) ) ; }
public static com.google.common.base.Predicate < java.lang.CharSequence > containsPattern ( java.lang.String pattern ) { return new com.google.common.base.Predicates.ContainsPatternPredicate ( pattern ) ; }
void getAllItems ( android.icu.impl.ICUResource.Key key , android.icu.impl.ICUResourceBundleReader.ReaderValue readerValue , android.icu.impl.ICUResource.TableSink sink ) { android.icu.impl.ICUResourceBundleReader reader = wholeBundle.reader ; readerValue.reader = reader ; ( ( android.icu.impl.ICUResourceBundleReader.Table ) ( value ) ) . getAllItems ( reader , key , readerValue , sink ) ; }
public void setDataEnabled ( boolean enable ) { setDataEnabled ( getSubId ( android.telephony.SubscriptionManager.getDefaultDataSubscriptionId ( ) ) , enable ) ; }
public void onComplete ( int resultCode ) { callback.onComplete ( resultCode , null ) ; }
public static java.nio.DoubleBuffer allocate ( int capacity ) { if ( capacity < 0 ) { throw new java.lang.IllegalArgumentException ( ( "capacity < 0: " + capacity ) ) ; } return new java.nio.ReadWriteDoubleArrayBuffer ( capacity ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ( guard ) != null ) { guard.warnIfOpen ( ) ; } free ( ) ; } finally { super . finalize ( ) ; } }
private void saveScanInfo ( int id , android.telephony.NetworkScanRequest request , android.telephony.TelephonyScanManager.NetworkScanCallback callback ) { synchronized ( mScanInfo ) { mScanInfo.put ( id , new android.telephony.TelephonyScanManager.NetworkScanInfo ( request , callback ) ) ; } }
static com.google.currysrc.api.transform.AstTransformRule createMandatoryRule ( com.google.currysrc.api.transform.AstTransformer transformer ) { return new com.google.currysrc.api.transform.AstTransformRule ( transformer , com.google.currysrc.api.match.SourceMatchers.all ( ) , true ) ; }
public java.io.FileDescriptor getFileDescriptor ( ) { return fd ; }
public boolean answer ( com.android.server.wifi.WifiNative.ScanCapabilities capabilities ) { capabilities.max_scan_cache_size = java.lang.Integer.MAX_VALUE ; capabilities.max_scan_buckets = 8 ; capabilities.max_ap_cache_per_scan = com.android.server.wifi.scanner.WifiScanningServiceTest.MAX_AP_PER_SCAN ; capabilities.max_rssi_sample_size = 8 ; capabilities.max_scan_reporting_threshold = 10 ; capabilities.max_hotlist_bssids = 0 ; capabilities.max_significant_wifi_change_aps = 0 ; return true ; }
protected org.eclipse.ui.IWorkbenchWizard instanciateWizard ( org.eclipse.jface.action.IAction action ) { return new com.android.ide.eclipse.adt.internal.wizards.newproject.NewProjectWizard ( ) ; }
public void testRunEnded ( long elapsedTime , java.util.Map < java.lang.String , java.lang.String > runMetrics ) { mRunResult.setRunComplete ( true ) ; generateDocument ( mReportDir , elapsedTime ) ; }
protected org.bouncycastle.crypto.tls.TlsStreamCipher createRC4Cipher ( org.bouncycastle.crypto.tls.TlsContext context , int cipherKeySize , int macAlgorithm ) throws java.io.IOException { return new org.bouncycastle.crypto.tls.TlsStreamCipher ( context , createRC4StreamCipher ( ) , createRC4StreamCipher ( ) , createHMACDigest ( macAlgorithm ) , createHMACDigest ( macAlgorithm ) , cipherKeySize ) ; }
public void visitEnd ( ) { if ( ( ! ( isInterface ) ) && ( defaultMethodsDefined ( directInterfaces ) ) ) { recordInheritedMethods ( ) ; stubMissingDefaultMethods ( ) ; } super . visitEnd ( ) ; }
public void testExternalCallChangedToNonExternalCall ( ) { mCallsManagerListener.onExternalCallChanged ( ( ( com.android.server.telecom.Call ) ( mActiveCall ) ) , false ) ; waitForHandlerAction ( mFocusManagerUT.getHandler ( ) , com.android.server.telecom.tests.ConnectionServiceFocusManagerTest.CHECK_HANDLER_INTERVAL_MS ) ; assertTrue ( mFocusManagerUT.getAllCall ( ) . contains ( mActiveCall ) ) ; }
private long getAssetsChecksum ( ) { android.content.SharedPreferences sp = getContext ( ) . getSharedPreferences ( com.android.providers.telephony.CarrierIdProvider.PREF_FILE , Context.MODE_PRIVATE ) ; return sp.getLong ( com.android.providers.telephony.CarrierIdProvider.ASSETS_FILE_CHECKSUM_PREF_KEY , ( - 1 ) ) ; }
void onPostDialChar ( java.lang.String callId , char nextChar ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.onPostDialChar ( callId , nextChar ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void testTargetAnnotationInner ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/ApiTargetTest2.java:32: Error: Call requires API level 14 (current min is 3): android.widget.GridLayout#<init> [NewApi]\n" + ( ( ( " new GridLayout(null, null, 0);\n" + " ~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) + "" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "apicheck/ApiTargetTest2.java.txt=>src/test/pkg/ApiTargetTest2.java" , "apicheck/ApiTargetTest2.class.data=>bin/classes/test/pkg/ApiTargetTest2.class" , "apicheck/ApiTargetTest2$1.class.data=>bin/classes/test/pkg/ApiTargetTest2$1.class" , "apicheck/ApiTargetTest2$1$2.class.data=>bin/classes/test/pkg/ApiTargetTest2$1$2.class" , "apicheck/ApiTargetTest2$1$1.class.data=>bin/classes/test/pkg/ApiTargetTest2$1$1.class" ) ) ; }
native void rsnScriptReduceNew ( long con , long id , int slot , long [ ] ains , long aout , int [ ] limits ) ;
public java.io.File getPrebuiltDirectory ( org.gradle.nativeplatform.platform.Platform platform ) { return new java.io.File ( ndkDirectory , ( "prebuilt/android-" + ( com.android.build.gradle.ndk.internal.NdkHandler.ARCHITECTURE_STRING.get ( platform.getName ( ) ) ) ) ) ; }
public static byte $opt$getByteField ( Main m ) { return m.byteField ; }
public com.ibm.icu.text.SpoofChecker.Builder setRestrictionLevel ( com.ibm.icu.text.SpoofChecker.RestrictionLevel restrictionLevel ) { fRestrictionLevel = restrictionLevel ; fChecks |= com.ibm.icu.text.SpoofChecker.RESTRICTION_LEVEL ; return this ; }
private static void printUsage ( ) { }
public void testCompleteIfNextLineBraceStyle2 ( ) throws java.lang.Exception { com.intellij.psi.codeStyle.CodeStyleSettings settings = com.intellij.psi.codeStyle.CodeStyleSettingsManager.getSettings ( getProject ( ) ) ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; doTest ( ) ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; }
public int compare ( com.android.ahat.heapdump.AhatInstance a , com.android.ahat.heapdump.AhatInstance b ) { return java.lang.Long.compare ( b.getRetainedSize ( mHeap ) , a.getRetainedSize ( mHeap ) ) ; }
public java.lang.String getOriginalPackageName ( ) { if ( ( mType ) == ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { return getPackageName ( ) ; } return getPackageFromManifest ( ) ; }
public synchronized void setTextZoom ( int textZoom ) { if ( android.webkit.DebugFlags.TRACE_API ) android.util.Log.d ( com.android.webview.chromium.ContentSettingsAdapter.LOGTAG , ( "setTextZoom=" + textZoom ) ) ; mAwSettings.setTextZoom ( textZoom ) ; }
public int getLteSignalStrenght ( ) { return mLteSignalStrength ; }
public boolean onCreateOptionsMenu ( com.android.internal.telephony.gsm.stk.Menu menu ) { super . onCreateOptionsMenu ( menu ) ; menu.add ( 0 , StkApp.MENU_ID_END_SESSION , 1 , R.string.menu_end_session ) ; menu.add ( 0 , StkApp.MENU_ID_HELP , 2 , R.string.help ) ; return true ; }
public void testEquals_NonCharsetObject ( ) { tests.api.java.nio.charset.CharsetTest.MockCharset c1 = new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mock" , null ) ; assertFalse ( c1.equals ( "test" ) ) ; }
static int mainIndexReturned ( int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) ; return i ; }
private NetworkRequest.Builder newWifiRequestBuilder ( ) { return new android.net.NetworkRequest.Builder ( ) . addTransportType ( com.android.server.TRANSPORT_WIFI ) ; }
public void deleteActivityContainer ( android.app.IActivityContainer container ) throws android.os.RemoteException { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "deleteActivityContainer()" ) ; synchronized ( this ) { mStackSupervisor.deleteActivityContainer ( container ) ; } }
public boolean equals ( java.lang.Object obj ) { return ( obj instanceof com.android.jack.library.InputLibraryLocation ) && ( ( ( com.android.jack.library.InputLibraryLocation ) ( obj ) ) . getInputLibrary ( ) . equals ( getInputLibrary ( ) ) ) ; }
public void testMoveAppInternalToExternal ( ) { int installFlags = PackageManager.INSTALL_INTERNAL ; int moveFlags = PackageManager.MOVE_EXTERNAL_MEDIA ; boolean fail = false ; int result = PackageManager.MOVE_SUCCEEDED ; sampleMoveFromRawResource ( installFlags , moveFlags , fail , result ) ; }
public static short floatToIntToShort ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( value ) ) ; }
public void enter ( ) { mTimeoutMessage = new com.android.internal.util.WakeupMessage ( mContext , getHandler ( ) , com.android.server.wifi.nan.WifiNanStateManager.HAL_COMMAND_TIMEOUT_TAG , com.android.server.wifi.nan.WifiNanStateManager.MESSAGE_TYPE_RESPONSE_TIMEOUT , mCurrentCommand.arg1 , mCurrentTransactionId ) ; mTimeoutMessage.schedule ( ( ( android.os.SystemClock.elapsedRealtime ( ) ) + ( com.android.server.wifi.nan.WifiNanStateManager.WifiNanStateMachine.WaitForResponseState.NAN_COMMAND_TIMEOUT ) ) ) ; }
public void close ( ) { mSpi = android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX ; mCloseGuard.close ( ) ; }
public void setCrosshairLocation ( int x , int y ) { synchronized ( this ) { crosshairLocation = new com.android.hierarchyviewerlib.models.PixelPerfectModel.Point ( x , y ) ; } notifyCrosshairMoved ( ) ; }
public java.lang.String combineDateAndTime ( java.lang.String relativeDateString , java.lang.String timeString ) { return this . combinedDateAndTime.format ( new java.lang.Object [ ] { timeString , relativeDateString } , new java.lang.StringBuffer ( ) , null ) . toString ( ) ; }
private void pollStateDone ( ) { if ( mPhone.isPhoneTypeGsm ( ) ) { pollStateDoneGsm ( ) ; } else if ( mPhone.isPhoneTypeCdma ( ) ) { pollStateDoneCdma ( ) ; } else { pollStateDoneCdmaLte ( ) ; } }
private static java.net.Inet6Address localhost6 ( ) throws java.lang.Exception { return ( ( java.net.Inet6Address ) ( java.net.InetAddress.getByAddress ( "localhost" , libcore.java.net.InetAddressTest.LOOPBACK6_BYTES ) ) ) ; }
public static void sendWifiScanAvailable ( android.content.BroadcastReceiver broadcastReceiver , android.content.Context context , int scanAvailable ) { android.content.Intent intent = new android.content.Intent ( android.net.wifi.WifiManager.WIFI_SCAN_AVAILABLE ) ; intent.putExtra ( WifiManager.EXTRA_SCAN_AVAILABLE , scanAvailable ) ; broadcastReceiver.onReceive ( context , intent ) ; }
void onVideoStateChanged ( com.android.server.telecom.Call call ) ;
public int setProvisionedValue ( int item , int value ) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.FAILED ; }
public void test_F32_4_SCALE05_20_inSqure ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.FLOAT_32 , 4 , 0.5F , 2.0F ) ; checkError ( ) ; }
public void testCanStart ( ) { if ( ( android.os.Looper.myLooper ( ) ) == null ) { android.os.Looper.prepare ( ) ; } com.android.bluetooth.avrcp.Avrcp a = com.android.bluetooth.avrcp.Avrcp.make ( getContext ( ) ) ; }
protected void setUp ( ) { f = new java.io.File ( java.lang.System.getProperty ( "user.home" ) , "reader.tst" ) ; if ( f.exists ( ) ) { if ( ! ( f.delete ( ) ) ) { fail ( "Unable to delete test file" ) ; } } }
public void dispose ( ) { super . dispose ( ) ; transform.dispose ( ) ; inverse.dispose ( ) ; }
private void sendCvvmMessage ( java.lang.String request , android.app.PendingIntent sentIntent ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) . append ( request ) ; sb.append ( OmtpConstants.SMS_PREFIX_SEPARATOR ) ; appendField ( sb , "dt" , "15" ) ; sendSms ( sb.toString ( ) , sentIntent ) ; }
public void binderDied ( ) { android.util.Slog.v ( com.android.server.fingerprint.FingerprintService.TAG , "fingerprintd died" ) ; mDaemon = null ; handleError ( mHalDeviceId , FingerprintManager.FINGERPRINT_ERROR_HW_UNAVAILABLE ) ; }
public static com.android.internal.content.NativeLibraryHelper.Handle create ( android.content.pm.PackageParser.PackageLite lite ) throws java.io.IOException { return com.android.internal.content.NativeLibraryHelper.Handle.create ( lite.getAllCodePaths ( ) , lite.multiArch ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int slotId , int featureType , int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { return null ; }
protected java.util.Collection < ? extends com.android.jack.server.HasVersion > getVersionnedElements ( ) { return jackServer.getInstalledJacks ( ) ; }
private static void enableComponent ( android.content.Context context ) { context.getPackageManager ( ) . setComponentEnabledSetting ( new android.content.ComponentName ( context , "com.android.dialer.main.impl.MainActivity" ) , PackageManager.COMPONENT_ENABLED_STATE_ENABLED , PackageManager.DONT_KILL_APP ) ; }
void writeSummaryFromParcelLocked ( android.os.Parcel out ) { out.writeInt ( mCount ) ; out.writeInt ( ( ( mCount ) - ( mLoadedCount ) ) ) ; }
native long rsnScriptFieldIDCreate ( long con , long sid , int slot ) ;
public void stop ( ) { mUpstreamLinkProperties = null ; mHwInterface.stopOffloadControl ( ) ; mControlInitialized = false ; mConfigInitialized = false ; }
public void onConferenceableCallsChanged ( android.telecom.Call call , java.util.List < android.telecom.Call > conferenceableCalls ) { android.util.Log.i ( android.telecom.cts.TAG , ( ( ( "onConferenceableCallsChanged, Call: " + call ) + ", Conferenceables: " ) + conferenceableCalls ) ) ; }
public boolean enableNetworkWithoutConnect ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "enableNetworkWithoutConnect nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( ( ( "ENABLE_NETWORK " + netId ) + " " ) + "no-connect" ) ) ; }
public static com.android.jack.api.JackProvider.SubReleaseKind getSubReleaseKind ( ) { return com.android.jack.test.toolchain.JackApiToolchainBase.subReleaseKind ; }
public long getTotalSize ( ) { long total = 0 ; for ( int i = 0 ; i < ( mSizesByHeap.length ) ; i ++ ) { total += mSizesByHeap [ i ] ; } return total ; }
public int getCnapNamePresentation ( ) { return 0 ; }
private static com.android.ide.eclipse.gltrace.state.GLStateType getTextureUnitTargetName ( com.android.ide.eclipse.gldebugger.GLEnum target ) { if ( target == ( com.android.ide.eclipse.gldebugger.GLEnum.GL_TEXTURE_BINDING_CUBE_MAP ) ) { return com.android.ide.eclipse.gltrace.state.GLStateType.TEXTURE_BINDING_CUBE_MAP ; } else { return com.android.ide.eclipse.gltrace.state.GLStateType.TEXTURE_BINDING_2D ; } }
com.android.ide.eclipse.adt.editors.layout.gscripts.Point canvasToControlPoint ( int canvasX , int canvasY ) { int x = mHScale.translate ( canvasX ) ; int y = mVScale.translate ( canvasY ) ; return new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( x , y ) ; }
static long $opt$NegLong ( long a ) { return - a ; }
boolean isValid ( ) { return true ; }
public void testConstructor_NullEndDate_Failure ( ) throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec ( getContext ( ) , android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.KeyPairGeneratorSpecTest.TEST_DN_1 , android.security.KeyPairGeneratorSpecTest.SERIAL_1 , android.security.KeyPairGeneratorSpecTest.NOW , null , 0 ) ; fail ( "Should throw IllegalArgumentException when keystoreAlias is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void testDeleteSdcard ( ) { deleteFromRawResource ( PackageManager.INSTALL_EXTERNAL , 0 ) ; }
public java.util.List < java.io.File > getImportedJackLibrary ( ) { return options.getJayceImport ( ) ; }
public java.io.File getAidlDir ( ) { return new java.io.File ( mRoot , "aidl" ) ; }
public void run ( ) { view.requestLayout ( ) ; }
public void runLogService ( java.lang.String logname , com.android.ddmlib.log.LogReceiver receiver ) throws java.io.IOException { com.android.ddmlib.AdbHelper.runLogService ( AndroidDebugBridge.sSocketAddr , this , logname , receiver ) ; }
private int writeShort ( java.io.OutputStream os , int i ) throws java.io.IOException { os.write ( ( i & 255 ) ) ; os.write ( ( ( i > > 8 ) & 255 ) ) ; return i ; }
void setUp ( ) { createChannels ( ) ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , false ) ; status = READY ; delay ( ) ; }
private void notifyDexLoad ( com.android.server.pm.dex.DexManagerTests.TestData testData , java.util.List < java.lang.String > dexPaths , int loaderUserId ) { mDexManager.notifyDexLoad ( testData.mPackageInfo.applicationInfo , dexPaths , testData.mLoaderIsa , loaderUserId ) ; }
private static boolean isDalvikAnnotation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationLiteral annotation ) { java.lang.String annotationType = com.android.jack.ecj.loader.jast.LoaderUtils.getSignatureFormatter ( ) . getName ( annotation.getType ( ) ) ; return com.android.jack.ecj.loader.jast.AnnotationUtils.dalvikAnnotations.contains ( annotationType ) ; }
public void setUp ( ) { mAccountManager = mock ( android.accounts.AccountManager.class ) ; mFuture = mock ( android.accounts.AccountManagerFuture.class ) ; mAccount = new android.accounts.Account ( "coolperson" , "cooltype" ) ; mAuthenticator = new com.android.volley.toolbox.AndroidAuthenticator ( mAccountManager , mAccount , "cooltype" , false ) ; }
public TestCaseBuilder addCanvasClient ( java.lang.String debugString , android.uirendering.cts.testinfrastructure.CanvasClient canvasClient , boolean useHardware ) { }
public void test3rdPartyTests ( ) throws java.lang.Exception { runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_TEST_VERSION , new java.io.File ( testDir , "3rdPartyTests" ) , java.util.Collections.< java.lang.String > emptyList ( ) , "clean" , "deviceCheck" ) ; }
public native boolean setPermission ( java.io.File f , int access , boolean enable , boolean owneronly ) ;
public void testMultilineResultParse ( ) throws java.io.IOException { java.lang.String result = com.android.monkeyrunner.adb.AdbMonkeyDeviceTest.getResource ( "multiline_instrument_result.txt" ) ; java.util.Map < java.lang.String , java.lang.Object > convertedResult = com.android.monkeyrunner.adb.AdbMonkeyDevice.convertInstrumentResult ( result ) ; assertEquals ( com.android.monkeyrunner.adb.AdbMonkeyDeviceTest.MULTILINE_RESULT , convertedResult.get ( "stream" ) ) ; }
public java.util.Collection < ? extends com.android.sched.vfs.InputVElement > list ( ) { return dir.list ( ) ; }
public void routeAids ( java.lang.String aid , int route ) { android.os.Message msg = mHandler.obtainMessage ( ) ; msg.what = com.android.nfc.NfcService.MSG_ROUTE_AID ; msg.arg1 = route ; msg.obj = aid ; mHandler.sendMessage ( msg ) ; }
public static com.android.internal.telephony.NitzData createForTests ( int zoneOffsetMillis , java.lang.Integer dstOffsetMillis , long utcTimeMillis , java.util.TimeZone timeZone ) { return new com.android.internal.telephony.NitzData ( "Test data" , zoneOffsetMillis , dstOffsetMillis , utcTimeMillis , timeZone ) ; }
public void test12_alias_dup ( ) throws java.lang.Exception { processTestFiles ( ) ; }
static java.nio.DoubleBuffer asDoubleBuffer ( java.nio.ByteBuffer byteBuffer ) { java.nio.ByteBuffer slice = byteBuffer.slice ( ) ; slice.order ( byteBuffer.order ( ) ) ; return new java.nio.DoubleToByteBufferAdapter ( slice ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.Intent intent ) { return getCarrierPackageNamesForIntentAndPhone ( intent , android.telephony.TelephonyManager.getDefaultPhone ( ) ) ; }
public void setCurrentUserHandle ( android.os.UserHandle userHandle ) { if ( userHandle == null ) { com.android.server.telecom.Log.d ( this , "setCurrentUserHandle, userHandle = null" ) ; userHandle = java.lang.Process.myUserHandle ( ) ; } com.android.server.telecom.Log.d ( this , "setCurrentUserHandle, %s" , userHandle ) ; mCurrentUserHandle = userHandle ; }
public void testHasClassName ( ) { assertTrue ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasClassName ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.CLS ) . matches ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.c ) ) ; assertTrue ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasClassName ( org.hamcrest.Matchers.equalTo ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.CLS ) ) . matches ( android.support.test.espresso.intent.matcher.ComponentNameMatchersTest.c ) ) ; }
protected void onDestroy ( ) { super . onDestroy ( ) ; mChatService.stop ( ) ; }
public void testWildcardMatchesChildDomain ( ) { assertFalse ( verifier.verifyHostName ( "a.b.c.d" , "*.c.d" ) ) ; }
com.google.common.util.concurrent.ListenableFuture < com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > > bulkUpdate ( com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo > existingInfoMap ) ;
public void startJankRecorder ( java.lang.String eventName ) { }
boolean disable ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; debugLog ( "disable() called..." ) ; android.os.Message m = mAdapterStateMachine.obtainMessage ( AdapterState.BLE_TURN_OFF ) ; mAdapterStateMachine.sendMessage ( m ) ; return true ; }
public com.android.ide.common.res2.MergingException addFile ( @ com.android.annotations.NonNull java.io.File file ) { mFilePositions.add ( new com.android.ide.common.blame.FilePosition ( file , com.android.ide.common.blame.SourcePosition.UNKNOWN ) ) ; return this ; }
public void onCallStateChanged ( android.content.Context context , int newState ) { }
public java.util.List < java.lang.Class < ? extends lombok.ast.Node > > getApplicableNodeTypes ( ) { return java.util.Collections.< java.lang.Class < ? extends lombok.ast.Node > > singletonList ( lombok.ast.MethodDeclaration.class ) ; }
public void stopTethering ( int type ) { throw new java.lang.RuntimeException ( "not implemented" ) ; }
protected void dispose ( ) { for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile file : mFiles ) { file.dispose ( ) ; } mFiles.clear ( ) ; }
static double $opt$ShortToDouble ( short a ) { return ( ( double ) ( a ) ) ; }
public com.android.ims.internal.IImsRegistration getRegistration ( int i ) throws android.os.RemoteException { return null ; }
public void onServiceDisconnected ( android.content.ComponentName name ) { mWapPushMan = null ; if ( false ) android.util.Log.v ( com.android.internal.telephony.WapPushOverSms.LOG_TAG , "wappush manager disconnected." ) ; rebindWapPushManager ( ) ; }
private static dalvik.system.PathClassLoader createSystemServerClassLoader ( java.lang.String systemServerClasspath , int targetSdkVersion ) { java.lang.String librarySearchPath = java.lang.System.getProperty ( "java.library.path" ) ; return com.android.internal.os.PathClassLoaderFactory.createClassLoader ( systemServerClasspath , librarySearchPath , null , java.lang.ClassLoader.getSystemClassLoader ( ) , targetSdkVersion , true ) ; }
void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameter loading ) ;
boolean isZipAlign ( ) ;
public void bool ( boolean v ) throws java.io.IOException { mBuffer [ 0 ] = ( ( byte ) ( ( v ) ? 1 : 0 ) ) ; write ( 1 ) ; }
public static native long SSL_get_mode ( int ssl ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; if ( ( mResourceType ) == ( com.android.ide.eclipse.adt.internal.resources.ResourceType.STRING ) ) { createNewString ( ) ; } }
void settingsSecurePutIntForUser ( java.lang.String key , int value , int userId ) ;
public void testVFE16 ( ) { try { new dot.junit.opcodes.iget_wide.d.T_iget_wide_5 ( ) . run ( ) ; fail ( "expected a IncompatibleClassChangeError exception" ) ; } catch ( java.lang.IncompatibleClassChangeError e ) { } }
private void checkOpenAndConnected ( ) throws java.net.SocketException { if ( ! ( channel.isOpen ( ) ) ) { throw new java.net.SocketException ( "Socket is closed" ) ; } if ( ! ( channel.isConnected ( ) ) ) { throw new java.net.SocketException ( "Socket is not connected" ) ; } }
public com.android.sdklib.internal.androidTarget.IOptionalLibrary [ ] getOptionalLibraries ( ) { return mOptionalLibraries ; }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsIntIntIntInt args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.min ( args.inMaxValue , java.lang.StrictMath.max ( args.inValue , args.inMinValue ) ) ; }
public void tearDown ( ) throws java.lang.IllegalAccessException , java.lang.NoSuchMethodException , java.lang.reflect.InvocationTargetException { com.android.bluetooth.TestUtils.clearAdapterService ( mMockAdapterService ) ; mMockAdapterService = null ; mProfiles = null ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { accept ( java.lang.Integer.valueOf ( getResultCode ( ) ) ) ; }
public static void setAppLayerName ( java.lang.String name , java.lang.String layer ) { com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mAppLayerName = name ; com.android.graphics.benchmark.metric.GraphicsBenchmarkMetricCollector.mTargetLayer = layer ; }
public void onFailedUnknownCall ( com.android.server.telecom.Call call ) { com.android.server.telecom.Log.i ( this , "onFailedUnknownCall for call %s" , call ) ; setCallState ( call , CallState.DISCONNECTED , "failed unknown call" ) ; call.removeListener ( this ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { assert ( cfg.getMarker ( com.android.jack.transformations.ssa.SsaBasicBlockSplitterMarker.class ) ) == null ; edgeSplit ( cfg ) ; cfg.addMarker ( SsaBasicBlockSplitterMarker.INSTANCE ) ; }
public void testBridge001 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( BRIDGE001 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . compileAndRunTest ( ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%1$s|%2$s|%3$s|%4$s|%5$s" , mAnyDensity , mResizeable , mSmallScreens , mNormalScreens , mLargeScreens ) ; }
public android.telephony.mbms.DownloadRequest build ( ) { return new android.telephony.mbms.DownloadRequest ( fileServiceId , source , subscriptionId , appIntent , version ) ; }
public com.google.common.base.CharMatcher precomputed ( ) { return this ; }
public void testRipple ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "res/drawable/ripple.xml:1: Error: <ripple> requires API level 21 (current min is 14) [NewApi]\n" + "<ripple\n" ) + "^\n" ) + "res/drawable/ripple.xml:4: Warning: Attribute \"tintMode\" is only used in API level 21 and higher (current min is 14) [UnusedAttribute]\n" ) + " android:tintMode=\"src_over\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 1 warnings\n" ) ) , lintProject ( "apicheck/minsdk14.xml=>AndroidManifest.xml" , "apicheck/ripple.xml=>res/drawable/ripple.xml" ) ) ; }
void onSearchCompleted ( int connId , int status ) throws android.os.RemoteException { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "onSearchCompleted() - connId=" + connId ) + ", status=" ) + status ) ) ; continueSearch ( connId , status ) ; }
public com.google.common.base.Objects.ToStringHelper addValue ( boolean value ) { addHolder ( ) . builder.append ( value ) ; return this ; }
public java.lang.Void call ( ) throws java.lang.Exception { try { server.startHandshake ( ) ; fail ( ) ; } catch ( javax.net.ssl.SSLHandshakeException expected ) { } return null ; }
private void handleSetVPMessage ( ) { mPhone.getEnhancedVoicePrivacy ( android.os.Message.obtain ( mGetOptionComplete , com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED ) ) ; }
public void testEncode_String_NullEncoder ( ) { tests.api.java.nio.charset.CharsetTest.MockCharset2 c = new tests.api.java.nio.charset.CharsetTest.MockCharset2 ( "mock2" , null ) ; try { c.encode ( "hehe" ) ; fail ( "Should throw NullPointerException!" ) ; } catch ( java.lang.NullPointerException e ) { } }
public void test_EUC_JP_replacement_character ( ) throws java.lang.Exception { assertEncodes ( java.nio.charset.Charset.forName ( "EUC-JP" ) , "�" , 244 , 254 ) ; }
private void assertNoTombstone ( java.lang.String alias ) { assertTrue ( org.conscrypt.TrustedCertificateStore.isUser ( alias ) ) ; assertFalse ( org.conscrypt.TrustedCertificateStoreTest.file ( alias ) . exists ( ) ) ; }
private static native java.lang.String nativeGetString ( int obj , int idx ) ;
public void registrationConnectedWithRadioTech ( int imsRadioTech ) { if ( com.android.ims.ImsManager.DBG ) { com.android.ims.ImsManager.log ( ( "registrationConnectedWithRadioTech :: imsRadioTech=" + imsRadioTech ) ) ; } if ( ( mListener ) != null ) { mListener.onImsConnected ( ) ; mListener.onImsConnected ( imsRadioTech ) ; } }
public com.android.build.gradle.api.GroupableProductFlavor previous ( ) { return immutableObjectProvider.getProductFlavor ( baseIterator.previous ( ) ) ; }
public void test_minus_longTemporalUnit_negativeMinutes ( ) { java.time.LocalTime t = TEST_12_30_40_987654321.minus ( ( - 25 ) , java.time.temporal.ChronoUnit.MINUTES ) ; org.testng.Assert.assertEquals ( t , java.time.LocalTime.of ( 12 , 55 , 40 , 987654321 ) ) ; }
synchronized void reportConnectionEvent ( byte event ) { mLastMileLogger.reportConnectionEvent ( event ) ; if ( event == ( CONNECTION_EVENT_FAILED ) ) { mPacketFatesForLastFailure = fetchPacketFates ( ) ; } }
private void printProblem ( @ javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel , @ javax.annotation.Nonnull java.lang.String message ) { printProblem ( problemLevel , message , null , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) ) ; }
static org.bouncycastle.asn1.ASN1Encodable extractParameters ( java.security.AlgorithmParameters params ) throws org.bouncycastle.cms.CMSException { try { return org.bouncycastle.jcajce.JcaJceUtils.extractParameters ( params ) ; } catch ( java.io.IOException e ) { throw new org.bouncycastle.cms.CMSException ( ( "cannot extract parameters: " + ( e.getMessage ( ) ) ) , e ) ; } }
private java.nio.ByteBuffer getBuffer ( long page ) { return getBuffer ( page , true ) ; }
public void setup ( ) { put ( "Signature.FOO" , libcore.java.security.ProviderTest.MockSpi.class . getName ( ) ) ; put ( "Signature.FOO SupportedKeyFormats" , new libcore.javax.crypto.MockKey ( ) . getFormat ( ) ) ; }
public android.telephony.euicc.EuiccInfo getEuiccInfo ( ) { if ( ! ( isEnabled ( ) ) ) { return null ; } try { return getIEuiccController ( ) . getEuiccInfo ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void addU8 ( android.support.v8.renderscript.Short3 v ) { mN.addU8 ( new android.support.v8.renderscript.Short3 ( v.x , v.y , v.z ) ) ; }
private void checkNoName ( java.net.SocketAddress sa ) { java.net.InetSocketAddress isa = ( ( java.net.InetSocketAddress ) ( sa ) ) ; assertEquals ( 0 , isa.getAddress ( ) . getAddress ( ) . length ) ; }
public void loadAll ( ) { com.android.ide.eclipse.adt.internal.resources.ResourceType [ ] types = getAvailableResourceTypes ( ) ; for ( com.android.ide.eclipse.adt.internal.resources.ResourceType type : types ) { checkAndUpdate ( type ) ; } }
public void onGetDescriptor ( java.lang.String address , int srvcType , int srvcInstId , android.os.ParcelUuid srvcUuid , int charInstId , android.os.ParcelUuid charUuid , int descrInstId , android.os.ParcelUuid descrUuid ) throws android.os.RemoteException { }
public void sendRttRequest ( ) { setRttStreams ( true ) ; mConnectionService.startRtt ( this , getInCallToCsRttPipeForCs ( ) , getCsToInCallRttPipeForCs ( ) ) ; }
public static int ReturnIntMax ( ) { float imm = 1.0E34F ; return ( ( int ) ( imm ) ) ; }
public void run ( ) { com.google.gct.login.GoogleLogin.getInstance ( ) . logIn ( message ) ; }
private java.lang.String getKey ( java.lang.String hostname , int port ) { return ( ( hostname + ":" ) + ( java.lang.String.valueOf ( port ) ) ) . toLowerCase ( ) ; }
private static void log ( java.lang.String s ) { android.telephony.Rlog.w ( android.telephony.CellIdentityWcdma.LOG_TAG , s ) ; }
synchronized void onDeviceStateChanged ( com.android.bluetooth.hfp.HeadsetDeviceState deviceState ) { broadCastMessageToStateMachines ( HeadsetStateMachine.DEVICE_STATE_CHANGED , deviceState ) ; }
public void getClipResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , int var2 ) { }
public void refreshPlugins ( boolean reloadOpenPages ) { if ( ( mWebViewCore ) != null ) { mWebViewCore.sendMessage ( EventHub.REFRESH_PLUGINS , reloadOpenPages ) ; } }
public android.net.wifi.nan.PublishConfig.Builder setEnableTerminateNotification ( boolean enable ) { mEnableTerminateNotification = enable ; return this ; }
public static boolean isLowSurrogate ( char ch ) { return ( ch >= ( android.icu.lang.UCharacter.MIN_LOW_SURROGATE ) ) && ( ch <= ( android.icu.lang.UCharacter.MAX_LOW_SURROGATE ) ) ; }
public static com.android.bluetooth.opp.BluetoothOppManager getInstance ( android.content.Context context ) { synchronized ( com.android.bluetooth.opp.BluetoothOppManager.INSTANCE_LOCK ) { if ( ( com.android.bluetooth.opp.BluetoothOppManager.INSTANCE ) == null ) { com.android.bluetooth.opp.BluetoothOppManager.INSTANCE = new com.android.bluetooth.opp.BluetoothOppManager ( ) ; } com.android.bluetooth.opp.BluetoothOppManager.INSTANCE.init ( context ) ; return com.android.bluetooth.opp.BluetoothOppManager.INSTANCE ; } }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setBuildIdBytes ( com.android.vts.proto.ByteString value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 8 ; buildId_ = value ; onChanged ( ) ; return this ; }
org.eclipse.core.resources.IProject getProject ( ) { if ( ( mChooseAssetPage ) != null ) { return mChooseAssetPage.getProject ( ) ; } else { return mInitialProject ; } }
public void selectionChanged ( org.eclipse.jface.viewers.SelectionChangedEvent event ) { fireSelectionChanged ( event ) ; }
public java.util.List < java.lang.Character > subList ( int fromIndex , int toIndex ) { com.google.common.base.Preconditions.checkPositionIndexes ( fromIndex , toIndex , size ( ) ) ; return com.google.common.collect.Lists.charactersOf ( sequence.subSequence ( fromIndex , toIndex ) ) ; }
public void testSetFeatureAndCheckCallback ( ) throws java.lang.Exception { mTestImsService.setImsFeatureStatusCallback ( mTestStatusCallback ) ; mTestImsService.testSetFeatureState ( ImsFeature.STATE_READY ) ; org.mockito.Mockito.verify ( mTestStatusCallback ) . notifyImsFeatureStatus ( org.mockito.Matchers.eq ( ImsFeature.STATE_READY ) ) ; junit.framework.Assert.assertEquals ( ImsFeature.STATE_READY , mTestImsService.getFeatureState ( ) ) ; }
public void onClick ( android.content.DialogInterface dialog , int id ) { android.content.Intent denyIntent = new android.content.Intent ( BluetoothPeripheralHandover.ACTION_DENY_CONNECT ) ; denyIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; sendBroadcast ( denyIntent ) ; this . finish ( ) ; }
public void run ( ) { try { shutDown ( ) ; notifyStopped ( ) ; } catch ( java.lang.Throwable t ) { notifyFailed ( t ) ; throw com.google.common.base.Throwables.propagate ( t ) ; } }
boolean isNumberGeographical ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber ) { com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType numberType = getNumberType ( phoneNumber ) ; return ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE ) ) || ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.FIXED_LINE_OR_MOBILE ) ) ; }
private com.android.rs.test.Long2 pack_l2 ( long [ ] val ) { assert ( val.length ) == 2 ; return new com.android.rs.test.Long2 ( val [ 0 ] , val [ 1 ] ) ; }
public void testNameSpecialChars_RFC1779_01 ( ) throws java.lang.Exception { }
public java.lang.String getDescription ( ) { return null ; }
public static java.lang.String getXmlString ( com.android.resources.ResourceType type , com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem resourceItem , boolean system ) { if ( ( type == ( com.android.resources.ResourceType.ID ) ) && ( resourceItem.isDeclaredInline ( ) ) ) { return ( ( ( system ? "@android:" : "@+" ) + ( type.getName ( ) ) ) + "/" ) + ( resourceItem.getName ( ) ) ; } return ( ( ( system ? "@android:" : "@" ) + ( type.getName ( ) ) ) + "/" ) + ( resourceItem.getName ( ) ) ; }
private void processIccRecordEvents ( int eventCode ) { switch ( eventCode ) { case SIMRecords.EVENT_CFI : notifyCallForwardingIndicator ( ) ; break ; case SIMRecords.EVENT_MWI : notifyMessageWaitingIndicator ( ) ; break ; } }
public java.lang.String isValid ( java.lang.String newText ) { if ( invalid.contains ( newText ) ) { return java.lang.String.format ( "Cyclic include, not valid" , newText ) ; } return null ; }
public abstract java.util.List < java.lang.String [ ] > getNavbarLinks ( javax.servlet.http.HttpServletRequest request ) ;
public android.accounts.Account [ ] getAccounts ( ) { try { return mService.getAccounts ( null ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void onComplete ( int resultCode , java.lang.String address ) { callback.onComplete ( resultCode , address ) ; }
public java.nio.file.Path pathFromRepository ( java.nio.file.Path relPath ) { return java.nio.file.Paths.get ( "ojluni/src/main/java" ) . resolve ( relPath ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JParameterRef paramRef ) { buildAssignVariableRef ( destReg , paramRef , sourcePosition ) ; return false ; }
public void test_get_TemporalField ( ) { org.testng.Assert.assertEquals ( TEST_07_15.get ( java.time.temporal.ChronoField.DAY_OF_MONTH ) , 15 ) ; org.testng.Assert.assertEquals ( TEST_07_15.get ( java.time.temporal.ChronoField.MONTH_OF_YEAR ) , 7 ) ; }
public void startJankRecorder ( java.lang.String eventName ) { }
public static float FloatMultiplication ( ) { float a ; float b ; float c ; a = 7.0F ; b = 3.0F ; c = a * b ; return c ; }
public static com.google.devtools.common.options.OptionsParser newOptionsParser ( java.lang.Iterable < ? extends java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > optionsClasses ) { return new com.google.devtools.common.options.OptionsParser ( com.google.devtools.common.options.OptionsParser.getOptionsData ( com.google.common.collect.ImmutableList.< java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > > copyOf ( optionsClasses ) ) ) ; }
public java.lang.String getHostExecutionFlags ( ) { return java.lang.String.format ( "-Xnorelocate -Ximage:%s/framework/core.art" , androidHostOut ) ; }
public java.util.List < com.android.builder.core.DefaultProductFlavor > getProductFlavors ( ) { return getVariantData ( ) . getVariantConfiguration ( ) . getFlavorConfigs ( ) ; }
void setConnectionState ( int mConnectionState ) { this . mConnectionState = mConnectionState ; }
public void schedule ( java.util.TimerTask task , long delay ) { if ( delay < 0 ) { throw new java.lang.IllegalArgumentException ( ( "delay < 0: " + delay ) ) ; } scheduleImpl ( task , delay , ( - 1 ) , false ) ; }
private native void gattSetScanParametersNative ( int scan_interval , int scan_window ) ;
public java.lang.Object [ ] toArray ( ) { return com.google.common.collect.ObjectArrays.EMPTY_ARRAY ; }
public boolean isAnnotationPresent ( java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return isAnnotationPresentNative ( annotationType ) ; }
public boolean addToBlacklist ( java.lang.String bssid ) { if ( android.text.TextUtils.isEmpty ( bssid ) ) return false ; return doBooleanCommand ( ( "BLACKLIST " + bssid ) ) ; }
public void testApi4 ( ) throws java.lang.Exception { assertEquals ( ( "deprecation.xml:16: Warning: android:autoText is deprecated: Use inputType instead\n" + ( ( ( ( ( ( "deprecation.xml:17: Warning: android:capitalize is deprecated: Use inputType instead\n" + "deprecation.xml:18: Warning: android:editable is deprecated: Use an <EditText> to make it editable\n" ) + "deprecation.xml:20: Warning: android:inputMethod is deprecated: Use inputType instead\n" ) + "deprecation.xml:21: Warning: android:numeric is deprecated: Use inputType instead\n" ) + "deprecation.xml:22: Warning: android:password is deprecated: Use inputType instead\n" ) + "deprecation.xml:23: Warning: android:phoneNumber is deprecated: Use inputType instead\n" ) + "deprecation.xml:2: Warning: AbsoluteLayout is deprecated" ) ) , lintProject ( "apicheck/minsdk4.xml=>AndroidManifest.xml" , "res/layout/deprecation.xml" ) ) ; }
protected com.android.sdklib.internal.repository.DownloadCache getDownloadCache ( ) { if ( ( mDownloadCache ) == null ) { mDownloadCache = new com.android.sdklib.internal.repository.DownloadCache ( ( getSettingsController ( ) . getSettings ( ) . getUseDownloadCache ( ) ? DownloadCache.Strategy.FRESH_CACHE : DownloadCache.Strategy.DIRECT ) ) ; } return mDownloadCache ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setSuitePlan ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 32 ; suitePlan_ = value ; onChanged ( ) ; return this ; }
public void testRefactor1_noreferences ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT , false , false , "my.pkg.name" , ( "CHANGES:\n" + ( "-------\n" + "* Rename package 'com.example.refactoringtest' to 'my.pkg.name'" ) ) , false ) ; }
public boolean chainIsNotPinned ( java.lang.String hostname , java.util.List < java.security.cert.X509Certificate > chain ) throws org.conscrypt.PinManagerException { org.conscrypt.PinListEntry entry = lookup ( hostname ) ; if ( entry != null ) { return entry.chainIsNotPinned ( chain ) ; } return false ; }
public void dispatchMediaKeyEvent ( android.view.KeyEvent keyEvent ) { android.media.session.MediaSessionLegacyHelper helper = android.media.session.MediaSessionLegacyHelper.getHelper ( mApplicationContext ) ; helper.sendMediaButtonEvent ( keyEvent , false ) ; }
public void set ( int n , com.android.jack.dx.rop.cst.CstType exceptionType , int handler ) { set0 ( n , new com.android.jack.dx.dex.code.CatchHandlerList.Entry ( exceptionType , handler ) ) ; }
private int getDefaultInstallLoc ( ) { int origDefaultLoc = PackageInfo.INSTALL_LOCATION_AUTO ; try { origDefaultLoc = Settings.System.getInt ( mContext.getContentResolver ( ) , Settings.Secure.DEFAULT_INSTALL_LOCATION ) ; } catch ( android.provider.Settings.SettingNotFoundException e1 ) { } return origDefaultLoc ; }
private void showInputMethodPickerLocked ( ) { try { mService.showInputMethodPickerFromClient ( mClient , android.view.inputmethod.InputMethodManager.SHOW_IM_PICKER_MODE_AUTO ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.view.inputmethod.InputMethodManager.TAG , ( "IME died: " + ( mCurId ) ) , e ) ; } }
public static java.lang.String getStandardName ( java.lang.String algName ) { return org.apache.harmony.security.utils.AlgNameMapper.algAliasesMap.get ( algName.toUpperCase ( java.util.Locale.US ) ) ; }
public void testDeserializeWasExternalizableClass ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737200336c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + "e546573742457617345787465726e616c697a61626c6500000000000000000c0000787078" ; assertFalse ( libcore.java.io.SerializationTest.wasExternalizableInitializedFlag ) ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertTrue ( libcore.java.io.SerializationTest.wasExternalizableInitializedFlag ) ; }
public boolean equals ( java.lang.Object obj ) { return ( obj instanceof com.android.jack.plugin.PluginLocation ) && ( plugin.getName ( ) . equals ( ( ( com.android.jack.plugin.PluginLocation ) ( obj ) ) . plugin.getName ( ) ) ) ; }
public void testConstructor_01 ( ) throws java.lang.Exception { javax.net.ssl.SSLSocket ssl = getSSLSocket ( ) ; assertNotNull ( ssl ) ; ssl.close ( ) ; }
private void notifyHostEmuData ( byte [ ] data ) { mListener.onHostCardEmulationData ( data ) ; }
private static void printUsage ( ) { java.lang.System.err.println ( ( "Usage:\n" + ( ( "create <old_version_description> <new_version_description> <old_version_folder> <new_version_folder>" + " <patch_file_name> <log_directory> [ignored=file1;file2;...] [critical=file1;file2;...] [optional=file1;file2;...]\n" ) + "install [--exit0] <destination_folder> [log_directory]\n" ) ) ) ; }
public native void putDouble$ ( long address , double x ) ;
public static native void SSL_enable_tls_channel_id ( int ssl ) throws javax.net.ssl.SSLException ;
public static int skip ( java.util.Iterator < ? > iterator , int numberToSkip ) { return com.google.common.collect.Iterators.advance ( iterator , numberToSkip ) ; }
public static java.util.Properties getProperties ( ) { if ( ( java.lang.System.systemProperties ) == null ) { java.lang.System.initSystemProperties ( ) ; } return java.lang.System.systemProperties ; }
public static com.android.jack.dx.rop.code.LocalItem make ( com.android.jack.dx.rop.cst.CstString name , com.android.jack.dx.rop.cst.CstType type , com.android.jack.dx.rop.cst.CstString signature ) { if ( ( name == null ) && ( type == null ) ) { return null ; } return new com.android.jack.dx.rop.code.LocalItem ( name , type , signature ) ; }
public android.graphics.Bitmap call ( ) { return getFavicon ( ) ; }
private native void initializeNative ( int max_hf_clients , boolean inband_ring_enable ) ;
private java.awt.Color getFillColor ( com.android.tools.perflib.vmtrace.Call c ) { com.android.tools.perflib.vmtrace.MethodInfo info = mTraceData.getMethod ( c.getMethodId ( ) ) ; int percent = quantize ( info.getInclusiveThreadPercent ( ) ) ; return getFill ( percent ) ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setModulesTotal ( int value ) { bitField0_ |= 131072 ; modulesTotal_ = value ; onChanged ( ) ; return this ; }
public void testRemoveTransportModeTransform ( ) throws java.lang.Exception { android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.fromSocket ( new java.net.Socket ( ) ) ; mIpSecService.removeTransportModeTransform ( pfd , 1 ) ; org.mockito.Mockito.verify ( mMockNetd ) . ipSecRemoveTransportModeTransform ( pfd.getFileDescriptor ( ) ) ; }
public java.lang.String getName ( ) { return "RecommendedNetworkEvaluator" ; }
public static void w ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { if ( com.android.services.telephony.Log.WARN ) { android.util.Log.w ( com.android.services.telephony.Log.TAG , com.android.services.telephony.Log.buildMessage ( prefix , format , args ) ) ; } }
public java.io.File getPreDexOutputDir ( ) { return new java.io.File ( ( ( ( ( ( globalScope.getBuildDir ( ) ) + "/" ) + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/pre-dexed/" ) + ( getVariantConfiguration ( ) . getDirName ( ) ) ) ) ; }
public void onContentBlocked ( ) { updateMediaSession ( ) ; }
void onSaveInstanceState ( android.os.Bundle outState ) { mTabControl.saveState ( outState ) ; if ( ! ( outState.isEmpty ( ) ) ) { outState.putSerializable ( "lastActiveDate" , java.util.Calendar.getInstance ( ) ) ; } }
boolean isLeadingZeroPossible ( int countryCallingCode ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata mainMetadataForCallingCode = getMetadataForRegionOrCallingCode ( countryCallingCode , getRegionCodeForCountryCode ( countryCallingCode ) ) ; if ( mainMetadataForCallingCode == null ) { return false ; } return mainMetadataForCallingCode.isLeadingZeroPossible ( ) ; }
public void testCanEncodeSurrogate() { assertFalse(org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode('\ud800')); assertFalse(org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode("\udc00")); }
public android.net.IpSecTransform.Builder setIpv4Encapsulation ( android.net.IpSecManager.UdpEncapsulationSocket localSocket , int remotePort ) { mConfig.encapType = android.net.IpSecTransform.ENCAP_ESPINUDP ; mConfig.encapLocalPortResourceId = localSocket.getResourceId ( ) ; mConfig.encapRemotePort = remotePort ; return this ; }
public void setTimeAndTimeZoneFromNitz ( com.android.internal.telephony.NitzData newNitzData , long nitzReceiveTime ) { setTimeZoneFromNitz ( newNitzData , nitzReceiveTime ) ; com.android.internal.telephony.util.TimeStampedValue < com.android.internal.telephony.NitzData > nitzSignal = new com.android.internal.telephony.util.TimeStampedValue ( newNitzData , nitzReceiveTime ) ; setTimeFromNitz ( nitzSignal ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( "ConfigurationResult{" + "configurationInstance='" ) + ( configurationInstance.getDisplayString ( ) ) ) + '\'' ) + ", result=" ) + ( result ) ) + ", isComplete=" ) + ( isComplete ) ) + '}' ; }
void addItems ( java.util.Collection < I > items ) { for ( I item : items ) { mItems.put ( item.getKey ( ) , item ) ; item.setSource ( this ) ; } }
public void visitLeave ( com.android.tools.perflib.heap.Instance instance ) ;
public static com.google.common.io.InputSupplier < java.io.ByteArrayInputStream > newInputStreamSupplier ( byte [ ] b ) { return com.google.common.io.ByteStreams.newInputStreamSupplier ( b , 0 , b.length ) ; }
public void broadcastP2pDeviceLost ( java.lang.String iface , android.net.wifi.p2p.WifiP2pDevice device ) { if ( device != null ) { sendMessage ( iface , com.android.server.wifi.WifiMonitor.P2P_DEVICE_LOST_EVENT , device ) ; } }
public int getWifiEnabledState ( ) { enforceAccessPermission ( ) ; return mWifiStateMachine.syncGetWifiState ( ) ; }
public boolean isConnected ( int callSessionType , int callType ) { return false ; }
public static native java.lang.String EC_GROUP_get_curve_name ( long groupRef ) ;
private static void resetWifiNanNative ( ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.nan.WifiNanNative.class . getDeclaredField ( "sWifiNanNativeSingleton" ) ; field.setAccessible ( true ) ; field.set ( null , null ) ; }
public java.lang.String dump ( ) { return doDump ( ) ; }
public void test3rdPartyTests ( ) throws java.lang.Exception { runGradleTasks ( sdkDir , BasePlugin.GRADLE_MIN_VERSION , new java.io.File ( testDir , "3rdPartyTests" ) , "clean" , "deviceCheck" ) ; }
static synchronized com.android.incallui.VideoPauseController getInstance ( ) { if ( ( com.android.incallui.VideoPauseController.sVideoPauseController ) == null ) { com.android.incallui.VideoPauseController.sVideoPauseController = new com.android.incallui.VideoPauseController ( ) ; } return com.android.incallui.VideoPauseController.sVideoPauseController ; }
public java.lang.String getInstrumentationRunner ( ) { com.android.builder.core.VariantConfiguration config = this ; if ( ( mType ) == ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { config = getTestedConfig ( ) ; } java.lang.String runner = config.mMergedFlavor.getTestInstrumentationRunner ( ) ; return runner != null ? runner : com.android.builder.core.VariantConfiguration.DEFAULT_TEST_RUNNER ; }
private int getPreciseDisconnectCauseFromReasonInfo ( com.android.ims.ImsReasonInfo reasonInfo ) { return com.android.internal.telephony.imsphone.ImsPhoneCallTracker.PRECISE_CAUSE_MAP.get ( maybeRemapReasonCode ( reasonInfo ) , PreciseDisconnectCause.ERROR_UNSPECIFIED ) ; }
public android.os.PersistableBundle getCarrierConfig ( ) { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService ( android.telephony.CarrierConfigManager.class ) ; return carrierConfigManager.getConfigForSubId ( mSubId ) ; }
synchronized int nScriptKernelIDCreate ( int sid , int slot , int sig ) { validate ( ) ; return rsnScriptKernelIDCreate ( mContext , sid , slot , sig ) ; }
public static com.android.ide.eclipse.adt.internal.wizards.newxmlfile.ResourceNameValidator create ( boolean allowXmlExtension , java.util.Set < java.lang.String > existing ) { return new com.android.ide.eclipse.adt.internal.wizards.newxmlfile.ResourceNameValidator ( allowXmlExtension , existing ) ; }
public boolean isClosure ( ) { return ( basicType ) == ( com.android.jack.dx.rop.type.Type.BT_CLOSURE ) ; }
public void onSdkChange ( boolean init ) { if ( init == false ) { com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . reparseSdk ( ) ; } }
public void callSessionConferenceStateUpdated ( com.android.ims.internal.ImsCallSession session , com.android.ims.ImsConferenceState state ) { logi ( ( "callSessionConferenceStateUpdated :: state=" + state ) ) ; conferenceStateUpdated ( state ) ; }
public void onChange ( boolean selfChange ) { notifyEnabled ( isNsdEnabled ( ) ) ; }
public java.lang.String [ ] getDelegateClassNatives ( ) { return new java.lang.String [ 0 ] ; }
void onProgressRefresh ( float scale , boolean fromUser ) { super . onProgressRefresh ( scale , fromUser ) ; android.graphics.drawable.Drawable thumb = mThumb ; if ( thumb != null ) { setThumbPos ( getWidth ( ) , thumb , scale , java.lang.Integer.MIN_VALUE ) ; invalidate ( ) ; } }
public static synchronized java.io.PrintStream getOutPrintStream ( org.eclipse.core.resources.IProject project , java.lang.String prefix ) { if ( ( com.android.ide.eclipse.adt.AdtPlugin.sPlugin ) != null ) { return new com.android.ide.eclipse.adt.AdtPlugin.AndroidPrintStream ( project , prefix , com.android.ide.eclipse.adt.AdtPlugin.sPlugin.mAndroidConsoleStream ) ; } return null ; }
protected void onResume ( ) { super . onResume ( ) ; getPreferenceScreen ( ) . setEnabled ( true ) ; mPhone.queryTTYModeEnabled ( android.os.Message.obtain ( mQueryTTYComplete , com.android.phone.CallFeaturesSetting.EVENT_TTY_EXECUTED ) ) ; }
public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { if ( PrefPage.PREFS_DEVTREE_DIR.equals ( event.getProperty ( ) ) ) { com.android.ide.eclipse.ddms.DdmsPlugin.setAdb ( com.android.ide.eclipse.pdt.PdtPlugin.getAdbLocation ( ) , true ) ; } }
public void onChange ( boolean selfChange , android.net.Uri uri ) { com.android.dialer.common.Assert.isMainThread ( ) ; com.android.dialer.common.LogUtil.enterBlock ( "SystemBlockedNumberPhoneLookup.FilteredNumberObserver.onChange" ) ; refreshAnnotatedCallLogNotifier.markDirtyAndNotify ( ) ; }
void setBits ( com.google.common.base.CharMatcher.LookupTable table ) { char c = startInclusive ; while ( true ) { table.set ( c ) ; if ( ( c ++ ) == endInclusive ) { break ; } } }
private void testExplicitSizeBottomRightGravity ( ) { doLayoutParamTest ( ( android.view.WindowManager.LayoutParams params ) -> { params.width = 200 ; params.height = 200 ; params.gravity = ( android.view.Gravity.BOTTOM ) | ( android.view.Gravity.RIGHT ) ; } ) ; }
protected java.io.File getResultFile ( java.io.File reportDir ) throws java.io.IOException { return new java.io.File ( reportDir , ( ( "TEST-" + ( mDeviceName ) ) + ".xml" ) ) ; }
public int checkPermission ( java.lang.String permission , int pid , int uid ) { if ( permission == null ) { return android.content.pm.PackageManager.PERMISSION_DENIED ; } return checkComponentPermission ( permission , pid , android.os.UserId.getAppId ( uid ) , ( - 1 ) , true ) ; }
public static void computeTan ( android.renderscript.cts.TestTan.ArgumentsFloatFloat args ) { args.ulf = 5 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( java.lang.StrictMath.tan ( args.in ) ) ) ; }
public void doesNotContainClass ( java.lang.String className ) throws com.android.ide.common.process.ProcessException , java.io.IOException { java.io.File apk = getSubject ( ) ; if ( com.android.build.gradle.integration.common.utils.ApkHelper.checkForClass ( apk , className ) ) { failWithRawMessage ( "'%s' unexpectedly contain '%s'" , apk.getName ( ) , className ) ; } }
public boolean responderReportNfcHandover ( java.lang.String requestMessage ) { return doBooleanCommand ( ( ( "NFC_REPORT_HANDOVER RESP P2P " + requestMessage ) + " 00" ) ) ; }
public int hashCode ( ) { return bits.hashCode ( ) ; }
public java.util.List < com.google.gct.testing.GoogleCloudTestingDimension > getDimensions ( ) { return com.google.common.collect.ImmutableList.of ( deviceDimension , apiDimension , languageDimension , orientationDimension ) ; }
public static final int toCodePoint ( char high , char low ) { return android.icu.impl.UCharacterProperty.getRawSupplementary ( high , low ) ; }
public void onBootPhase ( int phase ) { if ( phase == ( PHASE_THIRD_PARTY_APPS_CAN_START ) ) { mImpl.setSafeMode ( isSafeMode ( ) ) ; } }
private void applyLidSwitchState ( ) { if ( ( ( mLidState ) == ( android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED ) ) && ( mLidControlsSleep ) ) { mPowerManager.goToSleep ( android.os.SystemClock.uptimeMillis ( ) ) ; } }
public void setToEmpty ( ) { bytes = null ; offset = length = 0 ; s = null ; }
public void generateBuildConfig ( @ com.android.annotations.NonNull java.lang.String packageName , boolean debuggable , @ com.android.annotations.NonNull java.util.List < java.lang.String > javaLines , @ com.android.annotations.NonNull java.lang.String sourceOutputDir ) throws java.io.IOException { com.android.builder.internal.BuildConfigGenerator generator = new com.android.builder.internal.BuildConfigGenerator ( sourceOutputDir , packageName , debuggable ) ; generator.generate ( javaLines ) ; }
public com.android.jack.tools.merger.JackMerger getNewJackMerger ( int firstTypeIndex ) { return new com.android.jack.tools.merger.JackMerger ( createDexFile ( ) , com.android.sched.util.config.ThreadConfig.get ( Options.BEST_MERGING_ACCURACY ) . booleanValue ( ) ) ; }
public void check ( org.xmlpull.v1.XmlPullParser parser ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { android.os.PersistableBundle b = com.android.carrierconfig.DefaultCarrierConfigService.readConfigFromXml ( parser , new android.service.carrier.CarrierIdentifier ( "001" , "001" , "Test" , "" , "" , "" ) ) ; assertNotNull ( "got null bundle" , b ) ; }
synchronized java.lang.String [ ] [ ] internalZoneStrings ( ) { if ( ( zoneStrings ) == null ) { zoneStrings = libcore.icu.TimeZones.getZoneStrings ( locale ) ; } return zoneStrings ; }
public void core ( ) throws java.lang.Exception { java.io.File coreDex = com.android.jack.TestTools.createTempFile ( "core" , ".dex" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , com.android.jack.ToolchainTest.corePath , coreDex , false ) ; }
void addElapsedTime ( long elapsedTime ) { mElapsedTime += elapsedTime ; }
public long getDevPersistBytes ( long def ) { return getSecureLong ( android.provider.Settings.Secure.NETSTATS_DEV_PERSIST_BYTES , def ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( ! ( mUnavailable ) ) { initPreferences ( ) ; } }
void createNewUserLILPw ( int userHandle ) { if ( ( mInstaller ) != null ) { mInstaller.createUserConfig ( userHandle ) ; mSettings.createNewUserLILPw ( this , mInstaller , userHandle ) ; applyFactoryDefaultBrowserLPw ( userHandle ) ; primeDomainVerificationsLPw ( userHandle ) ; } }
public static int getCallbackAction ( java.lang.String number , int features , java.lang.String phoneAccountComponentName , android.content.Context context ) { return com.android.dialer.calllogutils.CallbackActionHelper.getCallbackAction ( number , features , com.android.dialer.calllogutils.CallbackActionHelper.isLightbringerCall ( phoneAccountComponentName , context ) ) ; }
private java.util.Map < java.lang.String , com.android.ide.eclipse.adt.internal.resources.DeclareStyleableInfo > collectManifestDefinitions ( com.android.ide.eclipse.adt.internal.resources.AttrsXmlParser attrsXmlParser ) { return attrsXmlParser.getDeclareStyleableList ( ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { loadSkin ( ) ; }
public void test_F32_3_SCALE20_05_inSqure ( ) { testReszie ( inX , inX , Element.DataType.FLOAT_32 , 3 , 2.0F , 0.5F ) ; }
public void testBasicTrace ( ) throws java.io.IOException { java.lang.String expected = " -> AsyncTask #1.: -> android/os/Debug.startMethodTracing: (Ljava/lang/String;)V -> android/os/Debug.startMethodTracing: (Ljava/lang/String;II)V -> dalvik/system/VMDebug.startMethodTracing: (Ljava/lang/String;II)V\n" + ( " -> com/test/android/traceview/Basic.foo: ()V -> com/test/android/traceview/Basic.bar: ()I\n" + " -> android/os/Debug.stopMethodTracing: ()V -> dalvik/system/VMDebug.stopMethodTracing: ()V" ) ; testTrace ( "/basic.trace" , "AsyncTask #1" , expected ) ; }
void notifyStatusChanged ( ) ;
void addTo ( @ com.android.annotations.NonNull org.w3c.dom.Document document , @ com.android.annotations.NonNull java.lang.String value ) ;
public static void wtf ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { java.lang.String msg = android.telecom.Log.buildMessage ( prefix , format , args ) ; android.util.Log.wtf ( android.telecom.Log.TAG , msg , new java.lang.IllegalStateException ( msg ) ) ; }
private org.gradle.tooling.ProjectConnection getProjectConnection ( ) { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector ( ) ; ( ( org.gradle.tooling.internal.consumer.DefaultGradleConnector ) ( connector ) ) . daemonMaxIdleTime ( 10 , java.util.concurrent.TimeUnit.SECONDS ) ; return connector.useGradleVersion ( com.android.build.gradle.integration.common.fixture.GradleTestProject.GRADLE_TEST_VERSION ) . forProjectDirectory ( testDir ) . connect ( ) ; }
protected java.lang.String getWizardActionDescription ( ) { return "Import Sample" ; }
public static native void EVP_VerifyUpdate ( int ctx , byte [ ] buffer , int offset , int length ) ;
public java.lang.String getMessage ( ) { return getCause ( ) . getMessage ( ) ; }
public int availableProcessors ( ) { return ( ( int ) ( Libcore.os.sysconf ( libcore.io.OsConstants._SC_NPROCESSORS_ONLN ) ) ) ; }
public void visitLdcInsn ( java.lang.Object cst ) { printer.visitLdcInsn ( cst ) ; printTypeOfOperandStackTop ( ) ; super . visitLdcInsn ( cst ) ; }
protected void onStop ( ) { mSensorManager.unregisterListener ( mListener ) ; super . onStop ( ) ; }
public static void computeTan ( android.renderscript.cts.TestTan.ArgumentsFloatFloat args ) { args.ulf = 5 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( java.lang.StrictMath.tan ( args.in ) ) ) ; }
public java.lang.String nextTo ( java.lang.String excluded ) { if ( excluded == null ) { throw new java.lang.NullPointerException ( ) ; } return nextToInternal ( excluded ) . trim ( ) ; }
private static com.android.jack.ir.ast.JMethodCall makeSuperCall ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info , @ javax.annotation.CheckForNull com.android.jack.ir.ast.JExpression instance , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface receiverType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod targetMethod ) { com.android.jack.ir.ast.JMethodCall call = new com.android.jack.ir.ast.JMethodCall ( info , instance , receiverType , targetMethod.getMethodIdWide ( ) , targetMethod.getType ( ) , false ) ; return call ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . createCallSession ( mSlotId , mSupportedFeature , sessionId , profile , listener ) ; } }
public java.io.File getOutput ( ) { return null ; }
native long rsnScriptKernelIDCreate ( long con , long sid , int slot , int sig ) ;
public void testJustInfo ( ) { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder ( mLoggerMock ) . addInfo ( "merging info" ) . build ( ) ; assertEquals ( MergingReport.Result.SUCCESS , mergingReport.getResult ( ) ) ; }
public android.os.Bundle getAuthToken ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , java.lang.String s , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; throw new java.lang.UnsupportedOperationException ( ) ; }
public static native int SSL_CTX_set_alpn_protos ( long sslCtxPointer , byte [ ] protos ) ;
synchronized void nScriptReduce ( long id , int slot , long ain , long aout , int [ ] limits ) { validate ( ) ; rsnScriptReduce ( mContext , id , slot , ain , aout , limits ) ; }
void setCellInfoListRate ( ) { setCellInfoListRate ( java.lang.Integer.MAX_VALUE , null ) ; }
public static native byte [ ] EC_GROUP_get_order ( int groupCtx ) ;
public void test_U8_1_SCALE20_05_inRectangle ( ) { testReszie ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inY , Element.DataType.UNSIGNED_8 , 1 , 2.0F , 0.5F ) ; checkError ( ) ; }
public static void fail ( java.lang.String message ) { java.lang.System.out.println ( ( "fail: " + message ) ) ; java.lang.Thread.dumpStack ( ) ; }
public void test_U8_3_SCALE05_20_inSqure ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.UNSIGNED_8 , 3 , 0.5F , 2.0F ) ; checkError ( ) ; }
public com.google.mockwebserver.MockResponse setChunkedBody ( java.lang.String body , int maxChunkSize ) throws java.io.IOException { return setChunkedBody ( body.getBytes ( com.google.mockwebserver.MockWebServer.ASCII ) , maxChunkSize ) ; }
public java.lang.Boolean call ( ) { return onTouchEvent ( ev ) ; }
public void getCellInfoList ( android.os.Message result ) { }
public void run ( ) { asyncRefresh ( ) ; }
public java.lang.String formatNationalNumberWithPreferredCarrierCode ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.lang.String fallbackCarrierCode ) { return formatNationalNumberWithCarrierCode ( number , ( ( number.getPreferredDomesticCarrierCode ( ) . length ( ) ) > 0 ? number.getPreferredDomesticCarrierCode ( ) : fallbackCarrierCode ) ) ; }
public static com.android.ahat.heapdump.Value getBaseline ( com.android.ahat.heapdump.Value value ) { if ( ( value == null ) || ( ! ( value.isAhatInstance ( ) ) ) ) { return value ; } return new com.android.ahat.heapdump.Value ( value.asAhatInstance ( ) . getBaseline ( ) ) ; }
private static void assertValidInstructionSet ( java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { for ( java.lang.String abi : android.os.Build.SUPPORTED_ABIS ) { if ( dalvik.system.VMRuntime.getInstructionSet ( abi ) . equals ( instructionSet ) ) { return ; } } throw new com.android.internal.os.InstallerConnection.InstallerException ( ( "Invalid instruction set: " + instructionSet ) ) ; }
public long getSeen ( ) { long seen = 0 ; for ( android.net.wifi.ScanResult result : mScanResultCache.snapshot ( ) . values ( ) ) { if ( ( result.timestamp ) > seen ) { seen = result.timestamp ; } } return seen ; }
private char [ ] getTableKeyOffsets ( int offset ) { int length = getChar ( offset ) ; if ( length > 0 ) { return getChars ( ( offset + 2 ) , length ) ; } else { return com.ibm.icu.impl.ICUResourceBundleReader.emptyChars ; } }
public java.lang.String getName ( ) { java.lang.reflect.ArtMethod nonProxyMethod = java.lang.Class.findOverriddenMethodIfProxy ( artMethod ) ; return java.lang.reflect.ArtMethod.getMethodName ( nonProxyMethod ) ; }
public static int getMaxSendRetryCount ( ) { return android.net.wifi.aware.WifiAwareDiscoveryBaseSession.MAX_SEND_RETRY_COUNT ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setSuiteName ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 2048 ; suiteName_ = value ; onChanged ( ) ; return this ; }
public void copyTo ( float [ ] d ) { validateIsFloat32 ( ) ; mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , d ) ; }
public void run ( ) { setNetworkAvailable ( networkUp ) ; }
public void setZoom ( int value ) { synchronized ( this ) { if ( ( grid ) != null ) { grid.dispose ( ) ; grid = null ; zoom = value ; } } redraw ( ) ; }
public void setFile ( java.io.File file ) { this . file = file ; }
static com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType createUninitializedType ( org.objectweb.asm.Label uninitializationLabel ) { return com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType.create ( com.google.devtools.build.android.desugar.BytecodeTypeInference.InferredType.UNINITIALIZED_PREFIX , uninitializationLabel ) ; }
protected com.android.tv.dvr.ui.HalfSizedDialogFragment.OnActionClickListener getOnActionClickListener ( ) { return mOnActionClickListener ; }
public void shutdown ( ) { synchronized ( mLock ) { mSessions.clear ( ) ; mDiscoverySessions.clear ( ) ; } mService.unregisterReceiver ( mStateChangedReceiver ) ; }
void destroyGL ( ) { mEgl.eglDestroyContext ( mEglDisplay , mEglContext ) ; mEgl.eglDestroySurface ( mEglDisplay , mEglSurface ) ; mEglContext = javax.microedition.khronos.egl.EGL10.EGL_NO_CONTEXT ; mEglSurface = javax.microedition.khronos.egl.EGL10.EGL_NO_SURFACE ; }
native void rsnScriptSetVarJ ( int con , int id , int slot , long val ) ;
private void showNoScreenshotsWarning ( com.intellij.openapi.actionSystem.AnActionEvent e ) { com.google.gct.testing.GoogleCloudTestingUtils.showMessage ( e.getData ( PlatformDataKeys.PROJECT ) , "Screenshots are not yet available for this configuration" , MessageType.WARNING , 3 ) ; }
private void filter ( ) { mScript.forEach_root ( mInPixelsAllocation , mOutPixelsAllocation ) ; mOutPixelsAllocation.ioSendOutput ( ) ; mRS.finish ( ) ; }
private static java.lang.String getDialogMessage ( com.android.internal.location.GpsNetInitiatedHandler.GpsNiNotification notif ) { return com.android.internal.location.GpsNetInitiatedHandler.getNotifMessage ( notif ) ; }
private void onCall ( int call ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CALL ) ; event.valueInt = call ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void isAvailable_noService_shouldReturnFalse ( ) { com.google.common.truth.Truth.assertThat ( com.android.settings.wfd.WifiDisplaySettings.isAvailable ( mActivity ) ) . isFalse ( ) ; }
public static native int RSA_public_encrypt ( int flen , byte [ ] from , byte [ ] to , int pkey , int padding ) ;
public void testBind_Failure ( ) throws java.lang.Exception { assertNull ( channel1.getLocalAddress ( ) ) ; try { channel1.bind ( localAddr1 ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } }
public void getIMSIForAppResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String var2 ) { }
public boolean isHidden ( ) { return ( documentationLevel ( ) ) == ( com.google.devtools.common.options.OptionsParser.DocumentationLevel.HIDDEN ) ; }
public void testIllegalLibraryVersionMerge ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application android:label=\"@string/lib_name\" />\n" ) + " <uses-sdk android:minSdkVersion=\"4\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <uses-sdk android:minSdkVersion=\"19\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertFalse ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.MergingReport mergingReport = mergingReportBuilder.build ( ) ; assertEquals ( 1 , mergingReport.getLoggingRecords ( ) . size ( ) ) ; assertTrue ( ( ( mergingReport.getLoggingRecords ( ) . get ( 0 ) . getSeverity ( ) ) == ( Severity.ERROR ) ) ) ; assertTrue ( mergingReport.getLoggingRecords ( ) . get ( 0 ) . toString ( ) . contains ( "uses-sdk:minSdkVersion 4" ) ) ; }
public java.lang.Object [ ] toArray ( ) { java.lang.Object [ ] elements = getArray ( ) ; return java.util.Arrays.copyOf ( elements , elements.length ) ; }
public boolean hasFile ( java.lang.String name ) { return mFolder.hasFile ( name ) ; }
void installPackage ( @ com.android.annotations.NonNull java.io.File apkFile ) throws com.android.builder.testing.api.DeviceException ;
private static synchronized java.lang.invoke.MethodHandle setCachedMethodHandle ( java.lang.invoke.MethodHandle [ ] cache , int pos , java.lang.invoke.MethodHandle value ) { java.lang.invoke.MethodHandle prev = cache [ pos ] ; if ( prev != null ) return prev ; return cache [ pos ] = value ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , int value ) { checkNameAndAppend ( name ) . append ( value ) ; return this ; }
public static com.android.server.pm.PackageManagerException from ( com.android.internal.os.InstallerConnection.InstallerException e ) throws com.android.server.pm.PackageManagerException { throw new com.android.server.pm.PackageManagerException ( android.content.pm.PackageManager.INSTALL_FAILED_INTERNAL_ERROR , e.getMessage ( ) , e.getCause ( ) ) ; }
private static void usage ( ) { java.lang.System.err.println ( ( "Usage: signapk [-w] " + ( ( "publickey.x509[.pem] privatekey.pk8 " + "[publickey2.x509[.pem] privatekey2.pk8 ...] " ) + "input.jar output.jar" ) ) ) ; java.lang.System.exit ( 2 ) ; }
public void onLost ( android.net.Network network ) { handleLost ( mCallbackType , network ) ; }
private boolean isWhitelistedPackage ( java.lang.String packageName ) { return ( packageName.startsWith ( "com.android.cts" ) ) || ( packageName.equalsIgnoreCase ( "android.tests.devicesetup" ) ) ; }
protected void checkReportedError ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( issue == ( DuplicateResourceDetector.TYPE_MISMATCH ) ) { assertNotNull ( message , com.android.tools.lint.checks.DuplicateResourceDetector.getExpectedType ( message ) ) ; } }
public void run ( ) { onFocusChanged ( focused , direction , previouslyFocusedRect ) ; }
public void setMiracastMode ( int mode ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { mSupplicantP2pIfaceHal.setMiracastMode ( mode ) ; } else { doBooleanCommand ( ( "DRIVER MIRACAST " + mode ) ) ; } }
public static native byte [ ] [ ] EC_POINT_get_affine_coordinates ( long groupCtx , long pointCtx ) ;
public void setOperationalMode ( int mode ) { if ( com.android.server.wifi.WifiStateMachine.DBG ) log ( ( "setting operational mode to " + ( java.lang.String.valueOf ( mode ) ) ) ) ; sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_SET_OPERATIONAL_MODE , mode , 0 ) ; }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsUcharUcharUchar args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( byte ) ( java.lang.StrictMath.max ( ( ( args.inV1 ) & 255 ) , ( ( args.inV2 ) & 255 ) ) ) ) ; }
public void test_minusWeeks_overMonths ( ) { java.time.LocalDate t = TEST_2007_07_15.minusWeeks ( 9 ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2007 , 5 , 13 ) ) ; }
void viewDownloads ( android.net.Uri downloadRecord ) { android.content.Intent intent = new android.content.Intent ( this , com.android.browser.BrowserDownloadPage.class ) ; intent.setData ( downloadRecord ) ; startActivityForResult ( intent , this . DOWNLOAD_PAGE ) ; }
public void onThemeChange ( ) { mConfigComposite.storeState ( ) ; recomputeLayout ( ) ; reloadPalette ( ) ; }
void createRemainingTasks ( org.gradle.model.collection.CollectionBuilder < org.gradle.api.Task > tasks , com.android.build.gradle.internal.TaskManager taskManager , com.android.build.gradle.model.AndroidComponentSpec spec ) { com.android.build.gradle.internal.VariantManager variantManager = ( spec = DefaultAndroidComponentSpec ) . variantManager ; taskManager.createTopLevelTestTasks ( new com.android.build.gradle.model.TaskCollectionBuilderAdaptor ( tasks ) , ( ! ( variantManager.productFlavors.isEmpty ( ) ) ) ) ; }
void notExecuted ( ) ;
public static java.util.Collection < com.android.tools.perflib.heap.RootObj > getRoots ( com.android.tools.perflib.heap.State state ) { java.util.HashSet < com.android.tools.perflib.heap.RootObj > result = new java.util.HashSet < com.android.tools.perflib.heap.RootObj > ( ) ; for ( com.android.tools.perflib.heap.Heap heap : state.mHeaps.values ( ) ) { result.addAll ( heap.mRoots ) ; } return result ; }
public void compileExt ( ) throws java.lang.Exception { java.io.File out = com.android.jack.TestTools.createTempFile ( "ext" , ".dex" ) ; com.android.jack.TestTools.compileSourceToDex ( new com.android.jack.Options ( ) , com.android.jack.compile.androidtree.ext.ExtCompilationTest.SOURCELIST , com.android.jack.TestTools.getClasspathAsString ( com.android.jack.compile.androidtree.ext.ExtCompilationTest.BOOTCLASSPATH ) , out , false ) ; }
public java.util.Iterator < com.android.jack.ir.ast.cfg.JBasicBlock > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { return com.google.common.collect.Lists.newArrayList ( cfg.getBlocksDepthFirst ( false ) ) . iterator ( ) ; }
public boolean verify ( java.lang.String key , byte [ ] data , byte [ ] signature ) { return verify ( android.security.KeyStore.getBytes ( key ) , data , signature ) ; }
public void messageDoubleClicked ( com.android.ddmuilib.logcat.LogCatMessage m ) { onDoubleClick ( m ) ; }
public void run ( ) { try { com.android.jack.util.FileUtils.deleteDir ( tmp ) ; } catch ( java.io.IOException e ) { java.lang.System.err.println ( e.getMessage ( ) ) ; } }
private java.lang.String [ ] getClientList ( int netId ) { java.lang.String p2pClients = mWifiNative.getNetworkVariable ( netId , "p2p_client_list" ) ; if ( p2pClients == null ) { return null ; } return p2pClients.split ( " " ) ; }
public java.util.Properties run ( ) throws java.io.IOException { java.util.Properties props = new java.util.Properties ( ) ; try ( java.io.FileInputStream fis = new java.io.FileInputStream ( fname ) ) { props.load ( fis ) ; } return props ; }
public void setProcessorPath ( @ javax.annotation.Nonnull java.util.List < java.io.File > arg0 ) throws com.android.jack.api.v01.ConfigurationException { }
private void updateDataSet ( java.util.List < com.android.ddmuilib.SysinfoPanel.BugReportParser.DataValue > data ) { for ( com.android.ddmuilib.SysinfoPanel.BugReportParser.DataValue d : data ) { mDataset.setValue ( d.name , d.value ) ; } }
public static byte [ ] networkPortionToCalledPartyBCDWithLength ( java.lang.String s ) { java.lang.String networkPortion = android.telephony.PhoneNumberUtils.extractNetworkPortion ( s ) ; return android.telephony.PhoneNumberUtils.numberToCalledPartyBCDHelper ( networkPortion , true ) ; }
public void setDataRoamingEnabled ( boolean enable ) { mDcTracker.setDataRoamingEnabled ( enable ) ; }
private boolean p2pListen ( ) { return doBooleanCommand ( "P2P_LISTEN" ) ; }
public static java.lang.String internalPackagePrefix ( java.lang.String internalClassName ) { return internalClassName.substring ( 0 , ( ( internalClassName.lastIndexOf ( ClassConstants.INTERNAL_PACKAGE_SEPARATOR , ( ( internalClassName.length ( ) ) - 2 ) ) ) + 1 ) ) ; }
public java.lang.String getNamespace ( ) { if ( ( ( mCurrentEvent ) != ( com.android.apksigner.AndroidBinXmlParser.EVENT_START_ELEMENT ) ) && ( ( mCurrentEvent ) != ( com.android.apksigner.AndroidBinXmlParser.EVENT_END_ELEMENT ) ) ) { return null ; } return mCurrentElementNamespace ; }
public boolean onKeyDown ( int keyCode , android.view.KeyEvent event ) { switch ( keyCode ) { case android.view.KeyEvent.KEYCODE_BACK : com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkDialogActivity.LOG_TAG , "onKeyDown - KEYCODE_BACK" ) ; cancelTimeOut ( ) ; sendResponse ( StkAppService.RES_ID_BACKWARD ) ; finish ( ) ; break ; } return false ; }
public native char getChar ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
public static double signum ( double d ) { return ( d == 0.0 ) || ( sun.misc.FpUtils.isNaN ( d ) ) ? d : sun.misc.FpUtils.copySign ( 1.0 , d ) ; }
public static java.lang.Integer tryParse ( java.lang.String string ) { return com.google.common.primitives.AndroidInteger.tryParse ( string , 10 ) ; }
public void reportConnectionEventPropagatesSuccessToLastMileLogger ( ) { final boolean verbosityToggle = false ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; org.mockito.Mockito.verify ( mLastMileLogger ) . reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; }
abstract com.google.common.collect.ImmutableSet < com.google.common.collect.Multiset.Entry < E > > createEntrySet ( ) ;
private int getPhoneTypeFromProperty ( ) { return getPhoneTypeFromProperty ( android.telephony.TelephonyManager.getDefaultPhone ( ) ) ; }
private android.net.NetworkStats internalGetSummaryForNetwork ( android.net.NetworkTemplate template , long start , long end , @ com.android.server.net.NetworkStatsAccess.Level int accessLevel ) { return mXtStatsCached.getSummary ( template , start , end , accessLevel ) ; }
public static void computeFabs ( android.renderscript.cts.TestFabs.ArgumentsFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( float ) ( java.lang.StrictMath.abs ( args.in ) ) ) ; }
public long getInterApnDelay ( boolean failFastEnabled ) { return failFastEnabled ? mFailFastInterApnDelay : mInterApnDelay ; }
public java.lang.Boolean call ( ) { return zoomIn ( ) ; }
public void setProcessorNames ( @ javax.annotation.Nonnull java.util.List < java.lang.String > processorNames ) { throw new java.lang.AssertionError ( ) ; }
public int getDataNetworkType ( ) { return getDataNetworkType ( getSubId ( ) ) ; }
private native int connectSocketNative ( byte [ ] address , int type , byte [ ] uuid , int port , int flag ) ;
private void endBlockSuppression ( ) { if ( getBlockSuppressionStatus ( ) . isSuppressed ) { writeBlockSuppressionExpiryTimePref ( 0 ) ; notifyBlockSuppressionStateChange ( ) ; } }
public static void computeAtan ( android.renderscript.cts.TestAtan.ArgumentsFloatFloat args ) { args.ulf = 5 ; args.ulfRelaxed = 128 ; args.out = ( ( float ) ( java.lang.StrictMath.atan ( args.in ) ) ) ; }
public android.net.ProxyInfo getProxy ( ) { try { return mService.getProxy ( ) ; } catch ( android.os.RemoteException e ) { return null ; } }
public static int intToFloatToInt ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( float ) ( value ) ) ) ; }
public int getScalledImgSize ( ) { return ( ( int ) ( ( mImgSize ) * ( mScale ) ) ) ; }
private com.android.ide.common.rendering.api.ResourceValue parseValue ( @ com.android.annotations.NonNull com.android.ide.common.rendering.api.ResourceValue value ) { value.setValue ( com.android.ide.common.res2.ValueXmlHelper.unescapeResourceString ( com.android.ide.common.res2.ResourceItem.getTextNode ( mValue ) , false , true ) ) ; return value ; }
public void onCapabilitiesChanged ( android.net.Network network , android.net.NetworkCapabilities.NetworkCapabilities netCap ) { setLastCallback ( com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES , network , netCap ) ; }
private com.android.internal.telephony.dataconnection.ApnSetting createApnSetting ( java.lang.String [ ] apnTypes ) { return createApnSettingInternal ( apnTypes , true ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeParcelable ( homeSp , flags ) ; dest.writeParcelable ( credential , flags ) ; }
public static android.icu.util.UResourceBundle getBundleInstance ( android.icu.util.ULocale locale ) { if ( locale == null ) { locale = android.icu.util.ULocale.getDefault ( ) ; } return android.icu.util.UResourceBundle.getBundleInstance ( ICUResourceBundle.ICU_BASE_NAME , locale.toString ( ) , ICUResourceBundle.ICU_DATA_CLASS_LOADER , false ) ; }
public boolean p2pGroupAdd ( int netId ) { return doBooleanCommand ( ( "P2P_GROUP_ADD persistent=" + netId ) ) ; }
private static void stackOverflowTestSub ( double pad1 , double pad2 , double pad3 ) { Main.stackOverflowTestSub ( pad1 , pad2 , pad3 ) ; }
public static com.google.gct.intellij.endpoints.util.PsiDirectory addIfMissingDirectory ( com.google.gct.intellij.endpoints.util.PsiDirectory parent , java.lang.String dirName ) { final com.google.gct.intellij.endpoints.util.PsiDirectory existingDir = parent.findSubdirectory ( dirName ) ; if ( existingDir != null ) { return existingDir ; } return parent.createSubdirectory ( dirName ) ; }
com.google.common.collect.ImmutableMap < K , V > map ( ) { return this ; }
public final android.telephony.ims.internal.feature.MmTelFeature.MmTelCapabilityConfiguration queryCapabilityStatus ( ) { return new android.telephony.ims.internal.feature.MmTelFeature.MmTelCapabilityConfiguration ( super . queryCapabilityStatus ( ) ) ; }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsFloatFloatFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.min ( args.inMaxValue , java.lang.StrictMath.max ( args.inValue , args.inMinValue ) ) ; }
public void testMatchingDomainsAccepted ( ) throws java.lang.Exception { libcore.java.net.CookiesTest.TestCookieStore cookieStore = new libcore.java.net.CookiesTest.TestCookieStore ( ) ; java.net.CookieManager cookieManager = new java.net.CookieManager ( cookieStore , java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER ) ; cookieManager.put ( new java.net.URI ( "http://www.android.com/" ) , cookieHeaders ( "a=android;domain=.android.com" ) ) ; assertEquals ( ".android.com" , cookieStore.getCookie ( "a" ) . getDomain ( ) ) ; }
public char readChar ( ) { checkType ( com.android.dx.io.EncodedValueReader.ENCODED_CHAR ) ; type = com.android.dx.io.EncodedValueReader.MUST_READ ; return ( ( char ) ( com.android.dx.util.EncodedValueUtils.readUnsignedInt ( in , arg , false ) ) ) ; }
private void addConnectionServiceAdapter ( com.android.internal.telecom.IConnectionServiceAdapter adapter ) { if ( isServiceValid ( "addConnectionServiceAdapter" ) ) { try { logOutgoing ( "addConnectionServiceAdapter %s" , adapter ) ; mServiceInterface.addConnectionServiceAdapter ( adapter ) ; } catch ( android.os.RemoteException e ) { } } }
default boolean processCountryZones ( java.lang.String countryIso , java.lang.String defaultTimeZoneId , boolean everUsesUtc , java.util.List < java.lang.String > timeZoneIds , java.lang.String debugInfo ) throws org.xmlpull.v1.XmlPullParserException { return libcore.util.TimeZoneFinder.TimeZonesProcessor.CONTINUE ; }
private void free ( ) { if ( ( ctx ) != 0 ) { org.conscrypt.NativeCrypto.EVP_MD_CTX_destroy ( ctx ) ; ctx = 0 ; } }
void updateMwi ( int subId , boolean visible ) { updateMwi ( subId , visible , true ) ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeByteArray ( securityManagerTk ) ; out.writeByteArray ( leSecureConnectionsConfirmation ) ; out.writeByteArray ( leSecureConnectionsRandom ) ; }
public void testBridge002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( BRIDGE002 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.ANDROID_MIN_API_LEVEL.getName ( ) , java.lang.String.valueOf ( BridgeInInterfaceRemover.N_API_LEVEL ) ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . compileAndRunTest ( ) ; }
void putUnchecked ( int pos , double [ ] dst , int srcOffset , int length ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void onDismiss ( android.content.DialogInterface dialog ) { super . onDismiss ( dialog ) ; getActivity ( ) . finish ( ) ; }
public void test_with_TemporalField_long_invalidField ( ) { TEST_2007_07_15.with ( MockFieldNoValue.INSTANCE , 1 ) ; }
private static void $opt$InplaceNegOneInt ( int a ) { a = - a ; Main.assertEquals ( ( - 1 ) , a ) ; }
public void addRepoNodeListener ( @ org.jetbrains.annotations.NotNull com.intellij.dvcs.push.RepositoryNodeListener < T > listener ) { myListeners.add ( listener ) ; }
public void onRttCallScreenUiUnready ( ) { }
public void removeActiveUser ( ) { synchronized ( this ) { if ( ( activeUser ) != null ) { activeUser.setActive ( false ) ; activeUser = null ; com.google.gct.login.GoogleLoginPrefs.removeActiveUser ( ) ; } } }
public static long getLanguageLevel ( int major , int minor ) { assert major == 1 ; switch ( minor ) { case 5 : return org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_5 ; case 6 : return org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_6 ; case 7 : default : return org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_7 ; } }
public java.lang.Boolean telephonyAdjustPreciseCallStateListenLevel ( java.lang.String type , java.lang.Boolean listen ) { return telephonyAdjustPreciseCallStateListenLevelForSubscription ( type , listen , android.telephony.SubscriptionManager.getDefaultVoiceSubId ( ) ) ; }
public final com.android.tools.perflib.heap.ThreadObj getThread ( int serialNumber ) { return mThreads.get ( serialNumber ) ; }
public void streamStateChanged ( int state ) { onStreamStateChanged ( state ) ; }
private static native java.lang.String realpath ( java.lang.String path ) ;
public void addImsServiceFeatureListener ( com.android.ims.internal.IImsServiceFeatureListener callback ) { synchronized ( mLock ) { mImsStatusCallbacks.add ( callback ) ; } }
public static void startMethodTracingDdms ( int bufferSize , int flags ) { dalvik.system.VMDebug.startMethodTracingDdms ( bufferSize , flags ) ; }
static native boolean isAttached ( ) ;
private static native int nativeCopyNativeBinaries ( long handle , java.lang.String sharedLibraryPath , java.lang.String abiToCopy , boolean extractNativeLibs , boolean hasNativeBridge ) ;
public void addParameterAnnotations ( com.android.dx.rop.cst.CstMethodRef method , com.android.dx.rop.annotation.AnnotationsList list ) { if ( ( parameterAnnotations ) == null ) { parameterAnnotations = new java.util.ArrayList < com.android.dx.dex.file.ParameterAnnotationStruct > ( ) ; } parameterAnnotations.add ( new com.android.dx.dex.file.ParameterAnnotationStruct ( method , list ) ) ; }
boolean checkFreeStorage ( com.android.internal.app.IMediaContainerService imcs ) throws android.os.RemoteException { try { mContext.grantUriPermission ( com.android.server.pm.PackageManagerService.DEFAULT_CONTAINER_PACKAGE , this . packageURI , Intent.FLAG_GRANT_READ_URI_PERMISSION ) ; return imcs.checkExternalFreeStorage ( this . packageURI ) ; } finally { mContext.revokeUriPermission ( this . packageURI , Intent.FLAG_GRANT_READ_URI_PERMISSION ) ; } }
private void handleScanTimeout ( ) { android.util.Log.e ( com.android.server.wifi.scanner.WificondScannerImpl.TAG , "Timed out waiting for scan result from wificond" ) ; reportScanFailure ( ) ; processPendingScans ( ) ; }
private native java.lang.String doDump ( ) ;
com.google.common.collect.ImmutableCollection < V > createValues ( ) { return new com.google.common.collect.ImmutableMapValues < K , V > ( ) { @ java.lang.Override com.google.common.collect.ImmutableMap < K , V > map ( ) { return com.google.common.collect.ImmutableMap.this ; } } ; }
public java.lang.String getUniqueId ( java.lang.String prefix ) { fail ( "Not supported in tests yet" ) ; return null ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeString ( encodedActivationCode ) ; dest.writeString ( confirmationCode ) ; dest.writeString ( carrierName ) ; dest.writeTypedArray ( accessRules , flags ) ; }
public void setPercent ( char value ) { this . percent = value ; }
public void testHasScheme ( ) { android.net.Uri schemeUri = android.net.Uri.parse ( "market://details?id=com.google.android.apps.plus" ) ; assertTrue ( "HasPath didn't match" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( "market" ) . matches ( schemeUri ) ) ; assertTrue ( "HasPath didn't match" , android.support.test.espresso.intent.matcher.UriMatchers.hasScheme ( org.hamcrest.CoreMatchers.equalTo ( "market" ) ) . matches ( schemeUri ) ) ; }
public void exit ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Exit Connecting: " + ( getCurrentMessage ( ) . what ) ) ) ; } }
public com.android.ide.common.rendering.api.ResourceValue getProjectResource ( java.lang.String resourceType , java.lang.String resourceName ) { return null ; }
public int getOtaStatus ( ) { if ( ! ( isEnabled ( ) ) ) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE ; } try { return getIEuiccController ( ) . getOtaStatus ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public org.eclipse.ui.views.properties.IPropertyDescriptor [ ] getPropertyDescriptors ( ) { com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiView = getUiViewKey ( ) ; if ( uiView != null ) { return ( ( org.eclipse.ui.views.properties.IPropertySource ) ( uiView ) ) . getPropertyDescriptors ( ) ; } return null ; }
public void setTestVariantData ( @ com.android.annotations.NonNull com.android.build.gradle.internal.variant.TestVariantData testVariantData , @ com.android.annotations.NonNull com.android.builder.core.VariantConfiguration.Type type ) { testVariants.put ( type , testVariantData ) ; }
public com.google.common.collect.SortedMultiset < E > subMultiset ( E fromElement , com.google.common.collect.BoundType fromBoundType , E toElement , com.google.common.collect.BoundType toBoundType ) { return forwardMultiset ( ) . subMultiset ( toElement , toBoundType , fromElement , fromBoundType ) . descendingMultiset ( ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.String > run ( com.google.common.collect.ImmutableList < java.lang.String > args ) { return com.google.common.util.concurrent.Futures.immediateFuture ( android.text.TextUtils.join ( " " , args ) ) ; }
public void verifyParcelWithoutPolicy ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = android.net.wifi.hotspot2.PasspointConfigurationTest.createConfig ( ) ; config.policy = null ; android.net.wifi.hotspot2.PasspointConfigurationTest.verifyParcel ( config ) ; }
protected boolean assertNotSame ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { return handleAssert ( ( expected != actual ) , message , stringFor ( expected ) , stringFor ( actual ) , "!=" , true ) ; }
public proguard.gradle.ProGuardTask getProguardTask ( ) { return getVariantData ( ) . proguardTask ; }
private void reportNotSpamAndFinish ( java.lang.String number , com.android.dialer.logging.ContactLookupResult.Type contactLookupResultType ) { logCallImpression ( DialerImpression.Type.SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM ) ; com.android.dialer.spam.Spam.get ( this ) . reportNotSpamFromAfterCallNotification ( number , getCountryIso ( ) , CallLog.Calls.INCOMING_TYPE , ReportingLocation.Type.FEEDBACK_PROMPT , contactLookupResultType ) ; finish ( ) ; }
public void toSession_Type3_Valid_Success ( ) throws java.lang.Exception { org.junit.Assert.assertNotNull ( org.conscrypt.AbstractSessionContextTest.clientCtx.toSession ( org.conscrypt.AbstractSessionContextTest.getType3 ( ) . build ( ) , "www.google.com" , 443 ) ) ; }
public java.io.FileDescriptor [ ] pipe ( ) throws android.system.ErrnoException ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onDeviceConfigChange ( ) ; }
public boolean isVideoTelephonyAvailable ( ) { try { return getITelephony ( ) . isVideoTelephonyAvailable ( ) ; } catch ( android.os.RemoteException ex ) { return false ; } catch ( java.lang.NullPointerException ex ) { return false ; } }
private boolean runCorrectnessPatterns ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s ) { boolean pass = true ; pass &= patternInterleavedReduce ( RS , s ) ; pass &= patternRedundantGet ( RS , s ) ; return pass ; }
public void replaceServer ( @ javax.annotation.Nonnull java.io.InputStream newServer , boolean forced ) throws com.android.jack.server.api.v01.NotInstalledException , com.android.jack.server.api.v01.ServerException , java.io.IOException { this . replaceServer ( newServer , forced ) ; }
public static com.android.server.wifi.ScanResults createOverflowing ( int id , int maxResults , com.android.server.wifi.ScanDetail ... nativeResults ) { return new com.android.server.wifi.ScanResults ( id , maxResults , nativeResults ) ; }
public java.lang.String toString ( ) { java.lang.String out = name ; if ( ( result ) == 1 ) { out += " - PASSED" ; } else if ( ( result ) == ( - 1 ) ) { out += " - FAILED" ; } return out ; }
public void unplug ( long batteryUptime , long batteryRealtime ) { mUnpluggedStartTime = getStartTimeToNowLocked ( batteryUptime ) ; mUnpluggedStarts = mStarts ; mUnpluggedLaunches = mLaunches ; }
public static com.android.tools.perflib.heap.Instance findObject ( com.android.tools.perflib.heap.State state , java.lang.String id ) { long id2 = java.lang.Long.parseLong ( id , 16 ) ; return state.findReference ( id2 ) ; }
private void logError ( java.lang.String fmt , java.lang.Object ... args ) { mLocalLog.log ( ( "ERROR " + ( java.lang.String.format ( fmt , args ) ) ) ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object rowKey , @ javax.annotation.Nullable java.lang.Object columnKey ) { return ( get ( rowKey , columnKey ) ) != null ; }
public boolean isValid ( ) { return ( templates [ 0 ] ) != null ; }
public void testDebuggerdDomain ( ) throws java.io.FileNotFoundException { assertDomainOne ( "u:r:debuggerd:s0" , "/system/bin/debuggerd" ) ; }
public synchronized void shutdown ( ) { if ( ( mReceiveThread ) != null ) { log ( "shutting down" ) ; mReceiveThread.halt ( ) ; mReceiveThread = null ; } mRas.clear ( ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutMetadata get ( ) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutMetadata.sInstance ; }
private boolean hasTestRunnerLibrary ( com.android.sdklib.xml.AndroidManifestParser.ManifestData manifestData ) { for ( java.lang.String lib : manifestData.getUsesLibraries ( ) ) { if ( lib.equals ( AndroidConstants.LIBRARY_TEST_RUNNER ) ) { return true ; } } return false ; }
public native long getLong$ ( long address ) ;
native void rsnScriptBindAllocation ( long con , long script , long alloc , int slot ) ;
com.google.common.cache.CacheBuilder < K , V > strongValues ( ) { return setValueStrength ( com.google.common.cache.LocalCache.Strength.STRONG ) ; }
private void resetState ( ) { if ( ( mHandler ) != null ) { mHandler.removeMessages ( com.android.bluetooth.btservice.ActiveDeviceManager.MESSAGE_SELECT_ACTICE_DEVICE_TIMEOUT ) ; } mA2dpConnectedDevices.clear ( ) ; mA2dpActiveDevice = null ; mHfpConnectedDevices.clear ( ) ; mHfpActiveDevice = null ; }
protected javax.net.ssl.SSLSession wrapSSLSessionIfNeeded ( javax.net.ssl.SSLSession session ) { if ( session instanceof org.conscrypt.OpenSSLSessionImpl ) { return org.conscrypt.Platform.wrapSSLSession ( ( ( org.conscrypt.OpenSSLSessionImpl ) ( session ) ) ) ; } else { return session ; } }
public android.view.ActionProvider getActionProvider ( android.support.v7.app.AppCompatActivity activity ) { return com.android.dialer.simulator.impl.SimulatorMainMenu.getActionProvider ( activity ) ; }
public static int NegSub2 ( int arg1 , int arg2 ) { int temp = arg1 - arg2 ; return ( - temp ) | ( - temp ) ; }
private android.net.NetworkRequest sendRequestForNetwork ( android.net.NetworkCapabilities need , android.net.ConnectivityManager.NetworkCallback callback , int timeoutMs , int action , int legacyType ) { return sendRequestForNetwork ( need , callback , getHandler ( ) , timeoutMs , action , legacyType ) ; }
public boolean getSampleEnabled ( ) { return getSecureBoolean ( android.provider.Settings.Secure.NETSTATS_SAMPLE_ENABLED , true ) ; }
void write ( com.android.dx.io.MethodId methodId ) { methodId.writeTo ( idsDefsOut ) ; }
public void requestNetwork ( android.net.NetworkRequest request , android.net.ConnectivityManager.NetworkCallback networkCallback ) { requestNetwork ( request , networkCallback , 0 , inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ) ; }
private void write ( int count ) throws java.io.IOException { mOutputStream.write ( mBuffer , 0 , count ) ; }
public void testPerformanceSummaryGroupedNormal ( ) throws java.io.FileNotFoundException , java.io.IOException { setUp ( true ) ; java.lang.String output = com.android.vts.servlet.VtsPerformanceJobServlet.getPeformanceSummary ( "test" , dailySummaries , legendLabels ) ; com.android.vts.servlet.VtsPerformanceJobServletTest.compareToBaseline ( output , "performanceSummary4.html" ) ; }
public android.net.IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex ( int direction , java.net.InetAddress remoteAddress ) throws android.net.IpSecManager.ResourceUnavailableException { try { return new android.net.IpSecManager.SecurityParameterIndex ( mService , direction , remoteAddress , android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX ) ; } catch ( android.net.IpSecManager.SpiUnavailableException unlikely ) { throw new android.net.IpSecManager.ResourceUnavailableException ( "No SPIs available" ) ; } }
void setConnectionProperties ( java.lang.String callId , int properties ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.setConnectionProperties ( callId , properties ) ; } catch ( android.os.RemoteException ignored ) { } } }
public ScriptGroup2.Closure prepInit ( android.renderscript.ScriptGroup2.Builder b ) { return b.addInvoke ( s.getInvokeID_initialize ( ) , mInBlack , mOutBlack , mInWMinInB , mOutWMinOutB , mOverInWMinInB , mSatMatrix ) ; }
protected boolean assertNull ( java.lang.String message , java.lang.Object actual ) { return handleAssert ( ( actual == null ) , message , null , stringFor ( actual ) ) ; }
public void reloadSdk ( @ com.android.annotations.NonNull com.android.utils.ILogger log ) { mCachedTargets = null ; mLocalSdk.clearLocalPkg ( LocalSdk.PKG_ALL ) ; }
public org.eclipse.swt.graphics.Image getImage ( java.lang.Object element ) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory ( ) ; if ( imgFactory != null ) { return imgFactory.getImageForObject ( element ) ; } return super . getImage ( element ) ; }
public java.util.List < java.lang.String > getApplicableCallNames ( ) { return java.util.Arrays.asList ( com.android.tools.lint.checks.CleanupDetector.RECYCLE , com.android.tools.lint.checks.CleanupDetector.OBTAIN_STYLED_ATTRIBUTES , com.android.tools.lint.checks.CleanupDetector.OBTAIN , com.android.tools.lint.checks.CleanupDetector.OBTAIN_ATTRIBUTES , com.android.tools.lint.checks.CleanupDetector.OBTAIN_TYPED_ARRAY , com.android.tools.lint.checks.CleanupDetector.OBTAIN_NO_HISTORY , com.android.tools.lint.checks.CleanupDetector.BEGIN_TRANSACTION , com.android.tools.lint.checks.CleanupDetector.COMMIT , com.android.tools.lint.checks.CleanupDetector.COMMIT_ALLOWING_LOSS , com.android.tools.lint.checks.CleanupDetector.SHOW ) ; }
public int getFeatureState ( ) { try { return mCompatFeature.getFeatureStatus ( ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e.getMessage ( ) ) ; } }
public com.android.ide.eclipse.adt.editors.layout.gscripts.Rect set ( com.android.ide.eclipse.adt.editors.layout.gscripts.Rect r ) { set ( r.x , r.y , r.w , r.h ) ; return this ; }
public libcore.tzdata.update2.tools.TimeZoneDistroBuilder setIcuData ( byte [ ] icuData ) { this . icuData = icuData ; return this ; }
public final java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > getSuccessors ( ) { java.util.ArrayList < com.android.jack.ir.ast.cfg.JBasicBlock > result = new java.util.ArrayList < > ( ) ; collectSuccessors ( result ) ; return com.android.jack.Jack.getUnmodifiableCollections ( ) . getUnmodifiableList ( result ) ; }
public java.util.List < android.net.wifi.hotspot2.PasspointConfiguration > getPasspointConfigurations ( ) { enforceAccessPermission ( ) ; return mPasspointManager.getProviderConfigs ( ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { reloadTagAbiCombo ( ) ; validatePage ( ) ; }
public boolean getMultiDex ( ) { java.lang.Boolean value = mBuildType.getMultiDex ( ) ; if ( value != null ) { return value ; } value = mMergedFlavor.getMultiDex ( ) ; if ( value != null ) { return value ; } return false ; }
public void onViewCreated ( android.view.View view , android.os.Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; view.setOnKeyListener ( this ) ; }
public void updateMatchCount ( int matchIndex , int matchCount , boolean isEmptyFind ) { if ( ! isEmptyFind ) { mNumberOfMatches = matchCount ; mActiveMatchIndex = matchIndex ; updateMatchesString ( ) ; } else { mMatches.setVisibility ( View.INVISIBLE ) ; mNumberOfMatches = 0 ; } }
public void setupDataCallResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SetupDataCallResult dcResponse ) { responseSetupDataCall ( responseInfo , dcResponse ) ; }
public void delete ( ) throws com.android.sched.util.file.CannotDeleteFileException { super . delete ( ) ; ( ( com.android.sched.vfs.InMemoryVDir ) ( parent ) ) . internalDelete ( name ) ; }
protected void removeFile ( com.android.ide.common.resources.ResourceFile file , com.android.ide.common.resources.ScanningContext context ) { file.dispose ( context ) ; mFiles.remove ( file ) ; }
public void sendTree ( org.eclipse.jdt.internal.junit.runner.IVisitsTestTrees notified ) { notified.visitTreeEntry ( getIdentifier ( ) , true , countTestCases ( ) ) ; for ( com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestCaseReference ref : mTests ) { ref.sendTree ( notified ) ; } }
public com.android.jack.ir.ast.JSsaVariableRef getRhs ( @ javax.annotation.Nonnegative int index ) { return rhs.get ( index ) ; }
public boolean contains ( java.lang.Object o ) { return this . containsKey ( o ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { showPopup ( e ) ; }
public void setSourceInfos ( @ javax.annotation.Nonnull com.android.jack.jayce.v0003.nodes.NSourceInfo sourceInfo ) { this . sourceInfo = sourceInfo ; }
public boolean isAnnotationPresent ( java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType ) { if ( annotationType == null ) { throw new java.lang.NullPointerException ( "annotationType == null" ) ; } return libcore.reflect.AnnotationAccess.isDeclaredAnnotationPresent ( this , annotationType ) ; }
public final native void pause ( int streamID ) ;
public android.icu.impl.UResource.TableSink getOrCreateTableSink ( android.icu.impl.UResource.Key key , int initialSize ) { return null ; }
public java.net.URLStreamHandler createURLStreamHandler ( java.lang.String protocol ) { if ( "jar" . equals ( protocol ) ) { return new libcore.net.url.JarHandler ( ) ; } fail ( ( "Should be JarHandler. But " + protocol ) ) ; return null ; }
public static void addEntryToClasspath ( org.eclipse.jdt.core.IJavaProject javaProject , org.eclipse.jdt.core.IClasspathEntry new_entry ) throws org.eclipse.jdt.core.JavaModelException { org.eclipse.jdt.core.IClasspathEntry [ ] entries = javaProject.getRawClasspath ( ) ; entries = com.android.ide.eclipse.adt.internal.project.ProjectHelper.addEntryToClasspath ( entries , new_entry ) ; javaProject.setRawClasspath ( entries , new org.eclipse.core.runtime.NullProgressMonitor ( ) ) ; }
public boolean hasMoreElements ( ) { return enum_.hasMoreElements ( ) ; }
com.android.sched.vfs.BaseVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { return changeVFS ( vfs.getVDir ( parent , name ) ) ; }
public void setProcessorNames ( @ javax.annotation.Nonnull java.util.List < java.lang.String > processorNames ) { options.processor = com.google.common.base.Joiner.on ( ',' ) . join ( processorNames ) ; }
public void onLost ( android.net.Network lostNetwork ) { if ( mNetwork.equals ( lostNetwork ) ) { done ( com.android.captiveportallogin.CaptivePortalLoginActivity.Result.UNWANTED ) ; } }
public int getEapMethod ( ) { java.lang.String eapMethod = mFields.get ( android.net.wifi.WifiEnterpriseConfig.EAP_KEY ) ; return getStringIndex ( android.net.wifi.WifiEnterpriseConfig.Eap.strings , eapMethod , android.net.wifi.WifiEnterpriseConfig.Eap.PEAP ) ; }
public static void w ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.WARN ) { android.util.Log.w ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public java.util.List < byte [ ] > getStatusResponses ( ) { if ( ( peerCertificateOcspData ) == null ) { return null ; } return java.util.Collections.singletonList ( peerCertificateOcspData.clone ( ) ) ; }
public java.util.Set < java.io.File > getFolders ( ) { return mFolders ; }
public void testGetAMPMString ( ) { assertEquals ( "am" , android.text.format.DateUtils.getAMPMString ( java.util.Calendar.AM ) ) ; assertEquals ( "pm" , android.text.format.DateUtils.getAMPMString ( java.util.Calendar.PM ) ) ; }
public com.android.server.wifi.nan.WifiNanDiscoverySessionState getSession ( int sessionId ) { return mSessions.get ( sessionId ) ; }
public boolean shouldShow ( ) { return ( ( com.android.dialer.buildtype.BuildType.get ( ) ) == ( com.android.dialer.buildtype.BuildType.BUGFOOD ) ) || ( com.android.dialer.common.LogUtil.isDebugEnabled ( ) ) ; }
void orderImpl ( java.nio.ByteOrder byteOrder ) { if ( byteOrder == null ) { byteOrder = java.nio.ByteOrder.LITTLE_ENDIAN ; } order = byteOrder ; }
private static native void enableClassLoadEvents ( boolean b ) ;
public void flush ( ) { try { delegate.flush ( ) ; } catch ( java.io.IOException ignored ) { } }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JArrayRef expr ) { performCommonChecks ( expr ) ; otherOrMe ( expr ) ; }
private java.lang.String toZoneIdStr ( java.lang.String expected ) { return expected.replaceAll ( "(?:GMT|UTC)(?<off>[+\\-]?[0-9]{2}:[0-9]{2})" , "${off}" ) ; }
public void onInterfaceAddressChangeNotification ( byte [ ] mac ) { android.os.Message msg = mSm.obtainMessage ( com.android.server.wifi.nan.WifiNanStateManager.MESSAGE_TYPE_NOTIFICATION ) ; msg.arg1 = com.android.server.wifi.nan.WifiNanStateManager.NOTIFICATION_TYPE_INTERFACE_CHANGE ; msg.obj = mac ; mSm.sendMessage ( msg ) ; }
public void setEnabled ( boolean enable ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.CONNECTIVITY_INTERNAL , "NsdService" ) ; mNsdSettings.putEnabledStatus ( enable ) ; if ( enable ) { mNsdStateMachine.sendMessage ( NsdManager.ENABLE ) ; } else { mNsdStateMachine.sendMessage ( NsdManager.DISABLE ) ; } }
public static java.lang.Iterable < java.lang.Class < ? extends com.android.rs.unittest.UnitTest > > getProperSubclasses ( ) throws java.io.IOException , java.lang.ClassNotFoundException { return com.android.rs.unittest.UnitTest.getProperSubclasses ( com.android.rs.unittest.UnitTest.class ) ; }
protected void onResume ( ) { super . onResume ( ) ; android.content.IntentFilter filter = new android.content.IntentFilter ( HceUtils.ACTION_APDU_SEQUENCE_COMPLETE ) ; registerReceiver ( mReceiver , filter ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , int value ) { checkNameAndAppend ( name ) . append ( value ) ; return this ; }
public static final java.io.File getTestRootDir ( @ javax.annotation.Nonnull java.lang.String packageName ) { return new java.io.File ( com.android.jack.test.toolchain.AbstractTestTools.getTestsRootDir ( ) , packageName.replace ( "." , java.io.File.separator ) ) ; }
protected com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface ( @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JTypeLookupException { for ( com.android.jack.load.PackageLoader loader : loaders ) { try { return loader.loadClassOrInterface ( this , simpleName ) ; } catch ( com.android.jack.lookup.JLookupException e ) { } } throw new com.android.jack.ir.ast.JTypeLookupException ( this , simpleName ) ; }
com.google.common.collect.ImmutableMap < K , V > map ( ) { return this ; }
public void testEnableUsage ( ) { mDut.enableUsage ( ) ; org.mockito.Mockito.verify ( mNanStateManagerMock ) . enableUsage ( ) ; }
public void setApiLevel ( int apiLevel , boolean experimental ) { this . opcodes = new org.jf.dexlib2.Opcodes ( apiLevel , experimental ) ; this . apiLevel = apiLevel ; }
public void setObfuscationMappingOutputFile ( @ javax.annotation.Nonnull java.io.File obfuscationMappingOutputFile ) { options.addProperty ( MappingPrinter.MAPPING_OUTPUT_ENABLED.getName ( ) , "true" ) ; options.addProperty ( MappingPrinter.MAPPING_OUTPUT_FILE.getName ( ) , obfuscationMappingOutputFile.getPath ( ) ) ; }
public org.objectweb.asm.tree.AbstractInsnNode clone ( final java.util.Map < org.objectweb.asm.tree.LabelNode , org.objectweb.asm.tree.LabelNode > labels ) { return new org.objectweb.asm.tree.MethodInsnNode ( opcode , owner , name , desc ) ; }
public static void lowLevelShutdown ( ) { android.os.SystemProperties.set ( "sys.powerctl" , "shutdown" ) ; }
public void deleteOdex ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { mInstaller.execute ( "delete_odex" , apkPath , instructionSet , outputPath ) ; }
public void replaceWith ( com.android.layoutlib.utils.ResourceValue value ) { super . replaceWith ( value ) ; if ( value instanceof com.android.layoutlib.utils.StyleResourceValue ) { mItems.clear ( ) ; mItems.putAll ( ( ( com.android.layoutlib.utils.StyleResourceValue ) ( value ) ) . mItems ) ; } }
public static org.hamcrest.org.hamcrest.Matcher < java.lang.Object > is ( java.lang.Class < ? > type ) { return org.hamcrest.core.Is.is ( type ) ; }
public void compileExt ( ) throws java.lang.Exception { com.android.jack.test.toolchain.AndroidToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.AndroidToolchain.class ) ; toolchain.srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( com.android.jack.compile.androidtree.ext.ExtCompilationTest.CLASSPATH ) , com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false , com.android.jack.compile.androidtree.ext.ExtCompilationTest.SOURCELIST ) ; }
public void visitTypeInsn ( int opcode , java.lang.String type ) { printer.visitTypeInsn ( opcode , type ) ; printTypeOfOperandStackTop ( ) ; super . visitTypeInsn ( opcode , type ) ; }
public boolean isOpened ( ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . isOpened ( mSlotId , mSupportedFeature ) ; } }
public void testExtractDecodeEditEncodeMux720p ( ) throws java.lang.Throwable { setSize ( 1280 , 720 ) ; setSource ( R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz ) ; setCopyVideo ( ) ; android.media.cts.ExtractDecodeEditEncodeMuxTest.TestWrapper.runTest ( this ) ; }
public static native java.lang.String getCurrencySymbol ( java.lang.String locale , java.lang.String currencyCode ) ;
public void addData ( java.lang.String label , com.android.vts.entity.ProfilingPointRunEntity profilingPoint ) { addSeriesData ( label , "" , profilingPoint ) ; }
public void testUserPrefOffUserI ( ) { int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL ; int iloc = PackageInfo.INSTALL_LOCATION_UNSPECIFIED ; setUserX ( false , userSetting , iloc ) ; }
private synchronized int getNextMergerIdx ( int oldMergerIdx ) { if ( ( currentMergerIdx ) > oldMergerIdx ) { return getCurrentMergerIdx ( ) ; } ( currentMergerIdx ) ++ ; mergers.add ( getNewMerger ( ) ) ; return getCurrentMergerIdx ( ) ; }
public void checkStateChanged ( org.eclipse.jface.viewers.CheckStateChangedEvent event ) { onTreeCheckStateChanged ( event ) ; }
private boolean isContactEditable ( ) { return ( ( mContactData ) != null ) && ( ! ( mContactData.isDirectoryEntry ( ) ) ) ; }
public void setUp ( ) { TEST_2008_06 = java.time.YearMonth.of ( 2008 , 6 ) ; }
public void supplyPin ( java.lang.String pin , android.os.Message onComplete ) { synchronized ( mLock ) { mCi.supplyIccPin ( pin , onComplete ) ; } }
public static java.net.InetAddress getByNameOnNet ( java.lang.String host , int netId ) throws java.net.UnknownHostException { return java.net.InetAddress.getAllByNameImpl ( host , netId ) [ 0 ] ; }
public int hashCode ( ) { int primeNum = 31 ; return ( ( mSignalStrength ) * primeNum ) + ( ( mBitErrorRate ) * primeNum ) ; }
public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder forExpermimentalPlugin ( boolean mode ) { this . experimentalMode = mode ; return this ; }
public void setDtmfText ( java.lang.String text ) { mDtmfDialerField.setText ( android.telephony.PhoneNumberUtils.ttsSpanAsPhoneNumber ( text ) ) ; }
public double expectedFalsePositiveProbability ( ) { return java.lang.Math.pow ( ( ( ( double ) ( bits.bitCount ( ) ) ) / ( bits.size ( ) ) ) , numHashFunctions ) ; }
public static java.io.File getJackTestFolder ( @ javax.annotation.Nonnull java.lang.String testName ) { return com.android.jack.TestTools.getFromAndroidTree ( ( ( ( com.android.jack.TestTools.JACK_TESTS_PATH ) + ( com.android.jack.TestTools.JACK_PACKAGE ) ) + testName ) ) ; }
synchronized void nScriptInvoke ( long id , int slot ) { validate ( ) ; rsnScriptInvoke ( mContext , id , slot ) ; }
public int run ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.Nonnull java.lang.String [ ] mainClasses , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) throws com.android.jack.test.runner.RuntimeRunnerException { return runOnHost ( buildCommandLine ( options , mainClasses , classpathFiles ) , "ANDROID_HOST_OUT" ) ; }
public libcore.util.ZoneInfoTestHelper.TzDataBuilder setZoneTabOffsetOverride ( int zoneTabOffset ) { this . zoneTabOffsetOverride = zoneTabOffset ; return this ; }
public void onReceiveUssdResponse ( java.lang.String request , java.lang.CharSequence response ) { }
public void traverse ( @ javax.annotation.Nonnull com.android.sched.scheduler.ScheduleInstance < ? super com.android.sched.item.Component > schedule ) throws java.lang.Exception { schedule.process ( this ) ; annotations.traverse ( schedule ) ; }
public java.lang.String toString ( ) { return android.net.MacAddress.stringAddrFromByteAddr ( android.net.MacAddress.byteAddrFromLongAddr ( mAddr ) ) ; }
boolean isVisible ( ) { return ( ( u2accessFlags ) & ( ClassConstants.INTERNAL_ACC_PUBLIC ) ) != 0 ; }
protected org.eclipse.core.runtime.IStatus run ( org.eclipse.core.runtime.IProgressMonitor monitor ) { try { project.deleteMarkers ( markerType , true , IResource.DEPTH_INFINITE ) ; } catch ( org.eclipse.core.runtime.CoreException e2 ) { return e2.getStatus ( ) ; } return org.eclipse.core.runtime.Status.OK_STATUS ; }
com.android.build.gradle.model.AndroidProjectTest.ProductFlavorTester setTestPackageName ( java.lang.String testPackageName ) { this . testPackageName = testPackageName ; return this ; }
protected com.android.jack.test.toolchain.JackCliToolchain setVerbosityLevel ( @ javax.annotation.Nonnull com.android.jack.Options.VerbosityLevel level ) { verbosityLevel = level ; return this ; }
public void onPlaybackStateChanged ( android.media.session.PlaybackState state ) { android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "MediaController playback changed: " + ( state.toString ( ) ) ) ) ; updatePlayPauseState ( state ) ; }
public static native boolean ensureInOsrCode ( ) ;
public static void loop9 ( ) { while ( ( java.lang.Runtime.getRuntime ( ) ) != null ) { boolean incoming = Main.field ; while ( incoming ) { } } }
public void passTest ( ) { if ( ( result ) != ( - 1 ) ) { result = 1 ; } updateUI ( ) ; }
java.io.File getFile ( ) ;
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { boolean listMode = mSkinListRadio.getSelection ( ) ; enableSkinWidgets ( listMode ) ; validatePage ( ) ; }
private java.util.List < java.util.logging.LogManager.LoggerContext > contexts ( ) { java.util.List < java.util.logging.LogManager.LoggerContext > cxs = new java.util.ArrayList < > ( ) ; cxs.add ( systemContext ) ; cxs.add ( getUserContext ( ) ) ; return cxs ; }
public void addAllNetworks ( java.util.Collection < com.android.sdklib.devices.Network > ns ) { mNetworking.addAll ( ns ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { launchChooseLockscreen ( ) ; }
public void testMultiProject ( ) throws java.lang.Exception { assertEquals ( "strings.xml:7: Warning: The resource R.string.string3 appears to be unused" , lintProject ( "multiproject/main-manifest.xml=>AndroidManifest.xml" , "multiproject/main.properties=>project.properties" , "multiproject/MainCode.java.txt=>src/foo/main/MainCode.java" , "multiproject/library-manifest.xml=>../LibraryProject/AndroidManifest.xml" , "multiproject/library.properties=>../LibraryProject/project.properties" , "multiproject/LibraryCode.java.txt=>../LibraryProject/src/foo/library/LibraryCode.java" , "multiproject/strings.xml=>../LibraryProject/res/values/strings.xml" ) ) ; }
public static java.net.InetAddress getByName ( java.lang.String host ) throws java.net.UnknownHostException { return java.net.InetAddress.getAllByName ( host ) [ 0 ] ; }
public libcore.tzdata.update2.tools.TimeZoneBundleBuilder setAndroidRevision ( java.lang.String androidRevision ) { this . androidRevision = androidRevision ; return this ; }
public void callSessionMergeStarted ( com.android.ims.internal.IImsCallSession newSession , com.android.ims.ImsCallProfile profile ) { android.util.Log.d ( com.android.ims.internal.ImsCallSession.TAG , "callSessionMergeStarted" ) ; }
public boolean isChainValid ( java.lang.String hostname , java.util.List < java.security.cert.X509Certificate > chain ) throws org.conscrypt.PinManagerException { final org.conscrypt.PinListEntry entry = lookup ( hostname ) ; if ( entry == null ) { return true ; } return entry.isChainValid ( chain ) ; }
public com.google.common.primitives.UnsignedLong subtract ( com.google.common.primitives.UnsignedLong val ) { com.google.common.base.Preconditions.checkNotNull ( val ) ; return com.google.common.primitives.UnsignedLong.asUnsigned ( ( ( this . value ) - ( val.value ) ) ) ; }
public static int intToFloatToInt ( int value ) { return ( ( int ) ( ( float ) ( value ) ) ) ; }
public V2 getValue ( ) { return transformer.transformEntry ( entry.getKey ( ) , entry.getValue ( ) ) ; }
private void emitUnsignedLeb128 ( int n ) throws java.io.IOException { if ( n < 0 ) { throw new java.lang.RuntimeException ( ( "Signed value where unsigned required: " + n ) ) ; } output.writeSignedLeb128 ( n ) ; }
public void start ( org.osgi.framework.BundleContext context ) throws java.lang.Exception { super . start ( context ) ; com.android.ide.eclipse.hierarchyviewer.HierarchyViewerPlugin.plugin = this ; }
protected void setProgressBarVisible ( boolean visible ) { if ( ( mProgressHeader ) != null ) { mProgressHeader.setVisibility ( ( visible ? android.view.View.VISIBLE : android.view.View.GONE ) ) ; } }
public static void computeFmin ( android.renderscript.cts.TestFmin.ArgumentsFloatFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = java.lang.StrictMath.min ( args.inX , args.inY ) ; }
public boolean enqueue ( ) { return enqueueInternal ( ) ; }
private void addServerMode ( @ javax.annotation.Nonnegative int delay , @ javax.annotation.Nonnull com.android.jack.server.ServerMode newMode ) { delayedModes.add ( new com.android.jack.server.JackHttpServer.TimedServerMode ( ( delay * 1000L ) , newMode ) ) ; }
public final native boolean [ ] readBoolVector ( ) ;
public boolean addPasspointConfiguration ( android.net.wifi.hotspot2.PasspointConfiguration config ) { enforceChangePermission ( ) ; return mPasspointManager.addProvider ( config ) ; }
public static com.google.gct.testing.GoogleCloudTestingConfigurationImpl getSelectedGoogleCloudTestingConfiguration ( java.lang.String testRunId ) { return com.google.gct.testing.GoogleCloudTestingConfigurationFactoryImpl.testRunIdToCloudConfiguration.get ( testRunId ) ; }
public boolean setRadioPower ( boolean turnOn ) { return setRadioPowerForSubscriber ( getDefaultSubscription ( ) , turnOn ) ; }
protected static java.lang.String spOptionsToString ( int option ) { return android.icu.dev.test.bidi.BidiTest.optionToString ( option , android.icu.dev.test.bidi.BidiTest.SETPARA_MASK , android.icu.dev.test.bidi.BidiTest.setParaDescriptions ) ; }
public void onChange ( boolean selfChange ) { update ( ) ; try { mWindowManager.setRotation ( com.android.internal.policy.impl.USE_LAST_ROTATION , false , mFancyRotationAnimation ) ; } catch ( android.os.RemoteException e ) { } }
public boolean matches ( final java.lang.Object o ) { assertEquals ( message.getMessageText ( ) , ( ( com.android.messaging.datamodel.data.MessageData ) ( o ) ) . getMessageText ( ) ) ; return true ; }
public java.lang.String getMessage ( ) { return "Error during the library writing phase: " + ( getCause ( ) . getMessage ( ) ) ; }
public static boolean getDebuggable ( com.android.sdklib.io.IAbstractFile manifestFile ) throws com.android.sdklib.io.StreamException , javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.sdklib.xml.AndroidXPathFactory.newXPath ( ) ; java.lang.String value = xPath.evaluate ( ( ( ( ( ( ( ( "/" + ( com.android.sdklib.xml.AndroidManifest.NODE_MANIFEST ) ) + "/" ) + ( com.android.sdklib.xml.AndroidManifest.NODE_APPLICATION ) ) + "/@" ) + ( AndroidXPathFactory.DEFAULT_NS_PREFIX ) ) + ":" ) + ( com.android.sdklib.xml.AndroidManifest.ATTRIBUTE_DEBUGGABLE ) ) , new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) ) ; return java.lang.Boolean.parseBoolean ( value ) ; }
public void testParsedResourcesByCount ( ) throws java.lang.Exception { java.util.List < com.android.ide.common.res2.ResourceItem > resources = com.android.ide.common.res2.ValueResourceParser2Test.getParsedResources ( ) ; assertEquals ( 20 , resources.size ( ) ) ; }
public void visitAnnotation ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.Annotation annotation ) { annotation.referencedClasses = findReferencedClasses ( clazz.getName ( ) , clazz.getString ( annotation.u2typeIndex ) ) ; annotation.elementValuesAccept ( clazz , this ) ; }
public boolean isEntryStored ( java.lang.String entryName ) { java.util.zip.ZipEntry entry = jarFile.findEntry ( entryName ) ; return ( entry != null ) && ( ( entry.getMethod ( ) ) == ( java.util.zip.ZipEntry.STORED ) ) ; }
public void run ( com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { new com.android.jack.util.graph.DominanceFrontier ( cfg ) . run ( ) ; }
public static long bar ( int i ) { return i ; }
public java.lang.String getIccId ( ) { return mIccId ; }
public void binderDied ( ) { android.util.Log.e ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , ( ( "ImsService(" + ( mComponentName ) ) + ") died. Cleaning up." ) ) ; notifyAllFeaturesRemoved ( ) ; cleanUpService ( ) ; mHandler.postDelayed ( mRestartImsServiceRunnable , mRebindRetry.getRetryTimeout ( ) ) ; }
public com.android.sched.util.codec.Formatter < ? > [ ] getFormatters ( ) { return new com.android.sched.util.codec.Formatter < ? > [ ] { new com.android.sched.util.codec.LongCodec ( ) , new com.android.sched.util.codec.ByteFormatter ( ) } ; }
public void testSerializationGolden ( ) throws java.lang.Exception { org.apache.harmony.testframework.serialization.SerializationTest.verifyGolden ( this , getSerializationData ( ) ) ; }
public java.util.List < java.lang.String > getCarrierPackageNamesForIntent ( android.content.Intent intent ) { return getCarrierPackageNamesForIntentAndPhone ( intent , android.telephony.TelephonyManager.getDefaultPhone ( ) ) ; }
public java.lang.StringBuffer format ( long number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition ) { return format ( number , result , fieldPosition , false ) ; }
public void getVideoQuality ( com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { }
com.android.ide.eclipse.adt.editors.layout.gscripts.DropFeedback onDropEnter ( com.android.ide.eclipse.adt.editors.layout.gscripts.INode targetNode , java.lang.String fqcn ) ;
public char getPercent ( ) { if ( ( percent.length ( ) ) == 1 ) { return percent.charAt ( 0 ) ; } throw new java.lang.UnsupportedOperationException ( ( "Percent spans multiple characters: " + ( percent ) ) ) ; }
public int doFinal ( byte [ ] out , int outOff ) throws java.lang.IllegalStateException , org.bouncycastle.crypto.InvalidCipherTextException { return cipher.doFinal ( out , outOff ) ; }
public void connect ( android.bluetooth.BluetoothDevice device ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Connect Request " + ( device.getAddress ( ) ) ) ) ; sendMessage ( com.android.bluetooth.pbapclient.PbapClientStateMachine.MSG_CONNECT , device ) ; }
public void test_F32_3_SCALE10_10_inSqure ( ) { testReszie ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.FLOAT_32 , 3 , 1.0F , 1.0F ) ; checkError ( ) ; }
public void testE6 ( ) { dot.junit.opcodes.sput_byte.d.T_sput_byte_13 t = new dot.junit.opcodes.sput_byte.d.T_sput_byte_13 ( ) ; try { t.run ( ) ; fail ( "expected Error" ) ; } catch ( java.lang.Error e ) { } }
public void testDeserializeWasObject ( ) throws java.lang.Exception { final java.lang.String s = "aced00057372002b6c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + "e54657374245761734f626a656374000000000000000002000149000169787000000000" ; assertFalse ( libcore.java.io.SerializationTest.wasObjectInitializedFlag ) ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertFalse ( libcore.java.io.SerializationTest.wasObjectInitializedFlag ) ; }
public com.android.jack.library.OutputJackLibrary checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.vfs.VFS vfs = codec.checkString ( context , string ) ; return com.android.jack.library.JackLibraryFactory.getOutputLibrary ( vfs , com.android.jack.Jack.getEmitterId ( ) , com.android.jack.Jack.getVersionString ( ) ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , float value ) { checkNameAndAppend ( name ) . append ( value ) ; return this ; }
private void serializeNetworkList ( org.xmlpull.v1.XmlSerializer out , java.util.List < android.net.wifi.WifiConfiguration > networkList ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { if ( networkList == null ) { return ; } for ( android.net.wifi.WifiConfiguration network : networkList ) { serializeWifiConfig ( out , network ) ; } }
public void adjustMinimum ( ) { downHeap ( 0 ) ; }
public void checkValidity ( ) { if ( ! ( ( parent ) instanceof com.android.jack.ir.ast.JAnnotationLiteral ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
public java.lang.Integer wifiNanConnect ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "nanConfig" ) org.json.JSONObject nanConfig ) throws android.os.RemoteException , org.json.JSONException { synchronized ( mLock ) { int sessionId = getNextSessionId ( ) ; mMgr.connect ( null , com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.getConfigRequest ( nanConfig ) , new com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.NanEventCallbackPostsEvents ( sessionId ) ) ; return sessionId ; } }
public android.net.IpSecTransform.Builder setEncryption ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecAlgorithm algo ) { mConfig.flow [ direction ] . encryption = algo ; return this ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setTarget ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 4 ; target_ = value ; onChanged ( ) ; return this ; }
public void onConnectSuccess ( android.net.wifi.nan.WifiNanSession session ) { }
public void close ( ) throws java.io.IOException ;
public android.os.Bundle updateCredentials ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , java.lang.String s , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; return null ; }
static void setExecutablePermission ( java.io.File file ) throws java.io.IOException { java.lang.Runtime.getRuntime ( ) . exec ( new java.lang.String [ ] { "chmod" , "777" , file.getAbsolutePath ( ) } ) ; }
public android.telephony.CellLocation getCellLocation ( ) { return null ; }
protected com.intellij.openapi.options.Configurable getConfigurable ( ) { return gsutilConfigurable ; }
public static void setTestPreferencesPath ( java.lang.String testPreferencesPath ) { com.google.gct.login.GoogleLoginPrefs.preferencesPath = testPreferencesPath ; }
public static java.lang.String toBinaryString ( int i ) { return java.lang.Integer.toUnsignedString ( i , 1 ) ; }
public void prependParam ( com.android.jack.ir.ast.JParameter parameter ) { params.add ( 0 , parameter ) ; }
private java.lang.CharSequence getTosTitle ( ) { return isVvm3 ( ) ? context.getString ( R.string.verizon_terms_and_conditions_title ) : context.getString ( R.string.dialer_terms_and_conditions_title ) ; }
public proguard.evaluation.value.ReferenceValue referenceValue ( ) { throw new java.lang.IllegalArgumentException ( ( ( "Value is not a reference value [" + ( this . getClass ( ) . getName ( ) ) ) + "]" ) ) ; }
public void setCamera ( java.lang.String cameraId ) { try { mVideoProvider.setCamera ( cameraId ) ; } catch ( android.os.RemoteException e ) { } }
public java.lang.Object [ ] toArray ( ) { java.lang.Object [ ] newArray = new java.lang.Object [ size ( ) ] ; java.lang.System.arraycopy ( array , offset , newArray , 0 , size ) ; return newArray ; }
public void testEncodeDoesNotWrap ( ) { int [ ] data = new int [ 61 ] ; java.util.Arrays.fill ( data , 255 ) ; java.lang.String expected = "///////////////////////////////////////////////////////////////////////" + "//////////w==" ; assertEncoded ( expected , data ) ; }
private void registerForRuimRecordEvents ( ) { mIccRecords.registerForRecordsEvents ( this , com.android.internal.telephony.cdma.EVENT_ICC_RECORD_EVENTS , null ) ; mIccRecords.registerForRecordsLoaded ( this , com.android.internal.telephony.cdma.EVENT_RUIM_RECORDS_LOADED , null ) ; }
public static com.intellij.codeInsight.daemon.impl.analysis.CreateNSDeclarationIntentionFix createFix ( @ org.jetbrains.annotations.NotNull final com.intellij.psi.PsiElement element , @ org.jetbrains.annotations.NotNull final java.lang.String namespacePrefix ) { com.intellij.psi.PsiFile file = element.getContainingFile ( ) ; return file instanceof com.intellij.psi.xml.XmlFile ? new com.intellij.codeInsight.daemon.impl.analysis.CreateNSDeclarationIntentionFix ( element , namespacePrefix ) : null ; }
public void onScheduledRecordingAdded ( com.android.tv.dvr.ScheduledRecording ... scheduledRecordings ) { if ( ( mRowsAdapter ) != null ) { for ( com.android.tv.dvr.ScheduledRecording recording : scheduledRecordings ) { mRowsAdapter.onScheduledRecordingAdded ( recording ) ; } } }
private void updateFontLabel ( org.eclipse.swt.graphics.Font f ) { org.eclipse.swt.graphics.FontData [ ] fd = f.getFontData ( ) ; org.eclipse.swt.graphics.FontData primary = fd [ 0 ] ; java.lang.String description = java.lang.String.format ( "%1$s" , primary.getName ( ) ) ; mFontButton.setText ( description ) ; }
public void tearDown ( ) throws java.lang.Exception { com.android.internal.telephony.CallManager.getInstance ( ) . unregisterPhone ( mPhone ) ; mCallManagerHandlerThread.quitSafely ( ) ; super . tearDown ( ) ; }
static void constantIndexing6 ( int [ ] array ) { array [ 3 ] = 1 ; array [ 4 ] = 1 ; }
public static native boolean isMethodTracingActive ( ) ;
public static io.appium.droiddriver.uiautomation.UiAutomationDriver newUiAutomationDriver ( android.app.Instrumentation instrumentation ) { if ( ! ( io.appium.droiddriver.helpers.DroidDrivers.hasUiAutomation ( ) ) ) { throw new io.appium.droiddriver.exceptions.DroidDriverException ( ( "UiAutomation is not available below API 18. " + "See http://developer.android.com/reference/android/app/UiAutomation.html" ) ) ; } if ( ( instrumentation.getUiAutomation ( ) ) == null ) { throw new io.appium.droiddriver.exceptions.DroidDriverException ( "uiAutomation==null: did you forget to set '-w' flag for 'am instrument'?" ) ; } return new io.appium.droiddriver.uiautomation.UiAutomationDriver ( instrumentation ) ; }
static com.google.common.collect.ImmutableList < com.android.dialer.phonelookup.PhoneLookup > providePhoneLookupList ( com.android.dialer.phonelookup.cp2.Cp2LocalPhoneLookup cp2LocalPhoneLookup , com.android.dialer.phonelookup.cp2.Cp2RemotePhoneLookup cp2RemotePhoneLookup , com.android.dialer.phonelookup.blockednumber.DialerBlockedNumberPhoneLookup dialerBlockedNumberPhoneLookup ) { return com.google.common.collect.ImmutableList.of ( cp2LocalPhoneLookup , cp2RemotePhoneLookup , dialerBlockedNumberPhoneLookup ) ; }
public boolean onMenuItemClick ( android.view.MenuItem item ) { if ( com.android.browser.DataUri.isDataUri ( mText ) ) { saveDataUri ( ) ; } else { com.android.browser.DownloadHandler.onDownloadStartNoStream ( mActivity , mText , null , null , null , mPrivateBrowsing ) ; } return true ; }
public void addUserDevice ( com.android.sdklib.devices.Device d ) { synchronized ( com.android.sdklib.devices.DeviceManager.lock ) { if ( ( com.android.sdklib.devices.DeviceManager.mUserDevices ) == null ) { getUserDevices ( ) ; } com.android.sdklib.devices.DeviceManager.mUserDevices.add ( d ) ; } notifyListeners ( ) ; }
public void testInstrumentationRunnerArgument ( @ com.android.annotations.NonNull java.lang.String key , @ com.android.annotations.NonNull java.lang.String value ) { testInstrumentationRunnerArguments [ key ] = value ; }
public com.android.sched.vfs.ParentVDir getRootDir ( ) { return root ; }
public void setClientKeyEntry ( java.security.PrivateKey privateKey , java.security.cert.X509Certificate clientCertificate ) { setClientKeyEntryWithCertificateChain ( privateKey , new java.security.cert.X509Certificate [ ] { clientCertificate } ) ; }
private static native int native_test_getStreamVolumeLeak ( ) ;
public boolean removePasspointConfiguration ( java.lang.String fqdn ) { return true ; }
public void onGetIncludedService ( java.lang.String address , int srvcType , int srvcInstId , android.os.ParcelUuid srvcUuid , int inclSrvcType , int inclSrvcInstId , android.os.ParcelUuid inclSrvcUuid ) throws android.os.RemoteException { }
public void addExtension ( java.lang.String oid , boolean critical , byte [ ] value ) { this . addExtension ( new org.bouncycastle.asn1.DERObjectIdentifier ( oid ) , critical , value ) ; }
public void verify ( java.security.PublicKey key , java.lang.String sigProvider ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , java.security.SignatureException , java.security.cert.CertificateException { verify ( key , sigProvider ) ; }
public com.android.internal.telephony.Connection dial ( java.lang.String dialString , int videoState ) throws com.android.internal.telephony.CallStateException { return dialInternal ( dialString , videoState , null , null ) ; }
public void disableSharedRelros ( ) { if ( DEBUG ) { org.chromium.base.Log.i ( org.chromium.base.library_loader.ModernLinker.TAG , "disableSharedRelros() called" ) ; } synchronized ( mLock ) { mInBrowserProcess = false ; mWaitForSharedRelros = false ; } }
public static native void enableMethodTracing ( java.lang.Class < ? > methodClass , java.lang.reflect.Method entryMethod , java.lang.reflect.Method exitMethod , java.lang.Thread thr ) ;
public org.gradle.api.tasks.compile.JavaCompile getJavaCompile ( ) { return ( getVariantData ( ) . javaCompileTask ) instanceof org.gradle.api.tasks.compile.JavaCompile ? ( ( org.gradle.api.tasks.compile.JavaCompile ) ( getVariantData ( ) . javaCompileTask ) ) : null ; }
void doQuit ( ) { quitNow ( ) ; }
public com.android.jack.test.toolchain.JackCliToolchain setVerbose ( boolean isVerbose ) { super . setVerbose ( isVerbose ) ; verbosityLevel = ( isVerbose ) ? com.android.jack.Options.VerbosityLevel.DEBUG : com.android.jack.Options.VerbosityLevel.WARNING ; addProperty ( Options.USE_DEFAULT_LIBRARIES.getName ( ) , "false" ) ; return this ; }
public boolean isSynthetic ( ) { return java.lang.reflect.Modifier.isSynthetic ( getModifiers ( ) ) ; }
public final com.android.jack.ir.ast.cfg.JEntryBasicBlock entry ( ) { return entry ; }
public void setProcessorOptions ( @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.lang.String > arg0 ) throws com.android.jack.api.v01.ConfigurationException { }
protected boolean nestedStatementPop ( com.android.jack.ir.ast.JStatement statement ) { boolean pop = ! ( statement instanceof com.android.jack.ir.ast.JBlock ) ; if ( pop ) { indentOut ( ) ; } return pop ; }
public java.lang.String getSuffix ( boolean positive ) { return positive ? ( ( com.ibm.icu.text.DecimalFormat ) ( nf ) ) . getPositiveSuffix ( ) : ( ( com.ibm.icu.text.DecimalFormat ) ( nf ) ) . getPositiveSuffix ( ) ; }
public void onDismiss ( android.content.DialogInterface dialog ) { super . onDismiss ( dialog ) ; getActivity ( ) . finish ( ) ; }
public java.lang.String getPlatformToolsVersion ( ) { com.android.sdklib.local.LocalPkgInfo info = mLocalSdk.getPkgInfo ( LocalSdk.PKG_PLATFORM_TOOLS ) ; if ( ( info != null ) && ( info.hasFullRevision ( ) ) ) { return info.getFullRevision ( ) . toShortString ( ) ; } return null ; }
public java.lang.String formatValue ( @ javax.annotation.Nonnull com.android.sched.util.file.InputStreamFile stream ) { return formatValue ( ( ( com.android.sched.util.file.AbstractStreamFile ) ( stream ) ) ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onDeviceChange ( true ) ; }
public java.lang.String normalizeNumber ( com.android.dialer.DialerPhoneNumber number ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; return formatToE164 ( number ) . or ( number.getRawInput ( ) . getNumber ( ) ) ; }
public java.util.concurrent.Future < android.content.Intent > nextBroadcastIntent ( java.lang.String action ) { return nextBroadcastIntent ( new android.content.IntentFilter ( action ) ) ; }
public void stop ( ) { mAudioTrack.stop ( ) ; mQueue.clear ( ) ; mNumBytesQueued = 0 ; }
public java.lang.String [ ] call ( ) { return getHttpAuthUsernamePassword ( host , realm ) ; }
boolean stopGattProfileService ( ) { debugLog ( "stopGattProfileService()" ) ; java.lang.Class [ ] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles ( ) ; setGattProfileServiceState ( supportedProfileServices , BluetoothAdapter.STATE_OFF ) ; return true ; }
public void test_isValid_OnChannelCloseWithJoinWithSource ( ) throws java.lang.Exception { setup ( true ) ; test_isValid ( ) ; }
public android.telephony.mbms.DownloadStatus getDownloadStatus ( java.lang.String appName , android.telephony.mbms.DownloadRequest downloadRequest ) throws android.os.RemoteException { return null ; }
public com.android.ims.internal.IImsUt getUtInterface ( int sessionId ) { return null ; }
private final native void native_takePicture ( ) ;
public com.android.build.gradle.internal.dsl.BuildType setConsumerProguardFiles ( java.lang.Iterable < ? > proguardFileIterable ) { consumerProguardFiles.clear ( ) ; for ( java.lang.Object proguardFile : proguardFileIterable ) { consumerProguardFiles.add ( project.file ( proguardFile ) ) ; } return this ; }
public boolean setVoiceMailNumber ( java.lang.String alphaTag , java.lang.String number ) { return setVoiceMailNumber ( android.telephony.TelephonyManager.getDefaultSubscription ( ) , alphaTag , number ) ; }
public java.lang.String getPropertySync ( java.lang.String name ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException ;
public static float $noinline$floatAddSubSimplifyArg1 ( float x , float y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } float sum = x + y ; return sum - x ; }
public boolean isDataEnabled ( ) { return isUserMobileDataEnabled ( ) ; }
private void notifyCharacteristicWriteNoPermission ( java.lang.String value ) { showMessage ( "Characteristic write: No Permission" ) ; android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CHARACTERISTIC_WRITE_NOPERMISSION ) ; sendBroadcast ( intent ) ; }
private void sendInternalMessage ( int messageCode ) { com.android.server.telecom.Session subsession = com.android.server.telecom.Log.createSubsession ( ) ; if ( subsession != null ) { sendMessageAtFrontOfQueue ( messageCode , subsession ) ; } else { sendMessageAtFrontOfQueue ( messageCode ) ; } }
public void setup ( ) { put ( "Cipher.FOO" , java.lang.Object.class . getName ( ) ) ; }
public K ceilingKey ( K key ) { return getNearKey ( key , ( ( m.GT ) | ( m.EQ ) ) ) ; }
public void testSeccomp ( ) { if ( android.os.cts.OSFeatures.needsSeccompSupport ( ) ) { assertTrue ( ( "Please enable seccomp support in your kernel " + ( "(CONFIG_SECCOMP_FILTER=y). Please see CTS " + "test javadocs for important details." ) ) , android.os.cts.OSFeatures.hasSeccompSupport ( ) ) ; } }
public void testQueryCurrrentSubscription_wrongProjection ( ) { mContext.getContentResolver ( ) . query ( CarrierIdentification.CONTENT_URI , new java.lang.String [ ] { android.provider.Telephony.CarrierIdentification.CID , android.provider.Telephony.CarrierIdentification.NAME , CarrierIdentification.All.MCCMNC } , null , null ) ; }
public boolean setLine1NumberForDisplay ( java.lang.String alphaTag , java.lang.String number ) { return setLine1NumberForDisplayForSubscriber ( android.telephony.TelephonyManager.getDefaultSubscription ( ) , alphaTag , number ) ; }
public void setClasspath ( java.lang.String classpath ) { this . classpath = classpath ; }
public void testConstructor_NullAliase ( ) { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockChar" , new java.lang.String [ ] { "mock" , null } ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
com.android.build.gradle.tasks.List < com.android.build.gradle.tasks.File > getInputFiles ( ) { com.google.common.collect.ImmutableList.Builder < com.android.build.gradle.tasks.File > builder = com.google.common.collect.ImmutableList.builder ( ) ; com.android.build.gradle.tasks.forEachInputFile split ; com.android.build.gradle.tasks.forEachInputFile file ; builder.add ( file ) ; return builder.build ( ) ; }
public void requestIsimAuthentication ( java.lang.String nonce , android.os.Message response ) { }
protected void leave ( java.net.InetAddress arg0 ) throws java.io.IOException { }
public com.android.jack.generic.basic.jack.Generic < T > next ( ) { return new com.android.jack.generic.basic.jack.Generic < T > ( values.next ( ) ) ; }
public java.util.zip.ZipOutputStream getOutputStream ( ) { assert ( file ) != null ; clearRemover ( ) ; try { return new com.android.sched.util.file.OutputZipFile.CustomZipOutputStream ( new java.io.FileOutputStream ( file ) ) ; } catch ( java.io.FileNotFoundException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public java.lang.String getTargetHash ( ) { try { return com.android.sdklib.AndroidTargetHash.getAddonHashString ( "vendor3" , "name3" , new com.android.sdklib.AndroidVersion ( "3" ) ) ; } catch ( com.android.sdklib.AndroidVersion.AndroidVersionException e ) { fail ( ) ; return null ; } }
private void processSignature ( final java.lang.String sig ) { if ( sig != null ) { new org.jetbrains.asm4.signature.SignatureReader ( sig ) . accept ( mySignatureCrawler ) ; } }
public android.net.wifi.nan.LvBufferUtils.LvElement next ( ) { android.net.wifi.nan.TlvBufferUtils.TlvElement tlvE = mTlvIterator.next ( ) ; return new android.net.wifi.nan.LvBufferUtils.LvElement ( tlvE.length , tlvE.refArray , tlvE.offset ) ; }
public com.android.ide.common.layout.TestDragElement id ( java.lang.String id ) { return set ( BaseView.ANDROID_URI , BaseView.ATTR_ID , id ) ; }
public void test_dropSourceSpecific_twice_IPv4 ( ) throws java.lang.Exception { test_dropSourceSpecific_twice ( libcore.java.nio.channels.DatagramChannelMulticastTest.GOOD_MULTICAST_IPv4 , libcore.java.nio.channels.DatagramChannelMulticastTest.UNICAST_IPv4_1 ) ; }
public static float nextUp ( float f ) { return sun.misc.FpUtils.nextUp ( f ) ; }
private void printCurrency ( java.util.Currency c ) { java.lang.System.out.println ( ) ; java.lang.System.out.println ( c.getCurrencyCode ( ) ) ; java.lang.System.out.println ( c.getSymbol ( ) ) ; java.lang.System.out.println ( c.getDefaultFractionDigits ( ) ) ; }
public void getCdmaBroadcastConfig ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG , response ) ; send ( rr ) ; }
public void test1_findFirst2 ( ) { for ( int i = 0 ; i < 32 ; i ++ ) { assertEquals ( com.android.dx.util._tests.BitsTest.label ( i ) , ( - 1 ) , com.android.dx.util.Bits.findFirst ( 0 , i ) ) ; } }
public void hangupForegroundResumeBackgroundResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { }
private void onCurrentOperator ( java.lang.String name ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_OPERATOR_NAME ) ; event.valueString = name ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
boolean expectAux ( java.lang.String tag , java.lang.String source , java.lang.String result , boolean pass , java.lang.String expectedResult ) { return expectAux ( tag , new java.lang.String [ ] { source , result } , pass , expectedResult ) ; }
public void testGetRulesVersion ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData ( libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ; java.lang.String rulesVersion = ZoneInfoDB.TzData.getRulesVersion ( new java.io.File ( libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ) ; assertEquals ( data.getVersion ( ) , rulesVersion ) ; }
private void sendScanResultsAvailableBroadcast ( ) { android.content.Intent intent = new android.content.Intent ( WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; mContext.sendBroadcastAsUser ( intent , UserHandle.ALL ) ; }
int getBatteryLevel ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties ( device ) ; if ( deviceProp == null ) return - 1 ; return deviceProp.getBatteryLevel ( ) ; }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , int [ ] data ) { validateIsInt32 ( ) ; copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , data ) ; }
private void openChannel ( ) { int p2 = 0 ; mUiccCard.iccOpenLogicalChannel ( com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.AID , p2 , obtainMessage ( com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules.EVENT_OPEN_LOGICAL_CHANNEL_DONE , null ) ) ; }
public java.lang.String toString ( ) { return ( ( ( "StructTimeval[tv_sec=" + ( tv_sec ) ) + ",tv_usec=" ) + ( tv_usec ) ) + "]" ; }
protected com.android.jack.dx.dex.file.DexFile createDexFile ( ) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions ( ) ; options.forceJumbo = forceJumbo ; return new com.android.jack.dx.dex.file.DexFile ( options ) ; }
private void stopNotification ( ) { if ( ( mNotificationTimer ) == null ) return ; mNotificationTimer.cancel ( ) ; mNotificationTimer = null ; }
public void testContains ( ) { java.util.concurrent.CopyOnWriteArraySet full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; assertTrue ( full.contains ( one ) ) ; assertFalse ( full.contains ( five ) ) ; }
public void testInterruptWritableSocketChannel ( ) throws java.lang.Exception { sockets = newSocketChannelPair ( ) ; testInterruptReadableChannel ( sockets [ 0 ] . getChannel ( ) ) ; }
public java.lang.Object getDefaultValue ( java.lang.reflect.Field field ) { return optionDefaults.get ( field ) ; }
public boolean isEmpty ( ) { return ! ( com.google.common.collect.Iterators.any ( unfiltered.iterator ( ) , predicate ) ) ; }
public boolean needSequentialWriting ( ) { return ( outputVDir ) instanceof com.android.sched.vfs.SequentialOutputVDir ; }
public boolean isLocaleSpecificLayout ( ) { return ( ( mEditedConfig ) == null ) || ( ( mEditedConfig.getLanguageQualifier ( ) ) != null ) ; }
public com.android.ide.eclipse.adt.editors.layout.gscripts.Point getBottomLeft ( ) { return new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( x , ( ( y ) + ( ( h ) > 0 ? h : 0 ) ) ) ; }
public void setUseSessionTickets ( boolean useSessionTickets ) { this . useSessionTickets = useSessionTickets ; }
public static java.lang.String getSyntheticSwitchMapFieldName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType ) { java.lang.String enumName = com.android.jack.util.NamingTools.getValidName ( com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter ( ) . getName ( enumType ) ) ; java.lang.String fieldName = com.android.jack.util.NamingTools.getNonSourceConflictingName ( ( enumName + ( com.android.jack.transformations.enums.OptimizationUtil.Suffix ) ) ) ; return fieldName ; }
public native void putInt$ ( long address , int x ) ;
synchronized int nScriptCCreate ( java.lang.String resName , java.lang.String cacheDir , byte [ ] script , int length ) { validate ( ) ; return rsnScriptCCreate ( mContext , resName , cacheDir , script , length ) ; }
public static java.io.File getTempDirectory ( ) { if ( ( com.android.voicemail.impl.mail.TempDirectory.sTempDirectory ) == null ) { throw new java.lang.RuntimeException ( ( "TempDirectory not set. " + "If in a unit test, call Email.setTempDirectory(context) in setUp()." ) ) ; } return com.android.voicemail.impl.mail.TempDirectory.sTempDirectory ; }
boolean waitForListener ( ) { try { return mBlocker.await ( android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE , java.util.concurrent.TimeUnit.SECONDS ) ; } catch ( java.lang.InterruptedException e ) { return false ; } }
public java.lang.String getNewSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodIdWide id ) { return newMethodSignatures.get ( id ) ; }
public void testNoInitRunIt ( ) { assertFalse ( "/dev/socket/init_runit" , new java.io.File ( "/dev/socket/init_runit" ) . exists ( ) ) ; }
private void sendInterfaceState ( int newInterfaceState ) { mTetherController.updateInterfaceState ( this , newInterfaceState , mLastError ) ; mTetherController.updateLinkProperties ( this , new android.net.LinkProperties ( mLinkProperties ) ) ; }
public com.android.server.net.NetworkStatsService.NetworkStatsSettings.Config getDevConfig ( ) { return new com.android.server.net.NetworkStatsService.NetworkStatsSettings.Config ( getSecureLong ( android.provider.Settings.Secure.NETSTATS_DEV_BUCKET_DURATION , android.text.format.DateUtils.HOUR_IN_MILLIS ) , getSecureLong ( android.provider.Settings.Secure.NETSTATS_DEV_ROTATE_AGE , ( 15 * ( android.text.format.DateUtils.DAY_IN_MILLIS ) ) ) , getSecureLong ( android.provider.Settings.Secure.NETSTATS_DEV_DELETE_AGE , ( 90 * ( android.text.format.DateUtils.DAY_IN_MILLIS ) ) ) ) ; }
public void mouseDown ( org.eclipse.swt.events.MouseEvent e ) { if ( ( ( e.stateMask ) & ( org.eclipse.swt.SWT.MOD1 ) ) != 0 ) { com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.openJavaClass ( mEditor.getProject ( ) , fqcn ) ; } }
private android.app.PendingIntent createIncomingCallPendingIntent ( ) { android.content.Intent intent = new android.content.Intent ( com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL ) ; intent.addFlags ( Intent.FLAG_RECEIVER_FOREGROUND ) ; return android.app.PendingIntent.getBroadcast ( mContext , 0 , intent , PendingIntent.FLAG_UPDATE_CURRENT ) ; }
private java.lang.String getServiceName ( ) { return getClass ( ) . getSimpleName ( ) ; }
public void onVideoProviderChanged ( com.android.services.telephony.VideoProvider videoProvider ) { setVideoProvider ( videoProvider ) ; }
public com.android.build.gradle.internal.dsl.NdkOptions ldLibs ( java.lang.String lib ) { if ( ( ldLibs ) == null ) { ldLibs = com.google.common.collect.Sets.newHashSet ( ) ; } ldLibs.add ( lib ) ; return this ; }
public java.lang.String toString ( ) { java.lang.String micro = ( ( myMicroRevision ) == ( com.android.ide.common.repository.MavenCoordinate.PLUS_REV ) ) ? "+" : java.lang.Integer.toString ( myMicroRevision ) ; return java.lang.String.format ( "%s:%s:%d.%d.%s" , myGroupId , myArtifactId , myMajorRevision , myMinorRevision , micro ) ; }
public int compare ( java.lang.String object1 , java.lang.String object2 ) { return object1.compareTo ( object2 ) ; }
public void select ( org.w3c.dom.Node xmlNode ) { mCanvasViewer.getCanvas ( ) . select ( xmlNode ) ; }
public com.android.sdklib.repository.FullRevision convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { return com.android.sdklib.repository.FullRevision.parseRevision ( input ) ; } catch ( java.lang.NumberFormatException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( e.getMessage ( ) ) ; } }
public android.net.wifi.nan.WifiNanCharacteristics getCharacteristics ( ) { enforceAccessPermission ( ) ; return ( mStateManager.getCapabilities ( ) ) == null ? null : mStateManager.getCapabilities ( ) . toPublicCharacteristics ( ) ; }
public void setMultiprocessEnabled ( boolean enabled ) { }
public java.nio.channels.Selector wakeup ( ) { try { Libcore.os.write ( wakeupOut , new byte [ ] { 1 } , 0 , 1 ) ; } catch ( libcore.io.ErrnoException ignored ) { } return this ; }
void addMessage ( com.android.manifmerger.MergingReport.Builder report , com.android.manifmerger.MergingReport.Record.Severity severity , java.lang.String message ) { report.addMessage ( getOwnerElement ( ) . getDocument ( ) . getSourceLocation ( ) , getLine ( ) , getColumn ( ) , severity , message ) ; }
public com.google.common.collect.ImmutableList < com.android.dialer.precall.PreCallAction > getActions ( ) { return com.google.common.collect.ImmutableList.of ( new com.android.dialer.precall.impl.PermissionCheckAction ( ) , new com.android.dialer.precall.impl.MalformedNumberRectifier ( com.google.common.collect.ImmutableList.of ( new com.android.dialer.precall.impl.UkRegionPrefixInInternationalFormatHandler ( ) ) ) , new com.android.dialer.precall.impl.CallingAccountSelector ( ) , new com.android.dialer.precall.impl.AssistedDialAction ( ) ) ; }
public abstract void installPackage ( @ com.android.annotations.NonNull java.io.File apkFile , int timeout ) throws com.android.builder.testing.api.DeviceException ;
public int compareTo ( android.preference.Preference another ) { if ( ! ( another instanceof com.android.settings.bluetooth.BluetoothDevicePreference ) ) { return super . compareTo ( another ) ; } return mCachedDevice.compareTo ( ( ( com.android.settings.bluetooth.BluetoothDevicePreference ) ( another ) ) . mCachedDevice ) ; }
public boolean isValid ( ) { return ( mProtocol ) != null ; }
public void analyzeExternalChangesAndUpdateIfNeed ( @ org.jetbrains.annotations.NotNull java.util.Collection < com.intellij.openapi.vfs.VirtualFile > changedFiles , @ org.jetbrains.annotations.NotNull java.util.Set < java.lang.String > componentNames ) { componentNames.add ( "NewModuleRootManager" ) ; myStorageData.loaded = false ; }
public void createTempDir ( ) throws java.lang.Exception { mTempDir = java.io.File.createTempFile ( "timeZoneUpdateTest" , null ) ; assertTrue ( mTempDir.delete ( ) ) ; assertTrue ( mTempDir.mkdir ( ) ) ; }
com.android.internal.telephony.NitzData getNitzData ( ) { return mNitzData ; }
synchronized boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "disconnect(): device=" + device ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return disconnectNative ( ) ; }
public void onParentChanged ( android.telecom.Call call , android.telecom.Call parent ) { android.util.Log.i ( android.telecom.cts.TAG , ( ( ( "onParentChanged, Call: " + call ) + ", Parent: " ) + parent ) ) ; this . lock.release ( ) ; }
public static < E extends java.lang.Enum < E > > com.google.common.collect.ImmutableSet < E > immutableEnumSet ( E anElement , E ... otherElements ) { return new com.google.common.collect.ImmutableEnumSet < E > ( java.util.EnumSet.of ( anElement , otherElements ) ) ; }
public void testIsAssignableFrom_notAnInstance ( ) { android.view.View v = new android.view.View ( context ) ; assertFalse ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.widget.Spinner.class ) . matches ( v ) ) ; }
public void testInstallV1OneSignerSHA224withECDSA ( ) throws java.lang.Exception { assertInstallSucceedsForEach ( "v1-only-with-ecdsa-sha224-%s.apk" , android.appsecurity.cts.PkgInstallSignatureVerificationTest.EC_KEY_NAMES ) ; }
private boolean processSetUpEventList ( com.android.internal.telephony.gsm.stk.CommandDetails cmdDet , java.util.List < com.android.internal.telephony.gsm.stk.ComprehensionTlv > ctlvs ) { com.android.internal.telephony.gsm.stk.StkLog.d ( this , "process SetUpEventList" ) ; return true ; }
static double $opt$ShortToDouble ( short a ) { return ( ( double ) ( a ) ) ; }
public void testPublishConfigBuilderNegativeTtl ( ) { new android.net.wifi.nan.PublishConfig.Builder ( ) . setTtlSec ( ( - 10 ) ) ; }
public java.lang.String getNetworkSpecifier ( ) { return java.lang.String.valueOf ( mSubId ) ; }
com.android.build.gradle.model.AndroidProjectTest.ProductFlavorTester setTargetSdkVersion ( int targetSdkVersion ) { this . targetSdkVersion = targetSdkVersion ; return this ; }
public void requestR1R2ANQPElementsWithRC ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mHandler.requestANQP ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1R2_ANQP_WITH_RC ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mManager.requestANQPElements ( com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID , com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_SCAN_DETAIL , true , true ) ) ; }
private void renameFingerPrint ( int fingerId , java.lang.String newName ) { mFingerprintManager.rename ( fingerId , mUserId , newName ) ; updatePreferences ( ) ; }
public android.telephony.mbms.DownloadRequest build ( ) { return new android.telephony.mbms.DownloadRequest ( id , serviceInfo , source , dest , sub , appIntent ) ; }
public void testIOException ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/ApiCallTest6.java:8: Error: Call requires API level 9 (current min is 1): java.io.IOException#<init> [NewApi]\n" + ( ( ( " IOException ioException = new IOException(throwable);\n" + " ~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) + "" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "apicheck/Intermediate.java.txt=>src/test/pkg/Intermediate.java" , "apicheck/ApiCallTest6.java.txt=>src/test/pkg/ApiCallTest6.java" , "apicheck/ApiCallTest6.class.data=>bin/classes/test/pkg/ApiCallTest6.class" ) ) ; }
public com.android.dialer.smartdial.SmartDialMatchPosition matchesNumber ( java.lang.String phoneNumber ) { return matchesNumber ( phoneNumber , mQuery ) ; }
public boolean isConnected ( int callServiceType , int callType ) throws android.os.RemoteException { synchronized ( mLock ) { checkBinderConnection ( ) ; return getServiceInterface ( mBinder ) . isConnected ( mSlotId , mSupportedFeature , callServiceType , callType ) ; } }
public void clearWallpaper ( ) { if ( com.android.server.WallpaperManagerService.DEBUG ) android.util.Slog.v ( com.android.server.WallpaperManagerService.TAG , "clearWallpaper" ) ; synchronized ( mLock ) { clearWallpaperLocked ( false ) ; } }
private boolean isPolicyValid ( java.lang.String test ) { final android.content.pm.PackageManager pm = getPackageManager ( ) ; switch ( test ) { case PolicyTransparencyTestActivity.TEST_CHECK_PERMITTED_INPUT_METHOD : return pm.hasSystemFeature ( PackageManager.FEATURE_INPUT_METHODS ) ; default : return true ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; tests.api.java.nio.charset.CharsetDecoderTest.decoder = cs.newDecoder ( ) ; }
boolean disconnectAudio ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ! ( mStateMachine.isAudioOn ( ) ) ) { return false ; } mStateMachine.sendMessage ( HeadsetStateMachine.DISCONNECT_AUDIO ) ; return true ; }
public boolean hasBranch ( ) { return ( ( bitField0_ ) & 4 ) == 4 ; }
java.lang.String printTime ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( " rt=" ) . append ( mClock.getUptimeSinceBootMillis ( ) ) ; sb.append ( "/" ) . append ( mClock.getElapsedSinceBootMillis ( ) ) ; return sb.toString ( ) ; }
public java.lang.String getDescription ( ) { return mDescription ; }
public static com.android.jack.dx.rop.code.Rop opCreateLambda ( ) { return new com.android.jack.dx.rop.code.Rop ( RegOps.CREATE_LAMBDA , com.android.jack.dx.rop.type.Type.LONG , com.android.jack.dx.rop.type.StdTypeList.EMPTY , Exceptions.LIST_Error , "create-lambda" ) ; }
synchronized void nContextDestroy ( ) { validate ( ) ; rsnContextDestroy ( mContext ) ; }
boolean isCondition1or2Violated ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JStatement startStmt ) { return traverse ( com.google.common.collect.Sets.newHashSet ( startStmt ) , com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.failTestFor1and2 , com.android.jack.optimizations.DefUsesChainsSimplifier.CfgHelper.descendTestFor1and2 ) ; }
public com.android.ahat.heapdump.NativeAllocation getNativeAllocation ( ) { return null ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JLiteral expr ) { return expr.canThrow ( ) ? visitThrowingRValue ( expr ) : visitNonThrowingPrimitiveRValue ( expr ) ; }
public E previous ( ) { if ( hasPrevious ( ) ) return it.previous ( ) ; else throw new java.util.NoSuchElementException ( ) ; }
public final com.android.dialer.spam.status.SpamMetadata getSpamMetadata ( ) { return com.android.dialer.spam.status.SpamMetadata.empty ( ) ; }
public void visitAnyMember ( proguard.optimize.info.Clazz clazz , proguard.optimize.info.Member member ) { if ( ( ( member.getAccessFlags ( ) ) & ( ( ClassConstants.INTERNAL_ACC_PUBLIC ) | ( ClassConstants.INTERNAL_ACC_PRIVATE ) ) ) == 0 ) { proguard.optimize.info.PackageVisibleMemberInvokingClassMarker.setInvokesPackageVisibleMembers ( referencingClass ) ; } }
public boolean add ( K element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public int hashCode ( ) { return ( super . hashCode ( ) ) ^ ( producerStack.hashCode ( ) ) ; }
private native void enableAdvertisingSetNative ( int advertiserId , boolean enable , int timeout ) ;
public java.util.Set < ? extends java.lang.Class < ? extends java.lang.annotation.Annotation > > annotations ( ) { return com.google.common.collect.ImmutableSet.of ( com.android.dialer.rootcomponentgenerator.annotation.IncludeInDialerRoot.class ) ; }
public int updateCallBarringForServiceClass ( int cbType , int action , java.lang.String [ ] barrList , int serviceClass ) throws android.os.RemoteException { return - 1 ; }
public int compare ( com.android.jack.ir.ast.JAnnotationLiteral annotation1 , com.android.jack.ir.ast.JAnnotationLiteral annotation2 ) { return com.android.jack.Jack.getLookupFormatter ( ) . getName ( annotation1.getType ( ) ) . compareTo ( com.android.jack.Jack.getLookupFormatter ( ) . getName ( annotation2.getType ( ) ) ) ; }
protected void xmlModelChanged ( org.w3c.dom.Document xml_doc ) { initUiRootNode ( false ) ; mUiRootNode.loadFromXmlNode ( xml_doc ) ; super . xmlModelChanged ( xml_doc ) ; if ( ( mGraphicalEditor ) != null ) { mGraphicalEditor.onXmlModelChanged ( ) ; } }
protected void resetRecords ( ) { mMncLength = UNINITIALIZED ; log ( ( "setting0 mMncLength" + ( mMncLength ) ) ) ; mIccId = null ; mFullIccId = null ; mAdnCache.reset ( ) ; mRecordsRequested = false ; mLockedRecordsRequested = false ; }
public void test_with_TemporalField_long_null ( ) { TEST_2007_07_15.with ( ( ( java.time.temporal.TemporalField ) ( null ) ) , 1 ) ; }
public void validateSimCredentialWithEapSim ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential ( ) ; cred.simCredential.imsi = "1234*" ; cred.simCredential.eapType = android.net.wifi.EAPConstants.EAP_SIM ; org.junit.Assert.assertTrue ( cred.validate ( ) ) ; }
private void removeNotification ( ) { mNotificationManager.cancelAsUser ( null , com.android.networkrecommendation.WifiNotificationController.ICON_NETWORKS_AVAILABLE , UserHandle.ALL ) ; mNotificationShown = false ; }
public static void assertEquals ( java.lang.String message , long expected , long actual ) { org.junit.Assert.assertEquals ( message , ( ( java.lang.Long ) ( expected ) ) , ( ( java.lang.Long ) ( actual ) ) ) ; }
private static long curTime ( ) { return ( android.os.SystemClock.elapsedRealtime ( ) ) / ( android.text.format.DateUtils.SECOND_IN_MILLIS ) ; }
public com.intellij.psi.PsiReference [ ] getReferencesByElement ( @ org.jetbrains.annotations.NotNull com.intellij.psi.PsiElement element , @ org.jetbrains.annotations.NotNull final com.intellij.util.ProcessingContext context ) { return getReferencesByElement ( element ) ; }
public void onFailure ( int reason , java.lang.String description ) { android.util.Log.e ( com.android.server.wifi.WifiConnectivityManager.TAG , ( ( ( ( "registerScanListener onFailure:" + " reason: " ) + reason ) + " description: " ) + description ) ) ; }
public java.util.List < android.hardware.cts.helpers.TestSensorEvent > getCollectedEvents ( ) { synchronized ( mCollectedEvents ) { return java.util.Collections.unmodifiableList ( mCollectedEvents ) ; } }
public java.util.List < com.android.ide.eclipse.adt.editors.layout.gscripts.IDragElement > getInnerElements ( ) { return java.util.Collections.unmodifiableList ( mElements ) ; }
private libcore.icu.NativePluralRules getPluralRule ( ) { synchronized ( android.content.res.Resources.sSync ) { if ( ( mPluralRule ) == null ) { mPluralRule = libcore.icu.NativePluralRules.forLocale ( mConfiguration.locale ) ; } return mPluralRule ; } }
private void setListener ( android.telephony.ims.internal.aidl.IImsMmTelListener listener ) { synchronized ( mLock ) { mListener = listener ; } }
public void recordsIntentsOnlyAfterInit ( ) { try { android.support.test.espresso.intent.Intents.intended ( android.support.test.espresso.intent.matcher.IntentMatchers.hasComponent ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasShortClassName ( ".SendActivity" ) ) ) ; throw new java.lang.IllegalStateException ( ( "intended should have failed: Intents shouldn't record " + " SendActivity intent before init" ) ) ; } catch ( junit.framework.AssertionFailedError expected ) { } }
public java.lang.Object getViewKey ( ) { return getCurrentNode ( ) ; }
private void addExplicit ( java.lang.String fileName , java.lang.String jarName ) { addToList ( fileName , jarName , indexMap ) ; addToList ( jarName , fileName , jarMap ) ; }
public boolean isRecommended ( ) { return ( ( ( this ) != ( com.android.resources.Density.TV ) ) && ( ( this ) != ( com.android.resources.Density.DPI_400 ) ) ) && ( ( this ) != ( com.android.resources.Density.DPI_560 ) ) ; }
boolean isNumberMatchingDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.getNationalNumberPattern ( ) ) . matcher ( nationalNumber ) ; return ( isNumberPossibleForDesc ( nationalNumber , numberDesc ) ) && ( nationalNumberPatternMatcher.matches ( ) ) ; }
public java.lang.String resolveResourceValue ( int [ ] id ) { if ( ( mStyleableValueToNameMap ) != null ) { mWrapper.set ( id ) ; return mStyleableValueToNameMap.get ( mWrapper ) ; } return null ; }
public com.android.sdkuilib.ui.GridLayoutBuilder hSpacing ( int h ) { com.android.sdkuilib.ui.GridLayoutBuilder.mGL.horizontalSpacing = h ; return this ; }
public void testMoveAppForwardLocked ( ) { int installFlags = PackageManager.INSTALL_FORWARD_LOCK ; int moveFlags = PackageManager.MOVE_EXTERNAL_MEDIA ; boolean fail = true ; int result = PackageManager.MOVE_FAILED_FORWARD_LOCKED ; sampleMoveFromRawResource ( installFlags , moveFlags , fail , result ) ; }
public void testSAXNotSupportedException_String ( ) { org.xml.sax.SAXNotSupportedException e = new org.xml.sax.SAXNotSupportedException ( tests.api.org.xml.sax.SAXNotSupportedExceptionTest.ERR ) ; assertEquals ( tests.api.org.xml.sax.SAXNotSupportedExceptionTest.ERR , e.getMessage ( ) ) ; e = new org.xml.sax.SAXNotSupportedException ( null ) ; assertNull ( e.getMessage ( ) ) ; }
void expect ( com.ibm.icu.text.Transliterator t , java.lang.String source , java.lang.String expectedResult ) { expect ( t , source , expectedResult , ( ( com.ibm.icu.text.Transliterator.Position ) ( null ) ) ) ; }
public void run ( ) { com.intellij.openapi.ui.Messages.showErrorDialog ( ( "Error importing App Engine module : " + errorMessage ) , com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.ERROR_MESSAGE_TITLE ) ; }
public final int getDexMethodIndex ( ) { return artMethod.getDexMethodIndex ( ) ; }
public void setProcessorOptions ( @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.lang.String > processorOptions ) { throw new java.lang.AssertionError ( ) ; }
public void add ( @ javax.annotation.Nonnull java.lang.String name ) { newFieldNames.add ( name ) ; }
public android.telephony.ims.aidl.IImsConfig getConfig ( int slotId ) throws android.os.RemoteException { synchronized ( mLock ) { return mIImsServiceController.getConfig ( slotId ) ; } }
public void exit ( ) { loge ( "WifiStateMachine: Leaving Roaming state" ) ; }
private java.lang.String formatDate ( java.util.Locale l , java.lang.String fmt ) { return formatDate ( l , fmt , java.util.TimeZone.getTimeZone ( "UTC" ) ) ; }
private native void gattClientSearchServiceNative ( int conn_id , boolean search_all , long service_uuid_lsb , long service_uuid_msb ) ;
public com.android.layoutlib.api.SceneResult createResult ( java.lang.String errorMessage ) { return new com.android.layoutlib.api.SceneResult ( this , errorMessage , null ) ; }
public void testExistingIUserI ( ) { int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL ; int iFlags = PackageManager.INSTALL_INTERNAL ; setExistingXUserX ( userSetting , iFlags , PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY ) ; }
public void onChange ( boolean selfChange ) { super . onChange ( selfChange ) ; synchronized ( mLock ) { if ( ( mUiAutomationService ) == null ) { populateEnabledAccessibilityServicesLocked ( ) ; manageServicesLocked ( ) ; } } }
public java.lang.String get ( java.lang.String tableName , java.lang.String subTableName , java.lang.String code ) { return android.icu.impl.ICUResourceTableAccess.getTableString ( bundle , tableName , subTableName , code ) ; }
public java.lang.String imsGetWfcMode ( ) { if ( ! ( mImsManager.isWfcEnabledByUserForSlot ( ) ) ) { return TelephonyConstants.WFC_MODE_DISABLED ; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString ( mImsManager.getWfcModeForSlot ( ) ) ; }
public void handleMessage ( android.os.Message msg ) { updateAudioRoute ( ) ; }
private java.lang.String getADBExecJavaLine ( java.lang.String classpath , java.lang.String mainclass ) { return ( ( ( "DeviceUtil.adbExec(\"" + classpath ) + "\", \"" ) + mainclass ) + "\");" ; }
public abstract long get ( com.android.tools.perflib.vmtrace.MethodInfo info , com.android.tools.perflib.vmtrace.ThreadInfo thread ) ;
public long allocate ( ) { return libcore.util.NativeAllocationRegistryTest.doNativeAllocation ( size ) ; }
com.android.sched.vfs.MessageDigestFS.MessageDigestVFile getVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVFile ( this , vfs.getVFile ( parent , name ) ) ; }
public boolean retainAll ( java.util.Collection < ? > collection ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void onIsConferencedChanged ( com.android.server.telecom.Call call ) { com.android.server.telecom.Log.d ( this , "onIsConferencedChanged %s" , call ) ; updateCall ( call ) ; }
public static com.google.common.hash.Funnel < java.lang.CharSequence > stringFunnel ( ) { return com.google.common.hash.Funnels.StringFunnel.INSTANCE ; }
public void validateConfigWithoutCredential ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = android.net.wifi.hotspot2.PasspointConfigurationTest.createHomeSp ( ) ; org.junit.Assert.assertFalse ( config.validate ( ) ) ; }
public boolean performDexOptIfNeeded ( java.lang.String packageName , java.lang.String instructionSet ) { return performDexOpt ( packageName , instructionSet , false ) ; }
public static void applyDebuggerSystemProperty ( com.android.internal.os.ZygoteConnection.Arguments args ) { if ( "1" . equals ( android.os.SystemProperties.get ( "ro.debuggable" ) ) ) { args.debugFlags |= Zygote.DEBUG_ENABLE_DEBUGGER ; } }
void requestPairConfirmation ( ) { android.content.Intent dialogIntent = new android.content.Intent ( mContext , com.android.nfc.handover.ConfirmConnectActivity.class ) ; dialogIntent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; dialogIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; mContext.startActivity ( dialogIntent ) ; }
public final void addInstance ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Instance instance ) { mInstances.add ( instance ) ; }
public static java.lang.String toZid ( java.lang.String zid ) { if ( java.time.format.ZoneName.aliases.containsKey ( zid ) ) { return java.time.format.ZoneName.aliases.get ( zid ) ; } return zid ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setPassedTestCaseCount ( int value ) { bitField0_ |= 16384 ; passedTestCaseCount_ = value ; onChanged ( ) ; return this ; }
native void rsnAllocationData3D ( int con , int id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , short [ ] d , int sizeBytes ) ;
public void visitVariableInstruction ( proguard.optimize.evaluation.Clazz clazz , proguard.optimize.evaluation.Method method , proguard.optimize.evaluation.CodeAttribute codeAttribute , int offset , proguard.optimize.evaluation.VariableInstruction variableInstruction ) { if ( variableInstruction.isLoad ( ) ) { markVariableInitializers ( offset , variableInstruction.variableIndex ) ; } }
public void onCallRemoved ( com.android.server.telecom.Call call ) { mClccIndexMap.remove ( call ) ; updateHeadsetWithCallState ( false ) ; }
public static com.android.dialer.contactsfragment.ContactsCursorLoader createInstanceDisplayNameAlternative ( android.content.Context context , java.lang.String sortKey ) { return new com.android.dialer.contactsfragment.ContactsCursorLoader ( context , com.android.dialer.contactsfragment.ContactsCursorLoader.CONTACTS_PROJECTION_DISPLAY_NAME_ALTERNATIVE , sortKey ) ; }
private void incrementWaiters ( com.google.common.util.concurrent.Monitor.Guard guard ) { int waiters = ( guard.waiterCount ) ++ ; if ( waiters == 0 ) { activeGuards.add ( guard ) ; } }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { return null ; }
public void testLinearAcceleration ( ) throws java.lang.Throwable { sensorTestHelper ( Sensor.TYPE_LINEAR_ACCELERATION ) ; }
public void testEncodeDecodeVideoFromSurfaceToSurface720p ( ) throws java.lang.Throwable { setParameters ( 1280 , 720 , 6000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_AVC ) ; android.media.cts.EncodeDecodeTest.SurfaceToSurfaceWrapper.runTest ( this ) ; }
public static synchronized void setInstanceForTesting ( com.android.incallui.InCallPresenter inCallPresenter ) { com.android.incallui.InCallPresenter.sInCallPresenter = inCallPresenter ; }
public void getOperatorResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String var2 , java.lang.String var3 , java.lang.String var4 ) { }
protected abstract void classSetUp ( ) ;
public boolean isJniDebuggable ( ) { return com.google.common.base.Objects.firstNonNull ( buildType.getNdk ( ) . getIsDebuggable ( ) , false ) ; }
public static int intConditionNotEqualOne ( int i ) { return ( i > 42 ) == true ? 13 : 54 ; }
public void callSessionHandover ( int srcAccessTech , int targetAccessTech , com.android.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mListener.callSessionHandover ( srcAccessTech , targetAccessTech , reasonInfo ) ; }
public void recycle ( ) { for ( int i = 0 ; i < ( numberOfSpans ) ; i ++ ) { spans [ i ] = null ; } }
public com.android.ims.internal.IImsCallSession getPendingCallSession ( int sessionId , java.lang.String callId ) throws android.os.RemoteException { synchronized ( mLock ) { checkBinderConnection ( ) ; return getServiceInterface ( mBinder ) . getPendingCallSession ( mSlotId , mSupportedFeature , sessionId , callId ) ; } }
public void test_minusWeeks_overLeapYears ( ) { java.time.LocalDate t = TEST_2007_07_15.minusYears ( ( - 1 ) ) . minusWeeks ( 104 ) ; org.testng.Assert.assertEquals ( t , java.time.LocalDate.of ( 2006 , 7 , 18 ) ) ; }
public static double DoubleMultiplication ( ) { double a ; double b ; double c ; a = 7.0 ; b = 3.0 ; c = a * b ; return c ; }
public void findNext ( boolean forward ) { checkThread ( ) ; if ( DebugFlags.TRACE_API ) android.util.Log.d ( android.webkit.WebView.LOGTAG , "findNext" ) ; mProvider.findNext ( forward ) ; }
private final void resetContext ( ) { org.conscrypt.OpenSSLDigestContext ctxLocal = new org.conscrypt.OpenSSLDigestContext ( org.conscrypt.NativeCrypto.EVP_MD_CTX_create ( ) ) ; org.conscrypt.NativeCrypto.EVP_MD_CTX_init ( ctxLocal ) ; org.conscrypt.NativeCrypto.EVP_DigestInit ( ctxLocal , evp_md ) ; ctx = ctxLocal ; }
private void queueOrSendMessage ( int what , java.lang.Object obj ) { queueOrSendMessage ( what , obj , 0 , 0 ) ; }
private static boolean isInnerClass ( @ com.android.annotations.Nullable lombok.ast.ClassDeclaration node ) { return ( node == null ) || ( ( com.android.tools.lint.checks.JavaContext.getParentOfType ( node , lombok.ast.ClassDeclaration.class , true ) ) != null ) ; }
public static < T > org.hamcrest.Matcher < java.lang.Iterable < T > > hasItems ( T ... elements ) { return org.junit.internal.matchers.IsCollectionContaining.hasItems ( elements ) ; }
public void smsStartTrackingIncomingMmsMessage ( ) { android.content.IntentFilter mmsReceived = new android.content.IntentFilter ( android.provider.Telephony.Sms.Intents.MMS_DOWNLOADED_ACTION ) ; mmsReceived.addAction ( Intents.WAP_PUSH_RECEIVED_ACTION ) ; mmsReceived.addAction ( Intents.DATA_SMS_RECEIVED_ACTION ) ; mService.registerReceiver ( mMmsIncomingListener , mmsReceived ) ; mListeningIncomingSms = true ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { if ( ( mRawImage ) != null ) { mRawImage = mRawImage.getRotated ( ) ; updateImageDisplay ( shell ) ; } }
protected dexfuzz.ExecutionResult executeOnDevice ( java.lang.String command , boolean captureOutput ) { java.lang.String timeoutString = ( "timeout " + ( timeout ) ) + " " ; return executeCommand ( ( ( timeoutString + ( device.getExecutionShellPrefix ( ) ) ) + command ) , captureOutput ) ; }
public void test_CheckedList_sort ( ) { libcore.java.util.ListDefaultMethodTester.test_sort ( java.util.Collections.checkedList ( new java.util.ArrayList < > ( ) , java.lang.Integer.class ) ) ; }
public void startDtmf ( char c ) { if ( ! ( android.telephony.PhoneNumberUtils.is12Key ( c ) ) ) { android.util.Log.e ( com.android.internal.telephony.sip.SipPhone.LOG_TAG , ( ( "startDtmf called with invalid character '" + c ) + "'" ) ) ; } else { sendDtmf ( c ) ; } }
private void updateDownloadCacheSize ( ) { long size = mDownloadCache.getCurrentSize ( ) ; java.lang.String str = com.android.sdklib.util.ConvertionsUtil.bytesToString ( size ) ; mTextCacheSize.setText ( str ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( mType , mSubType , mSubscriberId , mNetworkId , mRoaming , mMetered ) ; }
public int read ( char [ ] buf ) throws java.io.IOException { return read ( buf , 0 , buf.length ) ; }
void addDataToScores ( java.lang.String desired , java.lang.String supported , com.ibm.icu.impl.Row.R3 < com.ibm.icu.util.LocaleMatcher.LocalePatternMatcher , com.ibm.icu.util.LocaleMatcher.LocalePatternMatcher , java.lang.Double > data ) { scores.add ( data ) ; }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType == ( com.android.ide.common.api.InsertType.CREATE ) ) { node.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_SRC , getSampleImageSrc ( ) ) ; } }
public void setSelection ( com.android.ddmlib.IDevice device , com.android.hierarchyviewerlib.device.Window window ) { synchronized ( deviceMap ) { selectedDevice = device ; selectedWindow = window ; } }
public void setup ( ) { put ( "SecureRandom.SecureRandom1" , libcore.java.security.ProviderTest.SecureRandom1.class . getName ( ) ) ; put ( "SecureRandom.SecureRandom2" , libcore.java.security.ProviderTest.SecureRandom2.class . getName ( ) ) ; put ( "SecureRandom.SecureRandom3" , libcore.java.security.ProviderTest.SecureRandom3.class . getName ( ) ) ; }
public void checkValidity ( ) { if ( ! ( ( ( parent ) instanceof com.android.jack.ir.ast.JMethodBody ) || ( ( parent ) instanceof com.android.jack.ir.ast.JCatchBlock ) ) ) { throw new com.android.jack.ir.InternalCompilerException ( this , "Invalid parent" ) ; } }
public void testQuickFix_withInvalidCharacters ( ) { com.google.gct.intellij.endpoints.validation.ApiNameInspection.MyQuickFix localQuickFix = new com.google.gct.intellij.endpoints.validation.ApiNameInspection ( ) . new com.google.gct.intellij.endpoints.validation.MyQuickFix ( ) ; junit.framework.Assert.assertEquals ( "invalidcharacters" , localQuickFix.getNameSuggestions ( "@invalid&characters#" ) ) ; junit.framework.Assert.assertEquals ( "invalidCharacters" , localQuickFix.getNameSuggestions ( "@Invalid&()Characters#" ) ) ; junit.framework.Assert.assertEquals ( "invalidCharacters" , localQuickFix.getNameSuggestions ( "@23Inval&*idChara(cters#" ) ) ; }
public void onConferenceParticipantsChanged ( java.util.List < android.telecom.ConferenceParticipant > participants ) { updateConferenceParticipants ( participants ) ; }
public static void booted ( ) { sun.misc.VM.booted = true ; }
synchronized void nAllocationData1D ( long id , int off , int mip , int count , float [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
public java.lang.Boolean telephonyAdjustPreciseCallStateListenLevel ( java.lang.String type , java.lang.Boolean listen ) { return telephonyAdjustPreciseCallStateListenLevelForSubscription ( type , listen , android.telephony.SubscriptionManager.getDefaultVoiceSubscriptionId ( ) ) ; }
public java.lang.String getLastPathElement ( ) { java.lang.String internalPath = getInternalPath ( ) ; return internalPath.substring ( ( ( internalPath.lastIndexOf ( com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) ) + 1 ) ) ; }
public boolean setApfVersion ( int version ) { return version == 2 ; }
public void test_F32_2_SCALE05_05_inSqure ( ) { testReszie ( inX , inX , Element.DataType.FLOAT_32 , 2 , 0.5F , 0.5F ) ; }
public int getColumnCount ( ) ;
public java.lang.String getCompilerVersion ( ) { return compilerVersion ; }
public void test_SCSU ( ) throws java.lang.Exception { assertEncodes ( java.nio.charset.Charset.forName ( "SCSU" ) , "�" , 14 , 255 , 253 ) ; }
public void performReceive ( android.content.Intent intent , int resultCode , java.lang.String data , android.os.Bundle extras , boolean ordered , boolean sticky ) throws android.os.RemoteException { synchronized ( this ) { mDidUpdate = true ; } systemReady ( goingCallback ) ; }
public static final native android.os.IHwBinder getService ( java.lang.String serviceName ) ;
public abstract com.android.dialer.speeddial.loader.SpeedDialUiItemLoader speedDialUiItemLoader ( ) ;
private native < A extends java.lang.annotation.Annotation > A getAnnotationNative ( java.lang.Class < A > annotationType ) ;
private com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor createTextAttrDesc ( java.lang.String xmlName ) { return new com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor ( xmlName , xmlName , com.android.sdklib.SdkConstants.NS_RESOURCES , "" , new com.android.ide.eclipse.adt.internal.resources.AttributeInfo ( xmlName , new com.android.ide.eclipse.adt.editors.layout.gscripts.IAttributeInfo.Format [ ] { com.android.ide.eclipse.adt.editors.layout.gscripts.IAttributeInfo.Format.STRING } ) ) ; }
java.lang.String getLocalHostName ( ) throws java.net.UnknownHostException ;
public void run ( ) { com.android.hierarchyviewerlib.device.Window [ ] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows ( device ) ; com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel ( ) . updateDevice ( device , windows ) ; }
public void onDestroy ( ) { mNM.cancel ( R.string.local_service_started ) ; android.widget.Toast.makeText ( this , R.string.local_service_stopped , Toast.LENGTH_SHORT ) . show ( ) ; }
public void spawnDescendant ( com.android.apksig.SigningCertificateLineage.SignerConfig parent , com.android.apksig.SigningCertificateLineage.SignerConfig child ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.SignatureException , java.security.cert.CertificateEncodingException { int flags = calculateDefaultFlags ( ) ; spawnDescendant ( parent , flags , child , flags ) ; }
public static java.lang.String getFolderSegment ( int code ) { if ( ( ( code != ( com.android.ide.common.resources.configuration.NetworkCodeQualifier.DEFAULT_CODE ) ) && ( code >= 1 ) ) && ( code <= 999 ) ) { return java.lang.String.format ( "mnc%1$d" , code ) ; } return "" ; }
public static int getInt ( java.lang.Object obj ) { return ( ( int ) ( com.android.jack.java7.boxing.test001.jack.UnBoxObject.getObject ( obj ) ) ) ; }
public java.lang.String toString ( ) { return ( ( mSourceLocation.print ( true ) ) + ":" ) + ( mPosition.getLine ( ) ) ; }
public static void computeExp2 ( android.renderscript.cts.TestExp2.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 16 , false ) ; args.out = android.renderscript.cts.CoreMathVerifier.exp2 ( args.in , t ) ; }
public void exit ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Exit Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; }
public int hashCode ( ) { return ( inputSet.hashCode ( ) ) << ( ( inputSet.size ( ) ) - 1 ) ; }
public void test009 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST009 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.LegacyToolchain.class ) . compileAndRunTest ( ) ; }
public java.util.List < com.android.ide.common.resources.ResourceFolder > getFolders ( @ com.android.annotations.NonNull com.android.resources.ResourceFolderType type ) { return mFolderMap.get ( type ) ; }
java.lang.String getCallId ( com.android.server.telecom.Call call ) { if ( ( call == null ) || ( ( mCalls.getKey ( call ) ) == null ) ) { return null ; } return call.getId ( ) ; }
public void test_U8_2_SCALE05_20_inSqure ( ) { testResize ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.UNSIGNED_8 , 2 , 0.5F , 2.0F ) ; checkError ( ) ; }
public void testLoadConfigFromXml_Empty ( ) { createManager ( ( ( ( com.android.phone.vvm.omtp.TelephonyVvmConfigManagerTest.XML_HEADER ) + ( com.android.phone.vvm.omtp.TelephonyVvmConfigManagerTest.CARRIER_EMPTY ) ) + ( com.android.phone.vvm.omtp.TelephonyVvmConfigManagerTest.XML_FOOTER ) ) ) ; }
public void postForkChild ( int debugFlags ) { dalvik.system.ZygoteHooks.nativePostForkChild ( token , debugFlags ) ; }
public void testIsInManagedCall ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mFakeCallsManager.hasOngoingManagedCalls ( ) ) . thenReturn ( true ) ; assertTrue ( mTSIBinder.isInManagedCall ( com.android.server.telecom.tests.TelecomServiceImplTest.DEFAULT_DIALER_PACKAGE ) ) ; }
private static native void nativePostForkChild ( long token , int debugFlags , boolean isSystemServer , java.lang.String instructionSet ) ;
public < T > T getExtension ( com.google.protobuf.nano.Extension < T > extension ) { return com.google.protobuf.nano.WireFormatNano.getExtension ( extension , unknownFieldData ) ; }
public java.lang.Object getParent ( java.lang.Object element ) { if ( element instanceof com.android.hierarchyviewerlib.device.ViewNode ) { return ( ( com.android.hierarchyviewerlib.device.ViewNode ) ( element ) ) . parent ; } return null ; }
public int getVersionCodeFromManifest ( ) { java.io.File manifestLocation = mDefaultSourceProvider.getManifestFile ( ) ; return com.android.builder.core.VariantConfiguration.sManifestParser.getVersionCode ( manifestLocation ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , byte [ ] data ) { validateIsInt8 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; }
boolean isAllTrue ( ) { return ( ( ( code ) && ( resources ) ) && ( rClass ) ) && ( localeList ) ; }
public static org.bouncycastle.crypto.Digest getSHA512 ( ) { return org.bouncycastle.crypto.digests.AndroidDigestFactory.FACTORY.getSHA512 ( ) ; }
public void streamMethodUpdated ( int methodType ) throws android.os.RemoteException { listener.streamMethodUpdated ( methodType ) ; }
public boolean isRunProguard ( ) { return buildType.isRunProguard ( ) ; }
public boolean hasUnsupportedCritical ( ) { if ( ( critical ) == null ) { makeOidsLists ( ) ; } return hasUnsupported ; }
public java.lang.String getLongDescription ( ) { return mSource.getLongDescription ( ) ; }
public com.android.layoutlib.api.SceneResult insertChild ( java.lang.Object parentView , com.android.layoutlib.api.IXmlPullParser childXml , int index , com.android.layoutlib.api.LayoutScene.IAnimationListener listener ) { return SceneStatus.NOT_IMPLEMENTED.createResult ( ) ; }
public void setSortingKey ( java.lang.String sortingKey ) { mSortingKey = sortingKey ; }
public static java.lang.String externalShortClassName ( java.lang.String externalClassName ) { int index = externalClassName.lastIndexOf ( ClassConstants.EXTERNAL_PACKAGE_SEPARATOR ) ; return externalClassName.substring ( ( index + 1 ) ) ; }
public void doQuit ( ) { quitNow ( ) ; }
public int addressType ( ) { if ( equals ( android.net.MacAddress.BROADCAST_ADDRESS ) ) { return android.net.MacAddress.TYPE_BROADCAST ; } if ( isMulticastAddress ( ) ) { return android.net.MacAddress.TYPE_MULTICAST ; } return android.net.MacAddress.TYPE_UNICAST ; }
public com.android.ide.eclipse.adt.editors.layout.gscripts.Rect set ( org.eclipse.swt.graphics.Rectangle swtRect ) { set ( swtRect.x , swtRect.y , swtRect.width , swtRect.height ) ; return this ; }
public void testGetName ( ) { java.lang.String name = "gps" ; android.location.LocationProvider locationProvider = mLocationManager.getProvider ( name ) ; assertEquals ( name , locationProvider.getName ( ) ) ; }
public void visitAnnotation ( proguard.classfile.util.Clazz clazz , proguard.classfile.util.Annotation annotation ) { annotation.referencedClasses = findReferencedClasses ( clazz.getName ( ) , clazz.getString ( annotation.u2typeIndex ) ) ; annotation.elementValuesAccept ( clazz , this ) ; }
protected void onSelected ( ) { getMainActivity ( ) . getOverlayManager ( ) . showRecentlyWatchedDialog ( ) ; }
boolean hasWriteObjectData ( ) { return hasWriteObjectData ; }
public com.android.build.gradle.internal.dependency.LibraryDependencyImpl getNoDependencyRepresentation ( ) { return new com.android.build.gradle.internal.dependency.LibraryDependencyImpl ( getBundle ( ) , getBundleFolder ( ) , java.util.Collections.< com.android.builder.dependency.LibraryDependency > emptyList ( ) , getName ( ) , variantName , getProject ( ) , requestedCoordinates , resolvedCoordinates ) ; }
public static int internalMethodParameterSize ( java.lang.String internalMethodDescriptor , int accessFlags ) { return proguard.classfile.util.ClassUtil.internalMethodParameterSize ( internalMethodDescriptor , ( ( accessFlags & ( proguard.classfile.ClassConstants.INTERNAL_ACC_STATIC ) ) != 0 ) ) ; }
com.android.ide.eclipse.adt.internal.assetstudio.AssetType getAssetType ( ) { return mChooseAssetPage.getAssetType ( ) ; }
public void setChecked ( boolean checked ) { super . setChecked ( checked ) ; mThumbPosition = ( checked ) ? getThumbScrollRange ( ) : 0 ; invalidate ( ) ; }
public com.android.ahat.heapdump.Size getSize ( ) { return Size.ZERO ; }
public com.android.ims.internal.IImsMMTelFeature getEmergencyMMTelFeatureAndListen ( int slotId , com.android.ims.internal.IImsServiceFeatureCallback callback ) { enforceModifyPermission ( ) ; return com.android.internal.telephony.PhoneFactory.getImsResolver ( ) . getEmergencyMMTelFeatureAndListen ( slotId , callback ) ; }
public static void doRecur ( java.lang.Runnable r ) { if ( r != null ) { r.run ( ) ; } art.Test1934.doRecur ( r ) ; }
public void doQuit ( ) { quitNow ( ) ; }
public void removeLintListener ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.LintListener listener ) { mListeners.remove ( listener ) ; if ( ( mListeners.size ( ) ) == 0 ) { mListeners = null ; } }
public V remove ( @ javax.annotation.Nullable java.lang.Object key ) { if ( set.remove ( key ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) K k = ( ( K ) ( key ) ) ; return function.apply ( k ) ; } else { return null ; } }
public void test_channelWithJoinWithoutSource ( ) throws java.lang.Exception { setup ( false ) ; assertEquals ( client , key.channel ( ) ) ; key.drop ( ) ; assertEquals ( client , key.channel ( ) ) ; }
void updateInCallButtonUiColors ( ) ;
public boolean matches ( final java.lang.Object arg ) { return android.text.TextUtils.equals ( id , ( ( com.android.messaging.datamodel.data.ConversationListItemData ) ( arg ) ) . getConversationId ( ) ) ; }
public void tearDown ( ) { mAdapterService.cleanup ( ) ; com.android.bluetooth.btservice.Config.init ( android.support.test.InstrumentationRegistry.getTargetContext ( ) ) ; }
public void setEcjArguments ( @ javax.annotation.Nonnull java.util.List < java.lang.String > ecjArguments ) { this . ecjArguments = ecjArguments ; }
private native void gattClientWriteCharacteristicNative ( int conn_id , int handle , int write_type , int auth_req , byte [ ] value ) ;
public com.android.ide.eclipse.gltrace.state.IGLProperty getProperty ( int key ) { return mSparseArray.get ( key ) ; }
public void run ( ) { selectDropped ( added ) ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { return new com.android.tools.lint.checks.SupportAnnotationDetector.CallVisitor ( context ) ; }
public void setNavigationIconHints ( int hints ) { if ( hints == ( mNavigationIconHints ) ) return ; mNavigationIconHints = hints ; if ( ( mNavigationBarView ) != null ) { mNavigationBarView.setNavigationIconHints ( hints ) ; } }
public static int NegSub1 ( int arg1 , int arg2 ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return - ( arg1 - arg2 ) ; }
public boolean contains ( java.lang.String key ) { return contains ( android.security.KeyStore.getBytes ( key ) ) ; }
public void test_F32_1_SCALE20_05_inSqure ( ) { testReszie ( android.renderscript.cts.IntrinsicResize.inX , android.renderscript.cts.IntrinsicResize.inX , Element.DataType.FLOAT_32 , 1 , 2.0F , 0.5F ) ; checkError ( ) ; }
public void addValue ( com.android.ide.common.rendering.api.AttrResourceValue attr ) { if ( ( mAttrMap ) == null ) { mAttrMap = new java.util.HashMap < java.lang.String , com.android.ide.common.rendering.api.AttrResourceValue > ( ) ; } mAttrMap.put ( attr.getName ( ) , attr ) ; }
public static com.android.dialer.app.calllog.IntentProvider getDuoInviteIntentProvider ( java.lang.String number ) { return new com.android.dialer.app.calllog.IntentProvider ( ) { @ java.lang.Override public android.content.Intent getIntent ( android.content.Context context ) { return com.android.dialer.duo.DuoComponent.get ( context ) . getDuo ( ) . getInviteIntent ( number ) . orNull ( ) ; } } ; }
public void testInRootUpdatesRef ( ) { initInteraction ( ) ; org.hamcrest.Matcher < android.support.test.espresso.Root > testMatcher = org.hamcrest.Matchers.nullValue ( android.support.test.espresso.Root.class ) ; testInteraction.inRoot ( testMatcher ) ; assertEquals ( testMatcher , rootMatcherRef.get ( ) ) ; }
public static com.android.ide.common.repository.GradleCoordinate.ArtifactType getArtifactType ( @ com.android.annotations.Nullable java.lang.String name ) { if ( name != null ) { for ( com.android.ide.common.repository.GradleCoordinate.ArtifactType type : com.android.ide.common.repository.GradleCoordinate.ArtifactType.values ( ) ) { if ( type.myId.equalsIgnoreCase ( name ) ) { return type ; } } } return null ; }
private boolean generate ( byte [ ] key ) { execute ( 'a' , key ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; }
void stopAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client ) { if ( client == null ) { return ; } android.os.Message message = new android.os.Message ( ) ; message.what = com.android.bluetooth.gatt.AdvertiseManager.MSG_STOP_ADVERTISING ; message.obj = client ; mHandler.sendMessage ( message ) ; }
private static native java.lang.String runAccessibilityTestImpl ( java.lang.String [ ] publicSystemLibs , java.lang.String [ ] publicVendorLibs ) ;
public static native int EVP_PKEY_size ( int pkey ) ;
public void test_getDisplayName ( ) { assertEquals ( "English (Canada,WIN32)" , testLocale.getDisplayName ( ) ) ; }
public int getDigests ( ) { if ( ( mDigests ) == null ) { throw new java.lang.IllegalStateException ( "Digests not specified" ) ; } return mDigests ; }
void onIncomingPostCallData ( long sessionId , @ android.support.annotation.NonNull com.android.dialer.multimedia.MultimediaData multimediaData ) ;
public void TestNumberFormatTestTupleToString ( ) { new com.ibm.icu.dev.test.format.NumberFormatTestTuple ( ) . toString ( ) ; }
public void testDependenciesMinSdkVersion ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( "" + ( ( ( "build.gradle:13: Warning: Using the appcompat library when minSdkVersion >= 14 is not necessary [GradleDependency]\n" + " compile \'com.android.support:appcompat-v7:+\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( "gradle/Dependencies14.gradle=>build.gradle" ) ) ; }
private libcore.tzdata.update2.DistroVersion createDistroVersion ( int majorFormatVersion , int minorFormatVersion ) throws libcore.tzdata.update2.DistroException { return new libcore.tzdata.update2.DistroVersion ( majorFormatVersion , minorFormatVersion , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , 3 ) ; }
protected native void datagramSocketClose ( ) ;
public void reopenTls ( ) { com.android.email.mail.transport.SmtpSenderUnitTests.assertTrue ( mOpen ) ; com.android.email.mail.transport.SmtpSenderUnitTests.assertTrue ( mTlsAllowed ) ; com.android.email.mail.transport.SmtpSenderUnitTests.fail ( "reopenTls() not implemented" ) ; }
static int getDescriptor ( long address ) { return sun.nio.ch.KQueue.unsafe.getInt$ ( ( address + ( sun.nio.ch.KQueue.OFFSET_IDENT ) ) ) ; }
public com.google.i18n.phonenumbers.Phonenumber.PhoneNumber parse ( java.lang.String numberToParse , java.lang.String defaultRegion ) throws com.google.i18n.phonenumbers.NumberParseException { com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber = new com.google.i18n.phonenumbers.Phonenumber.PhoneNumber ( ) ; parse ( numberToParse , defaultRegion , phoneNumber ) ; return phoneNumber ; }
public final java.nio.charset.CharsetDecoder onMalformedInput ( java.nio.charset.CodingErrorAction newAction ) { if ( newAction == null ) { throw new java.lang.IllegalArgumentException ( ) ; } malformedInputAction = newAction ; implOnMalformedInput ( newAction ) ; return this ; }
public int getCarrierPrivilegeStatus ( android.content.pm.PackageInfo packageInfo ) { return ( mCarrierPrivilegeRules ) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus ( packageInfo ) ; }
public void setup ( ) { put ( "Signature.FOO" , MockSignatureSpi.AllKeyTypes.class . getName ( ) ) ; }
public native T newInstance ( java.lang.Object ... args ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException , java.lang.InstantiationException , java.lang.reflect.InvocationTargetException ;
public boolean isBackgroundNetwork ( ) { return ( ( ! ( isVPN ( ) ) ) && ( ( numForegroundNetworkRequests ( ) ) == 0 ) ) && ( ( mNumBackgroundNetworkRequests ) > 0 ) ; }
public java.lang.String listNetworks ( ) { return doStringCommand ( "LIST_NETWORKS" ) ; }
public void selectionChanged ( org.eclipse.ui.IWorkbenchPart part , org.eclipse.jface.viewers.ISelection selection ) { if ( getEditor ( ) . isEditorPageActive ( ) ) { mCheckOutlineAdapter = true ; } }
java.lang.reflect.Type [ ] getGenericExceptionTypes ( ) { return libcore.reflect.Types.getTypeArray ( getMethodOrConstructorGenericInfo ( ) . genericExceptionTypes , false ) ; }
public void run ( ) { onDetachedFromWindow ( ) ; }
private org.chromium.android_webview.AwBrowserContext getBrowserContextLocked ( ) { assert java.lang.Thread.holdsLock ( mLock ) ; assert mStarted ; if ( ( mBrowserContext ) == null ) { mBrowserContext = new org.chromium.android_webview.AwBrowserContext ( android.app.ActivityThread.currentApplication ( ) . getSharedPreferences ( com.android.webview.chromium.WebViewChromiumFactoryProvider.CHROMIUM_PREFS_NAME , Context.MODE_PRIVATE ) ) ; } return mBrowserContext ; }
public void testMultipleUserField ( ) throws java.lang.Exception { final java.lang.String host = "http://multiple@users@url.com" ; java.net.URL url = new java.net.URL ( host ) ; assertNull ( url.getUserInfo ( ) ) ; assertTrue ( url.getHost ( ) . isEmpty ( ) ) ; }
public java.util.Set < java.util.Map.Entry < K , V > > entrySet ( ) { java.util.Set < java.util.Map.Entry < K , V > > es = entrySet ; return es != null ? es : ( entrySet = new EntrySet ( ) ) ; }
public com.android.test.common.fixture.GradleTestProject.Builder withName ( @ com.android.annotations.NonNull java.lang.String name ) { this . name = name ; return this ; }
public android.content.Intent getIntent ( android.content.Context context ) { return new android.content.Intent ( com.android.dialer.duo.DuoConstants.DUO_ACTIVATE_ACTION ) . setPackage ( DuoConstants.PACKAGE_NAME ) ; }
public static native void registerAppInfo ( java.lang.String appDir , java.lang.String processName , java.lang.String pkgname ) ;
protected java.util.Set < java.lang.String > getDefaultValues ( ) { return com.google.common.collect.Sets.newHashSet ( com.android.build.gradle.internal.dsl.AbiSplitOptions.ABI_LIST ) ; }
public void run ( ) { pair.listener.failed ( from , cause ) ; }
public java.lang.Boolean call ( ) { return performAccessibilityAction ( action , arguments ) ; }
public void setFromFieldPacker ( int xoff , int yoff , int component_number , android.renderscript.FieldPacker fp ) { setFromFieldPacker ( xoff , yoff , 0 , component_number , fp ) ; }
public void dup ( ) { super . dup ( ) ; producerPop ( ) ; producerPush ( ) ; producerPush ( ) ; }
public static java.lang.String setProperty ( java.lang.String name , java.lang.String value ) { java.lang.System.checkPropertyName ( name ) ; return ( ( java.lang.String ) ( java.lang.System.getProperties ( ) . setProperty ( name , value ) ) ) ; }
protected void resetRecords ( ) { mIsimImpi = null ; mIsimDomain = null ; mIsimImpu = null ; mIsimIst = null ; mIsimPcscf = null ; auth_rsp = null ; mRecordsRequested = false ; mLockedRecordsRequested = false ; }
public static native long SSL_get_options ( int ssl ) ;
native void rsnScriptForEachClipped ( long con , long id , int slot , long ain , long aout , int xstart , int xend , int ystart , int yend , int zstart , int zend ) ;
public java.lang.Boolean call ( ) { return canGoBackOrForward ( steps ) ; }
public com.android.sdklib.BuildToolInfo getBuildTool ( @ com.android.annotations.Nullable com.android.sdklib.repository.FullRevision revision ) { com.android.sdklib.repository.local.LocalPkgInfo pkg = getPkgInfo ( com.android.sdklib.repository.local.LocalSdk.PKG_BUILD_TOOLS , revision ) ; if ( pkg instanceof com.android.sdklib.repository.local.LocalBuildToolPkgInfo ) { return ( ( com.android.sdklib.repository.local.LocalBuildToolPkgInfo ) ( pkg ) ) . getBuildToolInfo ( ) ; } return null ; }
public java.lang.String getDisplayName ( ) { return getDisplayName ( java.util.Locale.getDefault ( java.util.Locale.Category.DISPLAY ) ) ; }
public boolean p2pFind ( ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.find ( ) ; } else { return doBooleanCommand ( "P2P_FIND" ) ; } }
public void postForkChild ( int debugFlags , java.lang.String instructionSet ) { dalvik.system.ZygoteHooks.nativePostForkChild ( token , debugFlags , instructionSet ) ; }
public void testGetName ( ) { java.lang.String name = "gps" ; android.location.LocationProvider locationProvider = mLocationManager.getProvider ( name ) ; assertEquals ( name , locationProvider.getName ( ) ) ; }
void expectCapabilitiesWith ( int capability , com.android.server.ConnectivityServiceTest.MockNetworkAgent agent ) { com.android.server.ConnectivityServiceTest.CallbackInfo cbi = expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.NETWORK_CAPABILITIES , agent ) ; android.net.NetworkCapabilities.NetworkCapabilities nc = ( ( android.net.NetworkCapabilities.NetworkCapabilities ) ( cbi.arg ) ) ; org.junit.Assert.assertTrue ( nc.hasCapability ( capability ) ) ; }
public boolean imsIsVolteProvisionedOnDevice ( ) { return mImsManager.isVolteProvisionedOnDevice ( mContext ) ; }
public void setSoTimeout ( int readTimeoutMilliseconds ) throws java.net.SocketException { super . setSoTimeout ( readTimeoutMilliseconds ) ; this . readTimeoutMilliseconds = readTimeoutMilliseconds ; }
public void annotate ( com.android.dx.util.ExceptionWithContext ex ) { locals.annotate ( ex ) ; stack.annotate ( ex ) ; }
boolean hasSanityChecks ( ) { return sanityChecks ; }
public java.lang.String format ( java.lang.CharSequence ... values ) { return format ( new java.lang.StringBuilder ( ) , null , values ) . toString ( ) ; }
protected void execute ( org.eclipse.core.runtime.IProgressMonitor monitor ) throws java.lang.reflect.InvocationTargetException { createProjectAsync ( monitor , null , null , projectData ) ; }
public void getAllTableItemsWithFallback ( java.lang.String path , android.icu.impl.UResource.TableSink sink ) throws java.util.MissingResourceException { getAllContainerItemsWithFallback ( path , null , sink ) ; }
public void setBackgroundColor ( int color ) { setBackgroundDrawable ( new android.graphics.drawable.ColorDrawable ( color ) ) ; }
static com.android.internal.telephony.gsm.GsmMmiCode newFromUssdUserInput ( java.lang.String ussdMessge , com.android.internal.telephony.gsm.GSMPhone phone , com.android.internal.telephony.gsm.UiccCardApplication app ) { com.android.internal.telephony.gsm.GsmMmiCode ret = new com.android.internal.telephony.gsm.GsmMmiCode ( phone , app ) ; ret.message = ussdMessge ; ret.state = State.PENDING ; ret.isPendingUSSD = true ; return ret ; }
public native java.lang.reflect.Method [ ] getDeclaredMethodsUnchecked ( boolean publicOnly ) ;
public boolean hasCapability ( @ android.net.NetworkCapabilities.NetCapability int capability ) { if ( ( capability < ( android.net.NetworkCapabilities.MIN_NET_CAPABILITY ) ) || ( capability > ( android.net.NetworkCapabilities.MAX_NET_CAPABILITY ) ) ) { return false ; } return ( ( mNetworkCapabilities ) & ( 1 << capability ) ) != 0 ; }
public void load ( java.lang.String filename ) { load0 ( dalvik.system.VMStack.getStackClass2 ( ) , filename ) ; }
public void sendMessage ( android.view.View view ) { android.content.Intent intent = new android.content.Intent ( this , com.example.android.multiproject.ShowPeopleActivity.class ) ; startActivity ( intent ) ; }
public void setPeriodicAdvertisingData ( android.bluetooth.le.AdvertiseData data ) { try { gatt.setPeriodicAdvertisingData ( this . advertiserId , data ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.le.AdvertisingSet.TAG , "remote exception - " , e ) ; } }
native void rsnAllocationRead ( int con , int id , byte [ ] d ) ;
public com.android.ddmlib.RawImage getScreenshot ( ) throws java.io.IOException { return com.android.ddmlib.AdbHelper.getFrameBuffer ( AndroidDebugBridge.sSocketAddr , this ) ; }
public void onUiShowing ( boolean showing ) { if ( showing ) { hide ( ) ; } else { if ( com.android.dialer.telecom.TelecomUtil.isInCall ( context ) ) { show ( ) ; } } }
public void setWebContentsDebuggingEnabled ( boolean enable ) { if ( ! ( android.os.Build.IS_DEBUGGABLE ) ) { this . setWebContentsDebuggingEnabled ( enable ) ; } }
public void setEnabled ( boolean enabled ) { mEnabled = enabled ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { boolean sizeMode = mSdCardSizeRadio.getSelection ( ) ; enableSdCardWidgets ( sizeMode ) ; validatePage ( ) ; }
private void testScriptSide ( com.android.rs.test.RenderScript pRS ) { com.android.rs.test.ScriptC_sampler s = new com.android.rs.test.ScriptC_sampler ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_sampler_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; }
java.util.Collection < java.io.File > getJniDirectories ( ) ;
private static android.net.wifi.hotspot2.pps.Credential createCredentialWithSimCredential ( ) { android.net.wifi.hotspot2.pps.Credential.SimCredential simCred = new android.net.wifi.hotspot2.pps.Credential.SimCredential ( ) ; simCred.imsi = "imsi" ; simCred.eapType = 1 ; return android.net.wifi.hotspot2.pps.CredentialTest.createCredential ( null , null , simCred , null , null , null ) ; }
public void test_RSA_private_encrypt_null_key_Failure ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.RSA_private_encrypt ( 0 , new byte [ 0 ] , new byte [ 0 ] , 0 , 0 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public char [ ] getDigits ( ) { return digits ; }
private static org.chromium.base.SystemMessageHandler create ( long messagePumpDelegateNative ) { return new org.chromium.base.SystemMessageHandler ( messagePumpDelegateNative ) ; }
static com.android.sched.vfs.VPath getFilePath ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { return new com.android.sched.vfs.VPath ( ( ( com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter ( ) . getName ( type ) ) + ( com.android.jack.backend.dex.DexWriter.DEX_FILE_EXTENSION ) ) , '/' ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent arg0 ) { if ( ( mReceiver ) != null ) { mReceiver.clearMessages ( ) ; refreshLogCatTable ( ) ; updateAppliedFilters ( ) ; } }
public com.android.build.gradle.internal.variant.TestVariantData getTestVariantData ( @ com.android.annotations.NonNull com.android.builder.core.VariantConfiguration.Type type ) { return testVariants.get ( type ) ; }
public int getRandomFoo ( ) { java.util.Random r = new java.util.Random ( java.lang.System.currentTimeMillis ( ) ) ; return r.nextInt ( com.basicJavaProject.Foo.FOO ) ; }
void onContactsListScrolled ( int scrollState ) ;
public final void init ( java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { spiImpl.engineInit ( key , params , random ) ; }
com.android.sched.vfs.BaseVFile createVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { return changeVFS ( vfs.createVFile ( parent , name ) ) ; }
public void postResponseCallsDeliverResponse ( ) { mDelivery.postResponse ( mRequest , mSuccessResponse ) ; assertTrue ( mRequest.deliverResponse_called ) ; assertFalse ( mRequest.deliverError_called ) ; }
public void testReadWithNoStoreFile ( ) throws java.lang.Exception { assertFalse ( mWifiConfigStore.areStoresPresent ( ) ) ; com.android.server.wifi.WifiConfigStoreData readData = mWifiConfigStore.read ( ) ; com.android.server.wifi.WifiConfigStoreDataTest.assertConfigStoreDataEqual ( getEmptyStoreData ( ) , readData ) ; }
public void run ( ) { mActivity.addErrorToDropBox ( "watchdog" , null , null , null , name , null , stack , null ) ; }
void setOnUnsolOemHookRaw ( android.os.Handler h , int what , java.lang.Object obj ) ;
public static java.lang.String encode ( java.lang.String s ) { return java.net.URLEncoder.ENCODER.encode ( s , Charsets.UTF_8 ) ; }
public static void assertSSLEngineValidProtocols ( java.lang.String [ ] protocols ) { libcore.java.security.StandardNames.assertValidProtocols ( libcore.java.security.StandardNames.SSL_SOCKET_PROTOCOLS_SSLENGINE , protocols ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { onButtonDelete ( ) ; }
public long getTagBits ( ) { long tagBits = com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits ( jMethod ) ; return tagBits ; }
public void testE2 ( ) { try { dot.junit.opcodes.instance_of.d.T_instance_of_3 tt = new dot.junit.opcodes.instance_of.d.T_instance_of_3 ( ) ; tt.run ( ) ; fail ( "expected IllegalAccessError" ) ; } catch ( java.lang.IllegalAccessError e ) { } }
public long getTotalSpace ( ) { try { libcore.io.StructStatFs sb = Libcore.os.statfs ( path ) ; return ( sb.f_blocks ) * ( sb.f_bsize ) ; } catch ( libcore.io.ErrnoException errnoException ) { return 0 ; } }
public java.lang.String getAidForAppType ( int appType ) { return getAidForAppType ( android.telephony.TelephonyManager.getDefaultSubscription ( ) , appType ) ; }
protected void setUp ( ) { java.io.InputStream propertiesStream = new java.io.ByteArrayInputStream ( "p1=one\np2=two" . getBytes ( ) ) ; try { tests.api.java.util.PropertyResourceBundleTest.prb = new java.util.PropertyResourceBundle ( propertiesStream ) ; } catch ( java.io.IOException e ) { fail ( "Contruction of PropertyResourceBundle threw IOException" ) ; } }
public void requestingPermission ( ) { requestingPermission = true ; }
public java.lang.String telephonyGetNetworkType ( ) { com.googlecode.android_scripting.Log.d ( ( "sl4a:getNetworkType() is deprecated!" + ( "Please use getVoiceNetworkType()" + " or getDataNetworkTpe()" ) ) ) ; return telephonyGetNetworkTypeForSubscription ( android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ) ; }
public java.lang.Object getViewObject ( ) { return null ; }
private void bindToScoringServiceIfNeeded ( ) { if ( com.android.server.NetworkScoreService.DBG ) android.util.Log.d ( com.android.server.NetworkScoreService.TAG , "bindToScoringServiceIfNeeded" ) ; android.net.NetworkScorerAppManager.NetworkScorerAppData scorerData = android.net.NetworkScorerAppManager.getActiveScorer ( mContext ) ; bindToScoringServiceIfNeeded ( scorerData ) ; }
public int getMaxConnectedAudioDevices ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return AdapterProperties.MIN_CONNECTED_AUDIO_DEVICES ; } return service.getMaxConnectedAudioDevices ( ) ; }
public void linkNativeLibraryDirectory ( java.lang.String uuid , java.lang.String dataPath , java.lang.String nativeLibPath32 , int userId ) throws com.android.internal.os.InstallerConnection.InstallerException { mInstaller.execute ( "linklib" , uuid , dataPath , nativeLibPath32 , userId ) ; }
public static android.telephony.MbmsDownloadManager create ( android.content.Context context , android.telephony.mbms.IMbmsDownloadManagerCallback listener , int subscriptionId ) throws android.telephony.mbms.MbmsException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager ( context , listener , subscriptionId ) ; mdm.bindAndInitialize ( ) ; return mdm ; }
public native byte getByte ( java.lang.Object obj ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
private void sendLinkConfigurationChangedBroadcast ( ) { android.content.Intent intent = new android.content.Intent ( WifiManager.LINK_CONFIGURATION_CHANGED_ACTION ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; intent.putExtra ( WifiManager.EXTRA_LINK_PROPERTIES , new android.net.LinkProperties ( mLinkProperties ) ) ; mContext.sendBroadcastAsUser ( intent , UserHandle.ALL ) ; }
public static native long SSL_set_options ( int ssl , long options ) ;
public java.lang.String getShortDescription ( ) { return java.lang.String.format ( "%1$s, Android API %2$s, revision %3$s%4$s" , getDisplayName ( ) , mVersion.getApiString ( ) , getRevision ( ) , ( isObsolete ( ) ? " (Obsolete)" : "" ) ) ; }
public static PhoneConstants.State convertCallState ( int state ) { switch ( state ) { case android.telephony.TelephonyManager.CALL_STATE_RINGING : return PhoneConstants.State.RINGING ; case android.telephony.TelephonyManager.CALL_STATE_OFFHOOK : return PhoneConstants.State.OFFHOOK ; default : return PhoneConstants.State.IDLE ; } }
public static int getLevel ( int fullState ) { return fullState & ( com.android.systemui.statusbar.phone.SignalDrawable.LEVEL_MASK ) ; }
public java.util.Iterator < T > iterator ( ) { return numberToSkip >= ( list.size ( ) ) ? com.google.common.collect.Iterators.< T > emptyIterator ( ) : list.subList ( numberToSkip , list.size ( ) ) . iterator ( ) ; }
public static void dumpDisplayList ( @ com.android.annotations.NonNull com.android.ddmlib.Client client , @ com.android.annotations.NonNull java.lang.String viewRoot , @ com.android.annotations.NonNull java.lang.String view ) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendViewOpPacket ( client , com.android.ddmlib.HandleViewDebug.VUOP_DUMP_DISPLAYLIST , viewRoot , view , null ) ; }
synchronized void nAllocationData1D ( long id , int off , int mip , int count , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
public org.junit.runners.model.Statement apply ( org.junit.runners.model.Statement base , org.hamcrest.Description description ) { return new org.junit.rules.ExpectedException.ExpectedExceptionStatement ( base ) ; }
public void setCallWaiting ( boolean enable , android.os.Message onComplete ) { android.util.Log.e ( com.android.internal.telephony.sip.SipPhoneBase.LOG_TAG , "call waiting not supported" ) ; }
private boolean result ( java.lang.String testName , final com.android.rs.test.UT_reduce.timing t , final int [ ] javaRslt , final int [ ] rsRslt ) { return result ( testName , t , intArrayToLong ( javaRslt ) , intArrayToLong ( rsRslt ) ) ; }
public boolean setOperatorBrandOverride ( int subId , java.lang.String brand ) { enforceCarrierPrivilege ( subId ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; return phone == null ? false : phone.setOperatorBrandOverride ( brand ) ; }
public void setWarnIfHeld ( java.lang.Object warnIfHeld ) { mInstaller.setWarnIfHeld ( warnIfHeld ) ; }
public boolean restorePicture ( android.os.Bundle b , java.io.File src ) { checkThread ( ) ; if ( DebugFlags.TRACE_API ) android.util.Log.d ( android.webkit.WebView.LOGTAG , ( "restorePicture=" + ( src.getName ( ) ) ) ) ; return mProvider.restorePicture ( b , src ) ; }
public void invokeOemRilRequestRaw ( byte [ ] data , android.os.Message response ) { }
protected void engineInit ( byte [ ] params ) throws java.io.IOException { }
public java.util.Collection < com.android.ddmlib.IDevice > getLaunchingCloudDevices ( ) { synchronized ( ghostCloudDevices ) { java.util.HashSet < com.android.ddmlib.IDevice > launchingCloudDevices = com.google.api.client.util.Sets.newHashSet ( ) ; launchingCloudDevices.addAll ( ghostCloudDevices ) ; return launchingCloudDevices ; } }
public void testDecodeEmpty ( ) throws java.lang.Exception { assertEquals ( "[]" , java.util.Arrays.toString ( libcore.io.Base64.decode ( new byte [ 0 ] ) ) ) ; }
public static java.net.InetAddress [ ] getAllByNameOnNet ( java.lang.String host , int netId ) throws java.net.UnknownHostException { return java.net.InetAddress.getAllByNameImpl ( host , netId ) . clone ( ) ; }
public void copy1DRangeFrom ( int off , int count , long [ ] d ) { validateIsInt64 ( ) ; copy1DRangeFromUnchecked ( off , count , d ) ; }
long size ( java.io.FileDescriptor fd ) throws java.io.IOException { return sun.nio.ch.FileDispatcherImpl.size0 ( fd ) ; }
public static native void SSL_enable_tls_channel_id ( int ssl ) throws javax.net.ssl.SSLException ;
private void forEachNonSubBlockDepthFirst ( int firstLabel , com.android.dx.cf.code.BasicBlock.Visitor v ) { forEachNonSubBlockDepthFirst0 ( labelToBlock ( firstLabel ) , v , new java.util.BitSet ( maxLabel ) ) ; }
int settingsSecureGetIntForUser ( java.lang.String key , int def , int userId ) ;
protected java.lang.Object make ( java.lang.Object o ) { com.google.doclava.PackageDoc p = ( ( com.google.doclava.PackageDoc ) ( o ) ) ; return new com.google.doclava.PackageInfo ( p , p.name ( ) , com.google.doclava.Converter.convertSourcePosition ( p.position ( ) ) ) ; }
protected boolean cleanup ( ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , "cleanup()" ) ; } if ( mNativeAvailable ) { cleanupNative ( ) ; mNativeAvailable = false ; } return true ; }
public void streamingServicesUpdated ( java.util.List < android.telephony.mbms.StreamingServiceInfo > services ) throws android.os.RemoteException { }
public java.util.Map < java.lang.String , com.android.builder.model.ClassField > getResValues ( ) { return com.google.common.collect.Maps.newHashMap ( ) ; }
private void createIndices ( android.database.sqlite.SQLiteDatabase db ) { createThreadIdIndex ( db ) ; }
public void throwPending ( ) throws java.lang.Error , java.lang.Exception { }
java.util.Set < java.lang.String > getSupportedRegions ( ) { return java.util.Collections.unmodifiableSet ( com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataSupportedRegions ( ) ) ; }
private javax.swing.JButton createToolbarButton ( com.android.monkeyrunner.PhysicalButton hardButton ) { javax.swing.JButton button = new javax.swing.JButton ( new com.android.monkeyrunner.controller.MonkeyControllerFrame.PressAction ( hardButton ) ) ; button.setText ( hardButton.getKeyName ( ) ) ; return button ; }
public boolean isVideoCall ( ) { return android.telecom.VideoProfile.isVideo ( com.android.ims.ImsCallProfile.getVideoStateFromCallType ( mCallType ) ) ; }
private java.io.File getUserPackagesStateFile ( int userId ) { return new java.io.File ( android.os.Environment.getUserSystemDirectory ( userId ) , "package-restrictions.xml" ) ; }
void resetResolvedPaddingInternal ( ) { mPrivateFlags2 &= ~ ( android.view.View.PFLAG2_PADDING_RESOLVED ) ; }
public void test_F32_3_SCALE10_10_inSqure ( ) { testReszie ( inX , inX , Element.DataType.FLOAT_32 , 3 , 1.0F , 1.0F ) ; }
private static java.lang.String getCaptivePortalServerHttpsUrl ( android.content.Context context ) { return com.android.server.connectivity.NetworkMonitor.getSetting ( context , Settings.Global.CAPTIVE_PORTAL_HTTPS_URL , com.android.server.connectivity.NetworkMonitor.DEFAULT_HTTPS_URL ) ; }
public java.util.List < java.io.File > getClasspath ( ) { return getFilesFromPathString ( classpath ) ; }
public void onClick ( android.view.View v ) { setAlarm ( ) ; }
public void fatalError ( org.xml.sax.SAXParseException e ) { log.error ( Severity.ERROR , new com.android.manifmerger.IMergerLog.FileAndLine ( xmlFile.getName ( ) , 0 ) , "Fatal error when parsing: %1$s" , xmlFile.getName ( ) , e.toString ( ) ) ; }
public void testInstall_withMissingBundleVersionFile ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , "001" ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; assertFalse ( installer.install ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public static long LongMultiplication ( ) { long a ; long b ; long c ; a = 7L ; b = 3L ; c = a * b ; return c ; }
public abstract int run ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.Nonnull java.lang.String [ ] className , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) throws com.android.jack.test.runner.RuntimeRunnerException ;
protected byte [ ] engineDoFinal ( ) { final byte [ ] output = org.conscrypt.NativeCrypto.EVP_DigestSignFinal ( ctx.getContext ( ) ) ; reset ( ) ; return output ; }
public int compareTo ( com.android.jack.dx.rop.type.Type other ) { return descriptor.compareTo ( other.descriptor ) ; }
public void printf ( java.lang.String msgFormat , java.lang.Object ... args ) { java.lang.System.out.printf ( msgFormat , args ) ; }
getTextSymbolDependencies ( com.android.build.gradle.tasks.config allLibraries ) { }
public void run ( ) { startInputInner ( null , 0 , 0 , 0 ) ; }
private boolean querySoundEffectsEnabled ( int user ) { return ( Settings.System.getIntForUser ( mApplicationContext.getContentResolver ( ) , Settings.System.SOUND_EFFECTS_ENABLED , 0 , user ) ) != 0 ; }
private native void dumpNative ( java.io.FileDescriptor fd ) ;
static void freeNativeStorage ( int nativeDataPtr ) { java.lang.System.out.println ( ( "freeNativeStorage: " + nativeDataPtr ) ) ; }
public static float $noinline$floatSubAddSimplifyRight ( float x , float y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } float sub = x - y ; return y + sub ; }
private static java.lang.String getComponentName ( ) { return "com.android.dialer.main.impl.MainActivity" ; }
public void testLamba040_whole ( ) throws java.lang.Exception { java.io.File lib = makeLibrary ( new java.io.File [ ] { } , TEST001.directory ) ; test ( TEST001.jUnit , lib ) ; }
protected java.util.Properties createProps ( ) { java.util.Properties props = super . createProps ( ) ; props.setProperty ( PkgProps.VERSION_API_LEVEL , "5" ) ; props.setProperty ( PkgProps.PLATFORM_VERSION , "android-5" ) ; props.setProperty ( PkgProps.PLATFORM_INCLUDED_ABI , "armeabi" ) ; return props ; }
public static int $noinline$floatToDoubleToInt ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
public static com.android.server.pm.OtaDexoptService main ( android.content.Context context , com.android.server.pm.PackageManagerService packageManagerService ) { com.android.server.pm.OtaDexoptService ota = new com.android.server.pm.OtaDexoptService ( context , packageManagerService ) ; android.os.ServiceManager.addService ( "otadexopt" , ota ) ; return ota ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { ( com.android.server.wifi.WifiStateMachine.sScanAlarmIntentCount ) ++ ; startScan ( com.android.server.wifi.WifiStateMachine.SCAN_ALARM_SOURCE , ( - 2 ) , null , null ) ; if ( com.android.server.wifi.WifiStateMachine.VDBG ) loge ( "WiFiStateMachine SCAN ALARM" ) ; }
public void removeImsFeature ( int slotId , int feature , com.android.ims.internal.IImsFeatureStatusCallback c ) throws android.os.RemoteException { this . removeImsFeature ( slotId , feature ) ; }
public com.android.ide.eclipse.adt.internal.resources.AttributeInfo [ ] getAttributes ( ) { return mAttributes ; }
public boolean isCallerApplicationRestrictionsManagingPackage ( ) { throwIfParentInstance ( "isCallerApplicationRestrictionsManagingPackage" ) ; if ( ( mService ) != null ) { try { return mService.isCallerApplicationRestrictionsManagingPackage ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return false ; }
protected void removeRange ( int from , int to ) { super . removeRange ( from , to ) ; }
public abstract android.support.v4.app.Fragment findFragmentById ( int id ) ;
public org.w3c.dom.Node toXml ( org.w3c.dom.Document document ) { org.w3c.dom.Element location = document.createElement ( "source" ) ; location.setAttribute ( "scheme" , "file://" ) ; location.setAttribute ( "value" , mFile.getAbsolutePath ( ) ) ; return location ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { on_ButtonDelete_widgetSelected ( e ) ; }
public static < R extends java.lang.Readable & java.io.Closeable > java.lang.String toString ( com.google.common.io.InputSupplier < R > supplier ) throws java.io.IOException { return com.google.common.io.CharStreams.toStringBuilder ( supplier ) . toString ( ) ; }
public void run ( ) { canRestart [ 0 ] = org.eclipse.jface.dialogs.MessageDialog.openQuestion ( mWindowShell , "ADB Restart" , ( "A package that depends on ADB has been updated. It is recommended " + ( "to restart ADB. Is it OK to do it now? If not, you can restart it " + "manually later." ) ) ) ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.internal.telephony.cat.CommandParamsFactory.MSG_ID_LOAD_ICON_DONE : sendCmdParams ( setIcons ( msg.obj ) ) ; break ; } }
public void testMakeTimeZone_found ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = ZoneInfoDB.TzData.loadTzData ( libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ; assertNotNull ( data.makeTimeZone ( "Europe/London" ) ) ; assertTrue ( data.hasTimeZone ( "Europe/London" ) ) ; }
public com.android.internal.telephony.uicc.UiccCard getUiccCardForPhone ( int phoneId ) { synchronized ( com.android.internal.telephony.uicc.UiccController.mLock ) { int slotId = getSlotIdFromPhoneId ( phoneId ) ; return getUiccCardForSlot ( slotId ) ; } }
public void testMountSdNormalInternal ( ) { assertTrue ( mountFromRawResource ( ) ) ; }
public static int IntSubtraction ( ) { int a ; int b ; int c ; a = 6 ; b = 2 ; c = a - b ; return c ; }
private static java.lang.String [ ] getFolderSegments ( java.lang.String config ) { return ( ( config.length ( ) ) > 0 ? "foo-" + config : "foo" ) . split ( "-" ) ; }
public boolean equals ( @ javax.annotation.Nullable java.lang.Object object ) { return ( ( this ) == object ) || ( this . s.equals ( object ) ) ; }
public void testAospPropertyContexts ( ) throws java.lang.Exception { devicePcFile = java.io.File.createTempFile ( "property_contexts" , ".tmp" ) ; devicePcFile.deleteOnExit ( ) ; mDevice.pullFile ( "/property_contexts" , devicePcFile ) ; aospPcFile = copyResourceToTempFile ( "/general_property_contexts" ) ; assertFileStartsWith ( aospPcFile , devicePcFile ) ; }
public void sendOemRilRequestStringsResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.util.ArrayList < java.lang.String > var2 ) { }
public void java7Exception003 ( ) throws java.lang.Exception { compileJava7Test ( "test003" ) ; }
protected void doBuildPatchFile ( java.io.File toFile , com.intellij.updater.MultiZipFile.OutputStream patchOutput ) throws java.io.IOException { }
public void clear ( ) { set.clear ( ) ; }
static void add ( java.lang.String locale , java.lang.String ... data ) { android.icu.text.ListFormatter.localeToData.put ( new android.icu.util.ULocale ( locale ) , new android.icu.text.ListFormatter ( data [ 0 ] , data [ 1 ] , data [ 2 ] , data [ 3 ] ) ) ; }
public void setFeatureValue ( int feature , int network , int value , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { }
public java.util.logging.Handler [ ] getHandlers ( ) { initializeGlobalHandlers ( ) ; return super . getHandlers ( ) ; }
public static javax.net.ssl.SSLSession unwrapSSLSession ( javax.net.ssl.SSLSession sslSession ) { if ( ( Build.VERSION.SDK_INT ) <= 23 ) { return sslSession ; } if ( sslSession instanceof org.conscrypt.OpenSSLExtendedSessionImpl ) { return ( ( org.conscrypt.OpenSSLExtendedSessionImpl ) ( sslSession ) ) . getDelegate ( ) ; } return sslSession ; }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setEndTime ( long value ) { bitField0_ |= 256 ; endTime_ = value ; onChanged ( ) ; return this ; }
private void displayAvdList ( ) { try { com.android.sdklib.internal.avd.AvdManager avdManager = com.android.sdklib.internal.avd.AvdManager.getInstance ( mSdkManager , mSdkLog ) ; displayAvdList ( avdManager ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
public void onWiFiToLteHandover ( com.android.incallui.call.DialerCall call ) { if ( ( mInCallActivity ) != null ) { mInCallActivity.onWiFiToLteHandover ( call ) ; } }
public static void computeRemainder ( android.renderscript.cts.TestRemainder.ArgumentsFloatFloatFloat args ) { args.ulf = 64 ; args.ulfRelaxed = 128 ; args.out = android.renderscript.cts.CoreMathVerifier.remainderAndQuotient ( args.inX , args.inY ) . remainder ; }
public void getPreferredVoicePrivacy ( android.os.Message result ) { android.util.Log.w ( com.android.internal.telephony.test.SimulatedCommands.LOG_TAG , "CDMA not implemented in SimulatedCommands" ) ; unimplemented ( result ) ; }
public static native int EVP_CIPHER_iv_length ( int evpCipher ) ;
public boolean isWfcProvisionedOnDeviceForSlot ( ) { if ( getBooleanCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL ) ) { return isWfcProvisioned ( ) ; } return true ; }
public final com.android.jack.ir.ast.cfg.JExitBasicBlock exit ( ) { return exit ; }
private com.android.internal.app.IBatteryStats getBatteryStats ( ) { synchronized ( this ) { if ( ( mBatteryStats ) != null ) { return mBatteryStats ; } mBatteryStats = IBatteryStats.Stub.asInterface ( android.os.ServiceManager.getService ( BatteryStats.SERVICE_NAME ) ) ; return mBatteryStats ; } }
public void testNewFullscreen ( ) throws java.lang.Exception { checkCreateTemplate ( "activities" , "Fullscreen" ) ; }
public com.android.internal.telephony.gsm.GsmCall getForegroundCall ( ) { return mCT.foregroundCall ; }
public boolean validate ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.gradle.settings.GradleSettings settings ) throws com.intellij.openapi.options.ConfigurationException { return true ; }
public boolean isMatchFor ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier qualifier ) { if ( qualifier instanceof com.android.ide.eclipse.adt.internal.resources.configurations.PixelDensityQualifier ) { return true ; } return false ; }
protected void engineReset ( ) { resetContext ( ) ; }
public static short intAnd0x17fffToShort ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( short ) ( value & 98303 ) ) ; }
public void onRenderingTargetPostChange ( com.android.sdklib.IAndroidTarget target ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTargetData ( target ) ; updateCapabilities ( targetData ) ; }
public java.lang.String getAdditionalProposalInfo ( ) { com.android.tools.lint.detector.api.Issue issue = com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.getRegistry ( ) . getIssue ( mId ) ; if ( issue != null ) { return issue.getExplanationAsHtml ( ) ; } return null ; }
native void rsnScriptForEach ( long con , long id , int slot , long ain , long aout ) ;
public void testSetCallbackAndNotify ( ) throws java.lang.Exception { mTestImsService.setImsFeatureStatusCallback ( mTestStatusCallback ) ; org.mockito.Mockito.verify ( mTestStatusCallback ) . notifyImsFeatureStatus ( org.mockito.Matchers.eq ( ImsFeature.STATE_NOT_AVAILABLE ) ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( getName ( ) ) + " ignore connect" ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_REJECT ) ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; reloadSkinCombo ( ) ; validatePage ( ) ; }
public void setSmsListener ( android.telephony.ims.aidl.IImsSmsListener l ) throws android.os.RemoteException { this . setSmsListener ( l ) ; }
public void testE3 ( ) { dot.junit.opcodes.aput_object.d.T_aput_object_1 t = new dot.junit.opcodes.aput_object.d.T_aput_object_1 ( ) ; java.lang.String [ ] arr = null ; try { t.run ( arr , 0 , "abc" ) ; fail ( "expected NullPointerException" ) ; } catch ( java.lang.NullPointerException aie ) { } }
private void expectFailedScanStart ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.ScanEventHandler eventHandler , java.util.Set < java.lang.Integer > scanFreqs , java.util.Set < java.lang.Integer > networkIds ) { order.verify ( mWifiNative ) . scan ( eq ( scanFreqs ) , eq ( networkIds ) ) ; }
private static com.android.dx.cf.direct.DirectClassFile parseClass ( java.lang.String name , byte [ ] bytes ) { com.android.dx.cf.direct.DirectClassFile cf = new com.android.dx.cf.direct.DirectClassFile ( bytes , name , com.android.dx.command.dexer.Main.args.cfOptions.strictNameCheck ) ; cf.setAttributeFactory ( StdAttributeFactory.THE_ONE ) ; cf.getMagic ( ) ; return cf ; }
public java.lang.String getDeviceSoftwareVersion ( ) { return getDeviceSoftwareVersion ( getDefaultSim ( ) ) ; }
public static int ShrIntLong ( ) { int lhs = Main.$inline$int ( 7 ) ; long rhs = Main.$inline$long ( 2L ) ; return lhs > > rhs ; }
public com.android.ide.common.layout.Format [ ] getFormats ( ) { com.android.ide.common.layout.BaseLayoutTest.fail ( "Not supported yet in tests" ) ; return null ; }
private static void usage ( ) { java.lang.System.err.println ( ( "Usage: signapk [-w] " + ( ( ( ( "[-a <alignment>] " + "[-providerClass <className>] " ) + "publickey.x509[.pem] privatekey.pk8 " ) + "[publickey2.x509[.pem] privatekey2.pk8 ...] " ) + "input.jar output.jar" ) ) ) ; java.lang.System.exit ( 2 ) ; }
public java.util.Iterator charsets ( ) { java.util.Vector v = new java.util.Vector ( ) ; v.add ( tests.api.java.nio.charset.CharsetTest.charset1 ) ; v.add ( tests.api.java.nio.charset.CharsetTest.charset2 ) ; return v.iterator ( ) ; }
public final native long [ ] readInt64Vector ( ) ;
boolean waitForStateChange ( ) throws java.lang.InterruptedException { return mBlocker.await ( android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE , java.util.concurrent.TimeUnit.SECONDS ) ; }
final void setFocusedActivityLocked ( com.android.server.am.ActivityRecord r ) { if ( ( mFocusedActivity ) != r ) { mFocusedActivity = r ; if ( r != null ) { mWindowManager.setFocusedApp ( r.appToken , true ) ; } } }
public void onDismissDialog ( ) { }
public java.io.File [ ] getDefaultBootClasspath ( ) { return new java.io.File [ ] { new java.io.File ( com.android.jack.test.TestsProperties.getJackRootDir ( ) , "jack-tests/prebuilts/core-stubs-mini.jack" ) , new java.io.File ( com.android.jack.test.TestsProperties.getJackRootDir ( ) , "jack-tests/prebuilts/junit4-targetdex-jack.zip" ) } ; }
public boolean isInUserWhiteList ( ) { return isInUserWhiteList ; }
public android.security.KeyStoreParameter.Builder setDigests ( @ android.security.KeyStoreKeyConstraints.DigestEnum int digests ) { mDigests = digests ; return this ; }
public void setRingerModeInternal ( int ringerMode ) { try { android.media.AudioManager.getService ( ) . setRingerModeInternal ( ringerMode , getContext ( ) . getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.media.AudioManager.TAG , "Error calling setRingerModeInternal" , e ) ; } }
public boolean startInstrumentation ( android.content.ComponentName className , java.lang.String profileFile , int flags , android.os.Bundle arguments , android.app.IInstrumentationWatcher watcher , android.app.IUiAutomationConnection connection , int userId ) throws android.os.RemoteException ;
public static void main ( java.lang.String [ ] args ) { java.lang.Error error = null ; try { Main.$opt$TestInvokeStatic ( ) ; } catch ( java.lang.Error e ) { error = e ; } java.lang.System.out.println ( error ) ; }
static com.google.common.util.concurrent.RateLimiter create ( com.google.common.util.concurrent.RateLimiter.SleepingTicker ticker , double permitsPerSecond ) { com.google.common.util.concurrent.RateLimiter rateLimiter = new com.google.common.util.concurrent.RateLimiter.Bursty ( ticker ) ; rateLimiter.setRate ( permitsPerSecond ) ; return rateLimiter ; }
public void testNewInstanceString_NoArgConstructor ( ) { runTestNewInstanceString ( "()V" , new org.apache.harmony.jpda.tests.jdwp.ClassType.NewInstanceStringTest.ConstructorArgumentsProvider ( ) { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { } } ) ; }
static int getKeyTypeForAlgorithm ( java.lang.String keyType ) { if ( "RSA" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_RSA ; } else if ( "EC" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_EC ; } else { return - 1 ; } }
public static native byte [ ] i2d_PKCS8_PRIV_KEY_INFO ( int pkey ) ;
public android.net.LinkQualityInfo [ ] getAllLinkQualityInfo ( ) { try { android.net.LinkQualityInfo [ ] li = mService.getAllLinkQualityInfo ( ) ; return li ; } catch ( android.os.RemoteException e ) { return null ; } }
private boolean deleted ( org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore store , java.lang.String alias ) { switch ( this ) { case SYSTEM : return ! ( store.containsAlias ( alias ) ) ; case USER : return false ; } throw new java.lang.AssertionError ( ) ; }
public void run ( ) { setHorizontalScrollbarOverlay ( overlay ) ; }
public int registerStateCallback ( android.telephony.mbms.DownloadRequest downloadRequest , android.telephony.mbms.DownloadStateCallback callback ) throws android.os.RemoteException { return 0 ; }
public void testOnSetUpAdapterFailed ( ) throws java.lang.Exception { java.io.File testAdapter = new java.io.File ( mTestDir , ( ( VTS_NATIVE_TEST_DIR ) + ( TEST_HAL_ADAPTER_BINARY ) ) ) ; testAdapter.createNewFile ( ) ; java.lang.String output = "android.hardware.foo@1.1::IFoo/default" ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mCmdUtil.mCmdSuccess = false ; try { mPreparer.setUp ( mDevice , mBuildInfo ) ; } catch ( com.android.tradefed.targetprep.TargetSetupError e ) { org.junit.Assert.assertEquals ( "HAL adapter failed." , e.getMessage ( ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public boolean isEmpty ( ) { try { return ( mBinder.zero ( ) ) == ( android.security.KeyStore.KEY_NOT_FOUND ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public void clear ( ) { filteredEntrySet.clear ( ) ; }
public java.util.Set < java.lang.String > getExcludes ( ) { if ( ( excludes ) == null ) { return java.util.Collections.emptySet ( ) ; } return excludes ; }
private java.lang.StringBuilder checkNameAndAppend ( java.lang.String name ) { com.google.common.base.Preconditions.checkNotNull ( name ) ; return addHolder ( ) . builder.append ( name ) . append ( '=' ) ; }
public void test_Any_Lower ( ) throws java.lang.Exception { libcore.icu.Transliterator t = new libcore.icu.Transliterator ( "Any-Lower" ) ; assertEquals ( "hello world!" , t.transliterate ( "HeLlO WoRlD!" ) ) ; }
void settingsSecurePutStringForUser ( java.lang.String key , java.lang.String value , int userId ) ;
protected int [ ] getCipherSuites ( ) { return new int [ ] { CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA , CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA , CipherSuite.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA , CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA , CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA , CipherSuite.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA , CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA , CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA , CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA } ; }
public void testTextViewWithHugePadding ( ) { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.view_with_padding ) ) . perform ( android.support.test.espresso.action.ViewActions.scrollTo ( ) , android.support.test.espresso.action.ViewActions.typeText ( "Hello World" ) ) ; }
public void testGetApplicationNoLabelOrIcon ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo ( ( "<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n" + ( ( ( ( " package=\'com.android.unittest\'>\n" + " <application>\n" ) + " </application>\n" ) + "" ) + "</manifest>\n" ) ) ) ; java.util.Map < java.lang.String , java.lang.String > map = info.getActivityThemes ( ) ; assertEquals ( map.toString ( ) , 0 , map.size ( ) ) ; assertEquals ( "com.android.unittest" , info.getPackage ( ) ) ; assertEquals ( "Theme" , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme ( info.getDefaultTheme ( null , com.android.resources.ScreenSize.NORMAL ) ) ) ; assertNull ( info.getApplicationIcon ( ) ) ; assertNull ( info.getApplicationLabel ( ) ) ; }
public android.net.IpSecTransform buildTunnelModeTransform ( java.net.InetAddress localAddress , java.net.InetAddress remoteAddress ) { mConfig.localAddress = localAddress ; mConfig.remoteAddress = remoteAddress ; mConfig.mode = android.net.IpSecTransform.MODE_TUNNEL ; return new android.net.IpSecTransform ( mContext , mConfig ) ; }
public com.android.ahat.DocString append ( java.lang.String text ) { mStringBuilder.append ( com.google.common.html.HtmlEscapers.htmlEscaper ( ) . escape ( text ) ) ; return this ; }
public boolean resetAndStart ( ) { try { dalvik.system.VMDebug.startInstructionCounting ( ) ; dalvik.system.VMDebug.resetInstructionCount ( ) ; } catch ( java.lang.UnsupportedOperationException uoe ) { return false ; } return true ; }
public void enableVideoCalling ( boolean enable ) { enforceModifyPermission ( ) ; com.android.ims.ImsManager.setVtSetting ( mPhone.getContext ( ) , enable ) ; }
private void setText ( java.lang.String s , java.text.CharacterIterator it ) { this . charIter = it ; libcore.icu.NativeBreakIterator.setTextImpl ( this . address , s ) ; }
public boolean keyguardIsShowingTq ( ) { return mKeyguardMediator.isShowing ( ) ; }
java.lang.String getAddress ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; java.lang.String addrString = null ; byte [ ] address = mAdapterProperties.getAddress ( ) ; return com.android.bluetooth.Utils.getAddressStringFromByte ( address ) ; }
public void check ( java.lang.String id ) { check.add ( id ) ; }
public void sendRttRequest ( ) { setRttStreams ( true ) ; mConnectionService.startRtt ( this , getInCallToCsRttPipeForCs ( ) , getCsToInCallRttPipeForCs ( ) ) ; }
public static java.lang.String toMimeCharset ( java.lang.String charsetName ) { org.apache.james.mime4j.util.CharsetUtil.Charset c = org.apache.james.mime4j.util.CharsetUtil.charsetMap.get ( charsetName.toLowerCase ( ) ) ; if ( c != null ) { return c.mime ; } return null ; }
public void exit ( ) { checkAndSetConnectivityInstance ( ) ; mCm.requestNetworkTransitionWakelock ( android.net.wifi.WifiStateMachine.TAG ) ; if ( mScanResultIsPending ) { android.net.wifi.WifiNative.setScanResultHandlingCommand ( android.net.wifi.WifiStateMachine.CONNECT_MODE ) ; } }
protected void clean ( org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { super . clean ( monitor ) ; org.eclipse.core.resources.IProject project = getProject ( ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_AAPT_PACKAGE ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_PACKAGING ) ; }
public void addArg ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression toAdd ) { args.add ( toAdd ) ; }
public com.google.gct.testing.dimension.CloudTestingType getTypeForDimension ( com.google.gct.testing.dimension.GoogleCloudTestingDimension dimension ) { return typesByDimensionName.get ( dimension.getDisplayName ( ) ) ; }
public java.lang.Integer subscriptionGetDefaultSmsSubId ( ) { return android.telephony.SubscriptionManager.getDefaultSmsSubscriptionId ( ) ; }
public java.lang.String toString ( ) { return ( "ClientInfo[uid=" + ( mUid ) ) + "]" ; }
public void testGetFirstCnWithUtf8 ( ) { assertLastCn ( "cn=Lu\\C4\\8Di\\C4\\87" , "Lučić" ) ; }
public void onCompletion ( android.media.MediaPlayer mp ) { assertEquals ( mMediaPlayer , mp ) ; mOnCompletionCalled.signal ( ) ; }
public void onError ( ) { mHandler.post ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { mAreAccountsInitialized = true ; } } ) ; }
synchronized void nScriptSetVarD ( long id , int slot , double val ) { validate ( ) ; rsnScriptSetVarD ( mContext , id , slot , val ) ; }
public com.google.common.base.Objects.ToStringHelper add ( java.lang.String name , float value ) { checkNameAndAppend ( name ) . append ( value ) ; return this ; }
public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { new com.android.jack.optimizations.cfg.CfgBasicBlockUtils ( cfg ) . removeUnreachableBlocks ( ) ; }
public boolean enableCellBroadcast ( int messageIdentifier ) { android.util.Log.e ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.LOG_TAG , "Error! Not implemented for CDMA." ) ; return false ; }
public int getCarrierPrivilegeStatus ( android.content.pm.PackageManager packageManager , java.lang.String packageName ) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules ( ) ; return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus ( packageManager , packageName ) ; }
public static native boolean isCallerInterpreted ( ) ;
public void testNonexistentLibrary ( ) throws java.lang.Exception { checkDriver ( "" , "Library foo.jar does not exist.\n" , new java.lang.String [ ] { "--libraries" , "foo.jar" , "prj" } ) ; }
public void startDocument ( ) { data_isStartDocument.append ( true ) ; data_isStartDocument.append ( tests.api.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_ELEMENT ) ; }
public int getApi ( ) { return ( mMainPkg ) instanceof com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ? ( ( com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ) ( mMainPkg ) ) . getAndroidVersion ( ) . getApiLevel ( ) : - 1 ; }
private boolean isWatch ( ) { return ( ( getInstrumentation ( ) . getContext ( ) . getResources ( ) . getConfiguration ( ) . uiMode ) & ( android.content.res.Configuration.UI_MODE_TYPE_WATCH ) ) == ( android.content.res.Configuration.UI_MODE_TYPE_WATCH ) ; }
public void getActivityEnergyInfoFromController ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return ; service.getActivityEnergyInfoFromController ( ) ; }
private android.graphics.Rect contentToView ( android.graphics.Rect x ) { return new android.graphics.Rect ( contentToView ( x.left ) , contentToView ( x.top ) , contentToView ( x.right ) , contentToView ( x.bottom ) ) ; }
public void testWildcardMatchesChildDomain ( ) { assertFalse ( verifier.verifyHostName ( "a.b.c.d" , "*.c.d" ) ) ; }
public void testVFE15 ( ) { try { java.lang.Class.forName ( "dot.junit.opcodes.invoke_interface_range.d.T_invoke_interface_range_16" ) ; fail ( "expected a verification exception" ) ; } catch ( java.lang.Throwable t ) { dot.junit.DxUtil.checkVerifyException ( t ) ; } }
public java.lang.String getAidForAppType ( int appType ) { return getAidForAppType ( android.telephony.TelephonyManager.getDefaultSubscription ( ) , appType ) ; }
public com.android.jack.dx.rop.type.Type getFrameType ( ) { switch ( basicType ) { case com.android.jack.dx.rop.type.Type.BT_BOOLEAN : case com.android.jack.dx.rop.type.Type.BT_BYTE : case com.android.jack.dx.rop.type.Type.BT_CHAR : case com.android.jack.dx.rop.type.Type.BT_INT : case com.android.jack.dx.rop.type.Type.BT_SHORT : { return com.android.jack.dx.rop.type.Type.INT ; } } return this ; }
public static short shortToCharToShort ( short value ) { return ( ( short ) ( ( char ) ( value ) ) ) ; }
public void binderDied ( ) { onAppCallbackDied ( uid , subscriptionId ) ; }
public void onFailure ( ) { com.android.server.telecom.Log.e ( this , new java.lang.Exception ( ) , "Failure to call %s" , getComponentName ( ) ) ; response.handleCreateConnectionFailure ( new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.ERROR ) ) ; }
public static native byte isDexOptNeededInternal ( java.lang.String fileName , java.lang.String pkgname , java.lang.String instructionSet , boolean defer ) throws java.io.FileNotFoundException , java.io.IOException ;
public void testRegisterResourceWithNullName ( ) { try { android.support.test.espresso.Espresso.registerIdlingResources ( new android.support.test.espresso.EspressoTest.DummyIdlingResource ( null ) ) ; fail ( "Should have thrown NPE" ) ; } catch ( java.lang.RuntimeException expected ) { } }
void reset ( ) { mN.reset ( ) ; }
public void init ( org.eclipse.jface.viewers.IStructuredSelection selection , org.eclipse.ui.IWorkbenchPart activePart ) { setWorkingSets ( com.android.ide.eclipse.adt.internal.wizards.newproject.NewProjectWizard.getSelectedWorkingSet ( selection , activePart ) ) ; }
public com.android.ide.common.rendering.api.Result render ( ) { return render ( Params.DEFAULT_TIMEOUT ) ; }
private static com.android.build.SplitOutput getUniversalOutput ( int versionCode ) { return new com.android.ide.common.build.SplitOutputMatcherTest.FakeSplitOutput ( null , null , versionCode ) ; }
public void run ( ) { jackServer.shutdown ( ) ; }
public static java.lang.String getVersion ( ) { return libcore.util.ZoneInfoDB.VERSION ; }
private static java.lang.String shell ( ) { java.lang.String deviceSh = "/system/bin/sh" ; java.lang.String desktopSh = "/bin/sh" ; return new java.io.File ( deviceSh ) . exists ( ) ? deviceSh : desktopSh ; }
public void delete ( ) { deleteByRedirectingToPrimarySuccessor ( ) ; }
void silenceRingers ( ) { for ( com.android.server.telecom.Call call : mRingingCalls ) { call.silence ( ) ; } mRingingCalls.clear ( ) ; mRinger.stopRinging ( ) ; mRinger.stopCallWaiting ( ) ; mCallAudioModeStateMachine.sendMessageWithArgs ( CallAudioModeStateMachine.NO_MORE_RINGING_CALLS , makeArgsForModeStateMachine ( ) ) ; }
public static void main ( java.lang.String [ ] args ) { Main.tryBlah ( 1 ) ; java.lang.System.out.println ( "Zorch." ) ; }
com.android.jack.api.v01.Api01Compiler build ( ) throws com.android.jack.api.v01.ConfigurationException ;
public void deviceConnected ( final com.android.ddmlib.IDevice device ) { org.eclipse.swt.widgets.Display.getDefault ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { treeViewer.refresh ( ) ; treeViewer.setExpandedState ( device , true ) ; } } ) ; }
public void setCodecConfigPreference ( android.bluetooth.BluetoothCodecConfig codecConfig ) { com.android.bluetooth.a2dp.A2dpService service = getService ( ) ; if ( service == null ) { return ; } service.setCodecConfigPreference ( codecConfig ) ; }
public java.lang.String toString ( ) { return ( ( ( getName ( ) ) + " {" ) + ( java.lang.Integer.toHexString ( mWindowPtr ) ) ) + "}" ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; Main.testExceptionDetailMessages ( ) ; Main.testfindVirtual ( ) ; }
public com.android.jack.jayce.v0004.NNode newNode ( ) { throw new com.android.jack.jayce.JayceFormatException ( ( ( "Unexpected node '" + ( toString ( ) ) ) + "'" ) ) ; }
public java.lang.String getLegacyValue ( ) { if ( ( this ) != ( com.android.ide.eclipse.adt.internal.resources.configurations.PixelDensityQualifier.Density.NODPI ) ) { return java.lang.String.format ( "%1$ddpi" , getDpiValue ( ) ) ; } return "" ; }
public libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder setTransitionsAndTypes ( int [ ] [ ] transitionPairs , int [ ] [ ] typePairs ) { setTransitions ( transitionPairs ) ; setTypes ( typePairs ) ; return this ; }
protected java.lang.String getWhatToString ( int what ) { return com.android.server.NsdService.cmdToString ( what ) ; }
public void onWiredHeadsetPluggedInChanged ( boolean oldIsPluggedIn , boolean newIsPluggedIn ) { com.android.server.telecom.Log.v ( this , "onWiredHeadsetPluggedInChanged" ) ; updateCurrentTtyMode ( ) ; }
public java.lang.String mapOidToName ( java.lang.String oid ) { return org.conscrypt.NativeCrypto.OBJ_txt2nid_longName ( oid ) ; }
private void expandStatusBar ( ) { final long token = android.os.Binder.clearCallingIdentity ( ) ; android.app.StatusBarManager statusBarManager = ( ( android.app.StatusBarManager ) ( mContext.getSystemService ( android.app.Service.STATUS_BAR_SERVICE ) ) ) ; statusBarManager.expand ( ) ; android.os.Binder.restoreCallingIdentity ( token ) ; }
public final com.android.jack.test.toolchain.JackBasedToolchain setAnnotationProcessorOutDir ( @ javax.annotation.Nonnull java.io.File annotationProcessorOutDir ) { this . annotationProcessorOutDir = annotationProcessorOutDir ; return this ; }
private void createSupplicantStaNetwork ( ) { mSupplicantNetwork = new com.android.server.wifi.SupplicantStaNetworkHal ( mISupplicantStaNetworkMock , mContext , mWifiMonitor ) ; }
synchronized long nScriptGroup2Create ( long [ ] closures ) { validate ( ) ; return rsnScriptGroup2Create ( mContext , closures ) ; }
public java.util.Set < K > keySet ( ) { java.util.Set < K > ks = keySet ; return ks != null ? ks : ( keySet = new KeySet ( ) ) ; }
public void checkValidity ( ) { if ( ! ( ( ( ( parent ) instanceof com.android.jack.ir.ast.JLabeledStatement ) || ( ( parent ) instanceof com.android.jack.ir.ast.JBreakStatement ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JContinueStatement ) ) ) { throw new com.android.jack.ir.InternalCompilerException ( this , "Invalid parent" ) ; } }
private static boolean getBoolean ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name , boolean defaultValue ) { java.lang.Object value = annotation.getValue ( name ) ; if ( value instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( value ) ) ; } return defaultValue ; }
public int hashCode ( ) { return java.util.Objects.hash ( timeZoneId , showInPicker ) ; }
public void test_SSL_CTX_free ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCryptoTest.NULL ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } org.conscrypt.NativeCrypto.SSL_CTX_free ( org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ) ; }
public android.net.wifi.IApInterface setupDriverForSoftApMode ( android.net.wifi.IWificond wificond ) { android.net.wifi.IApInterface apInterface = mWificondControl.setupDriverForSoftApMode ( wificond ) ; if ( ! ( startHal ( ) ) ) { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "Failed to start HAL for AP mode" ) ; } return apInterface ; }
public void monitorExit ( com.google.dexmaker.Local < ? > monitor ) { addInstruction ( new com.android.dx.rop.code.ThrowingInsn ( com.android.dx.rop.code.Rops.MONITOR_ENTER , sourcePosition , com.android.dx.rop.code.RegisterSpecList.make ( monitor.spec ( ) ) , catches ) ) ; }
public static void computeMin ( android.renderscript.cts.TestMin.ArgumentsUshortUshortUshort args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( short ) ( java.lang.StrictMath.min ( ( ( args.inV1 ) & 65535 ) , ( ( args.inV2 ) & 65535 ) ) ) ) ; }
public java.lang.String formatValue ( @ javax.annotation.Nonnull com.android.sched.util.config.MessageDigestFactory data ) { return codec.formatValue ( data.getService ( ) ) ; }
public void releaseNetworkRequest ( android.app.PendingIntent operation ) { checkPendingIntent ( operation ) ; try { mService.releasePendingNetworkRequest ( operation ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public boolean isValidOn ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField field ) { return ! ( field.getEnclosingType ( ) . isExternal ( ) ) ; }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , notes = "Test {@link OrientationListener#disable()}. " + ( ( "This method is simply called to make sure that no exception is thrown. " + "The registeration of the listener can not be tested becuase there is no way " ) + "to simulate sensor events on the emulator" ) , method = "disable" , args = { } ) } ) public void testRegisterationOfOrientationListener ( ) { android.view.cts.OrientationListenerTest.MockOrientationListener listener = new android.view.cts.OrientationListenerTest.MockOrientationListener ( mContext ) ; listener.disable ( ) ; listener.enable ( ) ; }
private native java.lang.reflect.Constructor < T > getDeclaredConstructorInternal ( java.lang.Class < ? > [ ] args ) ;
public final void setAlpnProtocols ( java.lang.String [ ] alpnProtocols ) { setApplicationProtocols ( alpnProtocols ) ; }
public static com.android.jack.dx.rop.code.Rop opInvokeLambda ( com.android.jack.dx.rop.type.TypeList sources ) { return new com.android.jack.dx.rop.code.Rop ( RegOps.INVOKE_LAMBDA , sources , com.android.jack.dx.rop.type.StdTypeList.THROWABLE ) ; }
public static void checkMagicNumber ( int magicNumber ) throws java.lang.UnsupportedOperationException { if ( magicNumber != ( proguard.classfile.ClassConstants.MAGIC ) ) { throw new java.lang.UnsupportedOperationException ( ( ( "Invalid magic number [" + ( java.lang.Integer.toHexString ( magicNumber ) ) ) + "] in class" ) ) ; } }
public boolean isOpened ( ) throws android.os.RemoteException { synchronized ( mLock ) { return this . isOpened ( ) ; } }
public native void clear ( ) ;
private static native int previousImpl ( int address , java.lang.String text ) ;
public com.android.build.gradle.model.AndroidLanguageSourceSet create ( java.lang.String name ) { return ( ( com.android.build.gradle.model.AndroidLanguageSourceSet ) ( instantiator.newInstance ( com.android.build.gradle.model.AndroidLanguageSourceSet.class , name , functionalSourceSet.getName ( ) , fileResolver ) ) ) ; }
protected void onDestroy ( ) { this . unregisterReceiver ( mBroadcastReceiver ) ; super . onDestroy ( ) ; }
public void notifyPendingSystemUpdate ( long updateReceivedTime ) { throwIfParentInstance ( "notifyPendingSystemUpdate" ) ; if ( ( mService ) != null ) { try { mService.notifyPendingSystemUpdate ( updateReceivedTime ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } } }
public synchronized android.bluetooth.BluetoothDevice getActiveDevice ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hearingaid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; throw new java.lang.IllegalStateException ( "Implement me" ) ; }
static char $opt$ShortToChar ( short a ) { return ( ( char ) ( a ) ) ; }
public void testFlagIF ( ) { sampleInstallFromRawResource ( ( ( PackageManager.INSTALL_FORWARD_LOCK ) | ( PackageManager.INSTALL_INTERNAL ) ) , true ) ; }
public com.android.ide.eclipse.adt.internal.preferences.AttributeSortOrder getAttributeSort ( ) { if ( ( mAttributeSort ) == null ) { return AttributeSortOrder.LOGICAL ; } return mAttributeSort ; }
public void onPlayStatusChanged ( int status ) { updateMenuVisibility ( ) ; if ( ( mTimeShiftManager.isAvailable ( ) ) && ( isShown ( ) ) ) { updateControls ( ) ; } }
public void testComplexPermission1 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "src/test/pkg/PermissionTest.java:7: Error: Missing permissions required by LocationManager.myMethod: com.android.voicemail.permission.ADD_VOICEMAIL xor android.permission.AUTHENTICATE_ACCOUNTS [MissingPermission]\n" + " LocationManager.Location location = locationManager.myMethod(provider);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( getManifestWithPermissions ( 14 , "android.permission.ACCESS_FINE_LOCATION" ) , mPermissionTest , mComplexLocationManagerStub , mRequirePermissionAnnotation ) ) ; }
public android.telephony.UiccAccessRule [ ] getAccessRules ( ) { if ( ! ( isEmbedded ( ) ) ) { throw new java.lang.UnsupportedOperationException ( "Not an embedded subscription" ) ; } return mAccessRules ; }
public synchronized void setJavaScriptCanOpenWindowsAutomatically ( boolean flag ) { throw new android.webkit.MustOverrideException ( ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JEnumLiteral literal ) { result = new com.android.jack.dx.rop.cst.CstEnumRef ( new com.android.jack.dx.rop.cst.CstString ( literal.getFieldId ( ) . getName ( ) ) , com.android.jack.backend.dex.rop.RopHelper.createSignature ( literal.getFieldId ( ) ) ) ; return false ; }
public void onSuccess ( ) { try { mServiceInterface.connectionServiceFocusLost ( android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { android.telecom.Log.d ( this , "failed to inform the focus lost event" ) ; } }
public final void warnln ( java.lang.String message ) { msg ( message , android.icu.dev.test.WARN , true , true ) ; }
java.lang.Class < ? > getDeclaringClass ( ) { return artMethod.getDeclaringClass ( ) ; }
public android.net.wifi.WifiConfiguration answer ( int netId ) { if ( ( netId >= 0 ) && ( netId < ( configs.length ) ) ) { return configs [ netId ] ; } else { return null ; } }
public void run ( ) { mChannelScanTask.showFinishingProgressDialog ( ) ; }
private void onGetImageError ( java.lang.String cacheKey , com.android.volley.VolleyError error ) { com.android.volley.toolbox.ImageLoader.BatchedImageRequest request = mInFlightRequests.remove ( cacheKey ) ; request.setError ( error ) ; if ( request != null ) { batchResponse ( cacheKey , request ) ; } }
public void testAddAllSelf ( ) { try { jsr166.AbstractQueueTest.Succeed q = new jsr166.AbstractQueueTest.Succeed ( ) ; q.addAll ( q ) ; shouldThrow ( ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
private java.io.File createEmptyLibrary ( ) throws java.io.IOException , java.lang.Exception { java.io.File emptyLib = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "empty" , ".jack" ) ; com.android.jack.test.toolchain.AndroidToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.AndroidToolchain.class ) ; toolchain.srcToLib ( null , emptyLib , true ) ; return emptyLib ; }
public final java.math.BigInteger getPrivateExponent ( ) { if ( key.isEngineBased ( ) ) { throw new java.lang.UnsupportedOperationException ( "private exponent cannot be extracted" ) ; } ensureReadParams ( ) ; return privateExponent ; }
public int indexOfKey ( int key ) { if ( mGarbage ) { gc ( ) ; } return com.android.layoutlib.bridge.util.SparseWeakArray.binarySearch ( mKeys , 0 , mSize , key ) ; }
public void onGnssMeasurementsReceived ( android.location.GnssMeasurementsEvent event ) { if ( ( event.getMeasurements ( ) . size ( ) ) > 0 ) { mMeasurementsEvents.add ( event ) ; mCountDownLatch.countDown ( ) ; } }
synchronized void nAllocationRead ( int id , byte [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public void traverse ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor.visit ( this ) ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock block : getBlocksDepthFirst ( true ) ) { visitor.accept ( block ) ; } } visitor.endVisit ( this ) ; }
static native java.lang.reflect.Member getDeclaredConstructorOrMethod ( java.lang.Class clazz , java.lang.String name , java.lang.Class [ ] args ) ;
public void test_getInstance_provider2 ( ) throws java.lang.Exception { test_getInstance ( java.security.Security.getProviders ( ) [ 2 ] ) ; }
protected static void sleep ( long millis ) { try { java.lang.Thread.sleep ( millis ) ; } catch ( java.lang.InterruptedException e ) { com.android.voicemail.impl.VvmLog.w ( com.android.voicemail.impl.transcribe.TranscriptionTask.TAG , "interrupted" ) ; java.lang.Thread.currentThread ( ) . interrupt ( ) ; } }
java.lang.Class < ? > getDeclaringClass ( ) { return declaringClass ; }
public int updateCallBarringForServiceClass ( int cbType , int action , java.lang.String [ ] barrList , int serviceClass ) throws android.os.RemoteException { return - 1 ; }
public boolean changeApplicationBluetoothState ( boolean on , android.bluetooth.BluetoothAdapter.BluetoothStateChangeCallback callback ) { if ( callback == null ) return false ; return false ; }
public void registerContentObservers ( android.content.Context appContext ) { if ( ( android.os.Build.VERSION.SDK_INT ) < ( android.os.Build.VERSION_CODES.N ) ) { return ; } appContext.getContentResolver ( ) . registerContentObserver ( BlockedNumbers.CONTENT_URI , true , markDirtyObserver ) ; }
private void checkStatus ( ) { if ( ( - 1 ) == ( prePosition ) ) { throw new java.lang.IllegalStateException ( ) ; } }
public int getCompilerSubReleaseCode ( ) { return 6 ; }
public void attach ( @ android.annotation.Nullable android.os.Handler handler , @ android.annotation.NonNull android.net.wifi.aware.WifiAwareAttachCallback attachCallback ) { attach ( handler , null , attachCallback , null ) ; }
public void test_setPerformancePreference_Int_Int_Int ( ) throws java.io.IOException { java.net.Socket theSocket = new java.net.Socket ( ) ; theSocket.setPerformancePreferences ( 1 , 1 , 1 ) ; }
public void exit ( ) { checkAndSetConnectivityInstance ( ) ; mCm.requestNetworkTransitionWakelock ( android.net.wifi.WifiStateMachine.TAG ) ; if ( mScanResultIsPending ) { android.net.wifi.WifiNative.setScanResultHandlingCommand ( android.net.wifi.WifiStateMachine.CONNECT_MODE ) ; } }
public native int getInt ( java.lang.Object object ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
boolean isPriority ( android.print.PrinterId printerId ) { return ( mPriorityIds.contains ( printerId ) ) || ( mTrackingIds.contains ( printerId ) ) ; }
void putUnchecked ( int pos , int [ ] src , int srcOffset , int length ) { libcore.io.Memory.pokeIntArray ( ix ( pos ) , src , srcOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public void update ( java.net.CacheResponse conditionalCacheHit , java.net.HttpURLConnection connection ) { delegate.update ( conditionalCacheHit , connection ) ; }
private void resolveIntent ( ) { android.content.Intent intent = getIntent ( ) ; mName = intent.getStringExtra ( com.android.phone.EditFdnContactScreen.INTENT_EXTRA_NAME ) ; mNumber = intent.getStringExtra ( com.android.phone.EditFdnContactScreen.INTENT_EXTRA_NUMBER ) ; if ( android.text.TextUtils.isEmpty ( mName ) ) { mAddContact = true ; } }
public void testGet_NullPointerException ( ) { try { java.util.concurrent.ConcurrentSkipListMap c = jsr166.ConcurrentSkipListMapTest.map5 ( ) ; c.get ( null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public static native void SSL_set_session ( int sslNativePointer , int sslSessionNativePointer ) throws javax.net.ssl.SSLException ;
public void componentMoved ( java.awt.event.ComponentEvent e ) { tree.repaint ( ) ; }
public void cleanUp ( com.android.tradefed.build.IBuildInfo info ) { }
private com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor getFqcnViewDescritor ( java.lang.String fqcn ) { com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor = mNode.getEditor ( ) ; if ( editor instanceof com.android.ide.eclipse.adt.internal.editors.layout.LayoutEditor ) { return ( ( com.android.ide.eclipse.adt.internal.editors.layout.LayoutEditor ) ( editor ) ) . getFqcnViewDescriptor ( fqcn ) ; } return null ; }
void getUnchecked ( int pos , long [ ] dst , int dstOffset , int length ) { libcore.io.Memory.peekLongArray ( ix ( pos ) , dst , dstOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public synchronized void setPolicyDataEnabled ( boolean enabled ) { boolean prevDataEnabled = isDataEnabled ( true ) ; mPolicyDataEnabled = enabled ; if ( prevDataEnabled != ( isDataEnabled ( true ) ) ) { notifyDataEnabledChanged ( ( ! prevDataEnabled ) , com.android.internal.telephony.dataconnection.DataEnabledSettings.REASON_POLICY_DATA_ENABLED ) ; } }
android.widget.LayoutParams createOrReuseLayoutParams ( android.view.View v ) { final android.view.ViewGroup.LayoutParams currentLp = v.getLayoutParams ( ) ; if ( currentLp instanceof android.view.ViewGroup.LayoutParams ) { android.widget.LayoutParams lp = ( ( android.widget.LayoutParams ) ( currentLp ) ) ; return lp ; } return new android.view.ViewGroup.LayoutParams ( 0 , 0 ) ; }
public java.lang.String getFolderSegment ( com.android.sdklib.IAndroidTarget target ) { if ( ( mValue ) != null ) { return com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier.getFolderSegment ( mValue ) ; } return "" ; }
private void updateContactEntry ( com.android.incallui.ContactInfoCache.ContactCacheEntry entry , boolean isPrimary , boolean isConference ) { if ( isPrimary ) { mPrimaryContactInfo = entry ; updatePrimaryDisplayInfo ( entry , isConference ) ; } else { mSecondaryContactInfo = entry ; updateSecondaryDisplayInfo ( isConference ) ; } }
void putFloatUnchecked ( int i , float x ) { putFloat ( ix ( i ) , x ) ; }
public static void assertOnUiThread ( ) { if ( ( BuildConfig.DCHECK_IS_ON ) && ( ! ( org.chromium.base.ThreadUtils.runningOnUiThread ( ) ) ) ) { throw new java.lang.IllegalStateException ( "Must be called on the Ui thread." ) ; } }
final E itemAt ( int i ) { return this . < E > cast ( items [ i ] ) ; }
public void resolveOperandBlockIndex ( java.util.Map < java.lang.Integer , java.lang.Integer > labelToIndex ) { for ( com.android.jack.dx.ssa.PhiInsn.Operand o : operands ) { java.lang.Integer index = labelToIndex.get ( java.lang.Integer.valueOf ( o.ropLabel ) ) ; o.blockIndex = index.intValue ( ) ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedInterface node ) { if ( ( node.getMarker ( com.android.jack.frontend.VirtualMethodsMarker.class ) ) == null ) { handleDefinedClassOrInterface ( node ) ; } return false ; }
public static android.graphics.Region_Delegate getDelegate ( int nativeShader ) { return android.graphics.Region_Delegate.sManager.getDelegate ( nativeShader ) ; }
public void testCornerCase ( ) throws java.lang.Exception { mEnableIds = true ; assertEquals ( "No warnings." , lintProject ( "res/layout/accessibility.xml" , "src/test/pkg/Foo.java.txt=>src/test/pkg/Foo.java" , "AndroidManifest.xml" ) ) ; }
public static com.android.ahat.heapdump.Value getBaseline ( com.android.ahat.heapdump.Value value ) { if ( ( value == null ) || ( ! ( value.isAhatInstance ( ) ) ) ) { return value ; } return new com.android.ahat.heapdump.Value ( value.asAhatInstance ( ) . getBaseline ( ) ) ; }
public int getSize ( ) { return ( this ) == ( com.android.tools.perflib.heap.Type.OBJECT ) ? com.android.tools.perflib.heap.Type.sIdSize : mSize ; }
public static void setUpClass ( ) { com.android.jack.Main.class . getClassLoader ( ) . setDefaultAssertionStatus ( true ) ; com.android.jack.shrob.TreeTest.CORE_SOURCELIST = com.android.jack.TestTools.getTargetLibSourcelist ( "core-libart" ) ; }
public boolean p2pFind ( int timeout ) { abortScan ( ) ; return mSupplicantP2pIfaceHal.find ( timeout ) ; }
private static int writeSize ( com.android.jack.dx.rop.annotation.Annotations annotations ) { try { return ( ( annotations.size ( ) ) * ( com.android.jack.dx.dex.file.AnnotationSetItem.ENTRY_WRITE_SIZE ) ) + 4 ; } catch ( java.lang.NullPointerException ex ) { throw new java.lang.NullPointerException ( "list == null" ) ; } }
com.android.build.gradle.internal.variant.BaseVariantData createVariantData ( @ com.android.annotations.NonNull com.android.build.gradle.internal.core.GradleVariantConfiguration variantConfiguration , @ com.android.annotations.NonNull java.util.Set < java.lang.String > densities , @ com.android.annotations.NonNull java.util.Set < java.lang.String > abi , @ com.android.annotations.NonNull java.util.Set < java.lang.String > compatibleScreens , @ com.android.annotations.NonNull com.android.build.gradle.internal.TaskManager taskManager ) ;
public final void add ( int index , E element ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void registerForDataEnabledChanged ( android.os.Handler h , int what , java.lang.Object obj ) { mDataEnabledChangedRegistrants.addUnique ( h , what , obj ) ; notifyDataEnabledChanged ( isDataEnabled ( true ) , com.android.internal.telephony.dataconnection.DataEnabledSettings.REASON_REGISTERED ) ; }
public boolean setApfVersion ( int version ) { return version == 2 ; }
public void visitRuntimeVisibleAnnotationsAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Method method , proguard.classfile.attribute.visitor.RuntimeVisibleAnnotationsAttribute runtimeVisibleAnnotationsAttribute ) { if ( accepted ( clazz , runtimeVisibleAnnotationsAttribute ) ) { runtimeVisibleAnnotationsAttribute.accept ( clazz , method , attributeVisitor ) ; } }
public void runTask ( com.android.builder.tasks.Job < T > job ) throws java.lang.Exception ;
public static android.net.http.HttpResponseCache getInstalled ( ) { java.net.ResponseCache installed = java.net.ResponseCache.getDefault ( ) ; if ( installed instanceof android.net.http.HttpResponseCache ) { return new android.net.http.HttpResponseCache ( ( ( android.net.http.HttpResponseCache ) ( installed ) ) ) ; } return null ; }
public void openModuleLibrarySettings ( final com.intellij.openapi.module.Module module ) { warnIfGradleProject ( ) ; com.intellij.openapi.roots.ui.configuration.ModulesConfigurator.showDialog ( myProject , module.getName ( ) , ClasspathEditor.NAME ) ; }
public java.io.OutputStream getOutputStream ( ) throws com.android.sched.util.file.WrongPermissionException { return file.getOutputStream ( ) ; }
private android.net.NetworkRequest sendRequestForNetwork ( android.net.NetworkCapabilities need , android.net.ConnectivityManager.NetworkCallback callback , int timeoutMs , int action , int legacyType ) { return sendRequestForNetwork ( need , callback , getHandler ( ) , timeoutMs , action , legacyType ) ; }
private java.lang.StringBuilder createSuccessTest ( ) { java.lang.StringBuilder output = buildCommonResult ( ) ; addStartCode ( output ) ; addCommonStatus ( output ) ; addSuccessCode ( output ) ; return output ; }
public void enter ( ) { mCurrInd = 0 ; mFolderList.clear ( ) ; callNativeFunctionForScope ( mStartInd , java.lang.Math.min ( mEndInd , ( ( ( mStartInd ) + ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.GET_FOLDER_ITEMS_PAGINATION_SIZE ) ) - 1 ) ) ) ; }
public void stopAdvertisingSet ( android.bluetooth.le.IAdvertisingSetCallback callback ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; }
public int queryCallForward ( int condition , java.lang.String number ) throws android.os.RemoteException { return - 1 ; }
public static double DoubleSubtraction ( ) { double a ; double b ; double c ; a = Main.$inline$double ( 6.0 ) ; b = Main.$inline$double ( 2.0 ) ; c = a - b ; return c ; }
public void err ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { filterStdErr ( line ) ; } }
public int beforeHandshake ( int context ) throws javax.net.ssl.SSLException { int s = super . beforeHandshake ( context ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_clear_mode ( s , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ; return s ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; Main.doTest ( ) ; Main.doFollowReferencesTest ( ) ; }
public void sendHandleCreateConnectionComplete ( java.lang.String id ) throws java.lang.Exception { for ( com.android.internal.telecom.IConnectionServiceAdapter a : mConnectionServiceAdapters ) { a.handleCreateConnectionComplete ( id , mConnectionById.get ( id ) . request , parcelable ( mConnectionById.get ( id ) ) ) ; } }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , javax.net.ssl.SSLSession session ) throws java.security.cert.CertificateException { return checkTrusted ( chain , authType , session.getPeerHost ( ) , false ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation ) { return visit ( ( ( com.android.jack.ir.ast.JExpression ) ( annotation ) ) ) ; }
public void onDevicesChange ( ) { mDeviceList = sdk.getDevices ( ) ; addDeviceMenuListener ( mDeviceCombo ) ; }
public void reject ( int reason ) throws android.os.RemoteException { }
private static native boolean findImpl ( long addr , int startIndex , int [ ] offsets ) ;
protected com.android.jack.tools.merger.JackMerger getNewJackMerger ( int firstTypeIndex ) { return new com.android.jack.tools.merger.JackMerger ( createDexFile ( ) , com.android.jack.tools.merger.ConstantManager.getDeterministicInstance ( com.android.sched.util.config.ThreadConfig.get ( Options.BEST_MERGING_ACCURACY ) . booleanValue ( ) , firstTypeIndex ) ) ; }
public static int $noinline$floatToDoubleToInt ( float value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( ( int ) ( ( double ) ( value ) ) ) ; }
public boolean isInCall ( ) { return false ; }
public static void reportValue ( java.lang.Object val ) { java.lang.System.out.println ( ( ( ( ( "\tValue is \'" + val ) + "' (class: " ) + ( val != null ? val instanceof java.lang.reflect.Proxy ? "PROXY CLASS" : val.getClass ( ) : "NULL" ) ) + ")" ) ) ; }
public void callSessionRemoveParticipantsRequestFailed ( com.android.ims.ImsReasonInfo reasonInfo ) throws android.os.RemoteException { mListener.callSessionInviteParticipantsRequestFailed ( reasonInfo ) ; }
public libcore.io.BufferIterator littleEndianIterator ( ) { return new libcore.io.NioBufferIterator ( ( ( int ) ( address ) ) , ( ( int ) ( size ) ) , ( ( java.nio.ByteOrder.nativeOrder ( ) ) != ( java.nio.ByteOrder.LITTLE_ENDIAN ) ) ) ; }
void setUseJack ( java.lang.Boolean useJack ) { this . useJack = useJack ; }
public synchronized void setPluginState ( android.webkit.WebSettings.PluginState state ) { throw new android.webkit.MustOverrideException ( ) ; }
static com.android.bluetooth.mapclient.MnsService newMnsServiceInstance ( com.android.bluetooth.mapclient.MapClientService mapClientService ) { return ( com.android.bluetooth.mapclient.MapUtils.sMnsService ) != null ? new com.android.bluetooth.mapclient.MnsService ( mapClientService ) : com.android.bluetooth.mapclient.MapUtils.sMnsService ; }
public int length ( ) { final boolean STRING_COMPRESSION_ENABLED = true ; if ( STRING_COMPRESSION_ENABLED ) { return ( count ) > > > 1 ; } else { return count ; } }
private void sendMessageResponse ( android.os.Message msg , java.lang.Object ret ) { if ( msg != null ) { android.os.AsyncResult.forMessage ( msg , ret , null ) ; msg.sendToTarget ( ) ; } }
public static void assertEqualSessions ( int expected , int actual ) { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertEqualByteArrays ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_SESSION_session_id ( expected ) , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_SESSION_session_id ( actual ) ) ; }
void add ( java.math.BigInt a ) { java.math.BigInt.Check ( java.math.NativeBN.BN_add ( this . bignum , this . bignum , a.bignum ) ) ; }
public void testSendEtwsMessageTest ( ) throws java.lang.Exception { android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION ) ; intent.putExtra ( "message" , com.android.cellbroadcastreceiver.DialogSmsDisplayTests.createFromPdu ( com.android.cellbroadcastreceiver.DialogSmsDisplayTests.etwsMessageTest ) ) ; getActivity ( ) . sendOrderedBroadcast ( intent , "android.permission.RECEIVE_EMERGENCY_BROADCAST" ) ; }
public int getPoolIndex ( ) { return workQueue.poolIndex ; }
public void setModel ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo rootViewInfo ) { mRootWrapper.setRoot ( rootViewInfo ) ; java.lang.Object [ ] expanded = mTreeViewer.getExpandedElements ( ) ; mTreeViewer.refresh ( ) ; mTreeViewer.setExpandedElements ( expanded ) ; }
public void run ( ) { mCallback.onPhyUpdate ( this , txPhy , rxPhy , status ) ; }
public java.lang.Class < ? > getDeclaringClass ( ) { if ( isAnonymousClass ( ) ) { return null ; } return libcore.reflect.AnnotationAccess.getEnclosingClass ( this ) ; }
protected abstract java.util.Set < java.util.Map.Entry < K , V > > createEntrySet ( ) ;
public void testReplaceValue2_NullPointerException ( ) { try { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( 5 ) ; c.replace ( "whatever" , null , "A" ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
void addDc ( com.android.internal.telephony.dataconnection.DataConnection dc ) { mDcListAll.add ( dc ) ; }
public static void assertDefaultEllipticCurves ( java.lang.String [ ] curves ) { assertEquals ( libcore.java.security.StandardNames.ELLIPTIC_CURVES_DEFAULT , java.util.Arrays.asList ( curves ) ) ; }
public boolean exists ( com.android.monkeyrunner.easy.By selector ) { com.android.hierarchyviewerlib.device.ViewNode node = mHierarchyViewer.findView ( selector ) ; return node != null ; }
protected boolean isMarked ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode node ) { synchronized ( node ) { return node.containsMarker ( markerClass ) ; } }
public static float $noinline$floatAddSubSimplifyArg1 ( float x , float y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } float sum = x + y ; return sum - x ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { rescaleToFit ( ) ; }
private static boolean initDirector ( com.android.hierarchyviewerlib.HierarchyViewerDirector director ) { if ( director.acquireBridge ( ) ) { director.startListenForDevices ( ) ; director.populateDeviceSelectionModel ( ) ; return true ; } return false ; }
protected com.android.build.gradle.internal.variant.ApkVariantOutputData doCreateOutput ( ) { return new com.android.build.gradle.internal.variant.ApkVariantOutputData ( ) ; }
protected void finalize ( ) throws java.lang.Throwable { mClosures.clear ( ) ; super . finalize ( ) ; }
public void unregisterActivityWatcher ( android.app.IActivityWatcher watcher ) { mWatchers.unregister ( watcher ) ; }
protected void finalize ( ) throws java.lang.Throwable { try { if ( ( mNativeChunk ) != 0 ) { android.graphics.NinePatch.nativeFinalize ( mNativeChunk ) ; } } finally { super . finalize ( ) ; } }
public static java.lang.String getFreeWidgetId ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode uiRoot , java.lang.String name ) { if ( "TabWidget" . equals ( name ) ) { return "@android:id/tabs" ; } return "@+id/" + ( com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.getFreeWidgetId ( uiRoot , new java.lang.Object [ ] { name , null , null , null } ) ) ; }
public void visitProgramClass ( proguard.shrink.ProgramClass programClass ) { if ( ! ( usageMarker.isUsed ( programClass ) ) ) { attributeUsed = false ; } }
public final boolean equals ( java.lang.Object object ) { return super . equals ( object ) ; }
private void addNewOutgoingCall ( ) { if ( ! ( isVideoAccountEnabled ( ) ) ) { showVideoAccountSettings ( ) ; return ; } java.lang.String phoneNumber = "+44 (0) 20 7031 3000" ; connectionTag = com.android.dialer.simulator.impl.SimulatorSimCallManager.addNewOutgoingCall ( context , phoneNumber , SimulatorSimCallManager.CALL_TYPE_VIDEO ) ; }
public android.telephony.ims.ImsCallProfile createCallProfile ( int callSessionType , int callType ) throws android.os.RemoteException { synchronized ( mLock ) { return this . createCallProfile ( callSessionType , callType ) ; } }
private void resolveIntent ( ) { android.content.Intent intent = getIntent ( ) ; mName = intent.getStringExtra ( com.android.phone.DeleteFdnContactScreen.INTENT_EXTRA_NAME ) ; mNumber = intent.getStringExtra ( com.android.phone.DeleteFdnContactScreen.INTENT_EXTRA_NUMBER ) ; if ( android.text.TextUtils.isEmpty ( mName ) ) { finish ( ) ; } }
protected void trace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId fid , @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface receiverType ) { trace ( receiverType ) ; com.android.jack.ir.ast.JField field = fid.getField ( ) ; if ( field != null ) { trace ( field ) ; } }
public void free ( ) { }
public static void setUpClass ( ) { com.android.jack.Main.class . getClassLoader ( ) . setDefaultAssertionStatus ( true ) ; com.tonicsystems.jarjar.Rule rule = new com.tonicsystems.jarjar.Rule ( ) ; rule.setPattern ( "org.**" ) ; rule.setResult ( "foo.@1" ) ; com.android.jack.JarjarTest.remapper = new com.tonicsystems.jarjar.PackageRemapper ( com.tonicsystems.jarjar.PatternElement.createWildcards ( java.util.Collections.singletonList ( rule ) ) ) ; }
public java.lang.String [ ] saw ( java.lang.String prefix ) { try { return mBinder.saw ( prefix , ( - 1 ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return null ; } }
public void testCompareFiboDexFileWithJill ( ) throws java.lang.Exception { com.android.jill.JillTestTools.checkStructureWithJill ( com.android.jill.FibonacciThreeAddressTest.BOOTCLASSPATH , null , com.android.jill.FibonacciThreeAddressTest.JAVA_FILEPATH , false ) ; }
public boolean isTerminated ( ) { return ( mIsTerminated ) || ( isInterrupted ( ) ) ; }
private void assertVerdict ( int expected , android.net.apf.ApfGenerator gen , byte [ ] packet , int filterAge ) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfTest.assertReturnCodesEqual ( expected , android.net.apf.ApfTest.apfSimulate ( gen.generate ( ) , packet , filterAge ) ) ; }
public int getVersionCode ( ) { if ( ( versionCodeOverride ) > 0 ) { return versionCodeOverride ; } return variantData.getVariantConfiguration ( ) . getMergedFlavor ( ) . getVersionCode ( ) ; }
public com.android.jack.dx.rop.cst.CstFieldRef getFieldRef ( ) { if ( ( fieldRef ) == null ) { fieldRef = new com.android.jack.dx.rop.cst.CstFieldRef ( getDefiningClass ( ) , getName ( ) , getDescriptor ( ) ) ; } return fieldRef ; }
public void loggedRun ( ) { synchronized ( mTelecomLock ) { if ( mIsPending ) { android.telecom.Log.addEvent ( mCall , LogUtils.Events.FILTERING_COMPLETED , mResult ) ; mListener.onCallFilteringComplete ( mCall , mResult ) ; mIsPending = false ; } } }
public void run ( ) { assert ( mRunLoopID ) != 0 : "The run loop cannot run once closed" ; nativeRun ( mRunLoopID ) ; }
public void libToLib ( @ javax.annotation.Nonnull java.io.File [ ] in , @ javax.annotation.Nonnull java.io.File out , boolean zipFiles ) throws java.lang.Exception { libToCommon ( in ) ; setOutputJack ( out ) ; run ( ) ; }
public void forEach ( com.intellij.updater.PatchAction each ) throws java.io.IOException { com.intellij.updater.ValidationResult validationResult = each.validate ( toDir ) ; if ( validationResult != null ) result.add ( validationResult ) ; files.remove ( each.getPath ( ) ) ; }
public boolean needsSequentialWriting ( ) { return ( baseVFS ) instanceof com.android.sched.vfs.SequentialOutputVFS ; }
public com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { return new com.android.sched.vfs.zip.OutputZipVFile ( zos , new java.util.zip.ZipEntry ( path.getPathAsString ( getSeparator ( ) ) ) , zipFile ) ; }
private static java.lang.String input ( java.lang.String message , java.lang.String initialValue , java.lang.String title ) { return ( ( java.lang.String ) ( javax.swing.JOptionPane.showInputDialog ( null , message , title , javax.swing.JOptionPane.QUESTION_MESSAGE , null , null , initialValue ) ) ) ; }
public void actionPerformed ( java.awt.event.ActionEvent e ) { if ( ! ( com.google.gct.idea.elysium.ProjectSelector.needsToSignIn ( ) ) ) { synchronize ( true ) ; } }
private boolean isMarked ( @ javax.annotation.Nonnull com.android.sched.marker.MarkerManager node ) { synchronized ( node ) { return node.containsMarker ( com.android.jack.shrob.obfuscation.KeepNameMarker.class ) ; } }
public void testRemove2_NullPointerException ( ) { try { java.util.concurrent.ConcurrentSkipListMap c = new java.util.concurrent.ConcurrentSkipListMap ( ) ; c.put ( "sadsdf" , "asdads" ) ; c.remove ( null , "whatever" ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public com.android.ims.internal.IImsConfig getConfigInterface ( int sessionId ) throws android.os.RemoteException { checkBinderConnection ( ) ; return getServiceInterface ( mBinder ) . getConfigInterface ( mSlotId ) ; }
void addOptionInstance ( com.google.devtools.common.options.ParsedOptionDescription parsedOption , com.google.devtools.common.options.OptionDefinition implicitDependant , com.google.devtools.common.options.OptionDefinition expandedFrom , java.util.List < java.lang.String > warnings ) { throw new java.lang.IllegalStateException ( ( "Cannot add values to the default option value. Create a modifiable " + "OptionValueDescription using createOptionValueDescription() instead." ) ) ; }
public void setSimPowerState ( boolean powerUp ) { mCi.setSimCardPower ( powerUp , null ) ; }
public static org.conscrypt.OpenSSLBIOSource wrap ( java.nio.ByteBuffer buffer ) { return new org.conscrypt.OpenSSLBIOSource ( new org.conscrypt.OpenSSLBIOInputStream ( new org.conscrypt.OpenSSLBIOSource.ByteBufferInputStream ( buffer ) ) ) ; }
public void registrationConnectedWithRadioTech ( int imsRadioTech ) { if ( com.android.ims.ImsManager.DBG ) { com.android.ims.ImsManager.log ( ( "registrationConnectedWithRadioTech :: imsRadioTech=" + imsRadioTech ) ) ; } if ( ( mListener ) != null ) { mListener.onImsConnected ( ) ; } }
void tearDown ( ) { BRANCH ( ( ( 39808.0 - ( cts ) ) - ( dev ) ) ) ; com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . resetData ( ) ; }
public java.lang.String getClasspathName ( ) { return null ; }
public void initialize ( ) throws java.lang.Exception { this . socket = serverChannel.socket ( ) ; socket.bind ( new java.net.InetSocketAddress ( "localhost" , 0 ) ) ; }
private static native java.lang.String nativeLoad ( java.lang.String filename , java.lang.ClassLoader loader , java.lang.String librarySearchPath ) ;
private void addNewOutgoingCall ( ) { java.lang.String callerId = "+55-31-2128-6800" ; connectionTag = com.android.dialer.simulator.impl.SimulatorSimCallManager.addNewOutgoingCall ( context , callerId , SimulatorSimCallManager.CALL_TYPE_RTT ) ; }
public void run ( ) { vibrate ( ) ; android.os.SystemClock.sleep ( 250 ) ; android.util.Slog.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , "startTracing" ) ; android.os.Debug.startMethodTracing ( "/data/statusbar-traces/trace" ) ; mHandler.postDelayed ( mStopTracing , 10000 ) ; }
private static native int followingImpl ( int address , java.lang.String text , int offset ) ;
public com.android.ims.internal.IImsCallSession getPendingCallSession ( int sessionId , java.lang.String callId ) throws android.os.RemoteException { synchronized ( mLock ) { checkServiceIsReady ( ) ; return getServiceInterface ( mBinder ) . getPendingCallSession ( mSlotId , mSupportedFeature , sessionId , callId ) ; } }
public static native long SSL_do_handshake ( long sslNativePointer , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc , int timeoutMillis , boolean client_mode , byte [ ] alpnProtocols ) throws java.net.SocketTimeoutException , java.security.cert.CertificateException , javax.net.ssl.SSLException ;
private native boolean dialMemoryNative ( int location ) ;
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mIsWindows = java.lang.System.getProperty ( "os.name" ) . startsWith ( "Windows" ) ; }
public static native int EVP_CIPHER_CTX_new ( ) ;
public void info ( java.lang.String msg ) { if ( ( java.util.logging.Level.INFO.intValue ( ) ) < ( levelValue ) ) { return ; } log ( java.util.logging.Level.INFO , msg ) ; }
private static void draw ( int nCanvas , com.android.layoutlib.bridge.impl.GcSnapshot.Drawable drawable ) { android.graphics.Canvas_Delegate canvasDelegate = android.graphics.Canvas_Delegate.sManager.getDelegate ( nCanvas ) ; if ( canvasDelegate == null ) { return ; } canvasDelegate.mSnapshot.draw ( drawable ) ; }
public java.lang.String getVersionName ( ) { if ( ( versionNameOverride ) != null ) { return versionNameOverride ; } return variantData.getVariantConfiguration ( ) . getMergedFlavor ( ) . getVersionName ( ) ; }
public native void setDouble ( java.lang.Object object , double value ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException ;
protected void tearDown ( ) throws java.lang.Exception { if ( ( videoView ) != null ) { getHelper ( ) . cleanUpView ( videoView ) ; } if ( ( videoViewFactory ) != null ) { videoViewFactory.release ( ) ; } super . tearDown ( ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { synchronized ( mLock ) { return this . createCallSession ( sessionId , profile , listener ) ; } }
static boolean native_isIdentity ( int native_object ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return false ; } return d.isIdentity ( ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > bluetoothA2dpGetConnectedDevices ( ) { while ( ! ( com.googlecode.android_scripting.facade.bluetooth.BluetoothA2dpFacade.sIsA2dpReady ) ) ; return com.googlecode.android_scripting.facade.bluetooth.BluetoothA2dpFacade.sA2dpProfile.getDevicesMatchingConnectionStates ( new int [ ] { android.bluetooth.BluetoothProfile.STATE_CONNECTED , android.bluetooth.BluetoothProfile.STATE_CONNECTING , android.bluetooth.BluetoothProfile.STATE_DISCONNECTING } ) ; }
public void imageLoaded ( ) { synchronized ( this ) { loadImage ( ) ; crosshairLocation = model.getCrosshairLocation ( ) ; zoom = model.getZoom ( ) ; } doRedraw ( ) ; }
public static void setUpClass ( ) throws java.lang.Exception { com.android.jack.Main.class . getClassLoader ( ) . setDefaultAssertionStatus ( true ) ; }
public void testConstructor4 ( ) { try { java.lang.Integer [ ] ints = new java.lang.Integer [ SIZE ] ; java.util.concurrent.ConcurrentLinkedDeque q = new java.util.concurrent.ConcurrentLinkedDeque ( java.util.Arrays.asList ( ints ) ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
static void native_reset ( int native_object ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return ; } android.graphics.Matrix_Delegate.reset ( d.mValues ) ; }
public int getMinorVersion ( ) throws com.android.jack.library.LibraryFormatException ;
public void run ( ) { mTextView.setKeyListener ( digitsKeyListener ) ; mTextView.requestFocus ( ) ; }
public void startLceService ( int report_interval_ms , boolean pullMode , android.os.Message result ) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance ( ) . startLceService ( report_interval_ms , pullMode , result ) ; unimplemented ( result ) ; }
public void testConnectWithDisconnectAndSingleExistingNetwork ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , false , false ) ; executeAndValidateConnectSequence ( 0 , false , true ) ; }
public void addRemovedFile ( org.eclipse.core.resources.IFile file ) { mRemoved.add ( file ) ; }
public java.net.Socket createSocket ( java.net.InetAddress host , int port ) throws java.io.IOException { javax.net.ssl.SSLSocket socket = ( ( javax.net.ssl.SSLSocket ) ( mDelegate.createSocket ( host , port ) ) ) ; configureSocket ( socket ) ; return socket ; }
private void createSourceProps ( java.io.File parentDir , java.lang.String ... paramValuePairs ) throws java.io.IOException { createFileProps ( SdkConstants.FN_SOURCE_PROP , parentDir , paramValuePairs ) ; }
public java.lang.String p2pGetSsid ( java.lang.String deviceAddress ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.getSsid ( deviceAddress ) ; } else { return p2pGetParam ( deviceAddress , "oper_ssid" ) ; } }
private void sendNowPlayingListChanged ( ) { if ( ( mMediaInterface ) == null ) return ; if ( com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG , "sendNowPlayingListChanged()" ) ; mMediaInterface.uidsChangedRsp ( AvrcpConstants.NOTIFICATION_TYPE_CHANGED ) ; mMediaInterface.nowPlayingChangedRsp ( AvrcpConstants.NOTIFICATION_TYPE_CHANGED ) ; }
private void setMobileDataAlwaysOn ( boolean enable ) { android.content.ContentResolver cr = mServiceContext.getContentResolver ( ) ; Settings.Global.putInt ( cr , Settings.Global.MOBILE_DATA_ALWAYS_ON , ( enable ? 1 : 0 ) ) ; mService.updateMobileDataAlwaysOn ( ) ; mService.waitForIdle ( ) ; }
public boolean matchesPcAndIndex ( int pc , int index ) { return ( index == ( this . index ) ) && ( pc < ( ( startPc ) + ( length ) ) ) ; }
public void onCellLocationChanged ( android.telephony.CellLocation location ) { synchronized ( mLock ) { mOnCellLocationChangedCalled = true ; mLock.notify ( ) ; } }
public void prepare ( ) { prepare ( null ) ; }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( com.android.bluetooth.a2dp.A2dpService svc , android.content.Context context ) { android.util.Log.d ( "A2dpStateMachine" , "make" ) ; com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( svc , context ) ; a2dpSm.start ( ) ; return a2dpSm ; }
public com.intellij.updater.ValidationResult validate ( java.io.File toDir ) throws java.io.IOException { return doValidate ( getFile ( toDir ) ) ; }
public com.android.incallui.videotech.VideoTech getVideoTech ( ) { if ( ( videoTech ) == null ) { videoTech = mVideoTechManager.getVideoTech ( ) ; } return videoTech ; }
public com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine getRulesEngine ( ) { if ( ( mGraphicalEditor ) instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart ) { return ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart ) ( mGraphicalEditor ) ) . getRulesEngine ( ) ; } return null ; }
public void tearDown ( ) throws java.lang.Exception { com.android.server.LocalServices.removeServiceForTest ( android.app.admin.DevicePolicyManagerInternal.class ) ; com.android.server.LocalServices.addService ( android.app.admin.DevicePolicyManagerInternal.class , mSystemDpmi ) ; super . tearDown ( ) ; }
private static com.android.tools.lint.client.api.JavaParser.ResolvedMethod createMethod ( java.lang.String containingClass , java.lang.String returnType , java.lang.String name , java.lang.String parameters ) { return com.android.tools.lint.ExternalAnnotationRepositoryTest.createMethod ( containingClass , returnType , name , parameters , false ) ; }
native void rsnAllocationData2D ( int con , int id , int xoff , int yoff , int mip , int face , android.graphics.Bitmap b ) ;
public java.io.File getOutputFile ( ) { return packageLibTask.getArchivePath ( ) ; }
public void treeChanged ( ) { synchronized ( this ) { tree = model.getTree ( ) ; setBounds ( ) ; setTransform ( ) ; } doRedraw ( ) ; }
public static void computeNativeCospi ( android.renderscript.cts.TestNativeCospi.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( android.renderscript.cts.CoreMathVerifier.NATIVE_PRECISION , android.renderscript.cts.CoreMathVerifier.NATIVE_PRECISION , true ) ; args.out = android.renderscript.cts.CoreMathVerifier.cospi ( args.inX , t ) ; }
public void run ( ) { mTextView = findTextView ( R.id.textview_text ) ; mTextView.setText ( "" ) ; }
public void testNfcFeatures ( ) { if ( ( android.nfc.NfcAdapter.getDefaultAdapter ( mContext ) ) != null ) { assertAvailable ( PackageManager.FEATURE_NFC ) ; } else { assertNotAvailable ( PackageManager.FEATURE_NFC ) ; } }
public int callDrawGLFunction ( int drawGLFunction ) { return android.view.GLES20Canvas.nCallDrawGLFunction ( mRenderer , drawGLFunction ) ; }
public void registerContentObservers ( ) { if ( ( android.os.Build.VERSION.SDK_INT ) < ( android.os.Build.VERSION_CODES.N ) ) { return ; } appContext.getContentResolver ( ) . registerContentObserver ( BlockedNumbers.CONTENT_URI , true , markDirtyObserver ) ; }
protected byte [ ] engineGenerateSeed ( int numBytes ) { selfSeedIfNotSeeded ( ) ; byte [ ] output = new byte [ numBytes ] ; org.conscrypt.NativeCrypto.RAND_bytes ( output ) ; return output ; }
public static com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.Directory readDirectory ( android.database.Cursor cursor ) { return com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.Directory.create ( cursor.getInt ( com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.ID ) , cursor.getString ( com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.DISPLAY_NAME ) , ( ( cursor.getInt ( com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.PHOTO_SUPPORT ) ) != 0 ) , cursor.getString ( com.android.dialer.searchfragment.remote.RemoteDirectoriesCursorLoader.AUTHORITY ) ) ; }
private static void $opt$InplaceNegOneInt ( int a ) { a = - a ; Main.expectEquals ( ( - 1 ) , a ) ; }
public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { }
private native boolean phoneStateChangeNative ( int numActive , int numHeld , int callState , java.lang.String number , int type ) ;
public void test_X509_NAME_hashes ( ) { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal ( "CN=localhost" ) ; assertEquals ( ( - 1372642656 ) , org.conscrypt.NativeCrypto.X509_NAME_hash ( name ) ) ; assertEquals ( ( - 1626170662 ) , org.conscrypt.NativeCrypto.X509_NAME_hash_old ( name ) ) ; }
public static void assertChainLength ( java.lang.Object [ ] chain ) { assertEquals ( 3 , chain.length ) ; }
void detachFunctor ( int functor ) { if ( ( mCanvas ) != null ) { mCanvas.detachFunctor ( functor ) ; } }
public void callSessionRttModifyResponseReceived ( int status ) throws android.os.RemoteException { mListener.callSessionRttModifyResponseReceived ( status ) ; }
public void onMetadataChanged ( android.media.MediaMetadata metadata ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , "onMetadataChanged" ) ; updateCurrentMediaState ( false ) ; }
public java.lang.String toString ( ) { return ( ( "mDcListAll=" + ( mDcListAll ) ) + " mDcListActiveByCid=" ) + ( mDcListActiveByCid ) ; }
public long queryCapabilityStatus ( ) throws android.os.RemoteException { return this . queryCapabilityStatus ( ) . mCapabilities ; }
protected java.lang.String getProperty ( java.lang.String key ) { try { return manager.getVariable ( key ) ; } catch ( java.io.IOException e ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , ( "Unable to get variable: " + key ) , e ) ; return null ; } }
public static native long SSL_do_handshake ( long sslNativePointer , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks shc , int timeoutMillis , boolean client_mode , byte [ ] npnProtocols , byte [ ] alpnProtocols ) throws java.net.SocketTimeoutException , java.security.cert.CertificateException , javax.net.ssl.SSLException ;
public void testRemove1_NullPointerException ( ) { try { java.util.concurrent.ConcurrentHashMap c = new java.util.concurrent.ConcurrentHashMap ( 5 ) ; c.put ( "sadsdf" , "asdads" ) ; c.remove ( null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public void testGetCaptivePortalServerUrl ( ) throws java.lang.Exception { java.lang.String url = mCm.getCaptivePortalServerUrl ( ) ; assertEquals ( "http://connectivitycheck.gstatic.com/generate_204" , url ) ; }
public void setUiTTYMode ( int slotId , int featureType , int sessionId , int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException { }
void onBatchScanThresholdCrossed ( int clientIf ) { if ( com.android.bluetooth.gatt.GattService.DBG ) { android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "onBatchScanThresholdCrossed() - clientIf=" + clientIf ) ) ; } boolean isServer = false ; flushPendingBatchResults ( clientIf , isServer ) ; }
public java.lang.String getPath ( ) { if ( isStandard ( ) ) { return "<standard>" ; } else { return ( ( com.android.sched.util.location.FileLocation ) ( location ) ) . getPath ( ) ; } }
public void test_RAND_bytes_Null_Failure ( ) throws java.lang.Exception { byte [ ] output = null ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.RAND_bytes ( output ) ; fail ( "Should be an error on null buffer input" ) ; } catch ( java.lang.RuntimeException success ) { } }
public static long max ( long l1 , long l2 ) { return java.lang.Math.max ( l1 , l2 ) ; }
public javax.net.ssl.SSLSocket createSocket ( java.net.Socket s , java.lang.String host , int port , boolean autoClose ) throws java.io.IOException { hostNameUsed.set ( host ) ; return ( ( javax.net.ssl.SSLSocket ) ( this . delegate.createSocket ( s , host , port , autoClose ) ) ) ; }
public android.view.MotionEvent getPendingTrackballMove ( android.view.IWindow window ) { if ( com.android.server.WindowManagerService.localLOGV ) android.util.Log.v ( com.android.server.WindowManagerService.TAG , ( "IWindow getPendingMotionEvent called for " + window ) ) ; return mKeyWaiter.finishedKey ( this , window , false , com.android.server.WindowManagerService.KeyWaiter.RETURN_PENDING_TRACKBALL ) ; }
void putLongUnchecked ( int i , long x ) { putLong ( ix ( i ) , x ) ; }
private void setClientInfo ( int pid , java.lang.String pkgName ) { if ( pkgName == null ) { pkgName = com.android.ddmlib.Device.UNKNOWN_PACKAGE ; } mClientInfo.put ( java.lang.Integer.valueOf ( pid ) , pkgName ) ; }
public java.lang.String getEncoding ( ) { if ( ! ( isOpen ( ) ) ) { return null ; } return java.io.HistoricalCharsetNames.get ( decoder.charset ( ) ) ; }
static long getBasePointer ( java.nio.Buffer b ) { long address = b.effectiveDirectAddress ; if ( address == 0 ) { return 0L ; } return address + ( ( b.position ) << ( b._elementSizeShift ) ) ; }
public void testInvalidInvokevirtual ( ) { mn.visitInsn ( org.objectweb.asm.tree.analysis.ACONST_NULL ) ; mn.visitTypeInsn ( org.objectweb.asm.tree.analysis.CHECKCAST , "java/lang/Object" ) ; mn.visitMethodInsn ( org.objectweb.asm.tree.analysis.INVOKEVIRTUAL , "java/util/ArrayList" , "size" , "()I" ) ; assertInvalid ( ) ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) { return null ; }
public void setNpnProtocols ( byte [ ] npnProtocols ) { if ( ( npnProtocols != null ) && ( ( npnProtocols.length ) == 0 ) ) { throw new java.lang.IllegalArgumentException ( "npnProtocols.length == 0" ) ; } sslParameters.npnProtocols = npnProtocols ; }
public android.print.PrintDocumentAdapter createPrintDocumentAdapter ( ) { checkThread ( ) ; return new org.chromium.android_webview.AwPrintDocumentAdapter ( mAwContents.getPdfExporter ( ) ) ; BRANCH ( ( c3d558 = "Make DrawGLFunctor work on 64-bit platforms." ) ) ; }
public void testCustom ( ) throws java.lang.Exception { assertEquals ( ( "customview.xml:16: Error: When using a custom namespace attribute in a library " + "project, use the namespace \"http://schemas.android.com/apk/res-auto\" instead." ) , lintProject ( "multiproject/library-manifest.xml=>AndroidManifest.xml" , "multiproject/library.properties=>project.properties" , "res/layout/customview.xml" ) ) ; }
public android.telephony.mbms.DownloadRequest.Builder setSubscriptionId ( int sub ) { this . subscriptionId = sub ; return this ; }
protected java.util.List < java.lang.reflect.Method > getTestMethods ( java.lang.Class < ? extends junit.framework.TestCase > testCaseClass ) { java.util.List < java.lang.reflect.Method > methods = java.util.Arrays.asList ( testCaseClass.getMethods ( ) ) ; return select ( methods , new android.test.suitebuilder.TestGrouping.TestMethodPredicate ( ) ) ; }
public void test_getOrDefault ( ) { libcore.java.util.MapDefaultMethodTester.test_getOrDefault ( new java.util.Hashtable < > ( ) , false , false ) ; }
public void dispose ( ) { if ( DBG ) log ( ( "Disposing RuimRecords " + ( this ) ) ) ; mCi.unregisterForIccRefresh ( this ) ; mParentApp.unregisterForReady ( this ) ; resetRecords ( ) ; super . dispose ( ) ; }
protected void init ( ) throws java.lang.Exception { fFormat = android.icu.text.DateFormat.getInstance ( ) ; }
protected boolean cleanup ( ) { if ( ( mStateMachine ) != null ) { mStateMachine.cleanup ( ) ; } com.android.bluetooth.a2dpsink.A2dpSinkService.clearA2dpSinkService ( ) ; return true ; }
public void testCreateTooShortPdu ( ) { byte [ ] pdu = new byte [ 4 ] ; android.telephony.SmsCbMessage msg = com.android.internal.telephony.gsm.GsmSmsCbTest.createFromPdu ( pdu ) ; assertNull ( "createFromPdu(byte[] with too short pdu should return null" , msg ) ; }
public void testCancelSoon ( ) throws java.lang.Exception { if ( ! ( doTestDragAndDrop ( android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON , android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE , null ) ) ) { return ; } assertResult ( android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED , android.wm.cts.CrossAppDragAndDropTests.RESULT_OK ) ; assertResult ( android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS , android.wm.cts.CrossAppDragAndDropTests.RESULT_OK ) ; }
public boolean isHost ( ) { return ( ( ( this ) == ( vogar.ModeId.HOST ) ) || ( ( this ) == ( vogar.ModeId.HOST_DALVIK ) ) ) || ( ( this ) == ( vogar.ModeId.HOST_ART_KITKAT ) ) ; }
public int migrateNetworksFromSupplicant ( java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configs , android.util.SparseArray < java.util.Map < java.lang.String , java.lang.String > > networkExtras ) { return mWifiSupplicantControl.loadNetworks ( configs , networkExtras ) ; }
private java.io.File getJar ( ) { return jar ; }
public java.lang.String getMeid ( ) { if ( isPhoneTypeGsm ( ) ) { loge ( "[GsmCdmaPhone] getMeid() is a CDMA method" ) ; return "0" ; } else { return mMeid ; } }
public void test001b ( ) throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; try { runTest001 ( jackOutput , "fail" ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.backend.jayce.ImportConflictException e ) { } }
public void testIsSupported_InvalidInitialCharacter ( ) { try { java.nio.charset.Charset.isSupported ( ".char" ) ; } catch ( java.lang.IllegalArgumentException e ) { fail ( "Should not throw IllegalArgumentException!" ) ; } }
public void deleteEditor ( ) { mEntry.markDeleted ( ) ; ( ( android.view.ViewGroup ) ( getParent ( ) ) ) . removeView ( this ) ; }
private void testUrlToUriMappingAuthority ( java.lang.String urlString , java.lang.String expectedUriString ) throws java.lang.Exception { java.net.URI authorityUri = backdoorUrlToUri ( new java.net.URL ( urlString ) ) ; assertEquals ( expectedUriString , authorityUri.toString ( ) ) ; }
public java.util.List < android.telephony.NetworkRegistrationState > getNetworkRegistrationStates ( ) { return mNetworkRegistrationStates ; }
public com.google.mockwebserver.SocketPolicy peekSocketPolicy ( ) { com.google.mockwebserver.MockResponse peek = responseQueue.peek ( ) ; if ( peek == null ) { return ( failFastResponse ) != null ? failFastResponse.getSocketPolicy ( ) : SocketPolicy.KEEP_OPEN ; } return peek.getSocketPolicy ( ) ; }
void onEvent ( @ android.support.annotation.NonNull com.android.dialer.simulator.Simulator.Event event ) { events.add ( com.android.dialer.common.Assert.isNotNull ( event ) ) ; for ( com.android.dialer.simulator.impl.SimulatorConnection.Listener listener : listeners ) { listener.onEvent ( this , event ) ; } }
public void handleMessage ( android.os.Message msg ) { super . handleMessage ( msg ) ; if ( ( msg.what ) == 0 ) { this . mHandler.sendMessageAtFrontOfQueue ( this . mHandler.obtainMessage ( 1 ) ) ; } }
com.android.ddmlib.Client [ ] getClients ( ) { synchronized ( mClientList ) { return mClientList.toArray ( new com.android.ddmlib.Client [ 0 ] ) ; } }
public boolean isEmpty ( ) { return ( patterns.size ( ) ) == 0 ; }
public static void computeCross ( android.renderscript.cts.TestCross.ArgumentsFloatNFloatNFloatN args ) { android.renderscript.cts.CoreMathVerifier.cross ( args.inLhs , args.inRhs , args.out ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField x ) { return visit ( ( ( com.android.jack.ir.ast.JNode ) ( x ) ) ) ; }
private static java.io.OutputStream openOutput ( java.lang.String name ) throws java.io.IOException { if ( ( name.equals ( "-" ) ) || ( name.startsWith ( "-." ) ) ) { return java.lang.System.out ; } return new java.io.FileOutputStream ( name ) ; }
native void rsnAllocationData1D ( int con , int id , int off , int mip , int count , int [ ] d , int sizeBytes ) ;
private static native boolean findNextImpl ( long addr , java.lang.String s , int [ ] offsets ) ;
public void onDisplayChanged ( int displayId ) { if ( displayId == ( android.view.Display.DEFAULT_DISPLAY ) ) { final int oldState = mDefaultDisplayState ; mDefaultDisplayState = mDefaultDisplay.getState ( ) ; if ( ( mDefaultDisplayState ) != oldState ) { updateScreenState ( ) ; } } }
public void testConstructor_EndBeforeStart_Failure ( ) throws java.lang.Exception { try { new android.security.AndroidKeyPairGeneratorSpec ( getContext ( ) , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorSpecTest.TEST_DN_1 , android.security.AndroidKeyPairGeneratorSpecTest.SERIAL_1 , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS , android.security.AndroidKeyPairGeneratorSpecTest.NOW ) ; fail ( "Should throw IllegalArgumentException when end is before start" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void assignSim ( java.lang.String id , int state , java.lang.String link ) { if ( ( type ) == ( com.android.internal.telephony.HardwareConfig.DEV_HARDWARE_TYPE_SIM ) ) { uuid = id ; modemUuid = link ; state = state ; } }
public void testVector ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "res/drawable/vector.xml:1: Error: <vector> requires API level 21 (current min is 1) [NewApi]\n" + "<vector xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n" ) + "^\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "apicheck/vector.xml=>AndroidManifest.xml" , "apicheck/vector.xml=>res/drawable/vector.xml" ) ) ; }
protected void wake ( ) { try { manager.wake ( ) ; } catch ( java.io.IOException e ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , "Unable to wake device (too sleepy?)" , e ) ; } }
int getDisplayList ( int displayList ) { return android.view.GLES20Canvas.nGetDisplayList ( mRenderer , displayList ) ; }
public void addInstanceField ( com.android.jack.dx.dex.file.EncodedField field ) { if ( field == null ) { throw new java.lang.NullPointerException ( "field == null" ) ; } instanceFields.add ( field ) ; }
synchronized void nScriptSetVarV ( int id , int slot , byte [ ] val ) { validate ( ) ; rsnScriptSetVarV ( mContext , id , slot , val ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; intento = new android.support.test.espresso.intent.Intents ( android.support.test.espresso.intent.IntentsTest.RESETTING_STUB ) ; intento.internalInit ( ) ; }
native void rsnAllocationData1D ( int con , int id , int off , int mip , int count , int [ ] d , int sizeBytes ) ;
public com.android.builder.model.AndroidProject executeAndReturnModel ( java.lang.String ... tasks ) { return execute ( java.util.Collections.< java.lang.String > emptyList ( ) , null , true , tasks ) ; }
public void testPass6 ( ) { metrics.addTestMetric ( "key2" , "value2" ) ; if ( mOption ) { metrics.addTestMetric ( "junit4-option" , "true" ) ; } HEAD ( 6.2E8F ) ; com.android.tradefed.testtype.f Merge ; com.android.tradefed.testtype.changes Ieb3ca670 ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.IntLiteral x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { push ( new com.android.jack.ir.ast.JIntLiteral ( makeSourceInfo ( x ) , x.constant.intValue ( ) ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
public void removeTransportModeTransforms ( java.net.Socket socket , android.net.IpSecTransform transform ) throws java.io.IOException { removeTransportModeTransforms ( socket.getFileDescriptor$ ( ) , transform ) ; }
public com.android.volley.toolbox.ImageLoader.ImageContainer get ( java.lang.String requestUrl , final com.android.volley.toolbox.ImageLoader.ImageListener listener ) { return get ( requestUrl , listener , 0 , 0 , ScaleType.CENTER_INSIDE ) ; }
public final java.lang.String getFormat ( ) { if ( key.isEngineBased ( ) ) { return null ; } return "PKCS#8" ; }
public static void setUpClass ( ) { com.android.jack.compile.androidtree.core.CoreCompilationTest.class . getClassLoader ( ) . setDefaultAssertionStatus ( true ) ; com.android.jack.compile.androidtree.core.CoreCompilationTest.SOURCELIST = com.android.jack.TestTools.getTargetLibSourcelist ( "core-libart" ) ; }
public int getTag ( ) { if ( ( tag ) == ( - 1 ) ) { tag = ( org.apache.harmony.security.x501.AttributeValue.isPrintableString ( rawString ) ) ? ASN1StringType.PRINTABLESTRING.id : ASN1StringType.UTF8STRING.id ; } return tag ; }
public void testStagefright_cve_2015_3873_b_21814993 ( ) throws java.lang.Exception { doStagefrightTest ( R.raw.cve_2015_3873_b_21814993 ) ; android.security.cts.ec0637 Merge ; }
public java.lang.String getLayoutResourceName ( ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart graphicalEditor = mEditorDelegate.getGraphicalEditor ( ) ; return graphicalEditor.getLayoutResourceName ( ) ; }
private static java.io.File [ ] splitLibraryPath ( java.lang.String path ) { java.util.ArrayList < java.io.File > result = dalvik.system.DexPathList.splitPaths ( path , java.lang.System.getProperty ( "java.library.path" ) , true ) ; return result.toArray ( new java.io.File [ result.size ( ) ] ) ; }
static void native_reset ( int native_object ) { android.graphics.Paint_Delegate delegate = android.graphics.Paint_Delegate.sManager.getDelegate ( native_object ) ; if ( delegate == null ) { return ; } delegate.reset ( ) ; }
public static void expectEquals ( int expected , int result ) { if ( expected != result ) { throw new java.lang.Error ( ( ( ( "Expected: " + expected ) + ", found: " ) + result ) ) ; } }
final void putFloat ( int offset , float value ) { sun.nio.ch.NativeObject.unsafe.putFloat$ ( ( offset + ( address ) ) , value ) ; }
public abstract void processAudioEvent ( int state , android.bluetooth.BluetoothDevice device ) ;
public void setUid ( java.lang.String uid ) { this . mUid = uid ; }
public boolean isGetChannelsForBandSupported ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.isGetChannelsForBandSupported ( ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.isGetChannelsForBandSupportedNative ( ) ; } else { return false ; } } } }
public void playDtmfTone ( char digit ) { try { mConnectionService.playDtmfTone ( mId , digit ) ; } catch ( android.os.RemoteException e ) { } }
private static boolean isAospBuildEnvironment ( ) { if ( ( com.android.tools.lint.detector.api.Project.sAospBuild ) == null ) { com.android.tools.lint.detector.api.Project.sAospBuild = ( com.android.tools.lint.detector.api.Project.getAospTop ( ) ) != null ; } return com.android.tools.lint.detector.api.Project.sAospBuild.booleanValue ( ) ; }
public int getState ( ) throws android.os.RemoteException { return ImsCallSession.State.INVALID ; }
public void TestNordic ( ) { if ( logKnownIssue ( "cldrbug:9465" , "CDF(12,000) for no_NO shouldn't be 12 (12K or similar)" ) ) { return ; } java.lang.String result = android.icu.text.CompactDecimalFormat.getInstance ( new android.icu.util.ULocale ( "no_NO" ) , CompactDecimalFormat.CompactStyle.SHORT ) . format ( 12000 ) ; assertNotEquals ( "CDF(12,000) for no_NO shouldn't be 12 (12K or similar)" , "12" , result ) ; }
private static void log ( java.lang.Exception e ) { e.printStackTrace ( ) ; }
public android.bluetooth.BluetoothActivityEnergyInfo reportActivityInfo ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return null ; return service.reportActivityInfo ( ) ; }
public void testResourceType ( ) throws java.lang.Exception { assertEquals ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( com.android.tools.lint.checks.SupportAnnotationDetectorTest.SDK_ANNOTATIONS_AVAILABLE ? "" + ( ( ( ( ( "src/p1/p2/Flow.java:13: Error: Expected resource of type drawable [ResourceType]\n" + " resources.getDrawable(10); // ERROR\n" ) + " ~~\n" ) + "src/p1/p2/Flow.java:18: Error: Expected resource of type drawable [ResourceType]\n" ) + " resources.getDrawable(R.string.my_string); // ERROR\n" ) + " ~~~~~~~~~~~~~~~~~~\n" ) : "" ) + "src/p1/p2/Flow.java:22: Error: Expected resource of type drawable [ResourceType]\n" ) + " myMethod(R.string.my_string, null); // ERROR\n" ) + " ~~~~~~~~~~~~~~~~~~\n" ) + "src/p1/p2/Flow.java:26: Error: Expected resource of type drawable [ResourceType]\n" ) + " resources.getDrawable(R.string.my_string); // ERROR\n" ) + " ~~~~~~~~~~~~~~~~~~\n" ) + "src/p1/p2/Flow.java:32: Error: Expected resource identifier (R.type.name) [ResourceType]\n" ) + " myAnyResMethod(50); // ERROR\n" ) + " ~~\n" ) + ( com.android.tools.lint.checks.SupportAnnotationDetectorTest.SDK_ANNOTATIONS_AVAILABLE ? "src/p1/p2/Flow.java:60: Error: Expected resource of type drawable [ResourceType]\n" + ( " resources.getDrawable(MimeTypes.getAnnotatedString()); // Error\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) : "" ) ) + "src/p1/p2/Flow.java:68: Error: Expected resource of type drawable [ResourceType]\n" ) + " myMethod(z, null); // ERROR\n" ) + " ~\n" ) + ( com.android.tools.lint.checks.SupportAnnotationDetectorTest.SDK_ANNOTATIONS_AVAILABLE ? "7 errors, 0 warnings\n" : "4 errors, 0 warnings\n" ) ) , lintProject ( copy ( "src/p1/p2/Flow.java.txt" , "src/p1/p2/Flow.java" ) , copy ( "src/android/support/annotation/DrawableRes.java.txt" , "src/android/support/annotation/DrawableRes.java" ) , mStringResAnnotation , mStyleResAnnotation , mAnyResAnnotation ) ) ; }
private void assertIsActive ( int index ) { if ( ( index < ( mActiveStart ) ) && ( index >= ( mActiveEnd ) ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "%s not in (%s, %s)" , index , mActiveStart , mActiveEnd ) ) ; } }
public final T call ( ) { try { return realCall ( ) ; } catch ( java.lang.Throwable t ) { threadUnexpectedException ( t ) ; return null ; } }
public void run ( ) { mNM.notify ( 1 , notificationWithNumbers ( 1 ) ) ; mNM.notify ( 2 , notificationWithNumbers ( 2 ) ) ; mNM.cancel ( 2 ) ; }
public void testConstructor_NullSubjectDN_Failure ( ) throws java.lang.Exception { try { new android.security.AndroidKeyPairGeneratorSpec ( getContext ( ) , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , null , android.security.AndroidKeyPairGeneratorSpecTest.SERIAL_1 , android.security.AndroidKeyPairGeneratorSpecTest.NOW , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS ) ; fail ( "Should throw IllegalArgumentException when subjectDN is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
void addResourceValue ( com.android.resources.ResourceType type , com.android.ide.common.rendering.api.ResourceValue value ) ;
public static void sort ( char [ ] a ) { java.util.DualPivotQuicksort.sort ( a ) ; }
public void checkClientTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType ) throws java.security.cert.CertificateException { checkTrusted ( chain , authType , null , null , true ) ; }
private com.android.jack.server.ServerLogConfiguration.LogLevel parseLevel ( @ javax.annotation.Nonnull java.lang.String stringLevel ) throws com.android.sched.util.codec.ParsingException { return new com.android.sched.util.codec.EnumCodec ( com.android.jack.server.ServerLogConfiguration.LogLevel.class , com.android.jack.server.ServerLogConfiguration.LogLevel.values ( ) ) . checkString ( new com.android.sched.util.codec.CodecContext ( ) , stringLevel ) ; }
protected boolean stop ( ) { mStateMachine.doQuit ( ) ; return true ; }
public void printmapping ( java.io.File printMapping ) throws proguard.ParseException { mappingFile = printMapping ; super . printmapping ( printMapping ) ; }
private com.android.bluetooth.gatt.AdvertiseClient getAdvertiseClient ( int advertiserId ) { for ( com.android.bluetooth.gatt.AdvertiseClient client : mAdvertiseClients ) { if ( ( client.advertiserId ) == advertiserId ) { return client ; } } return null ; }
public java.lang.String getDescriptor ( ) { if ( isClosure ( ) ) { char [ ] array = descriptor.toCharArray ( ) ; array [ 0 ] = 'L' ; return new java.lang.String ( array ) ; } return descriptor ; }
public void copyFrom ( java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFrom" ) ; copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public void testVersion14 ( ) { android.renderscript.cts.ScriptC_set_target_api_14 test14 = new android.renderscript.cts.ScriptC_set_target_api_14 ( mRS , mRes , R.raw.set_target_api_14 ) ; test14.invoke_check ( 14 ) ; waitForMessage ( ) ; checkForErrors ( ) ; }
private java.lang.ThreadGroup [ ] allGroups ( java.lang.ThreadGroup parent ) { int count = parent.activeGroupCount ( ) ; java.lang.ThreadGroup [ ] all = new java.lang.ThreadGroup [ count ] ; parent.enumerate ( all , true ) ; return all ; }
public abstract void writeTo ( com.google.protobuf.nano.CodedOutputByteBufferNano output ) throws java.io.IOException ;
public static void run ( ) throws java.lang.Exception { art.Main.bindAgentJNIForClass ( art.Test910.class ) ; art.Test910.doTest ( ) ; }
public void test_unblockWithJoinWithSource ( ) throws java.lang.Exception { setup ( true ) ; try { key.unblock ( java.net.Inet4Address.getByName ( "127.0.0.2" ) ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public void out ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { if ( logger != null ) { logger.info ( line ) ; } } }
public static native byte [ ] SSL_get_npn_negotiated_protocol ( int sslNativePointer ) ;
public boolean isBondingInitiatedLocally ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return false ; return service.isBondingInitiatedLocally ( device ) ; }
public synchronized void setRenderPriority ( android.webkit.WebSettings.RenderPriority priority ) { throw new android.webkit.MustOverrideException ( ) ; }
public static int $noinline$doubleConditionEqualZero ( double d ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return ( d > 42.0 ) != false ? 13 : 54 ; }
private void addNewIncomingCall ( boolean isSpam ) { java.lang.String callerId = ( isSpam ) ? "+1-661-778-3020" : "+44 (0) 20 7031 3000" ; connectionTag = com.android.dialer.simulator.impl.SimulatorSimCallManager.addNewIncomingCall ( context , callerId , SimulatorSimCallManager.CALL_TYPE_RTT ) ; }
public com.android.dx.cf.direct.DirectClassFile call ( ) throws java.lang.Exception { com.android.dx.cf.direct.DirectClassFile cf = com.android.dx.command.dexer.Main.parseClass ( name , bytes ) ; return cf ; }
public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault ( ) { org.objectweb.asm.AnnotationVisitor av = mv.visitAnnotationDefault ( ) ; return av == null ? av : new org.objectweb.asm.commons.RemappingAnnotationAdapter ( av , remapper ) ; }
public static void addDeviceChangeListener ( com.android.ddmlib.AndroidDebugBridge.IDeviceChangeListener listener ) { synchronized ( com.android.ddmlib.AndroidDebugBridge.sLock ) { if ( ( com.android.ddmlib.AndroidDebugBridge.sDeviceListeners.contains ( listener ) ) == false ) { com.android.ddmlib.AndroidDebugBridge.sDeviceListeners.add ( listener ) ; } } }
final java.lang.String getMethodNameInternal ( ) { com.android.dex.Dex dex = declaringClassOfOverriddenMethod.getDex ( ) ; int nameIndex = dex.nameIndexFromMethodIndex ( dexMethodIndex ) ; return declaringClassOfOverriddenMethod.getDexCacheString ( dex , nameIndex ) ; }
public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { }
public static android.support.v8.renderscript.ScriptIntrinsicYuvToRGB create ( android.support.v8.renderscript.RenderScript rs , android.support.v8.renderscript.Element e ) { int id = rs.nScriptIntrinsicCreate ( 6 , e.getID ( rs ) ) ; android.support.v8.renderscript.ScriptIntrinsicYuvToRGB si = new android.support.v8.renderscript.ScriptIntrinsicYuvToRGB ( id , rs ) ; return si ; }
public void onFullResult ( android.net.wifi.ScanResult fullScanResult ) { android.util.Log.e ( com.android.server.wifi.WifiStateMachine.TAG , ( "WifiScanListener onFullResult " + ( fullScanResult.toString ( ) ) ) ) ; }
public boolean isOffloadedFilteringSupported ( ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return false ; int val = service.getNumOfOffloadedScanFilterSupported ( ) ; return val >= ( com.android.bluetooth.btservice.AdapterService.MIN_OFFLOADED_FILTERS ) ; }
void tearDown ( ) { BRANCH ( ( ( 39808.0 - ( cts ) ) - ( dev ) ) ) ; mNm.setInterruptionFilter ( NotificationManager.INTERRUPTION_FILTER_ALL ) ; mNm.cancelAll ( ) ; deleteChannels ( ) ; com.android.cts.verifier.notifications.MockListener.getInstance ( ) . resetData ( ) ; }
native void rsnScriptSetVarD ( int con , int id , int slot , double val ) ;
public static com.android.ide.common.resources.ResourceUrl create ( @ com.android.annotations.NonNull com.android.resources.ResourceType type , @ com.android.annotations.NonNull java.lang.String name , boolean framework , boolean create ) { return new com.android.ide.common.resources.ResourceUrl ( type , name , framework , create ) ; }
private libcore.java.security.TestKeyStore.Builder addSubjectAltName ( com.android.org.bouncycastle.asn1.x509.GeneralName generalName ) { subjectAltNames.add ( generalName ) ; return this ; }
public void callSessionMultipartyStateChanged ( boolean isMultiParty ) throws android.os.RemoteException { mListener.callSessionMultipartyStateChanged ( isMultiParty ) ; }
public boolean hasSameBehavior ( java.lang.Object a , java.lang.Object b ) { return a.equals ( b ) ; }
public void setParent ( com.android.voicemail.impl.mail.Part parent ) throws com.android.voicemail.impl.mail.MessagingException { this . mParent = parent ; }
public void visitElement ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Element element ) { context.report ( com.android.tools.lint.checks.DeprecationDetector.ISSUE , element , context.getLocation ( element ) , java.lang.String.format ( "`%1$s` is deprecated" , element.getTagName ( ) ) , null ) ; }
public java.lang.String getIdentity ( ) { return getFieldValue ( android.net.wifi.WifiEnterpriseConfig.IDENTITY_KEY , "" ) ; }
public android.net.IpSecManager.UdpEncapsulationSocket openUdpEncapsulationSocket ( ) throws android.net.IpSecManager.ResourceUnavailableException , java.io.IOException { return new android.net.IpSecManager.UdpEncapsulationSocket ( mService , 0 ) ; }
public void addOutput ( @ javax.annotation.Nonnull byte [ ] data , int offset , int length ) { outRedirectStream.println ( new java.lang.String ( java.util.Arrays.copyOfRange ( data , offset , ( offset + length ) ) ) ) ; }
public void callSessionMergeStarted ( com.android.ims.internal.IImsCallSession session , com.android.ims.internal.IImsCallSession newSession , com.android.ims.ImsCallProfile profile ) { android.util.Log.d ( com.android.ims.internal.ImsCallSession.TAG , "callSessionMergeStarted" ) ; }
void turnOffIms ( int sessionId ) throws android.os.RemoteException ;
public static void sort ( long [ ] a ) { java.util.DualPivotQuicksort.sort ( a ) ; }
private static boolean shouldPrefix ( java.lang.String typeName ) { return ( ( typeName.startsWith ( "java/" ) ) || ( typeName.startsWith ( "sun/" ) ) ) && ( ! ( com.google.devtools.build.android.desugar.CoreLibraryRewriter.except ( typeName ) ) ) ; }
void removeDc ( com.android.internal.telephony.dataconnection.DataConnection dc ) { mDcListActiveByCid.remove ( dc.mCid ) ; mDcListAll.remove ( dc ) ; }
private void updateCall ( com.android.server.telecom.Call call ) { updateCall ( call , false ) ; }
private void refresh ( ) { com.android.traceur.Receiver.updateTracing ( this , false ) ; com.android.traceur.Receiver.updateQs ( this ) ; }
public void onServiceConnected ( android.content.ComponentName className , android.os.IBinder service ) { if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( "Proxy object connected" ) ; mService = IBluetoothPbap.Stub.asInterface ( service ) ; if ( ( mServiceListener ) != null ) { mServiceListener.onServiceConnected ( this ) ; } }
void addOptionInstance ( com.google.devtools.common.options.ParsedOptionDescription parsedOption , com.google.devtools.common.options.OptionDefinition implicitDependant , com.google.devtools.common.options.OptionDefinition expandedFrom , java.util.List < java.lang.String > warnings ) { }
static boolean native_rectStaysRect ( int native_object ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return true ; } return ( ( d.computeTypeMask ( ) ) & ( android.graphics.Matrix_Delegate.kRectStaysRect_Mask ) ) != 0 ; }
public static void computeAbs ( android.renderscript.cts.TestAbs.ArgumentsIntUint args ) { args.out = java.lang.Math.abs ( args.inN ) ; }
public void test_getSession ( ) throws java.security.NoSuchAlgorithmException { javax.net.ssl.SSLEngine sse = getEngine ( ) ; try { assertNotNull ( sse.getSession ( ) ) ; } catch ( java.lang.Exception ex ) { fail ( ( "Unexpected exception " + ex ) ) ; } }
public synchronized void setTextZoom ( int textZoom ) { throw new android.webkit.MustOverrideException ( ) ; }
public void unplug ( long batteryUptime , long batteryRealtime ) { mUnpluggedCount = mCount = mPluggedCount ; }
public void addAddress ( android.net.LinkAddress address ) { try { mService.addAddressToTunnelInterface ( mResourceId , address ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
private static void updateOptions ( @ javax.annotation.Nonnull com.android.jack.Options options , @ javax.annotation.Nonnull java.util.Set < java.lang.String > javaFilesToRecompile ) { java.util.List < java.lang.String > newEcjArguments = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String ecjOptions : options.getEcjArguments ( ) ) { if ( ( ! ( ecjOptions.startsWith ( "@" ) ) ) && ( ! ( ecjOptions.endsWith ( ".java" ) ) ) ) { newEcjArguments.add ( ecjOptions ) ; } } for ( java.lang.String fileToRecompile : javaFilesToRecompile ) { newEcjArguments.add ( fileToRecompile ) ; } assert ( com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder ) != null ; java.lang.StringBuilder newClasspath = new java.lang.StringBuilder ( com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder.getPath ( ) ) ; java.lang.String oldClasspath = options.getClasspathAsString ( ) ; if ( oldClasspath != null ) { newClasspath.append ( java.io.File.pathSeparator ) ; newClasspath.append ( oldClasspath ) ; } java.util.List < java.io.File > jayceImport = options.getJayceImport ( ) ; if ( ! ( jayceImport.isEmpty ( ) ) ) { for ( java.io.File importedJackFiles : jayceImport ) { newClasspath.append ( java.io.File.pathSeparator ) ; newClasspath.append ( importedJackFiles.getPath ( ) ) ; } options.setJayceImports ( java.util.Collections.< java.io.File > emptyList ( ) ) ; } options.setClasspath ( newClasspath.toString ( ) ) ; if ( ! ( newEcjArguments.isEmpty ( ) ) ) { options.setEcjArguments ( newEcjArguments ) ; } }
public com.android.dx.merge.SortableType adjust ( com.android.dx.merge.SortableType sortableType ) { return new com.android.dx.merge.SortableType ( sortableType.getDex ( ) , sortableType.getIndexMap ( ) , adjust ( sortableType.getClassDef ( ) ) ) ; }
public synchronized boolean hasCookies ( boolean privateBrowsing ) { throw new android.webkit.MustOverrideException ( ) ; }
public static com.android.dialer.historyitemactions.HistoryItemActionBottomSheet show ( android.content.Context context , com.android.dialer.historyitemactions.HistoryItemBottomSheetHeaderInfo historyItemBottomSheetHeaderInfo , java.util.List < com.android.dialer.historyitemactions.HistoryItemActionModule > modules , com.android.dialer.glidephotomanager.GlidePhotoManager glidePhotoManager ) { com.android.dialer.historyitemactions.HistoryItemActionBottomSheet sheet = new com.android.dialer.historyitemactions.HistoryItemActionBottomSheet ( context , historyItemBottomSheetHeaderInfo , modules , glidePhotoManager ) ; sheet.show ( ) ; return sheet ; }
public static void assertLongEquals ( long expected , long result ) { if ( expected != result ) { throw new java.lang.Error ( ( ( ( "Expected: " + expected ) + ", found: " ) + result ) ) ; } }
public boolean isConnected ( int sessionId , int callSessionType , int callType ) { return false ; }
public void testConstructor_IllegalAliases_Initial ( ) { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockChar" , new java.lang.String [ ] { "mock" , "-123" } ) ; } catch ( java.nio.charset.IllegalCharsetNameException e ) { fail ( "Should not throw IllegalArgumentException!" ) ; } }
public com.google.common.collect.ImmutableList < com.android.manifmerger.Actions.NodeRecord > getNodeRecords ( org.w3c.dom.Element element ) { com.android.manifmerger.XmlNode.NodeKey nodeKey = XmlNode.NodeKey.fromXml ( element ) ; return mRecords.containsKey ( nodeKey ) ? mRecords.get ( nodeKey ) . getNodeRecords ( ) : com.google.common.collect.ImmutableList.< com.android.manifmerger.Actions.NodeRecord > of ( ) ; }
static void nativeSetLocalMatrix ( int native_shader , int native_skiaShader , int matrix_instance ) { android.graphics.Shader_Delegate shaderDelegate = android.graphics.Shader_Delegate.sManager.getDelegate ( native_shader ) ; if ( shaderDelegate == null ) { return ; } shaderDelegate.mLocalMatrix = android.graphics.Matrix_Delegate.getDelegate ( matrix_instance ) ; }
public static void computeClz ( android.renderscript.cts.TestClz.ArgumentsUintUint args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( int ) ( java.lang.Integer.numberOfLeadingZeros ( args.inValue ) ) ) ; }
public void visitBaseType ( char descriptor ) { return ; }
private static java.lang.Object unmaskNull ( java.lang.Object key ) { return key == ( java.util.IdentityHashMap.NULL_KEY ) ? null : key ; }
public static long [ ] copyOf ( long [ ] original , int newLength ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public int queryCallBarringForServiceClass ( int cbType , int serviceClass ) throws android.os.RemoteException { return - 1 ; }
public android.icu.impl.UResource.TableSink getOrCreateTableSink ( int index , int initialSize ) { return null ; }
public boolean isContextSwitch ( ) { return ( mMethodData.getId ( ) ) < 0 ; }
protected boolean isInvalidOperatorNumeric ( java.lang.String operatorNumeric ) { return ( ( operatorNumeric == null ) || ( ( operatorNumeric.length ( ) ) < 5 ) ) || ( operatorNumeric.startsWith ( com.android.internal.telephony.ServiceStateTracker.INVALID_MCC ) ) ; }
public void setActiveDevice ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.hearingaid.HearingAidService service = getService ( ) ; if ( service == null ) { return ; } service.setActiveDevice ( device ) ; }
public void testVP8EncodeDecodeVideoFromBufferToSurface720p ( ) throws java.lang.Throwable { setParameters ( 1280 , 720 , 6000000 , android.media.cts.EncodeDecodeTest.MIME_TYPE_VP8 ) ; android.media.cts.EncodeDecodeTest.BufferToSurfaceWrapper.runTest ( this ) ; }
public java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedField field ) { com.android.tools.lint.ExternalAnnotationRepository.FieldInfo f = findField ( field ) ; if ( f == null ) { return null ; } return f.annotations ; }
void libToLib ( @ javax.annotation.Nonnull java.util.List < java.io.File > in , @ javax.annotation.Nonnull java.io.File out , boolean zipFiles ) throws java.lang.Exception ;
com.android.server.telecom.ConnectionServiceFocusManager create ( com.android.server.telecom.ConnectionServiceFocusManager.CallsManagerRequester requester , android.os.Looper looper ) ;
public javax.crypto.MacSpi getSpi ( ) { return getSpi ( null ) ; }
public boolean startTrace ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField type ) { return markIfNecessary ( type ) ; }
public void setJavaCompilerTask ( @ com.android.annotations.NonNull com.android.build.gradle.internal.scope.AndroidTask < ? extends org.gradle.api.tasks.compile.AbstractCompile > javaCompileTask ) { this . javaCompilerTask = javaCompileTask ; }
int getModuleCount ( ) { int moduleCount = 0 ; for ( com.android.tools.gradle.eclipse.ImportModule module : mModules ) { if ( ! ( module.isReplacedWithDependency ( ) ) ) { moduleCount ++ ; } } return moduleCount ; }
public void severe ( java.lang.String msg ) { if ( ( java.util.logging.Level.SEVERE.intValue ( ) ) < ( levelValue ) ) { return ; } log ( java.util.logging.Level.SEVERE , msg ) ; }
public static native java.lang.ClassLoader getClosestUserClassLoader ( java.lang.ClassLoader bootstrap , java.lang.ClassLoader system ) ;
void libToLib ( @ javax.annotation.Nonnull java.util.List < java.io.File > in , @ javax.annotation.Nonnull java.io.File out , boolean zipFiles ) throws java.lang.Exception ;
public com.google.common.base.CharMatcher precomputed ( ) { return this ; }
boolean run ( java.lang.String actionName , vogar.target.Profiler profiler , java.lang.String [ ] args ) ;
public void setText ( java.text.CharacterIterator newText ) { if ( newText == null ) { throw new java.lang.NullPointerException ( "newText == null" ) ; } newText.current ( ) ; wrapped.setText ( newText ) ; }
public int limit ( ) { checkValid ( ) ; return data [ ( ( pos ) + 2 ) ] ; }
public void removeSessionCookies ( android.webkit.ValueCallback < java.lang.Boolean > callback ) { throw new android.webkit.MustOverrideException ( ) ; }
java.net.InetAddress [ ] lookupAllHostAddr ( java.lang.String hostname ) throws java.net.UnknownHostException ;
private java.lang.Object readResolve ( ) { java.util.EnumSet < E > result = java.util.EnumSet.noneOf ( elementType ) ; for ( java.lang.Enum e : elements ) result.add ( ( ( E ) ( e ) ) ) ; return result ; }
public void setTTYMode ( int ttyMode , android.os.Message onComplete ) { if ( ( mImsPhone ) != null ) { mImsPhone.setTTYMode ( ttyMode , onComplete ) ; } }
public java.io.PrintStream getPrintStream ( ) { if ( ( printer ) == null ) { printer = new java.io.PrintStream ( getOutputStream ( ) ) ; } return printer ; }
public java.lang.String toString ( ) { return ( "name" + ": " ) + ( value ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws java.lang.Exception { java.util.Set < com.android.jack.ir.sourceinfo.FileSourceInfo > infos = session.getSourceInfoFactory ( ) . getFileSourceInfos ( ) ; for ( com.android.jack.ir.sourceinfo.FileSourceInfo info : infos ) { info.setFileName ( "" ) ; } }
private static android.net.Uri getBaseUri ( android.content.Context context ) { return ( com.android.dialer.blocking.FilteredNumberCompat.useNewFiltering ( context ) ) && ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.N ) ) ? android.provider.BlockedNumberContract.BlockedNumbers.CONTENT_URI : com.android.dialer.database.FilteredNumberContract.FilteredNumber.CONTENT_URI ; }
public void bindProgramFragment ( android.renderscript.ProgramFragment p ) { validate ( ) ; nContextBindProgramFragment ( safeID ( p ) ) ; }
public android.app.Notification.Builder addAction ( android.app.Notification.Action action ) { mActions.add ( action ) ; return this ; }
public void callSessionUssdMessageReceived ( com.android.ims.internal.IImsCallSession session , int mode , java.lang.String ussdMessage ) { if ( ( mListener ) != null ) { mListener.callSessionUssdMessageReceived ( this , mode , ussdMessage ) ; } }
public void setCropRect ( android.graphics.Rect cropRect ) { cropRect = new android.graphics.Rect ( cropRect ) ; cropRect.intersect ( 0 , 0 , getWidth ( ) , getHeight ( ) ) ; mCropRect = cropRect ; }
private void badCallActionHelper ( android.net.Uri handle , int expectedCode ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_ALARM_CHANGED , handle ) ; int result = processIntent ( intent , true ) ; assertEquals ( expectedCode , result ) ; verifyNoBroadcastSent ( ) ; verifyNoCallPlaced ( ) ; }
public void testInitialize_success ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( false , false , false ) ; }
native void rsnAllocationData2D ( int con , int id , int xoff , int yoff , int mip , int face , int w , int h , byte [ ] d , int sizeBytes ) ;
public com.android.tools.r8.utils.AndroidApp.Builder addLibraryFiles ( java.util.Collection < java.nio.file.Path > files ) throws java.io.IOException { for ( java.nio.file.Path file : files ) { addFile ( file , ClassKind.LIBRARY ) ; } return this ; }
public void test_blockWithJoinWithSource ( ) throws java.lang.Exception { init ( true ) ; try { key.block ( sourceAddress ) ; } catch ( java.lang.IllegalStateException expected ) { } }
java.lang.String getName ( ) { synchronized ( mObject ) { return mName ; } }
native void rsnAllocationRead ( int con , int id , int [ ] d ) ;
public java.util.Collection < V > values ( ) { java.util.Collection < V > vs = values ; return vs != null ? vs : ( values = new Values ( ) ) ; }
public boolean unregisterApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "unregisterApp()" ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.unregisterApp ( config ) ; }
public static long LongRemainder ( ) { long a ; long b ; long c ; a = Main.$inline$long ( 8L ) ; b = Main.$inline$long ( 3L ) ; c = a % b ; return c ; }
public static int $noinline$NegSub2 ( int arg1 , int arg2 ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int temp = arg1 - arg2 ; return ( - temp ) | ( - temp ) ; }
private void expectNetworkStatsUidDetail ( android.net.NetworkStats detail ) throws java.lang.Exception { expectNetworkStatsUidDetail ( detail , new java.lang.String [ 0 ] , new android.net.NetworkStats ( 0L , 0 ) ) ; }
public void initRttCallScreenDelegate ( android.content.Context context , com.android.incallui.rtt.protocol.RttCallScreen rttCallScreen ) { this . appContext = context.getApplicationContext ( ) ; this . rttCallScreen = rttCallScreen ; }
public static void setUp ( android.telecom.PhoneAccountHandle phoneAccountHandle , android.telecom.ConnectionService connectionService ) throws java.lang.Exception { synchronized ( android.telecom.cts.CtsConnectionService.sLock ) { if ( ( android.telecom.cts.CtsConnectionService.sConnectionService ) != null ) { throw new java.lang.Exception ( "Mock ConnectionService exists. Failed to call tearDown()." ) ; } android.telecom.cts.CtsConnectionService.sConnectionService = connectionService ; android.telecom.cts.CtsConnectionService.mIsServiceUnbound = false ; } }
public boolean isCategory1 ( ) { switch ( basicType ) { case com.android.jack.dx.rop.type.Type.BT_CLOSURE : case com.android.jack.dx.rop.type.Type.BT_LONG : case com.android.jack.dx.rop.type.Type.BT_DOUBLE : { return false ; } } return true ; }
public java.lang.String getValue ( java.lang.String name ) { return ( ( java.lang.String ) ( map.get ( new java.util.jar.Attributes.Name ( name ) ) ) ) ; }
public void testDigestFiles ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Long > checkSums = myPatch.digestFiles ( getDataDir ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , com.intellij.updater.TEST_UI ) ; org.junit.Assert.assertEquals ( 9 , checkSums.size ( ) ) ; }
public static double [ ] copyOf ( double [ ] original , int newLength ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface t ) throws java.lang.Exception { if ( t instanceof com.android.jack.ir.ast.JDefinedClass ) { t.removeMarker ( SwitchEnumSupport.UsedEnumField.class ) ; } }
public static long $noinline$UShr0 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return arg > > > 0 ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; Main.testThrowException ( ) ; }
public boolean isExternalCall ( ) { return ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.N ) ) && ( hasProperty ( CallCompat.Details.PROPERTY_IS_EXTERNAL_CALL ) ) ; }
public boolean onCreate ( ) { com.android.email.Email.setServicesEnabledAsync ( getContext ( ) ) ; checkDatabases ( ) ; return false ; }
public javax.net.ssl.SSLParameters getSSLParameters ( ) { javax.net.ssl.SSLParameters params = super . getSSLParameters ( ) ; org.conscrypt.Platform.setEndpointIdentificationAlgorithm ( params , sslParameters.getEndpointIdentificationAlgorithm ( ) ) ; return params ; }
com.android.build.gradle.internal.dsl.File getTextOutput ( ) { return textOutput ; }
public void onAppStatusChanged ( android.bluetooth.BluetoothDevice pluggedDevice , android.bluetooth.BluetoothHidDeviceAppConfiguration config , boolean registered ) { android.util.Log.d ( android.bluetooth.BluetoothHidDeviceCallback.TAG , ( ( ( "onAppStatusChanged: pluggedDevice=" + pluggedDevice ) + " registered=" ) + registered ) ) ; }
java.lang.String getName ( ) ;
static final java.text.DateFormatSymbols getInstanceRef ( java.util.Locale locale ) { java.text.DateFormatSymbols dfs = java.text.DateFormatSymbols.getProviderInstance ( locale ) ; if ( dfs != null ) { return dfs ; } return java.text.DateFormatSymbols.getCachedInstance ( locale ) ; }
public void testConstructor_NullSerial_Failure ( ) throws java.lang.Exception { try { new android.security.AndroidKeyPairGeneratorSpec ( getContext ( ) , android.security.AndroidKeyPairGeneratorSpecTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorSpecTest.TEST_DN_1 , null , android.security.AndroidKeyPairGeneratorSpecTest.NOW , android.security.AndroidKeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS ) ; fail ( "Should throw IllegalArgumentException when startDate is null" ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
public void realRun ( ) { long startTime = java.lang.System.nanoTime ( ) ; java.util.concurrent.Future future = executor.submit ( sleeper ) ; assertFutureTimesOut ( future ) ; }
public abstract boolean isFile ( @ com.android.annotations.NonNull java.io.File file ) ;
public void noteVideoTurnedOffLocked ( ) { if ( mVideoTurnedOn ) { mVideoTurnedOn = false ; mVideoTurnedOnTimer.stopRunningLocked ( this ) ; } }
public void visitDeprecatedAttribute ( proguard.classfile.attribute.visitor.Clazz clazz , proguard.classfile.attribute.visitor.Field field , proguard.classfile.attribute.visitor.DeprecatedAttribute deprecatedAttribute ) { deprecatedAttribute.accept ( clazz , field , attributeVisitor ) ; }
public void uncaughtException ( java.lang.Thread t , java.lang.Throwable e ) { if ( e instanceof java.lang.ThreadDeath ) { passed [ TEST_KILLING ] = true ; } super . uncaughtException ( t , e ) ; }
protected void updateSearchPanel ( ) { super . updateSearchPanel ( ) ; mSearchPanelView.setStatusBarView ( mNavigationBarView ) ; mNavigationBarView.setDelegateView ( mSearchPanelView ) ; }
protected java.net.URLConnection openConnection ( java.net.URL url ) throws java.io.IOException { return new libcore.io.ClassPathURLStreamHandler.ClassPathURLConnection ( url , jarFile ) ; }
static com.android.dialer.app.calllog.MissedCallNotifier getIstance ( android.content.Context context ) { return new com.android.dialer.app.calllog.MissedCallNotifier ( context , com.android.dialer.app.calllog.CallLogNotificationsQueryHelper.getInstance ( context ) ) ; }
public void onMiddlewareReady ( ) { try { listener.middlewareReady ( ) ; } catch ( android.os.RemoteException e ) { onAppCallbackDied ( uid , subscriptionId ) ; } }
public static void startMethodTracing ( ) { dalvik.system.VMDebug.startMethodTracing ( android.os.Debug.DEFAULT_TRACE_FILE_PATH , 0 , 0 ) ; }
public void addMemberType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface jDeclaredType ) { inners.add ( jDeclaredType ) ; }
void setAvdName ( java.lang.String avdName ) { if ( ( isEmulator ( ) ) == false ) { throw new java.lang.IllegalArgumentException ( "Cannot set the AVD name of the device is not an emulator" ) ; } mAvdName = avdName ; }
public org.eclipse.ltk.core.refactoring.RefactoringStatus checkInitialConditions ( org.eclipse.core.runtime.IProgressMonitor pm ) throws org.eclipse.core.runtime.CoreException , org.eclipse.core.runtime.OperationCanceledException { if ( ( this . mProject.findMaxProblemSeverity ( IMarker.PROBLEM , true , IResource.DEPTH_INFINITE ) ) == ( org.eclipse.core.resources.IMarker.SEVERITY_ERROR ) ) { return org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus ( "Fix the errors in your project, first." ) ; } return new org.eclipse.ltk.core.refactoring.RefactoringStatus ( ) ; }
public void testManagedProvisioningPreInstalled ( ) throws java.lang.Exception { assertEquals ( mDeviceAdmin , isPackageInstalledOnSystemImage ( android.admin.cts.DevicePolicyManagerTest.MANAGED_PROVISIONING_PKG ) ) ; }
public boolean hasResources ( com.android.resources.ResourceType type ) { update ( ) ; java.util.HashMap < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > list = mResourceItems.get ( type ) ; return ( list != null ) && ( ( list.size ( ) ) > 0 ) ; }
public void run ( ) { while ( scanner.hasNextLine ( ) ) { result.add ( scanner.nextLine ( ) ) ; } }
public static long $noinline$NegNeg1 ( long arg ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return - ( - arg ) ; }
private java.io.File unpackBundle ( byte [ ] content , java.io.File targetDir ) throws java.io.IOException { android.util.Slog.i ( logTag , ( "Unpacking update content to: " + targetDir ) ) ; libcore.tzdata.update2.ConfigBundle bundle = new libcore.tzdata.update2.ConfigBundle ( content ) ; bundle.extractTo ( targetDir ) ; return targetDir ; }
void assertNoCallback ( ) { mService.waitForIdle ( ) ; com.android.server.ConnectivityServiceTest.CallbackInfo c = mCallbacks.peek ( ) ; assertNull ( ( "Unexpected callback: " + c ) , c ) ; }
protected synchronized android.webkit.WebHistoryItem clone ( ) { throw new android.webkit.MustOverrideException ( ) ; }
public static void computeFdim ( android.renderscript.cts.TestFdim.ArgumentsFloatFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Math.max ( 0.0F , ( ( args.inA ) - ( args.inB ) ) ) , 0 , 0 ) ; }
private void checkGraphic ( java.lang.String baseName ) throws java.io.IOException { com.android.assetstudiolib.MenuIconGenerator generator = new com.android.assetstudiolib.MenuIconGenerator ( ) ; checkGraphic ( 3 , "menus" , baseName , generator , new com.android.assetstudiolib.GraphicGenerator.Options ( ) ) ; }
public static native int max ( int i1 , int i2 ) ;
public void testOpenSocketAddress_Null ( ) throws java.io.IOException { java.nio.channels.SocketChannel channel1IP = null ; try { channel1IP = java.nio.channels.SocketChannel.open ( null ) ; fail ( "Should throw an IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException e ) { } assertNull ( channel1IP ) ; }
final long getLong ( int offset ) { return sun.nio.ch.NativeObject.unsafe.getLong$ ( ( offset + ( address ) ) ) ; }
public void setAudioRoute ( int route ) { try { mAdapter.setAudioRoute ( route ) ; } catch ( android.os.RemoteException e ) { } }
public static android.support.v8.renderscript.ScriptIntrinsicConvolve5x5 create ( android.support.v8.renderscript.RenderScript rs , android.support.v8.renderscript.Element e ) { int id = rs.nScriptIntrinsicCreate ( 4 , e.getID ( rs ) ) ; return new android.support.v8.renderscript.ScriptIntrinsicConvolve5x5 ( id , rs ) ; }
public static int $noinline$intReverseConditionNaN ( int i ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } return 42 != ( java.lang.Math.sqrt ( i ) ) ? 13 : 54 ; }
public void run ( ) { android.os.Looper.prepare ( ) ; mLooper = android.os.Looper.myLooper ( ) ; mInitErrors = android.hardware.camera2.legacy.CameraDeviceUserShim.translateErrorsFromCamera1 ( mCamera.cameraInitUnspecified ( mCameraId ) ) ; mStartDone.open ( ) ; android.os.Looper.loop ( ) ; }
public static boolean equalMethodParameters ( java.lang.reflect.ArtMethod artMethod , java.lang.Class < ? > [ ] params ) { return java.lang.reflect.ArtMethod.equalConstructorParameters ( artMethod.findOverriddenMethodIfProxy ( ) , params ) ; }
public java.lang.String [ ] getSkins ( ) { return mSkins ; }
public void lockNow ( ) { if ( ( mService ) != null ) { try { mService.lockNow ( mParentInstance ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
void onActionModeStarted ( android.view.ActionMode mode ) { mUi.onActionModeStarted ( mode ) ; mActionMode = mode ; }
