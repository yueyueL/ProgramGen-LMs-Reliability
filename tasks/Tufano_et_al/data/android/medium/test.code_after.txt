protected static boolean assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean result = ( expected == null ) ? actual == null : expected.equals ( actual ) ; return com.ibm.icu.dev.test.TestFmwk.handleAssert ( result , message , com.ibm.icu.dev.test.TestFmwk.stringFor ( expected ) , com.ibm.icu.dev.test.TestFmwk.stringFor ( actual ) ) ; }
protected boolean start ( ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , "start()" ) ; } mHandler = new com.android.bluetooth.hid.HidDeviceService.HidDeviceServiceHandler ( ) ; com.android.bluetooth.hid.HidDeviceService.setHidDeviceService ( this ) ; mHidDeviceNativeInterface.init ( ) ; mNativeAvailable = true ; return true ; }
public void onUpgrade ( android.database.sqlite.SQLiteDatabase db , int oldVersion , int currentVersion ) { if ( Log.LOGV ) com.android.deskclock.Log.v ( ( ( ( ( "Upgrading alarms database from version " + oldVersion ) + " to " ) + currentVersion ) + ", which will destroy all old data" ) ) ; db.execSQL ( ( "DROP TABLE IF EXISTS " + ( com.android.deskclock.AlarmDatabaseHelper.TABLE_NAME ) ) ) ; onCreate ( db ) ; }
public static int runSmaliTest ( java.lang.String name , boolean input ) { try { java.lang.Class < ? > c = java.lang.Class.forName ( "SmaliTests" ) ; java.lang.reflect.Method m = c.getMethod ( name , new java.lang.Class [ ] { boolean . class } ) ; return ( ( java.lang.Integer ) ( m.invoke ( null , input ) ) ) ; } catch ( java.lang.Exception ex ) { throw new java.lang.Error ( ex ) ; } }
private void runInBatchMode ( final java.lang.String javaPkgName , android.annotation.cts.Profile profile ) throws com.android.cts.DeviceDisconnectedException { mTimeOutTimer = new com.android.cts.HostTimer ( new com.android.cts.TestPackage.TimeOutTask ( this ) , HostConfig.Ints.batchStartTimeoutMs.value ( ) ) ; mTimeOutTimer.start ( ) ; mProgressObserver = new com.android.cts.ProgressObserver ( ) ; if ( ( javaPkgName != null ) && ( ( javaPkgName.length ( ) ) > 0 ) ) { runInBatchModeImpl ( javaPkgName , profile ) ; } else { for ( java.lang.String pkgName : getPackageNames ( ) ) { runInBatchModeImpl ( pkgName , profile ) ; } } }
public com.android.resources.ResourceType [ ] getAvailableResourceTypes ( ) { if ( ( mResourcesMap ) != null ) { java.util.Set < com.android.resources.ResourceType > types = mResourcesMap.keySet ( ) ; if ( types != null ) { return types.toArray ( new com.android.resources.ResourceType [ types.size ( ) ] ) ; } } return null ; }
protected void onDialogClosed ( boolean positiveResult ) { if ( ( ( mButtonClicked ) == ( android.content.DialogInterface.BUTTON_POSITIVE ) ) || ( ( mButtonClicked ) == ( android.content.DialogInterface.BUTTON_NEUTRAL ) ) ) { setPhoneNumber ( getEditText ( ) . getText ( ) . toString ( ) ) ; super . onDialogClosed ( positiveResult ) ; setText ( getStringValue ( ) ) ; } else { super . onDialogClosed ( positiveResult ) ; } if ( ( mDialogOnClosedListener ) != null ) { mDialogOnClosedListener.onDialogClosed ( this , mButtonClicked ) ; } }
public final short short_literal ( ) throws org.jf.smali.RecognitionException { short value = 0 ; org.antlr.runtime.tree.CommonTree SHORT_LITERAL206 = null ; try { { SHORT_LITERAL206 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.SHORT_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_SHORT_LITERAL_in_short_literal3468 ) ) ) ; value = org.jf.smali.LiteralTools.parseShort ( ( SHORT_LITERAL206 != null ? SHORT_LITERAL206.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void testIntersectionType004 ( ) throws java.lang.Exception { try { new com.android.jack.test.helper.RuntimeTestHelper ( INTERSECTION_TYPE_004 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName ( ) , java.lang.Boolean.TRUE.toString ( ) ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackCliToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . compileAndRunTest ( ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.frontend.FrontendCompilationException e ) { } }
public void onFindResultReceived ( int activeMatchOrdinal , int numberOfMatches , boolean isDoneCounting ) { if ( ( mFindListener ) == null ) return ; org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onFindResultReceived" ) ; mFindListener.onFindResultReceived ( activeMatchOrdinal , numberOfMatches , isDoneCounting ) ; org.chromium.base.TraceEvent.end ( ) ; }
public boolean onPasswordInputComplete ( java.lang.String text , boolean obfuscate ) { if ( ( ! ( android.text.TextUtils.isEmpty ( text ) ) ) && ( ( text.length ( ) ) >= ( com.android.tv.settings.connectivity.FormPageDisplayer.WEP_MIN_LENGTH ) ) ) { android.os.Bundle result = new android.os.Bundle ( ) ; result.putString ( FormPage.DATA_KEY_SUMMARY_STRING , text ) ; if ( obfuscate ) { result.putString ( FormPage.DATA_KEY_SECONDARY_STRING , PasswordInputWizardFragment.OPTION_OBFUSCATE ) ; } listener.onBundlePageResult ( formPage , result ) ; return true ; } return false ; }
private com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource getResourceFromUrl ( @ com.android.annotations.NonNull java.lang.String possibleUrlReference ) { com.android.ide.common.resources.ResourceUrl url = com.android.ide.common.resources.ResourceUrl.parse ( possibleUrlReference ) ; if ( ( url != null ) && ( ! ( url.framework ) ) ) { return getResource ( url.type , url.name ) ; } return null ; }
private static java.io.File replaceRepackageClassesValue ( @ javax.annotation.Nonnull java.io.File inFlags , @ javax.annotation.Nonnull java.lang.String flagNumber ) throws java.io.IOException { java.io.File result = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( ( "proguard" + flagNumber ) , ( ".flags" + flagNumber ) ) ; java.util.List < java.lang.String > lines = com.google.common.io.Files.readLines ( inFlags , com.android.jack.shrob.RepackagingTest.UTF8 ) ; java.lang.String fileAsOneLine = com.google.common.base.Joiner.on ( ' ' ) . join ( lines ) ; java.lang.String resultContent = fileAsOneLine.replaceAll ( "-repackageclasses\\s+\'.+\'" , "-repackageclasses ''" ) ; com.google.common.io.Files.write ( resultContent , result , com.android.jack.shrob.RepackagingTest.UTF8 ) ; return result ; }
public void testShellUtil ( ) throws java.lang.Exception { com.android.devtools.systemimage.uitest.utils.ShellUtil.ShellResult result = com.android.devtools.systemimage.uitest.utils.ShellUtil.invokeCommand ( "ls" ) ; org.junit.Assert.assertTrue ( result.stderr , ( ( ( result.stdout.length ( ) ) > 0 ) && ( ( result.stderr.length ( ) ) == 0 ) ) ) ; }
public void testConfigurationUpdatesWhenResizedFromDockedStack ( ) throws java.lang.Exception { if ( ( ! ( supportsSplitScreenMultiWindow ( ) ) ) || ( ! ( supportsMultiWindowMode ( ) ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
public int hashCode ( ) { int result = countryIso.hashCode ( ) ; result = ( 31 * result ) + ( ( defaultTimeZoneId ) != null ? defaultTimeZoneId.hashCode ( ) : 0 ) ; result = ( 31 * result ) + ( timeZoneIds.hashCode ( ) ) ; result = ( 31 * result ) + ( everUsesUtc ? 1 : 0 ) ; return result ; }
public void testHashCode ( ) throws java.text.ParseException { java.lang.String rule = "&9 < a < b < c < d" ; java.text.RuleBasedCollator coll = new java.text.RuleBasedCollator ( rule ) ; java.text.RuleBasedCollator same = new java.text.RuleBasedCollator ( rule ) ; assertEquals ( coll.hashCode ( ) , same.hashCode ( ) ) ; }
public void freeCache ( java.lang.String uuid , long freeStorageSize ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.freeCache ( uuid , freeStorageSize ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw com.android.server.pm.Installer.InstallerException.from ( e ) ; } }
public void testCheckAndSet ( ) { assertEquals ( true , lq.checkAndSet ( "b+kok" , config ) ) ; assertTrue ( ( ( config.getLocaleQualifier ( ) ) != null ) ) ; assertEquals ( "kok" , config.getLocaleQualifier ( ) . toString ( ) ) ; }
private boolean isDevicesExtra ( java.io.File item ) { java.io.File properties = new java.io.File ( item , com.android.sdklib.SdkConstants.FN_SOURCE_PROP ) ; try { java.io.BufferedReader propertiesReader = new java.io.BufferedReader ( new java.io.FileReader ( properties ) ) ; try { java.lang.String line ; while ( ( line = propertiesReader.readLine ( ) ) != null ) { java.util.regex.Matcher m = com.android.sdklib.devices.DeviceManager.sPathPropertyPattern.matcher ( line ) ; if ( m.matches ( ) ) { return true ; } } } finally { propertiesReader.close ( ) ; } } catch ( java.io.IOException ignore ) { } return false ; }
public void test_format_roundingUnnecessaryArithmeticException ( ) { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols ( java.util.Locale.US ) ; java.text.DecimalFormat decimalFormat = new java.text.DecimalFormat ( "00.0#E0" , dfs ) ; decimalFormat.setRoundingMode ( java.math.RoundingMode.UNNECESSARY ) ; try { decimalFormat.format ( 99999 , new java.lang.StringBuffer ( ) , new java.text.FieldPosition ( 0 ) ) ; fail ( "ArithmeticException expected" ) ; } catch ( java.lang.ArithmeticException e ) { } }
public void testSetTextCharacterIterator ( ) { java.text.RuleBasedCollator rbColl = ( ( java.text.RuleBasedCollator ) ( java.text.Collator.getInstance ( java.util.Locale.forLanguageTag ( "es-u-co-trad" ) ) ) ) ; java.lang.String text = "caa" ; java.text.CollationElementIterator iterator = rbColl.getCollationElementIterator ( text ) ; iterator.setOffset ( 1 ) ; assertEquals ( 1 , iterator.getOffset ( ) ) ; iterator.setText ( new java.text.StringCharacterIterator ( "cha" ) ) ; iterator.setOffset ( 1 ) ; assertEquals ( 1 , iterator.getOffset ( ) ) ; }
public void setTrafficClass ( int value ) throws java.net.SocketException { checkOpenAndCreate ( true ) ; if ( ( value < 0 ) || ( value > 255 ) ) { throw new java.lang.IllegalArgumentException ( ( "Value doesn't fit in an unsigned byte: " + value ) ) ; } impl.setOption ( java.net.SocketOptions.IP_TOS , java.lang.Integer.valueOf ( value ) ) ; }
private java.util.Set < java.lang.Long > queryPhoneTableForContactIds ( com.google.common.collect.ImmutableSet < com.android.dialer.DialerPhoneNumber > dialerPhoneNumbers ) { java.util.Set < java.lang.Long > contactIds = new android.support.v4.util.ArraySet ( ) ; com.android.dialer.phonenumberproto.PartitionedNumbers partitionedNumbers = new com.android.dialer.phonenumberproto.PartitionedNumbers ( dialerPhoneNumbers ) ; contactIds.addAll ( queryPhoneTableForContactIdsBasedOnE164 ( partitionedNumbers.validE164Numbers ( ) ) ) ; contactIds.addAll ( queryPhoneTableForContactIdsBasedOnRawNumber ( partitionedNumbers.unformattableNumbers ( ) ) ) ; return contactIds ; }
public void sendMessage ( int what , java.lang.Object arg , boolean arg1 ) { removeMessages ( what ) ; android.os.Message m = android.os.Message.obtain ( this , what ) ; m.obj = arg ; m.arg1 = ( arg1 ) ? 1 : 0 ; sendMessage ( m ) ; }
public void open ( java.lang.String closer ) { if ( closer == null ) { throw new java.lang.NullPointerException ( "closer == null" ) ; } if ( ( ( this ) == ( dalvik.system.CloseGuard.NOOP ) ) || ( ! ( dalvik.system.CloseGuard.ENABLED ) ) ) { return ; } java.lang.String message = ( "Explicit termination method '" + closer ) + "' not called" ; allocationSite = new java.lang.Throwable ( message ) ; dalvik.system.CloseGuard.currentTracker.open ( allocationSite ) ; }
public synchronized void addURL ( java.net.URL url ) { if ( closed ) return ; synchronized ( urls ) { if ( ( url == null ) || ( path.contains ( url ) ) ) return ; urls.add ( 0 , url ) ; path.add ( url ) ; if ( ( lookupCacheURLs ) != null ) { sun.misc.URLClassPath.disableAllLookupCaches ( ) ; } } }
public java.util.Enumeration < V > elements ( ) { java.util.concurrent.ConcurrentHashMap.Node < K , V > [ ] t ; int f = ( ( t = table ) == null ) ? 0 : t.length ; return new java.util.concurrent.ConcurrentHashMap.ValueIterator < K , V > ( t , f , 0 , f , this ) ; }
public java.lang.String formatValue ( @ javax.annotation.Nonnull com.android.sched.util.codec.PairCodec.Pair < T , U > data ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( keyParser.formatValue ( data.getFirst ( ) ) ) ; sb.append ( separator ) ; sb.append ( valueParser.formatValue ( data.getSecond ( ) ) ) ; return sb.toString ( ) ; }
public void addListener ( com.android.tv.dvr.DvrWatchedPositionManager.WatchedPositionChangedListener listener , long recordedProgramId ) { if ( recordedProgramId == ( com.android.tv.dvr.data.RecordedProgram.ID_NOT_SET ) ) { return ; } java.util.Set < com.android.tv.dvr.DvrWatchedPositionManager.WatchedPositionChangedListener > listenerSet = mListeners.get ( recordedProgramId ) ; if ( listenerSet == null ) { listenerSet = new java.util.concurrent.CopyOnWriteArraySet < > ( ) ; mListeners.put ( recordedProgramId , listenerSet ) ; } listenerSet.add ( listener ) ; }
public void testBindSocketOfNonSocketFdThrows ( ) throws java.lang.Exception { final java.io.File devNull = new java.io.File ( "/dev/null" ) ; org.junit.Assert.assertTrue ( devNull.canRead ( ) ) ; final java.io.FileInputStream fis = new java.io.FileInputStream ( devNull ) ; org.junit.Assert.assertTrue ( ( null != ( fis.getFD ( ) ) ) ) ; org.junit.Assert.assertTrue ( fis.getFD ( ) . valid ( ) ) ; try { mNetwork.bindSocket ( fis.getFD ( ) ) ; org.junit.Assert.fail ( "SocketException not thrown" ) ; } catch ( java.net.SocketException expected ) { } }
public void testAesCbcHmacSha512Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , getAuthKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
private void setupNext ( ) { isNextLocale = false ; if ( isSpecLocale ) { nextSpec = spec ; int i = nextSpec.lastIndexOf ( android.icu.text.TransliteratorRegistry.LOCALE_SEP ) ; if ( i > 0 ) { nextSpec = spec.substring ( 0 , i ) ; isNextLocale = true ; } else { nextSpec = scriptName ; } } else { if ( ! ( android.icu.impl.Utility.sameObjects ( nextSpec , scriptName ) ) ) { nextSpec = scriptName ; } else { nextSpec = null ; } } }
private com.android.ide.eclipse.gltrace.state.IGLProperty createVboState ( ) { com.android.ide.eclipse.gltrace.state.IGLProperty size = new com.android.ide.eclipse.gltrace.state.GLIntegerProperty ( GLStateType.BUFFER_SIZE , java.lang.Integer.valueOf ( 0 ) ) ; com.android.ide.eclipse.gltrace.state.IGLProperty usage = new com.android.ide.eclipse.gltrace.state.GLEnumProperty ( GLStateType.BUFFER_USAGE , com.android.ide.eclipse.gltrace.GLEnum.GL_STATIC_DRAW ) ; com.android.ide.eclipse.gltrace.state.IGLProperty data = new com.android.ide.eclipse.gltrace.state.GLObjectProperty ( GLStateType.BUFFER_DATA , new byte [ 0 ] ) ; com.android.ide.eclipse.gltrace.state.IGLProperty type = new com.android.ide.eclipse.gltrace.state.GLEnumProperty ( GLStateType.BUFFER_TYPE , com.android.ide.eclipse.gltrace.GLEnum.GL_ARRAY_BUFFER ) ; com.android.ide.eclipse.gltrace.state.IGLProperty perVboState = new com.android.ide.eclipse.gltrace.state.GLCompositeProperty ( GLStateType.VBO_COMPOSITE , size , usage , data , type ) ; return new com.android.ide.eclipse.gltrace.state.GLSparseArrayProperty ( GLStateType.VBO , perVboState ) ; }
public void deriveValues ( java.util.Set < com.android.tools.idea.wizard.ScopedStateStore.Key > modified ) { super . deriveValues ( modified ) ; for ( com.android.tools.idea.wizard.ScopedStateStore.Key key : modified ) { if ( key == ( NewCloudModuleDynamicWizardPath.KEY_SELECTED_TEMPLATE_FILE ) ) { java.io.File templateFile = myState.get ( NewCloudModuleDynamicWizardPath.KEY_SELECTED_TEMPLATE_FILE ) ; if ( templateFile != null ) { setModuleDescriptionText ( templateFile ) ; setModuleTypeIcon ( templateFile ) ; } } } }
public final byte [ ] doFinal ( byte [ ] input , int inputOffset , int inputLen ) throws javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException { checkCipherState ( ) ; if ( ( ( ( input == null ) || ( inputOffset < 0 ) ) || ( inputLen > ( ( input.length ) - inputOffset ) ) ) || ( inputLen < 0 ) ) { throw new java.lang.IllegalArgumentException ( "Bad arguments" ) ; } updateProviderIfNeeded ( ) ; return spi.engineDoFinal ( input , inputOffset , inputLen ) ; }
static void gcAndFinalize ( ) { final dalvik.system.VMRuntime runtime = dalvik.system.VMRuntime.getRuntime ( ) ; java.lang.System.gc ( ) ; runtime.runFinalizationSync ( ) ; java.lang.System.gc ( ) ; }
public void distanceRecorder_unknownItemThrowsException ( ) { final android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > distanceRecorder = new android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > ( android.support.test.espresso.util.TreeIterablesTest.complexTree , new android.support.test.espresso.util.TreeIterablesTest.TestElementTreeViewer ( ) ) ; expectedException.expect ( java.lang.RuntimeException.class ) ; distanceRecorder.getDistance ( new android.support.test.espresso.util.TreeIterablesTest.TestElement ( "hello" ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.phonelookup.PhoneLookupInfo.DialerBlockedNumberInfo > lookup ( com.android.dialer.DialerPhoneNumber dialerPhoneNumber ) { if ( com.android.dialer.blocking.FilteredNumberCompat.useNewFiltering ( appContext ) ) { return com.google.common.util.concurrent.Futures.immediateFuture ( com.android.dialer.phonelookup.PhoneLookupInfo.DialerBlockedNumberInfo.getDefaultInstance ( ) ) ; } return executorService.submit ( ( ) -> queryNumbers ( com.google.common.collect.ImmutableSet.of ( dialerPhoneNumber ) ) . get ( dialerPhoneNumber ) ) ; }
public void invalidateCurrentNode ( ) { final com.android.hierarchyviewerlib.ui.util.DrawableViewNode selectedNode = com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . getSelection ( ) ; if ( selectedNode != null ) { executeInBackground ( "Invalidating view" , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.android.hierarchyviewerlib.device.IHvDevice hvDevice = getHvDevice ( selectedNode.viewNode.window.getDevice ( ) ) ; hvDevice.invalidateView ( selectedNode.viewNode ) ; } } ) ; } }
java.lang.String getChild ( org.eclipse.core.resources.IProject project , java.lang.String root ) { if ( ( com.android.SdkConstants.SCROLL_VIEW.equals ( root ) ) || ( com.android.SdkConstants.HORIZONTAL_SCROLL_VIEW.equals ( root ) ) ) { return ( ( " <LinearLayout " + ( getDefaultAttrs ( project , root ) . replace ( '\n' , ' ' ) ) ) + " android:orientation=\"vertical\"" ) + "></LinearLayout>\n" ; } return null ; }
public java.lang.String getApiLabel ( ) { com.android.sdklib.AndroidVersion key = ( ( com.android.sdklib.AndroidVersion ) ( getKey ( ) ) ) ; if ( key.equals ( com.android.sdkuilib.internal.repository.sdkman2.PkgCategoryApi.KEY_TOOLS ) ) { return "TOOLS" ; } else if ( key.equals ( com.android.sdkuilib.internal.repository.sdkman2.PkgCategoryApi.KEY_TOOLS_PREVIEW ) ) { return "TOOLS-PREVIEW" ; } else if ( key.equals ( com.android.sdkuilib.internal.repository.sdkman2.PkgCategoryApi.KEY_EXTRA ) ) { return "EXTRAS" ; } else { return key.toString ( ) ; } }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { com.android.jack.shrob.seed.SeedMarker marker = type.getMarker ( com.android.jack.shrob.seed.SeedMarker.class ) ; if ( ( marker != null ) && ( ( marker.getModifier ( ) ) != ( com.android.jack.shrob.spec.KeepModifier.ALLOW_SHRINKING ) ) ) { tracer.trace ( type ) ; } }
public void sendMessage ( @ android.annotation.NonNull java.lang.Object peerHandle , int messageId , @ android.annotation.Nullable byte [ ] message , int retryCount ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.aware.WifiAwareDiscoveryBaseSession.TAG , "sendMessage: called on terminated session" ) ; return ; } else { android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.aware.WifiAwareDiscoveryBaseSession.TAG , "sendMessage: called post GC on WifiAwareManager" ) ; return ; } mgr.sendMessage ( mClientId , mSessionId , peerHandle , message , messageId , retryCount ) ; } }
public void setOutlineSelection ( final java.util.List < com.android.ide.common.api.INode > nodes ) { org.eclipse.swt.widgets.Display.getDefault ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { selectDropped ( nodes ) ; syncOutlineSelection ( ) ; } } ) ; }
static < T > T pollNext ( java.util.Iterator < T > iterator ) { if ( iterator.hasNext ( ) ) { T result = iterator.next ( ) ; iterator.remove ( ) ; return result ; } else { return null ; } }
static java.lang.String pseudoToU16 ( java.lang.String input ) { int len = input.length ( ) ; char [ ] output = new char [ len ] ; int i ; if ( ! ( android.icu.dev.test.bidi.BidiFmwk.tablesInitialized ) ) { android.icu.dev.test.bidi.BidiFmwk.buildPseudoTables ( ) ; } for ( i = 0 ; i < len ; i ++ ) output [ i ] = android.icu.dev.test.bidi.BidiFmwk.pseudoToUChar [ input.charAt ( i ) ] ; return new java.lang.String ( output ) ; }
public void run ( int i ) { try ( android.database.Cursor cursor = mContentResolver.query ( Programs.CONTENT_URI , null , null , null , null ) ) { while ( cursor.moveToNext ( ) ) { } } }
public void validateCertCredentialWithoutClientPrivateKey ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithCertificateCredential ( ) ; cred.setClientPrivateKey ( null ) ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
private void addCall ( com.android.server.telecom.Call call ) { if ( mCalls.contains ( call ) ) { android.telecom.Log.w ( LOG_TAG , "Call TC@%s is being added twice." , call.getId ( ) ) ; return ; } android.telecom.Log.d ( LOG_TAG , "Call added with id TC@%s in state %s" , call.getId ( ) , com.android.server.telecom.CallState.toString ( call.getState ( ) ) ) ; if ( ( mCallStateToCalls.get ( call.getState ( ) ) ) != null ) { mCallStateToCalls.get ( call.getState ( ) ) . add ( call ) ; } updateForegroundCall ( ) ; mCalls.add ( call ) ; if ( ( mCalls.size ( ) ) == 1 ) { mBluetoothStateReceiver.setIsInCall ( true ) ; } onCallEnteringState ( call , call.getState ( ) ) ; }
public void test_engineInit_02 ( ) { org.apache.harmony.xnet.tests.support.KeyManagerFactorySpiImpl kmf = new org.apache.harmony.xnet.tests.support.KeyManagerFactorySpiImpl ( ) ; try { kmf.engineInit ( null ) ; fail ( "InvalidAlgorithmParameterException wasn't thrown" ) ; } catch ( java.security.InvalidAlgorithmParameterException iape ) { } catch ( java.lang.Exception e ) { fail ( ( e + " was thrown instead of InvalidAlgorithmParameterException" ) ) ; } try { char [ ] psw = "password" . toCharArray ( ) ; org.apache.harmony.tests.javax.net.ssl.KeyManagerFactorySpiTest.Parameters pr = new org.apache.harmony.tests.javax.net.ssl.KeyManagerFactorySpiTest.Parameters ( psw ) ; kmf.engineInit ( pr ) ; } catch ( java.lang.Exception e ) { fail ( ( e + " unexpected exception was thrown" ) ) ; } }
public boolean onCreate ( ) { android.util.Log.d ( com.android.providers.telephony.CarrierIdProvider.TAG , "onCreate" ) ; mDbHelper = new com.android.providers.telephony.CarrierIdProvider.CarrierIdDatabaseHelper ( getContext ( ) ) ; mDbHelper.getReadableDatabase ( ) ; com.android.providers.telephony.CarrierIdProvider.s_urlMatcher.addURI ( com.android.providers.telephony.CarrierIdProvider.AUTHORITY , "update_db" , com.android.providers.telephony.CarrierIdProvider.URL_UPDATE_FROM_PB ) ; initDatabaseFromPb ( mDbHelper.getWritableDatabase ( ) ) ; return true ; }
boolean matchesDescription ( org.junit.runner.Description description ) { return ( description.hashCode ( ) ) == ( uniqueMethodId.hashCode ( ) ) ; }
void startCleaningPackages ( ) { if ( ! ( isExternalMediaAvailable ( ) ) ) { return ; } synchronized ( mPackages ) { if ( mSettings.mPackagesToBeCleaned.isEmpty ( ) ) { return ; } } android.content.Intent intent = new android.content.Intent ( android.content.pm.PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE ) ; intent.setComponent ( com.android.server.pm.PackageManagerService.DEFAULT_CONTAINER_COMPONENT ) ; android.app.IActivityManager am = android.app.ActivityManagerNative.getDefault ( ) ; if ( am != null ) { try { am.startService ( null , intent , null , mContext.getOpPackageName ( ) , UserHandle.USER_SYSTEM ) ; } catch ( android.os.RemoteException e ) { } } }
private com.android.sdklib.IAndroidTarget getRenderingTarget ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk == null ) { return null ; } assert ( mConfigComposite.getDisplay ( ) . getThread ( ) ) == ( java.lang.Thread.currentThread ( ) ) ; com.android.sdklib.IAndroidTarget renderingTarget = mConfigComposite.getRenderingTarget ( ) ; if ( renderingTarget != null ) { return renderingTarget ; } if ( ( mEditedFile ) != null ) { return currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; } return null ; }
private static void assertStartsWith ( byte [ ] expectedContents , byte [ ] container ) { for ( int i = 0 ; i < ( expectedContents.length ) ; i ++ ) { if ( ( expectedContents [ i ] ) != ( container [ i ] ) ) { fail ( ( ( ( "Expected " + ( java.util.Arrays.toString ( expectedContents ) ) ) + " but found " ) + ( java.util.Arrays.toString ( expectedContents ) ) ) ) ; } } }
private boolean bbHasOnlyDefinitions ( @ javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb , @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariable var , @ javax.annotation.Nonnull java.util.List < com.android.jack.analysis.DefinitionMarker > defsToFound ) { int nbDef = 0 ; for ( com.android.jack.analysis.DefinitionMarker def : com.android.jack.util.UseDefHelper.getReachingDefs ( bb ) ) { if ( ( def.getDefinedVariable ( ) ) == var ) { if ( defsToFound.contains ( def ) ) { nbDef ++ ; } else { return false ; } } } return ( defsToFound.size ( ) ) == nbDef ; }
public android.telephony.ims.aidl.IImsConfig getConfig ( int slotId ) throws android.os.RemoteException { synchronized ( mLock ) { return mIImsServiceController.getConfig ( slotId ) ; } }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; dataOut.writeBoolean ( myIsNormalized ) ; com.intellij.updater.Patch.writeMap ( dataOut , myWarnings ) ; com.intellij.updater.Patch.writeList ( dataOut , myDeleteFiles ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
public void writeCharacteristic ( int clientIf , java.lang.String address , int handle , int writeType , int authReq , byte [ ] value ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.writeCharacteristic ( clientIf , address , handle , writeType , authReq , value ) ; }
public void onCharacteristicReadRequest ( android.bluetooth.BluetoothDevice device , int requestId , int offset , android.bluetooth.BluetoothGattCharacteristic characteristic ) { if ( ( mGattServer ) == null ) { if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) android.util.Log.d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , "GattServer is null, return" ) ; return ; } if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) android.util.Log.d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , "onCharacteristicReadRequest()" ) ; notifyCharacteristicReadRequest ( ) ; mGattServer.sendResponse ( device , requestId , BluetoothGatt.GATT_SUCCESS , 0 , characteristic.getValue ( ) ) ; }
public void setNetworkSelectionModeAutomatic ( android.os.Message response ) { com.android.internal.telephony.gsm.GSMPhone.NetworkSelectMessage nsm = new com.android.internal.telephony.gsm.GSMPhone.NetworkSelectMessage ( ) ; nsm.message = response ; nsm.operatorNumeric = "" ; nsm.operatorAlphaLong = "" ; android.os.Message msg = obtainMessage ( com.android.internal.telephony.gsm.EVENT_SET_NETWORK_AUTOMATIC_COMPLETE , nsm ) ; if ( com.android.internal.telephony.gsm.GSMPhone.LOCAL_DEBUG ) android.telephony.Rlog.d ( com.android.internal.telephony.gsm.GSMPhone.LOG_TAG , "wrapping and sending message to connect automatically" ) ; mCM.setNetworkSelectionModeAutomatic ( msg ) ; }
private static void reportTypeDef ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.Node node , @ com.android.annotations.Nullable lombok.ast.Node errorNode , boolean flag , @ com.android.annotations.NonNull java.lang.Object [ ] allowedValues ) { java.lang.String values = com.android.tools.lint.checks.SupportAnnotationDetector.listAllowedValues ( allowedValues ) ; java.lang.String message ; if ( flag ) { message = "Must be one or more of: " + values ; } else { message = "Must be one of: " + values ; } if ( errorNode == null ) { errorNode = node ; } context.report ( com.android.tools.lint.checks.SupportAnnotationDetector.TYPE_DEF , errorNode , context.getLocation ( errorNode ) , message ) ; }
public < T extends com.android.jack.ir.ast.JExpression > T cloneExpression ( @ javax.annotation.Nonnull T expr ) { expression = null ; this . accept ( expr ) ; if ( ( expression ) == null ) { throw new java.lang.AssertionError ( ( "Unable to clone expression " + expr ) ) ; } for ( com.android.sched.marker.Marker m : expr.getAllMarkers ( ) ) { expression.addMarker ( m.cloneIfNeeded ( ) ) ; } assert ( expression ) != null ; return ( ( T ) ( expression ) ) ; }
static < V > V safeGet ( java.util.Map < ? , V > map , @ javax.annotation.Nullable java.lang.Object key ) { com.google.common.base.Preconditions.checkNotNull ( map ) ; try { return map.get ( key ) ; } catch ( java.lang.ClassCastException e ) { return null ; } catch ( java.lang.NullPointerException e ) { return null ; } }
private static void printGetMethod ( java.lang.Class < ? > klass ) { java.lang.reflect.Method m ; try { m = klass.getDeclaredMethod ( "sayHi" ) ; java.lang.System.out.println ( ( "No error thrown for class " + ( klass.toString ( ) ) ) ) ; } catch ( java.lang.NoSuchMethodException e ) { java.lang.System.out.println ( ( "NoSuchMethodException thrown for class " + ( klass.toString ( ) ) ) ) ; } catch ( java.lang.Throwable t ) { java.lang.System.out.println ( ( "Unknown error thrown for class " + ( klass.toString ( ) ) ) ) ; t.printStackTrace ( java.lang.System.out ) ; } }
public android.bluetooth.BluetoothClass getBluetoothClass ( ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( service == null ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot get Bluetooth Class" ) ; return null ; } try { int classInt = service.getRemoteClass ( this ) ; if ( classInt == ( BluetoothClass.ERROR ) ) return null ; return new android.bluetooth.BluetoothClass ( classInt ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return null ; }
public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { return inputEmailField.exists ( ) ; }
public void close ( ) throws java.io.IOException { guard.close ( ) ; synchronized ( this ) { if ( ( channel ) != null ) { channel.close ( ) ; } if ( shouldClose ) { libcore.io.IoBridge.closeAndSignalBlockedThreads ( fd ) ; } else { fd = new java.io.FileDescriptor ( ) ; } } }
public android.net.IpSecTransform buildTunnelModeTransform ( @ android.annotation.NonNull java.net.InetAddress sourceAddress , @ android.annotation.NonNull android.net.IpSecManager.SecurityParameterIndex spi ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { com.android.internal.util.Preconditions.checkNotNull ( sourceAddress ) ; com.android.internal.util.Preconditions.checkNotNull ( spi ) ; if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setMode ( android.net.IpSecTransform.MODE_TUNNEL ) ; mConfig.setSourceAddress ( sourceAddress.getHostAddress ( ) ) ; mConfig.setSpiResourceId ( spi.getResourceId ( ) ) ; return new android.net.IpSecTransform ( mContext , mConfig ) ; }
public final void testHasHardwarePropHashChanged_Generic ( ) { final com.android.sdklib.devices.Device d1 = dm.getDevice ( "7in WSVGA (Tablet)" , "Generic" ) ; assertEquals ( "MD5:750a657019b49e621c42ce9a20c2cc30" , com.android.sdklib.devices.DeviceManager.hasHardwarePropHashChanged ( d1 , "invalid" ) ) ; assertEquals ( null , com.android.sdklib.devices.DeviceManager.hasHardwarePropHashChanged ( d1 , "MD5:750a657019b49e621c42ce9a20c2cc30" ) ) ; d1.getDefaultHardware ( ) . setNav ( Navigation.TRACKBALL ) ; assertEquals ( "MD5:9c4dd5018987da51f7166f139f4361a2" , com.android.sdklib.devices.DeviceManager.hasHardwarePropHashChanged ( d1 , "MD5:750a657019b49e621c42ce9a20c2cc30" ) ) ; d1.getDefaultHardware ( ) . setNav ( Navigation.NONAV ) ; assertEquals ( null , com.android.sdklib.devices.DeviceManager.hasHardwarePropHashChanged ( d1 , "MD5:750a657019b49e621c42ce9a20c2cc30" ) ) ; }
public void onFocusChanged ( final boolean focused , final int direction , final android.graphics.Rect previouslyFocusedRect ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onFocusChanged ( focused , direction , previouslyFocusedRect ) ; } } ) ; return ; } mAwContents.onFocusChanged ( focused , direction , previouslyFocusedRect ) ; }
private void generateTestManifest ( java.lang.String testPackageName , int minSdkVersion , int targetSdkVersion , java.lang.String testedPackageName , java.lang.String instrumentationRunner , java.lang.Boolean handleProfiling , java.lang.Boolean functionalTest , java.lang.String outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testPackageName , minSdkVersion , targetSdkVersion , testedPackageName , instrumentationRunner , handleProfiling , functionalTest ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public android.content.Context createDisplayContext ( android.view.Display display ) { if ( display == null ) { throw new java.lang.IllegalArgumentException ( "display must not be null" ) ; } int displayId = display.getDisplayId ( ) ; android.app.ContextImpl context = new android.app.ContextImpl ( ) ; context.init ( mPackageInfo , null , mMainThread ) ; context.mDisplay = display ; android.view.DisplayAdjustments daj = getDisplayAdjustments ( displayId ) ; context.mResources = mResourcesManager.getTopLevelResources ( mPackageInfo.getResDir ( ) , mPackageInfo.getOverlayDirs ( ) , displayId , null , daj.getCompatibilityInfo ( ) , null ) ; return context ; }
public void onDestroy ( ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.TAG , "onDestroy called" ) ; } if ( ( mHeadsetProfile ) != null ) { mAdapter.closeProfileProxy ( BluetoothProfile.HEADSET_CLIENT , mHeadsetProfile ) ; } try { unregisterReceiver ( mBroadcastReceiver ) ; } catch ( java.lang.IllegalArgumentException ex ) { android.util.Log.w ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.TAG , "Receiver was not registered." ) ; } synchronized ( this ) { mDevice = null ; if ( ( mDevicePhoneAccount ) != null ) { mTelecomManager.unregisterPhoneAccount ( mDevicePhoneAccount.getAccountHandle ( ) ) ; mDevicePhoneAccount = null ; } } }
public void enter ( ) { super . enter ( ) ; if ( ( mLastError ) != ( android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ) { transitionTo ( mInitialState ) ; } if ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG ) android.util.Log.d ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Tethered " + ( mIfaceName ) ) ) ; sendInterfaceState ( IControlsTethering.STATE_TETHERED ) ; }
public static void checkServerTrusted ( javax.net.ssl.X509TrustManager x509tm , java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.lang.String host ) throws java.security.cert.CertificateException { if ( x509tm instanceof org.conscrypt.TrustManagerImpl ) { org.conscrypt.TrustManagerImpl tm = ( ( org.conscrypt.TrustManagerImpl ) ( x509tm ) ) ; tm.checkServerTrusted ( chain , authType , host ) ; } else { x509tm.checkServerTrusted ( chain , authType ) ; } }
public void resizeDockedStack ( android.graphics.Rect dockedBounds , android.graphics.Rect tempDockedTaskBounds , android.graphics.Rect tempDockedTaskInsetBounds , android.graphics.Rect tempOtherTaskBounds , android.graphics.Rect tempOtherTaskInsetBounds ) { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "resizeDockedStack()" ) ; long ident = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( this ) { mStackSupervisor.resizeDockedStackLocked ( dockedBounds , tempDockedTaskBounds , tempDockedTaskInsetBounds , tempOtherTaskBounds , tempOtherTaskInsetBounds , com.android.server.am.ActivityStackSupervisor.PRESERVE_WINDOWS ) ; } } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } }
public void trackingEnabled_updateAppConfigMissing ( ) throws java.lang.Exception { configureTrackingEnabled ( ) ; configureReliabilityConfigSettingsOk ( ) ; configureUpdateAppPackageNameMissing ( ) ; configureDataAppPackageOk ( com.android.server.timezone.PackageTrackerTest.DATA_APP_PACKAGE_NAME ) ; try { mPackageTracker.start ( ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } mFakeIntentHelper.assertNotInitialized ( ) ; mFakeIntentHelper.assertReliabilityTriggerNotScheduled ( ) ; }
public void enter ( ) { super . enter ( ) ; setSpeakerphoneOn ( false ) ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_BLUETOOTH , mAvailableRoutes , mBluetoothRouteManager.getBluetoothAudioConnectedDevice ( ) , mBluetoothRouteManager.getConnectedDevices ( ) ) ; setSystemAudioState ( newState ) ; updateInternalCallAudioState ( ) ; }
private java.io.File createJackArchiveWithResources ( ) throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "resourcetestjack" , toolchain.getLibraryExtension ( ) ) ; toolchain.addResource ( new java.io.File ( com.android.jack.resource.ResourceTests.FILE , "rsc" ) ) ; toolchain.srcToLib ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( toolchain.getDefaultBootClasspath ( ) ) , jackAr , true , com.android.jack.resource.ResourceTests.FILE ) ; return jackAr ; }
public void test_isHidden ( ) throws java.io.IOException { org.junit.Assert.assertFalse ( provider.isHidden ( filesSetup.getDataFilePath ( ) ) ) ; try { java.nio.file.Files.setAttribute ( filesSetup.getDataFilePath ( ) , "dos:hidden" , true ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } org.junit.Assert.assertFalse ( provider.isHidden ( filesSetup.getDataFilePath ( ) ) ) ; }
public com.android.jack.test.toolchain.JackApiV03IncrementalToolchain build ( ) { java.io.File jackPrebuilt = ( com.android.jack.test.toolchain.AbstractTestTools.isPrebuiltAvailable ( "jack" ) ) ? com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "jack" ) : null ; return new com.android.jack.test.toolchain.JackApiV03IncrementalToolchain ( jackPrebuilt ) ; }
public boolean mergeProfiles ( int uid , java.lang.String packageName ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return false ; try { return mInstalld.mergeProfiles ( uid , packageName ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
private static void onSubscribeTerminated ( int subscribeId , int status ) { if ( com.android.server.wifi.aware.WifiAwareNative.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNative.TAG , ( ( ( "onSubscribeTerminated: subscribeId=" + subscribeId ) + ", status=" ) + status ) ) ; } com.android.server.wifi.aware.WifiAwareNative.sWifiAwareStateManager.onSessionTerminatedNotification ( subscribeId , ( status == ( com.android.server.wifi.aware.WifiAwareNative.AWARE_STATUS_SUCCESS ) ? android.net.wifi.aware.DiscoverySessionCallback.TERMINATE_REASON_DONE : android.net.wifi.aware.DiscoverySessionCallback.TERMINATE_REASON_FAIL ) , false ) ; }
private static java.lang.String decodeUtf8 ( byte [ ] data , int offset , int numFields ) throws com.android.internal.telephony.cdma.sms.BearerData.CodingException { return com.android.internal.telephony.cdma.sms.BearerData.decodeCharset ( data , offset , numFields , 1 , "UTF-8" ) ; }
private void loadString ( int length ) throws java.io.IOException { long id = readId ( ) ; java.lang.String string = readUTF8 ( length ) ; mStrings.put ( id , string ) ; }
public static java.lang.String formatRawPattern ( java.lang.String pattern , int min , int max , java.lang.CharSequence ... values ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String compiledPattern = android.icu.impl.SimpleFormatterImpl.compileToStringMinMaxArguments ( pattern , sb , min , max ) ; sb.setLength ( 0 ) ; return android.icu.impl.SimpleFormatterImpl.formatAndAppend ( compiledPattern , sb , null , values ) . toString ( ) ; }
private static void checkCallSuper ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.MethodDeclaration declaration , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedMethod method ) { com.android.tools.lint.client.api.JavaParser.ResolvedMethod superMethod = com.android.tools.lint.checks.CallSuperDetector.getRequiredSuperMethod ( method ) ; if ( superMethod != null ) { if ( ! ( com.android.tools.lint.checks.CallSuperDetector.SuperCallVisitor.callsSuper ( context , declaration , superMethod ) ) ) { java.lang.String methodName = method.getName ( ) ; java.lang.String message = ( "Overriding method should call `super." + methodName ) + "`" ; com.android.tools.lint.detector.api.Location location = context.getLocation ( declaration.astMethodName ( ) ) ; context.report ( com.android.tools.lint.checks.CallSuperDetector.ISSUE , declaration , location , message ) ; } } }
public void testBuildConfigFieldMerge ( ) { com.android.builder.model.ProductFlavor flavor = com.android.builder.core.DefaultProductFlavor.mergeFlavors ( mCustom2 , mCustom ) ; java.util.Map < java.lang.String , com.android.builder.model.ClassField > buildConfigFields = flavor.getBuildConfigFields ( ) ; assertEquals ( 3 , buildConfigFields.size ( ) ) ; assertEquals ( "oneValue" , buildConfigFields.get ( "one" ) . getValue ( ) ) ; assertEquals ( "twoValue" , buildConfigFields.get ( "two" ) . getValue ( ) ) ; assertEquals ( "threeValue" , buildConfigFields.get ( "three" ) . getValue ( ) ) ; }
public synchronized void acknowledgeIncomingGsmSmsWithPdu ( boolean success , java.lang.String ackPdu , android.os.Message response ) { android.telephony.Rlog.d ( com.android.internal.telephony.gsm.UsimDataDownloadCommands.TAG , ( ( ( "acknowledgeLastIncomingGsmSmsWithPdu: success=" + success ) + ", ackPDU= " ) + ackPdu ) ) ; junit.framework.Assert.assertTrue ( "unexpected call to acknowledge SMS" , mExpectingAcknowledgeGsmSms ) ; junit.framework.Assert.assertEquals ( mExpectingAcknowledgeGsmSmsSuccess , success ) ; junit.framework.Assert.assertEquals ( mExpectingAcknowledgeGsmSmsPdu , ackPdu ) ; mExpectingAcknowledgeGsmSms = false ; if ( response != null ) { android.os.AsyncResult.forMessage ( response ) ; response.sendToTarget ( ) ; } notifyAll ( ) ; }
public void testCaCertificateChangesDetected ( ) { com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig eapConfig = new com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig ( WifiEnterpriseConfig.Eap.TTLS ) . setPhase2 ( WifiEnterpriseConfig.Phase2.MSCHAPV2 ) . setIdentity ( "username" , "password" ) . setCaCerts ( new java.security.cert.X509Certificate [ ] { FakeKeys.CA_CERT0 } ) ; com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig eapConfigAddedCert = new com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig ( WifiEnterpriseConfig.Eap.TTLS ) . setPhase2 ( WifiEnterpriseConfig.Phase2.MSCHAPV2 ) . setIdentity ( "username" , "password" ) . setCaCerts ( new java.security.cert.X509Certificate [ ] { FakeKeys.CA_CERT0 , FakeKeys.CA_CERT1 } ) ; assertTrue ( com.android.server.wifi.WifiConfigurationUtil.hasEnterpriseConfigChanged ( eapConfig.enterpriseConfig , eapConfigAddedCert.enterpriseConfig ) ) ; }
public org.objectweb.asm.tree.AbstractInsnNode clone ( final java.util.Map < org.objectweb.asm.tree.LabelNode , org.objectweb.asm.tree.LabelNode > labels ) { org.objectweb.asm.tree.LookupSwitchInsnNode clone = new org.objectweb.asm.tree.LookupSwitchInsnNode ( clone ( dflt , labels ) , null , clone ( this . labels , labels ) ) ; clone.keys.addAll ( keys ) ; return clone.cloneAnnotations ( this ) ; }
public void setRingerMode ( int ringerMode , boolean checkZen ) { if ( ( mUseFixedVolume ) || ( isPlatformTelevision ( ) ) ) { return ; } if ( ( ringerMode == ( AudioManager.RINGER_MODE_VIBRATE ) ) && ( ! ( mHasVibrator ) ) ) { ringerMode = AudioManager.RINGER_MODE_SILENT ; } if ( checkZen ) { checkZen ( ringerMode ) ; } if ( ringerMode != ( getRingerMode ( ) ) ) { setRingerModeInt ( ringerMode , true ) ; broadcastRingerMode ( ringerMode ) ; } }
private void insertIndy ( java.lang.String name , java.lang.String desc , annotations.CalledByIndy callsite ) { org.objectweb.asm.Handle bsm = buildBootstrapMethodHandle ( callsite.bootstrapMethod ( ) [ 0 ] ) ; java.lang.Object [ ] bsmArgs = buildBootstrapArguments ( callsite.constantArgumentsForBootstrapMethod ( ) ) ; mv.visitInvokeDynamicInsn ( name , desc , bsm , bsmArgs ) ; }
private void broadcastPackageVerified ( int verificationId , android.net.Uri packageUri , int verificationCode , android.os.UserHandle user ) { final android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_PACKAGE_VERIFIED ) ; intent.setDataAndType ( packageUri , com.android.server.pm.PackageManagerService.PACKAGE_MIME_TYPE ) ; intent.addFlags ( Intent.FLAG_GRANT_READ_URI_PERMISSION ) ; intent.putExtra ( PackageManager.EXTRA_VERIFICATION_ID , verificationId ) ; intent.putExtra ( PackageManager.EXTRA_VERIFICATION_RESULT , verificationCode ) ; mContext.sendBroadcastAsUser ( intent , user , android.Manifest.permission.PACKAGE_VERIFICATION_AGENT ) ; }
public static void setUp ( ) throws java.lang.Exception { com.android.jack.Options options = new com.android.jack.Options ( ) ; com.android.jack.optimizations.ExpressionSimplifierTest.hooks = new com.android.sched.util.RunnableHooks ( ) ; options.checkValidity ( com.android.jack.optimizations.ExpressionSimplifierTest.hooks ) ; options.getConfigBuilder ( com.android.jack.optimizations.ExpressionSimplifierTest.hooks ) . setDebug ( ) ; com.android.sched.util.config.ThreadConfig.setConfig ( options.getConfig ( ) ) ; }
public com.android.dialer.historyitemactions.HistoryItemActionModulesBuilder addModuleForSendingTextMessage ( ) { if ( ( ( moduleInfo.getIsVoicemailCall ( ) ) || ( moduleInfo.getIsBlocked ( ) ) ) || ( android.text.TextUtils.isEmpty ( moduleInfo.getNormalizedNumber ( ) ) ) ) { return this ; } modules.add ( com.android.dialer.historyitemactions.IntentModule.newModuleForSendingTextMessage ( context , moduleInfo.getNormalizedNumber ( ) ) ) ; return this ; }
public boolean iccCloseLogicalChannel ( int channel ) { return iccCloseLogicalChannel ( getSubId ( ) , channel ) ; }
void setArg ( int index , java.lang.Object obj ) { if ( obj instanceof android.renderscript.ScriptGroup.Future ) { obj = ( ( android.renderscript.ScriptGroup.Future ) ( obj ) ) . getValue ( ) ; } mArgs [ index ] = obj ; android.renderscript.ScriptGroup.Closure.ValueAndSize vs = new android.renderscript.ScriptGroup.Closure.ValueAndSize ( mRS , obj ) ; mRS.nClosureSetArg ( getID ( mRS ) , index , vs.value , vs.size ) ; }
public boolean isDataVersionAcceptable ( byte [ ] version ) { return ( ( ( ( version [ 0 ] ) == ( android.icu.text.SpoofChecker.ConfusableDataUtils.FORMAT_VERSION ) ) || ( ( version [ 1 ] ) != 0 ) ) || ( ( version [ 2 ] ) != 0 ) ) || ( ( version [ 3 ] ) != 0 ) ; }
public byte [ ] getEncoded ( ) { try { org.bouncycastle.asn1.pkcs.PrivateKeyInfo info = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo ( new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( org.bouncycastle.asn1.oiw.OIWObjectIdentifiers.elGamalAlgorithm , new org.bouncycastle.asn1.oiw.ElGamalParameter ( elSpec.getP ( ) , elSpec.getG ( ) ) ) , new org.bouncycastle.asn1.ASN1Integer ( getX ( ) ) ) ; return info.getEncoded ( ASN1Encoding.DER ) ; } catch ( java.io.IOException e ) { return null ; } }
public java.nio.ByteBuffer putInt ( int index , int value ) { checkIsAccessible ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkIndex ( index , SizeOf.INT ) ; this . block.pokeInt ( ( ( offset ) + index ) , value , order ) ; return this ; }
public static android.content.Intent checkIntentComponent ( final android.content.ComponentName component ) { final org.hamcrest.Matcher < android.content.Intent > m = new org.hamcrest.BaseMatcher < android.content.Intent > ( ) { @ java.lang.Override public boolean matches ( java.lang.Object item ) { if ( item == null ) return false ; return com.google.common.base.Objects.equal ( ( ( android.content.Intent ) ( item ) ) . getComponent ( ) , component ) ; } @ java.lang.Override public void describeTo ( org.hamcrest.Description description ) { description.appendText ( ( ( "Intent: component=\"" + component ) + "\"" ) ) ; } } ; return org.mockito.hamcrest.MockitoHamcrest.argThat ( m ) ; }
public static java.lang.String externalFullMethodDescription ( java.lang.String internalClassName , int accessFlags , java.lang.String internalMethodName , java.lang.String internalMethodDescriptor ) { return ( ( ( ( proguard.classfile.util.ClassUtil.externalMethodAccessFlags ( accessFlags ) ) + ( proguard.classfile.util.ClassUtil.externalMethodReturnTypeAndName ( internalClassName , internalMethodName , internalMethodDescriptor ) ) ) + ( JavaConstants.METHOD_ARGUMENTS_OPEN ) ) + ( proguard.classfile.util.ClassUtil.externalMethodArguments ( internalMethodDescriptor ) ) ) + ( JavaConstants.METHOD_ARGUMENTS_CLOSE ) ; }
public void callSessionSuppServiceReceived ( android.telephony.ims.ImsCallSession session , android.telephony.ims.ImsSuppServiceNotification suppServiceInfo ) { if ( isTransientConferenceSession ( session ) ) { logi ( ( ( "callSessionSuppServiceReceived :: not supported for transient conference" + " session=" ) + session ) ) ; return ; } logi ( ( ( ( "callSessionSuppServiceReceived :: session=" + session ) + ", suppServiceInfo" ) + suppServiceInfo ) ) ; com.android.ims.ImsCall.Listener listener ; synchronized ( this ) { listener = mListener ; } if ( listener != null ) { try { listener.onCallSuppServiceReceived ( this , suppServiceInfo ) ; } catch ( java.lang.Throwable t ) { loge ( "callSessionSuppServiceReceived :: " , t ) ; } } }
private static TestFmwk.Target test_for_TestFmwk_GetTargets ( android.icu.dev.test.TestFmwk testFmwk ) { try { java.util.Locale.setDefault ( android.icu.junit.TestFmwkUtils.defaultLocale ) ; android.icu.util.TimeZone.setDefault ( android.icu.junit.TestFmwkUtils.defaultTimeZone ) ; return ( ( android.icu.dev.test.TestFmwk.Target ) ( android.icu.junit.TestFmwkUtils.getTargetsMethod.invoke ( testFmwk , new java.lang.Object [ ] { null } ) ) ) ; } catch ( java.lang.reflect.InvocationTargetException | java.lang.IllegalAccessException e ) { throw new java.lang.IllegalStateException ( ( "Problem calling getTargets(null) on " + testFmwk ) , e ) ; } }
public boolean p2pGroupRemove ( java.lang.String iface ) { if ( android.text.TextUtils.isEmpty ( iface ) ) return false ; if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.groupRemove ( iface ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " P2P_GROUP_REMOVE " ) + iface ) ) ; } } }
private void setNotification ( android.bluetooth.BluetoothGattCharacteristic characteristic , boolean enable ) { if ( characteristic != null ) { mBluetoothGatt.setCharacteristicNotification ( characteristic , enable ) ; android.bluetooth.BluetoothGattDescriptor descriptor = characteristic.getDescriptor ( com.android.cts.verifier.bluetooth.BleClientService.UPDATE_DESCRIPTOR_UUID ) ; if ( enable ) { if ( characteristic.getUuid ( ) . equals ( com.android.cts.verifier.bluetooth.BleClientService.INDICATE_CHARACTERISTIC_UUID ) ) { descriptor.setValue ( BluetoothGattDescriptor.ENABLE_INDICATION_VALUE ) ; } else { descriptor.setValue ( BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE ) ; } } else { descriptor.setValue ( BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE ) ; } mBluetoothGatt.writeDescriptor ( descriptor ) ; } }
public void test_hasNextLString ( ) throws java.io.IOException { s = new java.util.Scanner ( "aab@2@abb@" ) . useDelimiter ( "\\@" ) ; try { s.hasNext ( ( ( java.lang.String ) ( null ) ) ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } s = new java.util.Scanner ( "aab*b*" ) . useDelimiter ( "\\*" ) ; assertTrue ( s.hasNext ( "a+b" ) ) ; assertEquals ( "aab" , s.next ( "a+b" ) ) ; assertFalse ( s.hasNext ( "a+b" ) ) ; try { s.next ( "a+b" ) ; fail ( ) ; } catch ( java.util.InputMismatchException expected ) { } s.close ( ) ; try { s.hasNext ( "a+b" ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } s = new java.util.Scanner ( "WORD ? " ) ; assertTrue ( s.hasNext ( "\\w+" ) ) ; assertEquals ( "WORD" , s.next ( "\\w+" ) ) ; assertFalse ( s.hasNext ( "\\w+" ) ) ; try { s.next ( "\\w+" ) ; fail ( ) ; } catch ( java.util.InputMismatchException expected ) { } s = new java.util.Scanner ( "word1 word2 " ) ; assertEquals ( "word1" , s.next ( "\\w+" ) ) ; assertEquals ( "word2" , s.next ( "\\w+" ) ) ; try { s.next ( "\\w+" ) ; fail ( ) ; } catch ( java.util.NoSuchElementException expected ) { } os.write ( "aab 2" . getBytes ( ) ) ; serverSocket.close ( ) ; s = new java.util.Scanner ( client ) ; assertTrue ( s.hasNext ( "a*b" ) ) ; assertEquals ( "aab" , s.next ( "a*b" ) ) ; assertFalse ( s.hasNext ( "a*b" ) ) ; try { s.next ( "a*b" ) ; fail ( ) ; } catch ( java.util.InputMismatchException expected ) { } }
public com.android.builder.core.VariantConfiguration addProductFlavor ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.CoreProductFlavor productFlavor , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider , @ com.android.annotations.NonNull java.lang.String dimensionName ) { com.google.common.base.Preconditions.checkNotNull ( productFlavor ) ; com.google.common.base.Preconditions.checkNotNull ( sourceProvider ) ; com.google.common.base.Preconditions.checkNotNull ( dimensionName ) ; super . addProductFlavor ( productFlavor , sourceProvider , dimensionName ) ; computeNdkConfig ( ) ; return this ; }
public int dexOptSecondaryDexPath ( android.content.pm.ApplicationInfo info , java.lang.String path , com.android.server.pm.dex.PackageDexUsage.DexUseInfo dexUseInfo , com.android.server.pm.dex.DexoptOptions options ) { synchronized ( mInstallLock ) { final long acquireTime = acquireWakeLockLI ( info.uid ) ; try { return dexOptSecondaryDexPathLI ( info , path , dexUseInfo , options ) ; } finally { releaseWakeLockLI ( acquireTime ) ; } } }
public java.lang.String getStringValue ( ) { if ( ( mValue ) != null ) { return mValue.getDisplayValue ( ) ; } return "" ; }
private android.support.test.uiautomator.UiObject findEjectIcon ( java.lang.String rootLabel ) throws android.support.test.uiautomator.UiObjectNotFoundException { final android.support.test.uiautomator.UiSelector rootsList = findRootListSelector ( ) ; revealRoot ( rootsList , rootLabel ) ; final android.support.test.uiautomator.UiScrollable rootsListObject = new android.support.test.uiautomator.UiScrollable ( rootsList ) ; final android.support.test.uiautomator.UiObject rootItem = rootsListObject.getChildByText ( new android.support.test.uiautomator.UiSelector ( ) . className ( "android.widget.LinearLayout" ) , rootLabel , false ) ; final android.support.test.uiautomator.UiSelector ejectIcon = new android.support.test.uiautomator.UiSelector ( ) . resourceId ( "com.android.documentsui:id/eject_icon" ) ; return new android.support.test.uiautomator.UiObject ( rootItem.getSelector ( ) . childSelector ( ejectIcon ) ) ; }
static int log10Floor ( long x ) { int y = com.google.common.math.LongMath.maxLog10ForLeadingZeros [ java.lang.Long.numberOfLeadingZeros ( x ) ] ; return y - ( com.google.common.math.LongMath.lessThanBranchFree ( x , com.google.common.math.LongMath.powersOf10 [ y ] ) ) ; }
public void throwing ( java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.Throwable thrown ) { if ( ! ( isLoggable ( java.util.logging.Level.FINER ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( java.util.logging.Level.FINER , "THROW" ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setThrown ( thrown ) ; doLog ( lr ) ; }
boolean updateOrientationFromAppTokensLocked ( boolean inTransaction ) { long ident = android.os.Binder.clearCallingIdentity ( ) ; try { int req = getOrientationLocked ( ) ; if ( req != ( mForcedAppOrientation ) ) { mForcedAppOrientation = req ; mPolicy.setCurrentOrientationLw ( req ) ; if ( updateRotationUncheckedLocked ( inTransaction ) ) { return true ; } } return false ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } }
private void addCanonicalItems ( ) { com.ibm.icu.text.DateTimePatternGenerator.PatternInfo patternInfo = new com.ibm.icu.text.DateTimePatternGenerator.PatternInfo ( ) ; for ( int i = 0 ; i < ( com.ibm.icu.text.DateTimePatternGenerator.CANONICAL_ITEMS.length ) ; ++ i ) { addPattern ( java.lang.String.valueOf ( com.ibm.icu.text.DateTimePatternGenerator.CANONICAL_ITEMS [ i ] ) , false , patternInfo ) ; } }
public void testAdbInstallFile ( ) throws java.lang.Exception { final java.util.List < java.lang.String > output = android.appsecurity.cts.AppSecurityTests.AdbOutputReader.getOutput ( 5000L , new java.lang.String [ ] { "adb" , "-s" , getDevice ( ) . getSerialNumber ( ) , "shell" , "cmd" , "package" , "install" , "-S" , "1024" , "/data/local/tmp/foo.apk" } ) ; assertEquals ( "Line count" , 1 , output.size ( ) ) ; assertEquals ( "Error text" , "Error: APK content must be streamed" , output.get ( 0 ) ) ; }
public java.lang.Object [ ] getChildren ( java.lang.Object parentElement ) { if ( ( parentElement instanceof com.android.ddmlib.IDevice ) && ( doTreeViewStuff ) ) { com.android.hierarchyviewerlib.device.Window [ ] list = model.getWindows ( ( ( com.android.ddmlib.IDevice ) ( parentElement ) ) ) ; if ( list != null ) { return list ; } } return new java.lang.Object [ 0 ] ; }
protected void doOKAction ( ) { final org.jetbrains.plugins.github.util.GithubSettings settings = org.jetbrains.plugins.github.util.GithubSettings.getInstance ( ) ; settings.setAnonymousGist ( myGithubCreateGistPanel.isAnonymous ( ) ) ; settings.setOpenInBrowserGist ( myGithubCreateGistPanel.isOpenInBrowser ( ) ) ; settings.setPrivateGist ( myGithubCreateGistPanel.isPrivate ( ) ) ; super . doOKAction ( ) ; }
public boolean onError ( android.media.MediaPlayer mp , int newWhat , int extra ) { android.util.Log.i ( android.security.cts.StagefrightTest.TAG , ( ( ( "error: " + newWhat ) + "/" ) + extra ) ) ; if ( ( what ) != ( android.media.MediaPlayer.MEDIA_ERROR_SERVER_DIED ) ) { what = newWhat ; } lock.lock ( ) ; condition.signal ( ) ; lock.unlock ( ) ; return true ; }
public java.util.Set < K > keySet ( ) { java.util.Set < K > result = keySet ; return result == null ? keySet = createKeySet ( ) : result ; }
public void sendDialerSpecialCode ( java.lang.String callingPackage , java.lang.String inputCode ) { mAppOps.checkPackage ( android.os.Binder.getCallingUid ( ) , callingPackage ) ; java.lang.String defaultDialer = android.telecom.TelecomManager.from ( mPhone.getContext ( ) ) . getDefaultDialerPackage ( ) ; if ( ! ( android.text.TextUtils.equals ( callingPackage , defaultDialer ) ) ) { com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfCarrierPrivilege ( getDefaultSubscription ( ) , "sendDialerSpecialCode" ) ; } mPhone.sendDialerSpecialCode ( inputCode ) ; }
public synchronized void close ( int cause ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( ( ( "Closing call " + ( mCurrentCall ) ) + "state: " ) + ( mClosed ) ) ) ; } if ( mClosed ) { return ; } android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( ( ( "Setting " + ( mCurrentCall ) ) + " to disconnected " ) + ( getTelecomCallId ( ) ) ) ) ; setDisconnected ( new android.telecom.DisconnectCause ( cause ) ) ; mClosed = true ; mCurrentCall = null ; destroy ( ) ; }
private void stopRtt ( java.lang.String callId ) { android.telecom.Log.d ( this , "stopRtt(%s)" , callId ) ; if ( mConnectionById.containsKey ( callId ) ) { findConnectionForAction ( callId , "stopRtt" ) . onStopRtt ( ) ; findConnectionForAction ( callId , "stopRtt" ) . unsetRttProperty ( ) ; } else if ( mConferenceById.containsKey ( callId ) ) { android.telecom.Log.w ( this , "stopRtt called on a conference." ) ; } }
public boolean removeTask ( int taskId ) { enforceCallingPermission ( android.Manifest.permission.REMOVE_TASKS , "removeTask()" ) ; synchronized ( this ) { final long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return removeTaskByIdLocked ( taskId , true , com.android.server.am.ActivityManagerService.REMOVE_FROM_RECENTS ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public static java.io.BufferedOutputStream open ( java.lang.String path ) throws java.io.FileNotFoundException { java.io.File file = com.google.android.droiddriver.util.FileUtils.getAbsoluteFile ( path ) ; com.google.android.droiddriver.util.Logs.log ( Log.INFO , ( "opening file " + ( file.getAbsolutePath ( ) ) ) ) ; java.io.BufferedOutputStream stream = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( file ) ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.GINGERBREAD ) ) { file.setReadable ( true , false ) ; file.setWritable ( true , false ) ; } return stream ; }
public static void start ( ) { if ( ! ( com.android.internal.os.SamplingProfilerIntegration.enabled ) ) { return ; } if ( ( com.android.internal.os.SamplingProfilerIntegration.samplingProfiler ) != null ) { android.util.Log.e ( com.android.internal.os.SamplingProfilerIntegration.TAG , ( "SamplingProfilerIntegration already started at " + ( new java.util.Date ( com.android.internal.os.SamplingProfilerIntegration.startMillis ) ) ) ) ; return ; } java.lang.ThreadGroup group = java.lang.Thread.currentThread ( ) . getThreadGroup ( ) ; dalvik.system.profiler.SamplingProfiler.ThreadSet threadSet = dalvik.system.profiler.SamplingProfiler.newThreadGroupThreadSet ( group ) ; com.android.internal.os.SamplingProfilerIntegration.samplingProfiler = new dalvik.system.profiler.SamplingProfiler ( com.android.internal.os.SamplingProfilerIntegration.samplingProfilerDepth , threadSet ) ; com.android.internal.os.SamplingProfilerIntegration.samplingProfiler.start ( com.android.internal.os.SamplingProfilerIntegration.samplingProfilerMilliseconds ) ; com.android.internal.os.SamplingProfilerIntegration.startMillis = java.lang.System.currentTimeMillis ( ) ; }
protected void finalize ( ) { if ( ( ( mSelfObserver ) != null ) && ( ( mSelfObserverRegistered ) == true ) ) { mContentResolver.unregisterContentObserver ( mSelfObserver ) ; } try { if ( ! ( mClosed ) ) close ( ) ; } catch ( java.lang.Exception e ) { } }
public void waitToFinishRendering ( ) throws java.lang.InterruptedException { mNativeRendererInitialized.acquire ( ) ; if ( ! ( android.graphics.cts.CameraGpuCtsActivity.nIsCameraReady ( mNativeRenderer ) ) ) { return ; } if ( ! ( mFinishedRendering.await ( 30 , java.util.concurrent.TimeUnit.SECONDS ) ) ) { throw new java.lang.IllegalStateException ( "Coudn't finish drawing frames!" ) ; } }
public java.lang.String getConfigString ( int item ) throws com.android.ims.ImsException { java.lang.String ret = "Unknown" ; try { ret = miConfig.getConfigString ( item ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getConfigString()" , e , ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } if ( DBG ) android.telephony.Rlog.d ( com.android.ims.ImsConfig.TAG , ( ( ( "getConfigString(): item = " + item ) + ", ret =" ) + ret ) ) ; return ret ; }
private static void registerDefaultProviders ( ) { java.security.Security.secprops.put ( "security.provider.1" , "com.android.org.conscrypt.OpenSSLProvider" ) ; java.security.Security.secprops.put ( "security.provider.2" , "org.apache.harmony.security.provider.cert.DRLCertFactory" ) ; java.security.Security.secprops.put ( "security.provider.3" , "com.android.org.bouncycastle.jce.provider.BouncyCastleProvider" ) ; java.security.Security.secprops.put ( "security.provider.4" , "org.apache.harmony.security.provider.crypto.CryptoProvider" ) ; java.security.Security.secprops.put ( "security.provider.5" , "com.android.org.conscrypt.JSSEProvider" ) ; }
public boolean matchesSafely ( java.util.EventObject item , org.hamcrest.Description mismatchDescription ) { if ( ! ( eventClass.isInstance ( item ) ) ) { mismatchDescription.appendText ( ( "item type was " + ( item.getClass ( ) . getName ( ) ) ) ) ; return false ; } if ( ! ( eventHasSameSource ( item ) ) ) { mismatchDescription.appendText ( "source was " ) . appendValue ( item.getSource ( ) ) ; return false ; } return true ; }
protected void sendSms ( java.lang.String text , android.app.PendingIntent sentIntent ) { com.android.voicemail.impl.VvmLog.v ( com.android.voicemail.impl.sms.OmtpMessageSender.TAG , java.lang.String.format ( "Sending sms '%s' to %s:%d" , text , destinationNumber , applicationPort ) ) ; context.getSystemService ( android.telephony.TelephonyManager.class ) . createForPhoneAccountHandle ( phoneAccountHandle ) . sendVisualVoicemailSms ( destinationNumber , applicationPort , text , sentIntent ) ; }
private static android.net.Uri createDraftMmsMessage ( com.google.android.mms.pdu.PduPersister persister , com.google.android.mms.pdu.SendReq sendReq , com.android.mms.model.SlideshowModel slideshow , android.net.Uri preUri ) { if ( slideshow == null ) { return null ; } try { com.google.android.mms.pdu.PduBody pb = slideshow.toPduBody ( ) ; sendReq.setBody ( pb ) ; android.net.Uri res = persister.persist ( sendReq , ( preUri == null ? Mms.Draft.CONTENT_URI : preUri ) ) ; slideshow.sync ( pb ) ; return res ; } catch ( com.google.android.mms.MmsException e ) { return null ; } }
private static org.objectweb.asm.tree.MethodNode getFirstRealMethod ( @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode ) { if ( ( classNode.methods ) != null ) { @ java.lang.SuppressWarnings ( value = "rawtypes" ) java.util.List methods = classNode.methods ; for ( java.lang.Object m : methods ) { org.objectweb.asm.tree.MethodNode method = ( ( org.objectweb.asm.tree.MethodNode ) ( m ) ) ; if ( ( method.name.charAt ( 0 ) ) != '<' ) { return method ; } } if ( ! ( classNode.methods.isEmpty ( ) ) ) { return ( ( org.objectweb.asm.tree.MethodNode ) ( classNode.methods.get ( 0 ) ) ) ; } } return null ; }
public void testDisabled ( ) throws org.json.JSONException { android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "reason" , WifiAwareNative.AWARE_STATUS_DE_FAILURE ) ; com.android.server.wifi.aware.WifiAwareHalMock.callDisabled ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mAwareStateManager ) . onAwareDownNotification ( WifiAwareNative.AWARE_STATUS_DE_FAILURE ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
private static void test_String_charAtExc2 ( java.lang.String testStr ) { try { Main.test_String_charAtExc3 ( testStr ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.StringIndexOutOfBoundsException expected ) { } try { Main.test_String_charAtExc4 ( testStr ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.StringIndexOutOfBoundsException expected ) { } }
void assertDisconnectReason ( final android.telecom.Connection connection , final java.lang.String disconnectReason ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return disconnectReason ; } @ java.lang.Override public java.lang.Object actual ( ) { return connection.getDisconnectCause ( ) . getReason ( ) ; } } , android.telecom.cts.TestUtils.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( "Connection should have been disconnected with reason: " + disconnectReason ) ) ; }
public android.webkit.WebBackForwardList copyBackForwardList ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.webkit.WebBackForwardList ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.webkit.WebBackForwardList > ( ) { @ java.lang.Override public android.webkit.WebBackForwardList call ( ) { return copyBackForwardList ( ) ; } } ) ; return ret ; } return new com.android.webview.chromium.WebBackForwardListChromium ( mAwContents.getNavigationHistory ( ) ) ; }
public void createConnectionFailed ( android.telecom.PhoneAccountHandle connectionManagerPhoneAccount , java.lang.String callId , android.telecom.ConnectionRequest request , boolean isIncoming , android.telecom.Logging.Session.Info sessionInfo ) throws android.os.RemoteException { android.telecom.Log.i ( this , ( "createConnectionFailed --> " + callId ) ) ; if ( mConnectionById.containsKey ( callId ) ) { throw new java.lang.RuntimeException ( ( "Connection already exists: " + callId ) ) ; } }
public java.io.File getTestsDir ( ) throws java.io.FileNotFoundException { return testDir ; }
public void onReceivedLoginRequest ( java.lang.String realm , java.lang.String account , java.lang.String args ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onReceivedLoginRequest" ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , ( "onReceivedLoginRequest=" + realm ) ) ; mWebViewClient.onReceivedLoginRequest ( mWebView , realm , account , args ) ; } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onReceivedLoginRequest" ) ; } }
public void test_setInput$B ( ) { byte [ ] byteArray = new byte [ ] { 2 , 3 , 4 , 't' , 'y' , 'u' , 'e' , 'w' , 7 , 6 , 5 , 9 } ; java.util.zip.Inflater inflate = new java.util.zip.Inflater ( ) ; inflate.setInput ( byteArray ) ; assertTrue ( "setInputB did not deliver any byte to the input buffer" , ( ( inflate.getRemaining ( ) ) != 0 ) ) ; inflate.end ( ) ; }
private void updateCapabilities ( com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData ) { if ( targetData != null ) { com.android.ide.common.layoutlib.LayoutLibrary layoutLib = targetData.getLayoutLibrary ( ) ; setClippingSupport ( layoutLib.supports ( Capability.UNBOUND_RENDERING ) ) ; if ( ( ( mIncludedWithin ) != null ) && ( ! ( layoutLib.supports ( Capability.EMBEDDED_LAYOUT ) ) ) ) { showIn ( null ) ; } } }
protected boolean doCheckState ( ) { if ( ! ( super . doCheckState ( ) ) ) { setErrorMessage ( Messages.NDKPreferencePage_not_a_valid_directory ) ; return false ; } java.lang.String dirname = getTextControl ( ) . getText ( ) . trim ( ) ; if ( ( ! ( dirname.isEmpty ( ) ) ) && ( ! ( com.android.ide.eclipse.ndk.internal.NdkManager.isValidNdkLocation ( dirname ) ) ) ) { setErrorMessage ( Messages.NDKPreferencePage_not_a_valid_NDK_directory ) ; return false ; } return true ; }
public java.lang.String chooseClientAlias ( javax.net.ssl.X509KeyManager keyManager , javax.security.auth.x500.X500Principal [ ] issuers , java.lang.String [ ] keyTypes ) { return keyManager.chooseClientAlias ( keyTypes , null , this ) ; }
public void getAllowedCarriers ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_GET_ALLOWED_CARRIERS , response ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) { riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; } send ( rr ) ; }
public void setData ( com.android.ddmlib.IDevice device , com.android.ddmlib.RawImage image , com.android.hierarchyviewerlib.device.ViewNode viewNode ) { synchronized ( this ) { this . device = device ; this . image = image ; this . viewNode = viewNode ; if ( image != null ) { this . crosshairLocation = new com.android.hierarchyviewerlib.models.PixelPerfectModel.Point ( ( ( image.width ) / 2 ) , ( ( image.height ) / 2 ) ) ; } else { this . crosshairLocation = null ; } this . selected = null ; zoom = com.android.hierarchyviewerlib.models.PixelPerfectModel.DEFAULT_ZOOM ; } notifyImageLoaded ( ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock jCatchBlock ) { com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = jCatchBlock.getSourceInfo ( ) ; com.android.jack.ir.ast.JLocalRef localRef = jCatchBlock.getCatchVar ( ) . makeRef ( sourceInfo ) ; com.android.jack.ir.ast.JAsgOperation assign = new com.android.jack.ir.ast.JAsgOperation ( sourceInfo , localRef , new com.android.jack.ir.ast.JExceptionRuntimeValue ( sourceInfo , ( ( com.android.jack.ir.ast.JClassOrInterface ) ( localRef.getType ( ) ) ) ) ) ; tr.append ( new com.android.jack.transformations.request.PrependStatement ( jCatchBlock , assign.makeStatement ( ) ) ) ; return super . visit ( jCatchBlock ) ; }
public static void cancelNotification ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull android.telecom.PhoneAccountHandle phoneAccountHandle ) { com.android.dialer.common.LogUtil.enterBlock ( "LegacyVoicemailNotifier.cancelNotification" ) ; com.android.dialer.common.Assert.checkArgument ( android.support.v4.os.BuildCompat.isAtLeastO ( ) ) ; com.android.dialer.common.Assert.isNotNull ( phoneAccountHandle ) ; if ( "null" . equals ( phoneAccountHandle.getId ( ) ) ) { com.android.dialer.common.LogUtil.i ( "LegacyVoicemailNotifier.cancelNotification" , "'null' id, canceling all legacy voicemail notifications" ) ; com.android.dialer.notification.DialerNotificationManager.cancelAll ( context , com.android.dialer.app.calllog.LegacyVoicemailNotifier.NOTIFICATION_TAG ) ; } else { com.android.dialer.notification.DialerNotificationManager.cancel ( context , com.android.dialer.app.calllog.LegacyVoicemailNotifier.getNotificationTag ( context , phoneAccountHandle ) , com.android.dialer.app.calllog.LegacyVoicemailNotifier.NOTIFICATION_ID ) ; } }
public void testGetPath_ApiAndApiClassResourceSet ( ) { initializePsiClass ( "\"res1\"" , "\"res2\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.idea.appengine.validation.RestSignatureInspection inspection = new com.google.gct.idea.appengine.validation.RestSignatureInspection ( ) ; java.lang.String path = inspection.getPath ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "res2" , path ) ; }
private java.lang.String dumpEntry ( int offset ) { if ( com.android.tools.lint.checks.TypoLookup.DEBUG_SEARCH ) { int end = offset ; while ( ( mData [ end ] ) != 0 ) { end ++ ; } return new java.lang.String ( mData , offset , ( end - offset ) , com.google.common.base.Charsets.UTF_8 ) ; } else { return "<disabled>" ; } }
private void copy1DRangeFromUnchecked ( int off , int count , java.lang.Object array , android.support.v8.renderscript.Element.DataType dt , int arrayLen ) { final int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( arrayLen * ( dt.mSize ) ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , array , dataSize , dt ) ; }
public void testFilteredOutBuildType ( ) throws java.lang.Exception { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject ( com.android.build.gradle.model.AndroidProjectTest.FOLDER_TEST_SAMPLE , "filteredOutBuildType" ) ; com.android.builder.model.AndroidProject model = projectData.model ; assertEquals ( "Variant Count" , 1 , model.getVariants ( ) . size ( ) ) ; com.android.builder.model.Variant variant = model.getVariants ( ) . iterator ( ) . next ( ) ; assertEquals ( "Variant name" , "release" , variant.getBuildType ( ) ) ; }
public static void onWebViewProviderChanged ( android.content.pm.PackageInfo packageInfo , android.content.pm.ApplicationInfo originalAppInfo ) { synchronized ( android.webkit.WebViewZygote.sLock ) { android.webkit.WebViewZygote.sPackage = packageInfo ; android.webkit.WebViewZygote.sPackageOriginalAppInfo = originalAppInfo ; if ( ! ( android.webkit.WebViewZygote.sMultiprocessEnabled ) ) { return ; } android.webkit.WebViewZygote.stopZygoteLocked ( ) ; } }
protected boolean stop ( ) { com.android.bluetooth.hdp.HealthService.setHealthService ( null ) ; if ( ( mHandler ) != null ) { mHandler.removeCallbacksAndMessages ( null ) ; android.os.Looper looper = mHandler.getLooper ( ) ; if ( looper != null ) { looper.quit ( ) ; } } cleanupApps ( ) ; return true ; }
private static void assertFormatEquals ( android.text.format.Time t , java.lang.String formatArg , java.lang.String expected ) { assertEquals ( expected , t.format ( formatArg ) ) ; }
public static void write ( java.io.FileDescriptor fd , byte [ ] bytes , int byteOffset , int byteCount ) throws java.io.IOException { libcore.util.ArrayUtils.throwsIfOutOfBounds ( bytes.length , byteOffset , byteCount ) ; if ( byteCount == 0 ) { return ; } try { while ( byteCount > 0 ) { int bytesWritten = Libcore.os.write ( fd , bytes , byteOffset , byteCount ) ; byteCount -= bytesWritten ; byteOffset += bytesWritten ; } } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } }
public java.util.List < android.bluetooth.BluetoothDevice > bluetoothGetConnectedDevicesOnProfile ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "profileId" , description = "profileId same as BluetoothProfile" ) java.lang.Integer profileId ) { android.bluetooth.BluetoothProfile profile = null ; switch ( profileId ) { case android.bluetooth.BluetoothProfile.A2DP_SINK : return mA2dpSinkProfile.bluetoothA2dpSinkGetConnectedDevices ( ) ; case android.bluetooth.BluetoothProfile.HEADSET_CLIENT : return mHfpClientProfile.bluetoothHfpClientGetConnectedDevices ( ) ; case android.bluetooth.BluetoothProfile.PBAP_CLIENT : return mPbapClientProfile.bluetoothPbapClientGetConnectedDevices ( ) ; case android.bluetooth.BluetoothProfile.MAP_CLIENT : return mMapClientProfile.bluetoothMapClientGetConnectedDevices ( ) ; default : com.googlecode.android_scripting.Log.w ( ( ( "Profile id " + profileId ) + " is not yet supported." ) ) ; return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; } }
private static void testAllClassesQuery ( com.android.tools.perflib.heap.Snapshot snapshot ) { java.util.Map < java.lang.String , java.util.Set < com.android.tools.perflib.heap.ClassObj > > allClasses = com.android.tools.perflib.heap.Queries.allClasses ( snapshot ) ; for ( java.lang.String thePackage : allClasses.keySet ( ) ) { java.lang.System.out.println ( ( "------------------- " + thePackage ) ) ; java.util.Set < com.android.tools.perflib.heap.ClassObj > classes = allClasses.get ( thePackage ) ; for ( com.android.tools.perflib.heap.ClassObj theClass : classes ) { java.lang.System.out.println ( ( " " + ( theClass.mClassName ) ) ) ; } } }
private void readProgramHeaders ( long phOffset , int phNumber , int phSize ) throws java.io.IOException { for ( int i = 0 ; i < phNumber ; i ++ ) { final long baseOffset = phOffset + ( i * phSize ) ; final long type = readWord ( baseOffset ) ; if ( type == ( android.os.cts.ReadElf.PT_LOAD ) ) { final long virtAddress = readWord ( ( baseOffset + ( ( mHalfWordSize ) * ( android.os.cts.ReadElf.PHOFF_VADDR ) ) ) ) ; if ( virtAddress == 0 ) { mIsPIE = true ; } } } }
public static com.android.jack.dx.rop.code.SourcePosition getSourcePosition ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode stmt ) { if ( ( stmt.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return com.android.jack.dx.rop.code.SourcePosition.NO_INFO ; } return new com.android.jack.dx.rop.code.SourcePosition ( new com.android.jack.dx.rop.cst.CstString ( stmt.getSourceInfo ( ) . getFileName ( ) ) , ( - 1 ) , stmt.getSourceInfo ( ) . getStartLine ( ) ) ; }
public void test_EmptyMap_computeIfPresent ( ) { try { java.util.Collections.emptyMap ( ) . computeIfPresent ( 1 , ( k , v ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void mouseUp ( org.eclipse.swt.events.MouseEvent e ) { mPressInPropSheet = false ; }
public com.android.jack.ir.ast.JParameterRef exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) { assert ( sourceInfo ) != null ; assert ( localId ) != null ; com.android.jack.ir.ast.JParameterRef jRef = JParameterUnresolved.INSTANCE.makeRef ( sourceInfo.exportAsJast ( exportSession ) ) ; exportSession.getParameterResolver ( ) . addLink ( localId , new com.android.jack.jayce.linker.ParameterRefLinker ( jRef ) ) ; return jRef ; }
public void test_bind_unresolvedAddress ( ) throws java.io.IOException { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open ( ) ; try { dc.socket ( ) . bind ( new java.net.InetSocketAddress ( "unresolvedname" , 31415 ) ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } assertTrue ( dc.isOpen ( ) ) ; assertFalse ( dc.isConnected ( ) ) ; dc.close ( ) ; }
public synchronized void maybeInit ( ) { if ( initialized ) { return ; } initialized = true ; if ( ( zipDir ) == null ) { return ; } try { urlHandler = new libcore.io.ClassPathURLStreamHandler ( path.getPath ( ) ) ; } catch ( java.io.IOException ioe ) { java.lang.System.logE ( ( "Unable to open zip file: " + ( path ) ) , ioe ) ; urlHandler = null ; } }
public synchronized java.util.Iterator < java.lang.Object > iterator ( ) { return com.google.common.collect.Iterators.forArray ( java.lang.Integer.valueOf ( getCount ( ) ) , java.lang.Integer.valueOf ( getNaNCount ( ) ) , java.lang.Double.valueOf ( getTotal ( ) ) , java.lang.Double.valueOf ( getMin ( ) ) , java.lang.Double.valueOf ( getAverage ( ) ) , java.lang.Double.valueOf ( getMax ( ) ) , getMinObject ( ) , getMaxObject ( ) ) ; }
public void tearDown ( com.android.tradefed.invoker.IInvocationContext context , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ( mVenvDir ) != null ) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete ( mVenvDir.toPath ( ) ) ; com.android.tradefed.log.LogUtil.CLog.i ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; } catch ( java.io.IOException exception ) { com.android.tradefed.log.LogUtil.CLog.e ( "Failed to delete %s: %s" , mVenvDir , exception ) ; } mVenvDir = null ; } }
public boolean isTtySupported ( java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.iTS" ) ; if ( ! ( canReadPhoneState ( callingPackage , "hasVoiceMailNumber" ) ) ) { return false ; } synchronized ( mLock ) { return mCallsManager.isTtySupported ( ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void readContent ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl in ) throws java.io.IOException { modifiers = in.readInt ( ) ; type = in.readId ( ) ; name = in.readId ( ) ; initialValue = in.readNode ( com.android.jack.jayce.v0002.nodes.NLiteral.class ) ; ordinal = in.readInt ( ) ; annotations = in.readNodes ( com.android.jack.jayce.v0002.nodes.NAnnotation.class ) ; markers = in.readNodes ( com.android.jack.jayce.v0002.nodes.NMarker.class ) ; }
public void onDraw ( final android.graphics.Canvas canvas ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onDraw ( canvas ) ; } } ) ; return ; } mAwContents.onDraw ( canvas ) ; }
static < D extends java.lang.reflect.GenericDeclaration > java.lang.reflect.TypeVariable < D > newArtificialTypeVariable ( D declaration , java.lang.String name , java.lang.reflect.Type ... bounds ) { return new com.google.common.reflect.Types.TypeVariableImpl < D > ( declaration , name , ( ( bounds.length ) == 0 ? new java.lang.reflect.Type [ ] { java.lang.Object.class } : bounds ) ) ; }
private void emitTypeIndex ( com.android.jack.dx.rop.type.Type type ) throws java.io.IOException { if ( ( type == null ) || ( ( file ) == null ) ) { output.writeUleb128 ( 0 ) ; } else { output.writeUleb128 ( ( 1 + ( file.getTypeIds ( ) . indexOf ( type ) ) ) ) ; } if ( com.android.jack.dx.dex.file.DebugInfoEncoder.DEBUG ) { java.lang.System.err.printf ( "Emit type %s\n" , ( type == null ? "<null>" : type.toHuman ( ) ) ) ; } }
private void targetModeChanged ( ) { updateLaunchConfigurationDialog ( ) ; boolean auto = mAutoTargetButton.getSelection ( ) ; mPreferredAvdSelector.setEnabled ( auto ) ; mPreferredAvdLabel.setEnabled ( auto ) ; boolean all = mAllDevicesTargetButton.getSelection ( ) ; mDeviceTypeCombo.setEnabled ( all ) ; }
private void copyTo ( java.lang.Object array , android.renderscript.Element.DataType dt , int arrayLen ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyTo" ) ; mRS.validate ( ) ; boolean usePadding = false ; if ( ( mAutoPadding ) && ( ( mType.getElement ( ) . getVectorSize ( ) ) == 3 ) ) { usePadding = true ; } mRS.nAllocationRead ( getID ( mRS ) , array , dt , mType.mElement.mType.mSize , usePadding ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private static libcore.tzdata.update2.tools.TimeZoneDistroBuilder createValidTimeZoneDistroBuilder ( java.lang.String rulesVersion , int revision ) throws java.lang.Exception { byte [ ] bionicTzData = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTzData ( rulesVersion ) ; byte [ ] icuData = new byte [ ] { 'a' } ; libcore.tzdata.update2.DistroVersion distroVersion = new libcore.tzdata.update2.DistroVersion ( DistroVersion.CURRENT_FORMAT_MAJOR_VERSION , DistroVersion.CURRENT_FORMAT_MINOR_VERSION , rulesVersion , revision ) ; return new libcore.tzdata.update2.tools.TimeZoneDistroBuilder ( ) . setDistroVersion ( distroVersion ) . setTzData ( bionicTzData ) . setIcuData ( icuData ) ; }
private boolean processRefresh ( com.android.internal.telephony.cat.CommandDetails cmdDet , java.util.List < com.android.internal.telephony.cat.ComprehensionTlv > ctlvs ) { com.android.internal.telephony.cat.CatLog.d ( this , "process Refresh" ) ; switch ( cmdDet.commandQualifier ) { case com.android.internal.telephony.cat.CommandParamsFactory.REFRESH_NAA_INIT_AND_FULL_FILE_CHANGE : case com.android.internal.telephony.cat.CommandParamsFactory.REFRESH_NAA_INIT_AND_FILE_CHANGE : case com.android.internal.telephony.cat.CommandParamsFactory.REFRESH_NAA_INIT : case com.android.internal.telephony.cat.CommandParamsFactory.REFRESH_UICC_RESET : mCmdParams = new com.android.internal.telephony.cat.DisplayTextParams ( cmdDet , null ) ; break ; } return false ; }
public void createOatDir ( java.lang.String oatDir , java.lang.String dexInstructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.createOatDir ( oatDir , dexInstructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
protected void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; android.telecom.Log.d ( this , "Settings: onCreate()..." ) ; com.android.server.telecom.QuickResponseUtils.maybeMigrateLegacyQuickResponses ( this ) ; getPreferenceManager ( ) . setSharedPreferencesName ( QuickResponseUtils.SHARED_PREFERENCES_NAME ) ; mPrefs = getPreferenceManager ( ) . getSharedPreferences ( ) ; }
public static void setPrivateDataDirectorySuffix ( java.lang.String suffix ) { if ( ! ( org.chromium.base.PathUtils.sInitializationStarted.getAndSet ( true ) ) ) { assert ( org.chromium.base.ContextUtils.getApplicationContext ( ) ) != null ; org.chromium.base.PathUtils.sDataDirectorySuffix = suffix ; org.chromium.base.PathUtils.sDirPathFetchTask = new android.os.AsyncTask < java.lang.Void , java.lang.Void , java.lang.String [ ] > ( ) { @ java.lang.Override protected java.lang.String [ ] doInBackground ( java.lang.Void ... unused ) { return org.chromium.base.PathUtils.setPrivateDataDirectorySuffixInternal ( ) ; } } . executeOnExecutor ( AsyncTask.THREAD_POOL_EXECUTOR ) ; } }
public void stkCallControlAlphaNotify ( int indicationType , java.lang.String alpha ) { mRil.processIndication ( indicationType ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_STK_CC_ALPHA_NOTIFY , alpha ) ; if ( ( mRil.mCatCcAlphaRegistrant ) != null ) { mRil.mCatCcAlphaRegistrant.notifyRegistrant ( new android.os.AsyncResult ( null , alpha , null ) ) ; } }
public void onOrientationChanged ( int rotation ) { if ( rotation == ( android.view.OrientationEventListener.ORIENTATION_UNKNOWN ) ) { return ; } final int orientation = toScreenOrientation ( rotation ) ; if ( ( orientation != ( com.android.incallui.InCallOrientationEventListener.SCREEN_ORIENTATION_UNKNOWN ) ) && ( ( com.android.incallui.InCallOrientationEventListener.currentOrientation ) != orientation ) ) { com.android.dialer.common.LogUtil.i ( "InCallOrientationEventListener.onOrientationChanged" , "orientation: %d -> %d" , com.android.incallui.InCallOrientationEventListener.currentOrientation , orientation ) ; com.android.incallui.InCallOrientationEventListener.currentOrientation = orientation ; com.android.incallui.InCallPresenter.getInstance ( ) . onDeviceOrientationChange ( com.android.incallui.InCallOrientationEventListener.currentOrientation ) ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mDevice = getDevice ( ) ; sepolicyAnalyze = copyResourceToTempFile ( "/sepolicy-analyze" ) ; sepolicyAnalyze.setExecutable ( true ) ; devicePolicyFile = java.io.File.createTempFile ( "sepolicy" , ".tmp" ) ; devicePolicyFile.deleteOnExit ( ) ; mDevice.pullFile ( "/sys/fs/selinux/policy" , devicePolicyFile ) ; }
public void init ( ) { available = android.icu.util.ULocale.getAvailableLocales ( ) ; for ( int i = 0 ; i < ( available.length ) ; i ++ ) { availableMap.put ( available [ i ] . toString ( ) , "" ) ; } }
boolean isNumberMatchingDesc ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneNumberDesc numberDesc ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.nationalNumberPattern ) . matcher ( nationalNumber ) ; return ( isNumberPossibleForDesc ( nationalNumber , numberDesc ) ) && ( nationalNumberPatternMatcher.matches ( ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; android.content.Context appContext = getInstrumentation ( ) . getTargetContext ( ) . getApplicationContext ( ) ; org.chromium.base.ContextUtils.initApplicationContext ( appContext ) ; org.chromium.base.library_loader.LibraryLoader.get ( LibraryProcessType.PROCESS_BROWSER ) . ensureInitialized ( appContext ) ; nativeInit ( ) ; mTestEnvironmentPointer = nativeSetupTestEnvironment ( ) ; }
public void report ( @ javax.annotation.Nonnull com.android.jack.reporting.Severity severity , @ javax.annotation.Nonnull com.android.jack.reporting.Reportable reportable ) { if ( ( severity == ( Severity.FATAL ) ) || ( reportable.getDefaultProblemLevel ( ) . isVisibleWith ( verbosityLevel ) ) ) { toProcess.add ( new com.android.jack.reporting.CommonReporter.ProblemDescription ( severity , reportable ) ) ; } }
public void checkClientTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.net.Socket socket ) throws java.security.cert.CertificateException { javax.net.ssl.SSLSession session = null ; javax.net.ssl.SSLParameters parameters = null ; if ( socket instanceof javax.net.ssl.SSLSocket ) { javax.net.ssl.SSLSocket sslSocket = ( ( javax.net.ssl.SSLSocket ) ( socket ) ) ; session = org.conscrypt.TrustManagerImpl.getHandshakeSessionOrThrow ( sslSocket ) ; parameters = sslSocket.getSSLParameters ( ) ; } checkTrusted ( chain , authType , session , parameters , true ) ; }
protected com.android.jack.ir.ast.JArrayType findArrayType ( @ javax.annotation.Nonnull java.lang.String typeName ) throws com.android.jack.ir.ast.JTypeLookupException { int typeNameLength = typeName.length ( ) ; assert ( typeNameLength > 0 ) && ( ( typeName.charAt ( 0 ) ) == '[' ) ; int dim = 0 ; do { dim ++ ; assert dim < typeNameLength ; } while ( ( typeName.charAt ( dim ) ) == '[' ) ; return getArrayType ( getType ( typeName.substring ( dim ) ) , dim ) ; }
public void destroy ( ) { synchronized ( exitValueMutex ) { if ( ( exitValue ) == null ) { try { Libcore.os.kill ( pid , java.lang.SIGKILL ) ; } catch ( android.system.ErrnoException e ) { java.lang.System.logI ( ( "Failed to destroy process " + ( pid ) ) , e ) ; } } } libcore.io.IoUtils.closeQuietly ( inputStream ) ; libcore.io.IoUtils.closeQuietly ( errorStream ) ; libcore.io.IoUtils.closeQuietly ( outputStream ) ; }
static boolean isValidSniHostname ( java.lang.String sniHostname ) { if ( sniHostname == null ) { return false ; } return ( ( ( ( sniHostname.equalsIgnoreCase ( "localhost" ) ) || ( ( sniHostname.indexOf ( '.' ) ) != ( - 1 ) ) ) && ( ! ( org.conscrypt.Platform.isLiteralIpAddress ( sniHostname ) ) ) ) && ( ! ( sniHostname.endsWith ( "." ) ) ) ) && ( ( sniHostname.indexOf ( ' ' ) ) == ( - 1 ) ) ; }
public com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor getBaseViewDescriptor ( ) { if ( ( mBaseViewDescriptor ) == null ) { mBaseViewDescriptor = findDescriptorByClass ( SdkConstants.CLASS_VIEW ) ; } return mBaseViewDescriptor ; }
public void pullFile ( java.lang.String remoteFilepath , java.lang.String localFilename , com.android.ddmlib.SyncService.ISyncProgressMonitor monitor ) throws com.android.ddmlib.SyncException , com.android.ddmlib.TimeoutException , java.io.IOException { com.android.ddmlib.SyncService.FileStat fileStat = statFile ( remoteFilepath ) ; if ( fileStat == null ) { } else if ( ( fileStat.getMode ( ) ) == 0 ) { throw new com.android.ddmlib.SyncException ( com.android.ddmlib.SyncException.SyncError.NO_REMOTE_OBJECT ) ; } monitor.start ( 0 ) ; doPullFile ( remoteFilepath , localFilename , monitor ) ; monitor.stop ( ) ; }
public void testReadTimeZone_valid ( ) throws java.lang.Exception { libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder builder = new libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder ( ) ; builder.initializeToValid ( ) ; assertNotNull ( createZoneInfo ( getName ( ) , java.lang.System.currentTimeMillis ( ) , builder.build ( ) ) ) ; }
public boolean process ( java.lang.String countryIso , java.lang.String defaultTimeZoneId , java.util.List < java.lang.String > countryTimeZoneIds , java.lang.String debugInfo ) { countryIso = libcore.util.TimeZoneFinder.normalizeCountryIso ( countryIso ) ; if ( ! ( countryCodeToMatch.equals ( countryIso ) ) ) { return libcore.util.TimeZoneFinder.CountryZonesProcessor.CONTINUE ; } validatedCountryTimeZones = libcore.util.CountryTimeZones.createValidated ( countryIso , defaultTimeZoneId , countryTimeZoneIds , debugInfo ) ; return libcore.util.TimeZoneFinder.CountryZonesProcessor.HALT ; }
public void onGeolocationPermissionsShowPrompt ( java.lang.String origin , android.webkit.GeolocationPermissions.Callback callback ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onGeolocationPermissionsShowPrompt" ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onGeolocationPermissionsShowPrompt" ) ; mWebChromeClient.onGeolocationPermissionsShowPrompt ( origin , callback ) ; } } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onGeolocationPermissionsShowPrompt" ) ; } }
public void run ( ) { try { org.apache.http.HttpResponse response = mServer.getResponse ( mRequest ) ; mConnection.sendResponseHeader ( response ) ; mConnection.sendResponseEntity ( response ) ; mConnection.close ( ) ; synchronized ( mLock ) { this . mSockets.remove ( mSocket ) ; } } catch ( java.lang.Exception e ) { android.util.Log.e ( android.webkit.cts.CtsTestServer.TAG , "Error handling request:" , e ) ; } }
public void sendDtmf ( char c , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_DTMF , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeString ( java.lang.Character.toString ( c ) ) ; send ( rr ) ; }
public void testVFE6 ( ) { load ( "dot.junit.opcodes.aput_object.d.T_aput_object_10" , java.lang.VerifyError.class ) ; }
public void stop ( ) { execute ( "stop-service" ) ; }
protected void onScrollChanged ( int l , int t , int oldl , int oldt ) { if ( ( t == 0 ) || ( t >= ( mBottomY ) ) ) { if ( ( ( mMediaController ) != null ) && ( ! ( ( ( com.android.mms.ui.SlideshowActivity ) ( mContext ) ) . isFinishing ( ) ) ) ) { mMediaController.show ( ) ; } } }
private com.android.jack.ir.ast.JFieldId getOrCreateAssertionstatusField ( @ javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest request ) { try { com.android.jack.ir.ast.JFieldId id = currentType.getFieldId ( com.android.jack.transformations.AssertionTransformer.ASSERTION_FIELD_NAME , JPrimitiveTypeEnum.BOOLEAN.getType ( ) , FieldKind.STATIC ) ; com.android.jack.ir.ast.JField field = id.getField ( ) ; assert field != null ; if ( field.getEnclosingType ( ) . isSameType ( currentType ) ) { return id ; } } catch ( com.android.jack.lookup.JLookupException e ) { } return addAssertionStatusToType ( currentType , request ) ; }
java.util.Collection < V > createValues ( ) { return new Values ( ) ; }
private void checkInputFile ( java.io.File file ) throws com.android.sdklib.build.ApkCreationException { if ( file.isDirectory ( ) ) { throw new com.android.sdklib.build.ApkCreationException ( "%s is a directory!" , file ) ; } if ( file.exists ( ) ) { if ( ( file.canRead ( ) ) == false ) { throw new com.android.sdklib.build.ApkCreationException ( "Cannot read %s" , file ) ; } } else { throw new com.android.sdklib.build.ApkCreationException ( "%s does not exist" , file ) ; } }
private void onApplicationFieldModified ( ) { if ( ! ( mInternalApplicationNameUpdate ) ) { mApplicationNameModifiedByUser = true ; if ( ! ( mActivityNameModifiedByUser ) ) { java.lang.String name = com.android.ide.eclipse.adt.AdtUtils.capitalize ( mApplicationNameField.getText ( ) ) ; try { mInternalActivityNameUpdate = true ; mActivityNameField.setText ( ( ( com.android.ide.eclipse.adt.AdtUtils.stripWhitespace ( name ) ) + ( com.android.ide.eclipse.adt.internal.wizards.newproject.NewProjectCreationPage.ACTIVITY_NAME_SUFFIX ) ) ) ; } finally { mInternalActivityNameUpdate = false ; } } } }
private static android.view.KeyEvent newKeyEvent ( long downTime , long eventTime , int action , int keyCode , int metaState ) { android.view.KeyEvent event = new android.view.KeyEvent ( downTime , eventTime , action , keyCode , 0 , metaState ) ; if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.HONEYCOMB_MR1 ) ) { event.setSource ( InputDevice.SOURCE_KEYBOARD ) ; } return event ; }
private com.android.server.wifi.NetworkUpdateResult verifyAddEphemeralNetworkToWifiConfigManager ( android.net.wifi.WifiConfiguration configuration ) throws java.lang.Exception { com.android.server.wifi.NetworkUpdateResult result = addNetworkToWifiConfigManager ( configuration ) ; assertTrue ( ( ( result.getNetworkId ( ) ) != ( android.net.wifi.WifiConfiguration.INVALID_NETWORK_ID ) ) ) ; assertTrue ( result.isNewNetwork ( ) ) ; assertTrue ( result.hasIpChanged ( ) ) ; assertTrue ( result.hasProxyChanged ( ) ) ; verifyNetworkAddBroadcast ( configuration ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . write ( anyBoolean ( ) , any ( com.android.server.wifi.WifiConfigStoreData.class ) ) ; return result ; }
public boolean remove ( java.lang.Object key , java.lang.Object value ) { int hash = java.util.concurrent.ConcurrentHashMap.hash ( key.hashCode ( ) ) ; java.util.concurrent.ConcurrentHashMap.Segment < K , V > s ; return ( ( value != null ) && ( ( s = segmentForHash ( hash ) ) != null ) ) && ( ( s.remove ( key , hash , value ) ) != null ) ; }
public void setUiTTYMode ( android.content.Context context , int uiTtyMode , android.os.Message onComplete ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { mImsServiceProxy.setUiTTYMode ( uiTtyMode , onComplete ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "setTTYMode()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } if ( ! ( getBooleanCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL ) ) ) { setAdvanced4GMode ( ( ( uiTtyMode == ( android.telecom.TelecomManager.TTY_MODE_OFF ) ) && ( isEnhanced4gLteModeSettingEnabledByUserForSlot ( ) ) ) ) ; } }
public void shutdown ( ) { for ( android.content.BroadcastReceiver receiver : listeningDevices.values ( ) ) { try { mService.unregisterReceiver ( receiver ) ; } catch ( java.lang.IllegalArgumentException ex ) { com.googlecode.android_scripting.Log.e ( ( "Failed to unregister " + ex ) ) ; } } listeningDevices.clear ( ) ; try { mService.unregisterReceiver ( mPairingHelper ) ; } catch ( java.lang.IllegalArgumentException ex ) { com.googlecode.android_scripting.Log.e ( ( "Failed to unregister pairing helper." + ex ) ) ; } }
private boolean isVerificationEnabled ( int flags ) { if ( ! ( com.android.server.pm.PackageManagerService.DEFAULT_VERIFY_ENABLE ) ) { return false ; } if ( ( flags & ( android.content.pm.PackageManager.INSTALL_FROM_ADB ) ) != 0 ) { if ( android.app.ActivityManager.isRunningInTestHarness ( ) ) { return false ; } if ( ( android.provider.Settings.Global.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB , 1 ) ) == 0 ) { return false ; } } return ( android.provider.Settings.Global.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE , 1 ) ) == 1 ; }
private int getPhoneTypeFromNetworkType ( int phoneId ) { java.lang.String mode = android.telephony.TelephonyManager.getTelephonyProperty ( phoneId , "ro.telephony.default_network" , null ) ; if ( ( mode != null ) && ( ! ( mode.isEmpty ( ) ) ) ) { return android.telephony.TelephonyManager.getPhoneType ( java.lang.Integer.parseInt ( mode ) ) ; } return android.telephony.TelephonyManager.PHONE_TYPE_NONE ; }
public static double signum ( double d ) { return java.lang.Math.signum ( d ) ; }
private void onConnectionStateChanged ( int state , int peer_feat , int chld_feat , byte [ ] address ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CONNECTION_STATE_CHANGED ) ; event.valueInt = state ; event.valueInt2 = peer_feat ; event.valueInt3 = chld_feat ; event.device = getDevice ( address ) ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType.isCreate ( ) ) { java.lang.String matchParent = getFillParentValueName ( ) ; node.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , matchParent ) ; node.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT , matchParent ) ; } }
public static void requestSyncAsUser ( android.accounts.Account account , java.lang.String authority , int userId , android.os.Bundle extras ) { if ( extras == null ) { throw new java.lang.IllegalArgumentException ( "Must specify extras." ) ; } android.content.SyncRequest request = new android.content.SyncRequest.Builder ( ) . setSyncAdapter ( account , authority ) . setExtras ( extras ) . syncOnce ( ) . build ( ) ; try { android.content.ContentResolver.getContentService ( ) . syncAsUser ( request , userId ) ; } catch ( android.os.RemoteException e ) { } }
private boolean isNetworkInConfigStoreData ( android.net.wifi.WifiConfiguration configuration , java.util.List < android.net.wifi.WifiConfiguration > networkList ) { boolean foundNetworkInStoreData = false ; for ( android.net.wifi.WifiConfiguration retrievedConfig : networkList ) { if ( retrievedConfig.configKey ( ) . equals ( configuration.configKey ( ) ) ) { foundNetworkInStoreData = true ; break ; } } return foundNetworkInStoreData ; }
public java.util.Set < java.lang.String > getApplicableFilters ( @ com.android.annotations.NonNull java.util.Set < java.lang.String > allFilters ) { java.util.Set < java.lang.String > list = super . getApplicableFilters ( allFilters ) ; if ( ( isEnable ( ) ) && ( universalApk ) ) { list.add ( com.android.build.OutputFile.NO_FILTER ) ; } return list ; }
public java.util.Set < java.lang.String > getDensityFilters ( ) { com.android.resources.Density [ ] values = com.android.resources.Density.values ( ) ; java.util.Set < java.lang.String > fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize ( ( ( values.length ) - 1 ) ) ; for ( com.android.resources.Density value : values ) { if ( value != ( com.android.resources.Density.NODPI ) ) { fullList.add ( value.getResourceValue ( ) ) ; } } return density.getApplicableFilters ( fullList ) ; }
public java.lang.Integer wifiNanPublish ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "clientId" , description = "The client ID returned when a connection was created" ) java.lang.Integer clientId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "publishConfig" ) org.json.JSONObject publishConfig ) throws android.os.RemoteException , org.json.JSONException { synchronized ( mLock ) { android.net.wifi.nan.WifiNanSession session = mSessions.get ( clientId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling wifiNanPublish before session (client ID " + clientId ) + ") is ready/or already disconnected" ) ) ; } int discoverySessionId = getNextDiscoverySessionId ( ) ; session.publish ( com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.getPublishConfig ( publishConfig ) , new com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.NanDiscoverySessionCallbackPostsEvents ( discoverySessionId ) ) ; return discoverySessionId ; } }
public void testInterfaceCountersUdp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , android.net.cts.IpSecManagerTest.getKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , false , 1000 , false ) ; }
public void updateFocusedWindow ( com.android.hierarchyviewerlib.device.IHvDevice device , int focusedWindow ) { java.lang.Integer oldValue = null ; synchronized ( mDeviceMap ) { oldValue = mFocusedWindowHashes.put ( device , new java.lang.Integer ( focusedWindow ) ) ; } if ( ( oldValue == null ) || ( ( oldValue != null ) && ( ( oldValue.intValue ( ) ) != focusedWindow ) ) ) { notifyFocusChanged ( device ) ; } }
public void getOutgoingCallerIdDisplay ( android.os.Message onComplete ) { if ( isPhoneTypeGsm ( ) ) { com.android.internal.telephony.Phone imsPhone = mImsPhone ; if ( ( imsPhone != null ) && ( ( ( imsPhone.getServiceState ( ) . getState ( ) ) == ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) || ( imsPhone.isUtEnabled ( ) ) ) ) { imsPhone.getOutgoingCallerIdDisplay ( onComplete ) ; return ; } mCi.getCLIR ( onComplete ) ; } else { loge ( "getOutgoingCallerIdDisplay: not possible in CDMA" ) ; } }
private int putListener ( java.lang.Object listener , android.net.nsd.NsdServiceInfo s ) { android.net.nsd.NsdManager.checkListener ( listener ) ; final int key ; synchronized ( mMapLock ) { int valueIndex = mListenerMap.indexOfValue ( listener ) ; com.android.internal.util.Preconditions.checkArgument ( ( valueIndex == ( - 1 ) ) , "listener already in use" ) ; key = nextListenerKey ( ) ; mListenerMap.put ( key , listener ) ; mServiceMap.put ( key , s ) ; } return key ; }
final void putIntUnchecked ( int i , int x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putInt ( ix ( i ) , x ) ; }
public void clickActionTesting ( ) { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.large_view ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.withText ( "large view" ) ) ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.large_view ) ) . perform ( android.support.test.espresso.action.ViewActions.click ( ) ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.large_view ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Ouch!!!" ) ) ) ; }
public int getDataActivationState ( int subId ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.getDataActivationState ( subId , getOpPackageName ( ) ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return android.telephony.TelephonyManager.SIM_ACTIVATION_STATE_UNKNOWN ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } java.lang.String prefix = "" ; if ( options.coreLibrary ) { prefix = "__desugar__/" ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( prefix ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.Writer writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; reader.accept ( visitor , 0 ) ; java.lang.String name = entry.getName ( ) ; name = rewriter.unprefix ( name ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.Writer writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , null ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; java.lang.String name = ( lambdaFixer.getInternalName ( ) ) + ".class" ; name = rewriter.unprefix ( name ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , method = "setProgressDrawable" , args = { android.graphics.drawable.Drawable.class } ) } ) public void testAccessProgressDrawable ( ) { android.widget.ProgressBar progressBar = new android.widget.ProgressBar ( mContext , null , android.R.attr.progressBarStyleHorizontal ) ; android.widget.cts.ProgressBarTest.MockDrawable mockDrawable = new android.widget.cts.ProgressBarTest.MockDrawable ( ) ; progressBar.setProgressDrawable ( mockDrawable ) ; assertSame ( mockDrawable , progressBar.getProgressDrawable ( ) ) ; assertFalse ( mockDrawable.hasCalledDraw ( ) ) ; progressBar.draw ( new android.graphics.Canvas ( ) ) ; assertTrue ( mockDrawable.hasCalledDraw ( ) ) ; progressBar.setProgressDrawable ( null ) ; assertNull ( progressBar.getProgressDrawable ( ) ) ; }
public void testUpdateSingleOpenNetworkFailedDueToPermissionDenied ( ) throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork ( ) ; java.util.List < android.net.wifi.WifiConfiguration > networks = new java.util.ArrayList < > ( ) ; networks.add ( openNetwork ) ; verifyAddNetworkToWifiConfigManager ( openNetwork ) ; assertAndSetNetworkBSSID ( openNetwork , com.android.server.wifi.WifiConfigManagerTest.TEST_BSSID ) ; when ( mWifiPermissionsUtil.checkConfigOverridePermission ( anyInt ( ) ) ) . thenReturn ( false ) ; com.android.server.wifi.NetworkUpdateResult result = updateNetworkToWifiConfigManager ( openNetwork ) ; assertTrue ( ( ( result.getNetworkId ( ) ) == ( android.net.wifi.WifiConfiguration.INVALID_NETWORK_ID ) ) ) ; }
public static java.nio.charset.Charset getCharset ( @ javax.annotation.Nonnull org.simpleframework.http.ContentType contentType ) throws java.nio.charset.IllegalCharsetNameException , java.nio.charset.UnsupportedCharsetException { assert com.android.jack.server.type.TextPlain.CONTENT_TYPE_NAME.equals ( contentType.getType ( ) ) : contentType.getType ( ) ; java.lang.String charsetName = contentType.getCharset ( ) ; java.nio.charset.Charset charset ; if ( charsetName == null ) { charset = java.nio.charset.Charset.defaultCharset ( ) ; } else { charset = java.nio.charset.Charset.forName ( charsetName ) ; } return charset ; }
public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [ ] states ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( "getDevicesMatchingConnectionStates(): states=" + ( java.util.Arrays.toString ( states ) ) ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; } return service.getDevicesMatchingConnectionStates ( states ) ; }
public boolean setWfdEnable ( boolean enable ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.enableWfd ( enable ) ; } else { return doBooleanCommand ( ( "SET wifi_display " + ( enable ? "1" : "0" ) ) ) ; } }
public java.util.Set < vogar.tasks.Task > installTasks ( ) { java.util.Set < vogar.tasks.Task > result = new java.util.HashSet < vogar.tasks.Task > ( ) ; for ( java.io.File classpathElement : run.classpath.getElements ( ) ) { addCreateDexJarAndPushTasks ( result , run.basenameOfJar ( classpathElement ) , classpathElement , null ) ; } return result ; }
private void setUpAndRegisterReceiver ( ) { if ( ( mReceiver ) != null ) { mContext.unregisterReceiver ( mReceiver ) ; } mReceiver = new android.assist.cts.AssistStructureTest.AssistStructureTestBroadcastReceiver ( ) ; android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( Utils.APP_3P_HASRESUMED ) ; filter.addAction ( Utils.APP_3P_HASDRAWED ) ; filter.addAction ( Utils.ASSIST_RECEIVER_REGISTERED ) ; mContext.registerReceiver ( mReceiver , filter ) ; }
public com.intellij.psi.JavaElementVisitor createPsiVisitor ( @ com.android.annotations.NonNull final com.android.tools.lint.detector.api.JavaContext context ) { return new com.intellij.psi.JavaElementVisitor ( ) { @ java.lang.Override public void visitMethod ( com.intellij.psi.PsiMethod method ) { com.android.tools.lint.checks.CallSuperDetector.checkCallSuper ( context , method ) ; } } ; }
public void accept ( int result ) { if ( result == ( android.app.Activity.RESULT_OK ) ) { logFail ( ) ; status = FAIL ; } else { if ( ( ( mNm.getEffectsSuppressor ( ) ) == null ) || ( ! ( mNm.getEffectsSuppressor ( ) . equals ( MockListener.COMPONENT_NAME ) ) ) ) { status = PASS ; } else { logFail ( ) ; status = RETEST ; delay ( ) ; } } next ( ) ; }
public void controlResized ( org.eclipse.swt.events.ControlEvent e ) { super . controlResized ( e ) ; mHScale.setClientSize ( getClientArea ( ) . width ) ; mVScale.setClientSize ( getClientArea ( ) . height ) ; org.eclipse.swt.graphics.Rectangle canvasBounds = this . getBounds ( ) ; getHorizontalBar ( ) . setPageIncrement ( canvasBounds.width ) ; getVerticalBar ( ) . setPageIncrement ( canvasBounds.height ) ; }
public void visitMethodCallExpression ( com.intellij.psi.PsiMethodCallExpression node ) { super . visitMethodCallExpression ( node ) ; if ( node == ( mTarget ) ) { mSeenTarget = true ; } else { com.intellij.psi.PsiReferenceExpression methodExpression = node.getMethodExpression ( ) ; if ( ( ( mSeenTarget ) || ( ( methodExpression.getQualifier ( ) ) == ( mTarget ) ) ) && ( "show" . equals ( methodExpression.getReferenceName ( ) ) ) ) { mFound = true ; } } }
public boolean updatePublish ( short transactionId , android.net.wifi.nan.PublishConfig config ) { if ( ! ( mIsPublishSession ) ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , "A SUBSCRIBE session is being used to publish" ) ; try { mCallback.onSessionConfigFail ( WifiNanNative.NAN_STATUS_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , ( "updatePublish: RemoteException=" + e ) ) ; } return false ; } return com.android.server.wifi.nan.WifiNanNative.getInstance ( ) . publish ( transactionId , mPubSubId , config ) ; }
public final void testDefaultAttributeFilter ( ) { assertEquals ( "true" , BaseLayoutRule.DEFAULT_ATTR_FILTER.replace ( "myuri" , "layout_alignRight" , "true" ) ) ; assertEquals ( null , BaseLayoutRule.DEFAULT_ATTR_FILTER.replace ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , "layout_alignRight" , "true" ) ) ; assertEquals ( "true" , BaseLayoutRule.DEFAULT_ATTR_FILTER.replace ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , "myproperty" , "true" ) ) ; }
public static int getClassFileVersion ( org.jetbrains.org.objectweb.asm.ClassReader reader ) { final com.intellij.openapi.util.Ref < java.lang.Integer > result = new com.intellij.openapi.util.Ref < java.lang.Integer > ( 0 ) ; reader.accept ( new org.jetbrains.org.objectweb.asm.ClassVisitor ( org.jetbrains.org.objectweb.asm.Opcodes.ASM5 ) { public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { result.set ( version ) ; } } , 0 ) ; return result.get ( ) ; }
public void testDetachFromWindow ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/DetachedFromWindow.java:7: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/DetachedFromWindow.java:26: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" ) + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( ( "src/test/pkg/DetachedFromWindow.java.txt=>" + "src/test/pkg/DetachedFromWindow.java" ) ) ) ; }
public void setCallerDisplayName ( java.lang.String callId , java.lang.String callerDisplayName , int presentation , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , "CSW.sCDN" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setCallerDisplayName %s %s %d" , callId , callerDisplayName , presentation ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setCallerDisplayName ( callerDisplayName , presentation ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void copyFrom ( int [ ] d ) { validateIsInt32 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_32 , d.length ) ; }
public boolean isEphemeralApplication ( java.lang.String packageName , int userId ) { enforceCrossUserPermission ( android.os.Binder.getCallingUid ( ) , userId , true , false , "isEphemeral" ) ; if ( com.android.server.pm.PackageManagerService.DISABLE_EPHEMERAL_APPS ) { return false ; } if ( ! ( isCallerSameApp ( packageName ) ) ) { return false ; } synchronized ( mPackages ) { android.content.pm.PackageParser.Package pkg = mPackages.get ( packageName ) ; if ( pkg != null ) { return pkg.applicationInfo.isEphemeralApp ( ) ; } } return false ; }
public void testGetBundleVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.BundleVersion bundleVersion = new libcore.tzdata.update2.BundleVersion ( BundleVersion.CURRENT_FORMAT_MAJOR_VERSION , BundleVersion.CURRENT_FORMAT_MINOR_VERSION , "2016c" , 1 ) ; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try ( java.util.zip.ZipOutputStream zipOutputStream = new java.util.zip.ZipOutputStream ( baos ) ) { libcore.tzdata.update2.TimeZoneBundleTest.addZipEntry ( zipOutputStream , TimeZoneBundle.BUNDLE_VERSION_FILE_NAME , bundleVersion.toBytes ( ) ) ; } libcore.tzdata.update2.TimeZoneBundle bundle = new libcore.tzdata.update2.TimeZoneBundle ( baos.toByteArray ( ) ) ; assertEquals ( bundleVersion , bundle.getBundleVersion ( ) ) ; }
native void rsnScriptSetTimeZone ( long con , long script , byte [ ] timeZone , boolean mUseInc ) ;
boolean markChecked ( com.android.server.timezone.CheckToken checkToken , boolean succeeded ) { synchronized ( this ) { int optimisticLockId = checkToken.mOptimisticLockId ; int newOptimisticLockId = optimisticLockId + 1 ; int status = ( succeeded ) ? com.android.server.timezone.PackageStatus.CHECK_COMPLETED_SUCCESS : com.android.server.timezone.PackageStatus.CHECK_COMPLETED_FAILURE ; try { return writePackageStatusWithOptimisticLockCheck ( optimisticLockId , newOptimisticLockId , status , checkToken.mPackageVersions ) ; } catch ( java.io.IOException e ) { throw new java.lang.IllegalStateException ( e ) ; } } }
public void getModemActivityInfo ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_GET_ACTIVITY_INFO , response , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) { riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; } send ( rr ) ; android.os.Message msg = mSender.obtainMessage ( com.android.internal.telephony.RIL.EVENT_BLOCKING_RESPONSE_TIMEOUT ) ; msg.obj = null ; msg.arg1 = rr.mSerial ; mSender.sendMessageDelayed ( msg , com.android.internal.telephony.RIL.DEFAULT_BLOCKING_MESSAGE_RESPONSE_TIMEOUT_MS ) ; }
private java.util.List < java.awt.Rectangle > getHorizontalRectangles ( int imageWidth , java.util.List < com.android.ninepatch.NinePatchChunk.Pair < java.lang.Integer > > leftPairs ) { java.util.List < java.awt.Rectangle > rectangles = new java.util.ArrayList < java.awt.Rectangle > ( ) ; for ( com.android.ninepatch.NinePatchChunk.Pair < java.lang.Integer > left : leftPairs ) { int y = left.mFirst ; int height = ( left.mSecond ) - ( left.mFirst ) ; rectangles.add ( new java.awt.Rectangle ( 0 , y , imageWidth , height ) ) ; } return rectangles ; }
private boolean isRoamIndForHomeSystem ( java.lang.String roamInd ) { log ( ( "isRoamIndForHomeSystem: " + ( mPhone.getContext ( ) . getResources ( ) . getConfiguration ( ) . toString ( ) ) ) ) ; java.lang.String [ ] homeRoamIndicators = mPhone.getContext ( ) . getResources ( ) . getStringArray ( com.android.internal.R.array.config_cdma_home_system ) ; if ( homeRoamIndicators != null ) { for ( java.lang.String homeRoamInd : homeRoamIndicators ) { if ( homeRoamInd.equals ( roamInd ) ) { return true ; } } return false ; } return false ; }
public void addFieldAnnotations ( com.android.dx.rop.cst.CstFieldRef field , com.android.dx.rop.annotation.Annotations annotations , com.android.dx.dex.file.DexFile dexFile ) { if ( ( fieldAnnotations ) == null ) { fieldAnnotations = new java.util.ArrayList < com.android.dx.dex.file.FieldAnnotationStruct > ( ) ; } fieldAnnotations.add ( new com.android.dx.dex.file.FieldAnnotationStruct ( field , new com.android.dx.dex.file.AnnotationSetItem ( annotations , dexFile ) ) ) ; }
public void setup ( ) throws android.os.RemoteException { mFeature = new android.telephony.ims.TestMmTelFeature ( ) ; mFeatureBinder = mFeature.getBinder ( ) ; mCapabilityCallback = org.mockito.Mockito.spy ( new android.telephony.ims.feature.ImsFeature.CapabilityCallback ( ) ) ; mListener = org.mockito.Mockito.spy ( new android.telephony.ims.feature.MmTelFeature.Listener ( ) ) ; mFeatureBinder.setListener ( mListener ) ; }
public static void assertStringEquals ( java.lang.String expected , java.lang.String result ) { if ( expected == null ? result != null : ! ( expected.equals ( result ) ) ) { throw new java.lang.Error ( ( ( ( "Expected: " + expected ) + ", found: " ) + result ) ) ; } }
public void createDefaultBuildTypes ( @ org.gradle.model.Path ( value = "android.buildTypes" ) org.gradle.model.collection.ManagedSet < com.android.build.gradle.managed.BuildType > buildTypes ) { buildTypes.create ( new org.gradle.api.Action < com.android.build.gradle.managed.BuildType > ( ) { @ java.lang.Override public void execute ( com.android.build.gradle.managed.BuildType buildType ) { buildType.setName ( BuilderConstants.DEBUG ) ; buildType.setIsDebuggable ( true ) ; buildType.setIsEmbedMicroApp ( false ) ; } } ) ; buildTypes.create ( new org.gradle.api.Action < com.android.build.gradle.managed.BuildType > ( ) { @ java.lang.Override public void execute ( com.android.build.gradle.managed.BuildType buildType ) { buildType.setName ( BuilderConstants.RELEASE ) ; } } ) ; }
public void testGetOpacity ( ) { android.graphics.drawable.Drawable d = mContext.getResources ( ) . getDrawable ( R.drawable.testimage ) ; android.graphics.drawable.InsetDrawable insetDrawable = new android.graphics.drawable.InsetDrawable ( d , 0 ) ; insetDrawable.setAlpha ( 255 ) ; assertEquals ( PixelFormat.OPAQUE , insetDrawable.getOpacity ( ) ) ; insetDrawable.setAlpha ( 100 ) ; assertEquals ( PixelFormat.TRANSLUCENT , insetDrawable.getOpacity ( ) ) ; }
void onTargetPackageRemoved ( @ android.annotation.NonNull final java.lang.String packageName , final int userId ) { if ( com.android.server.om.OverlayManagerService.DEBUG ) { android.util.Slog.d ( com.android.server.om.OverlayManagerService.TAG , ( ( ( "onTargetPackageRemoved packageName=" + packageName ) + " userId=" ) + userId ) ) ; } if ( updateAllOverlaysForTarget ( packageName , userId , null ) ) { mListener.onOverlaysChanged ( packageName , userId ) ; } }
public void testPackageOverridePackageFromFlavorWithSuffix2 ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilderTest.AndroidBuilderMock ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; mFlavor.getProductFlavor ( ) . setPackageName ( "foo.bar" ) ; mDebug.getBuildType ( ) . setPackageNameSuffix ( "fortytwo" ) ; builder.setBuildVariant ( mMain , mDebug ) ; builder.addProductFlavor ( mFlavor ) ; assertEquals ( "foo.bar.fortytwo" , builder.getPackageOverride ( "" ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent.getAction ( ) ; switch ( action ) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged ( intent ) ; break ; case android.bluetooth.BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT : onVendorSpecificHeadsetEvent ( intent ) ; break ; case android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED : onHeadsetConnectionStateChanged ( intent ) ; break ; default : android.util.Log.w ( com.android.bluetooth.btservice.RemoteDevices.TAG , ( "Unhandled intent: " + intent ) ) ; break ; } }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeUTF ( myRoot ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; dataOut.writeBoolean ( myIsNormalized ) ; com.intellij.updater.Patch.writeMap ( dataOut , myWarnings ) ; com.intellij.updater.Patch.writeList ( dataOut , myDeleteFiles ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
private static WifiAwareNative.Capabilities getCapabilities ( ) { com.android.server.wifi.aware.WifiAwareNative.Capabilities cap = new com.android.server.wifi.aware.WifiAwareNative.Capabilities ( ) ; cap.maxConcurrentAwareClusters = 1 ; cap.maxPublishes = 2 ; cap.maxSubscribes = 2 ; cap.maxServiceNameLen = 255 ; cap.maxMatchFilterLen = 255 ; cap.maxTotalMatchFilterLen = 255 ; cap.maxServiceSpecificInfoLen = 255 ; cap.maxVsaDataLen = 255 ; cap.maxMeshDataLen = 255 ; cap.maxNdiInterfaces = 1 ; cap.maxNdpSessions = 1 ; cap.maxAppInfoLen = 255 ; cap.maxQueuedTransmitMessages = 6 ; return cap ; }
public void run ( ) { addVideo ( uri , append ) ; }
public void updatePublish ( @ android.annotation.NonNull android.net.wifi.nan.PublishConfig publishConfig ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanPublishDiscoverySession.TAG , "updatePublish: called on terminated session" ) ; return ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanPublishDiscoverySession.TAG , "updatePublish: called post GC on WifiNanManager" ) ; return ; } mgr.updatePublish ( mSessionId , publishConfig ) ; } }
public void dismissPendingDialogs ( ) { if ( ( mDialog ) != null ) { mDialog.dismiss ( ) ; mDialog = null ; } if ( ( mAnswerFragment ) != null ) { mAnswerFragment.dismissPendingDialogs ( ) ; } com.android.contacts.common.widget.SelectPhoneAccountDialogFragment dialogFragment = ( ( com.android.contacts.common.widget.SelectPhoneAccountDialogFragment ) ( getFragmentManager ( ) . findFragmentByTag ( com.android.incallui.InCallActivity.TAG_SELECT_ACCT_FRAGMENT ) ) ) ; if ( dialogFragment != null ) { dialogFragment.dismiss ( ) ; } }
public android.os.Bundle sendWallpaperCommand ( android.os.IBinder window , java.lang.String action , int x , int y , int z , android.os.Bundle extras , boolean sync ) { synchronized ( mWindowMap ) { long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return sendWindowWallpaperCommandLocked ( windowForClientLocked ( this , window , true ) , action , x , y , z , extras , sync ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public int compare ( java.util.Map.Entry < java.lang.Long , com.android.tools.perflib.vmtrace.MethodInfo > o1 , java.util.Map.Entry < java.lang.Long , com.android.tools.perflib.vmtrace.MethodInfo > o2 ) { long diff = ( o2.getValue ( ) . getProfileData ( ) . getInclusiveTime ( thread , ClockType.THREAD , java.util.concurrent.TimeUnit.NANOSECONDS ) ) - ( o1.getValue ( ) . getProfileData ( ) . getInclusiveTime ( thread , ClockType.THREAD , java.util.concurrent.TimeUnit.NANOSECONDS ) ) ; return com.google.common.primitives.Ints.saturatedCast ( diff ) ; }
public boolean isConnected ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "isConnected " + device ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return false ; return ( ( service.getState ( ) ) == ( android.bluetooth.BluetoothPbap.STATE_CONNECTED ) ) && ( service.getRemoteDevice ( ) . equals ( device ) ) ; }
public void test_socket_accept_Blocking_NotBound ( ) throws java.io.IOException { java.net.ServerSocket gotSocket = serverChannel.socket ( ) ; serverChannel.configureBlocking ( true ) ; try { gotSocket.accept ( ) ; fail ( "Should throw an IllegalBlockingModeException" ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) { } serverChannel.close ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw an IllegalBlockingModeException" ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) { } }
protected boolean stop ( ) { android.util.Log.v ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "stop()" ) ; if ( ! ( mIsRegistered ) ) { android.util.Log.i ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Avoid unregister when receiver it is not registered" ) ; return true ; } try { mIsRegistered = false ; unregisterReceiver ( mPbapReceiver ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Unable to unregister pbap receiver" , e ) ; } setState ( BluetoothPbap.STATE_DISCONNECTED , BluetoothPbap.RESULT_CANCELED ) ; closeService ( ) ; if ( ( mSessionStatusHandler ) != null ) { mSessionStatusHandler.removeCallbacksAndMessages ( null ) ; } return true ; }
public void testConstructorDeclaredAnnotation_repeated ( ) throws java.lang.Exception { java.lang.Class < ? extends java.lang.annotation.Annotation > repeated = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Repeated.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorWithoutAnnotations ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationOddity ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationExplicitSingle ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotation ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; java.lang.Class < ? extends java.lang.annotation.Annotation > container = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Container.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorWithoutAnnotations ( ) , container , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationOddity ( ) , container , "@Container({@Repeated(2), @Repeated(3)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationExplicitSingle ( ) , container , "@Container({@Repeated(1)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotation ( ) , container , "@Container({@Repeated(1), @Repeated(2)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorSingleAnnotation ( ) , container , null ) ; }
public void testUnocclude ( ) throws java.lang.Exception { if ( ( ! ( isHandheld ( ) ) ) || ( isUiModeLockedToVrHeadset ( ) ) ) { return ; } gotoKeyguard ( ) ; launchActivity ( "ShowWhenLockedActivity" ) ; launchActivity ( "TestActivity" ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; mAmWmState.computeState ( mDevice , null ) ; assertEquals ( "Picked wrong transition" , android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_UNOCCLUDE , mAmWmState.getWmState ( ) . getLastTransition ( ) ) ; }
private void transformTries ( com.android.dex.Dex.Section out , com.android.dex.Code [ ] tries , int [ ] catchHandlerOffsets ) { for ( com.android.dex.Code.Try tryItem : tries ) { out.writeInt ( tryItem.getStartAddress ( ) ) ; out.writeUnsignedShort ( tryItem.getInstructionCount ( ) ) ; out.writeUnsignedShort ( catchHandlerOffsets [ tryItem.getCatchHandlerIndex ( ) ] ) ; } }
public final void testPkgTypePlatformTool ( ) { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_PLATFORM_TOOLS ; assertFalse ( p.hasMajorRevision ( ) ) ; assertTrue ( p.hasFullRevision ( ) ) ; assertFalse ( p.hasAndroidVersion ( ) ) ; assertFalse ( p.hasPath ( ) ) ; assertFalse ( p.hasVendor ( ) ) ; assertFalse ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
public void cancelMissedCallsNotification ( java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.cMCN" ) ; synchronized ( mLock ) { enforcePermissionOrPrivilegedDialer ( android.Manifest.permission.MODIFY_PHONE_STATE , callingPackage ) ; android.os.UserHandle userHandle = android.os.Binder.getCallingUserHandle ( ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { mCallsManager.getMissedCallNotifier ( ) . clearMissedCalls ( userHandle ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } } finally { android.telecom.Log.endSession ( ) ; } }
public boolean isConnected ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "isConnected " + device ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return false ; return ( ( service.getState ( ) ) == ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) && ( service.getRemoteDevice ( ) . equals ( device ) ) ; }
public void exit ( ) { mActiveScanSettings = null ; try { mBatteryStats.noteWifiScanStoppedFromSource ( mScanWorkSource ) ; } catch ( android.os.RemoteException e ) { loge ( e.toString ( ) ) ; } mWifiMetrics.incrementScanReturnEntry ( WifiMetricsProto.WifiLog.SCAN_UNKNOWN , mActiveScans.size ( ) ) ; sendOpFailedToAllAndClear ( mActiveScans , WifiScanner.REASON_UNSPECIFIED , "Scan was interrupted" ) ; }
private void agentDisconnect ( android.net.NetworkAgent networkAgent ) { if ( networkAgent != null ) { android.net.NetworkInfo networkInfo = new android.net.NetworkInfo ( mNetworkInfo ) ; networkInfo.setIsAvailable ( false ) ; networkInfo.setDetailedState ( DetailedState.DISCONNECTED , null , null ) ; networkAgent.sendNetworkInfo ( networkInfo ) ; } }
public void testInstall_withBadlyFormedRevision ( ) throws java.lang.Exception { libcore.tzdata.update2.BundleVersion validBundleVersion = new libcore.tzdata.update2.BundleVersion ( 1 , 1 , libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , 1 ) ; byte [ ] invalidRevisionBytes = validBundleVersion.toBytes ( ) ; invalidRevisionBytes [ ( ( invalidRevisionBytes.length ) - 3 ) ] = 'A' ; libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes ( invalidRevisionBytes ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE , installer.installWithErrorCode ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public void onCallForwardingIndicatorChanged ( boolean visible ) { android.util.Log.i ( com.android.phone.CallNotifier.LOG_TAG , ( ( ( "onCallForwardingIndicatorChanged(): subId=" + ( this . mSubId ) ) + ", visible=" ) + ( visible ? "Y" : "N" ) ) ) ; mCFIStatus.put ( this . mSubId , visible ) ; updatePhoneStateListeners ( false , com.android.phone.CallNotifier.UPDATE_TYPE_CFI , this . mSubId ) ; }
void foo3 ( int [ ] array , int end , boolean expectInterpreter ) { for ( int i = 3 ; i <= end ; i ++ ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ i ] = 1 ; sum += array [ i ] ; } }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
private void runAnnotProcBuildingResource ( @ javax.annotation.Nonnull com.android.jack.test.helper.ErrorTestHelper te ) throws java.lang.Exception { buildAnnotationRequiredByAnnotationProc ( te , new java.lang.Class < ? > [ ] { com.android.jack.errorhandling.annotationprocessor.ResourceAnnotationTest.class } ) ; com.android.jack.test.toolchain.AbstractTestTools.createFile ( te.getSourceFolder ( ) , "jack.incremental" , "A.java" , ( ( ( ( ( ( ( "package jack.incremental;\n" + "import " ) + ( com.android.jack.errorhandling.annotationprocessor.ResourceAnnotationTest.class . getName ( ) ) ) + ";\n" ) + "@" ) + ( com.android.jack.errorhandling.annotationprocessor.ResourceAnnotationTest.class . getSimpleName ( ) ) ) + "\n" ) + "public class A {}\n" ) ) ; com.android.jack.test.toolchain.JackApiToolchainBase jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackApiToolchainBase.class ) ; jackApiToolchain.setAnnotationProcessorClasses ( java.util.Collections.singletonList ( com.android.jack.errorhandling.annotationprocessor.ResourceAnnotationProcessor.class . getName ( ) ) ) ; jackApiToolchain.addToClasspath ( jackApiToolchain.getDefaultBootClasspath ( ) ) . addToClasspath ( te.getJackFolder ( ) ) . srcToExe ( te.getOutputDexFolder ( ) , false , te.getSourceFolder ( ) ) ; java.io.File discoverFile = new java.io.File ( te.getOutputDexFolder ( ) , com.android.jack.errorhandling.annotationprocessor.ResourceAnnotationProcessor.FILENAME ) ; junit.framework.Assert.assertTrue ( discoverFile.exists ( ) ) ; java.io.LineNumberReader lnr = new java.io.LineNumberReader ( new java.io.FileReader ( discoverFile ) ) ; junit.framework.Assert.assertEquals ( com.android.jack.errorhandling.annotationprocessor.ResourceAnnotationTest.class . getName ( ) , lnr.readLine ( ) ) ; junit.framework.Assert.assertEquals ( "jack.incremental.A" , lnr.readLine ( ) ) ; junit.framework.Assert.assertNull ( lnr.readLine ( ) ) ; lnr.close ( ) ; }
public byte [ ] toByteArray ( ) { try { java.io.ByteArrayOutputStream byteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream stream = new java.io.ObjectOutputStream ( byteArrayOutputStream ) ; android.telephony.mbms.DownloadRequest.SerializationDataContainer container = new android.telephony.mbms.DownloadRequest.SerializationDataContainer ( this ) ; stream.writeObject ( container ) ; stream.flush ( ) ; return byteArrayOutputStream.toByteArray ( ) ; } catch ( java.io.IOException e ) { android.util.Log.e ( android.telephony.mbms.DownloadRequest.LOG_TAG , "Got IOException trying to serialize opaque data" ) ; return null ; } }
private static boolean isMethodOnFragmentClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.intellij.psi.PsiMethodCallExpression call , @ com.android.annotations.NonNull java.lang.String fragmentClass , @ com.android.annotations.NonNull java.lang.String v4FragmentClass , boolean returnForUnresolved ) { com.intellij.psi.PsiMethod method = call.resolveMethod ( ) ; if ( method != null ) { com.intellij.psi.PsiClass containingClass = method.getContainingClass ( ) ; com.android.tools.lint.client.api.JavaEvaluator evaluator = context.getEvaluator ( ) ; return ( evaluator.extendsClass ( containingClass , fragmentClass , false ) ) || ( evaluator.extendsClass ( containingClass , v4FragmentClass , false ) ) ; } else { return returnForUnresolved ; } }
public void testFlagIExistingE ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL ; int rFlags = ( android.content.pm.PackageManager.INSTALL_INTERNAL ) | ( android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING ) ; installFromRawResource ( "install.apk" , R.raw.install , iFlags , false , false , ( - 1 ) , ( - 1 ) ) ; installFromRawResource ( "install.apk" , R.raw.install , rFlags , true , false , ( - 1 ) , ( - 1 ) ) ; }
public void validateCertCredentialWithMismatchFingerprint ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithCertificateCredential ( ) ; cred.getCertCredential ( ) . setCertSha256Fingerprint ( new byte [ 32 ] ) ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public void onDeregistered ( android.telephony.ims.ImsReasonInfo imsReasonInfo ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "onImsDisconnected imsReasonInfo=" + imsReasonInfo ) ) ; resetImsCapabilities ( ) ; mPhone.setServiceState ( ServiceState.STATE_OUT_OF_SERVICE ) ; mPhone.setImsRegistered ( false ) ; mPhone.processDisconnectReason ( imsReasonInfo ) ; mMetrics.writeOnImsConnectionState ( mPhone.getPhoneId ( ) , ImsConnectionState.State.DISCONNECTED , imsReasonInfo ) ; }
private java.lang.String getVersion ( java.io.File jar , java.lang.String prefix , java.lang.String jarName , java.lang.String defaultVersion ) { if ( jarName.matches ( ( prefix + "([\\d\\.]+)\\.jar" ) ) ) { java.lang.String version = jarName.substring ( prefix.length ( ) , ( ( jarName.length ( ) ) - 4 ) ) ; if ( ! ( defaultVersion.equals ( version ) ) ) { mImporter.getSummary ( ) . reportGuessedVersion ( jar ) ; } return version ; } return defaultVersion ; }
void connect ( android.content.Context context ) { if ( ! ( mBound ) ) { android.content.Intent service = new android.content.Intent ( android.net.NetworkScoreManager.ACTION_RECOMMEND_NETWORKS ) ; service.setComponent ( mComponentName ) ; mBound = context.bindServiceAsUser ( service , this , ( ( android.content.Context.BIND_AUTO_CREATE ) | ( android.content.Context.BIND_FOREGROUND_SERVICE ) ) , UserHandle.SYSTEM ) ; if ( ! ( mBound ) ) { android.util.Log.w ( com.android.server.NetworkScoreService.TAG , ( "Bind call failed for " + service ) ) ; } else { if ( com.android.server.NetworkScoreService.DBG ) android.util.Log.d ( com.android.server.NetworkScoreService.TAG , "ScoringServiceConnection bound." ) ; } } }
protected int beginMmsConnectivity ( ) throws java.io.IOException { createWakeLock ( ) ; int result = mConnMgr.startUsingNetworkFeature ( ConnectivityManager.TYPE_MOBILE , Phone.FEATURE_ENABLE_MMS ) ; if ( android.util.Log.isLoggable ( LogTag.TRANSACTION , Log.VERBOSE ) ) { android.util.Log.v ( com.android.mms.transaction.TransactionService.TAG , ( "beginMmsConnectivity: result=" + result ) ) ; } switch ( result ) { case com.android.internal.telephony.PhoneConstants.APN_ALREADY_ACTIVE : case com.android.internal.telephony.PhoneConstants.APN_REQUEST_STARTED : acquireWakeLock ( ) ; return result ; } throw new java.io.IOException ( "Cannot establish MMS connectivity" ) ; }
public void setGroupingSeparatorString ( java.lang.String groupingSeparatorString ) { if ( groupingSeparatorString == null ) { throw new java.lang.NullPointerException ( "The input grouping separator is null" ) ; } this . groupingSeparatorString = groupingSeparatorString ; if ( ( groupingSeparatorString.length ( ) ) == 1 ) { this . groupingSeparator = groupingSeparatorString.charAt ( 0 ) ; } else { this . groupingSeparator = android.icu.text.DecimalFormatSymbols.DEF_GROUPING_SEPARATOR ; } }
public java.util.Optional < java.lang.String > getInternalName ( ) { java.lang.String descriptor = descriptor ( ) ; int length = descriptor.length ( ) ; if ( ( ( length > 0 ) && ( ( descriptor.charAt ( 0 ) ) == 'L' ) ) && ( ( descriptor.charAt ( ( length - 1 ) ) ) == ';' ) ) { return java.util.Optional.of ( descriptor.substring ( 1 , ( length - 1 ) ) ) ; } else { return java.util.Optional.empty ( ) ; } }
private static void onFollowupEvent ( int pubSubId , int requestorInstanceId , byte [ ] mac , byte [ ] message ) { if ( com.android.server.wifi.aware.WifiAwareNative.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNative.TAG , ( ( ( ( ( "onFollowupEvent: pubSubId=" + pubSubId ) + ", requestorInstanceId=" ) + requestorInstanceId ) + ", mac=" ) + ( java.lang.String.valueOf ( libcore.util.HexEncoding.encode ( mac ) ) ) ) ) ; } com.android.server.wifi.aware.WifiAwareNative.sWifiAwareStateManager.onMessageReceivedNotification ( pubSubId , requestorInstanceId , mac , message ) ; }
private com.android.dex.ClassData readClassData ( ) { int staticFieldsSize = readUleb128 ( ) ; int instanceFieldsSize = readUleb128 ( ) ; int directMethodsSize = readUleb128 ( ) ; int virtualMethodsSize = readUleb128 ( ) ; com.android.dex.ClassData [ ] staticFields = readFields ( staticFieldsSize ) ; com.android.dex.ClassData [ ] instanceFields = readFields ( instanceFieldsSize ) ; com.android.dex.ClassData [ ] directMethods = readMethods ( directMethodsSize ) ; com.android.dex.ClassData [ ] virtualMethods = readMethods ( virtualMethodsSize ) ; return new com.android.dex.ClassData ( staticFields , instanceFields , directMethods , virtualMethods ) ; }
public void copyFromUnchecked ( byte [ ] d ) { copyFromUnchecked ( d , Element.DataType.SIGNED_8 , d.length ) ; }
public com.android.jack.test.helper.RuntimeTestHelper addProperty ( @ javax.annotation.Nonnull java.lang.String key , @ javax.annotation.Nonnull java.lang.String value ) { java.lang.String oldValue = runtimeProperties.get ( key ) ; if ( ( oldValue != null ) && ( ! ( oldValue.equals ( value ) ) ) ) { throw new java.lang.AssertionError ( ( ( ( ( "property: " + key ) + " with value: " ) + oldValue ) + " is already defined" ) ) ; } runtimeProperties.put ( key , value ) ; return this ; }
private java.util.List parseClassSpecificationArguments ( java.util.List classSpecifications ) throws java.io.IOException , proguard.ParseException { if ( classSpecifications == null ) { classSpecifications = new java.util.ArrayList ( ) ; } readNextWord ( ( ( ( ( ( ( "keyword '" + ( ConfigurationConstants.CLASS_KEYWORD ) ) + "', '" ) + ( JavaConstants.ACC_INTERFACE ) ) + "', or '" ) + ( JavaConstants.ACC_ENUM ) ) + "'" ) , false , true ) ; classSpecifications.add ( parseClassSpecificationArguments ( ) ) ; return classSpecifications ; }
public java.lang.String shell ( org.python.core.PyObject [ ] args , java.lang.String [ ] kws ) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser ( args , kws ) ; com.google.common.base.Preconditions.checkNotNull ( ap ) ; java.lang.String cmd = ap.getString ( 0 ) ; if ( ( args.length ) == 2 ) { return impl.shell ( cmd , ap.getInt ( 1 ) ) ; } else { return impl.shell ( cmd ) ; } }
public com.android.ims.ImsUtInterface getSupplementaryServiceConfiguration ( ) throws com.android.ims.ImsException { if ( ( ( mUt ) != null ) && ( mUt.isBinderAlive ( ) ) ) { return mUt ; } checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsUt iUt = mMmTelFeatureConnection.getUtInterface ( ) ; if ( iUt == null ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , android.telephony.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED ) ; } mUt = new com.android.ims.ImsUt ( iUt ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mUt ; }
public void testStageUninstall_existingStagedDataDistro ( ) throws java.lang.Exception { byte [ ] installedDistroBytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBytes ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; simulateInstalledDistro ( installedDistroBytes ) ; java.io.File stagedDataDir = installer.getStagedTzDataDir ( ) ; assertTrue ( stagedDataDir.mkdir ( ) ) ; assertTrue ( installer.stageUninstall ( ) ) ; assertDistroUninstallStaged ( ) ; assertInstalledDistro ( installedDistroBytes ) ; }
public boolean removeProvider ( java.lang.String fqdn ) { if ( ! ( mProviders.containsKey ( fqdn ) ) ) { android.util.Log.e ( com.android.server.wifi.hotspot2.PasspointManager.TAG , "Config doesn't exist" ) ; return false ; } mProviders.get ( fqdn ) . uninstallCertsAndKeys ( ) ; mProviders.remove ( fqdn ) ; return true ; }
private void beginOperationPending ( ) { mOperationPending = true ; mButtonInstall.setEnabled ( false ) ; mButtonDelete.setEnabled ( false ) ; }
public void uninstallPackage ( @ com.android.annotations.NonNull java.lang.String packageName , int timeout , com.android.utils.ILogger logger ) throws com.android.builder.testing.api.DeviceException { try { iDevice.uninstallPackage ( packageName ) ; } catch ( java.lang.Exception e ) { logger.error ( e , ( "Unable to uninstall " + packageName ) ) ; throw new com.android.builder.testing.api.DeviceException ( e ) ; } }
public void testNumberOfCameras ( ) throws java.lang.Exception { int numCameras = mUtils.getCameraService ( ) . getNumberOfCameras ( com.android.mediaframeworktest.integration.CameraBinderTest.CAMERA_TYPE_ALL ) ; assertTrue ( ( "At least this many cameras: " + ( mUtils.getGuessedNumCameras ( ) ) ) , ( numCameras >= ( mUtils.getGuessedNumCameras ( ) ) ) ) ; android.util.Log.v ( com.android.mediaframeworktest.integration.CameraBinderTest.TAG , ( "Number of cameras " + numCameras ) ) ; }
public java.util.Date getNextUpdate ( ) { java.util.Calendar calendar = java.util.Calendar.getInstance ( java.util.TimeZone.getTimeZone ( "UTC" ) ) ; calendar.set ( java.util.Calendar.MILLISECOND , 0 ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.ASN1_TIME_to_Calendar ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_CRL_get_nextUpdate ( mContext ) , calendar ) ; return calendar.getTime ( ) ; }
private void notifyMtuRequest ( ) { if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) { android.util.Log.d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , "notifyMtuRequest" ) ; } android.content.Intent intent ; if ( ( mCountMtuChange ) == 1 ) { intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleServerService.BLE_MTU_REQUEST_23BYTES ) ; } else if ( ( mCountMtuChange ) == 2 ) { intent = new android.content.Intent ( com.android.cts.verifier.bluetooth.BleServerService.BLE_MTU_REQUEST_512BYTES ) ; } else { return ; } sendBroadcast ( intent ) ; }
public void testNewInstanceString_ByteArrayIntIntConstructor ( ) { runTestNewInstanceString ( "([BII)V" , new org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider ( ) { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue ( debuggeeClassId , "BYTE_ARRAY" ) ; constructorArguments.add ( byteArrayValue ) ; constructorArguments.add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( 0 ) ) ; constructorArguments.add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( 1 ) ) ; } } ) ; }
java.util.Map.Entry < android.os.IBinder , com.android.bluetooth.gatt.AdvertiseManager.AdvertiserInfo > findAdvertiser ( int advertiser_id ) { java.util.Map.Entry < android.os.IBinder , com.android.bluetooth.gatt.AdvertiseManager.AdvertiserInfo > entry = null ; for ( java.util.Map.Entry < android.os.IBinder , com.android.bluetooth.gatt.AdvertiseManager.AdvertiserInfo > e : mAdvertisers.entrySet ( ) ) { if ( ( e.getValue ( ) . id ) == advertiser_id ) { entry = e ; break ; } } return entry ; }
private boolean matchesPossibleNumberAndNationalNumber ( java.lang.String number , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc ) { if ( ( ( numberDesc.getPossibleLengthCount ( ) ) > 0 ) && ( ! ( numberDesc.getPossibleLengthList ( ) . contains ( number.length ( ) ) ) ) ) { return false ; } return matcherApi.matchNationalNumber ( number , numberDesc , false ) ; }
public void freeCache ( java.lang.String uuid , long freeStorageSize ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.freeCache ( uuid , freeStorageSize ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
static int hfToAmVol ( int hfVol ) { int amRange = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.sMaxAmVcVol ) - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.sMinAmVcVol ) ; int hfRange = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MAX_HFP_SCO_VOICE_CALL_VOLUME ) - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MIN_HFP_SCO_VOICE_CALL_VOLUME ) ; int amOffset = ( amRange * ( hfVol - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MIN_HFP_SCO_VOICE_CALL_VOLUME ) ) ) / hfRange ; int amVol = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.sMinAmVcVol ) + amOffset ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( ( ( "HF -> AM " + hfVol ) + " " ) + amVol ) ) ; return amVol ; }
public final int startActivities ( android.app.IApplicationThread caller , java.lang.String callingPackage , android.content.Intent [ ] intents , java.lang.String [ ] resolvedTypes , android.os.IBinder resultTo , android.os.Bundle bOptions , int userId ) { enforceNotIsolatedCaller ( "startActivities" ) ; userId = mUserController.handleIncomingUser ( android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , userId , false , com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY , "startActivity" , null ) ; int ret = mActivityStarter.startActivities ( caller , ( - 1 ) , callingPackage , intents , resolvedTypes , resultTo , bOptions , userId ) ; return ret ; }
private void cancelMissedCallNotification ( android.os.UserHandle userHandle ) { mMissedCallCounts.putIfAbsent ( userHandle , new java.util.concurrent.atomic.AtomicInteger ( 0 ) ) ; mMissedCallCounts.get ( userHandle ) . set ( 0 ) ; if ( sendNotificationCustomComponent ( null , userHandle ) ) { return ; } if ( shouldManageNotificationThroughDefaultDialer ( userHandle ) ) { sendNotificationThroughDefaultDialer ( null , userHandle ) ; return ; } long token = android.os.Binder.clearCallingIdentity ( ) ; try { mNotificationManager.cancelAsUser ( com.android.server.telecom.ui.MissedCallNotifierImpl.NOTIFICATION_TAG , com.android.server.telecom.ui.MissedCallNotifierImpl.MISSED_CALL_NOTIFICATION_ID , userHandle ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } }
public java.util.Map < java.lang.String , java.io.File > getDynamicConfigFiles ( ) { java.util.Map < java.lang.String , java.io.File > configMap = new java.util.HashMap < > ( ) ; for ( com.android.tradefed.build.VersionedFile vFile : mBuildInfo.getFiles ( ) ) { if ( vFile.getVersion ( ) . startsWith ( com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper.CONFIG_PATH_PREFIX ) ) { configMap.put ( vFile.getVersion ( ) . substring ( com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper.CONFIG_PATH_PREFIX.length ( ) ) , vFile.getFile ( ) ) ; } } return configMap ; }
public synchronized void onNewFrame ( final java.awt.image.BufferedImage image ) { ( mCount ) ++ ; mImage = image ; if ( ( mPendingDrawing ) == false ) { getDisplay ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { drawImage ( ) ; } } ) ; mPendingDrawing = true ; } }
public static java.lang.String getJcaEncryptionPaddingFromKeymasterPadding ( int keymasterPadding ) { switch ( keymasterPadding ) { case android.security.keymaster.KeymasterDefs.KM_PAD_NONE : return "NoPadding" ; case android.security.keymaster.KeymasterDefs.KM_PAD_PKCS7 : return "PKCS7Padding" ; case android.security.keymaster.KeymasterDefs.KM_PAD_RSA_PKCS1_1_5_ENCRYPT : return "PKCS1Padding" ; case android.security.keymaster.KeymasterDefs.KM_PAD_RSA_OAEP : return "OEAPPadding" ; default : throw new java.lang.IllegalArgumentException ( ( "Unsupported encryption padding: " + keymasterPadding ) ) ; } }
public void setUp ( ) throws java.lang.Exception { mNetwork = new android.net.Network ( ConnectivityManager.NETID_UNSET ) ; mServer = new android.net.SntpClientTest.SntpTestServer ( ) ; mClient = new android.net.SntpClient ( ) ; }
android.icu.text.MeasureFormat withNumberFormat ( android.icu.text.NumberFormat format ) { return new android.icu.text.MeasureFormat ( getLocale ( ) , this . cache , this . formatWidth , new android.icu.text.MeasureFormat.ImmutableNumberFormat ( format ) , this . rules , this . numericFormatters , this . currencyFormat , this . integerFormat ) ; }
public void testAesCbcHmacMd5Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , crypt , auth , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , crypt , auth , null , false , 1 , true ) ; }
public void TestGreek ( ) throws java.io.IOException { long start = java.lang.System.currentTimeMillis ( ) ; new android.icu.dev.test.translit.RoundTripTest.TransliterationTest ( "Latin-Greek" , 50 ) . test ( "[a-zA-Z]" , getGreekSet ( ) , "[µͺϐ-ϵϹ]" , this , new android.icu.dev.test.translit.RoundTripTest.LegalGreek ( true ) ) ; showElapsed ( start , "TestGreek" ) ; }
public static void main ( java.lang.String [ ] args ) throws java.io.IOException { if ( ( args.length ) != 3 ) { com.android.dx.merge.DexMerger.printUsage ( ) ; return ; } com.android.dex.Dex dexA = new com.android.dex.Dex ( new java.io.File ( args [ 1 ] ) ) ; com.android.dex.Dex dexB = new com.android.dex.Dex ( new java.io.File ( args [ 2 ] ) ) ; com.android.dex.Dex merged = new com.android.dx.merge.DexMerger ( dexA , dexB , CollisionPolicy.KEEP_FIRST ) . merge ( ) ; merged.writeTo ( new java.io.File ( args [ 0 ] ) ) ; }
public static < I , O > com.google.common.util.concurrent.ListenableFuture < O > transform ( com.google.common.util.concurrent.ListenableFuture < I > input , com.google.common.util.concurrent.AsyncFunction < ? super I , ? extends O > function , java.util.concurrent.Executor executor ) { com.google.common.base.Preconditions.checkNotNull ( executor ) ; com.google.common.util.concurrent.Futures.ChainingListenableFuture < I , O > output = new com.google.common.util.concurrent.Futures.ChainingListenableFuture < I , O > ( function , input ) ; input.addListener ( com.google.common.util.concurrent.Futures.rejectionPropagatingRunnable ( output , output , executor ) , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; return output ; }
public void onStopTrackingTouch ( android.widget.SeekBar seekBar ) { com.android.videoeditor.service.ApiService.setAudioTrackVolume ( getContext ( ) , mProject.getPath ( ) , mAudioTrack.getId ( ) , mProgress ) ; }
private void initializeGlobals ( android.renderscript.RenderScript RS , com.android.rs.test.ScriptC_element s ) { simpleElem = android.renderscript.Element.F32_3 ( RS ) ; complexElem = com.android.rs.test.ScriptField_ComplexStruct.createElement ( RS ) ; s.set_simpleElem ( simpleElem ) ; s.set_complexElem ( complexElem ) ; com.android.rs.test.ScriptField_ComplexStruct data = new com.android.rs.test.ScriptField_ComplexStruct ( RS , 1 ) ; s.bind_complexStruct ( data ) ; }
public static com.android.ide.common.resources.configuration.RegionQualifier getQualifier ( java.lang.String segment ) { java.util.regex.Matcher m = com.android.ide.common.resources.configuration.RegionQualifier.sRegionPattern.matcher ( segment ) ; if ( m.matches ( ) ) { com.android.ide.common.resources.configuration.RegionQualifier qualifier = new com.android.ide.common.resources.configuration.RegionQualifier ( ) ; qualifier.mValue = m.group ( 1 ) ; return qualifier ; } return null ; }
public static java.lang.String internalMethodDescriptor ( java.lang.String externalReturnType , java.util.List externalArguments ) { java.lang.StringBuffer internalMethodDescriptor = new java.lang.StringBuffer ( ) ; internalMethodDescriptor.append ( ClassConstants.METHOD_ARGUMENTS_OPEN ) ; for ( int index = 0 ; index < ( externalArguments.size ( ) ) ; index ++ ) { internalMethodDescriptor.append ( proguard.classfile.util.ClassUtil.internalType ( ( ( java.lang.String ) ( externalArguments.get ( index ) ) ) ) ) ; } internalMethodDescriptor.append ( ClassConstants.METHOD_ARGUMENTS_CLOSE ) ; internalMethodDescriptor.append ( proguard.classfile.util.ClassUtil.internalType ( externalReturnType ) ) ; return internalMethodDescriptor.toString ( ) ; }
private boolean makeAppCrashingLocked ( com.android.server.am.ProcessRecord app , java.lang.String shortMsg , java.lang.String longMsg , java.lang.String stackTrace ) { app.crashing = true ; app.crashingReport = generateProcessError ( app , ActivityManager.ProcessErrorStateInfo.CRASHED , null , shortMsg , longMsg , stackTrace ) ; startAppProblemLocked ( app ) ; app.stopFreezingAllLocked ( ) ; return handleAppCrashLocked ( app ) ; }
public void uninstallCaCert ( @ android.annotation.Nullable android.content.ComponentName admin , byte [ ] certBuffer ) { throwIfParentInstance ( "uninstallCaCert" ) ; if ( ( mService ) != null ) { try { final java.lang.String alias = android.app.admin.DevicePolicyManager.getCaCertAlias ( certBuffer ) ; mService.uninstallCaCerts ( admin , mContext.getPackageName ( ) , new java.lang.String [ ] { alias } ) ; } catch ( java.security.cert.CertificateException e ) { android.util.Log.w ( android.app.admin.DevicePolicyManager.TAG , "Unable to parse certificate" , e ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public boolean accept ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project , @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file ) { return ( com.intellij.openapi.fileEditor.impl.text.TextEditorProvider.isTextFile ( file ) ) && ( ! ( com.intellij.psi.SingleRootFileViewProvider.isTooLargeForContentLoading ( file ) ) ) ; }
public int getVersionCode ( ) { int versionCode = ( ( mMergedFlavor.getVersionCode ( ) ) != null ) ? mMergedFlavor.getVersionCode ( ) : - 1 ; if ( ( versionCode == ( - 1 ) ) && ( ! ( mType.isForTesting ( ) ) ) ) { versionCode = getVersionCodeFromManifest ( ) ; } return versionCode ; }
public void testRun_withAddInstrumentationArg ( ) throws java.lang.Exception { final java.lang.String extraArgName = "blah" ; final java.lang.String extraArgValue = "blahValue" ; mRunner.addInstrumentationArg ( extraArgName , extraArgValue ) ; java.lang.String expectedCmd = org.easymock.EasyMock.contains ( java.lang.String.format ( "-e %s %s" , extraArgName , extraArgValue ) ) ; runAndVerify ( expectedCmd ) ; }
public void performReceive ( android.content.Intent intent , int resultCode , java.lang.String data , android.os.Bundle extras , boolean ordered , boolean sticky , int sendingUser ) { synchronized ( this ) { requestPssAllProcsLocked ( android.os.SystemClock.uptimeMillis ( ) , true , false ) ; } }
public com.android.ims.internal.IImsUt getUtInterface ( int slotId , int featureType ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature.getUtInterface ( ) ; } } return null ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.when ( mContext.getResources ( ) ) . thenReturn ( mResources ) ; org.mockito.Mockito.when ( mResources.getInteger ( R.integer.config_networkAvoidBadWifi ) ) . thenReturn ( android.net.ip.IpManagerTest.DEFAULT_AVOIDBADWIFI_CONFIG_VALUE ) ; mContentResolver = new android.test.mock.MockContentResolver ( ) ; mContentResolver.addProvider ( Settings.AUTHORITY , new com.android.internal.util.test.FakeSettingsProvider ( ) ) ; org.mockito.Mockito.when ( mContext.getContentResolver ( ) ) . thenReturn ( mContentResolver ) ; }
private void initForReal ( ) { android.content.Context ctx = com.android.webview.chromium.WebViewChromium.resourcesContextWrapper ( mWebView.getContext ( ) ) ; mAwContents = new org.chromium.android_webview.AwContents ( mFactory.getBrowserContext ( ) , mWebView , ctx , new com.android.webview.chromium.WebViewChromium.InternalAccessAdapter ( ) , new com.android.webview.chromium.WebViewChromium.WebViewNativeGLDelegate ( ) , mContentsClientAdapter , mWebSettings.getAwSettings ( ) ) ; if ( ( mAppTargetSdkVersion ) >= ( Build.VERSION_CODES.KITKAT ) ) { org.chromium.android_webview.AwContents.setShouldDownloadFavicons ( ) ; } mAwContents.setLayerType ( mWebView.getLayerType ( ) , null ) ; }
public void testSetupDriverForSoftApModeError ( ) { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; android.net.wifi.IWificond wificond = org.mockito.Mockito.mock ( android.net.wifi.IWificond.class ) ; org.mockito.Mockito.when ( wificondControl.setupDriverForSoftApMode ( ) ) . thenReturn ( null ) ; mWifiNative.setWificondControl ( wificondControl ) ; android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupForSoftApMode ( ) ; org.junit.Assert.assertEquals ( null , returnedApInterface ) ; org.mockito.Mockito.verify ( mWifiNative ) . startHal ( org.mockito.Mockito.eq ( false ) ) ; org.mockito.Mockito.verify ( wificondControl ) . setupDriverForSoftApMode ( ) ; }
public boolean hasMoreElements ( ) { return it.hasNext ( ) ; }
public java.lang.String getDescriptionForNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.util.Locale languageCode ) { com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType numberType = phoneUtil.getNumberType ( number ) ; if ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.UNKNOWN ) ) { return "" ; } else if ( ! ( phoneUtil.isNumberGeographical ( numberType , number.getCountryCode ( ) ) ) ) { return getCountryNameForNumber ( number , languageCode ) ; } return getDescriptionForValidNumber ( number , languageCode ) ; }
private static void assertFormat ( java.util.Date date , java.lang.String pattern , java.lang.String expectedOutput ) { java.text.SimpleDateFormat df = new java.text.SimpleDateFormat ( pattern , new java.util.Locale ( "en" , "US" ) ) ; df.setTimeZone ( java.util.TimeZone.getTimeZone ( "EST" ) ) ; java.lang.String output = df.format ( date ) ; assertEquals ( ( ( "Invalid output '" + pattern ) + "'" ) , expectedOutput , output ) ; }
private void close ( int cause ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "Closing " + ( mClosed ) ) ) ; } if ( mClosed ) { return ; } setDisconnected ( new android.telecom.DisconnectCause ( cause ) ) ; mClosed = true ; mCurrentCall = null ; destroy ( ) ; }
public void executeRequestClosesConnection_connectionError ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockConnection.getResponseCode ( ) ) . thenThrow ( new java.net.SocketTimeoutException ( ) ) ; try { mHurlStack.executeRequest ( new com.android.volley.mock.TestRequest.Get ( ) , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; org.junit.Assert.fail ( "Should have thrown exception" ) ; } catch ( java.io.IOException e ) { org.mockito.Mockito.verify ( mMockConnection ) . disconnect ( ) ; } }
public void testFromStringFailsWithUpperCaseString ( ) { java.lang.String string = com.google.common.hash.Hashing.sha1 ( ) . hashString ( "foo" , com.google.common.base.Charsets.US_ASCII ) . toString ( ) . toUpperCase ( ) ; try { com.google.common.hash.HashCode.fromString ( string ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public void subscriptionStatusChanged ( int indicationType , boolean activate ) { mRil.processIndication ( indicationType ) ; int [ ] response = new int [ 1 ] ; response [ 0 ] = ( activate ) ? 1 : 0 ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_UICC_SUBSCRIPTION_STATUS_CHANGED , response ) ; mRil.mSubscriptionStatusRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
public static com.android.dialer.speeddial.SpeedDialCursor newInstance ( android.database.Cursor strequentCursor , java.util.List < com.android.dialer.speeddial.room.SpeedDialEntry > entries ) { if ( ( strequentCursor == null ) || ( ( strequentCursor.getCount ( ) ) == 0 ) ) { return null ; } com.android.dialer.speeddial.SpeedDialCursor cursor = new com.android.dialer.speeddial.SpeedDialCursor ( com.android.dialer.speeddial.SpeedDialCursor.buildCursors ( strequentCursor , entries ) ) ; strequentCursor.close ( ) ; return cursor ; }
public boolean hasSourceUrl ( com.android.sdklib.internal.repository.SdkSource source ) { for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources.values ( ) ) { for ( com.android.sdklib.internal.repository.SdkSource s : list ) { if ( s.equals ( source ) ) { return true ; } } } return false ; }
public void test_ConstructorII ( ) throws java.io.IOException { s = new java.net.ServerSocket ( 0 , 1 ) ; s.setSoTimeout ( 2000 ) ; startClient ( s.getLocalPort ( ) ) ; sconn = s.accept ( ) ; sconn.close ( ) ; s.close ( ) ; }
public java.lang.String [ ] getForbiddenPlmns ( int subId , int appType ) { mApp.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PHONE_STATE , "Requires READ_PHONE_STATE" ) ; if ( ( appType != ( android.telephony.TelephonyManager.APPTYPE_USIM ) ) && ( appType != ( android.telephony.TelephonyManager.APPTYPE_SIM ) ) ) { com.android.phone.PhoneInterfaceManager.loge ( "getForbiddenPlmnList(): App Type must be USIM or SIM" ) ; return null ; } java.lang.Object response = sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_GET_FORBIDDEN_PLMNS , new java.lang.Integer ( appType ) , subId ) ; if ( response instanceof java.lang.String [ ] ) { return ( ( java.lang.String [ ] ) ( response ) ) ; } return null ; }
java.lang.String attemptToFormatAccruedDigits ( ) { for ( com.google.i18n.phonenumbers.Phonemetadata.NumberFormat numberFormat : possibleFormats ) { java.util.regex.Matcher m = regexCache.getPatternForRegex ( numberFormat.getPattern ( ) ) . matcher ( nationalNumber ) ; if ( m.matches ( ) ) { shouldAddSpaceAfterNationalPrefix = com.google.i18n.phonenumbers.AsYouTypeFormatter.NATIONAL_PREFIX_SEPARATORS_PATTERN.matcher ( numberFormat.getNationalPrefixFormattingRule ( ) ) . find ( ) ; java.lang.String formattedNumber = m.replaceAll ( numberFormat.getFormat ( ) ) ; return appendNationalNumber ( formattedNumber ) ; } } return "" ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { if ( ConnectivityManager.CONNECTIVITY_ACTION.equals ( intent.getAction ( ) ) ) { android.net.NetworkInfo info = connectivityManager.getActiveNetworkInfo ( ) ; boolean isConnected = ( info != null ) && ( info.isConnected ( ) ) ; if ( ( ( mListener ) != null ) && ( ( ( mConnected ) == null ) || ( ( mConnected ) != isConnected ) ) ) { mConnected = isConnected ; mListener.onConnectionStateChanged ( mConnected ) ; } } }
private void addRemoteSysImg ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay tag , java.lang.String abi ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newSysImg ( version , tag , abi , revision ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
private void open ( java.lang.String name ) throws java.io.FileNotFoundException { open0 ( name ) ; }
private void propagateVarRef ( com.android.jack.ir.ast.JSsaVariableDefRef lhs , com.android.jack.ir.ast.JSsaVariableUseRef rhs , com.android.jack.transformations.request.TransformationRequest tr ) { com.android.jack.ir.ast.JSsaVariableDefRef def = rhs.getDef ( ) ; for ( com.android.jack.ir.ast.JSsaVariableRef oldUse : com.google.common.collect.Lists.newArrayList ( lhs.getUses ( ) ) ) { com.android.jack.ir.ast.JSsaVariableRef newUse = def.makeRef ( oldUse.getSourceInfo ( ) ) ; newUse.addAllMarkers ( oldUse.getAllMarkers ( ) ) ; tr.append ( new com.android.jack.transformations.request.Replace ( oldUse , newUse ) ) ; } lhs.removeUses ( ) ; }
public void testOverlay1Content ( ) throws java.lang.Exception { java.io.File project = buildProject ( com.android.build.gradle.FOLDER_TEST_REGULAR , "overlay1" , BasePlugin.GRADLE_TEST_VERSION ) ; java.io.File drawableOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/res/debug/drawable" ) ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "no_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "type_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; }
protected android.content.res.Resources getResources ( ) { return mMockResources ; }
public void onCallTerminated ( com.android.ims.ImsCall imsCall , android.telephony.ims.ImsReasonInfo reasonInfo ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "mImsUssdListener onCallTerminated reasonCode=" + ( reasonInfo.getCode ( ) ) ) ) ; removeMessages ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_CHECK_FOR_WIFI_HANDOVER ) ; if ( imsCall == ( mUssdSession ) ) { mUssdSession = null ; if ( ( mPendingUssd ) != null ) { com.android.internal.telephony.CommandException ex = new com.android.internal.telephony.CommandException ( CommandException.Error.GENERIC_FAILURE ) ; android.os.AsyncResult.forMessage ( mPendingUssd , null , ex ) ; mPendingUssd.sendToTarget ( ) ; mPendingUssd = null ; } } imsCall.close ( ) ; }
private void copyTo ( java.lang.Object array , android.support.v8.renderscript.Element.DataType dt , int arrayLen ) { mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , array , dt ) ; }
public java.lang.String computeFullNameWithSplits ( @ com.android.annotations.NonNull java.lang.String splitName ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String flavorName = getFlavorName ( ) ; if ( ! ( flavorName.isEmpty ( ) ) ) { sb.append ( flavorName ) ; sb.append ( com.android.builder.internal.StringHelper.capitalize ( splitName ) ) ; } else { sb.append ( splitName ) ; } sb.append ( com.android.builder.internal.StringHelper.capitalize ( mBuildType.getName ( ) ) ) ; if ( mType.isForTesting ( ) ) { sb.append ( mType.getSuffix ( ) ) ; } return sb.toString ( ) ; }
private void refreshUI ( ) { if ( ( ( mTrace ) == null ) || ( ( mTrace.getGLCalls ( ) . size ( ) ) == 0 ) ) { setFrameCount ( 0 ) ; return ; } setFrameCount ( mTrace.getFrames ( ) . size ( ) ) ; selectFrame ( 1 ) ; }
public void copy1DRangeFrom ( int off , int count , java.lang.Object array ) { copy1DRangeFromUnchecked ( off , count , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; }
public void sendEmergencyCallStateChange ( boolean callActive ) { if ( mBroadcastEmergencyCallStateChanges ) { android.content.Intent intent = new android.content.Intent ( TelephonyIntents.ACTION_EMERGENCY_CALL_STATE_CHANGED ) ; intent.putExtra ( PhoneConstants.PHONE_IN_EMERGENCY_CALL , callActive ) ; android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra ( intent , getPhoneId ( ) ) ; android.app.ActivityManager.broadcastStickyIntent ( intent , UserHandle.USER_ALL ) ; if ( com.android.internal.telephony.GsmCdmaPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.GsmCdmaPhone.LOG_TAG , ( "sendEmergencyCallStateChange: callActive " + callActive ) ) ; } }
private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream.defaultReadObject ( ) ; byte [ ] encoded = ( ( byte [ ] ) ( stream.readObject ( ) ) ) ; key = new org.conscrypt.OpenSSLKey ( org.conscrypt.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO ( encoded ) ) ; group = new org.conscrypt.OpenSSLECGroupContext ( new org.conscrypt.NativeRef.EC_GROUP ( org.conscrypt.NativeCrypto.EC_KEY_get1_group ( key.getNativeRef ( ) ) ) ) ; }
public void setHorizontalScrollbarOverlay ( final boolean overlay ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setHorizontalScrollbarOverlay ( overlay ) ; } } ) ; return ; } mAwContents.setHorizontalScrollbarOverlay ( overlay ) ; }
private void addToPlayListRequestFromNative ( byte [ ] address , byte scope , byte [ ] uid , int uidCounter ) { android.util.Log.w ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "addToPlayListRequestFromNative: not supported! scope=" + scope ) ) ; addToNowPlayingRspNative ( address , AvrcpConstants.RSP_INTERNAL_ERR ) ; }
public short readShort ( ) { file.checkNotClosed ( ) ; libcore.io.NioBufferIterator.checkReadBounds ( position , length , SizeOf.SHORT ) ; short result = libcore.io.Memory.peekShort ( ( ( address ) + ( position ) ) , swap ) ; position += SizeOf.SHORT ; return result ; }
public void testGetValues003_Char ( ) { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( StackTrace002Debuggee.CHAR_SIGNAL ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.CHAR_PARAM_VALUE ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo suspensionMethodInfo = tester.addTestMethod ( "breakpointChar" ) ; suspensionMethodInfo.addVariable ( "param" , expectedValue ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointChar" ) ; methodInfo.addVariable ( "param" , expectedValue ) ; runStackFrameTest ( tester , suspensionMethodInfo ) ; }
public void visitInvokeDynamicConstant ( proguard.shrink.Clazz clazz , proguard.shrink.InvokeDynamicConstant invokeDynamicConstant ) { if ( shouldBeMarkedAsUsed ( invokeDynamicConstant ) ) { markAsUsed ( invokeDynamicConstant ) ; markConstant ( clazz , invokeDynamicConstant.u2nameAndTypeIndex ) ; invokeDynamicConstant.referencedClassesAccept ( this ) ; clazz.attributesAccept ( new proguard.shrink.UsageMarker.MyBootStrapMethodUsageMarker ( invokeDynamicConstant.u2bootstrapMethodAttributeIndex ) ) ; } }
public java.util.Iterator < com.android.jack.ir.ast.JMethodId > iterator ( ) { return new java.util.Iterator < com.android.jack.ir.ast.JMethodId > ( ) { @ javax.annotation.Nonnull private final java.util.Iterator < com.android.jack.frontend.VirtualMethodsMarker.ComparableMethodId > iterator = virtualMethods.values ( ) . iterator ( ) ; @ java.lang.Override public boolean hasNext ( ) { return iterator.hasNext ( ) ; } @ javax.annotation.Nonnull @ java.lang.Override public com.android.jack.ir.ast.JMethodId next ( ) { return iterator.next ( ) . methodId ; } @ java.lang.Override public void remove ( ) { throw new java.lang.UnsupportedOperationException ( ) ; } } ; }
public boolean equals ( java.lang.Object a , java.lang.Object b ) { if ( ( a instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) && ( b instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ) { com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode keyA = ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ( a ) ) . getUiViewNode ( ) ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode keyB = ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ( b ) ) . getUiViewNode ( ) ; if ( keyA != null ) { return keyA.equals ( keyB ) ; } } if ( a != null ) { return a.equals ( b ) ; } return false ; }
public void testOnSetUpAdapterSingleInstance ( ) throws java.lang.Exception { java.io.File testAdapter = new java.io.File ( mTestDir , ( ( VTS_NATIVE_TEST_DIR ) + ( TEST_HAL_ADAPTER_BINARY ) ) ) ; testAdapter.createNewFile ( ) ; java.lang.String output = "android.hardware.foo@1.1::IFoo/default" ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mPreparer.setUp ( mDevice , mBuildInfo ) ; verify ( mDevice , times ( 1 ) ) . pushFile ( eq ( testAdapter ) , eq ( ( ( TARGET_NATIVE_TEST_DIR ) + ( TEST_HAL_ADAPTER_BINARY ) ) ) ) ; java.lang.String adapterCmd = java.lang.String.format ( "%s /data/nativetest64/%s %s %s %d" , SCRIPT_PATH , TEST_HAL_ADAPTER_BINARY , "IFoo" , "default" , THREAD_COUNT_DEFAULT ) ; verify ( mDevice , times ( 1 ) ) . executeShellCommand ( eq ( adapterCmd ) ) ; }
com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex ( com.android.internal.telephony.gsm.GsmCall call , int index ) throws com.android.internal.telephony.CallStateException { int count = call.mConnections.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { com.android.internal.telephony.gsm.GsmConnection cn = ( ( com.android.internal.telephony.gsm.GsmConnection ) ( call.mConnections.get ( i ) ) ) ; if ( ( cn.getGSMIndex ( ) ) == index ) { return cn ; } } return null ; }
private void startService ( ) throws java.util.concurrent.TimeoutException { com.android.bluetooth.TestUtils.startService ( mServiceRule , com.android.bluetooth.a2dp.A2dpService.class ) ; mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService ( ) ; org.junit.Assert.assertNotNull ( mA2dpService ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Boolean > isDirty ( com.google.common.collect.ImmutableSet < com.android.dialer.DialerPhoneNumber > phoneNumbers , long lastModified ) { java.util.List < com.google.common.util.concurrent.ListenableFuture < java.lang.Boolean > > futures = new java.util.ArrayList < > ( ) ; for ( com.android.dialer.phonelookup.PhoneLookup phoneLookup : phoneLookups ) { futures.add ( phoneLookup.isDirty ( phoneNumbers , lastModified ) ) ; } return com.android.dialer.common.concurrent.DialerFutures.firstMatching ( futures , com.google.common.base.Preconditions :: checkNotNull , false ) ; }
public void setUp ( ) throws java.lang.Exception { mGridView = null ; mActivity = mActivityRule.getActivity ( ) ; new android.cts.util.PollingCheck ( ) { @ java.lang.Override protected boolean check ( ) { return mActivity.hasWindowFocus ( ) ; } } . run ( ) ; mInstrumentation = android.support.test.InstrumentationRegistry.getInstrumentation ( ) ; }
public void testDeserializeUnserializableField ( ) throws java.lang.Exception { java.lang.String s = "aced0005737200386c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6e54657" + ( ( ( ( "3742453657269616c697a61626c65436f6e7461696e65723200000000000000000200014c000e7" + "56e73657269616c697a61626c657400334c6c6962636f72652f6a6176612f696f2f53657269616" ) + "c697a6174696f6e546573742457617353657269616c697a61626c653b7870737200316c6962636" ) + "f72652e6a6176612e696f2e53657269616c697a6174696f6e546573742457617353657269616c6" ) + "97a61626c65000000000000000002000149000169787000000000" ) ; assertFalse ( libcore.java.io.SerializationTest.serializableContainer2InitializedFlag ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; try { libcore.libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertTrue ( libcore.java.io.SerializationTest.serializableContainer2InitializedFlag ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; }
public void execute ( com.android.build.gradle.model.AndroidBinary androidBinary ) { com.android.build.gradle.model.DefaultAndroidBinary binary = ( ( com.android.build.gradle.model.DefaultAndroidBinary ) ( androidBinary ) ) ; binary.setBuildType ( new com.android.build.gradle.managed.adaptor.BuildTypeAdaptor ( buildType ) ) ; binary.setProductFlavors ( flavorCombo.getFlavorList ( ) ) ; }
public void testBindFailureWhenBound ( ) { java.util.HashSet < android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair > testFeatures = new java.util.HashSet < > ( ) ; testFeatures.add ( new android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair ( 1 , 1 ) ) ; bindAndConnectService ( testFeatures ) ; junit.framework.Assert.assertFalse ( mTestImsServiceController.bind ( testFeatures ) ) ; org.mockito.Mockito.verify ( mMockContext , org.mockito.Mockito.times ( 1 ) ) . bindService ( org.mockito.Matchers.any ( ) , org.mockito.Matchers.any ( ) , org.mockito.Matchers.anyInt ( ) ) ; }
public java.lang.String toString ( ) { java.lang.String id = getStringAttr ( com.android.tools.lint.detector.api.LintConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID ) ; return ( ( ( ( ( ( ( ( ( "TestNode [id=" + ( id != null ? id : "?" ) ) + ", fqn=" ) + ( mFqcn ) ) + ", infos=" ) + ( mAttributeInfos ) ) + ", attributes=" ) + ( mAttributes ) ) + ", bounds=" ) + ( mBounds ) ) + "]" ; }
public void onResume ( ) { super . onResume ( ) ; if ( ( ( ! ( mTextMsg.responseNeeded ) ) && ( ( com.android.stk.StkApp.calculateDurationInMilis ( mTextMsg.duration ) ) == 0 ) ) && ( mTextMsg.userClear ) ) { com.android.internal.telephony.cat.CatLog.d ( this , "User should clear text..show message forever" ) ; return ; } startTimeOut ( mTextMsg.userClear ) ; }
public boolean addPasspointConfiguration ( android.net.wifi.hotspot2.PasspointConfiguration config ) { enforceChangePermission ( ) ; return mPasspointManager.addProvider ( config ) ; }
public boolean isBleScanAlwaysAvailable ( ) { if ( ( isAirplaneModeOn ( ) ) && ( ! ( mEnable ) ) ) { return false ; } try { return ( Settings.Global.getInt ( mContentResolver , Settings.Global.BLE_SCAN_ALWAYS_AVAILABLE ) ) != 0 ; } catch ( android.provider.Settings.SettingNotFoundException e ) { } return false ; }
public void testCapitalize ( ) { assertEquals ( "UPPER" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "UPPER" ) ) ; assertEquals ( "Lower" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "lower" ) ) ; assertEquals ( "Capital" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "Capital" ) ) ; assertEquals ( "CamelCase" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "camelCase" ) ) ; assertEquals ( "" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "" ) ) ; assertSame ( "Foo" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "Foo" ) ) ; }
public void testUngrant_NoGrant_Failure ( ) throws java.lang.Exception { assertTrue ( "Password should work for keystore" , mKeyStore.password ( android.security.KeyStoreTest.TEST_PASSWD ) ) ; assertTrue ( "Should be able to generate key for testcase" , mKeyStore.generate ( android.security.KeyStoreTest.TEST_KEYNAME , KeyStore.UID_SELF , NativeConstants.EVP_PKEY_RSA , android.security.KeyStoreTest.RSA_KEY_SIZE , KeyStore.FLAG_ENCRYPTED , null ) ) ; assertFalse ( "Should not be able to revoke not existent grant" , mKeyStore.ungrant ( android.security.KeyStoreTest.TEST_KEYNAME , 0 ) ) ; }
private boolean checkAndroidProject ( org.eclipse.core.resources.IProject project ) throws org.eclipse.core.runtime.CoreException { if ( ( project.hasNature ( org.eclipse.jdt.core.JavaCore.NATURE_ID ) ) == false ) { java.lang.String msg = java.lang.String.format ( "%1$s is not a Java project!" , project.getName ( ) ) ; com.android.ide.eclipse.adt.AdtPlugin.displayError ( "Android Launch" , msg ) ; return false ; } if ( ( project.hasNature ( AndroidConstants.NATURE_DEFAULT ) ) == false ) { java.lang.String msg = java.lang.String.format ( "%1$s is not an Android project!" , project.getName ( ) ) ; com.android.ide.eclipse.adt.AdtPlugin.displayError ( "Android Launch" , msg ) ; return false ; } return true ; }
public void stop ( ) { if ( ! ( mStarted ) ) { return ; } mTvInputManager.unregisterCallback ( mInternalCallback ) ; mStarted = false ; mInputStateMap.clear ( ) ; mInputMap.clear ( ) ; mTvInputLabels.clear ( ) ; mTvInputCustomLabels.clear ( ) ; mTvInputApplicationLabels.clear ( ) ; mTvInputApplicationIcons.clear ( ) ; mTvInputAppliactionBanners.clear ( ) ; mInputIdToPartnerInputMap.clear ( ) ; }
private static com.android.manifmerger.NodeOperationType calculateNodeOperationType ( @ com.android.annotations.NonNull com.android.manifmerger.XmlElement higherPriority , @ com.android.annotations.NonNull com.android.manifmerger.XmlElement lowerPriority ) { com.android.manifmerger.NodeOperationType operationType = higherPriority.getOperationType ( ) ; if ( ( ( higherPriority.supportsSelector ( ) ) && ( ( higherPriority.mSelector ) != null ) ) && ( ! ( higherPriority.mSelector.appliesTo ( lowerPriority ) ) ) ) { operationType = NodeOperationType.MERGE ; } return operationType ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( ( options.coreLibrary ? "__desugar__/" : "" ) ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; boolean allowCallsToObjectsNonNull = ( options.minSdkVersion ) >= 19 ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; if ( ! allowCallsToObjectsNonNull ) { visitor = new com.google.devtools.build.android.desugar.ObjectsRequireNonNullMethodInliner ( visitor ) ; } reader.accept ( visitor , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , null , allowDefaultMethods ) ; if ( ! allowCallsToObjectsNonNull ) { visitor = new com.google.devtools.build.android.desugar.ObjectsRequireNonNullMethodInliner ( visitor ) ; } reader.accept ( visitor , 0 ) ; java.lang.String filename = ( rewriter.unprefix ( lambdaClass.getValue ( ) . desiredInternalName ( ) ) ) + ".class" ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , filename , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
protected void abortOnBadSetup ( org.eclipse.jdt.core.IJavaProject javaProject ) throws com.android.ide.eclipse.adt.internal.build.builders.AbortBuildException { super . abortOnBadSetup ( javaProject ) ; org.eclipse.core.resources.IProject iProject = getProject ( ) ; stopOnMarker ( iProject , null , IResource.DEPTH_ZERO ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_AAPT_COMPILE , IResource.DEPTH_ZERO ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_AIDL , IResource.DEPTH_ZERO ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_ANDROID , IResource.DEPTH_ZERO ) ; }
void visitClass ( java.lang.Class < ? > t ) { builder.add ( t ) ; }
public static com.android.ide.common.resources.configuration.CountryCodeQualifier getQualifier ( java.lang.String segment ) { java.util.regex.Matcher m = com.android.ide.common.resources.configuration.CountryCodeQualifier.sCountryCodePattern.matcher ( segment ) ; if ( m.matches ( ) ) { java.lang.String v = m.group ( 1 ) ; int code = - 1 ; try { code = java.lang.Integer.parseInt ( v ) ; } catch ( java.lang.NumberFormatException e ) { return null ; } com.android.ide.common.resources.configuration.CountryCodeQualifier qualifier = new com.android.ide.common.resources.configuration.CountryCodeQualifier ( code ) ; return qualifier ; } return null ; }
public void testProperties ( ) throws java.lang.Exception { com.android.ide.common.rendering.RenderSecurityManager manager = new com.android.ide.common.rendering.RenderSecurityManager ( null , null ) ; try { manager.setActive ( true , myCredential ) ; java.lang.System.getProperties ( ) ; fail ( "Should have thrown security exception" ) ; } catch ( java.lang.SecurityException exception ) { assertEquals ( "Property access not allowed during rendering" , exception.toString ( ) ) ; } finally { manager.dispose ( myCredential ) ; } }
private void notifyRouteChange ( java.lang.String action , android.net.RouteInfo route ) { if ( action.equals ( "updated" ) ) { invokeForAllObservers ( ( o ) -> o.routeUpdated ( route ) ) ; } else { invokeForAllObservers ( ( o ) -> o.routeRemoved ( route ) ) ; } }
public static boolean isBlocked ( android.content.Context context , java.lang.String phoneNumber ) { try { final android.os.Bundle res = context.getContentResolver ( ) . call ( android.provider.BlockedNumberContract.AUTHORITY_URI , android.provider.BlockedNumberContract.METHOD_IS_BLOCKED , phoneNumber , null ) ; return ( res != null ) && ( res.getBoolean ( android.provider.BlockedNumberContract.RES_NUMBER_IS_BLOCKED , false ) ) ; } catch ( java.lang.NullPointerException | java.lang.IllegalArgumentException ex ) { android.telecom.Log.w ( null , "isBlocked: provider not ready." ) ; return false ; } }
void handleLaunchTaskBehindCompleteLocked ( com.android.server.am.ActivityRecord r ) { r.mLaunchTaskBehind = false ; final com.android.server.am.TaskRecord task = r.task ; task.setLastThumbnail ( task.stack.screenshotActivities ( r ) ) ; mService.addRecentTaskLocked ( task ) ; mService.notifyTaskStackChangedLocked ( ) ; mWindowManager.setAppVisibility ( r.appToken , false ) ; }
private int clamp ( int i , int min , int max ) { if ( i < min ) { return min ; } if ( i > max ) { return max ; } return i ; }
private int calculateBaselineRouteMessage ( boolean isExplicitUserRequest ) { boolean isSkipEarpiece = false ; if ( ! isExplicitUserRequest ) { synchronized ( mLock ) { isSkipEarpiece = mCallsManager.hasVideoCall ( ) ; } } if ( ( ( ( mAvailableRoutes ) & ( com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_EARPIECE ) ) != 0 ) && ( ! isSkipEarpiece ) ) { return isExplicitUserRequest ? com.android.server.telecom.CallAudioRouteStateMachine.USER_SWITCH_EARPIECE : com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_EARPIECE ; } else if ( ( ( mAvailableRoutes ) & ( com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET ) ) != 0 ) { return isExplicitUserRequest ? com.android.server.telecom.CallAudioRouteStateMachine.USER_SWITCH_HEADSET : com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET ; } else { return isExplicitUserRequest ? com.android.server.telecom.CallAudioRouteStateMachine.USER_SWITCH_SPEAKER : com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_SPEAKER ; } }
public java.lang.String toString ( ) { java.lang.String toString = mSourceLocation.print ( true ) ; if ( ( mPosition ) != null ) { toString += ( ( ":" + ( mPosition.getLine ( ) ) ) + ":" ) + ( mPosition.getColumn ( ) ) ; } return toString ; }
void onPostDialWait ( com.android.server.telecom.Call call , java.lang.String remaining ) { if ( ! ( mInCallServices.isEmpty ( ) ) ) { android.telecom.Log.i ( this , "Calling onPostDialWait, remaining = %s" , remaining ) ; for ( com.android.internal.telecom.IInCallService inCallService : mInCallServices.values ( ) ) { try { inCallService.setPostDialWait ( mCallIdMapper.getCallId ( call ) , remaining ) ; } catch ( android.os.RemoteException ignored ) { } } } }
synchronized void nAllocationRead1D ( long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationRead1D ( mContext , id , off , mip , count , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
private boolean shouldTurnOffDormancyUpdate ( ) { if ( mIsPowerSaveOn ) { return true ; } if ( ( ( ( mIsCharging ) || ( mIsScreenOn ) ) || ( mIsTetheringOn ) ) || ( ( mUpdateModes.get ( TelephonyManager.INDICATION_FILTER_DATA_CALL_DORMANCY_CHANGED ) ) == ( android.telephony.TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF ) ) ) { return false ; } return true ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( "AaptOptions{" + ", ignoreAssets=" ) + ( ignoreAssets ) ) + ", noCompress=" ) + ( noCompress ) ) + ", failOnMissingConfigEntry=" ) + ( failOnMissingConfigEntry ) ) + ", additionalParameters=" ) + ( additionalParameters ) ) + "}" ; }
public final void update ( byte input ) throws java.lang.IllegalStateException { if ( ! ( isInitMac ) ) { throw new java.lang.IllegalStateException ( ) ; } getSpi ( ) . engineUpdate ( input ) ; }
public void dispose ( ) { for ( org.eclipse.swt.graphics.Image icon : mIconMap.values ( ) ) { if ( icon != null ) { icon.dispose ( ) ; } } mIconMap.clear ( ) ; for ( org.eclipse.swt.graphics.Image icon : mUrlMap.values ( ) ) { if ( icon != null ) { icon.dispose ( ) ; } } mUrlMap.clear ( ) ; }
public java.lang.String getDisplayScript ( java.util.Locale locale ) { if ( scriptCode.isEmpty ( ) ) { return "" ; } java.lang.String result = libcore.icu.ICU.getDisplayScript ( this , locale ) ; if ( result == null ) { result = libcore.icu.ICU.getDisplayScript ( this , java.util.Locale.getDefault ( ) ) ; } return result ; }
void resetProperties ( ) { if ( ( mCurrentAppType ) == ( UiccController.APP_FAM_3GPP ) ) { log ( ( "update icc_operator_numeric=" + "" ) ) ; mTelephonyManager.setSimOperatorNumericForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimCountryIsoForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimOperatorNameForPhone ( mPhoneId , "" ) ; } }
private void onInstallSelectedArchives ( ) { java.util.ArrayList < com.android.sdklib.internal.repository.Archive > archives = new java.util.ArrayList < com.android.sdklib.internal.repository.Archive > ( ) ; for ( java.lang.Object element : mTreeViewerSources.getCheckedElements ( ) ) { if ( element instanceof com.android.sdklib.internal.repository.Archive ) { archives.add ( ( ( com.android.sdklib.internal.repository.Archive ) ( element ) ) ) ; } } if ( ( mUpdaterData ) != null ) { mUpdaterData.updateOrInstallAll_WithGUI ( archives , mUpdateOnlyCheckBox.getSelection ( ) ) ; } }
public java.lang.String getProperty ( @ javax.annotation.Nonnull java.lang.String key ) throws com.android.jack.library.MissingLibraryPropertyException { if ( ! ( libraryProperties.containsKey ( key ) ) ) { throw new com.android.jack.library.MissingLibraryPropertyException ( key , getLocation ( ) ) ; } return ( ( java.lang.String ) ( libraryProperties.get ( key ) ) ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "name" , name ) . add ( "storeFile" , ( ( getStoreFile ( ) ) != null ? getStoreFile ( ) . getAbsolutePath ( ) : "null" ) ) . add ( "storePassword" , getStorePassword ( ) ) . add ( "keyAlias" , getKeyAlias ( ) ) . add ( "keyPassword" , getKeyPassword ( ) ) . add ( "storeType" , getStoreFile ( ) ) . toString ( ) ; }
public boolean enableNdefPush ( ) throws android.os.RemoteException { com.android.nfc.NfcPermissions.enforceAdminPermissions ( mContext ) ; synchronized ( this ) { if ( mIsNdefPushEnabled ) { return true ; } android.util.Log.i ( com.android.nfc.NfcService.TAG , "enabling NDEF Push" ) ; mPrefsEditor.putBoolean ( com.android.nfc.NfcService.PREF_NDEF_PUSH_ON , true ) ; mPrefsEditor.apply ( ) ; mIsNdefPushEnabled = true ; enforceBeamShareActivityPolicy ( mContext , new android.os.UserHandle ( mUserId ) ) ; if ( isNfcEnabled ( ) ) { mP2pLinkManager.enableDisable ( true , true ) ; } mBackupManager.dataChanged ( ) ; } return true ; }
public void test_socket_accept_Blocking_NotBound ( ) throws java.io.IOException { java.net.ServerSocket gotSocket = serverChannel.socket ( ) ; serverChannel.configureBlocking ( true ) ; try { gotSocket.accept ( ) ; fail ( "Should throw an IllegalBlockingModeException" ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) { } serverChannel.close ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw an IllegalBlockingModeException" ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) { } }
protected com.android.jack.backend.dex.MergingManager getManager ( ) { return new com.android.jack.backend.dex.MergingManager ( ) ; }
public android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings ( int subId ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getActiveVisualVoicemailSmsFilterSettings ( subId ) ; } } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public void setVideoProvider ( com.android.internal.telecom.IVideoProvider videoProvider ) { android.telecom.Log.v ( this , "setVideoProvider" ) ; if ( videoProvider != null ) { try { mVideoProviderProxy = new com.android.server.telecom.VideoProviderProxy ( mLock , videoProvider , this , mCallsManager ) ; } catch ( android.os.RemoteException ignored ) { } } else { mVideoProviderProxy = null ; } mVideoProvider = videoProvider ; for ( com.android.server.telecom.Call.Listener l : mListeners ) { l.onVideoCallProviderChanged ( this ) ; } }
public com.android.sched.scheduler.Plan < T > getPlan ( ) { assert ( request ) != null ; try ( com.android.sched.util.log.Event event = tracer.open ( SchedEventType.PLANBUILDER ) ) { plan.initPlan ( request , this ) ; } return plan ; }
public static java.lang.String getListAdapterViewFqcn ( java.lang.Class < ? > clz ) { java.lang.String fqcn = clz.getName ( ) ; if ( fqcn.endsWith ( com.android.ide.common.layout.LayoutConstants.LIST_VIEW ) ) { return fqcn ; } else if ( fqcn.equals ( com.android.ide.common.layout.LayoutConstants.FQCN_GRID_VIEW ) ) { return fqcn ; } else if ( fqcn.startsWith ( com.android.ide.common.layout.LayoutConstants.ANDROID_PKG_PREFIX ) ) { return null ; } java.lang.Class < ? > superClass = clz.getSuperclass ( ) ; if ( superClass != null ) { return com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback.getListAdapterViewFqcn ( superClass ) ; } else { return null ; } }
public void run ( ) { if ( file.delete ( ) ) { com.android.sched.util.file.FileOrDirectory.logger.log ( java.util.logging.Level.FINE , "Remove {0} (''{1}'')" , new java.lang.Object [ ] { location.getDescription ( ) , file.getAbsoluteFile ( ) } ) ; } else { com.android.sched.util.file.FileOrDirectory.logger.log ( java.util.logging.Level.SEVERE , "Can not delete {0}" , location.getDescription ( ) ) ; } }
private void handleShareItemSelected ( ) { android.content.Intent target = new android.content.Intent ( android.content.Intent.ACTION_SEND ) ; target.setType ( "text/plain" ) ; com.android.cts.verifier.TestResultsReport report = new com.android.cts.verifier.TestResultsReport ( this , mAdapter ) ; target.putExtra ( Intent.EXTRA_SUBJECT , report.getSubject ( ) ) ; target.putExtra ( Intent.EXTRA_TEXT , report.getBody ( ) ) ; startActivity ( android.content.Intent.createChooser ( target , getString ( R.string.share_test_results ) ) ) ; }
private void responseStrings ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String ... str ) { java.util.ArrayList < java.lang.String > strings = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( str.length ) ; i ++ ) { strings.add ( str [ i ] ) ; } com.android.internal.telephony.RadioResponse.responseStringArrayList ( mRil , responseInfo , strings ) ; }
public void reject ( boolean rejectWithMessage , java.lang.String textMessage ) { com.android.internal.util.Preconditions.checkNotNull ( mConnectionService ) ; if ( isRinging ( "reject" ) ) { mVideoStateHistory |= mVideoState ; mConnectionService.reject ( this , rejectWithMessage , textMessage ) ; android.telecom.Log.addEvent ( this , LogUtils.Events.REQUEST_REJECT ) ; } }
public void onCreate ( ) { super . onCreate ( ) ; createNotificationChannel ( ) ; mFacadeManager = new com.googlecode.android_scripting.facade.FacadeManager ( com.googlecode.android_scripting.facade.FacadeConfiguration.getSdkLevel ( ) , this , null , com.googlecode.android_scripting.facade.FacadeConfiguration.getFacadeClasses ( ) ) ; mEventFacade = mFacadeManager.getReceiver ( com.googlecode.android_scripting.facade.EventFacade.class ) ; mTriggerRepository = ( ( com.googlecode.android_scripting.BaseApplication ) ( getApplication ( ) ) ) . getTriggerRepository ( ) ; mTriggerRepository.bootstrapObserver ( new com.googlecode.android_scripting.activity.TriggerService.RepositoryObserver ( ) ) ; mTriggerRepository.bootstrapObserver ( new com.googlecode.android_scripting.trigger.EventGenerationControllingObserver ( mFacadeManager ) ) ; installAlarm ( ) ; }
private java.lang.StringBuffer subformat ( int number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr , int maxIntDig ) { if ( ( currencySignCount ) == ( com.ibm.icu.text.DecimalFormat.CURRENCY_SIGN_COUNT_IN_PLURAL_FORMAT ) ) { return subformat ( currencyPluralInfo.select ( getFixedDecimal ( number ) ) , result , fieldPosition , isNegative , isInteger , parseAttr , maxIntDig ) ; } else { return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr , maxIntDig ) ; } }
public void sendDtmf ( char c , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_DTMF , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeString ( java.lang.Character.toString ( c ) ) ; send ( rr ) ; }
protected java.util.List < com.intellij.refactoring.safeDelete.PsiMethod > computeCallers ( ) { if ( getTopMethod ( ) . equals ( getMethod ( ) ) ) { final java.util.ArrayList < com.intellij.refactoring.safeDelete.usageInfo.SafeDeleteParameterCallHierarchyUsageInfo > items = getTopLevelItems ( ) ; return com.intellij.util.containers.ContainerUtil.map ( items , new com.intellij.util.Function < com.intellij.refactoring.safeDelete.usageInfo.SafeDeleteParameterCallHierarchyUsageInfo , com.intellij.refactoring.safeDelete.PsiMethod > ( ) { @ java.lang.Override public com.intellij.refactoring.safeDelete.PsiMethod fun ( com.intellij.refactoring.safeDelete.usageInfo.SafeDeleteParameterCallHierarchyUsageInfo info ) { return info.getCallerMethod ( ) ; } } ) ; } final java.util.List < com.intellij.refactoring.safeDelete.PsiMethod > methods = super . computeCallers ( ) ; methods.remove ( getTopMethod ( ) ) ; return methods ; }
public void setMinusSignString ( java.lang.String minusSignString ) { if ( minusSignString == null ) { throw new java.lang.NullPointerException ( "The input minus sign is null" ) ; } this . minusString = minusSignString ; if ( ( minusSignString.length ( ) ) == 1 ) { this . minusSign = minusSignString.charAt ( 0 ) ; } else { this . minusSign = android.icu.text.DecimalFormatSymbols.DEF_MINUS_SIGN ; } }
public void testWrongSeparator1 ( ) throws java.lang.Exception { mScopes = null ; mEnabled = com.google.common.collect.Sets.newHashSet ( com.android.tools.lint.checks.MissingClassDetector.MISSING , com.android.tools.lint.checks.MissingClassDetector.INSTANTIATABLE , com.android.tools.lint.checks.MissingClassDetector.INNERCLASS ) ; assertEquals ( ( "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n" + ( ( " <activity\n" + " ^\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "registration/AndroidManifestWrong.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" , "registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java" ) ) ; }
public static < T > T record ( @ com.android.annotations.NonNull org.gradle.api.Project project , @ com.android.annotations.NonNull com.android.builder.profile.ExecutionType executionType , @ com.android.annotations.NonNull com.android.builder.profile.Recorder.Block < T > block , com.android.builder.profile.Recorder ... properties ) { com.android.builder.profile.Recorder [ ] mergedProperties = new com.android.builder.profile.Recorder.Property [ ( properties.length ) + 1 ] ; mergedProperties [ 0 ] = new com.android.builder.profile.Recorder.Property ( com.android.build.gradle.internal.profile.SpanRecorders.PROJECT , project.getName ( ) ) ; java.lang.System.arraycopy ( properties , 0 , mergedProperties , 1 , properties.length ) ; return ( ( com.android.build.gradle.internal.profile.T ) ( com.android.builder.profile.ThreadRecorder.get ( ) . record ( executionType , block , mergedProperties ) ) ) ; }
private com.android.server.am.ActivityRecord getWaitingHistoryRecordLocked ( ) { com.android.server.am.ActivityRecord r = this ; if ( r.waitingVisible ) { final com.android.server.am.ActivityStack stack = mStackSupervisor.getFocusedStack ( ) ; r = stack.mResumedActivity ; if ( r == null ) { r = stack.mPausingActivity ; } if ( r == null ) { r = this ; } } return r ; }
public void ensureRetentionPolicy ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedAnnotationType loaded ) { synchronized ( this ) { if ( isLoaded ( com.android.jack.ir.impl.EcjSourceTypeLoader.Scope.RETENTION ) ) { return ; } loaded.setRetentionPolicy ( com.android.jack.ir.impl.ReferenceMapper.getRetentionPolicy ( getBinding ( ) . getAnnotationTagBits ( ) ) ) ; markLoaded ( com.android.jack.ir.impl.EcjSourceTypeLoader.Scope.RETENTION , loaded ) ; } }
public boolean setSimAccessPermission ( int value ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( service == null ) { return false ; } try { return service.setSimAccessPermission ( this , value ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public int compareTo ( com.android.dex.EncodedValue other ) { int size = java.lang.Math.min ( data.length , other.data.length ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( ( data [ i ] ) != ( other.data [ i ] ) ) { return ( ( data [ i ] ) & 255 ) - ( ( other.data [ i ] ) & 255 ) ; } } return ( data.length ) - ( other.data.length ) ; }
public void copyFrom ( java.lang.Object array ) { copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; }
private void doTestDragAndDrop ( java.lang.String sourceMode , java.lang.String targetMode , java.lang.String expectedDropResult ) throws java.lang.Exception { if ( ! ( supportsDragAndDrop ( ) ) ) { return ; } launchDockedActivity ( mSourcePackageName , android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME , sourceMode ) ; launchFullscreenActivity ( mTargetPackageName , android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME , targetMode ) ; clearLogs ( ) ; injectInput ( getWindowCenter ( getComponentName ( mSourcePackageName , android.wm.cts.CrossAppDragAndDropTests.SOURCE_ACTIVITY_NAME ) ) , getWindowCenter ( getComponentName ( mTargetPackageName , android.wm.cts.CrossAppDragAndDropTests.TARGET_ACTIVITY_NAME ) ) , android.wm.cts.CrossAppDragAndDropTests.SWIPE_DURATION_MS ) ; mResults = getLogResults ( android.wm.cts.CrossAppDragAndDropTests.TARGET_LOG_TAG ) ; assertResult ( android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DROP_RESULT , expectedDropResult ) ; }
private static final int getCharScript ( int script ) { switch ( script ) { case com.ibm.icu.lang.UScript.HAN_WITH_BOPOMOFO : case com.ibm.icu.lang.UScript.SIMPLIFIED_HAN : case com.ibm.icu.lang.UScript.TRADITIONAL_HAN : return com.ibm.icu.lang.UScript.HAN ; case com.ibm.icu.lang.UScript.JAPANESE : return com.ibm.icu.lang.UScript.HIRAGANA ; case com.ibm.icu.lang.UScript.JAMO : case com.ibm.icu.lang.UScript.KOREAN : return com.ibm.icu.lang.UScript.HANGUL ; case com.ibm.icu.lang.UScript.SYMBOLS_EMOJI : return com.ibm.icu.lang.UScript.SYMBOLS ; default : return script ; } }
public static void unzip ( @ javax.annotation.Nonnull java.io.File jarfile , @ javax.annotation.Nonnull java.io.File outputFolder ) { java.lang.String [ ] args = new java.lang.String [ ] { "unzip" , "-qo" , jarfile.getAbsolutePath ( ) , "-d" , outputFolder.getAbsolutePath ( ) } ; com.android.jack.test.util.ExecuteFile execFile = new com.android.jack.test.util.ExecuteFile ( args ) ; try { if ( ( execFile.run ( ) ) != 0 ) { throw new java.lang.RuntimeException ( "Unzip exited with an error" ) ; } } catch ( com.android.jack.test.util.ExecFileException e ) { throw new java.lang.RuntimeException ( "An error occurred while running unzip" , e ) ; } }
protected org.bouncycastle.asn1.x9.X9ECParameters createParameters ( ) { java.math.BigInteger n = new java.math.BigInteger ( "AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069" , 16 ) ; java.math.BigInteger h = new java.math.BigInteger ( "01" , 16 ) ; org.bouncycastle.math.ec.ECCurve curve = org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves.configureCurve ( new org.bouncycastle.math.ec.ECCurve.Fp ( new java.math.BigInteger ( "AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3" , 16 ) , new java.math.BigInteger ( "7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA" , 16 ) , new java.math.BigInteger ( "3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723" , 16 ) , n , h ) ) ; return new org.bouncycastle.asn1.x9.X9ECParameters ( curve , curve.decodePoint ( org.bouncycastle.util.encoders.Hex.decode ( "0481AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F8227DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892" ) ) , n , h ) ; }
public static void populateEndpointParameters ( java.util.Map < java.lang.String , java.lang.Object > replacementMap , java.lang.String rootPackage ) { java.lang.String [ ] pkgParts = rootPackage.split ( "\\." ) ; java.lang.String ownerDomain = com.intellij.openapi.util.text.StringUtil.join ( com.intellij.util.ArrayUtil.reverseArray ( pkgParts ) , "." ) ; replacementMap.put ( com.google.gct.idea.appengine.wizard.AppEngineTemplates.ATTR_ENDPOINTS_OWNER , ownerDomain ) ; replacementMap.put ( com.google.gct.idea.appengine.wizard.AppEngineTemplates.ATTR_ENDPOINTS_PACKAGE , "" ) ; }
public org.bouncycastle.cms.SignerInformationVerifier get ( org.bouncycastle.cms.SignerId signerId ) throws org.bouncycastle.operator.OperatorCreationException { if ( org.bouncycastle.cms.test.NewSignedDataTest._signCert.getSerialNumber ( ) . equals ( signerId.getSerialNumber ( ) ) ) { return new org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoVerifierBuilder ( ) . setProvider ( org.bouncycastle.cms.test.NewSignedDataTest.BC ) . build ( org.bouncycastle.cms.test.NewSignedDataTest._signCert ) ; } else if ( org.bouncycastle.cms.test.NewSignedDataTest._origCert.getSerialNumber ( ) . equals ( signerId.getSerialNumber ( ) ) ) { return new org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoVerifierBuilder ( ) . setProvider ( org.bouncycastle.cms.test.NewSignedDataTest.BC ) . build ( org.bouncycastle.cms.test.NewSignedDataTest._origCert ) ; } else { throw new java.lang.IllegalStateException ( "no signerID matched" ) ; } }
boolean stopVoiceRecognition ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfpclient.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine ( device ) ; if ( sm == null ) { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientService.TAG , ( "Cannot allocate SM for device " + device ) ) ; return false ; } int connectionState = sm.getConnectionState ( device ) ; if ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) { return false ; } sm.sendMessage ( HeadsetClientStateMachine.VOICE_RECOGNITION_STOP ) ; return true ; }
public void visitProgramMethod ( proguard.optimize.info.ProgramClass programClass , proguard.optimize.info.ProgramMethod programMethod ) { hasSideEffects = ( ! ( proguard.optimize.info.NoSideEffectMethodMarker.hasNoSideEffects ( programMethod ) ) ) && ( ( proguard.optimize.info.SideEffectMethodMarker.hasSideEffects ( programMethod ) ) || ( mayHaveSideEffects ( referencingClass , programClass ) ) ) ; }
private void recordFeatureAcknowledgement ( ) { preferences.edit ( ) . putInt ( VoicemailVersionConstants.PREF_DIALER_FEATURE_VERSION_ACKNOWLEDGED_KEY , VoicemailVersionConstants.CURRENT_VOICEMAIL_FEATURE_VERSION ) . apply ( ) ; }
private int getInternalStateUid ( int clientId ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.aware.WifiAwareServiceImpl.class . getDeclaredField ( "mUidByClientId" ) ; field.setAccessible ( true ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) android.util.SparseIntArray uidByClientId = ( ( android.util.SparseIntArray ) ( field.get ( mDut ) ) ) ; return uidByClientId.get ( clientId , ( - 1 ) ) ; }
private void postMessage ( int messageCode , boolean shouldCreateHandler , com.android.internal.os.SomeArgs args ) { synchronized ( this ) { if ( ( ( mHandler ) == null ) && shouldCreateHandler ) { mHandler = getNewHandler ( ) ; } if ( ( mHandler ) == null ) { android.telecom.Log.d ( this , "Message %d skipped because there is no handler." , messageCode ) ; } else { mHandler.obtainMessage ( messageCode , args ) . sendToTarget ( ) ; } } }
public static java.net.InetSocketAddress getLocalInetSocketAddress ( java.io.FileDescriptor fd ) throws java.net.SocketException { try { java.net.SocketAddress socketAddress = Libcore.os.getsockname ( fd ) ; if ( ( socketAddress != null ) && ( ! ( socketAddress instanceof java.net.InetSocketAddress ) ) ) { throw new java.net.SocketException ( ( ( "Socket assumed to be pending closure: Expected sockname " + "to be an InetSocketAddress, got " ) + ( socketAddress.getClass ( ) ) ) ) ; } return ( ( java.net.InetSocketAddress ) ( socketAddress ) ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsSocketException ( ) ; } }
public int totalCount ( ) { synchronized ( mScoClients ) { int count = 0 ; for ( com.android.server.audio.AudioService.ScoClient mScoClient : mScoClients ) { count += mScoClient.getCount ( ) ; } return count ; } }
private static void handleSystemServerProcess ( com.android.internal.os.ZygoteConnection.Arguments parsedArgs ) throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller { com.android.internal.os.ZygoteInit.closeServerSocket ( ) ; android.system.Os.umask ( ( ( libcore.io.OsConstants.S_IRWXG ) | ( libcore.io.OsConstants.S_IRWXO ) ) ) ; if ( ( parsedArgs.niceName ) != null ) { java.lang.Process.setArgV0 ( parsedArgs.niceName ) ; } if ( ( parsedArgs.invokeWith ) != null ) { com.android.internal.os.WrapperInit.execApplication ( parsedArgs.invokeWith , parsedArgs.niceName , parsedArgs.targetSdkVersion , null , parsedArgs.remainingArgs ) ; } else { com.android.internal.os.RuntimeInit.zygoteInit ( parsedArgs.targetSdkVersion , parsedArgs.remainingArgs ) ; } }
public android.net.ProxyInfo getDefaultProxy ( ) { final android.net.Network network = android.net.ConnectivityManager.getProcessDefaultNetwork ( ) ; if ( network != null ) { final android.net.ProxyInfo globalProxy = getGlobalProxy ( ) ; if ( globalProxy != null ) return globalProxy ; final android.net.LinkProperties lp = getLinkProperties ( network ) ; if ( lp != null ) return lp.getHttpProxy ( ) ; return null ; } try { return mService.getDefaultProxy ( ) ; } catch ( android.os.RemoteException e ) { return null ; } }
static android.util.Pair < java.lang.Integer , java.lang.Integer > getVersion ( ) { java.lang.String version = android.opengl.GLES20.glGetString ( GLES20.GL_VERSION ) ; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile ( "OpenGL ES ([0-9]+)\\.([0-9]+)" ) ; java.util.regex.Matcher matcher = pattern.matcher ( version ) ; if ( matcher.find ( ) ) { return new android.util.Pair ( java.lang.Integer.parseInt ( matcher.group ( 1 ) ) , java.lang.Integer.parseInt ( matcher.group ( 2 ) ) ) ; } return new android.util.Pair ( 2 , 0 ) ; }
public void start ( ) { stop ( ) ; mDefaultNetworkCallback = new com.android.server.connectivity.Tethering.UpstreamNetworkMonitor.UpstreamNetworkCallback ( ) ; cm ( ) . registerDefaultNetworkCallback ( mDefaultNetworkCallback ) ; final android.net.NetworkRequest dunTetheringRequest = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_CELLULAR ) . removeCapability ( NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED ) . addCapability ( NetworkCapabilities.NET_CAPABILITY_DUN ) . build ( ) ; mDunTetheringCallback = new com.android.server.connectivity.Tethering.UpstreamNetworkMonitor.UpstreamNetworkCallback ( ) ; cm ( ) . registerNetworkCallback ( dunTetheringRequest , mDunTetheringCallback ) ; }
public void copy2DRangeTo ( int xoff , int yoff , int w , int h , byte [ ] data ) { validateIsInt8 ( ) ; copy2DRangeToUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_8 , data.length ) ; }
public void uninstallPackage ( @ com.android.annotations.NonNull java.lang.String packageName , int timeout , com.android.utils.ILogger logger ) throws com.android.builder.testing.api.DeviceException { try { iDevice.uninstallPackage ( packageName ) ; } catch ( java.lang.Exception e ) { logger.error ( e , ( "Unable to uninstall " + packageName ) ) ; throw new com.android.builder.testing.api.DeviceException ( e ) ; } }
public void testReleaseVersion ( ) { assertTrue ( ( ( ( "Your Build.VERSION.RELEASE of " + ( Build.VERSION.RELEASE ) ) + " was not one of the following: " ) + ( android.os.cts.BuildVersionTest.EXPECTED_RELEASES ) ) , android.os.cts.BuildVersionTest.EXPECTED_RELEASES.contains ( Build.VERSION.RELEASE ) ) ; assertEquals ( ( "" + ( android.os.cts.BuildVersionTest.EXPECTED_SDK ) ) , Build.VERSION.SDK ) ; assertEquals ( android.os.cts.BuildVersionTest.EXPECTED_SDK , Build.VERSION.SDK_INT ) ; }
public void connect ( java.net.SocketAddress peer ) throws java.net.SocketException { if ( isConnected ( ) ) { throw new java.lang.IllegalStateException ( "Socket is already connected." ) ; } super . connect ( peer ) ; channelImpl.onBind ( false ) ; java.net.InetSocketAddress inetSocketAddress = ( ( java.net.InetSocketAddress ) ( peer ) ) ; channelImpl.onConnect ( inetSocketAddress.getAddress ( ) , inetSocketAddress.getPort ( ) , false ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation ) { for ( com.android.jack.ir.ast.JNameValuePair pair : annotation.getNameValuePairs ( ) ) { com.android.jack.ir.ast.JMethodId id = getResolvedMethodId ( annotation.getType ( ) , pair.getMethodId ( ) ) ; pair.resolveMethodId ( id ) ; } return super . visit ( annotation ) ; }
void cleanupDevice ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbapclient.PbapClientService.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientService.TAG , ( "Cleanup device: " + device ) ) ; synchronized ( mPbapClientStateMachineMap ) { com.android.bluetooth.pbapclient.PbapClientStateMachine pbapClientStateMachine = mPbapClientStateMachineMap.get ( device ) ; if ( pbapClientStateMachine != null ) { mPbapClientStateMachineMap.remove ( device ) ; } } }
public void testVrHighPerformanceVP9 ( ) throws java.lang.Exception { if ( ! ( supportsVrHighPerformance ( ) ) ) { android.cts.util.MediaUtils.skipTest ( android.media.cts.DecoderTest.TAG , "FEATURE_VR_MODE_HIGH_PERFORMANCE not present" ) ; return ; } assertTrue ( android.media.cts.DecoderTest.doesMimeTypeHaveMinimumSpecVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_VP9 ) ) ; decodeInParallel ( R.raw.bbb_s2_1920x1080_webm_vp9_0p41_10mbps_60fps_vorbis_6ch_384kbps_22050hz , 300 , 30 , 1 ) ; boolean vp9IsReady = android.media.cts.DecoderTest.doesMimeTypeHaveVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_VP9 ) ; if ( ! vp9IsReady ) { android.cts.util.MediaUtils.skipTest ( android.media.cts.DecoderTest.TAG , "VP9 isn't required to be VR ready" ) ; return ; } decodeInParallel ( R.raw.bbb_s2_1920x1080_webm_vp9_0p41_10mbps_60fps_vorbis_6ch_384kbps_22050hz , 300 , 30 , 4 ) ; }
public boolean onChildClick ( android.widget.ExpandableListView parent , android.view.View v , int groupPosition , int childPosition , long id ) { java.util.Map < java.lang.String , android.media.browse.MediaBrowser.MediaItem > albumEntry = ( ( java.util.Map < java.lang.String , android.media.browse.MediaBrowser.MediaItem > ) ( mAdapter.getChild ( groupPosition , childPosition ) ) ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_PICK ) ; intent.setDataAndType ( Uri.EMPTY , "vnd.android.cursor.dir/track" ) ; intent.putExtra ( MusicUtils.TAG_PARENT_ITEM , albumEntry.get ( MediaIDHelper.MEDIA_ID_MUSICS_BY_ALBUM ) ) ; startActivity ( intent ) ; return true ; }
public void setEnabled ( com.google.gct.testing.dimension.CloudTestingType type , boolean isEnabled ) { if ( ! ( getSupportedDomain ( ) . contains ( type ) ) ) { return ; } checkIsEditable ( ) ; if ( isEnabled ) { enableType ( type ) ; } else { enabledTypes.remove ( type ) ; } }
public void test_read_IOException ( ) throws java.io.IOException { oos.writeObject ( testString ) ; oos.close ( ) ; tests.support.Support_ASimpleInputStream sis = new tests.support.Support_ASimpleInputStream ( bao.toByteArray ( ) ) ; ois = new java.io.ObjectInputStream ( sis ) ; sis.throwExceptionOnNextUse = true ; try { ois.read ( ) ; fail ( "Test 1: IOException expected." ) ; } catch ( java.io.IOException e ) { } sis.throwExceptionOnNextUse = false ; ois.close ( ) ; }
private java.lang.String getHostByAddr0 ( byte [ ] addr ) throws java.net.UnknownHostException { java.net.InetAddress hostaddr = java.net.InetAddress.getByAddress ( addr ) ; try { return Libcore.os.getnameinfo ( hostaddr , android.system.OsConstants.NI_NAMEREQD ) ; } catch ( android.system.GaiException e ) { java.net.UnknownHostException uhe = new java.net.UnknownHostException ( hostaddr.toString ( ) ) ; uhe.initCause ( e ) ; throw uhe ; } }
public boolean validates ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull java.lang.String value ) { try { return ( java.lang.Integer.parseInt ( value ) ) > 0 ; } catch ( java.lang.NumberFormatException e ) { attribute.addMessage ( mergingReport , MergingReport.Record.Severity.ERROR , java.lang.String.format ( "Attribute %1$s at %2$s must be an integer, found %3$s" , attribute.getId ( ) , attribute.printPosition ( ) , value ) ) ; return false ; } }
void collapseViewHolder ( ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailViewHolder.collapseViewHolder" , "viewHolderId:%d is being collapsed, its MPViewUri:%s, its Uri is :%s" , viewHolderId , java.lang.String.valueOf ( mediaPlayerView.getVoicemailUri ( ) ) , java.lang.String.valueOf ( viewHolderVoicemailUri ) ) ; transcriptionTextView.setMaxLines ( 1 ) ; isViewHolderExpanded = false ; mediaPlayerView.setVisibility ( android.view.View.GONE ) ; }
public static void computeNativePowr ( android.renderscript.cts.TestNativePowr.ArgumentsFloatFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 32000 , 32000 , true ) ; if ( ( java.lang.Math.abs ( args.inBase ) ) < 1.0E-20 ) { args.out = android.renderscript.cts.CoreMathVerifier.any32 ( t ) ; } else { args.out = android.renderscript.cts.CoreMathVerifier.powr ( args.inBase , args.inExponent , t ) ; } }
public final void dumpInstanceCounts ( ) { for ( java.lang.Object value : mClassesById.getValues ( ) ) { com.android.tools.perflib.heap.ClassObj theClass = ( ( com.android.tools.perflib.heap.ClassObj ) ( value ) ) ; int count = theClass.mInstances.size ( ) ; if ( count > 0 ) { java.lang.System.out.println ( ( ( theClass + ": " ) + count ) ) ; } } }
static void releasePartialWakeLock ( ) { if ( ( ( com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.sPartialWakeLock ) != null ) && ( com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.sPartialWakeLock.isHeld ( ) ) ) { com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.sPartialWakeLock.release ( ) ; android.util.Log.d ( com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.TAG , "released partial wakelock" ) ; } }
protected void eventLoop ( ) { org.eclipse.swt.widgets.Display display = getParent ( ) . getDisplay ( ) ; while ( ( ! ( mQuitRequested ) ) && ( ! ( mShell.isDisposed ( ) ) ) ) { if ( ! ( display.readAndDispatch ( ) ) ) { display.sleep ( ) ; } } }
public void reportLocation ( android.location.Location location , boolean passive ) { checkCallerIsProvider ( ) ; if ( ! ( location.isComplete ( ) ) ) { android.util.Log.w ( com.android.server.LocationManagerService.TAG , ( "Dropping incomplete location: " + location ) ) ; return ; } mLocationHandler.removeMessages ( com.android.server.LocationManagerService.MSG_LOCATION_CHANGED , location ) ; android.os.Message m = android.os.Message.obtain ( mLocationHandler , com.android.server.LocationManagerService.MSG_LOCATION_CHANGED , location ) ; m.arg1 = ( passive ) ? 1 : 0 ; mLocationHandler.sendMessageAtFrontOfQueue ( m ) ; }
protected synchronized void implCloseSelectableChannel ( ) throws java.io.IOException { onDisconnect ( true ) ; libcore.io.IoBridge.closeSocket ( fd ) ; multicastMembershipHandler = null ; if ( ( ( socket ) != null ) && ( ! ( socket.isClosed ( ) ) ) ) { socket.onClose ( ) ; } }
public final int integer_literal ( ) throws org.jf.smali.RecognitionException { int value = 0 ; org.antlr.runtime.tree.CommonTree INTEGER_LITERAL191 = null ; try { { INTEGER_LITERAL191 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.INTEGER_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_INTEGER_LITERAL_in_integer_literal3249 ) ) ) ; value = org.jf.smali.LiteralTools.parseInt ( ( INTEGER_LITERAL191 != null ? INTEGER_LITERAL191.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void setAudioRouteAllowed ( boolean allowed ) { mAudioRouteAllowed = allowed ; setScoAllowedNative ( allowed ) ; }
public boolean equals ( java.lang.Object o ) { if ( ! ( o instanceof java.net.Inet6Address.Inet6AddressHolder ) ) { return false ; } java.net.Inet6Address.Inet6AddressHolder that = ( ( java.net.Inet6Address.Inet6AddressHolder ) ( o ) ) ; return java.util.Arrays.equals ( this . ipaddress , that.ipaddress ) ; }
public void testConsequentProxyConnection ( ) throws java.lang.Throwable { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.setUpStoreProperties ( ) ; javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier ( new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher getDispatcher1 = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.GET_METHOD , org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.OK_CODE ) ; com.google.mockwebserver.MockWebServer proxyAndWebServer1 = org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.createProxiedServer ( getDispatcher1 ) ; java.net.URL proxyUrl1 = proxyAndWebServer1.getUrl ( "/" ) ; java.net.URL url = new java.net.URL ( "https://requested.host:55555/requested.data" ) ; java.net.InetSocketAddress proxyAddress = new java.net.InetSocketAddress ( "localhost" , proxyUrl1.getPort ( ) ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , proxyAddress ) ) ) ) ; connection.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.executeClientRequest ( connection , false ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.checkConnectionStateParameters ( connection , getDispatcher1.getLastRequest ( ) ) ; proxyAndWebServer1.shutdown ( ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher getDispatcher2 = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.GET_METHOD , org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.OK_CODE ) ; com.google.mockwebserver.MockWebServer proxyAndWebServer2 = org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.createProxiedServer ( getDispatcher2 ) ; java.net.URL proxyUrl2 = proxyAndWebServer2.getUrl ( "/" ) ; java.net.InetSocketAddress proxyAddress2 = new java.net.InetSocketAddress ( "localhost" , proxyUrl2.getPort ( ) ) ; javax.net.ssl.HttpsURLConnection connection2 = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , proxyAddress2 ) ) ) ) ; connection2.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.executeClientRequest ( connection2 , false ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.checkConnectionStateParameters ( connection2 , getDispatcher2.getLastRequest ( ) ) ; proxyAndWebServer2.shutdown ( ) ; }
public static int sendMessage ( java.io.FileDescriptor fd , byte [ ] bytes , int offset , int count , long timeoutMs ) throws android.system.ErrnoException , java.io.InterruptedIOException , java.lang.IllegalArgumentException { android.net.netlink.NetlinkSocket.checkTimeout ( timeoutMs ) ; android.system.Os.setsockoptTimeval ( fd , android.system.OsConstants.SOL_SOCKET , android.system.OsConstants.SO_SNDTIMEO , android.system.StructTimeval.fromMillis ( timeoutMs ) ) ; return android.system.Os.write ( fd , bytes , offset , count ) ; }
public final com.android.jack.dx.io.IndexType getFirstIndexType ( ) { return firstIndexType ; }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { putProperty ( fileType.getPropertyName ( ) , java.lang.String.valueOf ( true ) ) ; typePath.addSuffix ( fileType.getFileExtension ( ) ) ; return outputVDir.createOutputVFile ( typePath ) ; }
public void onCallerInfoQueryComplete ( android.net.Uri queryHandle , com.android.internal.telephony.CallerInfo info ) { if ( ! ( java.util.Objects.equals ( queryHandle , handle ) ) ) { android.telecom.Log.w ( this , ( "CallerInfo query returned with " + "different handle." ) ) ; return ; } if ( ( info.contactDisplayPhotoUri ) == null ) { com.android.server.telecom.ui.CallInfo callInfo = callInfoFactory.makeCallInfo ( info , null , handle , date ) ; showMissedCallNotification ( callInfo , userHandle ) ; } }
protected void sortAndPrepareInternal ( @ javax.annotation.Nonnull java.util.ArrayList < com.android.jack.ir.ast.JDefinedClassOrInterface > defaultList , @ javax.annotation.Nonnull java.util.ArrayList < com.android.jack.ir.ast.JDefinedClassOrInterface > mainList ) { java.util.Collections.sort ( defaultList , nameComp ) ; int number = com.android.jack.tools.merger.ConstantManager.FIRST_DETERMINISTIC_MODE_INDEX ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : mainList ) { type.addMarker ( new com.android.jack.backend.dex.NumberMarker ( ( number ++ ) ) ) ; } for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : defaultList ) { type.addMarker ( new com.android.jack.backend.dex.NumberMarker ( ( number ++ ) ) ) ; } }
public void copyFrom ( com.android.systemui.statusbar.policy.State s ) { super . copyFrom ( s ) ; com.android.systemui.statusbar.policy.MobileSignalController.MobileState state = ( ( com.android.systemui.statusbar.policy.MobileSignalController.MobileState ) ( s ) ) ; dataSim = state.dataSim ; networkName = state.networkName ; networkNameData = state.networkNameData ; dataConnected = state.dataConnected ; isDefault = state.isDefault ; isEmergency = state.isEmergency ; airplaneMode = state.airplaneMode ; carrierNetworkChangeMode = state.carrierNetworkChangeMode ; userSetup = state.userSetup ; roaming = state.roaming ; }
public void testManifestIExistingI ( ) { int iFlags = android.content.pm.PackageManager.INSTALL_INTERNAL ; int rFlags = android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING ; installFromRawResource ( "install.apk" , R.raw.install , iFlags , false , false , ( - 1 ) , ( - 1 ) ) ; installFromRawResource ( "install.apk" , R.raw.install_loc_internal , rFlags , true , false , ( - 1 ) , PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY ) ; }
private com.android.internal.telephony.dataconnection.DataConnection.SetupResult setLinkProperties ( android.telephony.data.DataCallResponse response , android.net.LinkProperties linkProperties ) throws java.lang.Exception { java.lang.Class [ ] cArgs = new java.lang.Class [ 2 ] ; cArgs [ 0 ] = android.telephony.data.DataCallResponse.class ; cArgs [ 1 ] = android.net.LinkProperties.class ; java.lang.reflect.Method method = com.android.internal.telephony.dataconnection.DataConnection.class . getDeclaredMethod ( "setLinkProperties" , cArgs ) ; method.setAccessible ( true ) ; return ( ( com.android.internal.telephony.dataconnection.DataConnection.SetupResult ) ( method.invoke ( mDc , response , linkProperties ) ) ) ; }
private void setActiveMediaSession ( android.media.session.MediaSession.Token token ) { com.android.bluetooth.avrcp.MediaController activeController = new com.android.bluetooth.avrcp.MediaController ( mContext , token ) ; if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "Set active media session " + ( activeController.getPackageName ( ) ) ) ) ; addMediaPlayerController ( activeController ) ; setAddressedMediaSessionPackage ( activeController.getPackageName ( ) ) ; }
public void testProxyingPrivateMethods_NotIntercepted ( ) throws java.lang.Throwable { com.google.dexmaker.stock.ProxyBuilderTest.HasPrivateMethod proxy = proxyFor ( com.google.dexmaker.stock.ProxyBuilderTest.HasPrivateMethod.class ) . build ( ) ; try { proxy.getClass ( ) . getDeclaredMethod ( "result" ) ; fail ( ) ; } catch ( java.lang.NoSuchMethodException expected ) { } assertEquals ( "expected" , proxy.result ( ) ) ; }
protected java.lang.String getRootId ( ) { org.w3c.dom.Element primary = getPrimaryElement ( ) ; if ( primary != null ) { java.lang.String oldId = primary.getAttributeNS ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID ) ; if ( ( oldId != null ) && ( ( oldId.length ( ) ) > 0 ) ) { return oldId ; } } return null ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , float [ ] data ) { validateIsFloat32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.FLOAT_32 , data.length ) ; }
void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file ) throws com.android.sched.util.file.CannotDeleteFileException { assert ! ( isClosed ( ) ) ; assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ) != 0 ; java.io.File path = getNativeFile ( file.getPath ( ) ) ; if ( ( ! ( path.delete ( ) ) ) || ( path.exists ( ) ) ) { throw new com.android.sched.util.file.CannotDeleteFileException ( file.getLocation ( ) ) ; } }
public static byte getDirectionality ( int codePoint ) { if ( ( java.lang.Character.getType ( codePoint ) ) == ( java.lang.Character.UNASSIGNED ) ) { return java.lang.Character.DIRECTIONALITY_UNDEFINED ; } byte directionality = java.lang.Character.getIcuDirectionality ( codePoint ) ; if ( ( directionality >= 0 ) && ( directionality < ( java.lang.Character.DIRECTIONALITY.length ) ) ) { return java.lang.Character.DIRECTIONALITY [ directionality ] ; } return java.lang.Character.DIRECTIONALITY_UNDEFINED ; }
public void testLegitPubkeyIsntBlacklisted ( ) throws java.lang.Exception { java.security.PublicKey pk = com.android.org.bouncycastle.jce.provider.CertBlacklistTest.createPublicKey ( com.android.org.bouncycastle.jce.provider.CertBlacklistTest.TEST_CERT ) ; writeBlacklist ( new java.util.HashSet < java.lang.String > ( ) ) ; com.android.org.bouncycastle.jce.provider.CertBlacklist bl = new com.android.org.bouncycastle.jce.provider.CertBlacklist ( tmpFile.getCanonicalPath ( ) , "" ) ; assertEquals ( bl.isPublicKeyBlackListed ( pk ) , false ) ; }
private void sendTrackChangedRsp ( ) { com.android.bluetooth.avrcp.MediaPlayerInfo info = getAddressedPlayerInfo ( ) ; if ( ( info != null ) && ( ! ( info.isBrowseSupported ( ) ) ) ) { trackChangeRspForBrowseUnsupported ( ) ; } else { mAddressedMediaPlayer.sendTrackChangeWithId ( mTrackChangedNT , mMediaController ) ; } }
public java.lang.String getText ( java.lang.Object element ) { if ( element instanceof com.android.hierarchyviewerlib.device.IHvDevice ) { return ( ( com.android.hierarchyviewerlib.device.IHvDevice ) ( element ) ) . getDevice ( ) . getName ( ) ; } else if ( element instanceof com.android.hierarchyviewerlib.models.Window ) { return ( ( com.android.hierarchyviewerlib.models.Window ) ( element ) ) . getTitle ( ) ; } return null ; }
public android.telephony.ims.aidl.IImsRcsFeature getImsRcsFeatureAndListen ( int slotIndex , com.android.ims.internal.IImsServiceFeatureCallback callback ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getRcsFeatureAndListen ( slotIndex , callback ) ; } } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , ( "getImsRcsFeatureAndListen, RemoteException: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; mManager = new com.android.server.wifi.hotspot2.PasspointManager ( mContext , mWifiInjector , mSimAccessor ) ; org.mockito.ArgumentCaptor < com.android.server.wifi.hotspot2.PasspointEventHandler.Callbacks > callbacks = org.mockito.ArgumentCaptor.forClass ( PasspointEventHandler.Callbacks.class ) ; org.mockito.Mockito.verify ( mWifiInjector ) . makePasspointEventHandler ( callbacks.capture ( ) ) ; mCallbacks = callbacks.getValue ( ) ; }
public void sendCallEvent ( java.lang.String callId , java.lang.String event , android.os.Bundle extras , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , android.telecom.ConnectionService.SESSION_SEND_CALL_EVENT ) ; try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = callId ; args.arg2 = event ; args.arg3 = extras ; args.arg4 = android.telecom.Log.createSubsession ( ) ; mHandler.obtainMessage ( android.telecom.ConnectionService.MSG_SEND_CALL_EVENT , args ) . sendToTarget ( ) ; } finally { android.telecom.Log.endSession ( ) ; } }
private static void onSubscribeTerminated ( int subscribeId , int status ) { if ( com.android.server.wifi.aware.WifiAwareNative.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNative.TAG , ( ( ( "onSubscribeTerminated: subscribeId=" + subscribeId ) + ", status=" ) + status ) ) ; } com.android.server.wifi.aware.WifiAwareNative.sWifiAwareStateManager.onSessionTerminatedNotification ( subscribeId , ( status == ( com.android.server.wifi.aware.WifiAwareNative.AWARE_STATUS_SUCCESS ) ? android.net.wifi.aware.WifiAwareDiscoverySessionCallback.TERMINATE_REASON_DONE : android.net.wifi.aware.WifiAwareDiscoverySessionCallback.TERMINATE_REASON_FAIL ) , false ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { assertNull ( org.conscrypt.NativeCrypto.SSL_get_certificate ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void setTerminal ( com.android.terminal.Terminal term ) { final com.android.terminal.Terminal orig = mTerm ; if ( orig != null ) { orig.setClient ( null ) ; } mTerm = term ; mScrolled = false ; if ( term != null ) { term.setClient ( mClient ) ; mTermKeys.setTerminal ( term ) ; mMetrics.cursorPaint.setColor ( - 986896 ) ; mRows = mTerm.getRows ( ) ; mCols = mTerm.getCols ( ) ; mScrollRows = mTerm.getScrollRows ( ) ; mAdapter.notifyDataSetChanged ( ) ; } }
public java.lang.String getGccToolchainVersion ( com.android.build.gradle.internal.core.Abi abi ) { return ( ( toolchain ) == ( com.android.build.gradle.internal.core.Toolchain.GCC ) ) && ( ! ( toolchainVersion.isEmpty ( ) ) ) ? toolchainVersion : getDefaultToolchainVersion ( Toolchain.GCC , abi ) . toString ( ) ; }
public void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; props.setProperty ( PkgProps.PKG_MAJOR_REV , java.lang.Integer.toString ( mPreviewVersion.getMajor ( ) ) ) ; props.setProperty ( PkgProps.PKG_MINOR_REV , java.lang.Integer.toString ( mPreviewVersion.getMinor ( ) ) ) ; props.setProperty ( PkgProps.PKG_MICRO_REV , java.lang.Integer.toString ( mPreviewVersion.getMicro ( ) ) ) ; props.setProperty ( PkgProps.PKG_PREVIEW_REV , java.lang.Integer.toString ( mPreviewVersion.getPreview ( ) ) ) ; }
protected void abortOnBadSetup ( org.eclipse.jdt.core.IJavaProject javaProject ) throws com.android.ide.eclipse.adt.internal.build.builders.AbortBuildException { super . abortOnBadSetup ( javaProject ) ; org.eclipse.core.resources.IProject iProject = getProject ( ) ; stopOnMarker ( iProject , AdtConstants.MARKER_AAPT_COMPILE , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AdtConstants.MARKER_AIDL , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AdtConstants.MARKER_RENDERSCRIPT , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AdtConstants.MARKER_ANDROID , IResource.DEPTH_ZERO , false ) ; stopOnMarker ( iProject , org.eclipse.jdt.core.IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER , IResource.DEPTH_INFINITE , true ) ; stopOnMarker ( iProject , org.eclipse.jdt.core.IJavaModelMarker.BUILDPATH_PROBLEM_MARKER , IResource.DEPTH_INFINITE , true ) ; }
public void setChunkedStreamingMode ( int chunkLength ) { if ( super . connected ) { throw new java.lang.IllegalStateException ( "Already connected" ) ; } if ( ( fixedContentLength ) >= 0 ) { throw new java.lang.IllegalStateException ( "Already in fixed-length mode" ) ; } if ( chunkLength <= 0 ) { this . chunkLength = java.net.HttpURLConnection.DEFAULT_CHUNK_LENGTH ; } else { this . chunkLength = chunkLength ; } }
private static com.google.doclava.TypeInfo [ ] convertTypes ( com.sun.javadoc.Type [ ] p ) { if ( p == null ) return null ; int len = p.length ; com.google.doclava.TypeInfo [ ] q = new com.google.doclava.TypeInfo [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { q [ i ] = com.google.doclava.Converter.obtainType ( p [ i ] ) ; } return q ; }
protected void createButtonsForButtonBar ( org.eclipse.swt.widgets.Composite parent ) { createButton ( parent , IDialogConstants.CLOSE_ID , IDialogConstants.CLOSE_LABEL , false ) ; mFindNext = createButton ( parent , com.android.ddmuilib.FindDialog.FIND_NEXT_ID , "Find Next" , false ) ; mFindPrevious = createButton ( parent , com.android.ddmuilib.FindDialog.FIND_PREVIOUS_ID , "Find Previous" , true ) ; mFindNext.setEnabled ( false ) ; mFindPrevious.setEnabled ( false ) ; }
public void onAvailable ( android.net.Network network , android.net.NetworkCapabilities networkCapabilities , android.net.LinkProperties linkProperties ) { onAvailable ( network ) ; if ( ! ( networkCapabilities.hasCapability ( NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED ) ) ) { onNetworkSuspended ( network ) ; } onCapabilitiesChanged ( network , networkCapabilities ) ; onLinkPropertiesChanged ( network , linkProperties ) ; }
public java.lang.String getDisplayName ( ) { return icuCurrency.getDisplayName ( ) ; }
public void testRevokeAffectsWholeGroup23 ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; try { runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokeAffectsWholeGroup_part1" ) ; } catch ( java.lang.AssertionError expected ) { } runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokeAffectsWholeGroup_part2" ) ; }
android.view.View findViewWithTagInHeadersOrFooters ( java.util.ArrayList < android.widget.ListView.FixedViewInfo > where , java.lang.Object tag ) { if ( where != null ) { int len = where.size ( ) ; android.view.View v ; for ( int i = 0 ; i < len ; i ++ ) { v = where.get ( i ) . view ; if ( ! ( v.isRootNamespace ( ) ) ) { v = v.findViewWithTag ( tag ) ; if ( v != null ) { return v ; } } } } return null ; }
private ApkVerifier.Result verify ( java.lang.String apkFilenameInResources , java.lang.Integer minSdkVersionOverride ) throws com.android.apksig.apk.ApkFormatException , java.io.IOException , java.security.NoSuchAlgorithmException { byte [ ] apkBytes = com.android.apksig.internal.util.Resources.toByteArray ( getClass ( ) , apkFilenameInResources ) ; com.android.apksig.ApkVerifier.Builder builder = new com.android.apksig.ApkVerifier.Builder ( com.android.apksig.util.DataSources.asDataSource ( java.nio.ByteBuffer.wrap ( apkBytes ) ) ) ; if ( minSdkVersionOverride != null ) { builder.setMinCheckedPlatformVersion ( minSdkVersionOverride ) ; } return builder.build ( ) . verify ( ) ; }
private void addRemoteSample ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.FullRevision minToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newSample ( version , revision , minToolsRev ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository getRepository ( ) { return mRepository ; }
public static void recordSparseSlowlyHistogram ( java.lang.String name , int sample ) { if ( ( org.chromium.base.metrics.RecordHistogram.sDisabledBy ) != null ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordSparseHistogram ( name , key , sample ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
com.android.server.am.BroadcastQueue broadcastQueueForIntent ( android.content.Intent intent ) { final boolean isFg = ( ( intent.getFlags ( ) ) & ( android.content.Intent.FLAG_RECEIVER_FOREGROUND ) ) != 0 ; if ( com.android.server.am.ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND ) android.util.Slog.i ( com.android.server.am.ActivityManagerService.TAG_BROADCAST , ( ( ( ( "Broadcast intent " + intent ) + " on " ) + ( isFg ? "foreground" : "background" ) ) + " queue" ) ) ; return isFg ? mFgBroadcastQueue : mBgBroadcastQueue ; }
public static org.conscrypt.OpenSSLEngine getInstance ( java.lang.String engine ) throws java.lang.IllegalArgumentException { if ( NativeCrypto.isBoringSSL ) { return org.conscrypt.OpenSSLEngine.BoringSSL.INSTANCE ; } if ( engine == null ) { throw new java.lang.NullPointerException ( "engine == null" ) ; } final long engineCtx ; synchronized ( org.conscrypt.OpenSSLEngine.mLoadingLock ) { engineCtx = org.conscrypt.NativeCrypto.ENGINE_by_id ( engine ) ; if ( engineCtx == 0 ) { throw new java.lang.IllegalArgumentException ( ( "Unknown ENGINE id: " + engine ) ) ; } org.conscrypt.NativeCrypto.ENGINE_add ( engineCtx ) ; } return new org.conscrypt.OpenSSLEngine ( engineCtx ) ; }
public void copyFromUnchecked ( byte [ ] d ) { copyFromUnchecked ( d , Element.DataType.SIGNED_8 , d.length ) ; }
private static void provide ( java.lang.String type , java.lang.String algorithm ) { java.util.Set < java.lang.String > algorithms = libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.get ( type ) ; if ( algorithms == null ) { algorithms = new java.util.HashSet ( ) ; libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.put ( type , algorithms ) ; } assertTrue ( ( ( ( "Duplicate " + type ) + " " ) + algorithm ) , algorithms.add ( algorithm.toUpperCase ( java.util.Locale.ROOT ) ) ) ; }
public boolean moveTopActivityToPinnedStack ( int stackId , android.graphics.Rect bounds ) { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "moveTopActivityToPinnedStack()" ) ; synchronized ( this ) { if ( ! ( mSupportsPictureInPicture ) ) { throw new java.lang.IllegalStateException ( ( "moveTopActivityToPinnedStack:" + "Device doesn't support picture-in-pciture mode" ) ) ; } long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return mStackSupervisor.moveTopStackActivityToPinnedStackLocked ( stackId , bounds ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public void testAesCbcHmacMd5Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public java.util.Iterator < com.android.sched.vfs.InputVFile > iterator ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) { if ( ! ( containsFileType ( fileType ) ) ) { return com.google.common.collect.ImmutableSet.< com.android.sched.vfs.InputVFile > of ( ) . iterator ( ) ; } java.util.List < com.android.sched.vfs.InputVFile > inputVFiles = new java.util.ArrayList < com.android.sched.vfs.InputVFile > ( ) ; try { fillFiles ( getSectionVFS ( fileType ) . getRootDir ( ) , inputVFiles ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new java.lang.AssertionError ( e ) ; } return inputVFiles.listIterator ( ) ; }
public void testSign_Success ( ) throws java.lang.Exception { mKeyStore.password ( android.security.KeyStoreTest.TEST_PASSWD ) ; assertTrue ( mKeyStore.generate ( android.security.KeyStoreTest.TEST_KEYNAME , KeyStore.UID_SELF , NativeCrypto.EVP_PKEY_RSA , 1024 , KeyStore.FLAG_ENCRYPTED , null ) ) ; assertTrue ( mKeyStore.contains ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; final byte [ ] signature = mKeyStore.sign ( android.security.KeyStoreTest.TEST_KEYNAME , android.security.KeyStoreTest.TEST_DATA ) ; assertNotNull ( "Signature should not be null" , signature ) ; }
public final void registerContentObserver ( @ android.annotation.NonNull android.net.Uri uri , boolean notifyForDescendents , @ android.annotation.NonNull android.database.ContentObserver observer ) { com.android.internal.util.Preconditions.checkNotNull ( uri , "uri" ) ; com.android.internal.util.Preconditions.checkNotNull ( observer , "observer" ) ; registerContentObserver ( android.content.ContentProvider.getUriWithoutUserId ( uri ) , notifyForDescendents , observer , android.content.ContentProvider.getUserIdFromUri ( uri , android.os.UserHandle.myUserId ( ) ) ) ; }
public void testAuthTcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , null , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , null , auth , false , 1 , true ) ; }
protected void onRestoreInstanceState ( android.os.Parcelable state ) { android.widget.DatePicker.SavedState ss = ( ( android.widget.DatePicker.SavedState ) ( state ) ) ; super . onRestoreInstanceState ( ss.getSuperState ( ) ) ; mYear = ss.getYear ( ) ; mMonth = ss.getMonth ( ) ; mDay = ss.getDay ( ) ; updateSpinners ( ) ; }
private void notifyDexLoad ( com.android.server.pm.dex.DexManagerTests.TestData testData , java.util.List < java.lang.String > dexPaths , int loaderUserId ) { java.util.List < java.lang.String > classLoaders = java.util.Arrays.asList ( testData.mClassLoader ) ; java.util.List < java.lang.String > classPaths = java.util.Arrays.asList ( java.lang.String.join ( java.io.File.pathSeparator , dexPaths ) ) ; notifyDexLoad ( testData , classLoaders , classPaths , loaderUserId ) ; }
private java.util.List < com.android.ddmlib.logcat.LogCatMessage > getSelectedLogCatMessages ( ) { int [ ] indices = mTable.getSelectionIndices ( ) ; java.util.Arrays.sort ( indices ) ; java.util.List < com.android.ddmlib.logcat.LogCatMessage > selectedMessages = new java.util.ArrayList < com.android.ddmlib.logcat.LogCatMessage > ( indices.length ) ; for ( int i : indices ) { java.lang.Object data = mTable.getItem ( i ) . getData ( ) ; if ( data instanceof com.android.ddmlib.logcat.LogCatMessage ) { selectedMessages.add ( ( ( com.android.ddmlib.logcat.LogCatMessage ) ( data ) ) ) ; } } return selectedMessages ; }
public java.lang.String getCdmaMin ( int subId ) { com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfModifyPermissionOrCarrierPrivilege ( mApp , subId , "getCdmaMin" ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( ( phone != null ) && ( ( phone.getPhoneType ( ) ) == ( com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA ) ) ) { return phone.getCdmaMin ( ) ; } else { return null ; } }
private static < T > java.util.Iterator < java.util.Iterator < ? extends T > > iterators ( java.lang.Iterable < ? extends java.lang.Iterable < ? extends T > > iterables ) { return new com.google.common.collect.TransformedIterator < java.lang.Iterable < ? extends T > , java.util.Iterator < ? extends T > > ( iterables.iterator ( ) ) { @ java.lang.Override java.util.Iterator < ? extends T > transform ( java.lang.Iterable < ? extends T > from ) { return from.iterator ( ) ; } } ; }
public void onCapabilitiesStatusChanged ( android.telephony.ims.feature.ImsFeature.Capabilities config ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "onCapabilitiesStatusChanged: " + config ) ) ; com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = config ; removeMessages ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_ON_FEATURE_CAPABILITY_CHANGED ) ; obtainMessage ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_ON_FEATURE_CAPABILITY_CHANGED , args ) . sendToTarget ( ) ; }
public com.android.tv.ui.sidepanel.SideFragment.ItemAdapter.ViewHolder onCreateViewHolder ( android.view.ViewGroup parent , int viewType ) { android.view.View view = com.android.tv.util.ViewCache.getInstance ( ) . getView ( viewType ) ; if ( view == null ) { view = mLayoutInflater.inflate ( viewType , parent , false ) ; } return new com.android.tv.ui.sidepanel.SideFragment.ItemAdapter.ViewHolder ( view ) ; }
private java.lang.CharSequence getErrorMessage ( android.os.AsyncResult ar ) { if ( ( ar.exception ) instanceof com.android.internal.telephony.CommandException ) { com.android.internal.telephony.CommandException.Error err = ( ( com.android.internal.telephony.CommandException ) ( ar.exception ) ) . getCommandError ( ) ; if ( err == ( CommandException.Error.FDN_CHECK_FAILURE ) ) { android.telephony.Rlog.i ( com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG , "FDN_CHECK_FAILURE" ) ; return mContext.getText ( com.android.internal.R.string.mmiFdnError ) ; } } return mContext.getText ( com.android.internal.R.string.mmiError ) ; }
private static < E extends java.lang.Enum < E > > com.google.common.collect.ImmutableSet < E > copyOfEnumSet ( java.util.EnumSet < E > enumSet ) { return com.google.common.collect.ImmutableEnumSet.asImmutable ( java.util.EnumSet.copyOf ( enumSet ) ) ; }
public void testWificondNullWhenSwitchingToApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( null ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING , mWifiStateMachinePrime.getCurrentMode ( ) ) ; }
public static boolean isInternalPrimitiveType ( char internalType ) { return ( ( ( ( ( ( ( internalType == ( ClassConstants.TYPE_BOOLEAN ) ) || ( internalType == ( ClassConstants.TYPE_BYTE ) ) ) || ( internalType == ( ClassConstants.TYPE_CHAR ) ) ) || ( internalType == ( ClassConstants.TYPE_SHORT ) ) ) || ( internalType == ( ClassConstants.TYPE_INT ) ) ) || ( internalType == ( ClassConstants.TYPE_FLOAT ) ) ) || ( internalType == ( ClassConstants.TYPE_LONG ) ) ) || ( internalType == ( ClassConstants.TYPE_DOUBLE ) ) ; }
public final void testPkgTypePlatform ( ) throws java.lang.Exception { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_PLATFORMS ; assertTrue ( p.hasMajorRevision ( ) ) ; assertFalse ( p.hasFullRevision ( ) ) ; assertTrue ( p.hasAndroidVersion ( ) ) ; assertTrue ( p.hasPath ( ) ) ; assertFalse ( p.hasVendor ( ) ) ; assertTrue ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
public void visitAnyParameterAnnotationsAttribute ( proguard.classfile.io.Clazz clazz , proguard.classfile.io.Method method , proguard.classfile.io.ParameterAnnotationsAttribute parameterAnnotationsAttribute ) { dataOutput.writeByte ( parameterAnnotationsAttribute.u1parametersCount ) ; for ( int parameterIndex = 0 ; parameterIndex < ( parameterAnnotationsAttribute.u1parametersCount ) ; parameterIndex ++ ) { int u2annotationsCount = parameterAnnotationsAttribute.u2parameterAnnotationsCount [ parameterIndex ] ; proguard.classfile.io.Annotation [ ] annotations = parameterAnnotationsAttribute.parameterAnnotations [ parameterIndex ] ; dataOutput.writeShort ( u2annotationsCount ) ; for ( int index = 0 ; index < u2annotationsCount ; index ++ ) { visitAnnotation ( clazz , annotations [ index ] ) ; } } }
public void scheduleAtFixedRate ( java.util.TimerTask task , java.util.Date when , long period ) { validateScheduling ( task , when , 1 , period ) ; doSchedule ( task , when.getTime ( ) , period , true ) ; }
public final void visitSource ( final java.lang.String file , final java.lang.String debug ) { if ( file != null ) { sourceFile = newUTF8 ( file ) ; } if ( debug != null ) { sourceDebug = new org.objectweb.asm.ByteVector ( ) . encodeUTF8 ( debug , 0 , java.lang.Integer.MAX_VALUE ) ; } }
void enableVerboseLogging ( int verbose ) { if ( verbose > 0 ) { com.android.server.wifi.WifiNative.DBG = true ; } else { com.android.server.wifi.WifiNative.DBG = false ; } if ( ( mWificondControl ) != null ) { mWificondControl.enableVerboseLogging ( ( verbose > 0 ? true : false ) ) ; } if ( ( mSupplicantStaIfaceHal ) != null ) { mSupplicantStaIfaceHal.enableVerboseLogging ( ( verbose > 0 ) ) ; } if ( ( mWifiVendorHal ) != null ) { mWifiVendorHal.enableVerboseLogging ( ( verbose > 0 ) ) ; } }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , int duration , int maxExtendedAdvertisingEvents , android.bluetooth.le.AdvertisingSetCallback callback ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , duration , maxExtendedAdvertisingEvents , callback , new android.os.Handler ( android.os.Looper.getMainLooper ( ) ) ) ; }
public java.lang.String combineDateAndTime ( java.lang.String relativeDateString , java.lang.String timeString ) { com.ibm.icu.text.MessageFormat msgFmt = new com.ibm.icu.text.MessageFormat ( "" ) ; msgFmt.applyPattern ( combinedDateAndTime , MessagePattern.ApostropheMode.DOUBLE_REQUIRED ) ; java.lang.StringBuffer combinedDateTimeBuffer = new java.lang.StringBuffer ( 128 ) ; return msgFmt.format ( new java.lang.Object [ ] { timeString , relativeDateString } , combinedDateTimeBuffer , new java.text.FieldPosition ( 0 ) ) . toString ( ) ; }
protected void writeDiff ( java.io.File olderFile , java.io.File newerFile , java.io.OutputStream patchOutput ) throws java.io.IOException { java.io.BufferedInputStream olderFileIn = new java.io.BufferedInputStream ( new java.io.FileInputStream ( olderFile ) ) ; java.io.BufferedInputStream newerFileIn = new java.io.BufferedInputStream ( new java.io.FileInputStream ( newerFile ) ) ; try { writeDiff ( olderFileIn , newerFileIn , patchOutput ) ; } finally { olderFileIn.close ( ) ; newerFileIn.close ( ) ; } }
public void dispatchKey ( android.view.KeyEvent event ) { android.view.SurfaceView surfaceView = mSurfaceView.get ( ) ; if ( surfaceView != null ) { if ( ( ( surfaceView.mSession ) != null ) && ( ( surfaceView.mSurface ) != null ) ) { try { surfaceView.mSession.finishKey ( surfaceView.mWindow ) ; } catch ( android.os.RemoteException ex ) { } } } }
public int getConfigInt ( int item ) throws com.android.ims.ImsException { int ret = 0 ; try { ret = miConfig.getConfigInt ( item ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getInt()" , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } if ( DBG ) android.telephony.Rlog.d ( com.android.ims.ImsConfig.TAG , ( ( ( "getInt(): item = " + item ) + ", ret =" ) + ret ) ) ; return ret ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull final com.android.tools.lint.detector.api.JavaContext context ) { return new lombok.ast.ForwardingAstVisitor ( ) { @ java.lang.Override public boolean visitMethodDeclaration ( lombok.ast.MethodDeclaration node ) { com.android.tools.lint.client.api.JavaParser.ResolvedNode resolved = context.resolve ( node ) ; if ( resolved instanceof com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) { com.android.tools.lint.client.api.JavaParser.ResolvedMethod method = ( ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) ( resolved ) ) ; com.android.tools.lint.checks.CallSuperDetector.checkCallSuper ( context , node , method ) ; } return false ; } } ; }
synchronized long nInvokeClosureCreate ( long invokeID , byte [ ] params , long [ ] fieldIDs , long [ ] values , int [ ] sizes ) { validate ( ) ; long c = rsnInvokeClosureCreate ( mContext , invokeID , params , fieldIDs , values , sizes ) ; if ( c == 0 ) { throw new android.renderscript.RSRuntimeException ( "Failed creating closure." ) ; } return c ; }
private com.android.bluetooth.pbap.BluetoothPbapService getService ( java.lang.String perm ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "not allowed for non-active user" ) ; return null ; } if ( ( ( mService ) != null ) && ( mService.isAvailable ( ) ) ) { mService.enforceCallingOrSelfPermission ( perm , ( ( "Need " + perm ) + " permission" ) ) ; return mService ; } return null ; }
public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter , @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version ) { assert ( ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_PLATFORMS ) ) || ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_SAMPLES ) ) ) || ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_SOURCES ) ) ; for ( com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos ( filter ) ) { com.android.sdklib.repository.descriptors.IPkgDesc d = pkg.getDesc ( ) ; if ( ( d.hasAndroidVersion ( ) ) && ( d.getAndroidVersion ( ) . equals ( version ) ) ) { return pkg ; } } return null ; }
private void addChildNode ( com.intellij.ui.CheckedTreeNode parentNode , com.google.gct.testing.dimension.CloudTestingType type , com.google.gct.testing.dimension.GoogleCloudTestingDimension dimension ) { com.intellij.ui.CheckedTreeNode newNode = new com.intellij.ui.CheckedTreeNode ( type ) ; parentNode.add ( newNode ) ; newNode.setChecked ( dimension.getEnabledTypes ( ) . contains ( type ) ) ; newNode.setEnabled ( dimension.isEditable ( ) ) ; }
public boolean isDirEmpty ( java.lang.String path , java.lang.String message , java.lang.String outDir ) { java.io.File pathFile = new java.io.File ( ( ( outDir + ( java.io.File.separator ) ) + path ) ) ; java.lang.String [ ] pathListing = pathFile.list ( ) ; if ( ( pathListing != null ) && ( ( pathListing.length ) > 0 ) ) { println ( "WARNING: There are already some %1$s files present. None will be created!" , message ) ; return false ; } return true ; }
public void writeOnImsCommand ( int phoneId , android.telephony.ims.ImsCallSession session , int command ) { com.android.internal.telephony.metrics.InProgressCallSession callSession = mInProgressCallSessions.get ( phoneId ) ; if ( callSession == null ) { android.telephony.Rlog.e ( com.android.internal.telephony.metrics.TelephonyMetrics.TAG , "Call session is missing" ) ; } else { callSession.addEvent ( new com.android.internal.telephony.metrics.CallSessionEventBuilder ( com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.IMS_COMMAND ) . setCallIndex ( getCallId ( session ) ) . setImsCommand ( command ) ) ; } }
public void testSaveProperties ( ) { java.util.Properties expected = createExpectedProps ( ) ; com.android.sdklib.internal.repository.packages.MockExtraPackage p = new com.android.sdklib.internal.repository.packages.MockExtraPackage ( null , expected , "vendor" , "the_path" , ( - 1 ) , null , null , null , com.android.sdklib.internal.repository.archives.Archive.Os.ANY , com.android.sdklib.internal.repository.archives.Archive.Arch.ANY , LOCAL_ARCHIVE_PATH ) ; java.util.Properties actual = new java.util.Properties ( ) ; p.saveProperties ( actual ) ; assertEquals ( expected , actual ) ; }
private com.google.gct.testing.config.GoogleCloudTestingConfigurable.BackendOption getBackendOption ( ) { if ( useProd.isSelected ( ) ) { return com.google.gct.testing.config.GoogleCloudTestingConfigurable.BackendOption.PROD ; } if ( useStaging.isSelected ( ) ) { return com.google.gct.testing.config.GoogleCloudTestingConfigurable.BackendOption.STAGING ; } if ( useTest.isSelected ( ) ) { return com.google.gct.testing.config.GoogleCloudTestingConfigurable.BackendOption.TEST ; } if ( useCustom.isSelected ( ) ) { return com.google.gct.testing.config.GoogleCloudTestingConfigurable.BackendOption.CUSTOM ; } throw new java.lang.RuntimeException ( "No URL option is selected!" ) ; }
public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.TAG , ( "onStartCommand " + intent ) ) ; } if ( intent.getBooleanExtra ( HeadsetClientService.HFP_CLIENT_STOP_TAG , false ) ) { stopSelf ( ) ; return 0 ; } else { android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED ) ; filter.addAction ( BluetoothHeadsetClient.ACTION_CALL_CHANGED ) ; registerReceiver ( mBroadcastReceiver , filter ) ; return START_STICKY ; } }
public static int fromKeymaster ( int digest ) { switch ( digest ) { case android.security.keymaster.KeymasterDefs.KM_DIGEST_NONE : return android.security.KeyStoreKeyConstraints.Digest.NONE ; case android.security.keymaster.KeymasterDefs.KM_DIGEST_MD5 : return android.security.KeyStoreKeyConstraints.Digest.MD5 ; case android.security.keymaster.KeymasterDefs.KM_DIGEST_SHA1 : return android.security.KeyStoreKeyConstraints.Digest.SHA1 ; case android.security.keymaster.KeymasterDefs.KM_DIGEST_SHA_2_224 : return android.security.KeyStoreKeyConstraints.Digest.SHA224 ; case android.security.keymaster.KeymasterDefs.KM_DIGEST_SHA_2_256 : return android.security.KeyStoreKeyConstraints.Digest.SHA256 ; case android.security.keymaster.KeymasterDefs.KM_DIGEST_SHA_2_384 : return android.security.KeyStoreKeyConstraints.Digest.SHA384 ; case android.security.keymaster.KeymasterDefs.KM_DIGEST_SHA_2_512 : return android.security.KeyStoreKeyConstraints.Digest.SHA512 ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown digest: " + digest ) ) ; } }
private boolean bitmapEquals ( @ javax.annotation.Nonnull long [ ] bitmap ) { assert ( this . bitmap.length ) == ( bitmap.length ) ; for ( int i = 0 ; i < ( this . bitmap.length ) ; i ++ ) { if ( ( this . bitmap [ i ] ) != ( bitmap [ i ] ) ) { return false ; } } return true ; }
public void testApplyingWithAbsentFileToDelete ( ) throws java.lang.Exception { com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; new java.io.File ( myOlderDir , "bin/idea.bat" ) . delete ( ) ; assertAppliedAndRevertedCorrectly ( patch , com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ) ; }
public void setDataEnabled ( int subId , boolean enable ) { setUserMobileDataEnabled ( subId , enable ) ; }
public void run ( com.android.jack.ir.ast.cfg.JControlFlowGraph t ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock bb : t.getAllBlocksUnordered ( ) ) { for ( com.android.jack.ir.ast.cfg.JBasicBlockElement e : com.google.common.collect.Lists.newArrayList ( bb.getElements ( true ) ) ) { if ( e instanceof com.android.jack.ir.ast.cfg.JPhiBlockElement ) { com.android.jack.ir.ast.cfg.JPhiBlockElement phi = ( ( com.android.jack.ir.ast.cfg.JPhiBlockElement ) ( e ) ) ; if ( phi.getLhs ( ) . getUses ( ) . isEmpty ( ) ) { ( ( com.android.jack.ir.ast.cfg.JRegularBasicBlock ) ( bb ) ) . removeElement ( e ) ; continue ; } pruneUnreachableDef ( phi ) ; } } } }
public static < T > java.lang.Iterable < T > concat ( java.lang.Iterable < ? extends T > a , java.lang.Iterable < ? extends T > b , java.lang.Iterable < ? extends T > c ) { return com.google.common.collect.Iterables.concat ( com.google.common.collect.ImmutableList.of ( a , b , c ) ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , short [ ] data ) { validateIsInt16 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_16 , data.length ) ; }
protected void replaceImpl ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode existingNode , @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode newNode ) throws java.lang.UnsupportedOperationException { if ( ( lhs ) == existingNode ) { lhs = ( ( com.android.jack.ir.ast.JSsaVariableDefRef ) ( newNode ) ) ; return ; } for ( java.util.Map.Entry < com.android.jack.ir.ast.cfg.JBasicBlock , com.android.jack.ir.ast.JSsaVariableUseRef > pred : rhs.entrySet ( ) ) { if ( ( pred.getValue ( ) ) == existingNode ) { rhs.put ( pred.getKey ( ) , ( ( com.android.jack.ir.ast.JSsaVariableUseRef ) ( newNode ) ) ) ; return ; } } super . replaceImpl ( existingNode , newNode ) ; }
public java.util.List < java.io.File > getInputFiles ( ) { final com.google.common.collect.ImmutableList.Builder < java.io.File > builder = com.google.common.collect.ImmutableList.builder ( ) ; forEachInputFile ( new com.android.build.gradle.tasks.PackageSplitRes.SplitFileHandler ( ) { @ java.lang.Override public void execute ( java.lang.String split , java.io.File file ) { builder.add ( file ) ; } } ) ; return builder.build ( ) ; }
private void handleSimAbsent ( int slotId ) { if ( ( ( com.android.internal.telephony.SubscriptionInfoUpdater.mIccId [ slotId ] ) != null ) && ( ! ( com.android.internal.telephony.SubscriptionInfoUpdater.mIccId [ slotId ] . equals ( com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM ) ) ) ) { logd ( ( ( "SIM" + ( slotId + 1 ) ) + " hot plug out" ) ) ; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId [ slotId ] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM ; if ( isAllIccIdQueryDone ( ) ) { updateSubscriptionInfoByIccId ( ) ; } updateCarrierServices ( slotId , IccCardConstants.INTENT_VALUE_ICC_ABSENT ) ; broadcastSimStateChanged ( slotId , IccCardConstants.INTENT_VALUE_ICC_ABSENT , null ) ; }
public void test_SSL_check_private_key_cert_then_key ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; long s = org.conscrypt.NativeCrypto.SSL_new ( c ) ; org.conscrypt.NativeCrypto.SSL_use_certificate ( s , org.conscrypt.NativeCryptoTest.getServerCertificates ( ) ) ; try { org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.conscrypt.NativeCrypto.SSL_use_PrivateKey ( s , org.conscrypt.NativeCryptoTest.getServerPrivateKey ( ) . getNativeRef ( ) ) ; org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; org.conscrypt.NativeCrypto.SSL_free ( s ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; }
public void setAdditionalInputMethodSubtypes ( java.lang.String imiId , android.view.inputmethod.InputMethodSubtype [ ] subtypes ) { synchronized ( mH ) { try { mService.setAdditionalInputMethodSubtypes ( imiId , subtypes ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public int getNodeStartOffset ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node ) { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( mParser.getPosition ( node , ( - 1 ) , ( - 1 ) ) ) ) ; if ( pos != null ) { return pos.getOffset ( ) ; } return - 1 ; }
public int getPort ( ) { if ( ! ( isConnected ( ) ) ) { return 0 ; } java.net.SocketAddress remote = sc.remoteAddress ( ) ; if ( remote == null ) { return 0 ; } else { return ( ( java.net.InetSocketAddress ) ( remote ) ) . getPort ( ) ; } }
private void print ( java.lang.String s ) throws java.io.IOException { if ( ( ( precision ) != ( - 1 ) ) && ( ( precision ) < ( s.length ( ) ) ) ) s = s.substring ( 0 , precision ) ; if ( f.contains ( java.util.Formatter.Flags.UPPERCASE ) ) { s = s.toUpperCase ( ( ( l ) != null ? l : java.util.Locale.getDefault ( ) ) ) ; } a.append ( justify ( s ) ) ; }
public int dexopt ( java.lang.String apkPath , int uid , boolean isPublic , java.lang.String instructionSet ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "dexopt" ) ; builder.append ( ' ' ) ; builder.append ( apkPath ) ; builder.append ( ' ' ) ; builder.append ( uid ) ; builder.append ( ( isPublic ? " 1" : " 0" ) ) ; builder.append ( " *" ) ; builder.append ( ' ' ) ; builder.append ( instructionSet ) ; return execute ( builder.toString ( ) ) ; }
public android.app.ContextImpl getSystemContext ( ) { synchronized ( this ) { if ( ( mSystemContext ) == null ) { mSystemContext = android.app.ContextImpl.createSystemContext ( this ) ; } return mSystemContext ; } }
public static libcore.Repository openJdk9 ( java.nio.file.Path upstreamRoot , java.lang.String upstreamName ) { java.util.List < java.lang.String > sourceDirs = java.util.Arrays.asList ( "jdk/src/java.base/share/classes" , "jdk/src/java.logging/share/classes" , "jdk/src/java.prefs/share/classes" , "jdk/src/java.sql/share/classes" , "jdk/src/java.desktop/share/classes" , "jdk/src/java.base/solaris/classes" , "jdk/src/java.base/unix/classes" , "jdk/src/java.prefs/unix/classes" , "jdk/src/jdk.unsupported/share/classes" , "jdk/src/jdk.net/share/classes" , "jdk/src/java.base/linux/classes" , "build/linux-x86_64-normal-server-release/support/gensrc/java.base" , "jdk/src/java.base/unix/native/libjava" , "jdk/src/java.base/share/native/libjava" , "jdk/src/java.base/unix/native/libnio" , "jdk/src/java.base/unix/native/libnio/ch" , "jdk/src/java.base/unix/native/libnio/fs" , "jdk/src/java.base/unix/native/libnet" ) ; return new libcore.Repository.OpenJdkRepository ( upstreamRoot , upstreamName , sourceDirs ) ; }
public void verifyCallbackVideoAvailable ( ) { resetCounts ( ) ; android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession ; assertNotNull ( session ) ; session.notifyVideoAvailable ( ) ; new android.cts.util.PollingCheck ( android.media.tv.cts.TvInputServiceTest.TIME_OUT ) { @ java.lang.Override protected boolean check ( ) { return ( mCallback.mVideoAvailableCount ) > 0 ; } } . run ( ) ; }
public void testNoLintWarningOnGetPackageInfoOnNonPackageManagerClass ( ) throws java.lang.Exception { assertEquals ( "No warnings." , lintProject ( java ( "src/test/pkg/GetSignaturesNotPackageManagerTest.java" , ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( "package test.pkg;\n" + "\n" ) + "import android.app.Activity;\n" ) + "import android.content.pm.PackageManager;\n" ) + "import android.content.pm.PackageInfo;\n" ) + "\n" ) + "public class GetSignaturesNotPackageManagerTest extends Activity {\n" ) + " public void passLintCheck(Mock mock) throws Exception {\n" ) + " mock.getPackageInfo(\"some.pkg\", PackageManager.GET_SIGNATURES);\n" ) + " }\n" ) + " public interface Mock {\n" ) + " PackageInfo getPackageInfo(String pkg, int flags);\n" ) + " }\n" ) + "}" ) ) ) ) ) ; }
public boolean equals ( java.lang.Object other ) { if ( other == null ) { return false ; } else if ( ( this ) == other ) { return true ; } else if ( other instanceof android.icu.impl.ICUResource.Key ) { android.icu.impl.ICUResource.Key otherKey = ( ( android.icu.impl.ICUResource.Key ) ( other ) ) ; return ( ( length ) == ( otherKey.length ) ) && ( regionMatches ( otherKey.bytes , otherKey.offset , length ) ) ; } else { return false ; } }
public boolean checkAndSet ( java.lang.String value , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config ) { com.android.sdklib.resources.KeyboardState orientation = com.android.sdklib.resources.KeyboardState.getEnum ( value ) ; if ( orientation != null ) { com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier qualifier = new com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier ( ) ; qualifier.mValue = orientation ; config.setKeyboardStateQualifier ( qualifier ) ; return true ; } return false ; }
public void testEmptyOverrideFile ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData ( libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ; libcore.util.ZoneInfoDB.TzData dataWithEmptyOverride = new libcore.util.ZoneInfoDB.TzData ( libcore.util.ZoneInfoDBTest.makeEmptyFile ( ) , libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ; assertEquals ( data.getVersion ( ) , dataWithEmptyOverride.getVersion ( ) ) ; assertEquals ( data.getAvailableIDs ( ) . length , dataWithEmptyOverride.getAvailableIDs ( ) . length ) ; }
public static void startMethodTracing ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags , boolean samplingEnabled , int intervalUs ) { if ( fd == null ) { throw new java.lang.NullPointerException ( "fd == null" ) ; } dalvik.system.VMDebug.startMethodTracingFd ( traceFileName , fd , dalvik.system.VMDebug.checkBufferSize ( bufferSize ) , flags , samplingEnabled , intervalUs ) ; }
public static void handleTrustStorageUpdate ( ) { try { javax.net.ssl.X509TrustManager x509TrustManager = com.android.org.conscrypt.SSLParametersImpl.getDefaultTrustManager ( ) ; if ( x509TrustManager instanceof com.android.org.conscrypt.TrustManagerImpl ) { com.android.org.conscrypt.TrustManagerImpl trustManager = ( ( com.android.org.conscrypt.TrustManagerImpl ) ( x509TrustManager ) ) ; trustManager.handleTrustStorageUpdate ( ) ; } } catch ( java.security.KeyManagementException ignored ) { } }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mSensorManager = ( ( android.hardware.SensorManager ) ( getApplicationContext ( ) . getSystemService ( Context.SENSOR_SERVICE ) ) ) ; mGLSurfaceView = new android.opengl.GLSurfaceView ( this ) ; com.android.cts.verifier.sensors.AccelerometerTestRenderer renderer = new com.android.cts.verifier.sensors.AccelerometerTestRenderer ( this ) ; mListener = renderer ; mGLSurfaceView.setRenderer ( renderer ) ; setContentView ( mGLSurfaceView ) ; }
public void fetchCalls ( ) { callLogQueryHandler.fetchCalls ( callTypeFilter , dateLimit ) ; if ( ( ( ! ( isCallLogActivity ) ) && ( ( getActivity ( ) ) != null ) ) && ( ! ( getActivity ( ) . isFinishing ( ) ) ) ) { com.android.dialer.common.FragmentUtils.getParentUnsafe ( this , com.android.dialer.app.calllog.CallLogFragment.CallLogFragmentListener.class ) . updateTabUnreadCounts ( ) ; } }
public static java.lang.String toString ( int state ) { switch ( state ) { case android.telephony.ims.ImsCallSession.State.IDLE : return "IDLE" ; case android.telephony.ims.ImsCallSession.State.INITIATED : return "INITIATED" ; case android.telephony.ims.ImsCallSession.State.NEGOTIATING : return "NEGOTIATING" ; case android.telephony.ims.ImsCallSession.State.ESTABLISHING : return "ESTABLISHING" ; case android.telephony.ims.ImsCallSession.State.ESTABLISHED : return "ESTABLISHED" ; case android.telephony.ims.ImsCallSession.State.RENEGOTIATING : return "RENEGOTIATING" ; case android.telephony.ims.ImsCallSession.State.REESTABLISHING : return "REESTABLISHING" ; case android.telephony.ims.ImsCallSession.State.TERMINATING : return "TERMINATING" ; case android.telephony.ims.ImsCallSession.State.TERMINATED : return "TERMINATED" ; default : return "UNKNOWN" ; } }
public void setUp ( ) throws java.lang.Exception { logd ( "CarrierActionAgentTest +Setup!" ) ; super . setUp ( getClass ( ) . getSimpleName ( ) ) ; mFakeContentResolver = new com.android.internal.telephony.CarrierActionAgentTest.FakeContentResolver ( ) ; mFakeContentProvider = new com.android.internal.telephony.CarrierActionAgentTest.FakeContentProvider ( ) ; mFakeContentResolver.addProvider ( Settings.AUTHORITY , mFakeContentProvider ) ; org.mockito.Mockito.doReturn ( mFakeContentResolver ) . when ( mContext ) . getContentResolver ( ) ; mCarrierActionAgentHandler = new com.android.internal.telephony.CarrierActionAgentTest.CarrierActionAgentHandler ( getClass ( ) . getSimpleName ( ) ) ; mCarrierActionAgentHandler.start ( ) ; waitUntilReady ( ) ; logd ( "CarrierActionAgentTest -Setup!" ) ; }
android.telecom.cts.MockConference verifyConferenceForOutgoingCall ( ) { try { if ( ! ( connectionService.lock.tryAcquire ( TestUtils.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , java.util.concurrent.TimeUnit.MILLISECONDS ) ) ) { fail ( "No outgoing conference requested by Telecom" ) ; } } catch ( java.lang.InterruptedException e ) { android.util.Log.i ( android.telecom.cts.TestUtils.TAG , "Test interrupted!" ) ; } android.telecom.cts.MockConference conference = connectionService.conferences.get ( 0 ) ; setAndVerifyConferenceForOutgoingCall ( conference ) ; return conference ; }
public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( positionOffsetPixels != 0 ) { onPageScrolledBeforeScrollStateSettling = true ; } mTabIndex = mAdapter.getRtlPosition ( position ) ; final int count = mOnPageChangeListeners.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { mOnPageChangeListeners.get ( i ) . onPageScrolled ( position , positionOffset , positionOffsetPixels ) ; } }
public void testPackageSubstitution_withDot ( ) { org.mockito.Mockito.when ( mAttr.getValue ( ) ) . thenReturn ( ".ActivityOne" ) ; assertNotNull ( new com.android.manifmerger.XmlAttribute ( mXmlElement , mAttr , com.android.manifmerger.AttributeModel.newModel ( "ActivityOne" ) . setIsPackageDependent ( ) . build ( ) ) ) ; org.mockito.Mockito.verify ( mAttr ) . setValue ( "com.foo.bar.ActivityOne" ) ; }
public void setOutgoingCallerIdDisplay ( int commandInterfaceCLIRMode , android.os.Message onComplete ) { if ( isPhoneTypeGsm ( ) ) { com.android.internal.telephony.Phone imsPhone = mImsPhone ; if ( ( imsPhone != null ) && ( ( ( imsPhone.getServiceState ( ) . getState ( ) ) == ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) || ( imsPhone.isUtEnabled ( ) ) ) ) { imsPhone.setOutgoingCallerIdDisplay ( commandInterfaceCLIRMode , onComplete ) ; return ; } mCi.setCLIR ( commandInterfaceCLIRMode , obtainMessage ( com.android.internal.telephony.EVENT_SET_CLIR_COMPLETE , commandInterfaceCLIRMode , 0 , onComplete ) ) ; } else { loge ( "setOutgoingCallerIdDisplay: not possible in CDMA" ) ; } }
void validate ( org.bouncycastle.crypto.CipherParameters params ) { if ( params != null ) { if ( ! ( params instanceof org.bouncycastle.crypto.params.KeyParameter ) ) { throw new java.lang.IllegalArgumentException ( "CMac mode only permits key to be set." ) ; } } }
private int findLinkAddressIndex ( android.net.LinkAddress address ) { for ( int i = 0 ; i < ( mLinkAddresses.size ( ) ) ; i ++ ) { if ( mLinkAddresses.get ( i ) . isSameAddressAs ( address ) ) { return i ; } } return - 1 ; }
final void get ( long [ ] dst , int dstOffset , int longCount ) { int byteCount = checkGetBounds ( SizeOf.LONG , dst.length , dstOffset , longCount ) ; this . block.peekLongArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , longCount , order.needsSwap ) ; position += byteCount ; }
public boolean shouldRollBack ( long number ) { if ( ! ( ( ( ( sub1 ) != null ) && ( sub1.isModulusSubstitution ( ) ) ) || ( ( ( sub2 ) != null ) && ( sub2.isModulusSubstitution ( ) ) ) ) ) { return false ; } long divisor = com.ibm.icu.text.NFRule.power ( radix , exponent ) ; return ( ( number % divisor ) == 0 ) && ( ( ( baseValue ) % divisor ) != 0 ) ; }
public void testRootnF32_4 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_4 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 4400074 , 32 , 1 , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n4 ( nAlloc ) ; doF32_4 ( 11145969 , 16 ) ; }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , javax.net.ssl.SSLSession session ) throws java.security.cert.CertificateException { return checkTrusted ( chain , authType , session.getPeerHost ( ) , false ) ; }
public boolean resetRoamingConfiguration ( ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "resetRoamingConfiguration " ) ; try { if ( ( mWifiVendorHal ) != null ) { com.android.server.wifi.WifiNative.RoamingConfig config = new com.android.server.wifi.WifiNative.RoamingConfig ( ) ; return mWifiVendorHal.configureRoaming ( config ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } return false ; }
public void testGetDeviceId ( ) { if ( ! ( mHasTelephony ) ) { return ; } try { java.lang.String id = mTelephonyManager.getDeviceId ( ) ; org.junit.Assert.fail ( ( "Got device ID: " + id ) ) ; } catch ( java.lang.SecurityException e ) { } try { java.lang.String id = mTelephonyManager.getDeviceId ( 0 ) ; org.junit.Assert.fail ( ( "Got device ID: " + id ) ) ; } catch ( java.lang.SecurityException e ) { } }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object o ) { if ( o instanceof com.google.common.collect.Multiset.Entry ) { com.google.common.collect.Multiset.Entry < ? > entry = ( ( com.google.common.collect.Multiset.Entry < ? > ) ( o ) ) ; java.util.Collection < V > collection = multimap.asMap ( ) . get ( entry.getElement ( ) ) ; return ( collection != null ) && ( ( collection.size ( ) ) == ( entry.getCount ( ) ) ) ; } return false ; }
private static void testUnloadClass ( java.lang.reflect.Constructor < ? > constructor ) throws java.lang.Exception { java.lang.ref.WeakReference < java.lang.Class > klass = Main.setUpUnloadClassWeak ( constructor ) ; Main.doUnloading ( ) ; java.lang.ref.WeakReference < java.lang.Class > klass2 = Main.setUpUnloadClassWeak ( constructor ) ; Main.doUnloading ( ) ; java.lang.System.out.println ( klass.get ( ) ) ; java.lang.System.out.println ( klass2.get ( ) ) ; }
public com.google.doclava.FieldInfo cloneForClass ( com.google.doclava.ClassInfo newContainingClass ) { if ( newContainingClass == ( containingClass ( ) ) ) { return this ; } return new com.google.doclava.FieldInfo ( name ( ) , newContainingClass , realContainingClass ( ) , isPublic ( ) , isProtected ( ) , isPackagePrivate ( ) , isPrivate ( ) , isFinal ( ) , isStatic ( ) , isTransient ( ) , isVolatile ( ) , isSynthetic ( ) , mType , getRawCommentText ( ) , mConstantValue , position ( ) , annotations ( ) ) ; }
public void testCanEncodeCharSequence ( ) { assertTrue ( encoder.canEncode ( "w" ) ) ; assertFalse ( encoder.canEncode ( "슣" ) ) ; assertFalse ( encoder.canEncode ( "𐀀" ) ) ; try { encoder.canEncode ( null ) ; } catch ( java.lang.NullPointerException e ) { } assertTrue ( encoder.canEncode ( "" ) ) ; }
protected void clean ( org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { super . clean ( monitor ) ; doClean ( getProject ( ) , monitor ) ; if ( ( mGenFolder ) != null ) { mGenFolder.refreshLocal ( IResource.DEPTH_INFINITE , monitor ) ; } }
private java.io.File createDex ( vogar.Action action , java.io.File actionJar ) { java.io.File dex = run.localFile ( action , "classes.dex" ) ; vogar.Classpath classesToDex = vogar.Classpath.of ( actionJar ) ; classesToDex.addAll ( run.classpath ) ; if ( run.useJack ) { throw new java.lang.UnsupportedOperationException ( "Jack support for --mode=activity not yet implemented" ) ; } run.androidSdk.dex ( dex , classesToDex ) ; return dex ; }
private void informWifiStateBatteryStats ( int state ) { try { mBatteryStats.noteWifiState ( state , null ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.WifiStateTracker.TAG , ( "Battery stats unreachable " + ( e.getMessage ( ) ) ) ) ; } catch ( java.util.concurrent.RejectedExecutionException e ) { android.util.Log.e ( com.android.server.wifi.WifiStateTracker.TAG , ( "Battery stats executor is being shutdown " + ( e.getMessage ( ) ) ) ) ; } }
public void getAvailableNetworks ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_QUERY_AVAILABLE_NETWORKS , response , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
public com.android.tv.dvr.data.RecordedProgram addRecordedProgramInternal ( com.android.tv.dvr.data.RecordedProgram recordedProgram ) { com.android.tv.common.SoftPreconditions.checkState ( ( ( recordedProgram.getId ( ) ) == ( com.android.tv.dvr.data.RecordedProgram.ID_NOT_SET ) ) , com.android.tv.dvr.DvrDataManagerInMemoryImpl.TAG , ( ( ( "expected id of " + ( com.android.tv.dvr.data.RecordedProgram.ID_NOT_SET ) ) + " but was " ) + recordedProgram ) ) ; recordedProgram = com.android.tv.dvr.data.RecordedProgram.buildFrom ( recordedProgram ) . setId ( mNextId.incrementAndGet ( ) ) . build ( ) ; mRecordedPrograms.put ( recordedProgram.getId ( ) , recordedProgram ) ; notifyRecordedProgramsAdded ( recordedProgram ) ; return recordedProgram ; }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.pbapclient.PbapClientService service = getService ( ) ; if ( com.android.bluetooth.pbapclient.PbapClientService.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "PbapClient Binder connect " ) ; if ( service == null ) { android.util.Log.e ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "PbapClient Binder connect no service" ) ; return false ; } return service.connect ( device ) ; }
protected java.util.HashMap < java.lang.String , java.lang.Object > getSmsTrackerMap ( java.lang.String destAddr , java.lang.String scAddr , java.lang.String text , com.android.internal.telephony.SmsMessageBase.SubmitPduBase pdu ) { java.util.HashMap < java.lang.String , java.lang.Object > map = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; map.put ( com.android.internal.telephony.SMSDispatcher.MAP_KEY_DEST_ADDR , destAddr ) ; map.put ( com.android.internal.telephony.SMSDispatcher.MAP_KEY_SC_ADDR , scAddr ) ; map.put ( com.android.internal.telephony.SMSDispatcher.MAP_KEY_TEXT , text ) ; map.put ( com.android.internal.telephony.SMSDispatcher.MAP_KEY_SMSC , pdu.encodedScAddress ) ; map.put ( com.android.internal.telephony.SMSDispatcher.MAP_KEY_PDU , pdu.encodedMessage ) ; return map ; }
public void testEquals_Normal ( ) { org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset c1 = new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset ( "mock" , null ) ; org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset2 c2 = new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset2 ( "mock" , null ) ; assertTrue ( c1.equals ( c2 ) ) ; assertTrue ( c2.equals ( c1 ) ) ; c2 = new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset2 ( "Mock" , null ) ; assertFalse ( c1.equals ( c2 ) ) ; assertFalse ( c2.equals ( c1 ) ) ; }
private int performDexOptInternal ( java.lang.String packageName , boolean checkProfiles , java.lang.String targetCompilerFilter , boolean force ) { android.content.pm.PackageParser.Package p ; synchronized ( mPackages ) { p = mPackages.get ( packageName ) ; if ( p == null ) { return PackageDexOptimizer.DEX_OPT_FAILED ; } mPackageUsage.maybeWriteAsync ( mPackages ) ; mCompilerStats.maybeWriteAsync ( ) ; } long callingId = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mInstallLock ) { return performDexOptInternalWithDependenciesLI ( p , checkProfiles , targetCompilerFilter , force ) ; } } finally { android.os.Binder.restoreCallingIdentity ( callingId ) ; } }
public void addI8 ( android.support.v8.renderscript.Byte2 v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addI8 ( v ) ; return ; } addI8 ( v.x ) ; addI8 ( v.y ) ; }
private static boolean hasFirstArgument ( com.intellij.psi.PsiExpression argument , java.util.List < com.intellij.psi.PsiMethodCallExpression > list ) { for ( com.intellij.psi.PsiMethodCallExpression call : list ) { com.intellij.psi.PsiExpression [ ] expressions = call.getArgumentList ( ) . getExpressions ( ) ; if ( ( expressions.length ) > 0 ) { com.intellij.psi.PsiExpression argument2 = expressions [ 0 ] ; if ( argument.getText ( ) . equals ( argument2.getText ( ) ) ) { return true ; } } } return false ; }
public static org.w3c.dom.Document parse ( @ com.android.annotations.NonNull java.lang.String xml ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { xml = com.android.utils.XmlUtils.stripBom ( xml ) ; return com.android.utils.PositionXmlParser.parse ( xml , new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) , true , true ) ; }
public void sendSingleScanRequestWithBadRawResults ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = com.android.server.wifi.ScanTestUtil.createRequest ( WifiScanner.WIFI_BAND_24_GHZ , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; com.android.server.wifi.ScanResults results = com.android.server.wifi.ScanResults.createOverflowing ( 0 , 0 , com.android.server.wifi.ScanResults.generateNativeResults ( 0 , 5150 , 5171 ) ) ; doSuccessfulSingleScan ( requestSettings , com.android.server.wifi.ScanTestUtil.computeSingleScanNativeSettings ( requestSettings ) , results ) ; }
public void testAesCbcHmacSha1Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 ) ; }
public void startSwipe ( android.support.v7.widget.RecyclerView.ViewHolder viewHolder ) { if ( ! ( mCallback.hasSwipeFlag ( mRecyclerView , viewHolder ) ) ) { android.util.Log.e ( android.support.v7.widget.helper.ItemTouchHelper.TAG , "Start swipe has been called but swiping is not enabled" ) ; return ; } if ( ( viewHolder.itemView.getParent ( ) ) != ( mRecyclerView ) ) { android.util.Log.e ( android.support.v7.widget.helper.ItemTouchHelper.TAG , ( "Start swipe has been called with a view holder which is not a child of " + "the RecyclerView controlled by this ItemTouchHelper." ) ) ; return ; } obtainVelocityTracker ( ) ; mDx = mDy = 0.0F ; select ( viewHolder , android.support.v7.widget.helper.ItemTouchHelper.ACTION_STATE_SWIPE ) ; }
private static void assertCannotParse ( java.util.Locale l , java.lang.String fmt , java.lang.String value ) { java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( fmt , l ) ; java.text.ParsePosition pp = new java.text.ParsePosition ( 0 ) ; java.util.Date d = sdf.parse ( value , pp ) ; assertNull ( ( ( ( ( ( "Value " + value ) + " must not parse in locale " ) + l ) + " with format " ) + fmt ) , d ) ; }
public java.lang.String getMessage ( ) { com.android.sched.util.location.Location existingSource = existingType.getLocation ( ) ; return ( ( ( ( ( ( ( "Type " + ( com.android.jack.Jack.getUserFriendlyFormatter ( ) . getName ( existingType ) ) ) + " from " ) + ( failedToImportSource.getDescription ( ) ) ) + " has already been imported from " ) + ( existingSource.getDescription ( ) ) ) + " (see property '" ) + ( JayceFileImporter.COLLISION_POLICY.getName ( ) ) ) + "' for type collision policy)" ; }
public void moveCompleteApp ( java.lang.String fromUuid , java.lang.String toUuid , java.lang.String packageName , java.lang.String dataAppName , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.moveCompleteApp ( fromUuid , toUuid , packageName , dataAppName , appId , seInfo , targetSdkVersion ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void startsOutAvailable ( ) { mTestedSm = new com.android.server.connectivity.tethering.TetherInterfaceStateMachine ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mLooper.getLooper ( ) , android.net.ConnectivityManager.TETHERING_BLUETOOTH , mSharedLog , mNMService , mStatsService , mTetherHelper , mTetheringDependencies ) ; mTestedSm.start ( ) ; mLooper.dispatchAll ( ) ; org.mockito.Mockito.verify ( mTetherHelper ) . updateInterfaceState ( mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito.verify ( mTetherHelper ) . updateLinkProperties ( org.mockito.Matchers.eq ( mTestedSm ) , org.mockito.Matchers.any ( android.net.LinkProperties.class ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mTetherHelper , mNMService , mStatsService ) ; }
public java.util.List < android.service.carrier.CarrierIdentifier > getAllowedCarriers ( int slotIndex ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getAllowedCarriers ( slotIndex ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#getAllowedCarriers" , e ) ; } catch ( java.lang.NullPointerException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#getAllowedCarriers" , e ) ; } return new java.util.ArrayList < android.service.carrier.CarrierIdentifier > ( 0 ) ; }
void playDtmfTone ( com.android.server.telecom.Call call , char digit ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "playDtmfTone" ) ) ) { try { logOutgoing ( "playDtmfTone %s %c" , callId , digit ) ; mServiceInterface.playDtmfTone ( callId , digit , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException e ) { } } }
private static android.database.MatrixCursor createHeaderCursor ( android.content.Context context , java.lang.String name , long id ) { android.database.MatrixCursor headerCursor = new android.database.MatrixCursor ( com.android.dialer.searchfragment.directories.DirectoryContactsCursor.PROJECTION , 1 ) ; if ( com.android.dialer.common.cp2.DirectoryCompat.isOnlyEnterpriseDirectoryId ( id ) ) { headerCursor.addRow ( new java.lang.Object [ ] { context.getString ( R.string.directory_search_label_work ) , id } ) ; } else { headerCursor.addRow ( new java.lang.Object [ ] { context.getString ( R.string.directory , name ) , id } ) ; } return headerCursor ; }
public void setOutputFile ( @ com.android.annotations.NonNull java.io.File outputFile ) { com.android.build.gradle.internal.variant.ApkVariantOutputData variantOutputData = getApkVariantData ( ) . getOutputs ( ) . get ( 0 ) ; if ( ( variantOutputData.zipAlignTask ) != null ) { variantOutputData.zipAlignTask.setOutputFile ( outputFile ) ; } else { variantOutputData.packageApplicationTask.setOutputFile ( outputFile ) ; } variantOutputData.setOutputFile ( outputFile ) ; }
public void logrb ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.String bundleName , java.lang.String msg , java.lang.Throwable thrown ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setThrown ( thrown ) ; doLog ( lr , bundleName ) ; }
private int parseDayOfWeek ( java.lang.String string , int offset , boolean standAlone ) { libcore.icu.LocaleData ld = formatData.localeData ; int index = parseText ( string , offset , ( standAlone ? ld.longStandAloneWeekdayNames : formatData.weekdays ) , java.util.Calendar.DAY_OF_WEEK ) ; if ( index < 0 ) { index = parseText ( string , offset , ( standAlone ? ld.shortStandAloneWeekdayNames : formatData.shortWeekdays ) , java.util.Calendar.DAY_OF_WEEK ) ; } return index ; }
void loadIcons ( int [ ] recordNumbers , android.os.Message msg ) { if ( ( ( recordNumbers == null ) || ( ( recordNumbers.length ) == 0 ) ) || ( msg == null ) ) { return ; } mEndMsg = msg ; mIcons = new android.graphics.Bitmap [ recordNumbers.length ] ; mRecordNumbers = recordNumbers ; mCurrentRecordIndex = 0 ; mState = com.android.internal.telephony.cat.IconLoader.STATE_MULTI_ICONS ; startLoadingIcon ( recordNumbers [ 0 ] ) ; }
private void addError ( org.eclipse.swt.widgets.Composite parent , java.lang.String message ) { if ( ( mError ) == null ) { mError = com.android.ide.eclipse.adt.internal.editors.IconFactory.getInstance ( ) . getIcon ( com.android.ide.eclipse.adt.internal.wizards.export.ProjectCheckPage.IMG_ERROR ) ; } new org.eclipse.swt.widgets.Label ( parent , org.eclipse.swt.SWT.NONE ) . setImage ( mError ) ; org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label ( parent , org.eclipse.swt.SWT.NONE ) ; label.setLayoutData ( new org.eclipse.swt.layout.GridData ( org.eclipse.swt.layout.GridData.FILL_HORIZONTAL ) ) ; label.setText ( message ) ; setErrorMessage ( "Application cannot be exported due to the error(s) below." ) ; setPageComplete ( false ) ; mHasMessage = true ; }
public void testPackageOverridePackageFromFlavor ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilderTest.AndroidBuilderMock ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; mFlavor.getProductFlavor ( ) . setPackageName ( "foo.bar" ) ; builder.setBuildVariant ( mMain , mDebug ) ; builder.addProductFlavor ( mFlavor ) ; assertEquals ( "foo.bar" , builder.getPackageOverride ( "" ) ) ; }
public void doQuit ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "doQuit" ) ; if ( ( mAudioManager ) != null ) { mAudioManager.setParameters ( "hfp_enable=false" ) ; } quitNow ( ) ; }
public com.android.ahat.DocString render ( com.android.ahat.heapdump.PathElement element ) { if ( element == root ) { return com.android.ahat.DocString.link ( com.android.ahat.DocString.uri ( "rooted" ) , com.android.ahat.DocString.text ( "ROOT" ) ) ; } else { com.android.ahat.DocString label = com.android.ahat.DocString.text ( "→ " ) ; label.append ( com.android.ahat.Summarizer.summarize ( element.instance ) ) ; label.append ( element.field ) ; return label ; } }
public void mismatchInCheck ( ) { expectedException.expect ( junit.framework.AssertionFailedError.class ) ; expectedException.expect ( stackTraceContainsThisClass ( ) ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.isRoot ( ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( org.hamcrest.Matchers.not ( android.support.test.espresso.matcher.ViewMatchers.isDisplayed ( ) ) ) ) ; }
public void testConnectivityChanged_manifestRequestOnly_shouldNotReceiveIntent ( ) { if ( ! ( mPackageManager.hasSystemFeature ( PackageManager.FEATURE_WIFI ) ) ) { android.util.Log.i ( android.net.cts.ConnectivityManagerTest.TAG , "testConnectivityChanged_manifestRequestOnly_shouldNotReceiveIntent cannot execute unless device supports WiFi" ) ; return ; } android.net.cts.ConnectivityReceiver.prepare ( ) ; toggleWifi ( ) ; android.content.Intent finalIntent = new android.content.Intent ( ConnectivityReceiver.FINAL_ACTION ) ; finalIntent.setClass ( mContext , android.net.cts.ConnectivityReceiver.class ) ; mContext.sendBroadcast ( finalIntent ) ; assertFalse ( android.net.cts.ConnectivityReceiver.waitForBroadcast ( ) ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeInt ( ( mSupport5gBand ? 1 : 0 ) ) ; dest.writeInt ( mMasterPreference ) ; dest.writeInt ( mClusterLow ) ; dest.writeInt ( mClusterHigh ) ; dest.writeIntArray ( mDiscoveryWindowInterval ) ; }
private void performHideDialpadFragment ( ) { android.support.v4.app.FragmentManager fragmentManager = inCallActivity.getDialpadFragmentManager ( ) ; if ( fragmentManager == null ) { com.android.dialer.common.LogUtil.e ( "InCallActivityCommon.performHideDialpadFragment" , "child fragment manager is null" ) ; return ; } android.support.v4.app.Fragment fragment = fragmentManager.findFragmentByTag ( com.android.incallui.InCallActivityCommon.TAG_DIALPAD_FRAGMENT ) ; if ( fragment != null ) { android.support.v4.app.FragmentTransaction transaction = fragmentManager.beginTransaction ( ) ; transaction.hide ( fragment ) ; transaction.commitAllowingStateLoss ( ) ; fragmentManager.executePendingTransactions ( ) ; } inCallActivity.updateNavigationBar ( false ) ; }
public void requestDefaultSmdpAddress ( java.lang.String cardId , java.util.concurrent.Executor executor , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.String > callback ) { try { getIEuiccCardController ( ) . getDefaultSmdpAddress ( mContext.getOpPackageName ( ) , cardId , new com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode , java.lang.String address ) { executor.execute ( ( ) -> callback.onComplete ( resultCode , address ) ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling getDefaultSmdpAddress" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
public void migrateAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.migrateAppData ( uuid , packageName , userId , flags ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
protected com.android.volley.Request < android.graphics.Bitmap > makeImageRequest ( java.lang.String requestUrl , int maxWidth , int maxHeight , android.widget.ImageView.ScaleType scaleType , final java.lang.String cacheKey ) { return new com.android.volley.toolbox.ImageRequest ( requestUrl , new com.android.volley.Response.Listener < android.graphics.Bitmap > ( ) { @ java.lang.Override public void onResponse ( android.graphics.Bitmap response ) { onGetImageSuccess ( cacheKey , response ) ; } } , maxWidth , maxHeight , scaleType , android.graphics.Bitmap.Config.RGB_565 , new com.android.volley.Response.ErrorListener ( ) { @ java.lang.Override public void onErrorResponse ( com.android.volley.VolleyError error ) { onGetImageError ( cacheKey , error ) ; } } ) ; }
public void testAesCbcHmacMd5Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , android.net.cts.IpSecManagerTest.getKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public int getAttributeValueType ( int index ) throws com.android.apksig.apk.AndroidBinXmlParser.XmlParserException { int type = getAttribute ( index ) . getValueType ( ) ; switch ( type ) { case com.android.apksig.apk.AndroidBinXmlParser.Attribute.TYPE_STRING : return com.android.apksig.apk.AndroidBinXmlParser.VALUE_TYPE_STRING ; case com.android.apksig.apk.AndroidBinXmlParser.Attribute.TYPE_INT_DEC : case com.android.apksig.apk.AndroidBinXmlParser.Attribute.TYPE_INT_HEX : case com.android.apksig.apk.AndroidBinXmlParser.Attribute.TYPE_REFERENCE : return com.android.apksig.apk.AndroidBinXmlParser.VALUE_TYPE_INT ; case com.android.apksig.apk.AndroidBinXmlParser.Attribute.TYPE_INT_BOOLEAN : return com.android.apksig.apk.AndroidBinXmlParser.VALUE_TYPE_BOOLEAN ; default : return com.android.apksig.apk.AndroidBinXmlParser.VALUE_TYPE_UNSUPPORTED ; } }
private static boolean hasLooperConstructorParameter ( @ com.android.annotations.NonNull com.intellij.psi.PsiClass cls ) { for ( com.intellij.psi.PsiMethod constructor : cls.getConstructors ( ) ) { for ( com.intellij.psi.PsiParameter parameter : constructor.getParameterList ( ) . getParameters ( ) ) { com.intellij.psi.PsiType type = parameter.getType ( ) ; if ( com.android.tools.lint.checks.HandlerDetector.LOOPER_CLS.equals ( type.getCanonicalText ( ) ) ) { return true ; } } } return false ; }
protected void install ( byte [ ] content , int version ) throws java.io.IOException { com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro ( content ) ; boolean valid = installer.install ( distro ) ; android.util.Slog.i ( com.android.server.updates.TzDataInstallReceiver.TAG , ( "Timezone data install valid for this device: " + valid ) ) ; super . install ( content , version ) ; }
private static com.android.server.wifi.hotspot2.PasspointProvider generateProvider ( android.net.wifi.WifiConfiguration config ) { com.android.server.wifi.hotspot2.PasspointProvider provider = org.mockito.Mockito.mock ( com.android.server.wifi.hotspot2.PasspointProvider.class ) ; android.net.wifi.hotspot2.PasspointConfiguration passpointConfig = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; android.net.wifi.hotspot2.pps.HomeSp homeSp = new android.net.wifi.hotspot2.pps.HomeSp ( ) ; homeSp.setFqdn ( config.FQDN ) ; passpointConfig.setHomeSp ( homeSp ) ; org.mockito.Mockito.when ( provider.getConfig ( ) ) . thenReturn ( passpointConfig ) ; org.mockito.Mockito.when ( provider.getWifiConfig ( ) ) . thenReturn ( config ) ; return provider ; }
public void test_toString ( ) { java.text.FieldPosition fpos = new java.text.FieldPosition ( 1 ) ; fpos.setBeginIndex ( 2 ) ; fpos.setEndIndex ( 3 ) ; assertEquals ( "ToString returned the wrong value:" , "java.text.FieldPosition[attribute=null,field=1,beginIndex=2,endIndex=3]" , fpos.toString ( ) ) ; java.text.FieldPosition fpos2 = new java.text.FieldPosition ( java.text.DateFormat.Field.ERA ) ; fpos2.setBeginIndex ( 4 ) ; fpos2.setEndIndex ( 5 ) ; assertEquals ( "ToString returned the wrong value:" , ( ( "java.text.FieldPosition[attribute=" + ( java.text.DateFormat.Field.ERA ) ) + ",field=-1,beginIndex=4,endIndex=5]" ) , fpos2.toString ( ) ) ; }
public com.android.jack.test.toolchain.JillApiV01Toolchain build ( ) { java.io.File jillPrebuilt = ( com.android.jack.test.toolchain.AbstractTestTools.isPrebuiltAvailable ( "jill" ) ) ? com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "jill" ) : null ; return new com.android.jack.test.toolchain.JillApiV01Toolchain ( jillPrebuilt , com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "jack" ) , com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "legacy-java-compiler" ) , com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "jarjar" ) , com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "proguard" ) ) ; }
public void binderDied ( ) { if ( com.android.server.am.ActivityManagerDebugConfig.DEBUG_ALL ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( "Death received in " + ( this ) ) + " for thread " ) + ( mAppThread.asBinder ( ) ) ) ) ; synchronized ( this ) { appDiedLocked ( mApp , mPid , mAppThread , true ) ; } }
V transform ( java.util.Map.Entry < K , V > entry ) { return entry.getValue ( ) ; }
public void testStageInstallWithErrorCode_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir ( ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( new java.io.File ( workingDir , "myFile" ) , new byte [ ] { 'a' } ) ; byte [ ] distroBytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBytes ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( new com.android.timezone.distro.TimeZoneDistro ( distroBytes ) ) ) ; assertInstallDistroStaged ( distroBytes ) ; assertNoInstalledDistro ( ) ; }
synchronized void nScriptSetVarV ( long id , int slot , byte [ ] val , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetVarV ( curCon , id , slot , val , mUseInc ) ; }
public void test_isDaemon ( ) { st = new java.lang.Thread ( new org.apache.harmony.tests.java.lang.ThreadTest.SimpleThread ( 1 ) , "SimpleThread10" ) ; assertEquals ( java.lang.Thread.currentThread ( ) . isDaemon ( ) , st.isDaemon ( ) ) ; st.setDaemon ( true ) ; assertTrue ( "Daemon thread returned false" , st.isDaemon ( ) ) ; st.start ( ) ; try { st.join ( ) ; } catch ( java.lang.InterruptedException ie ) { fail ( ) ; } }
public void testApplyingWithCaseChangedNames ( ) throws java.lang.Exception { com.intellij.openapi.util.io.FileUtil.rename ( new java.io.File ( myOlderDir , "Readme.txt" ) , new java.io.File ( myOlderDir , "README.txt" ) ) ; com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; assertAppliedAndRevertedCorrectly ( patch , com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ) ; }
public void onResume ( ) { super . onResume ( ) ; com.android.dialer.logging.Logger.get ( getContext ( ) ) . logImpression ( DialerImpression.Type.VVM_SETTINGS_VIEWED ) ; voicemailClient.addActivationStateListener ( this ) ; android.preference.PreferenceScreen preferenceScreen = getPreferenceScreen ( ) ; if ( preferenceScreen != null ) { preferenceScreen.removeAll ( ) ; } addPreferencesFromResource ( R.xml.voicemail_settings ) ; initializeXmlPreferences ( ) ; setupVisualVoicemailPreferences ( ) ; setupNotificationsPreference ( ) ; setupAdvancedSettingsPreference ( ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent.getAction ( ) ; if ( com.android.internal.telephony.CarrierSignalAgent.DBG ) log ( ( "CarrierSignalAgent receiver action: " + action ) ) ; if ( action.equals ( CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED ) ) { if ( ( IccCardConstants.State.ABSENT ) == ( mPhone.getIccCard ( ) . getState ( ) ) ) { notifyCarrierSignalReceivers ( new android.content.Intent ( TelephonyIntents.ACTION_CARRIER_SIGNAL_RESET ) ) ; } loadCarrierConfig ( ) ; } }
public void testStyles ( ) throws java.lang.Exception { assertEquals ( ( "res/values/pxsp.xml:9: Warning: Avoid using \"px\" as units; use \"dp\" instead [PxUsage]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " <item name=\"android:textSize\">50px</item>\n" + " ^\n" ) + "res/values/pxsp.xml:17: Warning: Avoid using \"px\" as units; use \"dp\" instead [PxUsage]\n" ) + " <item name=\"android:paddingRight\"> 50px </item>\n" ) + " ^\n" ) + "res/values/pxsp.xml:18: Warning: Avoid using \"px\" as units; use \"dp\" instead [PxUsage]\n" ) + " <item name=\"android:paddingTop\">50px</item>\n" ) + " ^\n" ) + "res/values/pxsp.xml:6: Warning: Should use \"sp\" instead of \"dp\" for text sizes [SpUsage]\n" ) + " <item name=\"android:textSize\">50dp</item>\n" ) + " ^\n" ) + "res/values/pxsp.xml:12: Warning: Should use \"sp\" instead of \"dp\" for text sizes [SpUsage]\n" ) + " <item name=\"android:textSize\"> 50dip </item>\n" ) + " ^\n" ) + "0 errors, 5 warnings\n" ) + "" ) ) , lintFiles ( "res/values/pxsp.xml" ) ) ; }
private java.util.List < java.lang.String > getStringList ( java.lang.StringBuilder stringAccumulator ) { java.util.List < java.lang.String > filteredStrings = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String s : com.android.sdklib.devices.DeviceParser.DeviceHandler.getString ( mStringAccumulator ) . split ( com.android.sdklib.devices.DeviceParser.DeviceHandler.sSpaceRegex ) ) { if ( ( s != null ) && ( ! ( s.isEmpty ( ) ) ) ) { filteredStrings.add ( s.trim ( ) ) ; } } return filteredStrings ; }
private void handleServiceCategoryProgramData ( com.android.internal.telephony.cdma.SmsMessage sms ) { java.util.ArrayList < android.telephony.cdma.CdmaSmsCbProgramData > programDataList = sms.getSmsCbProgramData ( ) ; if ( programDataList == null ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CdmaSMSDispatcher.TAG , "handleServiceCategoryProgramData: program data list is null!" ) ; return ; } android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED_ACTION ) ; intent.putExtra ( "sender" , sms.getOriginatingAddress ( ) ) ; intent.putParcelableArrayListExtra ( "program_data" , programDataList ) ; dispatch ( intent , com.android.internal.telephony.cdma.RECEIVE_SMS_PERMISSION , mScpResultsReceiver ) ; }
public boolean process ( java.util.Set < ? extends javax.lang.model.element.TypeElement > annotations , javax.annotation.processing.RoundEnvironment roundEnv ) { try { for ( javax.lang.model.element.Element annotatedElement : roundEnv.getElementsAnnotatedWith ( com.google.devtools.common.options.Option.class ) ) { checkModifiers ( annotatedElement ) ; checkInOptionBase ( annotatedElement ) ; } } catch ( com.google.devtools.common.options.OptionProcessor.OptionProcessorException e ) { error ( e.elementInError , e.getMessage ( ) ) ; } return true ; }
public void run ( ) { uiNode.setAttributeValue ( LayoutConstants.ATTR_LAYOUT_X , SdkConstants.NS_RESOURCES , java.lang.String.format ( LayoutConstants.VALUE_N_DIP , where.x ) , false ) ; uiNode.setAttributeValue ( LayoutConstants.ATTR_LAYOUT_Y , SdkConstants.NS_RESOURCES , java.lang.String.format ( LayoutConstants.VALUE_N_DIP , where.y ) , false ) ; uiNode.commitDirtyAttributesToXml ( ) ; }
public void run ( ) { if ( mIsHttps ) { mResult = sendDnsAndHttpProbes ( proxy , httpsUrl , ValidationProbeEvent.PROBE_HTTPS ) ; } else { mResult = sendDnsAndHttpProbes ( proxy , httpUrl , ValidationProbeEvent.PROBE_HTTP ) ; } if ( ( ( mIsHttps ) && ( mResult.isSuccessful ( ) ) ) || ( ( ! ( mIsHttps ) ) && ( mResult.isPortal ( ) ) ) ) { while ( ( latch.getCount ( ) ) > 0 ) { latch.countDown ( ) ; } } latch.countDown ( ) ; }
private com.android.jack.ir.ast.JFieldId getOrCreateAssertionstatusField ( @ javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest request ) { try { com.android.jack.ir.ast.JFieldId id = currentType.getFieldId ( com.android.jack.transformations.AssertionTransformer.Visitor.ASSERTION_FIELD_NAME , JPrimitiveTypeEnum.BOOLEAN.getType ( ) , FieldKind.STATIC ) ; com.android.jack.ir.ast.JField field = id.getField ( ) ; assert field != null ; if ( field.getEnclosingType ( ) . isSameType ( currentType ) ) { return id ; } } catch ( com.android.jack.lookup.JLookupException e ) { } return addAssertionStatusToType ( currentType , request ) ; }
public void buildString ( java.lang.StringBuilder builder ) { if ( builder == null ) { return ; } builder.append ( getTypeString ( ) ) . append ( "[" ) . append ( type ) . append ( "]" ) . append ( ", valInt=" ) . append ( valueInt ) . append ( ", valInt2=" ) . append ( valueInt2 ) . append ( ", valString=" ) . append ( valueString ) . append ( ", device=" ) . append ( device ) ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.conscrypt.NativeCryptoTest.assertEqualByteArrays ( OCSP_TEST_DATA , org.conscrypt.NativeCrypto.SSL_get_ocsp_response ( ssl ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { switch ( mTarget ) { case DEVICE : if ( ( ( ! ( e instanceof com.android.tradefed.device.DeviceNotAvailableException ) ) && ( mCleanup ) ) && ( ( mFilePushed ) != null ) ) { device.executeShellCommand ( ( "rm -r " + ( mFilePushed ) ) ) ; } break ; case HOST : com.android.tradefed.util.FileUtil.recursiveDelete ( new java.io.File ( mFilePushed ) ) ; break ; } }
public void onResume ( ) { com.android.dialer.common.LogUtil.enterBlock ( "CallLogFragment.onResume" ) ; super . onResume ( ) ; final boolean hasReadCallLogPermission = com.android.dialer.util.PermissionsUtil.hasPermission ( getActivity ( ) , android.Manifest.permission.READ_CALL_LOG ) ; if ( ( ! ( mHasReadCallLogPermission ) ) && hasReadCallLogPermission ) { mRefreshDataRequired = true ; updateEmptyMessage ( mCallTypeFilter ) ; } mHasReadCallLogPermission = hasReadCallLogPermission ; mAdapter.clearFilteredNumbersCache ( ) ; refreshData ( ) ; mAdapter.onResume ( ) ; rescheduleDisplayUpdate ( ) ; }
public static javax.net.ssl.TrustManager wrap ( javax.net.ssl.TrustManager trustManager ) { if ( trustManager instanceof javax.net.ssl.X509ExtendedTrustManager ) { return new libcore.javax.net.ssl.TestTrustManager ( ( ( javax.net.ssl.X509ExtendedTrustManager ) ( trustManager ) ) ) ; } else if ( trustManager instanceof javax.net.ssl.X509TrustManager ) { return new libcore.javax.net.ssl.TestTrustManager ( ( ( javax.net.ssl.X509TrustManager ) ( trustManager ) ) ) ; } return trustManager ; }
public void testCorruptOverrideFile ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData ( libcore.util.ZoneInfoDBTest.makeCorruptFile ( ) , libcore.util.ZoneInfoDBTest.TZDATA_IN_DATA , libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ; assertEquals ( libcore.util.ZoneInfoDBTest.CURRENT_VERSION , data.getVersion ( ) ) ; assertEquals ( java.util.TimeZone.getAvailableIDs ( ) . length , data.getAvailableIDs ( ) . length ) ; }
public void test1 ( ) throws java.lang.Exception { check ( ( "<root>\n" + ( ( ( "[ <element/>\n" + " <second/>\n" ) + "]\n" ) + "</root>\n" ) ) , ( " <element/>\n" + " <second/>\n" ) , ( "<root>\n" + ( ( ( " <element/>\n" + " <second/>\n" ) + "\n" ) + "</root>\n" ) ) , com.android.ide.common.xml.XmlFormatPreferences.defaults ( ) ) ; }
private com.android.jack.ir.ast.JExpression makeLocalRef ( com.android.jack.ir.sourceinfo.SourceInfo info , org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding b ) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.ir.ast.JVariable variable = curMethod.getJVariable ( b ) ; assert variable != null ; return variable.makeRef ( info ) ; }
public void testLibProguard ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguard" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "build/" + ( com.android.build.gradle.BasePlugin.FD_OUTPUTS ) ) + "/proguard/release" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int proguardInt -> a" } ) ; }
public static com.android.dx.rop.code.RopMethod convert ( com.android.dx.cf.code.ConcreteMethod method , com.android.dx.rop.code.TranslationAdvice advice , com.android.dx.cf.iface.MethodList methods , com.android.dx.dex.DexOptions dexOptions ) { try { com.android.dx.cf.code.Ropper r = new com.android.dx.cf.code.Ropper ( method , advice , methods , dexOptions ) ; r.doit ( ) ; return r.getRopMethod ( ) ; } catch ( com.android.dx.cf.code.SimException ex ) { ex.addContext ( ( "...while working on method " + ( method.getNat ( ) . toHuman ( ) ) ) ) ; throw ex ; } }
public com.android.sched.vfs.InputOutputVDir checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.DirectDir ( new com.android.sched.util.file.Directory ( string , context.getRunnableHooks ( ) , existence , permissions , change ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e ) ; } }
final int startActivitiesInPackage ( int uid , java.lang.String callingPackage , android.content.Intent [ ] intents , java.lang.String [ ] resolvedTypes , android.os.IBinder resultTo , android.os.Bundle bOptions , int userId ) { userId = mUserController.handleIncomingUser ( android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , userId , false , com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY , "startActivityInPackage" , null ) ; int ret = mActivityStarter.startActivities ( null , uid , callingPackage , intents , resolvedTypes , resultTo , bOptions , userId ) ; return ret ; }
public void testCompareNull ( ) throws java.lang.Exception { try { new java.text.RuleBasedCollator ( "< a" ) . compare ( null , null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public final int startActivitiesInPackage ( int uid , android.content.Intent [ ] intents , java.lang.String [ ] resolvedTypes , android.os.IBinder resultTo ) { final int callingUid = android.os.Binder.getCallingUid ( ) ; if ( ( callingUid != 0 ) && ( callingUid != ( java.lang.Process.myUid ( ) ) ) ) { throw new java.lang.SecurityException ( "startActivityInPackage only available to the system" ) ; } return mMainStack.startActivities ( null , uid , intents , resolvedTypes , resultTo ) ; }
public void canRemoveNetworkConfigInClientMode ( ) throws java.lang.Exception { boolean result ; when ( mWifiConfigManager.removeNetwork ( eq ( 0 ) , anyInt ( ) ) ) . thenReturn ( true ) ; addNetworkAndVerifySuccess ( ) ; mLooper.startAutoDispatch ( ) ; result = mWsm.syncRemoveNetwork ( mWsmAsyncChannel , 0 ) ; mLooper.stopAutoDispatch ( ) ; org.junit.Assert.assertTrue ( result ) ; }
public void onPageFinished ( com.android.browser.Tab tab ) { mCrashRecoveryHandler.backupState ( ) ; mUi.onTabDataChanged ( tab ) ; if ( ( mActivityPaused ) && ( pauseWebViewTimers ( tab ) ) ) { releaseWakeLock ( ) ; } if ( false ) { com.android.browser.Performance.onPageFinished ( tab.getUrl ( ) ) ; } com.android.browser.Performance.tracePageFinished ( ) ; }
public void onClick ( android.view.View view ) { com.android.apps.tag.record.RecordUtils.ClickInfo info = ( ( com.android.apps.tag.record.RecordUtils.ClickInfo ) ( view.getTag ( ) ) ) ; if ( requestPermissionIfNeeded ( info.activity , info.intent ) ) { return ; } try { info.activity.startActivity ( info.intent ) ; info.activity.finish ( ) ; } catch ( android.content.ActivityNotFoundException e ) { android.util.Log.e ( com.android.apps.tag.record.UriRecord.TAG , ( "Failed to launch activity for intent " + ( info.intent ) ) , e ) ; } }
static void deadCycleWithException ( int k ) { int dead = 0 ; for ( int i = 0 ; i < ( Main.a.length ) ; i ++ ) { Main.a [ i ] = ( Main.novec [ ( 2 * i ) ] ) + 4 ; dead += Main.a [ k ] ; } }
public void handleMessage ( int messageType , java.lang.Object message ) throws com.google.android.exoplayer.ExoPlaybackException { if ( messageType == ( MSG_SET_PLAYBACK_PARAMS ) ) { try { super . handleMessage ( messageType , message ) ; } catch ( java.lang.IllegalArgumentException e ) { if ( com.android.tv.tuner.exoplayer.ac3.Ac3MediaCodecTrackRenderer.isAudioTrackSetPlaybackParamsError ( e ) ) { notifyAudioTrackSetPlaybackParamsError ( e ) ; } } return ; } super . handleMessage ( messageType , message ) ; }
public void onShowCustomView ( android.view.View view , android.webkit.WebChromeClient.CustomViewCallback cb ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onShowCustomView" ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onShowCustomView" ) ; mWebChromeClient.onShowCustomView ( view , cb ) ; } } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onShowCustomView" ) ; } }
public void copy1DRangeFrom ( int off , int count , int [ ] d ) { validateIsInt32 ( ) ; copy1DRangeFromUnchecked ( off , count , d , Element.DataType.SIGNED_32 , d.length ) ; }
public android.net.http.SslCertificate getCertificate ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.net.http.SslCertificate ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.net.http.SslCertificate > ( ) { @ java.lang.Override public android.net.http.SslCertificate call ( ) { return getCertificate ( ) ; } } ) ; return ret ; } return mAwContents.getCertificate ( ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [ ] pkgs = intent.getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { if ( forceStopPackageLocked ( pkg , ( - 1 ) , false , false , false ) ) { setResultCode ( Activity.RESULT_OK ) ; return ; } } } }
public static java.lang.String getIndent ( org.eclipse.jface.text.IDocument document , org.w3c.dom.Node xmlNode ) { if ( xmlNode instanceof org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) { org.eclipse.wst.sse.core.internal.provisional.IndexedRegion region = ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( xmlNode ) ) ; int startOffset = region.getStartOffset ( ) ; return com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor.getIndentAtOffset ( document , startOffset ) ; } return "" ; }
public final java.lang.String getClassName ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Snapshot snapshot ) { com.android.tools.perflib.heap.ClassObj theClass ; if ( ( mType ) == ( RootType.SYSTEM_CLASS ) ) { theClass = snapshot.findClass ( mId ) ; } else { theClass = snapshot.findInstance ( mId ) . getClassObj ( ) ; } if ( theClass == null ) { return com.android.tools.perflib.heap.RootObj.UNDEFINED_CLASS_NAME ; } return theClass.mClassName ; }
public boolean onHoverEvent ( final android.view.MotionEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onHoverEvent ( event ) ; } } ) ; return ret ; } return mAwContents.onHoverEvent ( event ) ; }
public int beginConfigure ( ) { if ( android.hardware.camera2.legacy.CameraDeviceUserShim.DEBUG ) { android.util.Log.d ( android.hardware.camera2.legacy.CameraDeviceUserShim.TAG , "beginConfigure called." ) ; } if ( mLegacyDevice.isClosed ( ) ) { android.util.Log.e ( android.hardware.camera2.legacy.CameraDeviceUserShim.TAG , "Cannot begin configure, device has been closed." ) ; return - ( android.system.OsConstants.ENODEV ) ; } synchronized ( mConfigureLock ) { if ( mConfiguring ) { android.util.Log.e ( android.hardware.camera2.legacy.CameraDeviceUserShim.TAG , "Cannot begin configure, configuration change already in progress." ) ; return android.hardware.camera2.utils.CameraBinderDecorator.INVALID_OPERATION ; } mConfiguring = true ; } return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR ; }
java.util.Set < com.google.common.collect.Multiset.Entry < E > > createEntrySet ( ) { return com.google.common.collect.Sets.filter ( unfiltered.entrySet ( ) , new com.google.common.base.Predicate < com.google.common.collect.Multiset.Entry < E > > ( ) { @ java.lang.Override public boolean apply ( com.google.common.collect.Multiset.Entry < E > entry ) { return predicate.apply ( entry.getElement ( ) ) ; } } ) ; }
public void close ( ) { android.util.Log.d ( android.net.IpSecTransform.TAG , ( "Removing Transform with Id " + ( mResourceId ) ) ) ; if ( ( mResourceId ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { mCloseGuard.close ( ) ; return ; } try { android.net.IIpSecService svc = getIpSecService ( ) ; svc.deleteTransform ( mResourceId ) ; stopKeepalive ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowAsRuntimeException ( ) ; } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID ; mCloseGuard.close ( ) ; } }
private boolean hasFormattingPatternForNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { int countryCallingCode = number.getCountryCode ( ) ; java.lang.String phoneNumberRegion = getRegionCodeForCountryCode ( countryCallingCode ) ; com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = getMetadataForRegionOrCallingCode ( countryCallingCode , phoneNumberRegion ) ; if ( metadata == null ) { return false ; } java.lang.String nationalNumber = getNationalSignificantNumber ( number ) ; com.google.i18n.phonenumbers.Phonemetadata.NumberFormat formatRule = chooseFormattingPatternForNumber ( metadata.numberFormats ( ) , nationalNumber ) ; return formatRule != null ; }
protected boolean stop ( ) { try { unregisterReceiver ( mPbapBroadcastReceiver ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "Unable to unregister pbapclient receiver" , e ) ; } if ( ( mPbapClientStateMachine ) != null ) { mPbapClientStateMachine.doQuit ( ) ; } return true ; }
public void onSdkLoaded ( ) { com.android.sdklib.IAndroidTarget oldTarget = getRenderingTarget ( ) ; preRenderingTargetChangeCleanUp ( oldTarget ) ; computeSdkVersion ( ) ; com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigChooser.onSdkLoaded ( target ) ; changed ( ( ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration.CFG_FOLDER ) | ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration.CFG_TARGET ) ) ) ; } } }
public synchronized void onDisconnect ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "onDisconnect " + ( mCurrentCall ) ) ) ; if ( ( mHeadsetProfile ) != null ) { mHeadsetProfile.terminateCall ( mDevice , mCurrentCall ) ; mLocalDisconnect = true ; } else if ( ( mCurrentCall ) == null ) { android.util.Log.w ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , "Call disconnected but call handle not received." ) ; } }
public android.app.IActivityContainer createStackOnDisplay ( int displayId ) throws android.os.RemoteException { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "createStackOnDisplay()" ) ; synchronized ( this ) { final int stackId = mStackSupervisor.getNextStackId ( ) ; final com.android.server.am.ActivityStack stack = mStackSupervisor.createStackOnDisplay ( stackId , displayId , true ) ; if ( stack == null ) { return null ; } return stack.mActivityContainer ; } }
public void restrictedStateChanged ( int indicationType , int state ) { mRil.processIndication ( indicationType ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogvRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RESTRICTED_STATE_CHANGED , state ) ; if ( ( mRil.mRestrictedStateRegistrant ) != null ) { mRil.mRestrictedStateRegistrant.notifyRegistrant ( new android.os.AsyncResult ( null , state , null ) ) ; } }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
private static dalvik.system.DexFile loadDexFile ( java.io.File file , java.io.File optimizedDirectory , java.lang.ClassLoader loader , dalvik.system.DexPathList.Element [ ] elements ) throws java.io.IOException { if ( optimizedDirectory == null ) { return new dalvik.system.DexFile ( file , loader , elements ) ; } else { java.lang.String optimizedPath = dalvik.system.DexPathList.optimizedPathFor ( file , optimizedDirectory ) ; return dalvik.system.DexFile.loadDex ( file.getPath ( ) , optimizedPath , 0 , loader , elements ) ; } }
public void assertEventuallyTrue ( java.util.function.BooleanSupplier fn , long maxWaitingTimeMs ) { long start = android.os.SystemClock.elapsedRealtime ( ) ; while ( ( android.os.SystemClock.elapsedRealtime ( ) ) <= ( start + maxWaitingTimeMs ) ) { if ( fn.getAsBoolean ( ) ) { return ; } com.android.server.ConnectivityServiceTest.sleepFor ( 15 ) ; } assertTrue ( fn.getAsBoolean ( ) ) ; }
public void TestFixedDecimalSuperscript ( ) { com.ibm.icu.util.ULocale en = new com.ibm.icu.util.ULocale ( "en" ) ; com.ibm.icu.text.DecimalFormat decfmt = ( ( com.ibm.icu.text.DecimalFormat ) ( com.ibm.icu.text.NumberFormat.getInstance ( en ) ) ) ; java.text.AttributedCharacterIterator iterator = decfmt.formatToCharacterIterator ( 123456.0 ) ; com.ibm.icu.text.ScientificFormatHelper helper = com.ibm.icu.text.ScientificFormatHelper.getInstance ( decfmt.getDecimalFormatSymbols ( ) ) ; assertEquals ( "" , "123,456" , helper.toSuperscriptExponentDigits ( iterator ) ) ; }
private static boolean willWorkForMulticast ( java.net.NetworkInterface iface ) throws java.io.IOException { return ( ( ( iface.isUp ( ) ) && ( ! ( iface.isLoopback ( ) ) ) ) && ( iface.supportsMulticast ( ) ) ) && ( iface.getInetAddresses ( ) . hasMoreElements ( ) ) ; }
private static void assertDefaultPhoneAccountHandleEquals ( com.android.server.telecom.PhoneAccountRegistrar.DefaultPhoneAccountHandle a , com.android.server.telecom.PhoneAccountRegistrar.DefaultPhoneAccountHandle b ) { if ( a != b ) { if ( ( a != null ) && ( b != null ) ) { org.junit.Assert.assertEquals ( a.userHandle , b.userHandle ) ; com.android.server.telecom.tests.PhoneAccountRegistrarTest.assertPhoneAccountHandleEquals ( a.phoneAccountHandle , b.phoneAccountHandle ) ; } else { org.junit.Assert.fail ( ( ( ( "Default phone account handles are not equal: " + a ) + ", " ) + b ) ) ; } } }
public static com.android.jack.dx.rop.code.SourcePosition getSourcePosition ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode stmt ) { return com.android.jack.backend.dex.rop.RopHelper.getSourcePosition ( stmt.getSourceInfo ( ) ) ; }
public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance ( byte [ ] in ) throws java.security.cert.CertificateException { try { return ( ( org.apache.harmony.security.provider.cert.X509CertPathImpl ) ( org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode ( in ) ) ) ; } catch ( java.io.IOException e ) { throw new java.security.cert.CertificateException ( "Failed to decode CertPath" , e ) ; } }
protected void removeFile ( com.android.resources.ResourceType type , com.android.ide.common.resources.ResourceFile file ) { java.util.Map < java.lang.String , com.android.ide.common.resources.ResourceItem > map = mResourceMap.get ( type ) ; if ( map != null ) { java.util.Collection < com.android.ide.common.resources.ResourceItem > values = map.values ( ) ; for ( com.android.ide.common.resources.ResourceItem item : values ) { item.removeFile ( file ) ; } } }
public void testAesGcm96Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM , android.net.cts.IpSecManagerTest.AEAD_KEY , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , true ) ; }
public void onChange ( ) { if ( ( ( ( getActivity ( ) ) != null ) && ( isAdded ( ) ) ) && ( com.android.dialer.util.PermissionsUtil.hasContactsReadPermissions ( getContext ( ) ) ) ) { getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; } }
public void hasValueTesting ( ) { android.os.Bundle bundle = new android.os.Bundle ( ) ; android.os.Bundle value = new android.os.Bundle ( ) ; value.putString ( "hello" , "world" ) ; bundle.putBundle ( "key" , value ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( "world" ) ) . matches ( bundle ) ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( org.hamcrest.Matchers.equalTo ( "world" ) ) ) . matches ( bundle ) ) ; }
public void testParse ( ) throws java.lang.Exception { android.text.format.Time t = new android.text.format.Time ( android.text.format.Time.TIMEZONE_UTC ) ; t.parse ( "20061005T120000" ) ; android.text.format.Time expected = new android.text.format.Time ( android.text.format.Time.TIMEZONE_UTC ) ; android.text.format.cts.TimeTest.Fields.set ( expected , 2006 , 9 , 5 , 12 , 0 , 0 , ( - 1 ) , 0 , 0 , 0 ) ; android.text.format.cts.TimeTest.Fields.assertTimeEquals ( expected , t ) ; }
private static void validateManifestAttribute ( com.android.manifmerger.MergingReport.Builder mergingReport , com.android.manifmerger.XmlElement manifest , com.android.manifmerger.XmlDocument.Type fileType ) { org.w3c.dom.Attr attributeNode = manifest.getXml ( ) . getAttributeNode ( AndroidManifest.ATTRIBUTE_PACKAGE ) ; if ( ( attributeNode == null ) && ( fileType != ( XmlDocument.Type.OVERLAY ) ) ) { manifest.addMessage ( mergingReport , ( fileType == ( XmlDocument.Type.MAIN ) ? Severity.ERROR : Severity.WARNING ) , java.lang.String.format ( "Missing 'package' declaration in manifest at %1$s" , manifest.printPosition ( ) ) ) ; } }
public boolean fetchUuidsWithSdp ( ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( ( service == null ) || ( ! ( isBluetoothEnabled ( ) ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot fetchUuidsWithSdp" ) ; return false ; } try { return service.fetchRemoteUuids ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public void testAndroidStrings ( ) { assertEquals ( mAppTextView1.getText ( ) , "SUCCESS-APP" ) ; assertEquals ( mLib1TextView1.getText ( ) , "SUCCESS-LIB1" ) ; assertEquals ( mLib2TextView1.getText ( ) , "SUCCESS-LIB2" ) ; assertEquals ( mLib2bTextView1.getText ( ) , "SUCCESS-LIB2b" ) ; assertEquals ( mLibappTextView1.getText ( ) , "SUCCESS-LIBAPP" ) ; }
synchronized boolean unregisterApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp()" ) ; } if ( config == null ) { android.util.Log.w ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp: failed. The config in parameter should not be null" ) ; return false ; } if ( ( ( mAppConfig ) == null ) || ( ! ( config.equals ( mAppConfig ) ) ) ) { android.util.Log.w ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp: failed. The app configuration does not match the record" ) ; return false ; } return mHidDeviceNativeInterface.unregisterApp ( ) ; }
private static org.w3c.dom.Document checkDocument ( @ com.android.annotations.NonNull java.lang.String xml , boolean namespaceAware ) { try { return com.android.utils.XmlUtils.parseDocument ( xml , namespaceAware ) ; } catch ( org.xml.sax.SAXException sax ) { com.android.build.gradle.tasks.annotations.Extractor.warning ( sax.toString ( ) ) ; } catch ( java.lang.Exception e ) { } return null ; }
public void adjustLabel ( com.android.sdklib.internal.repository.sources.SdkSource source ) { if ( ( ( getLabel ( ) ) == null ) || ( getLabel ( ) . startsWith ( "http" ) ) ) { setLabel ( ( source == ( com.android.sdkuilib.internal.repository.core.PkgCategorySource.UNKNOWN_SOURCE ) ? "Local Packages" : source.toString ( ) ) ) ; } }
public void copyFromUnchecked ( java.lang.Object array ) { copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; }
public void testGetMaximumTimeToLock ( ) { long originalTimeout = mDevicePolicyManager.getMaximumTimeToLock ( mComponent ) ; mDevicePolicyManager.setMaximumTimeToLock ( mComponent , 3000 ) ; assertEquals ( 3000 , mDevicePolicyManager.getMaximumTimeToLock ( mComponent ) ) ; mDevicePolicyManager.setMaximumTimeToLock ( mComponent , 5000 ) ; assertEquals ( 5000 , mDevicePolicyManager.getMaximumTimeToLock ( mComponent ) ) ; mDevicePolicyManager.setMaximumTimeToLock ( mComponent , originalTimeout ) ; }
private static java.util.List < com.android.ide.eclipse.gltrace.state.transforms.IStateTransform > transformsForGlFrontFace ( com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage msg ) { int mode = msg.getArgs ( 0 ) . getIntValue ( 0 ) ; com.android.ide.eclipse.gltrace.state.transforms.IStateTransform transform = new com.android.ide.eclipse.gltrace.state.transforms.PropertyChangeTransform ( com.android.ide.eclipse.gltrace.state.transforms.GLPropertyAccessor.makeAccessor ( msg.getContextId ( ) , GLStateType.RASTERIZATION_STATE , GLStateType.FRONT_FACE ) , com.android.ide.eclipse.gltrace.GLEnum.valueOf ( mode ) ) ; return java.util.Collections.singletonList ( transform ) ; }
public synchronized int bindServer ( ) { java.net.InetSocketAddress serverAddress = getSyncServerAddress ( ) ; try { logWriter.println ( ( "[SYNC] Binding socket on: " + serverAddress ) ) ; serverSocket = new java.net.ServerSocket ( serverAddress.getPort ( ) , 0 , serverAddress.getAddress ( ) ) ; logWriter.println ( ( "[SYNC] Bound socket on: " + serverAddress ) ) ; return serverAddress.getPort ( ) ; } catch ( java.io.IOException e ) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException ( "[SYNC] Exception in binding for socket sync connection" , e ) ; } }
public void handleMessage ( android.os.Message msg ) { com.android.settings.deviceinfo.Status status = mStatus.get ( ) ; if ( status == null ) { return ; } switch ( msg.what ) { case com.android.settings.deviceinfo.Status.EVENT_SIGNAL_STRENGTH_CHANGED : status.updateSignalStrength ( ) ; break ; case com.android.settings.deviceinfo.Status.EVENT_SERVICE_STATE_CHANGED : android.telephony.ServiceState serviceState = status.mPhoneStateReceiver.getServiceState ( ) ; status.updateServiceState ( serviceState ) ; break ; case com.android.settings.deviceinfo.Status.EVENT_UPDATE_STATS : status.updateTimes ( ) ; sendEmptyMessageDelayed ( com.android.settings.deviceinfo.Status.EVENT_UPDATE_STATS , 1000 ) ; break ; case com.android.settings.deviceinfo.Status.EVENT_UPDATE_CONNECTIVITY : status.updateConnectivity ( ) ; break ; } }
public void onProfileServiceStateChanged ( com.android.bluetooth.btservice.ProfileService profile , int state ) { if ( ( state != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) && ( state != ( android.bluetooth.BluetoothAdapter.STATE_OFF ) ) ) { throw new java.lang.IllegalArgumentException ( android.bluetooth.BluetoothAdapter.nameForState ( state ) ) ; } android.os.Message m = mHandler.obtainMessage ( com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED ) ; m.obj = profile ; m.arg1 = state ; mHandler.sendMessage ( m ) ; }
public void dispose ( ) { if ( mDbg ) log ( ( "Disposing card type " + ( is3gpp ? "3gpp" : "3gpp2" ) ) ) ; mPhone.mCM.unregisterForIccStatusChanged ( mHandler ) ; mPhone.mCM.unregisterForOffOrNotAvailable ( mHandler ) ; mPhone.mCM.unregisterForOn ( mHandler ) ; mCatService.dispose ( ) ; mCdmaSSM.dispose ( mHandler ) ; mIccRecords.dispose ( ) ; mIccFileHandler.dispose ( ) ; }
public void dumpMemInfo ( java.io.FileDescriptor fd , android.os.Debug.MemoryInfo mem , boolean checkin , boolean dumpFullInfo , boolean dumpDalvik , java.lang.String [ ] args ) { java.io.FileOutputStream fout = new java.io.FileOutputStream ( fd ) ; java.io.PrintWriter pw = new com.android.internal.util.FastPrintWriter ( fout ) ; try { dumpMemInfo ( pw , mem , checkin , dumpFullInfo , dumpDalvik ) ; } finally { pw.flush ( ) ; } }
public void testFilterByTagRegex ( ) { com.android.ddmuilib.logcat.LogCatFilter filter = new com.android.ddmuilib.logcat.LogCatFilter ( "" , "tag.*" , "" , "" , "" , com.android.ddmlib.Log.LogLevel.VERBOSE ) ; com.android.ddmlib.logcat.LogCatMessage msg = new com.android.ddmlib.logcat.LogCatMessage ( com.android.ddmlib.Log.LogLevel.VERBOSE , "" , "" , "" , "tag123" , "" , "" ) ; assertEquals ( true , filter.matches ( msg ) ) ; msg = new com.android.ddmlib.logcat.LogCatMessage ( com.android.ddmlib.Log.LogLevel.VERBOSE , "" , "" , "" , "ta123" , "" , "" ) ; assertEquals ( false , filter.matches ( msg ) ) ; }
private com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder _addProjectResourceFolder ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository resources , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config , org.eclipse.core.resources.IFolder folder ) throws java.lang.Exception { java.lang.reflect.Method addMethod = com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository.class . getDeclaredMethod ( "add" , com.android.resources.ResourceFolderType.class , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.class , com.android.io.IAbstractFolder.class ) ; addMethod.setAccessible ( true ) ; com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder resFolder = ( ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder ) ( addMethod.invoke ( resources , ResourceFolderType.LAYOUT , config , new com.android.ide.eclipse.adt.io.IFolderWrapper ( folder ) ) ) ) ; return resFolder ; }
public void onResume ( ) { super . onResume ( ) ; if ( ( ( ! ( mTextMsg.responseNeeded ) ) && ( ( com.android.stk.StkApp.calculateDurationInMilis ( mTextMsg.duration ) ) == 0 ) ) && ( mTextMsg.userClear ) ) { com.android.internal.telephony.cat.CatLog.d ( this , "User should clear text..show message forever" ) ; return ; } startTimeOut ( mTextMsg.userClear ) ; }
private void updateCallCache ( com.android.incallui.call.DialerCall call ) { if ( call == null ) { currentVideoState = android.telecom.VideoProfile.STATE_AUDIO_ONLY ; currentCallState = com.android.incallui.call.state.DialerCallState.INVALID ; videoCall = null ; primaryCall = null ; } else { currentVideoState = call.getVideoState ( ) ; videoCall = call.getVideoCall ( ) ; currentCallState = call.getState ( ) ; primaryCall = call ; } }
private static java.lang.String getMapKey ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile resourceFile ) { com.android.io.IAbstractFile file = resourceFile.getFile ( ) ; java.lang.String name = file.getName ( ) ; java.lang.String folderName = file.getParentFolder ( ) . getName ( ) ; return com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder.getMapKey ( folderName , name ) ; }
protected void onDrawVerticalScrollBar ( android.graphics.Canvas canvas , android.graphics.drawable.Drawable scrollBar , int l , int t , int r , int b ) { scrollBar.setBounds ( l , ( t + ( getVisibleTitleHeight ( ) ) ) , r , b ) ; scrollBar.draw ( canvas ) ; }
private boolean isRequired ( ) { int first_api_level = java.lang.System.GetProperty ( "ro.product.first_api_level" ) ; if ( first_api_level && ( first_api_level < ( android.security.cts.EncryptionTest.min_api_level ) ) ) { return false ; } else { return ! ( hasLowRAM ( ) ) ; } }
public static org.bouncycastle.math.ec.ECPoint shamirsTrick ( org.bouncycastle.math.ec.ECPoint P , java.math.BigInteger k , org.bouncycastle.math.ec.ECPoint Q , java.math.BigInteger l ) { org.bouncycastle.math.ec.ECCurve cp = P.getCurve ( ) ; Q = org.bouncycastle.math.ec.ECAlgorithms.importPoint ( cp , Q ) ; return org.bouncycastle.math.ec.ECAlgorithms.validatePoint ( org.bouncycastle.math.ec.ECAlgorithms.implShamirsTrickJsf ( P , k , Q , l ) ) ; }
public void onDestroy ( ) { com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkAppService.LOG_TAG , "onDestroy()" ) ; if ( ( mStkCmdReceiver ) != null ) { unregisterReceiver ( mStkCmdReceiver ) ; mStkCmdReceiver = null ; } mPowerManager = null ; com.android.stk.StkAppService.sInstance = null ; waitForLooper ( ) ; mServiceLooper.quit ( ) ; }
private static boolean fromAndroidPlugin ( java.lang.StackTraceElement el ) { return el.getClassName ( ) . contains ( "android" ) ; }
public static java.lang.String toLanguageTag ( java.util.Locale locale ) { java.lang.String language = org.chromium.base.LocaleUtils.getUpdatedLanguageForChromium ( locale.getLanguage ( ) ) ; java.lang.String country = locale.getCountry ( ) ; if ( ( ( language.equals ( "no" ) ) && ( country.equals ( "NO" ) ) ) && ( locale.getVariant ( ) . equals ( "NY" ) ) ) { return "nn-NO" ; } return country.isEmpty ( ) ? language : ( language + "-" ) + country ; }
public void swipingDownHasNoEffectWhenAtStart ( ) { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.vertical_pager ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Position #0" ) ) ) ) . perform ( android.support.test.espresso.action.ViewActions.swipeDown ( ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Position #0" ) ) ) ) . perform ( android.support.test.espresso.action.ViewActions.swipeDown ( ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Position #0" ) ) ) ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( ( mClassName ) == null ? 0 : mClassName.hashCode ( ) ) ; result = ( prime * result ) + ( ( mDeviceName ) == null ? 0 : mDeviceName.hashCode ( ) ) ; result = ( prime * result ) + ( ( mTestName ) == null ? 0 : mTestName.hashCode ( ) ) ; return result ; }
public void TestClone ( ) { android.icu.text.RuleBasedBreakIterator rbbi = new android.icu.text.RuleBasedBreakIterator ( ".;" ) ; try { rbbi.setText ( ( ( java.text.CharacterIterator ) ( null ) ) ) ; if ( ( ( ( android.icu.text.RuleBasedBreakIterator ) ( rbbi.clone ( ) ) ) . getText ( ) ) != null ) errln ( ( "RuleBasedBreakIterator.clone() was suppose to return " + "the same object because fText is set to null." ) ) ; } catch ( java.lang.Exception e ) { errln ( ( "RuleBasedBreakIterator.clone() was not suppose to return " + "an exception." ) ) ; } }
public void startImmediately ( boolean clearStoredLineupId ) { startInternal ( true ) ; if ( mStarted ) { if ( clearStoredLineupId ) { if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , ( "Clear stored lineup id: " + ( mLineupId ) ) ) ; setLastLineupId ( null ) ; } if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , "Starting fetcher immediately" ) ; postFetchRequest ( true , 0 ) ; } }
public void withId_describeWithResourceLookup ( ) { android.view.View view = new android.view.View ( context ) ; org.hamcrest.Matcher < android.view.View > matcher = android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.testId1 ) ; matcher.matches ( view ) ; android.support.test.espresso.matcher.ViewMatchers.assertThat ( matcher.toString ( ) , org.hamcrest.Matchers.containsString ( "id/testId1" ) ) ; }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.lang.String host ) throws java.security.cert.CertificateException { return checkTrusted ( chain , authType , host , false ) ; }
public static int presentationFromCLIP ( int cli ) { switch ( cli ) { case 0 : return com.android.internal.telephony.PhoneConstants.PRESENTATION_ALLOWED ; case 1 : return com.android.internal.telephony.PhoneConstants.PRESENTATION_RESTRICTED ; case 2 : return com.android.internal.telephony.PhoneConstants.PRESENTATION_UNKNOWN ; default : android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CdmaCallWaitingNotification.LOG_TAG , ( "Unexpected presentation " + cli ) ) ; return com.android.internal.telephony.PhoneConstants.PRESENTATION_UNKNOWN ; } }
protected boolean check ( ) { boolean done = false ; final java.lang.String url2 = mWebServer.getAssetUrl ( TestHtmlConstants.HTML_URL2 ) ; if ( handler.hasCalledHandleMessage ( ) ) { if ( ( ( handler.mResultUrl ) != null ) && ( handler.mResultUrl.equals ( url2 ) ) ) { done = true ; } else { handler.reset ( ) ; android.os.Message newMsg = new android.os.Message ( ) ; newMsg.setTarget ( handler ) ; mOnUiThread.requestFocusNodeHref ( newMsg ) ; } } return done ; }
public void doInspections ( @ org.jetbrains.annotations.NotNull final com.intellij.analysis.AnalysisScope scope ) { if ( ! ( com.intellij.codeInspection.ex.GlobalInspectionContextUtil.canRunInspections ( myProject , true ) ) ) return ; cleanup ( ) ; com.intellij.openapi.application.ApplicationManager.getApplication ( ) . invokeLater ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { myCurrentScope = scope ; launchInspections ( scope ) ; } } , com.intellij.openapi.application.ApplicationManager.getApplication ( ) . getDisposed ( ) ) ; }
public void default_methods_with_lambdas_in_another_package ( ) throws java.lang.Exception { com.android.jack.java8.retrolambda.anotherpackage.jack.UsesLambdasInAnotherPackage obj = new com.android.jack.java8.retrolambda.anotherpackage.jack.UsesLambdasInAnotherPackage ( ) { } ; org.junit.Assert.assertEquals ( obj.stateless ( ) . call ( ) , "foo" ) ; org.junit.Assert.assertEquals ( obj.captureThis ( ) . call ( ) , "foo" ) ; org.junit.Assert.assertEquals ( "must not have declared methods" , obj.getClass ( ) . getDeclaredMethods ( ) . length , 0 ) ; }
public static com.android.sdklib.xml.ManifestData parse ( com.android.sdklib.io.IAbstractFile manifestFile , boolean gatherData , com.android.sdklib.xml.AndroidManifestParser.ManifestErrorHandler errorHandler ) throws com.android.sdklib.io.StreamException , java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { if ( manifestFile != null ) { javax.xml.parsers.SAXParser parser = com.android.sdklib.xml.AndroidManifestParser.sParserFactory.newSAXParser ( ) ; com.android.sdklib.xml.ManifestData data = null ; if ( gatherData ) { data = new com.android.sdklib.xml.ManifestData ( ) ; } com.android.sdklib.xml.AndroidManifestParser.ManifestHandler manifestHandler = new com.android.sdklib.xml.AndroidManifestParser.ManifestHandler ( manifestFile , data , errorHandler ) ; parser.parse ( new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) , manifestHandler ) ; return data ; } return null ; }
public android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord ( java.util.UUID uuid ) throws java.io.IOException { if ( ! ( isBluetoothEnabled ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "Bluetooth is not enabled" ) ; throw new java.io.IOException ( ) ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_RFCOMM , ( - 1 ) , true , true , this , ( - 1 ) , new android.os.ParcelUuid ( uuid ) ) ; }
private boolean mode_array ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s , int seed , int [ ] size ) { final byte [ ] inputArray = createInputArrayByte ( size [ 0 ] , seed ) ; final com.android.rs.test.Int2 javaResult = mode ( RS , inputArray ) ; final com.android.rs.test.Int2 rsResult = s.reduce_mode ( inputArray ) . get ( ) ; return result ( "mode" , new com.android.rs.test.UT_reduce.timing ( size [ 0 ] ) , javaResult , rsResult ) ; }
public java.nio.charset.Charset charsetForName ( java.lang.String charsetName ) { if ( ( "US-ASCII" . equalsIgnoreCase ( charsetName ) ) || ( "ASCII" . equalsIgnoreCase ( charsetName ) ) ) { return new tests.api.java.nio.charset.CharsetTest.MockCharset ( "US-ASCII" , new java.lang.String [ ] { "ASCII" } ) ; } return null ; }
public void testLambdaClassConstructor ( ) throws java.lang.Exception { java.lang.Class < ? > outerClass = libcore.java.lang.reflect.ParameterTest.class ; java.lang.Class < ? > innerClass = getLambdaClassWith1ParameterConstructor ( ) ; java.lang.reflect.Constructor < ? > constructor = innerClass.getDeclaredConstructor ( outerClass ) ; checkLambdaClassConstructor ( outerClass , constructor ) ; }
public void registerForImsiReady ( android.os.Handler h , int what , java.lang.Object obj ) { if ( mDestroyed.get ( ) ) { return ; } android.os.Registrant r = new android.os.Registrant ( h , what , obj ) ; mImsiReadyRegistrants.add ( r ) ; if ( ( getIMSI ( ) ) != null ) { r.notifyRegistrant ( new android.os.AsyncResult ( null , null , null ) ) ; } }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull final com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed ( ) ) ; putProperty ( fileType.buildPropertyName ( null ) , java.lang.String.valueOf ( true ) ) ; addFileType ( fileType ) ; return vfs.getRootInputOutputVDir ( ) . createOutputVFile ( fileType.buildFileVPath ( typePath ) ) ; }
private boolean mergeManifest ( org.w3c.dom.Document currentManifest , org.w3c.dom.Document fragment ) { com.android.manifmerger.ManifestMerger merger = new com.android.manifmerger.ManifestMerger ( com.android.manifmerger.MergerLog.wrapSdkLog ( com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ) ; return ( ( currentManifest != null ) && ( fragment != null ) ) && ( merger.process ( currentManifest , fragment ) ) ; }
private void loadInternalDataFromUserStore ( java.util.List < android.net.wifi.WifiConfiguration > configurations , java.util.Set < java.lang.String > deletedEphemeralSSIDs ) { for ( android.net.wifi.WifiConfiguration configuration : configurations ) { configuration.networkId = ( mNextNetworkId ) ++ ; if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Adding network from user store " + ( configuration.configKey ( ) ) ) ) ; } addMissingPskPassphraseQuotes ( configuration ) ; mConfiguredNetworks.put ( configuration ) ; } for ( java.lang.String ssid : deletedEphemeralSSIDs ) { mDeletedEphemeralSSIDs.add ( ssid ) ; } }
public long onRawContactInsert ( com.android.providers.contacts.TransactionContext txContext , android.database.sqlite.SQLiteDatabase db , long rawContactId ) { long contactId = insertContact ( db , rawContactId ) ; setContactId ( rawContactId , contactId ) ; mDbHelper.updateContactVisible ( txContext , contactId ) ; return contactId ; }
public android.telephony.ims.aidl.IImsRcsFeature getImsRcsFeatureAndListen ( int slotIndex , com.android.ims.internal.IImsServiceFeatureCallback callback ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getRcsFeatureAndListen ( slotIndex , callback ) ; } } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , ( "getImsRcsFeatureAndListen, RemoteException: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { android.bluetooth.BluetoothPbap.log ( ( "getConnectionState: device=" + device ) ) ; final android.bluetooth.IBluetoothPbap service = mService ; if ( service == null ) { android.util.Log.w ( android.bluetooth.BluetoothPbap.TAG , "Proxy not attached to service" ) ; return BluetoothProfile.STATE_DISCONNECTED ; } try { return service.getConnectionState ( device ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPbap.TAG , e.toString ( ) ) ; } return BluetoothProfile.STATE_DISCONNECTED ; }
public java.lang.String getPackageName ( ) { java.lang.String name = getName ( ) ; java.lang.String simpleName = getSimpleName ( ) ; if ( ( name.length ( ) ) > ( ( simpleName.length ( ) ) + 1 ) ) { return name.substring ( 0 , ( ( ( name.length ( ) ) - ( simpleName.length ( ) ) ) - 1 ) ) ; } return name ; }
public static com.android.volley.RequestQueue newRequestQueue ( android.content.Context context , com.android.volley.toolbox.HttpStack stack ) { if ( stack == null ) { return com.android.volley.toolbox.Volley.newRequestQueue ( context , ( ( com.android.volley.toolbox.BaseHttpStack ) ( null ) ) ) ; } return com.android.volley.toolbox.Volley.newRequestQueue ( context , new com.android.volley.toolbox.BasicNetwork ( stack ) ) ; }
boolean isAudioConnected ( android.bluetooth.BluetoothDevice device ) { synchronized ( this ) { if ( ( ( ( mActiveScoDevice ) != null ) && ( mActiveScoDevice.equals ( device ) ) ) && ( ( mAudioState ) != ( android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ) ) ) { return true ; } } return false ; }
public void visitComment ( com.intellij.psi.PsiComment comment ) { java.lang.String contents = comment.getText ( ) ; com.android.tools.lint.checks.CommentDetector.checkComment ( mContext , comment , contents , comment.getTextRange ( ) . getStartOffset ( ) , 0 , contents.length ( ) ) ; }
public void test6_anyInRange ( ) { int [ ] bits = new int [ 100 ] ; for ( int i = 0 ; i < ( bits.length ) ; i ++ ) { bits [ i ] = - 1 ; } for ( int i = 0 ; i < 50 ; i += 7 ) { assertTrue ( com.android.dx.util.BitsTest.label ( i ) , com.android.dx.util.Bits.anyInRange ( bits , i , ( 100 - i ) ) ) ; } }
private static com.google.common.collect.ImmutableList < java.lang.String > getExpansionIfKnown ( java.lang.reflect.Field optionField , com.google.devtools.common.options.Option annotation , @ javax.annotation.Nullable com.google.devtools.common.options.OptionsData optionsData ) { if ( optionsData != null ) { try { return optionsData.getEvaluatedExpansion ( optionField , null ) ; } catch ( com.google.devtools.common.options.ExpansionNeedsValueException e ) { return null ; } catch ( com.google.devtools.common.options.OptionsParsingException e ) { throw new java.lang.IllegalStateException ( "Error expanding void expansion function: " , e ) ; } } else { if ( com.google.devtools.common.options.OptionsData.usesExpansionFunction ( annotation ) ) { return null ; } else { return com.google.common.collect.ImmutableList.copyOf ( annotation.expansion ( ) ) ; } } }
void parseOptFormalTypeParameters ( ) { libcore.reflect.ListOfVariables typeParams = new libcore.reflect.ListOfVariables ( ) ; if ( ( symbol ) == '<' ) { scanSymbol ( ) ; typeParams.add ( parseFormalTypeParameter ( ) ) ; while ( ( ( symbol ) != '>' ) && ( ( symbol ) > 0 ) ) { typeParams.add ( parseFormalTypeParameter ( ) ) ; } expect ( '>' ) ; } this . formalTypeParameters = typeParams.getArray ( ) ; }
public void addHeaderView ( android.view.View v , java.lang.Object data , boolean isSelectable ) { if ( ( ( mAdapter ) != null ) && ( ! ( ( mAdapter ) instanceof android.widget.HeaderViewListAdapter ) ) ) { throw new java.lang.IllegalStateException ( "Cannot add header view to list -- setAdapter has already been called." ) ; } android.widget.ListView.FixedViewInfo info = new android.widget.ListView.FixedViewInfo ( ) ; info.view = v ; info.data = data ; info.isSelectable = isSelectable ; mHeaderViewInfos.add ( info ) ; if ( ( ( mAdapter ) != null ) && ( ( mDataSetObserver ) != null ) ) { mDataSetObserver.onChanged ( ) ; } }
synchronized boolean unplug ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "unplug(): device=" + device ) ) ; } return ( ( checkDevice ( device ) ) && ( checkCallingUid ( ) ) ) && ( mHidDeviceNativeInterface.unplug ( ) ) ; }
private void copyFileToZip ( @ javax.annotation.Nonnull java.io.File fileToCopy , @ javax.annotation.Nonnull java.lang.String entryName , @ javax.annotation.Nonnull java.util.zip.ZipOutputStream zos ) throws java.io.IOException { java.io.FileInputStream fis = null ; try { fis = new java.io.FileInputStream ( fileToCopy ) ; java.util.zip.ZipEntry sourceEntry = new java.util.zip.ZipEntry ( entryName ) ; zos.putNextEntry ( sourceEntry ) ; com.android.sched.util.stream.ByteStreamSucker sucker = new com.android.sched.util.stream.ByteStreamSucker ( fis , zos ) ; sucker.suck ( ) ; } finally { if ( fis != null ) { fis.close ( ) ; } } }
public int compareTo ( android.icu.text.DateTimePatternGenerator.SkeletonFields other ) { for ( int i = 0 ; i < ( android.icu.text.DateTimePatternGenerator.TYPE_LIMIT ) ; ++ i ) { int charDiff = ( chars [ i ] ) - ( other.chars [ i ] ) ; if ( charDiff != 0 ) { return charDiff ; } int lengthDiff = ( lengths [ i ] ) - ( other.lengths [ i ] ) ; if ( lengthDiff != 0 ) { return lengthDiff ; } } return 0 ; }
public boolean handlePinMmi ( java.lang.String dialString , java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.hPM" ) ; synchronized ( mLock ) { enforcePermissionOrPrivilegedDialer ( android.Manifest.permission.MODIFY_PHONE_STATE , callingPackage ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; boolean retval = false ; try { retval = getTelephonyManager ( ) . handlePinMmi ( dialString ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } return retval ; } } finally { android.telecom.Log.endSession ( ) ; } }
private void writeHistoryStatsFLOCK ( ) { java.io.FileOutputStream fos = null ; try { fos = mHistoryFile.startWrite ( ) ; org.xmlpull.v1.XmlSerializer out = new com.android.internal.util.FastXmlSerializer ( ) ; out.setOutput ( fos , "utf-8" ) ; out.startDocument ( null , true ) ; out.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; out.startTag ( null , "usage-history" ) ; synchronized ( mStatsLock ) { for ( int i = 0 ; i < ( mLastResumeTimes.size ( ) ) ; i ++ ) { out.startTag ( null , "pkg" ) ; out.attribute ( null , "name" , mLastResumeTimes.keyAt ( i ) ) ; android.util.ArrayMap < java.lang.String , java.lang.Long > comp = mLastResumeTimes.valueAt ( i ) ; for ( int j = 0 ; j < ( comp.size ( ) ) ; j ++ ) { out.startTag ( null , "comp" ) ; out.attribute ( null , "name" , comp.keyAt ( j ) ) ; out.attribute ( null , "lrt" , comp.valueAt ( j ) . toString ( ) ) ; out.endTag ( null , "comp" ) ; } out.endTag ( null , "pkg" ) ; } } out.endTag ( null , "usage-history" ) ; out.endDocument ( ) ; mHistoryFile.finishWrite ( fos ) ; } catch ( java.io.IOException e ) { android.util.Slog.w ( com.android.server.am.UsageStatsService.TAG , ( "Error writing history stats" + e ) ) ; if ( fos != null ) { mHistoryFile.failWrite ( fos ) ; } } }
void onUssdFinished ( java.lang.String ussdMessage , boolean isUssdRequest ) { if ( ( mState ) == ( State.PENDING ) ) { if ( android.text.TextUtils.isEmpty ( ussdMessage ) ) { mMessage = mContext.getText ( com.android.internal.R.string.mmiComplete ) ; android.telephony.Rlog.v ( com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG , ( "onUssdFinished: no message; using: " + ( mMessage ) ) ) ; } else { android.telephony.Rlog.v ( com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG , ( "onUssdFinished: message: " + ussdMessage ) ) ; mMessage = ussdMessage ; } mIsUssdRequest = isUssdRequest ; if ( ! isUssdRequest ) { mState = State.COMPLETE ; } mPhone.onMMIDone ( this ) ; } }
public void testAesGcm96Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM , android.net.cts.IpSecManagerTest.AEAD_KEY , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , true ) ; }
private static com.android.jack.dx.rop.type.Type putIntern ( com.android.jack.dx.rop.type.Type type ) { synchronized ( com.android.jack.dx.rop.type.Type.internTable ) { java.lang.String descriptor = type.getDescriptor ( ) ; com.android.jack.dx.rop.type.Type already = com.android.jack.dx.rop.type.Type.internTable.get ( descriptor ) ; if ( already != null ) { return already ; } com.android.jack.dx.rop.type.Type.internTable.put ( descriptor , type ) ; return type ; } }
private java.lang.StringBuffer subformat ( java.lang.String pluralCount , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr , int maxIntDig ) { if ( ( style ) == ( NumberFormat.PLURALCURRENCYSTYLE ) ) { java.lang.String currencyPluralPattern = currencyPluralInfo.getCurrencyPluralPattern ( pluralCount ) ; if ( ( formatPattern.equals ( currencyPluralPattern ) ) == false ) { applyPatternWithoutExpandAffix ( currencyPluralPattern , false ) ; } } expandAffixAdjustWidth ( pluralCount ) ; return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr , maxIntDig ) ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_math_agree s = new com.android.rs.test.ScriptC_math_agree ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeValues ( s ) ; s.invoke_math_agree_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
private java.io.File createFile ( byte [ ] contents ) throws java.io.IOException { java.io.File file = java.io.File.createTempFile ( getClass ( ) . getSimpleName ( ) , ".txt" ) ; try ( java.io.FileOutputStream fos = new java.io.FileOutputStream ( file ) ) { fos.write ( contents ) ; } return file ; }
public boolean enable ( ) { if ( isEnabled ( ) ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enable(): BT already enabled!" ) ; return true ; } try { return mManagerService.enable ( android.app.ActivityThread.currentPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
private void selectTrack ( int type , android.media.tv.TvTrackInfo track , int trackIndex ) { mTvView.selectTrack ( type , ( track == null ? null : track.getId ( ) ) ) ; if ( type == ( android.media.tv.TvTrackInfo.TYPE_AUDIO ) ) { mTvOptionsManager.onMultiAudioChanged ( ( track == null ? null : com.android.tv.util.Utils.getMultiAudioString ( this , track , false ) ) ) ; } else if ( type == ( android.media.tv.TvTrackInfo.TYPE_SUBTITLE ) ) { mTvOptionsManager.onClosedCaptionsChanged ( track , trackIndex ) ; } }
public java.util.List < com.google.currysrc.api.transform.TransformRule > getTransformRules ( java.io.File ignored ) { return transformRules ; }
public void pcoData ( int indicationType , android.hardware.radio.V1_0.PcoDataInfo pco ) { mRil.processIndication ( indicationType ) ; android.telephony.PcoData response = new android.telephony.PcoData ( pco.cid , pco.bearerProto , pco.pcoId , com.android.internal.telephony.RIL.arrayListToPrimitiveArray ( pco.contents ) ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_PCO_DATA , response ) ; mRil.mPcoDataRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
public int hashCode ( ) { int result = mBuildConfigLines.hashCode ( ) ; result = ( 31 * result ) + ( mProguardFiles.hashCode ( ) ) ; result = ( 31 * result ) + ( mConsumerProguardFiles.hashCode ( ) ) ; return result ; }
private void loadViewRecursive ( com.android.hierarchyviewerlib.models.ViewNode viewNode ) { com.android.hierarchyviewerlib.device.IHvDevice hvDevice = getHvDevice ( viewNode.window.getDevice ( ) ) ; org.eclipse.swt.graphics.Image image = hvDevice.loadCapture ( viewNode.window , viewNode ) ; if ( image == null ) { return ; } viewNode.image = image ; final int N = viewNode.children.size ( ) ; for ( int i = 0 ; i < N ; i ++ ) { loadViewRecursive ( viewNode.children.get ( i ) ) ; } }
public < T extends com.android.sched.marker.Marker > T getMarker ( @ javax.annotation.Nonnull java.lang.Class < T > cls ) { synchronized ( lock ) { if ( ( markers ) == null ) { return null ; } return ( ( T ) ( markers.get ( cls ) ) ) ; } }
private int findRopRegForLocal ( int startReg , int category ) { com.android.dx.ssa.back.FirstFitLocalCombiningAllocator.Alignment alignment = getAlignment ( category ) ; int reg = alignment.nextClearBit ( usedRopRegs , startReg ) ; while ( true ) { int i = 1 ; while ( ( i < category ) && ( ! ( usedRopRegs.get ( ( reg + i ) ) ) ) ) { i ++ ; } if ( i == category ) { return reg ; } reg = alignment.nextClearBit ( usedRopRegs , ( reg + i ) ) ; } }
public void testIsReadOnly ( ) { assertFalse ( mDatabase.isReadOnly ( ) ) ; android.database.sqlite.SQLiteDatabase database = null ; try { database = android.database.sqlite.SQLiteDatabase.openDatabase ( mDatabaseFilePath , null , SQLiteDatabase.OPEN_READONLY ) ; assertTrue ( database.isReadOnly ( ) ) ; } finally { if ( database != null ) { database.close ( ) ; } } }
synchronized boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( "sendReport(): device=" + device ) + " id=" ) + id ) ) ; } return ( ( checkDevice ( device ) ) && ( checkCallingUid ( ) ) ) && ( mHidDeviceNativeInterface.sendReport ( id , data ) ) ; }
public boolean matchesMccMnc ( java.lang.String mccMnc ) { if ( mccMnc == null ) { return false ; } if ( ( mccMnc.length ( ) ) != ( com.android.server.wifi.IMSIParameter.MCC_MNC_LENGTH ) ) { return false ; } int checkLength = com.android.server.wifi.IMSIParameter.MCC_MNC_LENGTH ; if ( ( mPrefix ) && ( ( mImsi.length ( ) ) < ( com.android.server.wifi.IMSIParameter.MCC_MNC_LENGTH ) ) ) { checkLength = mImsi.length ( ) ; } return mImsi.regionMatches ( false , 0 , mccMnc , 0 , checkLength ) ; }
public boolean getTxPktFates ( com.android.server.wifi.WifiNative.TxFateReport [ ] reportBufs ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getTxPktFates ( reportBufs ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { int res = com.android.server.wifi.WifiNative.getTxPktFatesNative ( com.android.server.wifi.WifiNative.sWlan0Index , reportBufs ) ; if ( res != ( com.android.server.wifi.WifiNative.WIFI_SUCCESS ) ) { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , ( "getTxPktFatesNative returned " + res ) ) ; return false ; } else { return true ; } } else { return false ; } } } }
public boolean iccCloseLogicalChannel ( int subId , int channel ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccCloseLogicalChannel ( subId , channel ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return false ; }
public int getJayceCount ( ) throws com.android.jack.library.LibraryIOException { int size = 0 ; com.android.jack.library.InputJackLibrary compilerStateLib = null ; try { compilerStateLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir ( compilerStateFolder ) ; java.util.Iterator < com.android.sched.vfs.InputVFile > jayceIter = compilerStateLib.iterator ( FileType.JAYCE ) ; while ( jayceIter.hasNext ( ) ) { size ++ ; jayceIter.next ( ) ; } } finally { if ( compilerStateLib != null ) { compilerStateLib.close ( ) ; } } return size ; }
public java.lang.String iccTransmitApduBasicChannel ( int subId , int cla , int instruction , int p1 , int p2 , int p3 , java.lang.String data ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccTransmitApduBasicChannel ( subId , getOpPackageName ( ) , cla , instruction , p1 , p2 , p3 , data ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return "" ; }
public void registerAndUnregisterNeverIdling ( ) throws java.lang.Exception { android.support.test.espresso.IdlingResource r1 = new android.support.test.espresso.base.OnDemandIdlingResource ( "r1" ) ; registry.registerResources ( com.google.common.collect.Lists.newArrayList ( r1 ) ) ; java.util.concurrent.FutureTask < java.lang.Boolean > resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; org.junit.Assert.assertFalse ( resourcesIdle.get ( ) ) ; registry.unregisterResources ( com.google.common.collect.Lists.newArrayList ( r1 ) ) ; resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; junit.framework.Assert.assertTrue ( resourcesIdle.get ( ) ) ; }
public android.telephony.UiccSlotInfo [ ] getUiccSlotsInfo ( ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony == null ) { return null ; } return telephony.getUiccSlotsInfo ( ) ; } catch ( android.os.RemoteException e ) { return null ; } }
public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter , @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version ) { assert ( ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_PLATFORMS ) ) || ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_SAMPLES ) ) ) || ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_SOURCES ) ) ; for ( com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos ( filter ) ) { com.android.sdklib.repository.descriptors.IPkgDesc d = pkg.getDesc ( ) ; if ( ( d.hasAndroidVersion ( ) ) && ( d.getAndroidVersion ( ) . equals ( version ) ) ) { return pkg ; } } return null ; }
public void onLoadResource ( java.lang.String url ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onLoadResource" ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , ( "onLoadResource=" + url ) ) ; mWebViewClient.onLoadResource ( mWebView , url ) ; } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onLoadResource" ) ; } }
public void copy1DRangeFrom ( int off , int count , byte [ ] d ) { validateIsInt8 ( ) ; copy1DRangeFromUnchecked ( off , count , d , Element.DataType.SIGNED_8 , d.length ) ; }
public final boolean equals ( @ javax.annotation.Nullable java.lang.Object object ) { if ( object instanceof com.google.common.hash.HashCode ) { com.google.common.hash.HashCode that = ( ( com.google.common.hash.HashCode ) ( object ) ) ; return ( ( bits ( ) ) == ( that.bits ( ) ) ) && ( equalsSameBits ( that ) ) ; } return false ; }
private void sendUuidIntent ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.RemoteDevices.DeviceProperties prop = getDeviceProperties ( device ) ; android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_UUID ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; intent.putExtra ( BluetoothDevice.EXTRA_UUID , ( prop == null ? null : prop.mUuids ) ) ; com.android.bluetooth.btservice.RemoteDevices.sAdapterService.sendBroadcast ( intent , AdapterService.BLUETOOTH_ADMIN_PERM ) ; com.android.bluetooth.btservice.RemoteDevices.sSdpTracker.remove ( device ) ; }
public static void sort ( short [ ] a , int fromIndex , int toIndex ) { java.util.Arrays.rangeCheck ( a.length , fromIndex , toIndex ) ; java.util.DualPivotQuicksort.sort ( a , fromIndex , ( toIndex - 1 ) , null , 0 , 0 ) ; }
public void testPackageOverridePackageFromFlavorWithSuffix2 ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilderTest.AndroidBuilderMock ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; mFlavor.getProductFlavor ( ) . setPackageName ( "foo.bar" ) ; mDebug.getBuildType ( ) . setPackageNameSuffix ( "fortytwo" ) ; builder.setBuildVariant ( mMain , mDebug ) ; builder.addProductFlavor ( mFlavor ) ; assertEquals ( "foo.bar.fortytwo" , builder.getPackageOverride ( "" ) ) ; }
void doTabChanged ( java.lang.String tabId ) { final int slotId = java.lang.Integer.parseInt ( tabId ) ; mSir = mSelectableSubInfos.get ( slotId ) ; updatePhoneInfos ( ) ; updatePreference ( true ) ; mTelephonyManager.listen ( mPhoneStateListener , ( ( ( android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE ) | ( android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS ) ) | ( android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE ) ) ) ; updateDataState ( ) ; updateNetworkType ( ) ; }
public void test_zh_CN ( ) throws java.lang.Exception { libcore.icu.ImmutableIndex zh_CN = libcore.icu.AlphabeticIndexTest.createIndex ( new java.util.Locale ( "zh" , "CN" ) ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "贾" , "J" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "沈" , "C" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "瀋" , "S" ) ; }
public boolean handlePinMmi ( java.lang.String dialString ) { com.android.internal.telephony.cdma.CdmaMmiCode mmi = com.android.internal.telephony.cdma.CdmaMmiCode.newFromDialString ( dialString , this ) ; if ( mmi == null ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Mmi is NULL!" ) ; return false ; } else if ( mmi.isPukCommand ( ) ) { mPendingMmis.add ( mmi ) ; mMmiRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , mmi , null ) ) ; mmi.processCode ( ) ; return true ; } android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Unrecognized mmi!" ) ; return false ; }
public android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings ( int subId ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getActiveVisualVoicemailSmsFilterSettings ( subId ) ; } } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public java.lang.String iccTransmitApduBasicChannel ( int subId , int cla , int instruction , int p1 , int p2 , int p3 , java.lang.String data ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccTransmitApduBasicChannel ( subId , getOpPackageName ( ) , cla , instruction , p1 , p2 , p3 , data ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return "" ; }
void clientSetPreferredPhy ( int clientIf , java.lang.String address , int txPhy , int rxPhy , int phyOptions ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; java.lang.Integer connId = mClientMap.connIdByAddress ( clientIf , address ) ; if ( connId == null ) { android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "clientSetPreferredPhy() - no connection to " + address ) ) ; return ; } if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "clientSetPreferredPhy() - address=" + address ) + ", connId=" ) + connId ) ) ; gattClientSetPreferredPhyNative ( clientIf , connId , txPhy , rxPhy , phyOptions ) ; }
private int getLteEarfcn ( android.telephony.CellIdentity cellIdentity ) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARFCN ; if ( cellIdentity != null ) { switch ( cellIdentity.getType ( ) ) { case android.hardware.radio.V1_0.CellInfoType.LTE : { lteEarfcn = ( ( android.telephony.CellIdentityLte ) ( cellIdentity ) ) . getEarfcn ( ) ; break ; } default : { break ; } } } return lteEarfcn ; }
public void copyFrom ( short [ ] d ) { validateIsInt16 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_16 , d.length ) ; }
protected com.android.jack.library.OutputJackLibrary getOutputJackLibraryFromVfs ( ) { com.android.sched.vfs.VFS vfs ; com.android.sched.vfs.Container containerType = com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_CONTAINER_TYPE ) ; if ( containerType == ( com.android.sched.vfs.Container.DIR ) ) { vfs = com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_DIR ) ; } else { vfs = com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_ZIP ) ; } return com.android.jack.library.JackLibraryFactory.getOutputLibrary ( vfs , com.android.jack.Jack.getEmitterId ( ) , com.android.jack.Jack.getVersionString ( ) ) ; }
static < T > T removeFirstMatching ( java.lang.Iterable < T > removeFrom , com.google.common.base.Predicate < ? super T > predicate ) { com.google.common.base.Preconditions.checkNotNull ( predicate ) ; java.util.Iterator < T > iterator = removeFrom.iterator ( ) ; while ( iterator.hasNext ( ) ) { T next = iterator.next ( ) ; if ( predicate.apply ( next ) ) { iterator.remove ( ) ; return next ; } } return null ; }
protected com.android.tools.lint.checks.TestConfiguration getConfiguration ( com.android.tools.lint.client.api.LintClient client , com.android.tools.lint.detector.api.Project project ) { return new com.android.tools.lint.checks.TestConfiguration ( client , project , null ) { @ java.lang.Override public boolean isEnabled ( com.android.tools.lint.detector.api.Issue issue ) { return ( super . isEnabled ( issue ) ) && ( mEnabled.contains ( issue ) ) ; } } ; }
private void getTotalNumOfItemsRequestFromNative ( byte [ ] address , byte scope ) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler ; if ( handler == null ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , "getTotalNumOfItemsRequestFromNative: mHandler is already null" ) ; return ; } android.os.Bundle data = new android.os.Bundle ( ) ; android.os.Message msg = handler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_TOTAL_NUM_OF_ITEMS ) ; msg.arg1 = scope ; msg.obj = address ; handler.sendMessage ( msg ) ; }
private com.android.sched.util.log.EventType getOrCreateDynamicEventType ( @ javax.annotation.Nonnull java.lang.String name ) { synchronized ( dynalicEventByName ) { com.android.sched.util.log.tracer.DynamicEventType type = dynalicEventByName.get ( name ) ; if ( type == null ) { type = new com.android.sched.util.log.tracer.DynamicEventType ( name ) ; dynalicEventByName.put ( name , type ) ; } return type ; } }
public final byte byte_literal ( ) throws org.jf.smali.RecognitionException { byte value = 0 ; org.antlr.runtime.tree.CommonTree BYTE_LITERAL212 = null ; try { { BYTE_LITERAL212 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.BYTE_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_BYTE_LITERAL_in_byte_literal3540 ) ) ) ; value = org.jf.smali.LiteralTools.parseByte ( ( BYTE_LITERAL212 != null ? BYTE_LITERAL212.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
protected void finalize ( ) { finalizerWait.countDown ( ) ; java.lang.System.out.println ( "Finalizer started and spinning..." ) ; long start ; long end ; start = java.lang.System.nanoTime ( ) ; Main.snooze ( 2000 ) ; end = java.lang.System.nanoTime ( ) ; java.lang.System.out.println ( "Finalizer done spinning." ) ; java.lang.System.out.println ( "Finalizer sleeping forever now." ) ; while ( true ) { Main.snooze ( 10000 ) ; } }
public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newFirstIndex , int newSecondIndex ) { assert ( getSecondIndexType ( ) ) == ( com.android.jack.dx.io.IndexType.NONE ) ; return new com.android.jack.dx.io.instructions.FourRegisterDecodedInstruction ( getFormat ( ) , getOpcode ( ) , newFirstIndex , getFirstIndexType ( ) , getTarget ( ) , getLiteral ( ) , a , b , c , d ) ; }
private void initLocalZeroPaddingNumberFormat ( ) { if ( ( numberFormat ) instanceof com.ibm.icu.text.DecimalFormat ) { decDigits = ( ( com.ibm.icu.text.DecimalFormat ) ( numberFormat ) ) . getDecimalFormatSymbols ( ) . getDigits ( ) ; useLocalZeroPaddingNumberFormat = true ; } else if ( ( numberFormat ) instanceof com.ibm.icu.impl.DateNumberFormat ) { decDigits = ( ( com.ibm.icu.impl.DateNumberFormat ) ( numberFormat ) ) . getDigits ( ) ; useLocalZeroPaddingNumberFormat = true ; } else { useLocalZeroPaddingNumberFormat = false ; } if ( useLocalZeroPaddingNumberFormat ) { decimalBuf = new char [ com.ibm.icu.text.SimpleDateFormat.DECIMAL_BUF_SIZE ] ; } }
public void write ( int c ) { }
public void onInterfaceDeleted ( java.lang.String interfaceName ) { if ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.TAG , ( "onInterfaceDeleted: interfaceName=" + interfaceName ) ) ; if ( ! ( mInterfaces.contains ( interfaceName ) ) ) { android.util.Log.w ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.TAG , ( "onInterfaceDeleted: interface not on list -- " + interfaceName ) ) ; } mInterfaces.remove ( interfaceName ) ; }
public boolean needsUnlockedKeyStore ( ) { for ( android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks ( ) ) { if ( com.android.server.wifi.WifiConfigurationUtil.isConfigForEapNetwork ( config ) ) { if ( mWifiKeyStore.needsSoftwareBackedKeyStore ( config.enterpriseConfig ) ) { return true ; } } } return false ; }
public void addActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream , int mode ) { if ( ( findDownstream ( downstream ) ) == null ) { if ( mActiveDownstreams.offer ( new com.android.server.connectivity.tethering.IPv6TetheringCoordinator.Downstream ( downstream , mode , mNextSubnetId ) ) ) { mNextSubnetId = ( ( short ) ( java.lang.Math.max ( 0 , ( ( mNextSubnetId ) + 1 ) ) ) ) ; } updateIPv6TetheringInterfaces ( ) ; } }
public void callSessionRemoveParticipantsRequestFailed ( android.telephony.ims.ImsCallSession session , android.telephony.ims.ImsReasonInfo reasonInfo ) { loge ( ( "callSessionRemoveParticipantsRequestFailed :: reasonInfo=" + reasonInfo ) ) ; if ( isTransientConferenceSession ( session ) ) { logi ( ( ( "callSessionRemoveParticipantsRequestFailed :: not supported for " + "conference session=" ) + session ) ) ; return ; } com.android.ims.ImsCall.Listener listener ; synchronized ( this ) { listener = mListener ; } if ( listener != null ) { try { listener.onCallRemoveParticipantsRequestFailed ( this , reasonInfo ) ; } catch ( java.lang.Throwable t ) { loge ( "callSessionRemoveParticipantsRequestFailed :: " , t ) ; } } }
public void testJustInfoAndWarning ( ) { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder ( mLoggerMock ) . addMessage ( mSourceLocation , 0 , 0 , Severity.INFO , "merging info" ) . addMessage ( mSourceLocation , 0 , 0 , Severity.WARNING , "Something weird happened" ) . build ( ) ; assertEquals ( MergingReport.Result.WARNING , mergingReport.getResult ( ) ) ; }
public void getImsRegistrationState ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_IMS_REGISTRATION_STATE , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) { riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; } send ( rr ) ; }
public void testAesGcm128Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM , android.net.cts.IpSecManagerTest.AEAD_KEY , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , true ) ; }
public void test_JarFile_Modified_Manifest_MainAttributes ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Modified_Manifest_MainAttributes.jar" ; java.io.File file = tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; try ( java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( file , true ) ) { java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; try { jarFile.getInputStream ( zipEntry ) ; fail ( "SecurityException expected" ) ; } catch ( java.lang.SecurityException e ) { } } } }
private void generateTestManifest ( java.lang.String outManifestLocation ) { com.android.builder.VariantConfiguration testedConfig = mVariant.getTestedConfig ( ) ; com.android.builder.TestManifestGenerator generator = new com.android.builder.TestManifestGenerator ( outManifestLocation , mVariant.getPackageName ( ) , testedConfig.getMinSdkVersion ( ) , mVariant.getTestedPackageName ( ) , mVariant.getInstrumentationRunner ( ) ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public boolean enable ( ) { if ( ( isEnabled ( ) ) == true ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enable(): BT is already enabled..!" ) ; return true ; } try { return mManagerService.enable ( android.app.ActivityThread.currentPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public static java.math.MathContext getMathContextOr34Digits ( com.ibm.icu.impl.number.Rounder.IBasicRoundingProperties properties ) { java.math.MathContext mathContext = properties.getMathContext ( ) ; if ( mathContext == null ) { java.math.RoundingMode roundingMode = properties.getRoundingMode ( ) ; if ( roundingMode == null ) roundingMode = java.math.RoundingMode.HALF_EVEN ; mathContext = com.ibm.icu.impl.number.RoundingUtils.MATH_CONTEXT_BY_ROUNDING_MODE_34_DIGITS [ roundingMode.ordinal ( ) ] ; } return mathContext ; }
public java.net.Socket createSocket ( java.lang.String host , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { com.android.org.conscrypt.OpenSSLSocketImpl s = ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( host , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setAlpnProtocols ( mAlpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public org.eclipse.swt.widgets.Composite createControl ( org.eclipse.swt.widgets.Composite composite ) { org.eclipse.swt.widgets.Group workingSetGroup = new org.eclipse.swt.widgets.Group ( composite , org.eclipse.swt.SWT.NONE ) ; workingSetGroup.setFont ( composite.getFont ( ) ) ; workingSetGroup.setText ( NewWizardMessages.NewJavaProjectWizardPageOne_WorkingSets_group ) ; workingSetGroup.setLayout ( new org.eclipse.swt.layout.GridLayout ( 1 , false ) ) ; fWorkingSetBlock.createContent ( workingSetGroup ) ; mEnableButton = findCheckbox ( workingSetGroup ) ; return workingSetGroup ; }
private void deleteDownload ( int arrayPos ) { com.android.providers.downloads.DownloadInfo info = ( ( com.android.providers.downloads.DownloadInfo ) ( mDownloads.get ( arrayPos ) ) ) ; if ( ( info.mStatus ) == ( android.provider.Downloads.STATUS_RUNNING ) ) { info.mStatus = android.provider.Downloads.STATUS_CANCELED ; } else if ( ( ( info.mDestination ) != ( android.provider.Downloads.DESTINATION_EXTERNAL ) ) && ( ( info.mFileName ) != null ) ) { new java.io.File ( info.mFileName ) . delete ( ) ; } mNotifier.mNotificationMgr.cancel ( info.mId ) ; mDownloads.remove ( arrayPos ) ; }
boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidHostService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidHostService.TAG , ( "disconnect: " + ( device.getAddress ( ) ) ) ) ; enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidHostService.MESSAGE_DISCONNECT , device ) ; mHandler.sendMessage ( msg ) ; return true ; }
private void cachePackageCodeLocation ( java.lang.String packageName , java.lang.String baseCodePath , java.lang.String [ ] splitCodePaths , java.lang.String [ ] dataDirs , int userId ) { synchronized ( mPackageCodeLocationsCache ) { com.android.server.pm.dex.DexManager.PackageCodeLocations pcl = com.android.server.pm.dex.DexManager.putIfAbsent ( mPackageCodeLocationsCache , packageName , new com.android.server.pm.dex.DexManager.PackageCodeLocations ( packageName , baseCodePath , splitCodePaths ) ) ; pcl.updateCodeLocation ( baseCodePath , splitCodePaths ) ; if ( dataDirs != null ) { for ( java.lang.String dataDir : dataDirs ) { if ( dataDir != null ) { pcl.mergeAppDataDirs ( dataDir , userId ) ; } } } } }
public boolean waitFor ( com.google.common.util.concurrent.Monitor.Guard guard , long time , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException { long timeoutNanos = unit.toNanos ( time ) ; if ( ! ( ( ( guard.monitor ) == ( this ) ) & ( lock.isHeldByCurrentThread ( ) ) ) ) { throw new java.lang.IllegalMonitorStateException ( ) ; } return ( guard.isSatisfied ( ) ) || ( awaitNanos ( guard , timeoutNanos , true ) ) ; }
public static void recordBooleanHistogram ( java.lang.String name , boolean sample ) { if ( org.chromium.base.metrics.RecordHistogram.sIsDisabledForTests ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordBooleanHistogram ( name , key , sample ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
public boolean disableDataConnectivity ( ) { enforceModifyPermission ( ) ; int subId = mSubscriptionController.getDefaultDataSubId ( ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { phone.setUserDataEnabled ( false ) ; return true ; } else { return false ; } }
public void testLibMinify ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( regularDir , "libMinify" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_OUTPUTS ) ) + "/mapping/release" ) ) ; runTasksOn ( project , BasePlugin.GRADLE_TEST_VERSION , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int obfuscatedInt -> a" } ) ; }
public static java.lang.String allToString ( @ android.security.KeyStoreKeyConstraints.DigestEnum int digests ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( "[" ) ; boolean firstValue = true ; for ( @ android.security.KeyStoreKeyConstraints.DigestEnum int digest : android.security.KeyStoreKeyConstraints.getSetFlags ( digests ) ) { if ( firstValue ) { firstValue = false ; } else { result.append ( ", " ) ; } result.append ( android.security.KeyStoreKeyConstraints.Digest.toString ( digest ) ) ; } result.append ( ']' ) ; return result.toString ( ) ; }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy3DRangeFrom" ) ; copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private long intv ( ) throws java.io.IOException { long uv = uintv ( ) ; long v = uv > > > 1 ; if ( ( uv & 1 ) != 0 ) { v = ~ v ; } return v ; }
private void assertHasWireData ( com.google.protobuf.nano.MessageNano message , boolean expected ) { byte [ ] bytes = com.google.protobuf.nano.MessageNano.toByteArray ( message ) ; int wireLength = bytes.length ; if ( expected ) { assertFalse ( ( wireLength == 0 ) ) ; } else { if ( wireLength != 0 ) { fail ( ( ( ( "Expected no wire data for message \n" + message ) + "\nBut got:\n" ) + ( com.google.protobuf.NanoTest.hexDump ( bytes ) ) ) ) ; } } }
public void run ( ) { switch ( mID ) { default : outArray [ 0 ] = mID ; outArray [ 1 ] = mData [ 0 ] ; outArray [ 2 ] = mData [ 1 ] ; outArray [ 3 ] = mData [ 2 ] ; try { android.renderscript.cts.SendToClient.mSync.release ( ) ; } catch ( java.lang.Exception e ) { } return ; } }
public void onEventReceived ( com.googlecode.android_scripting.event.Event event ) { if ( event.getName ( ) . equals ( eventName ) ) { synchronized ( futureEvent ) { if ( ! ( futureEvent.isDone ( ) ) ) { futureEvent.set ( event ) ; com.googlecode.android_scripting.Log.v ( java.lang.String.format ( "Removing observer (%s) got event (%s)" , this , event ) ) ; removeEventObserver ( this ) ; } if ( removeEvent ) mEventQueue.remove ( event ) ; } } }
public boolean startFilteringMulticastV4Packets ( ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return ( ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) && ( mSupplicantStaIfaceHal.removeRxFilter ( SupplicantStaIfaceHal.RX_FILTER_TYPE_V4_MULTICAST ) ) ) && ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) ; } else { return ( ( doBooleanCommand ( "DRIVER RXFILTER-STOP" ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-REMOVE 2" ) ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-START" ) ) ; } }
public void cleanup ( ) { if ( ( myEntryPointsManager ) != null ) { com.intellij.openapi.util.Disposer.dispose ( myEntryPointsManager ) ; myEntryPointsManager = null ; } myPackages = null ; myApplet = null ; myAppMainPattern = null ; myAppPremainPattern = null ; myAppAgentmainPattern = null ; myServlet = null ; myAndroidActivity = null ; myAndroidService = null ; myAndroidBackupAgent = null ; myAndroidFragment = null ; myAndroidV4Fragment = null ; myAndroidContentProvider = null ; myAndroidReceiver = null ; myAndroidView = null ; myAndroidActionProvider = null ; myAndroidParcelable = null ; myDefaultPackage = null ; myProjectIterator = null ; }
public void testNewIncomingCall ( ) throws java.lang.Exception { com.android.ims.internal.IImsCallSession sessionBinder = org.mockito.Mockito.mock ( com.android.ims.internal.IImsCallSession.class ) ; android.telephony.ims.stub.ImsCallSessionImplBase session = new android.telephony.ims.stub.ImsCallSessionImplBase ( ) ; session.setServiceImpl ( sessionBinder ) ; mFeature.incomingCall ( session ) ; org.mockito.ArgumentCaptor < com.android.ims.internal.IImsCallSession > captor = org.mockito.ArgumentCaptor.forClass ( com.android.ims.internal.IImsCallSession.class ) ; org.mockito.Mockito.verify ( mListener ) . onIncomingCall ( captor.capture ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; junit.framework.Assert.assertEquals ( sessionBinder , captor.getValue ( ) ) ; }
public void getCallBarring ( java.lang.String facility , java.lang.String password , android.os.Message onComplete , int serviceClass ) { if ( com.android.internal.telephony.imsphone.ImsPhone.DBG ) logd ( ( ( ( "getCallBarring facility=" + facility ) + ", serviceClass = " ) + serviceClass ) ) ; android.os.Message resp ; resp = obtainMessage ( com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARRING_DONE , onComplete ) ; try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface ( ) ; ut.queryCallBarring ( getCBTypeFromFacility ( facility ) , resp , serviceClass ) ; } catch ( com.android.ims.ImsException e ) { sendErrorResponse ( onComplete , e ) ; } }
public void testGetInputState ( ) throws java.lang.Exception { if ( ! ( android.media.tv.cts.Utils.hasTvInputFramework ( getActivity ( ) ) ) ) { return ; } assertEquals ( mManager.getInputState ( mStubId ) , TvInputManager.INPUT_STATE_CONNECTED ) ; }
public void testFindAll ( ) throws java.lang.Throwable { getActivity ( ) . runOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { java.lang.String p = "<p>Find all instances of find on the page and highlight them.</p>" ; mWebView.loadData ( ( ( "<html><body>" + p ) + "</body></html>" ) , "text/html" , "UTF-8" ) ; } } ) ; waitForLoadComplete ( mWebView , android.webkit.cts.WebViewTest.TEST_TIMEOUT ) ; runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { assertEquals ( 2 , mWebView.findAll ( "find" ) ) ; } } ) ; }
public byte [ ] getIncomingSmsFingerprint ( ) { java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream ( ) ; output.write ( mEnvelope.serviceCategory ) ; output.write ( mEnvelope.teleService ) ; output.write ( mEnvelope.origAddress.origBytes , 0 , mEnvelope.origAddress.origBytes.length ) ; output.write ( mEnvelope.bearerData , 0 , mEnvelope.bearerData.length ) ; if ( ( ( mEnvelope.origSubaddress ) != null ) && ( ( mEnvelope.origSubaddress.origBytes ) != null ) ) { output.write ( mEnvelope.origSubaddress.origBytes , 0 , mEnvelope.origSubaddress.origBytes.length ) ; } return output.toByteArray ( ) ; }
private static int getIndexFromChar ( char ch ) { return ch < ( com.ibm.icu.text.SimpleDateFormat.PATTERN_CHAR_TO_INDEX.length ) ? com.ibm.icu.text.SimpleDateFormat.PATTERN_CHAR_TO_INDEX [ ( ch & 255 ) ] : - 1 ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mOppManager = com.android.bluetooth.opp.BluetoothOppManager.getInstance ( this ) ; mOppManager.mSendingFlag = false ; final com.android.internal.app.AlertController.AlertParams p = mAlertParams ; p.mIconAttrId = android.R.attr.alertDialogIcon ; p.mTitle = getString ( R.string.bt_enable_title ) ; p.mView = createView ( ) ; p.mPositiveButtonText = getString ( R.string.bt_enable_ok ) ; p.mPositiveButtonListener = this ; p.mNegativeButtonText = getString ( R.string.bt_enable_cancel ) ; p.mNegativeButtonListener = this ; setupAlert ( ) ; }
private static void drain ( java.io.InputStream in , java.io.OutputStream out ) throws java.io.IOException { byte [ ] buf = new byte [ 65536 ] ; int chunkSize ; while ( ( chunkSize = in.read ( buf ) ) != ( - 1 ) ) { out.write ( buf , 0 , chunkSize ) ; } }
public void onHandleIntent ( android.content.Intent intent ) { android.util.Log.i ( compiler.abcc.AbccService.TAG , ( "got onHandleIntent intent: " + intent ) ) ; if ( ( intent.getAction ( ) ) != "compiler.abcc.BITCODE_COMPILE_TEST" ) { android.util.Log.e ( compiler.abcc.AbccService.TAG , "We don't support formal release by onHandleIntent() yet!" ) ; return ; } extractIntentInfo ( intent ) ; installToolchain ( ) ; mForTesting = true ; new compiler.abcc.AbccService.WorkingThread ( ) . start ( ) ; }
public libcore.tzdata.testing.ZoneInfoTestHelper.ZoneInfoDataBuilder setTypes ( int [ ] [ ] typePairs ) { int [ ] isDsts = new int [ typePairs.length ] ; int [ ] offsetSeconds = new int [ typePairs.length ] ; for ( int i = 0 ; i < ( typePairs.length ) ; i ++ ) { offsetSeconds [ i ] = typePairs [ i ] [ 0 ] ; isDsts [ i ] = typePairs [ i ] [ 1 ] ; } this . isDsts = isDsts ; this . offsetsSeconds = offsetSeconds ; return this ; }
public com.ibm.icu.impl.CurrencyData.CurrencyDisplayInfo getInstance ( com.ibm.icu.util.ULocale locale , boolean withFallback ) { com.ibm.icu.impl.ICUResourceBundle rb ; if ( withFallback ) { rb = com.ibm.icu.impl.ICUResourceBundle.getBundleInstance ( ICUData.ICU_CURR_BASE_NAME , locale , OpenType.LOCALE_DEFAULT_ROOT ) ; } else { try { rb = com.ibm.icu.impl.ICUResourceBundle.getBundleInstance ( ICUData.ICU_CURR_BASE_NAME , locale , OpenType.LOCALE_ONLY ) ; } catch ( java.util.MissingResourceException e ) { return null ; } } return new com.ibm.icu.impl.ICUCurrencyDisplayInfoProvider.ICUCurrencyDisplayInfo ( rb , withFallback ) ; }
private void transformAnnotationSetRefLists ( com.android.dex.Dex in , com.android.dx.merge.IndexMap indexMap ) { com.android.dex.TableOfContents.Section section = in.getTableOfContents ( ) . annotationSetRefLists ; if ( section.exists ( ) ) { com.android.dex.Dex.Section setIn = in.open ( section.off ) ; for ( int i = 0 ; i < ( section.size ) ; i ++ ) { transformAnnotationSetRefList ( indexMap , setIn ) ; } } }
public java.nio.DoubleBuffer put ( java.nio.DoubleBuffer src ) { if ( src == ( this ) ) { throw new java.lang.IllegalArgumentException ( "src == this" ) ; } if ( ( src.remaining ( ) ) > ( remaining ( ) ) ) { throw new java.nio.BufferOverflowException ( ) ; } double [ ] doubles = new double [ src.remaining ( ) ] ; src.get ( doubles ) ; put ( doubles ) ; return this ; }
static void nativeGetPixels ( long nativeBitmap , int [ ] pixels , int offset , int stride , int x , int y , int width , int height , boolean isPremultiplied ) { android.graphics.Bitmap_Delegate delegate = android.graphics.Bitmap_Delegate.sManager.getDelegate ( nativeBitmap ) ; if ( delegate == null ) { return ; } delegate.getImage ( ) . getRGB ( x , y , width , height , pixels , offset , stride ) ; }
public void callDropFeedbackPaint ( com.android.ide.eclipse.adt.editors.layout.gscripts.IGraphics gc , com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy targetNode , com.android.ide.eclipse.adt.editors.layout.gscripts.DropFeedback feedback ) { if ( ( ( gc != null ) && ( feedback != null ) ) && ( ( feedback.painter ) != null ) ) { try { feedback.painter.paint ( gc , targetNode , feedback ) ; } catch ( java.lang.Exception e ) { logError ( "DropFeedback.painter failed: %s" , e.toString ( ) ) ; } } }
public com.android.vts.servlet.PageType getNavParentType ( ) { return PageType.TOT ; }
private void checkPermissionsSafe ( java.lang.String provider ) { if ( ( LocationManager.GPS_PROVIDER.equals ( provider ) ) && ( ( mContext.checkCallingOrSelfPermission ( com.android.server.LocationManagerService.ACCESS_FINE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) { throw new java.lang.SecurityException ( "Requires ACCESS_FINE_LOCATION permission" ) ; } if ( ( ( LocationManager.NETWORK_PROVIDER.equals ( provider ) ) && ( ( mContext.checkCallingOrSelfPermission ( com.android.server.LocationManagerService.ACCESS_FINE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) && ( ( mContext.checkCallingOrSelfPermission ( com.android.server.LocationManagerService.ACCESS_COARSE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) { throw new java.lang.SecurityException ( "Requires ACCESS_FINE_LOCATION or ACCESS_COARSE_LOCATION permission" ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } com.google.common.base.Preconditions.checkState ( ( ( ! ( options.bootclasspath.isEmpty ( ) ) ) || ( options.allowEmptyBootclasspath ) ) , "Bootclasspath required to desugar %s" , options.inputJar ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( ( options.coreLibrary ? "__desugar__/" : "" ) ) ; com.google.devtools.build.android.desugar.IndexedJars appIndexedJar = new com.google.devtools.build.android.desugar.IndexedJars ( com.google.common.collect.ImmutableList.of ( options.inputJar ) ) ; com.google.devtools.build.android.desugar.IndexedJars appAndClasspathIndexedJars = new com.google.devtools.build.android.desugar.IndexedJars ( options.classpath , appIndexedJar ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , appAndClasspathIndexedJars ) ; boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; boolean allowCallsToObjectsNonNull = ( options.minSdkVersion ) >= 19 ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( ( ( options.copyBridgesFromClasspath ) && ( ! allowDefaultMethods ) ? appAndClasspathIndexedJars : appIndexedJar ) , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; if ( ! allowCallsToObjectsNonNull ) { visitor = new com.google.devtools.build.android.desugar.ObjectsRequireNonNullMethodInliner ( visitor ) ; } reader.accept ( visitor , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , null , allowDefaultMethods ) ; if ( ! allowCallsToObjectsNonNull ) { visitor = new com.google.devtools.build.android.desugar.ObjectsRequireNonNullMethodInliner ( visitor ) ; } reader.accept ( visitor , 0 ) ; java.lang.String filename = ( rewriter.unprefix ( lambdaClass.getValue ( ) . desiredInternalName ( ) ) ) + ".class" ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , filename , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
public < T extends com.android.jack.api.JackConfig > T createConfig ( java.lang.Class < T > cls ) throws com.android.jack.api.ConfigNotSupportedException { if ( cls == ( com.android.jack.api.v01.Api01Config.class ) ) { return ( ( T ) ( new com.android.jack.api.v01.impl.Api01ConfigImpl ( ) ) ) ; } else if ( cls == ( com.android.jack.api.v01.Cli01Config.class ) ) { return ( ( T ) ( new com.android.jack.api.v01.impl.Cli01ConfigImpl ( ) ) ) ; } throw new com.android.jack.api.ConfigNotSupportedException ( ( ( cls.getName ( ) ) + " are not supported" ) ) ; }
public void run ( ) { try { com.android.bluetooth.opp.BluetoothOppManager.getInstance ( this ) . saveSendingFileInfo ( mimeType , uris , false ) ; launchDevicePicker ( ) ; finish ( ) ; } catch ( java.lang.IllegalArgumentException exception ) { showToast ( exception.getMessage ( ) ) ; finish ( ) ; } }
public void onReceivedTitle ( java.lang.String title ) { org.chromium.base.TraceEvent.begin ( ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onReceivedTitle" ) ; mWebChromeClient.onReceivedTitle ( mWebView , title ) ; } org.chromium.base.TraceEvent.end ( ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "OnClickActivity.java:27: Error: On click handler wrong5(View) must be public\n" + ( ( ( ( ( ( ( "OnClickActivity.java:31: Error: On click handler wrong6(View) should not be static\n" + "OnClickActivity.java:45: Error: On click handler wrong7(View) must be public\n" ) + "onclick.xml:10: Error: Corresponding method handler \'public void nonexistent(android.view.View)\' not found\n" ) + "onclick.xml:16: Error: Corresponding method handler \'public void wrong1(android.view.View)\' not found\n" ) + "onclick.xml:22: Error: Corresponding method handler \'public void wrong2(android.view.View)\' not found\n" ) + "onclick.xml:28: Error: Corresponding method handler \'public void wrong3(android.view.View)\' not found\n" ) + "onclick.xml:34: Error: Corresponding method handler \'public void wrong4(android.view.View)\' not found\n" ) + "onclick.xml:58: Error: Corresponding method handler 'public void simple_typo(android.view.View)' not found (did you mean void test.pkg.OnClickActivity#simple_tyop(android.view.View) ?)" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "res/layout/onclick.xml=>res/layout/onclick.xml" , "bytecode/OnClickActivity.java.txt=>src/test/pkg/OnClickActivity.java" , "bytecode/OnClickActivity.class.data=>bin/classes/test/pkg/OnClickActivity.class" ) ) ; }
private void disconnectProfiles ( android.bluetooth.BluetoothDevice device , java.lang.String deviceID ) { com.googlecode.android_scripting.Log.d ( ( "Disconnecting device " + device ) ) ; mA2dpProfile.a2dpDisconnect ( device ) ; mA2dpSinkProfile.a2dpSinkDisconnect ( device ) ; mHidProfile.hidDisconnect ( device ) ; mHspProfile.hspDisconnect ( device ) ; mHfpClientProfile.hfpClientDisconnect ( device ) ; mPanProfile.panDisconnect ( device ) ; mPbapClientProfile.pbapClientDisconnect ( device ) ; }
public void onBar1Changed ( int progress ) { mRadius = ( ( ( float ) ( progress ) ) / 100.0F ) * ( MAX_RADIUS ) ; if ( ( mRadius ) <= 0.1F ) { mRadius = 0.1F ; } if ( mUseIntrinsic ) { mIntrinsic.setRadius ( mRadius ) ; } else if ( mUseHalfPrecision ) { mScript_half.invoke_setRadius ( ( ( int ) ( mRadius ) ) ) ; } else { mScript.invoke_setRadius ( ( ( int ) ( mRadius ) ) ) ; } }
private IBinder.DeathRecipient getInternalStateDeathRecipient ( int clientId ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.aware.WifiAwareServiceImpl.class . getDeclaredField ( "mDeathRecipientsByClientId" ) ; field.setAccessible ( true ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) android.util.SparseArray < android.os.IBinder.DeathRecipient > deathRecipientsByClientId = ( ( android.util.SparseArray < android.os.IBinder.DeathRecipient > ) ( field.get ( mDut ) ) ) ; return deathRecipientsByClientId.get ( clientId ) ; }
public void addDevice ( com.android.vts.entity.DeviceInfoEntity device ) { if ( ( device == null ) || ( deviceSet.contains ( device ) ) ) return ; devices.add ( ( ( ( ( ( ( device.branch ) + "/" ) + ( device.buildFlavor ) ) + " (" ) + ( device.buildId ) ) + ")" ) ) ; deviceSet.add ( device ) ; }
void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; props.setProperty ( com.android.sdklib.internal.repository.ExtraPackage.PROP_PATH , mPath ) ; if ( ( mVendor ) != null ) { props.setProperty ( com.android.sdklib.internal.repository.ExtraPackage.PROP_VENDOR , mVendor ) ; } if ( ( getMinApiLevel ( ) ) != ( MIN_API_LEVEL_NOT_SPECIFIED ) ) { props.setProperty ( com.android.sdklib.internal.repository.ExtraPackage.PROP_MIN_API_LEVEL , java.lang.Integer.toString ( getMinApiLevel ( ) ) ) ; } }
private boolean checkFeatures ( java.lang.String [ ] requiredFeatures , java.lang.String [ ] excludedFeatures , java.lang.String [ ] applicableFeatures ) { if ( ( ! ( hasAnyFeature ( excludedFeatures ) ) ) && ( hasAllFeatures ( requiredFeatures ) ) ) { if ( ( applicableFeatures == null ) || ( hasAnyFeature ( applicableFeatures ) ) ) { return true ; } } return false ; }
public java.lang.Void call ( ) throws java.lang.Exception { if ( classPathOpener.process ( ) ) { com.android.dx.command.dexer.Main.anyFilesProcessed = true ; } return null ; }
public void onMtuChanged ( android.bluetooth.BluetoothDevice device , int mtu ) { com.googlecode.android_scripting.Log.d ( ( ( ( "gatt_server change onMtuChanged " + ( mEventType ) ) + " " ) + ( index ) ) ) ; mResults.putParcelable ( "BluetoothDevice" , device ) ; mResults.putInt ( "MTU" , mtu ) ; mEventFacade.postEvent ( ( ( ( mEventType ) + ( index ) ) + "onMtuChanged" ) , mResults.clone ( ) ) ; mResults.clear ( ) ; }
public void testWriteFiboDexFile ( ) throws java.lang.Exception { java.io.File outputDir = com.android.jack.util.FileUtils.getWorkingDirectory ( ) ; com.android.jack.Options fiboArgs = com.android.jack.TestTools.buildCommandLineArgs ( com.android.jack.FibonacciThreeAddressTest.JAVA_FILEPATH ) ; fiboArgs.setOutputDir ( outputDir ) ; java.io.File outputFile = new java.io.File ( outputDir , com.android.jack.backend.dex.DexFileWriter.DEX_FILENAME ) ; java.io.File outputDirectory = outputFile.getParentFile ( ) ; com.android.jack.util.FileUtils.createIfNotExists ( outputDirectory ) ; com.android.jack.Jack.run ( fiboArgs ) ; junit.framework.Assert.assertTrue ( outputFile.exists ( ) ) ; junit.framework.Assert.assertTrue ( ( ( outputFile.length ( ) ) > 0 ) ) ; }
public static java.lang.String retrieveFieldValueName ( java.lang.String id , int field , int value , int style , java.util.Locale locale ) { if ( value < 0 ) { return null ; } java.lang.String [ ] names = sun.util.locale.provider.CalendarDataUtility.getNames ( id , field , style , locale ) ; if ( value >= ( names.length ) ) { return null ; } return names [ value ] ; }
public void modifyText ( org.eclipse.swt.events.ModifyEvent event ) { if ( ( mManualTextChange ) > 0 ) { return ; } try { mValue = mDecimalFormat.parse ( mDecimalText.getText ( ) ) . doubleValue ( ) ; setValueIntoSexagesimalControl ( mValue ) ; mValueValidity = true ; } catch ( java.text.ParseException e ) { mValueValidity = false ; resetSexagesimalControls ( ) ; } }
public com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.eclipse.adt.internal.resources.manager.FrameworkResources resources = new com.android.ide.eclipse.adt.internal.resources.manager.FrameworkResources ( ) ; try { loadResources ( resources , frameworkRes ) ; resources.loadPublicResources ( frameworkRes ) ; return resources ; } catch ( java.io.IOException e ) { } } return null ; }
public com.android.jack.ir.ast.JParameterRef exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ExportSession exportSession ) { assert ( sourceInfo ) != null ; assert ( localId ) != null ; com.android.jack.ir.ast.JParameterRef jRef = JParameterUnresolved.INSTANCE.makeRef ( sourceInfo ) ; exportSession.getVariableResolver ( ) . addLink ( localId , new com.android.jack.jayce.linker.VariableRefLinker ( jRef ) ) ; for ( com.android.jack.jayce.v0004.nodes.NMarker marker : markers ) { jRef.addMarker ( marker.exportAsJast ( exportSession ) ) ; } return jRef ; }
public com.android.jack.api.impl.SubReleaseKind getCompilerSubReleaseKind ( ) { switch ( com.android.jack.Jack.getVersion ( ) . getSubReleaseKind ( ) ) { case ENGINEERING : return SubReleaseKind.ENGINEERING ; case PRE_ALPHA : return SubReleaseKind.PRE_ALPHA ; case ALPHA : return SubReleaseKind.ALPHA ; case BETA : return SubReleaseKind.BETA ; case CANDIDATE : return SubReleaseKind.CANDIDATE ; case RELEASE : return SubReleaseKind.RELEASE ; default : throw new java.lang.AssertionError ( com.android.jack.Jack.getVersion ( ) . getSubReleaseKind ( ) . name ( ) ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( obj instanceof com.android.ide.common.api.Point ) { com.android.ide.common.api.Point rhs = ( ( com.android.ide.common.api.Point ) ( obj ) ) ; return ( ( this . x ) == ( rhs.x ) ) && ( ( this . y ) == ( rhs.y ) ) ; } return false ; }
public void testRewriteGradleMessages ( ) { java.lang.String original = "error example\ntwo line error\nnext line\nsomething else" ; java.lang.String rewriten = mGradleMessageRewriter.rewriteMessages ( original ) ; java.lang.String expected = "AGPBI: {\"kind\":\"ERROR\",\"text\":\"errorText\",\"sourcePath\":\"error/source\"," + ( ( ( ( ( ( "\"position\":{\"startLine\":1,\"startColumn\":2,\"startOffset\":3," + "\"endLine\":4,\"endColumn\":5,\"endOffset\":6},\"original\":\"\"}\n" ) + "AGPBI: {\"kind\":\"WARNING\",\"text\":" ) + "\"two line warning\",\"sourcePath\":\"sourcePath\"," ) + "\"position\":{\"startLine\":1,\"startColumn\":2},\"original\":\"\"}\n" ) + "AGPBI: {\"kind\":\"SIMPLE\"," ) + "\"text\":\"something else\",\"position\":{},\"original\":\"something else\"}" ) ; assertEquals ( expected.trim ( ) , rewriten.trim ( ) ) ; }
java.lang.String retrieveLastLocalMessage ( ) { lastIndexOfLocalMessage = com.android.incallui.rtt.protocol.RttChatMessage.getLastIndexLocalMessage ( rttMessages ) ; if ( ( lastIndexOfLocalMessage ) >= 0 ) { com.android.incallui.rtt.protocol.RttChatMessage rttChatMessage = rttMessages.get ( lastIndexOfLocalMessage ) ; rttChatMessage.unfinish ( ) ; return rttChatMessage.getContent ( ) ; } else { return null ; } }
public void onCallListChange ( com.android.incallui.call.CallList callList ) { com.google.common.collect.ImmutableList.Builder < com.android.dialer.activecalls.ActiveCallInfo > activeCalls = com.google.common.collect.ImmutableList.builder ( ) ; for ( com.android.incallui.call.DialerCall call : callList.getAllCalls ( ) ) { if ( ( call.getState ( ) ) != ( com.android.incallui.call.state.DialerCallState.DISCONNECTED ) ) { activeCalls.add ( com.android.dialer.activecalls.ActiveCallInfo.builder ( ) . setPhoneAccountHandle ( com.google.common.base.Optional.fromNullable ( call.getAccountHandle ( ) ) ) . build ( ) ) ; } } com.android.dialer.activecalls.ActiveCallsComponent.get ( appContext ) . activeCalls ( ) . setActiveCalls ( activeCalls.build ( ) ) ; }
public final void awaitRunning ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.util.concurrent.TimeoutException { if ( monitor.enterWhenUninterruptibly ( hasReachedRunning , timeout , unit ) ) { try { checkCurrentState ( com.google.common.util.concurrent.Service.State.RUNNING ) ; } finally { monitor.leave ( ) ; } } else { throw new java.util.concurrent.TimeoutException ( ( ( ( ( "Timed out waiting for " + ( this ) ) + " to reach the RUNNING state. " ) + "Current state: " ) + ( state ( ) ) ) ) ; } }
public void idmap ( java.lang.String targetApkPath , java.lang.String overlayApkPath , int uid ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.idmap ( targetApkPath , overlayApkPath , uid ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
private java.util.List < android.net.wifi.WifiConfiguration > parseNetworkList ( org.xmlpull.v1.XmlPullParser in , int outerTagDepth ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { java.util.List < android.net.wifi.WifiConfiguration > networkList = new java.util.ArrayList < > ( ) ; while ( com.android.server.wifi.util.XmlUtil.gotoNextSectionWithNameOrEnd ( in , com.android.server.wifi.NetworkListStoreData.XML_TAG_SECTION_HEADER_NETWORK , outerTagDepth ) ) { try { android.net.wifi.WifiConfiguration config = parseNetwork ( in , ( outerTagDepth + 1 ) ) ; networkList.add ( config ) ; } catch ( java.lang.RuntimeException e ) { android.util.Log.e ( com.android.server.wifi.NetworkListStoreData.TAG , "Failed to parse network config. Skipping..." , e ) ; } } return networkList ; }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass ( ) ) != ( o.getClass ( ) ) ) ) return false ; com.google.gct.testing.GoogleCloudTestingConfiguration that = ( ( com.google.gct.testing.GoogleCloudTestingConfiguration ) ( o ) ) ; return ( ( getHash ( ) ) == ( that.getHash ( ) ) ) && ( ( id ) == ( that.id ) ) ; }
private void create ( java.lang.String pattern , android.icu.text.DecimalFormatSymbols inputSymbols , android.icu.text.CurrencyPluralInfo info , int inputStyle ) { if ( inputStyle != ( NumberFormat.PLURALCURRENCYSTYLE ) ) { createFromPatternAndSymbols ( pattern , inputSymbols ) ; } else { symbols = ( ( android.icu.text.DecimalFormatSymbols ) ( inputSymbols.clone ( ) ) ) ; currencyPluralInfo = info ; java.lang.String currencyPluralPatternForOther = currencyPluralInfo.getCurrencyPluralPattern ( "other" ) ; applyPatternWithoutExpandAffix ( currencyPluralPatternForOther , false ) ; setCurrencyForSymbols ( ) ; } style = inputStyle ; }
public void timeDateIntervalFormat_formatDateRange_TIME ( int reps ) throws java.lang.Exception { android.icu.util.ULocale l = android.icu.util.ULocale.US ; android.icu.util.TimeZone utc = android.icu.util.TimeZone.getTimeZone ( "UTC" ) ; int flags = ( FORMAT_SHOW_TIME ) | ( FORMAT_24HOUR ) ; for ( int rep = 0 ; rep < reps ; ++ rep ) { formatDateRange ( l , utc , 0L , 0L , flags ) ; } }
private void writeDup ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > nextFrame ) throws java.io.IOException { if ( isVirtualStackVariable ( frame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) ) { cmpOperands.put ( getStackVariable ( nextFrame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) , cmpOperands.get ( getStackVariable ( frame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) ) ) ; } else { writeAssign ( frame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK , nextFrame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) ; } }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; try { for ( int i = 1 ; i <= 70 ; i ++ ) { java.lang.Class < ? > clazz = getClassLoader ( ) . loadClass ( java.lang.String.format ( "com.android.tests.basic.manymethods.Big%03d" , i ) ) ; } } catch ( java.lang.ClassNotFoundException e ) { throw new java.lang.RuntimeException ( e ) ; } android.widget.TextView tv = ( ( android.widget.TextView ) ( findViewById ( R.id.text ) ) ) ; tv.setText ( "Found all classes" ) ; }
private void writeReturn ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , int stackIdx ) throws java.io.IOException { sourceInfoWriter.writeDebugBegin ( currentClass , currentLine ) ; writer.writeCatchBlockIds ( currentCatchList ) ; writer.writeKeyword ( Token.RETURN_STATEMENT ) ; writer.writeOpen ( ) ; if ( stackIdx == 0 ) { writer.writeNull ( ) ; } else { writeStackAccess ( frame , stackIdx ) ; } sourceInfoWriter.writeDebugEnd ( currentClass , ( ( currentLine ) + 1 ) ) ; writer.writeClose ( ) ; }
protected java.util.Set < com.google.common.reflect.TypeToken < ? super T > > delegate ( ) { com.google.common.collect.ImmutableSet < com.google.common.reflect.TypeToken < ? super T > > result = classes ; if ( result == null ) { @ java.lang.SuppressWarnings ( value = { "unchecked" , "rawtypes" } ) com.google.common.collect.ImmutableList < com.google.common.reflect.TypeToken < ? super T > > collectedTypes = ( ( com.google.common.collect.ImmutableList ) ( com.google.common.reflect.TypeToken.TypeCollector.FOR_GENERIC_TYPE.classesOnly ( ) . collectTypes ( this ) ) ) ; return classes = com.google.common.collect.FluentIterable.from ( collectedTypes ) . filter ( com.google.common.reflect.TypeToken.TypeFilter.IGNORE_TYPE_VARIABLE_OR_WILDCARD ) . toSet ( ) ; } else { return result ; } }
public void testReplacedFile ( ) throws java.lang.Exception { com.android.builder.resources.ResourceMerger merger = com.android.builder.resources.ResourceMergerTest.getResourceMerger ( ) ; com.google.common.collect.ListMultimap < java.lang.String , com.android.builder.resources.Resource > mergedMap = merger.getResourceMap ( ) ; java.util.List < com.android.builder.resources.Resource > values = mergedMap.get ( "layout/file_replaced_by_alias" ) ; assertEquals ( 2 , values.size ( ) ) ; com.android.builder.resources.Resource layout = values.get ( 1 ) ; assertNotNull ( layout.getValue ( ) ) ; }
private static java.util.Set < java.lang.String > getDisabledCapabilities ( @ android.annotation.Nullable android.os.PersistableBundle bundle ) { if ( bundle == null ) { return null ; } if ( ! ( bundle.containsKey ( com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper.KEY_VVM_DISABLED_CAPABILITIES_STRING_ARRAY ) ) ) { return null ; } java.lang.String [ ] disabledCapabilities = bundle.getStringArray ( com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper.KEY_VVM_DISABLED_CAPABILITIES_STRING_ARRAY ) ; if ( ( disabledCapabilities != null ) && ( ( disabledCapabilities.length ) > 0 ) ) { android.util.ArraySet < java.lang.String > result = new android.util.ArraySet ( ) ; java.util.Collections.addAll ( result , disabledCapabilities ) ; return result ; } return null ; }
public void test_getClientAliases ( ) { init ( org.apache.harmony.tests.javax.net.ssl.X509KeyManagerTest.CLIENT ) ; assertNull ( manager.getClientAliases ( null , null ) ) ; assertNull ( manager.getClientAliases ( "" , null ) ) ; java.lang.String [ ] resArray = manager.getClientAliases ( org.apache.harmony.tests.javax.net.ssl.X509KeyManagerTest.TYPE_RSA , null ) ; assertNotNull ( resArray ) ; assertEquals ( 3 , resArray.length ) ; assertKnownAliases ( resArray ) ; }
public com.android.internal.telephony.InboundSmsTracker makeInboundSmsTracker ( byte [ ] pdu , long timestamp , int destPort , boolean is3gpp2 , boolean is3gpp2WapPdu , java.lang.String address , java.lang.String displayAddr , java.lang.String messageBody ) { return new com.android.internal.telephony.InboundSmsTracker ( pdu , timestamp , destPort , is3gpp2 , is3gpp2WapPdu , address , displayAddr , messageBody ) ; }
public java.util.Map < K , java.util.Collection < V > > asMap ( ) { java.util.Map < K , java.util.Collection < V > > result = map ; if ( result == null ) { result = map = java.util.Collections.unmodifiableMap ( com.google.common.collect.Maps.transformValues ( delegate.asMap ( ) , new com.google.common.base.Function < java.util.Collection < V > , java.util.Collection < V > > ( ) { @ java.lang.Override public java.util.Collection < V > apply ( java.util.Collection < V > collection ) { return com.google.common.collect.Multimaps.unmodifiableValueCollection ( collection ) ; } } ) ) ; } return result ; }
public void noCrashClassObj ( ) throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump ( ) ; com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot ( ) ; com.android.ahat.AhatHandler handler = new com.android.ahat.ObjectHandler ( snapshot ) ; com.android.ahat.heapdump.AhatInstance object = dump.findClass ( "Main" ) ; org.junit.Assert.assertNotNull ( object ) ; com.android.ahat.TestHandler.testNoCrash ( handler , ( "http://localhost:7100/object?id=" + ( object.getId ( ) ) ) ) ; }
public void revokeUriPermissionFromOwner ( android.os.IBinder token , android.net.Uri uri , int mode ) { synchronized ( this ) { com.android.server.am.UriPermissionOwner owner = com.android.server.am.UriPermissionOwner.fromExternalToken ( token ) ; if ( owner == null ) { throw new java.lang.IllegalArgumentException ( ( "Unknown owner: " + token ) ) ; } if ( uri == null ) { owner.removeUriPermissionsLocked ( mode ) ; } else { owner.removeUriPermissionLocked ( uri , mode ) ; } } }
public void testAbiOnlyWithNoMatch ( ) throws com.android.ide.common.process.ProcessException { java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "foo" , 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "bar" , 2 ) ) ; java.util.List < java.io.File > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "zzz" ) ; assertEquals ( 0 , result.size ( ) ) ; }
public boolean setNetworkSelectionModeManual ( java.lang.String operatorNumeric , boolean persistSelection ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.setNetworkSelectionModeManual ( getSubId ( ) , operatorNumeric , persistSelection ) ; } } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual NPE" , ex ) ; } return false ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField x ) { print ( com.android.jack.ir.ast.JModifier.getStringFieldModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; return false ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , java.lang.Object array ) { copy2DRangeFromUnchecked ( xoff , yoff , w , h , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; }
public void setVoicemailTranscriptionEnabled ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccountHandle , boolean enabled ) { com.android.dialer.common.Assert.checkArgument ( isVoicemailTranscriptionAvailable ( context , phoneAccountHandle ) , "transcription must be available before enabling/disabling it" ) ; com.android.voicemail.impl.settings.VisualVoicemailSettingsUtil.setVoicemailTranscriptionEnabled ( context , phoneAccountHandle , enabled ) ; if ( enabled ) { com.android.voicemail.impl.transcribe.TranscriptionBackfillService.scheduleTask ( context , phoneAccountHandle ) ; } }
public static com.intellij.execution.testframework.ui.BaseTestsOutputConsoleView createConsole ( @ org.jetbrains.annotations.NotNull final java.lang.String testFrameworkName , @ org.jetbrains.annotations.NotNull final com.intellij.execution.testframework.TestConsoleProperties consoleProperties , com.intellij.execution.runners.ExecutionEnvironment environment , @ org.jetbrains.annotations.NotNull final com.google.gct.testing.CloudMatrixExecutionCancellator matrixExecutionCancellator ) { return com.google.gct.testing.results.GoogleCloudTestResultsConnectionUtil.createConsoleWithCustomLocator ( testFrameworkName , consoleProperties , environment , null , matrixExecutionCancellator ) ; }
void stopScan ( com.android.bluetooth.gatt.ScanClient client ) { enforceAdminPermission ( ) ; int scanQueueSize = ( mScanManager.getBatchScanQueue ( ) . size ( ) ) + ( mScanManager.getRegularScanQueue ( ) . size ( ) ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "stopScan() - queue size =" + scanQueueSize ) ) ; mClientMap.getScanStatsById ( client.clientIf ) . stopScan ( ) ; mScanManager.stopScan ( client ) ; }
private void createStateVariation ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationChooser chooser , com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration parent ) { com.android.sdklib.devices.State currentState = parent.getDeviceState ( ) ; com.android.sdklib.devices.State nextState = parent.getNextDeviceState ( currentState ) ; if ( nextState != currentState ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.VaryingConfiguration configuration = com.android.ide.eclipse.adt.internal.editors.layout.configuration.VaryingConfiguration.create ( chooser , parent ) ; configuration.setAlternateDeviceState ( true ) ; configuration.syncFolderConfig ( ) ; addPreview ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview.create ( this , configuration ) ) ; } }
public long getDiscoveryEndMillis ( ) { try { mServiceLock.readLock ( ) . lock ( ) ; if ( ( mService ) != null ) return mService.getDiscoveryEndMillis ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } finally { mServiceLock.readLock ( ) . unlock ( ) ; } return - 1 ; }
public void collapseExpandedViewHolder ( com.android.dialer.voicemail.listui.NewVoicemailViewHolder collapseViewHolder ) { com.android.dialer.common.Assert.checkArgument ( ( ( collapseViewHolder.getViewHolderId ( ) ) == ( currentlyExpandedViewHolderId ) ) ) ; collapseViewHolder.collapseViewHolder ( ) ; currentlyExpandedViewHolderId = - 1 ; if ( mediaPlayer.isPlaying ( ) ) { com.android.dialer.common.Assert.checkArgument ( java.util.Objects.equals ( mediaPlayer.getLastPlayedOrPlayingVoicemailUri ( ) , collapseViewHolder.getViewHolderVoicemailUri ( ) ) , "the voicemail being played should have been of the recently collapsed view holder." ) ; mediaPlayer.reset ( ) ; } }
public void setUp ( ) { helper.setUp ( ) ; com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode mode = com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_INCREASING ; com.android.vts.util.ProfilingPointSummaryTest.summary = new com.android.vts.util.ProfilingPointSummary ( "x" , "y" , mode ) ; com.android.vts.entity.ProfilingPointSummaryEntity pt = com.android.vts.util.ProfilingPointSummaryTest.createProfilingReport ( com.android.vts.util.ProfilingPointSummaryTest.labels , com.android.vts.util.ProfilingPointSummaryTest.values , mode ) ; com.android.vts.util.ProfilingPointSummaryTest.summary.update ( pt ) ; }
public void setVideoProvider ( java.lang.String callId , com.android.internal.telecom.IVideoProvider videoProvider , android.telecom.Logging.Session.Info sessionInfo ) { java.lang.String callingPackage = mOurConnectionServiceImpl.getApplicationContext ( ) . getOpPackageName ( ) ; int targetSdkVersion = mOurConnectionServiceImpl.getApplicationInfo ( ) . targetSdkVersion ; android.telecom.RemoteConnection.VideoProvider remoteVideoProvider = null ; if ( videoProvider != null ) { remoteVideoProvider = new android.telecom.RemoteConnection.VideoProvider ( videoProvider , callingPackage , targetSdkVersion ) ; } findConnectionForAction ( callId , "setVideoProvider" ) . setVideoProvider ( remoteVideoProvider ) ; }
public java.lang.String getIsimImpi ( int subId ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE , "Requires READ_PRIVILEGED_PHONE_STATE" ) ; com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords ( ) ; if ( isim != null ) { return isim.getIsimImpi ( ) ; } else { return null ; } } else { loge ( ( "getIsimImpi phone is null for Subscription:" + subId ) ) ; return null ; } }
public boolean resetRoamingConfiguration ( ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "resetRoamingConfiguration " ) ; if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.configureRoaming ( new com.android.server.wifi.WifiNative.RoamingConfig ( ) ) ; } else { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "resetRoamingConfiguration not supported" ) ; return false ; } }
public void update ( com.intellij.openapi.actionSystem.AnActionEvent actionEvent ) { com.google.gct.testing.results.GoogleCloudTestTreeView sender = actionEvent.getData ( GoogleCloudTestTreeView.CLOUD_TEST_RUNNER_VIEW ) ; if ( sender == null ) { return ; } com.intellij.execution.testframework.AbstractTestProxy selectedNode = ( ( com.google.gct.testing.results.GoogleCloudTestingResultsForm ) ( sender.getResultsViewer ( ) ) ) . getTreeView ( ) . getSelectedTest ( ) ; if ( ( selectedNode == null ) || ( selectedNode instanceof com.google.gct.testing.results.GoogleCloudTestProxy.GoogleCloudRootTestProxy ) ) { actionEvent.getPresentation ( ) . setEnabled ( false ) ; } else { actionEvent.getPresentation ( ) . setEnabled ( true ) ; } }
public java.lang.String getMacAddress ( ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.getMacAddress ( ) ; } else { java.lang.String ret = doStringCommand ( "DRIVER MACADDR" ) ; if ( ! ( android.text.TextUtils.isEmpty ( ret ) ) ) { java.lang.String [ ] tokens = ret.split ( " = " ) ; if ( ( tokens.length ) == 2 ) return tokens [ 1 ] ; } return null ; } }
byte [ ] getLocaleData ( ) { android.content.res.Configuration conf = mContext.getResources ( ) . getConfiguration ( ) ; final java.util.Locale loc = conf.locale ; java.lang.String localeString = loc.getLanguage ( ) ; java.lang.String country = loc.getCountry ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( country ) ) ) { localeString += "-" + country ; } return localeString.getBytes ( ) ; }
public void dumpDoesNotClearLastFailureData ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; getDumpString ( ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect" ) ) ; }
void updateThumbnailLocked ( android.graphics.Bitmap newThumbnail , java.lang.CharSequence description ) { if ( newThumbnail != null ) { if ( ActivityManagerService.DEBUG_THUMBNAILS ) android.util.Slog.i ( ActivityManagerService.TAG , ( ( ( "Setting thumbnail of " + ( this ) ) + " to " ) + newThumbnail ) ) ; boolean thumbnailUpdated = task.setLastThumbnail ( newThumbnail ) ; if ( thumbnailUpdated && ( isPersistable ( ) ) ) { mStackSupervisor.mService.notifyTaskPersisterLocked ( task , false ) ; } } task.lastDescription = description ; }
public void dump ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { pw.println ( "WifiAwareDataPathStateManager:" ) ; pw.println ( ( " mInterfaces: " + ( mInterfaces ) ) ) ; pw.println ( ( " mNetworkCapabilitiesFilter: " + ( mNetworkCapabilitiesFilter ) ) ) ; pw.println ( ( " mNetworkRequestsCache: " + ( mNetworkRequestsCache ) ) ) ; pw.println ( " mNetworkFactory:" ) ; mNetworkFactory.dump ( fd , pw , args ) ; }
public void createAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.createAppData ( uuid , packageName , userId , flags , appId , seInfo , targetSdkVersion ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void requestImageRef ( final android.os.Message msg ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { requestImageRef ( msg ) ; } } ) ; return ; } mAwContents.requestImageRef ( msg ) ; }
void dispatchQueuedEvents ( ) { if ( isDispatching.get ( ) ) { return ; } isDispatching.set ( true ) ; try { java.util.Queue < com.google.common.eventbus.EventBus.EventWithSubscriber > events = eventsToDispatch.get ( ) ; com.google.common.eventbus.EventBus.EventWithSubscriber eventWithSubscriber ; while ( ( eventWithSubscriber = events.poll ( ) ) != null ) { dispatch ( eventWithSubscriber.event , eventWithSubscriber.subscriber ) ; } } finally { isDispatching.remove ( ) ; eventsToDispatch.remove ( ) ; } }
public void setStatusHints ( java.lang.String callId , android.telecom.StatusHints statusHints , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , "CSW.sSH" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setStatusHints %s %s" , callId , statusHints ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setStatusHints ( statusHints ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void testPocBug_35644815 ( ) throws java.lang.Exception { enableAdbRoot ( getDevice ( ) ) ; if ( containsDriver ( getDevice ( ) , "/sys/kernel/debug/ion/clients/pids/" ) ) { java.lang.String pocOut = android.security.cts.AdbUtils.runPoc ( "Bug-35644815" , getDevice ( ) , 60 ) ; assertNotMatches ( "[\\s\\n\\S]*INFO DISC FLAG[\\s\\n\\S]*" , pocOut ) ; } }
public void testDataDisabledIcon ( ) { setupNetworkController ( ) ; org.mockito.Mockito.when ( mMockTm.getDataEnabled ( mSubId ) ) . thenReturn ( false ) ; setupDefaultSignal ( ) ; updateDataConnectionState ( TelephonyManager.DATA_DISCONNECTED , 0 ) ; setConnectivity ( NetworkCapabilities.TRANSPORT_CELLULAR , false , false ) ; verifyDataIndicators ( TelephonyIcons.ICON_DATA_DISABLED , TelephonyIcons.QS_ICON_DATA_DISABLED ) ; }
public static com.android.manifmerger.XmlDocument load ( com.android.manifmerger.KeyResolver < java.lang.String > selectors , com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver < com.android.manifmerger.ManifestMerger2.SystemProperty > systemPropertyResolver , com.android.manifmerger.XmlLoader.SourceLocation sourceLocation , java.lang.String xml , com.android.manifmerger.XmlDocument.Type type , com.google.common.base.Optional < java.lang.String > mainManifestPackageName ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( xml ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , sourceLocation , selectors , systemPropertyResolver , domDocument.getDocumentElement ( ) , type , mainManifestPackageName ) : null ; }
public void dismissKeyguardLw ( ) { if ( mKeyguardMediator.isShowing ( ) ) { mHandler.post ( new java.lang.Runnable ( ) { public void run ( ) { if ( mKeyguardMediator.isDismissable ( ) ) { mKeyguardMediator.keyguardDone ( false , true ) ; } else { mKeyguardMediator.dismiss ( ) ; } } } ) ; } }
public void testBatchAndFlush ( ) throws java.lang.Exception { java.util.ArrayList < java.lang.Throwable > errorsFound = new java.util.ArrayList < > ( ) ; for ( android.hardware.Sensor sensor : mSensorList ) { verifyRegisterListenerCallFlush ( sensor , null , errorsFound ) ; } assertOnErrors ( errorsFound ) ; }
public void connectionFailureDoesNotSetHasEverConnectedTrue ( ) throws java.lang.Exception { testDhcpFailure ( ) ; verify ( mWifiConfigManager , never ( ) ) . updateNetworkAfterConnect ( 0 ) ; }
private void makeA2dpDeviceUnavailableNow ( java.lang.String address ) { synchronized ( mA2dpAvrcpLock ) { mAvrcpAbsVolSupported = false ; } android.media.AudioSystem.setDeviceConnectionState ( AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP , AudioSystem.DEVICE_STATE_UNAVAILABLE , address ) ; mConnectedDevices.remove ( AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP ) ; synchronized ( mCurAudioRoutes ) { if ( ( mCurAudioRoutes.mBluetoothName ) != null ) { mCurAudioRoutes.mBluetoothName = null ; android.media.AudioService.sendMsg ( mAudioHandler , android.media.AudioService.MSG_REPORT_NEW_ROUTES , android.media.AudioService.SENDMSG_NOOP , 0 , 0 , null , 0 ) ; } } }
public void clearAll ( ) { mNetworkCapabilities = mTransportTypes = 0 ; mLinkUpBandwidthKbps = mLinkDownBandwidthKbps = android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED ; mNetworkSpecifier = null ; mSignalStrength = android.net.NetworkCapabilities.SIGNAL_STRENGTH_UNSPECIFIED ; mUids = null ; mEstablishingVpnAppUid = android.net.NetworkCapabilities.INVALID_UID ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ! ( obj instanceof android.hardware.radio.RadioManager.BandConfig ) ) return false ; android.hardware.radio.RadioManager.BandConfig other = ( ( android.hardware.radio.RadioManager.BandConfig ) ( obj ) ) ; android.hardware.radio.RadioManager.BandDescriptor otherDesc = other.getDescriptor ( ) ; if ( ( ( mDescriptor ) == null ) != ( otherDesc == null ) ) return false ; if ( ( ( mDescriptor ) != null ) && ( ! ( mDescriptor.equals ( otherDesc ) ) ) ) return false ; return true ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; java.util.ArrayList < java.lang.Object > l = new java.util.ArrayList < > ( 100 ) ; Main.prefetchClassNames ( ) ; Main.doTest ( l ) ; }
public void updateRecordedProgram ( com.android.tv.dvr.data.RecordedProgram r ) { long id = r.getId ( ) ; if ( mRecordedPrograms.containsKey ( id ) ) { mRecordedPrograms.put ( id , r ) ; notifyRecordedProgramsChanged ( r ) ; } else { throw new java.lang.IllegalArgumentException ( ( "Recording not found:" + r ) ) ; } }
private android.net.wifi.WifiConfiguration updateExistingInternalWifiConfigurationFromExternal ( android.net.wifi.WifiConfiguration config , int uid ) { android.net.wifi.WifiConfiguration existingConfig = new android.net.wifi.WifiConfiguration ( getInternalConfiguredNetwork ( config ) ) ; mergeWithInternalWifiConfiguration ( config , existingConfig ) ; existingConfig.lastUpdateUid = uid ; existingConfig.lastUpdateName = mContext.getPackageManager ( ) . getNameForUid ( uid ) ; existingConfig.updateTime = com.android.server.wifi.WifiConfigManager.createDebugTimeStampString ( mClock.getWallClockMillis ( ) ) ; return existingConfig ; }
public int dexopt ( java.lang.String apkPath , int uid , java.lang.String pkgName , java.lang.String instructionSet , int dexoptNeeded , @ android.annotation.Nullable java.lang.String outputPath , int dexFlags ) { if ( ! ( com.android.server.pm.Installer.isValidInstructionSet ( instructionSet ) ) ) { android.util.Slog.e ( com.android.server.pm.Installer.TAG , ( "Invalid instruction set: " + instructionSet ) ) ; return - 1 ; } return mInstaller.dexopt ( apkPath , uid , pkgName , instructionSet , dexoptNeeded , outputPath , dexFlags ) ; }
public void writeTo ( com.google.protobuf.nano.CodedOutputByteBufferNano output ) throws java.io.IOException { if ( ( unknownFieldData ) == null ) { return ; } for ( int i = 0 ; i < ( unknownFieldData.size ( ) ) ; i ++ ) { com.google.protobuf.nano.FieldData field = unknownFieldData.dataAt ( i ) ; field.writeTo ( output ) ; } }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType == ( com.android.ide.common.api.InsertType.CREATE ) ) { com.android.ide.common.api.INode hint = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , com.android.ide.common.layout.LayoutConstants.VALUE_FILL_PARENT ) ; com.android.ide.common.api.INode primary = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_BELOW , "@android:id/hint" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , com.android.ide.common.layout.LayoutConstants.VALUE_FILL_PARENT ) ; } }
void bindPaymentServiceLocked ( int userId , android.content.ComponentName service ) { unbindPaymentServiceLocked ( ) ; android.content.Intent intent = new android.content.Intent ( android.nfc.cardemulation.HostApduService.SERVICE_INTERFACE ) ; intent.setComponent ( service ) ; mLastBoundPaymentServiceName = service ; if ( mContext.bindServiceAsUser ( intent , mPaymentConnection , Context.BIND_AUTO_CREATE , new android.os.UserHandle ( userId ) ) ) { mPaymentServiceBound = true ; } else { android.util.Log.e ( com.android.nfc.cardemulation.HostEmulationManager.TAG , "Could not bind (persistent) payment service." ) ; } }
void checkPositionIndex ( int index ) { if ( ( index < 0 ) || ( index > ( ( to ) - ( from ) ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( "index=" + index ) + ", size=" ) + ( ( to ) - ( from ) ) ) ) ; } }
private void internalClearDisconnected ( ) { mRingingCall.clearDisconnected ( ) ; mForegroundCall.clearDisconnected ( ) ; mBackgroundCall.clearDisconnected ( ) ; }
public void onContactInfoComplete ( java.lang.String callId , com.android.incallui.ContactInfoCache.ContactCacheEntry entry ) { com.android.incallui.call.DialerCall call = com.android.incallui.call.CallList.getInstance ( ) . getCallById ( callId ) ; if ( call != null ) { call.getLogState ( ) . contactLookupResult = entry.contactLookupResult ; buildAndSendNotification ( com.android.incallui.call.CallList.getInstance ( ) , call , entry ) ; } }
public static int sendto ( java.io.FileDescriptor fd , java.nio.ByteBuffer buffer , int flags , java.net.InetAddress inetAddress , int port ) throws java.io.IOException { boolean isDatagram = inetAddress != null ; if ( ( ! isDatagram ) && ( ( buffer.remaining ( ) ) == 0 ) ) { return 0 ; } int result ; try { result = Libcore.os.sendto ( fd , buffer , flags , inetAddress , port ) ; } catch ( android.system.ErrnoException errnoException ) { result = libcore.io.IoBridge.maybeThrowAfterSendto ( isDatagram , errnoException ) ; } return result ; }
public void sendSms ( int token , int messageRef , java.lang.String format , java.lang.String smsc , boolean isRetry , byte [ ] pdu ) throws com.android.ims.ImsException { try { mMmTelFeatureConnection.sendSms ( token , messageRef , format , smsc , isRetry , pdu ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "sendSms()" , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void testLauncherNonExportedAppFails ( ) throws java.lang.Exception { if ( ( ! ( mHasLauncherApps ) ) || ( mHasLiveTvFeature ) ) { return ; } installApp ( com.android.cts.devicepolicy.SIMPLE_APP_APK ) ; try { int serialNumber = getUserSerialNumber ( 0 ) ; assertTrue ( runDeviceTests ( com.android.cts.devicepolicy.LAUNCHER_TESTS_PKG , com.android.cts.devicepolicy.LAUNCHER_TESTS_CLASS , "testLaunchNonExportActivityFails" , 0 , ( "-e testUser " + serialNumber ) ) ) ; } finally { getDevice ( ) . uninstallPackage ( com.android.cts.devicepolicy.SIMPLE_APP_PKG ) ; } }
private int getTypeCountInDex ( @ javax.annotation.Nonnull java.io.File dex ) throws java.io.FileNotFoundException , java.io.IOException { assert dex.isFile ( ) ; int count = 0 ; for ( com.android.jack.dx.io.ClassDef def : new com.android.jack.dx.io.DexBuffer ( dex ) . classDefs ( ) ) { count ++ ; } return count ; }
public void testStartStopFlow ( ) throws java.lang.Exception { mInOrder = org.mockito.Mockito.inOrder ( mServiceManagerMock , mWifiMock , mManagerStatusCallbackMock ) ; executeAndValidateInitializationSequence ( ) ; executeAndValidateStartupSequence ( ) ; mDut.stop ( ) ; mTestLooper.dispatchAll ( ) ; mInOrder.verify ( mWifiMock ) . stop ( ) ; mInOrder.verify ( mManagerStatusCallbackMock ) . onStop ( ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mManagerStatusCallbackMock ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { if ( ( mScanResults ) != null ) { dest.writeInt ( mScanResults.length ) ; for ( int i = 0 ; i < ( mScanResults.length ) ; i ++ ) { dest.writeParcelable ( mScanResults [ i ] , flags ) ; } } else { dest.writeInt ( 0 ) ; } dest.writeParcelable ( mCurrentSelectedConfig , flags ) ; dest.writeParcelable ( mRequiredCapabilities , flags ) ; }
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc , boolean itf ) { if ( opcode == ( org.objectweb.asm.Opcodes.INVOKESTATIC ) ) { annotations.CalledByIndy callsite = callsiteMap.get ( name ) ; if ( callsite != null ) { insertIndy ( callsite.fieldOrMethodName ( ) , desc , callsite ) ; return ; } } mv.visitMethodInsn ( opcode , owner , name , desc , itf ) ; }
public void sendEnvelope ( java.lang.String contents , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( RILConstants.RIL_REQUEST_STK_SEND_ENVELOPE_COMMAND , response , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeString ( contents ) ; send ( rr ) ; }
void addEntry ( int hash , K key , V value , int bucketIndex ) { if ( ( ( size ) >= ( threshold ) ) && ( null != ( table [ bucketIndex ] ) ) ) { resize ( ( 2 * ( table.length ) ) ) ; hash = ( null != key ) ? java.util.sun.misc.Hashing.singleWordWangJenkinsHash ( key ) : 0 ; bucketIndex = java.util.HashMap.indexFor ( hash , table.length ) ; } createEntry ( hash , key , value , bucketIndex ) ; }
public void testGetPath_NoAttributeSpecified ( ) { initializePsiClass ( "\"\"" , "\"\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.idea.appengine.validation.RestSignatureInspection inspection = new com.google.gct.idea.appengine.validation.RestSignatureInspection ( ) ; java.lang.String path = inspection.getPath ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "foo" , path ) ; }
public void testMethodDeclaredAnnotation_repeated ( ) throws java.lang.Exception { java.lang.Class < ? extends java.lang.annotation.Annotation > repeated = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Repeated.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodWithoutAnnotations ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationOddity ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationExplicitSingle ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotation ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodStaticSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodAbstractClass.getMethodAbstractSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; java.lang.Class < ? extends java.lang.annotation.Annotation > container = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Container.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodWithoutAnnotations ( ) , container , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationOddity ( ) , container , "@Container({@Repeated(2), @Repeated(3)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationExplicitSingle ( ) , container , "@Container({@Repeated(1)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotation ( ) , container , "@Container({@Repeated(1), @Repeated(2)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodSingleAnnotation ( ) , container , null ) ; }
public void connectionEventStartedDoesNotEnableTracingIfReleaseFileIsMissing ( ) throws java.lang.Exception { mTraceReleaseFile.delete ( ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; org.junit.Assert.assertEquals ( "0" , libcore.io.IoUtils.readFileAsString ( mTraceEnableFile.getPath ( ) ) ) ; }
int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "getConnectionState: " + ( device.getAddress ( ) ) ) ) ; if ( ( mInputDevices.get ( device ) ) == null ) { return android.bluetooth.BluetoothInputDevice.STATE_DISCONNECTED ; } return mInputDevices.get ( device ) ; }
public void testPerformanceSummaryAddedProfilingPoint ( ) throws java.io.FileNotFoundException , java.io.IOException { setUp ( false ) ; com.android.vts.util.PerformanceSummary today = dailySummaries.get ( 0 ) ; com.android.vts.util.ProfilingPointSummary summary = new com.android.vts.util.ProfilingPointSummary ( ) ; com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode mode = com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_INCREASING ; com.android.vts.entity.ProfilingPointRunEntity pt = com.android.vts.servlet.VtsPerformanceJobServletTest.createProfilingReport ( com.android.vts.servlet.VtsPerformanceJobServletTest.LABELS , com.android.vts.servlet.VtsPerformanceJobServletTest.HIGH_VALS , mode ) ; summary.update ( pt ) ; summary.update ( pt ) ; today.insertProfilingPointSummary ( "p3" , summary ) ; java.lang.String output = com.android.vts.servlet.VtsPerformanceJobServlet.getPerformanceSummary ( "test" , dailySummaries , legendLabels ) ; com.android.vts.servlet.VtsPerformanceJobServletTest.compareToBaseline ( output , "performanceSummary3.html" ) ; }
public void connectResponse ( int token , int sapConnectRsp , int maxMsgSize ) { android.util.Log.d ( com.android.bluetooth.sap.SapRilReceiver.TAG , ( ( ( ( ( "connectResponse: token " + token ) + " sapConnectRsp " ) + sapConnectRsp ) + " maxMsgSize " ) + maxMsgSize ) ) ; com.android.bluetooth.sap.SapService.notifyUpdateWakeLock ( mSapServiceHandler ) ; com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage ( SapMessage.ID_CONNECT_RESP ) ; sapMessage.setConnectionStatus ( sapConnectRsp ) ; if ( sapConnectRsp == ( SapMessage.CON_STATUS_ERROR_MAX_MSG_SIZE_UNSUPPORTED ) ) { sapMessage.setMaxMsgSize ( maxMsgSize ) ; } sapMessage.setResultCode ( SapMessage.INVALID_VALUE ) ; removeOngoingReqAndSendMessage ( token , sapMessage ) ; }
public void setSuppServiceNotifications ( boolean enable , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION , result , mRILDefaultWorkSource ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( ( enable ? 1 : 0 ) ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
private static boolean isAttributeValueLink ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.XmlContext context ) { org.w3c.dom.Attr attribute = context.getAttribute ( ) ; if ( attribute == null ) { return false ; } if ( ( ( ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isClassAttribute ( context ) ) || ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isOnClickAttribute ( context ) ) ) || ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isManifestName ( context ) ) ) || ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isStyleAttribute ( context ) ) ) { return true ; } java.lang.String value = attribute.getValue ( ) ; if ( value.startsWith ( "@+" ) ) { return false ; } com.android.util.Pair < com.android.resources.ResourceType , java.lang.String > resource = com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource ( value ) ; if ( resource != null ) { com.android.resources.ResourceType type = resource.getFirst ( ) ; if ( type != null ) { return true ; } } return false ; }
java.util.List < java.lang.String > getSecondaryDexPathsFromProtectedDirs ( ) { java.util.List < java.lang.String > paths = new java.util.ArrayList < > ( ) ; paths.add ( ( ( mPackageInfo.applicationInfo.deviceProtectedDataDir ) + "/secondary6.dex" ) ) ; paths.add ( ( ( mPackageInfo.applicationInfo.credentialProtectedDataDir ) + "/secondary7.dex" ) ) ; return paths ; }
public void getOperator ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_OPERATOR , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
public boolean dumpProfiles ( int uid , java.lang.String packageName , java.lang.String codePaths ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return false ; try { return mInstalld.dumpProfiles ( uid , packageName , codePaths ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw com.android.server.pm.Installer.InstallerException.from ( e ) ; } }
public void test ( ) throws java.lang.Exception { mScopes = null ; mEnabled = com.google.common.collect.Sets.newHashSet ( com.android.tools.lint.checks.MissingClassDetector.MISSING ) ; assertEquals ( ( "AndroidManifest.xml:13: Error: Class referenced in the manifest, test.pkg.TestProvider, was not found in the project or the libraries [MissingRegistered]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( " <activity android:name=\".TestProvider\" />\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.TestProvider2, was not found in the project or the libraries [MissingRegistered]\n" ) + " <service android:name=\"test.pkg.TestProvider2\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:15: Error: Class referenced in the manifest, test.pkg.TestService, was not found in the project or the libraries [MissingRegistered]\n" ) + " <provider android:name=\".TestService\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:16: Error: Class referenced in the manifest, test.pkg.OnClickActivity, was not found in the project or the libraries [MissingRegistered]\n" ) + " <receiver android:name=\"OnClickActivity\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:17: Error: Class referenced in the manifest, test.pkg.TestReceiver, was not found in the project or the libraries [MissingRegistered]\n" ) + " <service android:name=\"TestReceiver\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "5 errors, 0 warnings\n" ) ) , lintProject ( "bytecode/AndroidManifestWrongRegs.xml=>AndroidManifest.xml" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" , "bytecode/.classpath=>.classpath" ) ) ; }
public com.google.common.collect.ImmutableList < java.lang.String > getEvaluatedExpansion ( com.google.devtools.common.options.OptionDefinition optionDefinition , @ javax.annotation.Nullable java.lang.String unparsedValue ) throws com.google.devtools.common.options.OptionsParsingException { com.google.devtools.common.options.OptionsData.ExpansionData expansionData = expansionDataForFields.get ( optionDefinition ) ; if ( expansionData == null ) { return com.google.devtools.common.options.OptionsData.EMPTY_EXPANSION ; } return expansionData.getExpansion ( new com.google.devtools.common.options.ExpansionContext ( this , optionDefinition , unparsedValue ) ) ; }
java.io.InputStream openRead ( @ javax.annotation.Nonnull com.android.sched.vfs.ReadZipFS.ZipVFile file ) { try { VFSStatCategory.ZIP_READ.getCounterStat ( getTracer ( ) , infoString ) . incValue ( ) ; return zipFile.getInputStream ( file.getZipEntry ( ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } }
public static void resetSettings ( ) { if ( ! ( android.autofillservice.cts.Helper.hasAutofillFeature ( ) ) ) return ; android.autofillservice.cts.Helper.runShellCommand ( "settings delete secure %s" , android.provider.Settings.Secure.AUTOFILL_SERVICE ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( R.drawable.icon2 , "tock tock tock" , java.lang.System.currentTimeMillis ( ) ) ; n.setLatestEventInfo ( this , "Persistent #2" , "Notify me!!!" , makeIntent ( ) ) ; n.defaults = android.app.Notification.DEFAULT_VIBRATE ; mNM.notify ( 2 , n ) ; }
private boolean isUserMobileDataEnabled ( int subId ) { boolean retVal = false ; try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) retVal = telephony.isUserDataEnabled ( subId ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#isUserDataEnabled" , e ) ; } catch ( java.lang.NullPointerException e ) { } return retVal ; }
public void forEachRemaining ( java.util.function.Consumer < ? super E > action ) { i.forEachRemaining ( action ) ; }
private int getCallbackAction ( ) { com.android.dialer.common.Assert.checkState ( ( ! ( callDetailsEntries.isEmpty ( ) ) ) ) ; com.android.dialer.calldetails.CallDetailsEntries.CallDetailsEntry entry = callDetailsEntries.get ( 0 ) ; return com.android.dialer.calllogutils.CallbackActionHelper.getCallbackAction ( contact.getNumber ( ) , entry.getFeatures ( ) , entry.getIsDuoCall ( ) ) ; }
boolean stopVoiceRecognition ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; synchronized ( mStateMachines ) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get ( device ) ; if ( stateMachine == null ) { return false ; } int connectionState = stateMachine.getConnectionState ( ) ; if ( ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) && ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTING ) ) ) { return false ; } mVoiceRecognitionStarted = false ; stateMachine.sendMessage ( HeadsetStateMachine.VOICE_RECOGNITION_STOP , device ) ; } return true ; }
public int computeVerticalScrollExtent ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { int ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer call ( ) { return computeVerticalScrollExtent ( ) ; } } ) ; return ret ; } return mAwContents.computeVerticalScrollExtent ( ) ; }
public void validateUserCredentialWithoutUsername ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithUserCredential ( ) ; cred.getUserCredential ( ) . setUsername ( null ) ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
private static boolean isNonBridgeDefaultMethod ( int access ) { return com.google.devtools.build.android.desugar.BitFlags.noneSet ( access , ( ( ( ( org.objectweb.asm.Opcodes.ACC_ABSTRACT ) | ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) | ( org.objectweb.asm.Opcodes.ACC_BRIDGE ) ) | ( org.objectweb.asm.Opcodes.ACC_PRIVATE ) ) ) ; }
public void testCardLoaded ( ) { testPowerOn ( ) ; org.mockito.Mockito.doReturn ( CardState.CARDSTATE_PRESENT ) . when ( mUiccCard ) . getCardState ( ) ; mIccCardProxyUT.sendMessage ( mIccCardProxyUT.obtainMessage ( com.android.internal.telephony.uicc.IccCardProxyTest.EVENT_ICC_CHANGED ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( com.android.internal.telephony.uicc.IccCardProxyTest.SCARY_SLEEP_MS ) ; org.junit.Assert.assertEquals ( mIccCardProxyUT.getState ( ) , State.NOT_READY ) ; }
public com.google.common.collect.ImmutableList < java.io.File > getTestedApks ( int density , @ com.android.annotations.Nullable java.lang.String language , @ com.android.annotations.Nullable java.lang.String region , @ com.android.annotations.NonNull java.util.List < java.lang.String > abis ) { com.google.common.collect.ImmutableList.Builder < java.io.File > testedApks = com.google.common.collect.ImmutableList.builder ( ) ; testedApks.addAll ( testedConfiguration.getFiles ( ) ) ; return testedApks.build ( ) ; }
public static < I , O > com.google.common.util.concurrent.ListenableFuture < O > transform ( com.google.common.util.concurrent.ListenableFuture < I > input , com.google.common.util.concurrent.AsyncFunction < ? super I , ? extends O > function ) { com.google.common.util.concurrent.Futures.ChainingListenableFuture < I , O > output = new com.google.common.util.concurrent.Futures.ChainingListenableFuture < I , O > ( function , input ) ; input.addListener ( output , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; return output ; }
private void toggleStar ( android.view.MenuItem starredMenuItem , boolean isStarred ) { com.android.contacts.detail.ContactDisplayUtils.configureStarredMenuItem ( starredMenuItem , mContactData.isDirectoryEntry ( ) , mContactData.isUserProfile ( ) , ( ! isStarred ) ) ; final android.content.Intent intent = com.android.contacts.ContactSaveService.createSetStarredIntent ( this , mContactData.getLookupUri ( ) , ( ! isStarred ) ) ; startService ( intent ) ; final java.lang.CharSequence accessibilityText = ( ! isStarred ) ? getResources ( ) . getText ( R.string.description_action_menu_add_star ) : getResources ( ) . getText ( R.string.description_action_menu_remove_star ) ; mScroller.announceForAccessibility ( accessibilityText ) ; }
private int calculateContainerSize ( java.io.File apkFile , boolean forwardLocked , java.lang.String abiOverride ) throws java.io.IOException { com.android.internal.content.NativeLibraryHelper.ApkHandle handle = new com.android.internal.content.NativeLibraryHelper.ApkHandle ( apkFile ) ; final int abi = com.android.internal.content.NativeLibraryHelper.findSupportedAbi ( handle , ( abiOverride != null ? new java.lang.String [ ] { abiOverride } : android.os.Build.SUPPORTED_ABIS ) ) ; try { return calculateContainerSize ( handle , apkFile , abi , forwardLocked ) ; } finally { handle.close ( ) ; } }
public java.lang.Object [ ] getElements ( java.lang.Object inputElement ) { synchronized ( this ) { if ( ( ( mSelectedNode ) != null ) && ( inputElement instanceof com.android.hierarchyviewerlib.models.TreeViewModel ) ) { if ( ( mSelectedNode.viewNode.categories.size ( ) ) == 0 ) { return mSelectedNode.viewNode.properties.toArray ( new com.android.hierarchyviewerlib.models.ViewNode.Property [ mSelectedNode.viewNode.properties.size ( ) ] ) ; } else { return mSelectedNode.viewNode.categories.toArray ( new java.lang.String [ mSelectedNode.viewNode.categories.size ( ) ] ) ; } } return new java.lang.Object [ 0 ] ; } }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.gallery_2 ) ; android.database.Cursor c = getContentResolver ( ) . query ( Contacts.CONTENT_URI , com.example.android.apis.view.Gallery2.CONTACT_PROJECTION , null , null , null ) ; startManagingCursor ( c ) ; android.widget.SpinnerAdapter adapter = new android.widget.SimpleCursorAdapter ( this , android.R.layout.simple_gallery_item , c , new java.lang.String [ ] { android.provider.ContactsContract.Contacts.DISPLAY_NAME } , new int [ ] { android.R.id.text1 } ) ; android.widget.Gallery g = ( ( android.widget.Gallery ) ( findViewById ( R.id.gallery ) ) ) ; g.setAdapter ( adapter ) ; }
public void put ( com.ibm.icu.impl.UResource.Key key , com.ibm.icu.impl.UResource.Value value , boolean noFallback ) { com.ibm.icu.impl.UResource.Table rules = value.getTable ( ) ; for ( int i = 0 ; rules.getKeyAndValue ( i , key , value ) ; ++ i ) { int setNum = com.ibm.icu.impl.DayPeriodRules.parseSetNum ( key.toString ( ) ) ; if ( setNum > ( data.maxRuleSetNum ) ) { data.maxRuleSetNum = setNum ; } } }
public byte [ ] getOctetString ( ) throws java.io.IOException { if ( ( buffer.read ( ) ) != ( sun.security.util.DerValue.tag_OctetString ) ) throw new java.io.IOException ( "DER input not an octet string" ) ; int length = sun.security.util.DerInputStream.getLength ( buffer ) ; byte [ ] retval = new byte [ length ] ; if ( ( length != 0 ) && ( ( buffer.read ( retval ) ) != length ) ) throw new java.io.IOException ( "Short read of DER octet string" ) ; return retval ; }
private int addDefaultRingtoneItem ( android.widget.ListView listView ) { if ( ( mType ) == ( android.media.RingtoneManager.TYPE_NOTIFICATION ) ) { return addStaticItem ( listView , com.android.internal.R.string.notification_sound_default ) ; } else if ( ( mType ) == ( android.media.RingtoneManager.TYPE_ALARM ) ) { return addStaticItem ( listView , com.android.internal.R.string.alarm_sound_default ) ; } return addStaticItem ( listView , com.android.internal.R.string.ringtone_default ) ; }
private void sendDisplayPinIntent ( byte [ ] address , int pin , int variant ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mRemoteDevices.getDevice ( address ) ) ; if ( pin != 0 ) { intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_KEY , pin ) ; } intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_VARIANT , variant ) ; intent.setFlags ( Intent.FLAG_RECEIVER_FOREGROUND ) ; intent.addFlags ( Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND ) ; mAdapterService.sendOrderedBroadcast ( intent , mAdapterService.BLUETOOTH_ADMIN_PERM ) ; }
public int getCdmaEriIconIndexForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "getCdmaEriIconIndexForSubscriber" ) ) ) { return - 1 ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.getCdmaEriIconIndex ( ) ; } else { return - 1 ; } }
public void stopTimer ( java.lang.String timerEventName ) { com.android.dialer.metrics.StubMetrics.StubTimerEvent stubTimerEvent = namedEvents.remove ( timerEventName ) ; if ( stubTimerEvent == null ) { return ; } com.android.dialer.common.LogUtil.d ( "StubMetrics.stopTimer" , "%s took %dms" , timerEventName , ( ( android.os.SystemClock.elapsedRealtime ( ) ) - ( stubTimerEvent.startTime ) ) ) ; }
private void replyHalfConnected ( int status ) { android.os.Message msg = mSrcHandler.obtainMessage ( com.android.internal.util.AsyncChannel.CMD_CHANNEL_HALF_CONNECTED ) ; msg.arg1 = status ; msg.obj = this ; msg.replyTo = mDstMessenger ; if ( ( mConnection ) == null ) { mDeathMonitor = new com.android.internal.util.AsyncChannel.DeathMonitor ( ) ; try { mDstMessenger.getBinder ( ) . linkToDeath ( mDeathMonitor , 0 ) ; } catch ( android.os.RemoteException e ) { mDeathMonitor = null ; msg.arg1 = com.android.internal.util.AsyncChannel.STATUS_BINDING_UNSUCCESSFUL ; } } mSrcHandler.sendMessage ( msg ) ; }
protected void initializeScriptAndBuffers ( android.graphics.Bitmap inputImage , com.android.rs.refocus.LayerInfo focalLayer ) { scriptC = new com.android.rs.refocus.renderscript.ScriptC_layered_filter_fast_f32 ( renderScript ) ; com.android.rs.refocus.KernelDataForRenderScript.setUseNewRS ( false ) ; int margin = ( com.android.rs.refocus.KernelDataForRenderScript.getMaxKernelRadius ( ) ) + 1 ; buffers = new com.android.rs.refocus.f32.ImageBuffersForRenderScriptF32 ( inputImage , margin , renderScript , scriptC ) ; buffers.initializeRenderScript ( focalLayer , scriptC ) ; }
public boolean isLeapYear ( long prolepticYear ) { checkCalendarInit ( ) ; if ( ( prolepticYear < ( getMinimumYear ( ) ) ) || ( prolepticYear > ( getMaximumYear ( ) ) ) ) { return false ; } int len = getYearLength ( ( ( int ) ( prolepticYear ) ) ) ; return len > 354 ; }
protected void onResume ( ) { super . onResume ( ) ; if ( ( mTestState ) == ( com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.IDLE_ON_TEST_STATE_NOT_IN_PROGRESS ) ) { mStartButton.setEnabled ( true ) ; mContinueInstructionTextView.setVisibility ( View.GONE ) ; } }
public void testDnsResolutionFailure ( ) throws java.lang.Exception { assertFalse ( mClient.requestTime ( "ntp.server.doesnotexist.example" , 5000 , mNetwork ) ) ; }
public void test_bind_unresolvedAddress ( ) throws java.io.IOException { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open ( ) ; try { ssc.socket ( ) . bind ( new java.net.InetSocketAddress ( "unresolvedname" , 31415 ) ) ; fail ( ) ; } catch ( java.net.SocketException expected ) { } assertNull ( ssc.socket ( ) . getLocalSocketAddress ( ) ) ; assertTrue ( ssc.isOpen ( ) ) ; ssc.close ( ) ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent arg0 ) { dispose ( ) ; }
public void connectionForDeprecatedGetRequest ( ) throws java.lang.Exception { com.android.volley.mock.TestRequest.DeprecatedGet request = new com.android.volley.mock.TestRequest.DeprecatedGet ( ) ; org.junit.Assert.assertEquals ( request.getMethod ( ) , Method.DEPRECATED_GET_OR_POST ) ; com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest ( mMockConnection , request ) ; org.mockito.Mockito.verify ( mMockConnection , org.mockito.Mockito.never ( ) ) . setRequestMethod ( org.mockito.ArgumentMatchers.anyString ( ) ) ; org.mockito.Mockito.verify ( mMockConnection , org.mockito.Mockito.never ( ) ) . setDoOutput ( true ) ; }
public boolean setInstallLocation ( int loc ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.WRITE_SECURE_SETTINGS , null ) ; if ( ( getInstallLocation ( ) ) == loc ) { return true ; } if ( ( ( loc == ( com.android.internal.content.PackageHelper.APP_INSTALL_AUTO ) ) || ( loc == ( com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL ) ) ) || ( loc == ( com.android.internal.content.PackageHelper.APP_INSTALL_EXTERNAL ) ) ) { android.provider.Settings.Global.putInt ( mContext.getContentResolver ( ) , android.provider.Settings.Global.DEFAULT_INSTALL_LOCATION , loc ) ; return true ; } return false ; }
public java.security.KeyPair generateKeyPair ( ) { if ( ( group ) == null ) { final java.lang.String curveName = org.conscrypt.OpenSSLECKeyPairGenerator.SIZE_TO_CURVE_NAME.get ( org.conscrypt.OpenSSLECKeyPairGenerator.DEFAULT_KEY_SIZE ) ; group = org.conscrypt.OpenSSLECGroupContext.getCurveByName ( curveName ) ; } final org.conscrypt.OpenSSLKey key = new org.conscrypt.OpenSSLKey ( org.conscrypt.NativeCrypto.EC_KEY_generate_key ( group.getNativeRef ( ) ) ) ; return new java.security.KeyPair ( new org.conscrypt.OpenSSLECPublicKey ( group , key ) , new org.conscrypt.OpenSSLECPrivateKey ( group , key ) ) ; }
public void testLoadSample_1 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = getTestResource ( "/com/android/sdklib/testdata/addons_list_sample_1.xml" ) ; int version = mFetcher._getXmlSchemaVersion ( xmlStream ) ; assertEquals ( 1 , version ) ; java.lang.Boolean [ ] validatorFound = new java.lang.Boolean [ ] { java.lang.Boolean.FALSE } ; java.lang.String [ ] validationError = new java.lang.String [ ] { null } ; java.lang.String url = "not-a-valid-url://addons_list.xml" ; java.lang.String uri = mFetcher._validateXml ( xmlStream , url , version , validationError , validatorFound ) ; assertEquals ( java.lang.Boolean.TRUE , validatorFound [ 0 ] ) ; assertEquals ( null , validationError [ 0 ] ) ; assertEquals ( com.android.sdklib.repository.SdkAddonsListConstants.getSchemaUri ( 1 ) , uri ) ; com.android.sdklib.internal.repository.MockMonitor monitor = new com.android.sdklib.internal.repository.MockMonitor ( ) ; org.w3c.dom.Document doc = mFetcher._getDocument ( xmlStream , monitor ) ; assertNotNull ( doc ) ; com.android.sdklib.internal.repository.AddonsListFetcher.Site [ ] result = mFetcher._parseAddonsList ( doc , uri , monitor ) ; assertEquals ( "" , monitor.getCapturedDescriptions ( ) ) ; assertEquals ( "" , monitor.getCapturedResults ( ) ) ; assertEquals ( 3 , result.length ) ; assertEquals ( "My Example Add-ons." , result [ 0 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/my_addons.xml" , result [ 0 ] . getUrl ( ) ) ; assertEquals ( "ありがとうございます。" , result [ 1 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.co.jp/addons.xml" , result [ 1 ] . getUrl ( ) ) ; assertEquals ( "Example of directory URL." , result [ 2 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/" , result [ 2 ] . getUrl ( ) ) ; }
public static void assertDefaultCipherSuites ( java.lang.String [ ] cipherSuites ) { libcore.java.security.StandardNames.assertValidCipherSuites ( libcore.java.security.StandardNames.CIPHER_SUITES , cipherSuites ) ; assertEquals ( libcore.java.security.StandardNames.CIPHER_SUITES_DEFAULT , java.util.Arrays.asList ( cipherSuites ) ) ; if ( ! ( libcore.java.security.StandardNames.IS_RI ) ) { java.util.List < java.lang.String > disallowedDefaultCipherSuites = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String cipherSuite : cipherSuites ) { if ( ! ( libcore.java.security.StandardNames.isPermittedDefaultCipherSuite ( cipherSuite ) ) ) { disallowedDefaultCipherSuites.add ( cipherSuite ) ; } } assertEquals ( java.util.Collections.EMPTY_LIST , disallowedDefaultCipherSuites ) ; } }
private boolean isRoamIndForHomeSystem ( java.lang.String roamInd ) { java.lang.String [ ] homeRoamIndicators = android.content.res.Resources.getSystem ( ) . getStringArray ( com.android.internal.R.array.config_cdma_home_system ) ; log ( ( "isRoamIndForHomeSystem: homeRoamIndicators=" + ( java.util.Arrays.toString ( homeRoamIndicators ) ) ) ) ; if ( homeRoamIndicators != null ) { for ( java.lang.String homeRoamInd : homeRoamIndicators ) { if ( homeRoamInd.equals ( roamInd ) ) { return true ; } } log ( ( "isRoamIndForHomeSystem: No match found against list for roamInd=" + roamInd ) ) ; return false ; } log ( "isRoamIndForHomeSystem: No list found" ) ; return false ; }
public void testAddAll2_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.addAll ( ( ( list.size ( ) ) + 1 ) , new java.util.LinkedList ( ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 0 ] ) ; java.lang.System.out.println ( "thread test starting" ) ; Main.testThreadCapacity ( ) ; Main.testThreadDaemons ( ) ; Main.testSleepZero ( ) ; Main.testSetName ( ) ; Main.testThreadPriorities ( ) ; Main.testMainThreadGroup ( ) ; Main.testMainThreadAllStackTraces ( ) ; java.lang.System.out.println ( "thread test done" ) ; }
public android.net.Uri getAdnUriForPhoneAccount ( android.telecom.PhoneAccountHandle accountHandle , java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.aAUFPA" ) ; synchronized ( mLock ) { enforcePermissionOrPrivilegedDialer ( android.Manifest.permission.MODIFY_PHONE_STATE , callingPackage ) ; if ( ! ( isPhoneAccountHandleVisibleToCallingUser ( accountHandle , android.os.Binder.getCallingUserHandle ( ) ) ) ) { android.telecom.Log.d ( this , "%s is not visible for the calling user [gA4PA]" , accountHandle ) ; return null ; } long token = android.os.Binder.clearCallingIdentity ( ) ; java.lang.String retval = "content://icc/adn/" ; try { long subId = mPhoneAccountRegistrar.getSubscriptionIdForPhoneAccount ( accountHandle ) ; retval = ( retval + "subId/" ) + subId ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } return android.net.Uri.parse ( retval ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void testHeadsetServiceDisconnect ( ) { receiverUnderTest.onReceive ( mContext , buildConnectionActionIntent ( BluetoothHeadset.STATE_CONNECTED , device1 ) ) ; receiverUnderTest.onReceive ( mContext , buildConnectionActionIntent ( BluetoothHeadset.STATE_CONNECTED , device2 ) ) ; serviceListenerUnderTest.onServiceDisconnected ( 0 ) ; org.mockito.Mockito.verify ( mRouteManager ) . onDeviceLost ( device1.getAddress ( ) ) ; org.mockito.Mockito.verify ( mRouteManager ) . onDeviceLost ( device2.getAddress ( ) ) ; org.junit.Assert.assertNull ( mBluetoothDeviceManager.getHeadsetService ( ) ) ; org.junit.Assert.assertEquals ( 0 , mBluetoothDeviceManager.getNumConnectedDevices ( ) ) ; }
public void drawLine ( int x1 , int y1 , int x2 , int y2 ) { checkGC ( ) ; useStrokeAlpha ( ) ; x1 = mHScale.translate ( x1 ) ; y1 = mVScale.translate ( y1 ) ; x2 = mHScale.translate ( x2 ) ; y2 = mVScale.translate ( y2 ) ; getGc ( ) . drawLine ( x1 , y1 , x2 , y2 ) ; }
void handle3GAuthRequest ( com.android.server.wifi.util.TelephonyUtil.SimAuthRequestData requestData ) { if ( ( ( targetWificonfiguration ) == null ) || ( ( targetWificonfiguration.networkId ) == ( lookupFrameworkNetworkId ( requestData.networkId ) ) ) ) { logd ( "id matches targetWifiConfiguration" ) ; } else { logd ( "id does not match targetWifiConfiguration" ) ; return ; } com.android.server.wifi.util.TelephonyUtil.SimAuthResponseData response = com.android.server.wifi.util.TelephonyUtil.get3GAuthResponse ( requestData , getTelephonyManager ( ) ) ; if ( response != null ) { mWifiNative.simAuthResponse ( requestData.networkId , response.type , response.response ) ; } else { mWifiNative.umtsAuthFailedResponse ( requestData.networkId ) ; } }
public static boolean getEnhancedBlockSetting ( android.content.Context context , java.lang.String key ) { android.os.Bundle extras = new android.os.Bundle ( ) ; extras.putString ( android.provider.BlockedNumberContract.EXTRA_ENHANCED_SETTING_KEY , key ) ; try { final android.os.Bundle res = context.getContentResolver ( ) . call ( android.provider.BlockedNumberContract.AUTHORITY_URI , android.provider.BlockedNumberContract.SystemContract.METHOD_GET_ENHANCED_BLOCK_SETTING , null , extras ) ; return ( res != null ) && ( res.getBoolean ( android.provider.BlockedNumberContract.RES_ENHANCED_SETTING_IS_ENABLED , false ) ) ; } catch ( java.lang.NullPointerException | java.lang.IllegalArgumentException ex ) { android.telecom.Log.w ( null , "getEnhancedBlockSetting: provider not ready." ) ; return false ; } }
public void testNoDpi2 ( ) throws java.lang.Exception { mEnabled = com.android.tools.lint.checks.IconDetectorTest.ALL ; assertEquals ( ( "res/drawable-xxhdpi/frame.png: Warning: The image frame.png varies significantly in its density-independent (dip) size across the various density versions: drawable-ldpi/frame.png: 629x387 dp (472x290 px), drawable-mdpi/frame.png: 472x290 dp (472x290 px), drawable-hdpi/frame.png: 315x193 dp (472x290 px), drawable-xhdpi/frame.png: 236x145 dp (472x290 px), drawable-xxhdpi/frame.png: 157x97 dp (472x290 px) [IconDipSize]\n" + ( ( ( ( ( ( ( ( ( ( ( ( " res/drawable-xhdpi/frame.png: <No location-specific message\n" + " res/drawable-hdpi/frame.png: <No location-specific message\n" ) + " res/drawable-mdpi/frame.png: <No location-specific message\n" ) + " res/drawable-ldpi/frame.png: <No location-specific message\n" ) + "res/drawable-xxhdpi/frame.png: Warning: The following unrelated icon files have identical contents: frame.png, frame.png, frame.png, file1.png, file2.png, frame.png, frame.png [IconDuplicates]\n" ) + " res/drawable-xhdpi/frame.png: <No location-specific message\n" ) + " res/drawable-nodpi/file2.png: <No location-specific message\n" ) + " res/drawable-nodpi/file1.png: <No location-specific message\n" ) + " res/drawable-mdpi/frame.png: <No location-specific message\n" ) + " res/drawable-ldpi/frame.png: <No location-specific message\n" ) + " res/drawable-hdpi/frame.png: <No location-specific message\n" ) + "0 errors, 2 warnings\n" ) + "" ) ) , lintProject ( "res/drawable-mdpi/frame.png=>res/drawable-mdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-hdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-ldpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-xhdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-xxhdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-nodpi/file1.png" , "res/drawable-mdpi/frame.png=>res/drawable-nodpi/file2.png" ) ) ; }
private void deleteTestFiles ( @ javax.annotation.Nonnegative com.android.ddmlib.IDevice device , @ javax.annotation.Nonnull java.io.File testDir ) throws com.android.jack.test.runner.RuntimeRunnerException { java.lang.String testDirName = testDir.getName ( ) ; try { executeShellCommand ( ( "rm -rf " + ( convertToTargetPath ( testDir ) ) ) , device ) ; executeShellCommand ( ( ( "find /data/dalvik-cache -name '*" + testDirName ) + "*' -exec rm -rf {} +" ) , device ) ; } catch ( com.android.ddmlib.TimeoutException | com.android.ddmlib.AdbCommandRejectedException | com.android.ddmlib.ShellCommandUnresponsiveException | java.io.IOException e ) { throw new com.android.jack.test.runner.RuntimeRunnerException ( e ) ; } }
private static java.util.List < junit.framework.Test > getTestsAndSuites ( junit.framework.TestSuite suite ) { return java.util.Collections.list ( suite.tests ( ) ) ; }
public void testGet1_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.get ( ( - 1 ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
private com.android.jack.optimizations.lambdas.LambdaTests.Class printImpl ( @ javax.annotation.Nonnull java.lang.String [ ] names , @ javax.annotation.Nonnull java.lang.String str , boolean ordered ) { if ( ( names.length ) > 0 ) { builder.append ( str ) ; if ( ordered ) { java.util.Arrays.sort ( names ) ; } for ( java.lang.String n : names ) { builder.append ( " " ) . append ( n ) . append ( "\n" ) ; } } return this ; }
void regularScanTimeout ( com.android.bluetooth.gatt.ScanClient client ) { if ( ( ! ( isExemptFromScanDowngrade ( client ) ) ) && ( client.stats.isScanningTooLong ( ) ) ) { android.util.Log.w ( com.android.bluetooth.gatt.ScanManager.TAG , ( ( "Moving scan client to opportunistic (scannerId " + ( client.scannerId ) ) + ")" ) ) ; setOpportunisticScanClient ( client ) ; client.stats.setScanTimeout ( ) ; } configureRegularScanParams ( ) ; if ( ( numRegularScanClients ( ) ) == 0 ) { logd ( "stop scan" ) ; gattClientScanNative ( false ) ; } }
public boolean migrateNetworksFromSupplicant ( java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configs , android.util.SparseArray < java.util.Map < java.lang.String , java.lang.String > > networkExtras ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.loadNetworks ( configs , networkExtras ) ; } else { mWifiSupplicantControl.loadNetworks ( configs , networkExtras ) ; return true ; } }
private void updateScreenState ( boolean forceUpdate ) { final int oldState = mRadioScreenState ; mRadioScreenState = ( ( ( mDefaultDisplayState ) == ( android.view.Display.STATE_ON ) ) || ( mIsDevicePlugged ) ) ? com.android.internal.telephony.RIL.RADIO_SCREEN_ON : com.android.internal.telephony.RIL.RADIO_SCREEN_OFF ; if ( ( ( mRadioScreenState ) != oldState ) || forceUpdate ) { if ( com.android.internal.telephony.RIL.RILJ_LOGV ) { riljLog ( ( ( ( "defaultDisplayState: " + ( mDefaultDisplayState ) ) + ", isDevicePlugged: " ) + ( mIsDevicePlugged ) ) ) ; } sendScreenState ( ( ( mRadioScreenState ) == ( com.android.internal.telephony.RIL.RADIO_SCREEN_ON ) ) ) ; } }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVFile getVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileException { com.android.sched.vfs.BaseVElement element = parent.getFromCache ( name ) ; if ( element != null ) { if ( ! ( element.isVDir ( ) ) ) { return ( ( com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVFile ) ( element ) ) ; } else { throw new com.android.sched.util.file.NotFileException ( getVFileLocation ( parent , name ) ) ; } } else { throw new com.android.sched.util.file.NoSuchFileException ( getVFileLocation ( parent , name ) ) ; } }
private static java.lang.String stringAddrFromLongAddr ( long addr ) { return java.lang.String.format ( "%02x:%02x:%02x:%02x:%02x:%02x" , ( ( addr > > 40 ) & 255 ) , ( ( addr > > 32 ) & 255 ) , ( ( addr > > 24 ) & 255 ) , ( ( addr > > 16 ) & 255 ) , ( ( addr > > 8 ) & 255 ) , ( addr & 255 ) ) ; }
public void onCapabilities ( com.android.bips.discovery.DiscoveredPrinter printer , com.android.bips.jni.LocalPrinterCapabilities capabilities ) { if ( ( mSession.isDestroyed ( ) ) || ( ! ( mSession.isKnown ( mPrinterId ) ) ) ) return ; if ( capabilities == null ) { if ( com.android.bips.LocalPrinter.DEBUG ) android.util.Log.d ( com.android.bips.LocalPrinter.TAG , ( "No capabilities so removing printer " + ( this ) ) ) ; mSession.removePrinters ( java.util.Collections.singletonList ( mPrinterId ) ) ; } else { mCapabilities = capabilities ; mSession.handlePrinter ( this ) ; } }
public void onReliableWriteCompleted ( android.bluetooth.BluetoothGatt gatt , int status ) { if ( com.android.cts.verifier.bluetooth.BleClientService.DEBUG ) { android.util.Log.d ( com.android.cts.verifier.bluetooth.BleClientService.TAG , ( "onReliableWriteComplete: " + status ) ) ; } if ( ( mExecReliableWrite ) != ( com.android.cts.verifier.bluetooth.BleClientService.ReliableWriteState.RELIABLE_WRITE_NONE ) ) { if ( status == ( android.bluetooth.BluetoothGatt.GATT_SUCCESS ) ) { notifyReliableWriteCompleted ( ) ; } else { notifyError ( ( "Failed to complete reliable write: " + status ) ) ; } mExecReliableWrite = com.android.cts.verifier.bluetooth.BleClientService.ReliableWriteState.RELIABLE_WRITE_NONE ; } }
public void runCmdLine ( java.lang.String [ ] command ) throws java.io.IOException , java.lang.InterruptedException { java.lang.Process process = java.lang.Runtime.getRuntime ( ) . exec ( command ) ; if ( ( grabProcessOutput ( process ) ) != 0 ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "running %s failed. see output" , command [ 0 ] ) ) ; } }
public com.android.jack.api.v01.Api01CompilationTask getTask ( ) throws com.android.jack.api.v01.ConfigurationException { com.android.sched.util.RunnableHooks configHooks = new com.android.sched.util.RunnableHooks ( ) ; try { com.android.jack.Jack.check ( options , configHooks ) ; } catch ( com.android.jack.api.v01.impl.com.android.sched e ) { throw new com.android.jack.api.v01.ConfigurationException ( e.getMessage ( ) , e ) ; } catch ( com.android.jack.IllegalOptionsException e ) { throw new com.android.jack.api.v01.ConfigurationException ( e.getMessage ( ) , e ) ; } return new com.android.jack.api.v01.impl.Api01ConfigImpl.Api01CompilationTaskImpl ( options ) ; }
public java.lang.String getOriginalMimeType ( android.net.Uri uri ) { if ( ( null == uri ) || ( ( android.net.Uri.EMPTY ) == uri ) ) { throw new java.lang.IllegalArgumentException ( "Given uri is not valid" ) ; } return getOriginalMimeType ( convertUriToPath ( uri ) ) ; }
private void assertDeleted ( java.security.cert.X509Certificate x , java.lang.String alias ) { assertNull ( store.getCertificate ( alias ) ) ; assertFalse ( store.containsAlias ( alias ) ) ; assertNull ( store.getCertificateAlias ( x ) ) ; assertNull ( store.getTrustAnchor ( x ) ) ; assertEquals ( store.allSystemAliases ( ) . contains ( alias ) , ( ( store.getCertificate ( alias , true ) ) != null ) ) ; }
public void TestQuotingLikeMessageFormat ( ) { java.lang.String pattern = "{0} don't can''t '{5}''}{a' again '}'{1} to the '{end" ; com.ibm.icu.text.SimpleFormatter spf = com.ibm.icu.text.SimpleFormatter.compile ( pattern ) ; com.ibm.icu.text.MessageFormat mf = new com.ibm.icu.text.MessageFormat ( pattern , com.ibm.icu.util.ULocale.ROOT ) ; java.lang.String expected = "X don't can't {5}'}{a again }Y to the {end" ; assertEquals ( "MessageFormat" , expected , mf.format ( new java.lang.Object [ ] { "X" , "Y" } ) ) ; assertEquals ( "SimpleFormatter" , expected , spf.format ( "X" , "Y" ) ) ; }
private void onGetReport ( byte [ ] address , byte [ ] report , int rptSize ) { if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , "onGetReport()" ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_ON_GET_REPORT ) ; msg.obj = address ; android.os.Bundle data = new android.os.Bundle ( ) ; data.putByteArray ( BluetoothHidHost.EXTRA_REPORT , report ) ; data.putInt ( BluetoothHidHost.EXTRA_REPORT_BUFFER_SIZE , rptSize ) ; msg.setData ( data ) ; mHandler.sendMessage ( msg ) ; }
public static java.util.List < org.jetbrains.plugins.github.api.GithubRepo > getUserRepos ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.util.GithubAuthData auth ) throws java.io.IOException { java.lang.String path = "/user/repos?" + ( org.jetbrains.plugins.github.api.GithubApiUtil.PER_PAGE ) ; org.jetbrains.plugins.github.api.GithubApiUtil.PagedRequest < org.jetbrains.plugins.github.api.GithubRepo > request = new org.jetbrains.plugins.github.api.GithubApiUtil.PagedRequest < org.jetbrains.plugins.github.api.GithubRepo > ( path , org.jetbrains.plugins.github.api.GithubRepo.class , org.jetbrains.plugins.github.api.GithubRepoRaw [ ] . class ) ; return request.getAll ( auth ) ; }
private static java.lang.String computeVersionLessCoordinateKey ( @ com.android.annotations.NonNull com.android.builder.model.MavenCoordinates coordinates ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( coordinates.getGroupId ( ) ) ; sb.append ( ':' ) . append ( coordinates.getArtifactId ( ) ) ; if ( ( coordinates.getClassifier ( ) ) != null ) { sb.append ( ':' ) . append ( coordinates.getClassifier ( ) ) ; } return sb.toString ( ) ; }
public void out ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { mLogger.verbose ( "AAPT notify(%1$s): %2$s" , mJob , line ) ; if ( line.equalsIgnoreCase ( "Done" ) ) { mOwner.reset ( ) ; mJob.finished ( ) ; } else if ( line.equalsIgnoreCase ( "Error" ) ) { mOwner.reset ( ) ; mJob.error ( ) ; } else { mLogger.verbose ( "AAPT(%1$s) discarded: %2$s" , mJob , line ) ; } } }
public static void expectDivisionByZero ( long value ) { try { DivTest.$opt$Div ( value , 0L ) ; throw new java.lang.Error ( "Expected RuntimeException when dividing by 0" ) ; } catch ( java.lang.RuntimeException e ) { } try { DivTest.$opt$DivZero ( value ) ; throw new java.lang.Error ( "Expected RuntimeException when dividing by 0" ) ; } catch ( java.lang.RuntimeException e ) { } }
private static void assertIdent ( com.android.tools.metalava.doclava1.ApiFile.Tokenizer tokenizer , java.lang.String token ) throws com.android.tools.metalava.doclava1.ApiParseException { if ( ! ( com.android.tools.metalava.doclava1.ApiFile.isIdent ( token.charAt ( 0 ) ) ) ) { throw new com.android.tools.metalava.doclava1.ApiParseException ( ( "Expected identifier: " + token ) , tokenizer.getLine ( ) ) ; } }
public int compareTo ( com.android.sdklib.ISystemImage other ) { int t = this . getTag ( ) . compareTo ( other.getTag ( ) ) ; if ( t != 0 ) { return t ; } return this . getAbiType ( ) . compareToIgnoreCase ( other.getAbiType ( ) ) ; }
final void constructorPutAll ( java.util.Map < ? extends K , ? extends V > map ) { if ( ( table ) == ( java.util.HashMap.EMPTY_TABLE ) ) { doubleCapacity ( ) ; } for ( java.util.Map.Entry < ? extends K , ? extends V > e : map.entrySet ( ) ) { constructorPut ( e.getKey ( ) , e.getValue ( ) ) ; } }
public void socketpair ( int domain , int type , int protocol , java.io.FileDescriptor fd1 , java.io.FileDescriptor fd2 ) throws android.system.ErrnoException { os.socketpair ( domain , type , protocol , fd1 , fd2 ) ; if ( ( domain != ( AF_UNIX ) ) && ( domain != ( AF_NETLINK ) ) ) { tagSocket ( fd1 ) ; tagSocket ( fd2 ) ; } }
public java.lang.String call ( ) throws java.lang.Exception { return variantOutputData.getMainOutputFile ( ) . getFilter ( com.android.build.OutputFile.DENSITY ) ; }
private static android.telephony.data.DataCallResponse createDataCallResponse ( ) throws java.lang.Exception { return new android.telephony.data.DataCallResponse ( 0 , ( - 1 ) , 1 , 2 , "IP" , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME , java.util.Arrays.asList ( new android.telephony.data.InterfaceAddress ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_ADDRESS , 0 ) ) , java.util.Arrays.asList ( android.net.NetworkUtils.numericToInetAddress ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS ) ) , java.util.Arrays.asList ( android.net.NetworkUtils.numericToInetAddress ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY ) ) , java.util.Arrays.asList ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS ) , 1440 ) ; }
protected void verifyResourceExists ( com.android.builder.resources.ResourceMap resourceMap , java.lang.String ... resourceKeys ) { com.google.common.collect.ListMultimap < java.lang.String , com.android.builder.resources.Resource > map = resourceMap.getResourceMap ( ) ; for ( java.lang.String resKey : resourceKeys ) { java.util.List < com.android.builder.resources.Resource > resources = map.get ( resKey ) ; assertTrue ( ( ( "resource '" + resKey ) + "' is missing!" ) , ( ( resources.size ( ) ) > 0 ) ) ; } }
private void updateTtsSpans ( ) { for ( java.lang.Object o : mDigits.getText ( ) . getSpans ( 0 , mDigits.getText ( ) . length ( ) , android.text.style.TtsSpan.class ) ) { mDigits.getText ( ) . removeSpan ( o ) ; } android.telephony.PhoneNumberUtils.ttsSpanAsPhoneNumber ( mDigits.getText ( ) , 0 , mDigits.getText ( ) . length ( ) ) ; }
public java.util.ListIterator < E > listIterator ( int index ) { java.lang.Object [ ] snapshot = elements ; if ( ( index < 0 ) || ( index > ( snapshot.length ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( "index=" + index ) + ", length=" ) + ( snapshot.length ) ) ) ; } java.util.concurrent.CopyOnWriteArrayList.CowIterator < E > result = new java.util.concurrent.CopyOnWriteArrayList.CowIterator < E > ( snapshot , 0 , snapshot.length ) ; result.index = index ; return result ; }
public void testNoMerging ( ) throws java.lang.Exception { java.io.File master = getProjectDir ( "MasterProject" , "multiproject/main-manifest.xml=>AndroidManifest.xml" , "multiproject/main.properties=>project.properties" , "multiproject/MainCode.java.txt=>src/foo/main/MainCode.java" ) ; java.io.File library = getProjectDir ( "LibraryProject" , "multiproject/library-manifest.xml=>AndroidManifest.xml" , "multiproject/library.properties=>project.properties" , "multiproject/LibraryCode.java.txt=>src/foo/library/LibraryCode.java" , "multiproject/strings.xml=>res/values/strings.xml" ) ; assertEquals ( ( "/TESTROOT/LibraryProject/res/values/strings.xml:7: Warning: The resource R.string.string3 appears to be unused [UnusedResources]\n" + ( ( " <string name=\"string3\">String 3</string>\n" + " ~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , checkLint ( java.util.Arrays.asList ( master , library ) ) ) ; }
public boolean requestIcon ( java.lang.String bssid , java.lang.String fileName ) { if ( ( bssid == null ) || ( fileName == null ) ) { android.util.Log.e ( mTAG , "Invalid arguments for Icon request." ) ; return false ; } return mSupplicantStaIfaceHal.initiateHs20IconQuery ( bssid , fileName ) ; }
private android.database.Cursor getSingleMessageFromIcc ( java.lang.String messageIndexString ) { try { int messageIndex = java.lang.Integer.parseInt ( messageIndexString ) ; android.telephony.SmsManager smsManager = android.telephony.SmsManager.getDefault ( ) ; java.util.ArrayList < android.telephony.SmsMessage > messages = smsManager.getAllMessagesFromIcc ( ) ; java.util.ArrayList < java.util.ArrayList > singleRow = new java.util.ArrayList < java.util.ArrayList > ( ) ; singleRow.add ( convertIccToSms ( messages.get ( messageIndex ) ) ) ; return withIccNotificationUri ( new com.android.internal.database.ArrayListCursor ( com.android.providers.telephony.SmsProvider.ICC_COLUMNS , singleRow ) ) ; } catch ( java.lang.NumberFormatException exception ) { throw new java.lang.IllegalArgumentException ( ( "Bad SMS ICC ID: " + messageIndexString ) ) ; } }
public void setRadioIndicationUpdateMode ( @ android.telephony.TelephonyManager.IndicationFilters int filters , @ android.telephony.TelephonyManager.IndicationUpdateMode int updateMode ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { telephony.setRadioIndicationUpdateMode ( getSubId ( ) , filters , updateMode ) ; } } catch ( android.os.RemoteException ex ) { if ( ! ( isSystemProcess ( ) ) ) { ex.rethrowAsRuntimeException ( ) ; } } }
public static java.lang.String shortToCharToBytePrint ( short value ) { char c = ( ( char ) ( value ) ) ; byte b = ( ( byte ) ( c ) ) ; return ( ( "c=" + ( ( int ) ( c ) ) ) + ", b=" ) + ( ( int ) ( b ) ) ; }
public void pcoData ( int indicationType , android.hardware.radio.V1_0.PcoDataInfo pco ) { mRil.processIndication ( indicationType ) ; android.telephony.PcoData response = new android.telephony.PcoData ( pco.cid , pco.bearerProto , pco.pcoId , com.android.internal.telephony.RIL.arrayListToPrimitiveArray ( pco.contents ) ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_PCO_DATA , response ) ; mRil.mPcoDataRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "res/layout/include_params.xml:43: Error: Layout parameter layout_margin ignored unless both layout_width and layout_height are also specified on <include> tag [IncludeLayoutParam]\n" + " android:layout_margin=\"20dp\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:44: Error: Layout parameter layout_weight ignored unless both layout_width and layout_height are also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_weight=\"1.5\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:51: Error: Layout parameter layout_weight ignored unless layout_width is also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_weight=\"1.5\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:58: Error: Layout parameter layout_weight ignored unless layout_height is also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_weight=\"1.5\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:65: Error: Layout parameter layout_width ignored unless layout_height is also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_width=\"fill_parent\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:72: Error: Layout parameter layout_height ignored unless layout_width is also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_height=\"fill_parent\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "6 errors, 0 warnings\n" ) ) , lintProject ( "res/layout/include_params.xml" ) ) ; }
public void syncSucceeded ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.project.Project project ) { com.intellij.openapi.application.ApplicationManager.getApplication ( ) . runWriteAction ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.intellij.openapi.module.Module module = com.intellij.openapi.module.ModuleManager.getInstance ( project ) . findModuleByName ( moduleName ) ; com.google.gct.idea.appengine.wizard.Parameter appEngineVersionParam = template.getMetadata ( ) . getParameter ( "appEngineVersion" ) ; java.lang.String appEngineVersion = ( appEngineVersionParam == null ) ? "unknown" : appEngineVersionParam.initial ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.createRunConfiguration ( project , module , moduleRoot , appEngineVersion ) ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.addAppEngineGradleFacet ( ) ; } } ) ; }
protected void visitType ( int type , int index ) { assert ( cstIndexMap ) != null ; constantValue = cstIndexMap.getCstType ( index ) ; }
private void onCodecConfigChanged ( byte [ ] address , android.bluetooth.BluetoothCodecConfig newCodecConfig , android.bluetooth.BluetoothCodecConfig [ ] codecsLocalCapabilities , android.bluetooth.BluetoothCodecConfig [ ] codecsSelectableCapabilities ) { com.android.bluetooth.a2dp.A2dpStackEvent event = new com.android.bluetooth.a2dp.A2dpStackEvent ( A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED ) ; event.device = getDevice ( address ) ; event.codecStatus = new android.bluetooth.BluetoothCodecStatus ( newCodecConfig , codecsLocalCapabilities , codecsSelectableCapabilities ) ; if ( com.android.bluetooth.a2dp.A2dpNativeInterface.DBG ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpNativeInterface.TAG , ( "onCodecConfigChanged: " + event ) ) ; } sendMessageToService ( event ) ; }
protected void onProgressUpdate ( java.lang.Integer ... progress ) { progressDialog.setMessage ( ( ( ( ( message ) + ( progress [ 0 ] ) ) + "/" ) + ( progress [ 1 ] ) ) ) ; progressDialog.setMax ( progress [ 1 ] ) ; progressDialog.setProgress ( progress [ 0 ] ) ; android.util.Log.v ( com.example.android.rs.vr.VrActivity.LOGTAG , ( ( ( "Loading " + ( progress [ 0 ] ) ) + "/" ) + ( progress [ 1 ] ) ) ) ; }
public static com.intellij.execution.ui.ConsoleView createAndAttachConsole ( @ org.jetbrains.annotations.NotNull final java.lang.String testFrameworkName , @ org.jetbrains.annotations.NotNull final com.intellij.execution.process.ProcessHandler processHandler , @ org.jetbrains.annotations.NotNull final com.intellij.execution.configurations.CommandLineState commandLineState , @ org.jetbrains.annotations.NotNull final com.intellij.execution.configurations.ModuleRunConfiguration config , @ org.jetbrains.annotations.NotNull final com.intellij.execution.Executor executor , @ org.jetbrains.annotations.NotNull final com.google.gct.testing.CloudMatrixExecutionCancellator matrixExecutionCancellator ) throws com.intellij.execution.ExecutionException { final com.intellij.execution.testframework.TestConsoleProperties consoleProperties = new com.intellij.execution.testframework.sm.runner.SMTRunnerConsoleProperties ( config , testFrameworkName , executor ) ; return com.google.gct.testing.results.GoogleCloudTestResultsConnectionUtil.createAndAttachConsole ( testFrameworkName , processHandler , consoleProperties , commandLineState.getEnvironment ( ) , matrixExecutionCancellator ) ; }
public boolean checkAndSet ( java.lang.String value , com.android.ide.common.resources.configuration.FolderConfiguration config ) { com.android.resources.KeyboardState orientation = com.android.resources.KeyboardState.getEnum ( value ) ; if ( orientation != null ) { com.android.ide.common.resources.configuration.KeyboardStateQualifier qualifier = new com.android.ide.common.resources.configuration.KeyboardStateQualifier ( ) ; qualifier.mValue = orientation ; config.setKeyboardStateQualifier ( qualifier ) ; return true ; } return false ; }
private void cleanJacks ( @ javax.annotation.Nonnull java.util.Set < com.android.jack.api.ResourceController.Category > categories , @ javax.annotation.Nonnull java.util.Set < com.android.jack.api.ResourceController.Impact > impacts ) { for ( com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > program : getInstalledJacks ( ) ) { com.android.jack.api.JackProvider provider = program.getLoadedProgram ( com.android.jack.server.JackHttpServer.Assertion.DISABLED ) ; if ( provider instanceof com.android.jack.api.ResourceController ) { ( ( com.android.jack.api.ResourceController ) ( provider ) ) . clean ( categories , impacts ) ; } provider = program.getLoadedProgram ( com.android.jack.server.JackHttpServer.Assertion.ENABLED ) ; if ( provider instanceof com.android.jack.api.ResourceController ) { ( ( com.android.jack.api.ResourceController ) ( provider ) ) . clean ( categories , impacts ) ; } } }
public static com.android.jack.ir.ast.JSession buildJAst ( @ javax.annotation.Nonnull com.android.jack.Options options ) throws java.lang.Exception { com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks ( ) ; try { options.addProperty ( Options.USE_DEFAULT_LIBRARIES.getName ( ) , "false" ) ; options.checkValidity ( hooks ) ; com.android.sched.util.config.ThreadConfig.setConfig ( options.getConfig ( ) ) ; com.android.jack.ir.ast.JSession session = com.android.jack.Jack.buildSession ( options , hooks ) ; return session ; } finally { hooks.runHooks ( ) ; } }
public boolean sameItemAs ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.SystemImagePackage ) { com.android.sdklib.internal.repository.packages.SystemImagePackage newPkg = ( ( com.android.sdklib.internal.repository.packages.SystemImagePackage ) ( pkg ) ) ; return ( ( getTag ( ) . equals ( newPkg.getTag ( ) ) ) && ( getAbi ( ) . equals ( newPkg.getAbi ( ) ) ) ) && ( getAndroidVersion ( ) . equals ( newPkg.getAndroidVersion ( ) ) ) ; } return false ; }
public void onReceivedClientCertRequest ( org.chromium.android_webview.AwContentsClientBridge.ClientCertificateRequestCallback callback , java.lang.String [ ] keyTypes , java.security.Principal [ ] principals , java.lang.String host , int port ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onReceivedClientCertRequest" ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onReceivedClientCertRequest" ) ; final com.android.webview.chromium.WebViewContentsClientAdapter.ClientCertRequestImpl request = new com.android.webview.chromium.WebViewContentsClientAdapter.ClientCertRequestImpl ( callback , keyTypes , principals , host , port ) ; mWebViewClient.onReceivedClientCertRequest ( mWebView , request ) ; } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onReceivedClientCertRequest" ) ; } }
private void handleReleasedFocus ( com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionServiceFocus ) { android.telecom.Log.d ( this , "handleReleasedFocus connSvr = %s" , connectionServiceFocus ) ; if ( java.util.Objects.equals ( mCurrentFocus , connectionServiceFocus ) ) { mEventHandler.removeMessages ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_RELEASE_FOCUS_TIMEOUT , mCurrentFocusRequest ) ; com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus newCSF = null ; if ( ( mCurrentFocusRequest ) != null ) { newCSF = mCurrentFocusRequest.call.getConnectionServiceWrapper ( ) ; } updateConnectionServiceFocus ( newCSF ) ; updateCurrentFocusCall ( ) ; if ( ( mCurrentFocusRequest ) != null ) { onRequestFocusDone ( mCurrentFocusRequest ) ; mCurrentFocusRequest = null ; } } }
public void testPreloadDensity ( ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = mContext.getResources ( ) ; final int densityDpi = res.getConfiguration ( ) . densityDpi ; try { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity ( res , densityDpi ) ; verifyPreloadDensityInner ( res , densityDpi ) ; } finally { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity ( res , densityDpi ) ; } }
public void test_zh_HK ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex.ImmutableIndex zh_HK = libcore.icu.AlphabeticIndexTest.createIndex ( new java.util.Locale ( "zh" , "HK" ) ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_HK , "沈" , "7劃" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_HK , "瀋" , "18劃" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_HK , "贾" , "10劃" ) ; }
void test ( ) { if ( ( status ) == ( READY ) ) { com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . requestListenerHints ( MockListener.HINT_HOST_DISABLE_CALL_EFFECTS ) ; status = RETEST ; } else { int result = com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . getCurrentListenerHints ( ) ; if ( ( result & ( com.android.cts.verifier.notifications.MockListener.MockListener.HINT_HOST_DISABLE_CALL_EFFECTS ) ) != 0 ) { status = PASS ; next ( ) ; } else { logFail ( ) ; status = FAIL ; } } }
private static void addTimeUnit ( com.ibm.icu.impl.ICUResourceBundle pastOrFuture , com.ibm.icu.text.QuantityFormatter qf ) { int size = pastOrFuture.getSize ( ) ; for ( int i = 0 ; i < size ; i ++ ) { com.ibm.icu.util.UResourceBundle r = pastOrFuture.get ( i ) ; qf.addIfAbsent ( r.getKey ( ) , r.getString ( ) ) ; } }
public java.lang.String getDisplayName ( java.util.Locale locale ) { java.util.Objects.requireNonNull ( locale , "locale" ) ; android.icu.text.DateTimePatternGenerator dateTimePatternGenerator = android.icu.text.DateTimePatternGenerator.getFrozenInstance ( android.icu.util.ULocale.forLocale ( locale ) ) ; java.lang.String icuName = dateTimePatternGenerator.getAppendItemName ( DateTimePatternGenerator.WEEK_OF_YEAR ) ; return ( icuName != null ) && ( ! ( icuName.isEmpty ( ) ) ) ? icuName : toString ( ) ; }
public static java.util.List < java.lang.String > readLines ( java.io.File file , java.nio.charset.Charset charset ) throws java.io.IOException { return com.google.common.io.Files.readLines ( file , charset , new com.google.common.io.LineProcessor < java.util.List < java.lang.String > > ( ) { final java.util.List < java.lang.String > result = com.google.common.collect.Lists.newArrayList ( ) ; @ java.lang.Override public boolean processLine ( java.lang.String line ) { result.add ( line ) ; return true ; } @ java.lang.Override public java.util.List < java.lang.String > getResult ( ) { return result ; } } ) ; }
public void isFocusableTest ( ) { android.view.View focusable = new android.view.View ( context ) ; focusable.setFocusable ( true ) ; android.view.View notFocusable = new android.view.View ( context ) ; notFocusable.setFocusable ( false ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.ViewMatchers.isFocusable ( ) . matches ( focusable ) ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.matcher.ViewMatchers.isFocusable ( ) . matches ( notFocusable ) ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/AddJavascriptInterfaceTest.java:16: Warning: WebView.addJavascriptInterface should not be called with minSdkVersion < 17 for security reasons: JavaScript can use reflection to manipulate application [AddJavascriptInterface]\n" + " webView.addJavascriptInterface(object, string);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/AddJavascriptInterfaceTest.java:23: Warning: WebView.addJavascriptInterface should not be called with minSdkVersion < 17 for security reasons: JavaScript can use reflection to manipulate application [AddJavascriptInterface]\n" ) + " webView.addJavascriptInterface(object, string);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/AddJavascriptInterfaceTest.java.txt=>src/test/pkg/AddJavascriptInterfaceTest.java" , "bytecode/AddJavascriptInterfaceTest.class.data=>bin/classes/test/pkg/AddJavascriptInterfaceTest.class" , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class" ) , ( "bytecode/AddJavascriptInterfaceTest$WebViewChild.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$WebViewChild.class" ) , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebViewChild.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebViewChild.class" ) , ( "bytecode/AddJavascriptInterfaceTest$NonWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$NonWebView.class" ) , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnNonWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnNonWebView.class" ) ) ) ; }
protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { java.security.spec.AlgorithmParameterSpec spec ; if ( params != null ) { try { spec = params.getParameterSpec ( javax.crypto.spec.IvParameterSpec.class ) ; } catch ( java.security.spec.InvalidParameterSpecException e ) { throw new java.security.InvalidAlgorithmParameterException ( "Params must be convertible to IvParameterSpec" , e ) ; } } else { spec = null ; } engineInit ( opmode , key , spec , random ) ; }
private static synchronized void setHidDeviceService ( com.android.bluetooth.hid.HidDeviceService instance ) { com.android.bluetooth.hid.HidDeviceService.sHidDeviceService = instance ; }
public long getFieldID ( long classID , java.lang.String fieldName ) { org.apache.harmony.jpda.tests.framework.jdwp.Field [ ] fields = getFieldsInfo ( classID ) ; for ( org.apache.harmony.jpda.tests.framework.jdwp.Field field : fields ) { if ( field.getName ( ) . equals ( fieldName ) ) { return field.getFieldID ( ) ; } } return - 1 ; }
private void addToBuffer ( int offset , android.renderscript.Matrix4f m ) { mIOBuffer.reset ( offset ) ; for ( int i = 0 ; i < 16 ; i ++ ) { mIOBuffer.addF32 ( m.mMat [ i ] ) ; } mIOBuffer.reset ( mIOBuffer.getData ( ) . length ) ; mAlloc.setFromFieldPacker ( 0 , mIOBuffer ) ; }
public void testRefactor1 ( ) throws java.lang.Exception { moveType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.CustomView1" , "src/com/example/refactoringtest/subpackage" , true , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "* Move resource \'testRefactor1/src/com/example/refactoringtest/CustomView1.java\' to \'subpackage\'\n" ) + "\n" ) + "* Move resource \'testRefactor1/src/com/example/refactoringtest/CustomView1.java\' to \'subpackage\'\n" ) + "\n" ) + "* customviews.xml - /testRefactor1/res/layout/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.subpackage.CustomView1\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor1/res/layout-land/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.subpackage.CustomView1" ) ) ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( "ScoredNetwork{" + "networkKey=" ) + ( networkKey ) ) + ", rssiCurve=" ) + ( rssiCurve ) ) + ", meteredHint=" ) + ( meteredHint ) ) + ", attributes=" ) + ( attributes ) ) + '}' ; }
boolean isPreinstalledSystemApp ( android.content.pm.PackageInfo app ) { int flags = ( ( app.applicationInfo ) != null ) ? app.applicationInfo.flags : 0 ; return ( flags & ( ( android.content.pm.ApplicationInfo.FLAG_SYSTEM ) | ( android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP ) ) ) != 0 ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.conscrypt.NativeCrypto.SSL_get0_alpn_selected ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; assertEquals ( "ALPN should not enable cutthrough on the client" , 0 , ( ( org.conscrypt.NativeCrypto.SSL_get_mode ( ssl ) ) & ( org.conscrypt.NativeConstants.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
public java.util.Collection < com.intellij.psi.PsiAnnotation > getAnnotations ( @ com.android.annotations.NonNull org.eclipse.jdt.internal.compiler.lookup.MethodBinding method ) { com.android.tools.lint.ExternalAnnotationRepository.MethodInfo m = findMethod ( method ) ; if ( m == null ) { return null ; } return m.psiAnnotations ; }
public void Test13088 ( ) { com.ibm.icu.util.ULocale loc = new com.ibm.icu.util.ULocale ( "fa" ) ; java.lang.String pattern = "% #,##0;% -#,##0" ; double num = - 12.34 ; com.ibm.icu.text.DecimalFormatSymbols symbols = com.ibm.icu.text.DecimalFormatSymbols.getInstance ( loc ) ; assertEquals ( "Checking for expected symbols" , "‎−" , symbols.getMinusSignString ( ) ) ; assertEquals ( "Checking for expected symbols" , "‎٪" , symbols.getPercentString ( ) ) ; com.ibm.icu.text.DecimalFormat numfmt = new com.ibm.icu.text.DecimalFormat ( pattern , symbols ) ; expect2 ( numfmt , num , "‎٪ ‎−۱٬۲۳۴" ) ; }
private android.telephony.SmsCbMessage createFromPdu ( byte [ ] pdu ) { try { byte [ ] [ ] pdus = new byte [ 1 ] [ ] ; pdus [ 0 ] = pdu ; return com.android.internal.telephony.gsm.GsmSmsCbMessage.createSmsCbMessage ( mContext , new com.android.internal.telephony.gsm.SmsCbHeader ( pdus [ 0 ] ) , com.android.cellbroadcastreceiver.DialogSmsDisplayTests.sEmptyLocation , pdus ) ; } catch ( java.lang.IllegalArgumentException e ) { return null ; } }
public com.android.ide.eclipse.gltrace.state.GLSparseArrayProperty clone ( ) { com.android.sdklib.util.SparseArray < com.android.ide.eclipse.gltrace.state.IGLProperty > copy = new com.android.sdklib.util.SparseArray < com.android.ide.eclipse.gltrace.state.IGLProperty > ( mSparseArray.size ( ) ) ; for ( int i = 0 ; i < ( mSparseArray.size ( ) ) ; i ++ ) { int key = mSparseArray.keyAt ( i ) ; com.android.ide.eclipse.gltrace.state.IGLProperty value = mSparseArray.get ( key ) ; copy.put ( key , value ) ; } return new com.android.ide.eclipse.gltrace.state.GLSparseArrayProperty ( mType , mDefaultValue , mCreateOnAccess , copy ) ; }
public void processBasicBlockElements ( ) { instructions = new java.util.LinkedList < > ( ) ; extraInstructions = new java.util.LinkedList < > ( ) ; noMoreInstruction = false ; java.util.ArrayList < com.android.jack.ir.ast.cfg.JBasicBlockElement > elements = com.google.common.collect.Lists.newArrayList ( this . currentBasicBlock.getElements ( true ) ) ; super . accept ( elements ) ; }
public void test_serialization ( ) throws java.lang.Exception { java.util.BitSet bs = new java.util.BitSet ( 500 ) ; bs.set ( 5 ) ; bs.set ( 32 ) ; bs.set ( 63 ) ; bs.set ( 64 ) ; bs.set ( 71 , 110 ) ; bs.set ( 127 , 130 ) ; bs.set ( 193 ) ; bs.set ( 450 ) ; org.apache.harmony.testframework.serialization.SerializationTest.verifySelf ( bs ) ; }
private com.android.internal.telephony.CommandException getCommandException ( int code , java.lang.String errorString ) { android.telephony.Rlog.d ( com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG , ( ( ( "getCommandException code= " + code ) + ", errorString= " ) + errorString ) ) ; com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE ; switch ( code ) { case com.android.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_SUPPORTED ; break ; case com.android.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH : error = CommandException.Error.PASSWORD_INCORRECT ; break ; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RADIO_NOT_AVAILABLE ; break ; case com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED : error = CommandException.Error.FDN_CHECK_FAILURE ; default : break ; } return new com.android.internal.telephony.CommandException ( error , errorString ) ; }
private void setParameters ( int width , int height , int bitRate , java.lang.String mimeType ) { if ( ( ( width % 16 ) != 0 ) || ( ( height % 16 ) != 0 ) ) { android.util.Log.w ( android.media.cts.EncodeDecodeTest.TAG , "WARNING: width or height not multiple of 16" ) ; } mWidth = width ; mHeight = height ; mBitRate = bitRate ; mMimeType = mimeType ; }
private com.android.timezone.distro.DistroVersion readDistroVersion ( java.io.File distroDir ) throws com.android.timezone.distro.DistroException , java.io.IOException { android.util.Slog.i ( logTag , ( "Reading distro format version: " + distroDir ) ) ; java.io.File distroVersionFile = new java.io.File ( distroDir , com.android.timezone.distro.TimeZoneDistro.DISTRO_VERSION_FILE_NAME ) ; if ( ! ( distroVersionFile.exists ( ) ) ) { throw new com.android.timezone.distro.DistroException ( ( "No distro version file found: " + distroVersionFile ) ) ; } byte [ ] versionBytes = com.android.timezone.distro.FileUtils.readBytes ( distroVersionFile , DistroVersion.DISTRO_VERSION_FILE_LENGTH ) ; return com.android.timezone.distro.DistroVersion.fromBytes ( versionBytes ) ; }
public void testE4 ( ) { loadAndRun ( "dot.junit.opcodes.aput_object.d.T_aput_object_4" , java.lang.ArrayStoreException.class , new java.lang.String [ 2 ] , 0 , new java.lang.Integer ( 1 ) ) ; }
private proguard.classfile.attribute.Attribute getAttribute ( proguard.classfile.Clazz clazz , java.lang.String name ) { for ( int index = 0 ; index < ( u2attributesCount ) ; index ++ ) { proguard.classfile.attribute.Attribute attribute = attributes [ index ] ; if ( attribute.getAttributeName ( clazz ) . equals ( name ) ) { return attribute ; } } return null ; }
synchronized boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( "sendReport(): device=" + device ) + " id=" ) + id ) ) ; if ( ! ( checkDevice ( device ) ) ) { return false ; } return sendReportNative ( id , data ) ; }
public void shutdown ( ) { mPackageUsage.writeNow ( mPackages ) ; mCompilerStats.writeNow ( ) ; }
public void testWrongSeparator2 ( ) throws java.lang.Exception { mScopes = null ; assertEquals ( ( "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n" + ( ( ( ( ( " <activity\n" + " ^\n" ) + "AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n" ) + " android:name=\".Foo.Bar\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 1 warnings\n" ) ) , lintProject ( "registration/AndroidManifestWrong2.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java" ) ) ; }
public boolean isAudioOn ( ) { if ( android.bluetooth.BluetoothHeadset.VDBG ) android.bluetooth.BluetoothHeadset.log ( "isAudioOn()" ) ; final android.bluetooth.IBluetoothHeadset service = mService ; if ( ( service != null ) && ( isEnabled ( ) ) ) { try { return service.isAudioOn ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHeadset.TAG , android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } } if ( service == null ) android.util.Log.w ( android.bluetooth.BluetoothHeadset.TAG , "Proxy not attached to service" ) ; return false ; }
public java.lang.String getPath ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgDesc thisPkgDesc ) ;
public static com.android.internal.telephony.gsm.SmsMessage newFromCMT ( java.lang.String [ ] lines ) { try { com.android.internal.telephony.gsm.SmsMessage msg = new com.android.internal.telephony.gsm.SmsMessage ( ) ; msg.parsePdu ( com.android.internal.telephony.uicc.IccUtils.hexStringToBytes ( lines [ 1 ] ) ) ; return msg ; } catch ( java.lang.RuntimeException ex ) { android.telephony.Rlog.e ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "SMS PDU parsing failed: " , ex ) ; return null ; } }
public android.security.KeyPairGeneratorSpec build ( ) { return new android.security.KeyPairGeneratorSpec ( mContext , mKeystoreAlias , mKeyType , mKeySize , mSpec , mSubjectDN , mSerialNumber , mStartDate , mEndDate , mFlags , mKeyValidityStart , mKeyValidityForOriginationEnd , mKeyValidityForConsumptionEnd , mPurposes , mDigests , mPaddings , mBlockModes , mRandomizedEncryptionRequired , mUserAuthenticators , mUserAuthenticationValidityDurationSeconds ) ; }
public void testEmptyIterator ( ) { java.util.NavigableSet s = new java.util.concurrent.ConcurrentSkipListSet ( ) ; assertIteratorExhausted ( s.iterator ( ) ) ; assertIteratorExhausted ( s.descendingSet ( ) . iterator ( ) ) ; }
public static void execShell ( java.lang.String command ) { java.lang.String [ ] args = new java.lang.String [ ] { "/system/bin/sh" , "-c" , command } ; try { Libcore.os.execv ( args [ 0 ] , args ) ; } catch ( libcore.io.ErrnoException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public static void prepareCredential ( ) { if ( ( com.google.gct.testing.launcher.CloudAuthenticator.httpTransport ) == null ) { com.google.gct.testing.launcher.CloudAuthenticator.httpTransport = com.google.gct.testing.launcher.CloudAuthenticator.createHttpTransport ( ) ; } if ( ( com.google.gct.testing.launcher.CloudAuthenticator.credential ) == null ) { if ( ! ( com.google.gct.testing.launcher.CloudAuthenticator.authorize ( ) ) ) { throw new java.lang.RuntimeException ( "Failed to authorize to Google Cloud!" ) ; } com.google.gct.testing.launcher.CloudAuthenticator.credential = com.google.gct.login.GoogleLogin.getInstance ( ) . getCredential ( ) ; } }
public boolean startStreaming ( android.telephony.MbmsStreamingManager streamingManager ) { try { mStreamingService = streamingManager.startStreaming ( mStreamingServiceInfo , new com.android.phone.testapps.embmsfrontend.StreamingServiceTracker.Callback ( ) ) ; return true ; } catch ( android.telephony.mbms.MbmsException e ) { android.widget.Toast.makeText ( mActivity , ( "Error starting streaming: " + ( e.getErrorCode ( ) ) ) , Toast.LENGTH_SHORT ) . show ( ) ; } return false ; }
private void dispose ( ) { com.android.ide.eclipse.adt.internal.resources.manager.GlobalProjectMonitor monitor = com.android.ide.eclipse.adt.internal.resources.manager.GlobalProjectMonitor.getMonitor ( ) ; monitor.removeProjectListener ( mProjectListener ) ; monitor.removeFileListener ( mFileListener ) ; monitor.removeResourceEventListener ( mResourceEventListener ) ; synchronized ( com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock ) { for ( java.util.Map.Entry < org.eclipse.core.resources.IProject , com.android.ide.eclipse.adt.internal.project.ProjectState > entry : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.entrySet ( ) ) { entry.getValue ( ) . setTarget ( null ) ; } } }
private boolean isActionBarIcon ( com.android.tools.lint.detector.api.Context context , java.lang.String name , java.io.File file ) { if ( isActionBarIcon ( name ) ) { return true ; } if ( ( ( file != null ) && ( name.startsWith ( "ic_menu_" ) ) ) && ( com.android.tools.lint.checks.IconDetector.isAndroid30 ( context , com.android.tools.lint.detector.api.ResourceContext.getFolderVersion ( file ) ) ) ) { return true ; } return false ; }
public void add ( int index , long value ) { ensureCapacity ( 1 ) ; int rightSegment = ( mSize ) - index ; ( mSize ) ++ ; checkBounds ( index ) ; if ( rightSegment != 0 ) { java.lang.System.arraycopy ( mValues , index , mValues , ( index + 1 ) , rightSegment ) ; } mValues [ index ] = value ; }
public void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotDeleteFileException { assert ! ( vfs.isClosed ( ) ) ; java.io.File file = new java.io.File ( dir , path.getPathAsString ( java.io.File.separatorChar ) ) ; if ( ! ( file.delete ( ) ) ) { throw new com.android.sched.util.file.CannotDeleteFileException ( ( file.isDirectory ( ) ? new com.android.sched.util.location.DirectoryLocation ( file ) : new com.android.sched.util.location.FileLocation ( file ) ) ) ; } }
public java.util.List < java.io.File > getAidlImports ( ) { java.util.List < java.io.File > list = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.android.builder.AndroidDependency lib : mFlatLibraryProjects ) { java.io.File aidlLib = lib.getAidlFolder ( ) ; if ( ( aidlLib != null ) && ( aidlLib.isDirectory ( ) ) ) { list.add ( aidlLib ) ; } } return list ; }
private static void rotateDexFile ( ) { if ( ( com.android.dx.command.dexer.Main.outputDex ) != null ) { if ( ( com.android.dx.command.dexer.Main.dexOutPool ) != null ) { com.android.dx.command.dexer.Main.dexOutputFutures.add ( com.android.dx.command.dexer.Main.dexOutPool.submit ( new com.android.dx.command.dexer.Main.DexWriter ( com.android.dx.command.dexer.Main.outputDex ) ) ) ; } else { com.android.dx.command.dexer.Main.dexOutputArrays.add ( com.android.dx.command.dexer.Main.writeDex ( com.android.dx.command.dexer.Main.outputDex ) ) ; } } com.android.dx.command.dexer.Main.createDexFile ( ) ; }
public void testDetachFromWindow ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/DetachedFromWindow.java:7: Error: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/DetachedFromWindow.java:26: Error: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" ) + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "2 errors, 0 warnings\n" ) ) , lintProject ( ( "src/test/pkg/DetachedFromWindow.java.txt=>" + "src/test/pkg/DetachedFromWindow.java" ) ) ) ; }
public void testAesCbcHmacSha256Udp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public void dup2 ( ) { super . dup2 ( ) ; producerStack.pop ( ) ; producerStack.pop ( ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; actualProducerStack.dup2 ( ) ; }
public void testProcSelfPagemapSane ( ) throws android.system.ErrnoException , java.io.IOException { java.io.FileDescriptor pagemap = null ; int dumpable = android.system.Os.prctl ( OsConstants.PR_GET_DUMPABLE , 0 , 0 , 0 , 0 ) ; android.system.Os.prctl ( OsConstants.PR_SET_DUMPABLE , 1 , 0 , 0 , 0 ) ; try { pagemap = android.system.Os.open ( "/proc/self/pagemap" , OsConstants.O_RDONLY , 0 ) ; for ( android.util.Pair < java.lang.Long , java.lang.Long > range : android.permission.cts.FileSystemPermissionTest.mappedPageRanges ( ) ) if ( ! ( android.permission.cts.FileSystemPermissionTest.pfnIsZero ( pagemap , range.first , range.second ) ) ) fail ( ( "Device is missing the following kernel security patch: " + "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ab676b7d6fbf4b294bf198fb27ade5b0e865c7ce" ) ) ; } catch ( android.system.ErrnoException e ) { if ( ( e.errno ) == ( android.system.OsConstants.EPERM ) ) return ; throw e ; } finally { if ( pagemap != null ) android.system.Os.close ( pagemap ) ; android.system.Os.prctl ( OsConstants.PR_SET_DUMPABLE , dumpable , 0 , 0 , 0 ) ; } }
private boolean isPackageDeviceAdmin ( java.lang.String packageName , int userId ) { android.app.admin.IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface ( android.os.ServiceManager.getService ( Context.DEVICE_POLICY_SERVICE ) ) ; try { if ( ( dpm != null ) && ( ( dpm.packageHasActiveAdmins ( packageName , userId ) ) || ( dpm.isDeviceOwner ( packageName ) ) ) ) { return true ; } } catch ( android.os.RemoteException e ) { } return false ; }
public void testGetActivities ( ) { assertEquals ( 1 , mManifestTestApp.getActivities ( ) . length ) ; com.android.sdklib.xml.ManifestData.Activity activity = mManifestTestApp.getActivities ( ) [ 0 ] ; assertEquals ( com.android.ide.eclipse.adt.internal.project.AndroidManifestParserTest.ACTIVITY_NAME , activity.getName ( ) ) ; assertTrue ( activity.hasAction ( ) ) ; assertTrue ( activity.isHomeActivity ( ) ) ; assertTrue ( activity.hasAction ( ) ) ; assertEquals ( activity , mManifestTestApp.getActivities ( ) [ 0 ] ) ; }
private void enableUsageLocal ( ) { if ( com.android.server.wifi.aware.WifiAwareStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.aware.WifiAwareStateManager.TAG , ( "enableUsageLocal: mUsageEnabled=" + ( mUsageEnabled ) ) ) ; if ( mUsageEnabled ) { return ; } com.android.server.wifi.aware.WifiAwareNative.getInstance ( ) . deInitAware ( ) ; mUsageEnabled = true ; queryCapabilities ( ) ; createAllDataPathInterfaces ( ) ; sendAwareStateChangedBroadcast ( true ) ; }
public void testGetDeviceId ( ) { java.lang.String deviceId = mTelephonyManager.getDeviceId ( ) ; int phoneType = mTelephonyManager.getPhoneType ( ) ; switch ( phoneType ) { case android.telephony.TelephonyManager.PHONE_TYPE_GSM : android.telephony.cts.TelephonyManagerTest.assertImeiDeviceId ( deviceId ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_CDMA : android.telephony.cts.TelephonyManagerTest.assertCdmaDeviceId ( deviceId ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_NONE : assertNull ( deviceId ) ; assertHardwareId ( ) ; assertMacAddressReported ( ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "Did you add a new phone type? " + phoneType ) ) ; } }
private static java.lang.String intsToString ( int [ ] toConvert , int length ) { java.lang.String [ ] out = new java.lang.String [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { out [ i ] = "0x" + ( java.lang.Integer.toHexString ( toConvert [ i ] ) ) ; } return java.util.Arrays.toString ( out ) ; }
private static com.android.jack.shrob.proguard.ProguardParser createParserFromFile ( @ javax.annotation.Nonnull java.io.File file ) { try { com.android.jack.shrob.proguard.ProguardParser parser = com.android.jack.shrob.proguard.GrammarActions.createParserCommon ( new org.antlr.runtime.ANTLRFileStream ( file.getPath ( ) ) ) ; return parser ; } catch ( java.io.IOException e ) { com.android.jack.shrob.proguard.GrammarActions.logger.log ( java.util.logging.Level.SEVERE , "Error while creating parser for file {0}" , file.getPath ( ) ) ; } return null ; }
protected java.lang.String [ ] getCommonNicknameClusters ( java.lang.String normalizedName ) { return mCommonNicknameCache.getCommonNicknameClusters ( normalizedName ) ; }
public static void check ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.FileOrDirLocation location ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { assert file != null ; if ( ! ( file.exists ( ) ) ) { throw new com.android.sched.util.file.NoSuchFileException ( location ) ; } if ( ! ( file.isDirectory ( ) ) ) { throw new com.android.sched.util.file.NotDirectoryException ( ( ( com.android.sched.util.location.DirectoryLocation ) ( location ) ) ) ; } }
public void testDependencies ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( ( ( ( ( ( "" + ( ( ( ( ( ( "build.gradle:5: Warning: Old buildToolsVersion 19.0.0; recommended version is 19.1 or later [GradleDependency]\n" + " buildToolsVersion \"19.0.0\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:24: Warning: A newer version of com.google.guava:guava than 11.0.2 is available: 18.0 [GradleDependency]\n" ) + " freeCompile \'com.google.guava:guava:11.0.2\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:25: Warning: A newer version of com.android.support:appcompat-v7 than 13.0.0 is available: " ) ) + ( com.android.sdklib.SdkVersionInfo.HIGHEST_KNOWN_STABLE_API ) ) + ".0.0 [GradleDependency]\n" ) + " compile \'com.android.support:appcompat-v7:13.0.0\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 3 warnings\n" ) , lintProject ( "gradle/Dependencies.gradle=>build.gradle" ) ) ; }
static android.app.ContextImpl createSystemUiContext ( android.app.ContextImpl systemContext ) { final android.app.LoadedApk loadedApk = systemContext.mLoadedApk ; android.app.ContextImpl context = new android.app.ContextImpl ( null , systemContext.mMainThread , loadedApk , null , null , null , 0 , null ) ; context.setResources ( loadedApk.createResources ( null , null , Display.DEFAULT_DISPLAY , null , loadedApk.getCompatibilityInfo ( ) ) ) ; return context ; }
private java.net.InetAddress socksGetServerAddress ( ) throws java.net.UnknownHostException { java.net.InetSocketAddress socketAddress = ( ( java.net.InetSocketAddress ) ( proxy.address ( ) ) ) ; java.net.InetAddress address = socketAddress.getAddress ( ) ; return address != null ? address : java.net.InetAddress.getByName ( socketAddress.getHostName ( ) ) ; }
private java.util.List < java.lang.String > buildCommandLineJunit ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.CheckForNull java.lang.String jUnitRunnerName , @ javax.annotation.Nonnull java.lang.String [ ] jUnitTestClasses , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) { java.util.List < java.lang.String > commandLine = new java.util.ArrayList < java.lang.String > ( ) ; addStartOfCommandLine ( options , classpathFiles , commandLine ) ; commandLine.add ( jUnitRunnerName ) ; for ( java.lang.String className : jUnitTestClasses ) { commandLine.add ( className ) ; } return commandLine ; }
public java.lang.Class < ? > forClass ( ) { if ( ( cl ) == null ) { return null ; } requireInitialized ( ) ; if ( ( java.lang.System.getSecurityManager ( ) ) != null ) { if ( sun.reflect.misc.ReflectUtil.needsPackageAccessCheck ( dalvik.system.VMStack.getCallingClassLoader ( ) , cl.getClassLoader ( ) ) ) { sun.reflect.misc.ReflectUtil.checkPackageAccess ( cl ) ; } } return cl ; }
public void onFailure ( int reason , java.lang.String description ) { android.os.Bundle bundle = new android.os.Bundle ( ) ; bundle.putInt ( "callbackId" , mCallbackId ) ; bundle.putInt ( "sessionId" , mSessionId ) ; bundle.putInt ( "reason" , reason ) ; bundle.putString ( "description" , description ) ; mEventFacade.postEvent ( "WifiAwareRangingListenerOnFailure" , bundle ) ; }
private void handlePackageModified ( java.lang.String packageName , boolean removed ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( ( "packageName: " + packageName ) + " removed: " ) + removed ) ) ; if ( removed ) { if ( isBrowseSupported ( packageName ) ) { removePackageFromBrowseList ( packageName ) ; } } else { if ( isBrowsableListUpdated ( packageName ) ) { new com.android.bluetooth.avrcp.Avrcp.BrowsablePlayerListBuilder ( ) . start ( ) ; } } }
public void dump ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { pw.println ( "AwareSessionState:" ) ; pw.println ( ( " mSessionId: " + ( mSessionId ) ) ) ; pw.println ( ( " mIsPublishSession: " + ( mIsPublishSession ) ) ) ; pw.println ( ( " mPubSubId: " + ( mPubSubId ) ) ) ; pw.println ( ( ( " mMacByRequestorInstanceId: [" + ( mMacByRequestorInstanceId ) ) + "]" ) ) ; }
public void test_ja ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex.ImmutableIndex ja = libcore.icu.AlphabeticIndexTest.createIndex ( java.util.Locale.JAPANESE ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "Allen" , "A" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "ぁ" , "あ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "ァ" , "あ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "日" , "" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "Smith" , "S" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "沈" , "" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "ᄀ" , "" ) ; }
public java.lang.String getDescriptionForNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.util.Locale languageCode , java.lang.String userRegion ) { com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType numberType = phoneUtil.getNumberType ( number ) ; if ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.UNKNOWN ) ) { return "" ; } else if ( ! ( phoneUtil.isNumberGeographical ( numberType , number.getCountryCode ( ) ) ) ) { return getCountryNameForNumber ( number , languageCode ) ; } return getDescriptionForValidNumber ( number , languageCode , userRegion ) ; }
private void connectNativeNetdService ( ) { mNetdService = android.net.util.NetdService.get ( ) ; }
public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; when ( mWificond.createApInterface ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( null ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING , mWifiStateMachinePrime.getCurrentMode ( ) ) ; enterSoftApActiveMode ( ) ; }
public void finishAndRemoveTask ( ) { checkCaller ( ) ; synchronized ( this ) { long origId = android.os.Binder.clearCallingIdentity ( ) ; try { if ( ! ( removeTaskByIdLocked ( mTaskId , false , com.android.server.am.ActivityManagerService.REMOVE_FROM_RECENTS ) ) ) { throw new java.lang.IllegalArgumentException ( ( "Unable to find task ID " + ( mTaskId ) ) ) ; } } finally { android.os.Binder.restoreCallingIdentity ( origId ) ; } } }
public static boolean weakerAccess ( final int me , final int then ) { return ( ( ( ( me & ( org.jetbrains.org.objectweb.asm.Opcodes.ACC_PRIVATE ) ) > 0 ) && ( ( then & ( org.jetbrains.org.objectweb.asm.Opcodes.ACC_PRIVATE ) ) == 0 ) ) || ( ( ( me & ( org.jetbrains.org.objectweb.asm.Opcodes.ACC_PROTECTED ) ) > 0 ) && ( ( then & ( org.jetbrains.org.objectweb.asm.Opcodes.ACC_PUBLIC ) ) > 0 ) ) ) || ( ( org.jetbrains.jps.builders.java.dependencyView.Difference.isPackageLocal ( me ) ) && ( ( then & ( org.jetbrains.org.objectweb.asm.Opcodes.ACC_PROTECTED ) ) > 0 ) ) ; }
private void loadUrlOnUiThread ( final org.chromium.content_public.browser.LoadUrlParams loadUrlParams ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { assert ( mAppTargetSdkVersion ) < ( Build.VERSION_CODES.JELLY_BEAN_MR2 ) ; mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { mAwContents.loadUrl ( loadUrlParams ) ; } } ) ; return ; } mAwContents.loadUrl ( loadUrlParams ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; Main.testExceptionDetailMessages ( ) ; Main.testfindVirtual ( ) ; Main.testfindStatic ( ) ; Main.testUnreflects ( ) ; Main.testAsType ( ) ; Main.testConstructors ( ) ; Main.testStringConstructors ( ) ; Main.testReturnValueConversions ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; if ( ( ! ( versionedDxDir.exists ( ) ) ) && ( ! ( versionedDxDir.mkdirs ( ) ) ) ) { throw new java.io.IOException ( ( "Could not create " + ( versionedDxDir ) ) ) ; } clearVersionedDxDir ( ) ; getGeneratedProxyClasses ( ) . clear ( ) ; }
private void notifyHandshakeCompletedListeners ( ) { if ( ( ( listeners ) != null ) && ( ! ( listeners.isEmpty ( ) ) ) ) { javax.net.ssl.HandshakeCompletedEvent event = new javax.net.ssl.HandshakeCompletedEvent ( this , sslSession ) ; for ( javax.net.ssl.HandshakeCompletedListener listener : listeners ) { try { listener.handshakeCompleted ( event ) ; } catch ( java.lang.RuntimeException e ) { java.lang.Thread thread = java.lang.Thread.currentThread ( ) ; thread.getUncaughtExceptionHandler ( ) . uncaughtException ( thread , e ) ; } } } }
public void removeTasks ( @ org.jetbrains.annotations.NotNull java.util.Collection < com.intellij.openapi.externalSystem.model.task.TaskData > tasks , @ org.jetbrains.annotations.NotNull final com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.Phase phase ) { if ( tasks.isEmpty ( ) ) return ; removeTasks ( com.intellij.util.containers.ContainerUtil.map ( tasks , new com.intellij.util.Function < com.intellij.openapi.externalSystem.model.task.TaskData , com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.TaskActivationEntry > ( ) { @ java.lang.Override public com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.TaskActivationEntry fun ( com.intellij.openapi.externalSystem.model.task.TaskData data ) { return new com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.TaskActivationEntry ( data.getOwner ( ) , phase , data.getLinkedExternalProjectPath ( ) , data.getName ( ) ) ; } } ) ) ; }
public void testIntersectionType002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( INTERSECTION_TYPE_002 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName ( ) , java.lang.Boolean.TRUE.toString ( ) ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . compileAndRunTest ( ) ; }
public void testDupResourceSet ( ) throws java.lang.Exception { java.io.File root = com.android.builder.TestUtils.getRoot ( "resources" , "dupSet" ) ; com.android.builder.resources.ResourceSet set = new com.android.builder.resources.ResourceSet ( "main" ) ; set.addSource ( new java.io.File ( root , "res1" ) ) ; set.addSource ( new java.io.File ( root , "res2" ) ) ; boolean gotException = false ; com.android.builder.resources.RecordingLogger logger = new com.android.builder.resources.RecordingLogger ( ) ; try { set.loadFromFiles ( logger ) ; } catch ( com.android.builder.resources.DuplicateDataException e ) { gotException = true ; } checkLogger ( logger ) ; assertTrue ( gotException ) ; }
private void assertButtonHasFocus ( java.lang.String buttonId ) { android.support.test.uiautomator.UiObject2 menu = mDevice.findObject ( com.android.tv.testing.uihelper.Constants.MENU ) ; android.support.test.uiautomator.UiObject2 focusedView = menu.findObject ( com.android.tv.testing.uihelper.Constants.FOCUSED_VIEW ) ; assertNotNull ( "Play controls row doesn't have a focused child." , focusedView ) ; android.support.test.uiautomator.UiObject2 focusedButtonGroup = focusedView.getParent ( ) ; assertNotNull ( "The focused item should have parent" , focusedButtonGroup ) ; assertEquals ( buttonId , focusedButtonGroup.getResourceName ( ) ) ; }
public void testRemove2_IndexOutOfBounds ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.remove ( list.size ( ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public void onInitializeAccessibilityNodeInfo ( final android.view.accessibility.AccessibilityNodeInfo info ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onInitializeAccessibilityNodeInfo ( info ) ; } } ) ; return ; } mAwContents.onInitializeAccessibilityNodeInfo ( info ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , int [ ] data ) { validateIsInt32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_32 , data.length ) ; }
public void testEvaluateNetworks_onlyTrustedNetworksAllowed_noTrustedInScanList ( ) { android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks ( com.google.android.collect.Lists.newArrayList ( mUntrustedScanDetail ) , null , null , false , false , null ) ; junit.framework.Assert.assertNull ( result ) ; org.mockito.Mockito.verifyZeroInteractions ( mNetworkScoreManager ) ; }
public java.lang.Object [ ] getChildren ( java.lang.Object parentElement ) { if ( ( parentElement instanceof com.android.hierarchyviewerlib.device.IHvDevice ) && ( mDoTreeViewStuff ) ) { com.android.hierarchyviewerlib.models.Window [ ] list = mModel.getWindows ( ( ( com.android.hierarchyviewerlib.device.IHvDevice ) ( parentElement ) ) ) ; if ( list != null ) { return list ; } } return new java.lang.Object [ 0 ] ; }
public void run ( ) { synchronized ( this ) { mTree = mModel.getTree ( ) ; mSelectedNode = mModel.getSelection ( ) ; if ( ( mTree ) == null ) { mViewport = null ; } else { mViewport = new com.android.hierarchyviewerlib.ui.util.DrawableViewNode.Rectangle ( 0 , ( ( ( mTree.top ) + ( ( com.android.hierarchyviewerlib.ui.util.DrawableViewNode.NODE_HEIGHT ) / 2 ) ) - ( ( getBounds ( ) . height ) / 2 ) ) , getBounds ( ) . width , getBounds ( ) . height ) ; } } }
public void afterHandshake ( long session , long ssl , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.conscrypt.NativeCrypto.SSL_get0_alpn_selected ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; super . afterHandshake ( session , ssl , c , sock , fd , callback ) ; }
private void assertInstalled ( byte [ ] caBytes ) throws java.security.GeneralSecurityException , java.security.cert.CertificateException { java.security.cert.Certificate caCert = com.android.cts.deviceowner.CaCertManagementTest.readCertificate ( caBytes ) ; assertTrue ( isCaCertInstalledAndTrusted ( caCert ) ) ; }
private void queryCapabilityConfigurationInternal ( int capability , int radioTech , android.telephony.ims.aidl.IImsCapabilityCallback c ) { boolean enabled = queryCapabilityConfiguration ( capability , radioTech ) ; try { if ( c != null ) { c.onQueryCapabilityConfiguration ( capability , radioTech , enabled ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.ims.feature.MmTelFeature.LOG_TAG , "queryCapabilityConfigurationInternal called on dead binder!" ) ; } }
public void destroyAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , long ceDataInode ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.destroyAppData ( uuid , packageName , userId , flags , ceDataInode ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw com.android.server.pm.Installer.InstallerException.from ( e ) ; } }
public void readContent ( @ javax.annotation.Nonnull com.android.jack.jayce.v0003.io.JayceInternalReaderImpl in ) throws java.io.IOException { captureInstance = in.readBoolean ( ) ; capturedVariableIds = in.readIds ( ) ; method = in.readNode ( com.android.jack.jayce.v0003.nodes.NMethod.class ) ; typeSig = in.readId ( ) ; boundsIds = in.readIds ( ) ; mthIdToImplement = in.readNode ( com.android.jack.jayce.v0003.nodes.NMethodIdWithReturnType.class ) ; bridges = in.readNodes ( com.android.jack.jayce.v0003.nodes.NMethodIdWithReturnType.class ) ; }
private static boolean isDrawableFile ( java.lang.String name ) { return ( ( ( ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_PNG ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_JPG ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_GIF ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_XML ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_JPEG ) ) ; }
private void init ( java.lang.String pattern ) { this . icuDecimalFormat = new java.text.DecimalFormat ( pattern , symbols.getIcuDecimalFormatSymbols ( ) ) ; updateFieldsFromIcu ( ) ; }
public java.util.List < java.io.File > getProvidedOnlyJars ( ) { java.util.Set < java.io.File > jars = com.google.common.collect.Sets.newHashSetWithExpectedSize ( mJars.size ( ) ) ; for ( com.android.builder.dependency.JarDependency jar : mJars ) { java.io.File jarFile = jar.getJarFile ( ) ; if ( ( ( jar.isCompiled ( ) ) && ( ! ( jar.isPackaged ( ) ) ) ) && ( jarFile.exists ( ) ) ) { jars.add ( jarFile ) ; } } return com.google.common.collect.Lists.newArrayList ( jars ) ; }
final void getUnchecked ( int pos , long [ ] dst , int dstOffset , int length ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } libcore.io.Memory.peekLongArray ( ix ( pos ) , dst , dstOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public final int doFinal ( java.nio.ByteBuffer input , java.nio.ByteBuffer output ) throws javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException , javax.crypto.ShortBufferException { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( input == output ) { throw new java.lang.IllegalArgumentException ( "input == output" ) ; } return getSpi ( ) . engineDoFinal ( input , output ) ; }
private java.security.MessageDigest getMessageDigest ( ) { synchronized ( mLock ) { if ( ( mMessageDigest ) == null ) { try { mMessageDigest = java.security.MessageDigest.getInstance ( mJcaDigestAlgorithm ) ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new java.lang.RuntimeException ( ( ( mJcaDigestAlgorithm ) + " MessageDigest not available" ) , e ) ; } } return mMessageDigest ; } }
public void checkValidity ( ) { if ( ! ( ( ( ( ( ( ( parent ) instanceof com.android.jack.ir.ast.JExpression ) || ( ( parent ) instanceof com.android.jack.ir.ast.JNameValuePair ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JAnnotationMethod ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JReturnStatement ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.cfg.JReturnBlockElement ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JFieldInitializer ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
public static com.google.gct.testing.GoogleCloudTestingConfigurationImpl getConfigurationById ( int id , org.jetbrains.android.facet.AndroidFacet facet ) { for ( com.android.tools.idea.run.GoogleCloudTestingConfiguration configuration : com.google.gct.testing.GoogleCloudTestingUtils.TESTING_CONFIGURATION_FACTORY.getCustomConfigurationsFromStorage ( facet ) ) { if ( ( configuration.getId ( ) ) == id ) { return ( ( com.google.gct.testing.GoogleCloudTestingConfigurationImpl ) ( configuration ) ) ; } } for ( com.android.tools.idea.run.GoogleCloudTestingConfiguration configuration : com.google.gct.testing.GoogleCloudTestingUtils.TESTING_CONFIGURATION_FACTORY.getDefaultConfigurationsFromStorage ( facet ) ) { if ( ( configuration.getId ( ) ) == id ) { return ( ( com.google.gct.testing.GoogleCloudTestingConfigurationImpl ) ( configuration ) ) ; } } return null ; }
public static java.lang.String getProjectRelativePath ( java.lang.String reference ) { if ( ! ( reference.contains ( com.android.ide.eclipse.adt.AndroidConstants.WS_SEP ) ) ) { reference = ( ( com.android.sdklib.SdkConstants.FD_LAYOUT ) + ( com.android.ide.eclipse.adt.AndroidConstants.WS_SEP ) ) + reference ; } return ( ( ( ( com.android.sdklib.SdkConstants.FD_RESOURCES ) + ( com.android.ide.eclipse.adt.AndroidConstants.WS_SEP ) ) + reference ) + '.' ) + ( com.android.ide.eclipse.adt.AndroidConstants.EXT_XML ) ; }
public static java.lang.String findGCPRemoteUrl ( @ org.jetbrains.annotations.NotNull git4idea.repo.GitRepository repository ) { com.intellij.openapi.util.Pair < git4idea.repo.GitRemote , java.lang.String > remote = com.google.gct.idea.git.GcpHttpAuthDataProvider.findGCPRemote ( repository ) ; if ( remote == null ) { return null ; } return remote.getSecond ( ) ; }
public void visitLocalVariableInfo ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , proguard.classfile.editor.LocalVariableInfo localVariableInfo ) { java.lang.String descriptor = localVariableInfo.getDescriptor ( clazz ) ; java.lang.String newDescriptor = proguard.classfile.editor.ClassReferenceFixer.newDescriptor ( descriptor , localVariableInfo.referencedClass ) ; if ( ! ( descriptor.equals ( newDescriptor ) ) ) { localVariableInfo.u2descriptorIndex = new proguard.classfile.editor.ConstantPoolEditor ( ( ( proguard.classfile.editor.ProgramClass ) ( clazz ) ) ) . addUtf8Constant ( newDescriptor ) ; } }
private static final boolean hasCollationElements ( java.util.Locale locale ) { com.ibm.icu.impl.ICUResourceBundle rb = ( ( com.ibm.icu.impl.ICUResourceBundle ) ( com.ibm.icu.util.UResourceBundle.getBundleInstance ( ICUData.ICU_COLLATION_BASE_NAME , locale ) ) ) ; if ( rb != null ) { try { java.lang.String collkey = rb.getStringWithFallback ( "collations/default" ) ; com.ibm.icu.impl.ICUResourceBundle elements = rb.getWithFallback ( ( "collations/" + collkey ) ) ; if ( elements != null ) { return true ; } } catch ( java.lang.Exception e ) { } } return false ; }
public void moveAb ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.moveAb ( apkPath , instructionSet , outputPath ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
private boolean isNewMissedCall ( com.android.dialer.calllog.ui.CoalescedAnnotatedCallLogCursorLoader.Row row ) { return ( ( row.callType ( ) ) == ( android.provider.CallLog.Calls.MISSED_TYPE ) ) && ( row.isNew ( ) ) ; }
void removeService ( int serverIf , int handle ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "removeService() - handle=" + handle ) ) ; gattServerDeleteServiceNative ( serverIf , handle ) ; }
public void getSimIdentity2DigitMnc ( ) { android.telephony.TelephonyManager tm = mock ( android.telephony.TelephonyManager.class ) ; when ( tm.getSubscriberId ( ) ) . thenReturn ( "321560123456789" ) ; when ( tm.getSimState ( ) ) . thenReturn ( TelephonyManager.SIM_STATE_READY ) ; when ( tm.getSimOperator ( ) ) . thenReturn ( "32156" ) ; assertEquals ( "1321560123456789@wlan.mnc056.mcc321.3gppnetwork.org" , com.android.server.wifi.util.TelephonyUtil.getSimIdentity ( tm , com.android.server.wifi.WifiConfigurationTestUtil.createEapNetwork ( WifiEnterpriseConfig.Eap.SIM , WifiEnterpriseConfig.Phase2.NONE ) ) ) ; }
public void setPreferredNetworkType ( int networkType , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( RILConstants.RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE , response , mRILDefaultWorkSource ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( networkType ) ; mPreferredNetworkType = networkType ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " : " ) + networkType ) ) ; mMetrics.writeSetPreferredNetworkType ( mInstanceId , networkType ) ; send ( rr ) ; }
public void downPoint ( float [ ] imgPoint ) { path [ 0 ] = imgPoint [ 0 ] ; path [ 1 ] = imgPoint [ 1 ] ; len = 2 ; mPoints_backup.reset ( ) ; mPoints_backup.addPath ( mPoints ) ; mPoints.reset ( ) ; mPoints.moveTo ( imgPoint [ 0 ] , imgPoint [ 1 ] ) ; mUseDefaultRegion = false ; }
public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value intArrayValue = getStaticFieldValue ( debuggeeClassId , "INT_ARRAY" ) ; constructorArguments.add ( intArrayValue ) ; constructorArguments.add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( 0 ) ) ; constructorArguments.add ( new org.apache.harmony.jpda.tests.framework.jdwp.Value ( 1 ) ) ; }
public static com.google.devtools.common.options.OptionDefinition extractOptionDefinition ( java.lang.reflect.Field field ) { com.google.devtools.common.options.Option annotation = ( field == null ) ? null : field.getAnnotation ( com.google.devtools.common.options.Option.class ) ; if ( annotation == null ) { throw new com.google.devtools.common.options.OptionDefinition.NotAnOptionException ( field ) ; } return new com.google.devtools.common.options.OptionDefinition ( field , annotation ) ; }
public com.android.jack.ir.ast.JMethod getMethod ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull com.android.jack.ir.ast.JType returnType , @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.ir.ast.JType > args ) throws com.android.jack.lookup.JMethodLookupException { loader.ensureMethod ( this , name , args , returnType ) ; for ( com.android.jack.ir.ast.JMethod m : methods ) { if ( ( m.getMethodId ( ) . equals ( name , args ) ) && ( m.getType ( ) . isSameType ( returnType ) ) ) { return m ; } } throw new com.android.jack.lookup.JMethodWithReturnLookupException ( this , name , args , returnType ) ; }
void onSyncLost ( int syncHandle ) throws java.lang.Exception { if ( com.android.bluetooth.gatt.PeriodicScanManager.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.PeriodicScanManager.TAG , ( "onSyncLost() - syncHandle=" + syncHandle ) ) ; java.util.Map.Entry < android.os.IBinder , com.android.bluetooth.gatt.PeriodicScanManager.SyncInfo > entry = findSync ( syncHandle ) ; if ( entry == null ) { android.util.Log.i ( com.android.bluetooth.gatt.PeriodicScanManager.TAG , ( "onSyncLost() - no callback found for syncHandle " + syncHandle ) ) ; return ; } android.bluetooth.le.IPeriodicAdvertisingCallback callback = entry.getValue ( ) . callback ; mSyncs.remove ( entry ) ; callback.onSyncLost ( syncHandle ) ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case android.carrierapi.cts.NetworkScanApiTest.EVENT_NETWORK_SCAN_START : android.util.Log.d ( android.carrierapi.cts.NetworkScanApiTest.TAG , "request network scan" ) ; mNetworkScan = mTelephonyManager.requestNetworkScan ( mNetworkScanRequest , mNetworkScanCallback ) ; break ; default : android.util.Log.d ( android.carrierapi.cts.NetworkScanApiTest.TAG , ( "Unknown Event " + ( msg.what ) ) ) ; } }
private java.util.Set < java.lang.Integer > clearInternalUserData ( int userId ) { java.util.Set < java.lang.Integer > removedNetworkIds = new java.util.HashSet < > ( ) ; for ( android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks ( ) ) { if ( ( ! ( config.shared ) ) && ( com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile ( config.creatorUid , mUserManager.getProfiles ( userId ) ) ) ) { removedNetworkIds.add ( config.networkId ) ; mConfiguredNetworks.remove ( config.networkId ) ; } } mDeletedEphemeralSSIDs.clear ( ) ; mScanDetailCaches.clear ( ) ; clearLastSelectedNetwork ( ) ; return removedNetworkIds ; }
static com.android.bluetooth.hearingaid.HearingAidStateMachine make ( android.bluetooth.BluetoothDevice device , com.android.bluetooth.hearingaid.HearingAidService svc , com.android.bluetooth.hearingaid.HearingAidNativeInterface nativeInterface , android.os.Looper looper ) { android.util.Log.i ( com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG , ( "make for device " + device ) ) ; com.android.bluetooth.hearingaid.HearingAidStateMachine HearingAidSm = new com.android.bluetooth.hearingaid.HearingAidStateMachine ( device , svc , nativeInterface , looper ) ; HearingAidSm.start ( ) ; return HearingAidSm ; }
public synchronized void stopMonitoring ( java.lang.String iface ) { if ( mVerboseLoggingEnabled ) android.util.Log.d ( com.android.server.wifi.WifiMonitor.TAG , ( ( "stopMonitoring(" + iface ) + ")" ) ) ; setMonitoring ( iface , true ) ; broadcastSupplicantDisconnectionEvent ( iface ) ; setMonitoring ( iface , false ) ; }
public void onUserMobileDataStateChanged ( boolean state ) { logd ( "User Mobile Data State Changed" ) ; mUserMobileDataState = true ; setReady ( true ) ; }
private void buildInstanceOf ( com.android.jack.dx.rop.code.RegisterSpec destReg , com.android.jack.ir.ast.JInstanceOf instanceOf ) { com.android.jack.dx.rop.code.SourcePosition srcPos = com.android.jack.backend.dex.rop.RopHelper.getSourcePosition ( instanceOf ) ; addInstruction ( new com.android.jack.dx.rop.code.ThrowingCstInsn ( com.android.jack.dx.rop.code.Rops.INSTANCE_OF , srcPos , com.android.jack.dx.rop.code.RegisterSpecList.make ( getRegisterSpec ( instanceOf.getExpr ( ) ) ) , getCatchTypes ( ) , com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( instanceOf.getTestType ( ) ) ) ) ; addMoveResultPseudoAsExtraInstruction ( destReg , srcPos ) ; }
static com.android.resources.ResourceType getType ( org.w3c.dom.Node node ) { java.lang.String nodeName = node.getLocalName ( ) ; java.lang.String typeString = null ; if ( com.android.builder.resources.TAG_ITEM.equals ( nodeName ) ) { org.w3c.dom.Attr attribute = ( ( org.w3c.dom.Attr ) ( node.getAttributes ( ) . getNamedItemNS ( null , com.android.builder.resources.ATTR_TYPE ) ) ) ; if ( attribute != null ) { typeString = attribute.getValue ( ) ; } } else { typeString = nodeName ; } if ( typeString != null ) { return com.android.resources.ResourceType.getEnum ( typeString ) ; } return null ; }
public java.nio.ByteBuffer putDouble ( double value ) { checkIsAccessible ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } int newPosition = ( position ) + ( libcore.io.SizeOf.DOUBLE ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferOverflowException ( ) ; } this . block.pokeLong ( ( ( offset ) + ( position ) ) , java.lang.Double.doubleToRawLongBits ( value ) , order ) ; position = newPosition ; return this ; }
private void loadPackages ( boolean useLocalCache , boolean overrideExisting ) { if ( ( mImpl.mSwtUpdaterData ) == null ) { return ; } boolean displaySortByApi = isSortByApi ( ) ; if ( mTreeColumnName.isDisposed ( ) ) { return ; } mTreeColumnName.setImage ( getImage ( ( displaySortByApi ? PackagesPageIcons.ICON_SORT_BY_API : PackagesPageIcons.ICON_SORT_BY_SOURCE ) ) ) ; mImpl.loadPackagesImpl ( useLocalCache , overrideExisting ) ; }
public void rmdex ( java.lang.String codePath , java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { com.android.server.pm.Installer.assertValidInstructionSet ( instructionSet ) ; if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.rmdex ( codePath , instructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void testAddAll ( ) { java.util.Set full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; assertTrue ( full.addAll ( java.util.Arrays.asList ( three , four , five ) ) ) ; assertEquals ( 6 , full.size ( ) ) ; assertFalse ( full.addAll ( java.util.Arrays.asList ( three , four , five ) ) ) ; assertEquals ( 6 , full.size ( ) ) ; }
public void addListener ( java.lang.Runnable listener , java.util.concurrent.Executor executor ) { com.google.common.base.Preconditions.checkNotNull ( listener , "Runnable was null." ) ; com.google.common.base.Preconditions.checkNotNull ( executor , "Executor was null." ) ; try { executor.execute ( listener ) ; } catch ( java.lang.RuntimeException e ) { com.google.common.util.concurrent.Futures.ImmediateFuture.log.log ( java.util.logging.Level.SEVERE , ( ( ( "RuntimeException while executing runnable " + listener ) + " with executor " ) + executor ) , e ) ; } }
void resetBatteryLevel ( android.bluetooth.BluetoothDevice device ) { if ( device == null ) { com.android.bluetooth.btservice.RemoteDevices.warnLog ( "Device is null" ) ; return ; } com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProperties = getDeviceProperties ( device ) ; if ( deviceProperties == null ) { return ; } deviceProperties.setBatteryLevel ( BluetoothDevice.BATTERY_LEVEL_UNKNOWN ) ; }
public static int forkAndSpecialize ( int uid , int gid , int [ ] gids , int debugFlags , int [ ] [ ] rlimits , java.lang.String seInfo , java.lang.String niceName ) { dalvik.system.Zygote.preFork ( ) ; int pid = dalvik.system.Zygote.nativeForkAndSpecialize ( uid , gid , gids , debugFlags , rlimits , seInfo , niceName ) ; dalvik.system.Zygote.postFork ( ) ; return pid ; }
public static boolean contains ( java.io.File dir , java.io.File file ) { if ( ( dir == null ) || ( file == null ) ) return false ; return android.os.FileUtils.contains ( dir.getAbsolutePath ( ) , file.getAbsolutePath ( ) ) ; }
public void onAlternateLayoutCreated ( ) { org.eclipse.core.resources.IFile best = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher.getBestFileMatch ( this ) ; if ( ( best != null ) && ( ! ( best.equals ( mEditedFile ) ) ) ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher ( this ) ; matcher.adaptConfigSelection ( true ) ; mConfiguration.syncFolderConfig ( ) ; if ( ( mClient ) != null ) { mClient.changed ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration.MASK_ALL ) ; } } }
public void coreToJayceFromFolder ( ) throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options ( ) ; options.setBinaryFile ( new java.io.File ( ( ( com.android.jack.test.TestsProperties.getAndroidRootDir ( ) . getPath ( ) ) + "/out/target/common/obj/JAVA_LIBRARIES/core-libart_intermediates/classes/" ) ) ) ; options.setVerbose ( true ) ; options.container = ContainerType.DIR ; options.outputDirOrZip = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; new com.android.jill.Jill ( options , "0.1" ) . process ( options.getBinaryFile ( ) ) ; }
private java.io.File createTemporaryZipFile ( ) throws java.io.IOException { java.io.File result = java.io.File.createTempFile ( "ZipFileTest" , "zip" ) ; result.deleteOnExit ( ) ; return result ; }
public boolean unregisterNetworkEvaluator ( com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator evaluator ) { for ( com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators ) { if ( registeredEvaluator == evaluator ) { localLog ( ( "Unregistered network evaluator: " + ( evaluator.getName ( ) ) ) ) ; return true ; } } localLog ( ( "Couldn't unregister network evaluator: " + ( evaluator.getName ( ) ) ) ) ; return false ; }
public com.android.server.wifi.scanner.WifiScannerImpl create ( android.content.Context context , android.os.Looper looper , com.android.server.wifi.Clock clock ) { com.android.server.wifi.WifiNative wifiNative = com.android.server.wifi.WifiInjector.getInstance ( ) . getWifiNative ( ) ; com.android.server.wifi.WifiMonitor wifiMonitor = com.android.server.wifi.WifiInjector.getInstance ( ) . getWifiMonitor ( ) ; if ( wifiNative.getScanCapabilities ( new com.android.server.wifi.WifiNative.ScanCapabilities ( ) ) ) { return new com.android.server.wifi.scanner.HalWifiScannerImpl ( context , wifiNative , wifiMonitor , looper , clock ) ; } else { return new com.android.server.wifi.scanner.WificondScannerImpl ( context , wifiNative , wifiMonitor , looper , clock ) ; } }
public void acknowledgeLastIncomingCdmaSms ( boolean success , int cause , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE , result , mRILDefaultWorkSource ) ; rr.mParcel.writeInt ( ( success ? 0 : 1 ) ) ; rr.mParcel.writeInt ( cause ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " " ) + success ) + " " ) + cause ) ) ; send ( rr ) ; }
public void testCompile ( ) throws java.lang.Exception { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . addToClasspath ( toolchain.getDefaultBootClasspath ( ) ) . srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false , com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.java7.trywithresources.test001.jack" ) ) ; }
public java.lang.String getVoiceMailNumber ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; java.lang.String number = ( r != null ) ? r.getVoiceMailNumber ( ) : "" ; if ( android.text.TextUtils.isEmpty ( number ) ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; number = sp.getString ( com.android.internal.telephony.gsm.GSMPhone.VM_NUMBER , null ) ; } return number ; }
public static com.google.common.collect.ImmutableMap < com.google.devtools.common.options.OptionMetadataTag , java.lang.String > getOptionMetadataTagDescription ( java.lang.String productName ) { com.google.common.collect.ImmutableMap.Builder < com.google.devtools.common.options.OptionMetadataTag , java.lang.String > effectTagDescriptionBuilder = com.google.common.collect.ImmutableMap.builder ( ) ; effectTagDescriptionBuilder.put ( OptionMetadataTag.EXPERIMENTAL , "This option triggers an experimental feature with no guarantees of functionality." ) . put ( OptionMetadataTag.INCOMPATIBLE_CHANGE , ( "This option triggers a breaking change. Use this option to test your migration " + "readiness or get early access to the new feature" ) ) . put ( OptionMetadataTag.DEPRECATED , ( "This option is deprecated. It might be that the feature it affects is deprecated, " + "or that another method of supplying the information is preferred." ) ) . put ( OptionMetadataTag.TRIGGERED_BY_ALL_INCOMPATIBLE_CHANGES , "This option is triggered by the expansion option --all_incompatible_changes." ) . put ( OptionMetadataTag.HIDDEN , "This option should not be used by a user, and should not be logged." ) . put ( OptionMetadataTag.INTERNAL , "This option isn't even a option, and should not be logged." ) ; return effectTagDescriptionBuilder.build ( ) ; }
void moveUserToForeground ( com.android.server.am.UserStartedState uss , int oldUserId , int newUserId ) { boolean homeInFront = mStackSupervisor.switchUserLocked ( newUserId , uss ) ; if ( homeInFront ) { startHomeActivityLocked ( newUserId , "moveUserToFroreground" ) ; } else { mStackSupervisor.resumeTopActivitiesLocked ( ) ; } com.android.server.am.EventLogTags.writeAmSwitchUser ( newUserId ) ; getUserManagerLocked ( ) . userForeground ( newUserId ) ; sendUserSwitchBroadcastsLocked ( oldUserId , newUserId ) ; }
private static android.net.wifi.hotspot2.pps.Credential createCredentialWithUserCredential ( ) { android.net.wifi.hotspot2.pps.Credential.UserCredential userCred = new android.net.wifi.hotspot2.pps.Credential.UserCredential ( ) ; userCred.setUsername ( "username" ) ; userCred.setPassword ( "password" ) ; userCred.setMachineManaged ( true ) ; userCred.setAbleToShare ( true ) ; userCred.setSoftTokenApp ( "TestApp" ) ; userCred.setEapType ( EAPConstants.EAP_TTLS ) ; userCred.setNonEapInnerMethod ( "MS-CHAP" ) ; return android.net.wifi.hotspot2.pps.CredentialTest.createCredential ( userCred , null , null , FakeKeys.CA_CERT0 , null , null ) ; }
public com.android.jack.ir.ast.JMethodId get ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId method ) { com.android.jack.frontend.VirtualMethodsMarker.ComparableMethodId searched = new com.android.jack.frontend.VirtualMethodsMarker.ComparableMethodId ( method ) ; com.android.jack.frontend.VirtualMethodsMarker.ComparableMethodId found = virtualMethods.get ( searched ) ; if ( found != null ) { return found.methodId ; } else { return null ; } }
public static java.net.InetAddress getByAddress ( java.lang.String host , byte [ ] addr ) throws java.net.UnknownHostException { return java.net.InetAddress.getByAddress ( host , addr , ( - 1 ) ) ; }
public static com.android.tools.lint.checks.PermissionHolder join ( @ com.android.annotations.NonNull com.android.tools.lint.checks.PermissionHolder lookup , @ com.android.annotations.NonNull com.android.tools.lint.checks.PermissionRequirement requirement ) { com.android.tools.lint.checks.PermissionHolder.SetPermissionLookup empty = new com.android.tools.lint.checks.PermissionHolder.SetPermissionLookup ( java.util.Collections.< java.lang.String > emptySet ( ) , java.util.Collections.< java.lang.String > emptySet ( ) , lookup.getMinSdkVersion ( ) , lookup.getTargetSdkVersion ( ) ) ; return com.android.tools.lint.checks.PermissionHolder.SetPermissionLookup.join ( lookup , requirement.getMissingPermissions ( empty ) ) ; }
public static < T extends com.google.protobuf.nano.MessageNano > java.lang.String print ( T message ) { if ( message == null ) { return "" ; } java.lang.StringBuffer buf = new java.lang.StringBuffer ( ) ; try { com.google.protobuf.nano.MessageNanoPrinter.print ( null , message.getClass ( ) , message , new java.lang.StringBuffer ( ) , buf ) ; } catch ( java.lang.IllegalAccessException e ) { return "Error printing proto: " + ( e.getMessage ( ) ) ; } return buf.toString ( ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "VoicemailTosMessageCreator.getPromoMessage" , "declined transcription" ) ; if ( isVoicemailTranscriptionAvailable ( ) ) { com.android.voicemail.VoicemailClient voicemailClient = com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) ; voicemailClient.setVoicemailTranscriptionEnabled ( context , status.getPhoneAccountHandle ( ) , false ) ; recordTosAcceptance ( ) ; recordFeatureAcknowledgement ( ) ; statusReader.refresh ( ) ; } else { com.android.dialer.common.LogUtil.e ( "VoicemailTosMessageCreator.getPromoMessage" , "voicemail transcription not available" ) ; } }
public void assertNoMultilineButtons ( ) { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.wrap ) ) . perform ( android.support.test.espresso.action.ViewActions.click ( ) ) ; expectedException.expect ( junit.framework.AssertionFailedError.class ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.isRoot ( ) ) . check ( android.support.test.espresso.assertion.LayoutAssertions.noMultilineButtons ( ) ) ; }
public java.lang.String getDigest ( ) { if ( containsFileType ( FileType.PREBUILT ) ) { return getSectionVFS ( FileType.PREBUILT ) . getDigest ( ) ; } else if ( containsFileType ( FileType.JAYCE ) ) { return getSectionVFS ( FileType.JAYCE ) . getDigest ( ) ; } else { return null ; } }
public void run ( ) { org.eclipse.jface.viewers.TreeSelection selection = ( ( org.eclipse.jface.viewers.TreeSelection ) ( mTreeViewer.getSelection ( ) ) ) ; mTreeViewer.refresh ( device ) ; if ( ( ( selection.getFirstElement ( ) ) instanceof com.android.hierarchyviewerlib.models.Window ) && ( ( ( ( com.android.hierarchyviewerlib.models.Window ) ( selection.getFirstElement ( ) ) ) . getDevice ( ) ) == device ) ) { mTreeViewer.setSelection ( selection , true ) ; } }
public boolean checkAndSet ( java.lang.String value , com.android.ide.common.resources.configuration.FolderConfiguration config ) { com.android.resources.Navigation method = com.android.resources.Navigation.getEnum ( value ) ; if ( method != null ) { com.android.ide.common.resources.configuration.NavigationMethodQualifier qualifier = new com.android.ide.common.resources.configuration.NavigationMethodQualifier ( method ) ; config.setNavigationMethodQualifier ( qualifier ) ; return true ; } return false ; }
void copySelectionToClipboard ( com.android.documentsui.dirlist.MultiSelectManager.Selection selected ) { assert ! ( selected.isEmpty ( ) ) ; java.util.List < com.android.documentsui.model.DocumentInfo > docs = mModel.getDocuments ( selected ) ; mClipper.clipDocuments ( docs ) ; android.app.Activity activity = getActivity ( ) ; com.android.documentsui.Snackbars.makeSnackbar ( activity , activity.getResources ( ) . getQuantityString ( R.plurals.clipboard_files_clipped , docs.size ( ) , docs.size ( ) ) , Snackbar.LENGTH_SHORT ) . show ( ) ; }
public java.io.File getOutputDirectory ( org.gradle.nativeplatform.BuildType buildType , org.gradle.nativeplatform.platform.Platform platform ) { return new java.io.File ( ( ( ( ( project.getBuildDir ( ) ) + "/" ) + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/binaries/" ) , ( ( ( ( ( ndkExtension.getModuleName ( ) ) + "SharedLibrary/" ) + ( buildType.getName ( ) ) ) + "/lib/" ) + ( platform.getName ( ) ) ) ) ; }
public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { com.google.common.base.Preconditions.checkState ( ( ( internalName ) == null ) , "not intended for reuse but reused for %s" , name ) ; internalName = name ; isInterface = com.google.devtools.build.android.desugar.BitFlags.isSet ( access , Opcodes.ACC_INTERFACE ) ; super . visit ( version , access , name , signature , superName , interfaces ) ; }
private boolean shouldTurnOffSignalStrength ( ) { if ( mIsPowerSaveOn ) { return true ; } if ( ( ( mIsCharging ) || ( mIsScreenOn ) ) || ( ( mUpdateModes.get ( TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH ) ) == ( android.telephony.TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF ) ) ) { return false ; } return true ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; getProject ( ) ; }
private void updateAccessPointsDelayed ( ) { if ( ( ( ( getActivity ( ) ) != null ) && ( ! ( mIsRestricted ) ) ) && ( mWifiManager.isWifiEnabled ( ) ) ) { android.os.Handler handler = getView ( ) . getHandler ( ) ; if ( ( handler != null ) && ( handler.hasCallbacks ( mUpdateAccessPointsRunnable ) ) ) { return ; } setProgressBarVisible ( true ) ; getView ( ) . postDelayed ( mUpdateAccessPointsRunnable , 300 ) ; } }
public void testAssistStructure ( ) throws java.lang.Exception { if ( mActivityManager.isLowRamDevice ( ) ) { android.util.Log.d ( android.assist.cts.AssistStructureTest.TAG , "Not running assist tests on low-RAM device." ) ; return ; } mTestActivity.start3pApp ( android.assist.cts.AssistStructureTest.TEST_CASE_TYPE ) ; mTestActivity.startTest ( android.assist.cts.AssistStructureTest.TEST_CASE_TYPE ) ; waitForAssistantToBeReady ( mReadyLatch ) ; waitForOnResume ( ) ; startSession ( ) ; waitForContext ( ) ; verifyAssistDataNullness ( false , false , false , false ) ; verifyAssistStructure ( android.assist.common.Utils.getTestAppComponent ( android.assist.cts.AssistStructureTest.TEST_CASE_TYPE ) , false ) ; }
android.net.INetworkPolicyListener waitAndVerify ( ) { org.junit.Assert.assertNotNull ( "waitAndVerify() called before expect()" , latch ) ; try { org.junit.Assert.assertTrue ( "callback not called in 5 seconds" , latch.await ( 5 , java.util.concurrent.TimeUnit.SECONDS ) ) ; } catch ( java.lang.InterruptedException e ) { org.junit.Assert.fail ( "Thread interrupted before callback called" ) ; } finally { latch = null ; } return org.mockito.Mockito.verify ( listener , org.mockito.Mockito.atLeastOnce ( ) ) ; }
void load ( java.lang.String pathName , java.lang.ClassLoader loader ) { if ( pathName == null ) { throw new java.lang.NullPointerException ( "pathName == null" ) ; } java.lang.String error = doLoad ( pathName , loader ) ; if ( error != null ) { throw new java.lang.UnsatisfiedLinkError ( error ) ; } }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSynchronizedBlock jSyncBock ) { assert ( lockClass ) != null ; if ( ! ( jSyncBock.getLockExpr ( ) . getType ( ) . isSameType ( lockClass ) ) ) { return ; } tr.append ( new com.android.jack.transformations.request.PrependStatement ( jSyncBock.getSynchronizedBlock ( ) , makeRequestCall ( jSyncBock.getSourceInfo ( ) ) ) ) ; com.android.jack.ir.ast.JTryStatement tryStmt = makeTryStatement ( jSyncBock.getSourceInfo ( ) , jSyncBock ) ; tr.append ( new com.android.jack.transformations.request.Replace ( jSyncBock , tryStmt ) ) ; }
public void testTransmitFollowupSuccess ( ) throws org.json.JSONException { final short transactionId = 123 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "id" , transactionId ) ; args.putInt ( "reason" , WifiAwareNative.AWARE_STATUS_SUCCESS ) ; com.android.server.wifi.aware.WifiAwareHalMock.callTransmitFollowup ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mAwareStateManager ) . onMessageSendSuccessNotification ( transactionId ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
private static java.io.File getOutArgumentPath ( java.lang.String filename ) { java.io.File file = new java.io.File ( filename ) ; if ( ! ( file.isAbsolute ( ) ) ) { java.io.File workDir = com.android.tools.lint.Main.getLintWorkDir ( ) ; if ( workDir != null ) { java.io.File file2 = new java.io.File ( workDir , filename ) ; try { file = file2.getCanonicalFile ( ) ; } catch ( java.io.IOException e ) { file = file2 ; } } } return file ; }
private java.io.File findApk ( java.lang.String filename ) { java.io.File file = new java.io.File ( getApkDir ( ) , filename ) ; if ( file.exists ( ) ) { return file ; } file = new java.io.File ( getApkDir ( ) , ( ( ( com.google.common.io.Files.getNameWithoutExtension ( filename ) ) + "/" ) + filename ) ) ; if ( file.exists ( ) ) { return file ; } return null ; }
private com.android.jack.ir.JNodeInternalError translateException ( java.lang.Exception e ) { return new com.android.jack.ir.JNodeInternalError ( "Error building Jack IR" , e ) ; }
private static java.io.File prepareLib ( @ javax.annotation.Nonnull java.io.File sources , @ javax.annotation.Nonnull java.io.File ... classpath ) throws java.lang.Exception { java.io.File outDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; java.util.List < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > exclude = new java.util.ArrayList < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > ( ) ; exclude.add ( com.android.jack.test.toolchain.LegacyJillToolchain.class ) ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class , exclude ) ; toolchain.addToClasspath ( toolchain.getDefaultBootClasspath ( ) ) . addToClasspath ( classpath ) . srcToLib ( outDir , false , sources ) ; return outDir ; }
public void test10089890 ( ) throws java.lang.Exception { assertEquals ( "Jan 1–2" , formatDateRange ( 0 , libcore.icu.DateIntervalFormatTest.DAY , ( ( FORMAT_SHOW_DATE ) | ( FORMAT_ABBREV_ALL ) ) , "Europe/London" ) ) ; assertEquals ( "Dec 31, 1969 – Jan 1, 1970" , formatDateRange ( 0 , libcore.icu.DateIntervalFormatTest.DAY , ( ( FORMAT_SHOW_DATE ) | ( FORMAT_ABBREV_ALL ) ) , "America/Los_Angeles" ) ) ; }
public void requestFocusNodeHref ( final android.os.Message hrefMsg ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { requestFocusNodeHref ( hrefMsg ) ; } } ) ; return ; } mAwContents.requestFocusNodeHref ( hrefMsg ) ; }
private void setContext ( android.content.Context context ) { mApplicationContext = context.getApplicationContext ( ) ; if ( ( mApplicationContext ) != null ) { mOriginalContext = null ; } else { mOriginalContext = context ; } }
public void copy2DRangeTo ( int xoff , int yoff , int w , int h , short [ ] data ) { validateIsInt16 ( ) ; copy2DRangeToUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_16 , data.length ) ; }
public void dump ( java.lang.StringBuilder sb ) { super . dump ( sb ) ; if ( ( mShares.size ( ) ) > 0 ) { println ( sb , "Shares:" ) ; for ( com.android.bluetooth.opp.BluetoothOppShareInfo info : mShares ) { java.lang.String dir = ( ( info.mDirection ) == ( BluetoothShare.DIRECTION_OUTBOUND ) ) ? "->" : "<-" ; java.text.SimpleDateFormat format = new java.text.SimpleDateFormat ( "MM'.'dd'@'HH':'mm':'ss" , java.util.Locale.US ) ; java.util.Date date = new java.util.Date ( info.mTimestamp ) ; println ( sb , ( ( ( ( ( ( ( ( " " + ( format.format ( date ) ) ) + ": " ) + dir ) + " " ) + ( info.mCurrentBytes ) ) + "/" ) + ( info.mTotalBytes ) ) + "B " ) ) ; } } }
public void testSubList3_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.subList ( ( ( list.size ( ) ) - 1 ) , 1 ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public static final long getStartUptimeMillis ( ) { return android.os.Process.sStartUptimeMillis ; }
java.lang.Object readResolve ( ) { int n = elements.length ; com.google.common.collect.ImmutableSortedMultiset.Builder < E > builder = new com.google.common.collect.ImmutableSortedMultiset.Builder < E > ( comparator ) ; for ( int i = 0 ; i < n ; i ++ ) { builder.addCopies ( elements [ i ] , counts [ i ] ) ; } return builder.build ( ) ; }
private static int from3DigitVersionString ( java.lang.String versionString ) throws libcore.tzdata.shared2.DistroException { final java.lang.String parseErrorMessage = "versionString must be a zero padded, 3 digit, positive" + " decimal integer" ; if ( ( versionString.length ( ) ) != 3 ) { throw new libcore.tzdata.shared2.DistroException ( parseErrorMessage ) ; } try { int version = java.lang.Integer.parseInt ( versionString ) ; return libcore.tzdata.shared2.DistroVersion.validate3DigitVersion ( version ) ; } catch ( java.lang.NumberFormatException e ) { throw new libcore.tzdata.shared2.DistroException ( parseErrorMessage , e ) ; } }
public java.net.Socket createSocket ( java.net.InetAddress addr , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl s = ( ( org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( addr , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; return s ; }
private static java.util.Properties createProps ( com.android.sdklib.internal.repository.packages.PreviewVersion previewVersion , int minPlatformToolsRev ) { java.util.Properties props = new java.util.Properties ( ) ; props.setProperty ( PkgProps.MIN_PLATFORM_TOOLS_REV , java.lang.Integer.toString ( minPlatformToolsRev ) ) ; if ( previewVersion != null ) { props.setProperty ( PkgProps.PKG_MINOR_REV , java.lang.Integer.toString ( previewVersion.getMinor ( ) ) ) ; props.setProperty ( PkgProps.PKG_MICRO_REV , java.lang.Integer.toString ( previewVersion.getMicro ( ) ) ) ; props.setProperty ( PkgProps.PKG_PREVIEW_REV , java.lang.Integer.toString ( previewVersion.getPreview ( ) ) ) ; } return props ; }
synchronized boolean unplug ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "unplug(): device=" + device ) ) ; } return ( ( checkDevice ( device ) ) && ( checkCallingUid ( ) ) ) && ( mHidDeviceNativeInterface.unplug ( ) ) ; }
private void setWindowImage ( org.eclipse.swt.widgets.Shell shell ) { java.lang.String imageName = "android_icon_16.png" ; if ( ( com.android.sdklib.SdkConstants.currentPlatform ( ) ) == ( com.android.sdklib.SdkConstants.PLATFORM_DARWIN ) ) { imageName = "android_icon_128.png" ; } if ( ( mUpdaterData ) != null ) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory ( ) ; if ( imgFactory != null ) { shell.setImage ( imgFactory.getImageByName ( imageName ) ) ; } } }
public java.nio.file.Path convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { java.nio.file.Path path = java.nio.file.FileSystems.getDefault ( ) . getPath ( input ) ; if ( ( mustExist ) && ( ! ( java.nio.file.Files.exists ( path ) ) ) ) { throw new com.google.devtools.common.options.OptionsParsingException ( java.lang.String.format ( "%s is not a valid path: it does not exist." , input ) ) ; } return path ; } catch ( java.nio.file.InvalidPathException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( java.lang.String.format ( "%s is not a valid path: %s." , input , e.getMessage ( ) ) , e ) ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; this . source3 = getLongMessage ( 1000000 ) ; this . digest = java.security.MessageDigest.getInstance ( digestAlgorithmName ) ; this . sourceData = getSourceData ( ) ; this . checkDigest = getCheckDigest ( ) ; }
public void testClassEntryCompareContract ( ) throws java.lang.Exception { com.android.tools.lint.client.api.ClassEntry c0 = new com.android.tools.lint.client.api.ClassEntry ( new java.io.File ( "abcde" ) , null , null , null ) ; com.android.tools.lint.client.api.ClassEntry c1 = new com.android.tools.lint.client.api.ClassEntry ( new java.io.File ( "abcde" ) , null , null , null ) ; assertTrue ( ( ( c0.compareTo ( c1 ) ) <= 0 ) ) ; assertTrue ( ( ( c1.compareTo ( c0 ) ) <= 0 ) ) ; }
synchronized void nAllocationData2D ( long dstAlloc , int dstXoff , int dstYoff , int dstMip , int dstFace , int width , int height , long srcAlloc , int srcXoff , int srcYoff , int srcMip , int srcFace ) { validate ( ) ; rsnAllocationData2D ( mContext , dstAlloc , dstXoff , dstYoff , dstMip , dstFace , width , height , srcAlloc , srcXoff , srcYoff , srcMip , srcFace ) ; }
private void handlePassthroughCmdRequestFromNative ( byte [ ] address , int id , int keyState ) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler ; if ( handler == null ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) { android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , "handlePassthroughCmdRequestFromNative: mHandler is already null" ) ; } return ; } android.os.Message msg = handler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PASS_THROUGH , id , keyState ) ; handler.sendMessage ( msg ) ; }
private static void assertCdmaDeviceId ( java.lang.String deviceId ) { if ( ( deviceId.length ( ) ) == 14 ) { android.telephony.cts.TelephonyManagerTest.assertMeidFormat ( deviceId ) ; } else if ( ( deviceId.length ( ) ) == 8 ) { android.telephony.cts.TelephonyManagerTest.assertHexadecimalEsnFormat ( deviceId ) ; } else { fail ( "device id on CDMA must be 14-digit hex MEID or 8-digit hex ESN." ) ; } }
public java.lang.String getVoiceMailNumberForSubscriber ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mContext , callingPackage , "getVoiceMailNumber" ) ) ) { return null ; } java.lang.String number = android.telephony.PhoneNumberUtils.extractNetworkPortion ( phone.getVoiceMailNumber ( ) ) ; if ( com.android.internal.telephony.PhoneSubInfoController.VDBG ) log ( ( "VM: getVoiceMailNUmber: " + number ) ) ; return number ; } else { loge ( ( "getVoiceMailNumber phone is null for Subscription:" + subId ) ) ; return null ; } }
public int hashCode ( ) { return ( ( ( ( ( ( ( scanType ) * 31 ) + ( ( java.util.Arrays.hashCode ( specifiers ) ) * 37 ) ) + ( ( searchPeriodicity ) * 41 ) ) + ( ( maxSearchTime ) * 43 ) ) + ( ( ( incrementalResults ) == true ? 1 : 0 ) * 47 ) ) + ( ( incrementalResultsPeriodicity ) * 53 ) ) + ( ( mccMncs.hashCode ( ) ) * 59 ) ; }
public void testSplashscreenContent ( ) throws java.lang.Exception { launchActivityNoWait ( "SplashscreenActivity" ) ; mAmWmState.waitForAppTransitionIdle ( mDevice ) ; mAmWmState.getWmState ( ) . getStableBounds ( ) ; final java.awt.image.BufferedImage image = takeScreenshot ( ) ; assertColors ( image , mAmWmState.getWmState ( ) . getStableBounds ( ) , java.awt.Color.RED.getRGB ( ) , 0.5F , java.awt.Color.BLACK.getRGB ( ) , 0.01F ) ; }
public void getImsRegistrationState ( android.os.Message result ) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy ( result ) ; if ( radioProxy != null ) { com.android.internal.telephony.RILRequest rr = obtainRequest ( com.android.internal.telephony.RIL_REQUEST_IMS_REGISTRATION_STATE , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) { riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; } try { radioProxy.getImsRegistrationState ( rr.mSerial ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { handleRadioProxyExceptionForRR ( rr , "getImsRegistrationState" , e ) ; } } }
private int getCallerAllowedResolutionLevel ( ) { return getAllowedResolutionLevel ( android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) ) ; }
public int movedex ( java.lang.String srcPath , java.lang.String dstPath , java.lang.String instructionSet ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "movedex" ) ; builder.append ( ' ' ) ; builder.append ( srcPath ) ; builder.append ( ' ' ) ; builder.append ( dstPath ) ; builder.append ( ' ' ) ; builder.append ( instructionSet ) ; return execute ( builder.toString ( ) ) ; }
private void setWfcModeInternalForSlot ( int wfcMode ) { final int value = wfcMode ; java.lang.Thread thread = new java.lang.Thread ( ( ) -> { try { getConfigInterface ( ) . setProvisionedValue ( ImsConfig.ConfigConstants.VOICE_OVER_WIFI_MODE , value ) ; } catch ( com.android.ims.ImsException e ) { } } ) ; thread.start ( ) ; }
public static double $noinline$returnDouble ( ) { if ( Main.doThrow ) throw new java.lang.Error ( "" ) ; int i = 0 ; for ( ; i < 300000 ; ++ i ) { } while ( ! ( Main.ensureInOsrCode ( ) ) ) { } java.lang.System.out.println ( i ) ; return java.lang.Double.longBitsToDouble ( - 1152921504606842607L ) ; }
public void testDecode_urlAlphabet ( ) throws java.lang.Exception { assertNull ( libcore.io.Base64Test.decodeToInts ( "_w==" ) ) ; assertNull ( libcore.io.Base64Test.decodeToInts ( "-w==" ) ) ; }
public void log ( java.util.logging.Level level , java.lang.String msg , java.lang.Object [ ] params ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setParameters ( params ) ; doLog ( lr ) ; }
protected void registerTabs ( ) { addFailuresTab ( ) ; if ( ! ( getResults ( ) . getPackages ( ) . isEmpty ( ) ) ) { addTab ( "Packages" , new org.gradle.api.Action < org.w3c.dom.Element > ( ) { @ java.lang.Override public void execute ( org.w3c.dom.Element element ) { renderPackages ( element ) ; } } ) ; } addTab ( "Classes" , new org.gradle.api.Action < org.w3c.dom.Element > ( ) { @ java.lang.Override public void execute ( org.w3c.dom.Element element ) { renderClasses ( element ) ; } } ) ; addDeviceAndVariantTabs ( ) ; }
public final android.content.IContentProvider acquireUnstableProvider ( android.net.Uri uri ) { if ( ! ( android.content.ContentResolver.SCHEME_CONTENT.equals ( uri.getScheme ( ) ) ) ) { return null ; } java.lang.String auth = uri.getAuthority ( ) ; if ( auth != null ) { return acquireUnstableProvider ( mContext , uri.getAuthority ( ) ) ; } return null ; }
public void replaceWith ( com.android.ide.common.rendering.api.ResourceValue value ) { assert value instanceof com.android.ide.common.rendering.api.StyleResourceValue : ( value.getClass ( ) ) + " is not StyleResourceValue" ; super . replaceWith ( value ) ; if ( value instanceof com.android.ide.common.rendering.api.StyleResourceValue ) { mItems.clear ( ) ; mItems.putAll ( ( ( com.android.ide.common.rendering.api.StyleResourceValue ) ( value ) ) . mItems ) ; } }
public void matchesIntentWithTypeAndMatcherWithNoType ( ) { org.hamcrest.Matcher < android.content.Intent > matcher = android.support.test.espresso.intent.matcher.IntentMatchers.hasAction ( org.hamcrest.Matchers.equalTo ( Intent.ACTION_VIEW ) ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_VIEW ) . addCategory ( "category" ) . setDataAndType ( uri , Context.ACTIVITY_SERVICE ) ; org.junit.Assert.assertTrue ( matcher.matches ( intent ) ) ; }
private vogar.tasks.Task newCreateDexJarTask ( vogar.Classpath classpath , java.io.File classpathElement , java.lang.String name , vogar.Action action , java.io.File localDex ) { vogar.tasks.Task dex ; if ( run.useJack ) { dex = new vogar.android.JackDexTask ( run , classpath , run.benchmark , name , classpathElement , null , localDex ) ; } else { dex = new vogar.android.DexTask ( run.androidSdk , classpath , run.benchmark , name , classpathElement , action , localDex ) ; } return dex ; }
public static vogar.commands.Jack getJackCompiler ( vogar.Log log ) throws java.lang.IllegalStateException { if ( ( vogar.commands.Jack.JACK_SCRIPT ) != null ) { return new vogar.commands.Jack ( log , com.google.common.collect.Lists.newArrayList ( vogar.commands.Jack.JACK_SCRIPT.getAbsolutePath ( ) ) ) ; } if ( ( vogar.commands.Jack.JACK_JAR ) != null ) { return new vogar.commands.Jack ( log , com.google.common.collect.Lists.newArrayList ( "java" , "-jar" , vogar.commands.Jack.JACK_JAR.getAbsolutePath ( ) ) ) ; } throw new java.lang.IllegalStateException ( "Jack library not found, cannot use jack." ) ; }
public void copyFromUnchecked ( java.lang.Object array ) { copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; }
private java.io.File createJackArchiveWithResources ( ) throws java.lang.Exception { java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "resourcetestjack" , ".zip" ) ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; toolchain.addResource ( new java.io.File ( com.android.jack.resource.ResourceTests.FILE , "rsc" ) ) ; toolchain.srcToLib ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( toolchain.getDefaultBootClasspath ( ) ) , jackAr , true , com.android.jack.resource.ResourceTests.FILE ) ; return jackAr ; }
protected void orderItems ( ) { int idx = 0 ; if ( ( items ( ) . size ( ) ) > ( com.android.dx.dex.file.MemberIdsSection.MAX_MEMBERS ) ) { throw new com.android.dex.DexException ( tooManyMembersMessage ( ) ) ; } for ( java.lang.Object i : items ( ) ) { ( ( com.android.dx.dex.file.MemberIdItem ) ( i ) ) . setIndex ( idx ) ; idx ++ ; } }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : mWifiDiagnostics.reportConnectionEvent ( mDiagsConnectionStartMillis , WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; break ; case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionEvent ( mDiagsConnectionStartMillis , WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } mDiagsConnectionStartMillis = - 1 ; }
public void write ( boolean forceSync ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { byte [ ] sharedDataBytes = serializeData ( true ) ; mSharedStore.storeRawDataToWrite ( sharedDataBytes ) ; if ( ( mUserStore ) != null ) { byte [ ] userDataBytes = serializeData ( false ) ; mUserStore.storeRawDataToWrite ( userDataBytes ) ; } if ( forceSync ) { writeBufferedData ( ) ; } else { startBufferedWriteAlarm ( ) ; } }
public static void main ( java.lang.String [ ] args ) { if ( com.android.ddms.Main.isMac ( ) ) { java.lang.management.RuntimeMXBean rt = java.lang.management.ManagementFactory.getRuntimeMXBean ( ) ; java.lang.System.setProperty ( ( "JAVA_STARTED_ON_FIRST_THREAD_" + ( rt.getName ( ) . split ( "@" ) [ 0 ] ) ) , "1" ) ; } java.lang.Thread.setDefaultUncaughtExceptionHandler ( new com.android.ddms.Main.UncaughtHandler ( ) ) ; com.android.ddms.PrefsDialog.init ( ) ; com.android.ddmlib.Log.d ( "ddms" , "Initializing" ) ; if ( ( ( args.length ) >= 3 ) && ( args [ 0 ] . equals ( "ping" ) ) ) { com.android.sdkstats.SdkStatsService.ping ( args [ 1 ] , args [ 2 ] , null ) ; return ; } else if ( ( args.length ) > 0 ) { com.android.ddmlib.Log.e ( "ddms" , ( "Unknown argument: " + ( args [ 0 ] ) ) ) ; java.lang.System.exit ( 1 ) ; } java.lang.String ddmsParentLocation = java.lang.System.getProperty ( "com.android.ddms.bindir" ) ; if ( ddmsParentLocation == null ) { ddmsParentLocation = java.lang.System.getenv ( "com.android.ddms.bindir" ) ; } com.android.ddms.Main.ping ( ddmsParentLocation ) ; com.android.ddmlib.DebugPortManager.setProvider ( com.android.ddms.DebugPortProvider.getInstance ( ) ) ; com.android.ddms.UIThread ui = com.android.ddms.UIThread.getInstance ( ) ; try { ui.runUI ( ddmsParentLocation ) ; } finally { com.android.ddms.PrefsDialog.save ( ) ; com.android.ddmlib.AndroidDebugBridge.terminate ( ) ; } com.android.ddmlib.Log.d ( "ddms" , "Bye" ) ; java.lang.System.exit ( 0 ) ; }
public java.util.List < java.lang.String > getBuildConfigLines ( ) { java.util.List < java.lang.String > fullList = com.google.common.collect.Lists.newArrayList ( ) ; java.util.List < java.lang.String > list = mDefaultConfig.getBuildConfigLines ( ) ; if ( ! ( list.isEmpty ( ) ) ) { fullList.add ( "// lines from default config." ) ; fullList.addAll ( list ) ; } list = mBuildType.getBuildConfigLines ( ) ; if ( ! ( list.isEmpty ( ) ) ) { fullList.add ( ( "// lines from build type: " + ( mBuildType.getName ( ) ) ) ) ; fullList.addAll ( list ) ; } for ( com.android.builder.ProductFlavor flavor : mFlavorConfigs ) { list = flavor.getBuildConfigLines ( ) ; if ( ! ( list.isEmpty ( ) ) ) { fullList.add ( ( "// lines from product flavor: " + ( flavor.getName ( ) ) ) ) ; fullList.addAll ( list ) ; } } return fullList ; }
private void assertOverLapping ( boolean expected , long lower , long upper , com.android.tv.dvr.data.ScheduledRecording r ) { assertEquals ( ( ( ( ( ( "isOverlapping(Range(" + lower ) + "," ) + upper ) + "), recording " ) + r ) , expected , r.isOverLapping ( new android.util.Range ( lower , upper ) ) ) ; }
public void setAbsoluteVolume ( int volume ) { if ( volume == ( mLocalVolume ) ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) { android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "setAbsoluteVolume is setting same index, ignore " + volume ) ) ; } return ; } final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler ; if ( handler == null ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , "setAbsoluteVolume: mHandler is already null" ) ; return ; } handler.removeMessages ( com.android.bluetooth.avrcp.Avrcp.MSG_ADJUST_VOLUME ) ; android.os.Message msg = handler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_SET_ABSOLUTE_VOLUME , volume , 0 ) ; handler.sendMessage ( msg ) ; }
public void testTargetSandboxVersion2AndHigher ( ) throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified ( verify ( "targetSandboxVersion-2.apk" ) ) ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verify ( "v2-only-targetSandboxVersion-2.apk" ) , Issue.JAR_SIG_NO_MANIFEST ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verifyForMinSdkVersion ( "v2-only-targetSandboxVersion-2.apk" , 24 ) ) ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verify ( "v1-only-targetSandboxVersion-2.apk" ) , Issue.NO_SIG_FOR_TARGET_SANDBOX_VERSION ) ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verify ( "unsigned-targetSandboxVersion-2.apk" ) , Issue.NO_SIG_FOR_TARGET_SANDBOX_VERSION ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verify ( "v2-only-targetSandboxVersion-3.apk" ) ) ; }
public void logError ( java.lang.String log ) { if ( acceptLog ( log ) ) { if ( ( mLog ) != null ) { mLog.error ( null , " %1$s" , log ) ; } else { synchronized ( mLogText ) { mLogText.append ( "ERROR: " ) . append ( log ) ; } } } }
public void enter ( ) { if ( mVerboseLoggingEnabled ) { log ( ( ( "RoamingState Enter" + " mScreenOn=" ) + ( mScreenOn ) ) ) ; } ( roamWatchdogCount ) ++ ; logd ( ( "Start Roam Watchdog " + ( roamWatchdogCount ) ) ) ; sendMessageDelayed ( obtainMessage ( com.android.server.wifi.WifiStateMachine.CMD_ROAM_WATCHDOG_TIMER , roamWatchdogCount , 0 ) , com.android.server.wifi.WifiStateMachine.ROAM_GUARD_TIMER_MSEC ) ; mAssociated = false ; }
synchronized long nInvokeClosureCreate ( long invokeID , byte [ ] params , long [ ] fieldIDs , long [ ] values , int [ ] sizes ) { validate ( ) ; long c = rsnInvokeClosureCreate ( mContext , invokeID , params , fieldIDs , values , sizes ) ; if ( c == 0 ) { throw new android.support.v8.renderscript.RSRuntimeException ( "Failed creating closure." ) ; } return c ; }
public void setMethodId ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId methodId ) { assert ( getExpectedMethodKind ( ) ) == ( methodId.getMethodIdWide ( ) . getKind ( ) ) ; assert methodId.getType ( ) . equals ( this . methodId.getType ( ) ) ; this . methodId = methodId ; methodId.addMethod ( this ) ; }
private static final java.lang.String fingerprint ( byte [ ] bytes ) { if ( bytes == null ) { return "" ; } java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( bytes.length ) ; i ++ ) { byte b = bytes [ i ] ; com.android.internal.util.HexDump.appendByteAsHex ( sb , b , true ) ; if ( ( i + 1 ) != ( bytes.length ) ) { sb.append ( ':' ) ; } } return sb.toString ( ) ; }
public void testE3 ( ) { loadAndRun ( "dot.junit.opcodes.aput_short.d.T_aput_short_1" , java.lang.ArrayIndexOutOfBoundsException.class , new short [ 2 ] , ( - 1 ) , ( ( short ) ( 10000 ) ) ) ; }
public static < K , V > com.google.common.cache.RemovalListener < K , V > asynchronous ( final com.google.common.cache.RemovalListener < K , V > listener , final java.util.concurrent.Executor executor ) { com.google.common.base.Preconditions.checkNotNull ( listener ) ; com.google.common.base.Preconditions.checkNotNull ( executor ) ; return new com.google.common.cache.RemovalListener < K , V > ( ) { @ java.lang.Override public void onRemoval ( final com.google.common.cache.RemovalNotification < K , V > notification ) { executor.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { listener.onRemoval ( notification ) ; } } ) ; } } ; }
native void rsnAllocationRead1D ( long con , long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , int dt , int mSize , boolean usePadding ) ;
public void testInstallEmptySystemExists ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; store.installCertificate ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; }
public V get ( @ javax.annotation.Nullable java.lang.Object key ) { if ( com.google.common.collect.Collections2.safeContains ( set , key ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) K k = ( ( K ) ( key ) ) ; return function.apply ( k ) ; } else { return null ; } }
public void setError ( java.lang.CharSequence error , android.graphics.drawable.Drawable icon ) { mError = android.text.TextUtils.stringOrSpannedString ( error ) ; mErrorWasChanged = true ; if ( ( mError ) == null ) { setErrorIcon ( null ) ; if ( ( mErrorPopup ) != null ) { if ( mErrorPopup.isShowing ( ) ) { mErrorPopup.dismiss ( ) ; } mErrorPopup = null ; } mShowErrorAfterAttach = false ; } else { setErrorIcon ( icon ) ; if ( mTextView.isFocused ( ) ) { showError ( ) ; } } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; if ( ( mResourceType ) == ( com.android.resources.ResourceType.STRING ) ) { createNewString ( ) ; } else { assert com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isValueResource ( mResourceType ) ; java.lang.String newName = createNewValue ( mResourceType ) ; if ( newName != null ) { com.android.ide.eclipse.adt.internal.resources.ResourceItem [ ] items = setupResourceList ( ) ; selectItemName ( newName , items ) ; } } }
private void constructorPutAll ( java.util.Map < ? extends K , ? extends V > map ) { if ( ( table ) == ( java.util.Hashtable.EMPTY_TABLE ) ) { doubleCapacity ( ) ; } for ( java.util.Map.Entry < ? extends K , ? extends V > e : map.entrySet ( ) ) { constructorPut ( e.getKey ( ) , e.getValue ( ) ) ; } }
static void preload ( ) { android.util.Log.d ( com.android.internal.os.ZygoteInit.TAG , "begin preload" ) ; try { android.os.Trace.traceBegin ( Trace.TRACE_TAG_DALVIK , "PreloadClasses" ) ; com.android.internal.os.ZygoteInit.preloadClasses ( ) ; } finally { android.os.Trace.traceEnd ( Trace.TRACE_TAG_DALVIK ) ; } try { android.os.Trace.traceBegin ( Trace.TRACE_TAG_DALVIK , "PreloadResources" ) ; com.android.internal.os.ZygoteInit.preloadResources ( ) ; } finally { android.os.Trace.traceEnd ( Trace.TRACE_TAG_DALVIK ) ; } com.android.internal.os.ZygoteInit.preloadOpenGL ( ) ; com.android.internal.os.ZygoteInit.preloadSharedLibraries ( ) ; android.webkit.WebViewFactory.prepareWebViewInZygote ( ) ; android.util.Log.d ( com.android.internal.os.ZygoteInit.TAG , "end preload" ) ; }
public void finish ( @ javax.annotation.Nonnull java.io.OutputStream out ) throws java.io.IOException { dexResult.prepare ( cstManager.getCstStrings ( ) , cstManager.getCstFieldRefs ( ) , cstManager.getCstMethodRefs ( ) , cstManager.getCstTypes ( ) , cstManager.getCstPrototypeRefs ( ) ) ; if ( ! ( cstManager.validate ( dexResult ) ) ) { throw new java.lang.AssertionError ( ) ; } dexResult.writeTo ( out , null , false ) ; finished = true ; }
private static int compareAbsoluteValues ( long value1 , long value2 ) { value1 = ( java.lang.Math.abs ( value1 ) ) - 1 ; value2 = ( java.lang.Math.abs ( value2 ) ) - 1 ; return value1 > value2 ? 1 : value1 < value2 ? - 1 : 0 ; }
private void extractParams ( org.bouncycastle.crypto.CipherParameters params ) { if ( params instanceof org.bouncycastle.crypto.params.ParametersWithIV ) { this . IV = ( ( org.bouncycastle.crypto.params.ParametersWithIV ) ( params ) ) . getIV ( ) ; this . param = ( ( org.bouncycastle.crypto.params.IESParameters ) ( ( ( org.bouncycastle.crypto.params.ParametersWithIV ) ( params ) ) . getParameters ( ) ) ) ; } else { this . IV = null ; this . param = ( ( org.bouncycastle.crypto.params.IESParameters ) ( params ) ) ; } }
private void skipGeneric ( ) { int nestingLevel = 1 ; do { char c = descriptor.charAt ( ( ( index ) ++ ) ) ; switch ( c ) { case proguard.classfile.ClassConstants.TYPE_GENERIC_START : nestingLevel ++ ; break ; case proguard.classfile.ClassConstants.TYPE_GENERIC_END : nestingLevel -- ; break ; } } while ( nestingLevel > 0 ) ; }
public void testToString ( ) { assertEquals ( "[]" , new java.util.concurrent.CopyOnWriteArraySet ( ) . toString ( ) ) ; java.util.Collection full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; java.lang.String s = full.toString ( ) ; for ( int i = 0 ; i < 3 ; ++ i ) assertTrue ( s.contains ( java.lang.String.valueOf ( i ) ) ) ; assertEquals ( new java.util.ArrayList ( full ) . toString ( ) , full.toString ( ) ) ; }
public void onDevicesChange ( ) { final com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; mDeviceList = sdk.getDevices ( ) ; org.eclipse.swt.widgets.Display.getDefault ( ) . asyncExec ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { addDeviceMenuListener ( mDeviceCombo ) ; } } ) ; }
private long getMainLowSpaceThreshold ( ) { java.io.File dataDir = android.os.Environment.getDataDirectory ( ) ; @ java.lang.SuppressWarnings ( value = "deprecation" ) long lowThreshold = android.os.storage.StorageManager.from ( mContext ) . getStorageLowBytes ( dataDir ) ; if ( lowThreshold == 0 ) { throw new java.lang.IllegalStateException ( "Invalid low memory threshold" ) ; } return lowThreshold ; }
public void testDropCdmaEnhancedPrivacyVoiceCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_HAS_CDMA_VOICE_PRIVACY ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveOutgoingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; org.junit.Assert.assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mConnectionServiceFixtureA.mLatestConnection.setConnectionProperties ( 0 ) ; org.junit.Assert.assertFalse ( Call.Details.hasProperty ( mInCallServiceFixtureX.getCall ( ids.mCallId ) . getProperties ( ) , Call.Details.PROPERTY_HAS_CDMA_VOICE_PRIVACY ) ) ; }
protected void sendData ( java.lang.String destAddr , java.lang.String scAddr , int destPort , byte [ ] data , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent ) { com.android.internal.telephony.cdma.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu ( scAddr , destAddr , destPort , data , ( deliveryIntent != null ) ) ; java.util.HashMap map = getSmsTrackerMap ( destAddr , scAddr , destPort , data , pdu ) ; com.android.internal.telephony.cdma.SmsTracker tracker = getSmsTracker ( map , sentIntent , deliveryIntent , getFormat ( ) , null , false ) ; sendSubmitPdu ( tracker ) ; }
private static void repeatConstMethodType0 ( java.lang.invoke.MethodType expected ) { java.lang.System.out.print ( "repeatConstMethodType0(" ) ; java.lang.System.out.print ( expected ) ; java.lang.System.out.println ( ")" ) ; for ( int i = 0 ; i < ( Main.ITERATIONS_FOR_JIT ) ; ++ i ) { java.lang.invoke.MethodType actual = Main.methodType0 ( ) ; Main.assertEquals ( expected , actual ) ; } }
void setChooser ( @ com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationChooser chooser ) { mConfigChooser = chooser ; }
public void dump ( java.io.PrintWriter out ) { out.println ( ( ( "Last sweep " + ( com.android.server.wifi.hotspot2.Utils.toHMS ( ( ( mClock.getElapsedSinceBootMillis ( ) ) - ( mLastSweep ) ) ) ) ) + " ago." ) ) ; for ( java.util.Map.Entry < com.android.server.wifi.hotspot2.ANQPNetworkKey , com.android.server.wifi.hotspot2.ANQPData > entry : mANQPCache.entrySet ( ) ) { out.println ( ( ( ( entry.getKey ( ) ) + ": " ) + ( entry.getValue ( ) ) ) ) ; } }
private void sendMessage ( int what , java.lang.Object obj , int arg1 , int arg2 ) { sendMessage ( what , obj , arg1 , arg2 , false ) ; }
public void checkClientTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.net.Socket socket ) throws java.security.cert.CertificateException { javax.net.ssl.SSLSession session = null ; javax.net.ssl.SSLParameters parameters = null ; if ( socket instanceof javax.net.ssl.SSLSocket ) { javax.net.ssl.SSLSocket sslSocket = ( ( javax.net.ssl.SSLSocket ) ( socket ) ) ; session = sslSocket.getHandshakeSession ( ) ; if ( session == null ) { throw new java.security.cert.CertificateException ( "Not in handshake; no session available" ) ; } parameters = sslSocket.getSSLParameters ( ) ; } checkTrusted ( chain , authType , session , parameters , true ) ; }
public static android.icu.util.UResourceBundle getBundleInstance ( java.lang.String baseName , java.util.Locale locale ) { if ( baseName == null ) { baseName = android.icu.impl.ICUData.ICU_BASE_NAME ; } android.icu.util.ULocale uloc = ( locale == null ) ? android.icu.util.ULocale.getDefault ( ) : android.icu.util.ULocale.forLocale ( locale ) ; return android.icu.util.UResourceBundle.getBundleInstance ( baseName , uloc.getBaseName ( ) , ICUResourceBundle.ICU_DATA_CLASS_LOADER , false ) ; }
public void validateCopyConstructorWithValidSource ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration sourceConfig = android.net.wifi.hotspot2.PasspointConfigurationTest.createConfig ( ) ; android.net.wifi.hotspot2.PasspointConfiguration copyConfig = new android.net.wifi.hotspot2.PasspointConfiguration ( sourceConfig ) ; org.junit.Assert.assertTrue ( copyConfig.equals ( sourceConfig ) ) ; }
private void addActiveLog ( java.lang.String packageName , boolean enable ) { synchronized ( mActiveLogs ) { if ( ( mActiveLogs.size ( ) ) > ( com.android.server.BluetoothManagerService.ACTIVE_LOG_MAX_SIZE ) ) { mActiveLogs.remove ( ) ; } mActiveLogs.add ( new com.android.server.BluetoothManagerService.ActiveLog ( packageName , enable , java.lang.System.currentTimeMillis ( ) ) ) ; } }
public void menuShown ( org.eclipse.swt.events.MenuEvent e ) { boolean deviceEnabled = ( mCurrentDevice ) != null ; screenShotItem.setEnabled ( deviceEnabled ) ; explorerItem.setEnabled ( deviceEnabled ) ; processItem.setEnabled ( deviceEnabled ) ; deviceStateItem.setEnabled ( deviceEnabled ) ; appStateItem.setEnabled ( deviceEnabled ) ; radioStateItem.setEnabled ( deviceEnabled ) ; logCatItem.setEnabled ( deviceEnabled ) ; screenRecordItem.setEnabled ( ( ( ( mCurrentDevice ) != null ) && ( mCurrentDevice.supportsFeature ( IDevice.Feature.SCREEN_RECORD ) ) ) ) ; }
private void handleSessionEnd ( ) { com.android.internal.telephony.cat.CatLog.d ( this , ( "SESSION END on " + ( mSlotId ) ) ) ; mCurrntCmd = mMenuCmd ; android.content.Intent intent = new android.content.Intent ( AppInterface.CAT_SESSION_END_ACTION ) ; intent.putExtra ( "SLOT_ID" , mSlotId ) ; intent.setComponent ( com.android.internal.telephony.cat.AppInterface.getDefaultSTKApplication ( ) ) ; mContext.sendBroadcast ( intent , AppInterface.STK_PERMISSION ) ; }
public boolean disconnectAudio ( ) { final android.bluetooth.IBluetoothHeadset service = mService ; if ( ( service != null ) && ( isEnabled ( ) ) ) { try { return service.disconnectAudio ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHeadset.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothHeadset.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothHeadset.DBG ) android.util.Log.d ( android.bluetooth.BluetoothHeadset.TAG , android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return false ; }
public java.util.NavigableSet < E > subSet ( E fromElement , boolean fromInclusive , E toElement , boolean toInclusive ) { return new com.google.common.collect.SortedMultisets.NavigableElementSet < E > ( multiset ( ) . subMultiset ( fromElement , com.google.common.collect.BoundType.forBoolean ( fromInclusive ) , toElement , com.google.common.collect.BoundType.forBoolean ( toInclusive ) ) ) ; }
public void testParseNonAscii ( ) throws java.lang.Exception { assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( "＋1 (650) 253-0000" , RegionCode.SG ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( "1 (650) 253­-0000" , RegionCode.US ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( ( "＋１　（６５０）" + "　２５３－００００" ) , RegionCode.SG ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( ( "＋１　（６５０）" + "　２５３ー００００" ) , RegionCode.SG ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( ( "᠑ ᠖᠕᠐ " + "᠒᠕᠓ ᠐᠐᠐᠐" ) , RegionCode.US ) ) ; }
public static synchronized com.android.bluetooth.hdp.HealthService getHealthService ( ) { if ( ( com.android.bluetooth.hdp.HealthService.sHealthService ) == null ) { android.util.Log.w ( com.android.bluetooth.hdp.HealthService.TAG , "getHealthService(): service is null" ) ; return null ; } if ( ! ( com.android.bluetooth.hdp.HealthService.sHealthService.isAvailable ( ) ) ) { android.util.Log.w ( com.android.bluetooth.hdp.HealthService.TAG , "getHealthService(): service is not available" ) ; return null ; } return com.android.bluetooth.hdp.HealthService.sHealthService ; }
public void setClientCertificateAlias ( java.lang.String alias ) { setFieldValue ( android.net.wifi.WifiEnterpriseConfig.CLIENT_CERT_KEY , alias , android.net.wifi.WifiEnterpriseConfig.CLIENT_CERT_PREFIX ) ; setFieldValue ( android.net.wifi.WifiEnterpriseConfig.PRIVATE_KEY_ID_KEY , alias , Credentials.USER_PRIVATE_KEY ) ; if ( android.text.TextUtils.isEmpty ( alias ) ) { setFieldValue ( android.net.wifi.WifiEnterpriseConfig.ENGINE_KEY , android.net.wifi.WifiEnterpriseConfig.ENGINE_DISABLE ) ; setFieldValue ( android.net.wifi.WifiEnterpriseConfig.ENGINE_ID_KEY , "" ) ; } else { setFieldValue ( android.net.wifi.WifiEnterpriseConfig.ENGINE_KEY , android.net.wifi.WifiEnterpriseConfig.ENGINE_ENABLE ) ; setFieldValue ( android.net.wifi.WifiEnterpriseConfig.ENGINE_ID_KEY , android.net.wifi.WifiEnterpriseConfig.ENGINE_ID_KEYSTORE ) ; } }
private void unloadAllContainers ( java.util.Set < com.android.server.pm.PackageManagerService.AsecInstallArgs > cidArgs ) { for ( com.android.server.pm.PackageManagerService.AsecInstallArgs arg : cidArgs ) { synchronized ( mInstallLock ) { arg.doPostDeleteLI ( false ) ; } } }
final void put ( double [ ] src , int srcOffset , int doubleCount ) { checkNotFreed ( ) ; int byteCount = checkPutBounds ( SizeOf.DOUBLE , src.length , srcOffset , doubleCount ) ; this . block.pokeDoubleArray ( ( ( offset ) + ( position ) ) , src , srcOffset , doubleCount , order.needsSwap ) ; position += byteCount ; }
public java.lang.String getType ( android.net.Uri url ) { switch ( com.android.providers.telephony.TelephonyProvider.s_urlMatcher.match ( url ) ) { case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY : case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY_USING_SUBID : return "vnd.android.cursor.dir/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_ID : case com.android.providers.telephony.TelephonyProvider.URL_FILTERED_ID : return "vnd.android.cursor.item/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPNSET : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPNSET_USING_SUBID : return "vnd.android.cursor.item/telephony-carrier" ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown URL " + url ) ) ; } }
public void parseCacheHeaders_cacheControlMustRevalidateNoMaxAge ( ) { long now = java.lang.System.currentTimeMillis ( ) ; headers.put ( "Date" , com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date ( now ) ) ; headers.put ( "Expires" , com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date ( ( now + ( com.android.volley.toolbox.HttpHeaderParserTest.ONE_HOUR_MILLIS ) ) ) ) ; headers.put ( "Cache-Control" , "must-revalidate" ) ; com.android.volley.Cache.Entry entry = com.android.volley.toolbox.HttpHeaderParser.parseCacheHeaders ( response ) ; assertNotNull ( entry ) ; assertNull ( entry.etag ) ; assertEqualsWithin ( now , entry.ttl , com.android.volley.toolbox.HttpHeaderParserTest.ONE_MINUTE_MILLIS ) ; assertEquals ( entry.softTtl , entry.ttl ) ; }
protected boolean cleanup ( ) { if ( mNativeAvailable ) { cleanupNative ( ) ; mNativeAvailable = false ; } if ( ( mInputDevices ) != null ) { for ( android.bluetooth.BluetoothDevice device : mInputDevices.keySet ( ) ) { int inputDeviceState = getConnectionState ( device ) ; if ( inputDeviceState != ( android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ) ) { broadcastConnectionState ( device , BluetoothProfile.STATE_DISCONNECTED ) ; } } mInputDevices.clear ( ) ; } com.android.bluetooth.hid.HidService.clearHidService ( ) ; return true ; }
public static com.android.dialer.contactactions.IntentModule newCallModule ( android.content.Context context , java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.dialer.callintent.CallInitiationType.Type initiationType ) { return new com.android.dialer.contactactions.IntentModule ( context , com.android.dialer.precall.PreCall.getIntent ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , initiationType ) . setPhoneAccountHandle ( phoneAccountHandle ) ) , R.string.voice_call , R.drawable.quantum_ic_call_white_24 ) ; }
public static void setSSLParameters ( javax.net.ssl.SSLParameters params , org.conscrypt.SSLParametersImpl impl , org.conscrypt.OpenSSLSocketImpl socket ) { impl.setEndpointIdentificationAlgorithm ( params.getEndpointIdentificationAlgorithm ( ) ) ; java.util.List < javax.net.ssl.SNIServerName > serverNames = params.getServerNames ( ) ; if ( serverNames != null ) { for ( javax.net.ssl.SNIServerName serverName : serverNames ) { if ( ( serverName.getType ( ) ) == ( javax.net.ssl.StandardConstants.SNI_HOST_NAME ) ) { socket.setHostname ( ( ( javax.net.ssl.SNIHostName ) ( serverName ) ) . getAsciiName ( ) ) ; break ; } } } }
public boolean checkAndSet ( java.lang.String value , com.android.ide.common.resources.configuration.FolderConfiguration config ) { java.util.regex.Matcher m = com.android.ide.common.resources.configuration.ScreenDimensionQualifier.sDimensionPattern.matcher ( value ) ; if ( m.matches ( ) ) { java.lang.String d1 = m.group ( 1 ) ; java.lang.String d2 = m.group ( 2 ) ; com.android.ide.common.resources.configuration.ScreenDimensionQualifier qualifier = com.android.ide.common.resources.configuration.ScreenDimensionQualifier.getQualifier ( d1 , d2 ) ; if ( qualifier != null ) { config.setScreenDimensionQualifier ( qualifier ) ; return true ; } } return false ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( content ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( bytecode ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , ( ( lambdaFixer.getInternalName ( ) ) + ".class" ) , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
synchronized void nScriptInvokeV ( long id , int slot , byte [ ] params , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptInvokeV ( curCon , id , slot , params , mUseInc ) ; }
public void checkValidity ( ) { if ( ! ( ( ( ( ( ( parent ) instanceof com.android.jack.ir.ast.JLocal ) || ( ( parent ) instanceof com.android.jack.ir.ast.JParameter ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JMethod ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JField ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JCastOperation ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
public static void setDefault ( com.ibm.icu.util.ULocale.Category category , java.util.Locale newLocale ) { if ( com.ibm.icu.util.ULocale.JDKLocaleHelper.hasLocaleCategories ) { java.lang.Object cat = null ; switch ( category ) { case DISPLAY : cat = com.ibm.icu.util.ULocale.JDKLocaleHelper.eDISPLAY ; break ; case FORMAT : cat = com.ibm.icu.util.ULocale.JDKLocaleHelper.eFORMAT ; break ; } if ( cat != null ) { try { com.ibm.icu.util.ULocale.JDKLocaleHelper.mSetDefault.invoke ( null , cat , newLocale ) ; } catch ( java.lang.reflect.InvocationTargetException e ) { } catch ( java.lang.IllegalArgumentException e ) { } catch ( java.lang.IllegalAccessException e ) { } } } }
public void testFormatIpv4MappedAddress ( ) throws java.lang.Exception { byte [ ] mappedAddress = new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , - 1 , 127 , 0 , 0 , 1 } ; java.lang.String decoded = formatIpAddress ( mappedAddress ) ; assertTrue ( decoded , ( ( decoded.equals ( "127.0.0.1" ) ) || ( decoded.equalsIgnoreCase ( "::ffff:127.0.0.1" ) ) ) ) ; }
private static boolean isSharedEditorCreation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.intellij.psi.PsiMethod method ) { java.lang.String methodName = method.getName ( ) ; if ( com.android.tools.lint.checks.CleanupDetector.EDIT.equals ( methodName ) ) { com.intellij.psi.PsiClass containingClass = method.getContainingClass ( ) ; com.android.tools.lint.client.api.JavaEvaluator evaluator = context.getEvaluator ( ) ; return evaluator.extendsClass ( containingClass , com.android.tools.lint.checks.CleanupDetector.ANDROID_CONTENT_SHARED_PREFERENCES , false ) ; } return false ; }
public void registerForDataRoamingOff ( android.os.Handler h , int what , java.lang.Object obj , boolean notifyNow ) { android.os.Registrant r = new android.os.Registrant ( h , what , obj ) ; mDataRoamingOffRegistrants.add ( r ) ; if ( notifyNow && ( ! ( mSS.getDataRoaming ( ) ) ) ) { r.notifyRegistrant ( ) ; } }
boolean hasCallbackAlreadyHappened ( int callback ) { synchronized ( mLocalLock ) { return mCallbackQueue.contains ( callback ) ; } }
public void getDataRegistrationStateResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.DataRegStateResult dataRegResponse ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , dataRegResponse ) ; } mRil.processResponseDone ( rr , responseInfo , dataRegResponse ) ; } }
public final boolean exec ( ) { runnable.run ( ) ; return true ; }
public static void main ( java.lang.String [ ] args ) { Main.testFindClassOnAttachedNativeThread ( ) ; Main.testFindFieldOnAttachedNativeThread ( ) ; Main.testCallStaticVoidMethodOnSubClass ( ) ; Main.testGetMirandaMethod ( ) ; Main.testZeroLengthByteBuffers ( ) ; Main.testByteMethod ( ) ; Main.testShortMethod ( ) ; Main.testBooleanMethod ( ) ; Main.testCharMethod ( ) ; Main.testEnvironment ( ) ; Main.testNewStringObject ( ) ; Main.testSignalHandler ( ) ; Main.testGetErrorByLoadInvalidLibrary ( ) ; Main.testSignalHandlerNotReturn ( ) ; }
public void registerForRecordsLoaded ( android.os.Handler h , int what , java.lang.Object obj ) { if ( mDestroyed.get ( ) ) { return ; } android.os.Registrant r = new android.os.Registrant ( h , what , obj ) ; mRecordsLoadedRegistrants.add ( r ) ; if ( getRecordsLoaded ( ) ) { r.notifyRegistrant ( new android.os.AsyncResult ( null , null , null ) ) ; } }
protected void test ( ) { if ( ( ( mNm.getEffectsSuppressor ( ) ) == null ) && ( ( ( com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) ) == null ) || ( ! ( com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . isConnected ) ) ) ) { status = PASS ; } else { if ( ( -- ( mRetries ) ) > 0 ) { sleep ( 100 ) ; status = RETEST ; } else { status = FAIL ; } } }
public static java.lang.String map2AlgName ( java.lang.String oid ) { org.apache.harmony.security.utils.AlgNameMapper.checkCacheVersion ( ) ; java.lang.String algUC = org.apache.harmony.security.utils.AlgNameMapper.oid2AlgMap.get ( oid ) ; if ( algUC != null ) { return org.apache.harmony.security.utils.AlgNameMapper.algAliasesMap.get ( algUC ) ; } org.apache.harmony.security.utils.AlgNameMapperSource s = org.apache.harmony.security.utils.AlgNameMapper.source ; if ( s != null ) { return s.mapOidToName ( oid ) ; } return null ; }
public void addPackageToPreferred ( java.lang.String packageName ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.SET_PREFERRED_APPLICATIONS , null ) ; com.android.server.Log.w ( com.android.server.PackageManagerService.TAG , "addPackageToPreferred: no longer implemented" ) ; }
private static int hugeCapacity ( int minCapacity ) { if ( minCapacity < 0 ) throw new java.lang.OutOfMemoryError ( ) ; return minCapacity > ( java.io.ByteArrayOutputStream.MAX_ARRAY_SIZE ) ? java.lang.Integer.MAX_VALUE : java.io.ByteArrayOutputStream.MAX_ARRAY_SIZE ; }
public void test_accept ( ) throws java.lang.Exception { java.net.ServerSocket ss = new java.net.ServerSocket ( 0 ) ; new libcore.java.net.ConcurrentCloseTest.Killer ( ss ) . start ( ) ; try { java.lang.System.err.println ( "accept..." ) ; java.net.Socket s = ss.accept ( ) ; fail ( ( ( "accept returned " + s ) + "!" ) ) ; } catch ( java.net.SocketException expected ) { assertEquals ( "Socket closed" , expected.getMessage ( ) ) ; } }
public void testResetBatteryLevel_testResetBeforeUpdate ( ) { org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; mRemoteDevices.resetBatteryLevel ( mDevice1 ) ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
public void notInBadgingOutput ( ) { java.util.List < java.lang.String > strings = com.google.common.collect.Lists.newArrayList ( "" ) ; com.android.build.gradle.integration.common.truth.FakeFailureStrategy failure = new com.android.build.gradle.integration.common.truth.FakeFailureStrategy ( ) ; java.io.File file = new java.io.File ( "foo" ) ; com.android.build.gradle.integration.common.truth.ApkSubject subject = new com.android.build.gradle.integration.common.truth.ApkSubject ( failure , file ) ; failure.reset ( ) ; subject.checkMaxSdkVersion ( strings , 1 ) ; com.google.common.truth.Truth.assertThat ( failure.message ) . isEqualTo ( "maxSdkVersion not found in badging output for <foo>" ) ; }
public static android.telephony.MbmsStreamingManager create ( android.content.Context context , android.telephony.mbms.MbmsStreamingManagerCallback listener , java.lang.String streamingAppName ) throws android.telephony.mbms.MbmsException { int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ; android.telephony.MbmsStreamingManager manager = new android.telephony.MbmsStreamingManager ( context , listener , streamingAppName , subId ) ; manager.bindAndInitialize ( ) ; return manager ; }
public final org.jf.dexlib2.iface.reference.FieldReference enum_literal ( ) throws org.jf.smali.RecognitionException { org.jf.dexlib2.iface.reference.FieldReference value = null ; org.jf.dexlib2.immutable.reference.ImmutableFieldReference field_reference210 = null ; try { { match ( input , org.jf.smali.smaliTreeWalker.I_ENCODED_ENUM , org.jf.smali.smaliTreeWalker.FOLLOW_I_ENCODED_ENUM_in_enum_literal3617 ) ; match ( input , Token.DOWN , null ) ; pushFollow ( org.jf.smali.smaliTreeWalker.FOLLOW_field_reference_in_enum_literal3619 ) ; field_reference210 = field_reference ( ) ; ( state._fsp ) -- ; match ( input , Token.UP , null ) ; value = field_reference210 ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void add ( java.security.Permission permission ) { }
private java.lang.ref.FinalizerReference < ? > waitForFinalization ( ) { long startCount = java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get ( ) ; sleepFor ( java.lang.Daemons.MAX_FINALIZE_NANOS ) ; if ( ( getNeedToWork ( ) ) && ( ( java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get ( ) ) == startCount ) ) { java.lang.ref.FinalizerReference < ? > finalizing = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject ; sleepFor ( java.lang.Daemons.NANOS_PER_SECOND ) ; if ( ( getNeedToWork ( ) ) && ( ( java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get ( ) ) == startCount ) ) { return finalizing ; } } return null ; }
private void extractFuzzyImage ( java.lang.String name ) { android.graphics.Bitmap mBitmap = android.graphics.Bitmap.createBitmap ( buffers.inputImage.getWidth ( ) , buffers.inputImage.getHeight ( ) , Bitmap.Config.ARGB_8888 ) ; android.renderscript.Allocation mAllocation = android.renderscript.Allocation.createFromBitmap ( renderScript , mBitmap ) ; scriptC.forEach_PackFuzzyImage ( mAllocation ) ; mAllocation.copyTo ( mBitmap ) ; android.renderscript.cts.refocus.MediaStoreSaver.savePNG ( mBitmap , "fuzzyF32" , name , renderScript.getApplicationContext ( ) ) ; mAllocation.destroy ( ) ; }
public void copyFieldsToTime ( android.text.format.Time time ) { time.second = wallTime.getSecond ( ) ; time.minute = wallTime.getMinute ( ) ; time.hour = wallTime.getHour ( ) ; time.monthDay = wallTime.getMonthDay ( ) ; time.month = wallTime.getMonth ( ) ; time.year = wallTime.getYear ( ) ; time.weekDay = wallTime.getWeekDay ( ) ; time.yearDay = wallTime.getYearDay ( ) ; time.isDst = wallTime.getIsDst ( ) ; time.gmtoff = wallTime.getGmtOffset ( ) ; }
private void displayPage ( int index ) { org.eclipse.swt.widgets.Composite page = mPages.get ( index ) ; if ( page != null ) { mStackLayout.topControl = page ; mPagesRootComposite.layout ( true ) ; if ( ! ( mInternalPageChange ) ) { mInternalPageChange = true ; mPageList.setSelection ( index ) ; mInternalPageChange = false ; } if ( page instanceof com.android.sdkuilib.internal.repository.IPageListener ) { ( ( com.android.sdkuilib.internal.repository.IPageListener ) ( page ) ) . onPageSelected ( ) ; } } }
public void setSoWriteTimeout ( int writeTimeoutMilliseconds ) throws java.net.SocketException { this . writeTimeoutMilliseconds = writeTimeoutMilliseconds ; android.system.StructTimeval tv = android.system.StructTimeval.fromMillis ( writeTimeoutMilliseconds ) ; try { android.system.Os.setsockoptTimeval ( getFileDescriptor$ ( ) , android.system.OsConstants.SOL_SOCKET , android.system.OsConstants.SO_SNDTIMEO , tv ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsSocketException ( ) ; } }
void foo1 ( int [ ] array , int start , int end , boolean expectInterpreter ) { if ( end < 0 ) throw new java.lang.Error ( "" ) ; for ( int i = start ; i < end ; i ++ ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ i ] = 1 ; sum += array [ i ] ; } }
public void keyguardWaitingForActivityDrawn ( ) { enforceNotIsolatedCaller ( "keyguardWaitingForActivityDrawn" ) ; final long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( this ) { if ( com.android.server.am.ActivityManagerDebugConfig.DEBUG_LOCKSCREEN ) logLockScreen ( "" ) ; mWindowManager.keyguardWaitingForActivityDrawn ( ) ; if ( ( mLockScreenShown ) == ( com.android.server.am.ActivityManagerService.LOCK_SCREEN_SHOWN ) ) { mLockScreenShown = com.android.server.am.ActivityManagerService.LOCK_SCREEN_LEAVING ; updateSleepIfNeededLocked ( ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } }
private boolean runPerformanceQuick ( android.renderscript.RenderScript RS , com.android.rs.test.ScriptC_reduce s ) { boolean pass = true ; for ( com.android.rs.test.UT_reduce.TestDescription td : performanceTests ) { pass &= run ( td , RS , s , ( ( com.android.rs.test.UT_reduce.maxSeedsPerTest ) * ( td.seed ) ) , td.defSize ) ; } return pass ; }
protected void runTestImpl ( final com.android.cts.Test test , android.annotation.cts.Profile profile ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException { try { if ( ! ( mTestStop ) ) { mCurrentTestSuite = test.getTestSuite ( ) ; mCurrentTestSuite.run ( mDevice , test , profile ) ; } } catch ( com.android.cts.DeviceDisconnectedException e ) { cleanUp ( ) ; throw e ; } }
private void readStack ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , int stackIdx ) throws java.io.IOException , java.lang.IndexOutOfBoundsException { com.android.jill.frontend.java.Variable stackVariable = getStackVariable ( frame , stackIdx ) ; if ( varWithCstValue.containsKey ( stackVariable ) ) { writeValue ( varWithCstValue.remove ( stackVariable ) , currentClass , currentLine ) ; } else { writeLocalRef ( stackVariable ) ; } }
public void testSubList1_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.subList ( ( - 1 ) , list.size ( ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public void insert ( @ javax.annotation.Nonnegative int index , @ javax.annotation.Nonnull com.android.sched.scheduler.ManagedRunnable runner ) { assert isConstraintValid ( index , runner ) ; index ++ ; plan.add ( index , new DecoratedRunner ( runner ) ) ; currentTagValidityIdx = java.lang.Math.min ( ( index - 1 ) , currentTagValidityIdx ) ; constraintTagValidityIdx = java.lang.Math.max ( ( index + 1 ) , constraintTagValidityIdx ) ; missingProductions.removeAll ( runner.getProductions ( ) ) ; }
private static java.lang.String getPathFromBaseDir ( @ javax.annotation.Nonnull java.lang.String baseDir , @ javax.annotation.Nonnull java.lang.String path ) { java.util.List < java.io.File > pathList = com.android.jack.shrob.proguard.GrammarActions.getPathFromBaseDirAsList ( baseDir , path ) ; java.lang.StringBuffer sb = new java.lang.StringBuffer ( ) ; for ( java.util.Iterator < java.io.File > iter = pathList.iterator ( ) ; iter.hasNext ( ) ; ) { sb.append ( iter.next ( ) . getPath ( ) ) ; if ( iter.hasNext ( ) ) { sb.append ( java.io.File.pathSeparatorChar ) ; } } return sb.toString ( ) ; }
public void run ( ) { for ( int i = ( nodes.size ( ) ) - 1 ; i >= 0 ; i -- ) { final com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode node = uiLastNode [ 0 ] = nodes.get ( i ) ; doDownInternal ( node , descriptorFilters , selectXmlNode , uiSearchRoot , false ) ; } }
boolean isUserRunningLocked ( int userId , boolean orStopped ) { com.android.server.am.UserStartedState state = mStartedUsers.get ( userId ) ; if ( state == null ) { return false ; } if ( orStopped ) { return true ; } return ( ( state.mState ) != ( UserStartedState.STATE_STOPPING ) ) && ( ( state.mState ) != ( UserStartedState.STATE_SHUTDOWN ) ) ; }
public java.util.Iterator < java.util.Map.Entry < C , java.util.Map < R , V > > > iterator ( ) { return com.google.common.collect.Maps.asMapEntryIterator ( columnKeySet ( ) , new com.google.common.base.Function < C , java.util.Map < R , V > > ( ) { @ java.lang.Override public java.util.Map < R , V > apply ( C columnKey ) { return column ( columnKey ) ; } } ) ; }
void replyFailed ( android.os.Message msg , int reason , java.lang.String description ) { if ( ( msg.replyTo ) != null ) { android.os.Message reply = android.os.Message.obtain ( ) ; reply.what = android.net.wifi.WifiScanner.CMD_OP_FAILED ; reply.arg2 = msg.arg2 ; reply.obj = new android.net.wifi.WifiScanner.OperationResult ( reason , description ) ; try { msg.replyTo.send ( reply ) ; mLog.trace ( "replyFailed recvdMessage=% reason=%" ) . c ( msg.what ) . c ( reason ) . flush ( ) ; } catch ( android.os.RemoteException e ) { } } else { } }
public void testInterfaceCountersUdp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1000 ) ; }
void clearValue ( java.lang.String optionName , java.util.Map < java.lang.String , com.google.devtools.common.options.OptionsParser.OptionValueDescription > clearedValues ) throws com.google.devtools.common.options.OptionsParsingException { java.lang.reflect.Field field = optionsData.getFieldFromName ( optionName ) ; if ( field == null ) { throw new java.lang.IllegalArgumentException ( ( ( "No such option '" + optionName ) + "'" ) ) ; } com.google.devtools.common.options.Option option = field.getAnnotation ( com.google.devtools.common.options.Option.class ) ; canonicalizeValues.removeAll ( field ) ; com.google.devtools.common.options.OptionsParser.OptionValueDescription removed = parsedValues.remove ( field ) ; if ( removed != null ) { clearedValues.put ( option.name ( ) , removed ) ; } }
public boolean setPriority ( android.bluetooth.BluetoothDevice device , int priority ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "setPriority: " + ( device.getAddress ( ) ) ) ) ; } Settings.Global.putInt ( getContentResolver ( ) , Settings.Global.getBluetoothInputDevicePriorityKey ( device.getAddress ( ) ) , priority ) ; if ( com.android.bluetooth.hid.HidService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( ( ( "Saved priority " + device ) + " = " ) + priority ) ) ; } return true ; }
public void testHandleEquality ( ) { com.android.tools.rpclib.binary.Handle handle1 = new com.android.tools.rpclib.binary.Handle ( com.android.tools.rpclib.binary.HandleTest.handleBytes ) ; assertEquals ( handle1 , handle1 ) ; com.android.tools.rpclib.binary.Handle handle2 = new com.android.tools.rpclib.binary.Handle ( com.android.tools.rpclib.binary.HandleTest.handleBytes ) ; assertEquals ( handle1 , handle2 ) ; }
public final char readChar ( ) throws java.io.IOException { readFully ( readBuffer , 0 , 2 ) ; return ( ( char ) ( libcore.io.Memory.peekShort ( readBuffer , 0 , java.nio.ByteOrder.BIG_ENDIAN ) ) ) ; }
synchronized boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , ( ( ( "sendReport(): device=" + device ) + " id=" ) + id ) ) ; if ( ! ( checkDevice ( device ) ) ) { return false ; } return sendReportNative ( id , data ) ; }
public sun.misc.Resource getResource ( java.lang.String name , boolean check ) { if ( sun.misc.URLClassPath.DEBUG ) { java.lang.System.err.println ( ( ( "URLClassPath.getResource(\"" + name ) + "\")" ) ) ; } sun.misc.URLClassPath.Loader loader ; int [ ] cache = getLookupCache ( name ) ; for ( int i = 0 ; ( loader = getNextLoader ( cache , i ) ) != null ; i ++ ) { sun.misc.Resource res = loader.getResource ( name , check ) ; if ( res != null ) { return res ; } } return null ; }
private void cmdList ( java.io.PrintWriter pw ) { pw.println ( "metrics events:" ) ; final java.util.List < android.net.ConnectivityMetricsEvent > events = getEvents ( ) ; for ( android.net.ConnectivityMetricsEvent ev : events ) { pw.println ( ev.toString ( ) ) ; } pw.println ( "" ) ; if ( ( mNetdListener ) != null ) { mNetdListener.list ( pw ) ; } pw.println ( "" ) ; mDefaultNetworkMetrics.listEvents ( pw ) ; }
public void requestAudioFocusForCall ( int streamType , int durationHint ) { android.media.IAudioService service = android.media.AudioManager.getService ( ) ; try { service.requestAudioFocus ( new android.media.AudioAttributes.Builder ( ) . setInternalLegacyStreamType ( streamType ) . build ( ) , durationHint , mICallBack , null , MediaFocusControl.IN_VOICE_COMM_FOCUS_ID , getContext ( ) . getOpPackageName ( ) , android.media.AudioManager.AUDIOFOCUS_FLAG_LOCK , null ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.media.AudioManager.TAG , "Can't call requestAudioFocusForCall() on AudioService:" , e ) ; } }
private static com.intellij.psi.PsiField getDataBinderReference ( @ com.android.annotations.Nullable com.intellij.psi.PsiElement element ) { if ( element instanceof com.intellij.psi.PsiReference ) { com.intellij.psi.PsiElement resolved = ( ( com.intellij.psi.PsiReference ) ( element ) ) . resolve ( ) ; if ( resolved instanceof com.intellij.psi.PsiField ) { com.intellij.psi.PsiField field = ( ( com.intellij.psi.PsiField ) ( resolved ) ) ; if ( "dataBinder" . equals ( field.getName ( ) ) ) { return field ; } } } return null ; }
private static boolean isIncrementalCompilation ( @ javax.annotation.Nonnull com.android.jack.Options options , @ javax.annotation.Nonnull java.io.File typeDependencies , @ javax.annotation.Nonnull java.io.File fileDependencies ) { if ( ( ( ! ( options.getEcjArguments ( ) . isEmpty ( ) ) ) && ( typeDependencies.exists ( ) ) ) && ( fileDependencies.exists ( ) ) ) { return true ; } return false ; }
public void testPreserveNewlines ( ) throws java.lang.Exception { com.android.ide.common.xml.XmlFormatPreferences prefs = com.android.ide.common.xml.XmlFormatPreferences.defaults ( ) ; com.android.ide.common.xml.XmlFormatStyle style = XmlFormatStyle.LAYOUT ; java.lang.String before = "<LinearLayout><Button></Button></LinearLayout>\n" ; java.lang.String expected = "<LinearLayout>\n" + ( ( ( "\n" + " <Button />\n" ) + "\n" ) + "</LinearLayout>\n" ) ; java.lang.String after = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint ( before , prefs , style , "\n" ) ; assertEquals ( expected , after ) ; }
public void testProxyWithConnectionClose ( ) throws java.io.IOException { libcore.javax.net.ssl.TestSSLContext testSSLContext = createDefaultTestSSLContext ( ) ; server.useHttps ( testSSLContext.serverContext.getSocketFactory ( ) , true ) ; server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setSocketPolicy ( SocketPolicy.UPGRADE_TO_SSL_AT_END ) . clearHeaders ( ) ) ; server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "this response comes via a proxy" ) ) ; server.play ( ) ; java.net.URL url = new java.net.URL ( "https://android.com/foo" ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( server.toProxyAddress ( ) ) ) ) ; connection.setRequestProperty ( "Connection" , "close" ) ; connection.setSSLSocketFactory ( testSSLContext.clientContext.getSocketFactory ( ) ) ; connection.setHostnameVerifier ( new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier ( ) ) ; assertContent ( "this response comes via a proxy" , connection ) ; }
public void callSessionRttModifyRequestReceived ( android.telephony.ims.ImsCallSession session , android.telephony.ims.ImsCallProfile callProfile ) { com.android.ims.ImsCall.Listener listener ; logi ( "callSessionRttModifyRequestReceived" ) ; synchronized ( this ) { listener = mListener ; } if ( ! ( callProfile.mMediaProfile.isRttCall ( ) ) ) { logi ( ( "callSessionRttModifyRequestReceived:: ignoring request, requested profile " + "is not RTT." ) ) ; return ; } if ( listener != null ) { try { listener.onRttModifyRequestReceived ( this ) ; } catch ( java.lang.Throwable t ) { loge ( "callSessionRttModifyRequestReceived:: " , t ) ; } } }
public long getPhotoId ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstExtendedCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CEQUINT : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return 0 ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public boolean onMenuItemClick ( android.view.MenuItem item ) { int state = mTelephonyManager.getDataState ( ) ; switch ( state ) { case android.telephony.TelephonyManager.DATA_CONNECTED : phone.setUserDataEnabled ( false ) ; break ; case android.telephony.TelephonyManager.DATA_DISCONNECTED : phone.setUserDataEnabled ( true ) ; break ; default : break ; } return true ; }
private void startConnectSession ( ) { mDevice = mBatch.mDestination ; if ( ! ( mBatch.mDestination.sdpSearch ( BluetoothUuid.ObexObjectPush ) ) ) { if ( com.android.bluetooth.opp.BluetoothOppTransfer.D ) android.util.Log.d ( com.android.bluetooth.opp.BluetoothOppTransfer.TAG , "SDP failed, start rfcomm connect directly" ) ; mDevice = null ; mConnectThread = new com.android.bluetooth.opp.BluetoothOppTransfer.SocketConnectThread ( mBatch.mDestination , false , false , ( - 1 ) ) ; mConnectThread.start ( ) ; } }
public void dispose ( ) { try { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = mService.get ( ) ; if ( streamingService == null ) { return ; } streamingService.dispose ( mSubscriptionId ) ; } catch ( android.os.RemoteException e ) { } finally { mService.set ( null ) ; android.telephony.MbmsStreamingManager.sIsInitialized.set ( false ) ; } }
public void binderDied ( ) { try { synchronized ( mWindowMap ) { com.android.server.WindowManagerService.WindowState win = windowForClientLocked ( mSession , mClient , false ) ; android.util.Slog.i ( com.android.server.WindowManagerService.TAG , ( "WIN DEATH: " + win ) ) ; if ( win != null ) { removeWindowLocked ( mSession , win ) ; } } } catch ( java.lang.IllegalArgumentException ex ) { } }
public java.lang.String getP2pClientList ( int netId ) { return null ; }
public void setHorizontalScrollbarOverlay ( final boolean overlay ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setHorizontalScrollbarOverlay ( overlay ) ; } } ) ; return ; } mAwContents.setHorizontalScrollbarOverlay ( overlay ) ; }
private java.io.File createDex ( vogar.Action action , java.io.File actionJar ) { java.io.File dex = run.localFile ( action , "classes.dex" ) ; vogar.Classpath classesToDex = vogar.Classpath.of ( actionJar ) ; classesToDex.addAll ( run.classpath ) ; if ( ( run.toolchain ) == ( vogar.Toolchain.JACK ) ) { throw new java.lang.UnsupportedOperationException ( "Jack support for --mode=activity not yet implemented" ) ; } java.io.File localTempDir = run.localDir ( action.getName ( ) ) ; vogar.Classpath dependentCp = new vogar.Classpath ( ) ; run.androidSdk.dex ( run.multidex , dex , localTempDir , classesToDex , dependentCp ) ; return dex ; }
android.media.MediaMetadata getCurrentMetaData ( ) { synchronized ( mLock ) { if ( ( ( mAddressedPlayer ) != null ) && ( ( mAddressedPlayer.getCurrentTrack ( ) ) != null ) ) { android.media.MediaMetadata mmd = mAddressedPlayer.getCurrentTrack ( ) . getMediaMetaData ( ) ; if ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG , ( "getCurrentMetaData mmd " + mmd ) ) ; } } return com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.EMPTY_MEDIA_METADATA ; } }
private static void checkGenericParameter_withMetadata ( java.lang.reflect.Executable executable ) { libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper helper = new libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper ( executable ) ; helper.checkStandardParametersBehavior ( ) . checkParametersToString ( "[java.util.function.Function<java.lang.String, java.lang.Integer> p0]" ) . checkParametersNoVarArgs ( ) ; helper.getParameterTestHelper ( 0 ) . checkGetType ( java.util.function.Function.class ) . checkName ( true , "p0" ) . checkModifiers ( 0 ) . checkImplicitAndSynthetic ( false , false ) . checkGetParameterizedType ( "java.util.function.Function<java.lang.String, java.lang.Integer>" ) ; }
public void destroy ( ) { mHandler.removeMessages ( com.android.internal.app.ResolverComparator.RESOLVER_RANKER_SERVICE_RESULT ) ; mHandler.removeMessages ( com.android.internal.app.ResolverComparator.RESOLVER_RANKER_RESULT_TIMEOUT ) ; if ( ( mConnection ) != null ) { mContext.unbindService ( mConnection ) ; mConnection.destroy ( ) ; } if ( ( mAfterCompute ) != null ) { mAfterCompute.afterCompute ( ) ; } if ( com.android.internal.app.ResolverComparator.DEBUG ) { android.util.Log.d ( com.android.internal.app.ResolverComparator.TAG , "Unbinded Resolver Ranker." ) ; } }
public void notInBadgingOutput ( ) { java.util.List < java.lang.String > strings = com.google.common.collect.Lists.newArrayList ( "" ) ; com.android.build.gradle.integration.common.truth.FakeFailureStrategy failure = new com.android.build.gradle.integration.common.truth.FakeFailureStrategy ( ) ; java.io.File file = new java.io.File ( "foo" ) ; com.android.build.gradle.integration.common.truth.ApkSubject subject = new com.android.build.gradle.integration.common.truth.ApkSubject ( failure , file ) ; subject.checkMaxSdkVersion ( strings , 1 ) ; com.google.common.truth.Truth.assertThat ( failure.message ) . is ( "maxSdkVersion not found in badging output for <foo>" ) ; }
public java.util.List < java.lang.String > getPermittedCrossProfileNotificationListeners ( @ android.annotation.NonNull android.content.ComponentName admin ) { throwIfParentInstance ( "getPermittedCrossProfileNotificationListeners" ) ; if ( ( mService ) != null ) { try { return mService.getPermittedCrossProfileNotificationListeners ( admin ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return null ; }
public void onSelected ( ) { mSelected = true ; if ( ( com.android.tv.menu.BaseCardView.isAttachedToWindow ( ) ) && ( ( com.android.tv.menu.BaseCardView.getVisibility ( ) ) == ( android.view.View.VISIBLE ) ) ) { startFocusAnimation ( com.android.tv.menu.BaseCardView.SCALE_FACTOR_1F ) ; } else { cancelFocusAnimationIfAny ( ) ; setFocusAnimatedValue ( com.android.tv.menu.BaseCardView.SCALE_FACTOR_1F ) ; } }
private boolean compareIcuRoundingIncrement ( java.text.DecimalFormat_ICU58_Android other ) { java.math.BigDecimal increment = this . icuDecimalFormat.getRoundingIncrement ( ) ; if ( increment != null ) { return ( ( other.getRoundingIncrement ( ) ) != null ) && ( increment.equals ( other.getRoundingIncrement ( ) ) ) ; } return ( other.getRoundingIncrement ( ) ) == null ; }
protected PackageParser.ServiceIntentInfo [ ] newArray ( int size ) { return new android.content.pm.PackageParser.ServiceIntentInfo [ size ] ; }
public void testSingleOutput ( ) { com.android.build.VariantOutput match ; java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ) ; java.util.List < java.io.File > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( 1 , result.size ( ) ) ; assertEquals ( match.getMainOutputFile ( ) . getOutputFile ( ) , result.get ( 0 ) ) ; }
public void show ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo vi ) { java.lang.String url = vi.getIncludeUrl ( ) ; if ( url != null ) { showInclude ( url ) ; } else { showXml ( vi ) ; } }
public void test_getInstanceLjava_lang_String01 ( ) throws java.security.NoSuchAlgorithmException { if ( ! ( org.apache.harmony.tests.javax.net.ssl.KeyManagerFactory1Test.DEFSupported ) ) { fail ( org.apache.harmony.tests.javax.net.ssl.KeyManagerFactory1Test.NotSupportedMsg ) ; return ; } javax.net.ssl.KeyManagerFactory keyMF ; for ( int i = 0 ; i < ( org.apache.harmony.tests.javax.net.ssl.KeyManagerFactory1Test.validValues.length ) ; i ++ ) { keyMF = javax.net.ssl.KeyManagerFactory.getInstance ( org.apache.harmony.tests.javax.net.ssl.KeyManagerFactory1Test.validValues [ i ] ) ; assertNotNull ( "No KeyManagerFactory created" , keyMF ) ; assertEquals ( "Invalid algorithm" , keyMF.getAlgorithm ( ) , org.apache.harmony.tests.javax.net.ssl.KeyManagerFactory1Test.validValues [ i ] ) ; } }
static int wtf ( int logId , java.lang.String tag , java.lang.String msg , java.lang.Throwable tr , boolean localStack , boolean system ) { android.util.Log.TerribleFailure what = new android.util.Log.TerribleFailure ( msg , tr ) ; int bytes = android.util.Log.println_native ( logId , android.util.Log.ERROR , tag , ( ( msg + '\n' ) + ( android.util.Log.getStackTraceString ( ( localStack ? what : tr ) ) ) ) ) ; android.util.Log.sWtfHandler.onTerribleFailure ( tag , what , system ) ; return bytes ; }
boolean isRecvd ( ) { return recvd ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFrom" ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public static void toggleOrientationSync ( final android.app.Activity activity , final android.app.Instrumentation instrumentation ) { final int originalOrientation = activity.getResources ( ) . getConfiguration ( ) . orientation ; final int newOrientation = ( originalOrientation == ( android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT ) ) ? android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE : android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT ; android.app.stubs.OrientationTestUtils.changeOrientation ( activity , instrumentation , newOrientation ) ; android.app.stubs.OrientationTestUtils.changeOrientation ( activity , instrumentation , originalOrientation ) ; }
public void testIsEmergencyNumber_BR ( ) { assertTrue ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "911" , RegionCode.BR ) ) ; assertTrue ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "190" , RegionCode.BR ) ) ; assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "999" , RegionCode.BR ) ) ; }
public void testGradle ( ) throws java.lang.Exception { java.io.File project = getProjectDir ( null , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "multiproject/library.properties=>build.gradle" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" ) ; checkDriver ( ( "" + ( ( "\n" + "MainTest_testGradle: Error: \"MainTest_testGradle\" is a Gradle project. To correctly analyze Gradle projects, you should run \"gradlew :lint\" instead. [LintError]\n" ) + "1 errors, 0 warnings\n" ) ) , "" , com.android.tools.lint.LintCliFlags.ERRNO_SUCCESS , new java.lang.String [ ] { "--check" , "HardcodedText" , project.getPath ( ) } ) ; }
public java.util.List getConfigurationFiles ( ) { return configurationFiles ; }
public com.tonicsystems.jarjar.FieldVisitor visitField ( int access , java.lang.String name , java.lang.String desc , java.lang.String signature , java.lang.Object value ) { handleObject ( value ) ; return new com.tonicsystems.jarjar.FieldVisitor ( Opcodes.ASM5 ) { @ java.lang.Override public com.tonicsystems.jarjar.AnnotationVisitor visitAnnotation ( java.lang.String desc , boolean visible ) { return com.tonicsystems.jarjar.StringReader.this . visitAnnotation ( desc , visible ) ; } } ; }
private int performDexOptInternal ( java.lang.String packageName , boolean checkProfiles , java.lang.String targetCompilerFilter , boolean force ) { android.content.pm.PackageParser.Package p ; synchronized ( mPackages ) { p = mPackages.get ( packageName ) ; if ( p == null ) { return PackageDexOptimizer.DEX_OPT_FAILED ; } mPackageUsage.maybeWriteAsync ( mPackages ) ; mCompilerStats.maybeWriteAsync ( ) ; } long callingId = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mInstallLock ) { return performDexOptInternalWithDependenciesLI ( p , checkProfiles , targetCompilerFilter , force ) ; } } finally { android.os.Binder.restoreCallingIdentity ( callingId ) ; } }
static int closedFormNestedNAlt ( int n ) { int closed = 12345 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 23 ; j ++ ) { closed += 7 ; } } return closed ; }
public java.lang.String wifiNanCreateNetworkSpecifier ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "role" , description = "The role of the device: Initiator (0) or Responder (1)" ) java.lang.Integer role , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "sessionId" , description = "The session ID returned when session was created using publish or subscribe" ) java.lang.Integer sessionId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "peerId" , description = "The ID of the peer (obtained through OnMatch or OnMessageReceived" ) java.lang.Integer peerId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "token" , description = "Arbitrary token message to be sent to peer as part of data-path creation process" ) java.lang.String token ) { android.net.wifi.nan.WifiNanDiscoveryBaseSession session = mSessions.get ( sessionId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling wifiNanStartRanging before session (session ID " + sessionId ) + " is ready" ) ) ; } byte [ ] bytes = token.getBytes ( ) ; return session.createNetworkSpecifier ( role , peerId , bytes ) ; }
boolean clearCodePathUsedByOtherApps ( ) { mUsedByOtherAppsBeforeUpgrade = true ; if ( mCodePathsUsedByOtherApps.isEmpty ( ) ) { return false ; } else { mCodePathsUsedByOtherApps.clear ( ) ; return true ; } }
public void sendUrgentData ( int data ) throws java.io.IOException { if ( isClosed ( ) ) { throw new java.net.SocketException ( "Socket is closed" ) ; } if ( ! ( getImpl ( ) . supportsUrgentData ( ) ) ) { throw new java.net.SocketException ( "Urgent data not supported" ) ; } getImpl ( ) . sendUrgentData ( data ) ; }
public static int testTrueBranch ( int x , int y ) { try { java.lang.Class < ? > c = java.lang.Class.forName ( "Smali" ) ; java.lang.reflect.Method m = c.getMethod ( "testTrueBranch" , int . class , int . class ) ; return ( ( java.lang.Integer ) ( m.invoke ( null , x , y ) ) ) ; } catch ( java.lang.Throwable t ) { throw new java.lang.RuntimeException ( t ) ; } }
protected java.lang.String getOsVersion ( ) { java.util.regex.Pattern p = java.util.regex.Pattern.compile ( "(\\d+)\\.(\\d+).*" ) ; java.lang.String osVers = getSystemProperty ( com.android.sdkstats.SdkStatsService.SYS_PROP_OS_VERSION ) ; if ( ( osVers != null ) && ( ( osVers.length ( ) ) > 0 ) ) { java.util.regex.Matcher m = p.matcher ( osVers ) ; if ( m.matches ( ) ) { return ( ( m.group ( 1 ) ) + '.' ) + ( m.group ( 2 ) ) ; } } return null ; }
public void testFocusCallIsNullWhenRemoveTheFocusCall ( ) { requestFocus ( mActiveCall , null ) ; org.junit.Assert.assertEquals ( mActiveCall , mFocusManagerUT.getCurrentFocusCall ( ) ) ; mCallsManagerListener.onCallRemoved ( ( ( com.android.server.telecom.Call ) ( mActiveCall ) ) ) ; waitForHandlerAction ( mFocusManagerUT.getHandler ( ) , com.android.server.telecom.tests.ConnectionServiceFocusManagerTest.CHECK_HANDLER_INTERVAL_MS ) ; org.junit.Assert.assertNull ( mFocusManagerUT.getCurrentFocusCall ( ) ) ; }
void assertCSConnections ( final int numConnections ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return numConnections ; } @ java.lang.Override public java.lang.Object actual ( ) { return android.telecom.cts.CtsConnectionService.getAllConnectionsFromTelecom ( ) . size ( ) ; } } , android.telecom.cts.TestUtils.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( ( "ConnectionService should contain " + numConnections ) + " connections." ) ) ; }
public void testConstructor ( ) throws java.lang.Exception { try { libcore.io.ClassPathURLStreamHandler streamHandler = new libcore.io.ClassPathURLStreamHandler ( "Missing.file" ) ; fail ( "Should throw IOException" ) ; } catch ( java.io.IOException expected ) { } java.lang.String fileName = jarFile.getPath ( ) ; libcore.io.ClassPathURLStreamHandler streamHandler = new libcore.io.ClassPathURLStreamHandler ( fileName ) ; streamHandler.close ( ) ; }
public void testPullNonPullableExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; java.lang.Thread.sleep ( com.android.server.telecom.tests.TEST_TIMEOUT ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.never ( ) ) . pullExternalCall ( org.mockito.Matchers.eq ( ids.mConnectionId ) , org.mockito.Matchers.any ( ) ) ; }
public void testAbbreviate ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( IconDetector.ICON_DENSITIES ) ; assertEquals ( ( "res/drawable-hdpi: Warning: Missing the following drawables in drawable-hdpi: " + ( ( ( ( ( "ic_launcher10.png, ic_launcher11.png, ic_launcher12.png, ic_launcher2.png, " + "ic_launcher3.png... (6 more) [IconDensities]\n" ) + "res/drawable-xhdpi: Warning: Missing the following drawables in drawable-xhdpi: " ) + "ic_launcher10.png, ic_launcher11.png, ic_launcher12.png, ic_launcher2.png, " ) + "ic_launcher3.png... (6 more) [IconDensities]\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "apicheck/minsdk4.xml=>AndroidManifest.xml" , "res/drawable/ic_launcher.png=>res/drawable-hdpi/ic_launcher1.png" , "res/drawable/ic_launcher.png=>res/drawable-xhdpi/ic_launcher1.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher1.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher2.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher3.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher4.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher5.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher6.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher7.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher8.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher9.webp" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher10.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher11.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher12.png" ) ) ; }
private void checkAndEnableDataCallAfterEmergencyCallDropped ( ) { if ( mIsInEmergencyCall ) { mIsInEmergencyCall = false ; boolean inEcm = mPhone.isInEcm ( ) ; if ( Phone.DEBUG_PHONE ) { log ( ( "checkAndEnableDataCallAfterEmergencyCallDropped,inEcm=" + inEcm ) ) ; } if ( ! inEcm ) { mPhone.mDcTracker.setInternalDataEnabled ( true ) ; mPhone.notifyEmergencyCallRegistrants ( false ) ; } mPhone.sendEmergencyCallStateChange ( false ) ; } }
public boolean setActiveScorer ( java.lang.String packageName ) { return false ; }
public void testAcceptRingingCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( mFakeCallsManager.getFirstCallWithState ( org.mockito.Matchers.anyInt ( ) ) ) . thenReturn ( call ) ; int fakeVideoState = 29578215 ; org.mockito.Mockito.when ( call.getVideoState ( ) ) . thenReturn ( fakeVideoState ) ; mTSIBinder.acceptRingingCall ( ) ; org.mockito.Mockito.verify ( call ) . answer ( org.mockito.Matchers.eq ( fakeVideoState ) ) ; }
public void run ( ) { com.google.api.services.oauth2.model.Userinfoplus userInfo = null ; try { userInfo = userInfoService.userinfo ( ) . get ( ) . execute ( ) ; } catch ( java.io.IOException e ) { com.google.gct.login.GoogleLoginUtils.LOG.warn ( "Error retrieving user information." , e ) ; } if ( ( userInfo != null ) && ( ( userInfo.getId ( ) ) != null ) ) { callback.setProperty ( userInfo ) ; } else { callback.setProperty ( null ) ; } }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getClient = " + ( mService.getRemoteDevice ( ) ) ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return null ; return service.getRemoteDevice ( ) ; }
protected void doBuildPatchFile ( java.io.File toFile , com.intellij.updater.MultiZipFile.OutputStream patchOutput ) throws java.io.IOException { Runner.logger.info ( "building PatchFile" ) ; patchOutput.putNextEntry ( myPath ) ; if ( ! ( toFile.isDirectory ( ) ) ) { writeExecutableFlag ( patchOutput , toFile ) ; com.intellij.updater.Utils.copyFileToStream ( toFile , patchOutput ) ; } patchOutput.closeEntry ( ) ; }
public void onFormResubmission ( android.os.Message dontResend , android.os.Message resend ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onFormResubmission" ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onFormResubmission" ) ; mWebViewClient.onFormResubmission ( mWebView , dontResend , resend ) ; } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onFormResubmission" ) ; } }
public < E extends T > com.google.common.collect.ImmutableList < E > immutableSortedCopy ( java.lang.Iterable < E > elements ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E [ ] array = ( ( E [ ] ) ( com.google.common.collect.Iterables.toArray ( elements ) ) ) ; for ( E e : array ) { com.google.common.base.Preconditions.checkNotNull ( e ) ; } java.util.Arrays.sort ( array , this ) ; return com.google.common.collect.ImmutableList.asImmutableList ( array ) ; }
static boolean containsKeyImpl ( java.util.Map < ? , ? > map , @ javax.annotation.Nullable java.lang.Object key ) { return com.google.common.collect.Iterators.contains ( com.google.common.collect.Maps.keyIterator ( map.entrySet ( ) . iterator ( ) ) , key ) ; }
com.android.sched.vfs.ParentVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.ParentVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { assert ! ( isClosed ( ) ) ; assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) ) != 0 ; java.io.File path = getNativeFile ( parent.getPath ( ) , name ) ; com.android.sched.util.file.Directory.check ( path , new com.android.sched.util.location.DirectoryLocation ( path ) ) ; return new com.android.sched.vfs.ParentVDir ( this , parent , name ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; result.append ( "(" ) ; for ( int i = 0 , typesLength = types.length ; i < typesLength ; i ++ ) { result.append ( ( ( dex ) != null ? dex.typeNames ( ) . get ( types [ i ] ) : types [ i ] ) ) ; } result.append ( ")" ) ; return result.toString ( ) ; }
private void closeStream ( java.io.InputStream is ) { if ( is != null ) { if ( is instanceof com.android.io.NonClosingInputStream ) { ( ( com.android.io.NonClosingInputStream ) ( is ) ) . setCloseBehavior ( CloseBehavior.CLOSE ) ; } try { is.close ( ) ; } catch ( java.io.IOException ignore ) { } } }
public java.util.ListIterator < E > listIterator ( int index ) { java.lang.Object [ ] snapshot = elements ; if ( ( index < 0 ) || ( index > ( snapshot.length ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( "index=" + index ) + ", length=" ) + ( snapshot.length ) ) ) ; } java.util.concurrent.CopyOnWriteArrayList.CowIterator < E > result = new java.util.concurrent.CopyOnWriteArrayList.CowIterator < E > ( snapshot , 0 , snapshot.length ) ; result.index = index ; return result ; }
public com.google.common.collect.ImmutableMultimap < java.lang.Integer , com.android.manifmerger.Actions.Record > getResultingSourceMapping ( com.android.manifmerger.XmlDocument xmlDocument ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { com.android.manifmerger.XmlLoader.SourceLocation inMemory = XmlLoader.UNKNOWN ; com.android.manifmerger.XmlDocument loadedWithLineNumbers = com.android.manifmerger.XmlLoader.load ( inMemory , xmlDocument.prettyPrint ( ) ) ; com.google.common.collect.ImmutableMultimap.Builder < java.lang.Integer , com.android.manifmerger.Actions.Record > mappingBuilder = com.google.common.collect.ImmutableMultimap.builder ( ) ; for ( com.android.manifmerger.XmlElement xmlElement : loadedWithLineNumbers.getRootNode ( ) . getMergeableElements ( ) ) { parse ( xmlElement , mappingBuilder ) ; } return mappingBuilder.build ( ) ; }
public void testTimedoutAfterUnregisteredNetworkRequest ( ) { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build ( ) ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback ( ) ; final int timeoutMs = 10 ; mCm.requestNetwork ( nr , networkCallback , timeoutMs ) ; mCm.unregisterNetworkCallback ( networkCallback ) ; com.android.server.ConnectivityServiceTest.sleepFor ( 15 ) ; networkCallback.assertNoCallback ( ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( TRANSPORT_WIFI ) ; mWiFiNetworkAgent.connect ( false ) ; networkCallback.assertNoCallback ( ) ; }
public void test_getDisplayCountry ( ) { assertTrue ( ( "Returned incorrect country: " + ( testLocale.getDisplayCountry ( ) ) ) , testLocale.getDisplayCountry ( ) . equals ( "Canada" ) ) ; java.util.Locale l_countryCD = new java.util.Locale ( "" , "CD" ) ; assertEquals ( "Congo [DRC]" , l_countryCD.getDisplayCountry ( ) ) ; }
public void testStageInstallWithErrorCode_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { byte [ ] distro1Bytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBytes ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 2 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( new com.android.timezone.distro.TimeZoneDistro ( distro1Bytes ) ) ) ; assertInstallDistroStaged ( distro1Bytes ) ; byte [ ] distro2Bytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBytes ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.OLDER_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer.stageInstallWithErrorCode ( new com.android.timezone.distro.TimeZoneDistro ( distro2Bytes ) ) ) ; assertInstallDistroStaged ( distro1Bytes ) ; assertNoInstalledDistro ( ) ; }
public synchronized java.util.zip.ZipOutputStream getOutputStream ( ) { assert ( file ) != null ; wasUsed = true ; if ( ( stream ) == null ) { clearRemover ( ) ; try { stream = new com.android.sched.util.file.OutputZipFile.CustomZipOutputStream ( new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( file ) ) , compression ) ; } catch ( java.io.FileNotFoundException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } } return ( ( java.util.zip.ZipOutputStream ) ( stream ) ) ; }
public void verifyModifyRetrievedConfig ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; config.homeSp.fqdn = "test1" ; mProvider = createProvider ( config ) ; verifyInstalledConfig ( config , true ) ; android.net.wifi.hotspot2.PasspointConfiguration retrievedConfig = mProvider.getConfig ( ) ; retrievedConfig.homeSp.fqdn = "test2" ; verifyInstalledConfig ( retrievedConfig , false ) ; }
public static void setUp ( ) throws com.android.jack.IllegalOptionsException , com.android.sched.util.config.ConfigurationException { com.android.jack.Options options = new com.android.jack.Options ( ) ; com.android.jack.Types.hooks = new com.android.sched.util.RunnableHooks ( ) ; options.checkValidity ( com.android.jack.Types.hooks ) ; options.getConfigBuilder ( com.android.jack.Types.hooks ) . getCodecContext ( ) . setDebug ( ) ; com.android.sched.util.config.ThreadConfig.setConfig ( options.getConfig ( ) ) ; com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; session.getLookup ( ) . getOrCreatePackage ( "java/lang" ) ; }
public void setChoices ( double [ ] limits , java.lang.String [ ] formats ) { if ( ( limits.length ) != ( formats.length ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( "limits.length != formats.length: " + ( limits.length ) ) + " != " ) + ( formats.length ) ) ) ; } choiceLimits = limits ; choiceFormats = formats ; }
public boolean cancelPairingUserInput ( ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( service == null ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot create pairing user input" ) ; return false ; } try { return service.cancelBondProcess ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { mContext = context ; if ( CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED.equals ( intent.getAction ( ) ) ) { if ( com.android.phone.otasp.OtaspSimStateReceiver.DBG ) com.android.phone.otasp.OtaspSimStateReceiver.logd ( ( "Received intent: " + ( intent.getAction ( ) ) ) ) ; if ( ( com.android.phone.PhoneGlobals.getPhone ( ) . getIccRecordsLoaded ( ) ) && ( com.android.phone.otasp.OtaspSimStateReceiver.isCarrierSupported ( ) ) ) { final android.telephony.TelephonyManager telephonyManager = android.telephony.TelephonyManager.from ( context ) ; telephonyManager.listen ( mPhoneStateListener , PhoneStateListener.LISTEN_OTASP_CHANGED ) ; } } }
static < T > T pollNext ( java.util.Iterator < T > iterator ) { if ( iterator.hasNext ( ) ) { T result = iterator.next ( ) ; iterator.remove ( ) ; return result ; } else { return null ; } }
public void setVerbosityLevel ( @ javax.annotation.Nonnull com.android.jack.api.v01.VerbosityLevel verbosityLevel ) throws com.android.jack.api.v01.ConfigurationException { com.android.jack.api.v01.com.android.jack.VerbosityLevel jackVerbosityLevel ; switch ( verbosityLevel ) { case DEBUG : { jackVerbosityLevel = com.android.jack.api.v01.VerbosityLevel.INFO ; break ; } case ERROR : { jackVerbosityLevel = com.android.jack.api.v01.VerbosityLevel.ERROR ; break ; } case INFO : { jackVerbosityLevel = com.android.jack.api.v01.VerbosityLevel.INFO ; break ; } case WARNING : { jackVerbosityLevel = com.android.jack.api.v01.VerbosityLevel.WARNING ; break ; } default : { throw new com.android.jack.api.v01.ConfigurationException ( ( ( "Verbosity level '" + verbosityLevel ) + "' is unsupported" ) ) ; } } options.setVerbosityLevel ( jackVerbosityLevel ) ; }
public void testAdbInstallFile ( ) throws java.lang.Exception { final java.util.List < java.lang.String > output = android.appsecurity.cts.AppSecurityTests.AdbOutputReader.getOutput ( 5000L , new java.lang.String [ ] { "adb" , "-s" , getDevice ( ) . getSerialNumber ( ) , "shell" , "cmd" , "package" , "install" , "-S" , "1024" , "/data/local/tmp/foo.apk" } ) ; assertEquals ( "Line count" , 1 , output.size ( ) ) ; assertEquals ( "Error text" , "Error: APK content must be streamed" , output.get ( 0 ) ) ; }
public final void dumpSubclasses ( ) { for ( java.lang.Object value : mClassesById.getValues ( ) ) { com.android.tools.perflib.heap.ClassObj theClass = ( ( com.android.tools.perflib.heap.ClassObj ) ( value ) ) ; int count = theClass.mSubclasses.size ( ) ; if ( count > 0 ) { java.lang.System.out.println ( theClass ) ; theClass.dumpSubclasses ( ) ; } } }
public java.lang.String nvReadItem ( int itemID ) { com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfModifyPermissionOrCarrierPrivilege ( mApp , getDefaultSubscription ( ) , "nvReadItem" ) ; if ( com.android.phone.PhoneInterfaceManager.DBG ) com.android.phone.PhoneInterfaceManager.log ( ( "nvReadItem: item " + itemID ) ) ; java.lang.String value = ( ( java.lang.String ) ( sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_NV_READ_ITEM , itemID ) ) ) ; if ( com.android.phone.PhoneInterfaceManager.DBG ) com.android.phone.PhoneInterfaceManager.log ( ( ( ( ( "nvReadItem: item " + itemID ) + " is \"" ) + value ) + '"' ) ) ; return value ; }
public static com.android.bubble.BubbleInfo.Builder from ( @ android.support.annotation.NonNull com.android.bubble.BubbleInfo bubbleInfo ) { return com.android.bubble.BubbleInfo.builder ( ) . setPrimaryColor ( bubbleInfo.getPrimaryColor ( ) ) . setPrimaryIcon ( bubbleInfo.getPrimaryIcon ( ) ) . setStartingYPosition ( bubbleInfo.getStartingYPosition ( ) ) . setActions ( bubbleInfo.getActions ( ) ) . setAvatar ( bubbleInfo.getAvatar ( ) ) ; }
public static void recordSparseSlowlyHistogram ( java.lang.String name , int sample ) { if ( org.chromium.base.metrics.RecordHistogram.sIsDisabledForTests ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordSparseHistogram ( name , key , sample ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
public void copy ( @ javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile , @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile ) throws com.android.sched.util.file.CannotCloseException , com.android.sched.util.file.CannotReadException , com.android.sched.util.file.CannotWriteException , com.android.sched.util.file.WrongPermissionException { if ( srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile ) { vfs.copy ( ( ( com.android.sched.vfs.DeflateFS.DeflateVFile ) ( srcFile ) ) . getWrappedFile ( ) , dstFile.getWrappedFile ( ) ) ; VFSStatCategory.OPTIMIZED_COPIES.getPercentStat ( getTracer ( ) , getInfoString ( ) ) . addTrue ( ) ; } else { super . copy ( srcFile , dstFile ) ; } }
final java.lang.reflect.AbstractMethod.GenericInfo getMethodOrConstructorGenericInfoInternal ( ) { java.lang.String signatureAttribute = getSignatureAttribute ( ) ; java.lang.Class < ? > [ ] exceptionTypes = this . getExceptionTypes ( ) ; libcore.reflect.GenericSignatureParser parser = new libcore.reflect.GenericSignatureParser ( this . getDeclaringClass ( ) . getClassLoader ( ) ) ; if ( ( this ) instanceof java.lang.reflect.Method ) { parser.parseForMethod ( this , signatureAttribute , exceptionTypes ) ; } else { parser.parseForConstructor ( this , signatureAttribute , exceptionTypes ) ; } return new java.lang.reflect.AbstractMethod.GenericInfo ( parser.exceptionTypes , parser.parameterTypes , parser.returnType , parser.formalTypeParameters ) ; }
public void testLaunchToSide ( ) throws java.lang.Exception { launchActivityInDockStack ( android.server.cts.ActivityManagerDockedStackTests.LAUNCH_TO_SIDE_ACTIVITY_NAME ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { android.server.cts.ActivityManagerDockedStackTests.LAUNCH_TO_SIDE_ACTIVITY_NAME } ) ; launchActivityToSide ( android.server.cts.ActivityManagerDockedStackTests.LAUNCH_TO_SIDE_ACTIVITY_NAME ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { android.server.cts.ActivityManagerDockedStackTests.TEST_ACTIVITY_NAME } ) ; mAmWmState.assertContainsStack ( "Must contain fullscreen stack." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.assertContainsStack ( "Must contain docked stack." , android.server.cts.DOCKED_STACK_ID ) ; }
private libcore.tzdata.shared2.DistroVersion readDistroVersion ( java.io.File distroDir ) throws java.io.IOException , libcore.tzdata.shared2.DistroException { android.util.Slog.i ( logTag , "Reading distro format version" ) ; java.io.File distroVersionFile = new java.io.File ( distroDir , libcore.tzdata.shared2.TimeZoneDistro.DISTRO_VERSION_FILE_NAME ) ; if ( ! ( distroVersionFile.exists ( ) ) ) { throw new libcore.tzdata.shared2.DistroException ( ( "No distro version file found: " + distroVersionFile ) ) ; } byte [ ] versionBytes = libcore.tzdata.shared2.FileUtils.readBytes ( distroVersionFile , DistroVersion.DISTRO_VERSION_FILE_LENGTH ) ; return libcore.tzdata.shared2.DistroVersion.fromBytes ( versionBytes ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.lang.System.setProperty ( "dexmaker.dexcache" , getInstrumentation ( ) . getTargetContext ( ) . getCacheDir ( ) . getPath ( ) ) ; java.lang.ClassLoader newClassLoader = getInstrumentation ( ) . getClass ( ) . getClassLoader ( ) ; java.lang.Thread.currentThread ( ) . setContextClassLoader ( newClassLoader ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.when ( mMockContext.getPackageManager ( ) ) . thenReturn ( mMockPm ) ; mNetworkScorerAppManager = new android.net.NetworkScorerAppManager ( mMockContext ) ; }
public void testEndCallWithNonRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( com.android.server.telecom.tests.TelecomServiceImplTest.TEST_PACKAGE ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( org.mockito.Matchers.eq ( 0L ) , org.mockito.Matchers.eq ( com.android.server.telecom.tests.TelecomServiceImplTest.TEST_PACKAGE ) ) ; }
protected java.util.List < org.eclipse.ltk.core.refactoring.Change > computeChanges ( ) { final com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler template = mValues.template ; template.setBackupMergedFiles ( false ) ; java.util.Map < java.lang.String , java.lang.Object > paramMap = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; addProjectInfo ( paramMap ) ; com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.addDirectoryParameters ( paramMap , getProject ( ) ) ; if ( mValues.createActivity ) { paramMap.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_APP_COMPAT , true ) ; } return template.render ( mProject , paramMap ) ; }
private void validateIsInt16OrFloat16 ( ) { if ( ( ( ( mType.mElement.mType ) == ( Element.DataType.SIGNED_16 ) ) || ( ( mType.mElement.mType ) == ( Element.DataType.UNSIGNED_16 ) ) ) || ( ( mType.mElement.mType ) == ( Element.DataType.FLOAT_16 ) ) ) { return ; } throw new android.renderscript.RSIllegalArgumentException ( ( "16 bit integer source does not match allocation type " + ( mType.mElement.mType ) ) ) ; }
public void sendSingleScanRequestWithNoResults ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = com.android.server.wifi.ScanTestUtil.createRequest ( WifiScanner.WIFI_BAND_BOTH , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; doSuccessfulSingleScan ( requestSettings , com.android.server.wifi.ScanTestUtil.computeSingleScanNativeSettings ( requestSettings ) , com.android.server.wifi.ScanResults.create ( 0 , new int [ 0 ] ) ) ; }
public java.util.Set < java.io.File > getCompileClasspath ( @ com.android.annotations.NonNull com.android.builder.core.VariantConfiguration < ? , ? , ? > variantConfiguration ) { java.util.Set < java.io.File > compileClasspath = variantConfiguration.getCompileClasspath ( ) ; if ( variantConfiguration.getRenderscriptSupportModeEnabled ( ) ) { java.io.File renderScriptSupportJar = getRenderScriptSupportJar ( ) ; java.util.Set < java.io.File > fullJars = com.google.common.collect.Sets.newHashSetWithExpectedSize ( ( ( compileClasspath.size ( ) ) + 1 ) ) ; fullJars.addAll ( compileClasspath ) ; if ( renderScriptSupportJar != null ) { fullJars.add ( renderScriptSupportJar ) ; } compileClasspath = fullJars ; } return compileClasspath ; }
private void responseSetupDataCall ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SetupDataCallResult setupDataCallResult ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.dataconnection.DataCallResponse ret = com.android.internal.telephony.RIL.convertDataCallResult ( setupDataCallResult ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void invokeOemRilRequestRaw ( byte [ ] data , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW , response ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + "[" ) + ( com.android.internal.telephony.uicc.IccUtils.bytesToHexString ( data ) ) ) + "]" ) ) ; rr.mp.writeByteArray ( data ) ; send ( rr ) ; }
private static void reportTypeDef ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull lombok.ast.Node argument , @ com.android.annotations.Nullable lombok.ast.Node errorNode , @ com.android.annotations.NonNull java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > allAnnotations ) { java.lang.Object allowed = annotation.getValue ( ) ; if ( allowed instanceof java.lang.Object [ ] ) { java.lang.Object [ ] allowedValues = ( ( java.lang.Object [ ] ) ( allowed ) ) ; com.android.tools.lint.checks.SupportAnnotationDetector.reportTypeDef ( context , argument , errorNode , false , allowedValues , allAnnotations ) ; } }
public void onDraw ( final android.graphics.Canvas canvas ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onDraw ( canvas ) ; } } ) ; return ; } mAwContents.onDraw ( canvas ) ; }
public static void stopListenForWindowChanges ( com.android.hierarchyviewerlib.device.WindowUpdater.IWindowChangeListener listener , com.android.ddmlib.IDevice device ) { synchronized ( com.android.hierarchyviewerlib.device.WindowUpdater.sWindowChangeListeners ) { java.util.ArrayList < com.android.hierarchyviewerlib.device.WindowUpdater.IWindowChangeListener > listeners = com.android.hierarchyviewerlib.device.WindowUpdater.sWindowChangeListeners.get ( device ) ; listeners.remove ( listener ) ; if ( ( listeners.size ( ) ) != 0 ) { return ; } com.android.hierarchyviewerlib.device.WindowUpdater.sWindowChangeListeners.remove ( device ) ; } java.lang.Thread listeningThread ; synchronized ( com.android.hierarchyviewerlib.device.WindowUpdater.sListeningThreads ) { listeningThread = com.android.hierarchyviewerlib.device.WindowUpdater.sListeningThreads.get ( device ) ; com.android.hierarchyviewerlib.device.WindowUpdater.sListeningThreads.remove ( device ) ; } listeningThread.interrupt ( ) ; }
public static int IntMatCond_IntVarVar ( int a , int b , int x , int y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int result = ( a > b ) ? x : y ; return result + ( a > b ? 0 : 1 ) ; }
public long getNextValueAsReferenceTypeID ( ) { final int referenceTypeIdSize = org.apache.harmony.jpda.tests.framework.jdwp.TypesLengths.getTypeLength ( TypesLengths.REFERENCE_TYPE_ID ) ; if ( ( referenceTypeIdSize < 0 ) || ( referenceTypeIdSize > 8 ) ) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException ( ( ( "Improper ReferenceTypeID value length = " + referenceTypeIdSize ) + "!" ) ) ; } reading_data_index = ( reading_data_index ) + referenceTypeIdSize ; return org.apache.harmony.jpda.tests.framework.jdwp.Packet.readFromByteArray ( data , ( ( reading_data_index ) - referenceTypeIdSize ) , referenceTypeIdSize ) ; }
protected void activityCleanUp ( ) { mScreenManipulator.turnScreenOn ( ) ; try { playSound ( ) ; } catch ( java.lang.InterruptedException e ) { } android.support.v4.content.LocalBroadcastManager.getInstance ( this ) . unregisterReceiver ( myBroadCastReceiver ) ; if ( ( ( mDeviceSuspendLock ) != null ) && ( mDeviceSuspendLock.isHeld ( ) ) ) { mDeviceSuspendLock.release ( ) ; } }
public java.util.Map < java.lang.String , java.lang.String > getNetworkExtra ( int netId , java.lang.String name ) { final java.lang.String extraString = getNetworkVariable ( netId , name ) ; if ( ( ( extraString == null ) || ( ! ( extraString.startsWith ( "\"" ) ) ) ) || ( ! ( extraString.endsWith ( "\"" ) ) ) ) { return null ; } return com.android.server.wifi.WifiNative.parseNetworkExtra ( com.android.server.wifi.util.NativeUtil.removeEnclosingQuotes ( extraString ) ) ; }
private static byte [ ] getActualPlainText ( java.lang.String algorithm ) { if ( ( ( ( algorithm.equals ( "AES" ) ) || ( algorithm.equals ( "AES/CBC/NOPADDING" ) ) ) || ( algorithm.equals ( "AES/CTS/NOPADDING" ) ) ) || ( algorithm.equals ( "AES/ECB/NOPADDING" ) ) ) { return libcore.javax.crypto.CipherTest.SIXTEEN_BYTE_BLOCK_PLAIN_TEXT ; } if ( ( ( algorithm.equals ( "DESEDE" ) ) || ( algorithm.equals ( "DESEDE/CBC/NOPADDING" ) ) ) || ( algorithm.equals ( "DESEDE/ECB/NOPADDING" ) ) ) { return libcore.javax.crypto.CipherTest.EIGHT_BYTE_BLOCK_PLAIN_TEXT ; } return libcore.javax.crypto.CipherTest.ORIGINAL_PLAIN_TEXT ; }
private void unregisterReceivers ( ) { try { if ( ( mObserver ) != null ) { getContentResolver ( ) . unregisterContentObserver ( mObserver ) ; mObserver = null ; } unregisterReceiver ( mBluetoothReceiver ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Log.w ( com.android.bluetooth.opp.BluetoothOppService.TAG , ( "unregisterReceivers " + ( e.toString ( ) ) ) ) ; } }
public void finish ( @ javax.annotation.Nonnull java.io.OutputStream out ) throws java.io.IOException { dexResult.prepare ( cstManager.getCstStrings ( ) , cstManager.getCstFieldRefs ( ) , cstManager.getCstMethodRefs ( ) , cstManager.getCstTypes ( ) ) ; if ( ! ( cstManager.validate ( dexResult ) ) ) { throw new java.lang.AssertionError ( ) ; } dexResult.writeTo ( out , null , false ) ; finished = true ; }
public boolean isPossibleShortNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.util.List < java.lang.String > regionCodes = getRegionCodesForCountryCode ( number.getCountryCode ( ) ) ; int shortNumberLength = com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) . length ( ) ; for ( java.lang.String region : regionCodes ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( region ) ; if ( phoneMetadata == null ) { continue ; } if ( phoneMetadata.getGeneralDesc ( ) . getPossibleLengthList ( ) . contains ( shortNumberLength ) ) { return true ; } } return false ; }
public void takeScreenshot ( ) { if ( ( mState ) >= ( com.android.nfc.beam.SendUi.STATE_W4_TOUCH ) ) { return ; } mState = com.android.nfc.beam.SendUi.STATE_W4_SCREENSHOT ; new com.android.nfc.beam.SendUi.ScreenshotTask ( ) . execute ( ) ; final android.content.IntentFilter filter = new android.content.IntentFilter ( android.content.Intent.ACTION_CLOSE_SYSTEM_DIALOGS ) ; mContext.registerReceiver ( mReceiver , filter ) ; }
private java.lang.String format ( java.text.AttributedCharacterIterator iterator , com.ibm.icu.text.ScientificNumberFormatter.Style option ) { return option.format ( iterator , preExponent ) ; }
public void testAesCbcHmacSha512Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , getAuthKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public void testExistsOnSystem ( ) throws android.system.ErrnoException { assertEquals ( "SECCOMP filter is not installed." , 0 , libcore.java.io.FileTest.installSeccompFilter ( ) ) ; java.io.File sh = new java.io.File ( "/sdcard" ) ; assertTrue ( sh.exists ( ) ) ; }
public void setView ( int type , int i , float [ ] vertexColors ) { android.view.Window window = getWindow ( ) ; window.addFlags ( ( ( ( ( ( WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD ) | ( WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON ) ) | ( WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON ) ) | ( WindowManager.LayoutParams.FLAG_FULLSCREEN ) ) | ( WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED ) ) ) ; view = new android.opengl.cts.OpenGLES20ActivityTwo.OpenGLES20View ( this , type , i , vertexColors , mLatch ) ; setContentView ( view ) ; }
public void testDeserializeProxyWasInterface ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737d00000001002e6c6962636f72652e6a6176612e696f2e53657269616c697a6" + ( ( ( ( "174696f6e5465737424576173496e74657266616365787200176a6176612e6c616e672e7265666c6" + "563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f72656" ) + "66c6563742f496e766f636174696f6e48616e646c65723b78707372003f6c6962636f72652e6a617" ) + "6612e696f2e53657269616c697a6174696f6e546573742453657269616c697a61626c65496e766f6" ) + "36174696f6e48616e646c6572e6ceffa2941ee3210200007870" ) ; try { libcore.libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.lang.ClassNotFoundException expected ) { } }
protected void load ( ) { parseFile ( ) ; mResourceTypeList = java.util.Collections.unmodifiableCollection ( mResourceItems.keySet ( ) ) ; updateResourceItems ( ) ; }
public void enter ( ) { log ( ( "Enter Pending: " + ( getCurrentMessage ( ) . what ) ) ) ; if ( ( ( mTargetDevice ) != null ) && ( ( mIncomingDevice ) != null ) ) { loge ( ( ( ( ( ( "ERROR: enter() inconsistent state in Pending: current = " + ( mCurrentDevice ) ) + " target = " ) + ( mTargetDevice ) ) + " incoming = " ) + ( mIncomingDevice ) ) ) ; } }
private void onApnChanged ( ) { com.android.internal.telephony.DctConstants.State overallState = getOverallState ( ) ; boolean isDisconnected = ( overallState == ( DctConstants.State.IDLE ) ) || ( overallState == ( DctConstants.State.FAILED ) ) ; if ( ( mPhone ) instanceof com.android.internal.telephony.gsm.GSMPhone ) { ( ( com.android.internal.telephony.gsm.GSMPhone ) ( mPhone ) ) . updateCurrentCarrierInProvider ( ) ; } if ( DBG ) log ( "onApnChanged: createAllApnList and cleanUpAllConnections" ) ; createAllApnList ( ) ; setInitialAttachApn ( ) ; cleanUpAllConnections ( ( ! isDisconnected ) , Phone.REASON_APN_CHANGED ) ; if ( isDisconnected ) { setupDataOnConnectableApns ( Phone.REASON_APN_CHANGED ) ; } }
public static com.android.jack.dx.rop.code.Rop opGetField ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type.getBasicType ( ) ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.GET_FIELD_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.GET_FIELD_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_CLOSURE : case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_BOOLEAN : return com.android.jack.dx.rop.code.Rops.GET_FIELD_BOOLEAN ; case com.android.jack.dx.rop.type.Type.BT_BYTE : return com.android.jack.dx.rop.code.Rops.GET_FIELD_BYTE ; case com.android.jack.dx.rop.type.Type.BT_CHAR : return com.android.jack.dx.rop.code.Rops.GET_FIELD_CHAR ; case com.android.jack.dx.rop.type.Type.BT_SHORT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_SHORT ; } return com.android.jack.dx.rop.code.Rops.throwBadType ( type ) ; }
public int createOatDir ( java.lang.String oatDir , java.lang.String dexInstructionSet ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "createoatdir" ) ; builder.append ( ' ' ) ; builder.append ( oatDir ) ; builder.append ( ' ' ) ; builder.append ( dexInstructionSet ) ; return mInstaller.execute ( builder.toString ( ) ) ; }
void cleanUpUserLILPw ( int userHandle ) { if ( mDirtyUsers.remove ( userHandle ) ) ; mSettings.removeUserLPr ( userHandle ) ; if ( ( mInstaller ) != null ) { mInstaller.removeUserDataDirs ( userHandle ) ; } }
private static java.util.List < java.lang.String > getProductFlavorNames ( @ com.android.annotations.NonNull com.android.build.gradle.internal.variant.BaseVariantData < ? extends com.android.build.gradle.internal.variant.BaseVariantOutputData > variantData ) { java.util.List < com.android.build.gradle.internal.dsl.GroupableProductFlavor > productFlavors = variantData.getVariantConfiguration ( ) . getProductFlavors ( ) ; java.util.List < java.lang.String > flavorNames = com.google.common.collect.Lists.newArrayListWithCapacity ( productFlavors.size ( ) ) ; for ( com.android.builder.core.DefaultProductFlavor flavor : productFlavors ) { flavorNames.add ( flavor.getName ( ) ) ; } return flavorNames ; }
public void testAesCbcHmacSha256Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 ) ; }
public void onChange ( boolean selfChange ) { mWifiWakeupEnabled = ( Settings.Global.getInt ( mContentResolver , Settings.Global.WIFI_WAKEUP_ENABLED , 0 ) ) == 1 ; mAirplaneModeEnabled = ( Settings.Global.getInt ( mContentResolver , Settings.Global.AIRPLANE_MODE_ON , 0 ) ) == 1 ; }
private void checkMessages ( java.util.List < com.android.ddmlib.logcat.LogCatMessage > receivedMessages , com.android.ddmlib.IDevice device ) { if ( ! ( mMonitorEnabled.get ( ) ) ) { return ; } for ( com.android.ddmlib.logcat.LogCatMessage m : receivedMessages ) { if ( isImportantMessage ( m ) ) { focusLogCatView ( device , m.getAppName ( ) ) ; mMonitorEnabled.set ( false ) ; break ; } } }
public boolean setPairingConfirmation ( boolean confirm ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( service == null ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot set pairing confirmation" ) ; return false ; } try { return service.setPairingConfirmation ( this , confirm ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public com.android.ims.ImsConfig getConfigInterface ( ) throws com.android.ims.ImsException { if ( ( ( mConfig ) != null ) && ( mConfig.isBinderAlive ( ) ) ) { return mConfig ; } checkAndThrowExceptionIfServiceUnavailable ( ) ; try { android.telephony.ims.aidl.IImsConfig config = mMmTelFeatureConnection.getConfigInterface ( ) ; if ( config == null ) { throw new com.android.ims.ImsException ( "getConfigInterface()" , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } mConfig = new com.android.ims.ImsConfig ( config , mContext ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getConfigInterface()" , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mConfig ; }
public void testShowDescriptionWithUrl ( ) throws java.lang.Exception { checkDriver ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "SdCardPath\n" + "----------\n" ) + "Summary: Hardcoded reference to /sdcard\n" ) + "\n" ) + "Priority: 6 / 10\n" ) + "Severity: Warning\n" ) + "Category: Correctness\n" ) + "\n" ) + "Your code should not reference the /sdcard path directly; instead use\n" ) + "Environment.getExternalStorageDirectory().getPath().\n" ) + "\n" ) + "Similarly, do not reference the /data/data/ path directly; it can vary in\n" ) + "multi-user scenarios. Instead, use Context.getFilesDir().getPath().\n" ) + "\n" ) + "More information: \n" ) + "http://developer.android.com/guide/topics/data/data-storage.html#filesExternal\n" ) + "\n" ) ) , "" , com.android.tools.lint.LintCliFlags.ERRNO_SUCCESS , new java.lang.String [ ] { "--show" , "SdCardPath" } ) ; }
void test ( ) { if ( ( com.android.cts.verifier.notifications.MockListener.getInstance ( ) ) != null ) { status = com.android.cts.verifier.notifications.InteractiveVerifierActivity.PASS ; next ( ) ; } else { logFail ( ) ; status = com.android.cts.verifier.notifications.InteractiveVerifierActivity.RETEST ; delay ( ) ; } }
public org.eclipse.swt.graphics.Font getFont ( java.lang.Object element , int columnIndex ) { if ( element instanceof com.android.sdklib.internal.repository.updater.PkgItem ) { if ( ( ( ( com.android.sdklib.internal.repository.updater.PkgItem ) ( element ) ) . getState ( ) ) == ( com.android.sdklib.internal.repository.updater.PkgItem.PkgState.NEW ) ) { return getTreeFontItalic ( ) ; } } else if ( element instanceof java.lang.Package ) { return getTreeFontItalic ( ) ; } return super . getFont ( element ) ; }
synchronized boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( "sendReport(): device=" + device ) + " id=" ) + id ) ) ; } return ( ( checkDevice ( device ) ) && ( checkCallingUid ( ) ) ) && ( mHidDeviceNativeInterface.sendReport ( id , data ) ) ; }
public void run ( ) { android.renderscript.RenderScript pRS = createRenderScript ( true ) ; com.android.rs.unittest.ScriptC_refcount s = new com.android.rs.unittest.ScriptC_refcount ( pRS ) ; initializeGlobals ( pRS , s ) ; s.invoke_refcount_test ( ) ; pRS.finish ( ) ; mA.destroy ( ) ; mT.destroy ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
public boolean requestIcon ( java.lang.String bssid , java.lang.String fileName ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.initiateHs20IconQuery ( bssid , fileName ) ; } else { java.lang.String result = doStringCommand ( ( ( ( "REQ_HS20_ICON " + bssid ) + " " ) + fileName ) ) ; return ( result != null ) && ( result.startsWith ( "OK" ) ) ; } }
protected void setEnabledProtocols ( java.lang.String [ ] protocols ) { if ( protocols == null ) { throw new java.lang.IllegalArgumentException ( "protocols == null" ) ; } java.lang.String [ ] filteredProtocols = org.conscrypt.SSLParametersImpl.filterFromProtocols ( protocols , NativeCrypto.OBSOLETE_PROTOCOL_SSLV3 ) ; isEnabledProtocolsFiltered = ( protocols.length ) != ( filteredProtocols.length ) ; enabledProtocols = org.conscrypt.NativeCrypto.checkEnabledProtocols ( filteredProtocols ) . clone ( ) ; }
public void reportConnectionFailureFetchesFatesInVerboseMode ( ) { final boolean verbosityToggle = true ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionEvent ( com.android.server.wifi.WifiDiagnosticsTest.FAKE_CONNECTION_ID , WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.mockito.Mockito.verify ( mWifiNative ) . getTxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; org.mockito.Mockito.verify ( mWifiNative ) . getRxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; }
public static void removeMapping ( java.lang.String oid , java.lang.String name ) { java.lang.String nameUC = name.toUpperCase ( java.util.Locale.ROOT ) ; org.apache.harmony.security.utils.AlgNameMapper.alg2OidMap.remove ( nameUC ) ; org.apache.harmony.security.utils.AlgNameMapper.oid2AlgMap.remove ( oid ) ; org.apache.harmony.security.utils.AlgNameMapper.algAliasesMap.remove ( nameUC ) ; }
private static java.security.cert.CertPath fromEncoding ( java.io.InputStream inStream , org.apache.harmony.xnet.provider.jsse.OpenSSLX509CertPath.Encoding encoding ) throws java.security.cert.CertificateException { switch ( encoding ) { case PKI_PATH : return org.apache.harmony.xnet.provider.jsse.OpenSSLX509CertPath.fromPkiPathEncoding ( inStream ) ; case PKCS7 : return org.apache.harmony.xnet.provider.jsse.OpenSSLX509CertPath.fromPkcs7Encoding ( inStream ) ; default : throw new java.security.cert.CertificateEncodingException ( "Unknown encoding" ) ; } }
public void test_SSLSocket_getEnabledCipherSuites_returnsCopies ( ) throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ( ( javax.net.ssl.SSLSocketFactory ) ( javax.net.ssl.SSLSocketFactory.getDefault ( ) ) ) ; javax.net.ssl.SSLSocket ssl = ( ( javax.net.ssl.SSLSocket ) ( sf.createSocket ( ) ) ) ; assertNotSame ( ssl.getEnabledCipherSuites ( ) , ssl.getEnabledCipherSuites ( ) ) ; }
public void testRunNormalInput ( ) { mProcessHelper = com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockProcessHelper ( CommandStatus.SUCCESS ) ; mTest.setDevice ( com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice ( ) ) ; mTest.setRunUtil ( createMockRunUtil ( "which" ) ) ; try { mTest.run ( mMockInvocationListener ) ; } catch ( java.lang.IllegalArgumentException e ) { fail ( ) ; e.printStackTrace ( ) ; } catch ( com.android.tradefed.device.DeviceNotAvailableException e ) { fail ( ) ; e.printStackTrace ( ) ; } }
public static void assertArrayEquals ( java.lang.String message , long [ ] expecteds , long [ ] actuals ) { java.lang.String expectedString = java.util.Arrays.toString ( expecteds ) ; java.lang.String actualString = java.util.Arrays.toString ( actuals ) ; if ( ! ( expectedString.equals ( actualString ) ) ) { org.junit.Assert.fail ( message , ( ( ( "expected " + expectedString ) + " but was " ) + actualString ) ) ; } }
public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newFirstIndex , int newSecondIndex ) { assert ( getSecondIndexType ( ) ) == ( com.android.jack.dx.io.IndexType.NONE ) ; return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction ( getFormat ( ) , getOpcode ( ) , newFirstIndex , getFirstIndexType ( ) , getTarget ( ) , getLiteral ( ) , a , registerCount ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { final com.intellij.openapi.module.Module selectedModule = LangDataKeys.MODULE.getData ( e.getDataContext ( ) ) ; com.android.tools.idea.stats.UsageTracker.getInstance ( ) . trackEvent ( GctTracking.CATEGORY , GctTracking.DEPLOY , "show.dialog" , null ) ; com.google.gct.idea.appengine.deploy.AppEngineUpdateDialog.show ( e.getProject ( ) , selectedModule ) ; }
public java.util.List < java.io.File > getResourceFolders ( ) { java.util.List < java.io.File > folders = mClient.getResourceFolders ( this ) ; if ( ( ( folders.size ( ) ) == 1 ) && ( com.android.tools.lint.detector.api.Project.isAospFrameworksProject ( mDir ) ) ) { mMinSdk = mTargetSdk = com.android.SdkConstants.HIGHEST_KNOWN_API ; java.io.File folder = new java.io.File ( folders.get ( 0 ) , com.android.SdkConstants.RES_FOLDER ) ; if ( ! ( folder.exists ( ) ) ) { folders = java.util.Collections.emptyList ( ) ; } } return folders ; }
public void testV1SignedAttrs ( ) throws java.lang.Exception { java.lang.String apk = "v1-only-with-signed-attrs.apk" ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.JELLY_BEAN_MR2 ) , Issue.JAR_SIG_VERIFY_EXCEPTION ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.KITKAT ) ) ; apk = "v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk" ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.JELLY_BEAN_MR2 ) , Issue.JAR_SIG_VERIFY_EXCEPTION ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.KITKAT ) ) ; }
public void onFindResultReceived ( int activeMatchOrdinal , int numberOfMatches , boolean isDoneCounting ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onFindResultReceived" ) ; if ( ( mFindListener ) == null ) return ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onFindResultReceived" ) ; mFindListener.onFindResultReceived ( activeMatchOrdinal , numberOfMatches , isDoneCounting ) ; } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onFindResultReceived" ) ; } }
public void onAdvertisingParametersUpdated ( int advertiserId , int txPower , int status ) { handler.post ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { android.bluetooth.le.AdvertisingSet advertisingSet = mAdvertisingSets.get ( advertiserId ) ; callback.onAdvertisingParametersUpdated ( advertisingSet , txPower , status ) ; } } ) ; }
public void testGetRootId ( ) { com.android.bluetooth.avrcp.BrowsedPlayerWrapper wrapper = com.android.bluetooth.avrcp.BrowsedPlayerWrapper.wrap ( null , "test" , "test" ) ; wrapper.connect ( mConnCb ) ; verify ( mMockBrowser ) . testInit ( any ( ) , any ( ) , mBrowserConnCb.capture ( ) , any ( ) ) ; com.android.bluetooth.avrcp.MediaBrowser.ConnectionCallback browserConnCb = mBrowserConnCb.getValue ( ) ; browserConnCb.onConnected ( ) ; org.junit.Assert.assertEquals ( "root_folder" , wrapper.getRootId ( ) ) ; verify ( mMockBrowser ) . disconnect ( ) ; }
public boolean equals ( java.lang.Object o ) { throw new java.lang.IllegalArgumentException ( "OpenSSLECPointContext.equals is not defined." ) ; }
public final float getFloat ( ) { checkIsAccessible ( ) ; int newPosition = ( position ) + ( libcore.io.SizeOf.FLOAT ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferUnderflowException ( ) ; } float result = java.lang.Float.intBitsToFloat ( this . block.peekInt ( ( ( offset ) + ( position ) ) , order ) ) ; position = newPosition ; return result ; }
private void persistComponentNamesToSettingLocked ( java.lang.String settingName , java.util.Set < android.content.ComponentName > componentNames , int userId ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; for ( android.content.ComponentName componentName : componentNames ) { if ( ( builder.length ( ) ) > 0 ) { builder.append ( com.android.server.accessibility.AccessibilityManagerService.COMPONENT_NAME_SEPARATOR ) ; } builder.append ( componentName.flattenToShortString ( ) ) ; } Settings.Secure.putStringForUser ( mContext.getContentResolver ( ) , settingName , builder.toString ( ) , userId ) ; }
private int convertCallState ( int callState , boolean isForegroundCall ) { switch ( callState ) { case CallState.NEW : case CallState.ABORTED : case CallState.DISCONNECTED : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_IDLE ; case CallState.ACTIVE : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_ACTIVE ; case CallState.CONNECTING : case CallState.SELECT_PHONE_ACCOUNT : case CallState.DIALING : case CallState.PULLING : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_ALERTING ; case CallState.ON_HOLD : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_HELD ; case CallState.RINGING : if ( isForegroundCall ) { return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_INCOMING ; } else { return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_WAITING ; } } return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_IDLE ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodIdRef x ) { printTypeName ( x.getEnclosingType ( ) ) ; print ( '.' ) ; printName ( x.getMethodId ( ) . getMethodIdWide ( ) ) ; visitCollectionJType ( x.getMethodId ( ) . getMethodIdWide ( ) . getParamTypes ( ) . iterator ( ) ) ; return false ; }
public void testXsdNamespaceBuilder ( ) throws java.lang.Exception { com.intellij.openapi.vfs.VirtualFile file = myFixture.copyFileToProject ( "web-app_2_5.xsd" ) ; final com.intellij.xml.index.XsdNamespaceBuilder builder = com.intellij.xml.index.XsdNamespaceBuilder.computeNamespace ( new java.io.InputStreamReader ( file.getInputStream ( ) ) ) ; assertEquals ( com.intellij.xml.index.XmlSchemaIndexTest.NS , builder.getNamespace ( ) ) ; assertEquals ( "2.5" , builder.getVersion ( ) ) ; assertEquals ( java.util.Collections.singletonList ( "web-app" ) , builder.getTags ( ) ) ; }
private void responseIccCardStatus ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.CardStatus cardStatus ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.uicc.IccCardStatus iccCardStatus = convertHalCardStatus ( cardStatus ) ; mRil.riljLog ( ( "responseIccCardStatus: from HIDL: " + iccCardStatus ) ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , iccCardStatus ) ; } mRil.processResponseDone ( rr , responseInfo , iccCardStatus ) ; } }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object object ) { if ( object instanceof com.google.common.collect.Table.Cell ) { com.google.common.collect.Table.Cell < ? , ? , ? > cell = ( ( com.google.common.collect.Table.Cell < ? , ? , ? > ) ( object ) ) ; java.lang.Object value = get ( cell.getRowKey ( ) , cell.getColumnKey ( ) ) ; return ( value != null ) && ( value.equals ( cell.getValue ( ) ) ) ; } return false ; }
public void onResume ( ) { super . onResume ( ) ; boolean isHidden = isHidden ( ) ; com.android.dialer.common.LogUtil.i ( "NewCallLogFragment.onResume" , "isHidden = %s" , isHidden ) ; if ( ! isHidden ) { onFragmentShown ( ) ; } }
public byte [ ] iccExchangeSimIO ( int fileID , int command , int p1 , int p2 , int p3 , java.lang.String filePath ) { return iccExchangeSimIO ( getSubId ( ) , fileID , command , p1 , p2 , p3 , filePath ) ; }
public void checkClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.intellij.psi.PsiClass declaration ) { if ( ! ( context.getProject ( ) . getReportIssues ( ) ) ) { return ; } java.lang.String name = declaration.getQualifiedName ( ) ; if ( name != null ) { declaration.accept ( new com.android.tools.lint.checks.OverdrawDetector.OverdrawVisitor ( name , declaration ) ) ; } }
public static void setTag ( java.lang.String tag ) { android.telecom.Log.TAG = tag ; android.telecom.Log.DEBUG = android.telecom.Log.isLoggable ( android.util.Log.DEBUG ) ; android.telecom.Log.INFO = android.telecom.Log.isLoggable ( android.util.Log.INFO ) ; android.telecom.Log.VERBOSE = android.telecom.Log.isLoggable ( android.util.Log.VERBOSE ) ; android.telecom.Log.WARN = android.telecom.Log.isLoggable ( android.util.Log.WARN ) ; android.telecom.Log.ERROR = android.telecom.Log.isLoggable ( android.util.Log.ERROR ) ; }
public void testAesCbcHmacSha1Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , android.net.cts.IpSecManagerTest.getKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public void onPageScrollStateChanged ( int state ) { if ( state != ( android.support.v4.view.ViewPager.SCROLL_STATE_SETTLING ) ) { onPageScrolledBeforeScrollStateSettling = false ; } final int count = mOnPageChangeListeners.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { mOnPageChangeListeners.get ( i ) . onPageScrollStateChanged ( state ) ; } }
protected java.lang.String getProposal ( ) { if ( mId.equals ( InefficientWeightDetector.BASELINE_WEIGHTS.getId ( ) ) ) { return com.android.ide.common.layout.LayoutConstants.VALUE_FALSE ; } else if ( mId.equals ( TranslationDetector.MISSING.getId ( ) ) ) { return com.android.ide.common.layout.LayoutConstants.VALUE_FALSE ; } return super . getProposal ( ) ; }
private static java.io.File getNoConfigProcessors ( ) throws java.lang.Exception { if ( ( com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors ) == null ) { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain ( ) ; java.io.File processorsDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; java.io.File processorsSrcDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.annotation.processor.sample.processors" ) ; toolchain.srcToLib ( processorsDir , false , com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR , processorsSrcDir ) ; com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors = processorsDir ; } return com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors ; }
public void test_setDecimalSeparatorAlwaysShown ( ) { java.text.DecimalFormat df = new java.text.DecimalFormat ( "###0.##" , new java.text.DecimalFormatSymbols ( java.util.Locale.US ) ) ; assertEquals ( "Wrong default result" , "5" , df.format ( 5 ) ) ; df.setDecimalSeparatorAlwaysShown ( true ) ; assertTrue ( "Not set" , df.isDecimalSeparatorAlwaysShown ( ) ) ; assertEquals ( "Wrong set result" , "7." , df.format ( 7 ) ) ; }
public void registerUserSwitchObserver ( android.app.IUserSwitchObserver observer ) { if ( ( checkCallingPermission ( android.Manifest.permission.INTERACT_ACROSS_USERS_FULL ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { java.lang.String msg = ( ( ( ( "Permission Denial: registerUserSwitchObserver() from pid=" + ( android.os.Binder.getCallingPid ( ) ) ) + ", uid=" ) + ( android.os.Binder.getCallingUid ( ) ) ) + " requires " ) + ( android.Manifest.permission.INTERACT_ACROSS_USERS_FULL ) ; android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , msg ) ; throw new java.lang.SecurityException ( msg ) ; } mUserSwitchObservers.register ( observer ) ; }
public void selectionChanged ( org.eclipse.jface.viewers.SelectionChangedEvent event ) { org.eclipse.jface.viewers.ISelection selection = event.getSelection ( ) ; getEditor ( ) . getSite ( ) . getSelectionProvider ( ) . setSelection ( selection ) ; if ( getEditor ( ) . getIgnoreXmlUpdate ( ) ) { return ; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.SelectionManager manager = mGraphicalEditor.getCanvasControl ( ) . getSelectionManager ( ) ; manager.setSelection ( selection ) ; }
public int dexopt ( java.lang.String apkPath , int uid , java.lang.String instructionSet , int dexoptNeeded , int dexFlags ) { if ( ! ( com.android.server.pm.Installer.isValidInstructionSet ( instructionSet ) ) ) { android.util.Slog.e ( com.android.server.pm.Installer.TAG , ( "Invalid instruction set: " + instructionSet ) ) ; return - 1 ; } return mInstaller.dexopt ( apkPath , uid , instructionSet , dexoptNeeded , dexFlags ) ; }
public void test_unlink ( ) throws java.lang.Exception { java.io.File f = java.io.File.createTempFile ( "OsTest" , "tst" ) ; assertTrue ( f.exists ( ) ) ; Libcore.os.unlink ( f.getAbsolutePath ( ) ) ; assertFalse ( f.exists ( ) ) ; try { Libcore.os.unlink ( f.getAbsolutePath ( ) ) ; fail ( ) ; } catch ( android.system.ErrnoException e ) { assertEquals ( OsConstants.ENOENT , e.errno ) ; } }
public void visitLookUpSwitchInstruction ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , int offset , proguard.classfile.editor.LookUpSwitchInstruction lookUpSwitchInstruction ) { lookUpSwitchInstruction.defaultOffset = newBranchOffset ( offset , lookUpSwitchInstruction.defaultOffset , newOffset ) ; newJumpOffsets ( offset , lookUpSwitchInstruction.jumpOffsets , newOffset ) ; instructionWriter.visitLookUpSwitchInstruction ( clazz , method , codeAttribute , newOffset , lookUpSwitchInstruction ) ; newOffset += lookUpSwitchInstruction.length ( newOffset ) ; }
public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { java.lang.String action = intent.getAction ( ) ; if ( ( Telephony.Sms.Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION.equals ( action ) ) || ( Telephony.Sms.Intents.SMS_CB_RECEIVED_ACTION.equals ( action ) ) ) { handleCellBroadcastIntent ( intent ) ; } else if ( com.android.cellbroadcastreceiver.CellBroadcastAlertService.SHOW_NEW_ALERT_ACTION.equals ( action ) ) { showNewAlert ( intent ) ; } else { android.util.Log.e ( com.android.cellbroadcastreceiver.CellBroadcastAlertService.TAG , ( "Unrecognized intent action: " + action ) ) ; } return START_NOT_STICKY ; }
public void onContactSelected ( android.widget.ImageView photo , android.net.Uri contactUri , long contactId ) { android.provider.ContactsContract.QuickContact.showQuickContact ( this , photo , contactUri , QuickContact.MODE_LARGE , null ) ; }
public int getResourceId ( long index ) { if ( ( index < 0 ) || ( index >= ( mEntryCount ) ) ) { return 0 ; } int idx = ( ( int ) ( index ) ) ; return mChunkContents.getInt ( ( idx * 4 ) ) ; }
public com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult isPossibleNumberForTypeWithReason ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType type ) { java.lang.String nationalNumber = getNationalSignificantNumber ( number ) ; int countryCode = number.getCountryCode ( ) ; if ( ! ( hasValidCountryCallingCode ( countryCode ) ) ) { return com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.INVALID_COUNTRY_CODE ; } java.lang.String regionCode = getRegionCodeForCountryCode ( countryCode ) ; com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = getMetadataForRegionOrCallingCode ( countryCode , regionCode ) ; return testNumberLength ( nationalNumber , metadata , type ) ; }
private java.io.InputStream fetchXmlUrl ( java.lang.String urlString , com.android.sdklib.internal.repository.DownloadCache cache , com.android.sdklib.internal.repository.ITaskMonitor monitor , java.lang.Exception [ ] outException ) { try { java.io.InputStream xml = cache.openCachedUrl ( urlString , monitor ) ; if ( xml != null ) { xml.mark ( 500000 ) ; xml = new com.android.sdklib.io.NonClosingInputStream ( xml ) . setCloseBehavior ( CloseBehavior.RESET ) ; } return xml ; } catch ( java.lang.Exception e ) { if ( outException != null ) { outException [ 0 ] = e ; } } return null ; }
public void developerOptionsEnabled ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; if ( ! ( com.android.devtools.systemimage.uitest.utils.DeveloperOptionsManager.isDeveloperOptionsEnabled ( instrumentation ) ) ) { com.android.devtools.systemimage.uitest.utils.DeveloperOptionsManager.enableDeveloperOptions ( instrumentation ) ; } else { return ; } assertTrue ( "Failed to enable Developer options." , com.android.devtools.systemimage.uitest.utils.DeveloperOptionsManager.isDeveloperOptionsEnabled ( instrumentation ) ) ; }
public void destruction ( java.lang.Thread t ) throws java.io.IOException , java.lang.InterruptedException { com.android.builder.png.AaptProcess aaptProcess = mAaptProcesses.get ( java.lang.Thread.currentThread ( ) . getName ( ) ) ; if ( aaptProcess != null ) { mLogger.verbose ( "Thread(%1$s): notify aapt slave shutdown" , java.lang.Thread.currentThread ( ) . getName ( ) ) ; aaptProcess.shutdown ( ) ; mAaptProcesses.remove ( t.getName ( ) ) ; mLogger.verbose ( "Thread(%1$s): after shutdown queue_size=%2$d" , java.lang.Thread.currentThread ( ) . getName ( ) , mAaptProcesses.size ( ) ) ; } }
public void test_getDisplayName_invalid ( ) throws java.lang.Exception { java.util.Locale invalid = new java.util.Locale ( "AaBbCc" , "DdEeFf" , "GgHhIi" ) ; assertEquals ( "aabbcc" , invalid.getLanguage ( ) ) ; assertEquals ( "DDEEFF" , invalid.getCountry ( ) ) ; assertEquals ( "GgHhIi" , invalid.getVariant ( ) ) ; assertEquals ( "aabbcc" , invalid.getDisplayLanguage ( ) ) ; assertEquals ( "" , invalid.getDisplayCountry ( ) ) ; assertEquals ( "DDEEFF_GGHHII" , invalid.getDisplayVariant ( ) ) ; assertEquals ( "aabbcc (DDEEFF,DDEEFF_GGHHII)" , invalid.getDisplayName ( ) ) ; }
public void destroyAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , long ceDataInode ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.destroyAppData ( uuid , packageName , userId , flags , ceDataInode ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public static com.android.jack.dx.rop.cst.CstFieldRef createFieldRef ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId field , @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface receiverType ) { com.android.jack.dx.rop.type.Type definingClass = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( receiverType ) ; com.android.jack.dx.rop.cst.CstString name = new com.android.jack.dx.rop.cst.CstString ( field.getName ( ) ) ; com.android.jack.dx.rop.cst.CstFieldRef fieldRef = new com.android.jack.dx.rop.cst.CstFieldRef ( definingClass , name , com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( field.getType ( ) ) ) ; return fieldRef ; }
public void testSort_postNougat_delegatesToListSort ( ) { libcore.java.util.CollectionsTest.runOnTargetSdkAtLeast ( 26 , ( ) -> { libcore.java.util.CollectionsTest.ArrayListInheritor < java.lang.String > list = new libcore.java.util.CollectionsTest.ArrayListInheritor < > ( java.util.Arrays.asList ( "a" , "c" , "b" ) ) ; assertEquals ( 0 , list.numSortCalls ( ) ) ; java.util.Collections.sort ( list ) ; assertEquals ( 1 , list.numSortCalls ( ) ) ; } ) ; }
public void testAllFilesInSysAreNotWritable ( ) throws java.lang.Exception { java.util.Set < java.io.File > writable = android.permission.cts.FileSystemPermissionTest.getAllWritableFilesInDirAndSubDir ( new java.io.File ( "/sys" ) ) ; java.util.Set < java.io.File > ignorables = android.permission.cts.FileSystemPermissionTest.getIgnorablesFromPaths ( android.permission.cts.FileSystemPermissionTest.SYS_EXCEPTIONS ) ; writable.removeAll ( ignorables ) ; assertTrue ( ( "Found writable: " + ( writable.toString ( ) ) ) , writable.isEmpty ( ) ) ; }
public void setUp ( ) { org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.when ( mActivity.getSystemService ( Context.MEDIA_ROUTER_SERVICE ) ) . thenReturn ( mMediaRouter ) ; org.mockito.Mockito.when ( mActivity.getPackageManager ( ) ) . thenReturn ( mPackageManager ) ; org.mockito.Mockito.when ( mPackageManager.hasSystemFeature ( PackageManager.FEATURE_WIFI_DIRECT ) ) . thenReturn ( true ) ; mSummaryProvider = WifiDisplaySettings.SUMMARY_PROVIDER_FACTORY.createSummaryProvider ( mActivity , mSummaryLoader ) ; }
public void terminate ( ) { mCallback = null ; if ( mIsPublishSession ) { mWifiAwareNative.stopPublish ( ( ( short ) ( 0 ) ) , mPubSubId ) ; } else { mWifiAwareNative.stopSubscribe ( ( ( short ) ( 0 ) ) , mPubSubId ) ; } }
public void testSingleOutput ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( match , result ) ; }
protected void onDetachedFromWindow ( ) { mPrivateFlags &= ~ ( android.view.View.CANCEL_NEXT_UP_EVENT ) ; removeUnsetPressCallback ( ) ; removeLongPressCallback ( ) ; removePerformClickCallback ( ) ; removeSendViewScrolledAccessibilityEventCallback ( ) ; destroyDrawingCache ( ) ; destroyLayer ( ) ; if ( ( mDisplayList ) != null ) { mDisplayList.invalidate ( ) ; } if ( ( mAttachInfo ) != null ) { mAttachInfo.mHandler.removeMessages ( android.view.View.AttachInfo.INVALIDATE_MSG , this ) ; } mCurrentAnimation = null ; resetResolvedLayoutDirection ( ) ; resetResolvedTextDirection ( ) ; }
public void testMissingDataDirDistroVersionFile ( ) throws java.lang.Exception { createSystemTzDataFileOnHost ( com.android.cts.tzdata.TzDataCheckTest.VALID_RULES_VERSION ) ; com.android.cts.tzdata.TzDataCheckTest.PathPair dataCurrentDir = mDataDir.createSubPath ( com.android.cts.tzdata.TzDataCheckTest.CURRENT_DIR_NAME ) ; com.android.timezone.distro.TimeZoneDistro distroWithoutAVersionFile = com.android.cts.tzdata.TzDataCheckTest.createValidDistroBuilder ( ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; com.android.cts.tzdata.TzDataCheckTest.unpackOnHost ( dataCurrentDir , distroWithoutAVersionFile ) ; pushHostTestDirToDevice ( ) ; assertEquals ( 3 , runTzDataCheckOnDevice ( ) ) ; assertDevicePathDoesNotExist ( dataCurrentDir ) ; }
public void onComplete ( ) { com.android.dialer.blockreportspam.BlockReportSpamDialogs.DialogFragmentForBlockingNumberAndOptionallyReportingAsSpam.newInstance ( displayNumber , com.android.dialer.spam.SpamComponent.get ( this ) . spamSettings ( ) . isDialogReportSpamCheckedByDefault ( ) , new com.android.dialer.blockreportspam.BlockReportSpamDialogs.OnSpamDialogClickListener ( ) { @ java.lang.Override public void onClick ( boolean isSpamChecked ) { blockReportNumberAndFinish ( number , isSpamChecked , contactLookupResultType ) ; } } , dismissListener ) . show ( getFragmentManager ( ) , BlockReportSpamDialogs.BLOCK_REPORT_SPAM_DIALOG_TAG ) ; }
public int arrayBaseOffset ( java.lang.Class clazz ) { java.lang.Class < ? > component = clazz.getComponentType ( ) ; if ( component == null ) { throw new java.lang.IllegalArgumentException ( ( "Valid for array classes only: " + clazz ) ) ; } return sun.misc.Unsafe.getArrayBaseOffsetForComponentType ( component ) ; }
private static boolean overridesIsValidFragment ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaEvaluator evaluator , @ com.android.annotations.NonNull com.intellij.psi.PsiClass resolvedClass ) { for ( com.intellij.psi.PsiMethod method : resolvedClass.findMethodsByName ( com.android.tools.lint.checks.PreferenceActivityDetector.IS_VALID_FRAGMENT , false ) ) { if ( evaluator.parametersMatch ( method , com.android.tools.lint.client.api.JavaParser.TYPE_STRING ) ) { return true ; } } return false ; }
private void registerForSimRecordEvents ( ) { com.android.internal.telephony.uicc.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.registerForNetworkSelectionModeAutomatic ( this , com.android.internal.telephony.gsm.EVENT_SET_NETWORK_AUTOMATIC , null ) ; r.registerForNewSms ( this , com.android.internal.telephony.gsm.EVENT_NEW_ICC_SMS , null ) ; r.registerForRecordsEvents ( this , com.android.internal.telephony.gsm.EVENT_ICC_RECORD_EVENTS , null ) ; r.registerForRecordsLoaded ( this , com.android.internal.telephony.gsm.EVENT_SIM_RECORDS_LOADED , null ) ; }
private void onDataRoamingOff ( ) { if ( com.android.internal.telephony.dataconnection.DcTracker.DBG ) log ( "onDataRoamingOff" ) ; if ( ! ( getDataRoamingEnabled ( ) ) ) { setInitialAttachApn ( ) ; setDataProfilesAsNeeded ( ) ; notifyOffApnsOfAvailability ( Phone.REASON_ROAMING_OFF ) ; setupDataOnConnectableApns ( Phone.REASON_ROAMING_OFF ) ; } else { notifyDataConnection ( Phone.REASON_ROAMING_OFF ) ; } }
public void test_getSystemClassLoader ( ) { java.lang.ClassLoader cl = java.lang.ClassLoader.getSystemClassLoader ( ) ; assertNotNull ( cl ) ; assertNotNull ( cl.getParent ( ) ) ; java.lang.Class < ? > libcoreClass = java.lang.Integer.class ; assertSame ( cl.getParent ( ) , libcoreClass.getClassLoader ( ) ) ; }
static int lessThanBranchFree ( int x , int y ) { return ( ~ ( ~ ( x - y ) ) ) > > > ( ( java.lang.Integer.SIZE ) - 1 ) ; }
protected com.android.tradefed.util.ProcessHelper createProcessHelper ( java.lang.String [ ] cmd ) { assertCommand ( cmd ) ; try { createResult ( cmd [ 3 ] ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } return mProcessHelper ; }
public void createNewSession ( com.intellij.openapi.project.Project project , final org.jetbrains.plugins.terminal.AbstractTerminalRunner terminalRunner ) { final com.intellij.openapi.wm.ToolWindow toolWindow = com.intellij.openapi.wm.ToolWindowManager.getInstance ( project ) . getToolWindow ( "Terminal" ) ; toolWindow.activate ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { openSession ( toolWindow , terminalRunner ) ; } } , true ) ; }
private void onCloseTab ( com.android.browser.Tab tab ) { if ( tab != null ) { if ( tab == ( mUiController.getCurrentTab ( ) ) ) { mUiController.closeCurrentTab ( ) ; } else { mUiController.closeTab ( tab ) ; } mTabViews.remove ( tab ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; tempDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createUniqueDirectory ( null , "tempDir" ) ; testInstallDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createSubDirectory ( tempDir , "testInstall" ) ; testSystemTzDataDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createSubDirectory ( tempDir , "testSystemTzData" ) ; java.io.File testSystemTzDataFile = new java.io.File ( testSystemTzDataDir , "tzdata" ) ; byte [ ] systemTzDataBytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createTzData ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.SYSTEM_RULES_VERSION ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( testSystemTzDataFile , systemTzDataBytes ) ; installer = new libcore.tzdata.update2.TimeZoneDistroInstaller ( "TimeZoneDistroInstallerTest" , testSystemTzDataFile , testInstallDir ) ; }
public com.intellij.updater.ValidationResult validate ( java.io.File toDir ) throws java.io.IOException { java.io.File fromFile = getSource ( toDir ) ; com.intellij.updater.ValidationResult result = doValidateAccess ( fromFile , ValidationResult.Action.UPDATE ) ; if ( result != null ) return result ; if ( ! ( mySource.isEmpty ( ) ) ) { result = doValidateAccess ( getFile ( toDir ) , ValidationResult.Action.UPDATE ) ; if ( result != null ) return result ; } return doValidateNotChanged ( fromFile , ValidationResult.Kind.ERROR , ValidationResult.Action.UPDATE ) ; }
public java.lang.String [ ] getActiveApnTypes ( ) { if ( DBG ) log ( "get all active apn types" ) ; java.util.ArrayList < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( ) ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts.values ( ) ) { if ( ( mAttached.get ( ) ) && ( apnContext.isReady ( ) ) ) { result.add ( apnContext.getApnType ( ) ) ; } } return result.toArray ( new java.lang.String [ 0 ] ) ; }
private void adjustTreeButtons ( org.eclipse.jface.viewers.ISelection selection ) { mRemoveButton.setEnabled ( ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) ) ; mUpButton.setEnabled ( canDoTreeUp ( selection ) ) ; mDownButton.setEnabled ( canDoTreeDown ( selection ) ) ; }
void removeUriPermissionIfNeededLocked ( com.android.server.am.UriPermission perm ) { if ( ( perm.modeFlags ) == 0 ) { final android.util.ArrayMap < com.android.server.am.ActivityManagerService.GrantUri , com.android.server.am.UriPermission > perms = mGrantedUriPermissions.get ( perm.targetUid ) ; if ( perms != null ) { if ( com.android.server.am.ActivityManagerDebugConfig.DEBUG_URI_PERMISSION ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG_URI_PERMISSION , ( ( ( "Removing " + ( perm.targetUid ) ) + " permission to " ) + ( perm.uri ) ) ) ; perms.remove ( perm.uri ) ; if ( perms.isEmpty ( ) ) { mGrantedUriPermissions.remove ( perm.targetUid ) ; } } } }
private void verifyCallAction ( android.content.Intent intent ) { if ( getClass ( ) . getName ( ) . equals ( intent.getComponent ( ) . getClassName ( ) ) ) { if ( ! ( Intent.ACTION_CALL.equals ( intent.getAction ( ) ) ) ) { android.telecom.Log.w ( this , "Attempt to deliver non-CALL action; forcing to CALL" ) ; intent.setAction ( Intent.ACTION_CALL ) ; } } }
public void testGatewayInfo ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } if ( ( mCall.getDetails ( ) . getGatewayInfo ( ) ) != null ) { org.junit.Assert.assertThat ( mCall.getDetails ( ) . getGatewayInfo ( ) , org.hamcrest.CoreMatchers.instanceOf ( android.telecom.GatewayInfo.class ) ) ; } }
public void checkMemberAccess ( java.lang.Class < ? > clazz , int which ) { if ( ( ( which == ( java.lang.reflect.Member.DECLARED ) ) && ( isRelevant ( ) ) ) && ( "com.android.ide.common.rendering.RenderSecurityManager" . equals ( clazz.getName ( ) ) ) ) { throw com.android.ide.common.rendering.RenderSecurityException.create ( "Reflection" , clazz.getName ( ) ) ; } }
public void testForName_DuplicateWithBuiltInCharset ( ) throws java.lang.Exception { libcore.java.nio.charset.SettableCharsetProvider.setDelegate ( new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProviderASCII ( ) ) ; try { assertFalse ( ( ( java.nio.charset.Charset.forName ( "us-ascii" ) ) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset ) ) ; assertFalse ( ( ( java.nio.charset.Charset.availableCharsets ( ) . get ( "us-ascii" ) ) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset ) ) ; } finally { libcore.java.nio.charset.SettableCharsetProvider.clearDelegate ( ) ; } }
public void invokeMethodOnSelectedView ( final java.lang.String method , final java.util.List < java.lang.Object > args ) { final com.android.hierarchyviewerlib.ui.util.DrawableViewNode selectedNode = com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . getSelection ( ) ; if ( selectedNode != null ) { executeInBackground ( "Invoke View Method" , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.android.hierarchyviewerlib.device.IHvDevice hvDevice = getHvDevice ( selectedNode.viewNode.window.getDevice ( ) ) ; hvDevice.invokeViewMethod ( selectedNode.viewNode.window , selectedNode.viewNode , method , args ) ; } } ) ; } }
public void testDensityOnlyWithUniversalMatch ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 3 ) ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 320 , 2 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 480 , 1 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( match , result ) ; }
private int convertId ( @ com.android.annotations.Nullable java.lang.String value ) { if ( ( value != null ) && ( ! ( value.isEmpty ( ) ) ) ) { if ( com.android.sdklib.local.LocalAddonPkgInfo.PATTERN_USB_IDS.matcher ( value ) . matches ( ) ) { java.lang.String v = value.substring ( 2 ) ; try { return java.lang.Integer.parseInt ( v , 16 ) ; } catch ( java.lang.NumberFormatException e ) { } } } return com.android.sdklib.IAndroidTarget.NO_USB_ID ; }
public boolean supportsFeature ( @ com.android.annotations.NonNull com.android.ddmlib.HardwareFeature feature ) { if ( ( mHardwareCharacteristics ) == null ) { try { java.lang.String characteristics = getSystemProperty ( com.android.ddmlib.PROP_BUILD_CHARACTERISTICS ) . get ( ) ; mHardwareCharacteristics = com.google.common.collect.Sets.newHashSet ( com.google.common.base.Splitter.on ( ',' ) . split ( characteristics ) ) ; } catch ( java.lang.Exception e ) { mHardwareCharacteristics = java.util.Collections.emptySet ( ) ; } } return mHardwareCharacteristics.contains ( feature.getCharacteristic ( ) ) ; }
private java.util.List < com.android.jack.dx.ssa.SsaInsn > createInsnList ( @ javax.annotation.Nonnull java.util.List < com.android.jack.dx.ssa.SsaInsn > instructions , @ javax.annotation.Nonnegative int extraSize ) { java.util.List < com.android.jack.dx.ssa.SsaInsn > il = com.google.common.collect.Lists.newArrayListWithCapacity ( ( ( instructions.size ( ) ) + extraSize ) ) ; for ( com.android.jack.dx.ssa.SsaInsn instruction : instructions ) { il.add ( instruction ) ; } return il ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.util.Log.d ( com.android.bluetooth.gatt.ScanManager.TAG , ( "awakened up at time " + ( android.os.SystemClock.elapsedRealtime ( ) ) ) ) ; java.lang.String action = intent.getAction ( ) ; if ( action.equals ( com.android.bluetooth.gatt.ScanManager.ACTION_REFRESH_BATCHED_SCAN ) ) { if ( mBatchClients.isEmpty ( ) ) { return ; } if ( mBatchClients.iterator ( ) . hasNext ( ) ) { flushBatchScanResults ( mBatchClients.iterator ( ) . next ( ) ) ; } } }
public void encode ( org.bouncycastle.crypto.tls.TlsContext context , java.io.OutputStream output ) throws java.io.IOException { org.bouncycastle.crypto.tls.TlsUtils.writeUint8 ( type , output ) ; org.bouncycastle.crypto.tls.TlsUtils.checkUint16 ( payload.length ) ; org.bouncycastle.crypto.tls.TlsUtils.writeUint16 ( payload.length , output ) ; output.write ( payload ) ; byte [ ] padding = new byte [ paddingLength ] ; context.getNonceRandomGenerator ( ) . nextBytes ( padding ) ; output.write ( padding ) ; }
public boolean zoomBy ( float factor ) { mFactory.startYourEngines ( true ) ; checkThread ( ) ; return mAwContents.zoomBy ( factor ) ; }
private com.android.jack.dx.rop.annotation.Annotation createAnnotation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation ) throws com.android.jack.backend.dex.AnnotationBuilder.BuildAnnotationException , com.android.jack.backend.dex.AnnotationBuilder.SourceAnnotationException { com.android.jack.dx.rop.annotation.Annotation ropAnnotation = new com.android.jack.dx.rop.annotation.Annotation ( com.android.jack.backend.dex.rop.RopHelper.getCstType ( annotation.getType ( ) ) , getVisibility ( annotation.getRetentionPolicy ( ) ) ) ; constantBuilder.createAnnotationPairs ( annotation , ropAnnotation ) ; ropAnnotation.setImmutable ( ) ; return ropAnnotation ; }
public void testAesCbcHmacSha256Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public static java.net.NetworkInterface getByName ( java.lang.String name ) throws java.net.SocketException { if ( name == null ) throw new java.lang.NullPointerException ( ) ; java.net.NetworkInterface [ ] nis = java.net.NetworkInterface.getAll ( ) ; for ( java.net.NetworkInterface ni : nis ) { if ( ni.getName ( ) . equals ( name ) ) { return ni ; } } return null ; }
public android.telecom.PhoneAccount getPhoneAccount ( android.telecom.PhoneAccountHandle accountHandle ) { synchronized ( mLock ) { final android.os.UserHandle callingUserHandle = android.os.Binder.getCallingUserHandle ( ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { android.telecom.Log.startSession ( "TSI.gPA" ) ; return mPhoneAccountRegistrar.getPhoneAccount ( accountHandle , callingUserHandle , true ) ; } catch ( java.lang.Exception e ) { android.telecom.Log.e ( this , e , "getPhoneAccount %s" , accountHandle ) ; throw e ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } } }
public static libcore.Lines readLines ( java.io.Reader reader ) throws java.io.IOException { java.util.List < java.lang.String > result = new java.util.ArrayList < > ( ) ; java.io.BufferedReader br = ( reader instanceof java.io.BufferedReader ) ? ( ( java.io.BufferedReader ) ( reader ) ) : new java.io.BufferedReader ( reader ) ; java.lang.String line ; while ( ( line = br.readLine ( ) ) != null ) { result.add ( line ) ; } return new libcore.Lines ( result ) ; }
public void testGeoPhoneNumberMetadataLoadFromMissingFileThrowsException ( ) throws java.lang.Exception { try { com.google.i18n.phonenumbers.SingleFileMetadataSourceImplTest.MISSING_FILE_SOURCE.getMetadataForRegion ( "AE" ) ; fail ( "expected exception" ) ; } catch ( java.lang.RuntimeException e ) { assertTrue ( ( "Unexpected error: " + e ) , e.getMessage ( ) . contains ( "no/such/file" ) ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { try { java.lang.Class < ? > a = java.lang.Class.forName ( "A" ) ; } catch ( java.lang.VerifyError e ) { java.lang.System.out.println ( "passed A" ) ; } try { java.lang.Class < ? > a = java.lang.Class.forName ( "B" ) ; } catch ( java.lang.VerifyError e ) { java.lang.System.out.println ( "passed B" ) ; } }
public static java.lang.String pii ( java.lang.Object pii ) { if ( ( pii == null ) || ( android.telecom.Log.VERBOSE ) ) { return java.lang.String.valueOf ( pii ) ; } return "***" ; }
public void TestArabicLongStyle ( ) { if ( logKnownIssue ( "12181" , "No support for negative numbers in CDF" ) ) { return ; } com.ibm.icu.text.NumberFormat cdf = com.ibm.icu.text.CompactDecimalFormat.getInstance ( com.ibm.icu.util.ULocale.forLanguageTag ( "ar" ) , CompactStyle.LONG ) ; assertEquals ( "Arabic Long" , "‏-٥٫٣ ألف" , cdf.format ( ( - 5300 ) ) ) ; }
private void createState ( ) { int mode ; try { mode = mResources.getInteger ( R.integer.nexus_mode ) ; } catch ( android.content.res.Resources exc ) { mode = 0 ; } mScript.set_gIsPreview ( ( isPreview ( ) ? 1 : 0 ) ) ; mScript.set_gMode ( mode ) ; mScript.set_gXOffset ( 0.0F ) ; mScript.set_gWorldScaleX ( mWorldScaleX ) ; mScript.set_gWorldScaleY ( mWorldScaleY ) ; }
private static java.lang.ref.WeakReference < java.lang.ClassLoader > setUpLoadLibrary ( java.lang.reflect.Constructor constructor ) throws java.lang.Exception { java.lang.ClassLoader loader = ( ( java.lang.ClassLoader ) ( constructor.newInstance ( Main.DEX_FILE , java.lang.ClassLoader.getSystemClassLoader ( ) ) ) ) ; java.lang.Class intHolder = loader.loadClass ( "IntHolder" ) ; java.lang.reflect.Method loadLibrary = intHolder.getDeclaredMethod ( "loadLibrary" , java.lang.String.class ) ; loadLibrary.invoke ( intHolder , Main.nativeLibraryName ) ; Main.waitForCompilation ( intHolder ) ; return new java.lang.ref.WeakReference ( loader ) ; }
public java.util.List < java.lang.String [ ] > getNavbarLinks ( javax.servlet.http.HttpServletRequest request ) { java.util.List < java.lang.String [ ] > links = new java.util.ArrayList < > ( ) ; com.android.vts.servlet.Page root = Page.HOME ; java.lang.String [ ] rootEntry = new java.lang.String [ ] { root.getUrl ( ) , root.getName ( ) } ; links.add ( rootEntry ) ; return links ; }
private static void assertStatsEntry ( android.net.NetworkStats stats , java.lang.String iface , int uid , int set , int tag , long rxBytes , long txBytes ) { final int i = stats.findIndex ( iface , uid , set , tag , android.net.NetworkStats.METERED_NO , android.net.NetworkStats.ROAMING_NO ) ; final android.net.NetworkStats.Entry entry = stats.getValues ( i , null ) ; assertEquals ( "unexpected rxBytes" , rxBytes , entry.rxBytes ) ; assertEquals ( "unexpected txBytes" , txBytes , entry.txBytes ) ; }
public void dumpShowsFailureTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "--- Last failed" ) ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "rdev_connect" ) ) ; }
public void installAppAndLaunch ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; com.android.devtools.systemimage.uitest.utils.AppManager.installApp ( instrumentation , "HelloCompute.apk" ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "RsHelloCompute" ) ; assertTrue ( testFramework.getDevice ( ) . findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( com.android.devtools.systemimage.uitest.smoke.AppTest.APP_IMAGE_VIEW_ID ) ) . exists ( ) ) ; com.android.devtools.systemimage.uitest.utils.AppManager.uninstallApp ( instrumentation , "RsHelloCompute" , null ) ; }
public void setSkins ( @ com.android.annotations.NonNull java.io.File [ ] skins , @ com.android.annotations.NonNull java.io.File defaultSkin ) { mDefaultSkin = defaultSkin ; java.util.HashSet < java.io.File > skinSet = new java.util.HashSet < java.io.File > ( ) ; skinSet.addAll ( java.util.Arrays.asList ( skins ) ) ; skinSet.addAll ( java.util.Arrays.asList ( mBasePlatform.getSkins ( ) ) ) ; mSkins = skinSet.toArray ( new java.io.File [ skinSet.size ( ) ] ) ; java.util.Arrays.sort ( mSkins ) ; }
public void test_limiting_to_1method_and_run_for_SuiteTest_should_throw_exception ( ) { java.lang.Class < ? > target = vogar.target.junit3.SuiteTest.class ; try { vogar.target.Runner runner = new vogar.target.junit.JUnitRunner ( monitor , "" , "testSimple" , target , skipPastReference , testEnvironment , 0 ) ; runner.run ( "" , null , null ) ; fail ( "should throw ClassCastException." ) ; } catch ( java.lang.ClassCastException e ) { } }
public java.lang.String getTestedApplicationId ( ) { if ( mType.isForTesting ( ) ) { com.google.common.base.Preconditions.checkState ( ( ( mTestedConfig ) != null ) ) ; if ( ( mTestedConfig.mType ) == ( com.android.builder.core.VariantConfiguration.Type.LIBRARY ) ) { return getApplicationId ( ) ; } else { return mTestedConfig.getApplicationId ( ) ; } } return null ; }
private void addDexFolder ( @ com.android.annotations.NonNull java.io.File dexFolder ) throws com.android.builder.packaging.DuplicateFileException , com.android.builder.packaging.PackagerException , com.android.builder.packaging.SealedPackageException { java.io.File [ ] files = dexFolder.listFiles ( new java.io.FilenameFilter ( ) { @ java.lang.Override public boolean accept ( java.io.File file , java.lang.String name ) { return name.endsWith ( SdkConstants.DOT_DEX ) ; } } ) ; if ( ( files != null ) && ( ( files.length ) > 0 ) ) { for ( java.io.File file : files ) { addDexFile ( file ) ; } } }
synchronized void recordImplicitRejection ( @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull com.android.manifmerger.XmlElement implicitAttributeOwner ) { java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = getAttributeRecords ( attribute ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = new com.android.manifmerger.Actions.AttributeRecord ( Actions.ActionType.REJECTED , new com.android.manifmerger.Actions.ActionLocation ( implicitAttributeOwner.getDocument ( ) . getSourceLocation ( ) , implicitAttributeOwner.getPosition ( ) ) , attribute.getId ( ) , AttributeOperationType.REPLACE ) ; attributeRecords.add ( attributeRecord ) ; }
private int strength_ICU_Java ( int value ) { int javaValue = value ; switch ( value ) { case libcore.icu.RuleBasedCollatorICU.VALUE_PRIMARY : javaValue = java.text.Collator.PRIMARY ; break ; case libcore.icu.RuleBasedCollatorICU.VALUE_SECONDARY : javaValue = java.text.Collator.SECONDARY ; break ; case libcore.icu.RuleBasedCollatorICU.VALUE_TERTIARY : javaValue = java.text.Collator.TERTIARY ; break ; case libcore.icu.RuleBasedCollatorICU.VALUE_IDENTICAL : javaValue = java.text.Collator.IDENTICAL ; break ; } return javaValue ; }
public static void setThreadPoolSize ( org.gradle.api.Project project ) { java.lang.Integer size = com.android.build.gradle.AndroidGradleOptions.getThreadPoolSize ( project ) ; if ( size == null ) { return ; } com.android.ide.common.internal.ExecutorSingleton.setThreadPoolSize ( size ) ; }
public java.net.Socket createSocket ( java.net.Socket k , java.lang.String host , int port , boolean close ) throws java.io.IOException { com.android.org.conscrypt.OpenSSLSocketImpl s = ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( k , host , port , close ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public static void loop6 ( boolean incoming ) { for ( long i = java.lang.System.nanoTime ( ) ; i < 42 ; ++ i ) { java.lang.System.out.println ( incoming ) ; for ( long j = java.lang.System.currentTimeMillis ( ) ; j != 42 ; ++ j ) { } } }
public void clear ( ) { final java.util.concurrent.ConcurrentHashMap.Segment < K , V > [ ] segments = this . segments ; for ( int j = 0 ; j < ( segments.length ) ; ++ j ) { java.util.concurrent.ConcurrentHashMap.Segment < K , V > s = java.util.concurrent.ConcurrentHashMap.segmentAt ( segments , j ) ; if ( s != null ) s.clear ( ) ; } }
synchronized void onApplicationStateChangedFromNative ( android.bluetooth.BluetoothDevice device , boolean registered ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onApplicationStateChanged(): registered=" + registered ) ) ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_APPLICATION_STATE_CHANGED ) ; msg.obj = device ; msg.arg1 = ( registered ) ? 1 : 0 ; mHandler.sendMessage ( msg ) ; }
public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { if ( event.getSource ( ) . equals ( mSwitchPerspective ) ) { mWhichPerspective.setEnabled ( mSwitchPerspective.getBooleanValue ( ) , getFieldEditorParent ( ) ) ; } else if ( event.getSource ( ) . equals ( mAutoMonitorLogcat ) ) { mAutoMonitorLogcatLevel.setEnabled ( mAutoMonitorLogcat.getBooleanValue ( ) , getFieldEditorParent ( ) ) ; } }
void foo4 ( int [ ] array , int end , boolean expectInterpreter ) { if ( end < 0 ) throw new java.lang.Error ( "" ) ; for ( int i = end ; i > 0 ; i -- ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ ( i - 1 ) ] = 1 ; sum += array [ ( i - 1 ) ] ; } }
public void onStart ( ) { com.android.dialer.common.LogUtil.enterBlock ( "CallLogFragment.onStart" ) ; super . onStart ( ) ; com.android.dialer.oem.CequintCallerIdManager cequintCallerIdManager = null ; if ( com.android.dialer.oem.CequintCallerIdManager.isCequintCallerIdEnabled ( getContext ( ) ) ) { cequintCallerIdManager = com.android.dialer.oem.CequintCallerIdManager.createInstanceForCallLog ( ) ; } mContactInfoCache.setCequintCallerIdManager ( cequintCallerIdManager ) ; }
public void reset ( ) throws java.io.IOException { if ( ( skippingCipher ) == null ) { throw new java.io.IOException ( "cipher must implement SkippingCipher to be used with reset()" ) ; } in.reset ( ) ; skippingCipher.seekTo ( markPosition ) ; if ( ( markBuf ) != null ) { buf = markBuf ; } bufOff = markBufOff ; }
protected void fillPathBuilder ( java.lang.StringBuilder pathBuilder , boolean escapePath ) { if ( isRoot ) { return ; } if ( ( parent ) != null ) { parent.fillPathBuilder ( pathBuilder , escapePath ) ; } pathBuilder.append ( com.android.ddmlib.FileListingService.FILE_SEPARATOR ) ; pathBuilder.append ( ( escapePath ? com.android.ddmlib.FileListingService.FileEntry.escape ( name ) : name ) ) ; }
public void test_firstElement ( ) { assertEquals ( "Returned incorrect firstElement" , "Test 0" , tVector.firstElement ( ) ) ; tVector.insertElementAt ( null , 0 ) ; assertNull ( "Returned incorrect firstElement--wanted null" , tVector.firstElement ( ) ) ; java.util.Vector v = new java.util.Vector ( 10 ) ; try { v.firstElement ( ) ; fail ( "Should throw NoSuchElementException" ) ; } catch ( java.util.NoSuchElementException e ) { } }
private void verifyConnectionStateIntent ( int timeoutMs , android.bluetooth.BluetoothDevice device , int newState , int prevState ) { android.content.Intent intent = com.android.bluetooth.TestUtils.waitForIntent ( timeoutMs , mConnectionStateChangedQueue ) ; org.junit.Assert.assertNotNull ( intent ) ; org.junit.Assert.assertEquals ( BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED , intent.getAction ( ) ) ; org.junit.Assert.assertEquals ( device , intent.getParcelableExtra ( BluetoothDevice.EXTRA_DEVICE ) ) ; org.junit.Assert.assertEquals ( newState , intent.getIntExtra ( BluetoothProfile.EXTRA_STATE , ( - 1 ) ) ) ; org.junit.Assert.assertEquals ( prevState , intent.getIntExtra ( BluetoothProfile.EXTRA_PREVIOUS_STATE , ( - 1 ) ) ) ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > executeAndReturnMultiModel ( java.lang.String ... tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { executeBuild ( java.util.Collections.< java.lang.String > emptyList ( ) , connection , tasks ) ; return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection ) ; } finally { connection.close ( ) ; } }
public void testDisablingSecurityLogging ( ) { mDevicePolicyManager.setSecurityLoggingEnabled ( getWho ( ) , false ) ; assertFalse ( mDevicePolicyManager.isSecurityLoggingEnabled ( getWho ( ) ) ) ; }
protected void syncClirSetting ( ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; int clirSetting = sp.getInt ( com.android.internal.telephony.gsm.CLIR_KEY , ( - 1 ) ) ; if ( clirSetting >= 0 ) { mCi.setCLIR ( clirSetting , null ) ; } }
public boolean onPreferenceClick ( android.support.v7.preference.Preference preference ) { new android.app.AlertDialog.Builder ( getContext ( ) ) . setMessage ( R.string.clear_saved_traces_confirm ) . setPositiveButton ( android.R.string.yes , new android.content.DialogInterface.OnClickListener ( ) { public void onClick ( android.content.DialogInterface dialog , int which ) { com.android.traceur.AtraceUtils.clearSavedTraces ( ) ; } } ) . setNegativeButton ( android.R.string.no , new android.content.DialogInterface.OnClickListener ( ) { public void onClick ( android.content.DialogInterface dialog , int which ) { dialog.dismiss ( ) ; } } ) . create ( ) . show ( ) ; return true ; }
public void testError1 ( ) throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper helper = new com.android.jack.test.helper.IncrementalTestHelper ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ) ; java.io.File source1 = helper.addJavaFile ( "jack.source" , "Source1.java" , ( "package jack.source; \n" + ( "public class Source1 { \n" + "public m(){} }" ) ) ) ; helper.addJavaFile ( "jack.source" , "Source2.java" , ( "package jack.source; \n" + ( "public class Source2 extends Source1 { \n" + "@Override public void m(){} }" ) ) ) ; java.io.File outputDex1 = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; java.util.List < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > excludeList = new java.util.ArrayList < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > ( 3 ) ; excludeList.add ( com.android.jack.test.toolchain.JillBasedToolchain.class ) ; excludeList.add ( com.android.jack.test.toolchain.IncrementalToolchain.class ) ; excludeList.add ( com.android.jack.test.toolchain.TwoStepsToolchain.class ) ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackApiToolchainBase.class , excludeList ) ; java.io.File outputJack = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "output" , toolchain.getLibraryExtension ( ) ) ; java.io.File [ ] defaultClasspath = toolchain.getDefaultBootClasspath ( ) ; toolchain.setIncrementalFolder ( helper.getCompilerStateFolder ( ) ) ; toolchain.setOutputJack ( outputJack , true ) ; toolchain.setErrorStream ( com.google.common.io.ByteStreams.nullOutputStream ( ) ) ; try { toolchain.addToClasspath ( defaultClasspath ) . srcToExe ( outputDex1 , false , helper.getSourceFolder ( ) ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.frontend.FrontendCompilationException e ) { } junit.framework.Assert.assertEquals ( 0 , getCount ( helper.getCompilerStateFolder ( ) , FileType.JAYCE ) ) ; java.lang.Thread.sleep ( 1000 ) ; source1 = helper.addJavaFile ( "jack.source" , "Source1.java" , ( "package jack.source; \n" + ( "public class Source1 { \n" + "public void m(){} }" ) ) ) ; java.io.File outputDex2 = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class , excludeList ) ; toolchain.setIncrementalFolder ( helper.getCompilerStateFolder ( ) ) ; toolchain.setOutputJack ( outputJack , true ) ; toolchain.addToClasspath ( defaultClasspath ) . srcToExe ( outputDex2 , false , helper.getSourceFolder ( ) ) ; junit.framework.Assert.assertEquals ( 2 , getCount ( helper.getCompilerStateFolder ( ) , FileType.JAYCE ) ) ; junit.framework.Assert.assertEquals ( 2 , getCount ( outputJack , FileType.JAYCE ) ) ; }
private static int getTargetApi ( @ com.android.annotations.NonNull com.intellij.psi.PsiClass node ) { while ( node != null ) { int targetApi = com.android.tools.lint.checks.ApiDetector.getTargetApi ( node.getModifierList ( ) ) ; if ( targetApi != ( - 1 ) ) { return targetApi ; } node = com.intellij.psi.util.PsiTreeUtil.getParentOfType ( node , com.intellij.psi.PsiClass.class , true ) ; } return - 1 ; }
public void testLanguageLevelWhenConfigurationIsNotSpecified ( ) throws java.lang.Exception { importProject ( ( "<groupId>test</groupId>" + ( ( ( ( ( ( ( ( ( "<artifactId>project</artifactId>" + "<version>1</version>" ) + "<build>" ) + " <plugins>" ) + " <plugin>" ) + " <groupId>org.apache.maven.plugins</groupId>" ) + " <artifactId>maven-compiler-plugin</artifactId>" ) + " </plugin>" ) + " </plugins>" ) + "</build>" ) ) ) ; assertModules ( "project" ) ; assertEquals ( LanguageLevel.JDK_1_5 , getLanguageLevelForModule ( ) ) ; }
public void untetherAll ( ) { stopTethering ( ConnectivityManager.TETHERING_WIFI ) ; stopTethering ( ConnectivityManager.TETHERING_USB ) ; stopTethering ( ConnectivityManager.TETHERING_BLUETOOTH ) ; }
public com.android.sched.vfs.OutputVFS parseString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) { try { return checkString ( context , string ) ; } catch ( com.android.sched.util.codec.ParsingException e ) { throw new com.android.sched.util.config.ConfigurationError ( e ) ; } }
private int nextListenerKey ( ) { mListenerKey = java.lang.Math.max ( android.net.nsd.NsdManager.FIRST_LISTENER_KEY , ( ( mListenerKey ) + 1 ) ) ; return mListenerKey ; }
public void getDefaultDownloadableSubscriptionList ( android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled ( ) ) ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; return ; } try { android.telephony.euicc.EuiccManager.getIEuiccController ( ) . getDefaultDownloadableSubscriptionList ( mContext.getOpPackageName ( ) , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.testI ( ) ; Main.testB ( ) ; Main.testO ( ) ; Main.testIOB ( ) ; Main.testF ( ) ; Main.testD ( ) ; Main.testL ( ) ; Main.testLL ( ) ; Main.testMore ( 1 , 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 6.0 , 7.0 , 8.0 , 9.0 , 2 , 3 , 4 , 5 , 6 ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { parseIntent ( intent ) ; }
private void toggleRoaming ( android.support.test.uiautomator.UiDevice device ) throws android.support.test.uiautomator.UiObjectNotFoundException { android.support.test.uiautomator.UiObject dataRoamingSwitch = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( "Data roaming" ) ) ; dataRoamingSwitch.clickAndWaitForNewWindow ( ) ; android.support.test.uiautomator.UiObject allowRoaming = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( "OK" ) ) ; if ( allowRoaming.exists ( ) ) { allowRoaming.clickAndWaitForNewWindow ( ) ; } }
public long getPhotoId ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstExtendedCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return 0 ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public void run ( ) { try { com.android.sched.util.file.FileUtils.deleteDir ( dir.getFile ( ) ) ; } catch ( java.io.IOException e ) { throw new com.android.jack.JackIOException ( ( "Failed to delete temporary " + ( dir.getLocation ( ) . getDescription ( ) ) ) , e ) ; } }
public synchronized void reload ( ) { if ( mProjectFolder.exists ( ) ) { com.android.io.IAbstractFile propFile = mProjectFolder.getFile ( mType.mFilename ) ; if ( propFile.exists ( ) ) { java.util.Map < java.lang.String , java.lang.String > map = com.android.sdklib.internal.project.ProjectProperties.parsePropertyFile ( propFile , null ) ; if ( map != null ) { mProperties.clear ( ) ; mProperties.putAll ( map ) ; } } } }
public void testValidateLocalRepositoryFile2 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = this . getClass ( ) . getResourceAsStream ( "/com/android/sdklib/testdata/repository_sample_2.xml" ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( xmlStream ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getRepoValidator ( 2 , handler ) ; validator.validate ( source ) ; handler.verify ( ) ; }
private void killApplication ( java.lang.String pkgName , int appId , int userId , java.lang.String reason ) { final long token = android.os.Binder.clearCallingIdentity ( ) ; try { android.app.IActivityManager am = android.app.ActivityManagerNative.getDefault ( ) ; if ( am != null ) { try { am.killApplication ( pkgName , appId , userId , reason ) ; } catch ( android.os.RemoteException e ) { } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } }
public void requireVersion ( int version ) { if ( ( mVersion ) >= version ) { return ; } mVersion = version ; org.chromium.mojo.bindings.interfacecontrol.RunOrClosePipeMessageParams message = new org.chromium.mojo.bindings.interfacecontrol.RunOrClosePipeMessageParams ( ) ; message.input = new org.chromium.mojo.bindings.interfacecontrol.RunOrClosePipeInput ( ) ; message.input.setRequireVersion ( new org.chromium.mojo.bindings.interfacecontrol.RequireVersion ( ) ) ; message.input.getRequireVersion ( ) . version = version ; org.chromium.mojo.bindings.InterfaceControlMessagesHelper.sendRunOrClosePipeMessage ( getCore ( ) , mMessageReceiver , message ) ; }
public java.lang.Object clone ( ) { android.icu.text.DateIntervalFormat other = ( ( android.icu.text.DateIntervalFormat ) ( super . clone ( ) ) ) ; other.fDateFormat = ( ( android.icu.text.SimpleDateFormat ) ( fDateFormat.clone ( ) ) ) ; other.fInfo = ( ( android.icu.text.DateIntervalInfo ) ( fInfo.clone ( ) ) ) ; other.fFromCalendar = ( ( android.icu.util.Calendar ) ( fFromCalendar.clone ( ) ) ) ; other.fToCalendar = ( ( android.icu.util.Calendar ) ( fToCalendar.clone ( ) ) ) ; other.fDatePattern = fDatePattern ; other.fTimePattern = fTimePattern ; other.fDateTimeFormat = fDateTimeFormat ; return other ; }
public final java.nio.MappedByteBuffer load ( ) { checkIsMapped ( ) ; try { Libcore.os.mlock ( block.toInt ( ) , block.getSize ( ) ) ; Libcore.os.munlock ( block.toInt ( ) , block.getSize ( ) ) ; } catch ( libcore.io.ErrnoException ignored ) { } return this ; }
private void watchdogHandler ( ) { localLog ( "watchdogHandler" ) ; if ( ( mWifiState ) == ( com.android.server.wifi.WifiConnectivityManager.WIFI_STATE_DISCONNECTED ) ) { localLog ( "start a single scan from watchdogHandler" ) ; scheduleWatchdogTimer ( ) ; startSingleScan ( true ) ; } }
public void handleMessage ( android.os.Message msg ) { android.util.Log.i ( com.android.server.cts.device.batterystats.SimpleForegroundService.TAG , "Handling message." ) ; try { java.lang.Thread.sleep ( 2000 ) ; } catch ( java.lang.InterruptedException e ) { java.lang.Thread.currentThread ( ) . interrupt ( ) ; } android.util.Log.i ( com.android.server.cts.device.batterystats.SimpleForegroundService.TAG , "Stopping service." ) ; stopSelf ( msg.arg1 ) ; }
com.android.dx.util.IntList getSuccessors ( ) { com.android.dx.util.IntList successors = new com.android.dx.util.IntList ( callerBlocks.size ( ) ) ; for ( int label = callerBlocks.nextSetBit ( 0 ) ; label >= 0 ; label = callerBlocks.nextSetBit ( ( label + 1 ) ) ) { com.android.dx.rop.code.BasicBlock subCaller = labelToBlock ( label ) ; successors.add ( subCaller.getSuccessors ( ) . get ( 0 ) ) ; } successors.setImmutable ( ) ; return successors ; }
public void onDestroy ( ) { try { if ( ( fileLock ) != null ) { fileLock.release ( ) ; } } catch ( java.io.IOException e ) { android.util.Log.e ( LOG_MESSAGE_TAG , e.getMessage ( ) ) ; } android.content.Intent intent = new android.content.Intent ( ) . setPackage ( "android.libcorefileio.cts" ) . putExtra ( android.cts.LockHoldingService.NOTIFICATION_KEY , android.cts.LockHoldingService.NOTIFICATION_STOP ) . setAction ( android.cts.LockHoldingService.ACTION_TYPE_FOR_INTENT_COMMUNICATION ) ; sendBroadcast ( intent ) ; }
public java.util.Set < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > getInvisibleNodes ( ) { if ( ( mInvisibleParents.size ( ) ) == 0 ) { return java.util.Collections.emptySet ( ) ; } java.util.Set < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > nodes = new java.util.HashSet < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > ( mInvisibleParents.size ( ) ) ; for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo info : mInvisibleParents ) { com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode node = info.getUiViewNode ( ) ; if ( node != null ) { nodes.add ( node ) ; } } return nodes ; }
void enableVerboseLogging ( int verbose ) { if ( verbose > 0 ) { com.android.server.wifi.WifiNative.DBG = true ; } else { com.android.server.wifi.WifiNative.DBG = false ; } if ( ( mWificondControl ) != null ) { mWificondControl.enableVerboseLogging ( ( verbose > 0 ? true : false ) ) ; } }
public void setMiracastMode ( int mode ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { mSupplicantP2pIfaceHal.setMiracastMode ( mode ) ; } else { doBooleanCommand ( ( "DRIVER MIRACAST " + mode ) ) ; } }
public int getWatchedStatus ( com.android.tv.dvr.data.RecordedProgram recordedProgram ) { long watchedPosition = getWatchedPosition ( recordedProgram.getId ( ) ) ; if ( watchedPosition == ( android.media.tv.TvInputManager.TIME_SHIFT_INVALID_TIME ) ) { return com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_STATUS_NEW ; } else if ( watchedPosition > ( ( recordedProgram.getDurationMillis ( ) ) * ( com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_THRESHOLD_RATE ) ) ) { return com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_STATUS_WATCHED ; } else { return com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_STATUS_WATCHING ; } }
public void addU8 ( android.support.v8.renderscript.Short3 v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addU8 ( v ) ; return ; } addU8 ( v.x ) ; addU8 ( v.y ) ; addU8 ( v.z ) ; }
public void writeRilDeactivateDataCall ( int phoneId , int rilSerial , int cid , int reason ) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall ( ) ; deactivateDataCall.cid = cid ; switch ( reason ) { case android.telephony.data.DataService.REQUEST_REASON_NORMAL : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_NONE ; break ; case android.telephony.data.DataService.REQUEST_REASON_SHUTDOWN : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_RADIO_OFF ; break ; case android.telephony.data.DataService.REQUEST_REASON_HANDOVER : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_HANDOVER ; break ; default : deactivateDataCall.reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN ; } addTelephonyEvent ( new com.android.internal.telephony.metrics.TelephonyEventBuilder ( phoneId ) . setDeactivateDataCall ( deactivateDataCall ) . build ( ) ) ; }
public boolean isDeviceManaged ( ) { try { return mService.hasDeviceOwner ( ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } }
public void TestCurrFmtNegSameAsPositive ( ) { android.icu.text.DecimalFormatSymbols decfmtsym = android.icu.text.DecimalFormatSymbols.getInstance ( java.util.Locale.US ) ; decfmtsym.setMinusSign ( '​' ) ; android.icu.text.DecimalFormat decfmt = new android.icu.text.DecimalFormat ( "¤#,##0.00;-¤#,##0.00" , decfmtsym ) ; java.lang.String currFmtResult = decfmt.format ( ( - 100.0 ) ) ; if ( ! ( currFmtResult.equals ( "​$100.00" ) ) ) { errln ( ( "decfmt.toPattern results wrong, expected ​$100.00, got " + currFmtResult ) ) ; } }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , short [ ] data ) { validateIsInt16 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_16 , data.length ) ; }
public java.lang.Number parse ( java.lang.String text , java.text.ParsePosition parsePosition ) { com.ibm.icu.impl.number.Properties pprops = com.ibm.icu.text.DecimalFormat.threadLocalProperties.get ( ) ; synchronized ( this ) { pprops.copyFrom ( properties ) ; } java.lang.Number result = com.ibm.icu.impl.number.Parse.parse ( text , parsePosition , pprops , symbols ) ; if ( result instanceof java.math.BigDecimal ) { result = safeConvertBigDecimal ( ( ( java.math.BigDecimal ) ( result ) ) ) ; } return result ; }
public boolean execute ( @ org.jetbrains.annotations.NotNull org.intellij.plugins.intelliLang.inject.groovy.PsiElement element , int offsetInElement ) { com.intellij.psi.xml.XmlTag tag = org.intellij.plugins.intelliLang.inject.groovy.PsiTreeUtil.getParentOfType ( element , com.intellij.psi.xml.XmlTag.class ) ; java.lang.String className = ( tag == null ) ? null : tag.getAttributeValue ( "className" ) ; if ( ( com.intellij.openapi.util.text.StringUtil.isNotEmpty ( className ) ) && ( tag.getLocalName ( ) . endsWith ( "patternClass" ) ) ) { roots.add ( className ) ; } return true ; }
private boolean addMediaPlayerPackage ( java.lang.String packageName ) { com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo ( null , AvrcpConstants.PLAYER_TYPE_AUDIO , AvrcpConstants.PLAYER_SUBTYPE_NONE , com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED , getFeatureBitMask ( packageName ) , packageName , getAppLabel ( packageName ) ) ; return addMediaPlayerInfo ( info ) ; }
public void testPownF32_2 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 2 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 11329265 , 32 , ( - 16 ) , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n2 ( nAlloc ) ; doF32_2 ( 11329265 , 16 ) ; }
public android.view.View getView ( int position , android.view.View convertView , android.view.ViewGroup parent ) { android.widget.TextView view = ( ( android.widget.TextView ) ( super . getView ( position , convertView , parent ) ) ) ; java.io.File file = getItem ( position ) ; view.setText ( file.getName ( ) ) ; view.setBackgroundResource ( ( com.android.cts.verifier.suid.SuidFilesActivity.WHITELIST.contains ( file.getName ( ) ) ? R.drawable.test_pass_gradient : R.drawable.test_fail_gradient ) ) ; return view ; }
public boolean zoomIn ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return zoomIn ( ) ; } } ) ; return ret ; } return mAwContents.zoomIn ( ) ; }
protected void buildSourceFileList ( ) { mFiles.clear ( ) ; org.eclipse.core.resources.IWorkspaceRoot root = org.eclipse.core.resources.ResourcesPlugin.getWorkspace ( ) . getRoot ( ) ; java.util.List < org.eclipse.core.runtime.IPath > sourceFolderPathList = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getSourceClasspaths ( mJavaProject ) ; for ( org.eclipse.core.runtime.IPath sourceFolderPath : sourceFolderPathList ) { org.eclipse.core.resources.IFolder sourceFolder = root.getFolder ( sourceFolderPath ) ; if ( ( sourceFolder.exists ( ) ) && ( ( sourceFolder.equals ( getGenFolder ( ) ) ) == false ) ) { scanFolderForSourceFiles ( sourceFolder , sourceFolder ) ; } } }
private static java.util.List < com.android.jack.test.runner.RuntimeRunner > parseRuntimeList ( @ javax.annotation.CheckForNull java.lang.String runtimeList ) throws com.android.jack.test.runner.RuntimeRunnerException , java.lang.IllegalArgumentException , java.lang.SecurityException { java.util.List < com.android.jack.test.runner.RuntimeRunner > result = new java.util.ArrayList < com.android.jack.test.runner.RuntimeRunner > ( 0 ) ; if ( runtimeList != null ) { for ( java.lang.String rtName : com.android.jack.test.toolchain.AbstractTestTools.listSplitter.split ( runtimeList ) ) { result.add ( com.android.jack.test.runner.RuntimeRunnerFactory.create ( rtName ) ) ; } } return result ; }
public void addQueryListener ( int token , com.android.internal.telephony.CallerInfoAsyncQuery.OnQueryCompleteListener listener , java.lang.Object cookie ) { if ( com.android.internal.telephony.CallerInfoAsyncQuery.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.CallerInfoAsyncQuery.LOG_TAG , ( ( ( "adding listener to query: " + ( com.android.internal.telephony.CallerInfoAsyncQuery.sanitizeUriToString ( mHandler.mQueryUri ) ) ) + " handler: " ) + ( mHandler.toString ( ) ) ) ) ; com.android.internal.telephony.CallerInfoAsyncQuery.CookieWrapper cw = new com.android.internal.telephony.CallerInfoAsyncQuery.CookieWrapper ( ) ; cw.listener = listener ; cw.cookie = cookie ; cw.event = com.android.internal.telephony.CallerInfoAsyncQuery.EVENT_ADD_LISTENER ; mHandler.startQuery ( token , cw , null , null , null , null , null ) ; }
private void assertLinkAddressesEqual ( android.net.LinkAddress l1 , android.net.LinkAddress l2 ) { org.junit.Assert.assertTrue ( ( ( l1 + " unexpectedly not equal to " ) + l2 ) , l1.equals ( l2 ) ) ; org.junit.Assert.assertTrue ( ( ( l2 + " unexpectedly not equal to " ) + l1 ) , l2.equals ( l1 ) ) ; org.junit.Assert.assertEquals ( l1.hashCode ( ) , l2.hashCode ( ) ) ; }
public static com.android.internal.telephony.gsm.SmsMessage newFromCMT ( java.lang.String [ ] lines ) { try { com.android.internal.telephony.gsm.SmsMessage msg = new com.android.internal.telephony.gsm.SmsMessage ( ) ; msg.parsePdu ( com.android.internal.telephony.IccUtils.hexStringToBytes ( lines [ 1 ] ) ) ; return msg ; } catch ( java.lang.RuntimeException ex ) { android.telephony.Rlog.e ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "SMS PDU parsing failed: " , ex ) ; return null ; } }
public void start ( android.content.Context context , android.os.Looper looper ) { if ( com.android.server.wifi.aware.WifiAwareRttStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.aware.WifiAwareRttStateManager.TAG , "start()" ) ; android.os.IBinder b = android.os.ServiceManager.getService ( Context.WIFI_RTT_SERVICE ) ; android.net.wifi.IRttManager service = IRttManager.Stub.asInterface ( b ) ; if ( service == null ) { android.util.Log.e ( com.android.server.wifi.aware.WifiAwareRttStateManager.TAG , "start(): not able to get WIFI_RTT_SERVICE" ) ; return ; } startWithRttService ( context , looper , service ) ; }
public void removeActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream ) { com.android.server.connectivity.tethering.IPv6TetheringCoordinator.stopIPv6TetheringOn ( downstream ) ; if ( mActiveDownstreams.remove ( findDownstream ( downstream ) ) ) { updateIPv6TetheringInterfaces ( ) ; } if ( mNotifyList.isEmpty ( ) ) { if ( ! ( mActiveDownstreams.isEmpty ( ) ) ) { android.util.Log.wtf ( com.android.server.connectivity.tethering.IPv6TetheringCoordinator.TAG , "Tethering notify list empty, IPv6 downstreams non-empty." ) ; } mNextSubnetId = 0 ; } }
public void onBrEdrDown ( ) { if ( android.bluetooth.BluetoothAdapter.VDBG ) android.util.Log.i ( android.bluetooth.BluetoothAdapter.TAG , ( "onBrEdrDown: " + ( mService ) ) ) ; }
public static long digestRegularFile ( java.io.File file ) throws java.io.IOException { if ( file.isDirectory ( ) ) { return com.intellij.updater.Digester.DIRECTORY ; } java.io.InputStream in = new java.io.BufferedInputStream ( new java.io.FileInputStream ( file ) ) ; try { return com.intellij.updater.Digester.digestStream ( in ) ; } finally { in.close ( ) ; } }
private boolean isDuoCallButtonVisible ( android.view.View videoCallButtonView ) { if ( videoCallButtonView == null ) { return false ; } if ( ( videoCallButtonView.getVisibility ( ) ) != ( android.view.View.VISIBLE ) ) { return false ; } com.android.dialer.app.calllog.IntentProvider intentProvider = ( ( com.android.dialer.app.calllog.IntentProvider ) ( videoCallButtonView.getTag ( ) ) ) ; if ( intentProvider == null ) { return false ; } return com.android.dialer.duo.DuoComponent.get ( activity ) . getDuo ( ) . getIntentType ( intentProvider.getIntent ( activity ) ) . isPresent ( ) ; }
public void log ( com.android.utils.ILogger logger ) { for ( com.android.manifmerger.MergingReport.Record record : mRecords ) { switch ( record.mSeverity ) { case WARNING : logger.warning ( record.mLog ) ; break ; case ERROR : logger.error ( null , record.mLog ) ; break ; case INFO : logger.info ( record.mLog ) ; break ; default : logger.error ( null , ( "Unhandled record type " + ( record.mSeverity ) ) ) ; } } mActionRecorder.log ( logger ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { if ( ( intent.getAction ( ) . equals ( Intents.SMS_CB_RECEIVED_ACTION ) ) || ( intent.getAction ( ) . equals ( Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION ) ) ) { } else { int rc = getResultCode ( ) ; boolean success = ( rc == ( android.app.Activity.RESULT_OK ) ) || ( rc == ( android.provider.Telephony.Sms.Intents.RESULT_SMS_HANDLED ) ) ; acknowledgeLastIncomingSms ( success , rc , null ) ; } }
public void generateComponentLayout ( final com.intellij.uiDesigner.lw.LwComponent lwComponent , final org.jetbrains.org.objectweb.asm.commons.GeneratorAdapter generator , final int componentLocal , final int parentLocal ) { generator.loadLocal ( parentLocal ) ; generator.loadLocal ( componentLocal ) ; generator.push ( ( ( java.lang.String ) ( lwComponent.getCustomLayoutConstraints ( ) ) ) ) ; generator.invokeVirtual ( ourContainerType , ourAddMethod ) ; }
public void writeResponse ( java.io.OutputStream out ) throws java.io.IOException { super . writeResponse ( new java.io.ByteArrayInputStream ( body ) , out ) ; }
public static void wtf ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { java.lang.String msg = android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ; android.util.Slog.wtf ( android.telecom.Log.TAG , msg , new java.lang.IllegalStateException ( msg ) ) ; }
public void showWaitingForDebugger ( android.app.IApplicationThread who , boolean waiting ) { synchronized ( this ) { com.android.server.am.ProcessRecord app = ( who != null ) ? getRecordForAppLocked ( who ) : null ; if ( app == null ) return ; android.os.Message msg = android.os.Message.obtain ( ) ; msg.what = com.android.server.am.ActivityManagerService.WAIT_FOR_DEBUGGER_MSG ; msg.obj = app ; msg.arg1 = ( waiting ) ? 1 : 0 ; mUiHandler.sendMessage ( msg ) ; } }
public void onHold ( ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "onHold " + ( mCurrentCall ) ) ) ; } if ( ! ( mClosed ) ) { mHeadsetProfile.holdCall ( mDevice ) ; } }
public static MergingReport.Result validate ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlDocument xmlDocument ) { com.android.manifmerger.PreValidator.validateManifestAttribute ( mergingReport , xmlDocument.getRootNode ( ) ) ; return com.android.manifmerger.PreValidator.validate ( mergingReport , xmlDocument.getRootNode ( ) ) ; }
private java.lang.StringBuilder appendTo ( java.lang.StringBuilder sb , boolean canonical ) { for ( int i = 0 ; i < ( android.icu.text.DateTimePatternGenerator.TYPE_LIMIT ) ; ++ i ) { appendFieldTo ( i , sb , canonical ) ; } return sb ; }
public void add ( java.lang.String fileName , java.lang.String jarName ) { java.lang.String packageName ; int pos ; if ( ( pos = fileName.lastIndexOf ( "/" ) ) != ( - 1 ) ) { packageName = fileName.substring ( 0 , pos ) ; } else { packageName = fileName ; } addMapping ( packageName , jarName ) ; }
public void setUp ( ) { java.security.Provider [ ] providers = java.security.Security.getProviders ( ) ; for ( java.security.Provider p : providers ) { if ( ! ( p.getName ( ) . startsWith ( "AndroidKeyStore" ) ) ) { this . providers.add ( p ) ; } } }
public void stopStreaming ( java.lang.String serviceId , int reason ) { com.android.phone.testapps.embmsmw.AppActiveStreams.StreamCallbackWithState entry = mStreamStates.get ( serviceId ) ; if ( entry != null ) { if ( ( entry.getState ( ) ) != ( android.telephony.mbms.StreamingService.STATE_STOPPED ) ) { entry.setState ( StreamingService.STATE_STOPPED ) ; entry.getCallback ( ) . onStreamStateUpdated ( StreamingService.STATE_STOPPED , reason ) ; } } }
public void testString_BII ( ) throws java.lang.Exception { byte [ ] bytes = "xa٦bx" . getBytes ( "UTF-8" ) ; assertEquals ( "a٦b" , new java.lang.String ( bytes , 1 , ( ( bytes.length ) - 2 ) ) ) ; }
private static java.util.Calendar parseDate ( java.util.Locale l , java.lang.String fmt , java.lang.String value , java.util.TimeZone tz ) { java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( fmt , l ) ; sdf.setTimeZone ( tz ) ; java.text.ParsePosition pp = new java.text.ParsePosition ( 0 ) ; java.util.Date d = sdf.parse ( value , pp ) ; if ( d == null ) { fail ( pp.toString ( ) ) ; } java.util.Calendar c = java.util.Calendar.getInstance ( tz ) ; c.setTime ( d ) ; return c ; }
public static < I extends org.chromium.mojo.bindings.Interface , P extends org.chromium.mojo.bindings.Interface.Proxy > boolean handleRunOrClosePipe ( org.chromium.mojo.bindings.Interface.Manager < I , P > manager , org.chromium.mojo.bindings.ServiceMessage message ) { org.chromium.mojo.bindings.Message payload = message.getPayload ( ) ; org.chromium.mojo.bindings.RunOrClosePipeMessageParams query = org.chromium.mojo.bindings.RunOrClosePipeMessageParams.deserialize ( payload ) ; return ( query.requireVersion.version ) <= ( manager.getVersion ( ) ) ; }
public static java.lang.invoke.MethodHandle permuteArguments ( java.lang.invoke.MethodHandle target , java.lang.invoke.MethodType newType , int ... reorder ) { reorder = reorder.clone ( ) ; java.lang.invoke.MethodType oldType = target.type ( ) ; java.lang.invoke.MethodHandles.permuteArgumentChecks ( reorder , newType , oldType ) ; return new java.lang.invoke.Transformers.PermuteArguments ( newType , target , reorder ) ; }
public int lengthOfYear ( ) { java.util.Calendar jcal = java.time.chrono.JapaneseChronology.createCalendar ( ) ; jcal.set ( java.util.Calendar.ERA , ( ( era.getValue ( ) ) + ( java.time.chrono.JapaneseEra.ERA_OFFSET ) ) ) ; jcal.set ( yearOfEra , ( ( isoDate.getMonthValue ( ) ) - 1 ) , isoDate.getDayOfMonth ( ) ) ; return jcal.getActualMaximum ( java.util.Calendar.DAY_OF_YEAR ) ; }
private void onPackageDoubleClick ( ) { com.android.sdkuilib.internal.repository.ArchiveInfo ai = getSelectedArchive ( ) ; if ( ai == null ) { return ; } boolean wasAccepted = ai.isAccepted ( ) ; ai.setAccepted ( ( ! wasAccepted ) ) ; ai.setRejected ( wasAccepted ) ; mLicenseAcceptAll = false ; mTableViewPackage.refresh ( ai ) ; displayMissingDependency ( ai ) ; updateLicenceRadios ( ai ) ; }
public void disableIms ( int slotId ) { try { synchronized ( mLock ) { if ( isServiceControllerAvailable ( ) ) { mIImsServiceController.disableIms ( slotId ) ; } } } catch ( android.os.RemoteException e ) { android.util.Log.w ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , ( "Couldn't disable IMS: " + ( e.getMessage ( ) ) ) ) ; } }
public CommandSupplier.Builder inject ( com.android.dialer.commandline.CommandSupplier.Builder builder ) { builder.addCommand ( "help" , help ) ; builder.addCommand ( "version" , version ) ; builder.addCommand ( "echo" , echo ) ; builder.addCommand ( "blocking" , blocking ) ; builder.addCommand ( "call" , callCommand ) ; return builder ; }
public void startOtaIfNecessary ( int slotId , android.service.euicc.IOtaStatusChangedCallback statusChangedCallback ) { mExecutor.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { android.service.euicc.EuiccService.this . onStartOtaIfNecessary ( slotId , new android.service.euicc.EuiccService.OtaStatusChangedCallback ( ) { @ java.lang.Override public void onOtaStatusChanged ( int status ) { try { statusChangedCallback.onOtaStatusChanged ( status ) ; } catch ( android.os.RemoteException e ) { } } } ) ; } } ) ; }
public void copyFrom ( byte [ ] d ) { validateIsInt8 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_8 , d.length ) ; }
public void setUiTTYMode ( int slotId , int featureType , int uiTtyMode , android.os.Message onComplete ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { feature.setUiTTYMode ( uiTtyMode , onComplete ) ; } } }
public void expiredCacheHit ( ) throws java.lang.Exception { com.android.volley.Cache.Entry entry = com.android.volley.utils.CacheTestUtils.makeRandomCacheEntry ( null , true , true ) ; org.mockito.Mockito.when ( mCache.get ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( entry ) ; mDispatcher.processRequest ( mRequest ) ; com.android.volley.CacheDispatcherTest.verifyNoResponse ( mDelivery ) ; org.mockito.Mockito.verify ( mNetworkQueue ) . put ( mRequest ) ; org.junit.Assert.assertSame ( entry , mRequest.getCacheEntry ( ) ) ; }
public void stopKeepaliveResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr == null ) { return ; } if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , null ) ; mRil.processResponseDone ( rr , responseInfo , null ) ; } else { } }
protected android.app.Dialog onCreateDialog ( int id ) { if ( id == ( com.android.settings.ApnEditor.ERROR_DIALOG_ID ) ) { java.lang.String msg = getErrorMsg ( ) ; return new android.app.AlertDialog.Builder ( this ) . setTitle ( R.string.error_title ) . setPositiveButton ( android.R.string.ok , null ) . setMessage ( msg ) . create ( ) ; } return super . onCreateDialog ( id ) ; }
public void disconnectBluetoothAudio ( ) { android.telecom.Log.v ( this , "disconnectBluetoothAudio()..." ) ; if ( ( mBluetoothHeadset ) != null ) { mBluetoothState = com.android.server.telecom.BluetoothManager.BLUETOOTH_DEVICE_CONNECTED ; mBluetoothHeadset.disconnectAudio ( ) ; } else { mBluetoothState = com.android.server.telecom.BluetoothManager.BLUETOOTH_DISCONNECTED ; } mHandler.removeCallbacks ( mBluetoothConnectionTimeout.getRunnableToCancel ( ) ) ; mBluetoothConnectionTimeout.cancel ( ) ; }
public void handle ( @ javax.annotation.Nonnull org.simpleframework.http.Request request , @ javax.annotation.Nonnull org.simpleframework.http.Response response ) { java.lang.String method = request.getMethod ( ) ; com.android.jack.server.router.MethodRouter.logger.log ( java.util.logging.Level.FINE , ( ( "Route request for method '" + method ) + "'" ) ) ; org.simpleframework.http.core.Container container = registry.get ( method ) ; if ( container != null ) { container.handle ( request , response ) ; } else { com.android.jack.server.router.MethodRouter.logger.log ( java.util.logging.Level.INFO , ( ( "Using primary route for method '" + method ) + "'" ) ) ; primary.handle ( request , response ) ; } }
public void readCharacteristic ( int clientIf , java.lang.String address , int handle , int authReq ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.readCharacteristic ( clientIf , address , handle , authReq ) ; }
private void checkCreateActivityInProject ( java.lang.String activityName ) throws java.lang.Exception { com.google.common.base.Stopwatch stopwatch = com.google.common.base.Stopwatch.createUnstarted ( ) ; stopwatch.start ( ) ; java.io.File templateFile = com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandlerTest.findTemplate ( "activities" , activityName ) ; com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandlerTest.sProjectTestedSeparately.add ( templateFile ) ; checkProjectWithActivity ( templateFile.getName ( ) ) ; stopwatch.stop ( ) ; java.lang.System.out.println ( ( ( ( "Checked " + ( templateFile.getName ( ) ) ) + " successfully in " ) + ( stopwatch.toString ( ) ) ) ) ; }
public void onRttCallScreenUiUnready ( ) { com.android.dialer.common.LogUtil.enterBlock ( "RttCallPresenter.onRttCallScreenUiUnready" ) ; com.android.incallui.InCallPresenter.getInstance ( ) . removeListener ( this ) ; stopListenOnRemoteMessage ( ) ; com.android.incallui.call.DialerCall call = com.android.incallui.call.CallList.getInstance ( ) . getActiveCall ( ) ; if ( call != null ) { saveTranscript ( call ) ; } }
public static java.net.InetAddress getLocalHost ( ) throws java.net.UnknownHostException { java.lang.String local = Libcore.os.uname ( ) . nodename ; return java.net.InetAddress.impl.lookupAllHostAddr ( local , java.net.InetAddress.NETID_UNSET ) [ 0 ] ; }
private static void setSymbols ( android.icu.text.DecimalFormatSymbols dfs , java.lang.String [ ] symbols ) { dfs.setCurrencySymbol ( symbols [ 0 ] ) ; dfs.setExponentSeparator ( symbols [ 1 ] ) ; dfs.setInfinity ( symbols [ 2 ] ) ; dfs.setInternationalCurrencySymbol ( symbols [ 3 ] ) ; dfs.setNaN ( symbols [ 4 ] ) ; android.icu.dev.test.serializable.FormatHandler.setCharSymbols ( dfs , symbols [ 5 ] . toCharArray ( ) ) ; }
private void showTranscriptionDonationEnabledPreferences ( ) { donateTranscribedVoicemailPreference.setEnabled ( true ) ; donateTranscribedVoicemailPreference.setChecked ( voicemailClient.isVoicemailDonationEnabled ( getContext ( ) , phoneAccountHandle ) ) ; donateTranscribedVoicemailPreference.setOnPreferenceChangeListener ( this ) ; donateTranscribedVoicemailPreference.setSummary ( getVoicemailTranscriptionDonationInformationalText ( ) ) ; getPreferenceScreen ( ) . addPreference ( donateTranscribedVoicemailPreference ) ; }
public void testNegateMathContextPositive ( ) { java.lang.String a = "92948782094488478231212478987482988429808779810457634781384756794987" ; int aScale = 41 ; int precision = 37 ; java.math.RoundingMode rm = java.math.RoundingMode.FLOOR ; java.math.MathContext mc = new java.math.MathContext ( precision , rm ) ; java.lang.String c = "-929487820944884782312124789.8748298843" ; int cScale = 10 ; java.math.BigDecimal aNumber = new java.math.BigDecimal ( new java.math.BigInteger ( a ) , aScale ) ; java.math.BigDecimal res = aNumber.negate ( mc ) ; assertEquals ( "incorrect value" , c , res.toString ( ) ) ; assertEquals ( "incorrect scale" , cScale , res.scale ( ) ) ; }
private void scan ( java.lang.String [ ] directories , java.lang.String volumeName ) { mWakeLock.acquire ( ) ; try { android.content.ContentValues values = new android.content.ContentValues ( ) ; values.put ( MediaStore.MEDIA_SCANNER_VOLUME , volumeName ) ; android.net.Uri scanUri = getContentResolver ( ) . insert ( android.provider.MediaStore.getMediaScannerUri ( ) , values ) ; android.net.Uri uri = android.net.Uri.parse ( ( "file://" + ( directories [ 0 ] ) ) ) ; sendBroadcast ( new android.content.Intent ( android.content.Intent.ACTION_MEDIA_SCANNER_STARTED , uri ) ) ; if ( volumeName.equals ( MediaProvider.EXTERNAL_VOLUME ) ) { openDatabase ( volumeName ) ; } android.media.MediaScanner scanner = createMediaScanner ( ) ; scanner.scanDirectories ( directories , volumeName ) ; getContentResolver ( ) . delete ( scanUri , null , null ) ; sendBroadcast ( new android.content.Intent ( android.content.Intent.ACTION_MEDIA_SCANNER_FINISHED , uri ) ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.providers.media.MediaScannerService.TAG , "exception in MediaScanner.scan()" , e ) ; } finally { mWakeLock.release ( ) ; } }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedPackage pkg , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findPackage ( pkg ) ; if ( c == null ) { return null ; } java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > annotations = c.getAnnotations ( ) ; if ( annotations != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
private void notifyLimitReached ( java.lang.String limitName , java.lang.String iface ) { invokeForAllObservers ( ( o ) -> o.limitReached ( limitName , iface ) ) ; }
private static java.lang.String sanitizeCodename ( @ com.android.annotations.Nullable java.lang.String codename ) { if ( codename != null ) { codename = codename.trim ( ) ; if ( ( codename.isEmpty ( ) ) || ( SdkConstants.CODENAME_RELEASE.equals ( codename ) ) ) { codename = null ; } } return codename ; }
synchronized void nScriptForEach ( long id , int slot , long ain , long aout , byte [ ] params , boolean mUseInc ) { validate ( ) ; if ( params == null ) { rsnScriptForEach ( mContext , mIncCon , id , slot , ain , aout , mUseInc ) ; } else { rsnScriptForEach ( mContext , mIncCon , id , slot , ain , aout , params , mUseInc ) ; } }
private static boolean isSupportedForWrapping ( java.lang.String algorithm ) { if ( libcore.javax.crypto.CipherTest.isOnlyWrappingAlgorithm ( algorithm ) ) { return true ; } if ( algorithm.equals ( "RSA/ECB/NOPADDING" ) ) { return false ; } if ( algorithm.startsWith ( "AES" ) ) { return false ; } return true ; }
public static org.conscrypt.OpenSSLX509Certificate fromX509PemInputStream ( java.io.InputStream is ) throws org.conscrypt.OpenSSLX509CertificateFactory.ParsingException { @ java.lang.SuppressWarnings ( value = "resource" ) final org.conscrypt.OpenSSLBIOInputStream bis = new org.conscrypt.OpenSSLBIOInputStream ( is ) ; try { final long certCtx = org.conscrypt.NativeCrypto.PEM_read_bio_X509 ( bis.getBioContext ( ) ) ; if ( certCtx == 0L ) { return null ; } return new org.conscrypt.OpenSSLX509Certificate ( certCtx ) ; } catch ( java.lang.Exception e ) { throw new org.conscrypt.OpenSSLX509CertificateFactory.ParsingException ( e ) ; } finally { bis.release ( ) ; } }
protected void dispose ( ) { for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile file : mFiles ) { file.dispose ( ) ; } mFiles.clear ( ) ; }
public void onClose ( ) { if ( com.android.bluetooth.opp.BluetoothOppObexServerSession.V ) android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG , "release WakeLock" ) ; releaseWakeLocks ( ) ; if ( ( mCallback ) != null ) { android.os.Message msg = android.os.Message.obtain ( mCallback ) ; msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE ; msg.obj = mInfo ; msg.sendToTarget ( ) ; } }
private void setupWifiConfigManager ( ) { when ( mWifiConfigManager.getLastSelectedNetwork ( ) ) . thenReturn ( WifiConfiguration.INVALID_NETWORK_ID ) ; }
public void startTdls ( java.lang.String macAddr , boolean enable ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { if ( enable ) { mSupplicantStaIfaceHal.initiateTdlsDiscover ( macAddr ) ; mSupplicantStaIfaceHal.initiateTdlsSetup ( macAddr ) ; } else { mSupplicantStaIfaceHal.initiateTdlsTeardown ( macAddr ) ; } } else { if ( enable ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { doBooleanCommand ( ( "TDLS_DISCOVER " + macAddr ) ) ; doBooleanCommand ( ( "TDLS_SETUP " + macAddr ) ) ; } } else { doBooleanCommand ( ( "TDLS_TEARDOWN " + macAddr ) ) ; } } }
static int formatUnsignedInt ( int val , int shift , char [ ] buf , int offset , int len ) { int charPos = len ; int radix = 1 << shift ; int mask = radix - 1 ; do { buf [ ( offset + ( -- charPos ) ) ] = java.lang.Integer.digits [ ( val & mask ) ] ; val >>>= shift ; } while ( ( val != 0 ) && ( charPos > 0 ) ) ; return charPos ; }
public void error ( java.lang.String tag , java.lang.Throwable throwable ) { java.lang.String message = throwable.getMessage ( ) ; if ( message == null ) { message = throwable.getClass ( ) . getName ( ) ; } java.io.PrintStream ps = new java.io.PrintStream ( com.android.ide.eclipse.adt.AdtPlugin.getErrorStream ( ) ) ; throwable.printStackTrace ( ps ) ; }
private void assertCalendarEquals ( java.util.Calendar calendar , int year , int month , int day , int hour , int minute ) { assertEquals ( "year" , year , calendar.get ( java.util.Calendar.YEAR ) ) ; assertEquals ( "month" , month , calendar.get ( java.util.Calendar.MONTH ) ) ; assertEquals ( "day" , day , calendar.get ( java.util.Calendar.DATE ) ) ; assertEquals ( "hour" , hour , calendar.get ( java.util.Calendar.HOUR_OF_DAY ) ) ; assertEquals ( "minute" , minute , calendar.get ( java.util.Calendar.MINUTE ) ) ; }
public void onClick ( android.view.View v ) { java.lang.String subject = mCallSubjectView.getText ( ) . toString ( ) ; com.android.dialer.precall.PreCall.start ( this , new com.android.dialer.callintent.CallIntentBuilder ( mNumber , CallInitiationType.Type.CALL_SUBJECT_DIALOG ) . setPhoneAccountHandle ( mPhoneAccountHandle ) . setCallSubject ( subject ) ) ; mSubjectHistory.add ( subject ) ; saveSubjectHistory ( mSubjectHistory ) ; finish ( ) ; }
public boolean retainAll ( java.util.Collection < ? > c ) { com.google.common.base.Preconditions.checkNotNull ( c ) ; boolean changed = false ; for ( C columnKey : com.google.common.collect.Lists.newArrayList ( columnKeySet ( ) . iterator ( ) ) ) { if ( ! ( c.contains ( com.google.common.collect.Maps.immutableEntry ( columnKey , column ( columnKey ) ) ) ) ) { removeColumn ( columnKey ) ; changed = true ; } } return changed ; }
public java.lang.String getGradleBuildscript ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( "buildscript {\n" + ( " repositories {\n" + " maven { url '" ) ) + ( getRepoDir ( ) . toString ( ) ) ) + "\' }\n" ) + " }\n" ) + " dependencies {\n" ) + " classpath \"com.android.tools.build:gradle:" ) + ( com.android.build.gradle.integration.common.fixture.GradleTestProject.ANDROID_GRADLE_VERSION ) ) + "\"\n" ) + " classpath \"com.android.tools.build:gradle-experimental:" ) + ( com.android.build.gradle.integration.common.fixture.GradleTestProject.ANDROID_GRADLE_VERSION ) ) + "\"\n" ) + " }\n" ) + "}\n" ; }
protected boolean onLevelChange ( int state ) { setNumLevels ( com.android.settingslib.graph.SignalDrawable.getNumLevels ( state ) ) ; setSignalState ( com.android.settingslib.graph.SignalDrawable.getState ( state ) ) ; int level = com.android.settingslib.graph.SignalDrawable.getLevel ( state ) ; if ( level != ( mLevel ) ) { mLevel = level ; invalidateSelf ( ) ; } return true ; }
public void testKeyStore_GetKey_Certificate_Encrypted_Failure ( ) throws java.lang.Exception { setupPassword ( ) ; mKeyStore.load ( null , null ) ; assertTrue ( mAndroidKeyStore.put ( ( ( Credentials.CA_CERTIFICATE ) + ( android.security.AndroidKeyStoreTest.TEST_ALIAS_1 ) ) , android.security.AndroidKeyStoreTest.FAKE_RSA_CA_1 , KeyStore.UID_SELF , KeyStore.FLAG_ENCRYPTED ) ) ; assertNull ( "Certificate entries should return null" , mKeyStore.getKey ( android.security.AndroidKeyStoreTest.TEST_ALIAS_1 , null ) ) ; }
public static boolean waitFor ( java.util.concurrent.CountDownLatch latch , int timeInSec ) throws java.lang.InterruptedException { long waitTimeRounds = ( java.util.concurrent.TimeUnit.SECONDS.toMillis ( timeInSec ) ) / ( ( android.location.cts.TestUtils.STANDARD_WAIT_TIME_MS ) + ( android.location.cts.TestUtils.STANDARD_SLEEP_TIME_MS ) ) ; for ( int i = 0 ; i < waitTimeRounds ; ++ i ) { java.lang.Thread.sleep ( android.location.cts.TestUtils.STANDARD_SLEEP_TIME_MS ) ; if ( latch.await ( android.location.cts.TestUtils.STANDARD_WAIT_TIME_MS , java.util.concurrent.TimeUnit.MILLISECONDS ) ) { return true ; } } return false ; }
public void widgetDefaultSelected ( org.eclipse.swt.events.SelectionEvent e ) { java.lang.Object selection = ( ( org.eclipse.swt.widgets.TreeItem ) ( e.item ) ) . getData ( ) ; if ( selection instanceof com.android.ddmlib.IDevice ) { com.android.hierarchyviewerlib.ComponentRegistry.getDirector ( ) . loadPixelPerfectData ( ( ( com.android.ddmlib.IDevice ) ( selection ) ) ) ; } else if ( selection instanceof com.android.hierarchyviewerlib.device.Window ) { com.android.hierarchyviewerlib.ComponentRegistry.getDirector ( ) . loadViewTreeData ( ( ( com.android.hierarchyviewerlib.device.Window ) ( selection ) ) ) ; } }
private static boolean saveUnit ( android.icu.text.DecimalFormat.Unit unit , java.lang.String pluralVariant , int idx , java.util.Map < java.lang.String , android.icu.text.DecimalFormat [ ] > units , boolean overwrite ) { android.icu.text.DecimalFormat [ ] byBase = units.get ( pluralVariant ) ; if ( byBase == null ) { byBase = new android.icu.text.DecimalFormat.Unit [ android.icu.text.CompactDecimalDataCache.MAX_DIGITS ] ; units.put ( pluralVariant , byBase ) ; } if ( ( ! overwrite ) && ( ( byBase [ idx ] ) != null ) ) { return false ; } byBase [ idx ] = unit ; return true ; }
public void forEachRemaining ( java.util.function.Consumer < ? super E > action ) { java.util.Objects.requireNonNull ( action ) ; java.lang.Object [ ] elements = snapshot ; for ( int i = index ; i < ( to ) ; i ++ ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E e = ( ( E ) ( elements [ i ] ) ) ; action.accept ( e ) ; } index = to ; }
java.util.List < android.bluetooth.BluetoothDevice > getDevices ( ) { java.util.List < android.bluetooth.BluetoothDevice > devices = new java.util.ArrayList < > ( ) ; synchronized ( mStateMachines ) { for ( com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values ( ) ) { devices.add ( sm.getDevice ( ) ) ; } return devices ; } }
public void schedule ( java.util.TimerTask task , long delay , long period ) { validateScheduling ( task , java.util.Timer.VALID_DATE , delay , period ) ; doSchedule ( task , ( ( java.lang.System.currentTimeMillis ( ) ) + delay ) , period ) ; }
public void copyFrom ( short [ ] d ) { validateIsInt16 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_16 , d.length ) ; }
public void testAesCbcHmacSha1Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , android.net.cts.IpSecManagerTest.getKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public void setZeroDigit ( char zeroDigit ) { this . zeroDigit = zeroDigit ; digitStrings = digitStrings.clone ( ) ; digits = digits.clone ( ) ; digitStrings [ 0 ] = java.lang.String.valueOf ( zeroDigit ) ; digits [ 0 ] = zeroDigit ; for ( int i = 1 ; i < 10 ; i ++ ) { char d = ( ( char ) ( zeroDigit + i ) ) ; digitStrings [ i ] = java.lang.String.valueOf ( d ) ; digits [ i ] = d ; } }
public java.io.File call ( ) { if ( ( scope.getVariantScope ( ) . getDexTask ( ) ) != null ) { return scope.getVariantScope ( ) . getDexOutputFolder ( ) ; } if ( ( scope.getVariantScope ( ) . getJavaCompileTask ( ) ) != null ) { return scope.getVariantScope ( ) . getJavaOutputDir ( ) ; } if ( ( variantData.javaCompileTask ) != null ) { return variantData.javaCompileTask.getDestinationDir ( ) ; } return null ; }
private long getAvailableSpace ( ) { long lowThreshold = getMainLowSpaceThreshold ( ) ; java.io.File dataDir = android.os.Environment.getDataDirectory ( ) ; long usableSpace = dataDir.getUsableSpace ( ) ; return usableSpace - lowThreshold ; }
public void testGetOutputStreamOnGetFails ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; try { connection.getOutputStream ( ) ; org.junit.Assert.fail ( ) ; } catch ( java.net.ProtocolException expected ) { } }
public < T extends com.android.jack.ir.ast.JNode > void accept ( @ javax.annotation.Nonnull java.util.Collection < T > collection ) { for ( T element : collection ) { try { element.traverse ( this ) ; } catch ( java.lang.Throwable e ) { throw com.android.jack.ir.ast.JVisitor.translateException ( element , e ) ; } } }
public void testCompatRevoked22 ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_22 ) , false , false ) ) ; try { runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest22" , "testCompatRevoked_part1" ) ; fail ( "App must be killed on a permission revoke" ) ; } catch ( java.lang.AssertionError expected ) { } runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest22" , "testCompatRevoked_part2" ) ; }
public static void main ( java.lang.String [ ] args ) { Main.testVecSetScalars ( ) ; Main.testVecReplicateScalar ( ) ; if ( ( ( Main.arrayAccess ( ) ) + ( Main.intDiv ( 10 ) ) ) != ( - 35 ) ) { java.lang.System.out.println ( "FAIL" ) ; } }
public static boolean isEnhancedCallBlockingEnabledByPlatform ( android.content.Context context ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( context.getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; android.os.PersistableBundle carrierConfig = configManager.getConfig ( ) ; if ( carrierConfig == null ) { carrierConfig = configManager.getDefaultConfig ( ) ; } return ( carrierConfig.getBoolean ( CarrierConfigManager.KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL ) ) || ( new com.android.server.telecom.SystemSettingsUtil ( ) . isEnhancedCallBlockingEnabled ( context ) ) ; }
public void validateCertPath ( java.security.cert.CertPath path ) { java.util.List < ? extends java.security.cert.Certificate > certificates = path.getCertificates ( ) ; assertEquals ( 2 , certificates.size ( ) ) ; java.security.cert.Certificate endEntityCert = certificates.get ( 0 ) ; assertEquals ( "Certificate must be of X.509 type" , "X.509" , endEntityCert.getType ( ) ) ; java.security.cert.X509Certificate endEntityX509Cert = ( ( java.security.cert.X509Certificate ) ( endEntityCert ) ) ; javax.security.auth.x500.X500Principal endEntityPrincipal = endEntityX509Cert.getSubjectX500Principal ( ) ; javax.security.auth.x500.X500Principal expectedPrincipal = new javax.security.auth.x500.X500Principal ( "emailAddress=test@user" ) ; assertEquals ( expectedPrincipal , endEntityPrincipal ) ; }
public void setUp ( ) throws java.lang.Exception { mMockRunUtil = org.easymock.EasyMock.createMock ( com.android.tradefed.util.IRunUtil.class ) ; mPreparer = new com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer ( ) { @ java.lang.Override com.android.tradefed.util.IRunUtil getRunUtil ( ) { return mMockRunUtil ; } } ; mPreparer.mVenvDir = new java.io.File ( "" ) ; mPreparer.mDepModules.add ( "enum" ) ; }
private void addLocalDefaultLocale ( ) { com.google.gct.testing.dimension.LanguageDimension.Language userLanguage = com.google.gct.testing.dimension.LanguageDimension.getLanguage ( java.lang.System.getProperty ( "user.language" ) ) ; if ( userLanguage != null ) { com.google.gct.testing.dimension.LanguageDimension.Language localDefaultLanguage = new com.google.gct.testing.dimension.LanguageDimension.Language ( userLanguage , true ) ; supportedLanguages.remove ( localDefaultLanguage ) ; supportedLanguages.add ( 0 , localDefaultLanguage ) ; } }
static boolean getBoolean ( @ com.android.annotations.NonNull com.intellij.psi.PsiAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name , boolean defaultValue ) { java.lang.Boolean value = com.android.tools.lint.checks.PermissionRequirement.getAnnotationBooleanValue ( annotation , name ) ; if ( value != null ) { return value ; } return defaultValue ; }
private void updateAll ( boolean forceUpdate ) { if ( ( mTimeShiftManager.isAvailable ( ) ) && ( ! ( mTvView.isScreenBlocked ( ) ) ) ) { setEnabled ( true ) ; initializeTimeline ( ) ; mBackgroundView.setEnabled ( true ) ; setTextIfNeeded ( mBackgroundView , null ) ; } else { setEnabled ( false ) ; mBackgroundView.setEnabled ( false ) ; setTextIfNeeded ( mBackgroundView , mUnavailableMessage ) ; } updateControls ( forceUpdate ) ; }
public boolean setConfiguredNetworkBSSID ( java.lang.String bssid ) { if ( mVerboseLoggingEnabled ) localLog ( ( "setConfiguredNetworkBSSID: " + ( mSupplicantNetworkId ) ) ) ; if ( ! ( mWifiNative.setNetworkVariable ( mSupplicantNetworkId , WifiConfiguration.bssidVarName , bssid ) ) ) { loge ( ( "Set BSSID of network in wpa_supplicant failed on " + ( mSupplicantNetworkId ) ) ) ; return false ; } return true ; }
public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { android.view.accessibility.AccessibilityNodeProvider ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.view.accessibility.AccessibilityNodeProvider > ( ) { @ java.lang.Override public android.view.accessibility.AccessibilityNodeProvider call ( ) { return getAccessibilityNodeProvider ( ) ; } } ) ; return ret ; } return mAwContents.getAccessibilityNodeProvider ( ) ; }
public com.android.server.wifi.WifiNative.RingBufferStatus [ ] getRingBufferStatus ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getRingBufferStatus ( ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getRingBufferStatusNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } } }
private ApkVerifier.Result verify ( java.lang.String apkFilenameInResources , java.lang.Integer minSdkVersionOverride ) throws com.android.apksig.apk.ApkFormatException , java.io.IOException , java.security.NoSuchAlgorithmException { byte [ ] apkBytes = com.android.apksig.internal.util.Resources.toByteArray ( getClass ( ) , apkFilenameInResources ) ; com.android.apksig.ApkVerifier.Builder builder = new com.android.apksig.ApkVerifier.Builder ( com.android.apksig.util.DataSources.asDataSource ( java.nio.ByteBuffer.wrap ( apkBytes ) ) ) ; if ( minSdkVersionOverride != null ) { builder.setMinCheckedPlatformVersion ( minSdkVersionOverride ) ; } return builder.build ( ) . verify ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.String name = java.lang.System.getProperty ( "java.vm.name" ) ; if ( ! ( "Dalvik" . equals ( name ) ) ) { java.lang.System.out.println ( ( "This test is not supported on " + name ) ) ; return ; } Main.testMethodTracing ( ) ; Main.testCountInstances ( ) ; Main.testGetInstances ( ) ; Main.testRuntimeStat ( ) ; Main.testRuntimeStats ( ) ; }
public int hashCode ( ) { int result = mBuildConfigFields.hashCode ( ) ; result = ( 31 * result ) + ( mResValues.hashCode ( ) ) ; result = ( 31 * result ) + ( mProguardFiles.hashCode ( ) ) ; result = ( 31 * result ) + ( mConsumerProguardFiles.hashCode ( ) ) ; result = ( 31 * result ) + ( mManifestPlaceholders.hashCode ( ) ) ; return result ; }
public int getComponentEnabledSetting ( android.content.ComponentName componentName , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ; int uid = android.os.Binder.getCallingUid ( ) ; checkValidCaller ( uid , userId ) ; synchronized ( mPackages ) { return mSettings.getComponentEnabledSettingLPr ( componentName , userId ) ; } }
public void enter ( ) { if ( com.android.bluetooth.pbapclient.PbapClientStateMachine.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_CONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; if ( mUserManager.isUserUnlocked ( ) ) { mConnectionHandler.obtainMessage ( PbapClientConnectionHandler.MSG_DOWNLOAD ) . sendToTarget ( ) ; } }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull final com.android.tools.lint.detector.api.JavaContext context ) { return new com.android.tools.lint.checks.ViewConstructorDetector.ViewConstructorVisitor ( context ) ; }
public void testFailure ( ) throws java.io.IOException { java.io.InputStream is = loadResource ( ) ; try { assertEquals ( '1' , parseAndClose ( is ) ) ; try { assertEquals ( '2' , parse ( is ) ) ; fail ( "Expected: IOException 'stream closed'; Actual: no error." ) ; } catch ( java.io.IOException e ) { assertEquals ( "Stream closed" , e.getMessage ( ) ) ; } } finally { if ( is != null ) { is.close ( ) ; } } }
public void fetchVoicemailStatus ( ) { java.lang.StringBuilder where = new java.lang.StringBuilder ( ) ; java.util.List < java.lang.String > selectionArgs = new java.util.ArrayList < > ( ) ; com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) . appendOmtpVoicemailStatusSelectionClause ( context , where , selectionArgs ) ; if ( com.android.dialer.telecom.TelecomUtil.hasReadWriteVoicemailPermissions ( context ) ) { startQuery ( com.android.dialer.database.CallLogQueryHandler.QUERY_VOICEMAIL_STATUS_TOKEN , null , Status.CONTENT_URI , com.android.dialer.voicemailstatus.VoicemailStatusQuery.getProjection ( ) , where.toString ( ) , selectionArgs.toArray ( new java.lang.String [ selectionArgs.size ( ) ] ) , null ) ; } }
public int getScreenResolution ( ) { long display = sun.awt.X11.XToolkit.getDisplay ( ) ; sun.awt.SunToolkit.awtLock ( ) ; try { long displayWidthMM = sun.awt.X11.XlibWrapper.DisplayWidthMM ( display , sun.awt.X11.XlibWrapper.DefaultScreen ( display ) ) ; if ( displayWidthMM <= 0 ) return sun.awt.X11.XToolkit.DEFAULT_SCREEN_RESOLUTION ; return ( ( int ) ( ( ( sun.awt.X11.XlibWrapper.DisplayWidth ( display , sun.awt.X11.XlibWrapper.DefaultScreen ( display ) ) ) * 25.4 ) / displayWidthMM ) ) ; } finally { sun.awt.SunToolkit.awtUnlock ( ) ; } }
public static int getCodePoint ( char lead , char trail ) { if ( java.lang.Character.isSurrogatePair ( lead , trail ) ) { return java.lang.Character.toCodePoint ( lead , trail ) ; } throw new java.lang.IllegalArgumentException ( "Illegal surrogate characters" ) ; }
public static void setEnabled ( boolean enabled ) { if ( enabled ) org.chromium.base.EarlyTraceEvent.disable ( ) ; if ( ( org.chromium.base.TraceEvent.sEnabled ) != enabled ) { org.chromium.base.TraceEvent.sEnabled = enabled ; if ( org.chromium.base.TraceEvent.sATraceEnabled ) return ; org.chromium.base.ThreadUtils.getUiThreadLooper ( ) . setMessageLogging ( ( enabled ? org.chromium.base.TraceEvent.LooperMonitorHolder.sInstance : null ) ) ; } }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , int [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * 4 ) ) ; }
private static java.lang.String [ ] getDhcpRanges ( android.content.Context ctx ) { final java.lang.String [ ] fromResource = com.android.server.connectivity.tethering.TetheringConfiguration.getResourceStringArray ( ctx , com.android.internal.R.array.config_tether_dhcp_range ) ; if ( ( ( fromResource.length ) > 0 ) && ( ( ( fromResource.length ) % 2 ) == 0 ) ) { return fromResource ; } return com.android.server.connectivity.tethering.TetheringConfiguration.copy ( com.android.server.connectivity.tethering.TetheringConfiguration.DHCP_DEFAULT_RANGE ) ; }
public void testSuccessfulFirstUpdate ( ) throws java.lang.Exception { libcore.tzdata.update2.ConfigBundle tzData = createValidTzDataBundle ( libcore.tzdata.update2.TzDataBundleInstallerTest.NEW_RULES_VERSION ) ; assertTrue ( installer.install ( tzData.getBundleBytes ( ) ) ) ; assertTzDataInstalled ( tzData ) ; }
private com.android.bluetooth.pbapclient.PbapClientService getService ( ) { if ( ! ( com.android.bluetooth.pbapclient.com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "PbapClient call not allowed for non-active user" ) ; return null ; } if ( ( ( mService ) != null ) && ( mService.isAvailable ( ) ) ) { return mService ; } return null ; }
public int getJayceCount ( ) throws com.android.jack.library.LibraryIOException { int size = 0 ; com.android.jack.library.InputJackLibrary compilerStateLib = null ; try { compilerStateLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir ( compilerStateFolder ) ; java.util.Iterator < com.android.sched.vfs.InputVFile > jayceIter = compilerStateLib.iterator ( FileType.JAYCE ) ; while ( jayceIter.hasNext ( ) ) { size ++ ; jayceIter.next ( ) ; } } finally { if ( compilerStateLib != null ) { compilerStateLib.close ( ) ; } } return size ; }
public static void setgroups ( int [ ] gids ) throws android.system.ErrnoException { Libcore.os.setgroups ( gids ) ; }
public void action ( final com.android.ide.common.api.MenuAction action , final java.lang.String valueId , final java.lang.Boolean newValue ) { java.lang.String fullActionId = action.getId ( ) ; boolean isProp = fullActionId.startsWith ( "@prop@" ) ; final java.lang.String actionId = ( isProp ) ? fullActionId.substring ( 6 ) : fullActionId ; final com.android.ide.common.api.INode node = selectedNode ; if ( fullActionId.equals ( "layout_1width" ) ) { final java.lang.String newAttrValue = getValue ( valueId , customWidth ) ; if ( newAttrValue != null ) { node.editXml ( ( "Change attribute " + ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH ) ) , new com.android.ide.common.api.INodeHandler ( ) { public void handle ( com.android.ide.common.api.INode n ) { n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , newAttrValue ) ; } } ) ; } return ; } else if ( fullActionId.equals ( "layout_2height" ) ) { final java.lang.String newAttrValue = getValue ( valueId , customHeight ) ; if ( newAttrValue != null ) { node.editXml ( ( "Change attribute " + ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT ) ) , new com.android.ide.common.api.INodeHandler ( ) { public void handle ( com.android.ide.common.api.INode n ) { n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT , newAttrValue ) ; } } ) ; } return ; } if ( isProp ) { java.util.Map < java.lang.String , com.android.ide.common.layout.BaseViewRule.Prop > props = mAttributesMap.get ( key ) ; final com.android.ide.common.layout.BaseViewRule.Prop prop = ( props != null ) ? props.get ( actionId ) : null ; if ( prop != null ) { node.editXml ( ( "Change attribute " + actionId ) , new com.android.ide.common.api.INodeHandler ( ) { public void handle ( com.android.ide.common.api.INode n ) { if ( prop.isToggle ( ) ) { java.lang.String value = "" ; if ( valueId.equals ( "1t" ) ) { value = ( newValue ) ? "true" : "" ; } else if ( valueId.equals ( "2f" ) ) { value = ( newValue ) ? "false" : "" ; } n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId , value ) ; } else if ( prop.isFlag ( ) ) { java.lang.String values = "" ; if ( ! ( valueId.equals ( "~2clr" ) ) ) { values = n.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId ) ; java.util.Set < java.lang.String > newValues = new java.util.HashSet < java.lang.String > ( ) ; if ( values != null ) { newValues.addAll ( java.util.Arrays.asList ( values.split ( "\\|" ) ) ) ; } if ( newValue ) { newValues.add ( valueId ) ; } else { newValues.remove ( valueId ) ; } values = com.android.ide.common.layout.BaseViewRule.join ( '|' , newValues ) ; } n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId , values ) ; } else { java.lang.String value = "" ; if ( ! ( valueId.equals ( "~2clr" ) ) ) { value = ( newValue ) ? valueId : "" ; } n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId , value ) ; } } } ) ; } } }
static boolean containsValueImpl ( java.util.Map < ? , ? > map , @ javax.annotation.Nullable java.lang.Object value ) { return com.google.common.collect.Iterators.contains ( com.google.common.collect.Maps.valueIterator ( map.entrySet ( ) . iterator ( ) ) , value ) ; }
public void testReadTimeZone_badMagic ( ) throws java.lang.Exception { libcore.tzdata.testing.ZoneInfoTestHelper.ZoneInfoDataBuilder builder = new libcore.tzdata.testing.ZoneInfoTestHelper.ZoneInfoDataBuilder ( ) ; builder.initializeToValid ( ) ; builder.setMagic ( - 559038737 ) ; try { createZoneInfo ( getName ( ) , java.lang.System.currentTimeMillis ( ) , builder.build ( ) ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } }
public void handleDataPathTimeout ( android.net.NetworkSpecifier networkSpecifier ) { if ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.TAG , ( "handleDataPathTimeout: networkSpecifier=" + networkSpecifier ) ) ; com.android.server.wifi.aware.WifiAwareDataPathStateManager.AwareNetworkRequestInformation nnri = mNetworkRequestsCache.remove ( networkSpecifier ) ; if ( nnri == null ) { if ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.DBG ) { android.util.Log.d ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.TAG , ( "handleDataPathTimeout: network request not found for networkSpecifier=" + networkSpecifier ) ) ; } return ; } mMgr.endDataPath ( nnri.ndpId ) ; }
public void executeRequestClosesConnection_invalidResponseCode ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockConnection.getResponseCode ( ) ) . thenReturn ( ( - 1 ) ) ; try { mHurlStack.executeRequest ( new com.android.volley.mock.TestRequest.Get ( ) , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; org.junit.Assert.fail ( "Should have thrown exception" ) ; } catch ( java.io.IOException e ) { org.mockito.Mockito.verify ( mMockConnection ) . disconnect ( ) ; } }
public void onAnimationEnd ( android.view.animation.Animation animation ) { if ( ! ( ( mainActivity.isFinishing ( ) ) || ( mainActivity.isDestroyed ( ) ) ) ) { mainActivity.getFragmentManager ( ) . beginTransaction ( ) . hide ( dialpadFragment ) . commit ( ) ; } }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator get ( @ com.android.annotations.NonNull org.eclipse.ui.IWorkbenchWindow window , boolean create ) { synchronized ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.class ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator coordinator = com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sCoordinators.get ( window ) ; if ( ( coordinator == null ) && create ) { coordinator = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator ( window ) ; org.eclipse.ui.IPartService service = window.getPartService ( ) ; if ( service != null ) { service.addPartListener ( coordinator ) ; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sCoordinators.put ( window , coordinator ) ; } return coordinator ; } }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newSource ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_SOURCES ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; return p ; }
public void testLongHandDependencies ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( "" + ( ( ( "build.gradle:9: Warning: A newer version of com.android.support:support-v4 than 19.0 is available: 21.0.2 [GradleDependency]\n" + " compile group: \'com.android.support\', name: \'support-v4\', version: \'19.0\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( "gradle/DependenciesProps.gradle=>build.gradle" ) ) ; }
public java.lang.String toString ( ) { java.lang.String patternString = com.google.common.base.Objects.toStringHelper ( pattern ) . add ( "pattern" , pattern.pattern ( ) ) . add ( "pattern.flags" , pattern.flags ( ) ) . toString ( ) ; return ( "Predicates.contains(" + patternString ) + ")" ; }
protected void postCreate ( ) { com.android.sdkuilib.internal.tasks.ProgressViewFactory factory = new com.android.sdkuilib.internal.tasks.ProgressViewFactory ( ) ; factory.setProgressView ( new com.android.sdkuilib.internal.tasks.ProgressView ( mStatusText , mProgressBar , null , mUpdaterData.getSdkLog ( ) ) ) ; mUpdaterData.setTaskFactory ( factory ) ; setupSources ( ) ; initializeSettings ( ) ; if ( mUpdaterData.checkIfInitFailed ( ) ) { close ( ) ; return ; } mUpdaterData.broadcastOnSdkLoaded ( ) ; mPackageMananger = new com.android.sdkuilib.internal.repository.PackageLoader ( mUpdaterData ) ; }
void startProfileServices ( ) { debugLog ( "startCoreServices()" ) ; java.lang.Class [ ] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles ( ) ; if ( ( ( supportedProfileServices.length ) == 1 ) && ( com.android.bluetooth.gatt.GattService.class . getSimpleName ( ) . equals ( supportedProfileServices [ 0 ] . getSimpleName ( ) ) ) ) { mAdapterProperties.onBluetoothReady ( ) ; updateUuids ( ) ; setBluetoothClassFromConfig ( ) ; mAdapterStateMachine.sendMessage ( AdapterState.BREDR_STARTED ) ; } else { setAllProfileServiceStates ( supportedProfileServices , BluetoothAdapter.STATE_ON ) ; } }
public static android.hardware.cts.helpers.sensoroperations.TestSensorOperation createFlushOperation ( android.hardware.cts.helpers.TestSensorEnvironment environment , final long duration , final java.util.concurrent.TimeUnit timeUnit ) { return android.hardware.cts.helpers.sensoroperations.TestSensorOperation.createFlushOperation ( environment , new int [ ] { ( ( int ) ( timeUnit.toMillis ( duration ) ) ) } , 0 ) ; }
private synchronized void msgPassThru ( int cmd ) { if ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG ) android.util.Log.d ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , ( "msgPassThru " + cmd ) ) ; if ( ( mA2dpDevice ) == null ) { android.util.Log.w ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , "Already disconnected ignoring." ) ; return ; } mAvrcpCtrlSrvc.sendPassThroughCmd ( mA2dpDevice , cmd , AvrcpControllerService.KEY_STATE_PRESSED ) ; mAvrcpCtrlSrvc.sendPassThroughCmd ( mA2dpDevice , cmd , AvrcpControllerService.KEY_STATE_RELEASED ) ; }
public byte [ ] convert ( ) { try { byte [ ] ret ; ret = convert0 ( ) ; if ( com.android.dx.dex.file.DebugInfoEncoder.DEBUG ) { for ( int i = 0 ; i < ( ret.length ) ; i ++ ) { java.lang.System.err.printf ( "byte %02x\n" , ( 255 & ( ret [ i ] ) ) ) ; } } return ret ; } catch ( java.io.IOException ex ) { throw com.android.dex.util.ExceptionWithContext.withContext ( ex , "...while encoding debug info" ) ; } }
public static java.io.File getDynamicConfigFile ( com.android.tradefed.build.IBuildInfo info , java.lang.String moduleName ) { java.lang.String path = info.getBuildAttributes ( ) . get ( ( ( com.android.compatibility.common.util.DynamicConfigHostSide.CONFIG_PATH_PREFIX ) + moduleName ) ) ; if ( ( path != null ) && ( ! ( path.isEmpty ( ) ) ) ) { return new java.io.File ( path ) ; } return null ; }
public static float distance ( float x , float y , float sx , float sy ) { float dx = x - sx ; float dy = y - sy ; return ( ( float ) ( java.lang.Math.hypot ( dx , dy ) ) ) ; }
public void test_get_RSA_private_params ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.get_RSA_private_params ( org.conscrypt.NativeCryptoTest.NULL_EVP_PKEY ) ; } catch ( java.lang.NullPointerException expected ) { } try { org.conscrypt.NativeCrypto.get_RSA_private_params ( org.conscrypt.NativeCryptoTest.NULL_EVP_PKEY ) ; } catch ( java.lang.NullPointerException expected ) { } final byte [ ] seed = new byte [ 20 ] ; long group = org.conscrypt.NativeCrypto.EC_GROUP_new_by_curve_name ( "prime256v1" ) ; org.conscrypt.NativeRef.EVP_PKEY ctx = new org.conscrypt.NativeRef.EVP_PKEY ( org.conscrypt.NativeCrypto.EC_KEY_generate_key ( group ) ) ; try { org.conscrypt.NativeCrypto.get_RSA_private_params ( ctx ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } }
public java.util.Map < java.lang.String , java.io.File > getDynamicConfigFiles ( ) { java.util.Map < java.lang.String , java.io.File > configMap = new java.util.HashMap < > ( ) ; for ( java.lang.String key : mBuildInfo.getBuildAttributes ( ) . keySet ( ) ) { if ( key.startsWith ( com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper.CONFIG_PATH_PREFIX ) ) { configMap.put ( key.substring ( com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper.CONFIG_PATH_PREFIX.length ( ) ) , new java.io.File ( mBuildInfo.getBuildAttributes ( ) . get ( key ) ) ) ; } } return configMap ; }
public boolean isVisibleOrBehindKeyguardLw ( ) { final com.android.server.WindowManagerService.AppWindowToken atoken = mAppToken ; return ( ( ( ( ( ( mSurface ) != null ) && ( ! ( mAttachedHidden ) ) ) && ( atoken == null ? mPolicyVisibility : ! ( atoken.hiddenRequested ) ) ) && ( ( mOrientationChanging ) || ( ( ! ( mDrawPending ) ) && ( ! ( mCommitDrawPending ) ) ) ) ) && ( ! ( mExiting ) ) ) && ( ! ( mDestroying ) ) ; }
private void onConnectStateChanged ( byte [ ] address , int state , int error , int localRole , int remoteRole ) { if ( com.android.bluetooth.pan.PanService.DBG ) { android.util.Log.d ( com.android.bluetooth.pan.PanService.TAG , ( ( ( ( ( "onConnectStateChanged: " + state ) + ", local role:" ) + localRole ) + ", remoteRole: " ) + remoteRole ) ) ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.pan.PanService.MESSAGE_CONNECT_STATE_CHANGED ) ; msg.obj = new com.android.bluetooth.pan.PanService.ConnectState ( address , state , error , localRole , remoteRole ) ; mHandler.sendMessage ( msg ) ; }
public com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor getBaseViewDescriptor ( ) { if ( ( mBaseViewDescriptor ) == null ) { for ( com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc : mViewDescriptors ) { if ( desc instanceof com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ) { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor viewDesc = ( ( com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ) ( desc ) ) ; if ( SdkConstants.CLASS_VIEW.equals ( viewDesc.getFullClassName ( ) ) ) { mBaseViewDescriptor = viewDesc ; break ; } } } } return mBaseViewDescriptor ; }
public void testResultReportingFastTests ( ) throws java.lang.Exception { mReporter.invocationStarted ( mBuildInfo ) ; mReporter.testRunStarted ( com.android.compatibility.common.tradefed.result.MetadataReporterTest.ID , 3 ) ; runTests ( 0L ) ; java.util.Collection < com.android.compatibility.common.tradefed.result.MetadataReporter.TestMetadata > metadata = mReporter.getTestMetadata ( ) ; assertTrue ( metadata.isEmpty ( ) ) ; mReporter.testRunEnded ( 10 , new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) ; mReporter.invocationEnded ( 10 ) ; }
public void clearAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , long ceDataInode ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.clearAppData ( uuid , packageName , userId , flags , ceDataInode ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void addProviderWithValidSimCredentialWithInvalidIMSI ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; config.homeSp.fqdn = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FQDN ; config.homeSp.friendlyName = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FRIENDLY_NAME ; config.credential = new android.net.wifi.hotspot2.pps.Credential ( ) ; config.credential.realm = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_REALM ; config.credential.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential ( ) ; config.credential.simCredential.imsi = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_IMSI ; config.credential.simCredential.eapType = android.net.wifi.EAPConstants.EAP_SIM ; org.mockito.Mockito.when ( mSimAccessor.getMatchingImsis ( new com.android.server.wifi.IMSIParameter ( com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_IMSI ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertFalse ( mManager.addOrUpdateProvider ( config ) ) ; }
private static boolean isViewDescendantOf ( android.view.View child , android.view.View parent ) { if ( child == parent ) { return true ; } final android.view.ViewParent theParent = child.getParent ( ) ; return ( theParent instanceof android.view.ViewGroup ) && ( android.widget.ScrollView.isViewDescendantOf ( ( ( android.view.View ) ( theParent ) ) , parent ) ) ; }
public void testGetOldCall ( ) throws java.lang.Exception { assertEquals ( "setProgressBarVisibility" , com.android.tools.lint.checks.AppCompatCallDetector.getOldCall ( "Should use setSupportProgressBarVisibility instead of setProgressBarVisibility name" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; assertEquals ( "getActionBar" , com.android.tools.lint.checks.AppCompatCallDetector.getOldCall ( "Should use getSupportActionBar instead of getActionBar name" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; assertNull ( com.android.tools.lint.checks.AppCompatCallDetector.getOldCall ( "No match" , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; assertEquals ( "setProgressBarVisibility" , com.android.tools.lint.checks.AppCompatCallDetector.getOldCall ( "Should use `setSupportProgressBarVisibility` instead of `setProgressBarVisibility` name" , com.android.tools.lint.detector.api.TextFormat.RAW ) ) ; }
public void setBackgroundColor ( final int color ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { org.chromium.base.ThreadUtils.postOnUiThread ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setBackgroundColor ( color ) ; } } ) ; return ; } mAwContents.setBackgroundColor ( color ) ; }
private static java.lang.String getDownloadsDirectory ( android.content.Context appContext ) { android.os.StrictMode.ThreadPolicy oldPolicy = android.os.StrictMode.allowThreadDiskReads ( ) ; java.lang.String downloadsPath ; try { long time = android.os.SystemClock.elapsedRealtime ( ) ; downloadsPath = android.os.Environment.getExternalStoragePublicDirectory ( Environment.DIRECTORY_DOWNLOADS ) . getPath ( ) ; org.chromium.base.metrics.RecordHistogram.recordTimesHistogram ( "Android.StrictMode.DownloadsDir" , ( ( android.os.SystemClock.elapsedRealtime ( ) ) - time ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; } finally { android.os.StrictMode.setThreadPolicy ( oldPolicy ) ; } return downloadsPath ; }
public static void deleteFolder ( final java.io.File folder ) throws java.io.IOException { if ( ! ( folder.exists ( ) ) ) { return ; } java.io.File [ ] files = folder.listFiles ( ) ; if ( files != null ) { for ( final java.io.File file : files ) { com.android.utils.FileUtils.deleteFolder ( file ) ; } } if ( ! ( folder.delete ( ) ) ) { throw new java.io.IOException ( java.lang.String.format ( "Could not delete folder %s" , folder ) ) ; } }
private void checkReceiver ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( ( getExported ( element ) ) && ( isUnprotectedByPermission ( element ) ) ) && ( ! ( isStandardReceiver ( element ) ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_RECEIVER , element , context.getLocation ( element ) , "Exported receiver does not require permission" , null ) ; } }
java.lang.String validateInstrumentationRunner ( java.lang.String instrumentation ) { if ( ! ( mHasRunnerLibrary ) ) { return java.lang.String.format ( LaunchMessages.InstrValidator_NoTestLibMsg_s , AdtConstants.LIBRARY_TEST_RUNNER ) ; } if ( ! ( instrumentation.equals ( SdkConstants.CLASS_INSTRUMENTATION_RUNNER ) ) ) { java.lang.String result = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.testClassForManifest ( mJavaProject , instrumentation , SdkConstants.CLASS_INSTRUMENTATION_RUNNER , true ) ; if ( result != ( com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.TEST_CLASS_OK ) ) { return java.lang.String.format ( LaunchMessages.InstrValidator_WrongRunnerTypeMsg_s , SdkConstants.CLASS_INSTRUMENTATION_RUNNER ) ; } } return com.android.ide.eclipse.adt.internal.launch.junit.InstrumentationRunnerValidator.INSTRUMENTATION_OK ; }
public void testWithExistingUserDirectories ( ) throws java.lang.Exception { dirAdded.mkdirs ( ) ; dirDeleted.mkdirs ( ) ; install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; }
public void cleanCodeCache ( dexfuzz.executors.Architecture architecture , java.lang.String testLocation , java.lang.String programName ) { java.lang.String command = ( ( ( getExecutionPrefixWithAdb ( "shell" ) ) + "rm -f " ) + ( getCacheLocation ( architecture ) ) ) + ( getOatFileName ( testLocation , programName ) ) ; executeCommand ( command , false ) ; }
public java.util.Map < java.lang.String , java.io.File > getDynamicConfigFiles ( ) { java.util.Map < java.lang.String , java.io.File > configMap = new java.util.HashMap < > ( ) ; for ( java.lang.String key : mBuildInfo.getBuildAttributes ( ) . keySet ( ) ) { if ( key.startsWith ( DynamicConfigHostSide.CONFIG_PATH_PREFIX ) ) { configMap.put ( key.substring ( DynamicConfigHostSide.CONFIG_PATH_PREFIX.length ( ) ) , new java.io.File ( mBuildInfo.getBuildAttributes ( ) . get ( key ) ) ) ; } } return configMap ; }
protected void onVoiceCallEnded ( ) { if ( DBG ) log ( "onVoiceCallEnded" ) ; if ( isConnected ( ) ) { if ( ! ( mPhone.getServiceStateTracker ( ) . isConcurrentVoiceAndDataAllowed ( ) ) ) { startNetStatPoll ( ) ; startDataStallAlarm ( com.android.internal.telephony.gsm.GsmDataConnectionTracker.DATA_STALL_NOT_SUSPECTED ) ; notifyDataConnection ( Phone.REASON_VOICE_CALL_ENDED ) ; } else { resetPollStats ( ) ; } } setupDataOnReadyApns ( Phone.REASON_VOICE_CALL_ENDED ) ; }
public void testMultipleIntentFilter_sameKey_noLibraryDeclaration ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application>\n" ) + " <activity android:name=\"activityOne\">\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.VIEW\"/>\n" ) + " <category android:name=\"android.intent.category.DEFAULT\"/>\n" ) + " <category android:name=\"android.intent.category.BROWSABLE\"/>\n" ) + " <data android:scheme=\"myspecialdeeplinkscheme\"/>\n" ) + " <data android:host=\"home\"/>\n" ) + " </intent-filter>\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.VIEW\"/>\n" ) + " <category android:name=\"android.intent.category.DEFAULT\"/>\n" ) + " <category android:name=\"android.intent.category.BROWSABLE\"/>\n" ) + " <data android:scheme=\"https\"/>\n" ) + " <data android:host=\"www.foo.com\"/>\n" ) + " </intent-filter>\n" ) + " </activity>\n" ) + " </application>" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <uses-sdk android:targetSdkVersion=\"3\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlLibraryFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertTrue ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.XmlDocument xmlDocument = mergedDocument.get ( ) ; java.util.List < com.android.manifmerger.XmlElement > allIntentFilters = com.android.manifmerger.XmlDocumentTest.getAllElementsOfType ( xmlDocument , ManifestModel.NodeTypes.INTENT_FILTER ) ; assertEquals ( 2 , allIntentFilters.size ( ) ) ; assertEquals ( allIntentFilters.get ( 0 ) . getId ( ) , allIntentFilters.get ( 1 ) . getId ( ) ) ; }
public void testE2 ( ) { loadAndRun ( "dot.junit.opcodes.aput_object.d.T_aput_object_1" , java.lang.ArrayIndexOutOfBoundsException.class , new java.lang.String [ 2 ] , ( - 1 ) , "abc" ) ; }
public void onDestroy ( ) { if ( com.android.bips.BuiltInPrintService.DEBUG ) android.util.Log.d ( com.android.bips.BuiltInPrintService.TAG , "onDestroy()" ) ; mCapabilitiesCache.close ( ) ; mP2pMonitor.stopAll ( ) ; mBackend.close ( ) ; unlockWifi ( ) ; com.android.bips.BuiltInPrintService.sInstance = null ; mMainHandler.removeCallbacksAndMessages ( null ) ; super . onDestroy ( ) ; }
private static void generateTestManifest ( @ com.android.annotations.NonNull java.lang.String testApplicationId , @ com.android.annotations.Nullable java.lang.String minSdkVersion , @ com.android.annotations.Nullable java.lang.String targetSdkVersion , @ com.android.annotations.NonNull java.lang.String testedApplicationId , @ com.android.annotations.NonNull java.lang.String instrumentationRunner , @ com.android.annotations.NonNull java.lang.Boolean handleProfiling , @ com.android.annotations.NonNull java.lang.Boolean functionalTest , @ com.android.annotations.NonNull java.io.File outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testApplicationId , minSdkVersion , targetSdkVersion , testedApplicationId , instrumentationRunner , handleProfiling , functionalTest ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public static void computeCospi ( android.renderscript.cts.TestCospi.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.cos ( ( ( args.in ) * ( ( float ) ( java.lang.Math.PI ) ) ) ) , 4 , 128 ) ; }
synchronized com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed ( ) ) ; try { return getVDir ( parent , name ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir dir = new com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir ( this , parent , name ) ; parent.putInCache ( name , dir ) ; return dir ; } catch ( com.android.sched.util.file.NotDirectoryException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( getVDirLocation ( parent , name ) ) ; } }
private static com.android.jack.ir.ast.JMethodCall makeMethodCall ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info , @ javax.annotation.CheckForNull com.android.jack.ir.ast.JExpression instance , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface receiverType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod targetMethod ) { com.android.jack.ir.ast.JMethodIdWide methodId = targetMethod.getMethodIdWide ( ) ; assert ( ( methodId.getKind ( ) ) == ( com.android.jack.ir.ast.MethodKind.STATIC ) ) || ( instance != null ) ; com.android.jack.ir.ast.JMethodCall call = new com.android.jack.ir.ast.JMethodCall ( info , instance , receiverType , methodId , targetMethod.getType ( ) , methodId.canBeVirtual ( ) ) ; return call ; }
public static void computeFract ( android.renderscript.cts.TestFract.ArgumentsFloatFloat args ) { float floor = android.renderscript.cts.CoreMathVerifier.floor ( args.inV ) ; args.out = new android.renderscript.cts.Floaty ( java.lang.Math.min ( ( ( args.inV ) - floor ) , 0.99999994F ) , 0 , 1 ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( "access test" ) ; otherpackage.PublicAccess pa = new otherpackage.PublicAccess ( ) ; pa.main ( ) ; java.lang.System.out.println ( Iface.X ) ; java.lang.System.out.println ( Iface2.Y ) ; java.lang.System.out.println ( Iface2.A ) ; java.lang.System.out.println ( Iface2.B ) ; }
public void addMatrix ( android.support.v8.renderscript.Matrix2f v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addMatrix ( v ) ; return ; } for ( int i = 0 ; i < ( v.mMat.length ) ; i ++ ) { addF32 ( v.mMat [ i ] ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; android.os.Bundle bundle = new android.os.Bundle ( ) ; bundle.putLong ( com.android.documentsui.StubProvider.EXTRA_SIZE , 500L ) ; mDocsHelper.configure ( null , bundle ) ; initTestFiles ( ) ; android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( TestNotificationService.ACTION_OPERATION_RESULT ) ; context.registerReceiver ( mReceiver , filter ) ; context.sendBroadcast ( new android.content.Intent ( com.android.documentsui.services.TestNotificationService.ACTION_CHANGE_CANCEL_MODE ) ) ; mOperationExecuted = false ; mErrorReason = "No response from Notification" ; mCountDownLatch = new java.util.concurrent.CountDownLatch ( 1 ) ; }
private com.android.ide.eclipse.gltrace.state.IGLProperty getTextureImageProperty ( com.android.ide.eclipse.gltrace.state.IGLProperty state ) { if ( ( state.getType ( ) ) == ( com.android.ide.eclipse.gltrace.state.GLStateType.TEXTURE_IMAGE ) ) { return state ; } com.android.ide.eclipse.gltrace.state.IGLProperty img = getImageFromPerTextureLevelState ( state ) ; if ( img != null ) { return img ; } return getFirstMipmapImage ( state ) ; }
public static final java.lang.String [ ] getAvailableNames ( ) { com.ibm.icu.charset.CharsetProviderICU.loadAvailableICUCharsets ( ) ; java.lang.String [ ] names = new java.lang.String [ com.ibm.icu.charset.CharsetProviderICU.icuCharsets.size ( ) ] ; int i = 0 ; for ( java.nio.charset.Charset cs : com.ibm.icu.charset.CharsetProviderICU.icuCharsets ) { names [ ( i ++ ) ] = cs.name ( ) ; } return names ; }
public void startVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { for ( com.android.jack.ir.ast.JMethod sameEnclosingTypeMethod : type.getMethods ( ) ) { com.android.jack.ir.ast.JMethodIdWide id = sameEnclosingTypeMethod.getMethodId ( ) . getMethodIdWide ( ) ; if ( ( ! ( id.canBeVirtual ( ) ) ) && ( ! ( com.android.jack.shrob.obfuscation.Renamer.mustBeRenamed ( id ) ) ) ) { if ( com.android.jack.shrob.obfuscation.key.Key.getKey ( id ) . equals ( methodKey ) ) { hasFoundMethodId = true ; return ; } } } visit ( type ) ; visitSuperTypes ( type ) ; visitSubTypes ( type ) ; }
public void mouseScrolled ( org.eclipse.swt.events.MouseEvent e ) { int newZoom = - 1 ; synchronized ( this ) { if ( ( ( image ) != null ) && ( ( crosshairLocation ) != null ) ) { if ( ( e.count ) > 0 ) { newZoom = ( zoom ) + 1 ; } else { newZoom = ( zoom ) - 1 ; } } } if ( newZoom != ( - 1 ) ) { model.setZoom ( newZoom ) ; } }
private boolean isCurrentVolumeController ( int uid ) { if ( ( mAudioManagerInternal ) != null ) { final int vcuid = mAudioManagerInternal.getVolumeControllerUid ( ) ; if ( ( vcuid > 0 ) && ( uid == vcuid ) ) { return true ; } } return false ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.conscrypt.NativeCryptoTest.assertEqualByteArrays ( OCSP_TEST_DATA , org.conscrypt.NativeCrypto.SSL_get_ocsp_response ( ssl ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
private < T > T getOrThrowCause ( java.util.concurrent.Future < T > future , long timeout , java.util.concurrent.TimeUnit timeUnit ) throws java.lang.Exception { try { return future.get ( timeout , timeUnit ) ; } catch ( java.util.concurrent.ExecutionException e ) { if ( ( e.getCause ( ) ) instanceof java.lang.Exception ) { throw ( ( java.lang.Exception ) ( e.getCause ( ) ) ) ; } else { throw e ; } } }
private void grow ( int minCapacity ) { int oldCapacity = buf.length ; int newCapacity = oldCapacity << 1 ; if ( ( newCapacity - minCapacity ) < 0 ) newCapacity = minCapacity ; if ( ( newCapacity - ( java.io.ByteArrayOutputStream.MAX_ARRAY_SIZE ) ) > 0 ) newCapacity = java.io.ByteArrayOutputStream.hugeCapacity ( minCapacity ) ; buf = java.util.Arrays.copyOf ( buf , newCapacity ) ; }
public static boolean isManifestClassAttribute ( @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { java.lang.String name = attribute.getLocalName ( ) ; if ( name == null ) { return false ; } if ( ( ( ( ( name.equals ( com.android.SdkConstants.ATTR_NAME ) ) || ( name.equals ( com.android.xml.AndroidManifest.ATTRIBUTE_TARGET_ACTIVITY ) ) ) || ( name.equals ( com.android.xml.AndroidManifest.ATTRIBUTE_MANAGE_SPACE_ACTIVITY ) ) ) || ( name.equals ( com.android.xml.AndroidManifest.ATTRIBUTE_BACKUP_AGENT ) ) ) || ( name.equals ( com.android.xml.AndroidManifest.ATTRIBUTE_PARENT_ACTIVITY_NAME ) ) ) { return com.android.SdkConstants.ANDROID_URI.equals ( attribute.getNamespaceURI ( ) ) ; } return false ; }
public int syncGetSupportedFeatures ( com.android.internal.util.AsyncChannel channel ) { android.os.Message resultMsg = channel.sendMessageSynchronously ( com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES ) ; int supportedFeatureSet = resultMsg.arg1 ; resultMsg.recycle ( ) ; boolean disableRtt = mPropertyService.getBoolean ( "config.disable_rtt" , false ) ; if ( disableRtt ) { supportedFeatureSet &= ~ ( ( android.net.wifi.WifiManager.WIFI_FEATURE_D2D_RTT ) | ( android.net.wifi.WifiManager.WIFI_FEATURE_D2AP_RTT ) ) ; } return supportedFeatureSet ; }
public void doF32_2_relaxed ( long seed , int ulp ) { baseTestHelper ( android.renderscript.cts.RSBaseCompute.TEST_RELAXED_F32_2 , android.renderscript.Element.F32_2 ( mRS ) , android.renderscript.Element.F32_2 ( mRS ) , seed , 0.0F , 1.0F , 1 , 0 , 2 , 2 , 2 , 0 , ulp ) ; }
static void blowup ( char [ ] [ ] holder ) { try { for ( int i = 0 ; i < ( holder.length ) ; ++ i ) { holder [ i ] = new char [ 128 * 1024 ] ; } } catch ( java.lang.OutOfMemoryError oome ) { Main.ArrayMemEater.sawOome = true ; } }
public void addPages ( ) { if ( mShowWelcomePage ) { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage ( ) ; addPage ( mWelcomePage ) ; } if ( ( mShowUsagePage ) && ( ! ( mStore.hasPingId ( ) ) ) ) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage ( ) ; addPage ( mUsagePage ) ; } }
public void putAll ( java.util.Map < ? , ? > attrib ) { if ( attrib == null ) { throw new java.lang.NullPointerException ( "attrib == null" ) ; } if ( ! ( attrib instanceof java.util.jar.Attributes ) ) { throw new java.lang.ClassCastException ( ( ( attrib.getClass ( ) . getName ( ) ) + " not an Attributes" ) ) ; } this . map.putAll ( attrib ) ; }
public static void tearDownAndCheck ( ) throws java.io.IOException , java.util.zip.DataFormatException { com.android.builder.png.NinePatchAaptProcessorTestUtils.tearDownAndCheck ( com.android.builder.png.NinePatchAsyncAaptProcessTest.mSourceAndCrunchedFiles , com.android.builder.png.NinePatchAsyncAaptProcessTest.getCruncher ( ) , com.android.builder.png.NinePatchAsyncAaptProcessTest.classStartTime ) ; com.android.builder.png.NinePatchAsyncAaptProcessTest.mSourceAndCrunchedFiles = null ; }
public static void v ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.sIsUserExtendedLoggingEnabled ) { android.telecom.Log.maybeDisableLogging ( ) ; android.util.Slog.i ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( prefix , format , args ) ) ; } else if ( android.telecom.Log.VERBOSE ) { android.util.Slog.v ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( prefix , format , args ) ) ; } }
public com.android.tools.lint.detector.api.Location getLocation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node ) { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel model = ( ( org.eclipse.wst.sse.core.internal.provisional.IStructuredModel ) ( context.getProperty ( com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.MODEL_PROPERTY ) ) ) ; return new com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.LazyLocation ( context.file , model.getStructuredDocument ( ) , ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( node ) ) ) ; }
public void disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "disconnect" ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( ) ; if ( service == null ) { return ; } service.disconnect ( device ) ; }
public void test_getLocalSocketAddress_late_bind ( ) throws java.lang.Exception { java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( ( ( java.net.SocketAddress ) ( null ) ) ) ; assertNull ( theSocket.getLocalSocketAddress ( ) ) ; java.net.InetSocketAddress localAddress = new java.net.InetSocketAddress ( java.net.InetAddress.getLocalHost ( ) , 0 ) ; theSocket.bind ( localAddress ) ; assertEquals ( localAddress.getAddress ( ) , theSocket.getLocalAddress ( ) ) ; assertTrue ( ( ( theSocket.getLocalPort ( ) ) > 0 ) ) ; theSocket.close ( ) ; }
private void finishTestActivity ( android.app.Activity activity ) throws java.lang.Throwable { com.android.cts.verifier.TestResult.setPassedResult ( activity ) ; activity.finish ( ) ; mInstrumentation.waitForIdleSync ( ) ; android.content.ContentResolver resolver = mActivity.getContentResolver ( ) ; android.database.Cursor cursor = resolver.query ( TestResultsProvider.RESULTS_ALL_CONTENT_URI , TestResultsProvider.ALL_COLUMNS , null , null , null ) ; assertEquals ( 1 , cursor.getCount ( ) ) ; cursor.close ( ) ; }
public void testInstall_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir ( ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( new java.io.File ( workingDir , "myFile" ) , new byte [ ] { 'a' } ) ; libcore.tzdata.shared2.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.installWithErrorCode ( distro.getBytes ( ) ) ) ; assertDistroInstalled ( distro ) ; }
public static java.lang.String decode ( java.lang.String s , boolean convertPlus , java.nio.charset.Charset charset , boolean throwOnFailure ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( s.length ( ) ) ; libcore.net.UriCodec.appendDecoded ( builder , s , convertPlus , charset , throwOnFailure ) ; return builder.toString ( ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { synchronized ( this ) { mPendingAlarm = null ; alarmFiredNative ( ) ; } }
public void testSetupDriverForClientModeError ( ) { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; android.net.wifi.IWificond wificond = org.mockito.Mockito.mock ( android.net.wifi.IWificond.class ) ; org.mockito.Mockito.when ( wificondControl.setupDriverForClientMode ( ) ) . thenReturn ( null ) ; mWifiNative.setWificondControl ( wificondControl ) ; android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupForClientMode ( ) ; org.junit.Assert.assertEquals ( null , returnedClientInterface ) ; org.mockito.Mockito.verify ( mWifiNative ) . startHal ( org.mockito.Mockito.eq ( true ) ) ; org.mockito.Mockito.verify ( wificondControl ) . setupDriverForClientMode ( ) ; }
public void TestNameMap ( ) { android.icu.text.Transliterator uni2name = android.icu.text.Transliterator.getInstance ( "Any-Name[^abc]" ) ; android.icu.text.Transliterator name2uni = android.icu.text.Transliterator.getInstance ( "Name-Any" ) ; android.icu.dev.test.translit.TransliteratorTest.expect ( uni2name , " abc丁µઁ�\t￿" , "\\N{NO-BREAK SPACE}abc\\N{CJK UNIFIED IDEOGRAPH-4E01}\\N{MICRO SIGN}\\N{GUJARATI SIGN CANDRABINDU}\\N{REPLACEMENT CHARACTER}\\N{<control-0004>}\\N{<control-0009>}\\N{<control-0081>}\\N{<noncharacter-FFFF>}" ) ; android.icu.dev.test.translit.TransliteratorTest.expect ( name2uni , "{\\N { NO-BREAK SPACE}abc\\N{ CJK UNIFIED IDEOGRAPH-4E01 }\\N{x\\N{MICRO SIGN}\\N{GUJARATI SIGN CANDRABINDU}\\N{REPLACEMENT CHARACTER}\\N{<control-0004>}\\N{<control-0009>}\\N{<control-0081>}\\N{<noncharacter-FFFF>}\\N{<control-0004>}\\N{" , "{ abc丁\\N{xµઁ�\t￿\\N{" ) ; android.icu.text.Transliterator t = android.icu.text.Transliterator.getInstance ( "Any-Name;Name-Any" ) ; java.lang.String s = "{ abc丁\\N{xµઁ�\t￿\\N{" ; android.icu.dev.test.translit.TransliteratorTest.expect ( t , s , s ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( mCdmaDbm , mCdmaEcio , mEvdoDbm , mEvdoEcio , mEvdoSnr ) ; }
public boolean processMessage ( android.os.Message message ) { switch ( message.what ) { case com.android.bluetooth.pbap.PbapStateMachine.DISCONNECT : stopObexServerSession ( ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.CREATE_NOTIFICATION : createPbapNotification ( ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.REMOVE_NOTIFICATION : android.content.Intent i = new android.content.Intent ( BluetoothPbapService.USER_CONFIRM_TIMEOUT_ACTION ) ; mService.sendBroadcast ( i ) ; notifyAuthCancelled ( ) ; removePbapNotification ( mNotificationId ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.AUTH_KEY_INPUT : java.lang.String key = ( ( java.lang.String ) ( message.obj ) ) ; notifyAuthKeyInput ( key ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.AUTH_CANCELLED : notifyAuthCancelled ( ) ; break ; } return HANDLED ; }
private static com.android.apksig.internal.jar.ManifestParser.Attribute parseAttr ( java.lang.String attr ) { int delimiterIndex = attr.indexOf ( ": " ) ; if ( delimiterIndex == ( - 1 ) ) { return new com.android.apksig.internal.jar.ManifestParser.Attribute ( attr , "" ) ; } else { return new com.android.apksig.internal.jar.ManifestParser.Attribute ( attr.substring ( 0 , delimiterIndex ) , attr.substring ( ( delimiterIndex + ( ": " . length ( ) ) ) ) ) ; } }
private com.android.jack.dx.rop.code.RegisterSpec getRegisterSpec ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { com.android.jack.dx.rop.code.RegisterSpec regSpec ; if ( expr instanceof com.android.jack.ir.ast.JVariableRef ) { regSpec = ropReg.getRegisterSpec ( ( ( com.android.jack.ir.ast.JVariableRef ) ( expr ) ) ) ; } else { assert expr instanceof com.android.jack.ir.ast.JValueLiteral ; regSpec = ropReg.getOrCreateTmpRegister ( com.android.jack.backend.dex.rop.RopHelper.convertTypeToDxWithoutClosure ( expr.getType ( ) ) ) ; buildConstant ( regSpec , ( ( com.android.jack.ir.ast.JValueLiteral ) ( expr ) ) ) ; } return regSpec ; }
public static com.android.server.NsdService create ( android.content.Context context ) throws java.lang.InterruptedException { com.android.server.NsdService.NsdSettings settings = com.android.server.NsdService.NsdSettings.makeDefault ( context ) ; android.os.HandlerThread thread = new android.os.HandlerThread ( com.android.server.NsdService.TAG ) ; thread.start ( ) ; android.os.Handler handler = new android.os.Handler ( thread.getLooper ( ) ) ; com.android.server.NsdService service = new com.android.server.NsdService ( context , settings , handler , com.android.server.NsdService.DaemonConnection :: new ) ; service.mDaemonCallback.awaitConnection ( ) ; return service ; }
public void unregisterMediaButtonEventReceiver ( android.content.ComponentName eventReceiver ) { if ( eventReceiver == null ) { return ; } android.content.Intent mediaButtonIntent = new android.content.Intent ( android.content.Intent.ACTION_MEDIA_BUTTON ) ; mediaButtonIntent.setComponent ( eventReceiver ) ; android.app.PendingIntent pi = android.app.PendingIntent.getBroadcast ( getContext ( ) , 0 , mediaButtonIntent , 0 ) ; unregisterMediaButtonIntent ( pi ) ; }
public void adjustMasterVolume ( int steps , int flags ) { android.media.IAudioService service = android.media.AudioManager.getService ( ) ; try { service.adjustMasterVolume ( steps , flags , mApplicationContext.getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.media.AudioManager.TAG , "Dead object in adjustMasterVolume" , e ) ; } }
public org.bouncycastle.math.ec.ECPoint normalize ( ) { if ( this . isInfinity ( ) ) { return this ; } switch ( this . getCurveCoordinateSystem ( ) ) { case ECCurve.COORD_AFFINE : case ECCurve.COORD_LAMBDA_AFFINE : { return this ; } default : { org.bouncycastle.math.ec.ECFieldElement Z1 = getZCoord ( 0 ) ; if ( Z1.isOne ( ) ) { return this ; } return normalize ( Z1.invert ( ) ) ; } } }
private static java.lang.String getMajorVersionAsString ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVFS vdir , @ javax.annotation.Nonnull java.util.Properties libraryProperties ) throws com.android.jack.library.LibraryFormatException { try { return com.android.jack.library.JackLibraryFactory.getVersionString ( java.lang.Integer.parseInt ( ( ( java.lang.String ) ( libraryProperties.get ( JackLibrary.KEY_LIB_MAJOR_VERSION ) ) ) ) ) ; } catch ( java.lang.NumberFormatException e ) { com.android.sched.util.location.Location location = vdir.getLocation ( ) ; com.android.jack.library.JackLibraryFactory.logger.log ( java.util.logging.Level.SEVERE , ( ( ( "Failed to parse the property " + ( JackLibrary.KEY_LIB_MAJOR_VERSION ) ) + " from the library " ) + ( location.getDescription ( ) ) ) , e ) ; throw new com.android.jack.library.LibraryFormatException ( location ) ; } }
public void testIssue42798 ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/StringFormat3.java:12: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #3 in method call) [StringFormatMatches]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " context.getString(R.string.gridview_views_count), article.playsCount);\n" + " ~~~~~~~~~~~~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "src/test/pkg/StringFormat3.java:16: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #3 in method call) [StringFormatMatches]\n" ) + " context.getString(R.string.gridview_views_count), \"wrong\");\n" ) + " ~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "src/test/pkg/StringFormat3.java:17: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #2 in method call) [StringFormatMatches]\n" ) + " String s4 = String.format(context.getString(R.string.gridview_views_count), \"wrong\");\n" ) + " ~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "src/test/pkg/StringFormat3.java:22: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #3 in method call) [StringFormatMatches]\n" ) + " context.getString(R.string.gridview_views_count), \"string\");\n" ) + " ~~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "res/values/formatstrings5.xml:3: Warning: Formatting %d followed by words (\"vues\"): This should probably be a plural rather than a string [PluralsCandidate]\n" ) + " <string name=\"gridview_views_count\">%d vues</string>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "4 errors, 1 warnings\n" ) ) , lintProject ( "res/values/formatstrings5.xml" , "src/test/pkg/StringFormat3.java.txt=>src/test/pkg/StringFormat3.java" ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mHasFeature = ( mHasFeature ) && ( hasDeviceFeature ( "android.software.managed_users" ) ) ; if ( mHasFeature ) { removeTestUsers ( ) ; installTestApps ( ) ; mProfileUserId = createManagedProfile ( ) ; installApp ( com.android.cts.devicepolicy.MANAGED_PROFILE_APK ) ; setProfileOwner ( ( ( ( MANAGED_PROFILE_PKG ) + "/" ) + ( ADMIN_RECEIVER_TEST_CLASS ) ) , mProfileUserId ) ; mProfileSerialNumber = getUserSerialNumber ( mProfileUserId ) ; mMainUserSerialNumber = getUserSerialNumber ( 0 ) ; startUser ( mProfileUserId ) ; } }
public void setBrowsed ( java.lang.String packageName , java.lang.String cls ) { mPackageName = packageName ; mClassName = cls ; mFolderItems = null ; mMediaId = null ; mRootFolderUid = null ; mPathStack = new java.util.Stack < java.lang.String > ( ) ; mMediaBrowser = new android.media.browse.MediaBrowser ( mContext , new android.content.ComponentName ( mPackageName , mClassName ) , browseMediaConnectionCallback , null ) ; mMediaBrowser.connect ( ) ; }
public java.util.Iterator < com.android.jack.ir.ast.JDefinedClassOrInterface > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws java.lang.Exception { return com.google.common.collect.Iterators.filter ( new java.util.ArrayList < com.android.jack.ir.ast.JDefinedClassOrInterface > ( session.getTypesToEmit ( ) ) . iterator ( ) , new com.google.common.base.Predicate < com.android.jack.ir.ast.JDefinedClassOrInterface > ( ) { @ java.lang.Override public boolean apply ( com.android.jack.ir.ast.JDefinedClassOrInterface clOrI ) { return ! ( ( clOrI.getLocation ( ) ) instanceof com.android.jack.library.TypeInInputLibraryLocation ) ; } } ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { startUpSync.countDown ( ) ; for ( int i = 0 ; i < ( NUM_STRESS_ITERATIONS ) ; i ++ ) { libcore.javax.net.ssl.SSLEngineTest.assertSendsCorrectly ( "This is the server. Hi!" . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) , pair.server , pair.client , false ) ; } return null ; }
protected org.eclipse.core.resources.IFile getValueFile ( org.eclipse.core.resources.IProject project , java.lang.String name ) throws java.lang.Exception { return getTestDataFile ( project , name , ( ( ( ( ( com.android.sdklib.SdkConstants.FD_RES ) + "/" ) + ( com.android.AndroidConstants.FD_RES_VALUES ) ) + "/" ) + name ) ) ; }
public char [ ] readPassword ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void testShowWhenLockedActivity ( ) throws java.lang.Exception { if ( ( ! ( isHandheld ( ) ) ) || ( isUiModeLockedToVrHeadset ( ) ) ) { return ; } launchActivity ( "ShowWhenLockedActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "ShowWhenLockedActivity" } ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; gotoKeyguard ( ) ; mAmWmState.computeState ( mDevice , null ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; assertShowingAndOccluded ( ) ; pressHomeButton ( ) ; unlockDevice ( ) ; }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.RunnableHooks hooks = context.getRunnableHooks ( ) ; try { java.security.Provider.Service service = messageDigestCodec.checkString ( context , "SHA" ) ; return new com.android.sched.vfs.ReadWriteZipFS ( new com.android.sched.util.file.OutputZipFile ( context.getWorkingDirectory ( ) , string , hooks , existence , change , com.android.sched.util.file.OutputZipFile.Compression.COMPRESSED ) , 1 , 2 , new com.android.sched.util.config.MessageDigestFactory ( service ) , false ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public boolean reset ( ) { try { return ( mBinder.reset ( ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
private void checkOutputDir ( ) throws com.android.jill.IllegalOptionsException { assert ( output ) != null ; java.io.File output = getOutput ( ) ; if ( ! ( output.exists ( ) ) ) { throw new com.android.jill.IllegalOptionsException ( ( ( output.getName ( ) ) + " does not exist." ) ) ; } if ( ( ! ( output.canRead ( ) ) ) || ( ! ( output.canWrite ( ) ) ) ) { throw new com.android.jill.IllegalOptionsException ( ( ( "The specified output folder '" + ( output.getAbsolutePath ( ) ) ) + "' for jack files cannot be written to or read from." ) ) ; } }
public boolean retainAll ( java.util.Collection < ? > collection ) { synchronized ( this ) { slice.checkConcurrentModification ( elements ) ; int removed = removeOrRetain ( collection , true , slice.from , slice.to ) ; slice = new java.util.concurrent.CopyOnWriteArrayList.Slice ( elements , slice.from , ( ( slice.to ) - removed ) ) ; return removed != 0 ; } }
private void updateBrandingText ( com.android.dialer.voicemail.model.VoicemailEntry voicemailEntry ) { if ( ( ( voicemailEntry.getTranscriptionState ( ) ) == ( com.android.dialer.compat.android.provider.VoicemailCompat.TRANSCRIPTION_AVAILABLE ) ) && ( ! ( android.text.TextUtils.isEmpty ( voicemailEntry.getTranscription ( ) ) ) ) ) { transcriptionBrandingTextView.setVisibility ( android.view.View.VISIBLE ) ; } else { transcriptionBrandingTextView.setVisibility ( android.view.View.GONE ) ; } }
public static com.intellij.psi.search.GlobalSearchScope addNonClasspathScope ( com.intellij.openapi.project.Project project , com.intellij.psi.search.GlobalSearchScope base ) { com.intellij.psi.search.GlobalSearchScope scope = base ; for ( com.intellij.psi.PsiElementFinder finder : com.intellij.openapi.extensions.Extensions.getExtensions ( com.intellij.psi.EP_NAME , project ) ) { if ( finder instanceof com.intellij.psi.NonClasspathClassFinder ) { scope = scope.uniteWith ( com.intellij.psi.search.NonClasspathDirectoriesScope.compose ( ( ( com.intellij.psi.NonClasspathClassFinder ) ( finder ) ) . getClassRoots ( ) ) ) ; } } return scope ; }
public float getYDpi ( ) { if ( ( mState.device ) != null ) { com.android.sdklib.devices.State currState = mState.device.getState ( mState.stateName ) ; if ( currState == null ) { currState = mState.device.getDefaultState ( ) ; } float dpi = ( ( float ) ( currState.getHardware ( ) . getScreen ( ) . getYdpi ( ) ) ) ; if ( ( java.lang.Float.isNaN ( dpi ) ) == false ) { return dpi ; } } return getDensity ( ) . getDpiValue ( ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object object ) { return multimap.containsValue ( object ) ; }
public void testGroupingSizeZero ( ) { java.util.Locale localeWithoutGrouping = new java.util.Locale ( "en" , "US" , "POSIX" ) ; java.text.DecimalFormat decimalFormat = ( ( java.text.DecimalFormat ) ( java.text.NumberFormat.getInstance ( localeWithoutGrouping ) ) ) ; assertEquals ( 0 , decimalFormat.getGroupingSize ( ) ) ; assertFalse ( decimalFormat.isGroupingUsed ( ) ) ; java.text.DecimalFormatSymbols symbols = decimalFormat.getDecimalFormatSymbols ( ) ; assertTrue ( ( ( symbols.getGroupingSeparator ( ) ) != ' ' ) ) ; java.util.Formatter formatter = new java.util.Formatter ( localeWithoutGrouping ) ; formatter.format ( "%,d" , 123456789 ) ; }
final void putUnchecked ( int pos , long [ ] src , int srcOffset , int length ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } libcore.io.Memory.pokeLongArray ( ix ( pos ) , src , srcOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public void onLoadFinished ( android.support.v4.content.Loader < android.database.Cursor > loader , android.database.Cursor data ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailFragment.onCreateLoader" , "cursor size is %d" , data.getCount ( ) ) ; recyclerView.setLayoutManager ( new android.support.v7.widget.LinearLayoutManager ( getContext ( ) ) ) ; recyclerView.setAdapter ( new com.android.dialer.voicemail.listui.NewVoicemailAdapter ( data , java.lang.System :: currentTimeMillis ) ) ; }
public java.util.Set < java.lang.String > getDensityFilters ( ) { com.android.resources.Density [ ] values = com.android.resources.Density.values ( ) ; java.util.Set < java.lang.String > fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize ( ( ( values.length ) - 1 ) ) ; for ( com.android.resources.Density value : values ) { if ( ( value != ( com.android.resources.Density.NODPI ) ) && ( value.isRecommended ( ) ) ) { fullList.add ( value.getResourceValue ( ) ) ; } } return density.getApplicableFilters ( fullList ) ; }
public java.lang.String getToolTipText ( java.awt.event.MouseEvent event ) { if ( ( ( mTraceData ) == null ) || ( ( mCallHierarchyRenderer ) == null ) ) { return null ; } mTmpPoint.setLocation ( event.getPoint ( ) ) ; mViewPortInverseTransform.transform ( mTmpPoint , mTmpPoint ) ; return mCallHierarchyRenderer.getToolTipFor ( mTmpPoint.getX ( ) , mTmpPoint.getY ( ) ) ; }
public static void print ( java.lang.String [ ] [ ] stack ) { java.lang.System.out.println ( "---------" ) ; for ( java.lang.String [ ] stackElement : stack ) { for ( java.lang.String part : stackElement ) { java.lang.System.out.print ( ' ' ) ; java.lang.System.out.print ( part ) ; } java.lang.System.out.println ( ) ; } }
public void onNewPicture ( android.graphics.Picture picture ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onNewPicture" ) ; if ( ( mPictureListener ) == null ) return ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onNewPicture" ) ; mPictureListener.onNewPicture ( mWebView , picture ) ; } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onNewPicture" ) ; } }
public void testEnsureFileDoesNotExist_noPermission ( ) throws java.lang.Exception { java.io.File dir = createTempDir ( ) ; java.io.File protectedDir = createDir ( dir , "protected" ) ; java.io.File undeletable = createRegularFile ( protectedDir , "undeletable" ) ; assertTrue ( protectedDir.setWritable ( false ) ) ; assertTrue ( undeletable.exists ( ) ) ; try { libcore.tzdata.shared2.FileUtils.ensureFileDoesNotExist ( undeletable ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } finally { assertTrue ( protectedDir.setWritable ( true ) ) ; } assertTrue ( undeletable.exists ( ) ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( "{ audioQuality=" + ( mAudioQuality ) ) + ", audioDirection=" ) + ( mAudioDirection ) ) + ", videoQuality=" ) + ( mVideoQuality ) ) + ", videoDirection=" ) + ( mVideoDirection ) ) + ", rttMode=" ) + ( mRttMode ) ) + " }" ; }
public void testRewriteGradleMessages ( ) { java.lang.String original = "error example\ntwo line error\nnext line\nsomething else" ; java.lang.String rewriten = mGradleMessageRewriter.rewriteMessages ( original ) ; java.lang.String expected = "Android Gradle Plugin - Build Issue: " + ( ( ( ( ( ( ( "{\"kind\":\"ERROR\",\"text\":\"errorText\",\"sourcePath\":\"error/source\"," + "\"position\":{\"startLine\":1,\"startColumn\":2,\"startOffset\":3," ) + "\"endLine\":4,\"endColumn\":5,\"endOffset\":6},\"original\":\"\"}\n" ) + "Android Gradle Plugin - Build Issue: {\"kind\":\"WARNING\",\"text\":" ) + "\"two line warning\",\"sourcePath\":\"sourcePath\"," ) + "\"position\":{\"startLine\":1,\"startColumn\":2},\"original\":\"\"}\n" ) + "Android Gradle Plugin - Build Issue: {\"kind\":\"SIMPLE\"," ) + "\"text\":\"something else\",\"position\":{},\"original\":\"something else\"}" ) ; assertEquals ( expected.trim ( ) , rewriten.trim ( ) ) ; }
protected void onOrientationChange ( ) { int index = mOrientation.getSelectionIndex ( ) ; if ( index != ( - 1 ) ) { mSelectedConfiguration.setScreenOrientationQualifier ( new com.android.ide.common.resources.configuration.ScreenOrientationQualifier ( com.android.resources.ScreenOrientation.getByIndex ( index ) ) ) ; } else { mSelectedConfiguration.setScreenOrientationQualifier ( new com.android.ide.common.resources.configuration.ScreenOrientationQualifier ( ) ) ; } onChange ( true ) ; }
private synchronized void initGenericTypes ( ) { if ( ! ( genericTypesAreInitialized ) ) { java.lang.String signatureAttribute = getSignatureAttribute ( ) ; libcore.reflect.GenericSignatureParser parser = new libcore.reflect.GenericSignatureParser ( declaringClass.getClassLoader ( ) ) ; parser.parseForConstructor ( this , signatureAttribute , exceptionTypes ) ; formalTypeParameters = parser.formalTypeParameters ; genericParameterTypes = parser.parameterTypes ; genericExceptionTypes = parser.exceptionTypes ; genericTypesAreInitialized = true ; } }
private static android.hardware.cts.helpers.sensorverification.MeanVerification getVerification ( float [ ] expected , float [ ] threshold , float [ ] ... values ) { java.util.Collection < android.hardware.cts.helpers.TestSensorEvent > events = new java.util.ArrayList < > ( values.length ) ; for ( float [ ] value : values ) { events.add ( new android.hardware.cts.helpers.TestSensorEvent ( null , 0 , 0 , value ) ) ; } android.hardware.cts.helpers.sensorverification.MeanVerification verification = new android.hardware.cts.helpers.sensorverification.MeanVerification ( expected , threshold ) ; verification.addSensorEvents ( events ) ; return verification ; }
public boolean hasIccCardUsingSlotIndex ( int slotIndex ) { int [ ] subId = mSubscriptionController.getSubIdUsingSlotIndex ( slotIndex ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId [ 0 ] ) ; if ( ( subId != null ) && ( phone != null ) ) { return phone.getIccCard ( ) . hasIccCard ( ) ; } else { return false ; } }
private static void maybeReportIssue ( int flagValue , com.android.tools.lint.detector.api.JavaContext context , com.intellij.psi.PsiMethodCallExpression node , com.intellij.psi.PsiExpression last ) { if ( ( flagValue & ( com.android.tools.lint.checks.GetSignaturesDetector.GET_SIGNATURES_FLAG ) ) != 0 ) { context.report ( com.android.tools.lint.checks.GetSignaturesDetector.ISSUE , node , context.getLocation ( last ) , ( "Reading app signatures from getPackageInfo: The app signatures " + ( "could be exploited if not validated properly; " + "see issue explanation for details." ) ) ) ; } }
protected java.io.FileDescriptor createFd ( ) { java.io.FileDescriptor s = null ; try { s = android.system.Os.socket ( android.net.util.AF_INET6 , android.net.util.SOCK_DGRAM , android.net.util.IPPROTO_UDP ) ; android.system.Os.bind ( s , android.net.util.BlockingSocketReaderTest.LOOPBACK6 , 0 ) ; mLocalSockName = ( ( java.net.InetSocketAddress ) ( android.system.Os.getsockname ( s ) ) ) ; android.system.Os.setsockoptTimeval ( s , android.net.util.SOL_SOCKET , android.net.util.SO_SNDTIMEO , android.net.util.BlockingSocketReaderTest.TIMEO ) ; } catch ( android.system.ErrnoException | java.net.SocketException e ) { closeFd ( s ) ; fail ( ) ; return null ; } mLocalSocket = s ; return s ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { mContext = context ; if ( CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED.equals ( intent.getAction ( ) ) ) { if ( com.android.phone.otasp.OtaspSimStateReceiver.DBG ) com.android.phone.otasp.OtaspSimStateReceiver.logd ( ( "Received intent: " + ( intent.getAction ( ) ) ) ) ; if ( ( com.android.phone.PhoneGlobals.getPhone ( ) . getIccRecordsLoaded ( ) ) && ( com.android.phone.otasp.OtaspSimStateReceiver.isCarrierSupported ( ) ) ) { final android.telephony.TelephonyManager telephonyManager = android.telephony.TelephonyManager.from ( context ) ; telephonyManager.listen ( mPhoneStateListener , PhoneStateListener.LISTEN_OTASP_CHANGED ) ; } } }
private com.android.jack.ir.ast.JMethod createStaticInitializer ( com.android.jack.ir.sourceinfo.SourceInfo info , com.android.jack.ir.ast.JDefinedClassOrInterface enclosingType ) { int modifier = ( com.android.jack.ir.ast.JModifier.STATIC ) | ( com.android.jack.ir.ast.JModifier.STATIC_INIT ) ; com.android.jack.ir.ast.JMethod method = new com.android.jack.ir.ast.JMethod ( info , new com.android.jack.ir.ast.JMethodId ( new com.android.jack.ir.ast.JMethodIdWide ( com.android.jack.util.NamingTools.STATIC_INIT_NAME , com.android.jack.ir.ast.MethodKind.STATIC ) , JPrimitiveTypeEnum.VOID.getType ( ) ) , enclosingType , modifier ) ; method.setBody ( new com.android.jack.ir.ast.JMethodBody ( info , new com.android.jack.ir.ast.JBlock ( info ) ) ) ; enclosingType.addMethod ( method ) ; method.updateParents ( enclosingType ) ; return method ; }
public com.sun.tools.doclets.internal.toolkit.Content getTagletOutput ( com.sun.javadoc.Doc holder , com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter writer ) throws java.lang.IllegalArgumentException { com.sun.tools.doclets.internal.toolkit.Content out = writer.getOutputInstance ( ) ; com.sun.javadoc.Tag [ ] tags = holder.tags ( getName ( ) ) ; if ( ( tags.length ) == 0 ) { return null ; } java.lang.String encodedText = toString ( tags [ 0 ] ) ; if ( encodedText == null ) return null ; out.addContent ( new com.sun.tools.doclets.formats.html.markup.RawHtml ( encodedText ) ) ; return out ; }
public int [ ] getAdnRecordsSize ( int efid ) { if ( DBG ) logd ( ( "getAdnRecordsSize: efid=" + efid ) ) ; synchronized ( mLock ) { checkThread ( ) ; recordSize = new int [ 3 ] ; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; android.os.Message response = mBaseHandler.obtainMessage ( com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE , status ) ; com.android.internal.telephony.uicc.IccFileHandler fh = phone.getIccFileHandler ( ) ; if ( fh != null ) { fh.getEFLinearRecordSize ( efid , response ) ; waitForResult ( status ) ; } } return recordSize ; }
private static boolean needToConvert ( com.android.internal.telephony.Phone phone ) { final long identity = android.os.Binder.clearCallingIdentity ( ) ; try { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( phone.getContext ( ) . getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; if ( configManager != null ) { android.os.PersistableBundle bundle = configManager.getConfig ( ) ; if ( bundle != null ) { return bundle.getBoolean ( CarrierConfigManager.KEY_SMS_REQUIRES_DESTINATION_NUMBER_CONVERSION_BOOL ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( identity ) ; } return false ; }
public static void sortAttributeChoices ( com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor descriptor , java.util.List < java.lang.String > choices ) { final com.android.ide.common.api.IAttributeInfo attributeInfo = descriptor.getAttributeInfo ( ) ; java.util.Collections.sort ( choices , new java.util.Comparator < java.lang.String > ( ) { @ java.lang.Override public int compare ( java.lang.String s1 , java.lang.String s2 ) { int compare = ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiResourceAttributeNode.score ( attributeInfo , s1 ) ) - ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiResourceAttributeNode.score ( attributeInfo , s2 ) ) ; if ( compare == 0 ) { compare = s1.compareToIgnoreCase ( s2 ) ; } return compare ; } } ) ; }
public static < A extends java.lang.annotation.Annotation > A createAnnotation ( java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType , libcore.reflect.AnnotationMember [ ] elements ) { libcore.reflect.AnnotationFactory factory = new libcore.reflect.AnnotationFactory ( annotationType , elements ) ; return ( ( A ) ( java.lang.reflect.Proxy.newProxyInstance ( annotationType.getClassLoader ( ) , new java.lang.Class [ ] { annotationType } , factory ) ) ) ; }
public java.util.List < java.io.File > getJavaLibraries ( ) { if ( ( mJavaLibraries ) == null ) { mJavaLibraries = com.google.common.collect.Lists.newArrayList ( ) ; java.io.File jarFile = mLibrary.getJarFile ( ) ; if ( jarFile.exists ( ) ) { mJavaLibraries.add ( jarFile ) ; } for ( java.io.File local : mLibrary.getLocalJars ( ) ) { if ( local.exists ( ) ) { mJavaLibraries.add ( local ) ; } } } return mJavaLibraries ; }
public void onStop ( ) { super . onStop ( ) ; if ( ( ( mLocalManager ) == null ) || ( isUiRestricted ( ) ) ) { return ; } removeAllDevices ( ) ; mLocalManager.setForegroundActivity ( null ) ; mLocalManager.getEventManager ( ) . unregisterCallback ( this ) ; }
public void readContent ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl in ) throws java.io.IOException { level = in.getNodeLevel ( ) ; name = in.readId ( ) ; returnType = in.readId ( ) ; modifier = in.readInt ( ) ; annotations = in.readNodes ( com.android.jack.jayce.v0002.nodes.NAnnotation.class ) ; defaultValue = in.readNode ( com.android.jack.jayce.v0002.nodes.NLiteral.class ) ; markers = in.readNodes ( com.android.jack.jayce.v0002.nodes.NMarker.class ) ; }
public void setUp ( ) throws com.android.tradefed.device.DeviceNotAvailableException , java.lang.Exception { mDevice = getDevice ( ) ; mIsBackupSupported = hasDeviceFeature ( android.cts.backup.BaseBackupHostSideTest.FEATURE_BACKUP ) ; if ( ! ( mIsBackupSupported ) ) { com.android.tradefed.log.LogUtil.CLog.i ( "android.software.backup feature is not supported on this device" ) ; return ; } junit.framework.Assert.assertTrue ( "LocalTransport should be available." , hasBackupTransport ( android.cts.backup.BaseBackupHostSideTest.LOCAL_TRANSPORT ) ) ; mWasBackupEnabled = enableBackup ( true ) ; mOldTransport = setBackupTransport ( android.cts.backup.BaseBackupHostSideTest.LOCAL_TRANSPORT ) ; assertNotNull ( mCtsBuildInfo ) ; }
public java.util.Collection < com.android.ide.common.resources.ResourceItem > getResourceItemsOfType ( com.android.resources.ResourceType type ) { java.util.Map < java.lang.String , com.android.ide.common.resources.ResourceItem > map = mResourceMap.get ( type ) ; if ( map == null ) { return java.util.Collections.emptyList ( ) ; } java.util.Collection < com.android.ide.common.resources.ResourceItem > roList = mReadOnlyListMap.get ( map ) ; if ( roList == null ) { roList = java.util.Collections.unmodifiableCollection ( map.values ( ) ) ; mReadOnlyListMap.put ( map , roList ) ; } return roList ; }
private static void checkOnTouchListener ( com.android.tools.lint.detector.api.ClassContext context , org.objectweb.asm.tree.ClassNode classNode ) { org.objectweb.asm.tree.MethodNode onTouchNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethod ( classNode.methods , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH_SIG ) ; if ( onTouchNode != null ) { org.objectweb.asm.tree.AbstractInsnNode performClickInsnNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethodCallInstruction ( onTouchNode.instructions , com.android.SdkConstants.ANDROID_VIEW_VIEW , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK_SIG ) ; if ( performClickInsnNode == null ) { java.lang.String message = java.lang.String.format ( "`%1$s#onTouch` should call `View#performClick` when a click is detected" , classNode.name ) ; context.report ( com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ISSUE , onTouchNode , null , context.getLocation ( onTouchNode , classNode ) , message , null ) ; } } }
public void testConfigurationUpdatesWhenResizedFromFullscreen ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
public android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeFormatterData get ( android.icu.util.ULocale locale ) { java.lang.String key = locale.toString ( ) ; return cache.getInstance ( key , locale ) ; }
public android.os.Bundle getAvailableChannels ( int band ) { mChannelHelper.updateChannels ( ) ; android.net.wifi.WifiScanner.ChannelSpec [ ] channelSpecs = mChannelHelper.getAvailableScanChannels ( band ) ; java.util.ArrayList < java.lang.Integer > list = new java.util.ArrayList < java.lang.Integer > ( channelSpecs.length ) ; for ( android.net.wifi.WifiScanner.ChannelSpec channelSpec : channelSpecs ) { list.add ( channelSpec.frequency ) ; } android.os.Bundle b = new android.os.Bundle ( ) ; b.putIntegerArrayList ( WifiScanner.GET_AVAILABLE_CHANNELS_EXTRA , list ) ; mLog.trace ( "getAvailableChannels uid=%" ) . c ( android.os.Binder.getCallingUid ( ) ) . flush ( ) ; return b ; }
public void checkValidity ( ) { com.android.jack.ir.ast.cfg.CfgExpressionValidator.validate ( this ) ; if ( this . isTerminal ( ) ) { if ( ( this ) != ( getBasicBlock ( ) . getLastElement ( ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Terminal block element must be the last element of the block" ) ; } } else { if ( ( ( this . getBasicBlock ( ) ) instanceof com.android.jack.ir.ast.cfg.JThrowingBasicBlock ) && ( ( this ) == ( getBasicBlock ( ) . getLastElement ( ) ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Non-terminal block element must NOT be the last element of the throwing block" ) ; } } }
private void validateExposureTime ( long request , long result ) { long expTimeDelta = request - result ; long expTimeErrorMargin = ( ( long ) ( java.lang.Math.max ( android.hardware.camera2.cts.CaptureRequestTest.EXPOSURE_TIME_ERROR_MARGIN_NS , ( request * ( android.hardware.camera2.cts.CaptureRequestTest.EXPOSURE_TIME_ERROR_MARGIN_RATE ) ) ) ) ) ; mCollector.expectTrue ( ( ( ( "Exposture time is invalid for AE manaul control test, request: " + request ) + " result: " ) + result ) , ( ( expTimeDelta < expTimeErrorMargin ) && ( expTimeDelta >= 0 ) ) ) ; }
public void test_getSoTimeout ( ) throws java.lang.Exception { java.net.DatagramSocket ds = new java.net.DatagramSocket ( ) ; final int timeoutSet = 100 ; ds.setSoTimeout ( timeoutSet ) ; int actualTimeout = ds.getSoTimeout ( ) ; assertTrue ( "Returned incorrect timeout" , ( ( java.lang.Math.abs ( ( actualTimeout - timeoutSet ) ) ) <= 10 ) ) ; }
public void setEmbeddedTitleBar ( android.view.View v ) { if ( ( mTitleBar ) == v ) return ; if ( ( mTitleBar ) != null ) { removeView ( mTitleBar ) ; } if ( null != v ) { addView ( v , new android.widget.AbsoluteLayout.LayoutParams ( ViewGroup.LayoutParams.FILL_PARENT , ViewGroup.LayoutParams.WRAP_CONTENT , 0 , 0 ) ) ; if ( ( mTitleShadow ) == null ) { mTitleShadow = ( ( android.graphics.drawable.Drawable ) ( mContext.getResources ( ) . getDrawable ( com.android.internal.R.drawable.title_bar_shadow ) ) ) ; } } mTitleBar = v ; }
synchronized void onIntrDataFromNative ( byte reportId , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onIntrData(): reportId=" + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap ( data ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_INTR_DATA ) ; msg.arg1 = reportId ; msg.obj = bb ; mHandler.sendMessage ( msg ) ; }
public final short getShort ( long addr ) { if ( myValuesAreBufferAligned ) { long page = addr / ( myPageSize ) ; int page_offset = ( ( int ) ( addr % ( myPageSize ) ) ) ; return getReadOnlyBuffer ( page ) . getShort ( page_offset ) ; } else { get ( addr , myTypedIOBuffer , 0 , 2 ) ; return com.intellij.util.io.Bits.getShort ( myTypedIOBuffer , 0 ) ; } }
private java.io.File createRscLibrary ( ) throws java.io.IOException , java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; java.io.File emptyLib = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "rsc" , toolchain.getLibraryExtension ( ) ) ; toolchain.addResourceDir ( com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.library.test001.lib" ) ) ; toolchain.srcToLib ( emptyLib , true ) ; return emptyLib ; }
private void write ( int index , java.io.OutputStreamWriter writer ) throws java.io.IOException { switch ( index ) { case com.android.sdklib.internal.export.ApkData.INDEX_OUTPUTNAME : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mOutputName ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_PROJECT : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mRelativePath ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_MINOR : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mMinor ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_MINSDK : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mMinSdkVersion ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_ABI : com.android.sdklib.internal.export.ApkData.writeValue ( writer , ( ( mAbi ) != null ? mAbi : "" ) ) ; break ; } }
public boolean put ( java.lang.String key , byte [ ] value ) { try { return ( mBinder.insert ( key , value ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
private void processIcbMmiCodeForUpdate ( ) { java.lang.String dialingNumber = mSia ; java.lang.String [ ] icbNum = null ; int callAction ; if ( dialingNumber != null ) { icbNum = dialingNumber.split ( "\\$" ) ; } callAction = callBarAction ( dialingNumber ) ; try { mPhone.mCT.getUtInterface ( ) . updateCallBarring ( ImsUtInterface.CB_BS_MT , callAction , obtainMessage ( com.android.internal.telephony.imsphone.ImsPhoneMmiCode.EVENT_SET_COMPLETE , this ) , icbNum ) ; } catch ( com.android.ims.ImsException e ) { android.telephony.Rlog.d ( com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG , "processIcbMmiCodeForUpdate:Could not get UT handle for updating ICB." ) ; } }
public void testSessionToken ( ) throws java.lang.Exception { android.media.session.MediaSession.Token sessionToken = mSession.getSessionToken ( ) ; assertNotNull ( sessionToken ) ; assertEquals ( 0 , sessionToken.describeContents ( ) ) ; android.os.Parcel p = android.os.Parcel.obtain ( ) ; sessionToken.writeToParcel ( p , 0 ) ; p.setDataPosition ( 0 ) ; android.media.session.MediaSession.Token token = MediaSession.Token.CREATOR.createFromParcel ( p ) ; assertEquals ( token , sessionToken ) ; p.recycle ( ) ; }
private android.net.Network connectKeepaliveNetwork ( android.net.LinkProperties lp ) { if ( ( mWiFiNetworkAgent ) != null ) { org.junit.Assert.assertNull ( mCm.getNetworkCapabilities ( mWiFiNetworkAgent.getNetwork ( ) ) ) ; } mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( android.net.NetworkCapabilities.TRANSPORT_WIFI ) ; android.os.ConditionVariable cv = waitForConnectivityBroadcasts ( 1 ) ; mWiFiNetworkAgent.connect ( true ) ; com.android.server.ConnectivityServiceTest.waitFor ( cv ) ; verifyActiveNetwork ( android.net.NetworkCapabilities.TRANSPORT_WIFI ) ; mWiFiNetworkAgent.sendLinkProperties ( lp ) ; waitForIdle ( ) ; return mWiFiNetworkAgent.getNetwork ( ) ; }
public void startScan ( int callingUid , int scanCounter , android.net.wifi.ScanSettings settings , android.os.WorkSource workSource ) { android.os.Bundle bundle = new android.os.Bundle ( ) ; bundle.putParcelable ( com.android.server.wifi.WifiStateMachine.CUSTOMIZED_SCAN_SETTING , settings ) ; bundle.putParcelable ( com.android.server.wifi.WifiStateMachine.CUSTOMIZED_SCAN_WORKSOURCE , workSource ) ; bundle.putLong ( com.android.server.wifi.WifiStateMachine.SCAN_REQUEST_TIME , mClock.getWallClockMillis ( ) ) ; sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_START_SCAN , callingUid , scanCounter , bundle ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [ ] pkgs = intent.getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { synchronized ( this ) { if ( forceStopPackageLocked ( pkg , ( - 1 ) , false , false , false , false , false , 0 , "finished booting" ) ) { setResultCode ( Activity.RESULT_OK ) ; return ; } } } } }
public java.io.File getTestsDir ( ) throws java.io.FileNotFoundException { return mTestDir ; }
private void createConnectionFailed ( final android.telecom.PhoneAccountHandle callManagerAccount , final java.lang.String callId , final android.telecom.ConnectionRequest request , boolean isIncoming ) { android.telecom.Log.i ( this , "createConnectionFailed %s" , callId ) ; if ( isIncoming ) { onCreateIncomingConnectionFailed ( callManagerAccount , request ) ; } else { onCreateOutgoingConnectionFailed ( callManagerAccount , request ) ; } }
public void testUnescapeStringShouldUnescapeAtSignAndQuestionMarkOnlyAtBeginning ( ) throws java.lang.Exception { assertEquals ( "@text" , com.android.ide.common.res2.ValueXmlHelper.unescapeResourceString ( "\\@text" , false , true ) ) ; assertEquals ( "a@text" , com.android.ide.common.res2.ValueXmlHelper.unescapeResourceString ( "a@text" , false , true ) ) ; assertEquals ( "?text" , com.android.ide.common.res2.ValueXmlHelper.unescapeResourceString ( "\\?text" , false , true ) ) ; assertEquals ( "a?text" , com.android.ide.common.res2.ValueXmlHelper.unescapeResourceString ( "a?text" , false , true ) ) ; assertEquals ( " ?text" , com.android.ide.common.res2.ValueXmlHelper.unescapeResourceString ( "\" ?text\"" , false , true ) ) ; }
public java.nio.ByteBuffer getByteBuffer ( long offset , int size ) { checkChunkValid ( offset , size ) ; int chunkPosition = ( ( int ) ( offset ) ) ; int chunkLimit = chunkPosition + size ; synchronized ( mBuffer ) { mBuffer.position ( 0 ) ; mBuffer.limit ( chunkLimit ) ; mBuffer.position ( chunkPosition ) ; return mBuffer.slice ( ) ; } }
private boolean shouldTurnOffSignalStrength ( ) { if ( mIsPowerSaveOn ) { return true ; } if ( ( ( mIsCharging ) || ( mIsScreenOn ) ) || ( ( mUpdateModes.get ( TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH ) ) == ( android.telephony.TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF ) ) ) { return false ; } return true ; }
private void responseSetupDataCall ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SetupDataCallResult setupDataCallResult ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.dataconnection.DataCallResponse ret = com.android.internal.telephony.RIL.convertDataCallResult ( setupDataCallResult ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public static int fromJCAMode ( java.lang.String mode ) { java.lang.String modeLower = mode.toLowerCase ( java.util.Locale.US ) ; if ( "ecb" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.ECB ; } else if ( "cbc" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.CBC ; } else if ( "ctr" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.CTR ; } else if ( "gcm" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.GCM ; } else { throw new java.lang.IllegalArgumentException ( ( "Unknown block mode: " + mode ) ) ; } }
private static java.security.spec.AlgorithmParameterSpec getDecryptAlgorithmParameterSpec ( java.security.spec.AlgorithmParameterSpec encryptSpec , javax.crypto.Cipher encryptCipher ) { java.lang.String algorithm = encryptCipher.getAlgorithm ( ) . toUpperCase ( java.util.Locale.US ) ; if ( libcore.javax.crypto.CipherTest.isPBE ( algorithm ) ) { return encryptSpec ; } if ( libcore.javax.crypto.CipherTest.isOnlyWrappingAlgorithm ( algorithm ) ) { return null ; } byte [ ] iv = encryptCipher.getIV ( ) ; if ( iv != null ) { return new javax.crypto.spec.IvParameterSpec ( iv ) ; } return null ; }
public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ( mVenvDir ) != null ) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete ( mVenvDir.toPath ( ) ) ; com.android.tradefed.log.LogUtil.CLog.i ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; } catch ( java.io.IOException exception ) { com.android.tradefed.log.LogUtil.CLog.e ( "Failed to delete %s: %s" , mVenvDir , exception ) ; } mVenvDir = null ; } }
public boolean updateSubscribe ( short transactionId , android.net.wifi.aware.SubscribeConfig config ) { if ( mIsPublishSession ) { android.util.Log.e ( com.android.server.wifi.aware.WifiAwareDiscoverySessionState.TAG , "A PUBLISH session is being used to subscribe" ) ; try { mCallback.onSessionConfigFail ( WifiAwareNative.AWARE_STATUS_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.aware.WifiAwareDiscoverySessionState.TAG , ( "updateSubscribe: RemoteException=" + e ) ) ; } return false ; } return com.android.server.wifi.aware.WifiAwareNative.getInstance ( ) . subscribe ( transactionId , mPubSubId , config ) ; }
public android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings ( int subId ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getActiveVisualVoicemailSmsFilterSettings ( subId ) ; } } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public void compileFinalizer ( ) throws java.lang.Exception { java.io.File out = com.android.jack.TestTools.createTempFile ( "out" , ".zip" ) ; java.lang.String classpath = com.android.jack.TestTools.getClasspathAsString ( com.android.jack.compile.androidtree.dalvik.finalizer.FinalizerTest.BOOTCLASSPATH ) ; com.android.jack.TestTools.compileSourceToDex ( new com.android.jack.Options ( ) , com.android.jack.TestTools.getArtTestFolder ( "036-finalizer" ) , classpath , out , true ) ; }
public void sendBackgroundScanBandRequest ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = com.android.server.wifi.ScanTestUtil.createRequest ( WifiScanner.WIFI_BAND_BOTH , 30000 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; com.android.server.wifi.WifiNative.ScanSettings nativeSettings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder ( ) . withBasePeriod ( 30000 ) . withMaxApPerScan ( com.android.server.wifi.scanner.WifiScanningServiceTest.MAX_AP_PER_SCAN ) . withMaxScansToCache ( BackgroundScanScheduler.DEFAULT_MAX_SCANS_TO_BATCH ) . addBucketWithBand ( 30000 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN , WifiScanner.WIFI_BAND_BOTH ) . build ( ) ; doSuccessfulBackgroundScan ( requestSettings , nativeSettings ) ; org.junit.Assert.assertEquals ( mWifiMetrics.getBackgroundScanCount ( ) , 1 ) ; }
public static void increaseAnsweredCount ( android.content.Context context ) { android.content.SharedPreferences sharedPreferences = com.android.dialer.storage.StorageComponent.get ( context ) . unencryptedSharedPrefs ( ) ; int answeredCount = sharedPreferences.getInt ( com.android.incallui.answer.impl.hint.AnswerHintFactory.ANSWERED_COUNT_PREFERENCE_KEY , 0 ) ; sharedPreferences.edit ( ) . putInt ( com.android.incallui.answer.impl.hint.AnswerHintFactory.ANSWERED_COUNT_PREFERENCE_KEY , ( answeredCount + 1 ) ) . apply ( ) ; }
public android.icu.util.TimeZone lookupTimeZoneByCountryAndOffset ( java.lang.String countryIso , int offsetMillis , boolean isDst , long whenMillis , android.icu.util.TimeZone bias ) { libcore.util.CountryTimeZones countryTimeZones = lookupCountryTimeZones ( countryIso ) ; if ( countryTimeZones == null ) { return null ; } libcore.util.CountryTimeZones.OffsetResult offsetResult = countryTimeZones.lookupByOffsetWithBias ( offsetMillis , isDst , whenMillis , bias ) ; return offsetResult != null ? offsetResult.mTimeZone : null ; }
private void loadPreferences ( ) { org.eclipse.core.runtime.preferences.IEclipsePreferences prefs = InstanceScope.INSTANCE.getNode ( GlTracePlugin.PLUGIN_ID ) ; mAppPackageToTrace = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_APP_PACKAGE , "" ) ; mActivityToTrace = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_ACTIVITY , "" ) ; mTraceFilePath = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_TRACEFILE , "" ) ; mLastUsedDevice = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_DEVICE , "" ) ; }
private void loadStackFrame ( ) throws java.io.IOException { long id = readId ( ) ; java.lang.String methodName = mStrings.get ( readId ( ) ) ; java.lang.String methodSignature = mStrings.get ( readId ( ) ) ; java.lang.String sourceFile = mStrings.get ( readId ( ) ) ; int serial = mInput.readInt ( ) ; int lineNumber = mInput.readInt ( ) ; com.android.tools.perflib.heap.StackFrame frame = new com.android.tools.perflib.heap.StackFrame ( id , methodName , methodSignature , sourceFile , serial , lineNumber ) ; mSnapshot.addStackFrame ( frame ) ; }
public boolean isCallIdle ( ) { return ( ! ( isInCall ( ) ) ) && ( ! ( isRinging ( ) ) ) ; }
public boolean updatePublish ( short transactionId , android.net.wifi.aware.PublishConfig config ) { if ( ! ( mIsPublishSession ) ) { android.util.Log.e ( com.android.server.wifi.aware.WifiAwareDiscoverySessionState.TAG , "A SUBSCRIBE session is being used to publish" ) ; try { mCallback.onSessionConfigFail ( WifiAwareNative.AWARE_STATUS_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.aware.WifiAwareDiscoverySessionState.TAG , ( "updatePublish: RemoteException=" + e ) ) ; } return false ; } return mWifiAwareNative.publish ( transactionId , mPubSubId , config ) ; }
public static void sort ( float [ ] a , int fromIndex , int toIndex ) { java.util.Arrays.rangeCheck ( a.length , fromIndex , toIndex ) ; java.util.DualPivotQuicksort.sort ( a , fromIndex , ( toIndex - 1 ) , null , 0 , 0 ) ; }
public void setComponentEnabledSetting ( android.content.ComponentName componentName , int newState , int flags , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return ; setEnabledSetting ( componentName.getPackageName ( ) , componentName.getClassName ( ) , newState , flags , userId ) ; }
private static void edgeSplitMoveExceptionsAndResults ( com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock block : cfg.getReachableBlocksDepthFirst ( ) ) { if ( ( ( ! ( block instanceof com.android.jack.ir.ast.cfg.JExitBasicBlock ) ) && ( ( block.getPredecessorCount ( ) ) > 1 ) ) && ( block instanceof com.android.jack.ir.ast.cfg.JCatchBasicBlock ) ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock predecessor : com.google.common.collect.Lists.newArrayList ( block.getPredecessors ( ) ) ) { com.android.jack.transformations.ssa.SsaBasicBlockSplitter.insertNewSimpleSuccessor ( predecessor , block ) ; } } } }
private boolean networkCountryIsoChanged ( java.lang.String newCountryIsoCode , java.lang.String prevCountryIsoCode ) { if ( android.text.TextUtils.isEmpty ( newCountryIsoCode ) ) { if ( com.android.internal.telephony.ServiceStateTracker.DBG ) { log ( "countryIsoChanged: no new country ISO code" ) ; } return false ; } if ( android.text.TextUtils.isEmpty ( prevCountryIsoCode ) ) { if ( com.android.internal.telephony.ServiceStateTracker.DBG ) { log ( "countryIsoChanged: no previous country ISO code" ) ; } return true ; } return ! ( newCountryIsoCode.equals ( prevCountryIsoCode ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.lang.System.setProperty ( "dexmaker.dexcache" , getContext ( ) . getCacheDir ( ) . toString ( ) ) ; com.android.internal.util.test.BroadcastInterceptingContext context = new com.android.internal.util.test.BroadcastInterceptingContext ( getContext ( ) ) ; mServerSocket = new android.net.LocalServerSocket ( com.android.server.NetworkManagementServiceTest.SOCKET_NAME ) ; mNMService = com.android.server.NetworkManagementService.create ( context , com.android.server.NetworkManagementServiceTest.SOCKET_NAME ) ; mSocket = mServerSocket.accept ( ) ; mOutputStream = mSocket.getOutputStream ( ) ; }
public static < T > T get ( java.util.Iterator < T > iterator , int position ) { com.google.common.collect.Iterators.checkNonnegative ( position ) ; int skipped = com.google.common.collect.Iterators.advance ( iterator , position ) ; if ( ! ( iterator.hasNext ( ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( "position (" + position ) + ") must be less than the number of elements that remained (" ) + skipped ) + ")" ) ) ; } return iterator.next ( ) ; }
protected boolean processLayersFromFrontToFocus ( com.android.rs.refocus.BlurStack blurStack ) { for ( int targetLayer = 0 ; targetLayer < ( blurStack.getFocusLayer ( ) ) ; ++ targetLayer ) { com.android.rs.refocus.LayerInfo layerInfo = blurStack.getLayerInfo ( targetLayer ) ; setTargetLayer ( layerInfo ) ; int dilationRadius = com.android.rs.refocus.RefocusFilter.getKernelRadius ( layerInfo.frontDepth , blurStack ) ; setBlendInfo ( dilationRadius ) ; setKernelData ( targetLayer , blurStack ) ; computeLayerMatteInFrontOfFocalDepth ( ) ; filterLayerInFrontOfFocalDepth ( ) ; } finalizeFuzzyImageUsingSharpImage ( ) ; return true ; }
public void logp ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.Throwable thrown , java.util.function.Supplier < java.lang.String > msgSupplier ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msgSupplier.get ( ) ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setThrown ( thrown ) ; doLog ( lr ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { try { java.lang.Class < ? > class_loader_class = java.lang.Class.forName ( "dalvik.system.PathClassLoader" ) ; java.lang.System.loadLibrary ( args [ 0 ] ) ; } catch ( java.lang.ClassNotFoundException e ) { Main.usingRI = true ; java.lang.System.out.println ( "JNI_OnLoad called" ) ; } Main.testClearDexCache ( ) ; Main.testMultiDex ( ) ; Main.testRacyLoader ( ) ; Main.testRacyLoader2 ( ) ; Main.testMisbehavingLoader ( ) ; Main.testRacyMisbehavingLoader ( ) ; Main.testRacyMisbehavingLoader2 ( ) ; }
void load ( java.lang.String absolutePath , java.lang.ClassLoader loader ) { checkTargetSdkVersionForLoad ( "java.lang.Runtime#load(String, ClassLoader)" ) ; java.lang.System.logE ( ( "java.lang.Runtime#load(String, ClassLoader)" + " is private and will be removed in a future Android release" ) ) ; if ( absolutePath == null ) { throw new java.lang.NullPointerException ( "absolutePath == null" ) ; } java.lang.String error = doLoad ( absolutePath , loader ) ; if ( error != null ) { throw new java.lang.UnsatisfiedLinkError ( error ) ; } }
public boolean replyReport ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( ( ( "replyReport(): device=" + device ) + " type=" ) + type ) + " id=" ) + id ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.replyReport ( device , type , id , data ) ; }
public boolean dumpProfiles ( int uid , java.lang.String packageName , java.lang.String codePaths ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return false ; try { return mInstalld.dumpProfiles ( uid , packageName , codePaths ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
static < T extends java.lang.Throwable > void uncheckedThrow ( java.lang.Throwable t ) throws T { throw ( ( T ) ( t ) ) ; }
private static void appendTo ( java.lang.String dest , java.lang.String src ) throws java.io.IOException { try ( java.io.FileInputStream is = new java.io.FileInputStream ( new java.io.File ( src ) ) ; java.io.FileOutputStream os = new java.io.FileOutputStream ( new java.io.File ( dest ) ) ) { byte [ ] buf = new byte [ 1024 ] ; int len ; while ( ( len = is.read ( buf ) ) != ( - 1 ) ) { os.write ( buf , 0 , len ) ; } } }
private void checkSizeIsWithinShort ( java.lang.String property , byte [ ] bytes ) { if ( ( bytes.length ) > 65535 ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( property + " too long in " ) + ( charset ) ) + ":" ) + ( bytes.length ) ) + " bytes" ) ) ; } }
public void explicitCallTransfer ( android.os.Message result ) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy ( result ) ; if ( radioProxy != null ) { com.android.internal.telephony.RILRequest rr = obtainRequest ( com.android.internal.telephony.RIL_REQUEST_EXPLICIT_CALL_TRANSFER , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; try { radioProxy.explicitCallTransfer ( rr.mSerial ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { handleRadioProxyExceptionForRR ( rr , "explicitCallTransfer" , e ) ; } } }
private void updateSampleRepo ( ) { org.eclipse.jgit.api.Git localGitRepo = getLocalRepo ( ) ; if ( localGitRepo == null ) { localGitRepo = cloneGithubRepo ( ) ; } else { try { localGitRepo.pull ( ) . call ( ) ; } catch ( org.eclipse.jgit.api.errors.GitAPIException e ) { com.google.gct.idea.appengine.synchronization.SampleSyncTask.LOG.error ( "Error syncing local sample repository" , e ) ; } } if ( localGitRepo != null ) { localGitRepo.getRepository ( ) . close ( ) ; } }
int getAudioStateInt ( ) { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ; }
public void setUp ( ) { org.mockito.MockitoAnnotations.initMocks ( this ) ; mDevice1 = android.bluetooth.BluetoothAdapter.getDefaultAdapter ( ) . getRemoteDevice ( com.android.bluetooth.btservice.RemoteDevicesTest.TEST_BT_ADDR_1 ) ; mHandlerThread = new android.os.HandlerThread ( "RemoteDevicesTestHandlerThread" ) ; mHandlerThread.start ( ) ; mTestLooperManager = android.support.test.InstrumentationRegistry.getInstrumentation ( ) . acquireLooperManager ( mHandlerThread.getLooper ( ) ) ; mRemoteDevices = new com.android.bluetooth.btservice.RemoteDevices ( mAdapterService , mHandlerThread.getLooper ( ) ) ; }
private void verifyStateChange ( int prevState , int currState , int callNumber , int timeoutMs ) { try { org.mockito.Mockito.verify ( mIBluetoothCallback , org.mockito.Mockito.timeout ( timeoutMs ) . times ( callNumber ) ) . onBluetoothStateChange ( prevState , currState ) ; } catch ( java.lang.Exception e ) { } }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsUcharUcharUcharUchar args ) { args.out = android.renderscript.cts.CoreMathVerifier.minU8 ( args.inMaxValue , android.renderscript.cts.CoreMathVerifier.maxU8 ( args.inValue , args.inMinValue ) ) ; }
public void notifySpeakerphone ( boolean isSpeakerphone ) { if ( ! ( mCallsManager.hasAnyCalls ( ) ) ) { isSpeakerphone = false ; } if ( ( mIsShowingSpeakerphone ) == isSpeakerphone ) { return ; } android.telecom.Log.d ( this , "Speakerphone status bar icon being set to %b" , isSpeakerphone ) ; if ( isSpeakerphone ) { mStatusBarManager.setIcon ( com.android.server.telecom.StatusBarNotifier.SLOT_SPEAKERPHONE , android.R.drawable.stat_sys_speakerphone , 0 , mContext.getString ( R.string.accessibility_speakerphone_enabled ) ) ; } else { mStatusBarManager.removeIcon ( com.android.server.telecom.StatusBarNotifier.SLOT_SPEAKERPHONE ) ; } mIsShowingSpeakerphone = isSpeakerphone ; }
private static void appendCamelCase ( java.lang.StringBuilder sb , @ com.android.annotations.Nullable java.lang.String word ) { if ( word != null ) { if ( ( sb.length ( ) ) == 0 ) { sb.append ( word ) ; } else { sb.append ( com.android.utils.StringHelper.capitalize ( word ) ) ; } } }
public void run ( ) { boolean loggedIn = state.logInWithLocalServer ( message ) ; if ( loggedIn ) { com.google.gct.login.IGoogleLoginUpdateUser callback = new com.google.gct.login.IGoogleLoginUpdateUser ( ) { @ java.lang.Override public void updateUser ( ) { uiFacade.notifyStatusIndicator ( ) ; } } ; users.addUser ( new com.google.gct.login.CredentialedUser ( state , callback ) ) ; } }
public void removeRegistrationListener ( com.android.ims.ImsConnectionStateListener listener ) throws com.android.ims.ImsException { if ( listener == null ) { throw new java.lang.NullPointerException ( "listener can't be null" ) ; } checkAndThrowExceptionIfServiceUnavailable ( ) ; try { mMmTelFeatureConnection.removeRegistrationCallback ( listener ) ; com.android.ims.ImsManager.log ( "Registration Callback/Listener registered." ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "addRegistrationCallback()" , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void setIncludePathRefId ( java.lang.String refId ) { java.lang.Object path = getProject ( ) . getReference ( refId ) ; if ( path instanceof org.apache.tools.ant.types.Path ) { mIncludePath = ( ( org.apache.tools.ant.types.Path ) ( path ) ) ; } else if ( path != null ) { throw new org.apache.tools.ant.BuildException ( ( refId + " is expected to reference a Path object." ) ) ; } }
public java.lang.String toString ( ) { java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; final long bioCtx = org.conscrypt.NativeCrypto.create_BIO_OutputStream ( os ) ; try { org.conscrypt.NativeCrypto.X509_CRL_print ( bioCtx , mContext ) ; return os.toString ( ) ; } finally { org.conscrypt.NativeCrypto.BIO_free_all ( bioCtx ) ; } }
public void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader ) { if ( ! ( annotations.isEmpty ( ) ) ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; com.android.jack.jayce.v0003.io.ExportSession exportSession = new com.android.jack.jayce.v0003.io.ExportSession ( session.getPhantomLookup ( ) , session , com.android.jack.jayce.NodeLevel.STRUCTURE ) ; for ( com.android.jack.jayce.v0003.nodes.NAnnotation annotation : annotations ) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast ( exportSession ) ; loading.addAnnotation ( annotationLiteral ) ; annotationLiteral.updateParents ( loading ) ; } } }
public void delete ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException , com.android.sched.util.file.CannotDeleteFileException { try { inputVFS.getRootInputVDir ( ) . delete ( fileType.buildFileVPath ( typePath ) ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } }
public void mousePressed ( java.awt.event.MouseEvent e ) { if ( isOverLink ( e.getX ( ) , e.getY ( ) ) ) { javax.swing.tree.TreeModel model = myTree.getModel ( ) ; if ( model instanceof com.google.gct.idea.elysium.ProjectSelector.SelectorTreeModel ) { ( ( com.google.gct.idea.elysium.ProjectSelector.SelectorTreeModel ) ( model ) ) . setModelNeedsRefresh ( true ) ; } com.intellij.ide.BrowserUtil.browse ( "https://console.developers.google.com/project" ) ; com.android.tools.idea.stats.UsageTracker.getInstance ( ) . trackEvent ( GctTracking.CATEGORY , GctTracking.PROJECT_SELECTION , "create.new.project" , null ) ; } }
public com.android.dialer.voicemail.listui.NewVoicemailViewHolder onCreateViewHolder ( android.view.ViewGroup viewGroup , int viewType ) { android.view.LayoutInflater inflater = android.view.LayoutInflater.from ( viewGroup.getContext ( ) ) ; android.view.View view = inflater.inflate ( R.layout.new_voicemail_entry , viewGroup , false ) ; com.android.dialer.voicemail.listui.NewVoicemailViewHolder newVoicemailViewHolder = new com.android.dialer.voicemail.listui.NewVoicemailViewHolder ( view ) ; return newVoicemailViewHolder ; }
public void listen ( android.telephony.PhoneStateListener listener , int events ) { if ( ( mContext ) == null ) return ; try { boolean notifyNow = ( getITelephony ( ) ) != null ; if ( ( listener.mSubId ) == null ) { listener.mSubId = mSubId ; } android.telephony.TelephonyManager.sRegistry.listenForSubscriber ( listener.mSubId , getOpPackageName ( ) , listener.callback , events , notifyNow ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
public boolean supports3gppCallForwardingWhileRoaming ( ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( getContext ( ) . getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; android.os.PersistableBundle b = configManager.getConfig ( ) ; if ( b != null ) { return b.getBoolean ( CarrierConfigManager.KEY_SUPPORT_3GPP_CALL_FORWARDING_WHILE_ROAMING_BOOL , true ) ; } else { return true ; } }
private void setSuspendOptimizations ( int reason , boolean enabled ) { if ( mVerboseLoggingEnabled ) log ( ( ( ( "setSuspendOptimizations: " + reason ) + " " ) + enabled ) ) ; if ( enabled ) { mSuspendOptNeedsDisabled &= ~ reason ; } else { mSuspendOptNeedsDisabled |= reason ; } if ( mVerboseLoggingEnabled ) log ( ( "mSuspendOptNeedsDisabled " + ( mSuspendOptNeedsDisabled ) ) ) ; }
private int buildBatteryLevelInt ( ) { return ( ( ( ( ( int ) ( batteryLevel ) ) << 25 ) & - 33554432 ) | ( ( ( ( int ) ( batteryTemperature ) ) << 14 ) & 33538048 ) ) | ( ( ( int ) ( batteryVoltage ) ) & 16383 ) ; }
public void testCannotSetFixedLengthStreamingModeAfterConnect ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; org.junit.Assert.assertEquals ( "A" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; try { connection.setFixedLengthStreamingMode ( 1 ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
private com.android.bluetooth.a2dp.A2dpService getService ( ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.a2dp.A2dpService.TAG , "A2DP call not allowed for non-active user" ) ; return null ; } if ( ( ( mService ) != null ) && ( mService.isAvailable ( ) ) ) { return mService ; } return null ; }
public static java.lang.invoke.MethodHandle explicitCastArguments ( java.lang.invoke.MethodHandle target , java.lang.invoke.MethodType newType ) { java.lang.invoke.MethodHandles.explicitCastArgumentsChecks ( target , newType ) ; java.lang.invoke.MethodType oldType = target.type ( ) ; if ( oldType == newType ) return target ; if ( oldType.explicitCastEquivalentToAsType ( newType ) ) { return target.asFixedArity ( ) . asType ( newType ) ; } return new java.lang.invoke.Transformers.ExplicitCastArguments ( target , newType ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; mLooper = new android.os.test.TestLooper ( ) ; org.mockito.Mockito.when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; org.mockito.Mockito.when ( mWifiInjector.getWifiNative ( ) ) . thenReturn ( mWifiNative ) ; mRttServiceImpl = new com.android.server.wifi.RttService.RttServiceImpl ( mContext , mLooper.getLooper ( ) , mWifiInjector ) ; mRttServiceImpl.startService ( ) ; }
public java.util.Map < java.lang.String , java.lang.String > getNetworkExtra ( int netId , java.lang.String name ) { final java.lang.String extraString = getNetworkVariable ( netId , name ) ; if ( ( ( extraString == null ) || ( ! ( extraString.startsWith ( "\"" ) ) ) ) || ( ! ( extraString.endsWith ( "\"" ) ) ) ) { return null ; } return com.android.server.wifi.WifiNative.parseNetworkExtra ( com.android.server.wifi.util.NativeUtil.removeEnclosingQuotes ( extraString ) ) ; }
protected void _initWith ( com.android.builder.model.BaseConfig that ) { mBuildConfigLines.clear ( ) ; mBuildConfigLines.addAll ( that.getBuildConfig ( ) ) ; mProguardFiles.clear ( ) ; mProguardFiles.addAll ( that.getProguardFiles ( ) ) ; mConsumerProguardFiles.clear ( ) ; mConsumerProguardFiles.addAll ( that.getConsumerProguardFiles ( ) ) ; }
public void testStageInstallWithErrorCode_withMissingDistroVersionFile ( ) throws java.lang.Exception { byte [ ] distroBytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) . clearVersionForTests ( ) . buildUnvalidatedBytes ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( new com.android.timezone.distro.TimeZoneDistro ( distroBytes ) ) ) ; assertNoDistroOperationStaged ( ) ; assertNoInstalledDistro ( ) ; }
public void handle ( com.android.ide.common.api.INode n ) { java.lang.String attribute = ( actionId.equals ( com.android.ide.common.layout.BaseLayoutRule.ACTION_FILL_WIDTH ) ) ? com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH : com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT ; java.lang.String value ; if ( newValue ) { if ( supportsMatchParent ( ) ) { value = com.android.ide.common.layout.LayoutConstants.VALUE_MATCH_PARENT ; } else { value = com.android.ide.common.layout.LayoutConstants.VALUE_FILL_PARENT ; } } else { value = com.android.ide.common.layout.LayoutConstants.VALUE_WRAP_CONTENT ; } for ( com.android.ide.common.api.INode child : targets ) { child.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , attribute , value ) ; } }
private static boolean featureProvidedByGradle ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.Nullable java.lang.String minGradleVersionString ) { if ( minGradleVersionString == null ) { return false ; } com.android.ide.common.repository.GradleVersion gradleModelVersion = context.getProject ( ) . getGradleModelVersion ( ) ; if ( gradleModelVersion != null ) { com.android.ide.common.repository.GradleVersion minVersion = com.android.ide.common.repository.GradleVersion.tryParse ( minGradleVersionString ) ; if ( ( minVersion != null ) && ( ( gradleModelVersion.compareIgnoringQualifiers ( minVersion ) ) >= 0 ) ) { return true ; } } return false ; }
public void testAesCbcHmacSha256Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mReceiver = new com.android.ddmlib.Device.SysFsBatteryLevelReceiver ( ) ; java.util.Random r = new java.util.Random ( java.lang.System.currentTimeMillis ( ) ) ; mExpected1 = r.nextInt ( 101 ) ; mExpected2 = r.nextInt ( 101 ) ; }
public void exit ( ) { mIPv6TetherSvc.stop ( ) ; try { mNMService.untetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception e ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR ; mLog.e ( ( "Failed to untether interface: " + e ) ) ; } configureIfaceIp ( false ) ; }
protected boolean isSupported ( ) throws java.lang.Exception { if ( ! ( mIsDataSaverSupported ) ) { android.util.Log.i ( com.android.cts.net.hostside.TAG , ( ( ( ( "Skipping " + ( getClass ( ) ) ) + "." ) + ( getName ( ) ) ) + "() because device does not support Data Saver Mode" ) ) ; } return ( mIsDataSaverSupported ) && ( super . isSupported ( ) ) ; }
public void run ( ) { com.android.ddmuilib.logcat.LogPanel.PsOutputReceiver psor = new com.android.ddmuilib.logcat.LogPanel.PsOutputReceiver ( md.pid , newFilter , newTabItem ) ; try { mCurrentLoggedDevice.executeShellCommand ( "ps" , psor ) ; } catch ( java.io.IOException e ) { } catch ( com.android.ddmlib.TimeoutException e ) { } catch ( com.android.ddmlib.AdbCommandRejectedException e ) { } catch ( com.android.ddmlib.ShellCommandUnresponsiveException e ) { } }
private void insert ( android.database.sqlite.SQLiteDatabase writeableDatabase , com.google.common.collect.ImmutableList < com.android.dialer.speeddial.database.SpeedDialEntry > entries ) { for ( com.android.dialer.speeddial.database.SpeedDialEntry entry : entries ) { com.android.dialer.common.Assert.checkArgument ( ( ( entry.id ( ) ) == null ) ) ; if ( ( writeableDatabase.insert ( com.android.dialer.speeddial.database.SpeedDialEntryDatabaseHelper.TABLE_NAME , null , buildContentValuesWithoutId ( entry ) ) ) == ( - 1L ) ) { throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( "Attempted to insert a row that already exists." ) ; } } }
protected void onDetachedFromWindow ( ) { super . onDetachedFromWindow ( ) ; getViewTreeObserver ( ) . removeOnPreDrawListener ( mOnPreDrawListenerForKeyLayoutAdjust ) ; }
protected boolean mediaFilesExistOnDevice ( com.android.tradefed.device.ITestDevice device ) throws com.android.tradefed.device.DeviceNotAvailableException { for ( android.mediastress.cts.preconditions.MediaPreparer.Resolution resolution : android.mediastress.cts.preconditions.MediaPreparer.RESOLUTIONS ) { if ( ( resolution.width ) > ( mMaxRes.width ) ) { break ; } java.lang.String deviceShortFilePath = ( mBaseDeviceShortDir ) + ( resolution.toString ( ) ) ; java.lang.String deviceFullFilePath = ( mBaseDeviceFullDir ) + ( resolution.toString ( ) ) ; if ( ( ! ( device.doesFileExist ( deviceShortFilePath ) ) ) || ( ! ( device.doesFileExist ( deviceFullFilePath ) ) ) ) { return false ; } } return true ; }
public void createAndroidTasks ( org.gradle.model.ModelMap < org.gradle.api.Task > tasks , org.gradle.model.ModelMap < com.android.build.gradle.model.AndroidComponentSpec > androidSpecs , com.android.build.gradle.internal.TaskManager taskManager , com.android.build.gradle.internal.SdkHandler sdkHandler , org.gradle.api.Project project , com.android.build.gradle.model.AndroidComponentModelSourceSet androidSources ) { for ( final java.io.File file : sdkHandler.getSdkLoader ( ) . getRepositories ( ) ) { project.getRepositories ( ) . maven ( new org.gradle.api.Action < org.gradle.api.artifacts.repositories.MavenArtifactRepository > ( ) { @ java.lang.Override public void execute ( org.gradle.api.artifacts.repositories.MavenArtifactRepository repo ) { repo.setUrl ( file.toURI ( ) ) ; } } ) ; } }
private java.lang.String fromHex ( java.lang.String hexPassword ) { if ( hexPassword == null ) { return null ; } final byte [ ] bytes ; try { bytes = libcore.util.HexEncoding.decode ( hexPassword.toCharArray ( ) , false ) ; } catch ( java.lang.IllegalArgumentException e ) { return null ; } return new java.lang.String ( bytes , java.nio.charset.StandardCharsets.UTF_8 ) ; }
boolean isExpired ( com.google.common.cache.LocalCache.ReferenceEntry < K , V > entry , long now ) { com.google.common.base.Preconditions.checkNotNull ( entry ) ; if ( ( expiresAfterAccess ( ) ) && ( ( now - ( entry.getAccessTime ( ) ) ) >= ( expireAfterAccessNanos ) ) ) { return true ; } if ( ( expiresAfterWrite ( ) ) && ( ( now - ( entry.getWriteTime ( ) ) ) >= ( expireAfterWriteNanos ) ) ) { return true ; } return false ; }
public < T > T when ( T mock ) { return org.mockito.Mockito.doAnswer ( new org.mockito.stubbing.Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocation ) throws java.lang.Exception { latch.countDown ( ) ; return result ; } } ) . when ( mock ) ; }
protected com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface ( @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JTypeLookupException { assert ! ( deletedItems.contains ( simpleName ) ) ; for ( com.android.jack.load.PackageLoader loader : loaders ) { try { return loader.loadClassOrInterface ( this , simpleName ) ; } catch ( com.android.jack.lookup.JLookupException e ) { } } throw new com.android.jack.ir.ast.MissingJTypeLookupException ( this , simpleName ) ; }
public final short getSecondIndexUnit ( ) { assert ( secondIndexType ) != ( com.android.jack.dx.io.IndexType.NONE ) ; return ( ( short ) ( secondIndex ) ) ; }
public boolean matchesNationalNumber ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneNumberDesc numberDesc , boolean allowPrefixMatch ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.nationalNumberPattern ) . matcher ( nationalNumber ) ; return ( nationalNumberPatternMatcher.matches ( ) ) || ( allowPrefixMatch && ( nationalNumberPatternMatcher.lookingAt ( ) ) ) ; }
private boolean canReadPhoneState ( java.lang.String callingPackage , java.lang.String message ) { try { return com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mContext , callingPackage , message ) ; } catch ( java.lang.SecurityException e ) { return false ; } }
public java.util.List < com.android.tools.lint.detector.api.Project > getAllLibraries ( ) { if ( ( mAllLibraries ) == null ) { if ( mDirectLibraries.isEmpty ( ) ) { return mDirectLibraries ; } java.util.List < com.android.tools.lint.detector.api.Project > all = new java.util.ArrayList < com.android.tools.lint.detector.api.Project > ( ) ; addLibraryProjects ( all ) ; mAllLibraries = all ; } return mAllLibraries ; }
public static void openDrawer ( int drawerLayoutId , int gravity ) { if ( android.support.test.espresso.contrib.DrawerActions.checkDrawer ( drawerLayoutId , android.support.test.espresso.contrib.DrawerMatchers.isOpen ( ) ) ) { return ; } android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( drawerLayoutId ) ) . perform ( android.support.test.espresso.contrib.DrawerActions.registerListener ( ) ) . perform ( android.support.test.espresso.contrib.DrawerActions.actionOpenDrawer ( gravity ) ) . perform ( android.support.test.espresso.contrib.DrawerActions.unregisterListener ( ) ) ; }
public void onLooperPrepared ( ) { mCTUT = new com.android.internal.telephony.imsphone.ImsPhoneCallTracker ( mImsPhone ) ; mCTUT.addReasonCodeRemapping ( null , "Wifi signal lost." , ImsReasonInfo.CODE_WIFI_LOST ) ; mCTUT.addReasonCodeRemapping ( 501 , "Call answered elsewhere." , ImsReasonInfo.CODE_ANSWERED_ELSEWHERE ) ; mCTUT.addReasonCodeRemapping ( 510 , "Call answered elsewhere." , ImsReasonInfo.CODE_ANSWERED_ELSEWHERE ) ; mCTHander = new android.os.Handler ( mCTUT.getLooper ( ) ) ; setReady ( true ) ; }
synchronized void nAllocationRead2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationRead2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
public static com.intellij.openapi.util.Pair < git4idea.repo.GitRemote , java.lang.String > findGCPRemote ( @ org.jetbrains.annotations.NotNull git4idea.repo.GitRepository repository ) { for ( git4idea.repo.GitRemote gitRemote : repository.getRemotes ( ) ) { for ( java.lang.String remoteUrl : gitRemote.getUrls ( ) ) { if ( com.google.gct.idea.git.GcpHttpAuthDataProvider.isUrlGCP ( remoteUrl ) ) { return com.intellij.openapi.util.Pair.create ( gitRemote , remoteUrl ) ; } } } return null ; }
private void visit ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element parent , org.w3c.dom.Node node ) { if ( ( node.getNodeType ( ) ) == ( org.w3c.dom.Node.TEXT_NODE ) ) { check ( context , parent , node , node.getNodeValue ( ) ) ; } else { org.w3c.dom.NodeList children = node.getChildNodes ( ) ; for ( int i = 0 , n = children.getLength ( ) ; i < n ; i ++ ) { visit ( context , parent , children.item ( i ) ) ; } } }
protected final java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > doGetConfiguredResources ( @ com.android.annotations.NonNull com.android.ide.common.resources.configuration.FolderConfiguration referenceConfig ) { ensureInitialized ( ) ; java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > map = new java.util.EnumMap < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > ( com.android.resources.ResourceType.class ) ; for ( com.android.resources.ResourceType key : com.android.resources.ResourceType.values ( ) ) { map.put ( key , getConfiguredResource ( key , referenceConfig ) ) ; } return map ; }
public void testGetPlaybackUri ( ) throws java.lang.Exception { android.telephony.mbms.StreamingService streamingService = mStreamingSession.startStreaming ( CtsStreamingService.STREAMING_SERVICE_INFO , mCallbackExecutor , mStreamingServiceCallback ) ; assertEquals ( CtsStreamingService.STREAMING_URI , streamingService.getPlaybackUri ( ) ) ; java.util.List < java.util.List < java.lang.Object > > getPlaybackUriCalls = getMiddlewareCalls ( CtsStreamingService.METHOD_GET_PLAYBACK_URI ) ; assertEquals ( 1 , getPlaybackUriCalls.size ( ) ) ; assertEquals ( CtsStreamingService.STREAMING_SERVICE_INFO.getServiceId ( ) , getPlaybackUriCalls.get ( 0 ) . get ( 2 ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.$opt$TestAllocations ( ) ; Main.$opt$TestWithInitializations ( ) ; Main.$opt$TestNegativeValueNewByteArray ( ) ; Main.$opt$TestNegativeValueNewCharArray ( ) ; Main.testNegativeArraySize ( ) ; Main.testSmaliFilledNewArray ( ) ; Main.testSmaliFillArrayData ( ) ; Main.testSmaliVerifyError ( ) ; }
public void test_getCipherSuite ( ) { java.lang.String expectedCipherSuite = null ; for ( java.lang.String cipherSuite : libcore.java.security.StandardNames.CIPHER_SUITES_DEFAULT ) { if ( cipherSuite.contains ( "_RSA_" ) ) { expectedCipherSuite = cipherSuite ; break ; } } if ( expectedCipherSuite == null ) { fail ( "Failed to identify expected cipher suite" ) ; } assertEquals ( expectedCipherSuite , clientSession.getCipherSuite ( ) ) ; }
public void startService ( ) throws java.lang.Exception { mWifiScanningServiceImpl.startService ( ) ; mWifiScanningServiceImpl.setWifiHandlerLogForTest ( mLog ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mWifiScannerImplFactory ) ; android.os.Handler handler = org.mockito.Mockito.mock ( android.os.Handler.class ) ; com.android.internal.util.test.BidirectionalAsyncChannel controlChannel = connectChannel ( handler ) ; org.mockito.InOrder order = org.mockito.Mockito.inOrder ( handler ) ; com.android.server.wifi.scanner.WifiScanningServiceTest.sendBackgroundScanRequest ( controlChannel , 122 , generateValidScanSettings ( ) , null ) ; mLooper.dispatchAll ( ) ; com.android.server.wifi.scanner.WifiScanningServiceTest.verifyFailedResponse ( order , handler , 122 , WifiScanner.REASON_UNSPECIFIED , "not available" ) ; }
void saveCompatModes ( ) { java.util.HashMap < java.lang.String , java.lang.Integer > pkgs ; synchronized ( mService ) { pkgs = new java.util.HashMap < java.lang.String , java.lang.Integer > ( mPackages ) ; } java.io.FileOutputStream fos = null ; try { fos = mFile.startWrite ( ) ; org.xmlpull.v1.XmlSerializer out = new com.android.internal.util.FastXmlSerializer ( ) ; out.setOutput ( fos , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ; out.startDocument ( null , true ) ; out.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; out.startTag ( null , "compat-packages" ) ; final android.content.pm.IPackageManager pm = android.app.AppGlobals.getPackageManager ( ) ; final int screenLayout = mService.mConfiguration.screenLayout ; final int smallestScreenWidthDp = mService.mConfiguration.smallestScreenWidthDp ; final java.util.Iterator < java.util.Map.Entry < java.lang.String , java.lang.Integer > > it = pkgs.entrySet ( ) . iterator ( ) ; while ( it.hasNext ( ) ) { java.util.Map.Entry < java.lang.String , java.lang.Integer > entry = it.next ( ) ; java.lang.String pkg = entry.getKey ( ) ; int mode = entry.getValue ( ) ; if ( mode == 0 ) { continue ; } android.content.pm.ApplicationInfo ai = null ; try { ai = pm.getApplicationInfo ( pkg , 0 , 0 ) ; } catch ( android.os.RemoteException e ) { } if ( ai == null ) { continue ; } android.content.res.CompatibilityInfo info = new android.content.res.CompatibilityInfo ( ai , screenLayout , smallestScreenWidthDp , false ) ; if ( info.alwaysSupportsScreen ( ) ) { continue ; } if ( info.neverSupportsScreen ( ) ) { continue ; } out.startTag ( null , "pkg" ) ; out.attribute ( null , "name" , pkg ) ; out.attribute ( null , "mode" , java.lang.Integer.toString ( mode ) ) ; out.endTag ( null , "pkg" ) ; } out.endTag ( null , "compat-packages" ) ; out.endDocument ( ) ; mFile.finishWrite ( fos ) ; } catch ( java.io.IOException e1 ) { android.util.Slog.w ( TAG , "Error writing compat packages" , e1 ) ; if ( fos != null ) { mFile.failWrite ( fos ) ; } } }
public void testPercentageRounding ( ) throws java.lang.Exception { java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance ( java.util.Locale.US ) ; assertEquals ( "15%" , nf.format ( 0.149 ) ) ; assertEquals ( "14%" , nf.format ( 0.142 ) ) ; nf.setRoundingMode ( java.math.RoundingMode.UP ) ; assertEquals ( "15%" , nf.format ( 0.142 ) ) ; nf.setRoundingMode ( java.math.RoundingMode.DOWN ) ; assertEquals ( "14%" , nf.format ( 0.149 ) ) ; nf.setMaximumFractionDigits ( 1 ) ; assertEquals ( "14.9%" , nf.format ( 0.149 ) ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ThisReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { assert getTypeMap ( ) . get ( x.resolvedType ) . isSameType ( curClass.type ) ; push ( makeThisRef ( makeSourceInfo ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
private org.apache.harmony.dalvik.ddmc.Chunk handleMPSEOrSPSE ( org.apache.harmony.dalvik.ddmc.Chunk request , java.lang.String type ) { if ( android.ddm.DdmHandleProfiling.DEBUG ) { android.util.Log.v ( "ddm-heap" , ( type + " prof stream end" ) ) ; } try { android.os.Debug.stopMethodTracing ( ) ; } catch ( java.lang.RuntimeException re ) { android.util.Log.w ( "ddm-heap" , ( ( type + " prof stream end failed: " ) + ( re.getMessage ( ) ) ) ) ; return createFailChunk ( 1 , re.getMessage ( ) ) ; } return null ; }
public void testNoResidualPermissionsOnUninstall ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testNoResidualPermissionsOnUninstall_part1" ) ; assertNull ( getDevice ( ) . uninstallPackage ( android.appsecurity.cts.PermissionsHostTest.PKG ) ) ; assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testNoResidualPermissionsOnUninstall_part2" ) ; }
public void shutdown ( ) { if ( ( mBluetoothAdapter.getState ( ) ) == ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) { for ( com.googlecode.android_scripting.facade.bluetooth.BluetoothLeAdvertiseFacade.MyAdvertiseCallback mAdvertise : mAdvertiseCallbackList.values ( ) ) { if ( mAdvertise != null ) { try { mBluetoothAdapter.getBluetoothLeAdvertiser ( ) . stopAdvertising ( mAdvertise ) ; } catch ( java.lang.NullPointerException e ) { com.googlecode.android_scripting.Log.e ( "Failed to stop ble advertising." , e ) ; } } } } mAdvertiseCallbackList.clear ( ) ; mAdvertiseSettingsList.clear ( ) ; mAdvertiseDataList.clear ( ) ; }
public final void test_setHostnameVerifier ( ) { javax.net.ssl.HttpsURLConnection con = new org.apache.harmony.tests.javax.net.ssl.MyHttpsURLConnection ( null ) ; try { con.setHostnameVerifier ( null ) ; fail ( "No expected IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } org.apache.harmony.tests.javax.net.ssl.myHostnameVerifier hnv = new org.apache.harmony.tests.javax.net.ssl.myHostnameVerifier ( ) ; con.setHostnameVerifier ( hnv ) ; }
public void test_getLast ( ) { assertTrue ( "Returned incorrect first element" , ll.getLast ( ) . equals ( objArray [ ( ( objArray.length ) - 1 ) ] ) ) ; java.util.LinkedList list = new java.util.LinkedList ( ) ; try { list.getLast ( ) ; fail ( "Should throw NoSuchElementException" ) ; } catch ( java.util.NoSuchElementException e ) { } }
public void checkClientTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.net.Socket socket ) throws java.security.cert.CertificateException { javax.net.ssl.SSLSession session = null ; javax.net.ssl.SSLParameters parameters = null ; if ( socket instanceof javax.net.ssl.SSLSocket ) { javax.net.ssl.SSLSocket sslSocket = ( ( javax.net.ssl.SSLSocket ) ( socket ) ) ; session = org.conscrypt.TrustManagerImpl.getHandshakeSessionOrThrow ( sslSocket ) ; parameters = sslSocket.getSSLParameters ( ) ; } checkTrusted ( chain , authType , session , parameters , true ) ; }
public static com.android.jack.jayce.JayceInternalWriter get ( @ javax.annotation.Nonnull com.android.jack.library.OutputJackLibrary outputJackLibrary , @ javax.annotation.Nonnull java.io.OutputStream out ) { com.android.jack.jayce.v0002.io.JayceInternalWriterImpl jayceWriter = new com.android.jack.jayce.v0002.io.JayceInternalWriterImpl ( out ) ; outputJackLibrary.putProperty ( FileType.JAYCE.buildPropertyName ( null ) , java.lang.String.valueOf ( true ) ) ; outputJackLibrary.putProperty ( JayceProperties.KEY_JAYCE_MAJOR_VERSION , java.lang.String.valueOf ( com.android.jack.jayce.JayceWriterFactory.DEFAULT_MAJOR_VERSION ) ) ; outputJackLibrary.putProperty ( JayceProperties.KEY_JAYCE_MINOR_VERSION , java.lang.String.valueOf ( jayceWriter.getCurrentMinor ( ) ) ) ; return jayceWriter ; }
public synchronized void err ( @ com.android.annotations.Nullable java.lang.String line ) { if ( com.google.common.base.Strings.isNullOrEmpty ( line ) ) { return ; } com.android.builder.png.AaptProcess.NotifierProcessOutput delegate = getNotifier ( ) ; if ( delegate != null ) { mLogger.verbose ( "AAPT err(%1$s): %2$s -> %3$s" , mProcess.hashCode ( ) , line , delegate.mJob ) ; delegate.err ( line ) ; } else { mLogger.error ( null , "AAPT err(%1$s) : No Delegate set : lost message:%2$s" , mProcess.hashCode ( ) , line ) ; } }
public void onBackPressed ( ) { final int previousScreenType = getIntent ( ) . getIntExtra ( com.android.contacts.quickcontact.QuickContactActivity.EXTRA_PREVIOUS_SCREEN_TYPE , ScreenType.UNKNOWN ) ; if ( ( ( previousScreenType == ( com.android.contacts.logging.ScreenEvent.ScreenType.ALL_CONTACTS ) ) || ( previousScreenType == ( com.android.contacts.logging.ScreenEvent.ScreenType.FAVORITES ) ) ) && ( ! ( com.android.contacts.util.SharedPreferenceUtil.getHamburgerPromoTriggerActionHappenedBefore ( this ) ) ) ) { com.android.contacts.util.SharedPreferenceUtil.setHamburgerPromoTriggerActionHappenedBefore ( this ) ; } if ( ( mScroller ) != null ) { if ( ! ( mIsExitAnimationInProgress ) ) { mScroller.scrollOffBottom ( ) ; } } else { super . onBackPressed ( ) ; } }
public E next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java.util.NoSuchElementException ( ) ; } prePosition = ( position ) ++ ; return type.get ( new java.util.MapEntry < KT , VT > ( enumMap.keys [ prePosition ] , enumMap.values [ prePosition ] ) ) ; }
private static org.eclipse.swt.graphics.Font getFont ( int size , boolean bold ) { org.eclipse.swt.graphics.FontData [ ] fontData = com.android.hierarchyviewerlib.ui.TreeView.sSystemFont.getFontData ( ) ; for ( int i = 0 ; i < ( fontData.length ) ; i ++ ) { fontData [ i ] . setHeight ( size ) ; if ( bold ) { fontData [ i ] . setStyle ( SWT.BOLD ) ; } } return new org.eclipse.swt.graphics.Font ( org.eclipse.swt.widgets.Display.getDefault ( ) , fontData ) ; }
boolean setBluetoothClass ( android.bluetooth.BluetoothClass bluetoothClass ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PRIVILEGED , "Need BLUETOOTH PRIVILEGED permission" ) ; boolean result = mAdapterProperties.setBluetoothClass ( bluetoothClass.getClassOfDeviceBytes ( ) ) ; if ( ! result ) { android.util.Log.e ( com.android.bluetooth.btservice.AdapterService.TAG , ( ( "Failed to set BluetoothClass (" + bluetoothClass ) + ") on local Bluetooth adapter." ) ) ; } return result && ( storeBluetoothClassConfig ( bluetoothClass.getClassOfDevice ( ) ) ) ; }
private static java.lang.String sanitize ( @ com.android.annotations.NonNull java.lang.String str ) { if ( str.startsWith ( AndroidTargetHash.PLATFORM_HASH_PREFIX ) ) { java.lang.String platform = str.substring ( AndroidTargetHash.PLATFORM_HASH_PREFIX.length ( ) ) ; if ( ( ! ( platform.isEmpty ( ) ) ) && ( ! ( java.lang.Character.isDigit ( platform.charAt ( 0 ) ) ) ) ) { return str ; } } str = str.toLowerCase ( java.util.Locale.US ) . replaceAll ( "[^a-z0-9_.-]+" , "_" ) . replaceAll ( "_+" , "_" ) ; return str ; }
public java.util.List < T > waitForTasks ( ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException { java.util.List < T > results = com.google.common.collect.Lists.newArrayListWithCapacity ( mCount ) ; for ( int i = 0 ; i < ( mCount ) ; i ++ ) { java.util.concurrent.Future < T > result = mCompletionService.take ( ) ; results.add ( result.get ( ) ) ; } return results ; }
public static < K , V > java.util.Map < K , java.util.List < V > > asMap ( com.google.common.collect.ListMultimap < K , V > multimap ) { return ( ( java.util.Map < K , java.util.List < V > > ) ( ( java.util.Map < K , ? > ) ( multimap.asMap ( ) ) ) ) ; }
public java.util.Collection < com.android.builder.model.JavaLibrary > getJavaLibraries ( ) { java.util.Set < java.io.File > files = configuration.getFiles ( ) ; if ( files.isEmpty ( ) ) { return java.util.Collections.emptySet ( ) ; } java.util.Set < com.android.builder.model.JavaLibrary > javaLibraries = com.google.common.collect.Sets.newHashSet ( ) ; for ( java.io.File file : files ) { javaLibraries.add ( new com.android.build.gradle.internal.model.JavaLibraryImpl ( file ) ) ; } return javaLibraries ; }
public void test_tryLock_After_Release ( ) throws java.lang.Exception { fileLock = writeOnlyFileChannel.tryLock ( ) ; fileLock.release ( ) ; fileLock = writeOnlyFileChannel.tryLock ( ) ; assertTrue ( fileLock.isValid ( ) ) ; fileLock.release ( ) ; fileLock = writeOnlyFileChannel.tryLock ( ) ; assertTrue ( fileLock.isValid ( ) ) ; fileLock.release ( ) ; fileLock = writeOnlyFileChannel2.tryLock ( ) ; assertTrue ( fileLock.isValid ( ) ) ; }
protected java.util.List < com.intellij.ui.tabs.impl.TabInfo > getVisibleInfos ( ) { if ( ! ( isAlphabeticalMode ( ) ) ) { return myVisibleInfos ; } else { java.util.List < com.intellij.ui.tabs.impl.TabInfo > sortedCopy = new java.util.ArrayList < com.intellij.ui.tabs.impl.TabInfo > ( myVisibleInfos ) ; java.util.Collections.sort ( sortedCopy , com.intellij.ui.tabs.impl.JBTabsImpl.ABC_COMPARATOR ) ; return sortedCopy ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JPhiBlockElement x ) { com.android.jack.ir.ast.JSsaVariableDefRef lhs = x.getLhs ( ) ; visit ( lhs ) ; print ( " = phi (" ) ; for ( com.android.jack.ir.ast.JSsaVariableUseRef rhs : x.getRhs ( ) ) { if ( rhs == null ) { print ( "?" ) ; } else { visit ( rhs ) ; } space ( ) ; } print ( ")" ) ; return false ; }
public void onCreate ( ) { super . onCreate ( ) ; registerReceiver ( mBondStatusReceiver , new android.content.IntentFilter ( android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED ) ) ; mBluetoothManager = ( ( android.bluetooth.BluetoothManager ) ( getSystemService ( Context.BLUETOOTH_SERVICE ) ) ) ; mBluetoothAdapter = mBluetoothManager.getAdapter ( ) ; mScanner = mBluetoothAdapter.getBluetoothLeScanner ( ) ; mHandler = new android.os.Handler ( ) ; mContext = this ; mNotifyCount = 0 ; mTaskQueue = new com.android.cts.verifier.bluetooth.TestTaskQueue ( ( ( getClass ( ) . getName ( ) ) + "_taskHandlerThread" ) ) ; }
public void testInvalidTrace ( ) { com.android.tools.perflib.vmtrace.CallStackReconstructor reconstructor = new com.android.tools.perflib.vmtrace.CallStackReconstructor ( 255 ) ; try { reconstructor.addTraceAction ( 1 , TraceAction.METHOD_ENTER , 1 , 1 ) ; reconstructor.addTraceAction ( 2 , TraceAction.METHOD_EXIT , 1 , 1 ) ; fail ( "Runtime Exception should've been thrown by the previous statement" ) ; } catch ( java.lang.RuntimeException e ) { } }
private static java.lang.String truncate ( java.lang.String text , org.eclipse.jface.viewers.StyledString string ) { int existingLength = string.length ( ) ; if ( ( ( text.length ( ) ) + existingLength ) > ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.OutlinePage.LABEL_MAX_WIDTH ) ) { int truncatedLength = ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.OutlinePage.LABEL_MAX_WIDTH ) - existingLength ) - 3 ; if ( truncatedLength > 0 ) { return java.lang.String.format ( "%1$s..." , text.substring ( 0 , truncatedLength ) ) ; } else { return "" ; } } return text ; }
private void deleteAvd ( ) { try { java.lang.String avdName = mSdkCommandLine.getParamName ( ) ; com.android.sdklib.internal.avd.AvdManager avdManager = getAvdManager ( ) ; com.android.sdklib.internal.avd.AvdInfo info = avdManager.getAvd ( avdName , false ) ; if ( info == null ) { errorAndExit ( "There is no Android Virtual Device named '%s'." , avdName ) ; return ; } avdManager.deleteAvd ( info , mSdkLog ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
public void run ( ) { android.renderscript.RenderScript pRS = createRenderScript ( true ) ; com.android.rs.unittest.ScriptC_fp_mad s = new com.android.rs.unittest.ScriptC_fp_mad ( pRS ) ; s.invoke_fp_mad_test ( 0 , 0 ) ; pRS.finish ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
public boolean hasWaiters ( com.google.common.util.concurrent.Monitor.Guard guard ) { return ( getWaitQueueLength ( guard ) ) > 0 ; }
protected void finalizeFuzzyImageUsingSharpImage ( ) { long startnow ; long endnow ; startnow = java.lang.System.nanoTime ( ) ; scriptC.forEach_FinalizeFuzzyImageUsingSharpImage ( buffers.inAllocation ) ; endnow = java.lang.System.nanoTime ( ) ; logTiming ( com.android.rs.refocus.d1new.RefocusFilterd1new.myTAG , "FinalizeFuzzyImageUsingSharpImage" , ( endnow - startnow ) ) ; }
private void fillUi ( ) { if ( ( ( com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ) != null ) && ( mProject.isOpen ( ) ) ) { com.android.ide.eclipse.adt.internal.project.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState ( mProject ) ; mPropertiesWorkingCopy = state.getProperties ( ) . makeWorkingCopy ( ) ; com.android.sdklib.IAndroidTarget target = state.getTarget ( ) ; if ( target != null ) { mSelector.setSelection ( target ) ; } mIsLibrary.setSelection ( state.isLibrary ( ) ) ; mLibraryDependencies.setContent ( state , mPropertiesWorkingCopy ) ; } }
private void clearWeights ( com.android.ide.common.api.INode parentNode ) { java.lang.String sizeAttribute = ( isVertical ( parentNode ) ) ? com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT : com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH ; for ( com.android.ide.common.api.INode target : parentNode.getChildren ( ) ) { target.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WEIGHT , null ) ; java.lang.String size = target.getStringAttr ( com.android.util.XmlUtils.ANDROID_URI , sizeAttribute ) ; if ( ( size != null ) && ( size.startsWith ( "0" ) ) ) { target.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , sizeAttribute , com.android.ide.common.layout.LayoutConstants.VALUE_WRAP_CONTENT ) ; } } }
private static int linearForNEUp ( ) { int [ ] x = new int [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int result = 0 ; for ( int i = 0 ; i != 10 ; i ++ ) { result += x [ i ] ; } return result ; }
public java.nio.ByteBuffer put ( byte [ ] src , int srcOffset , int byteCount ) { checkIsAccessible ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkPutBounds ( 1 , src.length , srcOffset , byteCount ) ; this . block.pokeByteArray ( ( ( offset ) + ( position ) ) , src , srcOffset , byteCount ) ; position += byteCount ; return this ; }
void handlePreDhcpSetup ( ) { if ( ! ( mBluetoothConnectionActive ) ) { mWifiNative.setBluetoothCoexistenceMode ( WifiNative.BLUETOOTH_COEXISTENCE_MODE_DISABLED ) ; } setSuspendOptimizationsNative ( com.android.server.wifi.WifiStateMachine.SUSPEND_DUE_TO_DHCP , false ) ; mWifiNative.setPowerSave ( false ) ; getWifiLinkLayerStats ( ) ; if ( ( mWifiP2pChannel ) != null ) { android.os.Message msg = new android.os.Message ( ) ; msg.what = com.android.server.wifi.p2p.WifiP2pServiceImpl.BLOCK_DISCOVERY ; msg.arg1 = com.android.server.wifi.p2p.WifiP2pServiceImpl.ENABLED ; msg.arg2 = android.net.dhcp.DhcpClient.CMD_PRE_DHCP_ACTION_COMPLETE ; msg.obj = this ; mWifiP2pChannel.sendMessage ( msg ) ; } else { sendMessage ( DhcpClient.CMD_PRE_DHCP_ACTION_COMPLETE ) ; } }
public android.graphics.Bitmap getTaskTopThumbnail ( int id ) { synchronized ( this ) { enforceCallingPermission ( android.Manifest.permission.READ_FRAME_BUFFER , "getTaskTopThumbnail()" ) ; com.android.server.am.TaskRecord tr = taskForIdLocked ( id ) ; if ( tr != null ) { return mMainStack.getTaskTopThumbnailLocked ( tr ) ; } } return null ; }
public void resolveDependencies ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dependency.VariantDependencies variantDeps , @ com.android.annotations.Nullable com.android.build.gradle.internal.dependency.VariantDependencies testedVariantDeps , @ com.android.annotations.Nullable java.lang.String testedProjectPath ) { com.google.common.collect.Multimap < com.android.builder.dependency.LibraryDependency , com.android.build.gradle.internal.dependency.VariantDependencies > reverseMap = com.google.common.collect.ArrayListMultimap.create ( ) ; resolveDependencyForConfig ( variantDeps , testedVariantDeps , testedProjectPath , reverseMap ) ; processLibraries ( variantDeps.getLibraries ( ) , reverseMap ) ; }
void init ( ) { android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED ) ; filter.addAction ( BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT ) ; filter.addCategory ( ( ( ( android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY ) + "." ) + ( android.bluetooth.BluetoothAssignedNumbers.PLANTRONICS ) ) ) ; filter.addCategory ( ( ( ( android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY ) + "." ) + ( android.bluetooth.BluetoothAssignedNumbers.APPLE ) ) ) ; filter.addAction ( BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED ) ; com.android.bluetooth.btservice.RemoteDevices.mAdapterService.registerReceiver ( mReceiver , filter ) ; }
public java.lang.String computeFullNameWithSplits ( @ com.android.annotations.NonNull java.lang.String splitName ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String flavorName = getFlavorName ( ) ; if ( ! ( flavorName.isEmpty ( ) ) ) { sb.append ( flavorName ) ; sb.append ( com.android.utils.StringHelper.capitalize ( splitName ) ) ; } else { sb.append ( splitName ) ; } sb.append ( com.android.utils.StringHelper.capitalize ( mBuildType.getName ( ) ) ) ; if ( mType.isForTesting ( ) ) { sb.append ( mType.getSuffix ( ) ) ; } return sb.toString ( ) ; }
public boolean handlePinMmi ( java.lang.String dialString ) { com.android.internal.telephony.gsm.GsmMmiCode mmi = com.android.internal.telephony.gsm.GsmMmiCode.newFromDialString ( dialString , this , mUiccApplication.get ( ) ) ; if ( ( mmi != null ) && ( mmi.isPinCommand ( ) ) ) { mPendingMMIs.add ( mmi ) ; mMmiRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , mmi , null ) ) ; mmi.processCode ( ) ; return true ; } return false ; }
private android.bluetooth.BluetoothGattDescriptor getDescriptor ( ) { android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.CHARACTERISTIC_UUID ) ; if ( characteristic == null ) return null ; android.bluetooth.BluetoothGattDescriptor descriptor = characteristic.getDescriptor ( com.android.cts.verifier.bluetooth.BleClientService.DESCRIPTOR_UUID ) ; if ( descriptor == null ) { showMessage ( "Descriptor not found" ) ; return null ; } return descriptor ; }
private static void unprovide ( java.lang.String type , java.lang.String algorithm ) { java.util.Set < java.lang.String > algorithms = libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.get ( type ) ; org.junit.Assert.assertNotNull ( algorithms ) ; org.junit.Assert.assertTrue ( algorithm , algorithms.remove ( algorithm.toUpperCase ( java.util.Locale.ROOT ) ) ) ; if ( algorithms.isEmpty ( ) ) { org.junit.Assert.assertNotNull ( libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.remove ( type ) ) ; } }
public static < K , V > java.util.Map < K , java.util.SortedSet < V > > asMap ( com.google.common.collect.SortedSetMultimap < K , V > multimap ) { return ( ( java.util.Map < K , java.util.SortedSet < V > > ) ( ( java.util.Map < K , ? > ) ( multimap.asMap ( ) ) ) ) ; }
private void on_SitesTableViewer_checkStateChanged ( org.eclipse.jface.viewers.CheckStateChangedEvent event ) { java.lang.Object element = event.getElement ( ) ; if ( element instanceof com.android.sdklib.internal.repository.sources.SdkSource ) { com.android.sdklib.internal.repository.sources.SdkSource source = ( ( com.android.sdklib.internal.repository.sources.SdkSource ) ( element ) ) ; boolean isChecked = event.getChecked ( ) ; if ( ( source.isEnabled ( ) ) != isChecked ) { setReturnValue ( true ) ; source.setEnabled ( isChecked ) ; mSources.notifyChangeListeners ( ) ; } } }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( android.bluetooth.BluetoothMap.VDBG ) android.bluetooth.BluetoothMap.log ( "getClient()" ) ; final android.bluetooth.IBluetoothMap service = mService ; if ( service != null ) { try { return service.getClient ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothMap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothMap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothMap.DBG ) android.bluetooth.BluetoothMap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return null ; }
public void notifyWnmFrameReceived ( com.android.server.wifi.hotspot2.WnmData data ) { mCallbacks.onWnmFrameReceived ( data ) ; }
private static boolean isZero ( @ com.android.annotations.NonNull com.intellij.psi.PsiElement argument ) { if ( argument instanceof com.intellij.psi.PsiLiteral ) { java.lang.Object value = ( ( com.intellij.psi.PsiLiteral ) ( argument ) ) . getValue ( ) ; return ( value instanceof java.lang.Number ) && ( ( ( ( java.lang.Number ) ( value ) ) . intValue ( ) ) == 0 ) ; } return false ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "getConnectedDevices" ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( ) ; if ( service == null ) { return new java.util.ArrayList < > ( 0 ) ; } return service.getConnectedDevices ( ) ; }
public static com.android.sched.util.Version getVersion ( ) { if ( ( com.android.jack.Jack.version ) == null ) { try { com.android.jack.Jack.version = new com.android.sched.util.Version ( "jack" , com.android.jack.Jack.class . getClassLoader ( ) ) ; } catch ( java.io.IOException e ) { com.android.jack.Jack.logger.log ( java.util.logging.Level.SEVERE , "Failed to open Jack version file" , e ) ; throw new java.lang.AssertionError ( ) ; } } assert ( com.android.jack.Jack.version ) != null ; return com.android.jack.Jack.version ; }
public boolean isInactiveSync ( ) { boolean value ; if ( isCallerOnDifferentThread ( ) ) { android.os.Message response = sendMessageSynchronously ( com.android.internal.telephony.dataconnection.DcAsyncChannel.REQ_IS_INACTIVE ) ; if ( ( response != null ) && ( ( response.what ) == ( com.android.internal.telephony.dataconnection.DcAsyncChannel.RSP_IS_INACTIVE ) ) ) { value = rspIsInactive ( response ) ; } else { log ( ( "rspIsInactive error response=" + response ) ) ; value = false ; } } else { value = mDc.isInactive ( ) ; } return value ; }
private void deleteSelectedFilter ( ) { int selectedIndex = mFiltersTableViewer.getTable ( ) . getSelectionIndex ( ) ; if ( selectedIndex <= 0 ) { return ; } com.android.ddmlib.logcat.LogCatFilter f = mLogCatFilters.get ( selectedIndex ) ; mLogCatFilters.remove ( selectedIndex ) ; mLogCatFilterData.remove ( f ) ; mFiltersTableViewer.refresh ( ) ; mFiltersTableViewer.getTable ( ) . setSelection ( ( selectedIndex - 1 ) ) ; filterSelectionChanged ( ) ; saveFilterPreferences ( ) ; }
public com.intellij.xdebugger.impl.XBreakpoint < ? > getActiveNonLineBreakpoint ( ) { if ( ( myActiveNonLineBreakpoint ) != null ) { com.intellij.xdebugger.impl.XSourcePosition breakpointPosition = myActiveNonLineBreakpoint.getSourcePosition ( ) ; com.intellij.xdebugger.impl.XSourcePosition position = getTopFramePosition ( ) ; if ( ( breakpointPosition == null ) || ( ( position != null ) && ( ! ( ( breakpointPosition.getFile ( ) . equals ( position.getFile ( ) ) ) && ( ( breakpointPosition.getLine ( ) ) == ( position.getLine ( ) ) ) ) ) ) ) { return myActiveNonLineBreakpoint ; } } return null ; }
public void test002f ( ) throws java.lang.Exception { java.io.File jackOutput ; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream ( ) ; jackOutput = runTest002 ( true , "keep-first" , errOut , false , false ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( jackOutput ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH , "Res1" ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH , "Res2" ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH , "Res3" ) ; junit.framework.Assert.assertTrue ( errOut.toString ( ) . isEmpty ( ) ) ; }
private void unregisterAllAppEvents ( ) { for ( com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications ) { if ( app != null ) { app.unregisterForReady ( mHandler ) ; com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords ( ) ; if ( ir != null ) { ir.unregisterForRecordsLoaded ( mHandler ) ; ir.unregisterForRecordsEvents ( mHandler ) ; } } } }
public com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart getEditor ( ) { return mEditor ; }
public void setSmscAddress ( java.lang.String address , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS , result , mRILDefaultWorkSource ) ; rr.mParcel.writeString ( address ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " : " ) + address ) ) ; send ( rr ) ; }
void onExtrasChanged ( com.android.server.telecom.Call call , android.os.Bundle extras ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "onExtrasChanged" ) ) ) { try { logOutgoing ( "onExtrasChanged %s %s" , callId , extras ) ; mServiceInterface.onExtrasChanged ( callId , extras , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void update ( com.android.internal.telephony.CommandsInterface ci , com.android.internal.telephony.uicc.IccSlotStatus iss ) { log ( "slotStatus update" ) ; synchronized ( mLock ) { mCi = ci ; if ( ( iss.slotState ) == ( IccSlotStatus.SlotState.SLOTSTATE_INACTIVE ) ) { if ( mActive ) { mActive = false ; onRadioStateUnavailable ( ) ; mPhoneId = null ; } parseAtr ( iss.atr ) ; mCardState = iss.cardState ; mIccId = iss.iccid ; } else if ( ( ! ( mActive ) ) && ( ( iss.slotState ) == ( IccSlotStatus.SlotState.SLOTSTATE_ACTIVE ) ) ) { mActive = true ; } } }
public java.nio.ByteBuffer put ( int index , byte value ) { checkIsAccessible ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkIndex ( index ) ; this . block.pokeByte ( ( ( offset ) + index ) , value ) ; return this ; }
private java.util.Map < java.lang.Class < ? > , java.lang.Class < ? > > getGeneratedProxyClasses ( ) throws java.lang.Exception { java.lang.reflect.Field mapField = com.google.dexmaker.stock.ProxyBuilder.class . getDeclaredField ( "generatedProxyClasses" ) ; mapField.setAccessible ( true ) ; return ( ( java.util.Map < java.lang.Class < ? > , java.lang.Class < ? > > ) ( mapField.get ( null ) ) ) ; }
public void clearView ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearView ( ) ; } } ) ; return ; } mAwContents.clearView ( ) ; }
protected void onPostExecute ( com.android.contacts.util.MaterialColorMapUtils.MaterialPalette palette ) { super . onPostExecute ( palette ) ; if ( mHasComputedThemeColor ) { return ; } if ( imageViewDrawable == ( mPhotoView.getDrawable ( ) ) ) { mHasComputedThemeColor = true ; setThemeColor ( palette ) ; } }
public void testInvalidPackage ( ) throws java.lang.Exception { boolean output = false ; setupTestCase ( ) ; com.android.server.wifi.util.WifiPermissionsUtil codeUnderTest = new com.android.server.wifi.util.WifiPermissionsUtil ( mMockPermissionsWrapper , mMockContext , mMockWifiSettingsStore , mMockUserManager , mNetworkScoreManager , mWifiInjector ) ; try { output = codeUnderTest.canAccessScanResults ( com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME , mUid , mTargetVersion ) ; } catch ( java.lang.SecurityException e ) { throw e ; } }
private com.android.sdklib.repository.local.LocalPlatformToolPkgInfo scanPlatformTools ( java.io.File ptFolder ) { java.util.Properties props = parseProperties ( new java.io.File ( ptFolder , com.android.SdkConstants.FN_SOURCE_PROP ) ) ; com.android.sdklib.repository.FullRevision rev = com.android.sdklib.repository.local.PackageParserUtils.getPropertyFull ( props , PkgProps.PKG_REVISION ) ; if ( rev == null ) { return null ; } com.android.sdklib.repository.local.LocalPlatformToolPkgInfo info = new com.android.sdklib.repository.local.LocalPlatformToolPkgInfo ( this , ptFolder , props , rev ) ; return info ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { model.removeImageChangeListener ( this ) ; if ( ( image ) != null ) { image.dispose ( ) ; } crosshairColor.dispose ( ) ; transform.dispose ( ) ; if ( ( grid ) != null ) { grid.dispose ( ) ; } }
private void addProjectInfo ( java.util.Map < java.lang.String , java.lang.Object > parameters ) { parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_PACKAGE_NAME , mValues.packageName ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_APP_TITLE , mValues.applicationName ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API , mValues.minSdk ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API_LEVEL , mValues.minSdkLevel ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_TARGET_API , mValues.targetSdkLevel ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_BUILD_API , mValues.target.getVersion ( ) . getApiLevel ( ) ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_COPY_ICONS , ( ! ( mValues.createIcon ) ) ) ; parameters.putAll ( mValues.parameters ) ; }
public com.android.ims.internal.IImsServiceController getImsServiceControllerAndListen ( int slotIndex , @ android.telephony.TelephonyManager.Feature int feature , com.android.ims.internal.IImsServiceFeatureListener callback ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getImsServiceControllerAndListen ( slotIndex , feature , callback ) ; } } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , ( "getImsServiceControllerAndListen, RemoteException: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
private static java.math.BigInteger toUnsignedBigInteger ( long i ) { if ( i >= 0L ) return java.math.BigInteger.valueOf ( i ) ; else { int upper = ( ( int ) ( i > > > 32 ) ) ; int lower = ( ( int ) ( i ) ) ; return java.math.BigInteger.valueOf ( java.lang.Integer.toUnsignedLong ( upper ) ) . shiftLeft ( 32 ) . add ( java.math.BigInteger.valueOf ( java.lang.Integer.toUnsignedLong ( lower ) ) ) ; } }
public com.android.tools.perflib.heap.Heap getHeap ( int id ) { for ( int i = 0 ; i < ( mHeaps.size ( ) ) ; i ++ ) { if ( ( mHeaps.get ( i ) . getId ( ) ) == id ) { return mHeaps.get ( i ) ; } } return null ; }
public final void testJoin ( ) { assertEquals ( "foo" , com.android.ide.common.layout.BaseViewRule.join ( '|' , java.util.Arrays.asList ( "foo" ) ) ) ; assertEquals ( "" , com.android.ide.common.layout.BaseViewRule.join ( '|' , java.util.Collections.< java.lang.String > emptyList ( ) ) ) ; assertEquals ( "foo,bar" , com.android.ide.common.layout.BaseViewRule.join ( ',' , java.util.Arrays.asList ( "foo" , "bar" ) ) ) ; assertEquals ( "foo|bar" , com.android.ide.common.layout.BaseViewRule.join ( '|' , java.util.Arrays.asList ( "foo" , "bar" ) ) ) ; }
public void testElementReplacement ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String higherPriority = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" tools:node=\"replace\"" ) + " android:exported=\"true\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String lowerPriority = "" + ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\">\n" ) + " android:screenOrientation=\"landscape\">\n" ) + " <action android:label=\"@string/foo\"/>\n" ) + " </activity>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "higherPriority" ) , higherPriority ) ; com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "lowerPriority" ) , lowerPriority ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > result = refDocument.merge ( otherDocument , mergingReportBuilder ) ; assertTrue ( result.isPresent ( ) ) ; com.android.manifmerger.XmlDocument resultDocument = result.get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = resultDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; java.util.logging.Logger.getAnonymousLogger ( ) . info ( resultDocument.prettyPrint ( ) ) ; assertFalse ( refDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) . get ( ) . compareTo ( activityOne.get ( ) ) . isPresent ( ) ) ; }
private static void edgeSplitMoveExceptionsAndResults ( com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock block : cfg.getInternalBlocksUnordered ( ) ) { if ( ( ( ! ( block instanceof com.android.jack.ir.ast.cfg.JExitBasicBlock ) ) && ( ( com.android.jack.transformations.ssa.SsaUtil.getNumPredecessor ( block ) ) > 1 ) ) && ( block instanceof com.android.jack.ir.ast.cfg.JCatchBasicBlock ) ) { } } }
private com.android.server.audio.AudioService.ScoClient getScoClient ( android.os.IBinder cb , boolean create ) { synchronized ( mScoClients ) { for ( com.android.server.audio.AudioService.ScoClient existingClient : mScoClients ) { if ( ( existingClient.getBinder ( ) ) == cb ) { return existingClient ; } } if ( create ) { com.android.server.audio.AudioService.ScoClient newClient = new com.android.server.audio.AudioService.ScoClient ( cb ) ; mScoClients.add ( newClient ) ; return newClient ; } return null ; } }
private void updateAll ( boolean forceUpdate ) { if ( ( mTimeShiftManager.isAvailable ( ) ) && ( ! ( mTvView.isScreenBlocked ( ) ) ) ) { setEnabled ( true ) ; initializeTimeline ( ) ; mBackgroundView.setEnabled ( true ) ; setTextIfNeeded ( mBackgroundView , null ) ; } else { setEnabled ( false ) ; mBackgroundView.setEnabled ( false ) ; setTextIfNeeded ( mBackgroundView , mUnavailableMessage ) ; } updateControls ( forceUpdate ) ; }
public void testEmptyXml ( ) throws java.lang.Exception { java.lang.String document = "<?xml version=\"1.0\"?>" ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getValidator ( SdkRepoConstants.NS_LATEST_VERSION , handler ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "Premature end of file.*" , e.getMessage ( ) ) ; return ; } handler.verify ( ) ; fail ( ) ; }
private void _push ( com.android.builder.tasks.WorkQueue.QueueTask < T > task ) throws java.lang.InterruptedException { mPendingJobs.put ( task ) ; checkWorkforce ( ) ; }
public void run ( ) { keyListener.onKeyDown ( mTextView , mTextView.getEditableText ( ) , keyCode , new android.view.KeyEvent ( android.view.KeyEvent.ACTION_DOWN , keyCode ) ) ; }
public com.google.gct.testing.CloudConfigurationImpl copy ( java.lang.String prefix ) { com.google.gct.testing.CloudConfigurationImpl newConfiguration = ( prefix == null ) ? new com.google.gct.testing.CloudConfigurationImpl ( id , name , kind , icon , facet ) : new com.google.gct.testing.CloudConfigurationImpl ( ( prefix + ( name ) ) , kind , icon , facet ) ; newConfiguration.deviceDimension.enableAll ( deviceDimension.getEnabledTypes ( ) ) ; newConfiguration.apiDimension.enableAll ( apiDimension.getEnabledTypes ( ) ) ; newConfiguration.languageDimension.enableAll ( languageDimension.getEnabledTypes ( ) ) ; newConfiguration.orientationDimension.enableAll ( orientationDimension.getEnabledTypes ( ) ) ; return newConfiguration ; }
public void leave ( ) { final java.util.concurrent.locks.ReentrantLock lock = this . lock ; try { if ( ( lock.getHoldCount ( ) ) == 1 ) { signalNextWaiter ( ) ; } } finally { lock.unlock ( ) ; } }
public android.icu.impl.UResource.Key setBytes ( byte [ ] keyBytes , int keyOffset ) { bytes = keyBytes ; offset = keyOffset ; for ( length = 0 ; ( keyBytes [ ( keyOffset + ( length ) ) ] ) != 0 ; ++ ( length ) ) { } s = null ; return this ; }
public java.lang.String getMacAddress ( ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.getMacAddress ( ) ; } else { java.lang.String ret = doStringCommand ( "DRIVER MACADDR" ) ; if ( ! ( android.text.TextUtils.isEmpty ( ret ) ) ) { java.lang.String [ ] tokens = ret.split ( " = " ) ; if ( ( tokens.length ) == 2 ) return tokens [ 1 ] ; } return null ; } }
protected android.support.v8.renderscript.Script.InvokeID createInvokeID ( int slot ) { android.support.v8.renderscript.Script.InvokeID i = mIIDs.get ( slot ) ; if ( i != null ) { return i ; } long id = mRS.nScriptInvokeIDCreate ( getID ( mRS ) , slot ) ; if ( id == 0 ) { throw new android.support.v8.renderscript.RSDriverException ( "Failed to create KernelID" ) ; } i = new android.support.v8.renderscript.Script.InvokeID ( id , mRS , this , slot ) ; mIIDs.put ( slot , i ) ; return i ; }
private static boolean isCharacterType ( com.intellij.psi.PsiType type ) { if ( type == ( com.intellij.psi.PsiType.CHAR ) ) { return true ; } if ( type instanceof com.intellij.psi.PsiClassType ) { java.lang.String fqn = type.getCanonicalText ( ) ; return com.android.tools.lint.client.api.JavaParser.TYPE_CHARACTER_WRAPPER.equals ( fqn ) ; } return false ; }
public static void computeFract ( android.renderscript.cts.TestFract.ArgumentsFloatFloatFloat args ) { float floor = android.renderscript.cts.CoreMathVerifier.floor ( args.inV ) ; args.outFloor = new android.renderscript.cts.Floaty ( floor ) ; args.out = new android.renderscript.cts.Floaty ( java.lang.Math.min ( ( ( args.inV ) - floor ) , 0.99999994F ) , 0 , 1 ) ; }
public int removeRights ( java.lang.String path ) { if ( ( null == path ) || ( path.equals ( "" ) ) ) { throw new java.lang.IllegalArgumentException ( "Given path should be non null" ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState ( ) ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _removeRights ( mUniqueId , path ) ; }
public static long LongMatCond_LongVarVar ( long a , long b , long x , long y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } long result = ( a > b ) ? x : y ; return result + ( a > b ? 0L : 1L ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( ( mBluetoothGatt ) != null ) { mBluetoothGatt.disconnect ( ) ; mBluetoothGatt.close ( ) ; mBluetoothGatt = null ; } stopScan ( ) ; unregisterReceiver ( mBondStatusReceiver ) ; mTaskQueue.quit ( ) ; }
public final void testPkgTypeDoc ( ) { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_DOCS ; assertTrue ( p.hasMajorRevision ( ) ) ; assertFalse ( p.hasFullRevision ( ) ) ; assertTrue ( p.hasAndroidVersion ( ) ) ; assertFalse ( p.hasPath ( ) ) ; assertFalse ( p.hasVendorId ( ) ) ; assertFalse ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
private java.lang.invoke.MethodHandle findAccessor ( java.lang.Class < ? > refc , java.lang.String name , java.lang.Class < ? > type , int kind ) throws java.lang.IllegalAccessException , java.lang.NoSuchFieldException { final java.lang.reflect.Field field = findFieldOfType ( refc , name , type ) ; return findAccessor ( field , refc , type , kind , true ) ; }
public void copyFromUnchecked ( java.lang.Object array ) { copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; }
public final java.nio.MappedByteBuffer force ( ) { checkIsMapped ( ) ; if ( ( mapMode ) == ( java.nio.channels.FileChannel.MapMode.READ_WRITE ) ) { try { Libcore.os.msync ( block.toLong ( ) , block.getSize ( ) , java.nio.MS_SYNC ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw new java.lang.AssertionError ( errnoException ) ; } } return this ; }
private int getParameterSize ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { int paramSize = 0 ; if ( ! ( method.isStatic ( ) ) ) { paramSize += 1 ; } for ( com.android.jack.ir.ast.JParameter param : method.getParams ( ) ) { if ( ( param.getType ( ) . isSameType ( JPrimitiveTypeEnum.LONG.getType ( ) ) ) || ( param.getType ( ) . isSameType ( JPrimitiveTypeEnum.DOUBLE.getType ( ) ) ) ) { paramSize += 2 ; } else { paramSize += 1 ; } } return paramSize ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { return android.permission.cts.FileSystemPermissionTest.tryFileRead ( f ) ; }
public static void setUpClass ( ) { com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.class . getClassLoader ( ) . setDefaultAssertionStatus ( true ) ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.BOOTCLASSPATH = new java.io.File [ ] { com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/core-libart_intermediates/classes.zip" ) } ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.CLASSPATH = new java.io.File [ ] { com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/conscrypt_intermediates/classes.zip" ) , com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/okhttp_intermediates/classes.zip" ) , com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/core-junit_intermediates/classes.zip" ) , com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/bouncycastle_intermediates/classes.zip" ) , com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/ext_intermediates/classes.zip" ) } ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.SOURCELIST = com.android.jack.TestTools.getTargetLibSourcelist ( "framework" ) ; }
public void testCompile ( ) throws java.lang.Exception { java.io.File [ ] bootclasspath = new java.io.File [ ] { com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar" ) , com.android.jack.TestTools.getFromAndroidTree ( "out/host/common/obj/JAVA_LIBRARIES/junit4-hostdex-jack_intermediates/classes.jar" ) } ; com.android.jack.TestTools.runCompilation ( com.android.jack.TestTools.buildCommandLineArgs ( bootclasspath , null , com.android.jack.TestTools.getJackTestsWithJackFolder ( "comparison/test001" ) ) ) ; }
public static int ioctlInt ( java.io.FileDescriptor fd , int cmd , android.system.Int32Ref arg ) throws android.system.ErrnoException { return Libcore.os.ioctlInt ( fd , cmd , arg ) ; }
public boolean onSurfaceTextureDestroyed ( android.graphics.SurfaceTexture destroyedSurfaceTexture ) { com.android.dialer.common.LogUtil.i ( "SurfaceTextureListener.onSurfaceTextureDestroyed" , "destroyedSurfaceTexture: %s, %s, isDoneWithSurface: %b" , destroyedSurfaceTexture , this . toString ( ) , isDoneWithSurface ) ; if ( ( delegate ) != null ) { delegate.onSurfaceDestroyed ( this ) ; } else { com.android.dialer.common.LogUtil.e ( "SurfaceTextureListener.onSurfaceTextureDestroyed" , "delegate is null" ) ; } if ( isDoneWithSurface ) { onSurfaceReleased ( ) ; if ( ( savedSurface ) != null ) { savedSurface.release ( ) ; savedSurface = null ; } } return isDoneWithSurface ; }
public void addExistingConnection ( java.lang.String callId , android.telecom.ParcelableConnection connection , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , "CSW.aEC" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "addExistingConnection %s %s" , callId , connection ) ; com.android.server.telecom.Call existingCall = mCallsManager.createCallForExistingConnection ( callId , connection ) ; mCallIdMapper.addCall ( existingCall , callId ) ; existingCall.setConnectionService ( this ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void enter ( ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_CONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; if ( mUserManager.isUserUnlocked ( ) ) { mConnectionHandler.obtainMessage ( PbapClientConnectionHandler.MSG_DOWNLOAD ) . sendToTarget ( ) ; } }
public com.android.sched.vfs.VPath prependPath ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { assert ! ( path.isRoot ( ) ) ; if ( ! ( this . isRoot ( ) ) ) { pathFragments.add ( 0 , new com.android.sched.vfs.VPath.VPathFragment ( java.lang.String.valueOf ( com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) , com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) ) ; } pathFragments.addAll ( 0 , path.getPathFragments ( ) ) ; return this ; }
public void canBeTetheredAsUsb ( ) throws java.lang.Exception { initStateMachine ( android.net.ConnectivityManager.TETHERING_USB ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_REQUESTED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder ( mTetherHelper , mNMService ) ; inOrder.verify ( mNMService ) . getInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mNMService ) . setInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mInterfaceConfiguration ) ; inOrder.verify ( mNMService ) . tetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mTetherHelper ) . notifyInterfaceStateChange ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
private void updateCdmaOptions ( android.preference.PreferenceFragment prefFragment , android.preference.PreferenceScreen prefScreen , com.android.internal.telephony.Phone phone ) { if ( ( mCdmaOptions ) == null ) { mCdmaOptions = new com.android.phone.CdmaOptions ( prefFragment , prefScreen , phone ) ; } else { mCdmaOptions.update ( phone ) ; } }
public java.util.Set < ? extends javax.lang.model.element.Element > process ( com.google.common.collect.SetMultimap < java.lang.Class < ? extends java.lang.annotation.Annotation > , javax.lang.model.element.Element > elementsByAnnotation ) { for ( javax.lang.model.element.Element element : elementsByAnnotation.get ( com.android.dialer.inject.DialerRootComponent.class ) ) { if ( ( elementsByAnnotation.containsKey ( com.android.dialer.inject.InstallIn.class ) ) || ( elementsByAnnotation.containsKey ( com.android.dialer.inject.IncludeInDialerRoot.class ) ) ) { return elementsByAnnotation.get ( com.android.dialer.inject.DialerRootComponent.class ) ; } else { generateRootComponent ( com.google.auto.common.MoreElements.asType ( element ) ) ; } } return java.util.Collections.emptySet ( ) ; }
java.util.List < java.lang.String > getEcjExtraArguments ( ) { return ecjExtraArguments ; }
public void deactivateDataCall ( int cid , int reason , android.telephony.data.IDataServiceCallback callback ) { mHandler.obtainMessage ( android.telephony.data.DataService.DATA_SERVICE_REQUEST_DEACTIVATE_DATA_CALL , mSlotId , 0 , new android.telephony.data.DataService.DeactivateDataCallRequest ( cid , reason , callback ) ) . sendToTarget ( ) ; }
protected void notifyImsServiceReady ( ) throws android.os.RemoteException { synchronized ( mLock ) { if ( isServiceControllerAvailable ( ) ) { android.util.Log.d ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , "notifyImsServiceReady" ) ; mIImsServiceController.notifyImsServiceReadyForFeatureCreation ( ) ; } } }
public void testSetValues003_Char ( ) { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( StackTrace002Debuggee.CHAR_SIGNAL ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value oldValue = new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.CHAR_PARAM_VALUE ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value newValue = new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.CHAR_PARAM_VALUE_TO_SET ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo suspensionMethodInfo = tester.addTestMethod ( "breakpointChar" ) ; suspensionMethodInfo.addVariable ( "param" , oldValue , newValue ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointChar" ) ; methodInfo.addVariable ( "param" , oldValue , newValue ) ; runStackFrameTest ( tester , suspensionMethodInfo ) ; }
private void transformAnnotation ( com.android.dex.EncodedValueReader reader ) { int fieldCount = reader.readAnnotation ( ) ; com.android.dex.Leb128.writeUnsignedLeb128 ( out , adjustType ( reader.getAnnotationType ( ) ) ) ; com.android.dex.Leb128.writeUnsignedLeb128 ( out , fieldCount ) ; for ( int i = 0 ; i < fieldCount ; i ++ ) { com.android.dex.Leb128.writeUnsignedLeb128 ( out , adjustString ( reader.readAnnotationName ( ) ) ) ; transform ( reader ) ; } }
public void testSetupDriverForClientMode ( ) { android.net.wifi.IClientInterface clientInterface = org.mockito.Mockito.mock ( android.net.wifi.IClientInterface.class ) ; org.mockito.Mockito.when ( mWificondControl.setupDriverForClientMode ( ) ) . thenReturn ( clientInterface ) ; android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupForClientMode ( ) ; org.junit.Assert.assertEquals ( clientInterface , returnedClientInterface ) ; org.mockito.Mockito.verify ( mWifiVendorHal ) . startVendorHal ( org.mockito.Mockito.eq ( true ) ) ; org.mockito.Mockito.verify ( mWificondControl ) . setupDriverForClientMode ( ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( R.drawable.icon1 , "tick tick tick" , java.lang.System.currentTimeMillis ( ) ) ; n.setLatestEventInfo ( this , "Persistent #1" , "This is a notification!!!" , makeIntent ( ) ) ; mNM.notify ( 1 , n ) ; }
public void callSessionResumeReceived ( android.telephony.ims.ImsCallSession session , android.telephony.ims.ImsCallProfile profile ) { logi ( ( ( ( "callSessionResumeReceived :: session=" + session ) + "profile=" ) + profile ) ) ; if ( isTransientConferenceSession ( session ) ) { logi ( ( "callSessionResumeReceived :: not supported for transient conference session=" + session ) ) ; return ; } com.android.ims.ImsCall.Listener listener ; synchronized ( this ) { listener = mListener ; setCallProfile ( profile ) ; } if ( listener != null ) { try { listener.onCallResumeReceived ( this ) ; } catch ( java.lang.Throwable t ) { loge ( "callSessionResumeReceived :: " , t ) ; } } }
public boolean setP2pGroupIdle ( java.lang.String iface , int time ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setGroupIdle ( iface , time ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " SET p2p_group_idle " ) + time ) ) ; } } }
public void testIsInManagedCallFail ( ) throws java.lang.Exception { org.mockito.Mockito.doThrow ( new java.lang.SecurityException ( ) ) . when ( mContext ) . enforceCallingOrSelfPermission ( org.mockito.Matchers.anyString ( ) , org.mockito.Matchers.any ( ) ) ; try { mTSIBinder.isInManagedCall ( "blah" ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.SecurityException e ) { } org.mockito.Mockito.verify ( mFakeCallsManager , org.mockito.Mockito.never ( ) ) . hasOngoingCalls ( ) ; }
public boolean deleteMessageFromIcc ( int messageIndex ) { boolean success = false ; byte [ ] pdu = new byte [ ( com.android.internal.telephony.uicc.IccConstants.SMS_RECORD_LENGTH ) - 1 ] ; java.util.Arrays.fill ( pdu , ( ( byte ) ( 255 ) ) ) ; try { com.android.internal.telephony.ISms iccISms = ISms.Stub.asInterface ( android.os.ServiceManager.getService ( "isms" ) ) ; if ( iccISms != null ) { success = iccISms.updateMessageOnIccEf ( messageIndex , android.telephony.SmsManager.STATUS_ON_ICC_FREE , pdu ) ; } } catch ( android.os.RemoteException ex ) { } return success ; }
public void dispose ( ) { mRootWrapper.setRoot ( null ) ; org.eclipse.ui.IWorkbenchWindow win = getSite ( ) . getWorkbenchWindow ( ) ; win.getPartService ( ) . removePartListener ( mPartListener ) ; getSite ( ) . getPage ( ) . removeSelectionListener ( this ) ; super . dispose ( ) ; }
public boolean dependsOn ( com.android.ide.eclipse.adt.internal.project.ProjectState library ) { synchronized ( mLibraries ) { for ( com.android.ide.eclipse.adt.internal.project.ProjectState.LibraryState state : mLibraries ) { if ( ( ( state != null ) && ( ( state.getProjectState ( ) ) != null ) ) && ( library.getProject ( ) . equals ( state.getProjectState ( ) . getProject ( ) ) ) ) { return true ; } } } return false ; }
public void setEapMethod ( int eapMethod ) { switch ( eapMethod ) { case android.net.wifi.WifiEnterpriseConfig.Eap.TLS : case android.net.wifi.WifiEnterpriseConfig.Eap.UNAUTH_TLS : setPhase2Method ( android.net.wifi.WifiEnterpriseConfig.Phase2.NONE ) ; case android.net.wifi.WifiEnterpriseConfig.Eap.PEAP : case android.net.wifi.WifiEnterpriseConfig.Eap.PWD : case android.net.wifi.WifiEnterpriseConfig.Eap.TTLS : case android.net.wifi.WifiEnterpriseConfig.Eap.SIM : case android.net.wifi.WifiEnterpriseConfig.Eap.AKA : case android.net.wifi.WifiEnterpriseConfig.Eap.AKA_PRIME : mEapMethod = eapMethod ; setFieldValue ( android.net.wifi.WifiEnterpriseConfig.OPP_KEY_CACHING , "1" ) ; break ; default : throw new java.lang.IllegalArgumentException ( "Unknown EAP method" ) ; } }
public void testCryptUdp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , null , false , 1 , true ) ; }
public void testLoadSample_1 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = getTestResource ( "/com/android/sdklib/testdata/addons_list_sample_1.xml" ) ; int version = mFetcher._getXmlSchemaVersion ( xmlStream ) ; assertEquals ( 1 , version ) ; java.lang.Boolean [ ] validatorFound = new java.lang.Boolean [ ] { java.lang.Boolean.FALSE } ; java.lang.String [ ] validationError = new java.lang.String [ ] { null } ; java.lang.String url = "not-a-valid-url://addons_list.xml" ; java.lang.String uri = mFetcher._validateXml ( xmlStream , url , version , validationError , validatorFound ) ; assertEquals ( java.lang.Boolean.TRUE , validatorFound [ 0 ] ) ; assertEquals ( null , validationError [ 0 ] ) ; assertEquals ( com.android.sdklib.repository.SdkAddonsListConstants.getSchemaUri ( 1 ) , uri ) ; com.android.sdklib.internal.repository.MockMonitor monitor = new com.android.sdklib.internal.repository.MockMonitor ( ) ; org.w3c.dom.Document doc = mFetcher._getDocument ( xmlStream , monitor ) ; assertNotNull ( doc ) ; com.android.sdklib.internal.repository.AddonsListFetcher.Site [ ] result = mFetcher._parseAddonsList ( doc , uri , monitor ) ; assertEquals ( "" , monitor.getCapturedDescriptions ( ) ) ; assertEquals ( "" , monitor.getCapturedLog ( ) ) ; assertEquals ( "" , monitor.getCapturedErrorLog ( ) ) ; assertEquals ( "" , monitor.getCapturedVerboseLog ( ) ) ; assertEquals ( ( "[<ADDON_SITE URL='http://www.example.com/my_addons.xml' Name='My Example Add-ons.'>, " + ( "<ADDON_SITE URL=\'http://www.example.co.jp/addons.xml\' Name=\'ありがとうございます。\'>, " + "<ADDON_SITE URL='http://www.example.com/' Name='Example of directory URL.'>]" ) ) , java.util.Arrays.toString ( result ) ) ; assertEquals ( 3 , result.length ) ; }
private void addRemoteExtra ( com.android.sdklib.repository.NoPreviewRevision revision , java.lang.String vendor , java.lang.String path ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newExtra ( vendor , path , null , revision ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public void test_SSL_check_private_key_key_then_cert ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; long s = org.conscrypt.NativeCrypto.SSL_new ( c ) ; org.conscrypt.NativeCrypto.SSL_use_PrivateKey ( s , org.conscrypt.NativeCryptoTest.getServerPrivateKey ( ) . getPkeyContext ( ) ) ; try { org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.conscrypt.NativeCrypto.SSL_use_certificate ( s , org.conscrypt.NativeCryptoTest.getServerCertificates ( ) ) ; org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; org.conscrypt.NativeCrypto.SSL_free ( s ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; }
public static void writeUint32 ( long i , byte [ ] buf , int offset ) { buf [ offset ] = ( ( byte ) ( i > > > 24 ) ) ; buf [ ( offset + 1 ) ] = ( ( byte ) ( i > > > 16 ) ) ; buf [ ( offset + 2 ) ] = ( ( byte ) ( i > > > 8 ) ) ; buf [ ( offset + 3 ) ] = ( ( byte ) ( i ) ) ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.tv.tuner.TunerInputController.MSG_ENABLE_INPUT_SERVICE : android.content.Context context = ( ( android.content.Context ) ( msg.obj ) ) ; if ( ( mDvbDeviceAccessor ) == null ) { mDvbDeviceAccessor = new com.android.tv.tuner.DvbDeviceAccessor ( context ) ; } boolean enabled = mDvbDeviceAccessor.isDvbDeviceAvailable ( ) ; enableTunerTvInputService ( context , enabled , false , ( enabled ? TunerHal.TUNER_TYPE_USB : null ) ) ; break ; } }
public void testBuildProgram ( ) { com.android.tv.data.Channel c = new com.android.tv.data.Channel.Builder ( ) . build ( ) ; com.android.tv.data.Program p = new com.android.tv.data.Program.Builder ( ) . build ( ) ; com.android.tv.dvr.data.ScheduledRecording actual = com.android.tv.dvr.data.ScheduledRecording.builder ( com.android.tv.dvr.ScheduledRecordingTest.INPUT_ID , p ) . setChannelId ( c.getId ( ) ) . build ( ) ; assertEquals ( "type" , ScheduledRecording.TYPE_PROGRAM , actual.getType ( ) ) ; }
private void addFolder ( com.android.ide.common.resources.ResourceRepository resources , com.android.ide.common.resources.configuration.FolderConfiguration config , org.eclipse.core.resources.IFile [ ] memberList ) throws java.lang.Exception { java.lang.String folderName = config.getFolderName ( ResourceFolderType.LAYOUT ) ; org.eclipse.core.resources.IFolder folder = com.android.ide.eclipse.mock.Mocks.createFolder ( folderName , memberList ) ; com.android.ide.common.resources.ResourceFolder resFolder = resources.processFolder ( new com.android.ide.eclipse.adt.io.IFolderWrapper ( folder ) ) ; for ( org.eclipse.core.resources.IFile file : memberList ) { resFolder.addFile ( new com.android.ide.common.resources.SingleResourceFile ( new com.android.ide.eclipse.adt.io.IFileWrapper ( file ) , resFolder ) ) ; } }
public static com.google.common.hash.HashCode fromBytes ( byte [ ] bytes ) { com.google.common.base.Preconditions.checkArgument ( ( ( bytes.length ) >= 1 ) , "A HashCode must contain at least 1 byte." ) ; return com.google.common.hash.HashCode.fromBytesNoCopy ( bytes.clone ( ) ) ; }
public boolean isTypeBarring ( ) { return ( ( ( ( ( ( ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_BAOC ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_BAOIC ) ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_BAOIC_EXC_HOME ) ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_BAIC ) ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_BAIC_ROAMING ) ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_ALL_BARRING ) ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_OUTGOING_BARRING ) ) ) || ( ( serviceType ) == ( android.telephony.ims.ImsSsData.SS_INCOMING_BARRING ) ) ; }
public static java.util.List < com.android.jack.test.runner.RuntimeRunner > listRuntimeTestRunners ( @ javax.annotation.CheckForNull java.util.Properties properties ) throws com.android.jack.test.runner.RuntimeRunnerException , java.lang.IllegalArgumentException , java.lang.SecurityException { if ( properties != null ) { java.lang.String rtAsString = properties.getProperty ( com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LIST_KEY ) ; if ( rtAsString != null ) { return com.android.jack.test.toolchain.AbstractTestTools.parseRuntimeList ( rtAsString ) ; } } if ( ( ! ( com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted ) ) && ( ( com.android.jack.test.toolchain.AbstractTestTools.runtimes.size ( ) ) == 0 ) ) { java.lang.System.err.println ( "WARNING: no runtime has been provided" ) ; com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted = true ; } return com.android.jack.test.toolchain.AbstractTestTools.runtimes ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { com.android.ide.common.api.RuleAction.Toggle toggle = ( ( com.android.ide.common.api.RuleAction.Toggle ) ( button.getData ( ) ) ) ; toggle.getCallback ( ) . action ( toggle , getSelectedNodes ( ) , toggle.getId ( ) , button.getSelection ( ) ) ; updateSelection ( ) ; }
void onConnectStatusChanged ( java.net.InetSocketAddress address , int status , boolean updateSocketState ) { this . status = status ; connectAddress = address ; if ( ( ( status == ( java.nio.SocketChannelImpl.SOCKET_STATUS_CONNECTED ) ) && updateSocketState ) && ( ( socket ) != null ) ) { socket.onConnect ( connectAddress.getAddress ( ) , connectAddress.getPort ( ) ) ; } }
public void testPutCharBuffer ( ) { java.nio.CharBuffer other = java.nio.CharBuffer.allocate ( 1 ) ; try { buf.put ( other ) ; fail ( "Should throw ReadOnlyBufferException" ) ; } catch ( java.nio.ReadOnlyBufferException e ) { } try { buf.put ( ( ( java.nio.CharBuffer ) ( null ) ) ) ; fail ( "Should throw ReadOnlyBufferException" ) ; } catch ( java.nio.ReadOnlyBufferException e ) { } try { buf.put ( buf ) ; fail ( "Should throw IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException e ) { } }
boolean disconnect ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; android.util.Log.d ( com.android.bluetooth.hfp.HeadsetService.TAG , ( "disconnect: device=" + device ) ) ; int connectionState = mStateMachine.getConnectionState ( device ) ; if ( ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) && ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTING ) ) ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , ( ( ( "disconnect: not connected/connecting, connectionState=" + connectionState ) + ", device=" ) + device ) ) ; return false ; } mStateMachine.sendMessage ( HeadsetStateMachine.DISCONNECT , device ) ; return true ; }
public org.eclipse.swt.graphics.Image getPageImage ( ) { org.eclipse.core.resources.IFile file = mEditor.getInputFile ( ) ; if ( file != null ) { org.eclipse.core.resources.IContainer parent = file.getParent ( ) ; if ( parent != null ) { org.eclipse.swt.graphics.Image flag = com.android.ide.eclipse.adt.internal.editors.layout.configuration.LocaleManager.get ( ) . getFlagForFolderName ( parent.getName ( ) ) ; if ( flag != null ) { return flag ; } } } return com.android.ide.eclipse.adt.internal.editors.IconFactory.getInstance ( ) . getIcon ( "editor_page_design" ) ; }
public void dismissKeyguardLw ( ) { if ( mKeyguardMediator.isShowing ( ) ) { mHandler.post ( new java.lang.Runnable ( ) { public void run ( ) { if ( mKeyguardMediator.isDismissable ( ) ) { mKeyguardMediator.keyguardDone ( false , true ) ; } else { mKeyguardMediator.dismiss ( ) ; } } } ) ; } }
boolean accept ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.PlatformPackage ) { com.android.sdklib.internal.repository.packages.PlatformPackage pp = ( ( com.android.sdklib.internal.repository.packages.PlatformPackage ) ( pkg ) ) ; com.android.sdklib.AndroidVersion v = pp.getAndroidVersion ( ) ; return ( ! ( v.isPreview ( ) ) ) && ( ( v.getApiLevel ( ) ) == ( mApiLevel ) ) ; } return false ; }
public java.util.Map.Entry < K , com.google.common.collect.ImmutableSet < V > > next ( ) { final java.util.Map.Entry < K , V > backingEntry = backingIterator.next ( ) ; return new com.google.common.collect.AbstractMapEntry < K , com.google.common.collect.ImmutableSet < V > > ( ) { @ java.lang.Override public K getKey ( ) { return backingEntry.getKey ( ) ; } @ java.lang.Override public com.google.common.collect.ImmutableSet < V > getValue ( ) { return com.google.common.collect.ImmutableSet.of ( backingEntry.getValue ( ) ) ; } } ; }
public boolean removeTask ( int taskId ) { synchronized ( this ) { enforceCallingPermission ( android.Manifest.permission.REMOVE_TASKS , "removeTask()" ) ; long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return removeTaskByIdLocked ( taskId , true ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
private void removePreviousDigitIfPossible ( ) { final int currentPosition = mDigits.getSelectionStart ( ) ; if ( currentPosition > 0 ) { mDigits.setSelection ( currentPosition ) ; mDigits.getText ( ) . delete ( ( currentPosition - 1 ) , currentPosition ) ; } }
public void onClick ( android.content.DialogInterface dialog , int which ) { com.android.traceur.AtraceUtils.clearSavedTraces ( ) ; }
public boolean setRoamingOverride ( int subId , java.util.List < java.lang.String > gsmRoamingList , java.util.List < java.lang.String > gsmNonRoamingList , java.util.List < java.lang.String > cdmaRoamingList , java.util.List < java.lang.String > cdmaNonRoamingList ) { com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfCarrierPrivilege ( subId , "setRoamingOverride" ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone == null ) { return false ; } return phone.setRoamingOverride ( gsmRoamingList , gsmNonRoamingList , cdmaRoamingList , cdmaNonRoamingList ) ; }
public com.google.common.hash.HashCode hashUnencodedChars ( java.lang.CharSequence input ) { int len = input.length ( ) ; com.google.common.hash.Hasher hasher = newHasher ( ( len * 2 ) ) ; for ( int i = 0 ; i < len ; i ++ ) { hasher.putChar ( input.charAt ( i ) ) ; } return hasher.hash ( ) ; }
public void testDisableSupplicant ( ) { org.mockito.Mockito.when ( mWificondControl.disableSupplicant ( ) ) . thenReturn ( true ) ; mWifiNative.disableSupplicant ( ) ; org.mockito.Mockito.verify ( mWificondControl ) . disableSupplicant ( ) ; }
public void testTransmitFollowupFail ( ) throws org.json.JSONException { final short transactionId = 5689 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "id" , transactionId ) ; args.putInt ( "reason" , WifiAwareNative.AWARE_STATUS_NO_OTA_ACK ) ; com.android.server.wifi.aware.WifiAwareHalMock.callTransmitFollowup ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mAwareStateManager ) . onMessageSendFailNotification ( transactionId , WifiAwareNative.AWARE_STATUS_NO_OTA_ACK ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
public void run ( ) { com.intellij.openapi.module.Module module = com.intellij.openapi.module.ModuleManager.getInstance ( project ) . findModuleByName ( moduleName ) ; com.google.gct.idea.appengine.wizard.Parameter appEngineVersionParam = template.getMetadata ( ) . getParameter ( "appEngineVersion" ) ; java.lang.String appEngineVersion = ( appEngineVersionParam == null ) ? "unknown" : appEngineVersionParam.initial ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.createRunConfiguration ( project , module , moduleRoot , appEngineVersion ) ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.addAppEngineGradleFacet ( ) ; }
public android.net.NetworkStatsHistory getHistoryForUid ( android.net.NetworkTemplate template , int uid , int set , int tag , int fields ) { if ( tag == ( android.net.NetworkStats.TAG_NONE ) ) { return getUidComplete ( ) . getHistory ( template , null , uid , set , tag , fields , java.lang.Long.MIN_VALUE , java.lang.Long.MAX_VALUE , mAccessLevel , mCallingUid ) ; } else { return getUidTagComplete ( ) . getHistory ( template , null , uid , set , tag , fields , java.lang.Long.MIN_VALUE , java.lang.Long.MAX_VALUE , mAccessLevel , mCallingUid ) ; } }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array ) { copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; }
private static int getMatchedGroupIndex ( long patternAddr , java.lang.String name ) { int result = java.util.regex.Matcher.getMatchedGroupIndex0 ( patternAddr , name ) ; if ( result < 0 ) { throw new java.lang.IllegalArgumentException ( ( ( "No capturing group in the pattern " + "with the name " ) + name ) ) ; } return result ; }
private void checkExpandItem ( java.lang.Object elem , org.eclipse.jface.viewers.ITreeContentProvider provider ) { if ( ( elem instanceof com.android.sdkuilib.internal.repository.PackagesPage.PkgCategory ) || ( elem instanceof com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) ) { mTreeViewer.setExpandedState ( elem , true ) ; for ( java.lang.Object pkg : provider.getChildren ( elem ) ) { mTreeViewer.setChecked ( pkg , true ) ; checkExpandItem ( pkg , provider ) ; } } else if ( elem instanceof java.lang.Package ) { selectCompatibleArchives ( elem , provider ) ; } }
public void testSingleOutput ( ) { com.android.build.VariantOutput match ; java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ) ; java.util.List < java.io.File > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( 1 , result.size ( ) ) ; assertEquals ( match.getMainOutputFile ( ) . getOutputFile ( ) , result.get ( 0 ) ) ; }
public void visitExceptionInfo ( proguard.optimize.peephole.Clazz clazz , proguard.optimize.peephole.Method method , proguard.optimize.peephole.CodeAttribute codeAttribute , proguard.optimize.peephole.ExceptionInfo exceptionInfo ) { int startPC = exceptionInfo.u2startPC ; int endPC = exceptionInfo.u2endPC ; int handlerPC = exceptionInfo.u2handlerPC ; instructionMarks [ startPC ] |= proguard.optimize.peephole.BranchTargetFinder.EXCEPTION_START ; instructionMarks [ endPC ] |= proguard.optimize.peephole.BranchTargetFinder.EXCEPTION_END ; instructionMarks [ handlerPC ] |= proguard.optimize.peephole.BranchTargetFinder.EXCEPTION_HANDLER ; if ( ( ( subroutineStarts [ handlerPC ] ) == ( proguard.optimize.peephole.BranchTargetFinder.UNKNOWN ) ) && ( ( subroutineStarts [ startPC ] ) != ( proguard.optimize.peephole.BranchTargetFinder.UNKNOWN ) ) ) { subroutineStarts [ handlerPC ] = subroutineStarts [ startPC ] ; repeat = true ; } }
public int hashCode ( ) { return ( ( super . hashCode ( ) ) ^ ( producerStack.hashCode ( ) ) ) ^ ( actualProducerStack.hashCode ( ) ) ; }
public java.util.Collection < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedMethod method , int parameterIndex ) { com.android.tools.lint.ExternalAnnotationRepository.MethodInfo m = findMethod ( method ) ; if ( m == null ) { return null ; } if ( ( m.getParameterAnnotations ( ) ) != null ) { return m.getParameterAnnotations ( ) . get ( parameterIndex ) ; } return null ; }
public void testModemSuggestNoRetry ( ) throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataCallResponse response = new com.android.internal.telephony.dataconnection.DataCallResponse ( 0 , java.lang.Integer.MAX_VALUE , 1 , 2 , "IP" , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_ADDRESS , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS , 1440 ) ; android.os.AsyncResult ar = new android.os.AsyncResult ( null , response , null ) ; org.junit.Assert.assertEquals ( RetryManager.NO_RETRY , getSuggestedRetryDelay ( ar ) ) ; }
public void testOkClasses ( ) throws java.lang.Exception { mScopes = null ; mEnabled = com.google.common.collect.Sets.newHashSet ( com.android.tools.lint.checks.MissingClassDetector.MISSING , com.android.tools.lint.checks.MissingClassDetector.INSTANTIATABLE , com.android.tools.lint.checks.MissingClassDetector.INNERCLASS ) ; assertEquals ( "No warnings." , lintProject ( "bytecode/AndroidManifestRegs.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "bytecode/OnClickActivity.java.txt=>src/test/pkg/OnClickActivity.java" , "bytecode/OnClickActivity.class.data=>bin/classes/test/pkg/OnClickActivity.class" , "bytecode/TestService.java.txt=>src/test/pkg/TestService.java" , "bytecode/TestService.class.data=>bin/classes/test/pkg/TestService.class" , "bytecode/TestProvider.java.txt=>src/test/pkg/TestProvider.java" , "bytecode/TestProvider.class.data=>bin/classes/test/pkg/TestProvider.class" , "bytecode/TestProvider2.java.txt=>src/test/pkg/TestProvider2.java" , "bytecode/TestProvider2.class.data=>bin/classes/test/pkg/TestProvider2.class" , "bytecode/TestReceiver.java.txt=>src/test/pkg/TestReceiver.java" , "bytecode/TestReceiver.class.data=>bin/classes/test/pkg/TestReceiver.class" ) ) ; }
public com.android.jack.ir.ast.cfg.JBasicBlock detach ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlock newBlock ) { if ( ! ( this . predecessors.isEmpty ( ) ) ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock pre : this . getPredecessorsSnapshot ( ) ) { pre.replaceAllSuccessors ( this , newBlock ) ; } } for ( com.android.jack.ir.ast.cfg.JBasicBlock successor : getSuccessors ( ) ) { replaceAllSuccessors ( successor , this ) ; } return newBlock ; }
public boolean isBetterMatchThan ( com.android.ide.common.resources.configuration.ResourceQualifier compareTo , com.android.ide.common.resources.configuration.ResourceQualifier reference ) { if ( compareTo == null ) { return true ; } com.android.ide.common.resources.configuration.KeyboardStateQualifier compareQualifier = ( ( com.android.ide.common.resources.configuration.KeyboardStateQualifier ) ( compareTo ) ) ; com.android.ide.common.resources.configuration.KeyboardStateQualifier referenceQualifier = ( ( com.android.ide.common.resources.configuration.KeyboardStateQualifier ) ( reference ) ) ; if ( ( referenceQualifier.mValue ) == ( com.android.resources.KeyboardState.SOFT ) ) { if ( ( ( compareQualifier.mValue ) == ( com.android.resources.KeyboardState.EXPOSED ) ) && ( ( mValue ) == ( com.android.resources.KeyboardState.SOFT ) ) ) { return true ; } } return false ; }
public void test_JarFile_Modified_Manifest_EntryAttributes ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Modified_Manifest_EntryAttributes.jar" ; java.io.File file = tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; try ( java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( file , true ) ) { java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; try { jarFile.getInputStream ( zipEntry ) ; fail ( "should throw Security Exception" ) ; } catch ( java.lang.SecurityException e ) { } } } }
public void reset ( ) { com.google.gct.testing.config.GoogleCloudTestingConfigurable.GoogleCloudTestingState state = getSavedSettings ( ) . getState ( ) ; fakeBucketNameField.setText ( ( state == null ? "" : state.fakeBucketName ) ) ; useFakeBucketCheckbox.setSelected ( ( state == null ? false : state.shouldUseFakeBucket ) ) ; setBackendOption ( com.google.gct.testing.config.GoogleCloudTestingConfigurable.BackendOption.values ( ) [ ( state == null ? 0 : state.backendOption ) ] ) ; customUrlField.setText ( ( state == null ? "" : state.customUrl ) ) ; com.google.gct.testing.launcher.CloudAuthenticator.recreateTestAndToolResults ( getTestBackendUrl ( ) , getToolResultsBackendUrl ( ) ) ; }
public void changeIcon ( @ android.support.annotation.DrawableRes int iconId , java.lang.String description ) { if ( ( this . mFabIconId ) != iconId ) { mFab.setImageResource ( iconId ) ; this . mFabIconId = iconId ; } if ( ! ( mFab.getContentDescription ( ) . equals ( description ) ) ) { mFab.setContentDescription ( description ) ; } }
protected com.android.internal.telephony.SmsTracker getNewSubmitPduTracker ( java.lang.String destinationAddress , java.lang.String scAddress , java.lang.String message , com.android.internal.telephony.SmsHeader smsHeader , int format , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , boolean lastPart , java.util.concurrent.atomic.AtomicInteger unsentPartCount , java.util.concurrent.atomic.AtomicBoolean anyPartFailed , android.net.Uri messageUri , java.lang.String fullMessageText , int priority , boolean expectMore , int validityPeriod ) { android.telephony.Rlog.e ( com.android.internal.telephony.ImsSMSDispatcher.TAG , "Error! Not implemented for IMS." ) ; return null ; }
public final long long_literal ( ) throws org.jf.smali.RecognitionException { long value = 0 ; org.antlr.runtime.tree.CommonTree LONG_LITERAL210 = null ; try { { LONG_LITERAL210 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.LONG_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_LONG_LITERAL_in_long_literal3510 ) ) ) ; value = org.jf.smali.LiteralTools.parseLong ( ( LONG_LITERAL210 != null ? LONG_LITERAL210.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
private int getPreviousDayGroup ( android.database.Cursor cursor ) { int startingPosition = cursor.getPosition ( ) ; moveToPreviousNonHiddenRow ( cursor ) ; if ( cursor.isBeforeFirst ( ) ) { cursor.moveToPosition ( startingPosition ) ; return CallLogGroupBuilder.DAY_GROUP_NONE ; } int result = getDayGroup ( cursor.getLong ( CallLogQuery.ID ) ) ; cursor.moveToPosition ( startingPosition ) ; return result ; }
public void packageApk ( java.io.File apk , java.io.File manifest ) { java.util.List < java.lang.String > aapt = new java.util.ArrayList < java.lang.String > ( java.util.Arrays.asList ( "aapt" , "package" , "-F" , apk.getPath ( ) , "-M" , manifest.getPath ( ) , "-I" , androidJarPath ) ) ; new vogar.commands.Command ( log , aapt ) . execute ( ) ; }
public void testUndo_textWatcher ( ) { initTextViewForTyping ( ) ; mTextView.addTextChangedListener ( new android.widget.cts.TextViewTest.ConvertToSpacesTextWatcher ( ) ) ; mKeyEventUtil.sendString ( mTextView , "abc" ) ; mActivity.runOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { assertEquals ( " " , mTextView.getText ( ) . toString ( ) ) ; mTextView.onTextContextMenuItem ( android.R.id.undo ) ; assertEquals ( "" , mTextView.getText ( ) . toString ( ) ) ; } } ) ; mInstrumentation.waitForIdleSync ( ) ; }
public org.objectweb.asm.FieldVisitor visitField ( int access , java.lang.String name , java.lang.String desc , java.lang.String signature , java.lang.Object value ) { if ( com.google.devtools.build.android.desugar.HeaderClassLoader.NonPrimitiveFieldCollector.isNonPrimitiveType ( desc ) ) { declaredNonPrimitiveFields.add ( com.google.devtools.build.android.desugar.FieldInfo.create ( internalName , name , desc ) ) ; } return null ; }
public void test_ConstructorI ( ) { java.net.InetSocketAddress isa = new java.net.InetSocketAddress ( 65535 ) ; assertEquals ( "::" , isa.getHostName ( ) ) ; assertEquals ( 65535 , isa.getPort ( ) ) ; try { new java.net.InetSocketAddress ( ( - 1 ) ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } try { new java.net.InetSocketAddress ( 65536 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public boolean equals ( java.lang.Object o ) { if ( ! ( o instanceof android.view.DisplayAdjustments ) ) { return false ; } android.view.DisplayAdjustments daj = ( ( android.view.DisplayAdjustments ) ( o ) ) ; return ( java.util.Objects.equals ( daj.mCompatInfo , mCompatInfo ) ) && ( java.util.Objects.equals ( daj.mActivityToken , mActivityToken ) ) ; }
static java.lang.String loadRules ( android.icu.util.ULocale locale , java.lang.String collationType ) { android.icu.util.UResourceBundle bundle = android.icu.util.UResourceBundle.getBundleInstance ( ICUData.ICU_COLLATION_BASE_NAME , locale ) ; android.icu.util.UResourceBundle data = ( ( android.icu.impl.ICUResourceBundle ) ( bundle ) ) . getWithFallback ( ( "collations/" + ( android.icu.impl.coll.CollationLoader.ASCII.toLowerCase ( collationType ) ) ) ) ; java.lang.String rules = data.getString ( "Sequence" ) ; return rules ; }
public static synchronized void setupProjectNatures ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor , boolean addAndroidNature ) throws org.eclipse.core.runtime.CoreException { if ( ( project == null ) || ( ! ( project.isOpen ( ) ) ) ) return ; if ( monitor == null ) monitor = new org.eclipse.core.runtime.NullProgressMonitor ( ) ; com.android.ide.eclipse.adt.internal.project.AndroidNature.addNatureToProjectDescription ( project , org.eclipse.jdt.core.JavaCore.NATURE_ID , monitor ) ; if ( addAndroidNature ) { com.android.ide.eclipse.adt.internal.project.AndroidNature.addNatureToProjectDescription ( project , AdtConstants.NATURE_DEFAULT , monitor ) ; } }
public void testStageInstallWithErrorCode_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir ( ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( new java.io.File ( workingDir , "myFile" ) , new byte [ ] { 'a' } ) ; byte [ ] distroBytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBytes ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( new com.android.timezone.distro.TimeZoneDistro ( distroBytes ) ) ) ; assertInstallDistroStaged ( distroBytes ) ; assertNoInstalledDistro ( ) ; }
public static void testExceptionDetailMessages ( ) throws java.lang.Throwable { java.lang.invoke.MethodHandle handle = java.lang.invoke.MethodHandles.lookup ( ) . findVirtual ( java.lang.String.class , "concat" , java.lang.invoke.MethodType.methodType ( java.lang.String.class , java.lang.String.class ) ) ; try { handle.invokeExact ( "a" , new java.lang.Object ( ) ) ; java.lang.System.out.println ( "invokeExact(\"a\", new Object()) unexpectedly succeeded." ) ; } catch ( java.lang.invoke.WrongMethodTypeException ex ) { java.lang.System.out.println ( "Received WrongMethodTypeException exception" ) ; } }
public void run ( ) { try { java.lang.System.err.println ( "sleep..." ) ; java.lang.Thread.sleep ( 2000 ) ; java.lang.System.err.println ( "close..." ) ; s.getClass ( ) . getMethod ( "close" ) . invoke ( s ) ; } catch ( java.lang.Exception ex ) { ex.printStackTrace ( ) ; } }
public static void v ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.sIsUserExtendedLoggingEnabled ) { android.telecom.Log.maybeDisableLogging ( ) ; android.util.Slog.i ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } else if ( android.telecom.Log.VERBOSE ) { android.util.Slog.v ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public void test_Jar_created_before_java_5 ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Created_by_1_4.jar" ; java.io.File file = tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; try ( java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( file , true ) ) { java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; jarFile.getInputStream ( zipEntry ) ; } } }
public int getSimApplicationState ( ) { int simApplicationState = getSimStateIncludingLoaded ( ) ; switch ( simApplicationState ) { case android.telephony.TelephonyManager.SIM_STATE_UNKNOWN : case android.telephony.TelephonyManager.SIM_STATE_ABSENT : case android.telephony.TelephonyManager.SIM_STATE_CARD_IO_ERROR : case android.telephony.TelephonyManager.SIM_STATE_CARD_RESTRICTED : return android.telephony.TelephonyManager.SIM_STATE_UNKNOWN ; case android.telephony.TelephonyManager.SIM_STATE_READY : return android.telephony.TelephonyManager.SIM_STATE_NOT_READY ; default : return simApplicationState ; } }
public synchronized void setLength ( int length ) { if ( ( length < 0 ) || ( ( ( offset ) + length ) > ( data.length ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( ( "length=" + length ) + ", offset=" ) + ( offset ) ) + ", buffer size=" ) + ( data.length ) ) ) ; } this . length = length ; this . userSuppliedLength = length ; }
public java.lang.String toString ( ) { java.lang.String [ ] values = new java.lang.String [ this . getPlaceholderCount ( ) ] ; for ( int i = 0 ; i < ( values.length ) ; i ++ ) { values [ i ] = java.lang.String.format ( "{%d}" , i ) ; } return formatAndAppend ( new java.lang.StringBuilder ( ) , null , values ) . toString ( ) ; }
protected < T extends com.android.jack.ir.ast.JType > boolean equal ( @ javax.annotation.Nonnull java.util.List < T > a , @ javax.annotation.Nonnull java.util.List < T > b ) { if ( ( a.size ( ) ) != ( b.size ( ) ) ) { return false ; } for ( int i = 0 ; i < ( a.size ( ) ) ; i ++ ) { if ( ! ( equal ( a.get ( i ) , b.get ( i ) ) ) ) { return false ; } } return true ; }
public void TestGetRedundants ( ) { com.ibm.icu.text.DateTimePatternGenerator dtpg = com.ibm.icu.text.DateTimePatternGenerator.getInstance ( ) ; try { dtpg.getRedundants ( null ) ; } catch ( java.lang.Exception e ) { errln ( ( ( "DateTimeGenerator.getRedundants was not supposed to return " + "an exception when passing a null parameter: " ) + e ) ) ; } try { java.util.Collection < java.lang.String > out = new java.util.LinkedHashSet < java.lang.String > ( ) ; dtpg.getRedundants ( out ) ; } catch ( java.lang.Exception e ) { errln ( ( ( "DateTimeGenerator.getRedundants was not supposed to return " + "an exception when passing a new LinkedHashSet<String>() parameter: " ) + e ) ) ; } }
private void handleShareItemSelected ( ) { android.content.Intent target = new android.content.Intent ( android.content.Intent.ACTION_SEND ) ; target.setType ( "text/plain" ) ; com.android.cts.verifier.TestResultsReport report = new com.android.cts.verifier.TestResultsReport ( this , mAdapter ) ; target.putExtra ( Intent.EXTRA_SUBJECT , report.getSubject ( ) ) ; target.putExtra ( Intent.EXTRA_TEXT , report.getBody ( ) ) ; startActivity ( android.content.Intent.createChooser ( target , getString ( R.string.share_test_results ) ) ) ; }
private com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode addUnknownAttribute ( java.lang.String xmlFullName , java.lang.String xmlAttrLocalName , java.lang.String xmlNsUri ) { com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor ( xmlAttrLocalName , xmlFullName , xmlNsUri , "Unknown XML attribute" , new com.android.ide.common.resources.platform.AttributeInfo ( xmlAttrLocalName , new com.android.ide.common.api.IAttributeInfo.Format [ ] { com.android.ide.common.api.IAttributeInfo.Format.STRING } ) ) ; com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode uiAttr = desc.createUiNode ( this ) ; uiAttr.setDirty ( true ) ; mUnknownUiAttributes.add ( uiAttr ) ; return uiAttr ; }
private boolean startIPv6 ( ) { final java.lang.String PREFER_TEMPADDRS = "2" ; try { android.net.util.NetdService.run ( ( android.net.INetd netd ) -> { netd.setProcSysNet ( INetd.IPV6 , INetd.CONF , mInterfaceName , "use_tempaddr" , PREFER_TEMPADDRS ) ; } ) ; mNwService.enableIpv6 ( mInterfaceName ) ; } catch ( java.lang.IllegalStateException | android.os.RemoteException | android.os.ServiceSpecificException e ) { logError ( "Unable to change interface settings: %s" , e ) ; return false ; } return true ; }
public void testRscLibraryInClassPath ( ) throws java.lang.Exception { java.io.File emptyLib = createRscLibrary ( ) ; com.android.jack.TestTools.compileSourceToDex ( new com.android.jack.Options ( ) , com.android.jack.TestTools.getJackTestsWithJackFolder ( "library/test001" ) , ( ( ( com.android.jack.TestTools.getDefaultClasspathString ( ) ) + ( java.io.File.pathSeparator ) ) + ( emptyLib.getPath ( ) ) ) , com.android.jack.TestTools.createTempFile ( "library001" , ".zip" ) , true ) ; }
public boolean requestFocus ( final int direction , final android.graphics.Rect previouslyFocusedRect ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return requestFocus ( direction , previouslyFocusedRect ) ; } } ) ; return ret ; } mAwContents.requestFocus ( ) ; return mWebViewPrivate.super_requestFocus ( direction , previouslyFocusedRect ) ; }
public final float getFloat ( ) { int newPosition = ( position ) + ( libcore.io.SizeOf.FLOAT ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferUnderflowException ( ) ; } float result = java.lang.Float.intBitsToFloat ( this . block.peekInt ( ( ( offset ) + ( position ) ) , order ) ) ; position = newPosition ; return result ; }
private void assertInstalledDistro ( byte [ ] distroBytes ) throws java.lang.Exception { java.io.File currentTzDataDir = installer.getCurrentTzDataDir ( ) ; assertTrue ( currentTzDataDir.exists ( ) ) ; java.io.File versionFile = new java.io.File ( currentTzDataDir , com.android.timezone.distro.TimeZoneDistro.DISTRO_VERSION_FILE_NAME ) ; assertTrue ( versionFile.exists ( ) ) ; byte [ ] expectedVersionBytes = new com.android.timezone.distro.TimeZoneDistro ( distroBytes ) . getDistroVersion ( ) . toBytes ( ) ; byte [ ] actualVersionBytes = com.android.timezone.distro.FileUtils.readBytes ( versionFile , expectedVersionBytes.length ) ; org.junit.Assert.assertArrayEquals ( expectedVersionBytes , actualVersionBytes ) ; }
public void onResume ( ) { contactsProviderMatchInfos.clear ( ) ; if ( com.android.dialer.util.PermissionsUtil.hasPermission ( activity , android.Manifest.permission.READ_CONTACTS ) ) { contactInfoCache.start ( ) ; } contactsPreferences.refreshValue ( ContactsPreferences.DISPLAY_ORDER_KEY ) ; isSpamEnabled = com.android.dialer.spam.SpamComponent.get ( activity ) . spamSettings ( ) . isSpamEnabled ( ) ; getDuo ( ) . registerListener ( this ) ; notifyDataSetChanged ( ) ; }
private com.android.jack.test.toolchain.JackBasedToolchain getToolchain ( boolean isApiTest ) { java.util.List < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > excludeList = new java.util.ArrayList < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > ( 1 ) ; excludeList.add ( com.android.jack.test.toolchain.LegacyJillToolchain.class ) ; if ( isApiTest ) { excludeList.add ( com.android.jack.test.toolchain.JackCliToolchain.class ) ; } return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackApiToolchainBase.class , excludeList ) ; }
public void testWriteFile ( ) throws java.lang.Exception { final java.io.File file = new java.io.File ( mContext.getFilesDir ( ) , android.support.v4.content.FileProviderTest.TEST_FILE ) ; final android.net.Uri uri = stageFileAndGetUri ( file , android.support.v4.content.FileProviderTest.TEST_DATA ) ; assertContentsEquals ( android.support.v4.content.FileProviderTest.TEST_DATA , uri ) ; final java.io.OutputStream out = mResolver.openOutputStream ( uri ) ; try { out.write ( android.support.v4.content.FileProviderTest.TEST_DATA_ALT ) ; } finally { android.support.v4.content.FileProviderTest.closeQuietly ( out ) ; } assertContentsEquals ( android.support.v4.content.FileProviderTest.TEST_DATA_ALT , uri ) ; }
public int getState ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getState = " + ( mService.getState ( ) ) ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return android.bluetooth.BluetoothPbap.STATE_DISCONNECTED ; return service.getState ( ) ; }
private static android.icu.text.Transliterator getJapaneseTransliterator ( ) { synchronized ( com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.class ) { if ( ! ( com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mInitializedTransliterator ) ) { com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mInitializedTransliterator = true ; android.icu.text.Transliterator t = null ; try { t = android.icu.text.Transliterator.getInstance ( ( "Hiragana-Latin; Katakana-Latin;" + " Latin-Ascii" ) ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Log.w ( com.android.providers.contacts.ContactLocaleUtils.TAG , ( "Hiragana/Katakana-Latin transliterator data" + " is missing" ) ) ; } com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mJapaneseTransliterator = t ; } return com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mJapaneseTransliterator ; } }
private static org.junit.runner.Request classes ( android.app.Instrumentation instr , android.os.Bundle bundle , boolean skipExecution , org.junit.runner.Computer computer , java.lang.Class < ? > ... classes ) { try { com.android.test.runner.AndroidRunnerBuilder builder = new com.android.test.runner.AndroidRunnerBuilder ( true , instr , bundle , skipExecution ) ; org.junit.runner.Runner suite = computer.getSuite ( builder , classes ) ; return org.junit.runner.Request.runner ( suite ) ; } catch ( org.junit.runners.model.InitializationError e ) { throw new java.lang.RuntimeException ( "Suite constructor, called as above, should always complete" ) ; } }
public void verifyCommandSetStreamVolume ( ) { resetCounts ( ) ; mTvView.setStreamVolume ( 1.0F ) ; mInstrumentation.waitForIdleSync ( ) ; new android.cts.util.PollingCheck ( android.media.tv.cts.TvInputServiceTest.TIME_OUT ) { @ java.lang.Override protected boolean check ( ) { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession ; return ( session != null ) && ( ( session.mSetStreamVolumeCount ) > 0 ) ; } } . run ( ) ; }
public android.net.NetworkCapabilities addTransportType ( int transportType ) { android.net.NetworkCapabilities.checkValidTransportType ( transportType ) ; mTransportTypes |= 1 << transportType ; setNetworkSpecifier ( mNetworkSpecifier ) ; return this ; }
public void testCanInstallAndUninstallACaCert ( ) throws java.security.GeneralSecurityException , java.security.cert.CertificateException { assertUninstalled ( FAKE_RSA_1.caCertificate ) ; assertUninstalled ( FAKE_DSA_1.caCertificate ) ; assertTrue ( mDevicePolicyManager.installCaCert ( getWho ( ) , FAKE_RSA_1.caCertificate ) ) ; assertInstalled ( FAKE_RSA_1.caCertificate ) ; assertUninstalled ( FAKE_DSA_1.caCertificate ) ; mDevicePolicyManager.uninstallCaCert ( getWho ( ) , FAKE_RSA_1.caCertificate ) ; assertUninstalled ( FAKE_RSA_1.caCertificate ) ; assertUninstalled ( FAKE_DSA_1.caCertificate ) ; }
public void onExecuteWrite ( android.bluetooth.BluetoothDevice device , int requestId , boolean execute ) { if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) android.util.Log.d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , "onExecuteWrite" ) ; if ( execute ) { notifyExecuteWrite ( ) ; getCharacteristic ( com.android.cts.verifier.bluetooth.BleServerService.CHARACTERISTIC_UUID ) . setValue ( mReliableWriteValue ) ; mGattServer.sendResponse ( device , requestId , BluetoothGatt.GATT_SUCCESS , 0 , null ) ; } }
public java.lang.String getUrl ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.String ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.String > ( ) { @ java.lang.Override public java.lang.String call ( ) { return getUrl ( ) ; } } ) ; return ret ; } java.lang.String url = mAwContents.getUrl ( ) ; if ( ( url == null ) || ( url.trim ( ) . isEmpty ( ) ) ) return null ; return url ; }
public static com.android.sdklib.SdkManager createManager ( @ com.android.annotations.NonNull java.lang.String osSdkPath , @ com.android.annotations.NonNull com.android.utils.ILogger log ) { try { com.android.sdklib.SdkManager manager = new com.android.sdklib.SdkManager ( osSdkPath ) ; manager.reloadSdk ( log ) ; return manager ; } catch ( java.lang.Throwable throwable ) { log.error ( throwable , "Error parsing the sdk." ) ; } return null ; }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createMerge ( java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor > knownLayouts ) { java.lang.String xml_name = "merge" ; com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ ] viewLayoutAttribs = findViewLayoutAttributes ( SdkConstants.CLASS_FRAMELAYOUT , knownLayouts ) ; com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( xml_name , xml_name , null , "A root tag useful for XML layouts inflated using a ViewStub." , null , null , viewLayoutAttribs , null , false ) ; return desc ; }
public void terminateSession ( int clientId , int sessionId ) { if ( android.net.wifi.aware.WifiAwareManager.VDBG ) { android.util.Log.d ( android.net.wifi.aware.WifiAwareManager.TAG , ( ( ( "terminateSession(): clientId=" + clientId ) + ", sessionId=" ) + sessionId ) ) ; } try { mService.terminateSession ( clientId , sessionId ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier ( org.bouncycastle.asn1.ASN1ObjectIdentifier encryptionOID , java.security.AlgorithmParameters params ) throws org.bouncycastle.cert.crmf.CRMFException { org.bouncycastle.asn1.ASN1Encodable asn1Params ; if ( params != null ) { try { asn1Params = org.bouncycastle.jcajce.util.JcaJceUtils.extractParameters ( params ) ; } catch ( java.io.IOException e ) { throw new org.bouncycastle.cert.crmf.CRMFException ( ( "cannot encode parameters: " + ( e.getMessage ( ) ) ) , e ) ; } } else { asn1Params = org.bouncycastle.asn1.DERNull.INSTANCE ; } return new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( encryptionOID , asn1Params ) ; }
void addOptionInstance ( com.google.devtools.common.options.ParsedOptionDescription parsedOption , java.util.List < java.lang.String > warnings ) throws com.google.devtools.common.options.OptionsParsingException { java.lang.Object convertedValue = parsedOption.getConvertedValue ( ) ; com.google.devtools.common.options.OptionPriority priority = parsedOption.getPriority ( ) ; parsedOptions.put ( priority , parsedOption ) ; if ( convertedValue instanceof java.util.List < ? > ) { optionValues.putAll ( priority , ( ( java.util.List < ? > ) ( convertedValue ) ) ) ; } else { optionValues.put ( priority , convertedValue ) ; } }
public java.lang.String createNetworkSpecifier ( @ android.net.wifi.nan.WifiNanManager.DataPathRole int role , int peerId , @ android.annotation.Nullable byte [ ] token ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "createNetworkSpecifier: called on terminated session" ) ; return null ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "createNetworkSpecifier: called post GC on WifiNanManager" ) ; return null ; } return mgr.createNetworkSpecifier ( mClientId , role , mSessionId , peerId , token ) ; } }
public org.objectweb.asm.tree.analysis.Value merge ( org.objectweb.asm.tree.analysis.Value value1 , org.objectweb.asm.tree.analysis.Value value2 ) { if ( ( value1 == ( com.android.tools.lint.checks.CleanupDetector.CleanupTracker.RECYCLED ) ) || ( value2 == ( com.android.tools.lint.checks.CleanupDetector.CleanupTracker.RECYCLED ) ) ) { return com.android.tools.lint.checks.CleanupDetector.CleanupTracker.RECYCLED ; } else if ( ( value1 == ( com.android.tools.lint.checks.CleanupDetector.CleanupTracker.INSTANCE ) ) || ( value2 == ( com.android.tools.lint.checks.CleanupDetector.CleanupTracker.INSTANCE ) ) ) { return com.android.tools.lint.checks.CleanupDetector.CleanupTracker.INSTANCE ; } return com.android.tools.lint.checks.CleanupDetector.CleanupTracker.UNKNOWN ; }
synchronized long nScriptInvokeIDCreate ( long sid , int slot ) { validate ( ) ; return rsnScriptInvokeIDCreate ( mContext , sid , slot ) ; }
public void testReadTimeZone_OneDstTransition ( ) throws java.lang.Exception { int [ ] [ ] transitions = new int [ ] [ ] { new int [ ] { 0 , 0 } } ; int [ ] [ ] types = new int [ ] [ ] { new int [ ] { 3600 , 1 } } ; try { createZoneInfo ( transitions , types ) ; fail ( "Did not detect no non-DST transitions" ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public long getDirectoryId ( ) { int position = getPosition ( ) ; while ( moveToPrevious ( ) ) { int columnIndex = getColumnIndex ( com.android.dialer.searchfragment.remote.RemoteContactsCursor.COLUMN_DIRECTORY_ID ) ; if ( columnIndex == ( - 1 ) ) { continue ; } int id = getInt ( columnIndex ) ; if ( id == ( - 1 ) ) { continue ; } moveToPosition ( position ) ; return id ; } throw com.android.dialer.common.Assert.createIllegalStateFailException ( ( "No directory id for contact at: " + position ) ) ; }
public static double min ( double a , double b ) { return java.lang.Math.min ( a , b ) ; }
private void sendImageNotifications ( java.lang.String callId , com.android.incallui.ContactInfoCache.ContactCacheEntry entry ) { android.os.Trace.beginSection ( "ContactInfoCache.sendImageNotifications" ) ; com.android.dialer.common.Assert.isMainThread ( ) ; final java.util.Set < com.android.incallui.ContactInfoCache.ContactInfoCacheCallback > callBacks = mCallBacks.get ( callId ) ; if ( ( callBacks != null ) && ( ( entry.photo ) != null ) ) { for ( com.android.incallui.ContactInfoCache.ContactInfoCacheCallback callBack : callBacks ) { callBack.onImageLoadComplete ( callId , entry ) ; } } android.os.Trace.endSection ( ) ; }
boolean isSupported ( ) { java.lang.String versionString = mDocument.getDocumentElement ( ) . getAttribute ( com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.ATTR_FORMAT ) ; if ( ( versionString != null ) && ( ! ( versionString.isEmpty ( ) ) ) ) { try { int version = java.lang.Integer.parseInt ( versionString ) ; return version <= ( com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.CURRENT_FORMAT ) ; } catch ( java.lang.NumberFormatException nufe ) { return false ; } } return true ; }
public void testRevokePropagatedOnUpgradeNewToNewModel ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokePropagatedOnUpgradeNewToNewModel_part1" ) ; assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , true , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokePropagatedOnUpgradeNewToNewModel_part2" ) ; }
public void addCall ( android.telecom.ParcelableCall call ) throws android.os.RemoteException { if ( mCallById.containsKey ( call.getId ( ) ) ) { throw new java.lang.RuntimeException ( ( ( "Call " + ( call.getId ( ) ) ) + " already added" ) ) ; } mLatestCallId = call.getId ( ) ; mCallById.put ( call.getId ( ) , call ) ; mAddCallLock.countDown ( ) ; }
public void stopStreaming ( ) throws android.telephony.mbms.MbmsException { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( "No streaming service attached" ) ; } try { mService.stopStreaming ( mAppName , mSubscriptionId , mServiceInfo.getServiceId ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , "Remote process died" ) ; mService = null ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_SERVICE_LOST ) ; } }
public boolean isEnabled ( ) { try { mServiceLock.readLock ( ) . lock ( ) ; if ( ( mService ) != null ) return mService.isEnabled ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } finally { mServiceLock.readLock ( ) . unlock ( ) ; } return false ; }
public java.lang.String getTypeDescription ( ) { return java.lang.String.format ( "a comma-separated list of colon-separated key value pairs of the types %s and %s" , ( ( java.lang.reflect.ParameterizedType ) ( getClass ( ) . getGenericSuperclass ( ) ) ) . getActualTypeArguments ( ) [ 0 ] , ( ( java.lang.reflect.ParameterizedType ) ( getClass ( ) . getGenericSuperclass ( ) ) ) . getActualTypeArguments ( ) [ 1 ] ) ; }
public void setupDefaultSources ( ) { com.android.sdklib.internal.repository.sources.SdkSources sources = getSources ( ) ; java.lang.String baseUrl = java.lang.System.getenv ( "SDK_TEST_BASE_URL" ) ; if ( ( ( baseUrl == null ) || ( ( baseUrl.length ( ) ) <= 0 ) ) || ( ! ( baseUrl.endsWith ( "/" ) ) ) ) { baseUrl = com.android.sdklib.repository.SdkRepoConstants.URL_GOOGLE_SDK_SITE ; } sources.add ( SdkSourceCategory.ANDROID_REPO , new com.android.sdklib.internal.repository.sources.SdkRepoSource ( baseUrl , SdkSourceCategory.ANDROID_REPO.getUiName ( ) ) ) ; sources.loadUserAddons ( getSdkLog ( ) ) ; }
protected void sendSubmitPdu ( com.android.internal.telephony.cdma.SmsTracker tracker ) { if ( android.os.SystemProperties.getBoolean ( TelephonyProperties.PROPERTY_INECM_MODE , false ) ) { if ( com.android.internal.telephony.cdma.CdmaSMSDispatcher.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CdmaSMSDispatcher.TAG , "Block SMS in Emergency Callback mode" ) ; } tracker.onFailed ( mContext , SmsManager.RESULT_ERROR_NO_SERVICE , 0 ) ; return ; } sendRawPdu ( tracker ) ; }
public boolean setNetworkExtra ( int netId , java.lang.String name , java.util.Map < java.lang.String , java.lang.String > values ) { java.lang.String encoded = com.android.server.wifi.WifiNative.createNetworkExtra ( values ) ; if ( encoded == null ) { return false ; } return setNetworkVariable ( netId , name , ( ( "\"" + encoded ) + "\"" ) ) ; }
boolean cancelBondProcess ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; byte [ ] addr = com.android.bluetooth.Utils.getBytesFromAddress ( device.getAddress ( ) ) ; com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties ( device ) ; if ( deviceProp != null ) { deviceProp.setBondingInitiatedLocally ( false ) ; } return cancelBondNative ( addr ) ; }
public static void loginGooglePlay ( android.app.Instrumentation instrumentation ) throws java.lang.Exception { final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance ( instrumentation ) ; final java.lang.String email = "pstester1980@gmail.com" ; final java.lang.String password = "pst4lif3" ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore ( instrumentation ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Play Store" ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStorePermissionsWatcher ( device ) . checkForCondition ( ) ; boolean hasSearchBox = new com.android.devtools.systemimage.uitest.utils.Wait ( java.util.concurrent.TimeUnit.SECONDS.toMillis ( 20 ) ) . until ( new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition ( ) { @ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { return ( device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.GOOGLE_PLAY_IDLE_RES ) ) . exists ( ) ) || ( device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.GOOGLE_PLAY_ACTIVE_RES ) ) . exists ( ) ) ; } } ) ; if ( hasSearchBox ) { device.pressHome ( ) ; return ; } boolean needsEmail = new com.android.devtools.systemimage.uitest.utils.Wait ( ) . until ( new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition ( ) { @ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel ( ) ) == 24 ) { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( "Email or phone" ) ) . exists ( ) ; } else { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( "Email or phone" ) ) . exists ( ) ; } } } ) ; if ( ! needsEmail ) { boolean needsPassword = new com.android.devtools.systemimage.uitest.utils.Wait ( ) . until ( new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition ( ) { @ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel ( ) ) == 24 ) { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( ( "Sign in " + email ) ) ) . exists ( ) ; } else { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( ( "Sign in " + email ) ) ) . exists ( ) ; } } } ) ; if ( ! needsPassword ) { device.pressHome ( ) ; return ; } android.support.test.uiautomator.UiObject inputPasswordField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( "password" ) ) ; inputPasswordField.clearTextField ( ) ; inputPasswordField.setText ( password ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher ( device ) . checkForCondition ( ) ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.logInWithPassword ( instrumentation , password ) ; } else { android.support.test.uiautomator.UiObject inputEmailField ; if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel ( ) ) == 24 ) { inputEmailField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( "Email or phone" ) ) ; } else { inputEmailField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( "Email or phone" ) ) ; } inputEmailField.clearTextField ( ) ; inputEmailField.setText ( email ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher ( device ) . checkForCondition ( ) ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.logInWithPassword ( instrumentation , password ) ; } new com.android.devtools.systemimage.uitest.watchers.PlayStorePermissionsWatcher ( device ) . checkForCondition ( ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher ( device ) . checkForCondition ( ) ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore ( instrumentation ) ; device.pressHome ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Play Store" ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStorePermissionsWatcher ( device ) . checkForCondition ( ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher ( device ) . checkForCondition ( ) ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore ( instrumentation ) ; device.pressHome ( ) ; return ; }
public void testLibProguard ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguard" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_OUTPUTS ) ) + "/proguard/release" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , java.util.Collections.< java.lang.String > emptyList ( ) , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int proguardInt -> a" } ) ; }
private boolean migrateFromLegacyStore ( ) { if ( mWifiConfigStoreLegacy.areStoresPresent ( ) ) { com.android.server.wifi.WifiConfigStoreLegacy.WifiConfigStoreDataLegacy storeData = mWifiConfigStoreLegacy.read ( ) ; android.util.Log.d ( com.android.server.wifi.WifiConfigManager.TAG , "Reading from legacy store completed" ) ; loadInternalData ( storeData.getConfigurations ( ) , storeData.getDeletedEphemeralSSIDs ( ) ) ; if ( ! ( saveToStore ( true ) ) ) { return false ; } android.util.Log.d ( com.android.server.wifi.WifiConfigManager.TAG , "Migration from legacy store completed" ) ; } return true ; }
public void testEnded ( com.android.ddmlib.testrunner.TestIdentifier test , java.util.Map < java.lang.String , java.lang.String > testMetrics ) { mRunResult.testEnded ( test , testMetrics ) ; }
public void testSize ( ) { com.android.test.runner.TestRequestBuilder b = new com.android.test.runner.TestRequestBuilder ( new java.io.PrintStream ( new java.io.ByteArrayOutputStream ( ) ) ) ; b.addTestClass ( com.android.test.runner.TestRequestBuilderTest.SampleTest.class . getName ( ) ) ; b.addTestSizeFilter ( "small" ) ; com.android.test.runner.TestRequest request = b.build ( mInstr , mBundle ) ; org.junit.runner.JUnitCore testRunner = new org.junit.runner.JUnitCore ( ) ; org.junit.runner.Result result = testRunner.run ( request.getRequest ( ) ) ; org.junit.Assert.assertEquals ( 1 , result.getRunCount ( ) ) ; }
private void callbackUnavailableTest ( android.autofillservice.cts.CannedFillResponse response ) throws java.lang.Throwable { enableService ( ) ; final android.autofillservice.cts.MyAutofillCallback callback = mActivity.registerCallback ( ) ; sReplier.addResponse ( response ) ; focusToUsernameExpectNoWindowEvent ( ) ; sReplier.getNextFillRequest ( ) ; sUiBot.assertNoDatasets ( ) ; callback.assertUiUnavailableEvent ( mActivity.mCustomView , mActivity.mUsername.text.id ) ; }
private static void assertSubArrayEquals ( int [ ] expected , int len , int [ ] actual ) { java.lang.String expectedString = libcore.io.Base64Test.intsToString ( expected , len ) ; java.lang.String actualString = libcore.io.Base64Test.intsToString ( actual , actual.length ) ; assertEquals ( expectedString , actualString ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( ( "{mTag=" + ( mTag ) ) + " mApnContext=" ) + ( mApnContext ) ) + " mProfileId=" ) + ( mProfileId ) ) + " mRat=" ) + ( mRilRat ) ) + " mUnmeteredUseOnly=" ) + ( mUnmeteredUseOnly ) ) + " mOnCompletedMsg=" ) + ( com.android.internal.telephony.dataconnection.DataConnection.msgToString ( mOnCompletedMsg ) ) ) + "}" ; }
public android.content.pm.ResolveInfo getLastChosenActivity ( android.content.Intent intent , java.lang.String resolvedType , int flags ) { final int userId = android.os.UserHandle.getCallingUserId ( ) ; if ( com.android.server.pm.PackageManagerService.DEBUG_PREFERRED ) android.util.Log.v ( com.android.server.pm.PackageManagerService.TAG , ( "Querying last chosen activity for " + intent ) ) ; final java.util.List < android.content.pm.ResolveInfo > query = queryIntentActivitiesInternal ( intent , resolvedType , flags , userId ) ; return findPreferredActivity ( intent , resolvedType , flags , query , 0 , false , false , false , userId ) ; }
private void printCharacterData ( int depth , org.w3c.dom.Node node ) { java.lang.String nodeValue = node.getNodeValue ( ) ; boolean separateLine = ( nodeValue.indexOf ( '\n' ) ) != ( - 1 ) ; if ( separateLine && ( ! ( endsWithLineSeparator ( ) ) ) ) { mOut.append ( mLineSeparator ) ; } mOut.append ( "<![CDATA[" ) ; mOut.append ( nodeValue ) ; mOut.append ( "]]>" ) ; if ( separateLine ) { mOut.append ( mLineSeparator ) ; } }
public static java.util.List < java.lang.String > readLines ( java.net.URL url , java.nio.charset.Charset charset ) throws java.io.IOException { return com.google.common.io.Resources.readLines ( url , charset , new com.google.common.io.LineProcessor < java.util.List < java.lang.String > > ( ) { final java.util.List < java.lang.String > result = com.google.common.collect.Lists.newArrayList ( ) ; @ java.lang.Override public boolean processLine ( java.lang.String line ) { result.add ( line ) ; return true ; } @ java.lang.Override public java.util.List < java.lang.String > getResult ( ) { return result ; } } ) ; }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType.isCreate ( ) ) { java.lang.String fillParent = getFillParentValueName ( ) ; com.android.ide.common.api.INode hint = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; com.android.ide.common.api.INode primary = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_BELOW , "@android:id/hint" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; } }
public void parse ( ) throws java.io.IOException { long headerLength = parseHeader ( mTraceFile ) ; java.nio.ByteBuffer buffer = com.android.ddmlib.ByteBufferUtil.mapFile ( mTraceFile , headerLength , java.nio.ByteOrder.LITTLE_ENDIAN ) ; parseData ( buffer ) ; computeTimingStatistics ( ) ; }
private java.io.InputStream openFileSystemContents ( java.lang.String fileName ) throws java.io.IOException { java.lang.String fullFileName = ( ( libcore.java.net.FtpURLConnectionTest.VALID_USER_HOME_DIR ) + "/" ) + fileName ; org.mockftpserver.fake.filesystem.FileEntry entry = ( ( org.mockftpserver.fake.filesystem.FileEntry ) ( fileSystem.getEntry ( fullFileName ) ) ) ; assertNotNull ( ( "File must exist with name " + fullFileName ) , entry ) ; return entry.createInputStream ( ) ; }
public void testNextLongBoundNonPositive ( ) { java.util.concurrent.ThreadLocalRandom rnd = java.util.concurrent.ThreadLocalRandom.current ( ) ; for ( long bound : new long [ ] { 0L , - 17L , java.lang.Long.MIN_VALUE } ) { try { rnd.nextLong ( bound ) ; shouldThrow ( ) ; } catch ( java.lang.IllegalArgumentException success ) { } } }
synchronized void nScriptForEach ( long id , int slot , long ain , long aout , byte [ ] params , boolean mUseInc ) { validate ( ) ; if ( params == null ) { rsnScriptForEach ( mContext , mIncCon , id , slot , ain , aout , mUseInc ) ; } else { rsnScriptForEach ( mContext , mIncCon , id , slot , ain , aout , params , mUseInc ) ; } }
public void testAesCbcHmacSha512Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , getAuthKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { final int statusCode = intent.getIntExtra ( PackageInstaller.EXTRA_STATUS , PackageInstaller.STATUS_FAILURE ) ; if ( statusCode == ( android.content.pm.PackageInstaller.STATUS_PENDING_USER_ACTION ) ) { context.startActivity ( ( ( android.content.Intent ) ( intent.getParcelableExtra ( Intent.EXTRA_INTENT ) ) ) ) ; } else { onPackageInstalled ( statusCode ) ; } }
private void tearDown ( android.app.admin.DevicePolicyManager dpm , android.content.ComponentName admin ) { if ( ( dpm == null ) || ( ! ( dpm.isDeviceOwnerApp ( getPackageName ( ) ) ) ) ) { return ; } dpm.setStatusBarDisabled ( admin , false ) ; dpm.setKeyguardDisabled ( admin , false ) ; dpm.clearUserRestriction ( admin , UserManager.DISALLOW_CONFIG_BLUETOOTH ) ; dpm.clearUserRestriction ( admin , UserManager.DISALLOW_CONFIG_WIFI ) ; dpm.clearUserRestriction ( admin , UserManager.DISALLOW_CONFIG_VPN ) ; dpm.clearDeviceOwnerApp ( getPackageName ( ) ) ; }
void sendAfterTextChanged ( android.text.Editable text ) { if ( ( mListeners ) != null ) { final java.util.ArrayList < android.text.TextWatcher > list = mListeners ; final int count = list.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { list.get ( i ) . afterTextChanged ( text ) ; } } hideErrorIfUnchanged ( ) ; }
public void generateApkDataEntryInManifest ( int minSdkVersion , int targetSdkVersion , @ com.android.annotations.NonNull java.io.File manifestFile ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.StringBuilder content = new java.lang.StringBuilder ( ) ; content.append ( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" ) . append ( "<manifest package=\"\" xmlns:android=\"http://schemas.android.com/apk/res/android\">\n" ) . append ( " <uses-sdk android:minSdkVersion=\"" ) . append ( minSdkVersion ) . append ( "\"" ) ; if ( targetSdkVersion != ( - 1 ) ) { content.append ( " android:targetSdkVersion=\"" ) . append ( targetSdkVersion ) . append ( "\"" ) ; } content.append ( "/>\n" ) ; content.append ( " <application>\n" ) . append ( ( ( " <meta-data android:name=\"" + ( com.android.builder.core.BuilderConstants.ANDROID_WEAR ) ) + "\"\n" ) ) . append ( ( " android:resource=\"@xml/" + ( com.android.builder.core.BuilderConstants.ANDROID_WEAR_MICRO_APK ) ) ) . append ( "\" />\n" ) . append ( " </application>\n" ) . append ( "</manifest>\n" ) ; com.google.common.io.Files.write ( content , manifestFile , com.google.common.base.Charsets.UTF_8 ) ; }
private static void addZipEntry ( java.util.zip.ZipOutputStream zos , java.lang.String name , byte [ ] content ) throws com.android.timezone.distro.DistroException { try { java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry ( name ) ; zipEntry.setSize ( content.length ) ; zipEntry.setTime ( com.android.timezone.distro.tools.TimeZoneDistroBuilder.ENTRY_TIMESTAMP ) ; zos.putNextEntry ( zipEntry ) ; zos.write ( content ) ; zos.closeEntry ( ) ; } catch ( java.io.IOException e ) { throw new com.android.timezone.distro.DistroException ( "Unable to add zip entry" , e ) ; } }
public void onPause ( ) { super . onPause ( ) ; if ( ( ( mPhone ) != null ) && ( ! ( com.android.settings.Utils.isWifiOnly ( getApplicationContext ( ) ) ) ) ) { mPhoneStateReceiver.unregisterIntent ( ) ; mTelephonyManager.listen ( mPhoneStateListener , PhoneStateListener.LISTEN_NONE ) ; } if ( mShowLatestAreaInfo ) { unregisterReceiver ( mAreaInfoReceiver ) ; } unregisterReceiver ( mBatteryInfoReceiver ) ; unregisterReceiver ( mConnectivityReceiver ) ; mHandler.removeMessages ( com.android.settings.deviceinfo.Status.EVENT_UPDATE_STATS ) ; }
public V get ( @ javax.annotation.Nullable java.lang.Object key ) { if ( key == null ) { return null ; } int index = ( com.google.common.collect.Hashing.smear ( key.hashCode ( ) ) ) & ( mask ) ; for ( com.google.common.collect.ImmutableMapEntry < K , V > entry = table [ index ] ; entry != null ; entry = entry.getNextInKeyBucket ( ) ) { K candidateKey = entry.getKey ( ) ; if ( key.equals ( candidateKey ) ) { return entry.getValue ( ) ; } } return null ; }
private java.io.File getLoggingDir ( java.lang.String testClassName , java.lang.String testMethodName ) { java.io.File externalStorageLogDir = new java.io.File ( android.os.Environment.getExternalStorageDirectory ( ) . getPath ( ) , "Logs" ) ; if ( ! ( externalStorageLogDir.exists ( ) ) ) externalStorageLogDir.mkdir ( ) ; java.io.File loggingDir = new java.io.File ( new java.io.File ( externalStorageLogDir.getPath ( ) , testClassName ) , testMethodName ) ; loggingDir.mkdirs ( ) ; return loggingDir ; }
public void copyFrom ( com.android.server.pm.PackageSettingBase base ) { grantedPermissions = base.grantedPermissions ; gids = base.gids ; requiredCpuAbiString = base.requiredCpuAbiString ; timeStamp = base.timeStamp ; firstInstallTime = base.firstInstallTime ; lastUpdateTime = base.lastUpdateTime ; signatures = base.signatures ; permissionsFixed = base.permissionsFixed ; haveGids = base.haveGids ; userState.clear ( ) ; for ( int i = 0 ; i < ( base.userState.size ( ) ) ; i ++ ) { userState.put ( base.userState.keyAt ( i ) , base.userState.valueAt ( i ) ) ; } installStatus = base.installStatus ; keySetData = base.keySetData ; }
public com.android.jack.util.MethodNameCodec.MethodNameValue parseString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) { try { return checkString ( context , string ) ; } catch ( com.android.sched.util.codec.ParsingException e ) { throw new com.android.sched.util.config.ConfigurationError ( e ) ; } }
private void modifyClass ( org.objectweb.asm.tree.ClassNode classNode ) { classNode.access &= ~ ( org.objectweb.asm.Opcodes.ACC_FINAL ) ; java.util.List < org.objectweb.asm.tree.MethodNode > methodNodes = classNode.methods ; for ( org.objectweb.asm.tree.MethodNode methodNode : methodNodes ) { methodNode.access &= ~ ( org.objectweb.asm.Opcodes.ACC_FINAL ) ; fixMethodBody ( methodNode , classNode ) ; } java.util.List < org.objectweb.asm.tree.InnerClassNode > innerClasses = classNode.innerClasses ; for ( org.objectweb.asm.tree.InnerClassNode innerClassNode : innerClasses ) { innerClassNode.access &= ~ ( org.objectweb.asm.Opcodes.ACC_FINAL ) ; } }
public java.lang.Package [ ] getInstalledPackages ( ) { com.android.sdklib.internal.repository.LocalSdkParser parser = getLocalSdkParser ( ) ; java.lang.Package [ ] packages = parser.getPackages ( ) ; if ( packages == null ) { packages = parser.parseSdk ( getOsSdkRoot ( ) , getSdkManager ( ) , getSdkLog ( ) ) ; } return packages ; }
public java.lang.String toString ( ) { java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; long bioCtx = org.conscrypt.NativeCrypto.create_BIO_OutputStream ( os ) ; try { org.conscrypt.NativeCrypto.X509_print_ex ( bioCtx , mContext , 0 , 0 ) ; return os.toString ( ) ; } finally { org.conscrypt.NativeCrypto.BIO_free_all ( bioCtx ) ; } }
public void testLayerDoesNotTriggerLifecycleMethods ( ) throws java.lang.Exception { if ( mActivityManager.isLowRamDevice ( ) ) { android.util.Log.d ( android.assist.cts.LifecycleTest.TAG , "Not running assist tests on low-RAM device." ) ; return ; } mTestActivity.startTest ( Utils.LIFECYCLE ) ; waitForAssistantToBeReady ( mReadyLatch ) ; mTestActivity.start3pApp ( Utils.LIFECYCLE ) ; waitForOnResume ( ) ; startSession ( ) ; waitForContext ( ) ; waitAndSeeIfLifecycleMethodsAreTriggered ( ) ; }
protected void createFilter ( com.android.gallery3d.filtershow.filters.Resources res , float scaleFactor , int quality , android.renderscript.Allocation in ) { android.renderscript.RenderScript rsCtx = getRenderScriptContext ( ) ; android.renderscript.Type.Builder tb_float = new android.renderscript.Type.Builder ( rsCtx , android.renderscript.Element.F32_4 ( rsCtx ) ) ; tb_float.setX ( in.getType ( ) . getX ( ) ) ; tb_float.setY ( in.getType ( ) . getY ( ) ) ; mScript = new com.android.gallery3d.filtershow.filters.ScriptC_saturation ( rsCtx ) ; }
public com.android.ide.common.api.DropFeedback callOnDropMove ( com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy targetNode , com.android.ide.common.api.IDragElement [ ] elements , com.android.ide.common.api.DropFeedback feedback , com.android.ide.common.api.Point where ) { com.android.ide.common.api.IViewRule rule = loadRule ( targetNode.getNode ( ) ) ; if ( rule != null ) { try { return rule.onDropMove ( targetNode , elements , feedback , where ) ; } catch ( java.lang.Exception e ) { com.android.ide.eclipse.adt.AdtPlugin.log ( e , "%s.onDropMove() failed: %s" , rule.getClass ( ) . getSimpleName ( ) , e.toString ( ) ) ; } } return null ; }
private boolean contactsDeleted ( long lastModified ) { try ( android.database.Cursor cursor = appContext.getContentResolver ( ) . query ( DeletedContacts.CONTENT_URI , new java.lang.String [ ] { android.provider.ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP } , ( ( android.provider.ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP ) + " > ?" ) , new java.lang.String [ ] { java.lang.Long.toString ( lastModified ) } , null ) ) { if ( cursor == null ) { com.android.dialer.common.LogUtil.w ( "Cp2PhoneLookup.contactsDeleted" , "null cursor" ) ; return false ; } return ( cursor.getCount ( ) ) > 0 ; } }
public void replaceWith ( com.android.ide.common.rendering.api.ResourceValue value ) { assert value instanceof com.android.ide.common.rendering.api.StyleResourceValue ; super . replaceWith ( value ) ; if ( value instanceof com.android.ide.common.rendering.api.StyleResourceValue ) { mItems.clear ( ) ; mItems.putAll ( ( ( com.android.ide.common.rendering.api.StyleResourceValue ) ( value ) ) . mItems ) ; } }
private java.util.List < java.lang.Integer > readTypeIds ( ) { com.android.jack.dx.io.DexBuffer.Section typeIds = open ( tableOfContents.typeIds.off ) ; java.lang.Integer [ ] result = new java.lang.Integer [ tableOfContents.typeIds.size ] ; for ( int i = 0 ; i < ( tableOfContents.typeIds.size ) ; ++ i ) { result [ i ] = java.lang.Integer.valueOf ( typeIds.readInt ( ) ) ; } return java.util.Arrays.asList ( result ) ; }
private static void applyInvokeWithSecurityPolicy ( com.android.internal.os.ZygoteConnection.Arguments args , android.net.Credentials peer , java.lang.String peerSecurityContext ) throws com.android.internal.os.ZygoteSecurityException { int peerUid = peer.getUid ( ) ; if ( ( ( args.invokeWith ) != null ) && ( peerUid != 0 ) ) { throw new com.android.internal.os.ZygoteSecurityException ( ( "Peer is not permitted to specify " + "an explicit invoke-with wrapper command" ) ) ; } if ( ( args.invokeWith ) != null ) { boolean allowed = android.os.SELinux.checkSELinuxAccess ( peerSecurityContext , peerSecurityContext , "zygote" , "specifyinvokewith" ) ; if ( ! allowed ) { throw new com.android.internal.os.ZygoteSecurityException ( ( "Peer is not permitted to specify " + "an explicit invoke-with wrapper command" ) ) ; } } }
private void logValidationProbe ( long durationMs , int probeType , int probeResult ) { int [ ] transports = mNetworkAgentInfo.networkCapabilities.getTransportTypes ( ) ; boolean isFirstValidation = validationStage ( ) . isFirstValidation ; android.net.metrics.ValidationProbeEvent ev = new android.net.metrics.ValidationProbeEvent ( ) ; ev.probeType = android.net.metrics.ValidationProbeEvent.makeProbeType ( probeType , isFirstValidation ) ; ev.returnCode = probeResult ; ev.durationMs = durationMs ; mMetricsLog.log ( mNetId , transports , ev ) ; }
public void setMute ( boolean enableMute , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SET_MUTE , response , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " " ) + enableMute ) ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( ( enableMute ? 1 : 0 ) ) ; send ( rr ) ; }
public void reportConnectionFailureIsIgnoredWithoutVerboseMode ( ) { final boolean verbosityToggle = false ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.mockito.Mockito.verify ( mWifiNative ) . getTxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; org.mockito.Mockito.verify ( mWifiNative ) . getRxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; }
public static void computeCospi ( android.renderscript.cts.TestCospi.ArgumentsFloatFloat args ) { android.renderscript.cts.Floaty ip = new android.renderscript.cts.Floaty ( ( ( float ) ( ( ( double ) ( args.in ) ) * ( java.lang.Math.PI ) ) ) , 1 , 1 ) ; args.out = android.renderscript.cts.Floaty.FloatyFromRange ( ( ( float ) ( java.lang.Math.cos ( ip.getDoubleMin ( ) ) ) ) , ( ( float ) ( java.lang.Math.cos ( ip.getDoubleMax ( ) ) ) ) , 4 , 128 ) ; }
synchronized void nScriptInvoke ( long id , int slot , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptInvoke ( curCon , id , slot , mUseInc ) ; }
private static void child ( ) throws java.lang.Exception { java.lang.System.out.println ( "spawning child" ) ; java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder ( "sleep" , "5" ) ; java.lang.Process proc = pb.start ( ) ; java.lang.Thread.sleep ( 2000 ) ; Main.checkManager ( ) ; proc.waitFor ( ) ; java.lang.System.out.println ( "child died" ) ; }
public android.database.Cursor queryAggregationSuggestions ( android.database.sqlite.SQLiteQueryBuilder qb , java.lang.String [ ] projection , long contactId , int maxSuggestions , java.lang.String filter , java.util.ArrayList < com.android.providers.contacts.ContactAggregator.AggregationSuggestionParameter > parameters ) { final android.database.sqlite.SQLiteDatabase db = mDbHelper.getReadableDatabase ( ) ; db.beginTransaction ( ) ; try { java.util.List < com.android.providers.contacts.ContactMatcher.MatchScore > bestMatches = findMatchingContacts ( db , contactId , parameters ) ; return queryMatchingContacts ( qb , db , projection , bestMatches , maxSuggestions , filter ) ; } finally { db.endTransaction ( ) ; } }
private static boolean meetsCallFeatureCriteria ( android.content.ContentValues row1 , android.content.ContentValues row2 ) { int row1Features = row1.getAsInteger ( AnnotatedCallLog.FEATURES ) ; int row2Features = row2.getAsInteger ( AnnotatedCallLog.FEATURES ) ; if ( ( row1Features & ( com.android.dialer.compat.telephony.TelephonyManagerCompat.FEATURES_ASSISTED_DIALING ) ) != ( row2Features & ( com.android.dialer.compat.telephony.TelephonyManagerCompat.FEATURES_ASSISTED_DIALING ) ) ) { return false ; } if ( ( row1Features & ( android.provider.CallLog.Calls.FEATURES_VIDEO ) ) != ( row2Features & ( android.provider.CallLog.Calls.FEATURES_VIDEO ) ) ) { return false ; } return true ; }
public final void process ( com.google.currysrc.api.process.Context context , org.eclipse.jdt.core.dom.CompilationUnit cu ) { java.util.List < org.eclipse.jdt.core.dom.Comment > comments = cu.getCommentList ( ) ; org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite = context.rewrite ( ) ; com.google.currysrc.api.process.Reporter reporter = context.reporter ( ) ; for ( org.eclipse.jdt.core.dom.Comment comment : com.google.common.collect.Lists.reverse ( comments ) ) { if ( comment instanceof org.eclipse.jdt.core.dom.Javadoc ) { org.eclipse.jdt.core.dom.Javadoc javadoc = ( ( org.eclipse.jdt.core.dom.Javadoc ) ( comment ) ) ; visit ( reporter , javadoc , rewrite ) ; } } }
com.android.sched.vfs.ParentVFile createVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.ParentVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed ( ) ) ; assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ) != 0 ; java.io.File path = getNativeFile ( parent.getPath ( ) , name ) ; try { com.android.sched.util.file.AbstractStreamFile.create ( path , new com.android.sched.util.location.FileLocation ( path ) ) ; } catch ( com.android.sched.util.file.FileAlreadyExistsException e ) { } return new com.android.sched.vfs.ParentVFile ( this , parent , name ) ; }
private static java.io.InputStream inputStreamFromConnection ( java.net.HttpURLConnection connection ) { java.io.InputStream inputStream ; try { inputStream = connection.getInputStream ( ) ; } catch ( java.io.IOException ioe ) { inputStream = connection.getErrorStream ( ) ; } return inputStream ; }
public void testSetValues001 ( ) { logWriter.println ( "testSetValues001 started" ) ; synchronizer.receiveMessage ( JPDADebuggeeSynchronizer.SGNL_READY ) ; long classID = getClassIDBySignature ( getDebuggeeSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Field [ ] fields = jdwpGetFieldIDs ( classID ) ; for ( int i = 0 ; i < ( fields.length ) ; i ++ ) { org.apache.harmony.jpda.tests.framework.jdwp.Field field = fields [ i ] ; testField ( classID , field ) ; } }
java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { java.util.List < android.bluetooth.BluetoothDevice > devices = new java.util.ArrayList < > ( ) ; synchronized ( this ) { if ( ( getCurrentState ( ) ) instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase ) { devices.add ( mCurrentDevice ) ; } } return devices ; }
public static < T > org.hamcrest.org.hamcrest.Matcher < T > allOf ( org.hamcrest.org.hamcrest.Matcher < ? extends T > first , org.hamcrest.org.hamcrest.Matcher < ? extends T > second , org.hamcrest.org.hamcrest.Matcher < ? extends T > third , org.hamcrest.org.hamcrest.Matcher < ? extends T > fourth , org.hamcrest.org.hamcrest.Matcher < ? extends T > fifth , org.hamcrest.org.hamcrest.Matcher < ? extends T > sixth ) { return org.hamcrest.core.AllOf.< org.hamcrest.T > allOf ( first , second , third , fourth , fifth , sixth ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; com.android.server.wifi.TestUtil.installWlanWifiNative ( mWifiNative ) ; mLooper = new android.os.test.TestLooper ( ) ; org.mockito.Mockito.when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; mRttServiceImpl = new com.android.server.wifi.RttService.RttServiceImpl ( mContext , mLooper.getLooper ( ) , mWifiInjector ) ; mRttServiceImpl.startService ( ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( getName ( ) ) + " ignore connect" ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_REJECT ) ; }
public void testStrategyFileSimple ( ) throws java.lang.Exception { final android.support.v4.content.FileProvider.SimplePathStrategy strat = new android.support.v4.content.FileProvider.SimplePathStrategy ( "authority" ) ; strat.addRoot ( "tag" , mContext.getFilesDir ( ) ) ; java.io.File expectedRoot = mContext.getFilesDir ( ) . getCanonicalFile ( ) ; java.io.File file = android.support.v4.content.FileProviderTest.buildPath ( expectedRoot , "file.test" ) ; assertEquals ( file.getPath ( ) , strat.getFileForUri ( android.net.Uri.parse ( "content://authority/tag/file.test" ) ) . getPath ( ) ) ; file = android.support.v4.content.FileProviderTest.buildPath ( expectedRoot , "subdir" , "file.test" ) ; assertEquals ( file.getPath ( ) , strat.getFileForUri ( android.net.Uri.parse ( "content://authority/tag/subdir/file.test" ) ) . getPath ( ) ) ; }
public void write ( java.lang.String iface , android.net.IpConfiguration config ) { boolean modified ; synchronized ( mSync ) { if ( config == null ) { modified = ( mIpConfigurations.remove ( iface ) ) != null ; } else { android.net.IpConfiguration oldConfig = mIpConfigurations.put ( iface , config ) ; modified = ! ( config.equals ( oldConfig ) ) ; } if ( modified ) { mStore.writeIpConfigurations ( com.android.server.ethernet.EthernetConfigStore.ipConfigFile , mIpConfigurations ) ; } } }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.CachedDirectFS ( new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) , permissions ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e ) ; } }
private static java.io.File findTemplatesDirInPluginJar ( java.lang.String name ) { java.io.File jarPath = new java.io.File ( com.intellij.util.PathUtil.getJarPathForClass ( com.google.gct.idea.appengine.wizard.AppEngineTemplates.class ) ) ; if ( jarPath.isFile ( ) ) { jarPath = jarPath.getParentFile ( ) ; } return new java.io.File ( jarPath , name ) ; }
public boolean waitForCalls ( int expectedCalls , long timeout ) throws java.lang.InterruptedException { synchronized ( mLock ) { mExpectedCalls = expectedCalls ; long startTime = android.os.SystemClock.elapsedRealtime ( ) ; while ( ( mCalls ) < ( mExpectedCalls ) ) { long waitTime = timeout - ( ( android.os.SystemClock.elapsedRealtime ( ) ) - startTime ) ; if ( waitTime > 0 ) { mLock.wait ( waitTime ) ; } else { return false ; } } return true ; } }
private void shrink ( ) throws java.io.IOException { if ( configuration.verbose ) { java.lang.System.out.println ( "Shrinking..." ) ; if ( ( configuration.whyAreYouKeeping ) != null ) { java.lang.System.out.println ( "Explaining why classes and class members are being kept..." ) ; } if ( ( configuration.printUsage ) != null ) { java.lang.System.out.println ( ( ( "Printing usage to [" + ( fileName ( configuration.printUsage ) ) ) + "]..." ) ) ; } } programClassPool = new proguard.shrink.Shrinker ( configuration ) . execute ( programClassPool , libraryClassPool ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { final com.intellij.openapi.module.Module selectedModule = LangDataKeys.MODULE.getData ( e.getDataContext ( ) ) ; com.google.gct.login.stats.UsageTrackerService.getInstance ( ) . trackEvent ( GctTracking.CATEGORY , GctTracking.DEPLOY , "show.dialog" , null ) ; com.google.gct.idea.appengine.deploy.AppEngineUpdateDialog.show ( e.getProject ( ) , selectedModule ) ; }
private static com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode createNode ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode parent , java.lang.String fqn , boolean hasChildren ) { java.lang.String name = fqn.substring ( ( ( fqn.lastIndexOf ( '.' ) ) + 1 ) ) ; com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor descriptor = com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfoTest.createDesc ( name , fqn , hasChildren ) ; if ( parent == null ) { parent = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfoTest.createDesc ( "doc" , "doc" , true ) ) ; } return ( ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ) ( parent.appendNewUiChild ( descriptor ) ) ) ; }
public com.android.internal.telephony.TimeZoneLookupHelper.CountryResult lookupByCountry ( java.lang.String isoCountryCode , long whenMillis ) { libcore.util.CountryTimeZones countryTimeZones = libcore.util.TimeZoneFinder.getInstance ( ) . lookupCountryTimeZones ( isoCountryCode ) ; if ( countryTimeZones == null ) { return null ; } if ( ( countryTimeZones.getDefaultTimeZoneId ( ) ) == null ) { return null ; } return new com.android.internal.telephony.TimeZoneLookupHelper.CountryResult ( countryTimeZones.getDefaultTimeZoneId ( ) , countryTimeZones.isDefaultOkForCountryTimeZoneDetection ( whenMillis ) , whenMillis ) ; }
public static org.w3c.dom.Document parse ( @ com.android.annotations.NonNull byte [ ] data , boolean checkDtd ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String xml = com.android.utils.PositionXmlParser.getXmlString ( data ) ; xml = com.android.utils.XmlUtils.stripBom ( xml ) ; return com.android.utils.PositionXmlParser.parse ( xml , new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) , true , checkDtd ) ; }
public javax.security.auth.x500.X500Principal getIssuerX500Principal ( ) { if ( ( info ) == null ) { return null ; } try { javax.security.auth.x500.X500Principal issuer = ( ( javax.security.auth.x500.X500Principal ) ( info.get ( ( ( ( sun.security.x509.X509CertInfo.ISSUER ) + ( sun.security.x509.X509CertImpl.DOT ) ) + "x500principal" ) ) ) ) ; return issuer ; } catch ( java.lang.Exception e ) { return null ; } }
public void testDuplicateInsertionCarrierInfo ( ) { try { android.content.ContentValues contentValues = com.android.providers.telephony.CarrierIdProviderTest.createCarrierInfoInternal ( ) ; mContentResolver.insert ( CarrierIdentification.All.CONTENT_URI , contentValues ) ; mContentResolver.insert ( CarrierIdentification.All.CONTENT_URI , contentValues ) ; org.junit.Assert.fail ( "should throw an exception for duplicate carrier info" ) ; } catch ( java.lang.Exception e ) { android.util.Log.d ( com.android.providers.telephony.CarrierIdProviderTest.TAG , ( "Error inserting carrier info:" + e ) ) ; } }
private void sendInfoNotifications ( java.lang.String callId , com.android.incallui.ContactInfoCache.ContactCacheEntry entry ) { android.os.Trace.beginSection ( "ContactInfoCache.sendInfoNotifications" ) ; com.android.dialer.common.Assert.isMainThread ( ) ; final java.util.Set < com.android.incallui.ContactInfoCache.ContactInfoCacheCallback > callBacks = mCallBacks.get ( callId ) ; if ( callBacks != null ) { for ( com.android.incallui.ContactInfoCache.ContactInfoCacheCallback callBack : callBacks ) { callBack.onContactInfoComplete ( callId , entry ) ; } } android.os.Trace.endSection ( ) ; }
public void copyFrom ( int [ ] d ) { validateIsInt32 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_32 , d.length ) ; }
public boolean setApplicationHidden ( @ android.annotation.NonNull android.content.ComponentName admin , java.lang.String packageName , boolean hidden ) { throwIfParentInstance ( "setApplicationHidden" ) ; if ( ( mService ) != null ) { try { return mService.setApplicationHidden ( admin , mContext.getPackageName ( ) , packageName , hidden ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return false ; }
public void setExternalCallStateListener ( com.android.ims.ImsExternalCallStateListener externalCallStateListener ) throws com.android.ims.ImsException { try { if ( com.android.ims.ImsMultiEndpoint.DBG ) android.telephony.Rlog.d ( com.android.ims.ImsMultiEndpoint.TAG , "setExternalCallStateListener" ) ; mImsMultiendpoint.setListener ( new com.android.ims.ImsMultiEndpoint.ImsExternalCallStateListenerProxy ( externalCallStateListener ) ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "setExternalCallStateListener could not be set." , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void mouseDoubleClick ( org.eclipse.swt.events.MouseEvent e ) { com.android.hierarchyviewerlib.ui.util.DrawableViewNode clickedNode = null ; synchronized ( this ) { if ( ( ( tree ) != null ) && ( ( viewport ) != null ) ) { com.android.hierarchyviewerlib.ui.util.DrawableViewNode.Point pt = transformPoint ( e.x , e.y ) ; clickedNode = tree.getSelected ( pt.x , pt.y ) ; } } if ( clickedNode != null ) { com.android.hierarchyviewerlib.HierarchyViewerDirector.getDirector ( ) . showCapture ( getShell ( ) , clickedNode.viewNode ) ; doubleClicked = true ; } }
public void addTasks ( @ org.jetbrains.annotations.NotNull java.util.Collection < com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.TaskActivationEntry > entries ) { if ( entries.isEmpty ( ) ) return ; final com.intellij.openapi.externalSystem.service.project.manage.ExternalProjectsManager.ExternalProjectsStateProvider stateProvider = com.intellij.openapi.externalSystem.service.project.manage.ExternalProjectsManager.getInstance ( myProject ) . getStateProvider ( ) ; for ( com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.TaskActivationEntry entry : entries ) { final com.intellij.openapi.externalSystem.service.project.manage.TaskActivationState taskActivationState = stateProvider.getTasksActivation ( entry.systemId , entry.projectPath ) ; taskActivationState.getTasks ( entry.phase ) . add ( entry.taskName ) ; } fireTasksChanged ( ) ; }
public javax.crypto.SecretKey getPSKKey ( org.conscrypt.PSKKeyManager keyManager , java.lang.String identityHint , java.lang.String identity ) { return keyManager.getKey ( identityHint , identity , this ) ; }
private void makeBuildTools ( java.io.File buildToolsTopDir ) throws java.io.IOException { buildToolsTopDir.mkdir ( ) ; for ( java.lang.String revision : new java.lang.String [ ] { "3.0.0" , "3.0.1" , "12.3.4 rc5" } ) { java.io.File buildToolsDir = new java.io.File ( buildToolsTopDir , revision ) ; buildToolsDir.mkdir ( ) ; createSourceProps ( buildToolsDir , PkgProps.PKG_REVISION , revision ) ; new java.io.File ( buildToolsDir , com.android.SdkConstants.FN_AAPT ) . createNewFile ( ) ; new java.io.File ( buildToolsDir , com.android.SdkConstants.FN_AIDL ) . createNewFile ( ) ; new java.io.File ( buildToolsDir , com.android.SdkConstants.FN_DX ) . createNewFile ( ) ; } }
public void testAddItalic ( ) { com.android.utils.HtmlBuilder builder = new com.android.utils.HtmlBuilder ( ) ; builder.addItalic ( "This is italic" ) ; assertEquals ( "<I>This is italic</I>" , builder.getHtml ( ) ) ; }
private void loadViewServerInfoAndWindows ( final com.android.ddmlib.IDevice device ) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo ( device ) ; if ( viewServerInfo == null ) { return ; } com.android.hierarchyviewerlib.device.Window [ ] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows ( device ) ; com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel ( ) . addDevice ( device , windows ) ; if ( ( viewServerInfo.protocolVersion ) >= 3 ) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges ( this , device ) ; focusChanged ( device ) ; } }
public void run ( ) { java.io.InputStreamReader is = new java.io.InputStreamReader ( process.getInputStream ( ) ) ; java.io.BufferedReader outReader = new java.io.BufferedReader ( is ) ; try { while ( true ) { java.lang.String line = outReader.readLine ( ) ; if ( output != null ) { output.out ( line ) ; } if ( line == null ) { break ; } } } catch ( java.io.IOException e ) { } finally { com.google.common.io.Closeables.closeQuietly ( outReader ) ; } }
static com.android.internal.telephony.cat.IconLoader getInstance ( android.os.Handler caller , com.android.internal.telephony.uicc.IccFileHandler fh ) { if ( ( com.android.internal.telephony.cat.IconLoader.sLoader ) != null ) { return com.android.internal.telephony.cat.IconLoader.sLoader ; } if ( fh != null ) { com.android.internal.telephony.cat.IconLoader.sThread = new android.os.HandlerThread ( "Cat Icon Loader" ) ; com.android.internal.telephony.cat.IconLoader.sThread.start ( ) ; return new com.android.internal.telephony.cat.IconLoader ( com.android.internal.telephony.cat.IconLoader.sThread.getLooper ( ) , fh ) ; } return null ; }
private void timeoutResultProcessing ( boolean allResultsArrived ) { if ( ! allResultsArrived ) { for ( java.lang.String configurationInstance : expectedConfigurationInstances ) { resultParser.getTestRunListener ( ) . stopTestConfiguration ( configurationInstance , ConfigurationStopReason.TIMED_OUT ) ; } } resultParser.flush ( ) ; }
private static void checkTimeout ( int timeoutMs ) { com.android.internal.util.Preconditions.checkArgumentPositive ( timeoutMs , "timeoutMs must be strictly positive." ) ; }
public static java.time.temporal.WeekFields of ( java.util.Locale locale ) { java.util.Objects.requireNonNull ( locale , "locale" ) ; android.icu.util.ULocale ulocale = android.icu.util.ULocale.forLocale ( locale ) ; java.lang.String region = android.icu.util.ULocale.getRegionForSupplementalData ( ulocale , true ) ; android.icu.util.Calendar.WeekData weekData = android.icu.util.Calendar.getWeekDataForRegion ( region ) ; java.time.DayOfWeek dow = java.time.DayOfWeek.SUNDAY.plus ( ( ( weekData.firstDayOfWeek ) - 1 ) ) ; return java.time.temporal.WeekFields.of ( dow , weekData.minimalDaysInFirstWeek ) ; }
protected java.lang.String createMessage ( @ javax.annotation.Nonnull java.lang.String description ) { return ( ( ( ( description + " cannot have its " ) + ( ( permission ) == ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) ? "readable" : ( permission ) == ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ? "writable" : ( permission ) == ( com.android.sched.util.file.FileOrDirectory.Permission.EXECUTE ) ? "executable" : "???" ) ) + " permission " ) + ( ( setOrClear ) == ( com.android.sched.util.file.CannotSetPermissionException.SetOrClearPermission.SET ) ? "set" : ( setOrClear ) == ( com.android.sched.util.file.CannotSetPermissionException.SetOrClearPermission.CLEAR ) ? "cleared" : "???" ) ) + ( ( change ) == ( com.android.sched.util.file.FileOrDirectory.ChangePermission.EVERYBODY ) ? " for everybody" : "" ) ; }
void putExtras ( java.lang.String callId , android.os.Bundle extras ) { android.telecom.Log.v ( this , "putExtras: %s" , callId ) ; for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.putExtras ( callId , extras , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
void onRemovedFromCallList ( ) { com.android.dialer.common.LogUtil.enterBlock ( "DialerCall.onRemovedFromCallList" ) ; if ( ( videoTechManager ) != null ) { videoTechManager.dispatchRemovedFromCallList ( ) ; } if ( ( ( rttTranscript ) != null ) && ( ! ( isCallRemoved ) ) ) { com.google.common.util.concurrent.Futures.addCallback ( com.android.dialer.rtt.RttTranscriptUtil.saveRttTranscript ( context , rttTranscript ) , new com.android.dialer.common.concurrent.DefaultFutureCallback ( ) , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; } isCallRemoved = true ; }
private void tearDownConnection ( ) { closeConnection ( ) ; if ( settings.isListenConnectorKind ( ) ) { try { transport.stopListening ( ) ; } catch ( java.io.IOException e ) { logWriter.println ( ( "IOException in transport listening stopping: " + e ) ) ; } } }
public static java.security.KeyFactory getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { if ( provider == null ) { throw new java.lang.IllegalArgumentException ( "provider == null" ) ; } if ( algorithm == null ) { throw new java.lang.NullPointerException ( "algorithm == null" ) ; } java.lang.Object spi = java.security.KeyFactory.ENGINE.getInstance ( algorithm , provider , null ) ; return new java.security.KeyFactory ( ( ( java.security.KeyFactorySpi ) ( spi ) ) , provider , algorithm ) ; }
public void writeStringData ( java.lang.String value ) { try { int length = value.length ( ) ; writeUleb128 ( length ) ; write ( com.android.dex.Mutf8.encode ( value ) ) ; writeByte ( 0 ) ; } catch ( java.io.UTFDataFormatException e ) { throw new java.lang.AssertionError ( ) ; } }
private static void loadRootRules ( ) { if ( ( android.icu.impl.coll.CollationLoader.rootRules ) != null ) { return ; } synchronized ( android.icu.impl.coll.CollationLoader.class ) { if ( ( android.icu.impl.coll.CollationLoader.rootRules ) == null ) { android.icu.util.UResourceBundle rootBundle = android.icu.util.UResourceBundle.getBundleInstance ( ICUData.ICU_COLLATION_BASE_NAME , ULocale.ROOT ) ; android.icu.impl.coll.CollationLoader.rootRules = rootBundle.getString ( "UCARules" ) ; } } }
public java.nio.ByteBuffer put ( byte [ ] src , int srcOffset , int byteCount ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkPutBounds ( 1 , src.length , srcOffset , byteCount ) ; this . block.pokeByteArray ( ( ( offset ) + ( position ) ) , src , srcOffset , byteCount ) ; position += byteCount ; return this ; }
public int getMaxTransceiveLength ( int technology ) { switch ( technology ) { case android.nfc.tech.TagTechnology.NFC_A : case android.nfc.tech.TagTechnology.MIFARE_CLASSIC : case android.nfc.tech.TagTechnology.MIFARE_ULTRALIGHT : return 253 ; case android.nfc.tech.TagTechnology.NFC_B : return 253 ; case android.nfc.tech.TagTechnology.NFC_V : return 253 ; case android.nfc.tech.TagTechnology.ISO_DEP : return mIsoDepMaxTransceiveLength ; case android.nfc.tech.TagTechnology.NFC_F : return 255 ; default : return 0 ; } }
public static java.lang.String getMethodSignatureWithoutName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( '(' ) ; for ( com.android.jack.ir.ast.JType p : call.getMethodId ( ) . getParamTypes ( ) ) { sb.append ( com.android.jack.backend.dex.rop.RopHelper.formatterWithClosure.getName ( p , false ) ) ; } sb.append ( ')' ) ; sb.append ( com.android.jack.backend.dex.rop.RopHelper.formatterWithClosure.getName ( call.getType ( ) , false ) ) ; return sb.toString ( ) ; }
public void setVideoState ( java.lang.String callId , int videoState , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , "CSW.sVS" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setVideoState %s %d" , callId , videoState ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setVideoState ( videoState ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void testLoadSample_2 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = getTestResource ( "/com/android/sdklib/testdata/addons_list_sample_2.xml" ) ; int version = mFetcher._getXmlSchemaVersion ( xmlStream ) ; assertEquals ( 2 , version ) ; java.lang.Boolean [ ] validatorFound = new java.lang.Boolean [ ] { java.lang.Boolean.FALSE } ; java.lang.String [ ] validationError = new java.lang.String [ ] { null } ; java.lang.String url = "not-a-valid-url://addons_list.xml" ; java.lang.String uri = mFetcher._validateXml ( xmlStream , url , version , validationError , validatorFound ) ; assertEquals ( java.lang.Boolean.TRUE , validatorFound [ 0 ] ) ; assertEquals ( null , validationError [ 0 ] ) ; assertEquals ( com.android.sdklib.repository.SdkAddonsListConstants.getSchemaUri ( 2 ) , uri ) ; com.android.sdklib.internal.repository.MockMonitor monitor = new com.android.sdklib.internal.repository.MockMonitor ( ) ; org.w3c.dom.Document doc = mFetcher._getDocument ( xmlStream , monitor ) ; assertNotNull ( doc ) ; com.android.sdklib.internal.repository.AddonsListFetcher.Site [ ] result = mFetcher._parseAddonsList ( doc , uri , monitor ) ; assertEquals ( "" , monitor.getCapturedDescriptions ( ) ) ; assertEquals ( "" , monitor.getCapturedLog ( ) ) ; assertEquals ( "" , monitor.getCapturedErrorLog ( ) ) ; assertEquals ( "" , monitor.getCapturedVerboseLog ( ) ) ; assertEquals ( ( "[<ADDON_SITE URL='http://www.example.com/my_addons.xml' Name='My Example Add-ons.'>, " + ( ( ( "<ADDON_SITE URL=\'http://www.example.co.jp/addons.xml\' Name=\'ありがとうございます。\'>, " + "<ADDON_SITE URL='http://www.example.com/' Name='Example of directory URL.'>, " ) + "<SYS_IMG_SITE URL='http://www.example.com/' Name='Example of sys-img URL using the default xml filename.'>, " ) + "<SYS_IMG_SITE URL='http://www.example.com/specific_file.xml' Name='Example of sys-img URL using a specific xml filename.'>]" ) ) , java.util.Arrays.toString ( result ) ) ; assertEquals ( 5 , result.length ) ; }
public static java.lang.String [ ] getJcaDigestAlgorithmsFromKeymasterDigests ( java.util.Collection < java.lang.Integer > keymasterDigests ) { if ( keymasterDigests.isEmpty ( ) ) { return libcore.util.EmptyArray.STRING ; } java.lang.String [ ] result = new java.lang.String [ keymasterDigests.size ( ) ] ; int offset = 0 ; for ( int keymasterDigest : keymasterDigests ) { result [ offset ] = android.security.KeymasterUtils.getJcaDigestAlgorithmFromKeymasterDigest ( keymasterDigest ) ; offset ++ ; } return result ; }
public java.lang.String getName ( android.icu.impl.NameType type ) { int index = android.icu.impl.TimeZoneNamesImpl.ZNames.getNameTypeIndex ( type ) ; if ( ( ( _names ) != null ) && ( index < ( _names.length ) ) ) { return _names [ index ] ; } else { return null ; } }
private void iccPinChanged ( boolean success ) { if ( ! success ) { android.widget.Toast.makeText ( this , mRes.getString ( R.string.sim_change_failed ) , Toast.LENGTH_SHORT ) . show ( ) ; } else { android.widget.Toast.makeText ( this , mRes.getString ( R.string.sim_change_succeeded ) , Toast.LENGTH_SHORT ) . show ( ) ; } resetDialogState ( ) ; }
private com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod getDefaultRestMethod ( com.google.gct.idea.appengine.validation.PsiMethod psiMethod ) { java.lang.String methodName = psiMethod.getName ( ) ; for ( com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod entry : com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod.values ( ) ) { if ( methodName.startsWith ( entry.getMethodNamePrefix ( ) ) ) { return entry ; } } throw new java.lang.AssertionError ( ( ( "It's impossible for method" + ( psiMethod.getName ( ) ) ) + " to map to no REST path." ) ) ; }
void setIsConferenced ( java.lang.String callId , java.lang.String conferenceCallId ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { android.telecom.Log.d ( this , "sending connection %s with conference %s" , callId , conferenceCallId ) ; adapter.setIsConferenced ( callId , conferenceCallId , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void callSessionMergeComplete ( android.telephony.ims.ImsCallSession newSession ) { logi ( ( "callSessionMergeComplete :: newSession =" + newSession ) ) ; if ( ! ( isMergeHost ( ) ) ) { mMergeHost.processMergeComplete ( ) ; } else { if ( newSession != null ) { mTransientConferenceSession = ( doesCallSessionExistsInMerge ( newSession ) ) ? null : newSession ; } processMergeComplete ( ) ; } }
public void testLamba044_ByLib ( ) throws java.lang.Exception { java.io.File lib2 = makeLibrary ( new java.io.File [ ] { } , new java.io.File ( TEST001.directory , "lib2" ) ) ; java.io.File lib1 = makeLibrary ( new java.io.File [ ] { lib2 } , new java.io.File ( TEST001.directory , "lib1" ) ) ; java.io.File libJack = makeLibrary ( new java.io.File [ ] { lib2 , lib1 } , new java.io.File ( TEST001.directory , "jack" ) ) ; test ( TEST001.jUnit , lib2 , lib1 , libJack ) ; }
public boolean checkForCondition ( ) { android.support.test.uiautomator.UiObject unlock = mDevice.findObject ( new android.support.test.uiautomator.UiSelector ( ) . packageName ( "com.android.keyboard" ) . descriptionContains ( "Slide area" ) ) ; android.support.test.uiautomator.UiObject unlock2 = mDevice.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( ( "com.android" + ".systemui:id/lock_icon" ) ) ) ; if ( ( unlock.exists ( ) ) || ( unlock2.exists ( ) ) ) { mDevice.pressMenu ( ) ; return true ; } return false ; }
public static com.android.sdklib.AndroidVersion convertVersion ( @ com.android.annotations.NonNull com.android.builder.model.ApiVersion api , @ com.android.annotations.Nullable com.android.sdklib.IAndroidTarget [ ] targets ) { java.lang.String codename = api.getCodename ( ) ; if ( codename != null ) { com.android.sdklib.AndroidVersion version = com.android.sdklib.SdkVersionInfo.getVersion ( codename , targets ) ; if ( version != null ) { return version ; } return new com.android.sdklib.AndroidVersion ( api.getApiLevel ( ) , codename ) ; } return new com.android.sdklib.AndroidVersion ( api.getApiLevel ( ) , null ) ; }
public final int compareTo ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.ClassObj o ) { if ( ( getId ( ) ) == ( o.getId ( ) ) ) { return 0 ; } int nameCompareResult = mClassName.compareTo ( o.mClassName ) ; if ( nameCompareResult != 0 ) { return nameCompareResult ; } else { return ( ( getId ( ) ) - ( o.getId ( ) ) ) > 0 ? 1 : - 1 ; } }
public void testDefaultMethod018 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( DEFAULTMETHOD018 ) . addProperty ( Options.ANDROID_MIN_API_LEVEL.getName ( ) , java.lang.String.valueOf ( AndroidApiLevel.ReleasedLevel.N.getLevel ( ) ) ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void handleMessage ( android.os.Message msg ) { synchronized ( com.android.internal.telephony.uicc.UiccController.mLock ) { switch ( msg.what ) { case com.android.internal.telephony.uicc.UiccController.EVENT_ICC_STATUS_CHANGED : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_ICC_STATUS_CHANGED, calling getIccCardStatus" ) ; mCi.getIccCardStatus ( obtainMessage ( com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE ) ) ; break ; case com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_GET_ICC_STATUS_DONE" ) ; android.os.AsyncResult ar = ( ( android.os.AsyncResult ) ( msg.obj ) ) ; onGetIccCardStatusDone ( ar ) ; break ; default : android.util.Log.e ( com.android.internal.telephony.uicc.UiccController.LOG_TAG , ( " Unknown Event " + ( msg.what ) ) ) ; } } }
private com.google.common.collect.TreeMultiset.AvlNode < E > floor ( java.util.Comparator < ? super E > comparator , E e ) { int cmp = comparator.compare ( e , elem ) ; if ( cmp > 0 ) { return ( right ) == null ? this : com.google.common.base.MoreObjects.firstNonNull ( right.floor ( comparator , e ) , this ) ; } else if ( cmp == 0 ) { return this ; } else { return ( left ) == null ? null : left.floor ( comparator , e ) ; } }
public void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader ) { if ( ! ( annotations.isEmpty ( ) ) ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession ( loader.getSession ( ) , com.android.jack.jayce.NodeLevel.STRUCTURE ) ; for ( com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations ) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast ( exportSession ) ; loading.addAnnotation ( annotationLiteral ) ; annotationLiteral.updateParents ( loading ) ; } } }
public void handleMessage ( android.os.Message msg ) { synchronized ( com.android.internal.telephony.uicc.UiccController.mLock ) { switch ( msg.what ) { case com.android.internal.telephony.uicc.UiccController.EVENT_ICC_STATUS_CHANGED : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_ICC_STATUS_CHANGED, calling getIccCardStatus" ) ; mCi.getIccCardStatus ( obtainMessage ( com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE ) ) ; break ; case com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_GET_ICC_STATUS_DONE" ) ; android.os.AsyncResult ar = ( ( android.os.AsyncResult ) ( msg.obj ) ) ; onGetIccCardStatusDone ( ar ) ; break ; default : android.telephony.Rlog.e ( com.android.internal.telephony.uicc.UiccController.LOG_TAG , ( " Unknown Event " + ( msg.what ) ) ) ; } } }
public void onSdkLoaded ( ) { com.android.sdklib.IAndroidTarget oldTarget = getRenderingTarget ( ) ; preRenderingTargetChangeCleanUp ( oldTarget ) ; computeSdkVersion ( ) ; com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } } }
private java.lang.String runFlushTest ( int sensorType , int maxBatchReportLatencySec , int instructionsResId ) throws java.lang.Throwable { getTestLogger ( ) . logInstructions ( instructionsResId ) ; waitForUserToBegin ( ) ; int maxBatchReportLatencyUs = ( ( int ) ( java.util.concurrent.TimeUnit.SECONDS.toMicros ( maxBatchReportLatencySec ) ) ) ; android.hardware.cts.helpers.TestSensorEnvironment environment = new android.hardware.cts.helpers.TestSensorEnvironment ( getApplicationContext ( ) , sensorType , com.android.cts.verifier.sensors.BatchingTestActivity.SENSOR_BATCHING_RATE_US , maxBatchReportLatencyUs ) ; int flushDurationSec = maxBatchReportLatencySec / 2 ; android.hardware.cts.helpers.sensoroperations.TestSensorOperation operation = android.hardware.cts.helpers.sensoroperations.TestSensorOperation.createFlushOperation ( environment , flushDurationSec , java.util.concurrent.TimeUnit.SECONDS ) ; return executeTest ( operation ) ; }
public void testProviderService_supportsParameter_SupportedKeyClasses_Failure ( ) throws java.lang.Exception { java.security.Provider provider = new libcore.java.security.ProviderTest.MockProvider ( "MockProvider" ) { public void setup ( ) { put ( "Signature.FOO" , libcore.java.security.ProviderTest.MockSpi.class . getName ( ) ) ; put ( "Signature.FOO SupportedKeyClasses" , java.security.interfaces.RSAPrivateKey.class . getName ( ) ) ; } } ; java.security.Security.addProvider ( provider ) ; try { java.security.Provider.Service service = provider.getService ( "Signature" , "FOO" ) ; assertFalse ( service.supportsParameter ( new libcore.javax.crypto.MockKey ( ) ) ) ; } finally { java.security.Security.removeProvider ( provider.getName ( ) ) ; } }
public void testWrongVariantLevelAbiFilter ( ) { java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ; java.util.List < com.android.build.OutputFile > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , com.google.common.collect.Sets.newHashSet ( "bar" , "foo" ) , 160 , "zzz" ) ; assertEquals ( 0 , result.size ( ) ) ; }
protected void tearDown ( ) throws java.lang.Exception { if ( mHasFeature ) { if ( mRemoveOwnerInTearDown ) { assertTrue ( "Failed to clear owner" , removeAdmin ( ( ( ( com.android.cts.devicepolicy.UserRestrictionsTest.DEVICE_ADMIN_PKG ) + "/" ) + ( com.android.cts.devicepolicy.UserRestrictionsTest.ADMIN_RECEIVER_TEST_CLASS ) ) , mDeviceOwnerUserId ) ) ; assertTrue ( "Some user restrictions are still set" , runTests ( "userrestrictions.CheckNoOwnerRestrictionsTest" , mDeviceOwnerUserId ) ) ; } removeTestUsers ( ) ; getDevice ( ) . uninstallPackage ( com.android.cts.devicepolicy.UserRestrictionsTest.DEVICE_ADMIN_PKG ) ; } super . tearDown ( ) ; }
private void assertByteBufferEquals ( java.nio.ByteBuffer buffer , java.nio.ByteBuffer buffer2 ) { org.junit.Assert.assertTrue ( ( ( ( ( ( ( ( buffer.toString ( ) ) + " vs " ) + ( buffer2.toString ( ) ) ) + ", byte array: " ) + ( com.android.apksig.internal.util.HexEncoding.encode ( buffer.array ( ) ) ) ) + " vs " ) + ( com.android.apksig.internal.util.HexEncoding.encode ( buffer2.array ( ) ) ) ) , ( ( buffer.compareTo ( buffer2 ) ) == 0 ) ) ; }
public void deleteOdex ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.deleteOdex ( apkPath , instructionSet , outputPath ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void markBootComplete ( java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { com.android.server.pm.Installer.assertValidInstructionSet ( instructionSet ) ; if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.markBootComplete ( instructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
native void forceStackParameters_Fast ( int i1 , int i2 , int i3 , int i4 , int i5 , int i6 , int i8 , int i9 , float f1 , float f2 , float f3 , float f4 , float f5 , float f6 , float f7 , float f8 , float f9 ) ;
private void initialize ( java.lang.Readable input ) { this . input = input ; matcher = delimiter.matcher ( "" ) ; matcher.useTransparentBounds ( true ) ; matcher.useAnchoringBounds ( false ) ; }
public void test_de ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex.ImmutableIndex de = libcore.icu.AlphabeticIndexTest.createIndex ( java.util.Locale.GERMAN ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( de , "ßind" , "S" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( de , "Sacher" , "S" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( de , "Schiller" , "Sch" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( de , "Steiff" , "St" ) ; }
public void run ( ) { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_single_source_script s = new com.android.rs.test.ScriptC_single_source_script ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_entrypoint ( testAllocation1 , testAllocation2 ) ; s.forEach_oldFoo ( testAllocation2 , testAllocation2 ) ; s.forEach_oldGoo ( testAllocation2 , testAllocation2 ) ; s.invoke_validate ( testAllocation2 ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
private static float getWeightSum ( com.android.ide.common.api.INode linearLayout ) { java.lang.String weightSum = linearLayout.getStringAttr ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_WEIGHT_SUM ) ; float sum = - 1.0F ; if ( weightSum != null ) { try { sum = java.lang.Float.parseFloat ( weightSum ) ; return sum ; } catch ( java.lang.NumberFormatException nfe ) { } } return com.android.ide.common.layout.LinearLayoutRule.getSumOfWeights ( linearLayout ) ; }
public static android.media.MediaFile.MediaFileType getFileType ( java.lang.String path ) { int lastDot = path.lastIndexOf ( '.' ) ; if ( lastDot < 0 ) return null ; return android.media.MediaFile.sFileTypeMap.get ( path.substring ( ( lastDot + 1 ) ) . toUpperCase ( java.util.Locale.ROOT ) ) ; }
public void exit ( ) { log ( ( ( ( "Exit Connected(" + ( mDevice ) ) + "): " ) + ( com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString ( getCurrentMessage ( ) . what ) ) ) ) ; mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; }
public void onStop ( ) { android.os.Trace.beginSection ( "FlingUpDownMethod.onStop" ) ; endAnimation ( ) ; falsingManager.onScreenOff ( ) ; if ( getActivity ( ) . isFinishing ( ) ) { setAnimationState ( com.android.incallui.answer.impl.answermethod.FlingUpDownMethod.AnimationState.COMPLETED ) ; } super . onStop ( ) ; android.os.Trace.endSection ( ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass cls , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findClass ( cls ) ; if ( c == null ) { return null ; } java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > annotations = c.getAnnotations ( ) ; if ( annotations != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { validatePage ( ) ; mFlatten.setVisible ( mTypeCombo.getText ( ) . equals ( com.android.ide.common.layout.LayoutConstants.FQCN_RELATIVE_LAYOUT ) ) ; }
public static com.android.tools.perflib.heap.Instance [ ] instancesOf ( com.android.tools.perflib.heap.Snapshot snapshot , java.lang.String baseClassName ) { com.android.tools.perflib.heap.ClassObj theClass = snapshot.findClass ( baseClassName ) ; if ( theClass == null ) { throw new java.lang.IllegalArgumentException ( ( "Class not found: " + baseClassName ) ) ; } com.android.tools.perflib.heap.Instance [ ] instances = new com.android.tools.perflib.heap.Instance [ theClass.mInstances.size ( ) ] ; return theClass.mInstances.toArray ( instances ) ; }
protected void sendData ( java.lang.String destAddr , java.lang.String scAddr , int destPort , byte [ ] data , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent ) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu ( scAddr , destAddr , destPort , data , ( deliveryIntent != null ) ) ; if ( pdu != null ) { sendRawPdu ( pdu.encodedScAddress , pdu.encodedMessage , sentIntent , deliveryIntent , destAddr ) ; } else { android.telephony.Rlog.e ( com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG , "GsmSMSDispatcher.sendData(): getSubmitPdu() returned null" ) ; } }
public java.lang.String getAndroidName ( ) { return ( androidName ) != null ? androidName : name ; }
public void disconnect ( ) { if ( ( ( mConnection ) != null ) && ( ( mSrcContext ) != null ) ) { mSrcContext.unbindService ( mConnection ) ; } if ( ( mSrcHandler ) != null ) { replyDisconnected ( com.android.internal.util.AsyncChannel.STATUS_SUCCESSFUL ) ; } if ( ( ( ( mConnection ) == null ) && ( ( mDstMessenger ) != null ) ) && ( ( mDeathMonitor ) != null ) ) { mDstMessenger.getBinder ( ) . unlinkToDeath ( mDeathMonitor , 0 ) ; } }
public static java.io.InputStream findEntryInputStream ( java.util.zip.ZipFile zipFile , java.lang.String entryPath ) throws java.io.IOException { java.util.zip.ZipEntry entry = zipFile.getEntry ( entryPath ) ; if ( entry == null ) return null ; return com.intellij.updater.Utils.findEntryInputStreamForEntry ( zipFile , entry ) ; }
public org.gradle.tooling.model.DomainObjectSet < ? extends org.gradle.tooling.model.idea.IdeaSourceDirectory > getGeneratedSourceDirectories ( ) { java.util.List < org.gradle.tooling.model.idea.IdeaSourceDirectory > generatedSourceDirectories = new java.util.ArrayList < org.gradle.tooling.model.idea.IdeaSourceDirectory > ( ) ; for ( org.gradle.tooling.model.idea.IdeaSourceDirectory sourceDirectory : mySourceDirectories ) { if ( sourceDirectory.isGenerated ( ) ) { generatedSourceDirectories.add ( sourceDirectory ) ; } } return org.gradle.tooling.model.internal.ImmutableDomainObjectSet.of ( generatedSourceDirectories ) ; }
public java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > getConfiguredFrameworkResources ( ) { if ( ( ( mConfiguredFrameworkRes ) == null ) && ( ( mConfigComposite ) != null ) ) { com.android.ide.common.resources.ResourceRepository frameworkRes = getFrameworkResources ( ) ; if ( frameworkRes == null ) { com.android.ide.eclipse.adt.AdtPlugin.log ( IStatus.ERROR , "Failed to get ProjectResource for the framework" ) ; } else { mConfiguredFrameworkRes = frameworkRes.getConfiguredResources ( mConfigComposite.getCurrentConfig ( ) ) ; } } return mConfiguredFrameworkRes ; }
void start ( ) { android.os.HandlerThread thread = new android.os.HandlerThread ( "BluetoothScanManager" ) ; thread.start ( ) ; mHandler = new com.android.bluetooth.gatt.ScanManager.ClientHandler ( thread.getLooper ( ) ) ; if ( ( mDm ) != null ) { mDm.registerDisplayListener ( mDisplayListener , null ) ; } if ( ( mActivityManager ) != null ) { mActivityManager.addOnUidImportanceListener ( mUidImportanceListener , com.android.bluetooth.gatt.ScanManager.FOREGROUND_IMPORTANCE_CUTOFF ) ; } }
public static void build ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor , boolean fullBuild ) throws org.eclipse.core.runtime.CoreException { project.build ( IncrementalProjectBuilder.INCREMENTAL_BUILD , monitor ) ; if ( fullBuild && ( com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs ( ) . getBuildSkipPostCompileOnFileSave ( ) ) ) { java.util.Map < java.lang.String , java.lang.String > args = new java.util.TreeMap < java.lang.String , java.lang.String > ( ) ; args.put ( PostCompilerBuilder.POST_C_REQUESTED , "" ) ; project.build ( IncrementalProjectBuilder.FULL_BUILD , PostCompilerBuilder.ID , args , monitor ) ; } }
public static < E extends java.lang.Comparable < ? super E > > com.google.common.collect.ImmutableSortedSet < E > copyOf ( E [ ] elements ) { return com.google.common.collect.ImmutableSortedSet.construct ( com.google.common.collect.Ordering.natural ( ) , elements.length , elements.clone ( ) ) ; }
public java.lang.String flatten ( ) { java.lang.StringBuilder flattened = new java.lang.StringBuilder ( 128 ) ; for ( java.lang.String k : mMap.keySet ( ) ) { flattened.append ( k ) ; flattened.append ( "=" ) ; flattened.append ( mMap.get ( k ) ) ; flattened.append ( ";" ) ; } flattened.deleteCharAt ( ( ( flattened.length ( ) ) - 1 ) ) ; return flattened.toString ( ) ; }
private static void assertGetResourceAsStreamNotNull ( java.lang.ClassLoader classLoader , java.lang.String resourceName ) throws java.io.IOException { java.io.InputStream is = null ; try { is = classLoader.getResourceAsStream ( resourceName ) ; assertNotNull ( is ) ; } finally { if ( is != null ) { is.close ( ) ; } } }
public static boolean isSupportedLocale ( android.content.Context context , java.util.Locale locale ) { java.lang.String [ ] locales = context.getAssets ( ) . getLocales ( ) ; for ( java.lang.String availableLocale : locales ) { if ( locale.toString ( ) . equals ( availableLocale ) ) { return true ; } } return false ; }
public boolean startWpsPbc ( java.lang.String iface , java.lang.String bssid ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.startWpsPbc ( iface , bssid ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( android.text.TextUtils.isEmpty ( bssid ) ) { return doBooleanCommandNative ( ( ( "IFNAME=" + iface ) + " WPS_PBC" ) ) ; } else { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " WPS_PBC " ) + bssid ) ) ; } } } }
public void setVar ( int index , android.support.v8.renderscript.BaseObj o ) { if ( mUseIncSupp ) { long oInc = getDummyAlloc ( ( ( android.support.v8.renderscript.Allocation ) ( o ) ) ) ; mRS.nScriptSetVarObj ( getID ( mRS ) , index , ( o == null ? 0 : oInc ) , mUseIncSupp ) ; } else { mRS.nScriptSetVarObj ( getID ( mRS ) , index , ( o == null ? 0 : o.getID ( mRS ) ) , mUseIncSupp ) ; } }
public void testConstructorValidation ( ) throws java.lang.Exception { libcore.tzdata.shared2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.shared2.DistroVersionTest.INVALID_VERSION_LOW , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.shared2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.shared2.DistroVersionTest.INVALID_VERSION_HIGH , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.shared2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.INVALID_VERSION_LOW , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.shared2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.INVALID_VERSION_HIGH , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.shared2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.INVALID_RULES_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.shared2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.shared2.DistroVersionTest.INVALID_VERSION_LOW ) ; libcore.tzdata.shared2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_VERSION , libcore.tzdata.shared2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.shared2.DistroVersionTest.INVALID_VERSION_HIGH ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get ( com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY ) ; try { writingTool.write ( outputVDir ) ; } catch ( com.android.jack.backend.dex.DexWritingException e ) { session.getReporter ( ) . report ( Severity.FATAL , e ) ; throw new com.android.jack.JackAbortException ( e ) ; } }
private void setNetwork ( android.net.Network network ) { if ( network != null ) { mCm.bindProcessToNetwork ( network ) ; mCm.setProcessDefaultNetworkForHostResolution ( android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag ( network ) ) ; } mNetwork = network ; }
public boolean setRadioPower ( boolean turnOn ) { enforceModifyPermission ( ) ; final com.android.internal.telephony.Phone defaultPhone = com.android.internal.telephony.PhoneFactory.getDefaultPhone ( ) ; if ( defaultPhone != null ) { defaultPhone.setRadioPower ( turnOn ) ; return true ; } else { com.android.phone.PhoneInterfaceManager.loge ( "There's no default phone." ) ; return false ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JThisRef jThisRef ) { com.android.jack.ir.ast.JThis jThis = targetMethod.getThis ( ) ; assert jThis != null ; assert jThis.getType ( ) . isSameType ( jThisRef.getType ( ) ) ; expression = jThis.makeRef ( jThisRef.getSourceInfo ( ) ) ; return false ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( this . getClass ( ) . getSimpleName ( ) ) ; setupMockPackagePermissionChecks ( ) ; doReturn ( mSmsUsageMonitor ) . when ( mSmsDispatchersController ) . getUsageMonitor ( ) ; mCdmaSmsDispatcherTestHandler = new com.android.internal.telephony.cdma.CdmaSmsDispatcherTest.CdmaSmsDispatcherTestHandler ( TAG ) ; mCdmaSmsDispatcherTestHandler.start ( ) ; waitUntilReady ( ) ; }
public void onConnectionCapabilitiesChanged ( android.telecom.Connection c , int connectionCapabilities ) { android.telecom.Log.d ( this , ( "onConnectionCapabilitiesChanged: Connection: %s," + " connectionCapabilities: %s" ) , c , connectionCapabilities ) ; int capabilites = this . getConnectionCapabilities ( ) ; boolean isVideoConferencingSupported = ( ( mConferenceHost ) == null ) ? false : mConferenceHost.isCarrierVideoConferencingSupported ( ) ; setConnectionCapabilities ( applyHostCapabilities ( capabilites , connectionCapabilities , isVideoConferencingSupported ) ) ; }
static void add ( java.lang.ref.Reference < ? > list ) { synchronized ( java.lang.ref.ReferenceQueue.class ) { if ( ( java.lang.ref.ReferenceQueue.unenqueued ) == null ) { java.lang.ref.ReferenceQueue.unenqueued = list ; } else { java.lang.ref.Reference < ? > last = java.lang.ref.ReferenceQueue.unenqueued ; while ( ( last.pendingNext ) != ( java.lang.ref.ReferenceQueue.unenqueued ) ) { last = last.pendingNext ; } last.pendingNext = list ; last = list ; while ( ( last.pendingNext ) != list ) { last = last.pendingNext ; } last.pendingNext = java.lang.ref.ReferenceQueue.unenqueued ; } java.lang.ref.ReferenceQueue.class . notifyAll ( ) ; } }
public java.lang.String toString ( ) { return new java.lang.StringBuilder ( ) . append ( "{mResourceId=" ) . append ( mResourceId ) . append ( ", pid=" ) . append ( pid ) . append ( ", uid=" ) . append ( uid ) . append ( ", mReferenceCount=" ) . append ( mReferenceCount.get ( ) ) . append ( "}" ) . toString ( ) ; }
public android.security.KeyStore.State state ( int userId ) { final int ret ; try { ret = mBinder.getState ( userId ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; throw new java.lang.AssertionError ( e ) ; } switch ( ret ) { case android.security.KeyStore.NO_ERROR : return android.security.KeyStore.State.UNLOCKED ; case android.security.KeyStore.LOCKED : return android.security.KeyStore.State.LOCKED ; case android.security.KeyStore.UNINITIALIZED : return android.security.KeyStore.State.UNINITIALIZED ; default : throw new java.lang.AssertionError ( mError ) ; } }
public void resize ( int width , int height ) { super . resize ( width , height ) ; mWorldScaleX = ( ( float ) ( mInitialWidth ) ) / width ; mWorldScaleY = ( ( float ) ( mInitialHeight ) ) / height ; mScript.set_gWorldScaleX ( mWorldScaleX ) ; mScript.set_gWorldScaleY ( mWorldScaleY ) ; }
public java.lang.String getFilter ( java.lang.String filterType ) { if ( ( ( densityFilter ) != null ) && ( filterType.equals ( OutputFile.DENSITY ) ) ) { return densityFilter ; } else if ( ( ( abiFilter ) != null ) && ( filterType.equals ( OutputFile.ABI ) ) ) { return abiFilter ; } return null ; }
synchronized void nAllocationRead1D ( long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationRead1D ( mContext , id , off , mip , count , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
public void removeCall ( android.telecom.Call call ) { if ( ! ( mCalls.contains ( call ) ) ) { android.util.Log.e ( com.android.server.telecom.testapps.TestCallList.TAG , "removeCall: Call cannot be removed -- doesn't exist." ) ; return ; } android.util.Log.i ( com.android.server.telecom.testapps.TestCallList.TAG , ( "removeCall: " + call ) ) ; mCalls.remove ( call ) ; call.unregisterCallback ( this ) ; for ( com.android.server.telecom.testapps.TestCallList.Listener l : mListeners ) { l.onCallRemoved ( call ) ; } }
private static com.android.builder.resources.ResourceMerger getResourceMerger ( ) throws com.android.builder.resources.DuplicateResourceException , java.io.IOException { if ( ( com.android.builder.resources.ResourceMergerTest.sResourceMerger ) == null ) { java.io.File root = com.android.builder.TestUtils.getRoot ( "baseMerge" ) ; com.android.builder.resources.ResourceSet res = com.android.builder.resources.ResourceSetTest.getBaseResourceSet ( ) ; com.android.builder.resources.ResourceSet overlay = new com.android.builder.resources.ResourceSet ( "overlay" ) ; overlay.addSource ( new java.io.File ( root , "overlay" ) ) ; overlay.loadFromFiles ( ) ; com.android.builder.resources.ResourceMergerTest.sResourceMerger = new com.android.builder.resources.ResourceMerger ( ) ; com.android.builder.resources.ResourceMergerTest.sResourceMerger.addResourceSet ( res ) ; com.android.builder.resources.ResourceMergerTest.sResourceMerger.addResourceSet ( overlay ) ; } return com.android.builder.resources.ResourceMergerTest.sResourceMerger ; }
private void assertInvalidPinned ( java.security.cert.X509Certificate [ ] chain , javax.net.ssl.X509TrustManager tm , java.lang.String hostname ) throws java.lang.Exception { assertTrue ( tm.getClass ( ) . getName ( ) , ( tm instanceof org.conscrypt.TrustManagerImpl ) ) ; try { org.conscrypt.TrustManagerImpl tmi = ( ( org.conscrypt.TrustManagerImpl ) ( tm ) ) ; tmi.checkServerTrusted ( chain , "RSA" , new org.conscrypt.TrustManagerImplTest.MySSLSession ( hostname ) ) ; fail ( ) ; } catch ( java.security.cert.CertificateException expected ) { } }
public void update ( com.intellij.openapi.actionSystem.AnActionEvent actionEvent ) { com.google.gct.testing.results.GoogleCloudTestTreeView sender = actionEvent.getData ( GoogleCloudTestTreeView.CLOUD_TEST_RUNNER_VIEW ) ; if ( sender == null ) { return ; } com.intellij.execution.testframework.AbstractTestProxy selectedNode = ( ( com.google.gct.testing.results.GoogleCloudTestingResultsForm ) ( sender.getResultsViewer ( ) ) ) . getTreeView ( ) . getSelectedTest ( ) ; if ( ( selectedNode == null ) || ( selectedNode instanceof com.google.gct.testing.results.GoogleCloudTestProxy.GoogleCloudRootTestProxy ) ) { actionEvent.getPresentation ( ) . setEnabled ( false ) ; } else { actionEvent.getPresentation ( ) . setEnabled ( true ) ; } }
boolean setProtocolMode ( android.bluetooth.BluetoothDevice device , int protocolMode ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "setProtocolMode: " + ( device.getAddress ( ) ) ) ) ; } int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothInputDevice.STATE_CONNECTED ) ) { return false ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_SET_PROTOCOL_MODE ) ; msg.obj = device ; msg.arg1 = protocolMode ; mHandler.sendMessage ( msg ) ; return true ; }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; dataOut.writeBoolean ( myIsNormalized ) ; com.intellij.updater.Patch.writeMap ( dataOut , myWarnings ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
public void log ( com.android.utils.ILogger logger ) { for ( com.android.manifmerger.MergingReport.Record record : mRecords ) { switch ( record.mSeverity ) { case WARNING : logger.warning ( record.toString ( ) ) ; break ; case ERROR : logger.error ( null , record.toString ( ) ) ; break ; case INFO : logger.verbose ( record.toString ( ) ) ; break ; default : logger.error ( null , ( "Unhandled record type " + ( record.mSeverity ) ) ) ; } } mActions.log ( logger ) ; }
protected void setUp ( ) throws java.lang.Exception { mAndroidHome = java.lang.System.getenv ( "ANDROID_HOME" ) ; assertNotNull ( "This test requires ANDROID_HOME environment variable to point to a valid SDK" , mAndroidHome ) ; mAdbPath = new java.io.File ( mAndroidHome , ( ( "platform-tools" + ( java.io.File.separator ) ) + "adb" ) ) ; com.android.ddmlib.AndroidDebugBridge.initIfNeeded ( false ) ; }
private void requestHandover ( android.telecom.PhoneAccountHandle handoverToHandle , int videoState , android.os.Bundle extras , boolean isLegacy ) { for ( com.android.server.telecom.Call.Listener l : mListeners ) { l.onHandoverRequested ( this , handoverToHandle , videoState , extras , isLegacy ) ; } }
public void testSuppress ( ) throws java.lang.Exception { assertEquals ( ( "SuppressTest1.java:74: Error: Class requires API level 8 (current min is 1): org.w3c.dom.DOMLocator\n" + ( ( ( ( ( ( ( ( ( ( ( "SuppressTest1.java:76: Error: Call requires API level 11 (current min is 1): android.app.Activity#getActionBar\n" + "SuppressTest1.java:79: Error: Class requires API level 8 (current min is 1): org.w3c.dom.DOMError\n" ) + "SuppressTest1.java:80: Error: Class requires API level 8 (current min is 1): org.w3c.dom.DOMErrorHandler\n" ) + "SuppressTest1.java:83: Error: Call requires API level 3 (current min is 1): android.widget.Chronometer#getOnChronometerTickListener\n" ) + "SuppressTest1.java:86: Error: Call requires API level 11 (current min is 1): android.widget.Chronometer#setTextIsSelectable\n" ) + "SuppressTest1.java:89: Error: Field requires API level 11 (current min is 1): dalvik.bytecode.OpcodeInfo#MAXIMUM_VALUE\n" ) + "SuppressTest1.java:94: Error: Class requires API level 14 (current min is 1): android.app.ApplicationErrorReport.BatteryInfo\n" ) + "SuppressTest1.java:94: Error: Field requires API level 14 (current min is 1): android.app.ApplicationErrorReport#batteryInfo\n" ) + "SuppressTest1.java:97: Error: Field requires API level 11 (current min is 1): android.graphics.PorterDuff$Mode#OVERLAY\n" ) + "SuppressTest4.java:16: Error: Class requires API level 14 (current min is 1): android.app.ApplicationErrorReport\n" ) + "SuppressTest4.java:19: Error: Class requires API level 14 (current min is 1): android.app.ApplicationErrorReport.BatteryInfo\n" ) + "SuppressTest4.java:19: Error: Field requires API level 14 (current min is 1): android.app.ApplicationErrorReport#batteryInfo" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "apicheck/SuppressTest1.java.txt=>src/foo/bar/SuppressTest1.java" , "apicheck/SuppressTest1.class.data=>bin/classes/foo/bar/SuppressTest1.class" , "apicheck/SuppressTest2.java.txt=>src/foo/bar/SuppressTest2.java" , "apicheck/SuppressTest2.class.data=>bin/classes/foo/bar/SuppressTest2.class" , "apicheck/SuppressTest3.java.txt=>src/foo/bar/SuppressTest3.java" , "apicheck/SuppressTest3.class.data=>bin/classes/foo/bar/SuppressTest3.class" , "apicheck/SuppressTest4.java.txt=>src/foo/bar/SuppressTest4.java" , "apicheck/SuppressTest4.class.data=>bin/classes/foo/bar/SuppressTest4.class" ) ) ; }
public void testRemove1_IndexOutOfBounds ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.remove ( ( - 1 ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public static java.lang.String getPropertyText ( @ org.jetbrains.annotations.NonNls java.lang.String name , @ org.jetbrains.annotations.NonNls java.lang.String value , @ org.jetbrains.annotations.NonNls java.lang.Character delimiter , @ org.jetbrains.annotations.Nullable com.intellij.openapi.project.Project project ) { if ( delimiter == null ) { delimiter = ( project == null ) ? com.intellij.lang.properties.psi.codeStyle.PropertiesCodeStyleSettings.DEFAULT_KEY_VALUE_DELIMITER : com.intellij.lang.properties.psi.codeStyle.PropertiesCodeStyleSettings.getInstance ( project ) . KEY_VALUE_DELIMITER ; } return ( ( com.intellij.lang.properties.psi.PropertiesElementFactory.escape ( name ) ) + ( java.lang.String.valueOf ( delimiter ) ) ) + ( com.intellij.lang.properties.psi.PropertiesElementFactory.escapeValue ( value ) ) ; }
private void launchSystemDialer ( android.net.Uri handle ) { android.content.Intent systemDialerIntent = new android.content.Intent ( ) ; final android.content.res.Resources resources = mContext.getResources ( ) ; systemDialerIntent.setClassName ( resources.getString ( R.string.ui_default_package ) , resources.getString ( R.string.dialer_default_class ) ) ; systemDialerIntent.setAction ( Intent.ACTION_DIAL ) ; systemDialerIntent.setData ( handle ) ; systemDialerIntent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; android.telecom.Log.v ( this , "calling startActivity for default dialer: %s" , systemDialerIntent ) ; mContext.startActivityAsUser ( systemDialerIntent , UserHandle.CURRENT ) ; }
void foo2 ( int [ ] array , int start , int end , boolean expectInterpreter ) { if ( end < 0 ) throw new java.lang.Error ( "" ) ; for ( int i = start ; i <= end ; i ++ ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ i ] = 1 ; sum += array [ i ] ; } }
public boolean performAccessibilityAction ( final int action , final android.os.Bundle arguments ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return performAccessibilityAction ( action , arguments ) ; } } ) ; return ret ; } if ( mAwContents.supportsAccessibilityAction ( action ) ) { return mAwContents.performAccessibilityAction ( action , arguments ) ; } return mWebViewPrivate.super_performAccessibilityAction ( action , arguments ) ; }
public void testDuplicatePermissionsMultiProject ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.UNIQUE_PERMISSION ) ; java.io.File master = getProjectDir ( "MasterProject" , "duplicate_permissions2.xml=>AndroidManifest.xml" , "multiproject/main-merge.properties=>project.properties" , "multiproject/MainCode.java.txt=>src/foo/main/MainCode.java" ) ; java.io.File library = getProjectDir ( "LibraryProject" , "duplicate_permissions3.xml=>AndroidManifest.xml" , "multiproject/library.properties=>project.properties" , "multiproject/LibraryCode.java.txt=>src/foo/library/LibraryCode.java" , "multiproject/strings.xml=>res/values/strings.xml" ) ; assertEquals ( ( "LibraryProject/AndroidManifest.xml:9: Error: Permission name SEND_SMS is not unique (appears in both foo.permission.SEND_SMS and bar.permission.SEND_SMS) [UniquePermission]\n" + ( ( " <permission android:name=\"bar.permission.SEND_SMS\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , checkLint ( java.util.Arrays.asList ( master , library ) ) ) ; }
public void exit ( ) { if ( ( mPhone ) != null ) { mPhone.mCi.unregisterForRilConnected ( getHandler ( ) ) ; mPhone.mCi.unregisterForDataCallListChanged ( getHandler ( ) ) ; } if ( ( mDcTesterDeactivateAll ) != null ) { mDcTesterDeactivateAll.dispose ( ) ; } }
public void hangupForegroundResumeBackground ( android.os.Message result ) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy ( result ) ; if ( radioProxy != null ) { com.android.internal.telephony.RILRequest rr = obtainRequest ( com.android.internal.telephony.RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; try { radioProxy.hangupForegroundResumeBackground ( rr.mSerial ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { handleRadioProxyExceptionForRR ( rr , "hangupForegroundResumeBackground" , e ) ; } } }
private int [ ] getExpected ( int [ ] no , int [ ] so , int [ ] mo ) { switch ( mMode ) { case com.android.overlaytest.OverlayBaseTest.MODE_NO_OVERLAY : return no ; case com.android.overlaytest.OverlayBaseTest.MODE_SINGLE_OVERLAY : return so ; case com.android.overlaytest.OverlayBaseTest.MODE_MULTIPLE_OVERLAYS : return mo ; default : fail ( "Unknown mode!" ) ; return no ; } }
private android.bluetooth.BluetoothDevice makeBluetoothDevice ( java.lang.String address ) { return mAdapter.getRemoteDevice ( address ) ; }
public static java.io.File createTemporaryDirectory ( java.lang.String prefix ) { while ( true ) { java.lang.String candidateName = prefix + ( java.lang.Math.randomIntInternal ( ) ) ; java.io.File result = new java.io.File ( java.lang.System.getProperty ( "java.io.tmpdir" ) , candidateName ) ; if ( result.mkdir ( ) ) { return result ; } } }
protected void setUp ( ) { initialThreadGroup = java.lang.Thread.currentThread ( ) . getThreadGroup ( ) ; rootThreadGroup = initialThreadGroup ; while ( ( rootThreadGroup.getParent ( ) ) != null ) { rootThreadGroup = rootThreadGroup.getParent ( ) ; } originalThreadDefaultUncaughtExceptionHandler = java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ; testThreadDefaultUncaughtExceptionHandler = new org.apache.harmony.tests.java.lang.ThreadGroupTest.TestThreadDefaultUncaughtExceptionHandler ( ) ; java.lang.Thread.setDefaultUncaughtExceptionHandler ( testThreadDefaultUncaughtExceptionHandler ) ; }
public void validatePolicyWithRoamingPartnerWithoutCountries ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; android.net.wifi.hotspot2.pps.Policy.RoamingPartner partner = new android.net.wifi.hotspot2.pps.Policy.RoamingPartner ( ) ; partner.setFqdn ( "test.com" ) ; partner.setFqdnExactMatch ( true ) ; partner.setPriority ( 12 ) ; policy.getPreferredRoamingPartnerList ( ) . add ( partner ) ; org.junit.Assert.assertFalse ( policy.validate ( ) ) ; }
public void validateCertCredentialWithoutCaCert ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithCertificateCredential ( ) ; cred.setCaCertificate ( null ) ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public void setOverlayImage ( final org.eclipse.swt.graphics.Image overlayImage ) { final org.eclipse.swt.graphics.Image toDispose = this . mOverlayImage ; org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( com.android.hierarchyviewerlib.models.PixelPerfectModel.this ) { com.android.hierarchyviewerlib.models.PixelPerfectModel.this . mOverlayImage = overlayImage ; } } } ) ; notifyOverlayChanged ( ) ; if ( toDispose != null ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { toDispose.dispose ( ) ; } } ) ; } }
public void copy1DRangeFromUnchecked ( int off , int count , int [ ] d ) { copy1DRangeFromUnchecked ( off , count , ( ( java.lang.Object ) ( d ) ) , Element.DataType.SIGNED_32 , d.length ) ; }
public long getExitTime ( com.android.tools.perflib.vmtrace.ClockType clockType , java.util.concurrent.TimeUnit units ) { long exitTime = ( clockType == ( ClockType.THREAD ) ) ? com.google.common.primitives.UnsignedInts.toLong ( mExitThreadTime ) : com.google.common.primitives.UnsignedInts.toLong ( mExitGlobalTime ) ; return units.convert ( exitTime , com.android.tools.perflib.vmtrace.VmTraceData.getDefaultTimeUnits ( ) ) ; }
void grantUriPermissionLocked ( int callingUid , java.lang.String targetPkg , android.net.Uri uri , int modeFlags , com.android.server.am.UriPermissionOwner owner ) { int targetUid = checkGrantUriPermissionLocked ( callingUid , targetPkg , uri , modeFlags ) ; if ( targetUid < 0 ) { return ; } grantUriPermissionUncheckedLocked ( targetUid , targetPkg , uri , modeFlags , owner ) ; }
public long getDurationMillis ( long maxWaitMillis ) { synchronized ( this ) { if ( ! ( completed ) ) { try { wait ( maxWaitMillis ) ; } catch ( java.lang.InterruptedException ignored ) { } if ( ! ( completed ) ) { junit.framework.Assert.fail ( ( ( "parker hung for more than " + maxWaitMillis ) + " ms" ) ) ; } } return ( endMillis ) - ( startMillis ) ; } }
protected void libToImportStaticLibs ( @ javax.annotation.Nonnull java.util.List < java.lang.String > commandLine , @ javax.annotation.Nonnull java.io.File [ ] in ) throws java.lang.Exception { for ( java.io.File staticlib : in ) { commandLine.add ( "--import" ) ; commandLine.add ( staticlib.getAbsolutePath ( ) ) ; } for ( java.io.File staticLib : staticLibs ) { commandLine.add ( "--import" ) ; commandLine.add ( staticLib.getAbsolutePath ( ) ) ; } }
public void setUp ( ) { expected = new java.util.ArrayList < java.lang.String > ( ) ; expected.add ( "ak" ) ; expected.add ( "bk" ) ; ns = new org.xml.sax.helpers.NamespaceSupport ( ) ; ns.pushContext ( ) ; ns.declarePrefix ( "ak" , org.apache.harmony.tests.org.xml.sax.helpers.NamespaceSupportTest.marketUri ) ; ns.declarePrefix ( "bk" , org.apache.harmony.tests.org.xml.sax.helpers.NamespaceSupportTest.marketUri ) ; ns.declarePrefix ( "" , org.apache.harmony.tests.org.xml.sax.helpers.NamespaceSupportTest.defaultUri ) ; }
public void finishMerge ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVFS outputVDir ) throws com.android.jack.backend.dex.DexWritingException { for ( int i = 0 ; i < ( mergers.size ( ) ) ; i ++ ) { finishMerge ( mergers.get ( i ) , getOutputDex ( outputVDir , ( i + 1 ) ) ) ; } }
public java.io.File getOutputFile ( ) { if ( ( outputs.size ( ) ) > 1 ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "More than one output on variant '%s', cannot call getOutputFile() on it. Call it on one of its outputs instead." , getName ( ) ) ) ; } plugin.displayDeprecationWarning ( "variant.getOutputFile() is deprecated. Call it on one of variant.getOutputs() instead." ) ; return outputs.get ( 0 ) . getOutputFile ( ) ; }
public void testReverting ( ) throws java.lang.Exception { com.intellij.updater.Patch patch = createPatch ( ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; preparationResult.patch.getActions ( ) . add ( new com.intellij.updater.PatchFileCreatorTest.MyFailOnApplyPatchAction ( patch ) ) ; assertNothingHasChanged ( patch , preparationResult , new java.util.HashMap < java.lang.String , com.intellij.updater.ValidationResult.Option > ( ) ) ; }
private void check_joinAnySource_multiple_joins ( java.net.InetAddress group , java.net.NetworkInterface networkInterface ) throws java.lang.Exception { if ( ! ( supportsMulticast ) ) { return ; } java.nio.channels.DatagramChannel dc = createReceiverChannel ( ) ; java.nio.channels.MembershipKey membershipKey1 = dc.join ( group , networkInterface ) ; java.nio.channels.MembershipKey membershipKey2 = dc.join ( group , loopbackInterface ) ; assertFalse ( membershipKey1.equals ( membershipKey2 ) ) ; java.nio.channels.MembershipKey membershipKey1_2 = dc.join ( group , networkInterface ) ; assertEquals ( membershipKey1 , membershipKey1_2 ) ; dc.close ( ) ; }
public void testAesCbcHmacSha512Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , android.net.cts.IpSecManagerTest.getKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , null , false , 1 , true ) ; }
public boolean onKeyMultiple ( final int keyCode , final int repeatCount , final android.view.KeyEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onKeyMultiple ( keyCode , repeatCount , event ) ; } } ) ; return ret ; } com.android.webview.chromium.UnimplementedWebViewApi.invoke ( ) ; return false ; }
private static java.net.URL makeURL ( @ javax.annotation.Nonnull java.util.zip.ZipEntry entry , @ javax.annotation.Nonnull com.android.jack.launcher.ZipLoader.ZipURLStreamHandler handler ) { try { assert ( entry.getName ( ) . indexOf ( com.android.jack.launcher.ZipLoader.BANG ) ) == ( - 1 ) ; return new java.net.URL ( "launcherzip" , "" , ( - 1 ) , ( ( ( handler.zip.getName ( ) ) + ( com.android.jack.launcher.ZipLoader.BANG ) ) + ( entry.getName ( ) ) ) , handler ) ; } catch ( java.net.MalformedURLException e ) { throw new java.lang.AssertionError ( ) ; } }
public void test_memory ( ) { assertTrue ( "freeMemory <= 0" , ( ( r.freeMemory ( ) ) > 0 ) ) ; assertTrue ( "totalMemory() < freeMemory()" , ( ( r.totalMemory ( ) ) >= ( r.freeMemory ( ) ) ) ) ; assertTrue ( "maxMemory() < totalMemory()" , ( ( r.maxMemory ( ) ) >= ( r.totalMemory ( ) ) ) ) ; }
private void shutdownAndFreeSslNative ( ) throws java.io.IOException { try { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; org.conscrypt.NativeCrypto.SSL_shutdown ( sslNativePointer , org.conscrypt.Platform.getFileDescriptor ( socket ) , this ) ; } catch ( java.io.IOException ignored ) { } finally { free ( ) ; closeUnderlyingSocket ( ) ; } }
java.lang.reflect.Type parseFieldTypeSignature ( ) { switch ( symbol ) { case 'L' : return parseClassTypeSignature ( ) ; case '[' : scanSymbol ( ) ; return new libcore.reflect.GenericArrayTypeImpl ( parseTypeSignature ( ) ) ; case 'T' : return parseTypeVariableSignature ( ) ; default : throw new java.lang.reflect.GenericSignatureFormatError ( ) ; } }
private static java.lang.String toKeyString ( byte [ ] bytes ) { try { return java.nio.charset.ModifiedUtf8.decode ( bytes , new char [ bytes.length ] , 0 , bytes.length ) ; } catch ( java.io.UTFDataFormatException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] buffer = new byte [ 1 ] ; org.conscrypt.NativeCrypto.SSL_read ( s , fd , callback , buffer , 0 , 1 , 0 ) ; assertEquals ( 42 , buffer [ 0 ] ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static java.lang.String getFileExtension ( java.lang.String fullName ) { com.google.common.base.Preconditions.checkNotNull ( fullName ) ; java.lang.String fileName = new java.io.File ( fullName ) . getName ( ) ; int dotIndex = fileName.lastIndexOf ( '.' ) ; return dotIndex == ( - 1 ) ? "" : fileName.substring ( ( dotIndex + 1 ) ) ; }
public java.lang.String iccTransmitApduBasicChannel ( int cla , int instruction , int p1 , int p2 , int p3 , java.lang.String data ) { return iccTransmitApduBasicChannel ( getSubId ( ) , cla , instruction , p1 , p2 , p3 , data ) ; }
private void updateHoverRegion ( int x , int y ) { com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo vertical = findVerticalPatch ( x , y ) ; com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontal = findHorizontalPatch ( x , y ) ; computeHoverHighlightRegions ( vertical , horizontal ) ; computeHoverRegionTooltip ( vertical , horizontal ) ; com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo updateRegion = pickUpdateRegion ( x , y , vertical , horizontal ) ; setCursorForRegion ( x , y , updateRegion ) ; }
public void loadQuickContactBadge ( android.widget.QuickContactBadge badge , com.android.dialer.glidephotomanager.PhotoInfo photoInfo ) { com.android.dialer.common.Assert.isMainThread ( ) ; badge.assignContactUri ( com.android.dialer.glidephotomanager.impl.GlidePhotoManagerImpl.parseUri ( photoInfo.getLookupUri ( ) ) ) ; badge.setOverlay ( null ) ; com.android.dialer.glide.GlideRequest < android.graphics.drawable.Drawable > request = buildRequest ( com.android.dialer.glide.GlideApp.with ( badge ) , photoInfo ) ; request.into ( badge ) ; }
java.util.Iterator < java.util.Map.Entry < K , V > > entryIterator ( ) { throw new java.lang.AssertionError ( "should never be called" ) ; }
private void trackNewTetherableInterface ( java.lang.String iface , int interfaceType ) { com.android.server.connectivity.Tethering.TetherState tetherState ; tetherState = new com.android.server.connectivity.Tethering.TetherState ( new com.android.server.connectivity.tethering.TetherInterfaceStateMachine ( iface , mLooper , interfaceType , mNMService , mStatsService , this , new com.android.server.connectivity.tethering.IPv6TetheringInterfaceServices ( iface , mNMService ) ) ) ; mTetherStates.put ( iface , tetherState ) ; tetherState.stateMachine.start ( ) ; }
public static com.android.dialer.historyitemactions.IntentModule newCallModule ( android.content.Context context , com.android.dialer.callintent.CallIntentBuilder callIntentBuilder ) { @ android.support.annotation.StringRes int text ; @ android.support.annotation.DrawableRes int image ; if ( callIntentBuilder.isVideoCall ( ) ) { text = R.string.video_call ; image = R.drawable.quantum_ic_videocam_vd_white_24 ; } else { text = R.string.voice_call ; image = R.drawable.quantum_ic_call_white_24 ; } return new com.android.dialer.historyitemactions.IntentModule ( context , com.android.dialer.precall.PreCall.getIntent ( context , callIntentBuilder ) , text , image ) ; }
private void confirmDeleteDialog ( android.content.DialogInterface.OnClickListener listener , int messageId ) { android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder ( this ) ; builder.setTitle ( R.string.confirm_dialog_title ) ; builder.setIconAttribute ( android.R.attr.alertDialogIcon ) ; builder.setCancelable ( true ) ; builder.setPositiveButton ( R.string.yes , listener ) ; builder.setNegativeButton ( R.string.no , null ) ; builder.setMessage ( messageId ) ; builder.show ( ) ; }
public void testGeoPhoneNumberMetadataLoadCorrectly ( ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata uaeMetadata = com.google.i18n.phonenumbers.MultiFileMetadataSourceImplTest.SOURCE.getMetadataForRegion ( "AE" ) ; assertEquals ( uaeMetadata.getCountryCode ( ) , 971 ) ; assertTrue ( uaeMetadata.hasGeneralDesc ( ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { server.setEnabledProtocols ( new java.lang.String [ ] { "TLSv1" , "SSLv3" } ) ; server.setEnabledCipherSuites ( serverCipherSuites ) ; try { server.startHandshake ( ) ; fail ( "Should result in inappropriate fallback" ) ; } catch ( javax.net.ssl.SSLHandshakeException expected ) { } return null ; }
public java.text.AttributedCharacterIterator formatToCharacterIterator ( java.lang.Object object ) { if ( object == null ) { throw new java.lang.NullPointerException ( "object == null" ) ; } if ( object instanceof java.util.Date ) { return formatToCharacterIteratorImpl ( ( ( java.util.Date ) ( object ) ) ) ; } if ( object instanceof java.lang.Number ) { return formatToCharacterIteratorImpl ( new java.util.Date ( ( ( java.lang.Number ) ( object ) ) . longValue ( ) ) ) ; } throw new java.lang.IllegalArgumentException ( ( "Bad class: " + ( object.getClass ( ) ) ) ) ; }
public static boolean isAdtProjectDir ( @ com.android.annotations.Nullable java.io.File file ) { return ( new java.io.File ( file , com.android.SdkConstants.ANDROID_MANIFEST_XML ) . exists ( ) ) && ( ( com.android.tools.gradle.eclipse.GradleImport.isEclipseProjectDir ( file ) ) || ( ( new java.io.File ( file , com.android.SdkConstants.FD_RES ) . exists ( ) ) && ( new java.io.File ( file , com.android.SdkConstants.FD_SOURCES ) . exists ( ) ) ) ) ; }
public java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > getBlocksDepthFirst ( boolean forward ) { final java.util.List < com.android.jack.ir.ast.cfg.JBasicBlock > blocks = new java.util.ArrayList < > ( ) ; new com.android.jack.ir.ast.cfg.BasicBlockIterator ( this ) { @ java.lang.Override public boolean process ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlock block ) { blocks.add ( block ) ; return true ; } } . iterateDepthFirst ( forward ) ; return blocks ; }
public boolean isInCall ( java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.iIC" ) ; if ( ! ( canReadPhoneState ( callingPackage , "isInCall" ) ) ) { return false ; } synchronized ( mLock ) { final int callState = mCallsManager.getCallState ( ) ; return ( callState == ( android.telephony.TelephonyManager.CALL_STATE_OFFHOOK ) ) || ( callState == ( android.telephony.TelephonyManager.CALL_STATE_RINGING ) ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
private void handleUpdatePackageCompatibilityInfo ( android.app.ActivityThread.UpdateCompatibilityData data ) { android.app.LoadedApk apk = peekPackageInfo ( data.pkg , false ) ; if ( apk != null ) { apk.setCompatibilityInfo ( data.info ) ; } apk = peekPackageInfo ( data.pkg , true ) ; if ( apk != null ) { apk.setCompatibilityInfo ( data.info ) ; } handleConfigurationChanged ( mConfiguration , data.info ) ; android.view.WindowManagerGlobal.getInstance ( ) . reportNewConfiguration ( mConfiguration ) ; }
public static boolean isVectorGenerationSupported ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Project project ) { com.android.ide.common.repository.GradleVersion modelVersion = project.getGradleModelVersion ( ) ; return ( modelVersion != null ) && ( ( ( modelVersion.getMajor ( ) ) >= 2 ) || ( ( modelVersion.getMinor ( ) ) >= 4 ) ) ; }
public final void unregisterContentObserver ( @ android.annotation.NonNull android.database.ContentObserver observer ) { com.android.internal.util.Preconditions.checkNotNull ( observer , "observer" ) ; try { android.database.IContentObserver contentObserver = observer.releaseContentObserver ( ) ; if ( contentObserver != null ) { android.content.ContentResolver.getContentService ( ) . unregisterContentObserver ( contentObserver ) ; } } catch ( android.os.RemoteException e ) { } }
public void testClearUsedByOtherApps ( ) { org.junit.Assert.assertTrue ( record ( mFooSplit2UsedByOtherApps0 ) ) ; org.junit.Assert.assertTrue ( mPackageDexUsage.clearUsedByOtherApps ( mFooSplit2UsedByOtherApps0.mPackageName ) ) ; com.android.server.pm.dex.PackageDexUsageTests.TestData noLongerUsedByOtherApps = new com.android.server.pm.dex.PackageDexUsageTests.TestData ( mFooSplit2UsedByOtherApps0.mPackageName , mFooSplit2UsedByOtherApps0.mDexFile , mFooSplit2UsedByOtherApps0.mOwnerUserId , mFooSplit2UsedByOtherApps0.mLoaderIsa , false , mFooSplit2UsedByOtherApps0.mPrimaryOrSplit , mFooSplit2UsedByOtherApps0.mUsedBy ) ; assertPackageDexUsage ( noLongerUsedByOtherApps ) ; }
public java.util.List < com.android.builder.AndroidDependency > getFullDirectDependencies ( ) { if ( ( ( mTestedConfig ) != null ) && ( ( mTestedConfig.getType ( ) ) == ( com.android.builder.VariantConfiguration.Type.LIBRARY ) ) ) { java.util.List < com.android.builder.AndroidDependency > list = com.google.common.collect.Lists.newArrayListWithExpectedSize ( ( ( ( mDirectLibraryProjects.size ( ) ) + ( mTestedConfig.mDirectLibraryProjects.size ( ) ) ) + 1 ) ) ; list.addAll ( mDirectLibraryProjects ) ; list.add ( mTestedConfig.mOutput ) ; list.addAll ( mTestedConfig.mDirectLibraryProjects ) ; return list ; } return mDirectLibraryProjects ; }
public static float scalb ( float f , int scaleFactor ) { final int MAX_SCALE = ( ( ( sun.misc.FloatConsts.MAX_EXPONENT ) + ( - ( sun.misc.FloatConsts.MIN_EXPONENT ) ) ) + ( sun.misc.FloatConsts.SIGNIFICAND_WIDTH ) ) + 1 ; scaleFactor = java.lang.Math.max ( java.lang.Math.min ( scaleFactor , MAX_SCALE ) , ( - MAX_SCALE ) ) ; return ( ( float ) ( ( ( double ) ( f ) ) * ( java.lang.Math.powerOfTwoD ( scaleFactor ) ) ) ) ; }
public void tesNoSplitDelegateLastNoSharedLibraries ( ) { android.content.pm.ApplicationInfo ai = createMockApplicationInfo ( com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME , false , false ) ; java.lang.String [ ] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts ( ai , null ) ; org.junit.Assert.assertEquals ( 1 , contexts.length ) ; org.junit.Assert.assertEquals ( "PCL[]" , contexts [ 0 ] ) ; }
public com.android.ide.eclipse.adt.internal.wizards.templates.TemplateManager getManager ( ) { return mManager ; }
private static void checkService ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( ( com.android.tools.lint.checks.SecurityDetector.getExported ( element ) ) && ( com.android.tools.lint.checks.SecurityDetector.isUnprotectedByPermission ( element ) ) ) && ( ! ( com.android.tools.lint.checks.SecurityDetector.isWearableBindListener ( element ) ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_SERVICE , element , context.getLocation ( element ) , "Exported service does not require permission" ) ; } }
public void dragFinished ( org.eclipse.swt.dnd.DragSourceEvent e ) { if ( ( e.detail ) == ( org.eclipse.swt.dnd.DND.DROP_MOVE ) ) { mLayoutEditor.wrapUndoEditXmlModel ( "Remove drag'n'drop source elements" , new java.lang.Runnable ( ) { public void run ( ) { deleteSelection ( "Remove" , mDragSelection ) ; } } ) ; } mDragSelection.clear ( ) ; mDragElements = null ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.GlobalCanvasDragInfo.getInstance ( ) . stopDrag ( ) ; }
public int generateKey ( java.lang.String alias , android.security.keymaster.KeymasterArguments args , byte [ ] entropy , int uid , int flags , android.security.keymaster.KeyCharacteristics outCharacteristics ) { try { return mBinder.generateKey ( alias , args , entropy , uid , flags , outCharacteristics ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return android.security.KeyStore.SYSTEM_ERROR ; } }
private void iccLockChanged ( boolean success ) { if ( success ) { mPinToggle.setChecked ( mToState ) ; } else { android.widget.Toast.makeText ( this , mRes.getString ( R.string.sim_lock_failed ) , Toast.LENGTH_SHORT ) . show ( ) ; } mPinToggle.setEnabled ( true ) ; resetDialogState ( ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { android.util.Log.v ( android.bluetooth.BluetoothInputHost.TAG , "getConnectedDevices()" ) ; final android.bluetooth.IBluetoothInputHost service = mService ; if ( service != null ) { try { return service.getConnectedDevices ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothInputHost.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothInputHost.TAG , "Proxy not attached to service" ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; }
public boolean setP2pSsidPostfix ( java.lang.String postfix ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setSsidPostfix ( postfix ) ; } else { return doBooleanCommand ( ( "SET p2p_ssid_postfix " + postfix ) ) ; } }
synchronized void nAllocationRead2D ( int id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mAccountManager = ( ( android.accounts.AccountManager ) ( mContext.getSystemService ( Context.ACCOUNT_SERVICE ) ) ) ; clearAllAccountManagementDisabled ( ) ; mDevicePolicyManager.clearUserRestriction ( com.android.cts.deviceandprofileowner.ADMIN_RECEIVER_COMPONENT , UserManager.DISALLOW_MODIFY_ACCOUNTS ) ; com.android.cts.deviceandprofileowner.AccountUtilsTest.removeAllAccountsForType ( mAccountManager , com.android.cts.deviceandprofileowner.AccountManagementTest.ACCOUNT_TYPE_1 ) ; com.android.cts.deviceandprofileowner.AccountUtilsTest.removeAllAccountsForType ( mAccountManager , com.android.cts.deviceandprofileowner.AccountManagementTest.ACCOUNT_TYPE_2 ) ; }
public java.util.Iterator < com.android.sched.vfs.InputVFile > iterator ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) { if ( ! ( containsFileType ( fileType ) ) ) { return com.google.common.collect.ImmutableSet.< com.android.sched.vfs.InputVFile > of ( ) . iterator ( ) ; } java.util.List < com.android.sched.vfs.InputVFile > inputVFiles = new java.util.ArrayList < com.android.sched.vfs.InputVFile > ( ) ; fillFiles ( getSectionVFS ( fileType ) . getRootDir ( ) , inputVFiles ) ; return inputVFiles.listIterator ( ) ; }
public void testSuccessfulFollowOnUpdate_newerVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.ConfigBundle tzData1 = createValidTzDataBundle ( libcore.tzdata.update2.TzDataBundleInstallerTest.NEW_RULES_VERSION ) ; assertTrue ( installer.install ( tzData1.getBundleBytes ( ) ) ) ; assertTzDataInstalled ( tzData1 ) ; libcore.tzdata.update2.ConfigBundle tzData2 = createValidTzDataBundle ( libcore.tzdata.update2.TzDataBundleInstallerTest.NEWER_RULES_VERSION ) ; assertTrue ( installer.install ( tzData2.getBundleBytes ( ) ) ) ; assertTzDataInstalled ( tzData2 ) ; }
public void writeExternal ( java.io.ObjectOutput objectOutput ) throws java.io.IOException { objectOutput.write ( version ) ; objectOutput.writeUTF ( fileServiceId ) ; objectOutput.writeUTF ( source.toString ( ) ) ; objectOutput.writeUTF ( destination.toString ( ) ) ; objectOutput.write ( subscriptionId ) ; objectOutput.writeUTF ( appIntent ) ; }
private com.android.jill.frontend.java.Variable getTempVarFromTopOfStackMinus1 ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame ) { com.android.jill.frontend.java.Variable topOfStackBeforeInst = getStackVariable ( frame , ( ( com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) - 1 ) ) ; java.lang.String tmpVarId = "-swap_tmp_" + ( typeToUntypedDesc ( topOfStackBeforeInst.getType ( ) ) ) ; com.android.jill.frontend.java.Variable tmpVariable = getVariable ( tmpVarId , tmpVarId , topOfStackBeforeInst.getType ( ) , null ) ; tmpVariable.setSynthetic ( ) ; return tmpVariable ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.util.Log.i ( com.android.server.am.ActivityManagerService.TAG , "Shutting down activity manager..." ) ; shutdown ( 10000 ) ; android.util.Log.i ( com.android.server.am.ActivityManagerService.TAG , "Shutdown complete, restarting!" ) ; java.lang.Process.killProcess ( java.lang.Process.myPid ( ) ) ; java.lang.System.exit ( 10 ) ; }
private void transform ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn , @ javax.annotation.Nonnull java.io.OutputStream os , @ javax.annotation.Nonnull com.android.sched.util.location.Location location ) throws com.android.sched.util.file.CannotWriteException { com.android.jill.backend.jayce.JayceWriter writer = createWriter ( os ) ; com.android.jill.frontend.java.ClassNodeWriter asm2jayce = new com.android.jill.frontend.java.ClassNodeWriter ( writer , new com.android.jill.frontend.java.SourceInfoWriter ( writer ) , options ) ; try { asm2jayce.write ( cn ) ; writer.flush ( ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.file.CannotWriteException ( location , e ) ; } }
public boolean isTrue ( ) throws java.lang.Exception { return ( device.hasObject ( android.support.test.uiautomator.By.res ( com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_LOCK_ICON_RES ) ) ) || ( device.hasObject ( android.support.test.uiautomator.By.text ( com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_ACTIVATED_TEXT ) ) ) ; }
public boolean isVoicemailVibrationEnabled ( android.telecom.PhoneAccountHandle accountHandle ) { com.android.internal.telephony.Phone phone = com.android.phone.PhoneUtils.getPhoneForPhoneAccountHandle ( accountHandle ) ; if ( phone == null ) { phone = mPhone ; } return com.android.phone.settings.VoicemailNotificationSettingsUtil.isVibrationEnabled ( phone ) ; }
public static byte identity ( byte val ) { return val ; }
public boolean commitDirtyAttributesToXml ( ) { boolean result = false ; java.util.HashMap < com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor , com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode > attributeMap = getInternalUiAttributes ( ) ; for ( java.util.Map.Entry < com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor , com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode > entry : attributeMap.entrySet ( ) ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode uiAttr = entry.getValue ( ) ; if ( uiAttr.isDirty ( ) ) { result |= commitAttributeToXml ( uiAttr , uiAttr.getCurrentValue ( ) ) ; uiAttr.setDirty ( false ) ; } } return result ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { if ( WindowManagerPolicy.ACTION_USER_ACTIVITY_NOTIFICATION.equals ( intent.getAction ( ) ) ) { android.os.Message message = mServiceHandler.obtainMessage ( ) ; message.arg1 = com.android.stk.StkAppService.OP_USER_ACTIVITY ; mServiceHandler.sendMessage ( message ) ; unregisterUserActivityReceiver ( ) ; } }
private static java.util.List < com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata > getMetadataFromSingleFileName ( java.lang.String fileName , com.google.i18n.phonenumbers.MetadataLoader metadataLoader ) { java.io.InputStream source = metadataLoader.loadMetadata ( fileName ) ; if ( source == null ) { throw new java.lang.IllegalStateException ( ( "missing metadata: " + fileName ) ) ; } com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadataCollection metadataCollection = com.google.i18n.phonenumbers.MetadataManager.loadMetadataAndCloseInput ( source ) ; java.util.List < com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata > metadataList = metadataCollection.getMetadataList ( ) ; if ( ( metadataList.size ( ) ) == 0 ) { throw new java.lang.IllegalStateException ( ( "empty metadata: " + fileName ) ) ; } return metadataList ; }
static void testAccess2 ( java.lang.ClassLoader loader ) { java.lang.Class < ? > altClass ; try { altClass = loader.loadClass ( "Inaccessible2" ) ; java.lang.System.out.println ( ( "ERROR: Inaccessible2 was accessible: " + altClass ) ) ; } catch ( java.lang.ClassNotFoundException cnfe ) { java.lang.Throwable cause = cnfe.getCause ( ) ; if ( cause instanceof java.lang.IllegalAccessError ) { java.lang.System.out.println ( "Got expected CNFE/IAE #2" ) ; } else { java.lang.System.out.println ( "Got unexpected CNFE/IAE #2" ) ; cnfe.printStackTrace ( java.lang.System.out ) ; } } }
protected void updateSharpImageUsingFuzzyImage ( ) { long startnow ; long endnow ; startnow = java.lang.System.nanoTime ( ) ; scriptC.forEach_UpdateSharpUsingFuzzyPassInput ( buffers.sharpDilatedDepthAllocation , buffers.sharpDilatedDepthAllocation ) ; endnow = java.lang.System.nanoTime ( ) ; logTiming ( com.android.rs.refocus.d1new.RefocusFilterd1new.myTAG , "UpdateSharpImageUsingFuzzyImage" , ( endnow - startnow ) ) ; }
void assertAudioRoute ( final android.telecom.cts.MockConnection connection , final int route ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return route ; } @ java.lang.Override public java.lang.Object actual ( ) { final android.telecom.CallAudioState state = ( ( android.telecom.Connection ) ( connection ) ) . getCallAudioState ( ) ; return state == null ? null : state.getRoute ( ) ; } } , android.telecom.cts.TestUtils.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( "Connection's audio route should be: " + route ) ) ; }
public com.android.jack.ir.ast.JNameValuePair exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession , @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationType receiver ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( sourceInfo ) != null ; assert ( value ) != null ; assert ( name ) != null ; com.android.jack.ir.ast.JLiteral jValue = value.exportAsJast ( exportSession ) ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JMethodIdWide methodId = receiver.getOrCreateMethodIdWide ( name , java.util.Collections.< com.android.jack.ir.ast.JType > emptyList ( ) , MethodKind.INSTANCE_VIRTUAL ) ; com.android.jack.ir.ast.JNameValuePair jNameValuePair = new com.android.jack.ir.ast.JNameValuePair ( jSourceInfo , methodId , jValue ) ; return jNameValuePair ; }
public boolean processMessage ( android.os.Message message ) { boolean retValue = true ; switch ( message.what ) { case com.android.server.connectivity.Tethering.TetherMasterSM.CMD_TETHER_MODE_REQUESTED : com.android.server.connectivity.tethering.TetherInterfaceStateMachine who = ( ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine ) ( message.obj ) ) ; who.sendMessage ( mErrorNotification ) ; break ; case com.android.server.connectivity.Tethering.TetherMasterSM.CMD_CLEAR_ERROR : mErrorNotification = android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ; transitionTo ( mInitialState ) ; break ; default : retValue = false ; } return retValue ; }
public void testAesCbcHmacSha1Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , android.net.cts.IpSecManagerTest.getKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , null , false , 1 , true ) ; }
public java.lang.String [ ] setPackagesSuspended ( @ android.annotation.NonNull android.content.ComponentName admin , @ android.annotation.NonNull java.lang.String [ ] packageNames , boolean suspended ) { throwIfParentInstance ( "setPackagesSuspended" ) ; if ( ( mService ) != null ) { try { return mService.setPackagesSuspended ( admin , mContext.getPackageName ( ) , packageNames , suspended ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } } return packageNames ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > getAllModelsWithBenchmark ( @ com.android.annotations.Nullable java.lang.String benchmarkName , @ com.android.annotations.Nullable com.android.build.gradle.integration.common.fixture.GradleTestProject.BenchmarkMode benchmarkMode ) { java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > allModels = getAllModels ( new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , false , benchmarkName , benchmarkMode ) ; for ( com.android.builder.model.AndroidProject project : allModels.values ( ) ) { com.android.build.gradle.integration.common.fixture.GradleTestProject.assertNoSyncIssues ( project ) ; } return allModels ; }
public void test_ko ( ) throws java.lang.Exception { libcore.icu.ImmutableIndex ko = libcore.icu.AlphabeticIndexTest.createIndex ( java.util.Locale.KOREAN ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ᄀ" , "ᄀ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ㄱ" , "ᄀ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ᄁ" , "ᄀ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ᅡ" , "ᄒ" ) ; }
public void setSupplicantLogLevel ( boolean turnOnVerbose ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { int logLevel = ( turnOnVerbose ) ? SupplicantStaIfaceHal.LOG_LEVEL_DEBUG : SupplicantStaIfaceHal.LOG_LEVEL_INFO ; mSupplicantStaIfaceHal.setLogLevel ( logLevel ) ; } else { doStringCommand ( ( "LOG_LEVEL " + ( turnOnVerbose ? "DEBUG" : "INFO" ) ) ) ; } }
public void stopRingbackForCall ( com.android.server.telecom.Call call ) { if ( ( mCall ) == call ) { mCall = null ; if ( ( mTonePlayer ) == null ) { android.telecom.Log.w ( this , "No player found to stop." ) ; } else { android.telecom.Log.i ( this , "Stopping the ringback tone for %s." , call ) ; mTonePlayer.stopTone ( ) ; mTonePlayer = null ; } } }
private static char [ ] zzUnpackCMap ( java.lang.String packed ) { char [ ] map = new char [ 1114112 ] ; int i = 0 ; int j = 0 ; while ( i < 240 ) { int count = packed.charAt ( ( i ++ ) ) ; char value = packed.charAt ( ( i ++ ) ) ; do map [ ( j ++ ) ] = value ; while ( ( -- count ) > 0 ) ; } return map ; }
public final void testPointIntInt ( ) { com.android.ide.common.api.Point p = new com.android.ide.common.api.Point ( 1 , 2 ) ; assertEquals ( 1 , p.x ) ; assertEquals ( 2 , p.y ) ; p = new com.android.ide.common.api.Point ( ( - 3 ) , ( - 4 ) ) ; assertEquals ( ( - 3 ) , p.x ) ; assertEquals ( ( - 4 ) , p.y ) ; }
protected void finalizeFuzzyImageUsingSharpImage ( ) { long startnow ; long endnow ; startnow = java.lang.System.nanoTime ( ) ; scriptC.forEach_FinalizeFuzzyImageUsingSharpImage ( buffers.inAllocation ) ; endnow = java.lang.System.nanoTime ( ) ; android.util.Log.d ( com.android.rs.refocus.d1new.RefocusFilterd1new.myTAG , ( ( "finalizeFuzzyImageUsingSharpImage: " + ( endnow - startnow ) ) + " ns" ) ) ; }
public void onNewIntent ( android.content.Intent intent ) { super . onNewIntent ( intent ) ; android.util.Log.d ( com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG , ( ( ( "onNewIntent: state=" + ( mState ) ) + ", intent=" ) + intent ) ) ; if ( UsbManager.ACTION_USB_ACCESSORY_ATTACHED.equals ( intent.getAction ( ) ) ) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra ( UsbManager.EXTRA_ACCESSORY ) ; openAccessory ( accessory ) ; } }
final void get ( short [ ] dst , int dstOffset , int shortCount ) { checkIsAccessible ( ) ; int byteCount = checkGetBounds ( SizeOf.SHORT , dst.length , dstOffset , shortCount ) ; this . block.peekShortArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , shortCount , order.needsSwap ) ; position += byteCount ; }
void assertNumCalls ( final android.telecom.cts.MockInCallService inCallService , final int numCalls ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return numCalls ; } @ java.lang.Override public java.lang.Object actual ( ) { return inCallService.getCallCount ( ) ; } } , android.telecom.cts.TestUtils.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( ( "InCallService should contain " + numCalls ) + " calls." ) ) ; }
public void setUp ( ) throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock ( com.android.tradefed.build.IFolderBuildInfo.class ) ; org.easymock.EasyMock.replay ( buildInfo ) ; mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper ( new java.io.File ( mVirtualenvPath ) ) { @ java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper ( java.lang.String [ ] cmd ) { return mProcessHelper ; } } ; }
public void testFileToUrl ( ) throws java.lang.Exception { if ( ( com.android.SdkConstants.CURRENT_PLATFORM ) == ( com.android.SdkConstants.PLATFORM_WINDOWS ) ) { assertEquals ( "file:/D:/tmp/foo/bar" , com.android.utils.SdkUtils.fileToUrlString ( new java.io.File ( "D:\\tmp\\foo\\bar" ) ) ) ; assertEquals ( "file:/C:/tmp/foo/bar" , com.android.utils.SdkUtils.fileToUrlString ( new java.io.File ( "/tmp/foo/bar" ) ) ) ; assertEquals ( "file:/C:/tmp/$&+,:;=%3F@/foo%20bar%25" , com.android.utils.SdkUtils.fileToUrlString ( new java.io.File ( "/tmp/$&+,:;=?@/foo bar%" ) ) ) ; } else { assertEquals ( "file:/tmp/foo/bar" , com.android.utils.SdkUtils.fileToUrlString ( new java.io.File ( "/tmp/foo/bar" ) ) ) ; assertEquals ( "file:/tmp/$&+,:;=%3F@/foo%20bar%25" , com.android.utils.SdkUtils.fileToUrlString ( new java.io.File ( "/tmp/$&+,:;=?@/foo bar%" ) ) ) ; } }
public void testIdenticalBinaryCodeComparison ( ) throws java.io.IOException { java.lang.String sourcePath = "com/android/jack/dexcomparator/test/A.java" ; java.io.File a1 = new java.io.File ( com.android.jack.dexcomparator.test.BinaryCodeComparisonTest.testSource1 , sourcePath ) ; java.io.File dex1 = java.io.File.createTempFile ( "dex1" , ".dex" ) ; dex1.deleteOnExit ( ) ; com.android.jack.dexcomparator.test.TestTools.compileToDexWithJack ( a1 , dex1 ) ; try { new com.android.jack.comparator.DexComparator ( false , true , false , true ) . compare ( dex1 , dex1 ) ; } catch ( com.android.jack.comparator.DifferenceFoundException e ) { org.junit.Assert.fail ( e.getMessage ( ) ) ; } }
public void resolve ( ) { for ( com.android.jack.ir.ast.JCaseStatement caseStatement : cases ) { block.addCaseBlock ( com.android.jack.cfg.ForwardBranchResolver.getTargetBlock ( caseStatement ) ) ; } if ( ( defaultCase ) == null ) { block.setDefault ( exitBlock ) ; } else { block.setDefault ( com.android.jack.cfg.ForwardBranchResolver.getTargetBlock ( defaultCase ) ) ; } }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_single_source_script s = new com.android.rs.test.ScriptC_single_source_script ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_entrypoint ( testAllocation1 , testAllocation2 ) ; s.forEach_oldFoo ( testAllocation2 , testAllocation2 ) ; s.forEach_oldGoo ( testAllocation2 , testAllocation2 ) ; s.invoke_validate ( testAllocation2 ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
protected com.intellij.execution.actions.RunnerAndConfigurationSettings cloneTemplateConfiguration ( @ org.jetbrains.annotations.NotNull final com.intellij.execution.actions.ConfigurationContext context ) { final com.intellij.execution.configurations.RunConfiguration original = context.getOriginalConfiguration ( myConfigurationFactory.getType ( ) ) ; if ( original != null ) { return com.intellij.execution.actions.RunManager.getInstance ( context.getProject ( ) ) . createConfiguration ( original.clone ( ) , myConfigurationFactory ) ; } return com.intellij.execution.actions.RunManager.getInstance ( context.getProject ( ) ) . createRunConfiguration ( "" , myConfigurationFactory ) ; }
protected void checkReportedError ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( issue == ( com.android.tools.lint.checks.MissingClassDetector.INNERCLASS ) ) { assertNotNull ( message , com.android.tools.lint.checks.MissingClassDetector.getOldValue ( issue , message , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; assertNotNull ( message , com.android.tools.lint.checks.MissingClassDetector.getNewValue ( issue , message , com.android.tools.lint.detector.api.TextFormat.TEXT ) ) ; } }
private boolean isScanClient ( int clientIf ) { for ( com.android.bluetooth.gatt.ScanClient client : mScanManager.getRegularScanQueue ( ) ) { if ( ( client.scannerId ) == clientIf ) { return true ; } } for ( com.android.bluetooth.gatt.ScanClient client : mScanManager.getBatchScanQueue ( ) ) { if ( ( client.scannerId ) == clientIf ) { return true ; } } return false ; }
public com.android.sched.vfs.InputOutputVDir getInputVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { java.io.File file = new java.io.File ( dir , path.getPathAsString ( java.io.File.separatorChar ) ) ; if ( ! ( file.exists ( ) ) ) { throw new com.android.sched.util.file.NoSuchFileException ( new com.android.sched.util.location.DirectoryLocation ( file ) ) ; } if ( file.isFile ( ) ) { throw new com.android.sched.util.file.NotDirectoryException ( new com.android.sched.util.location.DirectoryLocation ( file ) ) ; } return new com.android.sched.vfs.DirectDir ( file , vfs ) ; }
private static byte [ ] toAscii ( byte [ ] dst , java.lang.String src ) { for ( int i = 0 ; i < ( src.length ( ) ) ; ++ i ) { if ( ( src.charAt ( i ) ) > '~' ) { throw new java.lang.RuntimeException ( ( "non-ASCII string: " + src ) ) ; } dst [ i ] = ( ( byte ) ( src.charAt ( i ) ) ) ; } return dst ; }
public void notifyChange ( @ android.annotation.NonNull android.net.Uri uri , @ android.annotation.Nullable android.database.ContentObserver observer , boolean syncToNetwork ) { com.android.internal.util.Preconditions.checkNotNull ( uri , "uri" ) ; notifyChange ( android.content.ContentProvider.getUriWithoutUserId ( uri ) , observer , syncToNetwork , android.content.ContentProvider.getUserIdFromUri ( uri , android.os.UserHandle.myUserId ( ) ) ) ; }
private boolean retryAfterDisconnected ( com.android.internal.telephony.dataconnection.ApnContext apnContext ) { boolean retry = true ; java.lang.String reason = apnContext.getReason ( ) ; if ( ( Phone.REASON_RADIO_TURNED_OFF.equals ( reason ) ) || ( ( isOnlySingleDcAllowed ( mPhone.getServiceState ( ) . getRilDataRadioTechnology ( ) ) ) && ( isHigherPriorityApnContextActive ( apnContext ) ) ) ) { retry = false ; } return retry ; }
public java.lang.String [ ] getAvailableInterfaces ( ) throws android.os.RemoteException { return mTracker.getInterfaces ( checkUseRestrictedNetworksPermission ( ) ) ; }
public void testApplyWhenCommonFileChangesStrict ( ) throws java.lang.Exception { myPatchSpec.setStrict ( true ) ; com.intellij.updater.PatchFileCreator.create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; com.intellij.openapi.util.io.FileUtil.copy ( new java.io.File ( myOlderDir , "/lib/bootstrap.jar" ) , new java.io.File ( myOlderDir , "/lib/boot.jar" ) ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; assertEquals ( 1 , preparationResult.validationResults.size ( ) ) ; assertEquals ( new com.intellij.updater.ValidationResult ( ValidationResult.Kind.ERROR , "lib/boot.jar" , ValidationResult.Action.VALIDATE , ValidationResult.MODIFIED_MESSAGE , ValidationResult.Option.NONE ) , preparationResult.validationResults.get ( 0 ) ) ; }
public org.eclipse.swt.graphics.Color getBackground ( java.lang.Object element , int columnIndex ) { if ( element instanceof com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) { if ( ( ( ( com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) ( element ) ) . getState ( ) ) == ( com.android.sdkuilib.internal.repository.PackagesPage.PkgState.NEW_AVAILABLE ) ) { } else if ( ( ( ( com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) ( element ) ) . getState ( ) ) == ( com.android.sdkuilib.internal.repository.PackagesPage.PkgState.UPDATE_AVAILABLE ) ) { return mColorUpdate ; } } return null ; }
private void launchQuickContact ( ) { android.provider.ContactsContract.QuickContact.showQuickContact ( getContext ( ) , this , getLookupUri ( ) , null , Phone.CONTENT_ITEM_TYPE ) ; }
protected void addNotificationViews ( com.android.systemui.statusbar.NotificationData.Entry entry ) { if ( entry == null ) { return ; } int pos = mNotificationData.add ( entry ) ; if ( com.android.systemui.statusbar.BaseStatusBar.DEBUG ) { android.util.Log.d ( com.android.systemui.statusbar.BaseStatusBar.TAG , ( "addNotificationViews: added at " + pos ) ) ; } updateExpansionStates ( ) ; updateNotificationIcons ( ) ; }
public void testCheckAccessLevel_isDeviceOwner ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( true ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert.assertEquals ( NetworkStatsAccess.Level.DEVICE , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public void stopDtmf ( ) { if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , " stopDtmf()" ) ; android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , toString ( ) ) ; } if ( hasActiveFgCall ( ) ) getFgPhone ( ) . stopDtmf ( ) ; if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , "End stopDtmf()" ) ; android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , toString ( ) ) ; } }
protected void update ( com.android.ide.common.resources.ScanningContext context ) { java.util.Set < java.lang.String > oldIdNames = new java.util.HashSet < java.lang.String > ( mIdResources.keySet ( ) ) ; mIdResources.clear ( ) ; if ( ! ( parseFileForIds ( context ) ) ) { context.requestFullAapt ( ) ; } java.util.Set < java.lang.String > keySet = mIdResources.keySet ( ) ; assert keySet != oldIdNames ; if ( ( oldIdNames.equals ( keySet ) ) == false ) { updateResourceItems ( context ) ; } }
protected void tearDown ( ) throws java.lang.Exception { if ( mConnection.isBound ( ) ) { getInstrumentation ( ) . getContext ( ) . unbindService ( mConnection ) ; } if ( ( ( mDevice.hasObject ( Constants.SIDE_PANEL ) ) || ( mDevice.hasObject ( Constants.MENU ) ) ) || ( mDevice.hasObject ( Constants.PROGRAM_GUIDE ) ) ) { mDevice.pressBack ( ) ; } mDevice.pressBack ( ) ; super . tearDown ( ) ; }
public java.lang.StringBuffer format ( com.ibm.icu.util.CurrencyAmount currAmt , java.lang.StringBuffer toAppendTo , java.text.FieldPosition pos ) { synchronized ( this ) { com.ibm.icu.util.Currency save = getCurrency ( ) ; com.ibm.icu.util.Currency curr = currAmt.getCurrency ( ) ; boolean same = curr.equals ( save ) ; if ( ! same ) setCurrency ( curr ) ; format ( currAmt.getNumber ( ) , toAppendTo , pos ) ; if ( ! same ) setCurrency ( save ) ; } return toAppendTo ; }
private void assertEqualRoutes ( java.util.Collection < android.net.RouteInfo > expected , java.util.Collection < android.net.RouteInfo > actual ) { java.util.Set < android.net.RouteInfo > expectedSet = new android.util.ArraySet ( expected ) ; java.util.Set < android.net.RouteInfo > actualSet = new android.util.ArraySet ( actual ) ; org.junit.Assert.assertEquals ( actual.size ( ) , actualSet.size ( ) ) ; org.junit.Assert.assertEquals ( expectedSet , actualSet ) ; }
public void testGetByEnabledState ( ) throws java.lang.Exception { mComponentContextFixture.addConnectionService ( com.android.server.telecom.tests.PhoneAccountRegistrarTest.makeQuickConnectionServiceComponentName ( ) , org.mockito.Mockito.mock ( com.android.internal.telecom.IConnectionService.class ) ) ; mRegistrar.registerPhoneAccount ( makeQuickAccountBuilder ( "id1" , 1 ) . setCapabilities ( PhoneAccount.CAPABILITY_CALL_PROVIDER ) . build ( ) ) ; org.junit.Assert.assertEquals ( 0 , mRegistrar.getCallCapablePhoneAccounts ( PhoneAccount.SCHEME_TEL , false , java.lang.Process.myUserHandle ( ) ) . size ( ) ) ; org.junit.Assert.assertEquals ( 1 , mRegistrar.getCallCapablePhoneAccounts ( PhoneAccount.SCHEME_TEL , true , java.lang.Process.myUserHandle ( ) ) . size ( ) ) ; }
private static java.lang.CharSequence toTitleCase ( java.lang.CharSequence value ) { return android.icu.lang.UCharacter.toTitleCase ( java.util.Locale.getDefault ( ) , value.toString ( ) , android.icu.text.BreakIterator.getSentenceInstance ( ) , UCharacter.TITLECASE_NO_LOWERCASE ) ; }
public static android.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR ( android.renderscript.RenderScript rs ) { if ( ( rs.mSampler_CLAMP_LINEAR_MIP_LINEAR ) == null ) { synchronized ( rs ) { if ( ( rs.mSampler_CLAMP_LINEAR_MIP_LINEAR ) == null ) { android.renderscript.Sampler.Builder b = new android.renderscript.Sampler.Builder ( rs ) ; b.setMinification ( android.renderscript.Sampler.Value.LINEAR_MIP_LINEAR ) ; b.setMagnification ( android.renderscript.Sampler.Value.LINEAR ) ; b.setWrapS ( android.renderscript.Sampler.Value.CLAMP ) ; b.setWrapT ( android.renderscript.Sampler.Value.CLAMP ) ; rs.mSampler_CLAMP_LINEAR_MIP_LINEAR = b.create ( ) ; } } } return rs.mSampler_CLAMP_LINEAR_MIP_LINEAR ; }
public boolean onDisconnect ( int cause ) { boolean changed = false ; mCause = cause ; if ( ! ( mDisconnected ) ) { doDisconnect ( ) ; if ( com.android.internal.telephony.GsmCdmaConnection.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.GsmCdmaConnection.LOG_TAG , ( "onDisconnect: cause=" + cause ) ) ; mOwner.getPhone ( ) . notifyDisconnect ( this ) ; notifyDisconnect ( cause ) ; if ( ( mParent ) != null ) { changed = mParent.connectionDisconnected ( this ) ; } mOrigConnection = null ; } clearPostDialListeners ( ) ; releaseWakeLock ( ) ; return changed ; }
public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { com.android.jack.ir.ast.JMethod method = cfg.getMethod ( ) ; tracer.getStatistic ( com.android.jack.ir.ast.cfg.ControlFlowGraphSizeTracker.STATISTICS ) . add ( cfg.getBlocksDepthFirst ( false ) . size ( ) , ( ( ( ( formatter.getName ( method ) ) + " [" ) + ( formatter.getName ( method.getEnclosingType ( ) ) ) ) + "]" ) ) ; }
public void testFocusGain ( ) { testSnkPlay ( ) ; streamHandler.handleMessage ( streamHandler.obtainMessage ( A2dpSinkStreamHandler.AUDIO_FOCUS_CHANGE , AudioManager.AUDIOFOCUS_GAIN ) ) ; org.mockito.Mockito.verify ( mockAudioManager , org.mockito.Mockito.times ( 1 ) ) . requestAudioFocus ( org.mockito.Mockito.any ( ) ) ; org.mockito.Mockito.verify ( mockA2dpSink , org.mockito.Mockito.times ( 2 ) ) . informAudioFocusStateNative ( 1 ) ; org.mockito.Mockito.verify ( mockA2dpSink , org.mockito.Mockito.times ( 2 ) ) . informAudioTrackGainNative ( 1.0F ) ; }
public void doubleClick ( org.eclipse.jface.viewers.DoubleClickEvent event ) { requestThreadStackTrace ( getThreadSelection ( event.getSelection ( ) ) ) ; }
protected com.android.tools.lint.detector.api.Severity getDefaultSeverity ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue ) { com.android.tools.lint.detector.api.Severity severity = super . getDefaultSeverity ( issue ) ; if ( severity == ( com.android.tools.lint.detector.api.Severity.IGNORE ) ) { if ( ( issue.getDefaultSeverity ( ) ) != ( com.android.tools.lint.detector.api.Severity.IGNORE ) ) { return issue.getDefaultSeverity ( ) ; } return com.android.tools.lint.detector.api.Severity.WARNING ; } return severity ; }
public void subscribe ( @ android.annotation.NonNull android.net.wifi.aware.SubscribeConfig subscribeConfig , @ android.annotation.NonNull android.net.wifi.aware.WifiAwareDiscoverySessionCallback callback , @ android.annotation.Nullable android.os.Handler handler ) { android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "publish: called post GC on WifiAwareManager" ) ; return ; } if ( mTerminated ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "publish: called after termination" ) ; return ; } mgr.subscribe ( mClientId , ( handler == null ? android.os.Looper.getMainLooper ( ) : handler.getLooper ( ) ) , subscribeConfig , callback ) ; }
public void setCarrierInfoForImsiEncryption ( int subId , java.lang.String callingPackage , android.telephony.ImsiEncryptionInfo imsiEncryptionInfo ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mContext , subId , callingPackage , "setCarrierInfoForImsiEncryption" ) ) ) { return ; } phone.setCarrierInfoForImsiEncryption ( imsiEncryptionInfo ) ; } else { loge ( ( "setCarrierInfoForImsiEncryption phone is null for Subscription:" + subId ) ) ; return ; } }
private static boolean shouldWarnForOutgoingWps ( android.content.Context context , java.lang.String number ) { if ( ( number != null ) && ( number.startsWith ( com.android.dialer.util.DialerUtils.WPS_PREFIX ) ) ) { android.telephony.TelephonyManager telephonyManager = context.getSystemService ( android.telephony.TelephonyManager.class ) ; boolean isOnVolte = ( telephonyManager.getVoiceNetworkType ( ) ) == ( android.telephony.TelephonyManager.NETWORK_TYPE_LTE ) ; boolean hasCurrentActiveCall = ( telephonyManager.getCallState ( ) ) == ( android.telephony.TelephonyManager.CALL_STATE_OFFHOOK ) ; return isOnVolte && hasCurrentActiveCall ; } return false ; }
public final T call ( ) { try { T result = realCall ( ) ; threadShouldThrow ( "InterruptedException" ) ; return result ; } catch ( java.lang.InterruptedException success ) { threadAssertFalse ( java.lang.Thread.interrupted ( ) ) ; } catch ( java.lang.Throwable fail ) { threadUnexpectedException ( fail ) ; } return null ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ReturnStatement x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JExpression expression = pop ( x.expression ) ; push ( new com.android.jack.ir.ast.JReturnStatement ( info , expression ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
private void recordNewWindow ( int pid , long window ) { synchronized ( android.database.CursorWindow.sWindowToPidMap ) { android.database.CursorWindow.sWindowToPidMap.put ( window , pid ) ; if ( android.util.Log.isLoggable ( android.database.CursorWindow.STATS_TAG , Log.VERBOSE ) ) { android.util.Log.i ( android.database.CursorWindow.STATS_TAG , ( "Created a new Cursor. " + ( printStats ( ) ) ) ) ; } } }
public void test_getReuseAddress ( ) throws java.lang.Exception { java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( null ) ; theSocket.setReuseAddress ( true ) ; assertTrue ( "getReuseAddress false when it should be true" , theSocket.getReuseAddress ( ) ) ; theSocket.setReuseAddress ( false ) ; assertFalse ( "getReuseAddress true when it should be False" , theSocket.getReuseAddress ( ) ) ; theSocket.close ( ) ; try { theSocket.getReuseAddress ( ) ; fail ( "SocketException was not thrown." ) ; } catch ( java.net.SocketException se ) { } }
public void shutdown ( ) { for ( android.content.BroadcastReceiver receiver : listeningDevices.values ( ) ) { mService.unregisterReceiver ( receiver ) ; } listeningDevices.clear ( ) ; mService.unregisterReceiver ( mPairingHelper ) ; }
public void test_EVP_get_digestbyname ( ) throws java.lang.Exception { org.junit.Assert.assertTrue ( ( ( org.conscrypt.NativeCrypto.EVP_get_digestbyname ( "sha256" ) ) != ( org.conscrypt.NativeCryptoTest.NULL ) ) ) ; try { org.conscrypt.NativeCrypto.EVP_get_digestbyname ( "" ) ; org.conscrypt.NativeCrypto.EVP_get_digestbyname ( "foobar" ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } }
public void exit ( ) { if ( com.android.internal.telephony.InboundSmsHandler.DBG ) log ( "exiting Waiting state" ) ; setWakeLockTimeout ( com.android.internal.telephony.InboundSmsHandler.WAKELOCK_TIMEOUT ) ; }
public com.android.jack.dx.dex.file.IndexedItem get ( com.android.jack.dx.rop.cst.Constant cst ) { assert cst != null ; throwIfNotPrepared ( ) ; com.android.jack.dx.dex.file.IndexedItem result = methodIds.get ( cst ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( "not found" ) ; } return result ; }
public long toEpochMilli ( ) { long millis = java.lang.Math.multiplyExact ( seconds , 1000 ) ; return millis + ( ( nanos ) / 1000000 ) ; }
public void visitFieldInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { if ( ( ( ( interfaceFieldToAccessInCompanionMethodToTriggerInterfaceClinit ) == null ) && ( opcode == ( org.objectweb.asm.Opcodes.PUTSTATIC ) ) ) && ( owner.equals ( internalName ) ) ) { interfaceFieldToAccessInCompanionMethodToTriggerInterfaceClinit = com.google.devtools.build.android.desugar.FieldInfo.create ( owner , name , desc ) ; } super . visitFieldInsn ( opcode , owner , name , desc ) ; }
public void onConnectionServiceFocusReleased ( android.telecom.Logging.Session.Info sessionInfo ) throws android.os.RemoteException { }
public void testStageInstallWithErrorCode_withBadlyFormedDistroVersion ( ) throws java.lang.Exception { com.android.timezone.distro.DistroVersion validDistroVersion = new com.android.timezone.distro.DistroVersion ( 1 , 1 , libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; byte [ ] invalidFormatVersionBytes = validDistroVersion.toBytes ( ) ; invalidFormatVersionBytes [ 0 ] = 'A' ; com.android.timezone.distro.TimeZoneDistro distro = createTimeZoneDistroWithVersionBytes ( invalidFormatVersionBytes ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( distro ) ) ; assertNoDistroOperationStaged ( ) ; assertNoInstalledDistro ( ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method.isNative ( ) ) || ( method.isAbstract ( ) ) ) || ( ! ( filter.accept ( this . getClass ( ) , method ) ) ) ) { return ; } checker.accept ( method ) ; }
public void eventDataPathRequest ( android.hardware.wifi.V1_0.NanDataPathRequestInd event ) { if ( com.android.server.wifi.aware.WifiAwareNativeCallback.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNativeCallback.TAG , ( ( ( ( ( "eventDataPathRequest: discoverySessionId=" + ( event.discoverySessionId ) ) + ", peerDiscMacAddr=" ) + ( java.lang.String.valueOf ( libcore.util.HexEncoding.encode ( event.peerDiscMacAddr ) ) ) ) + ", ndpInstanceId=" ) + ( event.ndpInstanceId ) ) ) ; } mWifiAwareStateManager.onDataPathRequestNotification ( event.discoverySessionId , event.peerDiscMacAddr , event.ndpInstanceId ) ; }
public android.hardware.usb.UsbDeviceConnection openDevice ( android.hardware.usb.UsbDevice device ) { try { java.lang.String deviceName = device.getDeviceName ( ) ; android.os.ParcelFileDescriptor pfd = mService.openDevice ( deviceName ) ; if ( pfd != null ) { android.hardware.usb.UsbDeviceConnection connection = new android.hardware.usb.UsbDeviceConnection ( device ) ; boolean result = connection.open ( deviceName , pfd , mContext ) ; pfd.close ( ) ; if ( result ) { return connection ; } } } catch ( java.lang.Exception e ) { android.util.Log.e ( android.hardware.usb.UsbManager.TAG , "exception in UsbManager.openDevice" , e ) ; } return null ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { if ( ( mUiRootNode ) != null ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode node = ( ( mUiRootNode.getUiParent ( ) ) != null ) ? mUiRootNode.getUiParent ( ) : mUiRootNode ; if ( node != null ) { node.removeUpdateListener ( mUiRefreshListener ) ; } mUiRootNode.removeUpdateListener ( mUiEnableListener ) ; } com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . removeTargetListener ( targetListener ) ; if ( ( mClipboard ) != null ) { mClipboard.dispose ( ) ; mClipboard = null ; } }
protected void finalize ( ) throws java.io.IOException { if ( ( fd ) != null ) { if ( ( ( fd ) == ( java.io.FileDescriptor.out ) ) || ( ( fd ) == ( java.io.FileDescriptor.err ) ) ) { flush ( ) ; } else { close ( ) ; } } }
public boolean canRunOn ( com.android.sdklib.IAndroidTarget target ) { if ( target == ( this ) ) { return true ; } if ( mLibraries.isEmpty ( ) ) { return mBasePlatform.canRunOn ( target ) ; } else { if ( ( ! ( mVendor.equals ( target.getVendor ( ) ) ) ) || ( ! ( mName.equals ( target.getName ( ) ) ) ) ) { return false ; } return mBasePlatform.canRunOn ( target ) ; } }
public void mute ( boolean shouldMute ) { android.telecom.Log.v ( this , "mute, shouldMute: %b" , shouldMute ) ; if ( mCallsManager.hasEmergencyCall ( ) ) { shouldMute = false ; android.telecom.Log.v ( this , "ignoring mute for emergency call" ) ; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo ( ( shouldMute ? CallAudioRouteStateMachine.MUTE_ON : CallAudioRouteStateMachine.MUTE_OFF ) ) ; }
private static int [ ] addToIntArray ( int [ ] destination , int offset , int value , int increments ) { int newlength = destination.length ; if ( ( offset + 1 ) == newlength ) { newlength += increments ; int [ ] temp = new int [ newlength ] ; java.lang.System.arraycopy ( destination , 0 , temp , 0 , offset ) ; destination = temp ; } destination [ offset ] = value ; return destination ; }
private void printArrayMap ( ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printArrayMap" , "hashMapSize: %d, currentlyExpandedViewHolderId:%d" , newVoicemailViewHolderArrayMap.size ( ) , currentlyExpandedViewHolderId ) ; if ( ! ( newVoicemailViewHolderArrayMap.isEmpty ( ) ) ) { java.lang.String ids = "" ; for ( long id : newVoicemailViewHolderArrayMap.keySet ( ) ) { ids = ( ids + id ) + " " ; } com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printArrayMap" , ( "ids are " + ids ) ) ; } }
private boolean acquireWakeLock ( java.lang.String lockName ) { synchronized ( this ) { if ( ( mWakeLock ) == null ) { mWakeLockName = lockName ; mWakeLock = mPowerManager.newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , lockName ) ; } if ( ! ( mWakeLock.isHeld ( ) ) ) mWakeLock.acquire ( ) ; } return true ; }
public com.google.common.collect.ImmutableMap < K , V > getAllPresent ( java.lang.Iterable < ? > keys ) { java.util.Map < K , V > result = com.google.common.collect.Maps.newLinkedHashMap ( ) ; for ( java.lang.Object key : keys ) { if ( ! ( result.containsKey ( key ) ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) K castKey = ( ( K ) ( key ) ) ; V value = getIfPresent ( key ) ; if ( value != null ) { result.put ( castKey , value ) ; } } } return com.google.common.collect.ImmutableMap.copyOf ( result ) ; }
private void closeSocket ( ) { try { if ( ( mSocket ) != null ) { mSocket.close ( ) ; mSocket = null ; } } catch ( java.io.IOException e ) { android.util.Log.e ( com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG , "Error when closing socket" , e ) ; mSocket = null ; } }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { java.util.List < java.lang.reflect.Field > optionFields = com.google.common.collect.Lists.newArrayList ( com.google.devtools.common.options.OptionsParser.getAllAnnotatedFields ( optionsClass ) ) ; java.util.Collections.sort ( optionFields , com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage.getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , null ) ; } }
private void selectConfiguration ( com.android.ide.common.resources.configuration.FolderConfiguration fileConfig ) { }
private static void startTimer ( ) { synchronized ( com.android.jack.server.Server.lockTimer ) { if ( ( com.android.jack.server.Server.timer ) != null ) { com.android.jack.server.Server.cancelTimer ( ) ; } com.android.jack.server.Server.logger.log ( java.util.logging.Level.INFO , "Start timer" ) ; com.android.jack.server.Server.timer = new java.util.Timer ( "jack-server-timeout" ) ; assert ( com.android.jack.server.Server.timer ) != null ; com.android.jack.server.Server.timer.schedule ( new java.util.TimerTask ( ) { @ java.lang.Override public void run ( ) { com.android.jack.server.Server.shutdownFifo ( ) ; com.android.jack.server.Server.cancelTimer ( ) ; } } , com.android.jack.server.Server.timeout ) ; } }
public void testNoNumberSupplied ( ) { android.net.Uri handle = android.net.Uri.parse ( "tel:" ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_CALL , handle ) ; int result = processIntent ( intent , true ) ; org.junit.Assert.assertEquals ( DisconnectCause.NO_PHONE_NUMBER_SUPPLIED , result ) ; verifyNoBroadcastSent ( ) ; verifyNoCallPlaced ( ) ; }
public void setVisible ( boolean visible ) { super . setVisible ( visible ) ; validatePage ( ) ; }
public void deletePlaylist ( java.lang.String playlistname ) throws java.lang.Exception { android.app.Instrumentation inst = getInstrumentation ( ) ; inst.sendStringSync ( playlistname ) ; java.lang.Thread.sleep ( MusicPlayerNames.WAIT_SHORT_TIME ) ; inst.sendKeyDownUpSync ( KeyEvent.KEYCODE_DPAD_DOWN ) ; inst.invokeContextMenuAction ( getActivity ( ) , ( 0 + 1 ) , 0 ) ; java.lang.Thread.sleep ( MusicPlayerNames.WAIT_SHORT_TIME ) ; clearSearchString ( playlistname.length ( ) ) ; }
public static void main ( java.lang.String [ ] args ) { junit.textui.TestRunner tr = new junit.textui.TestRunner ( ) ; junit.framework.TestResult result = tr.doRun ( com.android.monkeyrunner.AllTests.suite ( com.android.monkeyrunner.JythonUtilsTest.class , com.android.monkeyrunner.MonkeyRunnerOptionsTest.class ) ) ; if ( result.wasSuccessful ( ) ) { java.lang.System.exit ( 0 ) ; } else { java.lang.System.exit ( 1 ) ; } }
public void onItemClick ( android.widget.AdapterView < ? > parent , android.view.View view , int position , long id ) { if ( com.android.bluetooth.opp.BluetoothOppTransferHistory.V ) { android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppTransferHistory.TAG , ( "onItemClick: ContextMenu = " + ( mContextMenu ) ) ) ; } if ( ! ( mContextMenu ) ) { mTransferCursor.moveToPosition ( position ) ; openCompleteTransfer ( ) ; updateNotificationWhenBtDisabled ( ) ; } mContextMenu = false ; }
public void test_SSL_check_private_key_no_key_no_cert ( ) throws java.lang.Exception { int c = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_CTX_new ( ) ; int s = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_new ( c ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_free ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_CTX_free ( c ) ; }
public int [ ] blend ( int [ ] src , int [ ] dst , int [ ] result ) { for ( int i = 0 ; i < 3 ; i ++ ) { result [ i ] = ( ( src [ i ] ) + ( dst [ i ] ) ) > > 1 ; } result [ 3 ] = java.lang.Math.min ( 255 , ( ( src [ 3 ] ) + ( dst [ 3 ] ) ) ) ; return result ; }
protected void setViewerInput ( ) { java.util.List < com.android.sdkuilib.internal.repository.core.PkgCategory > cats = mDiffLogic.getCategories ( ) ; if ( ( mITreeViewer.getInput ( ) ) != cats ) { mITreeViewer.setInput ( cats ) ; } else { mITreeViewer.refresh ( ) ; } }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > executeAndReturnMultiModel ( boolean emulateStudio_1_0 , java.lang.String ... tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { executeBuild ( java.util.Collections.< java.lang.String > emptyList ( ) , connection , tasks , com.android.build.gradle.integration.common.fixture.GradleTestProject.ExpectedBuildResult.SUCCESS ) ; return buildModel ( connection , new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , emulateStudio_1_0 , null , null ) ; } finally { connection.close ( ) ; } }
public void binderDied ( ) { if ( com.android.server.am.ActivityManagerService.localLOGV ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( "Death received in " + ( this ) ) + " for thread " ) + ( mAppThread.asBinder ( ) ) ) ) ; synchronized ( this ) { appDiedLocked ( mApp , mPid , mAppThread , true ) ; } }
public com.android.ims.ImsUtInterface getSupplementaryServiceConfiguration ( ) throws com.android.ims.ImsException { if ( ( ( mUt ) == null ) || ( ! ( mImsServiceProxy.isBinderAlive ( ) ) ) ) { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsUt iUt = mImsServiceProxy.getUtInterface ( ) ; if ( iUt == null ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , ImsReasonInfo.CODE_UT_NOT_SUPPORTED ) ; } mUt = new com.android.ims.ImsUt ( iUt ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mUt ; }
private void start ( ) { android.os.HandlerThread thread = new android.os.HandlerThread ( "BluetoothAvrcpHandler" ) ; thread.start ( ) ; android.os.Looper looper = thread.getLooper ( ) ; mHandler = new com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler ( looper ) ; mSessionChangeListener = new com.android.bluetooth.avrcp.Avrcp.MediaSessionChangeListener ( ) ; mMediaControllerCb = new com.android.bluetooth.avrcp.Avrcp.MediaControllerListener ( ) ; mMediaSessionManager.addOnActiveSessionsChangedListener ( mSessionChangeListener , null , mHandler ) ; updateCurrentMediaControllers ( mMediaSessionManager.getActiveSessions ( null ) ) ; }
private boolean readNotifyBufferMessage ( ) { try { org.chromium.mojo.system.ResultAnd < org.chromium.mojo.system.MessagePipeHandle.ReadMessageResult > readMessageResult = mReadHandle.readMessage ( org.chromium.mojo.bindings.ExecutorFactory.NOTIFY_BUFFER , 0 , MessagePipeHandle.ReadFlags.NONE ) ; if ( ( readMessageResult.getMojoResult ( ) ) == ( org.chromium.mojo.system.MojoResult.OK ) ) { return true ; } } catch ( org.chromium.mojo.system.MojoException e ) { } return false ; }
public void testEvaluateNetworks_untrustedNetworksAllowed_onlyDeletedEphemeral ( ) { when ( mWifiConfigManager.wasEphemeralNetworkDeleted ( com.android.server.wifi.util.ScanResultUtil.createQuotedSSID ( mUntrustedScanDetail.getScanResult ( ) . SSID ) ) ) . thenReturn ( true ) ; android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks ( com.google.android.collect.Lists.newArrayList ( mUntrustedScanDetail ) , null , null , false , true , null ) ; junit.framework.Assert.assertNull ( result ) ; verifyZeroInteractions ( mNetworkScoreManager ) ; }
private static void splitAndAdd ( java.lang.String searchPath , boolean directoriesOnly , java.util.List < java.io.File > resultList ) { if ( searchPath == null ) { return ; } for ( java.lang.String path : searchPath.split ( ":" ) ) { try { android.system.StructStat sb = Libcore.os.stat ( path ) ; if ( ( ! directoriesOnly ) || ( S_ISDIR ( sb.st_mode ) ) ) { resultList.add ( new java.io.File ( path ) ) ; } } catch ( android.system.ErrnoException ignored ) { } } }
public void testAspectRatio ( ) throws java.lang.Exception { double aspectRatio = getRealAspectRatio ( getActivity ( ) ) ; if ( ( aspectRatio >= 1.333 ) && ( aspectRatio <= 1.86 ) ) { return ; } if ( getActivity ( ) . getPackageManager ( ) . hasSystemFeature ( PackageManager.FEATURE_WATCH ) ) { if ( ( aspectRatio >= 1.0 ) && ( aspectRatio <= 1.86 ) ) { return ; } } fail ( ( "Aspect ratio was not between 1.333 and 1.86: " + aspectRatio ) ) ; }
public synchronized void write ( int b ) throws java.io.IOException { buffer.put ( ( ( byte ) ( b ) ) ) ; if ( b == '\n' ) { synchronized ( out ) { try { com.android.jack.server.type.CommandOutPrintStream.CommandOutOutputStream.writeBuffer ( prefix , out ) ; buffer.flip ( ) ; com.android.jack.server.type.CommandOutPrintStream.CommandOutOutputStream.writeBuffer ( buffer , out ) ; } finally { buffer.clear ( ) ; } } } if ( ( buffer.remaining ( ) ) == 1 ) { write ( '\n' ) ; } }
public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < ? > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , java.lang.String [ ] args ) { if ( supports ( klass ) ) { return new vogar.target.junit.JUnitTargetRunner ( monitor , skipPastReference , testEnvironment , timeoutSeconds , klass , qualification , args ) ; } else { return null ; } }
public com.android.server.wifi.SoftApManager makeSoftApManager ( com.android.server.wifi.WifiNative wifiNative , android.os.INetworkManagementService nmService , android.net.ConnectivityManager cm , java.lang.String countryCode , java.util.ArrayList < java.lang.Integer > allowed2GChannels , com.android.server.wifi.SoftApManager.Listener listener , android.net.wifi.IApInterface apInterface ) { return new com.android.server.wifi.SoftApManager ( mWifiServiceHandlerThread.getLooper ( ) , wifiNative , countryCode , allowed2GChannels , listener , apInterface , nmService ) ; }
public void testNotifySecondaryForeign ( ) { java.util.List < java.lang.String > barSecondaries = mBarUser0.getSecondaryDexPaths ( ) ; notifyDexLoad ( mFooUser0 , barSecondaries , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mBarUser0 ) ; org.junit.Assert.assertFalse ( pui.isUsedByOtherApps ( ) ) ; org.junit.Assert.assertEquals ( barSecondaries.size ( ) , pui.getDexUseInfoMap ( ) . size ( ) ) ; assertSecondaryUse ( mFooUser0 , pui , barSecondaries , true , mUser0 ) ; }
public static com.android.tools.lint.detector.api.Issue create ( @ com.android.annotations.NonNull java.lang.String id , @ com.android.annotations.NonNull java.lang.String briefDescription , @ com.android.annotations.NonNull java.lang.String explanation , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Category category , int priority , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Implementation implementation ) { return new com.android.tools.lint.detector.api.Issue ( id , briefDescription , explanation , category , priority , severity , implementation ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_read ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) ; fail ( ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
private void addRemoteSysImg ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay tag , java.lang.String abi ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newSysImg ( version , tag , abi , revision ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , 0 ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public com.android.jack.ir.ast.JClassLiteral exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException { assert ( sourceInfo ) != null ; assert ( refType ) != null ; return new com.android.jack.ir.ast.JClassLiteral ( sourceInfo , exportSession.getLookup ( ) . getType ( refType ) ) ; }
public static java.net.URI uri ( java.lang.String uriString ) { try { return new java.net.URI ( uriString ) ; } catch ( java.net.URISyntaxException e ) { throw new java.lang.IllegalStateException ( ( "Known good uri has syntax error: " + uriString ) , e ) ; } }
private void initPrefs ( android.content.Context context ) { final android.content.ContentResolver contentResolver = context.getContentResolver ( ) ; mResolver = new java.lang.ref.WeakReference < android.content.ContentResolver > ( contentResolver ) ; if ( ( mObserver ) == null ) { mObserver = new android.text.method.TextKeyListener.SettingsObserver ( ) ; contentResolver.registerContentObserver ( Settings.System.CONTENT_URI , true , mObserver ) ; } updatePrefs ( contentResolver ) ; mPrefsInited = true ; }
private java.io.File getWrittenResources ( ) throws com.android.ide.common.res2.MergingException , java.io.IOException { com.android.ide.common.res2.ResourceMerger resourceMerger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( false ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; com.android.ide.common.res2.MergedResourceWriter writer = new com.android.ide.common.res2.MergedResourceWriter ( folder , mPngCruncher , false , false ) ; resourceMerger.mergeData ( writer , false ) ; return folder ; }
public final java.lang.Object getValue ( @ javax.annotation.Nonnegative int columnIdx ) { return com.google.common.collect.Iterators.get ( iterator ( ) , columnIdx ) ; }
public com.android.jack.ir.ast.JAnnotation exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( retentionPolicy ) != null ; assert ( sourceInfo ) != null ; assert ( annotationType ) != null ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JAnnotationType type = exportSession.getLookup ( ) . getAnnotationType ( annotationType ) ; com.android.jack.ir.ast.JAnnotation jAnnotation = new com.android.jack.ir.ast.JAnnotation ( jSourceInfo , retentionPolicy , type ) ; for ( com.android.jack.jayce.v0002.nodes.NNameValuePair valuePair : elements ) { jAnnotation.put ( valuePair.exportAsJast ( exportSession , type ) ) ; } return jAnnotation ; }
protected void cleanup ( ) { if ( mNativeAvailable ) { cleanupNative ( ) ; mNativeAvailable = false ; } if ( ( mPanDevices ) != null ) { java.util.List < android.bluetooth.BluetoothDevice > devList = getConnectedDevices ( ) ; for ( android.bluetooth.BluetoothDevice dev : devList ) { handlePanDeviceStateChange ( dev , mPanIfName , BluetoothProfile.STATE_DISCONNECTED , BluetoothPan.LOCAL_PANU_ROLE , BluetoothPan.REMOTE_NAP_ROLE ) ; } mPanDevices.clear ( ) ; } }
public void testConstructor_SkipPastJUnitRunner ( ) throws java.lang.Exception { java.lang.String failingTestName = ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) + "#testMethodName" ; vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( "--skipPast" , failingTestName ) ; java.lang.String skipPast = runner.skipPastReference.get ( ) ; org.junit.Assert.assertEquals ( failingTestName , skipPast ) ; runner.run ( ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) ) + "#testOtherName\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , ios.contents ( Stream.OUT ) ) ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.conscrypt.NativeCrypto.SSL_get0_alpn_selected ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
private void addBoldText ( org.eclipse.swt.custom.StyledText styledText , java.lang.String text ) { java.lang.String s = styledText.getText ( ) ; int start = ( s == null ) ? 0 : s.length ( ) ; styledText.append ( text ) ; org.eclipse.swt.custom.StyleRange sr = new org.eclipse.swt.custom.StyleRange ( ) ; sr.start = start ; sr.length = text.length ( ) ; sr.fontStyle = org.eclipse.swt.SWT.BOLD ; styledText.setStyleRange ( sr ) ; }
public void testStageInstallWithErrorCode_badTzLookupFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro stagedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( stagedDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; com.android.timezone.distro.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , 1 ) . setTzLookupXml ( "<foo />" ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_VALIDATION_ERROR , installer.stageInstallWithErrorCode ( incompleteDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; assertNoInstalledDistro ( ) ; }
public void test_socket_accept_Nonblocking_Bound ( ) throws java.io.IOException { serverChannel.configureBlocking ( false ) ; serverChannel.socket ( ) . bind ( null ) ; java.net.ServerSocket gotSocket = serverChannel.socket ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw an IllegalBlockingModeException" ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) { } serverChannel.close ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw a ClosedChannelException" ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
private void cancelUserTimeoutAlarm ( ) { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.map.BluetoothMapService.TAG , "cancelUserTimeOutAlarm()" ) ; android.content.Intent timeoutIntent = new android.content.Intent ( com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION ) ; android.app.PendingIntent pIntent = android.app.PendingIntent.getBroadcast ( this , 0 , timeoutIntent , 0 ) ; pIntent.cancel ( ) ; android.app.AlarmManager alarmManager = ( ( android.app.AlarmManager ) ( this . getSystemService ( Context.ALARM_SERVICE ) ) ) ; alarmManager.cancel ( pIntent ) ; mRemoveTimeoutMsg = false ; }
private void addTestCase ( com.android.cts.verifier.ArrayTestListAdapter adapter , com.android.cts.verifier.p2p.testcase.TestCase testcase ) { android.content.Intent intent = new android.content.Intent ( this , getRequesterActivityClass ( ) ) ; intent.putExtra ( TestCase.EXTRA_TEST_NAME , testcase.getTestId ( ) ) ; adapter.add ( com.android.cts.verifier.TestListAdapter.TestListItem.newTest ( testcase.getTestName ( ) , testcase.getTestId ( ) , intent , null ) ) ; }
public java.security.PrivateKey getPrivateKeyById ( java.lang.String id ) throws java.security.InvalidKeyException { if ( id == null ) { throw new java.lang.NullPointerException ( "id == null" ) ; } final long keyRef = org.apache.harmony.xnet.provider.jsse.NativeCrypto.ENGINE_load_private_key ( ctx , id ) ; if ( keyRef == 0 ) { return null ; } org.apache.harmony.xnet.provider.jsse.OpenSSLKey pkey = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey ( keyRef , this , id ) ; try { return pkey.getPrivateKey ( ) ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new java.security.InvalidKeyException ( e ) ; } }
public static int MultiplePhis ( ) { int x = 0 ; int y = 1 ; while ( ( y ++ ) < 10 ) { if ( y > 1 ) { x = 13 ; continue ; } else { x = 42 ; continue ; } } return x ; }
public android.database.Cursor query ( android.net.Uri uri , java.lang.String [ ] projection , java.lang.String selection , java.lang.String [ ] selectionArgs , java.lang.String sortOrder ) { if ( ( mSubscriptionArray.size ( ) ) > 0 ) { return convertFromContentToCursor ( mSubscriptionArray.get ( 0 ) , projection ) ; } return null ; }
public static void computeFabs ( android.renderscript.cts.TestFabs.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 0 , 0 , false ) ; android.renderscript.cts.Target.Floaty in = t.new32 ( args.inV ) ; args.out = t.new32 ( java.lang.Math.abs ( args.inV ) , java.lang.Math.abs ( in.min32 ( ) ) , java.lang.Math.abs ( in.max32 ( ) ) ) ; }
private void handlePassthroughCmdRequestFromNative ( byte [ ] address , int id , int keyState ) { android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PASS_THROUGH , id , keyState ) ; mHandler.sendMessage ( msg ) ; }
public void test_SSLEngine_beginHandshake ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create ( ) ; try { c.clientContext.createSSLEngine ( ) . beginHandshake ( ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } c.close ( ) ; libcore.javax.net.ssl.TestSSLEnginePair p = libcore.javax.net.ssl.TestSSLEnginePair.create ( null ) ; assertConnected ( p ) ; p.close ( ) ; }
public static void pullFromHost ( java.io.File src , java.io.File dest ) { try { com.android.tradefed.util.FileUtil.recursiveCopy ( src , dest ) ; com.android.tradefed.util.FileUtil.recursiveDelete ( src ) ; } catch ( java.io.IOException e ) { com.android.tradefed.log.LogUtil.CLog.e ( "Caught exception during pull." ) ; com.android.tradefed.log.LogUtil.CLog.e ( e ) ; } }
public static void setStatusBarColor ( android.view.Window window , int statusBarColor ) { if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { window.addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window.setStatusBarColor ( statusBarColor ) ; } }
public void resetSimNetworks ( ) { if ( mVerboseLoggingEnabled ) localLog ( "resetSimNetworks" ) ; for ( android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks ( ) ) { if ( com.android.server.wifi.util.TelephonyUtil.isSimConfig ( config ) ) { java.lang.String currentIdentity = com.android.server.wifi.util.TelephonyUtil.getSimIdentity ( mTelephonyManager , config ) ; config.enterpriseConfig.setIdentity ( currentIdentity ) ; config.enterpriseConfig.setAnonymousIdentity ( "" ) ; } } }
public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable ( ) { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build ( ) ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback ( ) ; final int timeoutMs = 150 ; mCm.requestNetwork ( nr , networkCallback , timeoutMs ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( android.net.NetworkCapabilities.TRANSPORT_WIFI ) ; mWiFiNetworkAgent.connect ( false ) ; networkCallback.expectAvailableCallbacks ( mWiFiNetworkAgent , false , false , timeoutMs ) ; networkCallback.assertNoCallback ( ) ; }
public void sendMessage ( int peerId , int messageId , @ android.annotation.Nullable byte [ ] message , int retryCount ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "sendMessage: called on terminated session" ) ; return ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "sendMessage: called post GC on WifiNanManager" ) ; return ; } mgr.sendMessage ( mClientId , mSessionId , peerId , message , messageId , retryCount ) ; } }
public void testEndCallWithRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.RINGING ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( null ) ) ; org.mockito.Mockito.verify ( call ) . reject ( false , null ) ; }
public static long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , android.system.Int64Ref offset , long byteCount ) throws android.system.ErrnoException { return Libcore.os.sendfile ( outFd , inFd , offset , byteCount ) ; }
public boolean processMessage ( android.os.Message message ) { switch ( message.what ) { case com.android.bluetooth.pbap.PbapStateMachine.REQUEST_PERMISSION : mService.checkOrGetPhonebookPermission ( this ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.AUTHORIZED : transitionTo ( mConnected ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.REJECTED : rejectConnection ( ) ; transitionTo ( mFinished ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.DISCONNECT : mServiceHandler.removeMessages ( BluetoothPbapService.USER_TIMEOUT , this ) ; mServiceHandler.obtainMessage ( BluetoothPbapService.USER_TIMEOUT , this ) . sendToTarget ( ) ; transitionTo ( mFinished ) ; break ; } return HANDLED ; }
private void uninstall ( @ com.android.annotations.NonNull java.io.File apk , @ com.android.annotations.NonNull java.lang.String packageName , @ com.android.annotations.NonNull java.lang.String deviceName ) throws com.android.builder.testing.api.DeviceException { if ( packageName != null ) { logger.info ( "DeviceConnector '%s': uninstalling %s" , deviceName , packageName ) ; device.uninstallPackage ( packageName , timeout , logger ) ; } else { logger.info ( "DeviceConnector '%s': unable to uninstall %s: unable to get package name" , deviceName , apk ) ; } }
private int writeNewClass ( java.lang.Class < ? > object , boolean unshared ) throws java.io.IOException { output.writeByte ( java.io.ObjectStreamConstants.TC_CLASS ) ; java.io.ObjectStreamClass clDesc = java.io.ObjectStreamClass.lookupStreamClass ( object ) ; if ( clDesc.isEnum ( ) ) { writeEnumDesc ( clDesc , unshared ) ; } else { writeClassDesc ( clDesc , unshared ) ; } int handle = nextHandle ( ) ; if ( ! unshared ) { objectsWritten.put ( object , handle ) ; } return handle ; }
public com.android.tools.perflib.heap.Heap getHeap ( int id ) { for ( int i = 0 ; i < ( mHeaps.size ( ) ) ; i ++ ) { if ( ( mHeaps.get ( i ) . getId ( ) ) == id ) { return mHeaps.get ( i ) ; } } return null ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.PostfixExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JUnaryOperator op ; switch ( x.operator ) { case org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS : op = com.android.jack.ir.ast.JUnaryOperator.DEC ; break ; case org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS : op = com.android.jack.ir.ast.JUnaryOperator.INC ; break ; default : throw new java.lang.AssertionError ( "Unexpected postfix operator" ) ; } com.android.jack.ir.ast.JExpression lhs = pop ( x.lhs ) ; push ( com.android.jack.ir.ast.JPostfixOperation.create ( info , op , lhs ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public TagInfo [ ] deprecatedTags ( ) { return comment ( ) . deprecatedTags ( ) ; }
public boolean fetchRemoteUuids ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "fetchRemoteUuids() - Not allowed for non-active user" ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return false ; } return service.fetchRemoteUuids ( device ) ; }
public void testConcurrentServerSocketCloseReliablyThrows ( ) { int numIterations = 100 ; for ( int i = 0 ; i < numIterations ; i ++ ) { checkConnectIterationAndCloseSocket ( ( ( ( "Iteration " + ( i + 1 ) ) + " of " ) + numIterations ) , 50 ) ; } }
public java.io.InputStream openRead ( ) throws com.android.sched.util.file.WrongPermissionException { try { return new com.android.sched.util.file.InputStreamFile ( file.getPath ( ) ) . getInputStream ( ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public byte [ ] iccExchangeSimIO ( int subId , int fileID , int command , int p1 , int p2 , int p3 , java.lang.String filePath ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccExchangeSimIO ( subId , fileID , command , p1 , p2 , p3 , filePath ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
protected java.lang.Integer compute ( ) { int n = number ; if ( n <= 1 ) return n ; jsr166.ForkJoinPoolTest.FibTask f1 = new jsr166.ForkJoinPoolTest.FibTask ( ( n - 1 ) ) ; f1.fork ( ) ; return ( new jsr166.ForkJoinPoolTest.FibTask ( ( n - 2 ) ) . compute ( ) ) + ( f1.join ( ) ) ; }
public void fillSelectionAndBorder ( java.awt.Graphics2D g , com.intellij.ui.tabs.impl.JBTabsImpl.ShapeInfo selectedShape , java.awt.Color tabColor , int x , int y , int height ) { g.setColor ( ( tabColor != null ? tabColor : getDefaultTabColor ( ) ) ) ; g.fill ( selectedShape.fillPath.getShape ( ) ) ; }
public void startTdls ( java.lang.String macAddr , boolean enable ) { if ( enable ) { mSupplicantStaIfaceHal.initiateTdlsDiscover ( macAddr ) ; mSupplicantStaIfaceHal.initiateTdlsSetup ( macAddr ) ; } else { mSupplicantStaIfaceHal.initiateTdlsTeardown ( macAddr ) ; } }
public boolean processMessage ( android.os.Message message ) { if ( super . processMessage ( message ) ) return true ; maybeLogMessage ( this , message.what ) ; switch ( message.what ) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , "CMD_TETHER_REQUESTED while in local hotspot mode." ) ; break ; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break ; default : return false ; } return true ; }
public void compareExtStructure ( ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( new com.android.jack.Options ( ) , null , null , com.android.jack.compile.androidtree.ext.ExtCompilationTest.SOURCELIST , false , true , 0.4F , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public void visitConstantInstruction ( proguard.optimize.info.Clazz clazz , proguard.optimize.info.Method method , proguard.classfile.attribute.CodeAttribute codeAttribute , int offset , proguard.optimize.info.ConstantInstruction constantInstruction ) { switch ( constantInstruction.opcode ) { case InstructionConstants.OP_GETSTATIC : case InstructionConstants.OP_PUTSTATIC : case InstructionConstants.OP_GETFIELD : case InstructionConstants.OP_PUTFIELD : case InstructionConstants.OP_INVOKEVIRTUAL : case InstructionConstants.OP_INVOKESPECIAL : case InstructionConstants.OP_INVOKESTATIC : case InstructionConstants.OP_INVOKEINTERFACE : case InstructionConstants.OP_INVOKEDYNAMIC : case InstructionConstants.OP_NEW : case InstructionConstants.OP_ANEWARRAY : case InstructionConstants.OP_CHECKCAST : case InstructionConstants.OP_INSTANCEOF : case InstructionConstants.OP_MULTIANEWARRAY : mayThrowExceptions = true ; } }
public void testMultiCharMinusSignAndPercentage ( ) { java.text.DecimalFormatSymbols dfs ; dfs = new java.text.DecimalFormatSymbols ( java.util.Locale.forLanguageTag ( "ar" ) ) ; assertEquals ( '٪' , dfs.getPercent ( ) ) ; assertEquals ( '-' , dfs.getMinusSign ( ) ) ; dfs = new java.text.DecimalFormatSymbols ( java.util.Locale.forLanguageTag ( "fa" ) ) ; assertEquals ( '٪' , dfs.getPercent ( ) ) ; assertEquals ( '−' , dfs.getMinusSign ( ) ) ; }
private com.android.jill.frontend.java.Variable getTempVarFromTopOfStackMinus1 ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame ) { com.android.jill.frontend.java.Variable topOfStackBeforeInst = getStackVariable ( frame , ( ( com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) - 1 ) ) ; java.lang.String tmpVarId = "-swap_tmp_" + ( typeToUntypedDesc ( topOfStackBeforeInst.getType ( ) ) ) ; com.android.jill.frontend.java.Variable tmpVariable = getVariable ( tmpVarId , tmpVarId , topOfStackBeforeInst.getType ( ) ) ; return tmpVariable ; }
static java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > populatedSet ( int n ) { java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > a = new java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > ( ) ; assertTrue ( a.isEmpty ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) a.add ( i ) ; assertEquals ( ( n == 0 ) , a.isEmpty ( ) ) ; assertEquals ( n , a.size ( ) ) ; return a ; }
private void preRenderingTargetChangeCleanUp ( com.android.sdklib.IAndroidTarget oldTarget ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = currentSdk.getTargetData ( oldTarget ) ; if ( data != null ) { com.android.ide.common.rendering.LayoutLibrary layoutLib = data.getLayoutLibrary ( ) ; layoutLib.clearCaches ( mEditedFile.getProject ( ) ) ; } } mProjectCallback = null ; }
public void testPullExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mCapabilities = android.telecom.Connection.CAPABILITY_CAN_PULL_CALL ; mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; org.junit.Assert.assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . pullExternalCall ( org.mockito.Matchers.eq ( ids.mConnectionId ) , org.mockito.Matchers.any ( ) ) ; }
public static void verifyGolden ( java.lang.Object test , java.lang.Object object , org.apache.harmony.testframework.serialization.SerializationTest.SerializableAssert comparator ) throws java.lang.Exception { assertNotNull ( "Null comparator" , comparator ) ; java.io.Serializable deserialized = org.apache.harmony.testframework.serialization.SerializationTest.getObject ( test , ".golden.ser" ) ; comparator.assertDeserialized ( ( ( java.io.Serializable ) ( object ) ) , deserialized ) ; }
public static final java.util.HashMap < java.lang.String , ? > readMapXml ( java.io.InputStream in ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser ( ) ; parser.setInput ( in , null ) ; return ( ( java.util.HashMap < java.lang.String , ? > ) ( com.android.internal.util.XmlUtils.readValueXml ( parser , new java.lang.String [ 1 ] ) ) ) ; }
private boolean sendDeviceListMonitoringRequest ( ) throws com.android.ddmlib.TimeoutException , java.io.IOException { byte [ ] request = com.android.ddmlib.AdbHelper.formAdbRequest ( "host:track-devices" ) ; try { com.android.ddmlib.AdbHelper.write ( mMainAdbConnection , request ) ; com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse ( mMainAdbConnection , false ) ; if ( ! ( resp.okay ) ) { com.android.ddmlib.Log.e ( "DeviceMonitor" , ( "adb refused request: " + ( resp.message ) ) ) ; } return resp.okay ; } catch ( java.io.IOException e ) { com.android.ddmlib.Log.e ( "DeviceMonitor" , "Sending Tracking request failed!" ) ; mMainAdbConnection.close ( ) ; throw e ; } }
static void setDouble ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , double value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { if ( v == null ) { m.invokeExact ( value ) ; } else { m.invokeExact ( v , value ) ; } } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertEquals ( expectFailure , exceptionThrown ) ; }
private void addItem ( @ com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem item ) { synchronized ( com.android.ide.common.res2.AbstractResourceRepository.ITEM_MAP_LOCK ) { com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > map = getMap ( item.getType ( ) ) ; if ( ! ( map.containsValue ( item ) ) ) { map.put ( item.getName ( ) , item ) ; } } }
public void testDensityOnlyWithCustomDeviceDensity ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 320 , 2 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 480 , 3 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 1 , "foo" ) ; assertEquals ( match , result ) ; }
public void testGetResourceAsStream1 ( ) throws java.io.IOException { java.lang.Class clazz = getClass ( ) ; java.io.InputStream stream = clazz.getResourceAsStream ( "HelloWorld.txt" ) ; assertNotNull ( stream ) ; byte [ ] buffer = new byte [ 20 ] ; int length = stream.read ( buffer ) ; java.lang.String s = new java.lang.String ( buffer , 0 , length ) ; assertEquals ( "Hello, World." , s ) ; stream.close ( ) ; }
public void test_parkFor_3 ( ) { java.util.concurrent.CyclicBarrier barrier = new java.util.concurrent.CyclicBarrier ( 1 ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker parker = new tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker ( barrier , false , 1000 ) ; java.lang.Thread parkerThread = new java.lang.Thread ( parker ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.UNSAFE.unpark ( parkerThread ) ; parkerThread.start ( ) ; parker.assertDurationIsInRange ( 0 ) ; }
private void cancelToastLocked ( int index ) { com.android.server.NotificationManagerService.ToastRecord record = mToastQueue.get ( index ) ; try { record.callback.hide ( ) ; } catch ( android.os.RemoteException e ) { android.util.Slog.w ( com.android.server.NotificationManagerService.TAG , ( ( ( "Object died trying to hide notification " + ( record.callback ) ) + " in package " ) + ( record.pkg ) ) ) ; } mToastQueue.remove ( index ) ; keepProcessAliveLocked ( record.pid ) ; if ( ( mToastQueue.size ( ) ) > 0 ) { showNextToastLocked ( ) ; } }
protected java.lang.String getCipherName ( int keySize , org.conscrypt.OpenSSLCipher.Mode mode ) { final java.lang.String baseCipherName ; if ( keySize == 16 ) { baseCipherName = "des-ede" ; } else { baseCipherName = "des-ede3" ; } return ( baseCipherName + "-" ) + ( mode.toString ( ) . toLowerCase ( java.util.Locale.US ) ) ; }
private static com.android.jack.ir.ast.JClass getClassOrReportFailure ( com.android.jack.lookup.JNodeLookup lookup , java.lang.String name , java.lang.String prop ) { try { return lookup.getClass ( name ) ; } catch ( java.lang.Throwable e ) { com.android.jack.Jack.getSession ( ) . getReporter ( ) . report ( Severity.FATAL , new com.android.jack.transformations.ast.BoostLockedRegionPriority.BadBoostLockedRegionPriorityConfigurationException ( prop , e ) ) ; com.android.jack.Jack.getSession ( ) . abortEventually ( ) ; return null ; } }
public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { new com.android.jack.ir.ast.cfg.BasicBlockLiveProcessor ( cfg , false ) { @ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JSimpleBasicBlock block ) { if ( ( ( block.getElementCount ( ) ) == 1 ) && ( ( block.getLastElement ( ) . getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) ) { block.delete ( ) ; } return false ; } } . process ( ) ; }
public static < T extends java.lang.Enum < T > > com.android.sched.util.config.id.EnumPropertyId < T > create ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.lang.String description , @ javax.annotation.Nonnull java.lang.Class < T > type , @ javax.annotation.Nonnull T [ ] values ) { return new com.android.sched.util.config.id.EnumPropertyId < T > ( name , description , new com.android.sched.util.codec.EnumCodec < T > ( type , values ) ) ; }
public int size ( ) { return axes.size ( ) ; }
public static android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings ( android.content.Context context , int subId ) { android.content.ComponentName componentName = com.android.phone.vvm.RemoteVvmTaskManager.getRemotePackage ( context , subId ) ; java.lang.String packageName ; if ( componentName == null ) { packageName = com.android.phone.VisualVoicemailSmsFilterConfig.DEFAULT_PACKAGE ; } else { packageName = componentName.getPackageName ( ) ; } return com.android.phone.VisualVoicemailSmsFilterConfig.getVisualVoicemailSmsFilterSettings ( context , packageName , subId ) ; }
public static java.lang.String getListViewFqcn ( java.lang.Class < ? > clz ) { java.lang.String fqcn = clz.getName ( ) ; if ( fqcn.endsWith ( com.android.ide.common.layout.LayoutConstants.LIST_VIEW ) ) { return fqcn ; } else if ( fqcn.startsWith ( com.android.ide.common.layout.LayoutConstants.ANDROID_PKG_PREFIX ) ) { return null ; } java.lang.Class < ? > superClass = clz.getSuperclass ( ) ; if ( superClass != null ) { return com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback.getListViewFqcn ( superClass ) ; } else { return null ; } }
public static void openAppList ( android.app.Instrumentation instrumentation ) throws android.support.test.uiautomator.UiObjectNotFoundException { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Settings" ) ; android.support.test.uiautomator.UiScrollable itemList = new android.support.test.uiautomator.UiScrollable ( new android.support.test.uiautomator.UiSelector ( ) . resourceIdMatches ( Res.SETTINGS_LIST_CONTAINER_RES ) ) ; itemList.setAsVerticalList ( ) ; android.support.test.uiautomator.UiObject item = itemList.getChildByText ( new android.support.test.uiautomator.UiSelector ( ) . className ( "android.widget.TextView" ) , "Apps" ) ; item.clickAndWaitForNewWindow ( ) ; }
private void performPoll ( int flags ) { if ( ( mTime.getCacheAge ( ) ) > ( mSettings.getTimeCacheMaxAge ( ) ) ) { mTime.forceRefresh ( ) ; } synchronized ( mStatsLock ) { mWakeLock.acquire ( ) ; try { performPollLocked ( flags ) ; } finally { mWakeLock.release ( ) ; } } }
public void testPublishTerminatedDone ( ) throws org.json.JSONException { final int publishId = 167 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "publish_id" , publishId ) ; args.putInt ( "reason" , WifiAwareNative.AWARE_STATUS_SUCCESS ) ; com.android.server.wifi.aware.WifiAwareHalMock.callPublishTerminated ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mAwareStateManager ) . onSessionTerminatedNotification ( publishId , WifiAwareNative.AWARE_STATUS_SUCCESS , true ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
private java.util.List < com.android.bluetooth.avrcp.MediaController > getMediaControllers ( ) { java.util.List < com.android.bluetooth.avrcp.MediaController > controllers = new java.util.ArrayList < com.android.bluetooth.avrcp.MediaController > ( ) ; synchronized ( mMediaPlayerInfoList ) { for ( com.android.bluetooth.avrcp.MediaPlayerInfo info : mMediaPlayerInfoList.values ( ) ) { if ( ( info.getMediaController ( ) ) != null ) { controllers.add ( info.getMediaController ( ) . getWrappedInstance ( ) ) ; } } } return controllers ; }
public void testIdletimerDirectoryExistsAndSane ( ) throws java.lang.Exception { java.io.File dir = new java.io.File ( "/sys/class/xt_idletimer" ) ; assertTrue ( dir.isDirectory ( ) ) ; assertFalse ( dir.canWrite ( ) ) ; assertTrue ( dir.canExecute ( ) ) ; android.permission.cts.FileSystemPermissionTest.assertFileOwnedBy ( dir , "root" ) ; android.permission.cts.FileSystemPermissionTest.assertFileOwnedByGroup ( dir , "root" ) ; }
public final android.content.IContentProvider acquireExistingProvider ( android.net.Uri uri ) { if ( ! ( android.content.ContentResolver.SCHEME_CONTENT.equals ( uri.getScheme ( ) ) ) ) { return null ; } final java.lang.String auth = uri.getAuthority ( ) ; if ( auth != null ) { return acquireExistingProvider ( mContext , auth ) ; } return null ; }
private static void removeUser ( java.util.prefs.Preferences prefs , java.lang.String user ) { java.lang.String allUsersString = prefs.get ( com.google.gct.login.GoogleLoginPrefs.USERS , "" ) ; java.util.List < java.lang.String > allUsers = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String scope : allUsersString.split ( com.google.gct.login.GoogleLoginPrefs.DELIMITER ) ) { allUsers.add ( scope ) ; } allUsers.remove ( user ) ; com.google.common.base.Joiner joiner = com.google.common.base.Joiner.on ( com.google.gct.login.GoogleLoginPrefs.DELIMITER ) ; prefs.put ( com.google.gct.login.GoogleLoginPrefs.USERS , joiner.join ( allUsers ) ) ; }
private void testOutputPKCS1Padding ( java.lang.String provider ) throws java.lang.Exception { testOutputPKCS1Padding ( provider , ( ( byte ) ( 1 ) ) , libcore.javax.crypto.CipherTest.getDecryptKey ( "RSA" ) , libcore.javax.crypto.CipherTest.getEncryptKey ( "RSA" ) ) ; testOutputPKCS1Padding ( provider , ( ( byte ) ( 2 ) ) , libcore.javax.crypto.CipherTest.getEncryptKey ( "RSA" ) , libcore.javax.crypto.CipherTest.getDecryptKey ( "RSA" ) ) ; }
private static byte [ ] readFileAsByteArray ( java.io.File file ) throws java.io.IOException { byte [ ] buffer = new byte [ 8192 ] ; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try ( java.io.FileInputStream fis = new java.io.FileInputStream ( file ) ) { int count ; while ( ( count = fis.read ( buffer ) ) != ( - 1 ) ) { baos.write ( buffer , 0 , count ) ; } } return baos.toByteArray ( ) ; }
public void onRttModifyResponseReceived ( com.android.ims.ImsCall imsCall , int status ) { com.android.internal.telephony.imsphone.ImsPhoneConnection conn = findConnection ( imsCall ) ; if ( conn != null ) { conn.onRttModifyResponseReceived ( status ) ; } }
public void test_getInstanceLjava_lang_StringLjava_security_Provider01 ( ) throws java.lang.Exception { for ( java.lang.String validValue : org.apache.harmony.tests.javax.net.ssl.TrustManagerFactory1Test.getValidValues ( ) ) { try { javax.net.ssl.TrustManagerFactory.getInstance ( validValue , ( ( java.security.Provider ) ( null ) ) ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } } }
static int getKeyTypeForAlgorithm ( java.lang.String keyType ) throws java.lang.IllegalArgumentException { if ( "RSA" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_RSA ; } else if ( "EC" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_EC ; } else { throw new java.lang.IllegalArgumentException ( ( "Unsupported key type: " + keyType ) ) ; } }
public static com.android.server.WindowManagerService main ( android.content.Context context , com.android.server.PowerManagerService pm , boolean haveInputMethods ) { com.android.server.WindowManagerService.WMThread thr = new com.android.server.WindowManagerService.WMThread ( context , pm , haveInputMethods ) ; thr.start ( ) ; synchronized ( thr ) { while ( ( thr.mService ) == null ) { try { thr.wait ( ) ; } catch ( java.lang.InterruptedException e ) { } } return thr.mService ; } }
private static void waitToDie ( java.lang.Thread thread ) { assertFalse ( java.lang.Thread.currentThread ( ) . isInterrupted ( ) ) ; try { thread.join ( 5000 ) ; } catch ( java.lang.InterruptedException ignored ) { } if ( thread.isAlive ( ) ) { fail ( ( ( "Thread \"" + ( thread.getName ( ) ) ) + "\" did not exit." ) ) ; } }
private void ensureTagsAtIndex ( @ javax.annotation.Nonnegative int atIdx ) { assert atIdx >= 0 ; assert atIdx < ( plan.size ( ) ) ; if ( atIdx > ( currentTagValidityIdx ) ) { for ( int idx = ( currentTagValidityIdx ) + 1 ; idx <= atIdx ; idx ++ ) { ( ( com.android.sched.scheduler.PlanConstructor < ? > . DecoratedRunner ) ( plan.get ( idx ) ) ) . updateBeforeTags ( plan.get ( ( idx - 1 ) ) . getAfterTags ( ) ) ; } currentTagValidityIdx = atIdx ; } }
public static org.conscrypt.OpenSSLX509Certificate fromX509PemInputStream ( java.io.InputStream is ) throws org.conscrypt.OpenSSLX509CertificateFactory.ParsingException { @ java.lang.SuppressWarnings ( value = "resource" ) final org.conscrypt.OpenSSLBIOInputStream bis = new org.conscrypt.OpenSSLBIOInputStream ( is , true ) ; try { final long certCtx = org.conscrypt.NativeCrypto.PEM_read_bio_X509 ( bis.getBioContext ( ) ) ; if ( certCtx == 0L ) { return null ; } return new org.conscrypt.OpenSSLX509Certificate ( certCtx ) ; } catch ( java.lang.Exception e ) { throw new org.conscrypt.OpenSSLX509CertificateFactory.ParsingException ( e ) ; } finally { bis.release ( ) ; } }
protected void tearDown ( ) throws java.lang.Exception { if ( mHasFeature ) { if ( mRemoveOwnerInTearDown ) { assertTrue ( "Failed to clear owner" , removeAdmin ( ( ( ( com.android.cts.devicepolicy.UserRestrictionsTest.DEVICE_ADMIN_PKG ) + "/" ) + ( com.android.cts.devicepolicy.UserRestrictionsTest.ADMIN_RECEIVER_TEST_CLASS ) ) , mDeviceOwnerUserId ) ) ; assertTrue ( "Some user restrictions are still set" , runTests ( "userrestrictions.CheckNoOwnerRestrictionsTest" , mDeviceOwnerUserId ) ) ; } removeTestUsers ( ) ; } super . tearDown ( ) ; }
public void testLineEndings ( ) throws java.lang.Exception { java.lang.String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n" + ( ( ( "<LinearLayout>\r\n" + "\r" ) + "<LinearLayout></LinearLayout>\r\n" ) + "</LinearLayout>\r\n" ) ; java.io.File file = java.io.File.createTempFile ( "parsertest2" , ".xml" ) ; java.io.Writer fw = new java.io.BufferedWriter ( new java.io.FileWriter ( file ) ) ; fw.write ( xml ) ; fw.close ( ) ; org.w3c.dom.Document document = com.android.utils.PositionXmlParser.parse ( new java.io.FileInputStream ( file ) ) ; assertNotNull ( document ) ; file.delete ( ) ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; merger.writeBlobTo ( folder , new com.android.ide.common.res2.MergedResourceWriter ( com.google.common.io.Files.createTempDir ( ) , mPngCruncher , false , false , null ) ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger ( ) ; assertTrue ( loadedMerger.loadFromBlob ( folder , true ) ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public final java.nio.ByteBuffer putFloat ( int i , float x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putFloat ( ix ( checkIndex ( i , SizeOf.FLOAT ) ) , x ) ; return this ; }
public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface declaringClass = method.getEnclosingType ( ) ; com.android.jack.scheduling.marker.ClassDefItemMarker classDefItemMarker = declaringClass.getMarker ( com.android.jack.scheduling.marker.ClassDefItemMarker.class ) ; assert classDefItemMarker != null ; com.android.jack.dx.dex.file.ClassDefItem classDefItem = classDefItemMarker.getClassDefItem ( ) ; assert classDefItem != null ; com.android.jack.dx.dex.file.EncodedMethod encodedMethod = createEncodedMethod ( method ) ; if ( com.android.jack.backend.dex.EncodedMethodBuilder.isDirectMethod ( method ) ) { classDefItem.addDirectMethod ( encodedMethod ) ; } else { classDefItem.addVirtualMethod ( encodedMethod ) ; } }
boolean onDisconnect ( int cause ) { boolean changed = false ; mCause = cause ; if ( ! ( mDisconnected ) ) { doDisconnect ( ) ; if ( com.android.internal.telephony.cdma.CdmaConnection.VDBG ) android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CdmaConnection.LOG_TAG , ( "onDisconnect: cause=" + cause ) ) ; mOwner.mPhone.notifyDisconnect ( this ) ; if ( ( mParent ) != null ) { changed = mParent.connectionDisconnected ( this ) ; } } releaseWakeLock ( ) ; return changed ; }
public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < ? > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [ ] args ) { if ( ( ( benchmarkClassChecker ) != null ) && ( benchmarkClassChecker.isBenchmark ( klass ) ) ) { return new vogar.target.CaliperRunner ( monitor , profile , klass , args ) ; } else { return null ; } }
public void start ( ) { switch ( getToneSetting ( ) ) { case com.android.services.telephony.EmergencyTonePlayer.EMERGENCY_TONE_VIBRATE : startVibrate ( ) ; break ; case com.android.services.telephony.EmergencyTonePlayer.EMERGENCY_TONE_ALERT : startAlert ( ) ; break ; case com.android.services.telephony.EmergencyTonePlayer.EMERGENCY_TONE_OFF : break ; } }
protected void onDetachedFromWindow ( ) { if ( mIndeterminate ) { stopAnimation ( ) ; } if ( ( mRefreshProgressRunnable ) != null ) { removeCallbacks ( mRefreshProgressRunnable ) ; mRefreshIsPosted = false ; } if ( ( mAccessibilityEventSender ) != null ) { removeCallbacks ( mAccessibilityEventSender ) ; } super . onDetachedFromWindow ( ) ; mAttached = false ; }
public void showInputMethodPickerFromClient ( com.android.internal.view.IInputMethodClient client ) { synchronized ( mMethodMap ) { if ( ( ( ( mCurClient ) == null ) || ( client == null ) ) || ( ( mCurClient.client.asBinder ( ) ) != ( client.asBinder ( ) ) ) ) { android.util.Slog.w ( com.android.server.InputMethodManagerService.TAG , ( "Ignoring showInputMethodDialogFromClient of: " + client ) ) ; return ; } mHandler.sendEmptyMessage ( com.android.server.InputMethodManagerService.MSG_SHOW_IM_PICKER ) ; } }
public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor.visit ( this ) ) { if ( visitor.needLoading ( ) ) { loadSubPackages ( ) ; loadClassesAndInterfaces ( ) ; } visitor.accept ( subPackages ) ; visitor.accept ( declaredTypes ) ; } visitor.endVisit ( this ) ; }
private void runInBatchModeImpl ( java.lang.String javaPkgName ) throws com.android.cts.DeviceDisconnectedException { mDevice.runInBatchMode ( this , javaPkgName ) ; synchronized ( mTimeOutTimer ) { if ( ! ( mTestStop ) ) { try { mTimeOutTimer.waitOn ( ) ; } catch ( java.lang.InterruptedException e ) { com.android.cts.Log.d ( "time out object interrupted" ) ; } } mProgressObserver.stop ( ) ; if ( mTimeOutTimer.isTimeOut ( ) ) { return ; } else { mTimeOutTimer.cancel ( false ) ; } } }
public static java.lang.String parseMmsAddress ( java.lang.String address ) { if ( android.provider.Telephony.Mms.isEmailAddress ( address ) ) { return address ; } java.lang.String retVal = com.android.mms.ui.MessageUtils.parsePhoneNumberForMms ( address ) ; if ( ( retVal != null ) && ( ( retVal.length ( ) ) != 0 ) ) { return retVal ; } if ( com.android.mms.ui.MessageUtils.isAlias ( address ) ) { return address ; } return null ; }
public com.android.ide.common.resources.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.common.resources.FrameworkResources resources = new com.android.ide.common.resources.FrameworkResources ( frameworkRes ) ; resources.loadResources ( ) ; resources.loadPublicResources ( com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ; return resources ; } return null ; }
public static boolean loadProfileDataRecursive ( com.android.hierarchyviewerlib.models.ViewNode node , java.io.BufferedReader in ) throws java.io.IOException { if ( ! ( com.android.hierarchyviewerlib.device.DeviceBridge.loadProfileData ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( node.children.size ( ) ) ; i ++ ) { if ( ! ( com.android.hierarchyviewerlib.device.DeviceBridge.loadProfileDataRecursive ( node.children.get ( i ) , in ) ) ) { return false ; } } return true ; }
public void testNewInstanceString_StringBuilderConstructor ( ) { runTestNewInstanceString ( "(Ljava/lang/StringBuilder;)V" , new org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider ( ) { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value stringBuilderValue = getStaticFieldValue ( debuggeeClassId , "STRING_BUILDER" ) ; constructorArguments.add ( stringBuilderValue ) ; } } ) ; }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == 0 ) ) { return - 1 ; } if ( packet != null ) { packet.setReceivedLength ( byteCount ) ; packet.setAddress ( srcAddress.getAddress ( ) ) ; packet.setPort ( srcAddress.getPort ( ) ) ; } return byteCount ; }
private void dispatchChange ( boolean selfChange , android.net.Uri uri , int userId ) { if ( ( mHandler ) == null ) { onChange ( selfChange , uri , userId ) ; } else { mHandler.post ( new android.database.ContentObserver.NotificationRunnable ( selfChange , uri , userId ) ) ; } }
public boolean isApplicable ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) throws com.android.jack.lookup.JMethodLookupException { if ( ( call.getReceiverType ( ) . isSameType ( javaLangClass ) ) && ( call.getMethodId ( ) . equals ( forNameMethodId ) ) ) { assert call.getType ( ) . isSameType ( javaLangClass ) ; return true ; } return false ; }
static void native_addOval ( long nPath , android.graphics.RectF oval , int dir ) { android.graphics.Path_Delegate pathDelegate = android.graphics.Path_Delegate.sManager.getDelegate ( nPath ) ; if ( pathDelegate == null ) { return ; } pathDelegate.mPath.append ( new java.awt.geom.Ellipse2D.Float ( oval.left , oval.top , oval.width ( ) , oval.height ( ) ) , false ) ; }
protected void loadUrlDataIn ( com.android.browser.Tab t , com.android.browser.IntentHandler.UrlData data ) { if ( data != null ) { if ( data.isPreloaded ( ) ) { } else { loadUrl ( t , data.mUrl , data.mHeaders ) ; } } }
void handleReturnCode ( ) { if ( ( mArgs ) != null ) { processPendingInstall ( mArgs , mRet ) ; if ( ( mTempPackage ) != null ) { if ( ! ( mTempPackage.delete ( ) ) ) { android.util.Slog.w ( com.android.server.pm.PackageManagerService.TAG , ( "Couldn't delete temporary file: " + ( mTempPackage.getAbsolutePath ( ) ) ) ) ; } } } }
public void testSinglePreDexLibrary ( ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.String content = "Some Content" ; java.io.File input = com.android.builder.internal.compiler.PreDexCacheTest.createInputFile ( content ) ; java.io.File output = java.io.File.createTempFile ( "predex" , ".jar" ) ; output.deleteOnExit ( ) ; com.android.builder.internal.compiler.PreDexCache.getCache ( ) . preDexLibrary ( input , output , false , new com.android.builder.internal.compiler.PreDexCacheTest.FakeDexOptions ( ) , mBuildToolInfo , false , new com.android.builder.internal.compiler.PreDexCacheTest.FakeCommandLineRunner ( new com.android.utils.StdLogger ( StdLogger.Level.INFO ) ) ) ; com.android.builder.internal.compiler.PreDexCacheTest.checkOutputFile ( content , output ) ; }
public void run ( ) { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setView ( view , viewSpacingLeft , viewSpacingTop , viewSpacingRight , viewSpacingBottom ) ; mDialog = mBuilder.show ( ) ; mView = mDialog.getWindow ( ) . findViewById ( 100 ) ; }
public void copyTo ( float [ ] d ) { validateIsFloat32 ( ) ; copyTo ( d , Element.DataType.FLOAT_32 , d.length ) ; }
public void setUiTTYMode ( android.content.Context context , int uiTtyMode , android.os.Message onComplete ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { mImsServiceProxy.setUiTTYMode ( uiTtyMode , onComplete ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "setTTYMode()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } if ( ! ( com.android.ims.ImsManager.getBooleanCarrierConfig ( context , CarrierConfigManager.KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL ) ) ) { setAdvanced4GMode ( ( ( uiTtyMode == ( android.telecom.TelecomManager.TTY_MODE_OFF ) ) && ( com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser ( context ) ) ) ) ; } }
public com.android.sdklib.internal.repository.SdkSource [ ] getAllSources ( ) { synchronized ( mSources ) { int n = 0 ; for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources.values ( ) ) { n += list.size ( ) ; } com.android.sdklib.internal.repository.SdkSource [ ] sources = new com.android.sdklib.internal.repository.SdkSource [ n ] ; int i = 0 ; for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources.values ( ) ) { for ( com.android.sdklib.internal.repository.SdkSource source : list ) { sources [ ( i ++ ) ] = source ; } } return sources ; } }
public void test_markI ( ) throws java.io.IOException { java.io.InputStream is = new java.io.ByteArrayInputStream ( new byte [ 10 ] ) ; try ( java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream ( is ) ) { iis.mark ( 0 ) ; iis.mark ( ( - 1 ) ) ; iis.mark ( 10000000 ) ; } }
public void dragFinished ( org.eclipse.swt.dnd.DragSourceEvent e ) { mDragSelection.clear ( ) ; mDragElements = null ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.GlobalCanvasDragInfo.getInstance ( ) . stopDrag ( ) ; }
public void continueOperation ( android.content.Intent resolutionIntent , android.os.Bundle resolutionExtras ) { if ( ! ( isEnabled ( ) ) ) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra ( android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT ) ; if ( callbackIntent != null ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; } return ; } try { android.telephony.euicc.EuiccManager.getIEuiccController ( ) . continueOperation ( resolutionIntent , resolutionExtras ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public boolean isConnected ( int serviceType , int callType ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { return mImsServiceProxy.isConnected ( serviceType , callType ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "isServiceConnected()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void testAccessInstanceState ( ) { android.widget.CompoundButton compoundButton = new android.widget.cts.CompoundButtonTest.MockCompoundButton ( mContext ) ; android.os.Parcelable state ; assertFalse ( compoundButton.isChecked ( ) ) ; assertFalse ( compoundButton.getFreezesText ( ) ) ; state = compoundButton.onSaveInstanceState ( ) ; assertNotNull ( state ) ; assertFalse ( compoundButton.getFreezesText ( ) ) ; compoundButton.setChecked ( true ) ; compoundButton.onRestoreInstanceState ( state ) ; assertFalse ( compoundButton.isChecked ( ) ) ; assertTrue ( compoundButton.isLayoutRequested ( ) ) ; }
public void showSidePanel ( boolean withAnimation ) { if ( ( mFragmentCount ) == 0 ) { return ; } mPanel.setVisibility ( View.VISIBLE ) ; if ( withAnimation ) { mShowAnimator.start ( ) ; } scheduleHideAll ( ) ; }
private void setConvoRead ( com.android.bluetooth.map.BluetoothMapConvoListingElement e , android.database.Cursor c , com.android.bluetooth.map.BluetoothMapContent.FilterInfo fi , com.android.bluetooth.map.BluetoothMapAppParams ap ) { java.lang.String setread = null ; int read = 0 ; read = c.getInt ( fi.mConvoColRead ) ; if ( com.android.bluetooth.map.BluetoothMapContent.V ) android.util.Log.d ( com.android.bluetooth.map.BluetoothMapContent.TAG , ( "setRead: " + setread ) ) ; e.setRead ( ( read == 1 ) , ( ( ( ap.getParameterMask ( ) ) & ( com.android.bluetooth.map.BluetoothMapContent.MASK_READ ) ) != 0 ) ) ; }
public void testCasts ( ) throws java.lang.Exception { checkExpression ( 1 , "(int)1" ) ; checkExpression ( 1L , "(long)1" ) ; checkExpression ( 1 , "(int)1.1f" ) ; checkExpression ( ( ( short ) ( 65537 ) ) , "(short)65537" ) ; checkExpression ( ( ( byte ) ( 1023 ) ) , "(byte)1023" ) ; checkExpression ( 1.5 , "(double)1.5f" ) ; checkExpression ( ( - 5.0 ) , "(double)-5" ) ; }
private boolean sample ( long timeStamp ) { if ( timeStamp == ( java.lang.Long.MAX_VALUE ) ) { return true ; } else if ( timeStamp < ( mLatestSeen ) ) { return false ; } else if ( timeStamp == ( mLatestSeen ) ) { return true ; } else { if ( ( mLatestSeen ) != 0 ) { mElapsedTimes.add ( ( timeStamp - ( mLatestSeen ) ) ) ; } mLatestSeen = timeStamp ; return false ; } }
public void test_EVP_get_digestbyname ( ) throws java.lang.Exception { assertTrue ( ( ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( "sha256" ) ) != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( "" ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( "foobar" ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } }
private void add ( com.android.sdklib.BuildToolInfo.PathId id , java.lang.String leaf ) { add ( id , new java.io.File ( mPath , leaf ) ) ; }
public static java.lang.String toString ( java.lang.String [ ] [ ] M ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "[" ) ; for ( int i = 0 ; i < ( M.length ) ; ++ i ) { if ( i > 0 ) { builder.append ( ", " ) ; } builder.append ( com.android.commands.hidl_test_java.HidlTestJava.toString ( M [ i ] ) ) ; } builder.append ( "]" ) ; return builder.toString ( ) ; }
public void exiting ( java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.Object result ) { logp ( java.util.logging.Level.FINER , sourceClass , sourceMethod , "RETURN {0}" , result ) ; }
public void testGetSubscriberNumber ( ) throws java.lang.Exception { com.android.server.telecom.Call mockCall = createForegroundCall ( ) ; android.telecom.PhoneAccount fakePhoneAccount = makeQuickAccount ( "id0" , com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_INDEX ) ; org.mockito.Mockito.when ( mMockPhoneAccountRegistrar.getPhoneAccountOfCurrentUser ( org.mockito.ArgumentMatchers.nullable ( android.telecom.PhoneAccountHandle.class ) ) ) . thenReturn ( fakePhoneAccount ) ; java.lang.String subscriberNumber = mBluetoothPhoneService.mBinder.getSubscriberNumber ( ) ; org.junit.Assert.assertEquals ( subscriberNumber , ( ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_ADDRESS ) + ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_INDEX ) ) ) ; }
public static void check ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.DirectoryLocation location ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { if ( ! ( file.exists ( ) ) ) { throw new com.android.sched.util.file.NoSuchFileException ( location ) ; } if ( ! ( file.isDirectory ( ) ) ) { throw new com.android.sched.util.file.NotDirectoryException ( location ) ; } }
public void testAfterLast ( ) throws java.sql.SQLException { target.afterLast ( ) ; assertTrue ( target.isAfterLast ( ) ) ; assertFalse ( target.next ( ) ) ; emptyTarget.afterLast ( ) ; assertFalse ( emptyTarget.isAfterLast ( ) ) ; try { target.close ( ) ; target.afterLast ( ) ; fail ( "Should get SQLException" ) ; } catch ( java.sql.SQLException e ) { } }
public static int waitpid ( int pid , android.util.MutableInt status , int options ) throws android.system.ErrnoException { if ( status == null ) { return Libcore.os.waitpid ( pid , null , options ) ; } else { android.util.MutableInt internalStatus = new android.util.MutableInt ( status.value ) ; try { return Libcore.os.waitpid ( pid , internalStatus , options ) ; } finally { status.value = internalStatus.value ; } } }
private final void shutdownIfNoPower ( ) { if ( ( ( ( mBatteryLevel ) == 0 ) && ( ! ( isPowered ( ) ) ) ) && ( android.app.ActivityManagerNative.isSystemReady ( ) ) ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_REQUEST_SHUTDOWN ) ; intent.putExtra ( Intent.EXTRA_KEY_CONFIRM , false ) ; intent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mContext.startActivity ( intent ) ; } }
public void checkCall ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodInsnNode call ) { java.lang.String owner = call.owner ; if ( ( owner.equals ( "android/util/FloatMath" ) ) && ( ( context.getProject ( ) . getMinSdk ( ) ) >= 8 ) ) { java.lang.String message = java.lang.String.format ( ( "Use java.lang.Math#%1$s instead of android.util.FloatMath#%1$s() " + "since it is faster as of API 8" ) , call.name ) ; context.report ( com.android.tools.lint.checks.MathDetector.ISSUE , method , call , context.getLocation ( call ) , message , null ) ; } }
public boolean onGenericMotionEvent ( final android.view.MotionEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onGenericMotionEvent ( event ) ; } } ) ; return ret ; } return mAwContents.onGenericMotionEvent ( event ) ; }
public android.bluetooth.BluetoothSocket createRfcommSocket ( int channel ) throws java.io.IOException { if ( ! ( isBluetoothEnabled ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "Bluetooth is not enabled" ) ; throw new java.io.IOException ( ) ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_RFCOMM , ( - 1 ) , true , true , this , channel , null ) ; }
public static int $noinline$intNecessaryShiftModifications ( int value , int shift ) { int c129 = 129 ; return ( ( ( value << ( shift | 33 ) ) + ( value > > ( shift ^ 65 ) ) ) + ( value > > > ( shift + 97 ) ) ) + ( value << ( shift - c129 ) ) ; }
public static void computeDegrees ( android.renderscript.cts.TestDegrees.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 3 , false ) ; android.renderscript.cts.Target.Floaty in = t.new32 ( args.inV ) ; android.renderscript.cts.Target.Floaty k = t.new32 ( ( ( float ) ( 180.0 / ( java.lang.Math.PI ) ) ) ) ; args.out = t.multiply ( in , k ) ; }
public com.android.jack.ir.ast.JAnnotation exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( retentionPolicy ) != null ; assert ( sourceInfo ) != null ; assert ( annotationType ) != null ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JAnnotationType type = exportSession.getLookup ( ) . getAnnotationType ( annotationType ) ; com.android.jack.ir.ast.JAnnotation jAnnotation = new com.android.jack.ir.ast.JAnnotation ( jSourceInfo , retentionPolicy , type ) ; for ( com.android.jack.jayce.v0002.nodes.NNameValuePair valuePair : elements ) { jAnnotation.put ( valuePair.exportAsJast ( exportSession ) ) ; } return jAnnotation ; }
protected final java.lang.String toStringWithInline ( java.lang.String extra ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 80 ) ; sb.append ( "Insn{" ) ; sb.append ( position ) ; sb.append ( ' ' ) ; sb.append ( opcode ) ; if ( extra != null ) { sb.append ( ' ' ) ; sb.append ( extra ) ; } sb.append ( " :: " ) ; if ( ( result ) != null ) { sb.append ( result ) ; sb.append ( " <- " ) ; } sb.append ( sources ) ; sb.append ( '}' ) ; return sb.toString ( ) ; }
public boolean addAccountExplicitly ( android.accounts.Account account , java.lang.String password , android.os.Bundle userdata ) { if ( account == null ) throw new java.lang.IllegalArgumentException ( "account is null" ) ; try { return mService.addAccountExplicitly ( account , password , userdata ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
protected final java.lang.Object getValue ( com.intellij.designer.model.Property property ) throws java.lang.Exception { int size = myContainers.size ( ) ; if ( size == 0 ) { return null ; } java.lang.Object value = property.getValue ( myContainers.get ( 0 ) ) ; for ( int i = 1 ; i < size ; i ++ ) { if ( ! ( com.intellij.openapi.util.Comparing.equal ( value , property.getValue ( myContainers.get ( i ) ) ) ) ) { return null ; } } return value ; }
public void testBooleans ( ) throws java.lang.Exception { checkExpression ( true , "true" ) ; checkExpression ( false , "false" ) ; checkExpression ( false , "false && true" ) ; checkExpression ( true , "false || true" ) ; checkExpression ( true , "!false" ) ; }
public static int forkSystemServer ( int uid , int gid , int [ ] gids , int runtimeFlags , int [ ] [ ] rlimits , long permittedCapabilities , long effectiveCapabilities ) { com.android.internal.os.Zygote.VM_HOOKS.preFork ( ) ; com.android.internal.os.Zygote.resetNicePriority ( ) ; int pid = com.android.internal.os.Zygote.nativeForkSystemServer ( uid , gid , gids , runtimeFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == 0 ) { android.os.Trace.setTracingEnabled ( true , runtimeFlags ) ; } com.android.internal.os.Zygote.VM_HOOKS.postForkCommon ( ) ; return pid ; }
public static com.ibm.icu.text.DateIntervalInfo.PatternInfo genPatternInfo ( java.lang.String intervalPattern , boolean laterDateFirst ) { int splitPoint = com.ibm.icu.text.DateIntervalInfo.splitPatternInto2Part ( intervalPattern ) ; java.lang.String firstPart = intervalPattern.substring ( 0 , splitPoint ) ; java.lang.String secondPart = null ; if ( splitPoint < ( intervalPattern.length ( ) ) ) { secondPart = intervalPattern.substring ( splitPoint , intervalPattern.length ( ) ) ; } return new com.ibm.icu.text.DateIntervalInfo.PatternInfo ( firstPart , secondPart , laterDateFirst ) ; }
public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < ? > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [ ] args ) { if ( supports ( klass ) ) { return new vogar.target.junit.JUnitTargetRunner ( monitor , skipPastReference , testEnvironment , timeoutSeconds , klass , qualification , args ) ; } else { return null ; } }
public void testFailure ( ) throws java.io.IOException { java.io.InputStream is = loadResource ( ) ; try { assertEquals ( '1' , parseAndClose ( is ) ) ; try { assertEquals ( '2' , parse ( is ) ) ; fail ( "Expected: IOException 'stream closed'; Actual: no error." ) ; } catch ( java.io.IOException e ) { assertEquals ( "Stream closed" , e.getMessage ( ) ) ; } } finally { if ( is != null ) { is.close ( ) ; } } }
protected static java.lang.String cstString ( @ javax.annotation.Nonnull com.android.jack.dx.dex.code.CstInsn ci ) { com.android.jack.dx.rop.cst.Constant cst = ci.getConstant ( ) ; return cst instanceof com.android.jack.dx.rop.cst.CstString ? ( ( com.android.jack.dx.rop.cst.CstString ) ( cst ) ) . toQuoted ( ) : cst.toHuman ( ) ; }
private void loadViewServerInfoAndWindows ( final com.android.ddmlib.IDevice device ) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo ( device ) ; if ( viewServerInfo == null ) { return ; } com.android.hierarchyviewerlib.device.Window [ ] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows ( device ) ; com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel ( ) . addDevice ( device , windows , viewServerInfo ) ; if ( ( viewServerInfo.protocolVersion ) >= 3 ) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges ( this , device ) ; focusChanged ( device ) ; } }
public void test_ru_RU ( ) throws java.lang.Exception { libcore.icu.LocaleData l = libcore.icu.LocaleData.get ( new java.util.Locale ( "ru" , "RU" ) ) ; assertEquals ( "воскресенье" , l.longWeekdayNames [ 1 ] ) ; assertEquals ( "вс" , l.shortWeekdayNames [ 1 ] ) ; assertEquals ( "вс" , l.tinyWeekdayNames [ 1 ] ) ; assertEquals ( "Воскресенье" , l.longStandAloneWeekdayNames [ 1 ] ) ; assertEquals ( "Вс" , l.shortStandAloneWeekdayNames [ 1 ] ) ; assertEquals ( "В" , l.tinyStandAloneWeekdayNames [ 1 ] ) ; }
public void test_useRadix_I ( ) { s = new java.util.Scanner ( "test" ) ; try { s.useRadix ( ( ( java.lang.Character.MIN_RADIX ) - 1 ) ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } try { s.useRadix ( ( ( java.lang.Character.MAX_RADIX ) + 1 ) ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } s.useRadix ( 11 ) ; assertEquals ( 11 , s.radix ( ) ) ; }
private static android.app.PendingIntent newVoicemailIntent ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable com.android.dialer.app.calllog.CallLogNotificationsQueryHelper.NewCall voicemail ) { android.content.Intent intent = com.android.dialer.app.MainComponent.getShowVoicemailIntent ( context ) ; if ( voicemail != null ) { intent.setData ( voicemail.voicemailUri ) ; } intent.putExtra ( DialtactsActivity.EXTRA_CLEAR_NEW_VOICEMAILS , true ) ; return android.app.PendingIntent.getActivity ( context , 0 , intent , PendingIntent.FLAG_UPDATE_CURRENT ) ; }
private static java.lang.reflect.Method getDumpHprofDataMethod ( ) { java.lang.ClassLoader myLoader = Main.class . getClassLoader ( ) ; java.lang.Class < ? > vmdClass ; try { vmdClass = myLoader.loadClass ( "dalvik.system.VMDebug" ) ; } catch ( java.lang.ClassNotFoundException cnfe ) { return null ; } java.lang.reflect.Method meth ; try { meth = vmdClass.getMethod ( "dumpHprofData" , java.lang.String.class ) ; } catch ( java.lang.NoSuchMethodException nsme ) { java.lang.System.out.println ( "Found VMDebug but not dumpHprofData method" ) ; return null ; } return meth ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [ ] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo , boolean compareInstructionNumber , float instructionNumberTolerance ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( classpath , fileOrSourceList , withDebugInfo , compareInstructionNumber , instructionNumberTolerance , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public static void checkContent ( @ com.android.annotations.NonNull java.io.File archive , @ com.android.annotations.NonNull java.lang.String path , @ com.android.annotations.NonNull byte [ ] content ) throws java.io.IOException { java.util.Map < java.lang.String , byte [ ] > pathToContent = java.util.Collections.singletonMap ( path , content ) ; com.android.build.gradle.integration.common.utils.ZipHelper.checkArchive ( archive , pathToContent , com.google.common.collect.ImmutableSet.< java.lang.String > of ( ) ) ; }
public boolean setBluetoothEnabled ( boolean enabled ) { boolean success = ( enabled ) ? mAdapter.enable ( ) : mAdapter.disable ( ) ; if ( success ) { setBluetoothStateInt ( ( enabled ? android.bluetooth.BluetoothAdapter.STATE_TURNING_ON : android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF ) ) ; } else { if ( Utils.V ) { android.util.Log.v ( com.android.settingslib.bluetooth.LocalBluetoothAdapter.TAG , ( ( "setBluetoothEnabled call, manager didn't return " + "success for enabled: " ) + enabled ) ) ; } syncBluetoothState ( ) ; } return success ; }
public void generateBuildConfig ( @ com.android.annotations.NonNull java.lang.String packageName , boolean debuggable , @ com.android.annotations.NonNull java.util.List < java.lang.String > javaLines , @ com.android.annotations.NonNull java.lang.String sourceOutputDir ) throws java.io.IOException { com.android.builder.internal.BuildConfigGenerator generator = new com.android.builder.internal.BuildConfigGenerator ( sourceOutputDir , packageName , debuggable ) ; generator.generate ( javaLines ) ; }
private static java.lang.String getDefaultSignatureAlgorithmForKeyType ( java.lang.String keyType ) { if ( "RSA" . equalsIgnoreCase ( keyType ) ) { return "sha256WithRSA" ; } else if ( "EC" . equalsIgnoreCase ( keyType ) ) { return "sha256WithECDSA" ; } else { throw new java.lang.IllegalArgumentException ( ( "Unsupported key type " + keyType ) ) ; } }
private static void checkOnTouchListener ( com.android.tools.lint.detector.api.ClassContext context , org.objectweb.asm.tree.ClassNode classNode ) { org.objectweb.asm.tree.MethodNode onTouchNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethod ( classNode.methods , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH_SIG ) ; if ( onTouchNode != null ) { org.objectweb.asm.tree.AbstractInsnNode performClickInsnNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethodCallInstruction ( onTouchNode.instructions , com.android.SdkConstants.ANDROID_VIEW_VIEW , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK_SIG ) ; if ( performClickInsnNode == null ) { java.lang.String message = java.lang.String.format ( "`%1$s#onTouch` should call `View#performClick` when a click is detected" , classNode.name ) ; context.report ( com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ISSUE , onTouchNode , null , context.getLocation ( onTouchNode , classNode ) , message ) ; } } }
public boolean importKey ( java.lang.String keyName , byte [ ] key , int uid ) { try { return ( mBinder.import_key ( keyName , key , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
private static void encodeSize ( com.android.jack.dx.util.AnnotatedOutput out , java.lang.String label , int size ) { if ( out.annotates ( ) ) { out.annotate ( java.lang.String.format ( " %-21s %08x" , ( label + "_size:" ) , java.lang.Integer.valueOf ( size ) ) ) ; } out.writeUleb128 ( size ) ; }
synchronized long nScriptGroupCreate ( long [ ] kernels , long [ ] src , long [ ] dstk , long [ ] dstf , long [ ] types ) { validate ( ) ; return rsnScriptGroupCreate ( mContext , kernels , src , dstk , dstf , types ) ; }
public void testEscapeStringShouldEscapeXmlSpecialCharacters ( ) throws java.lang.Exception { assertEquals ( "&lt;" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "<" ) ) ; assertEquals ( "&amp;" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "&" ) ) ; assertEquals ( "&lt;" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "<" , true ) ) ; assertEquals ( "&amp;" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "&" , true ) ) ; assertEquals ( "<" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "<" , false ) ) ; assertEquals ( "&" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "&" , false ) ) ; }
protected void printMethodHeader ( com.android.jack.ir.ast.JMethod x ) { print ( com.android.jack.ir.ast.JModifier.getStringMethodModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; printParameterList ( x ) ; }
private static void setWifiCountryCodeFromMcc ( android.content.Context context , int mcc ) { java.lang.String country = com.android.internal.telephony.MccTable.countryCodeForMcc ( mcc ) ; android.util.Slog.d ( com.android.internal.telephony.MccTable.LOG_TAG , ( "WIFI_COUNTRY_CODE set to " + country ) ) ; android.net.wifi.WifiManager wM = ( ( android.net.wifi.WifiManager ) ( context.getSystemService ( Context.WIFI_SERVICE ) ) ) ; wM.setCountryCode ( country , false ) ; }
public boolean enterIf ( com.google.common.util.concurrent.Monitor.Guard guard , long time , java.util.concurrent.TimeUnit unit ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException ( ) ; } if ( ! ( enter ( time , unit ) ) ) { return false ; } boolean satisfied = false ; try { return satisfied = guard.isSatisfied ( ) ; } finally { if ( ! satisfied ) { lock.unlock ( ) ; } } }
public int getCdmaEriIconIndexForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , "getCdmaEriIconIndexForSubscriber" ) ) ) { return - 1 ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.getCdmaEriIconIndex ( ) ; } else { return - 1 ; } }
public void run ( ) { mFilterText = "" ; com.android.hierarchyviewerlib.device.IHvDevice hvDevice = window.getHvDevice ( ) ; com.android.hierarchyviewerlib.models.ViewNode viewNode = hvDevice.loadWindowData ( window ) ; if ( viewNode != null ) { viewNode.setViewCount ( ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . setData ( window , viewNode ) ; } }
public com.android.ide.common.layoutlib.LayoutLibrary getLayoutLibrary ( ) { com.android.sdklib.IAndroidTarget target = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTargetData ( target ) ; if ( data != null ) { return data.getLayoutLibrary ( ) ; } } return null ; }
protected void onScrollChanged ( int l , int t , int oldl , int oldt ) { if ( android.view.accessibility.AccessibilityManager.getInstance ( mContext ) . isEnabled ( ) ) { postSendViewScrolledAccessibilityEventCallback ( ) ; } mBackgroundSizeChanged = true ; final android.view.View.AttachInfo ai = mAttachInfo ; if ( ai != null ) { ai.mViewScrollChanged = true ; } }
private void checkTimeZoneParsingErrorIndex ( java.text.SimpleDateFormat dateFormat ) { java.text.ParsePosition pos = new java.text.ParsePosition ( 0 ) ; java.util.Date parsed ; parsed = dateFormat.parse ( "2000 foobar" , pos ) ; assertNull ( parsed ) ; assertEquals ( "Wrong error index" , 5 , pos.getErrorIndex ( ) ) ; }
private void verifyValidExitPredecessor ( com.android.jack.dx.ssa.SsaBasicBlock b ) { java.util.List < com.android.jack.dx.ssa.SsaInsn > insns = b.getInsns ( ) ; com.android.jack.dx.ssa.SsaInsn lastInsn = insns.get ( ( ( insns.size ( ) ) - 1 ) ) ; com.android.jack.dx.rop.code.Rop opcode = lastInsn.getOpcode ( ) ; if ( ( ( opcode.getBranchingness ( ) ) != ( com.android.jack.dx.rop.code.Rop.BRANCH_RETURN ) ) && ( opcode != ( com.android.jack.dx.rop.code.Rops.THROW ) ) ) { throw new java.lang.RuntimeException ( ( "Exit predecessor must end" + " in valid exit statement." ) ) ; } }
public final java.nio.ByteBuffer putLong ( int i , long x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putLong ( ix ( checkIndex ( i , SizeOf.LONG ) ) , x ) ; return this ; }
private java.io.InputStream createInputStream ( byte [ ] data , javax.crypto.Cipher cipher , boolean useBc ) { java.io.ByteArrayInputStream bytes = new java.io.ByteArrayInputStream ( data ) ; return useBc ? ( ( java.io.InputStream ) ( new javax.crypto.CipherInputStream ( bytes , cipher ) ) ) : ( ( java.io.InputStream ) ( new javax.crypto.CipherInputStream ( bytes , cipher ) ) ) ; }
private void setUsbFunction ( int mode ) { switch ( mode ) { case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_MTP : mUsbManager.setCurrentFunction ( UsbManager.USB_FUNCTION_MTP , true ) ; break ; case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_PTP : mUsbManager.setCurrentFunction ( UsbManager.USB_FUNCTION_PTP , true ) ; break ; case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_MIDI : mUsbManager.setCurrentFunction ( UsbManager.USB_FUNCTION_MIDI , true ) ; break ; default : mUsbManager.setCurrentFunction ( null , false ) ; break ; } }
public static < T > T [ ] copyOf ( T [ ] original , int newLength ) { if ( original == null ) { throw new java.lang.NullPointerException ( ) ; } if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( java.lang.Integer.toString ( newLength ) ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public final java.lang.Class < E > getDeclaringClass ( ) { java.lang.Class < ? > clazz = getClass ( ) ; java.lang.Class < ? > zuper = clazz.getSuperclass ( ) ; return zuper == ( java.lang.Enum.class ) ? ( ( java.lang.Class < E > ) ( clazz ) ) : ( ( java.lang.Class < E > ) ( zuper ) ) ; }
public void systemReady ( ) { try { int menuState = mWindowManager.getKeycodeState ( KeyEvent.KEYCODE_MENU ) ; android.util.Log.i ( com.android.internal.policy.impl.PhoneWindowManager.TAG , ( "Menu key state: " + menuState ) ) ; if ( menuState > 0 ) { android.app.ActivityManagerNative.getDefault ( ) . enterSafeMode ( ) ; } mKeyguardMediator.onSystemReady ( ) ; android.os.SystemProperties.set ( "dev.bootcomplete" , "1" ) ; } catch ( android.os.RemoteException e ) { } }
public RttManager.RttCapabilities getRttCapabilities ( ) { return mWifiVendorHal.getRttCapabilities ( ) ; }
static void testIso3 ( ) { java.util.Locale loc ; loc = new java.util.Locale ( "en" , "US" ) ; java.lang.System.out.println ( ( "loc: " + loc ) ) ; java.lang.System.out.println ( ( " iso3=" + ( loc.getISO3Language ( ) ) ) ) ; loc = new java.util.Locale ( "eng" , "USA" ) ; java.lang.System.out.println ( ( "loc: " + loc ) ) ; try { java.lang.System.out.println ( ( " iso3=" + ( loc.getISO3Language ( ) ) ) ) ; } catch ( java.util.MissingResourceException mre ) { java.lang.System.out.println ( "couldn't get iso3 language" ) ; } }
public void fitWindow ( ) { if ( ( myWindow ) == null ) { return ; } myAllScreenshotsPanel.updateUI ( ) ; myWindow.pack ( ) ; int maxHeight = 0 ; for ( com.google.gct.testing.ScreenshotComparisonPanel panel : screenshotPanels ) { if ( ( panel.getPanel ( ) . getHeight ( ) ) > maxHeight ) { maxHeight = panel.getPanel ( ) . getHeight ( ) ; } } addScreenshotPanel.setHeight ( maxHeight ) ; myAllScreenshotsPanel.updateUI ( ) ; myWindow.pack ( ) ; }
public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { internalName = name ; this . access = access ; this . signature = signature ; this . superName = superName ; this . interfaces = interfaces ; isInterface = com.google.devtools.build.android.desugar.BitFlags.isSet ( access , Opcodes.ACC_INTERFACE ) ; super . visit ( java.lang.Math.min ( version , Opcodes.V1_7 ) , access , name , signature , superName , interfaces ) ; }
public void testProcessChldReleaseActiveRinging ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall ( ) ; com.android.server.telecom.Call ringingCall = createRingingCall ( ) ; boolean didProcess = mBluetoothPhoneService.mBinder.processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_RELEASEACTIVE_ACCEPTHELD ) ; org.mockito.Mockito.verify ( mMockCallsManager ) . disconnectCall ( org.mockito.Matchers.eq ( activeCall ) ) ; org.mockito.Mockito.verify ( mMockCallsManager ) . answerCall ( org.mockito.Matchers.eq ( ringingCall ) , org.mockito.Matchers.any ( int . class ) ) ; org.junit.Assert.assertEquals ( didProcess , true ) ; }
public android.net.LinkProperties.CompareResult < java.lang.String > compareAllInterfaceNames ( android.net.LinkProperties target ) { return new android.net.LinkProperties.CompareResult < > ( getAllInterfaceNames ( ) , ( target != null ? target.getAllInterfaceNames ( ) : null ) ) ; }
private void tryConnect ( java.net.InetSocketAddress dest , int timeout ) throws java.io.IOException { if ( isConnected ( ) ) { disconnect ( ) ; } server = doConnect ( dest , timeout ) ; try { out = new java.io.PrintStream ( new java.io.BufferedOutputStream ( server.getOutputStream ( ) ) , true , sun.net.ftp.impl.FtpClient.encoding ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.InternalError ( ( ( sun.net.ftp.impl.FtpClient.encoding ) + "encoding not found" ) , e ) ; } in = new java.io.BufferedInputStream ( server.getInputStream ( ) ) ; }
public static org.eclipse.ui.IEditorPart getEditor ( ) { org.eclipse.ui.IWorkbenchWindow window = org.eclipse.ui.PlatformUI.getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; if ( window != null ) { org.eclipse.ui.IWorkbenchPage page = window.getActivePage ( ) ; if ( page != null ) { return page.getActiveEditor ( ) ; } } return null ; }
public static int exec ( com.android.jack.ir.ast.JExpression expression ) { com.android.jack.ir.impl.JavaPrecedenceVisitor visitor = new com.android.jack.ir.impl.JavaPrecedenceVisitor ( ) ; visitor.accept ( expression ) ; assert ( visitor.answer ) >= 0 : ( ( "Precedence must be >= 0 (" + ( expression.toString ( ) ) ) + ") " ) + ( expression.getClass ( ) . toString ( ) ) ; return visitor.answer ; }
public int getRemoteClass ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "getRemoteClass() - Not allowed for non-active user" ) ; return 0 ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return 0 ; } return service.getRemoteClass ( device ) ; }
private static java.lang.String getPathFromBaseDir ( @ javax.annotation.Nonnull java.lang.String baseDir , @ javax.annotation.Nonnull java.lang.String path ) { java.util.List < java.io.File > pathList = com.android.jack.shrob.proguard.GrammarActions.getPathFromBaseDirAsList ( baseDir , path ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator < java.io.File > iter = pathList.iterator ( ) ; iter.hasNext ( ) ; ) { sb.append ( iter.next ( ) . getPath ( ) ) ; if ( iter.hasNext ( ) ) { sb.append ( java.io.File.pathSeparatorChar ) ; } } return sb.toString ( ) ; }
public void onVisible ( ) { com.android.dialer.common.LogUtil.enterBlock ( "VisualVoicemailCallLogFragment.onVisible" ) ; super . onVisible ( ) ; if ( ( ( getActivity ( ) ) != null ) && ( ( preSyncVoicemailStatusCheckExecutor ) != null ) ) { preSyncVoicemailStatusCheckExecutor.executeParallel ( getActivity ( ) ) ; com.android.dialer.logging.Logger.get ( getActivity ( ) ) . logImpression ( DialerImpression.Type.VVM_TAB_VIEWED ) ; getActivity ( ) . setVolumeControlStream ( VoicemailAudioManager.PLAYBACK_STREAM ) ; } }
public void copy1DRangeFromUnchecked ( int off , int count , long [ ] d ) { int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( ( d.length ) * 8 ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize ) ; }
public java.util.List < android.content.PeriodicSync > getPeriodicSyncs ( android.accounts.Account account , int userId , java.lang.String providerName ) { java.util.ArrayList < android.content.PeriodicSync > syncs = new java.util.ArrayList < android.content.PeriodicSync > ( ) ; synchronized ( mAuthorities ) { android.content.SyncStorageEngine.AuthorityInfo authority = getAuthorityLocked ( account , userId , providerName , "getPeriodicSyncs" ) ; if ( authority != null ) { for ( android.util.Pair < android.os.Bundle , java.lang.Long > item : authority.periodicSyncs ) { syncs.add ( new android.content.PeriodicSync ( account , providerName , item.first , item.second ) ) ; } } } return syncs ; }
private void createTypes ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage , @ javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap , @ javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration ) { if ( ( hasErrors ) || ( com.android.jack.ir.impl.JackIrBuilder.hasError ( typeDeclaration ) ) ) { hasErrors = true ; return ; } com.android.jack.ir.impl.EcjSourceTypeLoader.createType ( refMap , enclosingPackage , typeDeclaration.binding , typeDeclaration , new com.android.sched.util.location.FileLocation ( new java.lang.String ( typeDeclaration.compilationResult.fileName ) ) ) ; if ( ( typeDeclaration.memberTypes ) != null ) { for ( org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes ) { createTypes ( enclosingPackage , refMap , memberType ) ; } } }
org.xml.sax.Attributes cloneAttributes ( ) { if ( ! ( inStartElement ) ) { throw new java.lang.IllegalStateException ( org.apache.harmony.xml.ExpatParser.OUTSIDE_START_ELEMENT ) ; } if ( ( attributeCount ) == 0 ) { return org.apache.harmony.xml.ExpatParser.ClonedAttributes.EMPTY ; } long clonePointer = org.apache.harmony.xml.ExpatParser.cloneAttributes ( this . attributePointer , this . attributeCount ) ; return new org.apache.harmony.xml.ExpatParser.ClonedAttributes ( pointer , clonePointer , attributeCount ) ; }
public static int acquireFileContent ( int fileId ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.lock ( ) ; try { int record = com.intellij.openapi.vfs.newvfs.persistent.FSRecords.getContentRecordId ( fileId ) ; if ( record > 0 ) com.intellij.openapi.vfs.newvfs.persistent.FSRecords.getContentStorage ( ) . acquireRecord ( record ) ; return record ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.unlock ( ) ; } }
public void setStarts ( int index , com.android.jack.dx.rop.code.RegisterSpecSet specs ) { assert specs != null ; throwIfImmutable ( ) ; try { blockStarts [ index ] = specs ; } catch ( java.lang.ArrayIndexOutOfBoundsException ex ) { throw new java.lang.IllegalArgumentException ( "bogus index" ) ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.StringLiteral x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; push ( com.android.jack.ir.impl.JackIrBuilder.getStringLiteral ( info , x.constant.stringValue ( ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public int getScanMode ( ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "getScanMode() - Not allowed for non-active user" ) ; return android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE ; } return service.getScanMode ( ) ; }
public boolean setWfdEnable ( boolean enable ) { return mSupplicantP2pIfaceHal.enableWfd ( enable ) ; }
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { copy1DRangeFromUnchecked ( off , count , ( ( java.lang.Object ) ( d ) ) , Element.DataType.SIGNED_8 , d.length ) ; }
private static void createConfiguration ( @ com.android.annotations.NonNull org.gradle.api.artifacts.ConfigurationContainer configurations , @ com.android.annotations.NonNull java.lang.String configurationName , @ com.android.annotations.NonNull java.lang.String configurationDescription ) { org.gradle.api.artifacts.Configuration configuration = configurations.findByName ( configurationName ) ; if ( configuration == null ) { configuration = configurations.create ( configurationName ) ; } }
boolean set ( long index ) { if ( ! ( get ( index ) ) ) { data [ ( ( int ) ( index > > > 6 ) ) ] |= 1L << index ; ( bitCount ) ++ ; return true ; } return false ; }
static com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute parseString ( java.lang.String value ) { java.util.regex.Matcher m = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute.REGEXP.matcher ( value ) ; if ( m.matches ( ) ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute ( m.group ( 2 ) , m.group ( 1 ) , m.group ( 3 ) ) ; } return null ; }
public static long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , android.util.MutableLong inOffset , long byteCount ) throws android.system.ErrnoException { return Libcore.os.sendfile ( outFd , inFd , inOffset , byteCount ) ; }
private static java.util.List < java.lang.String > getTargetNames ( @ org.jetbrains.annotations.NotNull git4idea.repo.GitRepository repository ) { java.util.List < git4idea.GitRemoteBranch > remoteBranches = com.intellij.util.containers.ContainerUtil.sorted ( repository.getBranches ( ) . getRemoteBranches ( ) , git4idea.push.GitPushTargetPanel.REMOTE_BRANCH_COMPARATOR ) ; return com.intellij.util.containers.ContainerUtil.map ( remoteBranches , new com.intellij.util.Function < git4idea.GitRemoteBranch , java.lang.String > ( ) { @ java.lang.Override public java.lang.String fun ( git4idea.GitRemoteBranch branch ) { return branch.getNameForRemoteOperations ( ) ; } } ) ; }
protected void readSourceFolder ( java.io.File sourceFolder , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { java.io.File [ ] folders = sourceFolder.listFiles ( ) ; if ( folders != null ) { for ( java.io.File folder : folders ) { if ( ( folder.isDirectory ( ) ) && ( ! ( isIgnored ( folder ) ) ) ) { com.android.ide.common.res2.ResourceSet.FolderData folderData = getFolderData ( folder ) ; if ( folderData != null ) { parseFolder ( sourceFolder , folder , folderData , logger ) ; } } } } }
public void testSendUuidIntent ( ) { mRemoteDevices.updateUuids ( mDevice1 ) ; if ( ( android.os.Looper.myLooper ( ) ) != null ) { android.os.Looper.myLooper ( ) . quitSafely ( ) ; } android.os.Looper.loop ( ) ; org.mockito.Mockito.verify ( mAdapterService ) . sendBroadcast ( org.mockito.Mockito.any ( ) , org.mockito.Mockito.anyString ( ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == 0 ) ) { return - 1 ; } if ( packet != null ) { packet.setReceivedLength ( byteCount ) ; packet.setAddress ( srcAddress.getAddress ( ) ) ; packet.setPort ( srcAddress.getPort ( ) ) ; } return byteCount ; }
private com.android.builder.VariantConfiguration getVariant ( ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
public void testKernelDomain ( ) throws java.io.FileNotFoundException { java.lang.String domain = "u:r:kernel:s0" ; java.util.List < android.security.cts.SELinuxDomainTest.ProcessDetails > procs = android.security.cts.SELinuxDomainTest.ProcessDetails.getProcessMap ( ) . get ( domain ) ; if ( procs != null ) { for ( android.security.cts.SELinuxDomainTest.ProcessDetails p : procs ) { assertTrue ( ( ( "Non Kernel thread \"" + p ) + "\" found!" ) , p.isKernel ( ) ) ; } } }
public void testRenderingMaxResolutionLocally ( ) throws java.lang.Throwable { android.util.Log.i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , "testRenderingMaxResolutionLocally" ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution ( ) ; if ( maxRes == null ) return ; android.util.Log.w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , ( ( ( "Trying resolution w:" + ( maxRes.first ) ) + " h:" ) + ( maxRes.second ) ) ) ; runTestRenderingInSeparateThread ( maxRes.first , maxRes.second , false , false ) ; }
void write ( java.io.PrintWriter writer ) { if ( annotations.isEmpty ( ) ) { return ; } writer.print ( " <item name=\"" ) ; writer.print ( getSignature ( ) ) ; writer.println ( "\">" ) ; for ( com.android.build.gradle.tasks.annotations.Extractor.AnnotationData annotation : annotations ) { annotation.write ( writer ) ; } writer.print ( " </item>" ) ; writer.println ( ) ; }
public void send ( byte [ ] buf , int off , int len ) throws java.io.IOException { try { recordLayer.send ( buf , off , len ) ; } catch ( org.bouncycastle.crypto.tls.TlsFatalAlert fatalAlert ) { recordLayer.fail ( fatalAlert.getAlertDescription ( ) ) ; throw fatalAlert ; } catch ( java.io.IOException e ) { recordLayer.fail ( AlertDescription.internal_error ) ; throw e ; } catch ( java.lang.RuntimeException e ) { recordLayer.fail ( AlertDescription.internal_error ) ; throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.internal_error , e ) ; } }
public int getVoiceNetworkTypeForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , "getDataNetworkTypeForSubscriber" ) ) ) { return android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.getServiceState ( ) . getVoiceNetworkType ( ) ; } else { return android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN ; } }
public static final javax.net.ssl.SSLContext createSSLContext ( final java.lang.String protocol , final javax.net.ssl.KeyManager [ ] keyManagers , final javax.net.ssl.TrustManager [ ] trustManagers ) { try { javax.net.ssl.SSLContext context = javax.net.ssl.SSLContext.getInstance ( protocol ) ; context.init ( keyManagers , trustManagers , new java.security.SecureRandom ( ) ) ; return context ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void enter ( ) { log ( ( ( ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) + ", size: " ) + ( mConnectedDevicesList.size ( ) ) ) ) ; mPhonebook.resetAtState ( ) ; mPhoneState.listenForPhoneState ( false ) ; mVoiceRecognitionStarted = false ; mWaitingForVoiceRecognition = false ; }
private void acceptUpgradeRequest ( android.content.Context context ) { com.android.incallui.call.CallList callList = com.android.incallui.InCallPresenter.getInstance ( ) . getCallList ( ) ; if ( callList == null ) { com.android.incallui.StatusBarNotifier.clearAllCallNotifications ( ) ; com.android.dialer.common.LogUtil.e ( "NotificationBroadcastReceiver.acceptUpgradeRequest" , "call list is empty" ) ; } else { com.android.incallui.call.DialerCall call = callList.getVideoUpgradeRequestCall ( ) ; if ( call != null ) { call.getVideoTech ( ) . acceptVideoRequest ( context ) ; } } }
public void testStageInstallWithErrorCode_missingTzLookupFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro stagedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( stagedDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; com.android.timezone.distro.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , 1 ) . setTzLookupXml ( null ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( incompleteDistro ) ) ; assertInstallDistroStaged ( stagedDistro ) ; assertNoInstalledDistro ( ) ; }
public void testConcurrentServerSocketCloseReliablyThrows ( ) { int numIterations = 100 ; for ( int i = 0 ; i < numIterations ; i ++ ) { checkConnectIterationAndCloseSocket ( ( ( ( "Iteration " + ( i + 1 ) ) + " of " ) + numIterations ) , 50 , 3 ) ; } }
public static javax.xml.validation.Schema getSchema ( ) throws org.xml.sax.SAXException { java.io.InputStream xsdStream = com.android.dvlib.DeviceSchema.getXsdStream ( ) ; if ( xsdStream == null ) { return null ; } javax.xml.validation.SchemaFactory factory = javax.xml.validation.SchemaFactory.newInstance ( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI ) ; javax.xml.validation.Schema schema = factory.newSchema ( new javax.xml.transform.stream.StreamSource ( xsdStream ) ) ; return schema ; }
public void run ( int i ) { android.net.Uri channelUri = channelUris.get ( i ) ; try ( android.database.Cursor cursor = mContentResolver.query ( android.media.tv.TvContract.buildProgramsUriForChannel ( channelUri , 0 , ( ( PROGRAM_DURATION_MS * TRANSACTION_SIZE ) / 2 ) ) , null , null , null , null ) ) { while ( cursor.moveToNext ( ) ) { } } }
private void compareReadLines ( @ javax.annotation.Nonnull java.io.BufferedReader referenceReader , @ javax.annotation.Nonnull java.io.BufferedReader candidateReader ) throws java.io.IOException { java.lang.String referenceLine = referenceReader.readLine ( ) ; while ( referenceLine != null ) { java.lang.String candidateLine = candidateReader.readLine ( ) ; junit.framework.Assert.assertEquals ( referenceLine , candidateLine ) ; referenceLine = referenceReader.readLine ( ) ; } junit.framework.Assert.assertNull ( candidateReader.readLine ( ) ) ; }
public static void sort ( short [ ] a , int fromIndex , int toIndex ) { java.util.Arrays.rangeCheck ( a.length , fromIndex , toIndex ) ; java.util.DualPivotQuicksort.sort ( a , fromIndex , ( toIndex - 1 ) , null , 0 , 0 ) ; }
java.lang.String normalizeWord ( java.lang.String word ) { return com.google.common.base.Ascii.toUpperCase ( word ) ; }
public void merge ( @ javax.annotation.Nonnull com.android.sched.util.log.stats.Statistic statistic ) { com.android.sched.util.log.stats.ValueImpl value = ( ( com.android.sched.util.log.stats.ValueImpl ) ( statistic ) ) ; if ( ( value.value ) != null ) { assert ( this . value ) == null : "Wrong merge of value, target=" + ( this . value ) ; this . value = value.value ; } }
public boolean addOrUpdatePasspointConfiguration ( android.net.wifi.hotspot2.PasspointConfiguration config ) { enforceChangePermission ( ) ; mLog.trace ( "addorUpdatePasspointConfiguration uid=%" ) . c ( android.os.Binder.getCallingUid ( ) ) . flush ( ) ; if ( ! ( mContext.getResources ( ) . getBoolean ( com.android.internal.R.bool.config_wifi_hotspot2_enabled ) ) ) { throw new java.lang.UnsupportedOperationException ( "Passpoint not enabled" ) ; } return mWifiStateMachine.syncAddOrUpdatePasspointConfig ( mWifiStateMachineChannel , config , android.os.Binder.getCallingUid ( ) ) ; }
public boolean processMessage ( android.os.Message message ) { logStateAndMessage ( message , this ) ; switch ( message.what ) { case com.android.server.wifi.WifiStateMachine.CMD_AUTO_CONNECT : case com.android.server.wifi.WifiStateMachine.CMD_AUTO_ROAM : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DISCARD ; break ; case android.net.wifi.WifiManager.SAVE_NETWORK : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break ; case WifiMonitor.NETWORK_DISCONNECTION_EVENT : reportConnectionAttemptEnd ( WifiMetrics.ConnectionEvent.FAILURE_NETWORK_DISCONNECTION , WifiMetricsProto.ConnectionEvent.HLF_NONE ) ; return NOT_HANDLED ; case com.android.server.wifi.WifiStateMachine.CMD_SET_HIGH_PERF_MODE : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break ; case com.android.server.wifi.WifiStateMachine.CMD_START_SCAN : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break ; default : return NOT_HANDLED ; } return HANDLED ; }
public static synchronized boolean getStoreTsStream ( android.content.Context context ) { com.android.tv.common.SoftPreconditions.checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues.getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_STORE_TS_STREAM , false ) ; } else { return com.android.tv.tuner.TunerPreferences.getSharedPreferences ( context ) . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_STORE_TS_STREAM , false ) ; } }
public java.awt.Rectangle layout ( javax.swing.JComponent c , java.awt.Rectangle bounds ) { if ( c instanceof com.intellij.execution.ui.layout.impl.Toolbar ) { bounds.height -= 5 ; return super . layout ( c , bounds ) ; } if ( c instanceof com.intellij.execution.ui.layout.impl.GridImpl ) { if ( ! ( isHideTabs ( ) ) ) { bounds.y -= 1 ; bounds.height += 1 ; } } return super . layout ( c , bounds ) ; }
private void setCallState ( android.bluetooth.BluetoothHeadsetClientCall c , int state ) { if ( state == ( c.getState ( ) ) ) { return ; } c.setState ( state ) ; sendCallChangedIntent ( c ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.AllocationExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; java.util.List < com.android.jack.ir.ast.JExpression > arguments = popCallArgs ( info , x.arguments , x.binding ) ; pushNewExpression ( info , x , null , arguments , scope ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public static com.android.tools.lint.detector.api.Issue create ( @ com.android.annotations.NonNull java.lang.String id , @ com.android.annotations.NonNull java.lang.String briefDescription , @ java.lang.SuppressWarnings ( value = "UnusedParameters" ) java.lang.String description , @ com.android.annotations.NonNull java.lang.String explanation , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Category category , int priority , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Implementation implementation ) { return new com.android.tools.lint.detector.api.Issue ( id , briefDescription , explanation , category , priority , severity , implementation ) ; }
private com.android.builder.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest ( ) { return versionName ; } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable , java.lang.Object data ) { java.lang.String description = describe ( message ) ; com.android.ide.eclipse.adt.AdtPlugin.log ( throwable , "%1$s: %2$s" , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addError ( tag , description ) ; }
public static void initLogging ( android.content.Context context ) { android.telecom.Log.setTag ( com.android.server.telecom.LogUtils.TAG ) ; android.telecom.Log.setSessionContext ( context ) ; for ( android.telecom.Logging.EventManager.TimedEventPair p : com.android.server.telecom.LogUtils.Events.Timings.sTimedEvents ) { android.telecom.Log.addRequestResponsePair ( p ) ; } android.telecom.Log.registerEventListener ( com.android.server.telecom.LogUtils :: eventRecordAdded ) ; android.telecom.Log.registerSessionListener ( Analytics :: addSessionTiming ) ; }
private void setCurrentAppType ( boolean isGsm ) { if ( com.android.internal.telephony.uicc.UiccProfile.VDBG ) com.android.internal.telephony.uicc.UiccProfile.log ( "setCurrentAppType" ) ; synchronized ( mLock ) { if ( isGsm ) { mCurrentAppType = UiccController.APP_FAM_3GPP ; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2 ; } } }
private void deleteOldFilesFromJavaFiles ( @ javax.annotation.Nonnull java.lang.String javaFileName ) throws com.android.jack.incremental.IncrementalException { java.util.List < java.lang.String > deletedTypes = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String typeNameToRemove : fileDependencies.getTypeNames ( javaFileName ) ) { if ( ! ( deletedTypes.contains ( typeNameToRemove ) ) ) { deletedTypes.add ( typeNameToRemove ) ; com.android.sched.vfs.VPath vpath = new com.android.sched.vfs.VPath ( typeNameToRemove , '/' ) ; deleteFile ( FileType.JAYCE , vpath ) ; deleteFile ( FileType.DEX , vpath ) ; } } }
public synchronized com.android.sched.vfs.BaseVFile createVFile ( @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { try { return getVFile ( name ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { com.android.sched.vfs.BaseVFile file = vfs.createVFile ( this , name ) ; map.put ( name , file ) ; return file ; } catch ( com.android.sched.util.file.NotFileException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( vfs.getVFileLocation ( this , name ) , e ) ; } }
static long native_create ( long native_src_or_zero ) { android.graphics.Matrix_Delegate newDelegate = new android.graphics.Matrix_Delegate ( ) ; if ( native_src_or_zero > 0 ) { android.graphics.Matrix_Delegate oldDelegate = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_src_or_zero ) ; if ( oldDelegate != null ) { java.lang.System.arraycopy ( oldDelegate.mValues , 0 , newDelegate.mValues , 0 , android.graphics.Matrix_Delegate.MATRIX_SIZE ) ; } } return android.graphics.Matrix_Delegate.sManager.addNewDelegate ( newDelegate ) ; }
private com.android.ide.common.resources.platform.AttrsXmlParser getParser ( com.android.ide.common.resources.ResourceFile file ) { if ( ( mParserCache ) == null ) { mParserCache = new java.util.HashMap < com.android.ide.common.resources.ResourceFile , com.android.ide.common.resources.platform.AttrsXmlParser > ( ) ; } com.android.ide.common.resources.platform.AttrsXmlParser parser = mParserCache.get ( file ) ; if ( parser == null ) { parser = new com.android.ide.common.resources.platform.AttrsXmlParser ( file.getFile ( ) . getOsLocation ( ) , com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) , 20 ) ; parser.preload ( ) ; mParserCache.put ( file , parser ) ; } return parser ; }
private void onSetInternalDataEnabled ( boolean enabled , android.os.Message onCompleteMsg ) { if ( com.android.internal.telephony.dataconnection.DcTracker.DBG ) log ( ( "onSetInternalDataEnabled: enabled=" + enabled ) ) ; boolean sendOnComplete = true ; mDataEnabledSettings.setInternalDataEnabled ( enabled ) ; if ( enabled ) { log ( "onSetInternalDataEnabled: changed to enabled, try to setup data call" ) ; onTrySetupData ( Phone.REASON_DATA_ENABLED ) ; } else { sendOnComplete = false ; log ( "onSetInternalDataEnabled: changed to disabled, cleanUpAllConnections" ) ; cleanUpAllConnections ( Phone.REASON_DATA_DISABLED , onCompleteMsg ) ; } if ( sendOnComplete ) { if ( onCompleteMsg != null ) { onCompleteMsg.sendToTarget ( ) ; } } }
public static android.renderscript.ScriptIntrinsic3DLUT create ( android.renderscript.RenderScript rs , android.renderscript.Element e ) { long id = rs.nScriptIntrinsicCreate ( 8 , e.getID ( rs ) ) ; if ( ! ( e.isCompatible ( android.renderscript.Element.U8_4 ( rs ) ) ) ) { throw new android.renderscript.RSIllegalArgumentException ( "Element must be compatible with uchar4." ) ; } return new android.renderscript.ScriptIntrinsic3DLUT ( id , rs , e ) ; }
public org.bouncycastle.asn1.ASN1Primitive toASN1Primitive ( ) { org.bouncycastle.asn1.ASN1EncodableVector v = new org.bouncycastle.asn1.ASN1EncodableVector ( ) ; v.add ( new org.bouncycastle.asn1.DEROctetString ( nonce ) ) ; if ( ( icvLen ) != 12 ) { v.add ( new org.bouncycastle.asn1.ASN1Integer ( icvLen ) ) ; } return new org.bouncycastle.asn1.DERSequence ( v ) ; }
public static java.util.Collection < com.android.jack.ir.ast.JFieldId > collectAllFieldIdsInHierarchy ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface referenceType , @ javax.annotation.Nonnull java.util.Collection < com.android.jack.ir.ast.JDefinedClassOrInterface > allTypes ) { java.util.List < com.android.jack.ir.ast.JFieldId > collectedFields = new java.util.ArrayList < com.android.jack.ir.ast.JFieldId > ( ) ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : allTypes ) { if ( ( referenceType.canBeSafelyUpcast ( type ) ) || ( type.canBeSafelyUpcast ( referenceType ) ) ) { for ( com.android.jack.ir.ast.JField field : type.getFields ( ) ) { collectedFields.add ( field.getId ( ) ) ; } } } return collectedFields ; }
synchronized android.telecom.Connection onCreateUnknownConnection ( android.bluetooth.BluetoothHeadsetClientCall call ) { android.net.Uri number = android.net.Uri.fromParts ( PhoneAccount.SCHEME_TEL , call.getNumber ( ) , null ) ; com.android.bluetooth.hfpclient.connserv.HfpClientConnection connection = mConnections.get ( call.getUUID ( ) ) ; if ( connection != null ) { connection.onAdded ( ) ; return connection ; } else { android.util.Log.e ( mTAG , ( ( "Call " + call ) + " ignored: connection does not exist" ) ) ; return null ; } }
public void testConfigRequestBuilderDefaults ( ) { android.net.wifi.nan.ConfigRequest configRequest = new android.net.wifi.nan.ConfigRequest.Builder ( ) . build ( ) ; collector.checkThat ( "mClusterHigh" , ConfigRequest.CLUSTER_ID_MAX , org.hamcrest.core.IsEqual.equalTo ( configRequest.mClusterHigh ) ) ; collector.checkThat ( "mClusterLow" , ConfigRequest.CLUSTER_ID_MIN , org.hamcrest.core.IsEqual.equalTo ( configRequest.mClusterLow ) ) ; collector.checkThat ( "mMasterPreference" , 0 , org.hamcrest.core.IsEqual.equalTo ( configRequest.mMasterPreference ) ) ; collector.checkThat ( "mSupport5gBand" , false , org.hamcrest.core.IsEqual.equalTo ( configRequest.mSupport5gBand ) ) ; }
static void freeTextLayoutCachesIfNeeded ( int configDiff ) { if ( configDiff != 0 ) { boolean hasLocaleConfigChange = ( configDiff & ( android.content.pm.ActivityInfo.CONFIG_LOCALE ) ) != 0 ; if ( hasLocaleConfigChange ) { android.graphics.Canvas.freeTextLayoutCaches ( ) ; if ( android.app.ActivityThread.DEBUG_CONFIGURATION ) android.util.Slog.v ( android.app.ActivityThread.TAG , "Cleared TextLayout Caches" ) ; } } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JType type = getTypeMap ( ) . get ( x.targetType ) ; push ( new com.android.jack.ir.ast.JClassLiteral ( info , type , javaLangClass ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public void onSdkLoaded ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( ( currentSdk != null ) && ( ( mEditedFile ) != null ) ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.LabeledStatement x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.ast.JStatement statement = pop ( x.statement ) ; if ( statement == null ) { push ( null ) ; return ; } com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; push ( new com.android.jack.ir.ast.JLabeledStatement ( info , getOrCreateLabel ( info , x.label ) , statement ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
private java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > createWpaSupplicantLoadData ( java.util.List < android.net.wifi.WifiConfiguration > configurations ) { java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configurationMap = new java.util.HashMap < > ( ) ; for ( android.net.wifi.WifiConfiguration config : configurations ) { configurationMap.put ( config.configKey ( true ) , config ) ; } return configurationMap ; }
public void test_lockJJZ_NotShared ( ) throws java.lang.Exception { final long POSITION = 100 ; final long SIZE = 200 ; fileLock = writeOnlyFileChannel.lock ( POSITION , SIZE , false ) ; assertTrue ( fileLock.isValid ( ) ) ; assertFalse ( fileLock.isShared ( ) ) ; assertSame ( writeOnlyFileChannel , fileLock.channel ( ) ) ; assertEquals ( POSITION , fileLock.position ( ) ) ; assertEquals ( SIZE , fileLock.size ( ) ) ; }
public com.android.jack.test.toolchain.JackApiV02Toolchain setWithDebugInfos ( boolean withDebugInfos ) { super . setWithDebugInfos ( withDebugInfos ) ; try { if ( withDebugInfos ) { apiV02Config.setDebugInfoLevel ( DebugInfoLevel.FULL ) ; } else { apiV02Config.setDebugInfoLevel ( DebugInfoLevel.LINES ) ; } return this ; } catch ( com.android.jack.api.v01.ConfigurationException e ) { throw new com.android.jack.test.TestConfigurationException ( e ) ; } }
public static java.io.File workspacePathToFile ( @ com.android.annotations.NonNull org.eclipse.core.runtime.IPath path ) { org.eclipse.core.resources.IWorkspaceRoot root = org.eclipse.core.resources.ResourcesPlugin.getWorkspace ( ) . getRoot ( ) ; org.eclipse.core.resources.IResource res = root.findMember ( path ) ; if ( res != null ) { org.eclipse.core.runtime.IPath location = res.getLocation ( ) ; if ( location != null ) { return location.toFile ( ) ; } return root.getLocation ( ) . append ( path ) . toFile ( ) ; } return path.toFile ( ) ; }
public int stopRssiMonitoring ( ) { return mWifiVendorHal.stopRssiMonitoring ( ) ; }
public com.android.tools.r8.utils.AndroidApp.Builder addProgramDirectory ( java.nio.file.Path directory ) throws java.io.IOException { java.io.File [ ] resources = directory.toFile ( ) . listFiles ( ( file ) -> com.android.tools.r8.utils.FileUtils.isDexFile ( file.toPath ( ) ) ) ; for ( java.io.File source : resources ) { addFile ( source.toPath ( ) , ClassKind.PROGRAM , false ) ; } java.io.File mapFile = new java.io.File ( directory.toFile ( ) , com.android.tools.r8.utils.AndroidApp.DEFAULT_PROGUARD_MAP_FILE ) ; if ( mapFile.exists ( ) ) { setProguardMapFile ( mapFile.toPath ( ) ) ; } return this ; }
public void visitMethodInsn ( final int opcode , final java.lang.String owner , final java.lang.String name , final java.lang.String desc , final boolean itf ) { cp.newMethod ( owner , name , desc , itf ) ; mv.visitMethodInsn ( opcode , owner , name , desc , itf ) ; }
public void test_equalsLjava_lang_Object ( ) { assertTrue ( "Equality test failed" , new java.lang.Character ( 'A' ) . equals ( new java.lang.Character ( 'A' ) ) ) ; assertFalse ( "Equality test failed" , new java.lang.Character ( 'A' ) . equals ( new java.lang.Character ( 'a' ) ) ) ; }
public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { com.google.common.base.Preconditions.checkArgument ( com.google.devtools.build.android.desugar.BitFlags.isSet ( access , Opcodes.ACC_INTERFACE ) ) ; com.google.common.base.Preconditions.checkState ( ( ( interfaceName ) == null ) ) ; interfaceName = name ; }
public static synchronized void setShouldShowSetupActivity ( android.content.Context context , boolean need ) { if ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) { com.android.tv.tuner.TunerPreferences.setPreference ( context , com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , need ) ; } else { com.android.tv.tuner.TunerPreferences.getSharedPreferences ( context ) . edit ( ) . putBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , need ) . apply ( ) ; } }
private static void checkStringReferences ( ) { for ( int i = 0 ; i < ( Deep.MAX_DEPTH ) ; i ++ ) { if ( ( Deep.strong [ i ] ) != ( Deep.weak [ i ] . get ( ) ) ) { java.lang.System.out.println ( ( ( ( ( ( "Deep: " + i ) + " strong=" ) + ( Deep.strong [ i ] ) ) + ", weak=" ) + ( Deep.weak [ i ] . get ( ) ) ) ) ; } } }
protected void onRoamingOff ( ) { if ( DBG ) log ( "onRoamingOff" ) ; if ( ! ( mUserDataEnabled ) ) return ; if ( ( getDataOnRoamingEnabled ( ) ) == false ) { notifyOffApnsOfAvailability ( Phone.REASON_ROAMING_OFF ) ; setupDataOnConnectableApns ( Phone.REASON_ROAMING_OFF ) ; } else { notifyDataConnection ( Phone.REASON_ROAMING_OFF ) ; } }
void logWindowList ( java.lang.String prefix ) { int N = mWindows.size ( ) ; while ( N > 0 ) { N -- ; android.util.Slog.v ( com.android.server.WindowManagerService.TAG , ( ( ( ( prefix + "#" ) + N ) + ": " ) + ( mWindows.get ( N ) ) ) ) ; } }
public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) throws java.lang.Exception { if ( ( declaredType.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return ; } session.getFileDependencies ( ) . addMappingBetweenJavaFileAndType ( declaredType.getSourceInfo ( ) . getFileName ( ) , declaredType ) ; }
private void runStackResize ( ) throws java.lang.Exception { java.lang.String stackIdStr = nextArgRequired ( ) ; int stackId = java.lang.Integer.parseInt ( stackIdStr ) ; final android.graphics.Rect bounds = getBounds ( ) ; if ( bounds == null ) { java.lang.System.err.println ( "Error: invalid input bounds" ) ; return ; } try { mAm.resizeStack ( stackId , bounds ) ; } catch ( android.os.RemoteException e ) { } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; Main.testExceptionDetailMessages ( ) ; Main.testfindVirtual ( ) ; Main.testfindStatic ( ) ; Main.testUnreflects ( ) ; Main.testAsType ( ) ; Main.testConstructors ( ) ; Main.testStringConstructors ( ) ; Main.testReturnValueConversions ( ) ; }
< T > T serialClone ( T o ) { try { java.io.ObjectInputStream ois = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( serialBytes ( o ) ) ) ; T clone = ( ( T ) ( ois.readObject ( ) ) ) ; assertSame ( o.getClass ( ) , clone.getClass ( ) ) ; return clone ; } catch ( java.lang.Throwable fail ) { threadUnexpectedException ( fail ) ; return null ; } }
public void testConfigurationUpdatesWhenResizedFromFullscreen ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
byte [ ] serialBytes ( java.lang.Object o ) { try { java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream ( bos ) ; oos.writeObject ( o ) ; oos.flush ( ) ; oos.close ( ) ; return bos.toByteArray ( ) ; } catch ( java.lang.Throwable fail ) { threadUnexpectedException ( fail ) ; return new byte [ 0 ] ; } }
public void onMessageSendFailed ( int messageId ) { android.os.Bundle mResults = new android.os.Bundle ( ) ; mResults.putInt ( "discoverySessionId" , mDiscoverySessionId ) ; mResults.putInt ( "messageId" , messageId ) ; mEventFacade.postEvent ( "WifiNanSessionOnMessageSendFailed" , mResults ) ; }
protected com.android.sdklib.internal.repository.archives.Archive [ ] initializeArchives ( java.util.Properties props , java.lang.String archiveOsPath ) { return new com.android.sdklib.internal.repository.archives.Archive [ ] { new com.android.sdklib.internal.repository.archives.Archive ( this , props , archiveOsPath ) { @ java.lang.Override public java.lang.String toString ( ) { return mTestHandle ; } } } ; }
public void exit ( ) { mIPv6TetherSvc.stop ( ) ; try { mNMService.untetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception e ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR ; android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Failed to untether interface: " + ( e.toString ( ) ) ) ) ; } configureIfaceIp ( false ) ; }
public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { visitor.visitArrayInstance ( this ) ; if ( ( mType ) == ( Type.OBJECT ) ) { for ( java.lang.Object value : getValues ( ) ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { if ( ! ( mReferencesAdded ) ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( null , this ) ; } visitor.visitLater ( this , ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) ) ; } } mReferencesAdded = true ; } }
private java.lang.String getFieldValue ( java.lang.String key , java.lang.String prefix ) { java.lang.String value = mFields.get ( key ) ; if ( ( android.text.TextUtils.isEmpty ( value ) ) || ( android.net.wifi.WifiEnterpriseConfig.EMPTY_VALUE.equals ( value ) ) ) return "" ; value = removeDoubleQuotes ( value ) ; if ( value.startsWith ( prefix ) ) { return value.substring ( prefix.length ( ) ) ; } else { return value ; } }
public void sortEnumFields ( ) { if ( ! ( areFieldsSorted ) ) { java.util.Collections.sort ( enumFields , new java.util.Comparator < com.android.jack.ir.ast.JEnumField > ( ) { @ java.lang.Override public int compare ( com.android.jack.ir.ast.JEnumField field1 , com.android.jack.ir.ast.JEnumField field2 ) { return field1.getName ( ) . compareTo ( field2.getName ( ) ) ; } } ) ; areFieldsSorted = true ; } }
public static java.lang.Package create ( com.android.sdklib.internal.repository.sources.SdkSource source , java.util.Properties props , int apiLevel , java.lang.String codename , int revision , java.lang.String license , java.lang.String description , java.lang.String descUrl , java.lang.String archiveOsPath ) { return new com.android.sdklib.internal.repository.packages.DocPackage ( source , props , apiLevel , codename , revision , license , description , descUrl , archiveOsPath ) ; }
private void disconnectProfiles ( android.bluetooth.BluetoothDevice device , java.lang.String deviceID ) { com.googlecode.android_scripting.Log.d ( ( "Disconnecting device " + device ) ) ; mA2dpProfile.a2dpDisconnect ( device ) ; mA2dpSinkProfile.a2dpSinkDisconnect ( device ) ; mHidProfile.hidDisconnect ( device ) ; mHspProfile.hspDisconnect ( device ) ; mHfpClientProfile.hfpClientDisconnect ( device ) ; mPbapClientProfile.pbapClientDisconnect ( device ) ; mPanProfile.panDisconnect ( device ) ; }
private void addRemoteTool ( com.android.sdklib.repository.FullRevision revision , com.android.sdklib.repository.FullRevision minPlatformToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newTool ( revision , minPlatformToolsRev ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , 0 ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public boolean isTtyModeSupported ( ) { android.telecom.TelecomManager telecomManager = android.telecom.TelecomManager.from ( mPhone.getContext ( ) ) ; android.telephony.TelephonyManager telephonyManager = ( ( android.telephony.TelephonyManager ) ( mPhone.getContext ( ) . getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; return telecomManager.isTtySupported ( ) ; }
public void rootsChanged ( com.intellij.openapi.roots.ModuleRootEvent event ) { java.util.Map < com.intellij.openapi.fileEditor.impl.VirtualFile , com.intellij.openapi.fileEditor.impl.NonProjectFileWritingAccessProvider.AccessStatus > files = com.intellij.openapi.fileEditor.impl.NonProjectFileWritingAccessProvider.getRegisteredFiles ( project ) ; for ( com.intellij.openapi.fileEditor.impl.VirtualFile each : new java.util.ArrayList < com.intellij.openapi.fileEditor.impl.VirtualFile > ( files.keySet ( ) ) ) { if ( isProjectFile ( each ) ) { files.remove ( each ) ; } } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JBinaryOperation binOp ) { if ( binOp instanceof com.android.jack.ir.ast.JShiftOperation ) { computeStat ( binOp , tracer.getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.SHIFT_WITH_LIT8 ) , java.lang.Byte.MIN_VALUE , java.lang.Byte.MAX_VALUE ) ; } if ( binOp instanceof com.android.jack.ir.ast.JLogicalAndBitwiseOperation ) { computeStat ( binOp , tracer.getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.LOGICAL_WITH_LIT16 ) , java.lang.Short.MIN_VALUE , java.lang.Short.MAX_VALUE ) ; } if ( binOp instanceof com.android.jack.ir.ast.JArithmeticBinaryOperation ) { computeStat ( binOp , tracer.getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.ARITHMETIC_WITH_LIT16 ) , java.lang.Short.MIN_VALUE , java.lang.Short.MAX_VALUE ) ; } return super . visit ( binOp ) ; }
static long initRaster ( long nativeBitmapOrZero ) { if ( nativeBitmapOrZero > 0 ) { android.graphics.Bitmap_Delegate bitmapDelegate = android.graphics.Bitmap_Delegate.getDelegate ( nativeBitmapOrZero ) ; android.graphics.Canvas_Delegate newDelegate = new android.graphics.Canvas_Delegate ( bitmapDelegate ) ; return android.graphics.Canvas_Delegate.sManager.addNewDelegate ( newDelegate ) ; } android.graphics.Canvas_Delegate newDelegate = new android.graphics.Canvas_Delegate ( ) ; return android.graphics.Canvas_Delegate.sManager.addNewDelegate ( newDelegate ) ; }
public void nodeDeleted ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode parent , com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode child , int previousIndex ) { if ( parent == ( mTargetNode.getNode ( ) ) ) { for ( int i = 0 , n = indices.size ( ) ; i < n ; i ++ ) { int idx = indices.get ( i ) ; if ( idx >= previousIndex ) { indices.set ( i , ( idx - 1 ) ) ; } } } }
public void testStageInstallWithErrorCode_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir ( ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( new java.io.File ( workingDir , "myFile" ) , new byte [ ] { 'a' } ) ; com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( distro ) ) ; assertInstallDistroStaged ( distro ) ; assertNoInstalledDistro ( ) ; }
public void openLibraryOrSdkSettings ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.roots.OrderEntry orderEntry ) { final com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable config = com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable.getInstance ( myProject ) ; com.intellij.openapi.options.ShowSettingsUtil.getInstance ( ) . editConfigurable ( myProject , config , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( orderEntry instanceof com.intellij.openapi.roots.JdkOrderEntry ) { config.select ( ( ( com.intellij.openapi.roots.JdkOrderEntry ) ( orderEntry ) ) . getJdk ( ) , true ) ; } else { config.select ( ( ( com.intellij.openapi.roots.LibraryOrderEntry ) ( orderEntry ) ) , true ) ; } } } ) ; }
private void doFollowReferencesTestImpl ( Main.A root , int stopAfter , int followSet , java.lang.Object asRoot , Main.Verifier v , java.lang.String additionalEnabled ) { java.lang.String [ ] lines = Main.followReferences ( heapFilter , klass , root , stopAfter , followSet , asRoot ) ; v.process ( lines , additionalEnabled , ( ( ( heapFilter ) != 0 ) || ( ( klass ) != null ) ) ) ; }
public E get ( long key , E valueIfKeyNotFound ) { int i = com.android.layoutlib.bridge.util.SparseWeakArray.binarySearch ( mKeys , 0 , mSize , key ) ; if ( ( ( i < 0 ) || ( ( mValues [ i ] ) == ( com.android.layoutlib.bridge.util.SparseWeakArray.DELETED ) ) ) || ( ( mValues [ i ] . get ( ) ) == null ) ) { return valueIfKeyNotFound ; } else { return ( ( E ) ( mValues [ i ] . get ( ) ) ) ; } }
public void bufferChanged ( java.util.List < com.android.ddmlib.logcat.LogCatMessage > addedMessages , java.util.List < com.android.ddmlib.logcat.LogCatMessage > deletedMessages ) { updateUnreadCount ( addedMessages ) ; refreshFiltersTable ( ) ; synchronized ( mLogBuffer ) { addedMessages = applyCurrentFilters ( addedMessages ) ; deletedMessages = applyCurrentFilters ( deletedMessages ) ; mLogBuffer.addAll ( addedMessages ) ; mDeletedLogCount += deletedMessages.size ( ) ; } refreshLogCatTable ( ) ; }
public void onFocusChanged ( final boolean focused , final int direction , final android.graphics.Rect previouslyFocusedRect ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onFocusChanged ( focused , direction , previouslyFocusedRect ) ; } } ) ; return ; } mAwContents.onFocusChanged ( focused , direction , previouslyFocusedRect ) ; }
public boolean visit ( org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration , org.eclipse.jdt.internal.compiler.lookup.MethodScope scope ) { org.eclipse.jdt.internal.compiler.ast.Annotation [ ] annotations = fieldDeclaration.annotations ; if ( hasRelevantAnnotations ( annotations ) ) { org.eclipse.jdt.internal.compiler.lookup.FieldBinding fieldBinding = fieldDeclaration.binding ; if ( fieldBinding == null ) { return false ; } java.lang.String fqn = com.android.build.gradle.tasks.annotations.Extractor.getFqn ( scope ) ; com.android.build.gradle.tasks.annotations.Extractor.Item item = com.android.build.gradle.tasks.annotations.Extractor.FieldItem.create ( fqn , fieldBinding ) ; if ( item != null ) { addItem ( fqn , item ) ; addAnnotations ( annotations , item ) ; } } return false ; }
private static void initFormatStringsLocked ( ) { android.content.res.Resources r = android.content.res.Resources.getSystem ( ) ; android.content.res.Configuration cfg = r.getConfiguration ( ) ; if ( ( ( android.text.format.DateUtils.sLastConfig ) == null ) || ( ! ( android.text.format.DateUtils.sLastConfig.equals ( cfg ) ) ) ) { android.text.format.DateUtils.sLastConfig = cfg ; android.text.format.DateUtils.sElapsedFormatMMSS = r.getString ( com.android.internal.R.string.elapsed_time_short_format_mm_ss ) ; android.text.format.DateUtils.sElapsedFormatHMMSS = r.getString ( com.android.internal.R.string.elapsed_time_short_format_h_mm_ss ) ; } }
private java.lang.String describe ( java.lang.String message ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; if ( message != null ) { if ( ( sb.length ( ) ) > 0 ) { sb.append ( ": " ) ; } sb.append ( message ) ; } return sb.toString ( ) ; }
public java.lang.String getModuleReference ( ) { return ':' + ( getModuleName ( ) ) ; }
public void testEndCallWithNonRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( null ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( ) ; }
public void testSendTextWithOutDesAddr ( ) { mCdmaSmsDispatcher.sendText ( null , "222" , com.android.internal.telephony.cdma.TAG , null , null , null , null , false ) ; verify ( mSimulatedCommandsVerifier , times ( 0 ) ) . sendImsGsmSms ( anyString ( ) , anyString ( ) , anyInt ( ) , anyInt ( ) , any ( android.os.Message.class ) ) ; }
private java.util.Map.Entry < K , V2 > transformEntry ( @ javax.annotation.Nullable java.util.Map.Entry < K , V1 > entry ) { return entry == null ? null : com.google.common.collect.Maps.transformEntry ( transformer , entry ) ; }
public com.android.jack.dx.dex.file.TypeIdItem intern ( com.android.jack.dx.rop.type.Type type ) { assert type != null ; throwIfPrepared ( ) ; com.android.jack.dx.dex.file.TypeIdItem result = typeIds.get ( type ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.TypeIdItem ( type ) ; typeIds.put ( type , result ) ; } return result ; }
private void _test ( java.lang.String localeName ) throws java.io.IOException , org.xml.sax.SAXException { java.io.File f = new java.io.File ( android.icu.dev.test.cldr.TestCLDRVsICU.CLDR_DIRECTORY , ( ( "test/" + localeName ) + ".xml" ) ) ; logln ( ( "Testing " + ( f.getCanonicalPath ( ) ) ) ) ; SAX.parse ( f , DEFAULT_HANDLER ) ; }
public void testWakeLockTimeout ( ) throws java.lang.Exception { invokeMethod ( mRILInstance , "obtainRequest" , new java.lang.Class < ? > [ ] { java.lang.Integer.TYPE , android.os.Message.class , android.os.WorkSource.class } , new java.lang.Object [ ] { com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SIM_STATUS , obtainMessage ( ) , null } ) ; junit.framework.Assert.assertTrue ( mRILInstance.getWakeLock ( RIL.FOR_WAKELOCK ) . isHeld ( ) ) ; waitForHandlerActionDelayed ( mRilHandler , 10 , com.android.internal.telephony.RILTest.DEFAULT_WAKE_LOCK_TIMEOUT_MS ) ; junit.framework.Assert.assertFalse ( mRILInstance.getWakeLock ( RIL.FOR_WAKELOCK ) . isHeld ( ) ) ; }
public java.lang.String toString ( ) { return original.toString ( ) ; }
public boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "disconnect()" ) ; } com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) { return false ; } service.disconnect ( device ) ; return true ; }
public void getProperty_unknown ( ) throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock.createMock ( com.android.ddmlib.IDevice.class ) ; injectShellResponse ( mockDevice , com.android.ddmlib.PropertyFetcherTest.GETPROP_RESPONSE ) ; org.easymock.EasyMock.replay ( mockDevice ) ; com.android.ddmlib.PropertyFetcher fetcher = new com.android.ddmlib.PropertyFetcher ( mockDevice ) ; org.junit.Assert.assertNull ( fetcher.getProperty ( "unknown" ) . get ( ) ) ; }
private java.lang.String verifyMeasurements ( float ... expectations ) throws java.lang.Throwable { java.lang.Thread.sleep ( 500 ) ; android.hardware.cts.helpers.TestSensorEnvironment environment = new android.hardware.cts.helpers.TestSensorEnvironment ( getApplicationContext ( ) , android.hardware.Sensor.TYPE_ACCELEROMETER , android.hardware.SensorManager.SENSOR_DELAY_FASTEST ) ; android.hardware.cts.helpers.sensoroperations.TestSensorOperation verifyMeasurements = android.hardware.cts.helpers.sensoroperations.TestSensorOperation.createOperation ( environment , 100 ) ; verifyMeasurements.addVerification ( new android.hardware.cts.helpers.sensorverification.MeanVerification ( expectations , new float [ ] { 1.95F , 1.95F , 1.95F } , new float [ ] { 1.95F , 1.95F , 1.95F } ) ) ; verifyMeasurements.execute ( getCurrentTestNode ( ) ) ; return null ; }
public void test_markSupported ( ) throws java.io.IOException { java.io.InputStream is = new java.io.ByteArrayInputStream ( new byte [ 10 ] ) ; try ( java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream ( is ) ) { assertFalse ( iis.markSupported ( ) ) ; assertTrue ( is.markSupported ( ) ) ; } }
private static android.net.Uri getVoicemailRingtoneUri ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle handle ) { if ( handle == null ) { com.android.dialer.common.LogUtil.i ( "VisualVoicemailNotifier.getVoicemailRingtoneUri" , "null handle, getting fallback" ) ; handle = com.android.dialer.app.calllog.VisualVoicemailNotifier.getFallbackAccount ( context ) ; if ( handle == null ) { com.android.dialer.common.LogUtil.i ( "VisualVoicemailNotifier.getVoicemailRingtoneUri" , "no fallback handle, using null (default) ringtone" ) ; return null ; } } return context.getSystemService ( android.telephony.TelephonyManager.class ) . getVoicemailRingtoneUri ( handle ) ; }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getClient = " + ( mService.getRemoteDevice ( ) ) ) ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) { return null ; } return service.getRemoteDevice ( ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "getConnectedDevices()" ) ; } com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; } return service.getConnectedDevices ( ) ; }
public boolean unlock ( int userId , java.lang.String password ) { try { mError = mBinder.unlock ( userId , password ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public boolean getScanCapabilities ( com.android.server.wifi.WifiNative.ScanCapabilities capabilities ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { return ( isHalStarted ( ) ) && ( com.android.server.wifi.WifiNative.getScanCapabilitiesNative ( com.android.server.wifi.WifiNative.sWlan0Index , capabilities ) ) ; } }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed ( ) ) ; try { return loadVDir ( parent , name ) ; } catch ( com.android.sched.util.file.NotDirectoryException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( getVDirLocation ( parent , name ) , e ) ; } }
public android.os.Bundle sendWallpaperCommand ( android.os.IBinder window , java.lang.String action , int x , int y , int z , android.os.Bundle extras , boolean sync ) { synchronized ( mWindowMap ) { long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return sendWindowWallpaperCommandLocked ( windowForClientLocked ( this , window , true ) , action , x , y , z , extras , sync ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public static org.bouncycastle.crypto.Digest clonePRFHash ( int prfAlgorithm , org.bouncycastle.crypto.Digest hash ) { switch ( prfAlgorithm ) { case PRFAlgorithm.tls_prf_legacy : return new org.bouncycastle.crypto.tls.CombinedHash ( ( ( org.bouncycastle.crypto.tls.CombinedHash ) ( hash ) ) ) ; default : return org.bouncycastle.crypto.tls.TlsUtils.cloneHash ( org.bouncycastle.crypto.tls.TlsUtils.getHashAlgorithmForPRFAlgorithm ( prfAlgorithm ) , hash ) ; } }
public void testAppIdleNetworkAccess_whenCharging ( ) throws java.lang.Exception { if ( ! ( isSupported ( ) ) ) return ; setAppIdle ( true ) ; assertBackgroundNetworkAccess ( false ) ; turnBatteryOn ( ) ; assertBackgroundNetworkAccess ( true ) ; turnBatteryOff ( ) ; assertBackgroundNetworkAccess ( false ) ; setAppIdle ( false ) ; assertBackgroundNetworkAccess ( true ) ; setBatterySaverMode ( true ) ; assertBackgroundNetworkAccess ( false ) ; setBatterySaverMode ( false ) ; turnBatteryOn ( ) ; assertBackgroundNetworkAccess ( true ) ; turnBatteryOff ( ) ; assertBackgroundNetworkAccess ( true ) ; }
public void visitBranchInstruction ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , int offset , proguard.classfile.editor.BranchInstruction branchInstruction ) { branchInstruction.branchOffset = newBranchOffset ( offset , branchInstruction.branchOffset , newOffset ) ; instructionWriter.visitBranchInstruction ( clazz , method , codeAttribute , newOffset , branchInstruction ) ; newOffset += branchInstruction.length ( newOffset ) ; }
private static void checkService ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( com.android.tools.lint.checks.SecurityDetector.getExported ( element ) ) && ( com.android.tools.lint.checks.SecurityDetector.isUnprotectedByPermission ( element ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_SERVICE , element , context.getLocation ( element ) , "Exported service does not require permission" ) ; } }
static void native_setScale ( long native_object , float sx , float sy ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return ; } d.mValues [ 0 ] = sx ; d.mValues [ 1 ] = 0 ; d.mValues [ 2 ] = 0 ; d.mValues [ 3 ] = 0 ; d.mValues [ 4 ] = sy ; d.mValues [ 5 ] = 0 ; d.mValues [ 6 ] = 0 ; d.mValues [ 7 ] = 0 ; d.mValues [ 8 ] = 1 ; }
private boolean isUidIdle ( int uid ) { final java.lang.String [ ] packages = mContext.getPackageManager ( ) . getPackagesForUid ( uid ) ; final int userId = android.os.UserHandle.getUserId ( uid ) ; if ( packages != null ) { for ( java.lang.String packageName : packages ) { if ( ! ( mUsageStats.isAppIdle ( packageName , uid , userId ) ) ) { return false ; } } } return true ; }
public void setUp ( ) throws java.lang.Exception { mSnapshot = new com.android.tools.perflib.heap.Snapshot ( new com.android.tools.perflib.heap.io.InMemoryBuffer ( 10 ) ) ; mSnapshot.setHeapTo ( 13 , "testHeap" ) ; mDummyClass.setFields ( new com.android.tools.perflib.heap.Field [ 0 ] ) ; mSnapshot.addClass ( 42 , mDummyClass ) ; }
private static int maybeThrowAfterSendto ( boolean isDatagram , libcore.io.ErrnoException errnoException ) throws java.net.SocketException { if ( isDatagram ) { if ( ( ( errnoException.errno ) == ( ECONNRESET ) ) || ( ( errnoException.errno ) == ( ECONNREFUSED ) ) ) { return 0 ; } } else { if ( ( errnoException.errno ) == ( EAGAIN ) ) { return 0 ; } } throw errnoException.rethrowAsSocketException ( ) ; }
private void stopRtt ( java.lang.String callId ) { android.telecom.Log.d ( this , "stopRtt(%s)" , callId ) ; if ( mConnectionById.containsKey ( callId ) ) { findConnectionForAction ( callId , "stopRtt" ) . onStopRtt ( ) ; } else if ( mConferenceById.containsKey ( callId ) ) { android.telecom.Log.w ( this , "stopRtt called on a conference." ) ; } }
public static java.util.List < com.android.sdklib.devices.Device > parse ( @ com.android.annotations.NonNull java.io.File devicesFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.InputStream stream = new java.io.FileInputStream ( devicesFile ) ; return com.android.sdklib.devices.DeviceParser.parseImpl ( stream , devicesFile.getAbsoluteFile ( ) . getParentFile ( ) ) ; }
public java.security.PublicKey getPublicKey ( ) throws java.security.NoSuchAlgorithmException { switch ( org.conscrypt.NativeCrypto.EVP_PKEY_type ( ctx ) ) { case NativeCrypto.EVP_PKEY_RSA : return new org.conscrypt.OpenSSLRSAPublicKey ( this ) ; case NativeCrypto.EVP_PKEY_EC : return new org.conscrypt.OpenSSLECPublicKey ( this ) ; default : throw new java.security.NoSuchAlgorithmException ( "unknown PKEY type" ) ; } }
public boolean canHandle ( java.lang.String path , java.lang.String mimeType ) { if ( ( ( null == path ) || ( path.equals ( "" ) ) ) && ( ( null == mimeType ) || ( mimeType.equals ( "" ) ) ) ) { throw new java.lang.IllegalArgumentException ( "Path or the mimetype should be non null" ) ; } return _canHandle ( mUniqueId , path , mimeType ) ; }
public void testConnectFailureDueToNetworkAddFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; setupMocksForConnectSequence ( false ) ; org.mockito.Mockito.doAnswer ( new android.app.test.MockAnswerUtil.AnswerWithArguments ( ) { public void answer ( ISupplicantStaIface.addNetworkCallback cb ) throws android.os.RemoteException { cb.onValues ( mStatusFailure , org.mockito.Mockito.mock ( android.hardware.wifi.supplicant.V1_0.ISupplicantStaNetwork.class ) ) ; return ; } } ) . when ( mISupplicantStaIfaceMock ) . addNetwork ( org.mockito.Matchers.any ( ISupplicantStaIface.addNetworkCallback.class ) ) ; assertFalse ( mDut.connectToNetwork ( new android.net.wifi.WifiConfiguration ( ) ) ) ; }
public void setHotspotBounds ( int left , int top , int right , int bottom ) { if ( ( mHotspotBounds ) == null ) { mHotspotBounds = new android.graphics.Rect ( left , top , right , bottom ) ; } else { mHotspotBounds.set ( left , top , right , bottom ) ; } if ( ( mCurrDrawable ) != null ) { mCurrDrawable.setHotspotBounds ( left , top , right , bottom ) ; } }
public boolean enableNoAutoConnect ( ) { if ( isEnabled ( ) ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enableNoAutoConnect(): BT already enabled!" ) ; return true ; } try { return mManagerService.enableNoAutoConnect ( android.app.ActivityThread.currentPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public static void setFloat ( java.lang.Object array , int index , float f ) throws java.lang.ArrayIndexOutOfBoundsException , java.lang.IllegalArgumentException { if ( array instanceof float [ ] ) { ( ( float [ ] ) ( array ) ) [ index ] = f ; } else if ( array instanceof double [ ] ) { ( ( double [ ] ) ( array ) ) [ index ] = f ; } else { throw java.lang.reflect.Array.badArray ( array ) ; } }
void doUnbind ( ) { if ( ( mService ) != null ) { mService = null ; try { mContext.unbindService ( mConnection ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Log.e ( android.bluetooth.BluetoothHidDevice.TAG , "Unable to unbind HidDevService" , e ) ; } } }
public boolean remove ( java.lang.Object o ) { if ( ! ( o instanceof java.util.Map.Entry ) ) return false ; java.util.Map.Entry < ? , ? > entry = ( ( java.util.Map.Entry < ? , ? > ) ( o ) ) ; return removeMapping ( entry.getKey ( ) , entry.getValue ( ) ) ; }
public void run ( ) { android.webkit.WebViewProviderResponse threadResponse = mWebViewUpdateServiceImpl.waitForAndGetProvider ( ) ; org.junit.Assert.assertEquals ( WebViewFactory.LIBLOAD_SUCCESS , threadResponse.status ) ; org.junit.Assert.assertEquals ( secondPackage , threadResponse.packageInfo.packageName ) ; org.mockito.Mockito.verify ( mTestSystemImpl ) . killPackageDependents ( org.mockito.Mockito.eq ( firstPackage ) ) ; countdown.countDown ( ) ; }
public void onResume ( ) { super . onResume ( ) ; com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( ( "onResume - mIsResponseSent[" + ( mIsResponseSent ) ) + "], slot id: " ) + ( mSlotId ) ) ) ; startTimeOut ( ) ; if ( mIsResponseSent ) { cancelTimeOut ( ) ; finish ( ) ; } }
public synchronized void onServiceConnected ( android.content.ComponentName className , android.os.IBinder service ) { mSecureElementService = ISecureElementService.Stub.asInterface ( service ) ; if ( ( mSEListener ) != null ) { mSEListener.onServiceConnected ( ) ; } android.util.Log.i ( android.se.omapi.SEService.TAG , "Service onServiceConnected" ) ; }
public java.lang.Object getTargetSdkVersion ( @ com.android.annotations.NonNull java.io.File manifestFile ) { try { return com.android.xml.AndroidManifest.getTargetSdkVersion ( new com.android.io.FileWrapper ( manifestFile ) ) ; } catch ( javax.xml.xpath.XPathExpressionException e ) { } catch ( com.android.io.StreamException e ) { throw new java.lang.RuntimeException ( e ) ; } return - 1 ; }
public com.android.jack.dx.dex.file.FieldIdItem intern ( com.android.jack.dx.rop.cst.CstFieldRef field ) { assert field != null ; throwIfPrepared ( ) ; com.android.jack.dx.dex.file.FieldIdItem result = fieldIds.get ( field ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.FieldIdItem ( field ) ; fieldIds.put ( field , result ) ; } return result ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method.isNative ( ) ) || ( method.isAbstract ( ) ) ) || ( ! ( filter.accept ( this . getClass ( ) , method ) ) ) ) { return ; } solve ( method ) ; checker.check ( method ) ; }
private void closeEffects ( ) { android.util.Log.v ( com.android.camera.VideoCamera.TAG , "Closing effects" ) ; mEffectType = EffectsRecorder.EFFECT_NONE ; if ( ( mEffectsRecorder ) == null ) { android.util.Log.d ( com.android.camera.VideoCamera.TAG , "Effects are already closed. Nothing to do" ) ; return ; } mEffectsRecorder.release ( ) ; mEffectsRecorder = null ; }
public void test_d2i_SSL_SESSION ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_SSL_SESSION ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } assertEquals ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_SSL_SESSION ( new byte [ 0 ] ) ) ; assertEquals ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_SSL_SESSION ( new byte [ 1 ] ) ) ; }
public boolean equals ( java.lang.Object ob ) { if ( ob == ( this ) ) return true ; if ( ! ( ob instanceof sun.nio.fs.UnixFileStore ) ) return false ; sun.nio.fs.UnixFileStore other = ( ( sun.nio.fs.UnixFileStore ) ( ob ) ) ; return ( ( ( this . dev ) == ( other.dev ) ) && ( java.util.Arrays.equals ( this . entry.dir ( ) , other.entry.dir ( ) ) ) ) && ( this . entry.name ( ) . equals ( other.entry.name ( ) ) ) ; }
private static com.android.server.wifi.WifiConfigStore.StoreFile createFile ( java.io.File storeBaseDir ) { java.io.File storeDir = new java.io.File ( storeBaseDir , com.android.server.wifi.WifiConfigStore.STORE_DIRECTORY_NAME ) ; if ( ! ( storeDir.exists ( ) ) ) { if ( ! ( storeDir.mkdir ( ) ) ) { android.util.Log.w ( com.android.server.wifi.WifiConfigStore.TAG , ( "Could not create store directory " + storeDir ) ) ; } } return new com.android.server.wifi.WifiConfigStore.StoreFile ( new java.io.File ( storeDir , com.android.server.wifi.WifiConfigStore.STORE_FILE_NAME ) ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , java.lang.Object array ) { try { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFrom" ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; } finally { android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , long [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 8 ) ) ; }
public < T > T record ( @ com.android.annotations.NonNull com.android.builder.profile.ExecutionType executionType , @ com.android.annotations.NonNull com.android.builder.profile.Block < T > block , @ com.android.annotations.NonNull java.util.List < com.android.builder.profile.Property > properties ) { try { return block.call ( ) ; } catch ( java.lang.Exception e ) { block.handleException ( e ) ; } return null ; }
public void testGetMergedDocument ( ) { com.android.manifmerger.XmlDocument xmlDocument = new com.android.manifmerger.XmlDocument ( mSourceLocation , mKeyResolver , mPropertyResolver , mElement , XmlDocument.Type.MAIN , com.google.common.base.Optional.< java.lang.String > absent ( ) ) ; com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder ( mLoggerMock ) . setMergedDocument ( xmlDocument ) . build ( ) ; assertTrue ( mergingReport.getMergedDocument ( ) . isPresent ( ) ) ; assertEquals ( xmlDocument , mergingReport.getMergedDocument ( ) . get ( ) ) ; }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules ( ) throws java.io.IOException { com.google.currysrc.api.process.Rule [ ] repackageRules = com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ; com.google.currysrc.api.process.Rule [ ] apiDocsRules = new com.google.currysrc.api.process.Rule [ ] { com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createReplaceSelectedJavadocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( com.android.icu4j.srcgen.Icu4jTransform.ORIGINAL_ICU_PACKAGE , com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU_PACKAGE ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHidePublicClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideOriginalDeprecatedClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.HideDraftProvisionalInternal ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createFixupBidiClassDocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.RemoveJavaDocTags ( "@stable" , "@draft" , "@provisional" , "@internal" , "@since" ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.ReplaceIcuTags ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createTranslateJciteInclusionRule ( ) } ; java.util.List < com.google.currysrc.api.process.Rule > rulesList = com.google.common.collect.Lists.newArrayList ( repackageRules ) ; rulesList.addAll ( java.util.Arrays.asList ( apiDocsRules ) ) ; return rulesList ; }
private java.lang.String localeIdName ( java.lang.String localeId ) { if ( ( nameLength ) == ( android.icu.text.DisplayContext.LENGTH_SHORT ) ) { java.lang.String locIdName = langData.get ( "Languages%short" , localeId ) ; if ( ( locIdName != null ) && ( ! ( locIdName.equals ( localeId ) ) ) ) { return locIdName ; } } return langData.get ( "Languages" , localeId ) ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; merger.writeBlobTo ( folder ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger ( ) ; loadedMerger.loadFromBlob ( folder , true ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public void copyTo ( float [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyTo" ) ; validateIsFloat32 ( ) ; mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , d , Element.DataType.FLOAT_32 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private boolean acquireWakeLock ( java.lang.String lockName ) { synchronized ( this ) { if ( ( mWakeLock ) == null ) { mWakeLockName = lockName ; mWakeLock = mPowerManager.newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , lockName ) ; } if ( ! ( mWakeLock.isHeld ( ) ) ) mWakeLock.acquire ( ) ; } return true ; }
public boolean onPrepareOptionsMenu ( com.android.internal.telephony.cat.Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; boolean mainVisible = false ; if ( ( ( mState ) == ( com.android.stk.StkMenuActivity.STATE_SECONDARY ) ) && ( mAcceptUsersInput ) ) { mainVisible = true ; } menu.findItem ( StkApp.MENU_ID_END_SESSION ) . setVisible ( mainVisible ) ; return mainVisible ; }
private void runConfigMatchTest ( java.lang.String refConfig , int resultIndex , java.lang.String ... configs ) { com.android.ide.common.resources.configuration.FolderConfiguration reference = com.android.ide.common.resources.configuration.FolderConfiguration.getConfig ( com.android.ide.common.resources.configuration.FolderConfigurationTest.getFolderSegments ( refConfig ) ) ; assertNotNull ( reference ) ; java.util.List < ? extends com.android.ide.common.resources.configuration.Configurable > list = getConfigurable ( configs ) ; com.android.ide.common.resources.configuration.Configurable match = reference.findMatchingConfigurable ( list ) ; assertEquals ( resultIndex , list.indexOf ( match ) ) ; }
public void testWifiFeature ( ) throws java.lang.Exception { if ( ! ( mPackageManager.hasSystemFeature ( PackageManager.FEATURE_WIFI ) ) ) { return ; } boolean enabled = mWifiManager.isWifiEnabled ( ) ; try { assertTrue ( mWifiManager.setWifiEnabled ( ( ! enabled ) ) ) ; } finally { mWifiManager.setWifiEnabled ( enabled ) ; } }
public void testSingleSequentialUpdate ( ) throws java.lang.Exception { final long fileSize = android.filesystem.cts.FileUtil.getFileSizeExceedingMemory ( getContext ( ) , android.filesystem.cts.SequentialRWTest.BUFFER_SIZE ) ; if ( fileSize == 0 ) { return ; } final int NUMBER_REPETITION = 3 ; java.lang.String streamName = "test_single_sequential_update" ; android.filesystem.cts.FileUtil.doSequentialUpdateTest ( getContext ( ) , android.filesystem.cts.SequentialRWTest.DIR_SEQ_UPDATE , fileSize , android.filesystem.cts.SequentialRWTest.BUFFER_SIZE , NUMBER_REPETITION , android.filesystem.cts.SequentialRWTest.REPORT_LOG_NAME , streamName ) ; }
protected org.eclipse.swt.widgets.Control createControl ( org.eclipse.swt.widgets.Composite parent ) { org.eclipse.swt.widgets.Composite c = new org.eclipse.swt.widgets.Composite ( parent , org.eclipse.swt.SWT.NONE ) ; c.setLayout ( new org.eclipse.swt.layout.GridLayout ( 1 , false ) ) ; c.setLayoutData ( new org.eclipse.swt.layout.GridData ( org.eclipse.swt.layout.GridData.FILL_BOTH ) ) ; createControlsSection ( c ) ; createDetailsSection ( c ) ; clientSelected ( ) ; return c ; }
private static javax.swing.Icon [ ] findStepIcons ( java.lang.String prefix ) { javax.swing.Icon [ ] icons = new javax.swing.Icon [ icons.GoogleCloudToolsIcons.STEPS_COUNT ] ; for ( int i = 0 ; i < ( icons.GoogleCloudToolsIcons.STEPS_COUNT ) ; i ++ ) { icons [ i ] = com.intellij.openapi.util.IconLoader.getIcon ( ( ( prefix + ( i + 1 ) ) + ".png" ) ) ; } return icons ; }
public void push ( final float value ) { int bits = java.lang.Float.floatToIntBits ( value ) ; if ( ( ( bits == 0L ) || ( bits == 1065353216 ) ) || ( bits == 1073741824 ) ) { mv.visitInsn ( ( ( org.objectweb.asm.Opcodes.FCONST_0 ) + ( ( int ) ( value ) ) ) ) ; } else { mv.visitLdcInsn ( value ) ; } }
private boolean isNetworkInConfigStoreData ( android.net.wifi.WifiConfiguration configuration , com.android.server.wifi.WifiConfigStoreData storeData ) { boolean foundNetworkInStoreData = false ; for ( android.net.wifi.WifiConfiguration retrievedConfig : storeData.getConfigurations ( ) ) { if ( retrievedConfig.configKey ( ) . equals ( configuration.configKey ( ) ) ) { foundNetworkInStoreData = true ; break ; } } return foundNetworkInStoreData ; }
public boolean disconnect ( android.bluetooth.BluetoothDevice device ) { android.bluetooth.BluetoothPbap.log ( "disconnect()" ) ; final android.bluetooth.IBluetoothPbap service = mService ; if ( service == null ) { android.util.Log.w ( android.bluetooth.BluetoothPbap.TAG , "Proxy not attached to service" ) ; return false ; } try { service.disconnect ( device ) ; return true ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPbap.TAG , e.toString ( ) ) ; } return false ; }
private boolean waitForObject ( ) { while ( true ) { java.lang.Object object = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject ; if ( object != null ) { return true ; } synchronized ( this ) { try { wait ( ) ; } catch ( java.lang.InterruptedException e ) { return false ; } } } }
public void testIndividualNativeFields ( ) { android.net.UidRange original = new android.net.UidRange ( 286348920 , 572670753 ) ; byte [ ] originalBytes = android.net.UidRangeTest.marshall ( original ) ; org.junit.Assert.assertEquals ( original.start , android.net.UidRangeTest.getStart ( originalBytes ) ) ; org.junit.Assert.assertEquals ( original.stop , android.net.UidRangeTest.getStop ( originalBytes ) ) ; }
public java.lang.Boolean bluetoothToggleState ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "enabled" ) java.lang.Boolean enabled , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "prompt" , description = "Prompt the user to confirm changing the Bluetooth state." ) java.lang.Boolean prompt ) { mService.registerReceiver ( mStateReceiver , new android.content.IntentFilter ( android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED ) ) ; if ( enabled == null ) { enabled = ! ( bluetoothCheckState ( ) ) ; } if ( enabled ) { return mBluetoothAdapter.enable ( ) ; } else { shutdown ( ) ; return mBluetoothAdapter.disable ( ) ; } }
private void addStreamToTests ( com.android.cts.verifier.ArrayTestListAdapter streams , com.android.cts.verifier.streamquality.StreamingVideoActivity.Stream stream ) { android.content.Intent i = new android.content.Intent ( this , com.android.cts.verifier.streamquality.PlayVideoActivity.class ) ; i.putExtra ( PlayVideoActivity.EXTRA_STREAM , stream ) ; streams.add ( com.android.cts.verifier.TestListAdapter.TestListItem.newTest ( stream.name , com.android.cts.verifier.streamquality.PlayVideoActivity.getTestId ( stream.code ) , i , null ) ) ; }
public void stopHal ( ) { mWifiVendorHal.stopVendorHal ( ) ; }
private static java.nio.file.Path createAndRegisterLambdaDumpDirectory ( ) throws java.io.IOException { java.lang.String propertyValue = java.lang.System.getProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY ) ; if ( propertyValue != null ) { return java.nio.file.Paths.get ( propertyValue ) ; } java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; return dumpDirectory ; }
public void testPrimaryOtherPackageWriteAccess ( ) throws java.lang.Exception { final java.io.File ourCache = getContext ( ) . getExternalCacheDir ( ) ; final java.io.File otherCache = new java.io.File ( ourCache.getAbsolutePath ( ) . replace ( getContext ( ) . getPackageName ( ) , com.android.cts.externalstorageapp.CommonExternalStorageTest.PACKAGE_NONE ) ) ; com.android.cts.externalstorageapp.CommonExternalStorageTest.deleteContents ( otherCache ) ; assertTrue ( otherCache.mkdirs ( ) ) ; com.android.cts.externalstorageapp.CommonExternalStorageTest.assertDirReadWriteAccess ( otherCache ) ; }
private void evaluateBinding ( java.lang.String carrierPackageName , boolean forceUnbind ) { for ( com.android.internal.telephony.CarrierServiceBindHelper.AppBinding appBinding : mBindings ) { java.lang.String appBindingPackage = appBinding.getPackage ( ) ; boolean isBindingForPackage = carrierPackageName.equals ( appBindingPackage ) ; if ( isBindingForPackage ) { com.android.internal.telephony.CarrierServiceBindHelper.log ( ( carrierPackageName + " changed and corresponds to a phone. Rebinding." ) ) ; } if ( ( appBindingPackage == null ) || isBindingForPackage ) { if ( forceUnbind ) { appBinding.unbind ( true ) ; } appBinding.rebind ( ) ; } } }
static com.android.ide.common.res2.ResourceMerger.MergedResourceItem getMergedResourceItem ( @ com.android.annotations.NonNull org.w3c.dom.Node node , @ com.android.annotations.NonNull java.lang.String qualifiers ) { com.android.resources.ResourceType type = com.android.ide.common.res2.ValueResourceParser2.getType ( node , null ) ; java.lang.String name = com.android.ide.common.res2.ValueResourceParser2.getName ( node ) ; if ( ( name != null ) && ( type != null ) ) { return new com.android.ide.common.res2.ResourceMerger.MergedResourceItem ( name , type , qualifiers , node ) ; } return null ; }
public boolean inDaylightTime ( java.util.Date time ) { long when = time.getTime ( ) ; long unix = when / 1000 ; int transition = java.util.Arrays.binarySearch ( mTransitions , unix ) ; if ( transition < 0 ) { transition = ( ~ transition ) - 1 ; if ( transition < 0 ) { return false ; } } return ( mIsDsts [ ( ( mTypes [ transition ] ) & 255 ) ] ) == 1 ; }
private static com.android.jack.ir.ast.JMethodIdWide getStaticMethodOrReportFailure ( com.android.jack.ir.ast.JClass cls , java.lang.String name , java.lang.String prop ) { try { return cls.getMethodIdWide ( name , java.util.Collections.< com.android.jack.ir.ast.JType > emptyList ( ) , MethodKind.STATIC ) ; } catch ( java.lang.Throwable e ) { com.android.jack.Jack.getSession ( ) . getReporter ( ) . report ( Severity.FATAL , new com.android.jack.transformations.ast.BoostLockedRegionPriority.BadBoostLockedRegionPriorityConfigurationException ( prop , e ) ) ; com.android.jack.Jack.getSession ( ) . abortEventually ( ) ; return null ; } }
public com.android.layoutlib.api.LayoutScene render ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiDocumentNode model , int width , int height , java.util.Set < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > explodeNodes , boolean transparentBackground ) { if ( ! ( ensureFileValid ( ) ) ) { return null ; } if ( ! ( ensureModelValid ( model ) ) ) { return null ; } com.android.ide.common.layoutlib.LayoutLibrary layoutLib = getReadyLayoutLib ( true ) ; org.eclipse.core.resources.IProject iProject = mEditedFile.getProject ( ) ; return renderWithBridge ( iProject , model , layoutLib , width , height , explodeNodes , transparentBackground ) ; }
public void run ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator ) { indicator.setIndeterminate ( true ) ; if ( ! ( indicator instanceof com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ) { return ; } ( ( com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ( indicator ) ) . addStateDelegate ( new com.intellij.openapi.progress.util.ProgressIndicatorBase ( ) { @ java.lang.Override public void cancel ( ) { assert ( uiFacade ) != null ; uiFacade.stop ( ) ; super . cancel ( ) ; } } ) ; loggedIn = state.logInWithLocalServer ( message ) ; }
private void setNetworkRestriction ( ) { mRestrictedNetworkOverride = false ; boolean noRestrictedRequests = true ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts.keySet ( ) ) { noRestrictedRequests &= apnContext.hasNoRestrictedRequests ( true ) ; } if ( noRestrictedRequests ) { return ; } if ( ! ( mApnSetting.isMetered ( mPhone.getContext ( ) , mPhone.getSubId ( ) , mPhone.getServiceState ( ) . getDataRoaming ( ) ) ) ) { return ; } mRestrictedNetworkOverride = ! ( mDct.isDataEnabled ( ) ) ; }
public void testSendTextWithOutDesAddr ( ) { mCdmaSmsDispatcher.sendText ( null , "222" , com.android.internal.telephony.cdma.TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; verify ( mSimulatedCommandsVerifier , times ( 0 ) ) . sendImsGsmSms ( anyString ( ) , anyString ( ) , anyInt ( ) , anyInt ( ) , any ( android.os.Message.class ) ) ; }
private static boolean showOutgoingVideo ( android.content.Context context , int videoState , int sessionModificationState ) { if ( ! ( com.android.incallui.videotech.utils.VideoUtils.hasCameraPermissionAndShownPrivacyToast ( context ) ) ) { com.android.dialer.common.LogUtil.i ( "VideoCallPresenter.showOutgoingVideo" , "Camera permission is disabled by user." ) ; return false ; } return ( android.telecom.VideoProfile.isTransmissionEnabled ( videoState ) ) || ( com.android.incallui.VideoCallPresenter.isVideoUpgrade ( sessionModificationState ) ) ; }
private void addThrow ( @ org.jetbrains.annotations.NonNls java.lang.String throwableClass , @ org.jetbrains.annotations.NonNls java.lang.String ctorSignature , java.lang.String message ) { mv.visitTypeInsn ( Opcodes.NEW , throwableClass ) ; mv.visitInsn ( Opcodes.DUP ) ; mv.visitLdcInsn ( message ) ; mv.visitMethodInsn ( Opcodes.INVOKESPECIAL , throwableClass , "<init>" , ctorSignature , false ) ; mv.visitInsn ( Opcodes.ATHROW ) ; }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( optionsClass ) ; java.util.List < java.lang.reflect.Field > optionFields = new java.util.ArrayList ( data.getFieldsForClass ( optionsClass ) ) ; optionFields.sort ( com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage.getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , null ) ; } }
private static com.google.common.collect.ImmutableList < com.google.devtools.build.android.desugar.InputFileProvider > toRegisteredInputFileProvider ( com.google.common.io.Closer closer , java.util.List < java.nio.file.Path > paths ) throws java.io.IOException { com.google.common.collect.ImmutableList.Builder < com.google.devtools.build.android.desugar.InputFileProvider > builder = new com.google.common.collect.ImmutableList.Builder < > ( ) ; for ( java.nio.file.Path path : paths ) { builder.add ( closer.register ( com.google.devtools.build.android.desugar.Desugar.toInputFileProvider ( path ) ) ) ; } return builder.build ( ) ; }
public int indexOf ( com.android.jack.dx.rop.cst.CstString string ) { assert string != null ; throwIfNotPrepared ( ) ; com.android.jack.dx.dex.file.StringIdItem s = strings.get ( string ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( "not found" ) ; } return s.getIndex ( ) ; }
public void enter ( ) { if ( android.net.wifi.WifiStateMachine.DBG ) log ( ( ( getName ( ) ) + "\n" ) ) ; android.util.EventLog.writeEvent ( android.net.wifi.WifiStateMachine.EVENTLOG_WIFI_STATE_CHANGED , getName ( ) ) ; }
public static int computeSampleSize ( float scale ) { com.android.gallery3d.common.Utils.assertTrue ( ( scale > 0 ) ) ; int initialSize = java.lang.Math.max ( 1 , ( ( int ) ( java.lang.Math.ceil ( ( 1 / scale ) ) ) ) ) ; return initialSize <= 8 ? com.android.gallery3d.common.Utils.nextPowerOf2 ( initialSize ) : ( ( initialSize + 7 ) / 8 ) * 8 ; }
public void handleMessage ( android.os.Message msg ) { if ( ( msg.what ) == ( android.net.EthernetManager.MSG_AVAILABILITY_CHANGED ) ) { boolean isAvailable = ( msg.arg1 ) == 1 ; for ( android.net.EthernetManager.Listener listener : mListeners ) { listener.onAvailabilityChanged ( ( ( java.lang.String ) ( msg.obj ) ) , isAvailable ) ; } } }
private void responseString ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String str ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , str ) ; } mRil.processResponseDone ( rr , responseInfo , str ) ; } }
public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) { if ( ( declaredType.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return ; } session.getFileDependencies ( ) . addMappingBetweenJavaFileAndType ( declaredType.getSourceInfo ( ) . getFileName ( ) , declaredType ) ; }
public void testRefactor2_renamesub ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , true , true , "my.pkg.name" , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "* Rename package \'com.example.refactoringtest\' and subpackages to \'my.pkg.name\'\n" ) + "\n" ) + "* MainActivity.java - /testRefactor2_renamesub/src/com/example/refactoringtest/MainActivity.java\n" ) + " @@ -3 +3\n" ) + " + import com.example.refactoringtest.R;\n" ) + " +\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <my.pkg.name.CustomView1\n" ) + "\n" ) + "\n" ) + "* activity_main.xml - /testRefactor2_renamesub/res/layout/activity_main.xml\n" ) + " @@ -33 +33\n" ) + " - <fragment android:name=\"com.example.refactoringtest.MyFragment\"/>\n" ) + " + <fragment android:name=\"my.pkg.name.MyFragment\"/>\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout-land/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <my.pkg.name.CustomView1\n" ) + "\n" ) + "\n" ) + "* AndroidManifest.xml - /testRefactor2_renamesub/AndroidManifest.xml\n" ) + " @@ -16 +16\n" ) + " - android:name=\"com.example.refactoringtest.MainActivity\"\n" ) + " + android:name=\"my.pkg.name.MainActivity\"\n" ) + " @@ -25 +25\n" ) + " - android:name=\".MainActivity2\"\n" ) + " + android:name=\"my.pkg.name.MainActivity2\"\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout/customviews.xml\n" ) + " @@ -15 +15\n" ) + " - <com.example.refactoringtest.subpackage.CustomView2\n" ) + " + <my.pkg.name.subpackage.CustomView2\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout-land/customviews.xml\n" ) + " @@ -15 +15\n" ) + " - <com.example.refactoringtest.subpackage.CustomView2\n" ) + " + <my.pkg.name.subpackage.CustomView2" ) ) ) ; }
private final void updateSyncState ( android.content.Intent intent ) { if ( ! ( com.android.systemui.statusbar.phone.PhoneStatusBarPolicy.SHOW_SYNC_ICON ) ) return ; boolean isActive = intent.getBooleanExtra ( "active" , false ) ; mService.setIconVisibility ( "sync_active" , isActive ) ; }
public static org.bouncycastle.crypto.Digest createHash ( short hashAlgorithm ) { switch ( hashAlgorithm ) { case HashAlgorithm.md5 : return new org.bouncycastle.crypto.digests.MD5Digest ( ) ; case HashAlgorithm.sha1 : return new org.bouncycastle.crypto.digests.SHA1Digest ( ) ; case HashAlgorithm.sha224 : return new org.bouncycastle.crypto.digests.SHA224Digest ( ) ; case HashAlgorithm.sha256 : return new org.bouncycastle.crypto.digests.SHA256Digest ( ) ; case HashAlgorithm.sha384 : return new org.bouncycastle.crypto.digests.SHA384Digest ( ) ; case HashAlgorithm.sha512 : return new org.bouncycastle.crypto.digests.SHA512Digest ( ) ; default : throw new java.lang.IllegalArgumentException ( "unknown HashAlgorithm" ) ; } }
void setBluetoothStateInt ( int state ) { synchronized ( this ) { if ( ( mState ) == state ) { return ; } mState = state ; } if ( state == ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) { if ( ( mProfileManager ) != null ) { mProfileManager.setBluetoothStateOn ( ) ; } } }
public void testConstructorWithThreeDigitMnc ( ) { final java.lang.String mncWithThreeDigit = "061" ; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma ( com.android.internal.telephony.CellIdentityWcdmaTest.LAC , com.android.internal.telephony.CellIdentityWcdmaTest.CID , com.android.internal.telephony.CellIdentityWcdmaTest.PSC , com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN , com.android.internal.telephony.CellIdentityWcdmaTest.MCC_STR , mncWithThreeDigit , com.android.internal.telephony.CellIdentityWcdmaTest.ALPHA_LONG , com.android.internal.telephony.CellIdentityWcdmaTest.ALPHA_SHORT ) ; assertEquals ( com.android.internal.telephony.CellIdentityWcdmaTest.MCC , ci.getMcc ( ) ) ; assertEquals ( 61 , ci.getMnc ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityWcdmaTest.MCC_STR , ci.getMccStr ( ) ) ; assertEquals ( mncWithThreeDigit , ci.getMncStr ( ) ) ; assertEquals ( ( ( com.android.internal.telephony.CellIdentityWcdmaTest.MCC_STR ) + mncWithThreeDigit ) , ci.getMobileNetworkOperator ( ) ) ; }
private void logNudFailed ( android.net.LinkProperties.ProvisioningChange delta ) { long duration = ( android.os.SystemClock.elapsedRealtime ( ) ) - ( mLastProbeTimeMs ) ; boolean isFromProbe = duration < ( android.net.ip.IpReachabilityMonitor.getProbeWakeLockDuration ( ) ) ; boolean isProvisioningLost = delta == ( android.net.LinkProperties.ProvisioningChange.LOST_PROVISIONING ) ; int eventType = android.net.metrics.IpReachabilityEvent.nudFailureEventType ( isFromProbe , isProvisioningLost ) ; mMetricsLog.log ( mInterfaceName , new android.net.metrics.IpReachabilityEvent ( eventType ) ) ; }
public com.android.ims.ImsMultiEndpoint getMultiEndpointInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mMultiEndpoint ) != null ) && ( mMultiEndpoint.isBinderAlive ( ) ) ) { return mMultiEndpoint ; } checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsMultiEndpoint iImsMultiEndpoint = mImsServiceProxy.getMultiEndpointInterface ( ) ; if ( iImsMultiEndpoint == null ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , ImsReasonInfo.CODE_MULTIENDPOINT_NOT_SUPPORTED ) ; } mMultiEndpoint = new com.android.ims.ImsMultiEndpoint ( iImsMultiEndpoint ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mMultiEndpoint ; }
public void test_limiting_to_1method_and_run_for_SimpleTest2_should_perform_test ( ) { java.lang.Class < ? > target = vogar.target.junit3.SimpleTest2.class ; java.util.List < vogar.target.junit.VogarTest > tests = vogar.target.junit.JUnitRunnerFactory.createVogarTests ( target , "testSimple2" , vogar.target.JUnitRunnerTest.EMPTY_ARGS ) ; vogar.target.Runner runner = new vogar.target.junit.JUnitRunner ( monitor , skipPastReference , testEnvironment , 0 , tests ) ; runner.run ( null ) ; org.mockito.Mockito.verify ( monitor ) . outcomeStarted ( ( ( target.getName ( ) ) + "#testSimple2" ) ) ; org.mockito.Mockito.verify ( monitor ) . outcomeFinished ( Result.SUCCESS ) ; }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( optionsClass ) ; java.util.List < java.lang.reflect.Field > optionFields = new java.util.ArrayList ( data.getFieldsForClass ( optionsClass ) ) ; optionFields.sort ( com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage.getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , data ) ; } }
public java.lang.String startWpsPinDisplay ( java.lang.String bssid ) { return mSupplicantStaIfaceHal.startWpsPinDisplay ( bssid ) ; }
public void onReceivedLoginRequest ( android.webkit.WebView view , java.lang.String realm , java.lang.String account , java.lang.String args ) { super . onReceivedLoginRequest ( view , realm , account , args ) ; mOnReceivedLoginRequest = true ; mOnReceivedLoginRealm = realm ; mOnReceivedLoginAccount = account ; mOnReceivedLoginArgs = args ; }
public static void releaseContent ( int contentId ) { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.lock ( ) ; try { com.intellij.openapi.vfs.newvfs.persistent.RefCountingStorage contentStorage = com.intellij.openapi.vfs.newvfs.persistent.FSRecords.getContentStorage ( ) ; if ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.weHaveContentHashes ) { contentStorage.releaseRecord ( contentId , false ) ; } else { contentStorage.releaseRecord ( contentId ) ; } } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.unlock ( ) ; } }
void releaseFD ( ) { synchronized ( fdLock ) { ( fdUseCount ) -- ; if ( ( fdUseCount ) == ( - 1 ) ) { if ( ( fd ) != null ) { try { socketClose ( ) ; } catch ( java.io.IOException e ) { } } } } }
public void bluetoothSocketConnBeginAcceptThreadUuid ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "uuid" ) java.lang.String uuid , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "timeout" , description = "How long to wait for a new connection, 0 is wait for ever" ) java.lang.Integer timeout ) throws java.io.IOException { com.googlecode.android_scripting.Log.d ( ( "bluetoothSocketConnBeginAcceptThreadUuid: uuid=" + uuid ) ) ; com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread ( uuid , timeout.intValue ( ) ) ; acceptThread.start ( ) ; mAcceptThread = acceptThread ; }
