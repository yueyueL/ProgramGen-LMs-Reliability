public void testIntFromObject ( ) { try { com.android.jack.java7.boxing.test001.jack.UnBoxObject.getIntFromObject ( null ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.NullPointerException e ) { } try { com.android.jack.java7.boxing.test001.jack.UnBoxObject.getIntFromObject ( new java.lang.Object ( ) ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.ClassCastException e ) { } com.android.jack.java7.boxing.test001.jack.UnBoxObject.getIntFromObject ( java.lang.Integer.valueOf ( 34 ) ) ; }
public void setDefaultSmdpAddress ( java.lang.String cardId , java.lang.String defaultSmdpAddress , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.Void > callback ) { try { getIEuiccCardController ( ) . setDefaultSmdpAddress ( mContext.getOpPackageName ( ) , cardId , defaultSmdpAddress , new com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode ) { callback.onComplete ( resultCode , null ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling setDefaultSmdpAddress" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
private void writeOriginalTypeInfoMarker ( ) throws java.io.IOException { if ( com.android.jill.frontend.java.AsmHelper.hasValidGenericSignature ( currentMethod ) ) { writer.writeKeyword ( Token.GENERIC_SIGNATURE ) ; writer.writeOpen ( ) ; writer.writeString ( currentMethod.signature ) ; writer.writeClose ( ) ; } else { writer.writeNull ( ) ; } }
private boolean setCdmaBroadcastActivation ( boolean activate ) { if ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.DBG ) log ( ( ( "Calling setCdmaBroadcastActivation(" + activate ) + ")" ) ) ; synchronized ( mLock ) { android.os.Message response = mHandler.obtainMessage ( com.android.internal.telephony.cdma.EVENT_SET_BROADCAST_ACTIVATION_DONE ) ; mSuccess = false ; mPhone.mCM.setCdmaBroadcastActivation ( activate , response ) ; try { mLock.wait ( ) ; } catch ( java.lang.InterruptedException e ) { log ( "interrupted while trying to set cdma broadcast activation" ) ; } } return mSuccess ; }
public int compareTo ( com.android.dex.FieldId other ) { if ( ( declaringClassIndex ) != ( other.declaringClassIndex ) ) { return com.android.dex.util.Unsigned.compare ( declaringClassIndex , other.declaringClassIndex ) ; } if ( ( nameIndex ) != ( other.nameIndex ) ) { return com.android.dex.util.Unsigned.compare ( nameIndex , other.nameIndex ) ; } return com.android.dex.util.Unsigned.compare ( typeIndex , other.typeIndex ) ; }
public void writeSetupDataCall ( int phoneId , int radioTechnology , int profileId , java.lang.String apn , java.lang.String protocol ) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall setupDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall ( ) ; setupDataCall.rat = radioTechnology ; setupDataCall.dataProfile = profileId + 1 ; if ( apn != null ) { setupDataCall.apn = apn ; } if ( protocol != null ) { setupDataCall.type = toPdpType ( protocol ) ; } addTelephonyEvent ( new com.android.internal.telephony.metrics.TelephonyEventBuilder ( phoneId ) . setSetupDataCall ( setupDataCall ) . build ( ) ) ; }
public void testEdgeModeControlFastFps ( ) throws java.lang.Exception { for ( java.lang.String id : mCameraIds ) { try { openDevice ( id ) ; if ( ! ( mStaticInfo.isEdgeModeControlSupported ( ) ) ) { android.util.Log.i ( android.hardware.camera2.cts.CaptureRequestTest.TAG , ( ( "Camera " + id ) + " doesn't support EDGE_MODE controls, skipping test" ) ) ; continue ; } java.util.List < android.util.Range < java.lang.Integer > > fpsRanges = getTargetFpsRangesGreaterThan30 ( mStaticInfo ) ; edgeModesTestByCamera ( fpsRanges ) ; } finally { closeDevice ( ) ; } } }
public void test_RIHarmony_compatible ( ) throws java.lang.Exception { java.text.DecimalFormatSymbols dfs ; java.io.ObjectInputStream i = null ; try { i = new java.io.ObjectInputStream ( getClass ( ) . getClassLoader ( ) . getResourceAsStream ( "serialization/org/apache/harmony/tests/java/text/DecimalFormatSymbols.ser" ) ) ; dfs = ( ( java.text.DecimalFormatSymbols ) ( i.readObject ( ) ) ) ; } finally { try { if ( i != null ) { i.close ( ) ; } } catch ( java.lang.Exception e ) { } } org.apache.harmony.tests.java.text.DecimalFormatSymbolsTest.assertDecimalFormatSymbolsRIFrance ( dfs ) ; }
public void logp ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.util.function.Supplier < java.lang.String > msgSupplier ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msgSupplier.get ( ) ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; doLog ( lr ) ; }
private void doVisitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc , boolean itf ) { if ( ( mv ) != null ) { mv.visitMethodInsn ( opcode , remapper.mapType ( owner ) , remapper.mapMethodName ( owner , name , desc ) , remapper.mapMethodDesc ( desc ) , itf ) ; } }
void separate ( com.android.internal.telephony.gsm.GsmConnection conn ) throws com.android.internal.telephony.CallStateException { if ( ( conn.mOwner ) != ( this ) ) { throw new com.android.internal.telephony.CallStateException ( ( ( ( "GsmConnection " + conn ) + "does not belong to GsmCallTracker " ) + ( this ) ) ) ; } try { mCi.separateConnection ( conn.getGSMIndex ( ) , obtainCompleteMessage ( com.android.internal.telephony.gsm.EVENT_SEPARATE_RESULT ) ) ; } catch ( com.android.internal.telephony.CallStateException ex ) { android.telephony.Rlog.w ( com.android.internal.telephony.gsm.GsmCallTracker.LOG_TAG , ( "GsmCallTracker WARN: separate() on absent connection " + conn ) ) ; } }
public java.lang.String readImmediately ( ) throws java.io.IOException { if ( mPipeFromInCall.ready ( ) ) { return read ( ) ; } else { return null ; } }
public void testPrivateField ( ) { android.signature.cts.JDiffClassDescription clz = createNormalClass ( ) ; android.signature.cts.JDiffClassDescription.JDiffField field = new android.signature.cts.JDiffClassDescription.JDiffField ( "PRIVATE_FIELD" , "java.lang.String" , java.lang.reflect.Modifier.PRIVATE , android.signature.cts.tests.JDiffClassDescriptionTest.VALUE ) ; clz.addField ( field ) ; clz.checkSignatureCompliance ( ) ; assertEquals ( field.toSignatureString ( ) , "private java.lang.String PRIVATE_FIELD" ) ; }
protected void appendLookupKey ( java.lang.StringBuilder sb , java.lang.String accountTypeWithDataSet , java.lang.String accountName , long rawContactId , java.lang.String sourceId , java.lang.String displayName ) { com.android.providers.contacts.ContactLookupKey.appendToLookupKey ( sb , accountTypeWithDataSet , accountName , rawContactId , sourceId , displayName ) ; }
private void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array , android.support.v8.renderscript.Element.DataType dt , int arrayLen ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , array , ( arrayLen * ( dt.mSize ) ) , dt ) ; }
public java.lang.Object [ ] toArray ( ) { return toArrayList ( ) . toArray ( ) ; }
public void testPackageOverridePackageFromFlavorWithSuffix2 ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilderTest.AndroidBuilderMock ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; mFlavor.getProductFlavor ( ) . setPackageName ( "foo.bar" ) ; mDebug.getBuildType ( ) . setPackageNameSuffix ( "fortytwo" ) ; builder.setBuildVariant ( mMain , mDebug ) ; builder.addProductFlavor ( mFlavor ) ; assertEquals ( "foo.bar.fortytwo" , builder.getPackageOverride ( "" ) ) ; }
public void testPocBug_35644815 ( ) throws java.lang.Exception { enableAdbRoot ( getDevice ( ) ) ; if ( containsDriver ( getDevice ( ) , "/sys/kernel/debug/ion/clients/pids/" ) ) { java.lang.String pocOut = android.security.cts.AdbUtils.runPoc ( "Bug-35644815" , getDevice ( ) , 60 ) ; assertNotMatches ( "[\\s\\n\\S]*INFO DISC FLAG[\\s\\n\\S]*" , pocOut ) ; } }
public void removeChild ( int index ) { java.util.List < org.w3c.dom.Element > children = com.android.ide.eclipse.adt.internal.editors.layout.gle2.DomUtilities.getChildren ( mElement ) ; junit.framework.Assert.assertTrue ( ( index < ( children.size ( ) ) ) ) ; org.w3c.dom.Element oldChild = children.get ( index ) ; mElement.removeChild ( oldChild ) ; }
public void testNonDstZoneWithDstTimestampForNonHourDstZone ( ) throws java.lang.Exception { java.text.SimpleDateFormat format = new java.text.SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm zzzz" , java.util.Locale.US ) ; java.util.Calendar calendar = new java.util.GregorianCalendar ( libcore.java.text.SimpleDateFormatTest.AUSTRALIA_LORD_HOWE ) ; calendar.setTime ( format.parse ( "2010-12-21T19:30 Lord Howe Standard Time" ) ) ; assertEquals ( 20 , calendar.get ( java.util.Calendar.HOUR_OF_DAY ) ) ; assertEquals ( 0 , calendar.get ( java.util.Calendar.MINUTE ) ) ; }
public java.security.spec.ECPoint getQ ( ) { if ( ( ecSpec ) == null ) { return q.getDetachedPoint ( ) ; } return q ; }
public E first ( ) { return iterator ( ) . next ( ) ; }
public void testPinEntryNonEnforcing ( ) throws java.lang.Exception { java.lang.String shortEntry = "*.google.com=false|" + ( shortPin ) ; org.conscrypt.PinListEntry e = new org.conscrypt.PinListEntry ( shortEntry , new org.conscrypt.TrustedCertificateStore ( ) ) ; assertFalse ( "Enforcing!" , e.getEnforcing ( ) ) ; boolean retval = e.isChainValid ( shortChain ) ; assertTrue ( "Failed on an unenforced pinning, this is bad-ish" , retval ) ; }
public void handleMessage ( android.os.Message msg ) { synchronized ( this ) { if ( ( ( mRS ) == null ) || ( ( mOutPixelsAllocation ) == null ) ) { return ; } if ( ( mOutDisplayAllocation ) != ( mOutPixelsAllocation ) ) { mOutDisplayAllocation.copyFrom ( mOutPixelsAllocation ) ; } mOutDisplayAllocation.ioSend ( ) ; mDisplayView.invalidate ( ) ; } }
java.util.Iterator < java.util.Map.Entry < K , V2 > > entryIterator ( ) { return com.google.common.collect.Iterators.transform ( fromMultimap.entries ( ) . iterator ( ) , com.google.common.collect.Maps.< K , V1 , V2 > asEntryToEntryFunction ( transformer ) ) ; }
public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs ( ) . loadValues ( event ) ; if ( AdtPrefs.PREFS_SDK_DIR.equals ( event.getProperty ( ) ) ) { com.android.ide.eclipse.ddms.DdmsPlugin.setAdb ( com.android.ide.eclipse.adt.AdtPlugin.getOsAbsoluteAdb ( ) , true ) ; if ( checkSdkLocationAndId ( ) ) { reparseSdk ( ) ; } } }
public void delete ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException , com.android.sched.util.file.CannotDeleteFileException { try { inputVFS.getRootInputVDir ( ) . getInputVFile ( fileType.buildFileVPath ( typePath ) ) . delete ( ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } }
public static < T > org.hamcrest.core.AnyOf < T > anyOf ( org.hamcrest.org.hamcrest.Matcher < T > first , org.hamcrest.org.hamcrest.Matcher < ? extends T > second , org.hamcrest.org.hamcrest.Matcher < ? extends T > third , org.hamcrest.org.hamcrest.Matcher < ? extends T > fourth ) { return org.hamcrest.core.AnyOf.< org.hamcrest.T > anyOf ( first , second , third , fourth ) ; }
private static com.android.internal.util.JournaledFile makeJournaledFile ( int userId ) { final java.lang.String base = ( ( com.android.server.WallpaperManagerService.getWallpaperDir ( userId ) ) + "/" ) + ( com.android.server.WallpaperManagerService.WALLPAPER_INFO ) ; return new com.android.internal.util.JournaledFile ( new java.io.File ( base ) , new java.io.File ( ( base + ".tmp" ) ) ) ; }
public java.lang.String getShortDescription ( ) { boolean isDefaultTag = SystemImage.DEFAULT_TAG.equals ( mTag ) ; return java.lang.String.format ( "%1$s%2$sSystem Image, Android API %3$s, revision %4$s%5$s" , ( isDefaultTag ? "" : ( mTag.getDisplay ( ) ) + " " ) , ( isDefaultTag ? ( getAbiDisplayName ( ) ) + " " : "" ) , mVersion.getApiString ( ) , getRevision ( ) . toShortString ( ) , ( isObsolete ( ) ? " (Obsolete)" : "" ) ) ; }
public byte [ ] encode ( java.math.BigInteger r , java.math.BigInteger s ) throws java.io.IOException { org.bouncycastle.asn1.ASN1EncodableVector v = new org.bouncycastle.asn1.ASN1EncodableVector ( ) ; v.add ( new org.bouncycastle.asn1.ASN1Integer ( r ) ) ; v.add ( new org.bouncycastle.asn1.ASN1Integer ( s ) ) ; return new org.bouncycastle.asn1.DERSequence ( v ) . getEncoded ( ASN1Encoding.DER ) ; }
public void test_Constructor01 ( ) { try { new javax.net.ssl.KeyStoreBuilderParameters ( ( ( java.security.KeyStore.Builder ) ( null ) ) ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } java.security.KeyStore.ProtectionParameter pp = new org.apache.harmony.tests.javax.net.ssl.KeyStoreBuilderParametersTest.ProtectionParameterImpl ( ) ; java.security.KeyStore.Builder bld = java.security.KeyStore.Builder.newInstance ( "testType" , null , pp ) ; assertNotNull ( "Null object KeyStore.Builder" , bld ) ; javax.net.ssl.KeyStoreBuilderParameters ksp = new javax.net.ssl.KeyStoreBuilderParameters ( bld ) ; assertNotNull ( ksp.getParameters ( ) ) ; }
public void handleMessage ( android.os.Message msg ) { if ( mDestroyed.get ( ) ) { android.util.Log.e ( com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG , ( ( ( ( "Received message " + msg ) + "[" ) + ( msg.what ) ) + "] while being destroyed. Ignoring." ) ) ; return ; } try { switch ( msg.what ) { case com.android.internal.telephony.ims.IsimUiccRecords.EVENT_APP_READY : onReady ( ) ; break ; default : super . handleMessage ( msg ) ; } } catch ( java.lang.RuntimeException exc ) { android.util.Log.w ( com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG , "Exception parsing SIM record" , exc ) ; } }
public void processDisconnectReason ( com.android.ims.ImsReasonInfo imsReasonInfo ) { if ( ( ( imsReasonInfo.mCode ) == ( imsReasonInfo.CODE_REGISTRATION_ERROR ) ) && ( ( imsReasonInfo.mExtraMessage ) != null ) ) { if ( com.android.ims.ImsManager.getInstance ( mContext , mPhoneId ) . isWfcEnabledByUser ( ) ) { processWfcDisconnectForNotification ( imsReasonInfo ) ; } } }
public void enter ( ) { super . enter ( ) ; sendMessageDelayed ( com.android.bluetooth.hfp.HeadsetStateMachine.CONNECT_TIMEOUT , mCurrentDevice , com.android.bluetooth.hfp.HeadsetStateMachine.sConnectTimeoutMillis ) ; broadcastStateTransitions ( ) ; }
private void updateEmptyMessage ( ) { if ( ( ( mPrograms ) == null ) || ( mPrograms.isEmpty ( ) ) ) { if ( ( mSeriesRecording.getState ( ) ) == ( com.android.tv.dvr.data.SeriesRecording.STATE_SERIES_STOPPED ) ) { showEmptyMessage ( R.string.dvr_series_schedules_stopped_empty_state ) ; } else { showEmptyMessage ( R.string.dvr_series_schedules_empty_state ) ; } } else { hideEmptyMessage ( ) ; } }
private static int compareHandlesNulls ( com.android.jack.dx.rop.type.Type a , com.android.jack.dx.rop.type.Type b ) { if ( a == b ) { return 0 ; } else if ( a == null ) { return - 1 ; } else if ( b == null ) { return 1 ; } else { return a.compareTo ( b ) ; } }
private void sortPackages ( boolean updateButtons ) { if ( ( ( ( mCheckSortApi ) != null ) && ( ! ( mCheckSortApi.isDisposed ( ) ) ) ) && ( mCheckSortApi.getSelection ( ) ) ) { sortByAPI ( ) ; } else { sortBySource ( ) ; } if ( updateButtons ) { updateButtonsState ( ) ; } }
public void assertEventuallyTrue ( java.util.function.BooleanSupplier fn , long maxWaitingTimeMs ) throws java.lang.Exception { long start = android.os.SystemClock.elapsedRealtime ( ) ; while ( ( android.os.SystemClock.elapsedRealtime ( ) ) <= ( start + maxWaitingTimeMs ) ) { if ( fn.getAsBoolean ( ) ) { return ; } java.lang.Thread.sleep ( 10 ) ; } assertTrue ( fn.getAsBoolean ( ) ) ; }
final void get ( char [ ] dst , int dstOffset , int charCount ) { checkIsAccessible ( ) ; int byteCount = checkGetBounds ( SizeOf.CHAR , dst.length , dstOffset , charCount ) ; this . block.peekCharArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , charCount , order.needsSwap ) ; position += byteCount ; }
public boolean verify ( java.lang.String key , byte [ ] data , byte [ ] signature ) { try { return ( mBinder.verify ( key , data , signature ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public boolean setHwPnoList ( com.android.server.wifi.WifiNative.PnoSettings settings , com.android.server.wifi.WifiNative.PnoEventHandler eventHandler ) { synchronized ( mSettingsLock ) { if ( ( mPnoSettings ) != null ) { android.util.Log.w ( com.android.server.wifi.scanner.WificondScannerImpl.TAG , "Already running a PNO scan" ) ; return false ; } mPnoEventHandler = eventHandler ; mPnoSettings = settings ; android.util.Log.d ( com.android.server.wifi.scanner.WificondScannerImpl.TAG , "processPendingScans in request of setHwPnoList" ) ; processPendingScans ( ) ; return true ; } }
private synchronized java.lang.String getLastLineupId ( ) { if ( ( mLineupId ) == null ) { mLineupId = android.preference.PreferenceManager.getDefaultSharedPreferences ( mContext ) . getString ( com.android.tv.data.epg.EpgFetcher.KEY_LAST_LINEUP_ID , null ) ; } if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , ( "Last lineup is " + ( mLineupId ) ) ) ; return mLineupId ; }
public void testObjectEquals ( ) throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestFolder ( "shrob/test024" ) ; com.android.jack.Options options = com.android.jack.TestTools.buildCommandLineArgs ( new java.io.File [ ] { com.android.jack.shrob.TreeTest.CORE_SOURCELIST , testFolder } ) ; options.addProperty ( Options.JAVA_SOURCE_VERSION.getName ( ) , JavaVersion.JAVA_7.toString ( ) ) ; options.addProguardFlagsFile ( new com.android.jack.ProguardFlags ( testFolder , "proguard.flags001" ) ) ; options.addProguardFlagsFile ( com.android.jack.shrob.TreeTest.dontObfuscateFlagFile ) ; options.addProperty ( Options.METHOD_FILTER.getName ( ) , "supported-methods" ) ; com.android.jack.TestTools.buildSession ( options ) ; }
public org.eclipse.swt.graphics.Image loadCapture ( com.android.hierarchyviewerlib.models.ViewNode viewNode ) { com.android.hierarchyviewerlib.device.IHvDevice hvDevice = viewNode.window.getHvDevice ( ) ; final org.eclipse.swt.graphics.Image image = hvDevice.loadCapture ( viewNode.window , viewNode ) ; if ( image != null ) { viewNode.image = image ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . notifySelectionChanged ( ) ; } return image ; }
public void testJackArchiveToDexArchive ( ) throws java.lang.Exception { java.io.File jackAr = createJackArchiveWithResources ( ) ; java.io.File dexAr = com.android.jack.TestTools.createTempFile ( "resourcetestdex" , ".zip" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , jackAr , dexAr , true ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( dexAr ) ; checkResourceContentFromZip ( zipFile , com.android.jack.ResourceTest.RESOURCE1_SHORTPATH , "Res1" , false ) ; checkResourceContentFromZip ( zipFile , com.android.jack.ResourceTest.RESOURCE2_SHORTPATH , "Res2" , false ) ; checkResourceContentFromZip ( zipFile , com.android.jack.ResourceTest.RESOURCE3_SHORTPATH , "Res3" , false ) ; checkResourceContentFromZip ( zipFile , com.android.jack.ResourceTest.RESOURCE4_SHORTPATH , "Res4" , false ) ; }
public java.lang.String getOriginalMimeType ( java.lang.String path ) { if ( ( null == path ) || ( path.equals ( "" ) ) ) { throw new java.lang.IllegalArgumentException ( "Given path should be non null" ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState ( ) ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _getOriginalMimeType ( mUniqueId , path ) ; }
public void test_x_UTF_16LE_BOM ( ) throws java.lang.Exception { java.nio.charset.Charset cs = java.nio.charset.Charset.forName ( "x-UTF-16LE-BOM" ) ; assertEncodes ( cs , "a٦" , 255 , 254 , 'a' , 0 , 102 , 6 ) ; assertDecodes ( cs , "a٦" , 255 , 254 , 'a' , 0 , 102 , 6 ) ; assertDecodes ( cs , "愀昆" , 254 , 255 , 'a' , 0 , 102 , 6 ) ; assertDecodes ( cs , "a٦" , 'a' , 0 , 102 , 6 ) ; }
private boolean visitNonThrowingOperation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { assert ! ( expr.canThrow ( ) ) ; confirmBlockElement ( expr ) ; if ( expr instanceof com.android.jack.ir.ast.JReinterpretCastOperation ) { confirmParent ( expr , com.android.jack.ir.ast.JAsgOperation.class , com.android.jack.ir.ast.JArrayRef.class , com.android.jack.ir.ast.JFieldRef.class , com.android.jack.ir.ast.JMethodCall.class ) ; } else if ( expr instanceof com.android.jack.ir.ast.JDynamicCastOperation ) { confirmParent ( expr , com.android.jack.ir.ast.JAsgOperation.class ) ; } else { confirmParent ( expr , com.android.jack.ir.ast.cfg.JConditionalBlockElement.class , com.android.jack.ir.ast.JAsgOperation.class ) ; } confirmNotAssignmentTarget ( expr ) ; return true ; }
public java.net.InetSocketAddress getSyncServerAddress ( ) { int port = settings.getSyncPortNumber ( ) ; try { return new java.net.InetSocketAddress ( java.net.InetAddress.getByAddress ( new byte [ ] { 127 , 0 , 0 , 1 } ) , port ) ; } catch ( java.net.UnknownHostException e ) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException ( "[SYNC] Exception in binding for socket sync connection" , e ) ; } }
public void log ( java.util.logging.Level level , java.lang.String msg ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; doLog ( lr ) ; }
public void updateQuery ( java.lang.String query ) { this . query = query ; getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newPlatform ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision , @ com.android.annotations.NonNull com.android.sdklib.repository.FullRevision minToolsRev ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_PLATFORMS ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; p.mMinToolsRev = minToolsRev ; p.mCustomPath = new com.android.sdklib.repository.descriptors.PkgDesc.IGetPath ( ) { @ java.lang.Override public java.lang.String getPath ( com.android.sdklib.repository.descriptors.PkgDesc thisPkgDesc ) { return com.android.sdklib.AndroidTargetHash.getPlatformHashString ( thisPkgDesc.getAndroidVersion ( ) ) ; } } ; return p ; }
static java.lang.String getTimeZoneText ( java.util.TimeZone tz ) { java.util.Date now = new java.util.Date ( ) ; return com.android.settings.DateTimeSettings.formatOffset ( new java.lang.StringBuilder ( ) , tz , now ) . append ( ", " ) . append ( tz.getDisplayName ( tz.inDaylightTime ( now ) , java.util.TimeZone.LONG ) ) . toString ( ) ; }
private void updateChannels ( boolean clearPreviousTableEntries ) { if ( com.android.tv.guide.ProgramManager.DEBUG ) android.util.Log.d ( com.android.tv.guide.ProgramManager.TAG , "updateChannels" ) ; mChannels = mChannelDataManager.getBrowsableChannelList ( ) ; mSelectedGenreId = com.android.tv.data.GenreItems.ID_ALL_CHANNELS ; mFilteredChannels = mChannels ; updateTableEntriesWithoutNotification ( clearPreviousTableEntries ) ; notifyChannelsUpdated ( ) ; notifyTableEntriesUpdated ( ) ; buildGenreFilters ( ) ; }
public void test002c ( ) throws java.lang.Exception { java.io.File jackOutput ; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream ( ) ; jackOutput = runTest002 ( false , "keep-first" , errOut , false , false ) ; checkResourceContent ( jackOutput , com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH , "Res1" ) ; checkResourceContent ( jackOutput , com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH , "Res2" ) ; checkResourceContent ( jackOutput , com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH , "Res3" ) ; junit.framework.Assert.assertTrue ( errOut.toString ( ) . isEmpty ( ) ) ; }
private void onCmdResult ( int type , int cme ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CMD_RESULT ) ; event.valueInt = type ; event.valueInt2 = cme ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public java.lang.String select ( java.lang.Object context , double number ) { android.icu.text.PluralRules.IFixedDecimal dec = ( ( android.icu.text.PluralRules.IFixedDecimal ) ( context ) ) ; assert ( dec.getPluralOperand ( Operand.n ) ) == ( java.lang.Math.abs ( number ) ) ; return pluralRules.select ( dec ) ; }
public void testSdkManager_LayoutlibVersion ( ) { com.android.sdklib.SdkManager sdkman = getSdkManager ( ) ; com.android.sdklib.IAndroidTarget t = sdkman.getTargets ( ) [ 0 ] ; assertTrue ( ( t instanceof com.android.sdklib.internal.androidTarget.PlatformTarget ) ) ; com.android.sdklib.SdkManager.LayoutlibVersion lv = ( ( com.android.sdklib.internal.androidTarget.PlatformTarget ) ( t ) ) . getLayoutlibVersion ( ) ; assertNotNull ( lv ) ; assertEquals ( 5 , lv.getApi ( ) ) ; assertEquals ( 2 , lv.getRevision ( ) ) ; assertSame ( lv , sdkman.getMaxLayoutlibVersion ( ) ) ; }
public static void gc ( ) { boolean shouldRunGC ; synchronized ( java.lang.System.lock ) { shouldRunGC = java.lang.System.justRanFinalization ; if ( shouldRunGC ) { java.lang.System.justRanFinalization = false ; } else { java.lang.System.runGC = true ; } } if ( shouldRunGC ) { java.lang.Runtime.getRuntime ( ) . gc ( ) ; } }
public com.android.jack.dx.io.instructions.DecodedInstruction decode ( int opcodeUnit , com.android.jack.dx.io.instructions.CodeInput in ) throws java.io.EOFException { int opcode = com.android.jack.dx.io.instructions.InstructionCodec.byte0 ( opcodeUnit ) ; int literal = com.android.jack.dx.io.instructions.InstructionCodec.byte1 ( opcodeUnit ) ; int a = in.read ( ) ; int b = in.read ( ) ; return new com.android.jack.dx.io.instructions.TwoRegisterDecodedInstruction ( this , opcode , 0 , null , 0 , literal , a , b ) ; }
public static android.renderscript.ScriptIntrinsicBlur create ( android.renderscript.RenderScript rs , android.renderscript.Element e ) { if ( ( ! ( e.isCompatible ( android.renderscript.Element.U8_4 ( rs ) ) ) ) && ( ! ( e.isCompatible ( android.renderscript.Element.U8 ( rs ) ) ) ) ) { throw new android.renderscript.RSIllegalArgumentException ( "Unsupported element type." ) ; } long id = rs.nScriptIntrinsicCreate ( 5 , e.getID ( rs ) ) ; android.renderscript.ScriptIntrinsicBlur sib = new android.renderscript.ScriptIntrinsicBlur ( id , rs ) ; sib.setRadius ( 5.0F ) ; return sib ; }
private static boolean nodeNeedsUniquePredecessor ( com.android.jack.ir.ast.cfg.JBasicBlock block ) { if ( block instanceof com.android.jack.ir.ast.cfg.JExitBasicBlock ) { throw new java.lang.RuntimeException ( "exit bblock doesn't need unique pred" ) ; } int countPredecessors = com.android.jack.transformations.ssa.SsaUtil.getNumPredecessor ( block ) ; int countSuccessors = com.android.jack.transformations.ssa.SsaUtil.getNumSuccessor ( block ) ; boolean needsUniquePredecessor = ( countPredecessors > 1 ) && ( countSuccessors > 1 ) ; assert ( ! needsUniquePredecessor ) || ( ! ( ( block instanceof com.android.jack.ir.ast.cfg.JCaseBasicBlock ) || ( block instanceof com.android.jack.ir.ast.cfg.JCatchBasicBlock ) ) ) ; return needsUniquePredecessor ; }
private void releaseTunerHal ( com.android.tv.tuner.TunerHal hal , int sessionId , boolean reuse ) { if ( ( ! reuse ) || ( ! ( hal.isReusable ( ) ) ) ) { com.android.tv.common.AutoCloseableUtils.closeQuietly ( hal ) ; return ; } com.android.tv.tuner.TunerHal cachedHal = mTunerHals.get ( sessionId ) ; if ( cachedHal != hal ) { mTunerHals.put ( sessionId , hal ) ; if ( cachedHal != null ) { com.android.tv.common.AutoCloseableUtils.closeQuietly ( cachedHal ) ; } } }
public void close ( ) throws java.io.IOException { synchronized ( lock ) { if ( ( out ) == null ) { return ; } try ( java.io.Writer w = out ) { flushBuffer ( ) ; } finally { out = null ; cb = null ; } } }
private void insertExtractAsInclude ( java.lang.String endId ) { org.eclipse.jface.action.IAction extractIncludeAction = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.ExtractIncludeAction ( mCanvas ) ; if ( extractIncludeAction.isEnabled ( ) ) { mMenuManager.insertBefore ( endId , new org.eclipse.jface.action.Separator ( ) ) ; mMenuManager.insertBefore ( endId , extractIncludeAction ) ; mMenuManager.insertBefore ( endId , new org.eclipse.jface.action.Separator ( ) ) ; } }
private void emitAdvanceLine ( int deltaLines ) throws java.io.IOException { int mark = output.getCursor ( ) ; output.writeByte ( com.android.dx.dex.file.DebugInfoConstants.DBG_ADVANCE_LINE ) ; output.writeSleb128 ( deltaLines ) ; line += deltaLines ; if ( ( ( annotateTo ) != null ) || ( ( debugPrint ) != null ) ) { annotate ( ( ( output.getCursor ( ) ) - mark ) , java.lang.String.format ( "line = %d" , line ) ) ; } if ( com.android.dx.dex.file.DebugInfoEncoder.DEBUG ) { java.lang.System.err.printf ( "Emitting advance_line for %d\n" , deltaLines ) ; } }
private void ensureReadParams ( ) { if ( fetchedParams ) { return ; } byte [ ] [ ] params = org.conscrypt.NativeCrypto.get_RSA_public_params ( key.getNativeRef ( ) ) ; modulus = new java.math.BigInteger ( params [ 0 ] ) ; publicExponent = new java.math.BigInteger ( params [ 1 ] ) ; fetchedParams = true ; }
private void loadInternalDataFromSharedStore ( java.util.List < android.net.wifi.WifiConfiguration > configurations ) { for ( android.net.wifi.WifiConfiguration configuration : configurations ) { configuration.networkId = ( mNextNetworkId ) ++ ; if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Adding network from shared store " + ( configuration.configKey ( ) ) ) ) ; } addMissingPskPassphraseQuotes ( configuration ) ; mConfiguredNetworks.put ( configuration ) ; } }
private static void assertNonSerializableLambdaCharacteristics ( java.lang.Object r1 ) throws java.lang.Exception { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try ( java.io.ObjectOutputStream os = new java.io.ObjectOutputStream ( baos ) ) { os.writeObject ( r1 ) ; os.flush ( ) ; org.junit.Assert.fail ( ) ; } catch ( java.io.NotSerializableException expected ) { } }
public void testNotifyResponseSubscribeCancel ( ) throws org.json.JSONException { final short transactionId = 23 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "status" , WifiAwareNative.AWARE_STATUS_DE_FAILURE ) ; args.putInt ( "value" , 0 ) ; args.putInt ( "response_type" , WifiAwareNative.AWARE_RESPONSE_SUBSCRIBE_CANCEL ) ; com.android.server.wifi.aware.WifiAwareHalMock.callNotifyResponse ( transactionId , com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
public void testSerialization ( ) { java.lang.String expected = "aced0005737200266a617661782e73656375726974792e617574682e7" + ( ( ( ( "83530302e583530305072696e636970616cf90dff3c88b877c703000078707572" + "00025b42acf317f8060854e002000078700000006a30683117301506035504031" ) + "30e7777772e676f6f676c652e636f6d31133011060355040a130a476f6f676c65" ) + "20496e63311630140603550407130d4d6f756e7461696e2056696577311330110" ) + "603550408130a43616c69666f726e6961310b300906035504061302555378" ) ; javax.security.auth.x500.X500Principal actual = new javax.security.auth.x500.X500Principal ( ( "C=US, " + ( ( ( "ST=California, " + "L=Mountain View, " ) + "O=Google Inc, " ) + "CN=www.google.com" ) ) ) ; new libcore.libcore.util.SerializationTester < javax.security.auth.x500.X500Principal > ( actual , expected ) . test ( ) ; }
public void testGetConfig2 ( ) { com.android.ide.common.resources.configuration.FolderConfiguration configForFolder = com.android.ide.common.resources.configuration.FolderConfiguration.getConfigForFolder ( "values-en-rUS" ) ; assertNotNull ( configForFolder ) ; assertEquals ( "en" , configForFolder.getLocaleQualifier ( ) . getLanguage ( ) ) ; assertEquals ( "US" , configForFolder.getLocaleQualifier ( ) . getRegion ( ) ) ; assertNull ( configForFolder.getScreenDimensionQualifier ( ) ) ; assertNull ( configForFolder.getLayoutDirectionQualifier ( ) ) ; }
public static < T , U > T [ ] copyOf ( U [ ] original , int newLength , java.lang.Class < ? extends T [ ] > newType ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( java.lang.Integer.toString ( newLength ) ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength , newType ) ; }
public void run ( ) { new android.app.AlertDialog.Builder ( activity ) . setIconAttribute ( android.R.attr.alertDialogIcon ) . setTitle ( R.string.error_state ) . setMessage ( ( ( msg + "\n\n" ) + ( activity.getString ( R.string.error_state_text ) ) ) ) . setPositiveButton ( R.string.yes , new android.content.DialogInterface.OnClickListener ( ) { public void onClick ( android.content.DialogInterface dialog , int which ) { dialog.dismiss ( ) ; } } ) . show ( ) ; }
private void reinitialize ( ) { android.telecom.CallAudioState initState = getInitialAudioState ( ) ; mDeviceSupportedRoutes = initState.getSupportedRouteMask ( ) ; mAvailableRoutes = ( mDeviceSupportedRoutes ) & ( getCurrentCallSupportedRoutes ( ) ) ; mIsMuted = initState.isMuted ( ) ; setMuteOn ( mIsMuted ) ; mWasOnSpeaker = false ; mHasUserExplicitlyLeftBluetooth = false ; mLastKnownCallAudioState = initState ; transitionTo ( mRouteCodeToQuiescentState.get ( initState.getRoute ( ) ) ) ; }
private void verifyInterfaceServingModeStarted ( boolean ifnameKnown ) throws java.lang.Exception { if ( ! ifnameKnown ) { org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . listInterfaces ( ) ; } org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . getInterfaceConfig ( mTestIfname ) ; org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . setInterfaceConfig ( org.mockito.Matchers.eq ( mTestIfname ) , org.mockito.Mockito.any ( android.net.InterfaceConfiguration.class ) ) ; org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . tetherInterface ( mTestIfname ) ; }
public void setListening ( boolean listening ) { if ( listening && ( ( android.nfc.NfcAdapter.getDefaultAdapter ( mContext ) ) != null ) ) { com.android.settings.nfc.PaymentBackend paymentBackend = new com.android.settings.nfc.PaymentBackend ( mContext ) ; paymentBackend.refresh ( ) ; com.android.settings.nfc.PaymentBackend.PaymentAppInfo app = paymentBackend.getDefaultApp ( ) ; java.lang.String summary = null ; if ( app != null ) { summary = mContext.getString ( R.string.payment_summary , app.label ) ; } mSummaryLoader.setSummary ( this , summary ) ; } }
public void tearDown ( ) throws java.lang.Exception { if ( testSystemTzDataDir.exists ( ) ) { libcore.tzdata.update2.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( testInstallDir.exists ( ) ) { libcore.tzdata.update2.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( tempDir.exists ( ) ) { libcore.tzdata.update2.FileUtils.deleteRecursive ( tempDir ) ; } super . tearDown ( ) ; }
private java.lang.StringBuffer subformat ( double number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr , int maxIntDig ) { if ( ( currencySignCount ) == ( android.icu.text.DecimalFormat.CURRENCY_SIGN_COUNT_IN_PLURAL_FORMAT ) ) { return subformat ( currencyPluralInfo.select ( getFixedDecimal ( number ) ) , result , fieldPosition , isNegative , isInteger , parseAttr , maxIntDig ) ; } else { return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr , maxIntDig ) ; } }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , int [ ] data ) { validateIsInt32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_32 , data.length ) ; }
public boolean startFilteringMulticastV4Packets ( ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return ( ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) && ( mSupplicantStaIfaceHal.removeRxFilter ( SupplicantStaIfaceHal.RX_FILTER_TYPE_V4_MULTICAST ) ) ) && ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) ; } else { return ( ( doBooleanCommand ( "DRIVER RXFILTER-STOP" ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-REMOVE 2" ) ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-START" ) ) ; } }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; break ; case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } }
public static void writeUint16 ( int i , byte [ ] buf , int offset ) { buf [ offset ] = ( ( byte ) ( i > > > 8 ) ) ; buf [ ( offset + 1 ) ] = ( ( byte ) ( i ) ) ; }
public final void testPkgTypeSample ( ) throws java.lang.Exception { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_SAMPLES ; assertTrue ( p.hasMajorRevision ( ) ) ; assertFalse ( p.hasFullRevision ( ) ) ; assertTrue ( p.hasAndroidVersion ( ) ) ; assertFalse ( p.hasPath ( ) ) ; assertFalse ( p.hasVendor ( ) ) ; assertTrue ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
private java.lang.String getConferenceString ( com.android.incallui.Call call ) { boolean isGenericConference = call.can ( PhoneCapabilities.GENERIC_CONFERENCE ) ; com.android.incallui.Log.v ( this , ( "getConferenceString: " + isGenericConference ) ) ; final int resId = ( isGenericConference ) ? R.string.card_title_in_call : R.string.card_title_conf_call ; return mContext.getResources ( ) . getString ( resId ) ; }
public boolean canSupportCarrierVideoCall ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getCanSupportCarrierVideoCall ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CEQUINT : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return false ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public void testInstall_withNewerDistroVersion ( ) throws java.lang.Exception { libcore.tzdata.shared2.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) . replaceFormatVersionForTests ( 2 , 1 ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_FORMAT_VERSION , installer.installWithErrorCode ( distro.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public void link ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariable resolvedTarget ) { if ( ( varRef ) != null ) { varRef.setTarget ( resolvedTarget ) ; } else { assert ( lambda ) != null ; if ( resolvedTarget instanceof com.android.jack.ir.ast.JLocal ) { lambda.addCapturedVariable ( new com.android.jack.ir.ast.JLocalRef ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , ( ( com.android.jack.ir.ast.JLocal ) ( resolvedTarget ) ) ) ) ; } else { assert resolvedTarget instanceof com.android.jack.ir.ast.JParameter ; lambda.addCapturedVariable ( new com.android.jack.ir.ast.JParameterRef ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , ( ( com.android.jack.ir.ast.JParameter ) ( resolvedTarget ) ) ) ) ; } } }
private void initTetheredStateMachine ( int interfaceType , java.lang.String upstreamIface ) throws java.lang.Exception { initStateMachine ( interfaceType ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_REQUESTED , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED ) ; if ( upstreamIface != null ) { dispatchTetherConnectionChanged ( upstreamIface ) ; } org.mockito.Mockito.reset ( mNMService , mStatsService , mTetherHelper ) ; org.mockito.Mockito.when ( mNMService.getInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ) . thenReturn ( mInterfaceConfiguration ) ; }
public void test_tryLockJJZ_NotShared ( ) throws java.lang.Exception { final long POSITION = 100 ; final long SIZE = 200 ; fileLock = writeOnlyFileChannel.tryLock ( POSITION , SIZE , false ) ; assertTrue ( fileLock.isValid ( ) ) ; assertFalse ( fileLock.isShared ( ) ) ; assertSame ( writeOnlyFileChannel , fileLock.channel ( ) ) ; assertSame ( writeOnlyFileChannel , fileLock.acquiredBy ( ) ) ; assertEquals ( POSITION , fileLock.position ( ) ) ; assertEquals ( SIZE , fileLock.size ( ) ) ; }
public void onDestroy ( ) { com.android.dialer.common.LogUtil.enterBlock ( "CallLogFragment.onDestroy" ) ; mAdapter.changeCursor ( null ) ; getActivity ( ) . getContentResolver ( ) . unregisterContentObserver ( mCallLogObserver ) ; getActivity ( ) . getContentResolver ( ) . unregisterContentObserver ( mContactsObserver ) ; super . onDestroy ( ) ; }
public void logStatus ( java.lang.String message ) { try { java.io.FileWriter fos = new java.io.FileWriter ( mFile ) ; java.io.BufferedWriter bw = new java.io.BufferedWriter ( fos ) ; bw.write ( message ) ; bw.newLine ( ) ; bw.close ( ) ; } catch ( java.io.IOException e ) { android.util.Log.e ( com.android.pmc.PMCStatusLogger.TAG , ( ( ( "Exception writing log: " + message ) + " " ) + e ) ) ; } }
private void startManagedProfileProvisioning ( ) { com.android.managedprovisioning.ProvisionLogger.logd ( "Starting managed profile provisioning" ) ; createProfile ( getString ( R.string.default_managed_profile_name ) ) ; if ( ( mManagedProfileUserInfo ) != null ) { new com.android.managedprovisioning.task.DeleteNonRequiredAppsTask ( this , mMdmPackageName , mManagedProfileUserInfo.id , R.array.required_apps_managed_profile , R.array.vendor_required_apps_managed_profile , R.array.disallowed_apps_managed_profile , R.array.vendor_disallowed_apps_managed_profile , true , true , new com.android.managedprovisioning.task.DeleteNonRequiredAppsTask.Callback ( ) { @ java.lang.Override public void onSuccess ( ) { setUpProfileAndFinish ( ) ; } @ java.lang.Override public void onError ( ) { error ( "Delete non required apps task failed." ) ; } } ) . run ( ) ; } }
private com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo getManifestInfo ( java.lang.String manifestContents ) throws java.lang.Exception { java.io.InputStream bstream = new java.io.ByteArrayInputStream ( manifestContents.getBytes ( "UTF-8" ) ) ; org.eclipse.core.resources.IFile file = getProject ( ) . getFile ( "AndroidManifest.xml" ) ; if ( file.exists ( ) ) { file.setContents ( bstream , IFile.FORCE , new org.eclipse.core.runtime.NullProgressMonitor ( ) ) ; } else { file.create ( bstream , false , new org.eclipse.core.runtime.NullProgressMonitor ( ) ) ; } com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get ( getProject ( ) ) ; info.clear ( ) ; return info ; }
void makeWindowFreezingScreenIfNeededLocked ( com.android.server.wm.WindowState w ) { if ( ( ! ( okToDisplay ( ) ) ) && ( ( mWindowsFreezingScreen ) != ( com.android.server.wm.WindowManagerService.WINDOWS_FREEZING_SCREENS_TIMEOUT ) ) ) { if ( com.android.server.wm.WindowManagerService.DEBUG_ORIENTATION ) android.util.Slog.v ( com.android.server.wm.WindowManagerService.TAG , ( "Changing surface while display frozen: " + w ) ) ; w.mOrientationChanging = true ; w.mLastFreezeDuration = 0 ; mInnerFields.mOrientationChangeComplete = false ; if ( ( mWindowsFreezingScreen ) == ( com.android.server.wm.WindowManagerService.WINDOWS_FREEZING_SCREENS_NONE ) ) { mWindowsFreezingScreen = com.android.server.wm.WindowManagerService.WINDOWS_FREEZING_SCREENS_ACTIVE ; mH.removeMessages ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT ) ; mH.sendEmptyMessageDelayed ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT , com.android.server.wm.WindowManagerService.WINDOW_FREEZE_TIMEOUT_DURATION ) ; } } }
public void sendSMS ( java.lang.String smscPDU , java.lang.String pdu , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SEND_SMS , result , mRILDefaultWorkSource ) ; constructGsmSendSmsRilRequest ( rr , smscPDU , pdu ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; mMetrics.writeRilSendSms ( mInstanceId , rr.mSerial , SmsSession.Event.Tech.SMS_GSM , SmsSession.Event.Format.SMS_FORMAT_3GPP ) ; send ( rr ) ; }
public void onError ( int errorCode , java.lang.String message ) { java.lang.String toastMessage = ( ( "Error: " + errorCode ) + ": " ) + message ; mActivity.runOnUiThread ( ( ) -> android.widget.Toast.makeText ( com.android.phone.testapps.embmsfrontend.mActivity , toastMessage , Toast.LENGTH_SHORT ) . show ( ) ) ; }
public void linkNativeLibraryDirectory ( java.lang.String uuid , java.lang.String packageName , java.lang.String nativeLibPath32 , int userId ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.linkNativeLibraryDirectory ( uuid , packageName , nativeLibPath32 , userId ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "dependencies" , dependencies ) . add ( "variantName" , variantName ) . add ( "requestedCoordinates" , requestedCoordinates ) . add ( "resolvedCoordinates" , resolvedCoordinates ) . add ( "isOptional" , isOptional ) . add ( "super" , super . toString ( ) ) . toString ( ) ; }
private void enableAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client , boolean enable ) { int advertiserId = client.advertiserId ; int advertiseTimeoutSeconds = ( ( int ) ( java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds ( client.settings.getTimeout ( ) ) ) ) ; if ( mAdapterService.isMultiAdvertisementSupported ( ) ) { gattClientEnableAdvNative ( advertiserId , enable , advertiseTimeoutSeconds ) ; } else { gattAdvertiseNative ( client.advertiserId , enable ) ; } }
private android.telecom.ParcelableConnection parcelable ( com.android.server.telecom.tests.ConnectionServiceFixture.ConnectionInfo c ) { return new android.telecom.ParcelableConnection ( c.request.getAccountHandle ( ) , c.state , c.capabilities , c.properties , c.supportedAudioRoutes , c.request.getAddress ( ) , c.addressPresentation , c.callerDisplayName , c.callerDisplayNamePresentation , c.videoProvider , c.videoState , false , false , 0 , c.statusHints , c.disconnectCause , c.conferenceableConnectionIds , c.extras ) ; }
private void reportStartInstrumentationFailureLocked ( android.app.IInstrumentationWatcher watcher , android.content.ComponentName cn , java.lang.String report ) { android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , report ) ; if ( watcher != null ) { android.os.Bundle results = new android.os.Bundle ( ) ; results.putString ( Instrumentation.REPORT_KEY_IDENTIFIER , "ActivityManagerService" ) ; results.putString ( "Error" , report ) ; mInstrumentationReporter.reportStatus ( watcher , cn , ( - 1 ) , results ) ; } }
static boolean safeContains ( java.util.Collection < ? > collection , @ javax.annotation.Nullable java.lang.Object object ) { com.google.common.base.Preconditions.checkNotNull ( collection ) ; try { return collection.contains ( object ) ; } catch ( java.lang.ClassCastException e ) { return false ; } catch ( java.lang.NullPointerException e ) { return false ; } }
public static com.google.gct.testing.CloudTestConfigurationImpl getConfigurationById ( int id , org.jetbrains.android.facet.AndroidFacet facet ) { for ( com.android.tools.idea.run.CloudTestConfiguration configuration : com.google.gct.testing.GoogleCloudTestingUtils.TESTING_CONFIGURATION_FACTORY.getTestingConfigurations ( facet ) ) { if ( ( configuration.getId ( ) ) == id ) { return ( ( com.google.gct.testing.CloudTestConfigurationImpl ) ( configuration ) ) ; } } return null ; }
protected void done ( ) { try { showImageEditor ( get ( ) , file.getAbsolutePath ( ) ) ; this . setTitle ( java.lang.String.format ( "Draw 9-patch: %s" , file.getAbsolutePath ( ) ) ) ; } catch ( java.lang.InterruptedException e ) { e.printStackTrace ( ) ; } catch ( java.util.concurrent.ExecutionException e ) { e.printStackTrace ( ) ; } }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; requestWindowFeature ( Window.FEATURE_NO_TITLE ) ; setContentView ( R.layout.main ) ; android.view.View.OnClickListener clickListener = new android.view.View.OnClickListener ( ) { @ java.lang.Override public void onClick ( android.view.View v ) { startActivity ( new android.content.Intent ( com.android.cts.verifier.CtsVerifierActivity.this , com.android.cts.verifier.TestListActivity.class ) ) ; } } ; findViewById ( R.id.detective_logo ) . setOnClickListener ( clickListener ) ; findViewById ( R.id.continue_button ) . setOnClickListener ( clickListener ) ; }
public static android.support.test.espresso.ViewAction open ( final int gravity ) { return new android.support.test.espresso.contrib.DrawerActions.DrawerAction ( ) { @ java.lang.Override public java.lang.String getDescription ( ) { return "open drawer with gravity " + gravity ; } @ java.lang.Override protected org.hamcrest.Matcher < android.view.View > checkAction ( ) { return android.support.test.espresso.contrib.DrawerMatchers.isClosed ( gravity ) ; } @ java.lang.Override protected void performAction ( android.support.v4.widget.DrawerLayout view ) { view.openDrawer ( gravity ) ; } } ; }
private void copyTo ( java.lang.Object array , android.renderscript.Element.DataType dt , int arrayLen ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyTo" ) ; mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , array , dt ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public java.lang.String getTestedApplicationId ( ) { if ( ( mType ) == ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { assert ( mTestedConfig ) != null ; if ( ( mTestedConfig.mType ) == ( com.android.builder.core.VariantConfiguration.Type.LIBRARY ) ) { return getApplicationId ( ) ; } else { return mTestedConfig.getApplicationId ( ) ; } } return null ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JThrowingExpressionBasicBlock block ) { tracer.getStatistic ( com.android.jack.ir.ast.cfg.CfgBasicBlockTracker.TOTAL_COUNT ) . add ( block.getElementCount ( ) ) ; tracer.getStatistic ( com.android.jack.ir.ast.cfg.CfgBasicBlockTracker.THROWING_EXPR_COUNT ) . add ( block.getElementCount ( ) ) ; return false ; }
public void enter ( ) { handleNetworkDisconnect ( ) ; java.lang.String suppState = java.lang.System.getProperty ( "init.svc.wpa_supplicant" ) ; if ( suppState == null ) suppState = "unknown" ; setWifiState ( android.net.wifi.WifiManager.WIFI_STATE_DISABLING ) ; mSupplicantStateTracker.sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_RESET_SUPPLICANT_STATE ) ; logd ( ( ( "SupplicantStoppingState: disableSupplicant " + " init.svc.wpa_supplicant=" ) + suppState ) ) ; if ( mWifiNative.disableSupplicant ( ) ) { mWifiNative.closeSupplicantConnection ( ) ; sendSupplicantConnectionChangedBroadcast ( false ) ; setWifiState ( android.net.wifi.WifiManager.WIFI_STATE_DISABLED ) ; } else { handleSupplicantConnectionLoss ( true ) ; } transitionTo ( mInitialState ) ; }
public void testSubjectAltNameAndCn ( ) { assertFalse ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "a.y.com" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "imap.g.com" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "a.y.com" ) ) ) ; assertTrue ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "imap.g.com" ) ) ) ; }
public void testHfIndicatorParser_testCorrectValue ( ) { int batteryLevel = 10 ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; mRemoteDevices.onHfIndicatorValueChanged ( com.android.bluetooth.btservice.RemoteDevicesTest.getHfIndicatorIntent ( mDevice1 , batteryLevel , HeadsetHalConstants.HF_INDICATOR_BATTERY_LEVEL_STATUS ) ) ; org.mockito.Mockito.verify ( mAdapterService ) . sendBroadcast ( mIntentArgument.capture ( ) , mStringArgument.capture ( ) ) ; com.android.bluetooth.btservice.RemoteDevicesTest.verifyBatteryLevelChangedIntent ( mDevice1 , batteryLevel , mIntentArgument ) ; org.junit.Assert.assertEquals ( AdapterService.BLUETOOTH_PERM , mStringArgument.getValue ( ) ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { final com.intellij.openapi.project.Project project = e.getData ( PlatformDataKeys.PROJECT ) ; final com.intellij.openapi.vfs.VirtualFile file = e.getData ( PlatformDataKeys.VIRTUAL_FILE ) ; if ( ( ( project == null ) || ( project.isDisposed ( ) ) ) || ( ! ( org.jetbrains.plugins.github.util.GithubUtil.testGitExecutable ( project ) ) ) ) { return ; } org.jetbrains.plugins.github.GithubCreatePullRequestAction.createPullRequest ( project , file ) ; }
public void exit ( ) { android.os.Message currentMessage = getCurrentMessage ( ) ; log ( ( ( ( "Exit Connecting(" + ( mDevice ) ) + "): " ) + ( currentMessage == null ? "null" : com.android.bluetooth.a2dp.A2dpStateMachine.messageWhatToString ( currentMessage.what ) ) ) ) ; mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING ; removeMessages ( com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT ) ; }
protected void onSaveInstanceState ( android.os.Bundle outState ) { com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( "onSaveInstanceState: " + ( mSlotId ) ) ) ; outState.putBoolean ( com.android.stk.StkInputActivity.ACCEPT_USERS_INPUT_KEY , mAcceptUsersInput ) ; outState.putBoolean ( com.android.stk.StkInputActivity.RESPONSE_SENT_KEY , mIsResponseSent ) ; outState.putString ( com.android.stk.StkInputActivity.INPUT_STRING_KEY , mTextIn.getText ( ) . toString ( ) ) ; }
private boolean isImsiEncryptionRequired ( int subId , int keyType ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( mContext.getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; if ( configManager == null ) { return false ; } android.os.PersistableBundle pb = configManager.getConfigForSubId ( subId ) ; if ( pb == null ) { return false ; } int keyAvailability = pb.getInt ( CarrierConfigManager.IMSI_KEY_AVAILABILITY_INT ) ; return android.telephony.TelephonyManager.isKeyEnabled ( keyAvailability , keyType ) ; }
public void test_selectJ_Empty_Keys ( ) throws java.io.IOException { final long SELECT_TIMEOUT_MS = 2000 ; long t0 = java.lang.System.nanoTime ( ) ; selector.select ( SELECT_TIMEOUT_MS ) ; long t1 = java.lang.System.nanoTime ( ) ; long waitMs = ( ( t1 - t0 ) / 1000L ) / 1000L ; assertTrue ( ( waitMs >= SELECT_TIMEOUT_MS ) ) ; assertTrue ( ( waitMs < ( 5 * SELECT_TIMEOUT_MS ) ) ) ; }
public void tesUiccProfileInfoSanity ( ) { org.junit.Assert.assertEquals ( 1 , mUiccProfile.getNumApplications ( ) ) ; org.junit.Assert.assertNull ( mUiccProfile.getUniversalPinState ( ) ) ; org.junit.Assert.assertNull ( mUiccProfile.getOperatorBrandOverride ( ) ) ; for ( com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType mAppType : IccCardApplicationStatus.AppType.values ( ) ) { if ( mAppType == ( IccCardApplicationStatus.AppType.APPTYPE_USIM ) ) { org.junit.Assert.assertTrue ( mUiccProfile.isApplicationOnIcc ( mAppType ) ) ; } else { org.junit.Assert.assertFalse ( mUiccProfile.isApplicationOnIcc ( mAppType ) ) ; } } }
public void testCountingProxy ( ) throws java.lang.Exception { java.net.Socket socket = new java.net.Socket ( ) ; try { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start ( ) ; try { java.net.Proxy proxy = countingProxy.asProxy ( ) ; assertEquals ( java.net.Proxy.Type.HTTP , proxy.type ( ) ) ; java.net.SocketAddress address = proxy.address ( ) ; socket.connect ( address , 200 ) ; countingProxy.waitAndAssertConnectionCount ( 1 ) ; } finally { countingProxy.shutdown ( ) ; } } finally { socket.close ( ) ; } }
public void testDevPortSane ( ) throws java.lang.Exception { java.io.File f = new java.io.File ( "/dev/port" ) ; assertFalse ( f.canRead ( ) ) ; assertFalse ( f.canWrite ( ) ) ; assertFalse ( f.canExecute ( ) ) ; assertFalse ( f.exists ( ) ) ; }
public void init ( boolean forEncryption , org.bouncycastle.crypto.CipherParameters privParam , org.bouncycastle.crypto.CipherParameters pubParam , org.bouncycastle.crypto.CipherParameters params ) { this . forEncryption = forEncryption ; this . privParam = privParam ; this . pubParam = pubParam ; this . V = new byte [ 0 ] ; extractParams ( params ) ; }
public void destroy ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { destroy ( ) ; } } ) ; return ; } mAwContents.destroy ( ) ; if ( ( mGLfunctor ) != null ) { mGLfunctor.destroy ( ) ; mGLfunctor = null ; } }
private void setMicrophoneMuteNoCallerCheck ( boolean on , int userId ) { if ( com.android.server.audio.AudioService.DEBUG_VOL ) { android.util.Log.d ( com.android.server.audio.AudioService.TAG , java.lang.String.format ( "Mic mute %s, user=%d" , on , userId ) ) ; } if ( ( getCurrentUserId ( ) ) == userId ) { android.media.AudioSystem.muteMicrophone ( on ) ; } }
public void testGerman ( ) throws java.lang.Exception { assertEquals ( ( "res/values-de/typos.xml:6: Warning: \"befindet eine\" is a common misspelling; did you mean \"befindet sich eine\" ? [Typos]\n" + ( ( ( ( ( ( ( ( ( " wo befindet eine ip\n" + " ^\n" ) + "res/values-de/typos.xml:9: Warning: \"Authorisierungscode\" is a common misspelling; did you mean \"Autorisierungscode\" ? [Typos]\n" ) + " <string name=\"s2\">(Authorisierungscode!)</string>\n" ) + " ^\n" ) + "res/values-de/typos.xml:10: Warning: \"zurück gefoobaren\" is a common misspelling; did you mean \"zurückgefoobaren\" ? [Typos]\n" ) + " <string name=\"s3\"> zurück gefoobaren!</string>\n" ) + " ^\n" ) + "0 errors, 3 warnings\n" ) + "" ) ) , lintProject ( "res/values-de/typos.xml" ) ) ; }
private void addRemoteTool ( com.android.sdklib.repository.FullRevision revision , com.android.sdklib.repository.FullRevision minPlatformToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newTool ( revision , minPlatformToolsRev ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public boolean dispatchTouchEvent ( android.view.MotionEvent ev ) { if ( ( ev.getAction ( ) ) == ( android.view.MotionEvent.ACTION_DOWN ) ) { com.android.contacts.interactions.TouchPointManager.getInstance ( ) . setPoint ( ( ( int ) ( ev.getRawX ( ) ) ) , ( ( int ) ( ev.getRawY ( ) ) ) ) ; } return super . dispatchTouchEvent ( ev ) ; }
public void testGetCoreInterfaceRewritingTarget_staticInterfaceMethod ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( "" ) , java.lang.Thread.currentThread ( ) . getContextClassLoader ( ) , com.google.common.collect.ImmutableList.of ( ) , com.google.common.collect.ImmutableList.of ( "java/util/Comparator" ) ) ; com.google.common.truth.Truth.assertThat ( support.getCoreInterfaceRewritingTarget ( Opcodes.INVOKESTATIC , "java/util/Comparator" , "reverseOrder" , "()Ljava/util/Comparator;" , true ) ) . isEqualTo ( java.util.Comparator.class ) ; }
public void validatePolicyWithRoamingPartnerWithoutCountries ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; android.net.wifi.hotspot2.pps.Policy.RoamingPartner partner = new android.net.wifi.hotspot2.pps.Policy.RoamingPartner ( ) ; partner.setFqdn ( "test.com" ) ; partner.setFqdnExactMatch ( true ) ; partner.setPriority ( 12 ) ; policy.getPreferredRoamingPartnerList ( ) . add ( partner ) ; org.junit.Assert.assertFalse ( policy.validate ( ) ) ; }
public boolean canBeForceHidden ( com.android.internal.policy.impl.WindowState win , android.view.WindowManager.LayoutParams attrs ) { switch ( attrs.type ) { case android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR : case android.view.WindowManager.LayoutParams.TYPE_NAVIGATION_BAR : case android.view.WindowManager.LayoutParams.TYPE_WALLPAPER : case android.view.WindowManager.LayoutParams.TYPE_DREAM : case android.view.WindowManager.LayoutParams.TYPE_UNIVERSE_BACKGROUND : case android.view.WindowManager.LayoutParams.TYPE_KEYGUARD : return false ; default : return true ; } }
public void reset ( ) { com.intellij.openapi.updateSettings.impl.UpdateSettings settings = com.intellij.openapi.updateSettings.impl.UpdateSettings.getInstance ( ) ; myUpdatesSettingsPanel.myCheckForUpdates.setSelected ( settings.isCheckNeeded ( ) ) ; myUpdatesSettingsPanel.myUseSecureConnection.setSelected ( settings.isSecureConnection ( ) ) ; myUpdatesSettingsPanel.updateLastCheckedLabel ( ) ; myUpdatesSettingsPanel.setSelectedChannelType ( com.intellij.openapi.updateSettings.impl.ChannelStatus.fromCode ( settings.getUpdateChannelType ( ) ) ) ; myUpdatesSettingsPanel.setEnabledExternalUpdateSources ( settings.getEnabledExternalUpdateSources ( ) ) ; myUpdatesSettingsPanel.setExternalUpdateChannels ( settings.getExternalUpdateChannels ( ) ) ; }
public void onHelp ( ) { final java.io.PrintWriter pw = getOutPrintWriter ( ) ; pw.println ( "OTA Dexopt (ota) commands:" ) ; pw.println ( " help" ) ; pw.println ( " Print this help text." ) ; pw.println ( "" ) ; pw.println ( " prepare" ) ; pw.println ( " Prepare an OTA dexopt pass, collecting all packages." ) ; pw.println ( " done" ) ; pw.println ( " Replies whether the OTA is complete or not." ) ; pw.println ( " step" ) ; pw.println ( " OTA dexopt the next package." ) ; pw.println ( " next" ) ; pw.println ( " Get parameters for OTA dexopt of the next package." ) ; pw.println ( " cleanup" ) ; pw.println ( " Clean up internal states. Ends an OTA session." ) ; }
public void testVFE1 ( ) { load ( "dot.junit.opcodes.move_exception.d.T_move_exception_3" , java.lang.VerifyError.class ) ; }
private static native void nativeDrawVertices ( long nativeCanvas , int mode , int n , float [ ] verts , int vertOffset , float [ ] texs , int texOffset , int [ ] colors , int colorOffset , short [ ] indices , int indexOffset , int indexCount , long nativePaint ) ;
private void assertOnErrors ( java.util.List < java.lang.Throwable > errorsFound ) { if ( ! ( errorsFound.isEmpty ( ) ) ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; for ( java.lang.Throwable error : errorsFound ) { builder.append ( error.getMessage ( ) ) . append ( "\n" ) ; } junit.framework.Assert.fail ( builder.toString ( ) ) ; } }
public void processTerminated ( com.intellij.appengine.actions.ProcessEvent event ) { int exitCode = event.getExitCode ( ) ; if ( exitCode == 0 ) { myCallback.succeeded ( new com.intellij.remoteServer.runtime.deployment.DeploymentRuntime ( ) { @ java.lang.Override public boolean isUndeploySupported ( ) { return false ; } @ java.lang.Override public void undeploy ( @ org.jetbrains.annotations.NotNull com.intellij.appengine.actions.UndeploymentTaskCallback callback ) { } } ) ; } else { myCallback.errorOccurred ( ( "Process terminated with exit code " + exitCode ) ) ; } }
private int regCodeToServiceState ( int code ) { switch ( code ) { case android.telephony.ServiceState.RIL_REG_STATE_HOME : case android.telephony.ServiceState.RIL_REG_STATE_ROAMING : return android.telephony.ServiceState.STATE_IN_SERVICE ; default : return android.telephony.ServiceState.STATE_OUT_OF_SERVICE ; } }
public void registerMultiFlavorSourceProvider ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String flavorName , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider ) { if ( ( extraArtifactMap.get ( name ) ) == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "Artifact with name %1$s is not yet registered. Use registerArtifactType()" , name ) ) ; } extraMultiFlavorSourceProviders.put ( flavorName , new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer ( name , sourceProvider ) ) ; }
private static void addModuleForBlockingNumberAndOptionallyReportingSpam ( android.content.Context context , java.util.List < com.android.dialer.contactactions.ContactActionModule > modules , java.lang.String normalizedNumber , java.lang.String countryIso , int callType , com.android.dialer.logging.ReportingLocation.Type reportingLocation ) { modules.add ( new com.android.dialer.contactactions.ContactActionModule ( ) { @ java.lang.Override public int getStringId ( ) { return R.string.block_and_optionally_report_spam ; } @ java.lang.Override public int getDrawableId ( ) { return R.drawable.quantum_ic_block_vd_theme_24 ; } @ java.lang.Override public boolean onClick ( ) { com.android.dialer.blockreportspam.ShowBlockReportSpamDialogNotifier.notifyShowDialogToBlockNumberAndOptionallyReportSpam ( context , normalizedNumber , countryIso , callType , reportingLocation ) ; return true ; } } ) ; }
private void uploadData ( ) { if ( ( outputFile ) == null ) { return ; } try { java.net.URL u = new java.net.URL ( "http://android-devtools-logging.appspot.com/log/" ) ; java.net.HttpURLConnection conn = null ; conn = ( ( java.net.HttpURLConnection ) ( u.openConnection ( ) ) ) ; conn.setDoOutput ( true ) ; conn.setRequestMethod ( "POST" ) ; conn.setRequestProperty ( "Content-Type" , "application/x-www-form-urlencoded" ) ; conn.setRequestProperty ( "Content-Length" , java.lang.String.valueOf ( outputFile.length ( ) ) ) ; java.io.InputStream is = null ; try { is = new java.io.BufferedInputStream ( new java.io.FileInputStream ( outputFile ) ) ; java.io.OutputStream os = conn.getOutputStream ( ) ; com.google.common.io.ByteStreams.copy ( is , os ) ; os.close ( ) ; } finally { if ( is != null ) { is.close ( ) ; } } java.lang.String line ; java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.InputStreamReader ( conn.getInputStream ( ) ) ) ; while ( ( line = reader.readLine ( ) ) != null ) { if ( ( iLogger ) != null ) { iLogger.info ( ( "From POST : " + line ) ) ; } } reader.close ( ) ; } catch ( java.lang.Exception e ) { if ( ( iLogger ) != null ) { iLogger.warning ( "An exception while generated while uploading the profiler data" ) ; iLogger.error ( e , "Exception while uploading the profiler data" ) ; } } }
public void testExtraPathWithSlash ( ) throws java.lang.Exception { java.lang.String document = ( ( ( ( "<?xml version=\"1.0\"?>" + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.OPEN_TAG_REPO ) ) + "<r:extra> <r:revision>1</r:revision> <r:path>path</r:path> " ) + "<r:archives> <r:archive> <r:size>1</r:size> <r:checksum>2822ae37115ebf13412bbef91339ee0d9454525e</r:checksum> " ) + "<r:url>url</r:url> </r:archive> </r:archives> </r:extra>" ) + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.CLOSE_TAG_REPO ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; javax.xml.validation.Validator validator = getRepoValidator ( SdkRepoConstants.NS_LATEST_VERSION , null ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "cvc-complex-type.2.4.a: Invalid content was found starting with element 'r:extra'.*" , e.getMessage ( ) ) ; return ; } fail ( ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.security.Provider [ ] providers = java.security.Security.getProviders ( "MessageDigest.SHA" ) ; for ( java.security.Provider provider : providers ) { digestAlgs.put ( provider , getDigestAlgorithms ( provider ) ) ; } sun.security.jca.Providers.setMaximumAllowableApiLevelForBcDeprecation ( dalvik.system.VMRuntime.getRuntime ( ) . getTargetSdkVersion ( ) ) ; }
public int enableSystemApp ( @ android.annotation.NonNull android.content.ComponentName admin , android.content.Intent intent ) { throwIfParentInstance ( "enableSystemApp" ) ; if ( ( mService ) != null ) { try { return mService.enableSystemAppWithIntent ( admin , mContext.getPackageName ( ) , intent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return 0 ; }
protected boolean isAvailable ( int service ) { int offset = service / 8 ; if ( offset >= ( mServiceTable.length ) ) { android.telephony.Rlog.e ( getTag ( ) , ( ( ( "isAvailable for service " + ( service + 1 ) ) + " fails, max service is " ) + ( ( mServiceTable.length ) * 8 ) ) ) ; return false ; } int bit = service % 8 ; return ( ( mServiceTable [ offset ] ) & ( 1 << bit ) ) != 0 ; }
public static com.android.internal.content.NativeLibraryHelper.Handle create ( java.lang.Package pkg ) throws java.io.IOException { return com.android.internal.content.NativeLibraryHelper.Handle.create ( pkg.getAllCodePaths ( ) , ( ( ( pkg.applicationInfo.flags ) & ( android.content.pm.ApplicationInfo.FLAG_MULTIARCH ) ) != 0 ) , ( ( ( pkg.applicationInfo.flags ) & ( android.content.pm.ApplicationInfo.FLAG_EXTRACT_NATIVE_LIBS ) ) != 0 ) , ( ( ( pkg.applicationInfo.flags ) & ( android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE ) ) != 0 ) ) ; }
public void test_ConstructorLjava_lang_String ( ) { try { java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( "Wrong.file" ) ; fail ( "Should throw IOException" ) ; } catch ( java.io.IOException e ) { } try { java.io.File file = tests.support.resource.Support_Resources.copyFile ( resources , null , jarName ) ; java.lang.String fileName = file.getCanonicalPath ( ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( fileName ) ; jarFile.close ( ) ; } catch ( java.io.IOException e ) { fail ( "Should not throw IOException" ) ; } }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , boolean isConnected , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == 0 ) ) { return - 1 ; } if ( packet != null ) { packet.setReceivedLength ( byteCount ) ; if ( ! isConnected ) { packet.setAddress ( srcAddress.getAddress ( ) ) ; packet.setPort ( srcAddress.getPort ( ) ) ; } } return byteCount ; }
private static void assertArrayEquals ( byte [ ] expected , byte [ ] actual ) { org.junit.Assert.assertTrue ( ( ( ( "Expected=" + ( java.util.Arrays.toString ( expected ) ) ) + ", actual=" ) + ( java.util.Arrays.toString ( actual ) ) ) , java.util.Arrays.equals ( expected , actual ) ) ; }
public void java7Switches004 ( ) throws java.lang.Exception { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; java.io.File jackZipFile = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "tmp" , toolchain.getLibraryExtension ( ) ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . addToClasspath ( toolchain.getDefaultBootClasspath ( ) ) . srcToLib ( jackZipFile , true , com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.java7.switches.test001.jack" ) ) ; toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . libToExe ( jackZipFile , com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false ) ; }
public void removeRegistrationListener ( int slotId , int featureType , com.android.ims.internal.IImsRegistrationListener listener ) throws android.os.RemoteException { enforceReadPhoneStatePermission ( "removeRegistrationListener" ) ; synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { feature.removeRegistrationListener ( listener ) ; } } }
public void testZipFileWithLotsOfEntries ( ) throws java.io.IOException { int expectedEntryCount = ( 64 * 1024 ) - 1 ; java.io.File f = createZipFile ( expectedEntryCount , 0 ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( f ) ; int entryCount = 0 ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > e = zipFile.entries ( ) ; e.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry zipEntry = e.nextElement ( ) ; ++ entryCount ; } assertEquals ( expectedEntryCount , entryCount ) ; zipFile.close ( ) ; }
private void createLogger ( ) { mSdkLog = new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ; }
public static java.security.KeyFactory getInstance ( java.lang.String algorithm , java.lang.String provider ) throws java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException { sun.security.jca.Providers.checkBouncyCastleDeprecation ( provider , "KeyFactory" , algorithm ) ; sun.security.jca.GetInstance.Instance instance = sun.security.jca.GetInstance.getInstance ( "KeyFactory" , java.security.KeyFactorySpi.class , algorithm , provider ) ; return new java.security.KeyFactory ( ( ( java.security.KeyFactorySpi ) ( instance.impl ) ) , instance.provider , algorithm ) ; }
public java.util.List < com.intellij.ui.tabs.impl.TabInfo > getTabs ( ) { if ( ( myAllTabs ) != null ) return myAllTabs ; java.util.ArrayList < com.intellij.ui.tabs.impl.TabInfo > result = new java.util.ArrayList < com.intellij.ui.tabs.impl.TabInfo > ( ) ; result.addAll ( myVisibleInfos ) ; for ( com.intellij.ui.tabs.impl.TabInfo each : myHiddenInfos.keySet ( ) ) { result.add ( getIndexInVisibleArray ( each ) , each ) ; } if ( isAlphabeticalMode ( ) ) { java.util.Collections.sort ( result , com.intellij.ui.tabs.impl.JBTabsImpl.ABC_COMPARATOR ) ; } myAllTabs = result ; return result ; }
public org.objectweb.asm.util.Printer visitLocalVariableAnnotation ( int typeRef , org.objectweb.asm.TypePath typePath , org.objectweb.asm.Label [ ] start , org.objectweb.asm.Label [ ] end , int [ ] index , java.lang.String desc , boolean visible ) { buf.setLength ( 0 ) ; buf.append ( tab2 ) . append ( "LOCALVARIABLE @" ) ; appendDescriptor ( org.objectweb.asm.util.Textifier.FIELD_DESCRIPTOR , desc ) ; buf.append ( '(' ) ; text.add ( buf.toString ( ) ) ; org.objectweb.asm.util.Textifier t = createTextifier ( ) ; text.add ( t.getText ( ) ) ; buf.setLength ( 0 ) ; buf.append ( ") : " ) ; appendTypeReference ( typeRef ) ; buf.append ( ", " ) . append ( typePath ) ; for ( int i = 0 ; i < ( start.length ) ; ++ i ) { buf.append ( " [ " ) ; appendLabel ( start [ i ] ) ; buf.append ( " - " ) ; appendLabel ( end [ i ] ) ; buf.append ( " - " ) . append ( index [ i ] ) . append ( " ]" ) ; } buf.append ( ( visible ? "\n" : " // invisible\n" ) ) ; text.add ( buf.toString ( ) ) ; return t ; }
public void testGetName_Locale_Int_String_BooleanArray ( ) { com.ibm.icu.util.Currency currency = com.ibm.icu.util.Currency.getInstance ( ULocale.CHINA ) ; boolean [ ] isChoiceFormat = new boolean [ 1 ] ; int nameStyle = com.ibm.icu.util.Currency.LONG_NAME ; java.lang.String pluralCount = "" ; java.lang.String ulocaleName = currency.getName ( ULocale.CANADA , nameStyle , pluralCount , isChoiceFormat ) ; assertEquals ( "currency name mismatch" , "Chinese Yuan" , ulocaleName ) ; java.lang.String localeName = currency.getName ( java.util.Locale.CANADA , nameStyle , pluralCount , isChoiceFormat ) ; assertEquals ( "currency name mismatch" , ulocaleName , localeName ) ; }
public java.lang.String getPackageName ( ) { java.lang.String packageName ; if ( ( mType ) == ( com.android.builder.VariantConfiguration.Type.TEST ) ) { packageName = mMergedFlavor.getTestPackageName ( ) ; if ( packageName == null ) { java.lang.String testedPackage = mTestedConfig.getPackageName ( ) ; packageName = testedPackage + ".test" ; } } else { packageName = getPackageOverride ( ) ; if ( packageName == null ) { packageName = getPackageFromManifest ( ) ; } } return packageName ; }
public void handleMessage ( android.os.Message msg ) { android.os.AsyncResult ar = ( ( android.os.AsyncResult ) ( msg.obj ) ) ; switch ( msg.what ) { case com.android.settings.IccLockSettings.ENABLE_ICC_PIN_COMPLETE : iccLockChanged ( ( ( ar.exception ) == null ) ) ; break ; case com.android.settings.IccLockSettings.CHANGE_ICC_PIN_COMPLETE : iccPinChanged ( ( ( ar.exception ) == null ) ) ; break ; } return ; }
private boolean areAllApplicationsReady ( ) { for ( com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications ) { if ( ( ( app != null ) && ( isSupportedApplication ( app ) ) ) && ( ! ( app.isReady ( ) ) ) ) { if ( com.android.internal.telephony.uicc.UiccProfile.VDBG ) com.android.internal.telephony.uicc.UiccProfile.log ( "areAllApplicationsReady: return false" ) ; return false ; } } if ( com.android.internal.telephony.uicc.UiccProfile.VDBG ) { com.android.internal.telephony.uicc.UiccProfile.log ( ( "areAllApplicationsReady: outside loop, return " + ( ( mUiccApplications [ 0 ] ) != null ) ) ) ; } return ( mUiccApplications [ 0 ] ) != null ; }
private void transform ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn , @ javax.annotation.Nonnull java.io.OutputStream os ) throws java.io.IOException { com.android.sched.util.stream.UncloseableOutputStream uos = new com.android.sched.util.stream.UncloseableOutputStream ( os ) ; java.util.zip.DeflaterOutputStream dos = new java.util.zip.DeflaterOutputStream ( uos , new java.util.zip.Deflater ( ) ) ; try { com.android.jill.backend.jayce.JayceWriter writer = createWriter ( dos ) ; com.android.jill.frontend.java.ClassNodeWriter asm2jayce = new com.android.jill.frontend.java.ClassNodeWriter ( writer , new com.android.jill.frontend.java.SourceInfoWriter ( writer ) , options ) ; asm2jayce.write ( cn ) ; writer.flush ( ) ; } finally { dos.close ( ) ; } }
static java.lang.String readString ( com.android.volley.toolbox.DiskBasedCache.CountingInputStream cis ) throws java.io.IOException { long n = com.android.volley.toolbox.DiskBasedCache.readLong ( cis ) ; byte [ ] b = com.android.volley.toolbox.DiskBasedCache.streamToBytes ( cis , n ) ; return new java.lang.String ( b , "UTF-8" ) ; }
public static < K extends java.lang.Comparable < ? super K > , V > com.google.common.collect.ImmutableSortedMap < K , V > of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 ) { return com.google.common.collect.ImmutableSortedMap.fromEntries ( com.google.common.collect.Ordering.natural ( ) , false , 4 , com.google.common.collect.ImmutableMap.entryOf ( k1 , v1 ) , com.google.common.collect.ImmutableMap.entryOf ( k2 , v2 ) , com.google.common.collect.ImmutableMap.entryOf ( k3 , v3 ) , com.google.common.collect.ImmutableMap.entryOf ( k4 , v4 ) ) ; }
private com.android.ide.eclipse.ddms.IToolsLocator [ ] instantiateToolsLocators ( org.eclipse.core.runtime.IConfigurationElement [ ] configElements ) throws org.eclipse.core.runtime.CoreException { java.util.ArrayList < com.android.ide.eclipse.ddms.IToolsLocator > list = new java.util.ArrayList < com.android.ide.eclipse.ddms.IToolsLocator > ( ) ; if ( ( configElements.length ) > 0 ) { org.eclipse.core.runtime.IConfigurationElement configElement = configElements [ 0 ] ; java.lang.Object obj = configElement.createExecutableExtension ( "class" ) ; if ( obj instanceof com.android.ide.eclipse.ddms.IToolsLocator ) { list.add ( ( ( com.android.ide.eclipse.ddms.IToolsLocator ) ( obj ) ) ) ; } } return list.toArray ( new com.android.ide.eclipse.ddms.IToolsLocator [ list.size ( ) ] ) ; }
public void onError ( int error ) { com.googlecode.android_scripting.Log.d ( ( "PacketKeepaliveCallback on error! - code:" + error ) ) ; if ( ( ( mEvents ) & ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.PacketKeepaliveReceiver.EVENT_ERROR ) ) == ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.PacketKeepaliveReceiver.EVENT_ERROR ) ) { mEventFacade.postEvent ( ConnectivityConstants.EventPacketKeepaliveCallback , new com.googlecode.android_scripting.facade.ConnectivityEvents.PacketKeepaliveEvent ( mId , com.googlecode.android_scripting.facade.ConnectivityManagerFacade.getPacketKeepaliveReceiverEventString ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.PacketKeepaliveReceiver.EVENT_ERROR ) ) ) ; } }
public java.lang.Integer wifiNanAttach ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "nanConfig" ) org.json.JSONObject nanConfig ) throws android.os.RemoteException , org.json.JSONException { synchronized ( mLock ) { int sessionId = getNextSessionId ( ) ; mMgr.attach ( null , com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.getConfigRequest ( nanConfig ) , new com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.NanAttachCallbackPostsEvents ( sessionId ) , new com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.NanIdentityChangeListenerPostsEvents ( sessionId ) ) ; return sessionId ; } }
private void onRenderingTargetChange ( ) { if ( ( mDisableUpdates ) > 0 ) { return ; } if ( ( ( mListener ) != null ) && ( ( mRenderingTarget ) != null ) ) { mListener.onRenderingTargetPreChange ( mRenderingTarget ) ; } int index = mTargetCombo.getSelectionIndex ( ) ; mRenderingTarget = mTargetList.get ( index ) ; boolean computeOk = computeCurrentConfig ( ) ; updateThemes ( ) ; saveState ( ) ; if ( computeOk && ( ( mListener ) != null ) ) { mListener.onConfigurationChange ( ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testThrowException ( ) ; Main.testDropArguments ( ) ; Main.testCatchException ( ) ; Main.testGuardWithTest ( ) ; Main.testArrayElementGetter ( ) ; Main.testArrayElementSetter ( ) ; Main.testIdentity ( ) ; Main.testConstant ( ) ; Main.testBindTo ( ) ; Main.testFilterReturnValue ( ) ; }
public static android.telephony.SignalStrength convertHalSignalStrength ( com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { int tdscdmaRscp_1_2 = 255 ; if ( ( ( signalStrength.tdScdma.rscp ) >= 25 ) && ( ( signalStrength.tdScdma.rscp ) <= 120 ) ) { int rscpDbm = - ( signalStrength.tdScdma.rscp ) ; tdscdmaRscp_1_2 = rscpDbm + 120 ; } return new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , tdscdmaRscp_1_2 ) ; }
public static java.lang.invoke.MethodHandle identity ( java.lang.Class < ? > type ) { if ( type == null ) { throw new java.lang.NullPointerException ( "type == null" ) ; } if ( type.isPrimitive ( ) ) { try { return java.lang.invoke.MethodHandles.Lookup.PUBLIC_LOOKUP.findStatic ( java.lang.invoke.MethodHandles.class , "identity" , java.lang.invoke.MethodType.methodType ( type , type ) ) ; } catch ( java.lang.NoSuchMethodException | java.lang.IllegalAccessException e ) { throw new java.lang.AssertionError ( e ) ; } } return new java.lang.invoke.Transformers.ReferenceIdentity ( type ) ; }
private void writeSuppressInfo ( ) throws java.io.IOException { mWriter.write ( "\n<a name=\"SuppressInfo\"></a>\n" ) ; mWriter.write ( "<div class=\"category\">" ) ; mWriter.write ( "Suppressing Warnings and Errors" ) ; mWriter.write ( "<div class=\"categorySeparator\"></div>\n" ) ; mWriter.write ( "</div>\n" ) ; mWriter.write ( TextFormat.RAW.convertTo ( com.android.tools.lint.Main.getSuppressHelp ( ) , TextFormat.HTML ) ) ; mWriter.write ( '\n' ) ; }
public void testTimeZoneDataVersion ( ) { java.lang.String icu4cTzVersion = libcore.icu.ICU.getTZDataVersion ( ) ; java.lang.String zoneInfoTzVersion = libcore.util.ZoneInfoDB.getInstance ( ) . getVersion ( ) ; assertEquals ( icu4cTzVersion , zoneInfoTzVersion ) ; java.lang.String icu4jTzVersion = android.icu.util.TimeZone.getTZDataVersion ( ) ; assertEquals ( icu4jTzVersion , zoneInfoTzVersion ) ; java.lang.String tzLookupTzVersion = libcore.util.TimeZoneFinder.getInstance ( ) . getIanaVersion ( ) ; assertEquals ( icu4jTzVersion , tzLookupTzVersion ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; tempDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createUniqueDirectory ( null , "tempDir" ) ; testInstallDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createSubDirectory ( tempDir , "testInstall" ) ; testSystemTzDataDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createSubDirectory ( tempDir , "testSystemTzData" ) ; java.io.File testSystemTzDataFile = new java.io.File ( testSystemTzDataDir , "tzdata" ) ; byte [ ] systemTzDataBytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createTzData ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.SYSTEM_RULES_VERSION ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( testSystemTzDataFile , systemTzDataBytes ) ; installer = new libcore.tzdata.update2.TimeZoneDistroInstaller ( "TimeZoneDistroInstallerTest" , testSystemTzDataFile , testInstallDir ) ; }
public void testWeights ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/inefficient_weight.xml:3: Error: Wrong orientation? No orientation specified, and the default is horizontal, yet this layout has multiple children where at least one has layout_width=\"match_parent\" [Orientation]\n" + ( ( ( ( ( ( ( ( "<LinearLayout\n" + "^\n" ) + "res/layout/inefficient_weight.xml:10: Warning: Use a layout_width of 0dip instead of match_parent for better performance [InefficientWeight]\n" ) + " android:layout_width=\"match_parent\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/inefficient_weight.xml:24: Warning: Use a layout_height of 0dip instead of wrap_content for better performance [InefficientWeight]\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 2 warnings\n" ) ) , lintFiles ( "res/layout/inefficient_weight.xml" ) ) ; }
public java.lang.reflect.Method getEnclosingMethod ( ) { if ( classNameImpliesTopLevel ( ) ) { return null ; } return getEnclosingMethodNative ( ) ; }
public void deleteOdex ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.deleteOdex ( apkPath , instructionSet , outputPath ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw com.android.server.pm.Installer.InstallerException.from ( e ) ; } }
public void testMultiExpression ( ) { org.junit.Assert.assertTrue ( new org.jacoco.core.matcher.WildcardMatcher ( "Hello:World" ) . matches ( "World" ) ) ; org.junit.Assert.assertTrue ( new org.jacoco.core.matcher.WildcardMatcher ( "Hello:World" ) . matches ( "World" ) ) ; org.junit.Assert.assertTrue ( new org.jacoco.core.matcher.WildcardMatcher ( "*Test:*Foo" ) . matches ( "UnitTest" ) ) ; }
public java.lang.String getIndent ( org.w3c.dom.Node xmlNode ) { return com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor.getIndent ( getStructuredDocument ( ) , xmlNode ) ; }
public int getCarrierPrivilegeStatusForUid ( int subId , int uid ) { final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone == null ) { com.android.phone.PhoneInterfaceManager.loge ( "getCarrierPrivilegeStatus: Invalid subId" ) ; return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_NO_ACCESS ; } com.android.internal.telephony.uicc.UiccProfile profile = com.android.internal.telephony.uicc.UiccController.getInstance ( ) . getUiccProfileForPhone ( phone.getPhoneId ( ) ) ; if ( profile == null ) { com.android.phone.PhoneInterfaceManager.loge ( "getCarrierPrivilegeStatus: No UICC" ) ; return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED ; } return profile.getCarrierPrivilegeStatusForUid ( phone.getContext ( ) . getPackageManager ( ) , uid ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 128 ) ; sb.append ( "Provider{" ) ; sb.append ( java.lang.Integer.toHexString ( java.lang.System.identityHashCode ( this ) ) ) ; sb.append ( ' ' ) ; appendComponentShortName ( sb ) ; sb.append ( '}' ) ; return sb.toString ( ) ; }
public void checkAndCopyProviderExtras ( android.content.Intent src , android.content.Intent dst ) { if ( src == null ) { return ; } if ( hasGatewayProviderExtras ( src ) ) { dst.putExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_PROVIDER_PACKAGE , src.getStringExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_PROVIDER_PACKAGE ) ) ; dst.putExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_URI , src.getStringExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_URI ) ) ; android.telecom.Log.d ( this , "Found and copied gateway provider extras to broadcast intent." ) ; return ; } android.telecom.Log.d ( this , "No provider extras found in call intent." ) ; }
private void decrementPendingBroadcasts ( ) { synchronized ( mWakeLock ) { if ( ( -- ( mPendingBroadcasts ) ) == 0 ) { try { if ( mWakeLock.isHeld ( ) ) { mWakeLock.release ( ) ; log ( "Released wakelock" ) ; } else { log ( "Can't release wakelock again!" ) ; } } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.server.LocationManagerService.TAG , "exception in releaseWakeLock()" , e ) ; } } } }
static java.lang.String getFileSimpleName ( @ javax.annotation.Nonnull java.util.zip.ZipEntry entry ) { java.lang.String name = entry.getName ( ) ; assert ! ( name.endsWith ( com.android.sched.vfs.ZipUtils.ZIP_SEPARATOR_STRING ) ) ; int index = name.lastIndexOf ( com.android.sched.vfs.ZipUtils.ZIP_SEPARATOR ) ; if ( index < 0 ) { return name ; } else { return name.substring ( ( index + 1 ) ) ; } }
public void validateUserCredentialWithoutCaCert ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithUserCredential ( ) ; cred.setCaCertificate ( null ) ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public boolean onEditorAction ( android.widget.TextView v , int actionId , android.view.KeyEvent event ) { if ( event != null ) { if ( ( ! ( event.isShiftPressed ( ) ) ) && ( ( event.getAction ( ) ) == ( android.view.KeyEvent.ACTION_DOWN ) ) ) { if ( isPreparedForSending ( ) ) { confirmSendMessageIfNeeded ( ) ; } return true ; } return false ; } if ( isPreparedForSending ( ) ) { confirmSendMessageIfNeeded ( ) ; } return true ; }
public static void initDebugBridge ( java.lang.String adbLocation ) { if ( ( com.android.hierarchyviewerlib.device.DeviceBridge.sBridge ) == null ) { com.android.ddmlib.AndroidDebugBridge.init ( com.android.hierarchyviewerlib.HierarchyViewerDirector.isUsingDdmProtocol ( ) ) ; } if ( ( ( com.android.hierarchyviewerlib.device.DeviceBridge.sBridge ) == null ) || ( ! ( com.android.hierarchyviewerlib.device.DeviceBridge.sBridge.isConnected ( ) ) ) ) { com.android.hierarchyviewerlib.device.DeviceBridge.sBridge = com.android.ddmlib.AndroidDebugBridge.createBridge ( adbLocation , true ) ; } }
public synchronized boolean equals ( java.lang.Object obj ) { if ( obj == null ) return false ; if ( obj == ( this ) ) return true ; if ( ! ( obj instanceof com.ibm.icu.text.DecimalFormat ) ) return false ; com.ibm.icu.text.DecimalFormat other = ( ( com.ibm.icu.text.DecimalFormat ) ( obj ) ) ; return ( properties.equals ( other.properties ) ) && ( symbols.equals ( other.symbols ) ) ; }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getConnectionState: " + device ) ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothAdapter.STATE_DISCONNECTED ; } return service.getConnectionState ( device ) ; }
public static void computeAsinh ( android.renderscript.cts.TestAsinh.ArgumentsFloatFloat args ) { args.ulf = 5 ; args.ulfRelaxed = 5 ; double x = ( ( double ) ( args.in ) ) ; args.out = ( ( float ) ( java.lang.StrictMath.log ( ( x + ( java.lang.StrictMath.sqrt ( ( ( x * x ) + 1.0 ) ) ) ) ) ) ) ; }
protected void collect ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JType type ) { if ( type instanceof com.android.jack.ir.ast.JDefinedClassOrInterface ) { com.android.jack.ir.ast.JDefinedClassOrInterface jDefinedClassOrInterface = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( type ) ) ; jDefinedClassOrInterface.addMarkerIfAbsent ( MainDexMarker.INSTANCE ) ; } }
protected boolean processMessage ( android.os.Message msg ) { if ( ( msg.what ) == ( com.android.internal.telephony.cat.RilMessageDecoder.CMD_START ) ) { if ( decodeMessageParams ( ( ( com.android.internal.telephony.cat.RilMessage ) ( msg.obj ) ) ) ) { transitionTo ( mStateCmdParamsReady ) ; } } else { com.android.internal.telephony.cat.CatLog.d ( this , ( ( ( "StateStart unexpected expecting START=" + ( com.android.internal.telephony.cat.RilMessageDecoder.CMD_START ) ) + " got " ) + ( msg.what ) ) ) ; } return true ; }
public boolean addGpsStatusListener ( android.location.IGpsStatusListener listener ) { if ( ( mGpsStatusProvider ) == null ) { return false ; } if ( ( mContext.checkCallingOrSelfPermission ( com.android.server.LocationManagerService.ACCESS_FINE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( "Requires ACCESS_FINE_LOCATION permission" ) ; } try { mGpsStatusProvider.addGpsStatusListener ( listener ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.LocationManagerService.TAG , "mGpsStatusProvider.addGpsStatusListener failed" , e ) ; return false ; } return true ; }
private void onOtaspCallStateChanged ( ) { com.android.phone.otasp.OtaspActivationService.logd ( ( "onOtaspCallStateChanged: " + ( mPhone.getState ( ) ) ) ) ; if ( mPhone.getState ( ) . equals ( PhoneConstants.State.IDLE ) ) { if ( mIsOtaspCallCommitted ) { com.android.phone.otasp.OtaspActivationService.logd ( "Otasp activation succeed" ) ; com.android.phone.otasp.OtaspActivationService.updateActivationState ( this , true ) ; } else { com.android.phone.otasp.OtaspActivationService.logd ( "Otasp activation failed" ) ; com.android.phone.otasp.OtaspActivationService.updateActivationState ( this , false ) ; } onComplete ( ) ; } }
public final long long_literal ( ) throws org.jf.smali.RecognitionException { long value = 0 ; org.antlr.runtime.tree.CommonTree LONG_LITERAL192 = null ; try { { LONG_LITERAL192 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.LONG_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_LONG_LITERAL_in_long_literal3264 ) ) ) ; value = org.jf.smali.LiteralTools.parseLong ( ( LONG_LITERAL192 != null ? LONG_LITERAL192.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void run ( ) { mHandler.removeCallbacks ( this ) ; final boolean succeded ; synchronized ( mInstallLock ) { succeded = deleteApplicationCacheFilesLI ( packageName , userId ) ; } clearExternalStorageDataSync ( packageName , false ) ; if ( observer != null ) { try { observer.onRemoveCompleted ( packageName , succeded ) ; } catch ( android.os.RemoteException e ) { android.util.Log.i ( com.android.server.pm.PackageManagerService.TAG , "Observer no longer exists." ) ; } } }
final java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > nextEntry ( ) { java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > e = nextEntry ; if ( e == null ) throw new java.util.NoSuchElementException ( ) ; lastReturned = e ; if ( ( nextEntry = e.next ) == null ) advance ( ) ; return e ; }
private static java.lang.String getTypeKind ( @ javax.annotation.Nonnull java.lang.Class < ? extends com.android.jack.ir.ast.JType > typeClass ) { if ( com.android.jack.ir.ast.JEnum.class . isAssignableFrom ( typeClass ) ) { return "enum" ; } else if ( com.android.jack.ir.ast.JAnnotationType.class . isAssignableFrom ( typeClass ) ) { return "annotation" ; } else if ( com.android.jack.ir.ast.JClass.class . isAssignableFrom ( typeClass ) ) { return "class" ; } else if ( com.android.jack.ir.ast.JInterface.class . isAssignableFrom ( typeClass ) ) { return "interface" ; } else { return "<undefined>" ; } }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull final com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { putProperty ( fileType.buildPropertyName ( null ) , java.lang.String.valueOf ( true ) ) ; addFileType ( fileType ) ; return vfs.getRootInputOutputVDir ( ) . createOutputVFile ( fileType.buildFileVPath ( typePath ) ) ; }
public void initializeNdkConfig ( @ org.gradle.model.Path ( value = "android.ndk" ) com.android.build.gradle.managed.NdkConfig ndk ) { ndk.setModuleName ( "" ) ; ndk.setToolchain ( "" ) ; ndk.setToolchainVersion ( "" ) ; ndk.setCFlags ( com.google.common.collect.Lists.< java.lang.String > newArrayList ( ) ) ; ndk.setCppFlags ( com.google.common.collect.Lists.< java.lang.String > newArrayList ( ) ) ; ndk.setLdLibs ( com.google.common.collect.Lists.< java.lang.String > newArrayList ( ) ) ; ndk.setAbiFilters ( com.google.common.collect.Sets.< java.lang.String > newHashSet ( ) ) ; ndk.setStl ( "" ) ; ndk.setRenderscriptNdkMode ( false ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailViewHolder.onClick" , "voicemail id: %d, isViewHolderCurrentlyExpanded:%b" , viewHolderId , isViewHolderExpanded ) ; if ( isViewHolderExpanded ) { voicemailViewHolderListener.collapseExpandedViewHolder ( this ) ; } else { voicemailViewHolderListener.expandViewHolderFirstTimeAndCollapseAllOtherVisibleViewHolders ( this , com.android.dialer.common.Assert.isNotNull ( voicemailEntryOfViewHolder ) , com.android.dialer.common.Assert.isNotNull ( voicemailViewHolderListener ) ) ; } }
public boolean onPreferenceClick ( android.preference.Preference preference ) { com.android.internal.logging.MetricsLogger.action ( mButtonAPNExpand.getContext ( ) , MetricsEvent.ACTION_MOBILE_NETWORK_APN_SETTINGS ) ; final android.content.Intent intent = new android.content.Intent ( android.provider.Settings.ACTION_APN_SETTINGS ) ; intent.putExtra ( ":settings:show_fragment_as_subsetting" , true ) ; intent.putExtra ( "sub_id" , mPhone.getSubId ( ) ) ; mPrefFragment.startActivity ( intent ) ; return true ; }
public synchronized E set ( int index , E e ) { java.lang.Object [ ] newElements = elements.clone ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) E result = ( ( E ) ( newElements [ index ] ) ) ; newElements [ index ] = e ; elements = newElements ; return result ; }
private java.lang.String makeString ( int count , java.lang.String ch ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < count ; ++ i ) { sb.append ( ch ) ; } return sb.toString ( ) ; }
public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { new com.android.jack.ir.ast.cfg.BasicBlockLiveProcessor ( cfg , false ) { @ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JSimpleBasicBlock block ) { if ( ( ( block.getElementCount ( ) ) == 1 ) && ( ( block.getLastElement ( ) . getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) ) { block.delete ( ) ; } return false ; } } . process ( ) ; }
public void setShadowLayer ( float radius , float dx , float dy , int color ) { mTextPaint.setShadowLayer ( radius , dx , dy , color ) ; mShadowRadius = radius ; mShadowDx = dx ; mShadowDy = dy ; mShadowColor = color ; if ( ( mEditor ) != null ) mEditor.invalidateTextDisplayList ( ) ; invalidate ( ) ; }
public void onServiceDisconnected ( android.content.ComponentName componentName ) { try { android.telecom.Log.startSession ( "SBC.oSD" ) ; synchronized ( mLock ) { logServiceDisconnected ( "onServiceDisconnected" ) ; handleDisconnect ( ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
private void transformFields ( com.android.dx.merge.IndexMap indexMap , com.android.dex.ClassData [ ] fields ) { int lastOutFieldIndex = 0 ; for ( com.android.dex.ClassData.Field field : fields ) { int outFieldIndex = indexMap.adjustField ( field.getFieldIndex ( ) ) ; classDataOut.writeUleb128 ( ( outFieldIndex - lastOutFieldIndex ) ) ; lastOutFieldIndex = outFieldIndex ; classDataOut.writeUleb128 ( field.getAccessFlags ( ) ) ; } }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( super . hashCode ( ) , mName , mDimension , mMinSdkVersion , mTargetSdkVersion , mMaxSdkVersion , mRenderscriptTargetApi , mRenderscriptSupportModeEnabled , mRenderscriptNdkModeEnabled , mVersionCode , mVersionName , mApplicationId , mTestApplicationId , mTestInstrumentationRunner , mTestInstrumentationRunnerArguments , mTestHandleProfiling , mTestFunctionalTest , mSigningConfig , mResourceConfiguration ) ; }
public void onCreate ( ) { android.util.Log.i ( com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG , "TestImsService: onCreate" ) ; mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance ( ) ; mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance ( ) ; mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl ( ) ; mTestImsConfig = com.android.phone.testapps.imstestapp.TestImsConfigImpl.getInstance ( ) ; com.android.phone.testapps.imstestapp.TestImsService.mInstance = this ; }
public void test_getDisplayName_noLocaleArgument ( ) { java.util.Currency currency = java.util.Currency.getInstance ( "DEM" ) ; libcore.java.util.Locales locales = libcore.java.util.Locales.getAndSetDefaultForTest ( java.util.Locale.US , java.util.Locale.GERMANY , java.util.Locale.FRANCE ) ; try { assertEquals ( "Deutsche Mark" , currency.getDisplayName ( ) ) ; } finally { locales.setAsDefault ( ) ; } }
public void testCannotSetFixedLengthStreamingModeAfterChunkedStreamingMode ( ) throws java.lang.Exception { server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.setChunkedStreamingMode ( 1 ) ; try { connection.setFixedLengthStreamingMode ( 1 ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public static boolean addDefaultRoute ( java.lang.String interfaceName , java.net.InetAddress gw ) { java.lang.String dstStr ; java.lang.String gwStr = gw.getHostAddress ( ) ; if ( gw instanceof java.net.Inet4Address ) { dstStr = "0.0.0.0" ; } else if ( gw instanceof java.net.Inet6Address ) { dstStr = "::" ; } else { android.util.Log.w ( android.net.NetworkUtils.TAG , ( ( ( "addDefaultRoute failure: address is neither IPv4 nor IPv6" + "(" ) + gwStr ) + ")" ) ) ; return false ; } return ( android.net.NetworkUtils.addRoute ( interfaceName , dstStr , 0 , gwStr ) ) == 0 ; }
public java.io.File getOutput ( ) { assert ( output ) != null ; if ( ( ( workingDir ) != null ) && ( ! ( output.isAbsolute ( ) ) ) ) { return new java.io.File ( workingDir , output.getPath ( ) ) ; } else { return output ; } }
com.android.sched.vfs.ParentVFile getVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.ParentVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileException { assert ! ( isClosed ( ) ) ; assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) ) != 0 ; java.io.File path = getNativeFile ( parent.getPath ( ) , name ) ; com.android.sched.util.file.AbstractStreamFile.check ( path , new com.android.sched.util.location.FileLocation ( path ) ) ; return new com.android.sched.vfs.ParentVFile ( this , parent , name ) ; }
protected java.io.FileDescriptor createFd ( ) { java.io.FileDescriptor s = null ; try { s = android.system.Os.socket ( android.net.ip.AF_PACKET , android.net.ip.SOCK_RAW , 0 ) ; android.net.NetworkUtils.attachControlPacketFilter ( s , android.net.ip.ARPHRD_ETHER ) ; android.system.Os.bind ( s , new android.system.PacketSocketAddress ( ( ( short ) ( ETH_P_ALL ) ) , mIfIndex ) ) ; } catch ( android.system.ErrnoException | java.io.IOException e ) { logError ( "Failed to create packet tracking socket: " , e ) ; closeFd ( s ) ; return null ; } return s ; }
public void setDelegatedScopes ( @ android.annotation.NonNull android.content.ComponentName admin , @ android.annotation.NonNull java.lang.String delegatePackage , @ android.annotation.NonNull java.util.List < java.lang.String > scopes ) { throwIfParentInstance ( "setDelegatedScopes" ) ; if ( ( mService ) != null ) { try { mService.setDelegatedScopes ( admin , delegatePackage , scopes ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public void newSms ( int indicationType , java.util.ArrayList < java.lang.Byte > pdu ) { mRil.processIndication ( indicationType ) ; byte [ ] pduArray = com.android.internal.telephony.RIL.arrayListToPrimitiveArray ( pdu ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLog ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RESPONSE_NEW_SMS ) ; mRil.writeMetricsNewSms ( SmsSession.Event.Tech.SMS_GSM , SmsSession.Event.Format.SMS_FORMAT_3GPP ) ; android.telephony.SmsMessage sms = android.telephony.SmsMessage.newFromCMT ( pduArray ) ; if ( ( mRil.mGsmSmsRegistrant ) != null ) { mRil.mGsmSmsRegistrant.notifyRegistrant ( new android.os.AsyncResult ( null , sms , null ) ) ; } }
private boolean sendSmsByCarrierApp ( boolean isDataSms , com.android.internal.telephony.SMSDispatcher.SmsTracker tracker ) { java.lang.String carrierPackage = getCarrierAppPackageName ( ) ; if ( carrierPackage != null ) { android.telephony.Rlog.d ( com.android.internal.telephony.SMSDispatcher.TAG , "Found carrier package." ) ; com.android.internal.telephony.SMSDispatcher.SmsSender smsSender ; if ( isDataSms ) { smsSender = new com.android.internal.telephony.SMSDispatcher.DataSmsSender ( tracker ) ; } else { smsSender = new com.android.internal.telephony.SMSDispatcher.TextSmsSender ( tracker ) ; } smsSender.sendSmsByCarrierApp ( carrierPackage , new com.android.internal.telephony.SMSDispatcher.SmsSenderCallback ( smsSender ) ) ; return true ; } return false ; }
public java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation cls ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findClass ( cls ) ; if ( c == null ) { return null ; } return c.getAnnotations ( ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { java.lang.String binaryName = remapper.mapValue ( formatter.getName ( type ) ) ; java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName ( binaryName ) ; type.setName ( simpleName ) ; lookup.removeType ( type ) ; type.getEnclosingPackage ( ) . remove ( type ) ; java.lang.String packageName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName ( binaryName ) ; com.android.jack.ir.ast.JPackage newPackage = lookup.getOrCreatePackage ( packageName ) ; type.setEnclosingPackage ( newPackage ) ; newPackage.addType ( type ) ; }
public void interrupt ( ) { if ( com.android.bluetooth.opp.BluetoothOppTransfer.D ) android.util.Log.d ( com.android.bluetooth.opp.BluetoothOppTransfer.TAG , ( "start interrupt :" + ( btSocket ) ) ) ; isInterrupted = true ; if ( ( btSocket ) != null ) { try { btSocket.close ( ) ; } catch ( java.io.IOException e ) { android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppTransfer.TAG , "Error when close socket" ) ; } } }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , method = "getAnimation" , args = { } ) } ) public void testClearBeforeAnimation ( ) throws java.lang.Throwable { final android.view.View view = mActivity.findViewById ( R.id.mock_view ) ; assertFalse ( mAnimation.hasStarted ( ) ) ; view.setAnimation ( mAnimation ) ; assertSame ( mAnimation , view.getAnimation ( ) ) ; view.clearAnimation ( ) ; runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { view.invalidate ( ) ; } } ) ; java.lang.Thread.sleep ( android.view.cts.View_AnimationTest.TIME_OUT ) ; assertFalse ( mAnimation.hasStarted ( ) ) ; assertNull ( view.getAnimation ( ) ) ; }
public void onError ( int errCode ) { mExecutor.execute ( ( ) -> mCallback.onError ( errCode ) ) ; }
public void asStringNotString ( ) throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump ( ) ; com.android.tools.perflib.heap.Instance obj = ( ( com.android.tools.perflib.heap.Instance ) ( dump.getDumpedThing ( "anObject" ) ) ) ; org.junit.Assert.assertNotNull ( obj ) ; org.junit.Assert.assertNull ( com.android.ahat.InstanceUtils.asString ( obj ) ) ; }
public void TestDateFormatHashCode ( ) { com.ibm.icu.text.DateFormat testDF = com.ibm.icu.text.DateFormat.getDateInstance ( DateFormat.DEFAULT , ULocale.GERMAN ) ; com.ibm.icu.text.NumberFormat testNF = testDF.getNumberFormat ( ) ; int expectedResult = ( ( testNF.getMaximumIntegerDigits ( ) ) * 37 ) + ( testNF.getMaximumFractionDigits ( ) ) ; int actualHashResult = testDF.hashCode ( ) ; assertEquals ( "DateFormat hashCode" , expectedResult , actualHashResult ) ; }
public void writeBytesNoTag ( final byte [ ] value , final int offset , final int length ) throws java.io.IOException { writeRawVarint32 ( length ) ; writeRawBytes ( value , offset , length ) ; }
public void test_getAllByName_localhost ( ) throws java.lang.Exception { java.net.InetAddress [ ] inetAddresses = java.net.InetAddress.getAllByName ( "localhost" ) ; org.junit.Assert.assertEquals ( 1 , inetAddresses.length ) ; java.net.InetAddress inetAddress = inetAddresses [ 0 ] ; libcore.java.net.InetAddressTest.checkInetAddress ( libcore.java.net.InetAddressTest.LOOPBACK4_BYTES , "localhost" , inetAddress ) ; org.junit.Assert.assertTrue ( inetAddress.isLoopbackAddress ( ) ) ; }
private java.util.List < ? extends com.android.tools.idea.run.CloudTestConfiguration > getDefaultConfigurations ( org.jetbrains.android.facet.AndroidFacet facet ) { com.google.gct.testing.CloudTestConfigurationImpl allConfiguration = new com.google.gct.testing.CloudTestConfigurationImpl ( CloudTestConfigurationImpl.ALL_ID , "All Compatible" , icons.AndroidIcons.Display , facet ) ; allConfiguration.deviceDimension.enableAll ( ) ; allConfiguration.apiDimension.enableAll ( ) ; allConfiguration.languageDimension.enableAll ( ) ; allConfiguration.orientationDimension.enableAll ( ) ; allConfiguration.setNonEditable ( ) ; return com.google.common.collect.ImmutableList.of ( allConfiguration ) ; }
public static void assertNotEquals ( java.lang.String message , java.lang.Object unexpected , java.lang.Object actual ) { if ( org.junit.Assert.equalsRegardingNull ( unexpected , actual ) ) { org.junit.Assert.failEquals ( message , actual ) ; } }
public com.android.builder.model.AndroidProject getSingleModel ( boolean emulateStudio_1_0 ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > modelMap = com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection , emulateStudio_1_0 ) ; org.junit.Assert.assertEquals ( "Quering GradleTestProject.getModel() with multi-project settings" , 1 , modelMap.size ( ) ) ; return modelMap.get ( ":" ) ; } finally { connection.close ( ) ; } }
public boolean endCall ( java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.eC" ) ; synchronized ( mLock ) { if ( ! ( enforceAnswerCallPermission ( callingPackage , android.os.Binder.getCallingUid ( ) ) ) ) { throw new java.lang.SecurityException ( "requires ANSWER_PHONE_CALLS permission" ) ; } long token = android.os.Binder.clearCallingIdentity ( ) ; try { return endCallInternal ( callingPackage ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } } finally { android.telecom.Log.endSession ( ) ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JBinaryOperation expr ) { if ( expr instanceof com.android.jack.ir.ast.JConditionalOperation ) { throw new com.android.jack.ir.JNodeInternalError ( expr , "JConditionalOperation is not allowed on this level" ) ; } if ( ! ( expr instanceof com.android.jack.ir.ast.JAsgOperation ) ) { return expr.canThrow ( ) ? visitThrowingRValue ( expr ) : visitNonThrowingOperation ( expr ) ; } confirmBlockElement ( expr ) ; confirmParent ( expr , com.android.jack.ir.ast.cfg.JVariableAsgBlockElement.class , com.android.jack.ir.ast.cfg.JStoreBlockElement.class ) ; return true ; }
public static java.lang.String getScopedToken ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.util.GithubAuthData auth , @ org.jetbrains.annotations.NotNull java.util.Collection < java.lang.String > scopes , @ org.jetbrains.annotations.Nullable java.lang.String note ) throws java.io.IOException { java.lang.String path = "/authorizations" ; org.jetbrains.plugins.github.api.GithubAuthorizationRequest request = new org.jetbrains.plugins.github.api.GithubAuthorizationRequest ( new java.util.ArrayList < java.lang.String > ( scopes ) , note , null ) ; org.jetbrains.plugins.github.api.GithubAuthorization response = org.jetbrains.plugins.github.api.GithubApiUtil.createDataFromRaw ( org.jetbrains.plugins.github.api.GithubApiUtil.fromJson ( org.jetbrains.plugins.github.api.GithubApiUtil.postRequest ( auth , path , org.jetbrains.plugins.github.api.GithubApiUtil.gson.toJson ( request ) ) , org.jetbrains.plugins.github.api.GithubAuthorizationRaw.class ) , org.jetbrains.plugins.github.api.GithubAuthorization.class ) ; return response.getToken ( ) ; }
public void run ( ) { mTextView.setText ( "short" ) ; mTextView.setSingleLine ( ) ; int width = android.widget.cts.WidgetTestUtils.convertDipToPixels ( getActivity ( ) , android.text.method.cts.ScrollingMovementMethodTest.LITTLE_SPACE ) ; getActivity ( ) . setContentView ( mTextView , new android.view.ViewGroup.LayoutParams ( width , android.view.ViewGroup.LayoutParams.WRAP_CONTENT ) ) ; }
private java.lang.String getRepresentationString ( com.google.common.base.Function < com.google.gct.testing.dimension.CloudTestingType , java.lang.String > typeToNameFunction , java.lang.String delimiter ) { java.lang.StringBuffer sb = new java.lang.StringBuffer ( ) ; for ( com.google.gct.testing.dimension.CloudTestingType type : typesByDimensionName.values ( ) ) { sb.append ( ( ( typeToNameFunction.apply ( type ) ) + delimiter ) ) ; } sb.replace ( ( ( sb.length ( ) ) - ( delimiter.length ( ) ) ) , sb.length ( ) , "" ) ; return sb.toString ( ) ; }
public java.lang.String [ ] saw ( java.lang.String prefix , int uid ) { return list ( prefix , uid ) ; }
public void process ( android.filterfw.core.FilterContext env ) { android.filterfw.core.Frame input = pullInput ( "mixedcase" ) ; java.lang.String inputString = ( ( java.lang.String ) ( input.getObjectValue ( ) ) ) ; android.filterfw.core.Frame output = env.getFrameManager ( ) . newFrame ( mOutputFormat ) ; output.setObjectValue ( inputString.toUpperCase ( java.util.Locale.getDefault ( ) ) ) ; pushOutput ( "uppercase" , output ) ; }
synchronized java.util.logging.Logger findLogger ( java.lang.String name ) { ensureInitialized ( ) ; java.util.logging.LogManager.LoggerWeakRef ref = namedLoggers.get ( name ) ; if ( ref == null ) { return null ; } java.util.logging.Logger logger = ref.get ( ) ; if ( logger == null ) { ref.dispose ( ) ; } return logger ; }
private android.bluetooth.BluetoothGattCharacteristic getCharacteristic ( java.util.UUID uuid ) { android.bluetooth.BluetoothGattService service = getService ( ) ; if ( service == null ) return null ; android.bluetooth.BluetoothGattCharacteristic characteristic = service.getCharacteristic ( uuid ) ; if ( characteristic == null ) { showMessage ( "Characteristic not found" ) ; return null ; } return characteristic ; }
public void testWeights ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/inefficient_weight.xml:3: Error: Wrong orientation? No orientation specified, and the default is horizontal, yet this layout has multiple children where at least one has layout_width=\"match_parent\" [Orientation]\n" + ( ( ( ( ( ( ( ( "<LinearLayout\n" + "^\n" ) + "res/layout/inefficient_weight.xml:10: Warning: Use a layout_width of 0dp instead of match_parent for better performance [InefficientWeight]\n" ) + " android:layout_width=\"match_parent\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/inefficient_weight.xml:24: Warning: Use a layout_height of 0dp instead of wrap_content for better performance [InefficientWeight]\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 2 warnings\n" ) ) , lintFiles ( "res/layout/inefficient_weight.xml" ) ) ; }
private void sendDisplayPinIntent ( byte [ ] address , int pin , int variant ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mRemoteDevices.getDevice ( address ) ) ; if ( pin != 0 ) { intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_KEY , pin ) ; } intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_VARIANT , variant ) ; intent.setFlags ( Intent.FLAG_RECEIVER_FOREGROUND ) ; intent.setPackage ( mAdapterService.getString ( R.string.pairing_ui_package ) ) ; mAdapterService.sendOrderedBroadcast ( intent , mAdapterService.BLUETOOTH_ADMIN_PERM ) ; }
public void test_SSL_check_private_key_key_then_cert ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; long s = org.conscrypt.NativeCrypto.SSL_new ( c ) ; org.conscrypt.NativeCrypto.SSL_use_PrivateKey ( s , org.conscrypt.NativeCryptoTest.getServerPrivateKey ( ) . getNativeRef ( ) ) ; try { org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.conscrypt.NativeCrypto.SSL_use_certificate ( s , org.conscrypt.NativeCryptoTest.getServerCertificates ( ) ) ; org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; org.conscrypt.NativeCrypto.SSL_free ( s ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [ ] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo , boolean compareInstructionNumber , float instructionNumberTolerance ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( classpath , fileOrSourceList , withDebugInfo , compareInstructionNumber , instructionNumberTolerance , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public void run ( ) { Main.sleep ( 1000 ) ; int field0 ; int field1 ; int field2 ; int field3 ; field0 = SlowInit.FIELD0.getValue ( ) ; field1 = SlowInit.FIELD1.getValue ( ) ; field2 = SlowInit.FIELD2.getValue ( ) ; field3 = SlowInit.FIELD3.getValue ( ) ; Main.sleep ( 5000 ) ; java.lang.System.out.println ( ( ( ( ( "Fields (child thread): " + field0 ) + field1 ) + field2 ) + field3 ) ) ; }
public long getAppDataInode ( java.lang.String uuid , java.lang.String packageName , int userId , int flags ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return - 1 ; try { return mInstalld.getAppDataInode ( uuid , packageName , userId , flags ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public boolean processMessage ( android.os.Message message ) { boolean retValue = true ; switch ( message.what ) { case com.android.server.connectivity.Tethering.TetherMasterSM.EVENT_IFACE_SERVING_STATE_ACTIVE : com.android.server.connectivity.tethering.TetherInterfaceStateMachine who = ( ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine ) ( message.obj ) ) ; who.sendMessage ( mErrorNotification ) ; break ; case com.android.server.connectivity.Tethering.TetherMasterSM.CMD_CLEAR_ERROR : mErrorNotification = android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ; transitionTo ( mInitialState ) ; break ; default : retValue = false ; } return retValue ; }
private void updateDbIdentifier ( ) { com.android.bluetooth.pbap.BluetoothPbapService.mDbIndetifier.set ( java.util.Calendar.getInstance ( ) . getTime ( ) . getTime ( ) ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , int [ ] data ) { validateIsInt32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_32 , data.length ) ; }
public static < T > boolean hasNonZeroEntry ( com.android.ahat.heapdump.AhatHeap heap , com.android.ahat.HeapTable.TableConfig < T > config , java.util.List < T > elements ) { if ( ( heap.getSize ( ) ) > 0 ) { for ( T element : elements ) { if ( ( config.getSize ( element , heap ) ) > 0 ) { return true ; } } } return false ; }
public java.lang.String buildPropertyName ( @ javax.annotation.Nonnull com.android.jack.library.FileType type , @ javax.annotation.CheckForNull java.lang.String suffix ) { return ( getPropertyPrefix ( type ) ) + ( suffix == null ? "" : suffix ) ; }
public static java.lang.Boolean getAnnotationBooleanValue ( @ com.android.annotations.Nullable com.intellij.psi.PsiAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name ) { if ( annotation != null ) { com.intellij.psi.PsiAnnotationMemberValue attributeValue = annotation.findAttributeValue ( name ) ; if ( ( attributeValue == null ) && ( com.android.SdkConstants.ATTR_VALUE.equals ( name ) ) ) { attributeValue = annotation.findAttributeValue ( null ) ; } if ( attributeValue != null ) { java.lang.Object o = com.android.tools.lint.detector.api.ConstantEvaluator.evaluate ( null , attributeValue ) ; if ( o instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( o ) ) ; } } } return null ; }
static long getLongAttribute ( @ com.android.annotations.NonNull com.intellij.psi.PsiAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name , long defaultValue ) { java.lang.Long value = com.android.tools.lint.checks.PermissionRequirement.getAnnotationLongValue ( annotation , name ) ; if ( value != null ) { return value ; } return defaultValue ; }
public void testCryptTcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , null , false , 1 , true ) ; }
public java.util.List < ? extends com.android.jack.library.InputLibrary > getImportedLibraries ( ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; if ( needFullBuild ( ) ) { session.setFileDependencies ( new com.android.jack.analysis.dependency.file.FileDependencies ( ) ) ; session.setTypeDependencies ( new com.android.jack.analysis.dependency.type.TypeDependencies ( ) ) ; return importedLibrariesFromCommandLine ; } try { updateIncrementalState ( ) ; } catch ( com.android.jack.incremental.IncrementalException e ) { session.getReporter ( ) . report ( Severity.FATAL , e ) ; throw new com.android.jack.JackAbortException ( e ) ; } return java.util.Collections.singletonList ( incrementalInputLibrary ) ; }
public void run ( ) { while ( ! ( Main.finish ) ) { for ( int i = 0 ; i < 188 ; i ++ ) { try { byte [ ] b = new byte [ ( i * 100 ) + 10 ] ; } catch ( java.lang.OutOfMemoryError e ) { } } try { java.lang.Thread.sleep ( 10 ) ; } catch ( java.lang.Exception e ) { } } }
public int getWordCount ( ) { if ( isCategory2 ( ) ) { return 2 ; } return 1 ; }
public com.google.common.collect.ImmutableMap < C , V > row ( R rowKey ) { com.google.common.base.Preconditions.checkNotNull ( rowKey ) ; return com.google.common.base.MoreObjects.firstNonNull ( ( ( com.google.common.collect.ImmutableMap < C , V > ) ( rowMap ( ) . get ( rowKey ) ) ) , com.google.common.collect.ImmutableMap.< C , V > of ( ) ) ; }
public java.lang.String getAlgorithmName ( int index , int codepoint ) { java.lang.String result = null ; synchronized ( m_utilStringBuffer_ ) { m_utilStringBuffer_.setLength ( 0 ) ; m_algorithm_ [ index ] . appendName ( codepoint , m_utilStringBuffer_ ) ; result = m_utilStringBuffer_.toString ( ) ; } return result ; }
public final void testEquals_Point ( ) { com.android.ide.common.api.Point p = new com.android.ide.common.api.Point ( 1 , 2 ) ; com.android.ide.common.api.Point p1 = new com.android.ide.common.api.Point ( 1 , 2 ) ; com.android.ide.common.api.Point p2 = new com.android.ide.common.api.Point ( ( - 3 ) , ( - 4 ) ) ; assertNotSame ( p1 , p ) ; assertTrue ( p.equals ( p1 ) ) ; assertFalse ( p.equals ( p2 ) ) ; }
public void dumpShowsFailureTraceEvenIfConnectionIdIncreases ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( ( ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID ) + 1 ) , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "--- Last failed" ) ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "rdev_connect" ) ) ; }
public void setVoiceActivationState ( int subId , int activationState ) { enforceModifyPermissionOrCarrierPrivilege ( subId ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { phone.setVoiceActivationState ( activationState ) ; } else { com.android.phone.PhoneInterfaceManager.loge ( ( "setVoiceActivationState fails with invalid subId: " + subId ) ) ; } }
private void setCurrentAppType ( boolean isGsm ) { if ( com.android.internal.telephony.uicc.UiccProfile.VDBG ) log ( "setCurrentAppType" ) ; synchronized ( mLock ) { boolean isLteOnCdmaMode = ( android.telephony.TelephonyManager.getLteOnCdmaModeStatic ( ) ) == ( com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE ) ; if ( isGsm || isLteOnCdmaMode ) { mCurrentAppType = UiccController.APP_FAM_3GPP ; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2 ; } } }
native void rsnAllocationElementRead ( long con , long id , int xoff , int yoff , int zoff , int mip , int compIdx , byte [ ] d , int sizeBytes ) ;
public final void writeTo ( com.android.dx.dex.file.DexFile file , com.android.dx.util.AnnotatedOutput out ) { out.alignTo ( alignment ) ; try { if ( ( writeSize ) < 0 ) { throw new java.lang.UnsupportedOperationException ( "writeSize is unknown" ) ; } out.assertCursor ( getAbsoluteOffset ( ) ) ; } catch ( java.lang.RuntimeException ex ) { throw com.android.dex.util.ExceptionWithContext.withContext ( ex , ( "...while writing " + ( this ) ) ) ; } writeTo0 ( file , out ) ; }
public com.android.ims.ImsEcbm getEcbmInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mEcbm ) == null ) || ( ! ( mImsServiceProxy.isBinderAlive ( ) ) ) ) { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsEcbm iEcbm = mImsServiceProxy.getEcbmInterface ( ) ; if ( iEcbm == null ) { throw new com.android.ims.ImsException ( "getEcbmInterface()" , ImsReasonInfo.CODE_ECBM_NOT_SUPPORTED ) ; } mEcbm = new com.android.ims.ImsEcbm ( iEcbm ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getEcbmInterface()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mEcbm ; }
private boolean sample ( long timeStamp ) { if ( timeStamp == ( java.lang.Long.MAX_VALUE ) ) { return true ; } else if ( timeStamp < ( mLatestSeen ) ) { return false ; } else if ( timeStamp == ( mLatestSeen ) ) { return true ; } else { mElapsedTimes.add ( ( timeStamp - ( mLatestSeen ) ) ) ; mLatestSeen = timeStamp ; return false ; } }
private synchronized void initGenericType ( ) { if ( ! ( genericTypesAreInitialized ) ) { java.lang.String signatureAttribute = getSignatureAttribute ( ) ; libcore.reflect.GenericSignatureParser parser = new libcore.reflect.GenericSignatureParser ( declaringClass.getClassLoader ( ) ) ; parser.parseForField ( this . declaringClass , signatureAttribute ) ; genericType = parser.fieldType ; if ( ( genericType ) == null ) { genericType = getType ( ) ; } genericTypesAreInitialized = true ; } }
public void mark ( int markLimit ) throws java.io.IOException { if ( markLimit < 0 ) { throw new java.lang.IllegalArgumentException ( ( "markLimit < 0:" + markLimit ) ) ; } synchronized ( lock ) { checkNotClosed ( ) ; this . markLimit = markLimit ; this . mark = pos ; this . markedLastWasCR = lastWasCR ; } }
public void testTelephonyFeatures ( ) { int phoneType = mTelephonyManager.getPhoneType ( ) ; switch ( phoneType ) { case android.telephony.TelephonyManager.PHONE_TYPE_GSM : assertAvailable ( PackageManager.FEATURE_TELEPHONY ) ; assertAvailable ( PackageManager.FEATURE_TELEPHONY_GSM ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_CDMA : assertAvailable ( PackageManager.FEATURE_TELEPHONY ) ; assertAvailable ( PackageManager.FEATURE_TELEPHONY_CDMA ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_NONE : assertNotAvailable ( PackageManager.FEATURE_TELEPHONY ) ; assertNotAvailable ( PackageManager.FEATURE_TELEPHONY_CDMA ) ; assertNotAvailable ( PackageManager.FEATURE_TELEPHONY_GSM ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "Did you add a new phone type? " + phoneType ) ) ; } }
public void beforeCheckFile ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( com.android.tools.lint.detector.api.LintUtils.endsWith ( context.file.getName ( ) , com.android.SdkConstants.DOT_XML ) ) { java.io.File parent = context.file.getParentFile ( ) ; com.android.resources.ResourceFolderType type = com.android.resources.ResourceFolderType.getFolderType ( parent.getName ( ) ) ; if ( type == ( com.android.resources.ResourceFolderType.DRAWABLE ) ) { if ( ( mValidDrawables ) == null ) { mValidDrawables = new java.util.ArrayList < java.lang.String > ( ) ; } java.lang.String resource = com.android.tools.lint.checks.OverdrawDetector.getDrawableResource ( context.file ) ; mValidDrawables.add ( resource ) ; } } }
public void testConnectFailureDueToNetworkSelectFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; setupMocksForConnectSequence ( false ) ; org.mockito.Mockito.when ( mSupplicantStaNetworkMock.select ( ) ) . thenReturn ( false ) ; assertFalse ( mDut.connectToNetwork ( new android.net.wifi.WifiConfiguration ( ) ) ) ; }
private java.lang.CharSequence getImsErrorMessage ( android.os.AsyncResult ar ) { com.android.ims.ImsException error = ( ( com.android.ims.ImsException ) ( ar.exception ) ) ; java.lang.CharSequence errorMessage ; if ( ( errorMessage = getMmiErrorMessage ( ar ) ) != null ) { return errorMessage ; } else if ( ( error.getMessage ( ) ) != null ) { return error.getMessage ( ) ; } else { return getErrorMessage ( ar ) ; } }
protected void done ( ) { try { com.android.hierarchyviewer.ui.Workspace.WindowsResult result = get ( ) ; protocolVersion = result.protocolVersion ; serverVersion = result.serverVersion ; setupProtocolDependentToolbar ( ) ; windowsTableModel.clear ( ) ; windowsTableModel.addWindows ( result.windows ) ; } catch ( java.util.concurrent.ExecutionException e ) { e.printStackTrace ( ) ; } catch ( java.lang.InterruptedException e ) { e.printStackTrace ( ) ; } finally { endTask ( ) ; } }
public void test_bind_unresolvedAddress ( ) throws java.io.IOException { java.nio.channels.SocketChannel sc = java.nio.channels.SocketChannel.open ( ) ; try { sc.socket ( ) . bind ( new java.net.InetSocketAddress ( "unresolvedname" , 31415 ) ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } assertNull ( sc.socket ( ) . getLocalSocketAddress ( ) ) ; assertTrue ( sc.isOpen ( ) ) ; assertFalse ( sc.isConnected ( ) ) ; sc.close ( ) ; }
public void assign ( java.net.HttpCookie cookie , java.lang.String attrName , java.lang.String attrValue ) { if ( ( cookie.getMaxAge ( ) ) == ( java.net.HttpCookie.MAX_AGE_UNSPECIFIED ) ) { java.util.Date date = libcore.net.http.HttpDate.parse ( attrValue ) ; if ( date != null ) { cookie.setMaxAge ( ( ( ( date.getTime ( ) ) - ( java.lang.System.currentTimeMillis ( ) ) ) / 1000 ) ) ; } else { cookie.setMaxAge ( 0 ) ; } } }
public void testEquals ( ) throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataProfile dp1 = new com.android.internal.telephony.dataconnection.DataProfile ( mApn1 ) ; com.android.internal.telephony.dataconnection.DataProfile dp2 = new com.android.internal.telephony.dataconnection.DataProfile ( mApn1 ) ; assertEquals ( dp1 , dp2 ) ; dp2 = new com.android.internal.telephony.dataconnection.DataProfile ( mApn2 ) ; assertFalse ( dp1.equals ( dp2 ) ) ; }
public void onSdkLoaded ( ) { com.android.sdklib.IAndroidTarget target = getRenderingTarget ( ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } }
public void run ( com.android.tradefed.result.ITestInvocationListener listener ) throws com.android.tradefed.device.DeviceNotAvailableException { }
public java.lang.String getDisplayScript ( java.util.Locale inLocale ) { java.lang.String scriptCode = baseLocale.getScript ( ) ; if ( scriptCode.isEmpty ( ) ) { return "" ; } java.lang.String result = libcore.icu.ICU.getDisplayScript ( this , inLocale ) ; if ( result == null ) { result = libcore.icu.ICU.getDisplayScript ( this , java.util.Locale.getDefault ( java.util.Locale.Category.DISPLAY ) ) ; } return result ; }
private void doClean ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { com.android.ide.eclipse.adt.AdtPlugin.printBuildToConsole ( BuildVerbosity.VERBOSE , project , Messages.Removing_Generated_Classes ) ; if ( ( mGenFolder ) != null ) { mGenFolder.setDerived ( false ) ; removeDerivedResources ( mGenFolder , monitor ) ; } removeMarkersFromContainer ( project , AdtConstants.MARKER_AAPT_COMPILE ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_XML ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_AIDL ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_RENDERSCRIPT ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_ANDROID ) ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
public void testApplyingWithoutCriticalFiles ( ) throws java.lang.Exception { com.intellij.updater.PatchFileCreator.create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; assertTrue ( com.intellij.updater.PatchFileCreator.apply ( preparationResult , new java.util.HashMap < java.lang.String , com.intellij.updater.ValidationResult.Option > ( ) , com.intellij.updater.TEST_UI ) ) ; }
public void reportConnectionFailureFetchesFatesInVerboseMode ( ) { final boolean verbosityToggle = true ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.mockito.Mockito.verify ( mWifiNative ) . getTxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; org.mockito.Mockito.verify ( mWifiNative ) . getRxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; }
public void copy1DRangeFromUnchecked ( int off , int count , java.lang.Object array ) { copy1DRangeFromUnchecked ( off , count , array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.telecom.Log.startSession ( "TSSwR.oR" ) ; try { synchronized ( mLock ) { int userHandleId = intent.getIntExtra ( Intent.EXTRA_USER_HANDLE , 0 ) ; android.os.UserHandle currentUserHandle = new android.os.UserHandle ( userHandleId ) ; mPhoneAccountRegistrar.setCurrentUserHandle ( currentUserHandle ) ; mCallsManager.onUserSwitch ( currentUserHandle ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void run ( ) { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setView ( view , viewSpacingLeft , viewSpacingTop , viewSpacingRight , viewSpacingBottom ) ; mDialog = mBuilder.show ( ) ; mView = mDialog.getWindow ( ) . findViewById ( 100 ) ; }
public static java.lang.String getLogFormatString ( com.android.ddmlib.Log.LogLevel logLevel , java.lang.String tag , java.lang.String message ) { java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat ( "hh:mm:ss" ) ; return java.lang.String.format ( "%s %c/%s: %s\n" , formatter.format ( new java.util.Date ( ) ) , logLevel.getPriorityLetter ( ) , tag , message ) ; }
private java.lang.String getDefaultPath ( com.google.gct.idea.appengine.validation.PsiMethod psiMethod ) { java.lang.String apiDefaultResource = getResourceProperty ( psiMethod ) ; if ( apiDefaultResource != null ) { return ( apiDefaultResource.toLowerCase ( ) ) + ( getPathParameter ( psiMethod ) ) ; } java.lang.String guessedResourceName = guessResourceName ( psiMethod ) ; if ( guessedResourceName != null ) { return guessedResourceName + ( getPathParameter ( psiMethod ) ) ; } return ( psiMethod.getName ( ) ) + ( getPathParameter ( psiMethod ) ) ; }
public int remove ( java.lang.String uuid , java.lang.String name , int userId ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "remove" ) ; builder.append ( ' ' ) ; builder.append ( com.android.server.pm.Installer.escapeNull ( uuid ) ) ; builder.append ( ' ' ) ; builder.append ( name ) ; builder.append ( ' ' ) ; builder.append ( userId ) ; return mInstaller.execute ( builder.toString ( ) ) ; }
synchronized long nScriptKernelIDCreate ( long sid , int slot , int sig , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } return rsnScriptKernelIDCreate ( curCon , sid , slot , sig , mUseInc ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] id = org.conscrypt.NativeCrypto.SSL_SESSION_session_id ( session ) ; org.junit.Assert.assertNotNull ( id ) ; org.junit.Assert.assertEquals ( 32 , id.length ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static void help ( java.io.PrintStream out ) { out.println ( "java -jar ahat.jar [-p port] [--proguard-map FILE] FILE" ) ; out.println ( ( " Launch an http server for viewing " + "the given Android heap-dump FILE." ) ) ; out.println ( "" ) ; out.println ( "Options:" ) ; out.println ( " -p <port>" ) ; out.println ( " Serve pages on the given port. Defaults to 7100." ) ; out.println ( " --proguard-map FILE" ) ; out.println ( " Use the proguard map FILE to deobfuscate the heap dump." ) ; out.println ( "" ) ; }
public static void assertNull ( java.lang.String message , java.lang.Object object ) { if ( object == null ) { return ; } org.junit.Assert.failNotNull ( message , object ) ; }
public void setSoWriteTimeout ( int writeTimeoutMilliseconds ) throws java.net.SocketException { this . writeTimeoutMilliseconds = writeTimeoutMilliseconds ; libcore.io.StructTimeval tv = libcore.io.StructTimeval.fromMillis ( writeTimeoutMilliseconds ) ; try { Libcore.os.setsockoptTimeval ( getFileDescriptor$ ( ) , libcore.io.OsConstants.SOL_SOCKET , libcore.io.OsConstants.SO_SNDTIMEO , tv ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw errnoException.rethrowAsSocketException ( ) ; } }
public void testDescendingAddNull ( ) { java.util.NavigableSet q = jsr166.ConcurrentSkipListSubSetTest.dset0 ( ) ; try { q.add ( null ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public void testUpgradeKeepsPermissions ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_22 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest22" , "testAllPermissionsGrantedByDefault" ) ; assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , true , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testAllPermissionsGrantedOnUpgrade" ) ; }
public void testApplyingWithCriticalFiles ( ) throws java.lang.Exception { myPatchSpec.setCriticalFiles ( java.util.Arrays.asList ( "lib/annotations.jar" ) ) ; com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; assertAppliedAndRevertedCorrectly ( patch , com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ) ; }
private android.view.ViewGroup.LayoutParams getNavigationBarLayoutParams ( ) { android.view.WindowManager.LayoutParams lp = new android.view.WindowManager.LayoutParams ( android.view.ViewGroup.LayoutParams.MATCH_PARENT , android.view.ViewGroup.LayoutParams.MATCH_PARENT , android.view.ViewGroup.LayoutParams.TYPE_NAVIGATION_BAR , ( ( ( ( ( 0 | ( android.view.ViewGroup.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_NOT_FOCUSABLE ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_NOT_TOUCH_MODAL ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_SPLIT_TOUCH ) ) , android.graphics.PixelFormat.TRANSLUCENT ) ; if ( android.app.ActivityManager.isHighEndGfx ( ) ) { lp.flags |= android.view.ViewGroup.LayoutParams.FLAG_HARDWARE_ACCELERATED ; } lp.setTitle ( "NavigationBar" ) ; lp.windowAnimations = 0 ; return lp ; }
public com.android.dex.TypeList adjustTypeList ( com.android.dex.TypeList typeList ) { if ( typeList == ( com.android.dex.TypeList.EMPTY ) ) { return typeList ; } short [ ] types = typeList.getTypes ( ) . clone ( ) ; for ( int i = 0 ; i < ( types.length ) ; i ++ ) { types [ i ] = ( ( short ) ( adjustType ( types [ i ] ) ) ) ; } return new com.android.dex.TypeList ( target , types ) ; }
public static java.util.List < org.junit.runners.model.FrameworkMethod > listFrom ( org.junit.runners.model.TestClass testClass ) { java.util.List < org.junit.runners.model.FrameworkMethod > methods = new java.util.ArrayList < org.junit.runners.model.FrameworkMethod > ( ) ; for ( org.junit.runners.model.FrameworkMethod frameworkMethod : testClass.getAnnotatedMethods ( org.junit.Test.class ) ) { junitparams.internal.TestMethod testMethod = new junitparams.internal.TestMethod ( frameworkMethod , testClass ) ; methods.add ( testMethod.describableFrameworkMethod ( ) ) ; } return methods ; }
public static com.android.server.NsdService create ( android.content.Context context ) throws java.lang.InterruptedException { com.android.server.NsdService.NsdSettings settings = com.android.server.NsdService.NsdSettings.makeDefault ( context ) ; android.os.HandlerThread thread = new android.os.HandlerThread ( com.android.server.NsdService.TAG ) ; thread.start ( ) ; android.os.Handler handler = new android.os.Handler ( thread.getLooper ( ) ) ; com.android.server.NsdService service = new com.android.server.NsdService ( context , settings , handler ) ; service.mNativeDaemonConnected.await ( ) ; return service ; }
public final java.nio.MappedByteBuffer force ( ) { checkIsMapped ( ) ; if ( ( mapMode ) == ( java.nio.channels.FileChannel.MapMode.READ_WRITE ) ) { try { Libcore.os.msync ( block.toLong ( ) , block.getSize ( ) , libcore.io.OsConstants.MS_SYNC ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw new java.lang.AssertionError ( errnoException ) ; } } return this ; }
public static < K , V , M extends com.google.common.collect.Multimap < K , V > > com.google.common.truth.MultimapSubject < ? extends com.google.common.truth.MultimapSubject < ? , K , V , M > , K , V , M > assertThat ( @ com.android.annotations.Nullable com.google.common.collect.Multimap < K , V > target ) { return com.google.common.truth.Truth.assert_ ( ) . that ( target ) ; }
public boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( "sendReport(): device=" + device ) + " id=" ) + id ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.sendReport ( device , id , data ) ; }
public java.lang.Object [ ] getTestObjects ( ) { android.icu.util.ULocale uloc = android.icu.util.ULocale.forLocale ( java.util.Locale.US ) ; android.icu.text.NumberFormat [ ] formats = new android.icu.text.NumberFormat [ ] { android.icu.dev.test.serializable.FormatHandler.getCannedDecimalFormat ( "#,##0.###" , uloc ) , android.icu.dev.test.serializable.FormatHandler.getCannedDecimalFormat ( "¤#,##0.00;(¤#,##0.00)" , uloc ) , android.icu.dev.test.serializable.FormatHandler.getCannedDecimalFormat ( "#,##0%" , uloc ) , android.icu.dev.test.serializable.FormatHandler.getCannedDecimalFormat ( "#E0" , uloc ) } ; return formats ; }
protected void load ( ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem item = getRepository ( ) . getResourceItem ( mType , mResourceName ) ; item.add ( this ) ; }
public boolean process ( @ com.android.annotations.NonNull org.w3c.dom.Document mainDoc , @ com.android.annotations.NonNull org.w3c.dom.Document ... libraryDocs ) { boolean success = true ; mMainDoc = mainDoc ; com.android.manifmerger.XmlUtils.decorateDocument ( mainDoc , IMergerLog.MAIN_MANIFEST ) ; java.lang.String prefix = com.android.manifmerger.XmlUtils.lookupNsPrefix ( mainDoc , SdkConstants.NS_RESOURCES ) ; mXPath = com.android.sdklib.xml.AndroidXPathFactory.newXPath ( prefix ) ; for ( org.w3c.dom.Document libDoc : libraryDocs ) { com.android.manifmerger.XmlUtils.decorateDocument ( libDoc , IMergerLog.LIBRARY ) ; if ( ! ( mergeLibDoc ( libDoc ) ) ) { success = false ; } } mXPath = null ; mMainDoc = null ; return success ; }
public boolean contentEquals ( java.lang.CharSequence cs ) { if ( cs == null ) { return false ; } return ( ( this ) == cs ) || ( ( ( cs.length ( ) ) == ( length ) ) && ( regionMatches ( 0 , cs , length ) ) ) ; }
public void run ( ) { try { org.apache.http.HttpResponse response = mServer.getResponse ( mRequest ) ; mConnection.sendResponseHeader ( response ) ; mConnection.sendResponseEntity ( response ) ; mConnection.close ( ) ; synchronized ( mLock ) { this . mSockets.remove ( mSocket ) ; } } catch ( java.lang.Exception e ) { android.util.Log.e ( android.webkit.cts.CtsTestServer.TAG , "Error handling request:" , e ) ; } }
protected java.util.Map < java.lang.String , java.lang.String > createArgumentMap ( ) { java.util.Map < java.lang.String , java.lang.String > args = super . createArgumentMap ( ) ; args.put ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ChangeLayoutRefactoring.KEY_TYPE , mTypeFqcn ) ; args.put ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ChangeLayoutRefactoring.KEY_FLATTEN , java.lang.Boolean.toString ( mFlatten ) ) ; return args ; }
public int handleIncomingUser ( int callingPid , int callingUid , int userId , boolean allowAll , boolean requireFull , java.lang.String name , java.lang.String callerPackage ) { return mUserController.handleIncomingUser ( callingPid , callingUid , userId , allowAll , ( requireFull ? com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY : com.android.server.am.ActivityManagerService.ALLOW_NON_FULL ) , name , callerPackage ) ; }
public void compareLibCoreStructure ( ) throws java.lang.Exception { com.android.jack.Options options = new com.android.jack.Options ( ) ; options.addProperty ( Options.JAVA_SOURCE_VERSION.getName ( ) , JavaVersion.JAVA_7.toString ( ) ) ; com.android.jack.TestTools.checkStructure ( options , null , null , com.android.jack.compile.androidtree.core.CoreCompilationTest.SOURCELIST , false , false , 0.1F , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
private com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener doRunTests ( java.lang.String pkgName , java.lang.String testClassName , java.lang.String testMethodName ) { com.android.ddmlib.testrunner.RemoteAndroidTestRunner testRunner = new com.android.ddmlib.testrunner.RemoteAndroidTestRunner ( pkgName , getDevice ( ) ) ; if ( ( testClassName != null ) && ( testMethodName != null ) ) { testRunner.setMethodName ( testClassName , testMethodName ) ; } com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener listener = new com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener ( ) ; testRunner.run ( listener ) ; return listener ; }
public java.lang.Integer getReasonCode ( ) throws java.io.IOException { java.lang.Object obj = getExtension ( sun.security.x509.PKIXExtensions.ReasonCode_Id ) ; if ( obj == null ) return null ; sun.security.x509.CRLReasonCodeExtension reasonCode = ( ( sun.security.x509.CRLReasonCodeExtension ) ( obj ) ) ; return reasonCode.get ( sun.security.x509.CRLReasonCodeExtension.REASON ) ; }
public java.lang.String getType ( android.net.Uri url ) { switch ( com.android.providers.telephony.TelephonyProvider.s_urlMatcher.match ( url ) ) { case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY : case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY_USING_SUBID : return "vnd.android.cursor.dir/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_ID : case com.android.providers.telephony.TelephonyProvider.URL_FILTERED_ID : return "vnd.android.cursor.item/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE : return "vnd.android.cursor.item/telephony-carrier" ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown URL " + url ) ) ; } }
public void testConnectFailureDueToNetworkSaveException ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; setupMocksForConnectSequence ( true ) ; org.mockito.Mockito.doThrow ( new java.lang.IllegalArgumentException ( "Some error!!!" ) ) . when ( mSupplicantStaNetworkMock ) . saveWifiConfiguration ( org.mockito.Matchers.any ( android.net.wifi.WifiConfiguration.class ) ) ; assertFalse ( mDut.connectToNetwork ( new android.net.wifi.WifiConfiguration ( ) , false ) ) ; org.mockito.Mockito.verify ( mISupplicantStaIfaceMock , org.mockito.Mockito.times ( 2 ) ) . removeNetwork ( org.mockito.Matchers.anyInt ( ) ) ; }
public boolean trackBssid ( java.lang.String bssid , boolean enable , int reasonCode ) { localLog ( ( ( ( ( "trackBssid: " + ( enable ? "enable " : "disable " ) ) + bssid ) + " reason code " ) + reasonCode ) ) ; if ( bssid == null ) { return false ; } boolean updated = updateBssidBlacklist ( bssid , enable , reasonCode ) ; if ( updated && ( ! enable ) ) { startConnectivityScan ( com.android.server.wifi.WifiConnectivityManager.SCAN_IMMEDIATELY ) ; } return updated ; }
public static final javax.crypto.Cipher getInstance ( java.lang.String transformation , java.lang.String provider ) throws java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , javax.crypto.NoSuchPaddingException { if ( ( provider == null ) || ( ( provider.length ( ) ) == 0 ) ) { throw new java.lang.IllegalArgumentException ( "Missing provider" ) ; } java.security.Provider p = java.security.Security.getProvider ( provider ) ; if ( p == null ) { throw new java.security.NoSuchProviderException ( ( "No such provider: " + provider ) ) ; } return javax.crypto.Cipher.createCipher ( transformation , p ) ; }
public void onResume ( ) { if ( com.android.dialer.util.PermissionsUtil.hasPermission ( mActivity , android.Manifest.permission.READ_CONTACTS ) ) { mContactInfoCache.start ( ) ; } mContactsPreferences.refreshValue ( ContactsPreferences.DISPLAY_ORDER_KEY ) ; mIsSpamEnabled = com.android.dialer.spam.SpamComponent.get ( mActivity ) . spam ( ) . isSpamEnabled ( ) ; getDuo ( ) . registerListener ( this ) ; notifyDataSetChanged ( ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( R.drawable.icon1 , ( " " + ( ( ( ( "tick tock tick tock\n\nSometimes notifications can " + "be really long and wrap to more than one line.\n" ) + "Sometimes." ) + "Ohandwhathappensifwehaveonereallylongstringarewesure" ) + "thatwesegmentitcorrectly?\n" ) ) , java.lang.System.currentTimeMillis ( ) ) ; n.setLatestEventInfo ( this , "Still Persistent #1" , "This is still a notification!!!" , makeIntent ( ) ) ; mNM.notify ( 1 , n ) ; }
public java.lang.String [ ] saw ( java.lang.String prefix ) { return saw ( prefix , ( - 1 ) ) ; }
public static long test_interface ( java.util.Map map ) { java.lang.Integer intobj = new java.lang.Integer ( 0 ) ; java.lang.String s = "asdf" ; long start = java.lang.System.currentTimeMillis ( ) ; for ( int i = 0 ; i < 10000 ; i ++ ) { map.put ( intobj , s ) ; } long end = java.lang.System.currentTimeMillis ( ) ; return end - start ; }
protected void onPostExecute ( android.database.Cursor cursor ) { if ( ! ( isCancelled ( ) ) ) { com.android.internal.logging.MetricsLogger.action ( getContext ( ) , MetricsEvent.ACTION_SEARCH_RESULTS , cursor.getCount ( ) ) ; setResultsCursor ( cursor ) ; setResultsVisibility ( ( ( cursor.getCount ( ) ) > 0 ) ) ; } else if ( cursor != null ) { cursor.close ( ) ; } }
public java.util.Map < com.android.ide.common.api.INode , com.android.ide.common.api.Rect > measureChildren ( com.android.ide.common.api.INode parent , com.android.ide.common.api.IClientRulesEngine.AttributeFilter filter ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService renderService = com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService.create ( mEditor ) ; java.util.Map < com.android.ide.common.api.INode , com.android.ide.common.api.Rect > map = renderService.measureChildren ( parent , filter ) ; if ( map == null ) { map = java.util.Collections.emptyMap ( ) ; } return map ; }
public final void init ( int opmode , java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { checkMode ( opmode ) ; getSpi ( new javax.crypto.Cipher.InitParams ( javax.crypto.Cipher.InitType.ALGORITHM_PARAM_SPEC , opmode , key , random , params , null ) ) ; mode = opmode ; }
public void test_newSAXParser ( ) { try { javax.xml.parsers.SAXParser sp = spf.newSAXParser ( ) ; assertTrue ( ( sp instanceof javax.xml.parsers.SAXParser ) ) ; sp.parse ( is1 , new org.apache.harmony.tests.javax.xml.parsers.SAXParserFactoryTest.MyHandler ( ) ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } spf.setValidating ( true ) ; try { javax.xml.parsers.SAXParser sp = spf.newSAXParser ( ) ; } catch ( javax.xml.parsers.ParserConfigurationException e ) { } catch ( org.xml.sax.SAXException e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } }
private void responseScanStatus ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.NetworkScanResult nsr = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { nsr = new com.android.internal.telephony.NetworkScanResult ( NetworkScanResult.SCAN_STATUS_PARTIAL , android.hardware.radio.V1_0.RadioError.NONE , null ) ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , nsr ) ; } mRil.processResponseDone ( rr , responseInfo , nsr ) ; } }
public void setLength ( long newLength ) throws java.io.IOException { if ( newLength < 0 ) { throw new java.lang.IllegalArgumentException ( "newLength < 0" ) ; } try { Libcore.os.ftruncate ( fd , newLength ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } long filePointer = getFilePointer ( ) ; if ( filePointer > newLength ) { seek ( newLength ) ; } maybeSync ( ) ; }
public int currentCodePoint ( ) { int ch = current ( ) ; if ( android.icu.text.UTF16.isLeadSurrogate ( ( ( char ) ( ch ) ) ) ) { next ( ) ; int ch2 = current ( ) ; previous ( ) ; if ( android.icu.text.UTF16.isTrailSurrogate ( ( ( char ) ( ch2 ) ) ) ) { return java.lang.Character.toCodePoint ( ( ( char ) ( ch ) ) , ( ( char ) ( ch2 ) ) ) ; } } return ch ; }
private void updateDeviceNumberRow ( ) { if ( ( deviceNumberTextView ) == null ) { return ; } if ( ( isInMultiWindowMode ) || ( android.text.TextUtils.isEmpty ( primaryCallState.callbackNumber ) ) ) { deviceNumberTextView.setVisibility ( View.GONE ) ; deviceNumberDivider.setVisibility ( View.GONE ) ; return ; } deviceNumberTextView.setText ( context.getString ( R.string.contact_grid_callback_number , primaryCallState.callbackNumber ) ) ; deviceNumberTextView.setVisibility ( View.VISIBLE ) ; if ( primaryInfo.shouldShowLocation ( ) ) { deviceNumberDivider.setVisibility ( View.VISIBLE ) ; } }
public long getSize ( com.android.ahat.heapdump.PathElement element , com.android.ahat.heapdump.AhatHeap heap ) { if ( element == null ) { return heap.getSize ( ) ; } if ( element.isDominator ) { return element.instance.getRetainedSize ( heap ) ; } return 0 ; }
public void testGoogleAccountLoginWatcher ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; android.support.test.uiautomator.UiDevice device = testFramework.getDevice ( ) ; device.registerWatcher ( com.android.devtools.systemimage.uitest.watchers.GoogleAccountLoginWatcher.class . getName ( ) , new com.android.devtools.systemimage.uitest.watchers.GoogleAccountLoginWatcher ( device , null , null ) ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Contacts" ) ; device.removeWatcher ( com.android.devtools.systemimage.uitest.watchers.GoogleAccountLoginWatcher.class . getName ( ) ) ; }
public void importFromJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ImportHelper loader , @ javax.annotation.Nonnull java.lang.Object node ) { com.android.jack.ir.ast.JParameterRef jRef = ( ( com.android.jack.ir.ast.JParameterRef ) ( node ) ) ; localId = loader.getVariableSymbols ( ) . getId ( jRef.getParameter ( ) ) ; sourceInfo = jRef.getSourceInfo ( ) ; markers = loader.load ( com.android.jack.jayce.v0004.nodes.NMarker.class , jRef.getAllMarkers ( ) ) ; }
static java.io.File crunchFile ( int crunchKey , @ com.android.annotations.NonNull java.io.File file , com.android.ide.common.internal.PngCruncher aaptCruncher ) throws com.android.ide.common.internal.PngException , java.io.IOException { java.io.File outFile = java.io.File.createTempFile ( "pngWriterTest" , ".png" ) ; outFile.deleteOnExit ( ) ; try { aaptCruncher.crunchPng ( crunchKey , file , outFile ) ; } catch ( com.android.ide.common.internal.PngException e ) { e.printStackTrace ( ) ; throw e ; } java.lang.System.out.println ( ( "crunch " + ( file.getPath ( ) ) ) ) ; return outFile ; }
public void testSubList2_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.subList ( 0 , ( ( list.size ( ) ) + 1 ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
synchronized void nScriptSetTimeZone ( long script , byte [ ] timeZone , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptSetTimeZone ( curCon , script , timeZone , mUseInc ) ; }
private javax.net.ssl.SSLSocketFactory makeSocketFactory ( javax.net.ssl.KeyManager [ ] keyManagers , javax.net.ssl.TrustManager [ ] trustManagers ) { try { com.android.org.conscrypt.OpenSSLContextImpl sslContext = new com.android.org.conscrypt.OpenSSLContextImpl ( ) ; sslContext.engineInit ( keyManagers , trustManagers , null ) ; sslContext.engineGetClientSessionContext ( ) . setPersistentCache ( mSessionCache ) ; return sslContext.engineGetSocketFactory ( ) ; } catch ( java.security.KeyManagementException e ) { android.util.Log.wtf ( android.net.SSLCertificateSocketFactory.TAG , e ) ; return ( ( javax.net.ssl.SSLSocketFactory ) ( javax.net.ssl.SSLSocketFactory.getDefault ( ) ) ) ; } }
public com.google.common.util.concurrent.ListenableFuture < com.google.common.collect.ImmutableMap < java.lang.String , com.android.dialer.duo.stub.ReachabilityData > > updateReachability ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull java.util.List < java.lang.String > numbers ) { com.android.dialer.common.Assert.isMainThread ( ) ; com.android.dialer.common.Assert.isNotNull ( context ) ; com.android.dialer.common.Assert.isNotNull ( numbers ) ; return com.google.common.util.concurrent.Futures.immediateFuture ( com.google.common.collect.ImmutableMap.of ( ) ) ; }
protected com.android.sched.vfs.OutputVFile getOutputDex ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir , int dexCount ) throws com.android.jack.backend.dex.DexWritingException { assert dexCount >= 1 ; java.lang.String dexName ; if ( dexCount == 1 ) { dexName = DexFileWriter.DEX_FILENAME ; } else { dexName = ( ( DexFileWriter.DEX_PREFIX ) + dexCount ) + ( FileType.DEX.getFileExtension ( ) ) ; } try { return outputVDir.createOutputVFile ( new com.android.sched.vfs.VPath ( dexName , '/' ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new com.android.jack.backend.dex.DexWritingException ( e ) ; } }
public void log ( java.util.List < com.android.ddmlib.logcat.LogCatMessage > newMessages ) { java.util.List < com.android.ddmlib.logcat.LogCatMessage > deletedMessages ; synchronized ( mLogMessages ) { deletedMessages = mLogMessages.ensureSpace ( newMessages.size ( ) ) ; mLogMessages.appendMessages ( newMessages ) ; } sendLogChangedEvent ( newMessages , deletedMessages ) ; }
public void testNullConfigFailsSecondCallWithConfigSuccessful ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; when ( mWificond.createApInterface ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( null ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING , mWifiStateMachinePrime.getCurrentMode ( ) ) ; android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration ( ) ; config.SSID = "ThisIsAConfig" ; enterSoftApActiveMode ( config ) ; }
public void onResult ( com.google.android.gms.wearable.MessageApi.SendMessageResult sendMessageResult ) { if ( ! ( sendMessageResult.getStatus ( ) . isSuccess ( ) ) ) { updatePhoneButtonOnUiThread ( ) ; logToUi ( "Sending message failed." ) ; } else { android.util.Log.d ( com.example.android.wearable.runtimepermissions.MainWearActivity.TAG , "Message sent successfully." ) ; } }
public boolean sendPassThruPlay ( android.bluetooth.BluetoothDevice mDevice ) { log ( "sendPassThruPlay + " ) ; com.android.bluetooth.avrcpcontroller.AvrcpControllerService avrcpCtrlService = com.android.bluetooth.avrcpcontroller.AvrcpControllerService.getAvrcpControllerService ( ) ; if ( ( ( avrcpCtrlService != null ) && ( mDevice != null ) ) && ( avrcpCtrlService.getConnectedDevices ( ) . contains ( mDevice ) ) ) { avrcpCtrlService.sendPassThroughCmd ( mDevice , AvrcpControllerService.PASS_THRU_CMD_ID_PLAY , AvrcpControllerService.KEY_STATE_PRESSED ) ; avrcpCtrlService.sendPassThroughCmd ( mDevice , AvrcpControllerService.PASS_THRU_CMD_ID_PLAY , AvrcpControllerService.KEY_STATE_RELEASED ) ; log ( " sendPassThruPlay command sent - " ) ; return true ; } else { log ( "passthru command not sent, connection unavailable" ) ; return false ; } }
public void dumpState ( java.io.PrintWriter pw ) { pw.println ( ( " mSavedTime=" + ( mSavedNitzTime ) ) ) ; pw.println ( ( " mNeedCountryCodeForNitz=" + ( mNeedCountryCodeForNitz ) ) ) ; pw.println ( ( " mLatestNitzSignal=" + ( mLatestNitzSignal ) ) ) ; pw.println ( ( " mGotCountryCode=" + ( mGotCountryCode ) ) ) ; pw.println ( ( " mSavedTimeZoneId=" + ( mSavedTimeZoneId ) ) ) ; pw.println ( ( " mNitzTimeZoneDetectionSuccessful=" + ( mNitzTimeZoneDetectionSuccessful ) ) ) ; pw.println ( ( " mWakeLock=" + ( mWakeLock ) ) ) ; pw.flush ( ) ; }
public void testStrictElement_noDifference ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String higherPriority = "" + ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" tools:node=\"strict\"" ) + " android:exported=\"true\">\n" ) + " <action android:label=\"@string/foo\"/>\n" ) + " </activity>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String lowerPriority = "" + ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" " ) + " android:exported=\"true\">\n" ) + " <action android:label=\"@string/foo\"/>\n" ) + " </activity>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "higherPriority" ) , higherPriority ) ; com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "lowerPriority" ) , lowerPriority ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > result = refDocument.merge ( otherDocument , mergingReportBuilder ) ; assertTrue ( result.isPresent ( ) ) ; com.android.manifmerger.XmlDocument resultDocument = result.get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = resultDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; java.util.logging.Logger.getAnonymousLogger ( ) . info ( resultDocument.prettyPrint ( ) ) ; assertFalse ( refDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) . get ( ) . compareTo ( activityOne.get ( ) ) . isPresent ( ) ) ; }
public void setDataEnabled ( boolean enable ) { setUserMobileDataEnabled ( enable ) ; }
protected int compareTo0 ( com.android.dx.rop.cst.Constant other ) { com.android.dx.rop.cst.CstMethodHandle otherHandle = ( ( com.android.dx.rop.cst.CstMethodHandle ) ( other ) ) ; if ( ( getType ( ) ) == ( otherHandle.getType ( ) ) ) { return getRef ( ) . compareTo ( otherHandle.getRef ( ) ) ; } else { return java.lang.Integer.compare ( getType ( ) , otherHandle.getType ( ) ) ; } }
private void enableComponent ( final int enabledState ) { final java.lang.String [ ] components = new java.lang.String [ ] { com.android.cts.verifier.managedprovisioning.ByodHelperActivity.class . getName ( ) , com.android.cts.verifier.managedprovisioning.WorkStatusTestActivity.class . getName ( ) , PermissionLockdownTestActivity.ACTIVITY_ALIAS , com.android.cts.verifier.managedprovisioning.AuthenticationBoundKeyTestActivity.class . getName ( ) , com.android.cts.verifier.managedprovisioning.VpnTestActivity.class . getName ( ) } ; for ( java.lang.String component : components ) { getPackageManager ( ) . setComponentEnabledSetting ( new android.content.ComponentName ( this , component ) , enabledState , PackageManager.DONT_KILL_APP ) ; } }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { com.android.sched.vfs.BaseVElement element = parent.getFromCache ( name ) ; if ( element != null ) { if ( element.isVDir ( ) ) { return ( ( com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir ) ( element ) ) ; } else { throw new com.android.sched.util.file.NotDirectoryException ( getVDirLocation ( parent , name ) ) ; } } else { throw new com.android.sched.util.file.NoSuchFileException ( getVDirLocation ( parent , name ) ) ; } }
void test ( ) { java.util.List < java.lang.String > result = new java.util.ArrayList ( com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . mPosted ) ; if ( ( ( result.size ( ) ) > 0 ) && ( result.contains ( mTag1 ) ) ) { status = PASS ; } else { logFail ( ) ; status = FAIL ; } }
public void close ( java.io.FileDescriptor fd ) throws android.system.ErrnoException { try { if ( fd.isSocket$ ( ) ) { if ( libcore.io.BlockGuardOs.isLingerSocket ( fd ) ) { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; } if ( libcore.io.BlockGuardOs.isInetSocket ( fd ) ) { untagSocket ( fd ) ; } } } catch ( android.system.ErrnoException ignored ) { } os.close ( fd ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; this . channel1 = java.nio.channels.SocketChannel.open ( ) ; this . channel2 = java.nio.channels.SocketChannel.open ( ) ; this . server1 = new java.net.ServerSocket ( 0 ) ; this . localAddr1 = ( ( java.net.InetSocketAddress ) ( server1.getLocalSocketAddress ( ) ) ) ; }
public void testEndCallWithNoForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getFirstCallWithState ( org.mockito.Matchers.any ( ) ) ) . thenReturn ( call ) ; assertTrue ( mTSIBinder.endCall ( ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( ) ; }
public void dumpShowsFailureTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "rdev_connect" ) ) ; }
public void onCreate ( android.os.Bundle savedState ) { android.os.Trace.beginSection ( ( ( com.android.dialer.app.list.OldSpeedDialFragment.TAG ) + " onCreate" ) ) ; super . onCreate ( savedState ) ; contactTileAdapter = new com.android.dialer.app.list.PhoneFavoritesTileAdapter ( getContext ( ) , contactTileAdapterListener , this ) ; contactTileAdapter.setPhotoLoader ( com.android.dialer.contactphoto.ContactPhotoManager.getInstance ( getContext ( ) ) ) ; contactTileLoaderListener = new com.android.dialer.app.list.OldSpeedDialFragment.ContactTileLoaderListener ( this , contactTileAdapter ) ; animationDuration = getResources ( ) . getInteger ( R.integer.fade_duration ) ; android.os.Trace.endSection ( ) ; }
public void testOnSetUpAdapterSingleInstance ( ) throws java.lang.Exception { java.io.File testAdapter = new java.io.File ( mTestDir , ( ( VTS_NATIVE_TEST_DIR ) + ( TEST_HAL_ADAPTER_BINARY ) ) ) ; testAdapter.createNewFile ( ) ; java.lang.String output = "android.hardware.foo@1.1::IFoo/default" ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mPreparer.setUp ( mDevice , mBuildInfo ) ; verify ( mDevice , times ( 1 ) ) . pushFile ( eq ( testAdapter ) , eq ( ( ( TARGET_NATIVE_TEST_DIR ) + ( TEST_HAL_ADAPTER_BINARY ) ) ) ) ; java.lang.String adapterCmd = java.lang.String.format ( "%s /data/nativetest64/%s %s %s %d" , SCRIPT_PATH , TEST_HAL_ADAPTER_BINARY , "IFoo" , "default" , THREAD_COUNT_DEFAULT ) ; verify ( mDevice , times ( 1 ) ) . executeShellCommand ( eq ( adapterCmd ) ) ; }
public java.lang.String getDescription ( com.android.bips.discovery.DiscoveredPrinter printer ) { if ( ( com.android.bips.p2p.P2pUtils.isP2p ( printer ) ) || ( com.android.bips.p2p.P2pUtils.isOnConnectedInterface ( this , printer ) ) ) { return getString ( R.string.wifi_direct ) ; } java.lang.String host = printer.getHost ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( printer.location ) ) ) { return getString ( R.string.printer_description , host , printer.location ) ; } else { return host ; } }
public void test_available_on_nonIOCTL_supported_file ( ) throws java.lang.Exception { java.io.File file = new java.io.File ( "/dev/zero" ) ; try ( java.io.FileInputStream input = new java.io.FileInputStream ( file ) ) { assertEquals ( 0 , input.available ( ) ) ; } try ( java.io.FileInputStream input = new java.io.FileInputStream ( file ) ) { android.system.Os.ioctlInt ( input.getFD ( ) , OsConstants.FIONREAD , new android.util.MutableInt ( 0 ) ) ; fail ( ) ; } catch ( android.system.ErrnoException expected ) { assertEquals ( ( "FIONREAD should have returned ENOTTY for the file. If it doesn't return" + " FIONREAD, the test is no longer valid." ) , OsConstants.ENOTTY , expected.errno ) ; } }
public void setDestDir ( java.io.File destDir ) { mDestDir = destDir ; mHasRiskyPathChars = false ; java.lang.String path = destDir.getPath ( ) ; for ( int i = 0 , n = path.length ( ) ; i < n ; i ++ ) { char c = path.charAt ( i ) ; if ( com.android.tools.gradle.eclipse.ImportSummary.isRiskyPathChar ( c ) ) { mHasRiskyPathChars = true ; } } }
public final com.android.tools.perflib.heap.Instance findReference ( long id ) { for ( int i = 0 ; i < ( mHeaps.size ( ) ) ; i ++ ) { com.android.tools.perflib.heap.Instance instance = mHeaps.get ( i ) . getInstance ( id ) ; if ( instance != null ) { return instance ; } } return findClass ( id ) ; }
public void widgetDefaultSelected ( org.eclipse.swt.events.SelectionEvent e ) { java.lang.Object selection = ( ( org.eclipse.swt.widgets.TreeItem ) ( e.item ) ) . getData ( ) ; if ( selection instanceof com.android.ddmlib.IDevice ) { com.android.hierarchyviewerlib.ComponentRegistry.getDirector ( ) . loadPixelPerfectData ( ( ( com.android.ddmlib.IDevice ) ( selection ) ) ) ; } }
public boolean post ( java.lang.Runnable action ) { android.os.Handler handler ; android.view.View.AttachInfo attachInfo = mAttachInfo ; if ( attachInfo != null ) { handler = attachInfo.mHandler ; } else { android.view.ViewRootImpl.getRunQueue ( ) . post ( action ) ; return true ; } return handler.post ( action ) ; }
private static java.lang.String newClassName ( java.lang.String className , proguard.classfile.editor.Clazz referencedClass ) { if ( referencedClass == null ) { return className ; } java.lang.String newClassName = referencedClass.getName ( ) ; if ( ( className.charAt ( 0 ) ) == ( ClassConstants.TYPE_ARRAY ) ) { newClassName = ( ( className.substring ( 0 , ( ( className.indexOf ( ClassConstants.TYPE_CLASS_START ) ) + 1 ) ) ) + newClassName ) + ( ClassConstants.TYPE_CLASS_END ) ; } return newClassName ; }
public void unregisterForIccChanged ( android.os.Handler h ) { mIccChangedRegistrants.remove ( h ) ; }
public android.net.IpSecTransform buildTransportModeTransform ( @ android.annotation.NonNull java.net.InetAddress sourceAddress , @ android.annotation.NonNull android.net.IpSecManager.SecurityParameterIndex spi ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { com.android.internal.util.Preconditions.checkNotNull ( sourceAddress ) ; com.android.internal.util.Preconditions.checkNotNull ( spi ) ; if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setMode ( android.net.IpSecTransform.MODE_TRANSPORT ) ; mConfig.setSourceAddress ( sourceAddress.getHostAddress ( ) ) ; mConfig.setSpiResourceId ( spi.getResourceId ( ) ) ; return new android.net.IpSecTransform ( mContext , mConfig ) . activate ( ) ; }
public void write ( java.lang.String iface , android.net.IpConfiguration config ) { boolean modified ; synchronized ( mSync ) { if ( config == null ) { modified = ( mIpConfigurations.remove ( iface ) ) != null ; } else { android.net.IpConfiguration oldConfig = mIpConfigurations.put ( iface , config ) ; modified = ! ( config.equals ( oldConfig ) ) ; } if ( modified ) { mStore.writeIpConfigurations ( com.android.server.ethernet.EthernetConfigStore.ipConfigFile , mIpConfigurations ) ; } } }
private static java.lang.String getNativeLibraryDirectory ( android.content.Context appContext ) { android.content.pm.ApplicationInfo ai = appContext.getApplicationInfo ( ) ; if ( ( ( ( ai.flags ) & ( android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP ) ) != 0 ) || ( ( ( ai.flags ) & ( android.content.pm.ApplicationInfo.FLAG_SYSTEM ) ) == 0 ) ) { return ai.nativeLibraryDir ; } return "/system/lib/" ; }
protected void fetchIsimRecords ( ) { recordsRequested = true ; mFh.loadEFTransparent ( com.android.internal.telephony.IccConstants.EF_IMPI , obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimImpiLoaded ( ) ) ) ; ( recordsToLoad ) ++ ; mFh.loadEFLinearFixedAll ( com.android.internal.telephony.IccConstants.EF_IMPU , obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimImpuLoaded ( ) ) ) ; ( recordsToLoad ) ++ ; mFh.loadEFTransparent ( com.android.internal.telephony.IccConstants.EF_DOMAIN , obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimDomainLoaded ( ) ) ) ; ( recordsToLoad ) ++ ; log ( ( "fetchIsimRecords " + ( recordsToLoad ) ) ) ; }
public static void setMultiprocessEnabled ( boolean enabled ) { synchronized ( android.webkit.WebViewZygote.sLock ) { android.webkit.WebViewZygote.sMultiprocessEnabled = enabled ; final java.lang.String serviceName = android.webkit.WebViewZygote.getServiceNameLocked ( ) ; if ( serviceName == null ) return ; if ( enabled && ( ( android.webkit.WebViewZygote.sZygote ) == null ) ) { android.os.SystemService.start ( serviceName ) ; } else { android.os.SystemService.stop ( serviceName ) ; android.webkit.WebViewZygote.sZygote = null ; } } }
public void logrb ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.util.ResourceBundle bundle , java.lang.String msg , java.lang.Object ... params ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; if ( ( params != null ) && ( ( params.length ) != 0 ) ) { lr.setParameters ( params ) ; } doLog ( lr , bundle ) ; }
public boolean canReportAsInvalidNumber ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CEQUINT : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return false ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo peopleApiInfo = phoneLookupInfo.getPeopleApiInfo ( ) ; return ( ( peopleApiInfo.getInfoType ( ) ) != ( com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType.UNKNOWN ) ) && ( ! ( peopleApiInfo.getPersonId ( ) . isEmpty ( ) ) ) ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public void testInterfaceCountersUdp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IPV4_LOOPBACK , crypt , auth , null , true , 1000 , false ) ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newAddon ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision , @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IdDisplay addonVendor , @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IdDisplay addonName ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_ADDONS ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; p.mVendor = addonVendor ; p.mNameIdDisplay = addonName ; return p ; }
private void enforceSystemUiPermission ( java.lang.String action , int pid , int uid ) { if ( isCurrentVolumeController ( uid ) ) return ; if ( ( getContext ( ) . checkPermission ( android.Manifest.permission.STATUS_BAR_SERVICE , pid , uid ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( ( "Only system ui may " + action ) ) ; } }
protected boolean cleanUpAllConnections ( boolean tearDown , java.lang.String reason ) { if ( DBG ) log ( ( ( ( "cleanUpAllConnections: tearDown=" + tearDown ) + " reason=" ) + reason ) ) ; boolean didDisconnect = false ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts.values ( ) ) { if ( ( apnContext.isDisconnected ( ) ) == false ) didDisconnect = true ; apnContext.setReason ( reason ) ; cleanUpConnection ( tearDown , apnContext ) ; } stopNetStatPoll ( ) ; stopDataStallAlarm ( ) ; mRequestedApnType = com.android.internal.telephony.PhoneConstants.APN_TYPE_DEFAULT ; return didDisconnect ; }
private java.lang.String getIccStateIntentString ( com.android.internal.telephony.IccCardConstants.State state ) { switch ( state ) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT ; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY ; case NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_NOT_READY ; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case CARD_IO_ERROR : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR ; case CARD_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_RESTRICTED ; case LOADED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOADED ; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_UNKNOWN ; } }
public void onClick ( android.view.View view ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.deleteButtonListener" , "delete voicemailUri %s" , voicemailUri.toString ( ) ) ; android.content.ContentValues contentValues = new android.content.ContentValues ( ) ; contentValues.put ( "has_content" , 0 ) ; try { getContext ( ) . getContentResolver ( ) . update ( voicemailUri , contentValues , "type = 4" , null ) ; } catch ( java.lang.Exception e ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.deleteButtonListener" , "update has content of voicemailUri %s caused an error: %s" , voicemailUri.toString ( ) , e.toString ( ) ) ; } }
protected static void printUsage ( @ javax.annotation.Nonnull java.io.PrintStream printStream ) { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser ( new com.android.jill.Options ( ) , org.kohsuke.args4j.ParserProperties.defaults ( ) . withUsageWidth ( 100 ) ) ; printStream.println ( ( "Usage: <options> <class files to be transformed contained recursively" + " in directories or in a zip/jar file>" ) ) ; printStream.println ( ) ; printStream.println ( "Options:" ) ; parser.printUsage ( printStream ) ; }
public android.net.Uri insert ( android.net.Uri uri , android.content.ContentValues initialValues ) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match ( uri ) ; java.util.ArrayList < java.lang.Long > notifyRowIds = new java.util.ArrayList < java.lang.Long > ( ) ; android.net.Uri newUri = insertInternal ( uri , match , initialValues , notifyRowIds ) ; if ( uri != null ) { if ( uri.toString ( ) . startsWith ( "content://media/external/" ) ) { notifyMtp ( notifyRowIds ) ; } } if ( ( newUri != null ) && ( match != ( com.android.providers.media.MediaProvider.MTP_OBJECTS ) ) ) { getContext ( ) . getContentResolver ( ) . notifyChange ( uri , null ) ; } return newUri ; }
public void testGetValues015_ThreadGroupAsObject ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value oldValue = getStaticFieldValue ( classID , "THREAD_GROUP_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( StackTrace002Debuggee.THREAD_GROUP_AS_OBJECT_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo suspensionMethodInfo = tester.addTestMethod ( "breakpointObject" ) ; suspensionMethodInfo.addVariable ( "param" , oldValue ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointObject" ) ; methodInfo.addVariable ( "param" , oldValue ) ; runStackFrameTest ( tester , suspensionMethodInfo ) ; }
java.util.Map < K , java.util.Collection < V > > createAsMap ( ) { return new com.google.common.collect.Multimaps.AsMap < K , V > ( this ) ; }
void enableVerboseLogging ( int verbose ) { if ( verbose > 0 ) { com.android.server.wifi.WifiNative.DBG = true ; } else { com.android.server.wifi.WifiNative.DBG = false ; } if ( ( mWificondControl ) != null ) { mWificondControl.enableVerboseLogging ( ( verbose > 0 ? true : false ) ) ; } }
public void testAesCbcHmacSha256Udp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public void testE2 ( ) { loadAndRun ( "dot.junit.opcodes.aput_boolean.d.T_aput_boolean_1" , java.lang.NullPointerException.class , null , 2 , true ) ; }
int doTransfer ( java.io.FileDescriptor fd ) throws java.io.IOException { try { if ( ( direction ) == ( java.nio.IoVec.Direction.READV ) ) { int result = Libcore.os.readv ( fd , ioBuffers , offsets , byteCounts ) ; if ( result == 0 ) { result = - 1 ; } return result ; } else { return Libcore.os.writev ( fd , ioBuffers , offsets , byteCounts ) ; } } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } }
public void rebootRecoveryWithCommand ( java.lang.String command , boolean update ) { if ( com.android.server.RecoverySystemService.DEBUG ) android.util.Slog.d ( com.android.server.RecoverySystemService.TAG , ( ( "rebootRecoveryWithCommand: [" + command ) + "]" ) ) ; synchronized ( com.android.server.RecoverySystemService.sRequestLock ) { if ( ! ( setupOrClearBcb ( true , command ) ) ) { return ; } android.os.PowerManager pm = ( ( android.os.PowerManager ) ( mContext.getSystemService ( Context.POWER_SERVICE ) ) ) ; pm.reboot ( ( update ? android.os.PowerManager.REBOOT_RECOVERY_UPDATE : android.os.PowerManager.REBOOT_RECOVERY ) ) ; } }
void flushBatchResults ( int scannerId ) { logd ( ( "flushPendingBatchResults - scannerId = " + scannerId ) ) ; if ( ( mBatchScanParms.fullScanscannerId ) != ( - 1 ) ) { resetCountDownLatch ( ) ; gattClientReadScanReportsNative ( mBatchScanParms.fullScanscannerId , com.android.bluetooth.gatt.ScanManager.SCAN_RESULT_TYPE_FULL ) ; waitForCallback ( ) ; } if ( ( mBatchScanParms.truncatedScanscannerId ) != ( - 1 ) ) { resetCountDownLatch ( ) ; gattClientReadScanReportsNative ( mBatchScanParms.truncatedScanscannerId , com.android.bluetooth.gatt.ScanManager.SCAN_RESULT_TYPE_TRUNCATED ) ; waitForCallback ( ) ; } setBatchAlarm ( ) ; }
public void onRangingFailure ( int rangingId , int reason , java.lang.String description ) { if ( android.net.wifi.aware.WifiAwareManager.VDBG ) { android.util.Log.v ( android.net.wifi.aware.WifiAwareManager.TAG , ( ( ( ( ( "onRangingSuccess: rangingId=" + rangingId ) + ", reason=" ) + reason ) + ", description=" ) + description ) ) ; } android.os.Message msg = mHandler.obtainMessage ( android.net.wifi.aware.WifiAwareManager.WifiAwareEventCallbackProxy.CALLBACK_RANGING_FAILURE ) ; msg.arg1 = rangingId ; msg.arg2 = reason ; msg.obj = description ; mHandler.sendMessage ( msg ) ; }
public boolean canUpgradeToRttCall ( ) { if ( ! ( isPhoneAccountRttCapable ( ) ) ) { return false ; } if ( isActiveRttCall ( ) ) { return false ; } if ( isVideoCall ( ) ) { return false ; } if ( isConferenceCall ( ) ) { return false ; } if ( com.android.incallui.call.CallList.getInstance ( ) . hasActiveRttCall ( ) ) { return false ; } return true ; }
private java.lang.String prepareProgressString ( java.lang.String progressMessage ) { return com.google.gct.testing.CloudTestingUtils.shouldShowProgressTimestamps ( ) ? ( ( ( progressMessage.substring ( 0 , ( ( progressMessage.length ( ) ) - 1 ) ) ) + "\t" ) + ( java.lang.System.currentTimeMillis ( ) ) ) + "\n" : progressMessage ; }
private vogar.tasks.Task createCreateDexJarTask ( vogar.Classpath classpath , java.io.File classpathElement , java.lang.String name , vogar.Action action , java.io.File localDex , java.io.File localTempDir ) { vogar.tasks.Task dex ; if ( ( run.toolchain ) == ( vogar.Toolchain.JACK ) ) { dex = new vogar.android.JackDexTask ( run , classpath , run.benchmark , name , classpathElement , action , localDex ) ; } else { dex = new vogar.android.DexTask ( run.androidSdk , classpath , run.benchmark , name , classpathElement , action , localDex , localTempDir , run.multidex ) ; } return dex ; }
public static void startMethodTracing ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags ) { if ( fd == null ) { throw new java.lang.NullPointerException ( "fd == null" ) ; } dalvik.system.VMDebug.startMethodTracingFd ( traceFileName , fd , dalvik.system.VMDebug.checkBufferSize ( bufferSize ) , flags ) ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_small_struct s = new com.android.rs.test.ScriptC_small_struct ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.forEach_setStruct ( A ) ; s.forEach_setArrayOfStruct ( B ) ; s.invoke_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
public com.android.sched.util.file.Directory checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) ; } catch ( com.android.sched.util.file.CannotCreateFileException | com.android.sched.util.file.NotDirectoryException | com.android.sched.util.file.WrongPermissionException | com.android.sched.util.file.CannotChangePermissionException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.FileAlreadyExistsException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public boolean simAuthResponse ( int id , java.lang.String type , java.lang.String response ) { if ( com.android.server.wifi.WifiNative.SIM_AUTH_RESP_TYPE_GSM_AUTH.equals ( type ) ) { return mSupplicantStaIfaceHal.sendCurrentNetworkEapSimGsmAuthResponse ( response ) ; } else if ( com.android.server.wifi.WifiNative.SIM_AUTH_RESP_TYPE_UMTS_AUTH.equals ( type ) ) { return mSupplicantStaIfaceHal.sendCurrentNetworkEapSimUmtsAuthResponse ( response ) ; } else if ( com.android.server.wifi.WifiNative.SIM_AUTH_RESP_TYPE_UMTS_AUTS.equals ( type ) ) { return mSupplicantStaIfaceHal.sendCurrentNetworkEapSimUmtsAutsResponse ( response ) ; } else { return false ; } }
public com.android.jack.cfg.ControlFlowGraph getCfg ( ) { try ( com.android.sched.util.log.Event optEvent = tracer.open ( JackEventType.REMOVE_DEAD_CODE ) ) { tracer.getStatistic ( com.android.jack.cfg.CfgBuilder.CREATED_BASIC_BLOCK ) . incValue ( ( ( blocks.size ( ) ) + 1 ) ) ; removeUnaccessibleNode ( blocks , entryBlock , exitBlock , basicBlockId ) ; } return new com.android.jack.cfg.ControlFlowGraph ( method , basicBlockId , entryBlock , exitBlock , blocks ) ; }
private static java.util.List < java.lang.String > listDisplayNames ( java.util.List < com.android.sdklib.devices.Device > devices ) { if ( devices == null ) return null ; java.util.List < java.lang.String > names = new java.util.ArrayList < java.lang.String > ( ) ; for ( com.android.sdklib.devices.Device d : devices ) { names.add ( com.android.sdklib.devices.DeviceManagerTest.listDisplayName ( d ) ) ; } return names ; }
public void testFiveCount_E ( ) throws java.lang.Exception { assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "E" ) ) ; assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "EE" ) ) ; assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "EEE" ) ) ; assertEquals ( "Thursday" , formatDateUtc ( java.util.Locale.ENGLISH , "EEEE" ) ) ; assertEquals ( "T" , formatDateUtc ( java.util.Locale.ENGLISH , "EEEEE" ) ) ; }
protected void run ( @ javax.annotation.Nonnull java.util.List < java.lang.String > commandLine ) { com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile ( commandLine.toArray ( new java.lang.String [ commandLine.size ( ) ] ) ) ; exec.setErr ( errRedirectStream ) ; exec.setOut ( outRedirectStream ) ; exec.setVerbose ( isVerbose ) ; try { if ( ( exec.run ( ) ) != 0 ) { throw new java.lang.RuntimeException ( "Jack compiler exited with an error" ) ; } } catch ( com.android.jack.test.util.ExecFileException e ) { throw new java.lang.RuntimeException ( "An error occurred while running Jack" , e ) ; } }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { java.lang.String v = org.conscrypt.NativeCrypto.SSL_SESSION_get_version ( session ) ; assertTrue ( StandardNames.SSL_SOCKET_PROTOCOLS.contains ( v ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void setRadioPower ( boolean on , android.os.Message result ) { if ( mIsRadioPowerFailResponse ) { resultFail ( result , null , new java.lang.RuntimeException ( "setRadioPower failed!" ) ) ; return ; } if ( on ) { setRadioState ( RadioState.RADIO_ON ) ; } else { setRadioState ( RadioState.RADIO_OFF ) ; } resultSuccess ( result , null ) ; }
public boolean containsValue ( @ javax.annotation.Nullable java.lang.Object value ) { return values ( ) . contains ( value ) ; }
public void testRelativeLayoutCompat ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( RtlDetector.COMPAT ) ; assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "res/layout/relative.xml:10: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_alignParentLeft=\"true\" [RtlCompat]\n" + " android:layout_alignParentStart=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:13: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_marginLeft=\"40dip\" [RtlCompat]\n" ) + " android:layout_marginStart=\"40dip\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:24: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_marginLeft=\"40dip\" [RtlCompat]\n" ) + " android:layout_marginStart=\"40dip\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:26: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_toRightOf=\"@id/loading_progress\" [RtlCompat]\n" ) + " android:layout_toEndOf=\"@id/loading_progress\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:29: Error: To support older versions than API 17 (project specifies 5) you should also add android:paddingRight=\"120dip\" [RtlCompat]\n" ) + " android:paddingEnd=\"120dip\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:37: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_alignParentLeft=\"true\" [RtlCompat]\n" ) + " android:layout_alignParentStart=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:38: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_alignRight=\"@id/text\" [RtlCompat]\n" ) + " android:layout_alignEnd=\"@id/text\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:47: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_alignLeft=\"@id/cancel\" [RtlCompat]\n" ) + " android:layout_alignStart=\"@id/cancel\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:48: Error: To support older versions than API 17 (project specifies 5) you should also add android:layout_alignRight=\"@id/cancel\" [RtlCompat]\n" ) + " android:layout_alignEnd=\"@id/cancel\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "9 errors, 0 warnings\n" ) ) , lintProject ( "rtl/project-api17.properties=>project.properties" , "rtl/minsdk5targetsdk17.xml=>AndroidManifest.xml" , "rtl/relativeCompat.xml=>res/layout/relative.xml" ) ) ; }
public boolean matches ( com.android.voicemail.impl.CarrierIdentifier carrierIdentifier ) { if ( ! ( mccMnc ( ) . equals ( carrierIdentifier.mccMnc ( ) ) ) ) { return false ; } if ( gid1 ( ) . isPresent ( ) ) { if ( ! ( gid1 ( ) . get ( ) . equalsIgnoreCase ( carrierIdentifier.gid1 ( ) ) ) ) { return false ; } } return true ; }
public static void checkImageColor ( java.io.File imageFile , int expectedColor ) throws java.io.IOException { org.junit.Assert.assertTrue ( ( ( "File '" + ( imageFile.getAbsolutePath ( ) ) ) + "' does not exist." ) , imageFile.isFile ( ) ) ; java.awt.image.BufferedImage image = javax.imageio.ImageIO.read ( imageFile ) ; int rgb = image.getRGB ( 0 , 0 ) ; org.junit.Assert.assertEquals ( java.lang.String.format ( "Expected: 0x%08X, actual: 0x%08X for file %s" , expectedColor , rgb , imageFile ) , expectedColor , rgb ) ; }
public void test_unmodifiableList_sort ( ) { try { java.util.Collections.unmodifiableList ( new java.util.ArrayList < > ( ) ) . sort ( ( k1 , k2 ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } try { java.util.ArrayList l = new java.util.ArrayList ( ) ; l.add ( 1 ) ; l.add ( 2 ) ; java.util.Collections.unmodifiableList ( l ) . sort ( ( k1 , k2 ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
private com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker getOrCreateRFICMarker ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface accessorClass ) { com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker marker = accessorClass.getMarker ( com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker.class ) ; if ( marker == null ) { marker = new com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker ( ) ; accessorClass.addMarker ( marker ) ; } return marker ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JLockBlockElement element ) { addInstruction ( new com.android.jack.dx.rop.code.ThrowingInsn ( com.android.jack.dx.rop.code.Rops.MONITOR_ENTER , com.android.jack.backend.dex.rop.RopHelper.getSourcePosition ( element.getSourceInfo ( ) ) , com.android.jack.dx.rop.code.RegisterSpecList.make ( getRegisterSpec ( element.getExpression ( ) ) ) , getCatchTypes ( ) ) ) ; return false ; }
public static long determineUserType ( java.lang.Long directoryId , java.lang.Long contactId ) { if ( directoryId != null ) { return com.android.dialer.common.cp2.DirectoryCompat.isEnterpriseDirectoryId ( directoryId ) ? com.android.contacts.common.ContactsUtils.USER_TYPE_WORK : com.android.contacts.common.ContactsUtils.USER_TYPE_CURRENT ; } if ( ( ( contactId != null ) && ( contactId != 0L ) ) && ( android.provider.ContactsContract.Contacts.isEnterpriseContactId ( contactId ) ) ) { return com.android.contacts.common.ContactsUtils.USER_TYPE_WORK ; } else { return com.android.contacts.common.ContactsUtils.USER_TYPE_CURRENT ; } }
public void createConfigFile ( ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog dialog = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog ( mConfigChooser.getShell ( ) , mEditedFile.getName ( ) , mConfigChooser.getConfiguration ( ) . getFullConfig ( ) ) ; if ( ( dialog.open ( ) ) != ( org.eclipse.jface.window.Window.OK ) ) { return ; } com.android.ide.common.resources.configuration.FolderConfiguration config = new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; dialog.getConfiguration ( config ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.CreateNewConfigJob job = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CreateNewConfigJob ( this , mEditedFile , config ) ; job.schedule ( ) ; }
public int hashCode ( ) { int result = 17 ; result = ( 31 * result ) + ( mSupport5gBand ? 1 : 0 ) ; result = ( 31 * result ) + ( mMasterPreference ) ; result = ( 31 * result ) + ( mClusterLow ) ; result = ( 31 * result ) + ( mClusterHigh ) ; result = ( 31 * result ) + ( java.util.Arrays.hashCode ( mDiscoveryWindowInterval ) ) ; return result ; }
private com.android.jack.ir.ast.JExpressionStatement makeRequestCall ( int lockIndex , com.android.jack.ir.sourceinfo.SourceInfo info ) { assert ( ( ( lockClass [ lockIndex ] ) != null ) && ( ( requestClass [ lockIndex ] ) != null ) ) && ( ( requestMethodId [ lockIndex ] ) != null ) ; return new com.android.jack.ir.ast.JExpressionStatement ( info , new com.android.jack.ir.ast.JMethodCall ( info , null , requestClass [ lockIndex ] , requestMethodId [ lockIndex ] , false ) ) ; }
public void setUp ( ) throws java.lang.Exception { logd ( "CarrierSignalAgentTest +Setup!" ) ; super . setUp ( getClass ( ) . getSimpleName ( ) ) ; mBundle = mContextFixture.getCarrierConfigBundle ( ) ; mCarrierSignalAgentHandler = new com.android.internal.telephony.CarrierSignalAgentTest.CarrierSignalAgentHandler ( getClass ( ) . getSimpleName ( ) ) ; mCarrierSignalAgentHandler.start ( ) ; waitUntilReady ( ) ; logd ( "CarrierSignalAgentTest -Setup!" ) ; }
public void bootAnimationComplete ( ) { final boolean callFinishBooting ; synchronized ( this ) { callFinishBooting = mCallFinishBooting ; mBootAnimationComplete = true ; } if ( callFinishBooting ) { android.os.Trace.traceBegin ( Trace.TRACE_TAG_ACTIVITY_MANAGER , "FinishBooting" ) ; finishBooting ( ) ; android.os.Trace.traceEnd ( Trace.TRACE_TAG_ACTIVITY_MANAGER ) ; } }
public static void main ( java.lang.String [ ] args ) { if ( Main.triggerArrayOOM ( ) ) { java.lang.System.out.println ( "NEW_ARRAY correctly threw OOME" ) ; } if ( Main.triggerInstanceOOM ( ) ) { java.lang.System.out.println ( "NEW_INSTANCE correctly threw OOME" ) ; } }
public void notifyVolumeControllerVisible ( final android.media.IVolumeController controller , boolean visible ) { enforceSelfOrSystemUI ( "notify about volume controller visibility" ) ; if ( ! ( mVolumeController.isSameBinder ( controller ) ) ) { return ; } mVolumeController.setVisible ( visible ) ; if ( android.media.AudioService.DEBUG_VOL ) android.util.Log.d ( android.media.AudioService.TAG , ( "Volume controller visible: " + visible ) ) ; }
public boolean addAll ( int index , java.util.Collection < ? extends E > collection ) { synchronized ( this ) { slice.checkPositionIndex ( index ) ; slice.checkConcurrentModification ( elements ) ; int oldSize = elements.length ; boolean result = this . addAll ( ( index + ( slice.from ) ) , collection ) ; slice = new java.util.concurrent.CopyOnWriteArrayList.Slice ( elements , slice.from , ( ( slice.to ) + ( ( elements.length ) - oldSize ) ) ) ; return result ; } }
public void visitReturnStatement ( com.intellij.psi.PsiReturnStatement statement ) { com.intellij.psi.PsiExpression returnValue = statement.getReturnValue ( ) ; if ( returnValue instanceof com.intellij.psi.PsiReference ) { com.intellij.psi.PsiElement resolved = ( ( com.intellij.psi.PsiReference ) ( returnValue ) ) . resolve ( ) ; if ( ( resolved != null ) && ( mVariables.contains ( resolved ) ) ) { mEscapes = true ; } } super . visitReturnStatement ( statement ) ; }
public com.google.common.util.concurrent.ListenableFuture < com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo.DialerBlockedNumberInfo > > getMostRecentInfo ( com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo.DialerBlockedNumberInfo > existingInfoMap ) { if ( com.android.dialer.blocking.FilteredNumberCompat.useNewFiltering ( appContext ) ) { return com.google.common.util.concurrent.Futures.immediateFuture ( existingInfoMap ) ; } com.android.dialer.common.LogUtil.enterBlock ( "DialerBlockedNumberPhoneLookup.getMostRecentPhoneLookupInfo" ) ; return executorService.submit ( ( ) -> queryNumbers ( existingInfoMap.keySet ( ) ) ) ; }
public void dumpHeap ( boolean managed , java.lang.String path , android.os.ParcelFileDescriptor fd ) { android.app.ActivityThread.DumpHeapData dhd = new android.app.ActivityThread.DumpHeapData ( ) ; dhd.path = path ; dhd.fd = fd ; sendMessage ( android.app.ActivityThread.H.DUMP_HEAP , dhd , ( managed ? 1 : 0 ) , 0 , true ) ; }
public void testInstall_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle1 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , "002" ) ; assertTrue ( installer.install ( bundle1.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; libcore.tzdata.update2.TimeZoneBundle bundle2 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , "001" ) ; assertFalse ( installer.install ( bundle2.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; }
public com.android.sched.util.file.Directory checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public org.jetbrains.plugins.gradle.service.project.ModelBuilder < ? extends org.gradle.tooling.model.idea.IdeaProject > getModelBuilder ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.externalSystem.model.task.ExternalSystemTaskId id , @ org.jetbrains.annotations.Nullable org.jetbrains.plugins.gradle.settings.GradleExecutionSettings settings , @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.gradle.service.project.ProjectConnection connection , @ org.jetbrains.annotations.NotNull com.intellij.openapi.externalSystem.model.task.ExternalSystemTaskNotificationListener listener , boolean downloadLibraries ) { return getModelBuilder ( ( downloadLibraries ? org.gradle.tooling.model.idea.IdeaProject.class : org.gradle.tooling.model.idea.BasicIdeaProject.class ) , id , settings , connection , listener , java.util.Collections.< java.lang.String > emptyList ( ) ) ; }
final void getUnchecked ( int pos , double [ ] dst , int dstOffset , int length ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } libcore.io.Memory.peekDoubleArray ( ix ( pos ) , dst , dstOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public void test_getFileStore ( ) throws java.io.IOException { try { provider.getFileStore ( filesSetup.getDataFilePath ( ) ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.SecurityException expected ) { } try { provider.getFileStore ( null ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.SecurityException expected ) { } }
private static java.lang.String getErrorMessage ( java.lang.String owner ) { if ( com.android.tools.lint.checks.CleanupDetector.FRAGMENT_MANAGER_CLS.equals ( owner ) ) { return "This transaction should be completed with a commit() call" ; } java.lang.String className = owner.substring ( ( ( owner.lastIndexOf ( '/' ) ) + 1 ) ) ; return java.lang.String.format ( "This %1$s should be recycled after use with #recycle()" , className ) ; }
public static void computeNan ( android.renderscript.cts.TestNan.ArgumentsUintFloat args ) { args.out = new android.renderscript.cts.Floaty ( java.lang.Float.NaN , 0 , 0 ) ; }
public boolean handlePinMmi ( java.lang.String dialString ) { com.android.internal.telephony.cdma.CdmaMmiCode mmi = com.android.internal.telephony.cdma.CdmaMmiCode.newFromDialString ( dialString , this ) ; if ( mmi == null ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Mmi is NULL!" ) ; return false ; } else if ( mmi.isPukCommand ( ) ) { mPendingMmis.add ( mmi ) ; mMmiRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , mmi , null ) ) ; mmi.processCode ( ) ; return true ; } android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Unrecognized mmi!" ) ; return false ; }
private static boolean removeOccurrencesImpl ( com.google.common.collect.Multiset < ? > multisetToModify , java.lang.Iterable < ? > occurrencesToRemove ) { com.google.common.base.Preconditions.checkNotNull ( multisetToModify ) ; com.google.common.base.Preconditions.checkNotNull ( occurrencesToRemove ) ; boolean changed = false ; for ( java.lang.Object o : occurrencesToRemove ) { changed |= multisetToModify.remove ( o ) ; } return changed ; }
void enableVerboseLogging ( int verbose ) { if ( verbose > 0 ) { com.android.server.wifi.WifiNative.DBG = true ; } else { com.android.server.wifi.WifiNative.DBG = false ; } if ( ( mWificondControl ) != null ) { mWificondControl.enableVerboseLogging ( ( verbose > 0 ? true : false ) ) ; } if ( ( mSupplicantStaIfaceHal ) != null ) { mSupplicantStaIfaceHal.enableVerboseLogging ( ( verbose > 0 ) ) ; } if ( ( mWifiVendorHal ) != null ) { mWifiVendorHal.enableVerboseLogging ( ( verbose > 0 ) ) ; } }
public void testGetProperty_volatile ( ) throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock.createMock ( com.android.ddmlib.IDevice.class ) ; com.android.ddmlib.DeviceTest.injectShellResponse ( mockDevice , "[dev.bootcomplete]: [0]\r\n" ) ; com.android.ddmlib.DeviceTest.injectShellResponse ( mockDevice , "[dev.bootcomplete]: [1]\r\n" ) ; org.easymock.EasyMock.replay ( mockDevice ) ; com.android.ddmlib.PropertyFetcher fetcher = new com.android.ddmlib.PropertyFetcher ( mockDevice ) ; assertEquals ( "0" , fetcher.getProperty ( "dev.bootcomplete" ) . get ( ) ) ; assertEquals ( "1" , fetcher.getProperty ( "dev.bootcomplete" ) . get ( ) ) ; }
public void test_destroy ( ) { org.apache.harmony.tests.javax.security.auth.DestroyableTest.myDestroyable md = new org.apache.harmony.tests.javax.security.auth.DestroyableTest.myDestroyable ( ) ; try { assertFalse ( md.isDestroyed ( ) ) ; md.destroy ( ) ; assertTrue ( md.isDestroyed ( ) ) ; } catch ( java.lang.Exception e ) { fail ( ( "Unexpected exception " + e ) ) ; } }
public static com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences create ( ) { com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences p = new com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences ( ) ; com.android.ide.eclipse.adt.internal.preferences.AdtPrefs prefs = com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs ( ) ; p.useEclipseIndent = prefs.isUseEclipseIndent ( ) ; p.removeEmptyLines = prefs.isRemoveEmptyLines ( ) ; p.oneAttributeOnFirstLine = prefs.isOneAttributeOnFirstLine ( ) ; p.sortAttributes = prefs.getAttributeSort ( ) ; p.spaceBeforeClose = prefs.isSpaceBeforeClose ( ) ; return p ; }
protected void setBatterySaverMode ( boolean enabled ) throws java.lang.Exception { android.util.Log.i ( com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG , ( "Setting Battery Saver Mode to " + enabled ) ) ; if ( enabled ) { turnBatteryOff ( ) ; executeSilentShellCommand ( "cmd battery unplug" ) ; executeSilentShellCommand ( "settings put global low_power 1" ) ; } else { executeSilentShellCommand ( "settings put global low_power 0" ) ; turnBatteryOn ( ) ; } }
public boolean setPairingConfirmation ( boolean confirm ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( service == null ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot set pairing confirmation" ) ; return false ; } try { return service.setPairingConfirmation ( this , confirm ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public java.nio.IntBuffer put ( java.nio.IntBuffer src ) { if ( src == ( this ) ) throw new java.lang.IllegalArgumentException ( ) ; if ( isReadOnly ( ) ) throw new java.nio.ReadOnlyBufferException ( ) ; int n = src.remaining ( ) ; if ( n > ( remaining ( ) ) ) throw new java.nio.BufferOverflowException ( ) ; for ( int i = 0 ; i < n ; i ++ ) put ( src.get ( ) ) ; return this ; }
protected void buildJackCall ( @ javax.annotation.Nonnull java.util.List < java.lang.String > commandLine ) { if ( jackPrebuilt.getName ( ) . endsWith ( ".jar" ) ) { boolean assertEnable = false ; assert true == ( assertEnable = true ) ; commandLine.add ( "java" ) ; commandLine.add ( ( assertEnable ? "-ea" : "-da" ) ) ; commandLine.add ( "-jar" ) ; } commandLine.add ( jackPrebuilt.getAbsolutePath ( ) ) ; }
private static com.android.compatibility.common.util.IInvocationResult findResult ( java.io.File resultsDir , java.lang.Integer sessionId , java.lang.Boolean useChecksum ) throws java.io.FileNotFoundException { if ( sessionId < 0 ) { throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "Invalid session id [%d] " , sessionId ) ) ; } java.util.List < com.android.compatibility.common.util.IInvocationResult > results = com.android.compatibility.common.util.ResultHandler.getResults ( resultsDir , useChecksum ) ; if ( ( results == null ) || ( sessionId >= ( results.size ( ) ) ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "Could not find session [%d]" , sessionId ) ) ; } return results.get ( sessionId ) ; }
public void TestBig ( ) { android.icu.text.CompactDecimalFormat cdf = android.icu.text.CompactDecimalFormat.getInstance ( ULocale.ENGLISH , CompactStyle.LONG ) ; java.math.BigInteger source_int = new java.math.BigInteger ( "31415926535897932384626433" ) ; assertEquals ( "BigInteger format wrong: " , "31,000,000,000,000 trillion" , cdf.format ( source_int ) ) ; java.math.BigDecimal source_dec = new java.math.BigDecimal ( source_int ) ; assertEquals ( "BigDecimal format wrong: " , "31,000,000,000,000 trillion" , cdf.format ( source_dec ) ) ; }
public static lombok.ast.Node getCompilationUnit ( java.lang.String javaSource ) { com.android.tools.lint.detector.api.LintUtilsTest.TestContext context = new com.android.tools.lint.detector.api.LintUtilsTest.TestContext ( javaSource , new java.io.File ( "test" ) ) ; com.android.tools.lint.client.api.IJavaParser parser = new com.android.tools.lint.EcjParser ( new com.android.tools.lint.LintCliClient ( ) ) ; lombok.ast.Node compilationUnit = parser.parseJava ( context ) ; assertNotNull ( javaSource , compilationUnit ) ; return compilationUnit ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mContext = getActivity ( ) ; }
public void createMockableJar ( ) throws java.io.IOException { java.io.File outputFile = getOutputFile ( ) ; if ( outputFile.exists ( ) ) { return ; } com.android.builder.testing.MockableJarGenerator generator = new com.android.builder.testing.MockableJarGenerator ( getReturnDefaultValues ( ) ) ; getLogger ( ) . info ( java.lang.String.format ( "Creating %s from %s." , outputFile.getAbsolutePath ( ) , getAndroidJar ( ) . getAbsolutePath ( ) ) ) ; generator.createMockableJar ( getAndroidJar ( ) , outputFile ) ; }
void registerTimeout ( ) { android.telecom.Log.d ( this , "registerTimeout" ) ; mIsRegistered = true ; long timeoutLengthMillis = getTimeoutLengthMillis ( ) ; if ( timeoutLengthMillis <= 0 ) { android.telecom.Log.d ( this , "registerTimeout, timeout set to %d, skipping" , timeoutLengthMillis ) ; } else { mHandler.postDelayed ( prepare ( ) , timeoutLengthMillis ) ; } }
public void testEndCallWithRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.RINGING ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( com.android.server.telecom.tests.TelecomServiceImplTest.TEST_PACKAGE ) ) ; org.mockito.Mockito.verify ( call ) . reject ( org.mockito.Matchers.eq ( false ) , org.mockito.Matchers.isNull ( ) , org.mockito.Matchers.eq ( com.android.server.telecom.tests.TelecomServiceImplTest.TEST_PACKAGE ) ) ; }
private void initFromIntent ( android.content.Intent intent ) { if ( intent != null ) { mTextMsg = intent.getParcelableExtra ( "TEXT" ) ; mSlotId = intent.getIntExtra ( StkAppService.SLOT_ID , ( - 1 ) ) ; } else { finish ( ) ; } com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkDialogActivity.LOG_TAG , ( ( ( "initFromIntent - [" + ( android.os.Build.IS_DEBUGGABLE ? mTextMsg : "********" ) ) + "], slot id: " ) + ( mSlotId ) ) ) ; }
public static java.security.Signature getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { if ( algorithm.equalsIgnoreCase ( java.security.Signature.RSA_SIGNATURE ) ) { if ( provider == null ) { throw new java.lang.IllegalArgumentException ( "missing provider" ) ; } return java.security.Signature.getInstanceRSA ( provider ) ; } sun.security.jca.Providers.checkBouncyCastleDeprecation ( provider , "Signature" , algorithm ) ; sun.security.jca.GetInstance.Instance instance = sun.security.jca.GetInstance.getInstance ( "Signature" , java.security.SignatureSpi.class , algorithm , provider ) ; return java.security.Signature.getInstance ( instance , algorithm ) ; }
public java.lang.String getAttributeValue ( java.lang.String namespace , java.lang.String localName ) { if ( ( localName.equals ( com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.ATTR_LAYOUT ) ) && ( ( mFragmentLayout ) != null ) ) { return mFragmentLayout ; } java.lang.String value = super . getAttributeValue ( namespace , localName ) ; if ( ( ( com.android.ide.common.layout.LayoutConstants.VALUE_MATCH_PARENT.equals ( value ) ) && ( ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH.equals ( localName ) ) || ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT.equals ( localName ) ) ) ) && ( SdkConstants.NS_RESOURCES.equals ( namespace ) ) ) { return com.android.ide.common.layout.LayoutConstants.VALUE_FILL_PARENT ; } return value ; }
private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream.defaultReadObject ( ) ; if ( ( serialVersionOnStream ) < 1 ) { capitalizationSetting = DisplayContext.CAPITALIZATION_NONE ; } if ( ( booleanAttributes ) == null ) { booleanAttributes = java.util.EnumSet.allOf ( android.icu.text.DateFormat.BooleanAttribute.class ) ; } serialVersionOnStream = android.icu.text.DateFormat.currentSerialVersion ; }
public static boolean saveResourceProperty ( org.eclipse.core.resources.IResource resource , java.lang.String propertyName , org.eclipse.core.resources.IResource value ) { if ( value != null ) { org.eclipse.core.runtime.IPath iPath = value.getFullPath ( ) ; return com.android.ide.eclipse.adt.internal.project.ProjectHelper.saveStringProperty ( resource , propertyName , iPath.toString ( ) ) ; } return com.android.ide.eclipse.adt.internal.project.ProjectHelper.saveStringProperty ( resource , propertyName , "" ) ; }
public synchronized void tearDown ( com.android.tradefed.invoker.IInvocationContext context , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { -- ( mNumOfInstances ) ; if ( ( mNumOfInstances ) > 0 ) { return ; } if ( ( ( mVenvDir ) != null ) && ( mIsDirCreator ) ) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete ( mVenvDir.toPath ( ) ) ; com.android.tradefed.log.LogUtil.CLog.i ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; } catch ( java.io.IOException exception ) { com.android.tradefed.log.LogUtil.CLog.e ( "Failed to delete %s: %s" , mVenvDir , exception ) ; } mVenvDir = null ; } }
private static libcore.tzdata.update2.tools.TimeZoneBundleBuilder createValidTimeZoneBundleBuilder ( java.lang.String rulesVersion , java.lang.String androidRevision ) throws java.lang.Exception { byte [ ] bionicTzData = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTzData ( rulesVersion ) ; byte [ ] icuData = new byte [ ] { 'a' } ; return new libcore.tzdata.update2.tools.TimeZoneBundleBuilder ( ) . setRulesVersion ( rulesVersion ) . setAndroidRevision ( androidRevision ) . setTzData ( bionicTzData ) . setIcuData ( icuData ) ; }
public void testDismissKeyguard ( ) throws java.lang.Exception { if ( ! ( isHandheld ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "DismissKeyguardActivity" ) ; enterAndConfirmLockCredential ( ) ; mAmWmState.waitForKeyguardGone ( mDevice ) ; assertKeyguardGone ( ) ; mAmWmState.assertVisibility ( "DismissKeyguardActivity" , true ) ; }
private com.android.bluetooth.hfp.HeadsetService getService ( ) { final com.android.bluetooth.hfp.HeadsetService service = mService ; if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( service ) ) ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , "Headset call not allowed for non-active user" ) ; return null ; } if ( service == null ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , "Service is null" ) ; return null ; } if ( ! ( service.isAlive ( ) ) ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , "Service is not alive" ) ; return null ; } return service ; }
public void libToExe ( @ javax.annotation.Nonnull java.io.File [ ] in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception { try { if ( ( in.length ) > 1 ) { throw new java.lang.AssertionError ( "Not yet supported" ) ; } for ( java.io.File lib : in ) { compileWithDx ( in [ 0 ] , out , zipFile ) ; } } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( "Legacy toolchain exited with an error" , e ) ; } }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( "ConfigRequest [mSupport5gBand=" + ( mSupport5gBand ) ) + ", mMasterPreference=" ) + ( mMasterPreference ) ) + ", mClusterLow=" ) + ( mClusterLow ) ) + ", mClusterHigh=" ) + ( mClusterHigh ) ) + ", mDiscoveryWindowInterval=" ) + ( java.util.Arrays.toString ( mDiscoveryWindowInterval ) ) ) + "]" ; }
private static int openDexFile ( java.lang.String sourceName , java.lang.String outputName , int flags ) throws java.io.IOException { return dalvik.system.DexFile.openDexFileNative ( new java.io.File ( sourceName ) . getCanonicalPath ( ) , ( outputName == null ? null : new java.io.File ( outputName ) . getCanonicalPath ( ) ) , flags ) ; }
boolean isCompatible ( com.android.tools.lint.checks.DuplicateIdDetector.Layout from , com.android.tools.lint.checks.DuplicateIdDetector.Layout to ) { java.io.File fromFolder = from.mFile.getParentFile ( ) ; java.io.File toFolder = to.mFile.getParentFile ( ) ; if ( fromFolder.equals ( toFolder ) ) { return true ; } java.lang.Iterable < java.lang.String > fromQualifiers = com.android.ide.common.resources.configuration.FolderConfiguration.QUALIFIER_SPLITTER.split ( fromFolder.getName ( ) ) ; java.lang.Iterable < java.lang.String > toQualifiers = com.android.ide.common.resources.configuration.FolderConfiguration.QUALIFIER_SPLITTER.split ( toFolder.getName ( ) ) ; return ( isPortrait ( fromQualifiers ) ) == ( isPortrait ( toQualifiers ) ) ; }
boolean checkServiceExists ( java.util.UUID uuid , int handle ) { for ( com.android.bluetooth.gatt.HandleMap.Entry entry : mEntries ) { if ( ( ( ( entry.type ) == ( com.android.bluetooth.gatt.HandleMap.TYPE_SERVICE ) ) && ( ( entry.handle ) == handle ) ) && ( entry.uuid.equals ( uuid ) ) ) { return true ; } } return false ; }
public void insert ( @ javax.annotation.Nonnegative int index , @ javax.annotation.Nonnull com.android.sched.scheduler.ManagedRunnable runner ) { assert isConstraintValid ( index , runner ) ; index ++ ; plan.add ( index , new DecoratedRunner ( runner ) ) ; currentTagValidityIdx = java.lang.Math.min ( ( index - 1 ) , currentTagValidityIdx ) ; constraintTagValidityIdx = java.lang.Math.max ( ( index + 1 ) , constraintTagValidityIdx ) ; missingProductions.removeAll ( runner.getProductions ( ) ) ; }
private void handleHideBootMessage ( ) { synchronized ( mLock ) { if ( ! ( mKeyguardDrawnOnce ) ) { mBootMessageNeedsHiding = true ; return ; } } if ( ( mBootMsgDialog ) != null ) { if ( com.android.internal.policy.impl.PhoneWindowManager.DEBUG_WAKEUP ) android.util.Slog.d ( com.android.internal.policy.impl.PhoneWindowManager.TAG , "handleHideBootMessage: dismissing" ) ; mBootMsgDialog.dismiss ( ) ; mBootMsgDialog = null ; } }
public static void set ( @ android.annotation.NonNull java.lang.String key , @ android.annotation.Nullable java.lang.String val ) { if ( ( ( val != null ) && ( ! ( val.startsWith ( "ro." ) ) ) ) && ( ( val.length ( ) ) > ( android.os.SystemProperties.PROP_VALUE_MAX ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( "value of system property '" + key ) + "' is longer than " ) + ( android.os.SystemProperties.PROP_VALUE_MAX ) ) + " characters: " ) + val ) ) ; } if ( android.os.SystemProperties.TRACK_KEY_ACCESS ) android.os.SystemProperties.onKeyAccess ( key ) ; android.os.SystemProperties.native_set ( key , val ) ; }
public void setConnectionProperties ( java.lang.String callId , int connectionProperties , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( "CSW.sCP" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setConnectionProperties %s %d" , callId , connectionProperties ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setConnectionProperties ( connectionProperties ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void testIpManagerEventSerialization ( ) { android.net.ConnectivityMetricsEvent ev = com.android.server.connectivity.MetricsTestUtil.describeIpEvent ( com.android.server.connectivity.MetricsTestUtil.aType ( android.net.metrics.IpManagerEvent.class ) , com.android.server.connectivity.MetricsTestUtil.aString ( "wlan0" ) , com.android.server.connectivity.MetricsTestUtil.anInt ( IpManagerEvent.PROVISIONING_OK ) , com.android.server.connectivity.MetricsTestUtil.aLong ( 5678 ) ) ; java.lang.String want = com.android.server.connectivity.IpConnectivityEventBuilderTest.joinLines ( "dropped_events: 0" , "events <" , " ip_provisioning_event <" , " event_type: 1" , " if_name: \"wlan0\"" , " latency_ms: 5678" , " >" , " time_ms: 1" , ">" , "version: 2" ) ; com.android.server.connectivity.IpConnectivityEventBuilderTest.verifySerialization ( want , ev ) ; }
public void testSubscribeTerminatedFail ( ) throws org.json.JSONException { final int subscribeId = 167 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "subscribe_id" , subscribeId ) ; args.putInt ( "reason" , WifiNanNative.NAN_TERMINATED_REASON_FAILURE ) ; com.android.server.wifi.nan.WifiNanHalMock.callSubscribeTerminated ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mNanStateManager ) . onSessionTerminatedNotification ( subscribeId , WifiNanDiscoverySessionCallback.TERMINATE_REASON_FAIL , false ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNanStateManager ) ; }
public void testKeyPairGenerator_GenerateKeyPair_Encrypted_Success ( ) throws java.lang.Exception { setupPassword ( ) ; mGenerator.initialize ( new android.security.AndroidKeyPairGeneratorSpec.Builder ( getContext ( ) ) . setAlias ( android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1 ) . setSubject ( android.security.AndroidKeyPairGeneratorTest.TEST_DN_1 ) . setSerialNumber ( android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1 ) . setStartDate ( android.security.AndroidKeyPairGeneratorTest.NOW ) . setEndDate ( android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS ) . setEncryptionRequired ( ) . build ( ) ) ; final java.security.KeyPair pair = mGenerator.generateKeyPair ( ) ; assertNotNull ( "The KeyPair returned should not be null" , pair ) ; assertKeyPairCorrect ( pair , android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorTest.TEST_DN_1 , android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1 , android.security.AndroidKeyPairGeneratorTest.NOW , android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS ) ; }
private void startLaunchpadActivity ( java.lang.String action ) { android.app.cts.LaunchpadActivity.setCallingTest ( this ) ; synchronized ( this ) { mIntent.setAction ( action ) ; mFinished = false ; mIntent.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mContext.startActivity ( mIntent ) ; } }
public boolean accept ( com.android.sdklib.internal.avd.AvdInfo avd ) { com.android.sdklib.IAndroidTarget avdTarget = avd.getTarget ( ) ; if ( avdTarget == null ) { return true ; } if ( mProjectTarget.isPlatform ( ) ) { return avdTarget.getVersion ( ) . canRun ( mProjectMinApiVersion ) ; } return mProjectTarget.canRunOn ( avdTarget ) ; }
public void testPownF32 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ INPUTSIZE ] ; android.renderscript.cts.RSUtils.genRandomInts ( 305419896 , 32 , ( - 16 ) , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n1 ( nAlloc ) ; doF32 ( 7432909 , 16 ) ; }
protected void runWifiPrecondition ( com.android.tradefed.device.ITestDevice device ) throws com.android.tradefed.device.DeviceNotAvailableException , com.android.tradefed.targetprep.TargetSetupError { if ( mSkipWifiCheck ) { return ; } if ( ( mWifiSsid ) == null ) { if ( ! ( device.checkConnectivity ( ) ) ) { com.android.cts.tradefed.targetprep.HostPreconditionPreparer.printWarning ( ( "Device has no network connection, option --wifi-ssid was not " + "provided. Some CTS tests require an active network connection to pass" ) ) ; } } else { if ( ! ( device.connectToWifiNetworkIfNeeded ( mWifiSsid , mWifiPsk ) ) ) { com.android.cts.tradefed.targetprep.HostPreconditionPreparer.printWarning ( ( "Unable to establish network connection, some CTS tests require " + "an active network connection to pass" ) ) ; } } }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeInt ( mMatchRule ) ; dest.writeString ( mSubscriberId ) ; dest.writeStringArray ( mMatchSubscriberIds ) ; dest.writeString ( mNetworkId ) ; dest.writeInt ( mMetered ) ; dest.writeInt ( mRoaming ) ; dest.writeInt ( mDefaultNetwork ) ; }
synchronized void onConnectStateChangedFromNative ( android.bluetooth.BluetoothDevice device , int state ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( "onConnectStateChanged(): device=" + device ) + " state=" ) + state ) ) ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED ) ; msg.obj = device ; msg.arg1 = state ; mHandler.sendMessage ( msg ) ; }
public boolean hasChildren ( java.lang.Object element ) { if ( ( element instanceof com.android.hierarchyviewerlib.device.IHvDevice ) && ( mDoTreeViewStuff ) ) { com.android.hierarchyviewerlib.models.Window [ ] list = mModel.getWindows ( ( ( com.android.hierarchyviewerlib.device.IHvDevice ) ( element ) ) ) ; if ( list != null ) { return ( list.length ) != 0 ; } } return false ; }
public void onClose ( java.io.IOException e ) { try { final com.android.server.NativeDaemonEvent event = mConnector.execute ( "appfuse" , "unmount" , uid , pid , name ) ; } catch ( com.android.server.NativeDaemonConnectorException unmountException ) { android.util.Log.e ( com.android.server.MountService.TAG , "Failed to unmount appfuse." ) ; } }
public void setAudioRoute ( java.lang.String callId , int audioRoute , java.lang.String bluetoothAddress , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , "CSW.sAR" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setAudioRoute %s %s" , callId , android.telecom.CallAudioState.audioRouteToString ( audioRoute ) ) ; mCallsManager.setAudioRoute ( audioRoute , bluetoothAddress ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public java.lang.String getDisplayLanguage ( java.util.Locale locale ) { if ( languageCode.isEmpty ( ) ) { return "" ; } try { java.util.Locale.Builder.normalizeAndValidateLanguage ( languageCode ) ; } catch ( java.util.IllformedLocaleException ex ) { return languageCode ; } java.lang.String result = libcore.icu.ICU.getDisplayLanguage ( this , locale ) ; if ( result == null ) { result = libcore.icu.ICU.getDisplayLanguage ( this , java.util.Locale.getDefault ( ) ) ; } return result ; }
private static boolean isAndroid23 ( com.android.tools.lint.detector.api.Context context , int folderVersion ) { if ( com.android.tools.lint.checks.IconDetector.isAndroid30 ( context , folderVersion ) ) { return false ; } if ( ( folderVersion == 9 ) || ( folderVersion == 10 ) ) { return true ; } int minSdk = context.getMainProject ( ) . getMinSdk ( ) ; return ( minSdk == 9 ) || ( minSdk == 10 ) ; }
public void mergeConference ( ) { if ( ( mConnectionService ) == null ) { android.telecom.Log.w ( this , "merging conference calls without a connection service." ) ; } else if ( can ( Connection.CAPABILITY_MERGE_CONFERENCE ) ) { android.telecom.Log.addEvent ( this , LogUtils.Events.CONFERENCE_WITH ) ; mConnectionService.mergeConference ( this ) ; mWasConferencePreviouslyMerged = true ; } }
static Bitmap.NativeWrapper allocNativeStorage ( int width , int height ) { int nativeData ; synchronized ( Bitmap.class ) { nativeData = ( Bitmap.sSerial ) ++ ; } Bitmap.NativeWrapper wrapper = new Bitmap.NativeWrapper ( nativeData ) ; PhantomWrapper phan = new PhantomWrapper ( wrapper , Bitmap.sPhantomQueue , nativeData ) ; Bitmap.sPhantomList.add ( phan ) ; wrapper.mPhantomWrapper = phan ; return wrapper ; }
public void testLicenseIdNotFound ( ) throws java.lang.Exception { java.lang.String document = ( ( ( ( ( ( "<?xml version=\"1.0\"?>" + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.OPEN_TAG_REPO ) ) + "<r:license id=\"lic1\"> some license </r:license> " ) + "<r:tool> <r:uses-license ref=\"lic2\" /> <r:revision> <r:major>1</r:major> </r:revision> " ) + "<r:min-platform-tools-rev> <r:major>1</r:major> </r:min-platform-tools-rev> " ) + "<r:archives> <r:archive> <r:size>1</r:size> <r:checksum>2822ae37115ebf13412bbef91339ee0d9454525e</r:checksum> " ) + "<r:url>url</r:url> </r:archive> </r:archives> </r:tool>" ) + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.CLOSE_TAG_REPO ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; javax.xml.validation.Validator validator = getRepoValidator ( SdkRepoConstants.NS_LATEST_VERSION , null ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "cvc-id.1: There is no ID/IDREF binding for IDREF 'lic2'.*" , e.getMessage ( ) ) ; return ; } fail ( ) ; }
public void traverse ( @ javax.annotation.Nonnull com.android.sched.scheduler.ScheduleInstance < ? super com.android.sched.item.Component > schedule ) throws java.lang.Exception { schedule.process ( this ) ; for ( com.android.jack.ir.ast.JField field : fields ) { field.traverse ( schedule ) ; } for ( com.android.jack.ir.ast.JMethod method : methods ) { method.traverse ( schedule ) ; } for ( com.android.jack.ir.ast.JAnnotation annotation : annotations ) { annotation.traverse ( schedule ) ; } }
private boolean mode_array ( android.renderscript.RenderScript RS , com.android.rs.test.ScriptC_reduce s , int seed , int [ ] size ) { final byte [ ] inputArray = createInputArrayByte ( size [ 0 ] , seed ) ; final android.renderscript.Int2 javaResult = mode ( RS , inputArray ) ; final android.renderscript.Int2 rsResult = s.reduce_mode ( inputArray ) . get ( ) ; return result ( "mode" , new com.android.rs.test.UT_reduce.timing ( size [ 0 ] ) , javaResult , rsResult ) ; }
private java.lang.String getItemName ( int itemId ) { com.android.internal.telephony.cat.Menu menu = mCurrentCmd.getMenu ( ) ; if ( menu == null ) { return null ; } for ( com.android.internal.telephony.cat.Item item : menu.items ) { if ( ( item.id ) == itemId ) { return item.text ; } } return null ; }
public void readIntArray ( int [ ] dst , int dstOffset , int intCount ) { libcore.io.NioBufferIterator.checkDstBounds ( dstOffset , dst.length , intCount ) ; file.checkNotClosed ( ) ; final int byteCount = ( SizeOf.INT ) * intCount ; libcore.io.NioBufferIterator.checkReadBounds ( position , length , byteCount ) ; libcore.io.Memory.peekIntArray ( ( ( address ) + ( position ) ) , dst , dstOffset , intCount , swap ) ; position += byteCount ; }
public void setVerticalScrollbarOverlay ( final boolean overlay ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setVerticalScrollbarOverlay ( overlay ) ; } } ) ; return ; } mAwContents.setVerticalScrollbarOverlay ( overlay ) ; }
public void testBadSystemFile ( ) throws java.lang.Exception { java.io.File doesNotExist = new java.io.File ( testSystemTzDataDir , "doesNotExist" ) ; libcore.tzdata.update2.TimeZoneBundleInstaller brokenSystemInstaller = new libcore.tzdata.update2.TimeZoneBundleInstaller ( "TimeZoneBundleInstallerTest" , doesNotExist , testInstallDir ) ; libcore.tzdata.update2.TimeZoneBundle tzData = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , "001" ) ; assertFalse ( brokenSystemInstaller.install ( tzData.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public abstract java.lang.String getPatchVersion ( ) ;
public void testInstall_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneDistro distro1 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , 2 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_SUCCESS , installer.installWithErrorCode ( distro1.getBytes ( ) ) ) ; assertDistroInstalled ( distro1 ) ; libcore.tzdata.update2.TimeZoneDistro distro2 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer.installWithErrorCode ( distro2.getBytes ( ) ) ) ; assertDistroInstalled ( distro1 ) ; }
public void testProxyConnection ( ) throws java.lang.Throwable { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.setUpStoreProperties ( ) ; javax.net.ssl.SSLContext ctx = org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) ; javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier ( new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.ProxyConnectDispatcher proxyConnectDispatcher = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.ProxyConnectDispatcher ( false ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher getDispatcher = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.GET_METHOD , org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.OK_CODE ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.DelegatingDispatcher delegatingDispatcher = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.DelegatingDispatcher ( proxyConnectDispatcher , getDispatcher ) ; com.google.mockwebserver.MockWebServer proxyAndWebServer = org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.createProxyAndWebServer ( ctx , delegatingDispatcher ) ; java.net.URL proxyUrl = proxyAndWebServer.getUrl ( "/" ) ; java.net.InetSocketAddress proxyAddress = new java.net.InetSocketAddress ( "localhost" , proxyUrl.getPort ( ) ) ; java.net.URL url = new java.net.URL ( "https://requested.host:55556/requested.data" ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , proxyAddress ) ) ) ) ; connection.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.executeClientRequest ( connection , false ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.checkConnectionStateParameters ( connection , getDispatcher.getLastRequest ( ) ) ; connection.connect ( ) ; proxyAndWebServer.shutdown ( ) ; }
static void requestDeleteManagedProfile ( android.content.Context context ) { try { android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.managedprovisioning.ByodHelperActivity.ACTION_REMOVE_MANAGED_PROFILE ) ; intent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; context.startActivity ( intent ) ; } catch ( android.content.ActivityNotFoundException e ) { android.util.Log.d ( com.android.cts.verifier.managedprovisioning.Utils.TAG , "requestDeleteProfileOwner: ActivityNotFoundException" , e ) ; } }
public void setCurrency ( java.util.Currency currency ) { if ( ( currency != ( symbols.getCurrency ( ) ) ) || ( ! ( currency.getSymbol ( ) . equals ( symbols.getCurrencySymbol ( ) ) ) ) ) { symbols.setCurrency ( currency ) ; icuDecimalFormat.setDecimalFormatSymbols ( symbols.getIcuDecimalFormatSymbols ( ) ) ; icuDecimalFormat.setMinimumFractionDigits ( minimumFractionDigits ) ; icuDecimalFormat.setMaximumFractionDigits ( maximumFractionDigits ) ; } }
public java.lang.Object clone ( ) { try { java.text.Collator clone = ( ( java.text.Collator ) ( super . clone ( ) ) ) ; clone.icuColl = ( ( libcore.icu.RuleBasedCollatorICU ) ( icuColl.clone ( ) ) ) ; return clone ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.AssertionError ( e ) ; } }
public void testPullExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mCapabilities = android.telecom.Connection.CAPABILITY_CAN_PULL_CALL ; mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . pullExternalCall ( ids.mConnectionId ) ; }
public void parseBufferWithVenueNameLengthExceedMax ( ) throws java.lang.Exception { byte [ ] textData = new byte [ ( VenueNameElement.MAXIMUM_VENUE_NAME_LENGTH ) + 1 ] ; java.util.Arrays.fill ( textData , ( ( byte ) ( 'a' ) ) ) ; java.lang.String text = new java.lang.String ( textData ) ; java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap ( getTestData ( new java.lang.String [ ] { text } ) ) ; com.android.server.wifi.hotspot2.anqp.VenueNameElement.parse ( buffer ) ; }
private void doTestBracesNextLineStyle ( ) throws java.lang.Exception { com.intellij.psi.codeStyle.CommonCodeStyleSettings settings = com.intellij.psi.codeStyle.CodeStyleSettingsManager.getSettings ( getProject ( ) ) . getCommonSettings ( JavaLanguage.INSTANCE ) ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; settings.METHOD_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; settings.CLASS_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; try { doTest ( ) ; } finally { settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; settings.METHOD_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; settings.CLASS_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; } }
public void adjustStreamVolume ( int streamType , int direction , int flags , java.lang.String callingPackage ) { adjustStreamVolume ( streamType , direction , flags , callingPackage , android.os.Binder.getCallingUid ( ) ) ; }
protected com.android.sched.vfs.OutputVFile getOutputDex ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVFS outputVfs , int dexCount ) throws com.android.jack.backend.dex.DexWritingException { assert dexCount >= 1 ; java.lang.String dexName ; if ( dexCount == 1 ) { dexName = DexFileWriter.DEX_FILENAME ; } else { dexName = ( ( DexFileWriter.DEX_PREFIX ) + dexCount ) + ( DexFileWriter.DEX_FILE_EXTENSION ) ; } try { return outputVfs.getRootOutputVDir ( ) . createOutputVFile ( new com.android.sched.vfs.VPath ( dexName , '/' ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new com.android.jack.backend.dex.DexWritingException ( e ) ; } }
public static com.android.manifmerger.XmlDocument load ( java.lang.String displayName , java.io.File xmlFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( xmlFile ) ) ; com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( inputStream ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , new com.android.manifmerger.XmlLoader.FileSourceLocation ( displayName , xmlFile ) , domDocument.getDocumentElement ( ) ) : null ; }
public java.lang.String getName ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getName ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : return com.android.dialer.common.Assert.isNotNull ( firstExtendedCp2Contact ) . getName ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : return phoneLookupInfo.getPeopleApiInfo ( ) . getDisplayName ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : return phoneLookupInfo.getCnapInfo ( ) . getName ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return "" ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public java.lang.String getSourcePath ( ) { java.io.File file = mSourceFilePositions.get ( 0 ) . getFile ( ) . getSourceFile ( ) ; if ( file == null ) { return null ; } return file.getAbsolutePath ( ) ; }
public void clearMatches ( ) { if ( mFindIsUp ) { recordNewContentSize ( mContentWidth , ( ( mContentHeight ) - ( mFindHeight ) ) , false ) ; mFindIsUp = false ; } nativeSetFindIsDown ( ) ; pinScrollTo ( mScrollX , mScrollY , false , 0 ) ; invalidate ( ) ; }
public void set ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config , boolean nonFakeValuesOnly ) { if ( config != null ) { for ( int i = 0 ; i < ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier q = config.mQualifiers [ i ] ; if ( ( ( nonFakeValuesOnly == false ) || ( q == null ) ) || ( ( q.hasFakeValue ( ) ) == false ) ) { mQualifiers [ i ] = q ; } } } }
private synchronized void onAcceptFailed ( ) { shutdown ( false ) ; android.bluetooth.BluetoothAdapter mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter ( ) ; if ( ( mAdapter != null ) && ( ( mAdapter.getState ( ) ) == ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) ) { android.util.Log.d ( TAG , "onAcceptFailed() calling shutdown..." ) ; mConHandler.onAcceptFailed ( ) ; } }
public java.lang.String [ ] getPossibleValues ( java.lang.String prefix ) { java.util.TreeSet < java.lang.String > packages = new java.util.TreeSet < java.lang.String > ( ) ; for ( org.eclipse.jdt.core.IJavaProject project : com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getAndroidProjects ( null ) ) { com.android.sdklib.xml.ManifestData manifestData = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( project.getProject ( ) ) ; if ( manifestData == null ) { continue ; } packages.add ( manifestData.getPackage ( ) ) ; } return packages.toArray ( new java.lang.String [ packages.size ( ) ] ) ; }
public android.icu.text.DateFormat setBooleanAttribute ( android.icu.text.DateFormat.BooleanAttribute key , boolean value ) { if ( key.equals ( android.icu.text.DateFormat.BooleanAttribute.PARSE_PARTIAL_MATCH ) ) { key = android.icu.text.DateFormat.BooleanAttribute.PARSE_PARTIAL_LITERAL_MATCH ; } if ( value ) { booleanAttributes.add ( key ) ; } else { booleanAttributes.remove ( key ) ; } return this ; }
void abort ( com.android.server.telecom.Call call ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "abort" ) ) ) { try { logOutgoing ( "abort %s" , callId ) ; mServiceInterface.abort ( callId , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException e ) { } } removeCall ( call , new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.LOCAL ) ) ; }
public void doF32_relaxed ( long seed , int ulp ) { baseTestHelper ( android.renderscript.cts.RSBaseCompute.TEST_RELAXED_F32 , android.renderscript.Element.F32 ( mRS ) , android.renderscript.Element.F32 ( mRS ) , seed , 0.0F , 1.0F , 1 , 0 , 1 , 1 , 1 , 0 , ulp ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod x ) { printMethodHeader ( x ) ; if ( x instanceof com.android.jack.ir.ast.JAnnotationMethod ) { com.android.jack.ir.ast.JLiteral defaultValue = ( ( com.android.jack.ir.ast.JAnnotationMethod ) ( x ) ) . getDefaultValue ( ) ; if ( defaultValue != null ) { space ( ) ; print ( com.android.jack.ir.impl.CHARS_DEFAULT ) ; space ( ) ; accept ( defaultValue ) ; } } return false ; }
protected static void rolloverCounters ( ) { com.android.bluetooth.pbap.BluetoothPbapUtils.mDbIdentifier.set ( java.util.Calendar.getInstance ( ) . getTimeInMillis ( ) ) ; com.android.bluetooth.pbap.BluetoothPbapUtils.primaryVersionCounter = ( ( com.android.bluetooth.pbap.BluetoothPbapUtils.primaryVersionCounter ) < 0 ) ? 0 : com.android.bluetooth.pbap.BluetoothPbapUtils.primaryVersionCounter ; com.android.bluetooth.pbap.BluetoothPbapUtils.secondaryVersionCounter = ( ( com.android.bluetooth.pbap.BluetoothPbapUtils.secondaryVersionCounter ) < 0 ) ? 0 : com.android.bluetooth.pbap.BluetoothPbapUtils.secondaryVersionCounter ; if ( com.android.bluetooth.pbap.BluetoothPbapUtils.V ) android.util.Log.v ( com.android.bluetooth.pbap.BluetoothPbapUtils.TAG , ( "mDbIdentifier rolled over to:" + ( com.android.bluetooth.pbap.BluetoothPbapUtils.mDbIdentifier ) ) ) ; }
private void checkInOptionBase ( javax.lang.model.element.VariableElement optionField ) throws com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException { if ( ( optionField.getEnclosingElement ( ) . getKind ( ) ) != ( javax.lang.model.element.ElementKind.CLASS ) ) { throw new com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException ( optionField , "The field should belong to a class." ) ; } javax.lang.model.type.TypeMirror thisOptionClass = optionField.getEnclosingElement ( ) . asType ( ) ; javax.lang.model.type.TypeMirror optionsBase = elementUtils.getTypeElement ( "com.google.devtools.common.options.OptionsBase" ) . asType ( ) ; if ( ! ( typeUtils.isAssignable ( thisOptionClass , optionsBase ) ) ) { throw new com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException ( optionField , "@Option annotated fields can only be in classes that inherit from OptionsBase." ) ; } }
private android.bluetooth.BluetoothGattCharacteristic getCharacteristic ( java.util.UUID serverUid , java.util.UUID characteristicUid ) { android.bluetooth.BluetoothGattCharacteristic characteristic = null ; android.bluetooth.BluetoothGattService service = getService ( serverUid ) ; if ( service != null ) { characteristic = service.getCharacteristic ( characteristicUid ) ; if ( characteristic == null ) { showMessage ( "Characteristic not found" ) ; } } return characteristic ; }
public void clientConnect ( int clientIf , java.lang.String address , boolean isDirect , int transport , boolean opportunistic , int phy ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.clientConnect ( clientIf , address , isDirect , transport , opportunistic , phy ) ; }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; dataOut.writeBoolean ( myIsNormalized ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
public void resetMemory ( java.lang.String cardId , @ android.telephony.euicc.EuiccCardManager.ResetOption int options , java.util.concurrent.Executor executor , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.Void > callback ) { try { getIEuiccCardController ( ) . resetMemory ( mContext.getOpPackageName ( ) , cardId , options , new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode ) { executor.execute ( ( ) -> callback.onComplete ( resultCode , null ) ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling resetMemory" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
public boolean generate ( java.lang.String key , int uid , int flags ) { try { return ( mBinder.generate ( key , uid , flags ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public synchronized void onAcceptFailed ( ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "PBAP server socket accept thread failed. Restarting the server socket" ) ; if ( ( mWakeLock ) != null ) { mWakeLock.release ( ) ; mWakeLock = null ; } cleanUpServerSocket ( ) ; if ( ( mSessionStatusHandler ) != null ) { mSessionStatusHandler.removeCallbacksAndMessages ( null ) ; } synchronized ( mPbapStateMachineMap ) { mPbapStateMachineMap.clear ( ) ; } mSessionStatusHandler.sendMessage ( mSessionStatusHandler.obtainMessage ( com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER ) ) ; }
public final void testVerifyPublicKeyString ( ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , java.security.SignatureException , java.security.cert.CertificateException { java.security.cert.Certificate c1 = new org.apache.harmony.security.tests.support.cert.MyCertificate ( "TEST_TYPE" , tests.security.cert.CertificateTest.testEncoding ) ; c1.verify ( ( ( java.security.PublicKey ) ( null ) ) , ( ( java.lang.String ) ( null ) ) ) ; }
public void showWaitingForDebugger ( android.app.IApplicationThread who , boolean waiting ) { synchronized ( this ) { com.android.server.am.ProcessRecord app = ( who != null ) ? getRecordForAppLocked ( who ) : null ; if ( app == null ) return ; android.os.Message msg = android.os.Message.obtain ( ) ; msg.what = com.android.server.am.ActivityManagerService.WAIT_FOR_DEBUGGER_UI_MSG ; msg.obj = app ; msg.arg1 = ( waiting ) ? 1 : 0 ; mUiHandler.sendMessage ( msg ) ; } }
private boolean isImsiEncryptionRequired ( int subId , int keyType ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( mContext.getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; if ( configManager == null ) { return false ; } android.os.PersistableBundle pb = configManager.getConfigForSubId ( subId ) ; if ( pb == null ) { return false ; } int keyAvailability = pb.getInt ( CarrierConfigManager.IMSI_KEY_AVAILABILITY_INT ) ; return android.telephony.TelephonyManager.isKeyEnabled ( keyAvailability , keyType ) ; }
public void closeRttPipes ( ) { if ( ( mInCallToConnectionServiceStreams ) != null ) { mDiscardedRttFds.add ( mInCallToConnectionServiceStreams [ 0 ] ) ; mDiscardedRttFds.add ( mInCallToConnectionServiceStreams [ 1 ] ) ; } if ( ( mConnectionServiceToInCallStreams ) != null ) { mDiscardedRttFds.add ( mConnectionServiceToInCallStreams [ 0 ] ) ; mDiscardedRttFds.add ( mConnectionServiceToInCallStreams [ 1 ] ) ; } }
public java.util.Map < java.lang.String , java.lang.String > getClassData ( com.android.ddmlib.Client client ) { java.io.File hprofLocalFile = com.android.preload.classdataretrieval.hprof.Hprof.doHprof ( client , timeout ) ; if ( hprofLocalFile == null ) { throw new java.lang.RuntimeException ( "Failed getting dump..." ) ; } java.lang.System.out.println ( ( "Dump file is " + hprofLocalFile ) ) ; try { return com.android.preload.classdataretrieval.hprof.Hprof.analyzeHprof ( hprofLocalFile ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } finally { hprofLocalFile.delete ( ) ; } }
public void onDataConnectionStateChanged ( int state , int networkType ) { if ( DEBUG ) { android.util.Log.d ( mTag , ( ( ( "onDataConnectionStateChanged: state=" + state ) + " type=" ) + networkType ) ) ; } mDataState = state ; mDataNetType = networkType ; if ( ( ( ( mDataNetType ) == ( android.telephony.TelephonyManager.NETWORK_TYPE_LTE ) ) && ( ( mServiceState ) != null ) ) && ( mServiceState.isUsingCarrierAggregation ( ) ) ) { mDataNetType = android.telephony.TelephonyManager.NETWORK_TYPE_LTE_CA ; } updateTelephony ( ) ; }
public static com.android.sdklib.internal.avd.HardwareProperties.HardwarePropertyType getEnum ( java.lang.String name , boolean isEnum ) { for ( com.android.sdklib.internal.avd.HardwareProperties.HardwarePropertyType type : com.android.sdklib.internal.avd.HardwareProperties.HardwarePropertyType.values ( ) ) { if ( ( type.mName.equals ( name ) ) && ( ( type.mIsEnum ) == isEnum ) ) { return type ; } } return null ; }
public synchronized void fillSwitchMapClass ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass switchMapClass ) { this . enumType = enumType ; this . switchMapClass = switchMapClass ; com.android.jack.transformations.request.TransformationRequest transformRequest = new com.android.jack.transformations.request.TransformationRequest ( switchMapClass ) ; if ( switchMapClass.getName ( ) . startsWith ( SyntheticClassManager.SyntheticSwitchmapClassNamePrefix ) ) { createInstanceInitIfNotExists ( transformRequest ) ; } createOrUpdateSyntheticInitializer ( transformRequest ) ; transformRequest.commit ( ) ; }
public java.lang.Void answer ( org.mockito.invocation.InvocationOnMock invocation ) { java.lang.Object [ ] args = invocation.getArguments ( ) ; com.android.server.telecom.ConnectionServiceFocusManager.CallFocus focus = ( ( com.android.server.telecom.ConnectionServiceFocusManager.CallFocus ) ( args [ 0 ] ) ) ; com.android.server.telecom.ConnectionServiceFocusManager.RequestFocusCallback callback = ( ( com.android.server.telecom.ConnectionServiceFocusManager.RequestFocusCallback ) ( args [ 1 ] ) ) ; callback.onRequestFocusDone ( focus ) ; return null ; }
protected java.lang.String constructCommand ( java.lang.String programName ) { java.lang.StringBuilder commandBuilder = new java.lang.StringBuilder ( ) ; commandBuilder.append ( "dalvikvm64 -Xcompiler-option --compiler-backend=Optimizing " ) ; commandBuilder.append ( "-Xno-dex-file-fallback " ) ; commandBuilder.append ( "-cp " ) . append ( testLocation ) . append ( "/" ) . append ( programName ) . append ( " " ) ; commandBuilder.append ( executeClass ) ; return commandBuilder.toString ( ) ; }
protected void doOKAction ( ) { final org.jetbrains.plugins.github.util.GithubAuthData auth = myGithubLoginPanel.getAuthData ( ) ; try { org.jetbrains.plugins.github.util.GithubUtil.checkAuthData ( auth ) ; saveCredentials ( auth ) ; if ( mySettings.isSavePasswordMakesSense ( ) ) { mySettings.setSavePassword ( myGithubLoginPanel.isSavePasswordSelected ( ) ) ; } super . doOKAction ( ) ; } catch ( java.io.IOException e ) { org.jetbrains.plugins.github.ui.GithubLoginDialog.LOG.info ( e ) ; setErrorText ( ( "Can't login: " + ( org.jetbrains.plugins.github.util.GithubUtil.getErrorTextFromException ( e ) ) ) ) ; } }
public void newBroadcastSms ( int indicationType , java.util.ArrayList < java.lang.Byte > data ) { mRil.processIndication ( indicationType ) ; byte [ ] response = com.android.internal.telephony.RIL.arrayListToPrimitiveArray ( data ) ; if ( RIL.RILJ_LOGD ) { mRil.unsljLogvRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS , com.android.internal.telephony.uicc.IccUtils.bytesToHexString ( response ) ) ; } if ( ( mRil.mGsmBroadcastSmsRegistrant ) != null ) { mRil.mGsmBroadcastSmsRegistrant.notifyRegistrant ( new android.os.AsyncResult ( null , response , null ) ) ; } }
public com.android.sdklib.SdkManager.LayoutlibVersion getMaxLayoutlibVersion ( ) { com.android.sdklib.SdkManager.LayoutlibVersion maxVersion = null ; for ( com.android.sdklib.IAndroidTarget target : getTargets ( ) ) { if ( target instanceof com.android.sdklib.internal.androidTarget.PlatformTarget ) { com.android.sdklib.SdkManager.LayoutlibVersion lv = ( ( com.android.sdklib.internal.androidTarget.PlatformTarget ) ( target ) ) . getLayoutlibVersion ( ) ; if ( lv != null ) { if ( ( maxVersion == null ) || ( ( lv.compareTo ( maxVersion ) ) > 0 ) ) { maxVersion = lv ; } } } } return maxVersion ; }
public void testDisplayNames_nonUS ( ) throws java.lang.Exception { checkDisplayNames ( java.util.Locale.CHINESE ) ; checkDisplayNames ( java.util.Locale.FRENCH ) ; checkDisplayNames ( java.util.Locale.forLanguageTag ( "bn-BD" ) ) ; }
private void endDtmfSession ( com.android.server.telecom.Call call ) { if ( ( call != null ) && ( ( mCall ) == call ) ) { stopTone ( call ) ; mCall = null ; android.telecom.Log.d ( this , "Posting delete." ) ; getHandler ( ) . sendMessage ( getHandler ( ) . obtainMessage ( com.android.server.telecom.DtmfLocalTonePlayer.EVENT_END_SESSION , android.telecom.Log.createSubsession ( ) ) ) ; } }
private void onLocked ( int msg ) { if ( DBG ) log ( "only fetch EF_LI, EF_PL and EF_ICCID in locked state" ) ; mLockedRecordsReqReason = ( msg == ( com.android.internal.telephony.uicc.SIMRecords.EVENT_APP_LOCKED ) ) ? LOCKED_RECORDS_REQ_REASON_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED ; loadEfLiAndEfPl ( ) ; mFh.loadEFTransparent ( com.android.internal.telephony.uicc.EF_ICCID , obtainMessage ( com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE ) ) ; ( mRecordsToLoad ) ++ ; }
public void handleCreateConnectionComplete ( java.lang.String id , android.telecom.ConnectionRequest request , android.telecom.ParcelableConnection connection , android.telecom.Logging.Session.Info sessionInfo ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = id ; args.arg2 = request ; args.arg3 = connection ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_HANDLE_CREATE_CONNECTION_COMPLETE , args ) . sendToTarget ( ) ; }
public boolean hasTetherableConfiguration ( ) { final com.android.server.connectivity.tethering.TetheringConfiguration cfg = mConfig ; final boolean hasDownstreamConfiguration = ( ( ( cfg.tetherableUsbRegexs.length ) != 0 ) || ( ( cfg.tetherableWifiRegexs.length ) != 0 ) ) || ( ( cfg.tetherableBluetoothRegexs.length ) != 0 ) ; final boolean hasUpstreamConfiguration = ! ( cfg.preferredUpstreamIfaceTypes.isEmpty ( ) ) ; return hasDownstreamConfiguration && hasUpstreamConfiguration ; }
public void addAllMarkers ( @ javax.annotation.Nonnull java.util.Collection < com.android.sched.marker.Marker > collection ) { synchronized ( lock ) { ensureMap ( ) ; for ( com.android.sched.marker.Marker marker : collection ) { assert isValidMarker ( marker ) : ( ( ( "Marker '" + ( com.android.sched.item.Items.getName ( marker.getClass ( ) ) ) ) + "' is not supported for class '" ) + ( this . getClass ( ) . getName ( ) ) ) + "'" ; assert ( markers ) != null ; markers.put ( marker.getClass ( ) , marker ) ; } } }
public boolean isLeEnabled ( ) { final int state = getLeState ( ) ; if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , ( "isLeEnabled(): " + ( android.bluetooth.BluetoothAdapter.nameForState ( state ) ) ) ) ; return ( state == ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) || ( state == ( android.bluetooth.BluetoothAdapter.STATE_BLE_ON ) ) ; }
public com.android.build.gradle.internal.variant.ApplicationVariantData createVariantData ( @ com.android.annotations.NonNull com.android.builder.core.VariantConfiguration variantConfiguration , @ com.android.annotations.NonNull java.util.Set < java.lang.String > densities , @ com.android.annotations.NonNull java.util.Set < java.lang.String > abis ) { com.android.build.gradle.internal.variant.ApplicationVariantData variant = new com.android.build.gradle.internal.variant.ApplicationVariantData ( basePlugin , variantConfiguration ) ; for ( java.lang.String density : densities ) { for ( java.lang.String abi : abis ) { variant.createOutput ( density , abi ) ; } } return variant ; }
public boolean requestScores ( android.net.NetworkKey [ ] networks ) { mContext.enforceCallingOrSelfPermission ( permission.BROADCAST_NETWORK_PRIVILEGED , com.android.server.NetworkScoreService.TAG ) ; final android.net.INetworkRecommendationProvider provider = getRecommendationProvider ( ) ; if ( provider != null ) { try { provider.requestScores ( networks ) ; return true ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( com.android.server.NetworkScoreService.TAG , "Failed to request scores." , e ) ; } } return false ; }
private int getCurrentUserId ( ) { final long ident = android.os.Binder.clearCallingIdentity ( ) ; try { android.content.pm.UserInfo currentUser = android.app.ActivityManagerNative.getDefault ( ) . getCurrentUser ( ) ; return currentUser.id ; } catch ( android.os.RemoteException e ) { } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } return android.os.UserHandle.USER_SYSTEM ; }
public static synchronized void setDefault ( java.util.TimeZone timeZone ) { java.lang.SecurityManager sm = java.lang.System.getSecurityManager ( ) ; if ( sm != null ) { sm.checkPermission ( new java.util.PropertyPermission ( "user.timezone" , "write" ) ) ; } java.util.TimeZone.defaultTimeZone = ( timeZone != null ) ? ( ( java.util.TimeZone ) ( timeZone.clone ( ) ) ) : null ; android.icu.util.TimeZone.setICUDefault ( null ) ; }
private void dumpTimeRecs ( java.util.ArrayList < com.android.traceview.TimeLineView.Record > timeRecs ) { java.lang.System.out.print ( "\nTime Records\n" ) ; java.lang.System.out.print ( "id t-start t-end g-start g-end method\n" ) ; for ( com.android.traceview.TimeLineView.Record record : timeRecs ) { com.android.traceview.Call call = ( ( com.android.traceview.Call ) ( record.block ) ) ; java.lang.System.out.format ( "%2d %8d %8d %8d %8d %s\n" , call.getThreadId ( ) , call.mThreadStartTime , call.mThreadEndTime , call.mGlobalStartTime , call.mGlobalEndTime , call.getMethodData ( ) . getName ( ) ) ; } }
public java.net.InetAddress getInetAddress ( ) { if ( ! ( isConnected ( ) ) ) { return null ; } java.net.SocketAddress remote = sc.remoteAddress ( ) ; if ( remote == null ) { return null ; } else { return ( ( java.net.InetSocketAddress ) ( remote ) ) . getAddress ( ) ; } }
public void onRequestFocus ( ) { try { org.chromium.base.TraceEvent.begin ( "WebViewContentsClientAdapter.onRequestFocus" ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onRequestFocus" ) ; mWebChromeClient.onRequestFocus ( mWebView ) ; } } finally { org.chromium.base.TraceEvent.end ( "WebViewContentsClientAdapter.onRequestFocus" ) ; } }
com.android.jack.ir.JNodeInternalError translateException ( java.lang.Throwable e ) { if ( e instanceof java.lang.VirtualMachineError ) { throw ( ( java.lang.VirtualMachineError ) ( e ) ) ; } com.android.jack.ir.JNodeInternalError ice ; if ( e instanceof com.android.jack.ir.JNodeInternalError ) { ice = ( ( com.android.jack.ir.JNodeInternalError ) ( e ) ) ; } else { ice = new com.android.jack.ir.JNodeInternalError ( "Error constructing Java AST" , e ) ; } return ice ; }
public void execute ( android.hardware.cts.helpers.TestSensorManager sensorManager , android.hardware.cts.helpers.TestSensorEventListener listener ) throws java.lang.InterruptedException { try { sensorManager.registerListener ( listener ) ; int i = 0 ; for ( int interval : flushIntervalMs ) { android.hardware.cts.helpers.SensorCtsHelper.sleep ( interval , java.util.concurrent.TimeUnit.MILLISECONDS ) ; listener.waitForFlushComplete ( sensorManager.requestFlush ( ) , ( i <= clearEventIndex ) ) ; ++ i ; } } finally { sensorManager.unregisterListener ( ) ; } }
public void testOverlay1Content ( ) throws java.lang.Exception { java.io.File project = buildProject ( "overlay1" , BasePlugin.GRADLE_MIN_VERSION ) ; java.io.File drawableOutput = new java.io.File ( project , "build/res/all/debug/drawable" ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "no_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "type_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; }
public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ! ( context.getProject ( ) . getReportIssues ( ) ) ) { return ; } com.android.tools.lint.detector.api.Project project = context.getProject ( ) ; java.io.File projectFolder = project.getDir ( ) ; com.android.tools.lint.checks.PrivateKeyDetector.checkFolder ( context , new java.io.File ( projectFolder , "res" ) ) ; com.android.tools.lint.checks.PrivateKeyDetector.checkFolder ( context , new java.io.File ( projectFolder , "assets" ) ) ; for ( java.io.File srcFolder : project.getJavaSourceFolders ( ) ) { com.android.tools.lint.checks.PrivateKeyDetector.checkFolder ( context , srcFolder ) ; } }
private void freeLoadedPrograms ( ) { java.util.Collection < com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > > programs = getInstalledJacks ( ) ; for ( com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > program : programs ) { synchronized ( program ) { program.setLoadedProgram ( com.android.jack.server.JackHttpServer.Assertion.ENABLED , null ) ; } } java.lang.System.gc ( ) ; }
private static javax.net.ssl.SSLEngineResult.HandshakeStatus pendingStatus ( int pendingOutboundBytes ) { return pendingOutboundBytes > 0 ? javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP : javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP ; }
public void mergeChildren ( com.android.manifmerger.XmlElement lowerPriorityNode , com.android.manifmerger.MergingReport.Builder mergingReport ) { com.android.utils.ILogger logger = mergingReport.getLogger ( ) ; for ( com.android.manifmerger.XmlElement lowerPriorityChild : lowerPriorityNode.getMergeableElements ( ) ) { if ( shouldIgnore ( lowerPriorityChild , mergingReport ) ) { continue ; } mergeChild ( lowerPriorityChild , mergingReport ) ; } }
public void onConnectionEvent ( java.lang.String callId , java.lang.String event , android.os.Bundle extras , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , "CSW.oCE" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { android.os.Bundle.setDefusable ( extras , true ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.onConnectionEvent ( event , extras ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall ) { com.android.jack.ir.ast.JMethodIdWide id = methodCall.getMethodIdWide ( ) ; if ( id.containsMarker ( com.android.jack.transformations.ast.inner.NeedsDispatchAdjustment.class ) ) { com.android.jack.ir.ast.JExpression instance = methodCall.getInstance ( ) ; if ( instance != null ) { tr.append ( new com.android.jack.transformations.request.Remove ( instance ) ) ; tr.append ( new com.android.jack.transformations.request.AppendArgument ( methodCall , instance ) ) ; } } return super . visit ( methodCall ) ; }
public void allowLowRssiIfDataIsMoving ( ) throws java.lang.Exception { mWifiInfo.setRssi ( ( - 80 ) ) ; mWifiInfo.setLinkSpeed ( 6 ) ; mWifiInfo.txSuccessRate = 5.1 ; mWifiInfo.rxSuccessRate = 5.1 ; for ( int i = 0 ; i < 10 ; i ++ ) { mWifiScoreReport.calculateAndReportScore ( mWifiInfo , mNetworkAgent , mAggr , mWifiMetrics ) ; } int score = mWifiInfo.score ; org.junit.Assert.assertTrue ( ( score > ( com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE ) ) ) ; }
public static void assertEquals ( java.lang.Object expected , java.lang.Object actual ) { if ( ( expected == null ) && ( actual == null ) ) return ; if ( ( expected != null ) && ( expected.equals ( actual ) ) ) return ; throw new dot.junit.AssertionFailedException ( ( ( ( "not the same: " + expected ) + " vs " ) + actual ) ) ; }
public void testEnded ( com.android.ddmlib.testrunner.TestIdentifier test , java.util.Map < java.lang.String , java.lang.String > testMetrics ) { if ( ! ( mFailedTests.remove ( test ) ) ) { if ( ( mLogger ) != null ) { mLogger.info ( java.lang.String.format ( "\n%1$s > %2$s[%3$s] [32mSUCCESS [0m" , test.getClassName ( ) , test.getTestName ( ) , mDeviceName ) ) ; } } super . testEnded ( test , testMetrics ) ; }
private void terminateCall ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "terminateCall" ) ; } int action = HeadsetClientHalConstants.CALL_ACTION_CHUP ; android.bluetooth.BluetoothHeadsetClientCall c = getCall ( BluetoothHeadsetClientCall.CALL_STATE_DIALING , BluetoothHeadsetClientCall.CALL_STATE_ALERTING , BluetoothHeadsetClientCall.CALL_STATE_ACTIVE ) ; if ( c != null ) { if ( com.android.bluetooth.hfpclient.NativeInterface.handleCallActionNative ( getByteAddress ( mCurrentDevice ) , action , 0 ) ) { addQueuedAction ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TERMINATE_CALL , action ) ; } else { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "ERROR: Couldn't terminate outgoing call" ) ; } } }
private static int log10Floor ( int x ) { int y = com.google.common.math.IntMath.maxLog10ForLeadingZeros [ java.lang.Integer.numberOfLeadingZeros ( x ) ] ; return y - ( com.google.common.math.IntMath.lessThanBranchFree ( x , com.google.common.math.IntMath.powersOf10 [ y ] ) ) ; }
public void testDismissKeyguardActivity ( ) throws java.lang.Exception { if ( ! ( supportsKeyguard ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.computeState ( mDevice , null ) ; assertTrue ( mAmWmState.getAmState ( ) . getKeyguardControllerState ( ) . keyguardShowing ) ; launchActivity ( "DismissKeyguardActivity" ) ; mAmWmState.waitForKeyguardShowingAndOccluded ( mDevice ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "DismissKeyguardActivity" } ) ; mAmWmState.assertVisibility ( "DismissKeyguardActivity" , true ) ; assertShowingAndOccluded ( ) ; }
public static org.jetbrains.plugins.github.api.GithubIssue getIssue ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.util.GithubAuthData auth , @ org.jetbrains.annotations.NotNull java.lang.String user , @ org.jetbrains.annotations.NotNull java.lang.String repo , @ org.jetbrains.annotations.NotNull java.lang.String id ) throws java.io.IOException { java.lang.String path = ( ( ( ( "/repos/" + user ) + "/" ) + repo ) + "/issues/" ) + id ; com.google.gson.JsonElement result = org.jetbrains.plugins.github.api.GithubApiUtil.getRequest ( auth , path ) ; return org.jetbrains.plugins.github.api.GithubApiUtil.createDataFromRaw ( org.jetbrains.plugins.github.api.GithubApiUtil.fromJson ( result , org.jetbrains.plugins.github.api.GithubIssueRaw.class ) , org.jetbrains.plugins.github.api.GithubIssue.class ) ; }
public void test_getContentLength ( ) throws java.lang.Exception { assertEquals ( org.apache.harmony.luni.tests.java.net.URLConnectionTest.testString.getBytes ( ) . length , fileURLCon.getContentLength ( ) ) ; assertEquals ( Support_TestWebData.test1.length , uc.getContentLength ( ) ) ; assertEquals ( Support_TestWebData.test2.length , uc2.getContentLength ( ) ) ; assertNotNull ( jarURLCon.getContentLength ( ) ) ; assertNotNull ( gifURLCon.getContentLength ( ) ) ; fileURLCon.getInputStream ( ) . close ( ) ; }
public final void testPrettyName ( ) { assertEquals ( null , com.android.ide.common.layout.BaseViewRule.prettyName ( null ) ) ; assertEquals ( "" , com.android.ide.common.layout.BaseViewRule.prettyName ( "" ) ) ; assertEquals ( "Foo" , com.android.ide.common.layout.BaseViewRule.prettyName ( "foo" ) ) ; assertEquals ( "Foo bar" , com.android.ide.common.layout.BaseViewRule.prettyName ( "foo_bar" ) ) ; }
public void onPlayDtmfTone ( char c ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( ( ( "onPlayDtmfTone " + c ) + " " ) + ( mCurrentCall ) ) ) ; } if ( ! ( mClosed ) ) { mHeadsetProfile.sendDTMF ( mDevice , ( ( byte ) ( c ) ) ) ; } }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "mBundle" , mBundle ) . add ( "mBundleFolder" , mBundleFolder ) . add ( "mName" , mName ) . add ( "mProjectPath" , mProjectPath ) . toString ( ) ; }
public boolean isPossibleShortNumberForRegion ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.lang.String regionDialingFrom ) { if ( ! ( regionDialingFromMatchesNumber ( number , regionDialingFrom ) ) ) { return false ; } com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( regionDialingFrom ) ; if ( phoneMetadata == null ) { return false ; } return matcherApi.matchesPossibleNumber ( com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) , phoneMetadata.getGeneralDesc ( ) ) ; }
public void eventPublishTerminated ( byte sessionId , android.hardware.wifi.V1_0.WifiNanStatus status ) { if ( com.android.server.wifi.aware.WifiAwareNativeCallback.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNativeCallback.TAG , ( ( ( "eventPublishTerminated: sessionId=" + sessionId ) + ", status=" ) + ( com.android.server.wifi.aware.WifiAwareNativeCallback.statusString ( status ) ) ) ) ; } mWifiAwareStateManager.onSessionTerminatedNotification ( sessionId , status.status , true ) ; }
public void handleMessage ( android.os.Message msg , @ android.support.annotation.NonNull com.android.tv.data.epg.EpgFetcher epgFetcher ) { switch ( msg.what ) { case com.android.tv.data.epg.EpgFetcher.MSG_FETCH_EPG : epgFetcher.onFetchEpg ( ) ; break ; case com.android.tv.data.epg.EpgFetcher.MSG_FAST_FETCH_EPG : epgFetcher.onFetchEpg ( true ) ; break ; default : super . handleMessage ( msg ) ; break ; } }
private final void resetContext ( ) { org.conscrypt.OpenSSLDigestContext ctxLocal = new org.conscrypt.OpenSSLDigestContext ( org.conscrypt.NativeCrypto.EVP_MD_CTX_create ( ) ) ; org.conscrypt.NativeCrypto.EVP_MD_CTX_init ( ctxLocal ) ; final org.conscrypt.OpenSSLKey macKey = this . macKey ; if ( macKey != null ) { org.conscrypt.NativeCrypto.EVP_DigestSignInit ( ctxLocal , evp_md , macKey.getPkeyContext ( ) ) ; } this . ctx = ctxLocal ; }
public void hasPackageMatches ( ) { android.content.Intent intent = new android.content.Intent ( ) . setPackage ( "com.foo.bar" ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.IntentMatchers.hasPackage ( "com.foo.bar" ) . matches ( intent ) ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.IntentMatchers.hasPackage ( org.hamcrest.Matchers.equalTo ( "com.foo.bar" ) ) . matches ( intent ) ) ; }
public static java.lang.String calledPartyBCDToString ( byte [ ] bytes , int offset , int length ) { return android.telephony.PhoneNumberUtils.calledPartyBCDToString ( bytes , offset , length , android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mDevice = getDevice ( ) ; sepolicyAnalyze = copyResourceToTempFile ( "/sepolicy-analyze" ) ; sepolicyAnalyze.setExecutable ( true ) ; devicePolicyFile = java.io.File.createTempFile ( "sepolicy" , ".tmp" ) ; devicePolicyFile.deleteOnExit ( ) ; mDevice.executeAdbCommand ( "pull" , "/sys/fs/selinux/policy" , devicePolicyFile.getAbsolutePath ( ) ) ; }
public char [ ] formatBigInteger ( java.math.BigInteger value , java.text.FieldPosition field ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator fpi = libcore.icu.NativeDecimalFormat.FieldPositionIterator.forFieldPosition ( field ) ; char [ ] result = libcore.icu.NativeDecimalFormat.formatDigitList ( this . address , value.toString ( 10 ) , fpi ) ; if ( ( fpi != null ) && ( field != null ) ) { libcore.icu.NativeDecimalFormat.updateFieldPosition ( field , fpi ) ; } return result ; }
public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { com.android.tools.lint.detector.api.Project mainProject = context.getMainProject ( ) ; if ( mainProject.isGradleProject ( ) ) { java.lang.Boolean appCompat = mainProject.dependsOn ( "com.android.support:appcompat-v7" ) ; if ( com.android.SdkConstants.ANDROID_URI.equals ( attribute.getNamespaceURI ( ) ) ) { if ( ( context.getFolderVersion ( ) ) >= 14 ) { return ; } if ( appCompat == ( java.lang.Boolean.TRUE ) ) { context.report ( com.android.tools.lint.checks.AppCompatResourceDetector.ISSUE , attribute , context.getLocation ( attribute ) , ( "Should use `app:showAsAction` with the appcompat library with " + "`xmlns:app=\"http://schemas.android.com/apk/res-auto\"`" ) , null ) ; } } else { if ( appCompat == ( java.lang.Boolean.FALSE ) ) { context.report ( com.android.tools.lint.checks.AppCompatResourceDetector.ISSUE , attribute , context.getLocation ( attribute ) , "Should use `android:showAsAction` when not using the appcompat library" , null ) ; } } } }
public void copyFromUnchecked ( int [ ] d ) { copyFromUnchecked ( d , Element.DataType.SIGNED_32 , d.length ) ; }
private static void assertSerializableLambdaCharacteristics ( java.lang.Object r1 ) throws java.lang.Exception { org.junit.Assert.assertTrue ( ( r1 instanceof java.io.Serializable ) ) ; java.lang.Object deserializedR1 = com.android.jack.java8.lambda.test035.jack.Tests.roundtripSerialization ( r1 ) ; org.junit.Assert.assertFalse ( deserializedR1.equals ( r1 ) ) ; org.junit.Assert.assertNotSame ( deserializedR1 , r1 ) ; }
public com.android.util.Pair < java.lang.Boolean , java.io.File > installPlatformPackage ( int apiLevel ) { mPackageFilter = com.android.sdkuilib.internal.repository.sdkman2.AdtUpdateDialog.createPlatformFilter ( apiLevel ) ; open ( ) ; java.io.File installPath = null ; if ( ( mResultPaths ) != null ) { for ( java.util.Map.Entry < java.lang.Package , java.io.File > entry : mResultPaths.entrySet ( ) ) { if ( ( entry.getKey ( ) ) instanceof com.android.sdklib.internal.repository.packages.PlatformPackage ) { installPath = entry.getValue ( ) ; break ; } } } return com.android.util.Pair.of ( mResultCode , installPath ) ; }
private static long createTime ( java.util.TimeZone timeZone , int year , int monthOfYear , int dayOfMonth , int hourOfDay , int minuteOfHour , int secondOfMinute ) { java.util.Calendar cal = new java.util.GregorianCalendar ( timeZone ) ; cal.clear ( ) ; cal.set ( year , ( monthOfYear - 1 ) , dayOfMonth , hourOfDay , minuteOfHour , secondOfMinute ) ; return cal.getTimeInMillis ( ) ; }
private void configureFilterParamter ( int clientIf , com.android.bluetooth.gatt.ScanClient client , int featureSelection , int filterIndex , int num_of_tracking_entries ) { int deliveryMode = getDeliveryMode ( client ) ; int rssiThreshold = java.lang.Byte.MIN_VALUE ; int timeout = getOnfoundLostTimeout ( client ) ; com.android.bluetooth.gatt.FilterParams FiltValue = new com.android.bluetooth.gatt.FilterParams ( clientIf , filterIndex , featureSelection , com.android.bluetooth.gatt.ScanManager.ScanNative.LIST_LOGIC_TYPE , com.android.bluetooth.gatt.ScanManager.ScanNative.FILTER_LOGIC_TYPE , rssiThreshold , rssiThreshold , deliveryMode , timeout , timeout , com.android.bluetooth.gatt.ScanManager.ScanNative.ONFOUND_SIGHTINGS , num_of_tracking_entries ) ; gattClientScanFilterParamAddNative ( FiltValue ) ; }
public void methodAbstract ( ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface type = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( session.getLookup ( ) . getType ( com.android.jack.frontend.MethodModifierTest.classSignature ) ) ) ; junit.framework.Assert.assertNotNull ( type ) ; com.android.jack.ir.ast.JMethod method = com.android.jack.TestTools.getMethod ( type , "methodAbstract()V" ) ; junit.framework.Assert.assertNotNull ( method ) ; junit.framework.Assert.assertTrue ( method.isAbstract ( ) ) ; }
private void showAvdManagerWindow ( ) { try { com.android.sdkuilib.internal.widgets.MessageBoxLog errorLogger = new com.android.sdkuilib.internal.widgets.MessageBoxLog ( "AVD Manager" , org.eclipse.swt.widgets.Display.getCurrent ( ) , true ) ; com.android.sdkuilib.internal.repository.AvdManagerWindowImpl1 window = new com.android.sdkuilib.internal.repository.AvdManagerWindowImpl1 ( null , errorLogger , mOsSdkFolder , AvdManagerWindowImpl1.AvdInvocationContext.STANDALONE ) ; window.registerPage ( com.android.sdkmanager.internal.repository.SettingsPage.class , UpdaterPage.Purpose.SETTINGS ) ; window.registerPage ( com.android.sdkmanager.internal.repository.AboutPage.class , UpdaterPage.Purpose.ABOUT_BOX ) ; window.open ( ) ; errorLogger.displayResult ( true ) ; } catch ( java.lang.Exception e ) { e.printStackTrace ( ) ; } }
private static void setWifiCountryCodeFromMcc ( android.content.Context context , int mcc ) { java.lang.String country = com.android.internal.telephony.MccTable.countryCodeForMcc ( mcc ) ; if ( ! ( country.isEmpty ( ) ) ) { android.telephony.Rlog.d ( com.android.internal.telephony.MccTable.LOG_TAG , ( "WIFI_COUNTRY_CODE set to " + country ) ) ; android.net.wifi.WifiManager wM = ( ( android.net.wifi.WifiManager ) ( context.getSystemService ( Context.WIFI_SERVICE ) ) ) ; wM.setCountryCode ( country , true ) ; } }
public void onLinkPropertiesChanged ( android.net.Network network , android.net.LinkProperties linkProperties ) { com.googlecode.android_scripting.Log.d ( "NetworkCallback onLinkPropertiesChanged" ) ; if ( ( ( mEvents ) & ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.NetworkCallback.EVENT_LINK_PROPERTIES_CHANGED ) ) == ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.NetworkCallback.EVENT_LINK_PROPERTIES_CHANGED ) ) { mEventFacade.postEvent ( TelephonyConstants.EventNetworkCallback , new com.googlecode.android_scripting.facade.telephony.TelephonyEvents.NetworkCallbackEvent ( mId , com.googlecode.android_scripting.facade.ConnectivityManagerFacade.getNetworkCallbackEventString ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.NetworkCallback.EVENT_LINK_PROPERTIES_CHANGED ) , TelephonyEvents.NetworkCallbackEvent.INVALID_VALUE , TelephonyEvents.NetworkCallbackEvent.INVALID_VALUE ) ) ; } }
public void test18566_AlgorithmOid_MissingNull_Failure ( ) throws java.lang.Exception { java.security.spec.X509EncodedKeySpec keySpec = new java.security.spec.X509EncodedKeySpec ( libcore.java.security.SignatureTest.PK_BYTES ) ; java.security.KeyFactory keyFactory = java.security.KeyFactory.getInstance ( "RSA" ) ; java.security.PublicKey pk = keyFactory.generatePublic ( keySpec ) ; java.security.Signature sig = java.security.Signature.getInstance ( "SHA256withRSA" ) ; sig.initVerify ( pk ) ; sig.update ( libcore.java.security.SignatureTest.CONTENT ) ; assertFalse ( sig.verify ( libcore.java.security.SignatureTest.SIGNATURE ) ) ; }
public void setStateManager ( com.android.server.wifi.aware.WifiAwareStateManager awareStateManager ) { com.android.server.wifi.aware.WifiAwareNative.sWifiAwareStateManager = awareStateManager ; }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir vDir = getVDirFromCache ( parent , name ) ; if ( vDir != null ) { return vDir ; } else { throw new com.android.sched.util.file.NoSuchFileException ( getVDirLocation ( parent , name ) ) ; } }
public void testConsequentProxyConnection ( ) throws java.lang.Throwable { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.setUpStoreProperties ( ) ; javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier ( new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher getDispatcher1 = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.GET_METHOD , org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.OK_CODE ) ; com.google.mockwebserver.MockWebServer proxyAndWebServer1 = org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.createProxiedServer ( getDispatcher1 ) ; java.net.URL proxyUrl1 = proxyAndWebServer1.getUrl ( "/" ) ; java.net.URL url = new java.net.URL ( "https://requested.host:55555/requested.data" ) ; java.net.InetSocketAddress proxyAddress = new java.net.InetSocketAddress ( "localhost" , proxyUrl1.getPort ( ) ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , proxyAddress ) ) ) ) ; connection.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.executeClientRequest ( connection , false ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.checkConnectionStateParameters ( connection , getDispatcher1.getLastRequest ( ) ) ; proxyAndWebServer1.shutdown ( ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher getDispatcher2 = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.SingleRequestDispatcher ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.GET_METHOD , org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.OK_CODE ) ; com.google.mockwebserver.MockWebServer proxyAndWebServer2 = org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.createProxiedServer ( getDispatcher2 ) ; java.net.URL proxyUrl2 = proxyAndWebServer2.getUrl ( "/" ) ; java.net.InetSocketAddress proxyAddress2 = new java.net.InetSocketAddress ( "localhost" , proxyUrl2.getPort ( ) ) ; javax.net.ssl.HttpsURLConnection connection2 = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , proxyAddress2 ) ) ) ) ; connection2.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.executeClientRequest ( connection2 , false ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.checkConnectionStateParameters ( connection2 , getDispatcher2.getLastRequest ( ) ) ; proxyAndWebServer2.shutdown ( ) ; }
public void setBluetoothTethering ( boolean value ) { if ( android.bluetooth.BluetoothPan.DBG ) android.bluetooth.BluetoothPan.log ( ( ( "setBluetoothTethering(" + value ) + ")" ) ) ; final android.bluetooth.IBluetoothPan service = mPanService ; if ( ( service != null ) && ( isEnabled ( ) ) ) { try { service.setBluetoothTethering ( value ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPan.TAG , ( "Stack:" + ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ) ) ; } } }
public static java.security.KeyFactory getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { sun.security.jca.Providers.checkBouncyCastleDeprecation ( provider , "KeyFactory" , algorithm ) ; sun.security.jca.GetInstance.Instance instance = sun.security.jca.GetInstance.getInstance ( "KeyFactory" , java.security.KeyFactorySpi.class , algorithm , provider ) ; return new java.security.KeyFactory ( ( ( java.security.KeyFactorySpi ) ( instance.impl ) ) , instance.provider , algorithm ) ; }
public void testGetValues011_Class ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value oldValue = getStaticFieldValue ( classID , "CLASS_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( StackTrace002Debuggee.CLASS_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo suspensionMethodInfo = tester.addTestMethod ( "breakpointClass" ) ; suspensionMethodInfo.addVariable ( "param" , oldValue ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointClass" ) ; methodInfo.addVariable ( "param" , oldValue ) ; runStackFrameTest ( tester , suspensionMethodInfo ) ; }
public static java.lang.String $noinline$intToDoubleToIntPrint ( int value ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } double d = ( ( double ) ( value ) ) ; int i = ( ( int ) ( d ) ) ; return ( ( "d=" + d ) + ", i=" ) + i ; }
private void initializeGlobals ( android.renderscript.RenderScript RS , com.android.rs.test.ScriptC_single_source_script s ) { android.renderscript.Type.Builder i32TypeBuilder = new android.renderscript.Type.Builder ( RS , android.renderscript.Element.I32 ( RS ) ) ; int X = 1024 ; int Y = 768 ; s.set_dimX ( X ) ; s.set_dimY ( Y ) ; i32TypeBuilder.setX ( X ) . setY ( Y ) ; testAllocation1 = android.renderscript.Allocation.createTyped ( RS , i32TypeBuilder.create ( ) ) ; testAllocation2 = android.renderscript.Allocation.createTyped ( RS , i32TypeBuilder.create ( ) ) ; }
private com.android.builder.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest ( ) { return versionName ; } @ java.lang.Override protected void validate ( ) { } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
public void delegateActivated ( ) { if ( ( mGraphicalEditor ) != null ) { if ( ( getEditor ( ) . getActivePage ( ) ) == ( mGraphicalEditorIndex ) ) { mGraphicalEditor.activated ( ) ; } else { mGraphicalEditor.deactivated ( ) ; } } }
public static void recordEnumeratedHistogram ( java.lang.String name , int sample , int boundary ) { if ( ( org.chromium.base.metrics.RecordHistogram.sDisabledBy ) != null ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordEnumeratedHistogram ( name , key , sample , boundary ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
private void loadUrlOnUiThread ( final org.chromium.content_public.browser.LoadUrlParams loadUrlParams ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { assert ( mAppTargetSdkVersion ) < ( Build.VERSION_CODES.JELLY_BEAN_MR2 ) ; mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { mAwContents.loadUrl ( loadUrlParams ) ; } } ) ; return ; } mAwContents.loadUrl ( loadUrlParams ) ; }
private long computeSerialVersionUID ( final java.lang.String className ) throws java.io.IOException { final long [ ] svuid = new long [ 1 ] ; org.objectweb.asm.ClassVisitor cv = new org.objectweb.asm.commons.SerialVersionUIDAdder ( org.objectweb.asm.Opcodes.ASM5 , null ) { @ java.lang.Override protected long computeSVUID ( ) throws java.io.IOException { svuid [ 0 ] = super . computeSVUID ( ) ; return svuid [ 0 ] ; } } ; new org.objectweb.asm.ClassReader ( className ) . accept ( cv , 0 ) ; return svuid [ 0 ] ; }
public void testOnSetUpSancovEnabled ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( "walleye_asan_coverage-userdebug" ) . when ( mDevice ) . getBuildFlavor ( ) ; createTestFile ( SYMBOLS_FILE_NAME ) ; createTestFile ( BUILD_INFO_ARTIFACT ) ; mPreparer.setUp ( mDevice , mBuildInfo ) ; org.mockito.Mockito.verify ( mBuildInfo , org.mockito.Mockito.times ( 1 ) ) . setFile ( org.mockito.ArgumentMatchers.eq ( com.android.tradefed.targetprep.VtsCoveragePreparer.getSancovResourceDirKey ( mDevice ) ) , org.mockito.ArgumentMatchers.eq ( mDeviceInfoPath ) , org.mockito.ArgumentMatchers.eq ( "build_id" ) ) ; }
com.android.server.pm.PackageSetting getPackageLPw ( android.content.pm.PackageParser.Package pkg , com.android.server.pm.PackageSetting origPackage , java.lang.String realName , com.android.server.pm.SharedUserSetting sharedUser , java.io.File codePath , java.io.File resourcePath , java.lang.String legacyNativeLibraryPathString , java.lang.String primaryCpuAbi , java.lang.String secondaryCpuAbi , int pkgFlags , int pkgPrivateFlags , android.os.UserHandle user , boolean add ) { final java.lang.String name = pkg.packageName ; com.android.server.pm.PackageSetting p = getPackageLPw ( name , origPackage , realName , sharedUser , codePath , resourcePath , legacyNativeLibraryPathString , primaryCpuAbi , secondaryCpuAbi , pkg.mVersionCode , pkgFlags , pkgPrivateFlags , user , add , true ) ; return p ; }
private boolean bbHasOnlyDefinitions ( @ javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb , @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariable var , @ javax.annotation.Nonnull java.util.List < com.android.jack.analysis.DefinitionMarker > defsToFound ) { int nbDef = 0 ; for ( com.android.jack.analysis.DefinitionMarker def : com.android.jack.util.UseDefHelper.getReachingDefs ( bb ) ) { if ( ( def.getDefinedVariable ( ) ) == var ) { if ( defsToFound.contains ( def ) ) { nbDef ++ ; } else { return false ; } } } return ( defsToFound.size ( ) ) == nbDef ; }
public void installAppAndLaunch ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "RsHelloCompute" ) ; org.junit.Assert.assertTrue ( testFramework.getDevice ( ) . findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.APP_IMAGE_VIEW_ID ) ) . exists ( ) ) ; }
public void release ( ) { if ( mReleased ) { android.util.Log.w ( android.drm.DrmManagerClient.TAG , "You have already called release()" ) ; return ; } mReleased = true ; if ( ( mEventHandler ) != null ) { mEventThread.quit ( ) ; mEventThread = null ; } if ( ( mInfoHandler ) != null ) { mInfoThread.quit ( ) ; mInfoThread = null ; } mEventHandler = null ; mInfoHandler = null ; mOnEventListener = null ; mOnInfoListener = null ; mOnErrorListener = null ; _release ( mUniqueId ) ; }
private void verifyCodecConfigIntent ( int timeoutMs , android.bluetooth.BluetoothDevice device , android.bluetooth.BluetoothCodecStatus codecStatus ) { android.content.Intent intent = com.android.bluetooth.TestUtils.waitForIntent ( timeoutMs , mCodecConfigChangedQueue ) ; org.junit.Assert.assertNotNull ( intent ) ; org.junit.Assert.assertEquals ( BluetoothA2dp.ACTION_CODEC_CONFIG_CHANGED , intent.getAction ( ) ) ; org.junit.Assert.assertEquals ( device , intent.getParcelableExtra ( BluetoothDevice.EXTRA_DEVICE ) ) ; org.junit.Assert.assertEquals ( codecStatus , intent.getParcelableExtra ( BluetoothCodecStatus.EXTRA_CODEC_STATUS ) ) ; }
public boolean setScanMode ( @ android.bluetooth.BluetoothAdapter.ScanMode int mode , int duration ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return false ; try { mServiceLock.readLock ( ) . lock ( ) ; if ( ( mService ) != null ) return mService.setScanMode ( mode , duration ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } finally { mServiceLock.readLock ( ) . unlock ( ) ; } return false ; }
synchronized long nClosureCreate ( long kernelID , long returnValue , long [ ] fieldIDs , long [ ] values , int [ ] sizes , long [ ] depClosures , long [ ] depFieldIDs ) { validate ( ) ; long c = rsnClosureCreate ( mContext , kernelID , returnValue , fieldIDs , values , sizes , depClosures , depFieldIDs ) ; if ( c == 0 ) { throw new android.support.v8.renderscript.RSRuntimeException ( "Failed creating closure." ) ; } return c ; }
private boolean needFullBuild ( ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; return ( ( ( incrementalInputLibrary ) == null ) || ( ! ( libraryDependencies.hasSameLibraryOnClasspath ( session.getLibraryDependencies ( ) ) ) ) ) || ( ! ( libraryDependencies.hasSameImportedLibrary ( session.getLibraryDependencies ( ) ) ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; Main.doTest ( ) ; Main.doTestOtherThreadWait ( ) ; Main.doTestOtherThreadBusyLoop ( ) ; Main.doTestAllStackTraces ( ) ; java.lang.System.out.println ( "Done" ) ; }
public void testHandleUserSwitchAfterBootupBeforeLegacyStoreMigration ( ) throws java.lang.Exception { int user2 = ( com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ) + 1 ; when ( mUserManager.isUserUnlockingOrUnlocked ( user2 ) ) . thenReturn ( false ) ; mWifiConfigManager.handleUserSwitch ( user2 ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . switchUserStoreAndRead ( any ( WifiConfigStore.StoreFile.class ) ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . write ( anyBoolean ( ) ) ; }
private boolean connectToUserSelectNetwork ( int netId , int uid ) { if ( ! ( setUserSelectNetwork ( netId , uid ) ) ) { return false ; } if ( ! ( mWifiConfigManager.checkAndUpdateLastConnectUid ( netId , uid ) ) ) { loge ( ( ( ( "connectToUserSelectNetwork uid " + uid ) + " did not have the permissions to connect=" ) + netId ) ) ; return false ; } startConnectToNetwork ( netId , com.android.server.wifi.WifiStateMachine.SUPPLICANT_BSSID_ANY ) ; return true ; }
public boolean p2pStopFind ( ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.stopFind ( ) ; } else { return doBooleanCommand ( "P2P_STOP_FIND" ) ; } }
public final int update ( java.nio.ByteBuffer input , java.nio.ByteBuffer output ) throws javax.crypto.ShortBufferException { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( input == output ) { throw new java.lang.IllegalArgumentException ( "input == output" ) ; } return getSpi ( ) . engineUpdate ( input , output ) ; }
boolean startTestIntent ( final com.android.cts.verifier.DialogTestListActivity.DialogTestListItem test ) { final android.content.Intent intent = test.intent ; try { startActivity ( intent ) ; } catch ( android.content.ActivityNotFoundException e ) { android.util.Log.w ( TAG , "Cannot start activity." , e ) ; android.widget.Toast.makeText ( this , ( "Cannot start " + intent ) , Toast.LENGTH_LONG ) . show ( ) ; setTestResult ( test , TestResult.TEST_RESULT_FAILED ) ; return false ; } return true ; }
public void makeOptionsObjects ( ) { cfOptions = new com.android.dx.dex.cf.CfOptions ( ) ; cfOptions.positionInfo = positionInfo ; cfOptions.localInfo = localInfo ; cfOptions.strictNameCheck = strictNameCheck ; cfOptions.optimize = optimize ; cfOptions.optimizeListFile = optimizeListFile ; cfOptions.dontOptimizeListFile = dontOptimizeListFile ; cfOptions.statistics = statistics ; if ( warnings ) { cfOptions.warn = context.err ; } else { cfOptions.warn = context.noop ; } dexOptions = new com.android.dx.dex.DexOptions ( ) ; dexOptions.minSdkVersion = minSdkVersion ; dexOptions.forceJumbo = forceJumbo ; }
public android.telephony.CellLocation getCellLocation ( ) { android.telephony.cdma.CdmaCellLocation loc = mSST.mCellLoc ; int mode = Settings.Secure.getInt ( getContext ( ) . getContentResolver ( ) , Settings.Secure.LOCATION_MODE , Settings.Secure.LOCATION_MODE_OFF ) ; if ( mode == ( Settings.Secure.LOCATION_MODE_OFF ) ) { android.telephony.cdma.CdmaCellLocation privateLoc = new android.telephony.cdma.CdmaCellLocation ( ) ; privateLoc.setCellLocationData ( loc.getBaseStationId ( ) , CdmaCellLocation.INVALID_LAT_LONG , CdmaCellLocation.INVALID_LAT_LONG , loc.getSystemId ( ) , loc.getNetworkId ( ) ) ; loc = privateLoc ; } return loc ; }
boolean virtualUnplug ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidHostService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidHostService.TAG , ( "virtualUnplug: " + ( device.getAddress ( ) ) ) ) ; } int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothHidHost.STATE_CONNECTED ) ) { return false ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidHostService.MESSAGE_VIRTUAL_UNPLUG , device ) ; mHandler.sendMessage ( msg ) ; return true ; }
protected org.eclipse.swt.widgets.Control createDialogArea ( org.eclipse.swt.widgets.Composite parent ) { org.eclipse.swt.widgets.Composite contents = ( ( org.eclipse.swt.widgets.Composite ) ( super . createDialogArea ( parent ) ) ) ; createRadioControl ( contents ) ; createFilterText ( contents ) ; createFilteredList ( contents ) ; org.eclipse.swt.widgets.Label label = createMessageArea ( contents ) ; if ( label != null ) { org.eclipse.swt.layout.GridData data = ( ( org.eclipse.swt.layout.GridData ) ( label.getLayoutData ( ) ) ) ; data.exclude = true ; } chooseNode ( mChosenRootNode ) ; setInitialSelection ( mChosenRootNode ) ; return contents ; }
public com.google.common.collect.ImmutableList < com.android.manifmerger.Actions.NodeRecord > getNodeRecords ( com.android.manifmerger.XmlNode.NodeKey key ) { return mRecords.containsKey ( key ) ? mRecords.get ( key ) . getNodeRecords ( ) : com.google.common.collect.ImmutableList.< com.android.manifmerger.Actions.NodeRecord > of ( ) ; }
private void sortPackages ( boolean updateButtons ) { if ( ( ( ( mCheckSortApi ) != null ) && ( ! ( mCheckSortApi.isDisposed ( ) ) ) ) && ( mCheckSortApi.getSelection ( ) ) ) { sortByApiLevel ( ) ; } else { sortBySource ( ) ; } if ( updateButtons ) { updateButtonsState ( ) ; updateMenuCheckmarks ( ) ; } }
public void disableService ( ) { if ( ! ( android.autofillservice.cts.Helper.hasAutofillFeature ( ) ) ) return ; if ( ! ( android.autofillservice.cts.AutoFillServiceTestCase.isServiceEnabled ( ) ) ) return ; final android.autofillservice.cts.OneTimeSettingsListener observer = new android.autofillservice.cts.OneTimeSettingsListener ( android.autofillservice.cts.AutoFillServiceTestCase.getContext ( ) , android.provider.Settings.Secure.AUTOFILL_SERVICE ) ; android.autofillservice.cts.Helper.runShellCommand ( "settings delete secure %s" , android.provider.Settings.Secure.AUTOFILL_SERVICE ) ; observer.assertCalled ( ) ; android.autofillservice.cts.AutoFillServiceTestCase.assertServiceDisabled ( ) ; android.autofillservice.cts.InstrumentedAutoFillService.setIgnoreUnexpectedRequests ( false ) ; }
public boolean migrateNetworksFromSupplicant ( java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configs , android.util.SparseArray < java.util.Map < java.lang.String , java.lang.String > > networkExtras ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.loadNetworks ( configs , networkExtras ) ; } else { mWifiSupplicantControl.loadNetworks ( configs , networkExtras ) ; return true ; } }
public boolean p2pServiceFlush ( ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.serviceFlush ( ) ; } else { return doBooleanCommand ( "P2P_SERVICE_FLUSH" ) ; } }
private void adjustOtherHeadsetPriorities ( com.android.bluetooth.hfp.HeadsetService hsService , java.util.List < android.bluetooth.BluetoothDevice > connectedDeviceList ) { for ( android.bluetooth.BluetoothDevice device : mAdapterService.getBondedDevices ( ) ) { if ( ( ( hsService.getPriority ( device ) ) >= ( android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT ) ) && ( ! ( connectedDeviceList.contains ( device ) ) ) ) { com.android.bluetooth.btservice.PhonePolicy.debugLog ( ( ( "adjustOtherHeadsetPriorities, device " + device ) + " PRIORITY_ON" ) ) ; hsService.setPriority ( device , BluetoothProfile.PRIORITY_ON ) ; } } }
public void onCreate ( android.database.sqlite.SQLiteDatabase db ) { db.execSQL ( ( ( ( ( ( ( ( ( ( ( "CREATE TABLE " + ( com.android.cts.verifier.TestResultsProvider.TABLE_NAME ) ) + " (" ) + ( com.android.cts.verifier.TestResultsProvider._ID ) ) + " INTEGER PRIMARY KEY AUTOINCREMENT, " ) + ( com.android.cts.verifier.TestResultsProvider.COLUMN_TEST_NAME ) ) + " TEXT, " ) + ( com.android.cts.verifier.TestResultsProvider.COLUMN_TEST_RESULT ) ) + " INTEGER," ) + ( com.android.cts.verifier.TestResultsProvider.COLUMN_TEST_INFO_SEEN ) ) + " INTEGER DEFAULT 0);" ) ) ; }
void prepareEngines ( ) throws java.lang.Exception { java.nio.channels.Pipe clientSendPipe = java.nio.channels.Pipe.open ( ) ; java.nio.channels.Pipe serverSendPipe = java.nio.channels.Pipe.open ( ) ; java.nio.channels.Pipe.SinkChannel clientSink = clientSendPipe.sink ( ) ; java.nio.channels.Pipe.SourceChannel serverSource = clientSendPipe.source ( ) ; java.nio.channels.Pipe.SinkChannel serverSink = serverSendPipe.sink ( ) ; java.nio.channels.Pipe.SourceChannel clientSource = serverSendPipe.source ( ) ; clientEngine = new org.apache.harmony.tests.javax.net.ssl.SSLEngineTest.HandshakeHandler ( true , clientSource , clientSink ) ; serverEngine = new org.apache.harmony.tests.javax.net.ssl.SSLEngineTest.HandshakeHandler ( false , serverSource , serverSink ) ; }
public boolean markRead ( boolean read ) { boolean changed = false ; for ( com.android.mail.providers.ParticipantInfo pi : participantInfos ) { changed |= pi.markRead ( read ) ; } if ( ( messageCount ) > 0 ) { if ( read ) { firstSnippet = lastSnippet ; } else { firstSnippet = firstUnreadSnippet ; } } return changed ; }
com.android.internal.telephony.gsm.GsmSmsAddress getAddress ( ) { com.android.internal.telephony.gsm.GsmSmsAddress ret ; int addressLength = ( pdu [ cur ] ) & 255 ; int lengthBytes = 2 + ( ( addressLength + 1 ) / 2 ) ; try { ret = new com.android.internal.telephony.gsm.GsmSmsAddress ( pdu , cur , lengthBytes ) ; } catch ( java.text.ParseException e ) { android.util.Log.e ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , e.getMessage ( ) ) ; ret = null ; } cur += lengthBytes ; return ret ; }
public static void computeFabs ( android.renderscript.cts.TestFabs.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 0 , 0 , false ) ; android.renderscript.cts.Target.Floaty in = t.new32 ( args.inX ) ; args.out = t.new32 ( java.lang.Math.abs ( args.inX ) , java.lang.Math.abs ( in.min32 ( ) ) , java.lang.Math.abs ( in.max32 ( ) ) ) ; }
public boolean isCarrierSpecific ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.util.List < java.lang.String > regionCodes = getRegionCodesForCountryCode ( number.getCountryCode ( ) ) ; java.lang.String regionCode = getRegionCodeForShortNumberFromRegionList ( number , regionCodes ) ; java.lang.String nationalNumber = com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) ; com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( regionCode ) ; return ( phoneMetadata != null ) && ( matchesPossibleNumberAndNationalNumber ( nationalNumber , phoneMetadata.getCarrierSpecific ( ) ) ) ; }
private void transformAnnotationSetRefList ( com.android.dx.merge.IndexMap indexMap , com.android.dex.Dex.Section refListIn ) { ( contentsOut.annotationSetRefLists.size ) ++ ; annotationSetRefListOut.assertFourByteAligned ( ) ; indexMap.putAnnotationSetRefListOffset ( refListIn.getPosition ( ) , annotationSetRefListOut.getPosition ( ) ) ; int parameterCount = refListIn.readInt ( ) ; annotationSetRefListOut.writeInt ( parameterCount ) ; for ( int p = 0 ; p < parameterCount ; p ++ ) { annotationSetRefListOut.writeInt ( indexMap.adjustAnnotationSet ( refListIn.readInt ( ) ) ) ; } }
private boolean needFullRebuild ( ) { if ( ! ( options.isAutomaticFullRebuildEnabled ( ) ) ) { return false ; } long timestamp = new java.io.File ( options.getOutputDir ( ) , com.android.jack.backend.dex.DexFileWriter.DEX_FILENAME ) . lastModified ( ) ; for ( java.io.File lib : options.getClasspath ( ) ) { if ( isModifiedLibrary ( lib , timestamp ) ) { return true ; } } for ( java.io.File importedJackFiles : options.getImportedLibraries ( ) ) { if ( isModifiedLibrary ( importedJackFiles , timestamp ) ) { return true ; } } return false ; }
public V get ( java.lang.Object k ) { K key = ( ( K ) ( k ) ) ; V value = compute ( key ) ; com.google.common.base.Preconditions.checkNotNull ( value , "%s returned null for key %s." , computingFunction , key ) ; notifyRemoval ( key , value ) ; return value ; }
synchronized void nAllocationElementRead ( long id , int xoff , int yoff , int zoff , int mip , int compIdx , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationElementRead ( mContext , id , xoff , yoff , zoff , mip , compIdx , d , sizeBytes , dt.mID ) ; }
public java.io.InputStream getInputStream ( ) throws java.io.IOException { checkOpen ( ) ; java.io.InputStream returnVal ; synchronized ( stateLock ) { if ( ( state ) == ( org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED ) ) { throw new java.net.SocketException ( "Socket is closed." ) ; } if ( ( is ) == null ) { is = new org.conscrypt.OpenSSLSocketImpl.SSLInputStream ( ) ; } returnVal = is ; } waitForHandshake ( ) ; return returnVal ; }
android.content.pm.ActivityInfo getActivityInfoForUser ( android.content.pm.ActivityInfo aInfo , int userId ) { if ( ( aInfo == null ) || ( ( userId < 1 ) && ( ( aInfo.applicationInfo.uid ) < ( android.os.UserHandle.PER_USER_RANGE ) ) ) ) { return aInfo ; } android.content.pm.ActivityInfo info = new android.content.pm.ActivityInfo ( aInfo ) ; info.applicationInfo = getAppInfoForUser ( info.applicationInfo , userId ) ; return info ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent.getAction ( ) ; if ( action.equals ( AppInterface.CAT_CMD_ACTION ) ) { handleCommandMessage ( context , intent ) ; } else if ( action.equals ( AppInterface.CAT_SESSION_END_ACTION ) ) { handleSessionEnd ( context , intent ) ; } }
private java.lang.String getVersionCodeString ( int versionCode , com.android.sdklib.internal.export.ApkData apkData ) { int trueVersionCode = versionCode * ( com.android.sdklib.internal.export.MultiApkExportHelper.OFFSET_VERSION_CODE ) ; trueVersionCode += ( apkData.getBuildInfo ( ) ) * ( com.android.sdklib.internal.export.MultiApkExportHelper.OFFSET_BUILD_INFO ) ; trueVersionCode += apkData.getMinor ( ) ; return java.lang.Integer.toString ( trueVersionCode ) ; }
private static java.lang.ClassLoader createClassLoader ( com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter , java.util.List < com.google.devtools.build.android.desugar.InputFileProvider > bootclasspath , com.google.devtools.build.android.desugar.IndexedInputs appAndClasspathIndexedInputs ) throws java.io.IOException { java.lang.ClassLoader parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; if ( ! ( bootclasspath.isEmpty ( ) ) ) { parent = new com.google.devtools.build.android.desugar.HeaderClassLoader ( new com.google.devtools.build.android.desugar.IndexedInputs ( bootclasspath ) , rewriter , parent ) ; } return new com.google.devtools.build.android.desugar.HeaderClassLoader ( appAndClasspathIndexedInputs , rewriter , parent ) ; }
private static android.os.ParcelFileDescriptor getDistroParcelFileDescriptor ( android.content.Context context ) { android.os.ParcelFileDescriptor inputFileDescriptor ; try { inputFileDescriptor = context.getContentResolver ( ) . openFileDescriptor ( TimeZoneRulesDataContract.Data.CONTENT_URI , "r" ) ; if ( inputFileDescriptor == null ) { throw new java.io.FileNotFoundException ( "ContentProvider returned null" ) ; } } catch ( java.io.FileNotFoundException e ) { android.util.Log.e ( com.android.timezone.updater.RulesCheckReceiver.TAG , ( "Unable to open file descriptor" + ( TimeZoneRulesDataContract.Data.CONTENT_URI ) ) , e ) ; return null ; } return inputFileDescriptor ; }
public void endElement ( java.lang.String uri , java.lang.String localName , java.lang.String qName ) { java.lang.StringBuffer sb = new java.lang.StringBuffer ( ) ; sb.append ( uri ) ; sb.append ( org.apache.harmony.tests.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_STRING ) ; sb.append ( localName ) ; sb.append ( org.apache.harmony.tests.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_STRING ) ; sb.append ( qName ) ; data_endElement.append ( sb ) ; data_endElement.append ( org.apache.harmony.tests.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_ELEMENT ) ; }
public boolean factoryReset ( ) { try { mServiceLock.readLock ( ) . lock ( ) ; if ( ( mService ) != null ) { return mService.factoryReset ( ) ; } android.os.SystemProperties.set ( "persist.bluetooth.factoryreset" , "true" ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } finally { mServiceLock.readLock ( ) . unlock ( ) ; } return false ; }
public static com.android.dialer.historyitemactions.IntentModule newCarrierVideoCallModule ( android.content.Context context , java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.dialer.callintent.CallInitiationType.Type initiationType ) { return new com.android.dialer.historyitemactions.IntentModule ( context , com.android.dialer.precall.PreCall.getIntent ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , initiationType ) . setPhoneAccountHandle ( phoneAccountHandle ) . setIsVideoCall ( true ) ) , R.string.video_call , R.drawable.quantum_ic_videocam_vd_white_24 ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( androidMinApiLevel ) < ( com.android.jack.backend.dex.compatibility.AndroidCompatibilityChecker.N_API_LEVEL ) ) { if ( ( ( method.getEnclosingType ( ) ) instanceof com.android.jack.ir.ast.JInterface ) && ( method.isBridge ( ) ) ) { com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest ( method.getEnclosingType ( ) ) ; tr.append ( new com.android.jack.transformations.request.Remove ( method ) ) ; tr.commit ( ) ; } } }
private java.lang.String getDeviceTimeZoneState ( com.android.timezone.xts.TimeZoneUpdateHostTest.StateType stateType ) throws java.lang.Exception { java.lang.String output = getDevice ( ) . executeShellCommand ( ( "dumpsys timezone -format_state " + ( stateType.getFormatStateChar ( ) ) ) ) ; assertNotNull ( output ) ; java.lang.String value = output.split ( ":" ) [ 1 ] ; return value.substring ( 1 , ( ( value.length ( ) ) - 1 ) ) ; }
private void expectNetworkStatsUidDetail ( android.net.NetworkStats detail , java.lang.String [ ] tetherIfacePairs , android.net.NetworkStats tetherStats ) throws java.lang.Exception { org.mockito.Mockito.when ( mNetManager.getNetworkStatsUidDetail ( android.net.NetworkStats.UID_ALL ) ) . thenReturn ( detail ) ; org.mockito.Mockito.when ( mNetManager.getNetworkStatsTethering ( ) ) . thenReturn ( tetherStats ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.SuperReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.ast.JClass superClass ; assert ( ( superClass = curClass.classType.getSuperClass ( ) ) == null ) || ( getTypeMap ( ) . get ( x.resolvedType ) . isSameType ( superClass ) ) ; push ( makeThisRef ( makeSourceInfo ( x ) ) ) ; } catch ( com.android.jack.ir.ast.JTypeLookupException e ) { throw translateException ( x , e ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public void setReporter ( @ javax.annotation.Nonnull com.android.jack.api.v01.ReporterKind reporterKind , @ javax.annotation.Nonnull java.io.OutputStream reporterStream ) throws com.android.jack.api.v01.ConfigurationException { java.lang.String reporterKindAsString = null ; switch ( reporterKind ) { case DEFAULT : { reporterKindAsString = "default" ; break ; } case SDK : { reporterKindAsString = "sdk" ; break ; } default : { throw new com.android.jack.api.v01.ConfigurationException ( ( ( "Reporter kind '" + reporterKind ) + "' is unsupported" ) ) ; } } options.addProperty ( Reporter.REPORTER.getName ( ) , reporterKindAsString ) ; options.setReporterStream ( reporterStream ) ; }
private int handleQueryVPModeMessage ( android.os.AsyncResult ar ) { if ( ( ar.exception ) != null ) { if ( com.android.phone.CallFeaturesSetting.DBG ) { com.android.phone.CallFeaturesSetting.log ( "handleQueryVPModeMessage: Error getting VoicePrivacy enable state." ) ; } return com.android.phone.CallFeaturesSetting.MSG_EXCEPTION ; } else { if ( com.android.phone.CallFeaturesSetting.DBG ) { com.android.phone.CallFeaturesSetting.log ( "handleQueryVPModeMessage: VoicePrivacy enable state successfully queried." ) ; } syncVPState ( ( ( int [ ] ) ( ar.result ) ) ) ; android.provider.Settings.System.putInt ( mPhone.getContext ( ) . getContentResolver ( ) , android.provider.Settings.System.ENHANCED_VOICE_PRIVACY_ENABLED , com.android.phone.CallFeaturesSetting.preferredVPMode ) ; } return com.android.phone.CallFeaturesSetting.MSG_OK ; }
private void setupPassword ( ) { assertTrue ( mAndroidKeyStore.password ( "1111" ) ) ; assertTrue ( mAndroidKeyStore.isUnlocked ( ) ) ; assertEquals ( 0 , mAndroidKeyStore.saw ( "" ) . length ) ; }
public void testEnvironment ( ) throws java.lang.Exception { java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder ( libcore.java.lang.ProcessBuilderTest.shell ( ) , "-c" , "echo $A" ) ; pb.environment ( ) . put ( "A" , "android" ) ; libcore.java.lang.ProcessBuilderTest.checkProcessExecution ( pb , libcore.java.lang.ProcessBuilderTest.ResultCodes.ZERO , "" , "android\n" , "" ) ; }
public void test_lookupLjava_lang_Class ( ) { java.io.ObjectStreamClass osc = java.io.ObjectStreamClass.lookup ( tests.api.java.io.ObjectStreamClassTest.DummyClass.class ) ; assertEquals ( ( "lookup returned wrong class: " + ( osc.getName ( ) ) ) , "tests.api.java.io.ObjectStreamClassTest$DummyClass" , osc.getName ( ) ) ; }
private void responseSms ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SendSmsResult sms ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.SmsResponse ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = new com.android.internal.telephony.SmsResponse ( sms.messageRef , sms.ackPDU , sms.errorCode ) ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void testPx ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/now_playing_after.xml:49: Warning: Avoid using \"mm\" as units (it does not work accurately on all devices); use \"dp\" instead [InOrMmUsage]\n" + ( ( ( ( ( ( ( ( " android:layout_width=\"100mm\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/now_playing_after.xml:50: Warning: Avoid using \"in\" as units (it does not work accurately on all devices); use \"dp\" instead [InOrMmUsage]\n" ) + " android:layout_height=\"120in\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/now_playing_after.xml:41: Warning: Avoid using \"px\" as units; use \"dp\" instead [PxUsage]\n" ) + " android:layout_width=\"2px\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 3 warnings\n" ) ) , lintFiles ( "res/layout/now_playing_after.xml" ) ) ; }
< T > void checkTimedGet ( java.util.concurrent.Future < T > f , T expectedValue , long timeoutMillis ) { long startTime = java.lang.System.nanoTime ( ) ; try { assertEquals ( expectedValue , f.get ( timeoutMillis , java.util.concurrent.TimeUnit.MILLISECONDS ) ) ; } catch ( java.lang.Throwable fail ) { threadUnexpectedException ( fail ) ; } if ( ( jsr166.JSR166TestCase.millisElapsedSince ( startTime ) ) > ( timeoutMillis / 2 ) ) throw new junit.framework.AssertionFailedError ( "timed get did not return promptly" ) ; }
public boolean removeCallbacks ( java.lang.Runnable action ) { android.os.Handler handler ; android.view.View.AttachInfo attachInfo = mAttachInfo ; if ( attachInfo != null ) { handler = attachInfo.mHandler ; } else { android.view.ViewRootImpl.getRunQueue ( ) . removeCallbacks ( action ) ; return true ; } handler.removeCallbacks ( action ) ; return true ; }
public void testExistsOnSystem ( ) throws android.system.ErrnoException , java.io.IOException { java.io.File tmpFile = java.io.File.createTempFile ( "testExistsOnSystem" , ".tmp" ) ; try { assertEquals ( "SECCOMP filter is not installed." , 0 , libcore.java.io.FileTest.installSeccompFilter ( ) ) ; try { android.system.Os.stat ( tmpFile.getAbsolutePath ( ) ) ; fail ( ) ; } catch ( android.system.ErrnoException expected ) { assertEquals ( OsConstants.EPERM , expected.errno ) ; } assertTrue ( tmpFile.exists ( ) ) ; } finally { tmpFile.delete ( ) ; } }
public void networkAgentMayBeNull ( ) throws java.lang.Exception { mWifiInfo.setRssi ( ( - 33 ) ) ; mWifiScoreReport.enableVerboseLogging ( true ) ; mWifiScoreReport.calculateAndReportScore ( mWifiInfo , null , mAggr , mWifiMetrics ) ; org.mockito.Mockito.verify ( mWifiMetrics ) . incrementWifiScoreCount ( org.mockito.Mockito.anyInt ( ) ) ; }
public void disablingVerboseLoggingClearsRecords ( ) { mWsm.sendMessage ( WifiStateMachine.CMD_DISCONNECT ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertTrue ( ( ( mWsm.getLogRecSize ( ) ) >= 1 ) ) ; mWsm.enableVerboseLogging ( 0 ) ; org.junit.Assert.assertEquals ( 0 , mWsm.getLogRecSize ( ) ) ; }
private static void checkIndex ( int arrayLength , int offset , int length , java.lang.String arrayName ) { if ( ( ( offset | length ) < 0 ) || ( ( offset + length ) > arrayLength ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( ( ( ( ( "offset: " + offset ) + ", length: " ) + length ) + " (expected: offset <= offset + length <= " ) + arrayName ) + ".length (" ) + arrayLength ) + "))" ) ) ; } }
private void sendMessage ( int what , com.android.bluetooth.gatt.ScanClient client ) { final com.android.bluetooth.gatt.ScanManager.ClientHandler handler = mHandler ; if ( handler == null ) { android.util.Log.d ( com.android.bluetooth.gatt.ScanManager.TAG , "sendMessage: mHandler is null." ) ; return ; } android.os.Message message = new android.os.Message ( ) ; message.what = what ; message.obj = client ; handler.sendMessage ( message ) ; }
java.lang.Integer getNetworkScore ( android.net.wifi.ScanResult scanResult , com.android.server.wifi.WifiNetworkScoreCache scoreCache , boolean active ) { if ( ( scoreCache != null ) && ( scoreCache.isScoredNetwork ( scanResult ) ) ) { int score = scoreCache.getNetworkScore ( scanResult , active ) ; localLog ( ( ( ( ( ( com.android.server.wifi.WifiNetworkSelector.toScanId ( scanResult ) ) + " has score: " ) + score ) + " active network: " ) + active ) ) ; return score ; } return null ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mInstrumentation = getInstrumentation ( ) ; mContext = mInstrumentation.getTargetContext ( ) ; mIntent = new android.content.Intent ( mContext , android.app.stubs.InstrumentationTestActivity.class ) ; mIntent.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mActivity = ( ( android.app.stubs.InstrumentationTestActivity ) ( mInstrumentation.startActivitySync ( mIntent ) ) ) ; com.android.compatibility.common.util.PollingCheck.waitFor ( mActivity :: hasWindowFocus ) ; }
private void loadPackages ( ) { if ( ( mUpdaterData ) == null ) { return ; } try { enableUi ( mGroupPackages , false ) ; boolean firstLoad = mPkgManager.getPackages ( ) . isEmpty ( ) ; mPkgManager.loadPackages ( ) ; if ( firstLoad ) { expandInitial ( mCategories ) ; } } finally { enableUi ( mGroupPackages , true ) ; updateButtonsState ( ) ; } }
public void setCellInfoListRate ( int rateInMillis ) { try { getITelephony ( ) . setCellInfoListRate ( rateInMillis ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
private java.lang.String getReportBaseName ( ) { java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat ( "yyyy.MM.dd-HH.mm.ss" , java.util.Locale.ENGLISH ) ; java.lang.String date = dateFormat.format ( new java.util.Date ( ) ) ; return ( ( ( ( ( ( ( ( ( "ctsVerifierReport" + "-" ) + date ) + "-" ) + ( android.os.Build.MANUFACTURER ) ) + "-" ) + ( android.os.Build.PRODUCT ) ) + "-" ) + ( android.os.Build.DEVICE ) ) + "-" ) + ( android.os.Build.ID ) ; }
private com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder processFolder ( com.android.io.IAbstractFolder folder , com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources project ) { java.lang.String [ ] folderSegments = folder.getName ( ) . split ( AndroidConstants.RES_QUALIFIER_SEP ) ; com.android.resources.ResourceFolderType type = com.android.resources.ResourceFolderType.getTypeByName ( folderSegments [ 0 ] ) ; if ( type != null ) { com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = getConfig ( folderSegments ) ; if ( config != null ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder configuredFolder = project.add ( type , config , folder ) ; return configuredFolder ; } } return null ; }
private boolean isNitzSignalOffsetInfoBogus ( com.android.internal.telephony.util.TimeStampedValue < com.android.internal.telephony.NitzData > nitzSignal , java.lang.String isoCountryCode ) { if ( android.text.TextUtils.isEmpty ( isoCountryCode ) ) { return false ; } com.android.internal.telephony.NitzData newNitzData = nitzSignal.mValue ; boolean zeroOffsetNitz = ( ( newNitzData.getLocalOffsetMillis ( ) ) == 0 ) && ( ! ( newNitzData.isDst ( ) ) ) ; return zeroOffsetNitz && ( ! ( countryUsesUtc ( isoCountryCode , nitzSignal ) ) ) ; }
protected void doRevert ( java.io.File toFile , java.io.File backupFile ) throws java.io.IOException { if ( ( ! ( toFile.exists ( ) ) ) || ( isModified ( toFile ) ) ) { com.intellij.updater.Utils.delete ( toFile ) ; com.intellij.updater.Utils.copy ( backupFile , toFile ) ; } }
public void validateHomeSpWithInvalidHomeNetworkIds ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.HomeSP homeSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; homeSp.fqdn = "fqdn" ; homeSp.friendlyName = "friendly name" ; homeSp.homeNetworkIds = new java.util.HashMap < > ( ) ; byte [ ] rawSsidBytes = new byte [ 33 ] ; java.util.Arrays.fill ( rawSsidBytes , ( ( byte ) ( 'a' ) ) ) ; homeSp.homeNetworkIds.put ( android.net.wifi.hotspot2.pps.StringFactory.newStringFromBytes ( rawSsidBytes , java.nio.charset.StandardCharsets.UTF_8 ) , 4660L ) ; org.junit.Assert.assertFalse ( homeSp.validate ( ) ) ; }
boolean startScoUsingVirtualVoiceCall ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; synchronized ( mStateMachines ) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get ( device ) ; if ( stateMachine == null ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , ( ( "startScoUsingVirtualVoiceCall: device " + device ) + " was never connected/connecting" ) ) ; return false ; } stateMachine.sendMessage ( HeadsetStateMachine.VIRTUAL_CALL_START , device ) ; } return true ; }
public static java.lang.String getSyntheticSwitchMapInitializerName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType ) { java.lang.String enumName = com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter ( ) . getName ( enumType ) ; return com.android.jack.util.NamingTools.getStrictNonSourceConflictingName ( ( ( "get" + enumName ) + ( com.android.jack.transformations.enums.OptimizationUtil.Suffix ) ) ) ; }
public com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.eclipse.adt.internal.resources.manager.FrameworkResources resources = new com.android.ide.eclipse.adt.internal.resources.manager.FrameworkResources ( ) ; try { loadResources ( resources , frameworkRes ) ; resources.loadPublicResources ( frameworkRes , com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ; return resources ; } catch ( java.io.IOException e ) { } } return null ; }
private java.util.Set < ? extends javax.lang.model.element.Element > getElementsAnnotatedWith ( @ javax.annotation.Nonnull javax.annotation.processing.RoundEnvironment roundEnv , @ javax.annotation.Nonnull com.android.sched.build.SchedAnnotationProcessor.Items item ) throws com.android.sched.build.SchedAnnotationProcessor.AbortException { assert ( env ) != null ; return roundEnv.getElementsAnnotatedWith ( item.getTypeElement ( ) ) ; }
public void test_getCertificateChain ( ) { init ( org.apache.harmony.tests.javax.net.ssl.X509KeyManagerTest.SERVER ) ; assertNull ( "Not NULL for NULL parameter" , manager.getCertificateChain ( null ) ) ; assertNull ( "Not NULL for empty parameter" , manager.getCertificateChain ( "" ) ) ; assertNull ( "Not NULL for clientAlias_01 parameter" , manager.getCertificateChain ( "clientAlias_01" ) ) ; assertNull ( "Not NULL for serverAlias_00 parameter" , manager.getCertificateChain ( "serverAlias_00" ) ) ; }
public void testGetContentType ( ) throws java.io.IOException { assertEquals ( "text/rtf" , getContentType ( "test.rtf" ) ) ; assertEquals ( "application/msword" , getContentType ( "test.doc" ) ) ; assertEquals ( "text/html" , getContentType ( "test.htx" ) ) ; assertEquals ( "text/xml" , getContentType ( "test.xml" ) ) ; assertEquals ( "text/html" , new libcore.net.url.FileURLConnection ( new java.net.URL ( "file:///" ) ) . getContentType ( ) ) ; }
private void expectFailedEventScan ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.ScanEventHandler eventHandler , java.util.Set < java.lang.Integer > scanFreqs ) { order.verify ( mWifiNative ) . scan ( eq ( scanFreqs ) , any ( java.util.Set.class ) ) ; mWifiMonitor.sendMessage ( mWifiNative.getInterfaceName ( ) , WifiMonitor.SCAN_FAILED_EVENT ) ; assertEquals ( "dispatch message after results event" , 1 , mLooper.dispatchAll ( ) ) ; }
public void onGeolocationPermissionsShowPrompt ( java.lang.String origin , android.webkit.GeolocationPermissions.Callback callback ) { onPermissionRequest ( new org.chromium.webview_shell.WebViewBrowserActivity.GeoPermissionRequest ( origin , callback ) ) ; }
public void testCarrierPriviledgeLoadedListener ( ) { mUiccProfile.registerForCarrierPrivilegeRulesLoaded ( mMockedHandler , com.android.internal.telephony.uicc.UiccProfileTest.UICCPROFILE_CARRIER_PRIVILEDGE_LOADED_EVENT , null ) ; org.mockito.ArgumentCaptor < android.os.Message > mCaptorMessage = org.mockito.ArgumentCaptor.forClass ( android.os.Message.class ) ; org.mockito.ArgumentCaptor < java.lang.Long > mCaptorLong = org.mockito.ArgumentCaptor.forClass ( java.lang.Long.class ) ; testUpdateUiccProfile ( ) ; org.mockito.Mockito.verify ( mMockedHandler , org.mockito.Mockito.atLeast ( 1 ) ) . sendMessageDelayed ( mCaptorMessage.capture ( ) , mCaptorLong.capture ( ) ) ; org.junit.Assert.assertEquals ( com.android.internal.telephony.uicc.UiccProfileTest.UICCPROFILE_CARRIER_PRIVILEDGE_LOADED_EVENT , mCaptorMessage.getValue ( ) . what ) ; }
public void anyOfMatcherWithMoreThanOneMatch ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) org.hamcrest.Matcher < android.net.Uri > anyOfMatcher = org.hamcrest.CoreMatchers.anyOf ( android.support.test.espresso.intent.matcher.UriMatchers.hasHost ( org.hamcrest.CoreMatchers.equalTo ( "www.google.com" ) ) , android.support.test.espresso.intent.matcher.UriMatchers.hasPath ( org.hamcrest.CoreMatchers.equalTo ( "/search" ) ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithName ( org.hamcrest.CoreMatchers.equalTo ( "param2" ) ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithValue ( org.hamcrest.CoreMatchers.equalTo ( "ie" ) , org.hamcrest.CoreMatchers.equalTo ( "UTF-8" ) ) ) ; org.junit.Assert.assertTrue ( "AnyOf matcher didn't match" , anyOfMatcher.matches ( uri ) ) ; }
public void canForgetNetworkConfigWhenWifiDisabled ( ) throws java.lang.Exception { when ( mWifiConfigManager.removeNetwork ( eq ( 0 ) , anyInt ( ) ) ) . thenReturn ( true ) ; mWsm.sendMessage ( WifiManager.FORGET_NETWORK , 0 , com.android.server.wifi.WifiStateMachineTest.MANAGED_PROFILE_UID ) ; mLooper.dispatchAll ( ) ; verify ( mWifiConfigManager ) . removeNetwork ( anyInt ( ) , anyInt ( ) ) ; }
public boolean loadSoundEffects ( ) { int attempts = 3 ; android.media.AudioService.LoadSoundEffectReply reply = new android.media.AudioService.LoadSoundEffectReply ( ) ; synchronized ( reply ) { android.media.AudioService.sendMsg ( mAudioHandler , android.media.AudioService.MSG_LOAD_SOUND_EFFECTS , android.media.AudioService.SENDMSG_QUEUE , 0 , 0 , reply , 0 ) ; while ( ( ( reply.mStatus ) == 1 ) && ( ( attempts -- ) > 0 ) ) { try { reply.wait ( android.media.AudioService.SOUND_EFFECTS_LOAD_TIMEOUT_MS ) ; } catch ( java.lang.InterruptedException e ) { android.util.Log.w ( android.media.AudioService.TAG , "loadSoundEffects Interrupted while waiting sound pool loaded." ) ; } } } return ( reply.mStatus ) == 0 ; }
public boolean equals ( java.lang.Object object ) { if ( ( this ) == object ) { return true ; } if ( ! ( object instanceof java.text.DecimalFormat ) ) { return false ; } java.text.DecimalFormat other = ( ( java.text.DecimalFormat ) ( object ) ) ; return ( ( this . ndf ) == null ? ( other.ndf ) == null : this . ndf.equals ( other.ndf ) ) && ( getDecimalFormatSymbols ( ) . equals ( other.getDecimalFormatSymbols ( ) ) ) ; }
public boolean dispatchKeyEvent ( final android.view.KeyEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return dispatchKeyEvent ( event ) ; } } ) ; return ret ; } return mAwContents.dispatchKeyEvent ( event ) ; }
public void testOk ( ) { mNumberKeyListener = new android.text.method.cts.NumberKeyListenerTest.MockNumberKeyListener ( android.text.method.cts.NumberKeyListenerTest.MockNumberKeyListener.DIGITS ) ; assertTrue ( mNumberKeyListener.callOk ( mNumberKeyListener.getAcceptedChars ( ) , '3' ) ) ; assertFalse ( mNumberKeyListener.callOk ( mNumberKeyListener.getAcceptedChars ( ) , 'e' ) ) ; try { mNumberKeyListener.callOk ( null , 'm' ) ; fail ( "should throw NullPointerException." ) ; } catch ( java.lang.NullPointerException e ) { } }
private boolean isAllowedBySettingsLocked ( java.lang.String provider ) { if ( mEnabledProviders.contains ( provider ) ) { return true ; } if ( mDisabledProviders.contains ( provider ) ) { return false ; } android.content.ContentResolver resolver = mContext.getContentResolver ( ) ; return Settings.Secure.isLocationProviderEnabled ( resolver , provider ) ; }
public void test_handshakeWithEmbeddedSCT ( ) throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection ( new java.security.cert.X509Certificate [ ] { certEmbedded , ca } , certKey , true ) ; connection.clientHooks.ctVerificationEnabled = true ; connection.doHandshake ( ) ; org.junit.Assert.assertTrue ( connection.clientHooks.isHandshakeCompleted ) ; org.junit.Assert.assertTrue ( connection.serverHooks.isHandshakeCompleted ) ; }
public static android.os.Message obtain ( ) { synchronized ( android.os.Message.sPoolSync ) { if ( ( android.os.Message.sPool ) != null ) { android.os.Message m = android.os.Message.sPool ; android.os.Message.sPool = m.next ; m.next = null ; ( android.os.Message.sPoolSize ) -- ; return m ; } } return new android.os.Message ( ) ; }
public int dexOptSecondaryDexPath ( android.content.pm.ApplicationInfo info , java.lang.String path , com.android.server.pm.dex.PackageDexUsage.DexUseInfo dexUseInfo , com.android.server.pm.dex.DexoptOptions options ) { if ( ( info.uid ) == ( - 1 ) ) { throw new java.lang.IllegalArgumentException ( ( ( "Dexopt for path " + path ) + " has invalid uid." ) ) ; } synchronized ( mInstallLock ) { final long acquireTime = acquireWakeLockLI ( info.uid ) ; try { return dexOptSecondaryDexPathLI ( info , path , dexUseInfo , options ) ; } finally { releaseWakeLockLI ( acquireTime ) ; } } }
private static void updateDeliveryNotification ( final android.content.Context context , boolean isStatusMessage , final java.lang.CharSequence message , final long timeMillis ) { if ( ! isStatusMessage ) { return ; } if ( ! ( com.android.mms.ui.MessagingPreferenceActivity.getNotificationEnabled ( context ) ) ) { return ; } com.android.mms.transaction.MessagingNotification.sToastHandler.post ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { android.widget.Toast.makeText ( context , message , ( ( int ) ( timeMillis ) ) ) . show ( ) ; } } ) ; }
boolean equalNumbers ( @ android.support.annotation.Nullable java.lang.String number1 , @ android.support.annotation.Nullable java.lang.String number2 ) { if ( ( com.android.dialer.phonenumberutil.PhoneNumberHelper.isUriNumber ( number1 ) ) || ( com.android.dialer.phonenumberutil.PhoneNumberHelper.isUriNumber ( number2 ) ) ) { return compareSipAddresses ( number1 , number2 ) ; } else { return android.telephony.PhoneNumberUtils.compare ( number1 , number2 ) ; } }
private static void assertValues ( android.net.NetworkStats stats , int index , java.lang.String iface , int uid , int set , int tag , int metered , int roaming , long rxBytes , long rxPackets , long txBytes , long txPackets , long operations ) { final android.net.NetworkStats.Entry entry = stats.getValues ( index , null ) ; android.net.NetworkStatsTest.assertValues ( entry , iface , uid , set , tag , metered , roaming ) ; android.net.NetworkStatsTest.assertValues ( entry , rxBytes , rxPackets , txBytes , txPackets , operations ) ; }
public void registerNetworkCallback ( android.net.NetworkRequest request , android.app.PendingIntent operation ) { android.net.ConnectivityManager.checkPendingIntentNotNull ( operation ) ; try { mService.pendingListenForNetwork ( request.networkCapabilities , operation ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } catch ( android.os.ServiceSpecificException e ) { throw android.net.ConnectivityManager.convertServiceException ( e ) ; } }
public boolean collectManifestDigest ( android.content.pm.PackageParser.Package pkg ) { try { final java.util.jar.StrictJarFile jarFile = new java.util.jar.StrictJarFile ( mArchiveSourcePath ) ; try { final java.util.zip.ZipEntry je = jarFile.findEntry ( android.content.pm.PackageParser.ANDROID_MANIFEST_FILENAME ) ; if ( je != null ) { pkg.manifestDigest = android.content.pm.ManifestDigest.fromInputStream ( jarFile.getInputStream ( je ) ) ; } } finally { jarFile.close ( ) ; } return true ; } catch ( java.io.IOException e ) { return false ; } }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , int [ ] data ) { validateIsInt32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_32 , data.length ) ; }
private com.android.jack.tools.merger.JackMerger getNewMerger ( ) { return new com.android.jack.tools.merger.JackMerger ( createDexFile ( ) , com.android.sched.util.config.ThreadConfig.get ( Options.BEST_MERGING_ACCURACY ) . booleanValue ( ) ) ; }
public void copyFrom ( float [ ] d ) { validateIsFloat32 ( ) ; copyFromUnchecked ( d , Element.DataType.FLOAT_32 , d.length ) ; }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir vDir = getVDirFromCache ( parent , name ) ; if ( vDir != null ) { return vDir ; } else { throw new com.android.sched.util.file.NoSuchFileException ( getVDirLocation ( parent , name ) ) ; } }
public void test_setDefault_setsICUDefaultLocale ( ) { java.util.Locale.setDefault ( java.util.Locale.GERMANY ) ; assertEquals ( "de_DE" , libcore.icu.ICU.getDefaultLocale ( ) ) ; try { java.util.Locale.setDefault ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { assertEquals ( java.util.Locale.GERMANY , java.util.Locale.getDefault ( ) ) ; } java.util.Locale.setDefault ( new java.util.Locale ( "bogus" , "LOCALE" ) ) ; assertEquals ( "und" , libcore.icu.ICU.getDefaultLocale ( ) ) ; }
private static java.lang.String getCurrentHash ( java.lang.String content ) throws java.lang.Exception { if ( content == null ) { return "0" ; } java.security.MessageDigest dgst = java.security.MessageDigest.getInstance ( "SHA512" ) ; byte [ ] encoded = content.getBytes ( ) ; byte [ ] fingerprint = dgst.digest ( encoded ) ; return com.android.internal.util.HexDump.toHexString ( fingerprint , false ) ; }
public com.google.common.hash.HashCode hash ( ) { checkNotDone ( ) ; done = true ; return ( bytes ) == ( digest.getDigestLength ( ) ) ? com.google.common.hash.HashCode.fromBytesNoCopy ( digest.digest ( ) ) : com.google.common.hash.HashCode.fromBytesNoCopy ( java.util.Arrays.copyOf ( digest.digest ( ) , bytes ) ) ; }
static java.nio.ByteBuffer getAndroidManifestFromApk ( java.util.List < com.android.apksig.internal.zip.CentralDirectoryRecord > cdRecords , com.android.apksig.util.DataSource lhfSection ) throws com.android.apksig.apk.ApkFormatException , com.android.apksig.zip.ZipFormatException , java.io.IOException { com.android.apksig.internal.zip.CentralDirectoryRecord androidManifestCdRecord = com.android.apksig.ApkSigner.findCdRecord ( cdRecords , com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME ) ; if ( androidManifestCdRecord == null ) { throw new com.android.apksig.apk.ApkFormatException ( ( "Missing " + ( com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME ) ) ) ; } return java.nio.ByteBuffer.wrap ( com.android.apksig.internal.zip.LocalFileRecord.getUncompressedData ( lhfSection , androidManifestCdRecord , lhfSection.size ( ) ) ) ; }
public void testSetValues005_IntConstantWithExceptionInCaller ( ) { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( StackTrace002Debuggee.INT_CONSTANT_METHOD_WITH_EXCEPTION_IN_CALLER_SIGNAL ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value oldValue = new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.INT_PARAM_VALUE ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value newValue = new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.INT_PARAM_VALUE_TO_SET ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValueAfterSet = oldValue ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo suspensionMethodInfo = tester.addTestMethod ( "breakpointIntConstantWithException" ) ; suspensionMethodInfo.addVariable ( "param" , oldValue , newValue , expectedValueAfterSet ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointIntConstantWithExceptionInCallerImpl" ) ; methodInfo.addVariable ( "local" , oldValue , newValue , expectedValueAfterSet ) ; runStackFrameTest ( tester , suspensionMethodInfo ) ; }
public static final java.text.DateFormat getTimeInstance ( int style , java.util.Locale locale ) { java.text.DateFormat.checkTimeStyle ( style ) ; if ( locale == null ) { throw new java.lang.NullPointerException ( "locale == null" ) ; } return new java.text.SimpleDateFormat ( libcore.icu.LocaleData.get ( locale ) . getTimeFormat ( style ) , locale ) ; }
private com.android.ide.common.rendering.api.Result getViewParentWithReflection ( java.lang.Object viewObject ) { try { if ( ( mViewGetParentMethod ) == null ) { java.lang.Class < ? > viewClass = java.lang.Class.forName ( "android.view.View" ) ; mViewGetParentMethod = viewClass.getMethod ( "getParent" ) ; } return Status.SUCCESS.createResult ( mViewGetParentMethod.invoke ( viewObject ) ) ; } catch ( java.lang.Exception e ) { return com.android.ide.common.rendering.api.Result.Status.ERROR_REFLECTION.createResult ( null , e ) ; } }
public void setSurfaceTexture ( android.graphics.SurfaceTexture surfaceTexture ) { if ( surfaceTexture == null ) { throw new java.lang.NullPointerException ( "surfaceTexture must not be null" ) ; } if ( ( mSurface ) != null ) { mSurface.release ( ) ; } mSurface = surfaceTexture ; if ( ( ( mViewFlags ) & ( VISIBILITY_MASK ) ) == ( VISIBLE ) ) { mSurface.setOnFrameAvailableListener ( mUpdateListener , mAttachInfo.mHandler ) ; } mUpdateSurface = true ; invalidateParentIfNeeded ( ) ; }
private void setPhoto ( com.android.dialer.voicemail.model.VoicemailEntry voicemailEntry ) { com.android.dialer.contactphoto.ContactPhotoManager.getInstance ( context ) . loadDialerThumbnailOrPhoto ( quickContactBadge , com.android.dialer.voicemail.listui.NewVoicemailViewHolder.parseUri ( voicemailEntry.numberAttributes ( ) . getLookupUri ( ) ) , voicemailEntry.numberAttributes ( ) . getPhotoId ( ) , com.android.dialer.contactphoto.NumberAttributeConverter.getPhotoUri ( context , voicemailEntry.numberAttributes ( ) ) , com.android.dialer.voicemail.listui.VoicemailEntryText.buildPrimaryVoicemailText ( context , voicemailEntry ) , LetterTileDrawable.TYPE_DEFAULT ) ; }
private void handleCameraChange ( java.lang.String cameraId ) { if ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_FRONT.equals ( cameraId ) ) { super . changeCameraCapabilities ( new android.telecom.VideoProfile.CameraCapabilities ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_FRONT_DIMENSIONS , com.android.server.telecom.tests.MockVideoProvider.CAMERA_FRONT_DIMENSIONS ) ) ; } else if ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_BACK.equals ( cameraId ) ) { super . changeCameraCapabilities ( new android.telecom.VideoProfile.CameraCapabilities ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_BACK_DIMENSIONS , com.android.server.telecom.tests.MockVideoProvider.CAMERA_BACK_DIMENSIONS ) ) ; } else { super . handleCallSessionEvent ( VideoProvider.SESSION_EVENT_CAMERA_READY ) ; } }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
public void testEclipseFormatStyle2 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences prefs = new com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences ( ) { @ java.lang.Override public java.lang.String getOneIndentUnit ( ) { return " " ; } @ java.lang.Override public int getTabWidth ( ) { return 2 ; } } ; prefs.useEclipseIndent = true ; checkFormat ( prefs , "res/values/colors.xml" , ( "<resources>\n" + ( ( ( " <color name=\"enrollment_error\">#99e21f14</color>\n" + "\n" ) + " <color name=\"service_starting_up\">#99000000</color>\n" ) + "</resources>" ) ) , ( "<resources>\n" + ( ( ( ( "\n" + " <color name=\"enrollment_error\">#99e21f14</color>\n" ) + " <color name=\"service_starting_up\">#99000000</color>\n" ) + "\n" ) + "</resources>" ) ) ) ; }
public static void setStatusBarColor ( android.view.Window window , int statusBarColor ) { if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { if ( ( statusBarColor == ( android.graphics.Color.BLACK ) ) && ( ( window.getNavigationBarColor ( ) ) == ( android.graphics.Color.BLACK ) ) ) { window.clearFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; } else { window.addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; } window.setStatusBarColor ( statusBarColor ) ; } }
private android.util.Pair < java.util.List < android.media.Image > , android.hardware.camera2.CaptureResult > captureSingleRawShot ( android.util.Size s , java.util.List < android.media.ImageReader > captureReaders , boolean waitForAe , java.util.List < android.hardware.camera2.cts.CameraTestUtils.SimpleImageReaderListener > captureListeners ) throws java.lang.Exception { return captureRawShots ( s , captureReaders , waitForAe , captureListeners , 1 ) . get ( 0 ) ; }
private void readArray ( com.android.dx.io.EncodedValueReader reader ) { for ( int i = 0 , size = reader.readArray ( ) ; i < size ; i ++ ) { switch ( reader.peek ( ) ) { case com.android.dx.io.EncodedValueReader.ENCODED_STRING : encounterString ( reader.readString ( ) ) ; break ; case com.android.dx.io.EncodedValueReader.ENCODED_ARRAY : readArray ( reader ) ; break ; } } }
public void notifyTestingDeviceDisconnected ( ) { com.android.cts.Log.d ( "busyDeviceDisconnected invoked" ) ; mTestStop = true ; synchronized ( this ) { notify ( ) ; } cleanUp ( ) ; try { com.android.cts.CUIOutputStream.println ( "Test stopped." ) ; mTestThread.join ( ) ; } catch ( java.lang.InterruptedException e ) { com.android.cts.Log.d ( "test thread interrupted" ) ; } }
public java.lang.String getMeidForSlot ( int slotIndex , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( slotIndex ) ; if ( phone == null ) { return null ; } int subId = phone.getSubId ( ) ; if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , "getMeidForSlot" ) ) ) { return null ; } return phone.getMeid ( ) ; }
public void setMonetaryDecimalSeparatorString ( java.lang.String sep ) { if ( sep == null ) { throw new java.lang.NullPointerException ( "The input monetary decimal separator is null" ) ; } this . monetarySeparatorString = sep ; if ( ( sep.length ( ) ) == 1 ) { this . monetarySeparator = sep.charAt ( 0 ) ; } else { this . monetarySeparator = android.icu.text.DecimalFormatSymbols.DEF_DECIMAL_SEPARATOR ; } }
static boolean isMac ( ) { return java.lang.System.getProperty ( "os.name" ) . startsWith ( "Mac OS" ) ; }
public void testDownloadRequestSerialization ( ) throws java.lang.Exception { android.content.Intent intent = new android.content.Intent ( "sample_intent_action" ) ; android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.setAppIntent ( intent ) . build ( ) ; android.telephony.mbms.DownloadRequest newRequest = DownloadRequest.Builder.fromSerializedRequest ( request.toByteArray ( ) ) . build ( ) ; assertEquals ( request , newRequest ) ; }
public int getNumericCode ( ) { return icuCurrency.getNumericCode ( ) ; }
private void assertGatewayTimeout ( java.net.HttpURLConnection connection ) throws java.io.IOException { try { connection.getInputStream ( ) ; fail ( ) ; } catch ( java.io.FileNotFoundException expected ) { } assertEquals ( 504 , connection.getResponseCode ( ) ) ; assertEquals ( ( - 1 ) , connection.getErrorStream ( ) . read ( ) ) ; }
public void testDisplayTargetList ( ) { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main ( ) ; main.setLogger ( getLog ( ) ) ; main.setSdkManager ( getSdkManager ( ) ) ; getLog ( ) . clear ( ) ; main.displayTargetList ( ) ; assertEquals ( ( "P Available Android targets:\n" + ( ( ( ( ( ( ( "P ----------\n" + "P id: 1 or \"android-0\"\n" ) + "P Name: Android 0.0\n" ) + "P Type: Platform\n" ) + "P API level: 0\n" ) + "P Revision: 1\n" ) + "P Skins: HVGA (default), Tag1ArmSkin, Tag1X86Skin\n" ) + "P Tag/ABIs : default/armeabi, tag-1/armeabi, tag-1/x86\n" ) ) , getLog ( ) . toString ( ) ) ; }
public static int [ ] getSubId ( int slotIndex ) { if ( ! ( android.telephony.SubscriptionManager.isValidSlotIndex ( slotIndex ) ) ) { android.telephony.SubscriptionManager.logd ( "[getSubId]- fail" ) ; return null ; } int [ ] subId = null ; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface ( android.os.ServiceManager.getService ( "isub" ) ) ; if ( iSub != null ) { subId = iSub.getSubId ( slotIndex ) ; } } catch ( android.os.RemoteException ex ) { } return subId ; }
public void TestRTSentMonkey ( ) { int loopCount = 200 ; int seed = 1 ; if ( ( android.icu.dev.test.TestFmwk.getExhaustiveness ( ) ) >= 9 ) { loopCount = 1000 ; } logln ( "Sentence Break Monkey Test" ) ; android.icu.dev.test.rbbi.RBBITestMonkey.RBBISentenceMonkey m = new android.icu.dev.test.rbbi.RBBITestMonkey.RBBISentenceMonkey ( ) ; android.icu.text.BreakIterator bi = android.icu.text.BreakIterator.getSentenceInstance ( java.util.Locale.US ) ; java.lang.String rules = bi.toString ( ) ; android.icu.text.BreakIterator rtbi = new android.icu.text.RuleBasedBreakIterator ( rules ) ; RunMonkey ( rtbi , m , "sent" , seed , loopCount ) ; }
public void transferAtrResponse ( int token , int resultCode , java.util.ArrayList < java.lang.Byte > atr ) { android.util.Log.d ( com.android.bluetooth.sap.SapRilReceiver.TAG , ( ( ( "transferAtrResponse: token " + token ) + " resultCode " ) + resultCode ) ) ; com.android.bluetooth.sap.SapService.notifyUpdateWakeLock ( mSapServiceHandler ) ; com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage ( SapMessage.ID_TRANSFER_ATR_RESP ) ; sapMessage.setResultCode ( resultCode ) ; if ( resultCode == ( SapMessage.RESULT_OK ) ) { sapMessage.setAtr ( com.android.bluetooth.sap.SapRilReceiver.arrayListToPrimitiveArray ( atr ) ) ; } removeOngoingReqAndSendMessage ( token , sapMessage ) ; }
private void updateSendFailedNotification ( ) { final long threadId = mConversation.getThreadId ( ) ; if ( threadId <= 0 ) return ; new java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.android.mms.transaction.MessagingNotification.updateSendFailedNotificationForThread ( com.android.mms.ui.ComposeMessageActivity.this , threadId ) ; } } , "ComposeMessageActivity.updateSendFailedNotification" ) . start ( ) ; }
public void TestNorwegian ( ) { try { com.ibm.icu.util.UResourceBundle rb = com.ibm.icu.util.UResourceBundle.getBundleInstance ( ICUData.ICU_REGION_BASE_NAME , "no_NO_NY" ) ; com.ibm.icu.util.UResourceBundle sub = rb.get ( "Countries" ) ; java.lang.String s1 = sub.getString ( "NO" ) ; if ( s1.equals ( "Noreg" ) ) { logln ( "got expected output " ) ; } else { errln ( "did not get the expected result" ) ; } } catch ( java.lang.IllegalArgumentException ex ) { errln ( "Caught an unexpected expected" ) ; } }
public void test5_anyInRange ( ) { int [ ] bits = new int [ 100 ] ; for ( int i = 0 ; i < ( bits.length ) ; i ++ ) { bits [ i ] = - 1 ; } for ( int i = 1 ; i < 100 ; i += 11 ) { assertTrue ( com.android.dx.util.BitsTest.label ( i ) , com.android.dx.util.Bits.anyInRange ( bits , i , 100 ) ) ; } }
boolean okToConnect ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService ( ) ; int priority = mService.getPriority ( device ) ; if ( ( ( android.bluetooth.BluetoothProfile.PRIORITY_OFF ) < priority ) || ( ( ( android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED ) == priority ) && ( ( device.getBondState ( ) ) != ( android.bluetooth.BluetoothDevice.BOND_NONE ) ) ) ) { return true ; } logw ( ( "okToConnect not OK to connect " + device ) ) ; return false ; }
private com.android.jill.frontend.java.Variable getLocalVariable ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , @ javax.annotation.Nonnegative int localIdx ) { org.objectweb.asm.tree.analysis.BasicValue bv = frame.getLocal ( localIdx ) ; assert bv != ( org.objectweb.asm.tree.analysis.BasicValue.UNINITIALIZED_VALUE ) ; com.android.jill.frontend.java.Variable v ; java.lang.String id = getUnnamedLocalId ( localIdx , bv.getType ( ) ) ; java.lang.String localName = id ; org.objectweb.asm.Type localType = typeToUntyped ( bv.getType ( ) ) ; v = getVariableWithLocalIndex ( localIdx , id , localName , localType , null , com.android.jill.frontend.java.MethodBodyWriter.NO_MODIFIER ) ; return v ; }
public void testNewSms ( ) { transitionFromStartupToIdle ( ) ; mGsmInboundSmsHandler.sendMessage ( InboundSmsHandler.EVENT_NEW_SMS , new android.os.AsyncResult ( null , mSmsMessage , null ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( 100 ) ; verifySmsIntentBroadcasts ( 0 ) ; mGsmInboundSmsHandler.sendMessage ( InboundSmsHandler.EVENT_NEW_SMS , new android.os.AsyncResult ( null , mSmsMessage , null ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( 100 ) ; org.mockito.Mockito.verify ( mContext , org.mockito.Mockito.times ( 2 ) ) . sendBroadcast ( org.mockito.Matchers.any ( android.content.Intent.class ) ) ; org.junit.Assert.assertEquals ( "IdleState" , getCurrentState ( ) . getName ( ) ) ; }
public com.android.builder.model.AndroidProject getSingleModel ( boolean emulateStudio_1_0 , boolean assertNoSyncIssues ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > modelMap = com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection , new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , emulateStudio_1_0 ) ; org.junit.Assert.assertEquals ( "Quering GradleTestProject.getModel() with multi-project settings" , 1 , modelMap.size ( ) ) ; com.android.builder.model.AndroidProject androidProject = modelMap.get ( ":" ) ; if ( assertNoSyncIssues ) { com.android.build.gradle.integration.common.fixture.GradleTestProject.assertNoSyncIssues ( androidProject ) ; } return androidProject ; } finally { connection.close ( ) ; } }
public boolean equals ( java.lang.Object thatObject ) { if ( thatObject == ( this ) ) { return true ; } if ( ! ( thatObject instanceof com.android.server.wifi.hotspot2.anqp.eap.VendorSpecificAuth ) ) { return false ; } com.android.server.wifi.hotspot2.anqp.eap.VendorSpecificAuth that = ( ( com.android.server.wifi.hotspot2.anqp.eap.VendorSpecificAuth ) ( thatObject ) ) ; return java.util.Arrays.equals ( mData , that.mData ) ; }
public void onSurfaceChanged ( javax.microedition.khronos.opengles.GL10 unused , int width , int height ) { android.opengl.GLES20.glViewport ( 0 , 0 , width , height ) ; float ratio = ( ( float ) ( width ) ) / height ; mHeight = 1 ; mWidth = ratio ; mPosition [ 0 ] = ( mWidth ) / 2.0F ; mPosition [ 1 ] = ( mHeight ) / 2.0F ; android.opengl.Matrix.orthoM ( mProjectionMatrix , 0 , 0 , ratio , 0 , 1 , 3 , 20 ) ; }
public java.lang.String p2pServDiscReq ( java.lang.String addr , java.lang.String query ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.requestServiceDiscovery ( addr , query ) ; } else { java.lang.String command = "P2P_SERV_DISC_REQ" ; command += " " + addr ; command += " " + query ; return doStringCommand ( command ) ; } }
public static void unzip ( @ javax.annotation.Nonnull java.io.File jarfile , @ javax.annotation.Nonnull java.io.File outputFolder ) { java.lang.String [ ] args = new java.lang.String [ ] { "unzip" , "-qo" , jarfile.getAbsolutePath ( ) , "-d" , outputFolder.getAbsolutePath ( ) } ; com.android.jack.test.util.ExecuteFile execFile = new com.android.jack.test.util.ExecuteFile ( args ) ; try { if ( ( execFile.run ( ) ) != 0 ) { throw new java.lang.RuntimeException ( "Unzip exited with an error" ) ; } } catch ( com.android.jack.test.util.ExecFileException e ) { throw new java.lang.RuntimeException ( "An error occurred while running unzip" , e ) ; } }
public java.lang.String getSubscriberIdForSubscriber ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mContext , subId , callingPackage , "getSubscriberId" ) ) ) { return null ; } return phone.getSubscriberId ( ) ; } else { loge ( ( "getSubscriberId phone is null for Subscription:" + subId ) ) ; return null ; } }
private static void enforceCarrierPrivilege ( java.util.function.Supplier < com.android.internal.telephony.ITelephony > telephonySupplier , int subId , int uid , java.lang.String message ) { if ( ( com.android.internal.telephony.TelephonyPermissions.getCarrierPrivilegeStatus ( telephonySupplier , subId , uid ) ) != ( android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_HAS_ACCESS ) ) { if ( com.android.internal.telephony.TelephonyPermissions.DBG ) android.telephony.Rlog.e ( com.android.internal.telephony.TelephonyPermissions.LOG_TAG , "No Carrier Privilege." ) ; throw new java.lang.SecurityException ( message ) ; } }
private boolean isPackageDeviceAdmin ( java.lang.String packageName , int userId ) { android.app.admin.IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface ( android.os.ServiceManager.getService ( Context.DEVICE_POLICY_SERVICE ) ) ; try { if ( ( dpm != null ) && ( ( dpm.packageHasActiveAdmins ( packageName , userId ) ) || ( dpm.isDeviceOwner ( packageName ) ) ) ) { return true ; } } catch ( android.os.RemoteException e ) { } return false ; }
public void testNoLintWarningOnFlagsInLocalVariable ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "src/test/pkg/GetSignaturesLocalVariableTest.java:9: Information: Reading app signatures from getPackageInfo: The app signatures could be exploited if not validated properly; see issue explanation for details. [PackageManagerGetSignatures]\n" + " getPackageManager().getPackageInfo(\"some.pkg\", flags);\n" ) + " ~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( java ( "src/test/pkg/GetSignaturesLocalVariableTest.java" , ( "" + ( ( ( ( ( ( ( ( ( ( "package test.pkg;\n" + "\n" ) + "import android.app.Activity;\n" ) + "import android.content.pm.PackageManager;\n" ) + "\n" ) + "public class GetSignaturesLocalVariableTest extends Activity {\n" ) + " public void passLintCheck() throws Exception {\n" ) + " int flags = PackageManager.GET_SIGNATURES;\n" ) + " getPackageManager().getPackageInfo(\"some.pkg\", flags);\n" ) + " }\n" ) + "}" ) ) ) ) ) ; }
void riljLog ( java.lang.String msg ) { android.telephony.Rlog.d ( com.android.internal.telephony.RIL.RILJ_LOG_TAG , ( msg + ( ( mPhoneId ) != null ? ( " [SUB" + ( mPhoneId ) ) + "]" : "" ) ) ) ; }
protected void onLayout ( boolean changed , int l , int t , int r , int b ) { if ( ( mPager ) != null ) { final float offset = ( ( mLastKnownPositionOffset ) >= 0 ) ? mLastKnownPositionOffset : 0 ; int position = mPager.getCurrentItem ( ) ; if ( offset > 0.5F ) { position ++ ; } updateTextPositions ( position , offset , true ) ; } }
public java.lang.Number parse ( java.lang.String text , java.text.ParsePosition parsePosition ) { android.icu.impl.number.Properties pprops = android.icu.text.DecimalFormat.threadLocalProperties.get ( ) ; synchronized ( this ) { pprops.copyFrom ( properties ) ; } java.lang.Number result = android.icu.impl.number.Parse.parse ( text , parsePosition , pprops , symbols ) ; if ( result instanceof java.math.BigDecimal ) { result = safeConvertBigDecimal ( ( ( java.math.BigDecimal ) ( result ) ) ) ; } return result ; }
public void testHashCode ( ) throws java.text.ParseException { { java.lang.String rule = "&9 < a < b < c < d" ; java.text.RuleBasedCollator coll = new java.text.RuleBasedCollator ( rule ) ; assertEquals ( rule.hashCode ( ) , coll.hashCode ( ) ) ; } { java.lang.String rule = "&9 < a < b < c < d < e" ; java.text.RuleBasedCollator coll = new java.text.RuleBasedCollator ( rule ) ; assertEquals ( rule.hashCode ( ) , coll.hashCode ( ) ) ; } }
public void dispose ( ) { try { if ( ( mService ) != null ) { mService.dispose ( mDownloadAppName , mSubId ) ; } else { android.util.Log.i ( android.telephony.MbmsDownloadManager.LOG_TAG , "Service already dead" ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.i ( android.telephony.MbmsDownloadManager.LOG_TAG , "Remote exception while disposing of service" ) ; } }
java.lang.String getSCAddress ( ) { int len ; java.lang.String ret ; len = getByte ( ) ; if ( len == 0 ) { ret = null ; } else { try { ret = android.telephony.PhoneNumberUtils.calledPartyBCDToString ( mPdu , mCur , len , PhoneNumberUtils.BCD_EXTENDED_TYPE_CALLED_PARTY ) ; } catch ( java.lang.RuntimeException tr ) { android.telephony.Rlog.d ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "invalid SC address: " , tr ) ; ret = null ; } } mCur += len ; return ret ; }
protected boolean canDoTreeUp ( org.eclipse.jface.viewers.ISelection selection ) { if ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) { java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > selected = filterSelection ( ( ( org.eclipse.jface.viewers.ITreeSelection ) ( selection ) ) ) ; return mUiTreeActions.canDoUp ( selected ) ; } return false ; }
protected < DST extends com.android.sched.item.Component > java.util.Iterator < DST > adaptWithLog ( @ javax.annotation.Nonnull com.android.sched.schedulable.AdapterSchedulable < T , DST > adapter , @ javax.annotation.Nonnull T data ) throws com.android.sched.scheduler.AdapterProcessException { com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager.getManagedSchedulable ( adapter.getClass ( ) ) ; com.android.sched.util.log.Event event = logAndTrace ( adapter , managedSchedulable , data ) ; try { return adapter.adapt ( data ) ; } catch ( java.lang.Throwable e ) { throw new com.android.sched.scheduler.AdapterProcessException ( adapter , managedSchedulable , data , e ) ; } finally { event.end ( ) ; } }
public void test_getAllByName_localhost ( ) throws java.lang.Exception { java.net.InetAddress [ ] inetAddresses = java.net.InetAddress.getAllByName ( "localhost" ) ; org.junit.Assert.assertEquals ( 1 , inetAddresses.length ) ; java.net.InetAddress inetAddress = inetAddresses [ 0 ] ; libcore.java.net.InetAddressTest.checkInetAddress ( libcore.java.net.InetAddressTest.LOOPBACK4_BYTES , "localhost" , inetAddress ) ; org.junit.Assert.assertTrue ( inetAddress.isLoopbackAddress ( ) ) ; }
public void setField ( java.lang.String fieldName , java.lang.String valueString ) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass ( ) . getMethod ( com.ibm.icu.dev.test.format.DataDrivenNumberFormatTestData.fieldToSetter ( fieldName ) , java.lang.String.class ) ; try { m.invoke ( this , valueString ) ; } catch ( java.lang.IllegalAccessException e ) { throw new java.lang.RuntimeException ( e ) ; } catch ( java.lang.reflect.InvocationTargetException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , short [ ] data ) { validateIsInt16 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_16 , data.length ) ; }
private void assertOnErrors ( java.util.List < java.lang.Throwable > errorsFound ) { if ( ! ( errorsFound.isEmpty ( ) ) ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; for ( java.lang.Throwable error : errorsFound ) { builder.append ( error.getMessage ( ) ) . append ( "\n" ) ; } junit.framework.Assert.fail ( builder.toString ( ) ) ; } }
public java.util.List < android.content.pm.ResolveInfo > queryIntent ( android.content.Intent intent , java.lang.String resolvedType , int flags , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return null ; mFlags = flags ; return super . queryIntent ( intent , resolvedType , ( ( flags & ( android.content.pm.PackageManager.MATCH_DEFAULT_ONLY ) ) != 0 ) , userId ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object element ) { if ( com.google.common.collect.Collections2.safeContains ( unfiltered , element ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E e = ( ( E ) ( element ) ) ; return predicate.apply ( e ) ; } return false ; }
public java.lang.String getSuiteName ( ) { java.lang.Object ref = suiteName_ ; if ( ! ( ref instanceof java.lang.String ) ) { com.android.vts.proto.ByteString bs = ( ( com.android.vts.proto.ByteString ) ( ref ) ) ; java.lang.String s = bs.toStringUtf8 ( ) ; if ( bs.isValidUtf8 ( ) ) { suiteName_ = s ; } return s ; } else { return ( ( java.lang.String ) ( ref ) ) ; } }
public void waitForEvents ( int eventCount ) { if ( ( mTestSensorEventListener ) == null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "No listener registered, returning." ) ; return ; } mTestSensorEventListener.waitForEvents ( eventCount ) ; }
public void test_testClassLoader_getResourceLjava_lang_String ( ) { java.lang.ClassLoader parentClassLoader = testClassLoader.getParent ( ) ; assertNull ( parentClassLoader.getResource ( org.apache.harmony.tests.java.lang.ClassLoaderTest.TEST_RESOURCE_NAME ) ) ; org.apache.harmony.tests.java.lang.ClassLoaderTest.assertGetResourceIsValid ( parentClassLoader , org.apache.harmony.tests.java.lang.ClassLoaderTest.BOOT_RESOURCE_NAME ) ; org.apache.harmony.tests.java.lang.ClassLoaderTest.assertGetResourceIsValid ( testClassLoader , org.apache.harmony.tests.java.lang.ClassLoaderTest.TEST_RESOURCE_NAME ) ; org.apache.harmony.tests.java.lang.ClassLoaderTest.assertGetResourceIsValid ( testClassLoader , org.apache.harmony.tests.java.lang.ClassLoaderTest.BOOT_RESOURCE_NAME ) ; }
public java.nio.ByteBuffer putShort ( int index , short value ) { checkNotFreed ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkIndex ( index , SizeOf.SHORT ) ; this . block.pokeShort ( ( ( offset ) + index ) , value , order ) ; return this ; }
static byte [ ] readFile ( java.io.InputStream in , long expectedSize ) throws java.io.IOException { if ( expectedSize > ( java.lang.Integer.MAX_VALUE ) ) { throw new java.lang.OutOfMemoryError ( ( ( "file is too large to fit in a byte array: " + expectedSize ) + " bytes" ) ) ; } return expectedSize == 0 ? com.google.common.io.ByteStreams.toByteArray ( in ) : com.google.common.io.ByteStreams.toByteArray ( in , ( ( int ) ( expectedSize ) ) ) ; }
static boolean isInExternalStorageDir ( android.net.Uri uri ) { if ( ! ( ContentResolver.SCHEME_FILE.equals ( uri.getScheme ( ) ) ) ) { android.util.Log.e ( com.android.bluetooth.opp.BluetoothOppUtility.TAG , ( "Not a file URI: " + uri ) ) ; return false ; } final java.io.File file = new java.io.File ( uri.getCanonicalUri ( ) . getPath ( ) ) ; return com.android.bluetooth.opp.BluetoothOppUtility.isSameOrSubDirectory ( android.os.Environment.getExternalStorageDirectory ( ) , file ) ; }
private boolean replaceAttribute ( int attributesCount , proguard.classfile.editor.Attribute [ ] attributes , proguard.classfile.editor.Attribute attribute ) { int index = findAttributeIndex ( attributesCount , attributes , attribute.getAttributeName ( targetClass ) ) ; if ( index < 0 ) { return false ; } attributes [ index ] = attribute ; return true ; }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( "getConnectionState(): device=" + device ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothInputHost.STATE_DISCONNECTED ; } return service.getConnectionState ( device ) ; }
private static java.lang.String toTelecomDisconnectReason ( android.content.Context context , int telephonyDisconnectCause , java.lang.String reason ) { if ( context == null ) { return "" ; } switch ( telephonyDisconnectCause ) { case android.telecom.DisconnectCause.POWER_OFF : case android.telecom.DisconnectCause.OUT_OF_SERVICE : if ( com.android.phone.ImsUtil.shouldPromoteWfc ( context ) ) { return android.telecom.DisconnectCause.REASON_WIFI_ON_BUT_WFC_OFF ; } break ; case android.telecom.DisconnectCause.IMS_ACCESS_BLOCKED : return android.telecom.DisconnectCause.REASON_IMS_ACCESS_BLOCKED ; } java.lang.String causeAsString = android.telephony.DisconnectCause.toString ( telephonyDisconnectCause ) ; if ( reason == null ) { return causeAsString ; } else { return ( reason + ", " ) + causeAsString ; } }
public void clearAllScoClients ( int exceptPid , boolean stopSco ) { synchronized ( mScoClients ) { com.android.server.audio.AudioService.ScoClient savedClient = null ; for ( com.android.server.audio.AudioService.ScoClient cl : mScoClients ) { if ( ( cl.getPid ( ) ) != exceptPid ) { cl.clearCount ( stopSco ) ; } else { savedClient = cl ; } } mScoClients.clear ( ) ; if ( savedClient != null ) { mScoClients.add ( savedClient ) ; } } }
android.net.wifi.aware.WifiAwareSession attachAndGetSession ( ) { android.net.wifi.aware.cts.SingleDeviceTest.AttachCallbackTest attachCb = new android.net.wifi.aware.cts.SingleDeviceTest.AttachCallbackTest ( ) ; mWifiAwareManager.attach ( attachCb , null ) ; int cbCalled = attachCb.waitForAnyCallback ( ) ; assertEquals ( "Wi-Fi Aware attach" , android.net.wifi.aware.cts.SingleDeviceTest.AttachCallbackTest.ATTACHED , cbCalled ) ; android.net.wifi.aware.WifiAwareSession session = attachCb.getSession ( ) ; assertNotNull ( "Wi-Fi Aware session" , session ) ; return session ; }
public void turnOffProximitySensor ( boolean screenOnImmediately ) { try { android.telecom.Log.startSession ( "ICA.tOffPS" , mOwnerComponentName ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { mCallsManager.turnOffProximitySensor ( screenOnImmediately ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void run ( long sslSession ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.SSL_shutdown ( sslSession , org.conscrypt.NativeCryptoTest.INVALID_FD , null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public void testDefaultConstructor ( ) { android.telephony.CellIdentityTdscdma ci = new android.telephony.CellIdentityTdscdma ( com.android.internal.telephony.CellIdentityTdscdmaTest.MCC_STR , com.android.internal.telephony.CellIdentityTdscdmaTest.MNC_STR , com.android.internal.telephony.CellIdentityTdscdmaTest.LAC , com.android.internal.telephony.CellIdentityTdscdmaTest.CID , com.android.internal.telephony.CellIdentityTdscdmaTest.CPID ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.MCC_STR , ci.getMccString ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.MNC_STR , ci.getMncString ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.LAC , ci.getLac ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.CID , ci.getCid ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.CPID , ci.getCpid ( ) ) ; }
private void msgDeviceBrowseConnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG ) android.util.Log.d ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , ( "msgDeviceBrowseConnect device " + device ) ) ; if ( ! ( device.equals ( mA2dpDevice ) ) ) { android.util.Log.e ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , ( ( ( "Browse connected over different device a2dp " + ( mA2dpDevice ) ) + " browse " ) + device ) ) ; return ; } mBrowseConnected = true ; notifyChildrenChanged ( "__ROOT__" ) ; }
public boolean enableSupplicant ( ) { if ( ( mClientInterface ) == null ) { android.util.Log.e ( com.android.server.wifi.WificondControl.TAG , "No valid wificond client interface handler" ) ; return false ; } try { return mClientInterface.enableSupplicant ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.WificondControl.TAG , "Failed to enable supplicant due to remote exception" ) ; } return false ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeInt ( mTransportType ) ; dest.writeInt ( mDomain ) ; dest.writeInt ( mRegState ) ; dest.writeInt ( mAccessNetworkTechnology ) ; dest.writeInt ( mReasonForDenial ) ; dest.writeBoolean ( mEmergencyOnly ) ; dest.writeIntArray ( mAvailableServices ) ; dest.writeParcelable ( mCellIdentity , 0 ) ; dest.writeParcelable ( mVoiceSpecificStates , 0 ) ; dest.writeParcelable ( mDataSpecificStates , 0 ) ; }
private org.eclipse.jface.text.hyperlink.IHyperlink [ ] createTypeLink ( org.eclipse.jdt.core.IJavaElement element , org.eclipse.jdt.core.IJavaElement type , org.eclipse.jface.text.IRegion wordRegion , boolean isFrameworkResource ) { java.lang.String typeName = type.getElementName ( ) ; if ( isFrameworkResource ) { typeName = ( ( com.android.ide.eclipse.adt.AdtConstants.ANDROID_PKG ) + ':' ) + typeName ; } java.lang.String elementName = element.getElementName ( ) ; java.lang.String url = ( ( '@' + typeName ) + '/' ) + elementName ; return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getResourceLinks ( wordRegion , url ) ; }
protected org.eclipse.core.runtime.IStatus run ( org.eclipse.core.runtime.IProgressMonitor monitor ) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService ( ) ; java.io.File sdkFolder = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault ( ) . getSdkFolder ( ) ; if ( sdkFolder == null ) { return org.eclipse.core.runtime.Status.OK_STATUS ; } java.lang.String toolsPath = new java.io.File ( sdkFolder , com.android.SdkConstants.FD_TOOLS ) . getAbsolutePath ( ) ; com.android.ide.eclipse.monitor.MonitorStartup.ping ( stats , toolsPath ) ; return org.eclipse.core.runtime.Status.OK_STATUS ; }
public void testConstructor_CaliperBenchmark ( ) throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( "-i" , "runtime" ) ; runner.run ( ) ; java.lang.String out = ios.contents ( Stream.OUT ) ; out = out.replaceAll ( "\t[^\n]+\\n" , "" ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.CaliperBenchmark.class . getName ( ) ) ) + "\"}\n" ) + "Experiment selection: \n" ) + " Benchmark Methods: [timeMethod]\n" ) + " Instruments: [runtime]\n" ) + " User parameters: {}\n" ) + " Virtual machines: [default]\n" ) + " Selection type: Full cartesian product\n" ) + "\n" ) + "This selection yields 1 experiments.\n" ) + ( com.google.caliper.runner.UserCodeException.class . getName ( ) ) ) + ": An exception was thrown from the benchmark code\n" ) + "Caused by: " ) + ( java.lang.IllegalStateException.class . getName ( ) ) ) + ": " ) + ( vogar.target.TestRunnerTest.CaliperBenchmark.CALIPER_BENCHMARK_MESSAGE ) ) + "\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , out ) ; }
public void printPlan ( @ javax.annotation.Nonnull com.android.sched.scheduler.Plan < ? > plan ) throws com.android.sched.util.file.CannotWriteException { com.android.sched.util.stream.CustomPrintWriter writer = null ; try { writer = planFile.getPrintWriter ( ) ; printSubPlan ( plan , writer ) ; } finally { if ( writer != null ) { writer.close ( ) ; try { writer.throwPendingException ( ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.file.CannotWriteException ( planFile.getLocation ( ) , e ) ; } } } }
public synchronized void fillSwitchMapClass ( @ javax.annotation.Nonnull com.android.jack.transformations.enums.OptimizationUtil supportUtil , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass switchMapClass ) { this . enumType = enumType ; this . supportUtil = supportUtil ; this . switchMapClass = switchMapClass ; com.android.jack.transformations.request.TransformationRequest transformRequest = new com.android.jack.transformations.request.TransformationRequest ( switchMapClass ) ; if ( com.android.jack.transformations.enums.opt.SyntheticClassManager.isSyntheticSwitchMapClass ( switchMapClass ) ) { createInstanceInitIfNotExists ( transformRequest ) ; } createOrUpdateSyntheticInitializer ( transformRequest ) ; transformRequest.commit ( ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof android.net.LinkAddress ) ) { return false ; } android.net.LinkAddress linkAddress = ( ( android.net.LinkAddress ) ( obj ) ) ; return ( ( ( this . address.equals ( linkAddress.address ) ) && ( ( this . prefixLength ) == ( linkAddress.prefixLength ) ) ) && ( ( this . flags ) == ( linkAddress.flags ) ) ) && ( ( this . scope ) == ( linkAddress.scope ) ) ; }
public java.io.File getTestsDir ( ) throws java.io.FileNotFoundException { return mTestDir ; }
private void startAsyncQuery ( ) { try { ( ( android.widget.TextView ) ( getListView ( ) . getEmptyView ( ) ) ) . setText ( R.string.loading_conversations ) ; com.android.mms.data.Conversation.startQueryForAll ( mQueryHandler , com.android.mms.ui.ConversationList.THREAD_LIST_QUERY_TOKEN ) ; com.android.mms.data.Conversation.startQuery ( mQueryHandler , com.android.mms.ui.ConversationList.UNREAD_THREADS_QUERY_TOKEN , ( ( android.provider.Telephony.Threads.READ ) + "=0" ) ) ; } catch ( android.database.sqlite.SQLiteException e ) { android.database.sqlite.SqliteWrapper.checkSQLiteException ( this , e ) ; } }
private static android.hardware.cts.helpers.sensorverification.MagnitudeVerification getVerification ( float expected , float threshold , float [ ] ... values ) { java.util.Collection < android.hardware.cts.helpers.TestSensorEvent > events = new java.util.ArrayList < > ( values.length ) ; for ( float [ ] value : values ) { events.add ( new android.hardware.cts.helpers.TestSensorEvent ( null , 0 , 0 , value ) ) ; } android.hardware.cts.helpers.sensorverification.MagnitudeVerification verification = new android.hardware.cts.helpers.sensorverification.MagnitudeVerification ( expected , threshold ) ; verification.addSensorEvents ( events ) ; return verification ; }
public boolean equals ( @ javax.annotation.Nullable java.lang.Object object ) { if ( object instanceof com.google.common.collect.Maps.BiMapConverter ) { com.google.common.collect.Maps.BiMapConverter < ? , ? > that = ( ( com.google.common.collect.Maps.BiMapConverter < ? , ? > ) ( object ) ) ; return this . bimap.equals ( that.bimap ) ; } return false ; }
public void testGetDeviceIdForSlot ( ) { java.lang.String deviceId = mTelephonyManager.getDeviceId ( mTelephonyManager.getSlotIndex ( ) ) ; verifyDeviceId ( deviceId ) ; for ( int i = - 1 ; i <= ( mTelephonyManager.getPhoneCount ( ) ) ; i ++ ) { mTelephonyManager.getDeviceId ( i ) ; } }
synchronized boolean unplug ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , ( "unplug(): device=" + device ) ) ; if ( ! ( checkDevice ( device ) ) ) { return false ; } return unplugNative ( ) ; }
private void maybeStartSearch ( com.android.incallui.call.DialerCall call , boolean isPrimary ) { if ( ( call != null ) && ( ! ( call.isConferenceCall ( ) ) ) ) { startContactInfoSearch ( call , isPrimary , ( ( call.getState ( ) ) == ( com.android.incallui.call.state.DialerCallState.INCOMING ) ) ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( content ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( bytecode ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , ( ( lambdaFixer.getInternalName ( ) ) + ".class" ) , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
public void testTypeText_NonEnglish ( ) { expectedException.expect ( java.lang.RuntimeException.class ) ; java.lang.String toType = "在一个月之内的话" ; android.support.test.espresso.Espresso.onView ( org.hamcrest.Matchers.allOf ( android.support.test.espresso.matcher.ViewMatchers.withParent ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.delegating_edit_text ) ) , android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.delegate_edit_text ) ) ) . perform ( android.support.test.espresso.action.ViewActions.scrollTo ( ) , android.support.test.espresso.action.ViewActions.typeText ( toType ) ) ; }
public com.android.jack.ir.ast.JDefinedClass create ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader ) { assert ( signature ) != null ; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor ( signature ) ; java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName ( binaryName ) ; com.android.jack.ir.ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN , simpleName , modifiers , enclosingPackage , loader ) ; return jClassType ; }
synchronized void nAllocationRead1D ( long id , int off , int mip , int count , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationRead1D ( mContext , id , off , mip , count , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
public java.lang.Object clone ( ) throws java.lang.CloneNotSupportedException { if ( ( spiImpl ) instanceof java.lang.Cloneable ) { java.security.SignatureSpi spi = ( ( java.security.SignatureSpi ) ( spiImpl.clone ( ) ) ) ; return new java.security.Signature.SignatureImpl ( getAlgorithm ( ) , getProvider ( ) , spiImpl ) ; } throw new java.lang.CloneNotSupportedException ( ) ; }
private java.util.List < java.lang.Integer > readTypeIds ( ) { com.android.jack.dx.io.DexBuffer.Section typeIds = openInternal ( tableOfContents.typeIds.off ) ; java.lang.Integer [ ] result = new java.lang.Integer [ tableOfContents.typeIds.size ] ; for ( int i = 0 ; i < ( tableOfContents.typeIds.size ) ; ++ i ) { result [ i ] = java.lang.Integer.valueOf ( typeIds.readInt ( ) ) ; } return java.util.Arrays.asList ( result ) ; }
public synchronized void reset ( ) throws java.io.IOException { if ( ! ( in.markSupported ( ) ) ) { throw new java.io.IOException ( "Mark not supported" ) ; } if ( ( mark ) == ( - 1 ) ) { throw new java.io.IOException ( "Mark not set" ) ; } in.reset ( ) ; left = mark ; }
private android.bluetooth.BluetoothHeadsetClientCall getCall ( int ... states ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "getFromCallsWithStates states:" + ( java.util.Arrays.toString ( states ) ) ) ) ; } for ( android.bluetooth.BluetoothHeadsetClientCall c : mCalls.values ( ) ) { for ( int s : states ) { if ( ( c.getState ( ) ) == s ) { return c ; } } } return null ; }
private static org.hamcrest.Matcher < android.view.View > getVisibleMenuItemMatcher ( java.lang.String itemLabel , boolean enabled ) { return org.hamcrest.Matchers.allOf ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( com.android.internal.view.menu.ListMenuItemView.class ) , android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( itemLabel ) ) , ( enabled ? android.support.test.espresso.matcher.ViewMatchers.isEnabled ( ) : org.hamcrest.Matchers.not ( android.support.test.espresso.matcher.ViewMatchers.isEnabled ( ) ) ) , android.support.test.espresso.matcher.ViewMatchers.isDisplayingAtLeast ( 90 ) ) ; }
private void addFolder ( com.android.ide.common.resources.ResourceRepository resources , com.android.ide.common.resources.configuration.FolderConfiguration config , org.eclipse.core.resources.IFile [ ] memberList ) throws java.lang.Exception { java.lang.String folderName = config.getFolderName ( ResourceFolderType.LAYOUT ) ; org.eclipse.core.resources.IFolder folder = com.android.ide.eclipse.mock.Mocks.createFolder ( folderName , memberList ) ; com.android.ide.common.resources.ResourceFolder resFolder = _addProjectResourceFolder ( resources , config , folder ) ; for ( org.eclipse.core.resources.IFile file : memberList ) { resFolder.addFile ( new com.android.ide.common.resources.SingleResourceFile ( new com.android.ide.eclipse.adt.io.IFileWrapper ( file ) , resFolder ) ) ; } }
private boolean isDayFirst ( ) { final java.lang.String value = libcore.icu.LocaleData.get ( getResources ( ) . getConfiguration ( ) . locale ) . getDateFormat ( java.text.DateFormat.SHORT ) ; return ( value.indexOf ( 'M' ) ) > ( value.indexOf ( 'd' ) ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "VoicemailTosMessageCreator.getPromoMessage" , "declined transcription" ) ; com.android.voicemail.VoicemailClient voicemailClient = com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) ; voicemailClient.setVoicemailTranscriptionEnabled ( context , status.getPhoneAccountHandle ( ) , false ) ; }
public void enter ( ) { removeDeferredMessages ( com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT ) ; log ( ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; if ( ( ( mTargetDevice ) != null ) || ( ( mIncomingDevice ) != null ) ) { loge ( ( ( ( ( ( "ERROR: enter() inconsistent state in Connected: current = " + ( mCurrentDevice ) ) + " target = " ) + ( mTargetDevice ) ) + " incoming = " ) + ( mIncomingDevice ) ) ) ; } broadcastAudioState ( mCurrentDevice , BluetoothA2dp.STATE_NOT_PLAYING , BluetoothA2dp.STATE_PLAYING ) ; }
public void test_getLast ( ) { assertTrue ( "Returned incorrect first element" , ll.getLast ( ) . equals ( objArray [ ( ( objArray.length ) - 1 ) ] ) ) ; java.util.LinkedList list = new java.util.LinkedList ( ) ; try { list.getLast ( ) ; fail ( "Should throw NoSuchElementException" ) ; } catch ( java.util.NoSuchElementException e ) { } }
public android.net.IpSecTransform buildTransportModeTransform ( @ android.annotation.NonNull java.net.InetAddress sourceAddress , @ android.annotation.NonNull android.net.IpSecManager.SecurityParameterIndex spi ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { com.android.internal.util.Preconditions.checkNotNull ( sourceAddress ) ; com.android.internal.util.Preconditions.checkNotNull ( spi ) ; if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setMode ( android.net.IpSecTransform.MODE_TRANSPORT ) ; mConfig.setSourceAddress ( sourceAddress.getHostAddress ( ) ) ; mConfig.setSpiResourceId ( spi.getResourceId ( ) ) ; return new android.net.IpSecTransform ( mContext , mConfig ) . activate ( ) ; }
synchronized void nScriptInvokeV ( long id , int slot , byte [ ] params , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptInvokeV ( curCon , id , slot , params , mUseInc ) ; }
public java.lang.String getText ( java.lang.Object element ) { if ( element instanceof com.android.sdkuilib.internal.repository.SdkUpdaterChooserDialog.LicenseEntry ) { return ( ( com.android.sdkuilib.internal.repository.SdkUpdaterChooserDialog.LicenseEntry ) ( element ) ) . getLicenseRef ( ) ; } else if ( element instanceof com.android.sdkuilib.internal.repository.ArchiveInfo ) { com.android.sdkuilib.internal.repository.ArchiveInfo ai = ( ( com.android.sdkuilib.internal.repository.ArchiveInfo ) ( element ) ) ; java.lang.String desc = ai.getShortDescription ( ) ; if ( ai.isDependencyFor ( ) ) { desc += " [*]" ; } return desc ; } assert ( element instanceof java.lang.String ) || ( element instanceof com.android.sdkuilib.internal.repository.ArchiveInfo ) ; return null ; }
private java.lang.StringBuilder append ( java.lang.StringBuilder sb , int w , int d ) { while ( w > 0 ) { sb.append ( ( ( char ) ( ( d / w ) + '0' ) ) ) ; d = d % w ; w /= 10 ; } return sb ; }
public void onStop ( ) { super . onStop ( ) ; mPairedDevicesCategory.removeAll ( ) ; if ( ( mBluetoothEnabler ) != null ) { mBluetoothEnabler.pause ( ) ; } mLocalAdapter.setScanMode ( BluetoothAdapter.SCAN_MODE_CONNECTABLE ) ; if ( isUiRestricted ( ) ) { return ; } getActivity ( ) . unregisterReceiver ( mReceiver ) ; }
private void sendPing ( java.io.FileDescriptor s , java.net.InetAddress address , byte [ ] packet ) throws android.system.ErrnoException , java.io.IOException { int port = ( ( int ) ( ( java.lang.Math.random ( ) ) * 2048 ) ) ; int ret = android.system.Os.sendto ( s , java.nio.ByteBuffer.wrap ( packet ) , 0 , address , port ) ; assertEquals ( packet.length , ret ) ; }
public void testScreenUnlocked ( ) throws java.lang.Exception { android.content.pm.PackageManager pm = getContext ( ) . getPackageManager ( ) ; if ( ( ( pm.hasSystemFeature ( PackageManager.FEATURE_LEANBACK ) ) || ( pm.hasSystemFeature ( PackageManager.FEATURE_WATCH ) ) ) || ( pm.hasSystemFeature ( PackageManager.FEATURE_AUTOMOTIVE ) ) ) { android.util.Log.i ( com.android.cts.preconditions.PreconditionsTest.TAG , "Skipping screen lock precondition for this device type" ) ; return ; } android.app.KeyguardManager km = ( ( android.app.KeyguardManager ) ( getContext ( ) . getSystemService ( Context.KEYGUARD_SERVICE ) ) ) ; assertFalse ( "Device must have screen lock disabled" , km.isDeviceSecure ( ) ) ; }
protected void tearDown ( ) throws java.lang.Exception { if ( mShouldTestTelecom ) { cleanupCalls ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( mPreviousDefaultDialer ) ) ) { android.telecom.cts.TestUtils.setDefaultDialer ( getInstrumentation ( ) , mPreviousDefaultDialer ) ; } tearDownConnectionService ( android.telecom.cts.BaseTelecomTestWithMockServices.TEST_PHONE_ACCOUNT_HANDLE ) ; assertMockInCallServiceUnbound ( ) ; } super . tearDown ( ) ; }
private com.android.sdklib.IAndroidTarget getRenderingTarget ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk == null ) { return null ; } com.android.sdklib.IAndroidTarget renderingTarget = mConfigComposite.getRenderingTarget ( ) ; if ( renderingTarget != null ) { return renderingTarget ; } if ( ( mEditedFile ) != null ) { return currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; } return null ; }
final void runInBackgroundDisabled ( int uid ) { synchronized ( this ) { com.android.server.am.UidRecord uidRec = mActiveUids.get ( uid ) ; if ( uidRec != null ) { if ( uidRec.idle ) { doStopUidLocked ( uidRec.uid , uidRec ) ; } } else { doStopUidLocked ( uid , null ) ; } } }
public void postUrl ( java.lang.String url , byte [ ] postData ) { org.chromium.content_public.browser.LoadUrlParams params = org.chromium.content_public.browser.LoadUrlParams.createLoadHttpPostParams ( url , postData ) ; java.util.Map < java.lang.String , java.lang.String > headers = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; headers.put ( "Content-Type" , "application/x-www-form-urlencoded" ) ; params.setExtraHeaders ( headers ) ; loadUrlOnUiThread ( params ) ; }
private com.android.sched.vfs.VPath getPathFromPackage ( @ javax.annotation.Nonnull java.lang.String simpleName ) { com.android.sched.vfs.VPath typePath ; if ( ( packagePath ) != null ) { typePath = packagePath.clone ( ) ; typePath.appendPath ( new com.android.sched.vfs.VPath ( simpleName , '/' ) ) ; } else { typePath = new com.android.sched.vfs.VPath ( simpleName , '/' ) ; } return typePath ; }
private static native int nativeForkAndSpecialize ( int uid , int gid , int [ ] gids , int runtimeFlags , int [ ] [ ] rlimits , int mountExternal , java.lang.String seInfo , java.lang.String niceName , int [ ] fdsToClose , int [ ] fdsToIgnore , java.lang.String instructionSet , java.lang.String appDataDir ) ;
private int getScaledMaxYScroll ( ) { int height ; if ( ( mHeightCanMeasure ) == false ) { height = ( getViewHeight ( ) ) / 4 ; } else { android.graphics.Rect visRect = new android.graphics.Rect ( ) ; calcOurVisibleRect ( visRect ) ; height = ( visRect.height ( ) ) / 2 ; } return java.lang.Math.round ( ( height * ( mInvActualScale ) ) ) ; }
public java.lang.String findIntegerExamples ( @ com.android.annotations.NonNull java.lang.String language , @ com.android.annotations.NonNull com.android.tools.lint.checks.PluralsDatabase.Quantity quantity ) { if ( quantity == ( com.android.tools.lint.checks.PluralsDatabase.Quantity.one ) ) { return com.android.tools.lint.checks.PluralsDatabase.getExampleForQuantityOne ( language ) ; } else if ( quantity == ( com.android.tools.lint.checks.PluralsDatabase.Quantity.two ) ) { return com.android.tools.lint.checks.PluralsDatabase.getExampleForQuantityTwo ( language ) ; } else if ( quantity == ( com.android.tools.lint.checks.PluralsDatabase.Quantity.zero ) ) { return com.android.tools.lint.checks.PluralsDatabase.getExampleForQuantityZero ( language ) ; } else { return null ; } }
synchronized void onInterruptDataFromNative ( byte reportId , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onInterruptData(): reportId=" + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap ( data ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_INTR_DATA ) ; msg.arg1 = reportId ; msg.obj = bb ; mHandler.sendMessage ( msg ) ; }
public void testGlGetString ( ) { java.lang.String retValue = "testString" ; com.android.ide.eclipse.gltrace.GLEnum arg1 = com.android.ide.eclipse.gltrace.GLEnum.GL_RENDERER ; com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage msg = constructGLMessage ( createStringDataType ( retValue ) , Function.glGetString , createEnumDataType ( arg1.value ) ) ; java.lang.String expected = java.lang.String.format ( "%s(name = %s) = (const GLchar*) %s" , Function.glGetString , arg1.toString ( ) , retValue ) ; java.lang.String actual = com.android.ide.eclipse.gltrace.format.GLMessageFormatterTest.sGLMessageFormatter.formatGLMessage ( msg ) ; assertEquals ( expected , actual ) ; }
public boolean updatePublish ( short transactionId , android.net.wifi.nan.PublishConfig config ) { if ( ! ( mIsPublishSession ) ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , "A SUBSCRIBE session is being used to publish" ) ; try { mCallback.onSessionConfigFail ( WifiNanDiscoverySessionCallback.REASON_OTHER ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , ( "updatePublish: RemoteException=" + e ) ) ; } return false ; } return com.android.server.wifi.nan.WifiNanNative.getInstance ( ) . publish ( transactionId , mPubSubId , config ) ; }
protected void tearDown ( ) throws java.lang.Exception { if ( ( mHasFeature ) && ( ( mActivityDoneReceiver ) != null ) ) { try { mContext.unregisterReceiver ( mActivityDoneReceiver ) ; } catch ( java.lang.IllegalArgumentException e ) { } mActivityDoneReceiver = null ; } super . tearDown ( ) ; }
public void testNameAliasing ( ) { int input = 'Ƣ' ; java.lang.String alias = android.icu.lang.UCharacter.getNameAlias ( input ) ; assertEquals ( "Wrong name alias" , "LATIN CAPITAL LETTER GHA" , alias ) ; int output = android.icu.lang.UCharacter.getCharFromNameAlias ( alias ) ; assertEquals ( ( ( "alias for '" + input ) + "'" ) , input , output ) ; }
private static long sadChar2LongAt1 ( char [ ] s1 , char [ ] s2 ) { int min_length = java.lang.Math.min ( s1.length , s2.length ) ; long sad = 1 ; for ( int i = 0 ; i < min_length ; i ++ ) { long x = s1 [ i ] ; long y = s2 [ i ] ; sad += java.lang.Math.abs ( ( x - y ) ) ; } return sad ; }
public void testLibProguardConsumerFile ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguardConsumerFiles" ) ; java.io.File debugFileOutput = new java.io.File ( project , "build/bundles/debug" ) ; java.io.File releaseFileOutput = new java.io.File ( project , "build/bundles/release" ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( debugFileOutput , "proguard.txt" , new java.lang.String [ ] { "A" } ) ; com.android.build.gradle.ManualBuildTest.checkFile ( releaseFileOutput , "proguard.txt" , new java.lang.String [ ] { "A" , "B" , "C" } ) ; }
public void testGetOutputAfterGetInputStreamFails ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.setDoOutput ( true ) ; try { connection.getInputStream ( ) ; connection.getOutputStream ( ) ; org.junit.Assert.fail ( ) ; } catch ( java.net.ProtocolException expected ) { } }
public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( com.android.vts.entity.TestEntity.class . isAssignableFrom ( obj.getClass ( ) ) ) ) ) { return false ; } com.android.vts.entity.TestEntity test2 = ( ( com.android.vts.entity.TestEntity ) ( obj ) ) ; return ( this . testName.equals ( test2.testName ) ) && ( ( this . hasProfilingData ) == ( test2.hasProfilingData ) ) ; }
public void checkCall ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodInsnNode call ) { java.lang.String owner = call.owner ; if ( ( owner.equals ( "android/util/FloatMath" ) ) && ( ( context.getProject ( ) . getMinSdk ( ) ) >= 8 ) ) { java.lang.String message = java.lang.String.format ( ( "Use `java.lang.Math#%1$s` instead of `android.util.FloatMath#%1$s()` " + "since it is faster as of API 8" ) , call.name ) ; context.report ( com.android.tools.lint.checks.MathDetector.ISSUE , method , call , context.getLocation ( call ) , message , null ) ; } }
public void onOffloadEvent ( int event ) { mLog.log ( ( "got offload event: " + event ) ) ; }
public void visitClassConstant ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.ClassConstant classConstant ) { if ( proguard.classfile.editor.ClassUtil.isInternalArrayType ( classConstant.getName ( clazz ) ) ) { isInterfaceMethod = false ; } else { proguard.classfile.editor.Clazz referencedClass = classConstant.referencedClass ; if ( referencedClass != null ) { isInterfaceMethod = ( ( referencedClass.getAccessFlags ( ) ) & ( ClassConstants.ACC_INTERFACE ) ) != 0 ; } } }
protected static java.io.File getJackFile ( @ javax.annotation.Nonnull java.lang.String typeName ) { return new java.io.File ( com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder , ( ( ( FileType.JAYCE.getPrefix ( ) ) + ( java.io.File.separatorChar ) ) + ( new com.android.sched.vfs.VPath ( ( typeName + ( com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION ) ) , com.android.jack.experimental.incremental.JackIncremental.fileSeparator ) . getPathAsString ( java.io.File.separatorChar ) ) ) ) ; }
public void addU64 ( android.support.v8.renderscript.Long4 v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addU64 ( v ) ; return ; } addU64 ( v.x ) ; addU64 ( v.y ) ; addU64 ( v.z ) ; addU64 ( v.w ) ; }
private java.lang.String reformat ( com.android.ide.common.xml.XmlFormatStyle style , java.lang.String contents ) { if ( com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs ( ) . getUseCustomXmlFormatter ( ) ) { com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences formatPrefs = com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlFormatPreferences.create ( ) ; return com.android.ide.eclipse.adt.internal.editors.formatting.EclipseXmlPrettyPrinter.prettyPrint ( contents , formatPrefs , style , null ) ; } else { return contents ; } }
private static java.lang.String cleanup ( @ com.android.annotations.Nullable java.lang.String name ) { if ( name == null ) { return "" ; } java.lang.StringBuilder sb = new java.lang.StringBuilder ( name.length ( ) ) ; for ( int i = 0 ; i < ( name.length ( ) ) ; i ++ ) { char c = name.charAt ( i ) ; if ( java.lang.Character.isJavaIdentifierPart ( c ) ) { sb.append ( java.lang.Character.toLowerCase ( c ) ) ; } } return sb.toString ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.$opt$TestAllocations ( ) ; Main.$opt$TestWithInitializations ( ) ; Main.$opt$TestNegativeValueNewByteArray ( ) ; Main.$opt$TestNegativeValueNewCharArray ( ) ; Main.testSmaliFilledNewArray ( ) ; Main.testSmaliFillArrayData ( ) ; Main.testSmaliVerifyError ( ) ; }
private com.android.server.VibratorService.Vibration removeVibrationLocked ( android.os.IBinder token ) { java.util.ListIterator < com.android.server.VibratorService.Vibration > iter = mVibrations.listIterator ( 0 ) ; while ( iter.hasNext ( ) ) { com.android.server.VibratorService.Vibration vib = iter.next ( ) ; if ( ( vib.mToken ) == token ) { iter.remove ( ) ; unlinkVibration ( vib ) ; return vib ; } } if ( ( ( mCurrentVibration ) != null ) && ( ( mCurrentVibration.mToken ) == token ) ) { unlinkVibration ( mCurrentVibration ) ; return mCurrentVibration ; } return null ; }
private void doBadSubscribeConfiguration ( java.lang.String serviceName , byte [ ] ssi , byte [ ] matchFilter ) throws java.lang.IllegalArgumentException { android.net.wifi.nan.SubscribeConfig subscribeConfig = new android.net.wifi.nan.SubscribeConfig.Builder ( ) . setServiceName ( serviceName ) . setServiceSpecificInfo ( ssi ) . setMatchFilter ( matchFilter ) . build ( ) ; int clientId = doConnect ( ) ; android.net.wifi.nan.IWifiNanDiscoverySessionCallback mockCallback = org.mockito.Mockito.mock ( android.net.wifi.nan.IWifiNanDiscoverySessionCallback.class ) ; mDut.subscribe ( clientId , subscribeConfig , mockCallback ) ; org.mockito.Mockito.verify ( mNanStateManagerMock ) . subscribe ( clientId , subscribeConfig , mockCallback ) ; }
static void install ( java.lang.ClassLoader loader , java.util.List < ? extends java.io.File > additionalClassPathEntries ) throws java.io.IOException , java.lang.ClassNotFoundException , java.lang.IllegalAccessException , java.lang.IllegalArgumentException , java.lang.InstantiationException , java.lang.NoSuchFieldException , java.lang.NoSuchMethodException , java.lang.SecurityException , java.lang.reflect.InvocationTargetException { java.lang.reflect.Field pathListField = android.support.multidex.MultiDex.findField ( loader , "pathList" ) ; java.lang.Object dexPathList = pathListField.get ( loader ) ; android.support.multidex.MultiDex.expandFieldArray ( dexPathList , "dexElements" , new android.support.multidex.MultiDex.V14 ( ) . makeDexElements ( additionalClassPathEntries ) ) ; }
public void testAesCbcHmacSha512Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , getAuthKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 ) ; }
private static void rebindTransformClass ( ) { art.Test986.rebindTransformClass ( art.Test986.Transform.class ) ; }
public static boolean isLegal ( java.lang.String str ) { int size = str.length ( ) ; int codepoint ; for ( int i = 0 ; i < size ; i += java.lang.Character.charCount ( codepoint ) ) { codepoint = str.codePointAt ( i ) ; if ( ! ( android.icu.lang.UCharacter.isLegal ( codepoint ) ) ) { return false ; } } return true ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.reset ( mContext ) ; org.mockito.Mockito.reset ( mCS ) ; mCM = org.mockito.Mockito.spy ( new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager ( mContext , mCS ) ) ; mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor ( null , com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE , ( ( android.net.ConnectivityManager ) ( mCM ) ) ) ; }
public static java.security.KeyStore getInstance ( java.lang.String type , java.security.Provider provider ) throws java.security.KeyStoreException { if ( provider == null ) { throw new java.lang.IllegalArgumentException ( "provider == null" ) ; } if ( type == null ) { throw new java.lang.NullPointerException ( "type == null" ) ; } try { java.lang.Object spi = java.security.KeyStore.ENGINE.getInstance ( type , provider , null ) ; return new java.security.KeyStore ( ( ( java.security.KeyStoreSpi ) ( spi ) ) , provider , type ) ; } catch ( java.lang.Exception e ) { throw new java.security.KeyStoreException ( e ) ; } }
public void run ( ) { android.renderscript.RenderScript pRS = createRenderScript ( true ) ; com.android.rs.unittest.ScriptC_noroot s = new com.android.rs.unittest.ScriptC_noroot ( pRS ) ; initializeGlobals ( pRS , s ) ; s.forEach_foo ( A , A ) ; s.invoke_verify_foo ( ) ; s.invoke_noroot_test ( ) ; pRS.finish ( ) ; A.getType ( ) . destroy ( ) ; A.destroy ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
public void setComment ( java.lang.String comment ) { if ( comment == null ) { this . commentBytes = null ; return ; } byte [ ] newCommentBytes = comment.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; if ( ( newCommentBytes.length ) > 65535 ) { throw new java.lang.IllegalArgumentException ( ( ( "Comment too long: " + ( newCommentBytes.length ) ) + " bytes" ) ) ; } this . commentBytes = newCommentBytes ; }
protected void orderItems ( ) { int idx = 0 ; if ( ( items ( ) . size ( ) ) > ( ( com.android.dex.DexFormat.MAX_MEMBER_IDX ) + 1 ) ) { throw new com.android.dex.DexIndexOverflowException ( getTooManyMembersMessage ( ) ) ; } for ( java.lang.Object i : items ( ) ) { ( ( com.android.dx.dex.file.MemberIdItem ) ( i ) ) . setIndex ( idx ) ; idx ++ ; } }
protected org.bouncycastle.crypto.tls.TlsStreamCipher createSalsa20Cipher ( org.bouncycastle.crypto.tls.TlsContext context , int rounds , int cipherKeySize , int macAlgorithm ) throws java.io.IOException { return new org.bouncycastle.crypto.tls.TlsStreamCipher ( context , createSalsa20StreamCipher ( rounds ) , createSalsa20StreamCipher ( rounds ) , createHMACDigest ( macAlgorithm ) , createHMACDigest ( macAlgorithm ) , cipherKeySize , true ) ; }
public static android.net.MacAddress createRandomUnicastAddress ( ) { java.security.SecureRandom r = new java.security.SecureRandom ( ) ; long addr = ( r.nextLong ( ) ) & ( android.net.MacAddress.VALID_LONG_MASK ) ; addr |= android.net.MacAddress.LOCALLY_ASSIGNED_MASK ; addr &= ~ ( android.net.MacAddress.MULTICAST_MASK ) ; return new android.net.MacAddress ( addr ) ; }
synchronized boolean replyReport ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [ ] data ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( ( ( "replyReport(): device=" + device ) + " type=" ) + type ) + " id=" ) + id ) ) ; } return ( ( checkDevice ( device ) ) && ( checkCallingUid ( ) ) ) && ( mHidDeviceNativeInterface.replyReport ( type , id , data ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; getContext ( ) . registerReceiver ( mReceiverA , new android.content.IntentFilter ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_A ) ) ; getContext ( ) . registerReceiver ( mReceiverB , new android.content.IntentFilter ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_B ) ) ; startActivity ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_A , com.android.cts.taskswitching.control.TaskswitchingDeviceTest.ACTIVITY_A ) ; assertTrue ( mReceiverA.waitForBroadcast ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.TASK_SWITCHING_WAIT_TIME ) ) ; startActivity ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_B , com.android.cts.taskswitching.control.TaskswitchingDeviceTest.ACTIVITY_B ) ; assertTrue ( mReceiverB.waitForBroadcast ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.TASK_SWITCHING_WAIT_TIME ) ) ; }
public void tearDown ( ) throws java.lang.Exception { if ( ! ( mTargetContext.getResources ( ) . getBoolean ( R.bool.profile_supported_mapmce ) ) ) { return ; } com.android.bluetooth.TestUtils.stopService ( mServiceRule , com.android.bluetooth.mapclient.MapClientService.class ) ; mService = com.android.bluetooth.mapclient.MapClientService.getMapClientService ( ) ; org.junit.Assert.assertNull ( mService ) ; com.android.bluetooth.TestUtils.clearAdapterService ( mAdapterService ) ; }
protected static boolean isInterestingBlock ( @ com.android.annotations.NonNull java.lang.String parent , @ com.android.annotations.Nullable java.lang.String parentParent ) { return ( ( ( ( parent.equals ( "defaultConfig" ) ) || ( parent.equals ( "android" ) ) ) || ( parent.equals ( "dependencies" ) ) ) || ( parent.equals ( "repositories" ) ) ) || ( ( parentParent != null ) && ( parentParent.equals ( "buildTypes" ) ) ) ; }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , long [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
public void onCreate ( android.database.sqlite.SQLiteDatabase db ) { com.android.dialer.common.LogUtil.enterBlock ( "AnnotatedCallLogDatabaseHelper.onCreate" ) ; long startTime = java.lang.System.currentTimeMillis ( ) ; db.execSQL ( com.android.dialer.calllog.database.AnnotatedCallLogDatabaseHelper.CREATE_TABLE_SQL ) ; db.execSQL ( java.lang.String.format ( java.util.Locale.US , com.android.dialer.calllog.database.AnnotatedCallLogDatabaseHelper.CREATE_TRIGGER_SQL , maxRows , maxRows ) ) ; db.execSQL ( com.android.dialer.calllog.database.AnnotatedCallLogDatabaseHelper.CREATE_INDEX_ON_CALL_TYPE_SQL ) ; db.execSQL ( com.android.dialer.calllog.database.AnnotatedCallLogDatabaseHelper.CREATE_INDEX_ON_NUMBER_SQL ) ; com.android.dialer.common.LogUtil.i ( "AnnotatedCallLogDatabaseHelper.onCreate" , "took: %dms" , ( ( java.lang.System.currentTimeMillis ( ) ) - startTime ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_BOOT_COMPLETED ) ; }
public boolean reportError ( android.bluetooth.BluetoothDevice device , byte error ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( "reportError(): device=" + device ) + " error=" ) + error ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.reportError ( device , error ) ; }
public void applyTransportModeTransform ( java.io.FileDescriptor socket , int direction , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.dup ( socket ) ) { mService.applyTransportModeTransform ( pfd , direction , transform.getResourceId ( ) ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public int getSimCarrierId ( ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getSubscriptionCarrierId ( getSubId ( ) ) ; } } catch ( android.os.RemoteException ex ) { } return android.telephony.TelephonyManager.UNKNOWN_CARRIER_ID ; }
private void setInstallerPackageNameLPw ( android.content.pm.PackageParser.Package pkg , java.lang.String installerPackageName ) { mSettings.setInstallerPackageName ( pkg.packageName , installerPackageName ) ; final int childCount = ( ( pkg.childPackages ) != null ) ? pkg.childPackages.size ( ) : 0 ; for ( int i = 0 ; i < childCount ; i ++ ) { android.content.pm.PackageParser.Package childPkg = pkg.childPackages.get ( i ) ; mSettings.setInstallerPackageName ( childPkg.packageName , installerPackageName ) ; } }
public java.util.Iterator < com.android.sched.vfs.InputVFile > iterator ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) { if ( ! ( containsFileType ( fileType ) ) ) { return com.google.common.collect.ImmutableSet.< com.android.sched.vfs.InputVFile > of ( ) . iterator ( ) ; } if ( fileType == ( com.android.jack.library.FileType.RSC ) ) { return resources.iterator ( ) ; } java.util.List < com.android.sched.vfs.InputVFile > inputVFiles = new java.util.ArrayList < com.android.sched.vfs.InputVFile > ( ) ; com.android.jack.library.v0000.InputJackLibraryImpl.fillFiles ( inputVFS.getRootInputVDir ( ) , com.android.jack.library.v0000.InputJackLibraryImpl.getExtension ( fileType ) , inputVFiles ) ; return inputVFiles.iterator ( ) ; }
private static void checkTypeDefConstant ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull lombok.ast.Node argument , @ com.android.annotations.Nullable lombok.ast.Node errorNode , boolean flag , java.lang.Object value ) { java.lang.Object allowed = annotation.getValue ( ) ; if ( allowed instanceof java.lang.Object [ ] ) { java.lang.Object [ ] allowedValues = ( ( java.lang.Object [ ] ) ( allowed ) ) ; for ( java.lang.Object o : allowedValues ) { if ( o.equals ( value ) ) { return ; } } com.android.tools.lint.checks.SupportAnnotationDetector.reportTypeDef ( context , argument , errorNode , flag , allowedValues ) ; } }
public void testGeoPhoneNumberMetadataLoadCorrectly ( ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata uaeMetadata = com.google.i18n.phonenumbers.MultiFileMetadataSourceImplTest.SOURCE.getMetadataForRegion ( "AE" ) ; assertEquals ( uaeMetadata.getCountryCode ( ) , 971 ) ; assertTrue ( uaeMetadata.hasGeneralDesc ( ) ) ; }
private void logStateAndMessage ( android.os.Message message , com.android.internal.util.State state ) { messageHandlingStatus = 0 ; if ( mVerboseLoggingEnabled ) { logd ( ( ( ( " " + ( state.getClass ( ) . getSimpleName ( ) ) ) + " " ) + ( getLogRecString ( message ) ) ) ) ; } }
public void testImsServiceUpSentCompat ( ) throws android.os.RemoteException { mTestImsServiceBinder.createMMTelFeature ( android.telephony.ims.ImsServiceTest.TEST_SLOT_0 , mTestCallback ) ; mTestImsService.mSpyMMTelFeature.sendSetFeatureState ( ImsFeature.STATE_READY ) ; org.mockito.ArgumentCaptor < android.content.Intent > intentCaptor = org.mockito.ArgumentCaptor.forClass ( android.content.Intent.class ) ; org.mockito.Mockito.verify ( mMockContext ) . sendBroadcast ( intentCaptor.capture ( ) ) ; try { junit.framework.Assert.assertNotNull ( intentCaptor.getValue ( ) ) ; verifyServiceUpSent ( intentCaptor.getValue ( ) ) ; } catch ( java.lang.IndexOutOfBoundsException e ) { junit.framework.Assert.fail ( "Did not receive all intents" ) ; } }
private javax.xml.validation.Validator getRepoValidator ( int version , com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler ) throws org.xml.sax.SAXException { java.io.InputStream xsdStream = com.android.sdklib.repository.SdkRepoConstants.getXsdStream ( version ) ; javax.xml.validation.SchemaFactory factory = javax.xml.validation.SchemaFactory.newInstance ( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI ) ; javax.xml.validation.Schema schema = factory.newSchema ( new javax.xml.transform.stream.StreamSource ( xsdStream ) ) ; javax.xml.validation.Validator validator = schema.newValidator ( ) ; if ( handler != null ) { validator.setErrorHandler ( handler ) ; } return validator ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService create ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor , com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration , com.android.ide.common.resources.ResourceResolver resolver ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService renderService = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService ( editor , configuration , resolver ) ; return renderService ; }
public void testSubjectAltNameWithIpAddress ( ) { assertTrue ( verifyWithServerCertificate ( "1.2.3.4" , libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate.ipa ( "1.2.3.4" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "1.2.3.5" , libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate.ipa ( "1.2.3.4" ) ) ) ; assertTrue ( verifyWithServerCertificate ( "192.168.100.1" , libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate.ipa ( "1.2.3.4" , "192.168.100.1" ) ) ) ; }
public void test_parkUntil_3 ( ) throws java.lang.Exception { java.util.concurrent.CyclicBarrier barrier = new java.util.concurrent.CyclicBarrier ( 1 ) ; org.apache.harmony.tests.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker parker = new org.apache.harmony.tests.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker ( barrier , true , 1000 ) ; java.lang.Thread parkerThread = new java.lang.Thread ( parker ) ; org.apache.harmony.tests.org.apache.harmony.kernel.dalvik.ThreadsTest.UNSAFE.unpark ( parkerThread ) ; parkerThread.start ( ) ; parker.assertDurationIsInRange ( 0 ) ; parkerThread.join ( ) ; }
public void testValidateLocalAddonFile1 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = this . getClass ( ) . getResourceAsStream ( "/com/android/sdklib/testdata/addon_sample_1.xml" ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( xmlStream ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getAddonValidator ( 1 , handler ) ; validator.validate ( source ) ; handler.verify ( ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; getFragmentManager ( ) . beginTransaction ( ) . replace ( android.R.id.content , new com.android.bips.ui.AddPrintersFragment ( ) ) . commit ( ) ; android.app.ActionBar actionBar = getActionBar ( ) ; if ( actionBar != null ) { actionBar.setDisplayHomeAsUpEnabled ( true ) ; } }
private static com.android.dialer.historyitemactions.HistoryItemActionModule createModuleForAccessingCallDetails ( android.content.Context context , com.android.dialer.calllog.model.CoalescedRow row ) { boolean canReportAsInvalidNumber = row.getNumberAttributes ( ) . getCanReportAsInvalidNumber ( ) ; boolean canSupportAssistedDialing = ! ( android.text.TextUtils.isEmpty ( row.getNumberAttributes ( ) . getLookupUri ( ) ) ) ; return new com.android.dialer.historyitemactions.IntentModule ( context , com.android.dialer.calldetails.CallDetailsActivity.newInstance ( context , row.getCoalescedIds ( ) , com.android.dialer.calllog.ui.menu.Modules.createCallDetailsHeaderInfoFromRow ( context , row ) , canReportAsInvalidNumber , canSupportAssistedDialing ) , R.string.call_details_menu_label , R.drawable.quantum_ic_info_outline_vd_theme_24 ) ; }
public void test_getPrivateExponent ( ) throws java.lang.Exception { java.security.KeyFactory gen = java.security.KeyFactory.getInstance ( "RSA" ) ; final java.math.BigInteger n = java.math.BigInteger.valueOf ( 3233 ) ; final java.math.BigInteger d = java.math.BigInteger.valueOf ( 2753 ) ; java.security.interfaces.RSAPrivateKey key = ( ( java.security.interfaces.RSAPrivateKey ) ( gen.generatePrivate ( new java.security.spec.RSAPrivateKeySpec ( n , d ) ) ) ) ; assertEquals ( "invalid private exponent" , d , key.getPrivateExponent ( ) ) ; }
public void getCdmaBroadcastConfig ( android.os.Message result ) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy ( result ) ; if ( radioProxy != null ) { com.android.internal.telephony.RILRequest rr = obtainRequest ( com.android.internal.telephony.RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; try { radioProxy.getCdmaBroadcastConfig ( rr.mSerial ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { handleRadioProxyExceptionForRR ( rr , "getCdmaBroadcastConfig" , e ) ; } } }
public com.android.jack.library.OutputJackLibrary getOutputJackLibrary ( ) { if ( ( incrementalInputLibrary ) == null ) { return getOutputJackLibraryFromVfs ( ) ; } return com.android.jack.library.JackLibraryFactory.getOutputLibrary ( com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_DIR ) , com.android.jack.Jack.getEmitterId ( ) , com.android.jack.Jack.getVersion ( ) . getVerboseVersion ( ) ) ; }
public synchronized com.android.ide.common.rendering.LayoutLibrary getLayoutLibrary ( ) { if ( ( ( mLayoutBridgeInit ) == false ) && ( ( mLayoutLibrary.getStatus ( ) ) == ( com.android.ide.common.sdk.LoadStatus.LOADED ) ) ) { mLayoutLibrary.init ( new java.io.File ( mTarget.getPath ( IAndroidTarget.FONTS ) ) , getEnumValueMap ( ) ) ; mLayoutBridgeInit = true ; } return mLayoutLibrary ; }
private void loadPreferences ( ) { org.eclipse.core.runtime.preferences.IEclipsePreferences prefs = new org.eclipse.core.runtime.preferences.InstanceScope ( ) . getNode ( GlTracePlugin.PLUGIN_ID ) ; mActivityToTrace = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_APPNAME , "" ) ; mTraceFilePath = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_TRACEFILE , "" ) ; mLastUsedDevice = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_DEVICE , "" ) ; }
public void testNewInstance ( ) throws java.lang.Exception { java.lang.String type = "SecureRandom" ; java.lang.String algorithm = "algorithm" ; org.apache.harmony.security.tests.java.security.ProviderServiceTest.MyProvider p = new org.apache.harmony.security.tests.java.security.ProviderServiceTest.MyProvider ( ) ; java.security.Provider.Service s = new java.security.Provider.Service ( p , type , algorithm , "org.apache.harmony.security.tests.support.RandomImpl" , null , null ) ; p.putService ( s ) ; java.lang.Object o = s.newInstance ( null ) ; assertTrue ( ( "new service instance is of incorrect class " + ( o.getClass ( ) . getName ( ) ) ) , ( o instanceof org.apache.harmony.security.tests.support.RandomImpl ) ) ; }
public void testInstall_missingTzDataFile ( ) throws java.lang.Exception { libcore.tzdata.shared2.TimeZoneDistro installedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.installWithErrorCode ( installedDistro.getBytes ( ) ) ) ; assertDistroInstalled ( installedDistro ) ; libcore.tzdata.shared2.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , 1 ) . clearTzDataForTests ( ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.installWithErrorCode ( incompleteDistro.getBytes ( ) ) ) ; assertDistroInstalled ( installedDistro ) ; }
public void applySettings ( ) { java.util.Properties props = java.lang.System.getProperties ( ) ; java.lang.String proxyHost = mProperties.getProperty ( ISettingsPage.KEY_HTTP_PROXY_HOST , "" ) ; java.lang.String proxyPort = mProperties.getProperty ( ISettingsPage.KEY_HTTP_PROXY_PORT , "" ) ; props.setProperty ( ISettingsPage.KEY_HTTP_PROXY_HOST , proxyHost ) ; props.setProperty ( ISettingsPage.KEY_HTTP_PROXY_PORT , proxyPort ) ; props.setProperty ( "https.proxyHost" , proxyHost ) ; props.setProperty ( "https.proxyPort" , proxyPort ) ; }
public void run ( ) { java.util.ArrayList < java.lang.String > pastEntries = mDatabase.getFormData ( mUrl , mName ) ; if ( ( pastEntries.size ( ) ) > 0 ) { android.webkit.TextDialog.AutoCompleteAdapter adapter = new android.webkit.TextDialog.AutoCompleteAdapter ( mContext , pastEntries ) ; ( ( java.util.HashMap ) ( mUpdateMessage.obj ) ) . put ( "adapter" , adapter ) ; mUpdateMessage.sendToTarget ( ) ; } }
public boolean requestIcon ( java.lang.String bssid , java.lang.String fileName ) { if ( ( bssid == null ) || ( fileName == null ) ) { android.util.Log.e ( mTAG , "Invalid arguments for Icon request." ) ; return false ; } return mSupplicantStaIfaceHal.initiateHs20IconQuery ( bssid , fileName ) ; }
private void upgradeDatabaseToVersion65 ( android.database.sqlite.SQLiteDatabase db ) { try { db.execSQL ( ( ( "ALTER TABLE " + ( SmsProvider.TABLE_RAW ) ) + " ADD COLUMN message_body TEXT" ) ) ; } catch ( android.database.sqlite.SQLiteException e ) { android.util.Log.w ( com.android.providers.telephony.MmsSmsDatabaseHelper.TAG , ( ( "[upgradeDatabaseToVersion65] Exception adding column message_body; " + "trying createThreadIdDateIndex() instead: " ) + e ) ) ; createThreadIdDateIndex ( db ) ; } }
public void test_getByName_cloning ( ) throws java.lang.Exception { java.net.InetAddress [ ] addresses = java.net.InetAddress.getAllByName ( null ) ; java.net.InetAddress [ ] addresses2 = java.net.InetAddress.getAllByName ( null ) ; org.junit.Assert.assertNotNull ( addresses [ 0 ] ) ; org.junit.Assert.assertNotNull ( addresses [ 1 ] ) ; org.junit.Assert.assertNotSame ( addresses , addresses2 ) ; addresses [ 0 ] = null ; addresses2 = java.net.InetAddress.getAllByName ( null ) ; org.junit.Assert.assertNotNull ( addresses2 [ 0 ] ) ; org.junit.Assert.assertNotNull ( addresses2 [ 1 ] ) ; }
public < P_IN > java.util.stream.Node < java.lang.Double > opEvaluateParallel ( java.util.stream.PipelineHelper < java.lang.Double > helper , java.util.Spliterator < P_IN > spliterator , java.util.function.IntFunction < java.lang.Double [ ] > generator ) { return ( ( java.util.stream.Node < java.lang.Double > ) ( op.opEvaluateParallel ( helper , spliterator , generator ) ) ) ; }
public static com.intellij.history.core.tree.Entry readEntry ( java.io.DataInput in ) throws java.io.IOException { int type = in.readInt ( ) ; switch ( type ) { case 0 : return new com.intellij.history.core.tree.FileEntry ( in , true ) ; case 1 : return new com.intellij.history.core.tree.DirectoryEntry ( in , true ) ; } throw new java.io.IOException ( ( "unexpected entry type: " + type ) ) ; }
private void startAndroidTask ( com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState ) { int buildApi = projectState.getTarget ( ) . getVersion ( ) . getApiLevel ( ) ; java.lang.String toolsVersion = projectState.getTarget ( ) . getBuildToolInfo ( ) . getRevision ( ) . toString ( ) ; buildfile.append ( "android {\n" ) ; buildfile.append ( ( ( " compileSdkVersion " + buildApi ) + "\n" ) ) ; buildfile.append ( ( ( " buildToolsVersion \"" + toolsVersion ) + "\"\n" ) ) ; buildfile.append ( "\n" ) ; }
public void exit ( ) { stopDhcpAction ( ) ; if ( ( mIpReachabilityMonitor ) != null ) { mIpReachabilityMonitor.stop ( ) ; mIpReachabilityMonitor = null ; } if ( ( mDhcpClient ) != null ) { mDhcpClient.sendMessage ( DhcpClient.CMD_STOP_DHCP ) ; mDhcpClient.doQuit ( ) ; } if ( ( mPacketTracker ) != null ) { mPacketTracker.stop ( ) ; mPacketTracker = null ; } if ( ( mApfFilter ) != null ) { mApfFilter.shutdown ( ) ; mApfFilter = null ; } resetLinkProperties ( ) ; }
public void update ( org.jetbrains.plugins.github.AnActionEvent e ) { final com.intellij.openapi.project.Project project = e.getData ( PlatformDataKeys.PROJECT ) ; if ( ( project == null ) || ( project.isDefault ( ) ) ) { org.jetbrains.plugins.github.util.GithubUtil.setVisibleEnabled ( e , false , false ) ; return ; } org.jetbrains.plugins.github.util.GithubUtil.setVisibleEnabled ( e , true , true ) ; }
public void testValidateLocalRepositoryFile1 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = this . getClass ( ) . getResourceAsStream ( "/com/android/sdklib/testdata/repository_sample_1.xml" ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( xmlStream ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getRepoValidator ( 1 , handler ) ; validator.validate ( source ) ; handler.verify ( ) ; }
public void test_lastElement ( ) { assertEquals ( "Incorrect last element returned" , "Test 99" , tVector.lastElement ( ) ) ; tVector.addElement ( null ) ; assertNull ( "Incorrect last element returned--wanted null" , tVector.lastElement ( ) ) ; java.util.Vector vector = new java.util.Vector ( ) ; try { vector.lastElement ( ) ; fail ( "Should throw NoSuchElementException" ) ; } catch ( java.util.NoSuchElementException e ) { } }
public android.graphics.Picture capturePicture ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.graphics.Picture ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.graphics.Picture > ( ) { @ java.lang.Override public android.graphics.Picture call ( ) { return capturePicture ( ) ; } } ) ; return ret ; } return mAwContents.capturePicture ( ) ; }
public boolean hasChanged ( @ com.android.annotations.NonNull java.util.EnumSet < com.android.sdklib.repository.descriptors.PkgType > filters ) { for ( com.android.sdklib.repository.descriptors.PkgType filter : filters ) { for ( com.android.sdklib.repository.local.LocalSdk.DirInfo dirInfo : mVisitedDirs.get ( filter ) ) { if ( dirInfo.hasChanged ( ) ) { return true ; } } } return false ; }
public byte [ ] getFwMemoryDump ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getFwMemoryDump ( ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { if ( com.android.server.wifi.WifiNative.getFwMemoryDumpNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ) { byte [ ] fwMemoryDump = com.android.server.wifi.WifiNative.mFwMemoryDump ; com.android.server.wifi.WifiNative.mFwMemoryDump = null ; return fwMemoryDump ; } else { return null ; } } return null ; } } }
public int getMaxTransceiveLength ( int technology ) { switch ( technology ) { case android.nfc.tech.TagTechnology.NFC_A : case android.nfc.tech.TagTechnology.MIFARE_CLASSIC : case android.nfc.tech.TagTechnology.MIFARE_ULTRALIGHT : return 253 ; case android.nfc.tech.TagTechnology.NFC_B : return 253 ; case android.nfc.tech.TagTechnology.NFC_V : return 253 ; case android.nfc.tech.TagTechnology.ISO_DEP : return mIsoDepMaxTransceiveLength ; case android.nfc.tech.TagTechnology.NFC_F : return 252 ; default : return 0 ; } }
public void stopRtt ( java.lang.String callId ) { try { android.telecom.Log.startSession ( "ICA.sRTT" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.stopRtt ( ) ; } else { android.telecom.Log.w ( this , "stopRtt(): call %s not found" , callId ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { super . visitMethodInsn ( opcode , owner , name , desc ) ; if ( ( ( owner.equals ( "android/content/res/Resources" ) ) && ( name.equals ( "getIdentifier" ) ) ) && ( desc.equals ( "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I" ) ) ) { mFoundGetIdentifier = true ; } if ( ( owner.equals ( "android/webkit/WebView" ) ) && ( name.startsWith ( "load" ) ) ) { mFoundWebContent = true ; } }
void requestPairConfirmation ( ) { android.content.Intent dialogIntent = new android.content.Intent ( mContext , com.android.nfc.handover.ConfirmConnectActivity.class ) ; dialogIntent.setFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) | ( android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK ) ) ) ; dialogIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; dialogIntent.putExtra ( BluetoothDevice.EXTRA_NAME , mName ) ; mContext.startActivity ( dialogIntent ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , short [ ] data ) { validateIsInt16 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_16 , data.length ) ; }
public static void setup ( com.android.ide.eclipse.adt.internal.resources.manager.GlobalProjectMonitor monitor ) { monitor.addResourceEventListener ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.sThis.mResourceEventListener ) ; monitor.addProjectListener ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.sThis.mProjectListener ) ; int mask = ( ( org.eclipse.core.resources.IResourceDelta.ADDED ) | ( org.eclipse.core.resources.IResourceDelta.REMOVED ) ) | ( org.eclipse.core.resources.IResourceDelta.CHANGED ) ; monitor.addFolderListener ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.sThis.mFolderListener , mask ) ; monitor.addFileListener ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.sThis.mFileListener , mask ) ; com.android.ide.eclipse.adt.internal.resources.manager.CompiledResourcesMonitor.setupMonitor ( monitor ) ; }
public java.nio.file.Path convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { java.nio.file.Path path = java.nio.file.FileSystems.getDefault ( ) . getPath ( input ) ; if ( ( mustExist ) && ( ! ( java.nio.file.Files.exists ( path ) ) ) ) { throw new com.google.devtools.common.options.OptionsParsingException ( java.lang.String.format ( "%s is not a valid path: it does not exist." , input ) ) ; } return path ; } catch ( java.nio.file.InvalidPathException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( java.lang.String.format ( "%s is not a valid path: %s." , input , e.getMessage ( ) ) , e ) ; } }
public void setTTYMode ( int ttyMode , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( RILConstants.RIL_REQUEST_SET_TTY_MODE , response ) ; rr.mp.writeInt ( 1 ) ; rr.mp.writeInt ( ttyMode ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " : " ) + ttyMode ) ) ; send ( rr ) ; }
private java.lang.String doLoad ( java.lang.String name , java.lang.ClassLoader loader ) { java.lang.String ldLibraryPath = null ; java.lang.String dexPath = null ; if ( loader == null ) { ldLibraryPath = java.lang.System.getProperty ( "java.library.path" ) ; } else if ( loader instanceof dalvik.system.BaseDexClassLoader ) { dalvik.system.BaseDexClassLoader dexClassLoader = ( ( dalvik.system.BaseDexClassLoader ) ( loader ) ) ; ldLibraryPath = dexClassLoader.getLdLibraryPath ( ) ; dexPath = dexClassLoader.getDexPath ( ) ; } synchronized ( this ) { return java.lang.Runtime.nativeLoad ( name , loader , ldLibraryPath , dexPath ) ; } }
private void readVtsTradeFedVendorConfig ( ) throws java.lang.RuntimeException { com.android.tradefed.util.VtsVendorConfigFileUtil configReader = new com.android.tradefed.util.VtsVendorConfigFileUtil ( ) ; if ( configReader.LoadVendorConfig ( mBuildInfo ) ) { try { java.lang.String tracePath = configReader.GetVendorConfigVariable ( com.android.compatibility.common.tradefed.targetprep.HidlProfilerPreparer.HOST_PROFILING_TRACE_PATH_KEY ) ; if ( ( tracePath.length ( ) ) > 0 ) { mHostProfilingTracePath = tracePath ; } } catch ( java.util.NoSuchElementException e ) { } } }
private boolean isEvdo ( ) { return ( ( mServiceState ) != null ) && ( ( ( ( mServiceState.getRadioTechnology ( ) ) == ( android.telephony.ServiceState.RADIO_TECHNOLOGY_EVDO_0 ) ) || ( ( mServiceState.getRadioTechnology ( ) ) == ( android.telephony.ServiceState.RADIO_TECHNOLOGY_EVDO_A ) ) ) || ( ( mServiceState.getRadioTechnology ( ) ) == ( android.telephony.ServiceState.RADIO_TECHNOLOGY_EVDO_B ) ) ) ; }
public void enter ( ) { super . enter ( ) ; mConnectingTimestampMs = java.lang.Long.MIN_VALUE ; mPhonebook.resetAtState ( ) ; updateAgIndicatorEnableState ( null ) ; mVoiceRecognitionStarted = false ; mWaitingForVoiceRecognition = false ; mNeedDialingOutReply = false ; mAudioParams.clear ( ) ; broadcastStateTransitions ( ) ; if ( ( ( mPrevState ) != null ) && ( ( mAdapterService.getBondState ( mDevice ) ) == ( android.bluetooth.BluetoothDevice.BOND_NONE ) ) ) { getHandler ( ) . post ( ( ) -> com.android.bluetooth.hfp.mHeadsetService.removeStateMachine ( com.android.bluetooth.hfp.mDevice ) ) ; } }
public void testNotifyResponseSubscribeCancel ( ) throws org.json.JSONException { final short transactionId = 23 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "status" , WifiAwareNative.AWARE_STATUS_INTERNAL_FAILURE ) ; args.putInt ( "response_type" , WifiAwareNative.AWARE_RESPONSE_SUBSCRIBE_CANCEL ) ; com.android.server.wifi.aware.WifiAwareHalMock.callNotifyResponse ( transactionId , com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
public boolean isDefect ( ) { if ( myDefectFound ) { return true ; } final java.util.List < ? extends com.google.gct.testing.results.GoogleCloudTestProxy > children = myTestProxy.getChildren ( ) ; for ( com.google.gct.testing.results.GoogleCloudTestProxy child : children ) { if ( child.isDefect ( ) ) { myDefectFound = true ; return true ; } } return false ; }
public void testDisableWifiFromSoftApModeState ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( null ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING , mWifiStateMachinePrime.getCurrentMode ( ) ) ; mWifiStateMachinePrime.disableWifi ( ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachinePrimeTest.WIFI_DISABLED_STATE_STRING , mWifiStateMachinePrime.getCurrentMode ( ) ) ; }
public java.nio.channels.FileChannel truncate ( long size ) throws java.io.IOException { checkOpen ( ) ; if ( size < 0 ) { throw new java.lang.IllegalArgumentException ( ( "size < 0: " + size ) ) ; } checkWritable ( ) ; if ( size < ( size ( ) ) ) { try { Libcore.os.ftruncate ( fd , size ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } } if ( ( position ( ) ) > size ) { position ( size ) ; } return this ; }
public void testCannotSetFixedLengthStreamingModeAfterConnect ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; org.junit.Assert.assertEquals ( "A" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; try { connection.setFixedLengthStreamingMode ( 1 ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public final com.android.tools.perflib.heap.ClassObj findClass ( long id ) { for ( int i = 0 ; i < ( mHeaps.size ( ) ) ; i ++ ) { com.android.tools.perflib.heap.ClassObj theClass = mHeaps.get ( i ) . getClass ( id ) ; if ( theClass != null ) { return theClass ; } } return null ; }
protected void shutdownOutput ( ) throws java.io.IOException { if ( ( fd ) == null ) { throw new java.io.IOException ( "socket not created" ) ; } try { android.system.Os.shutdown ( fd , OsConstants.SHUT_WR ) ; } catch ( android.system.ErrnoException e ) { throw e.rethrowAsIOException ( ) ; } }
public void testUsesLibrary ( ) throws java.lang.Exception { java.lang.ClassLoader loader = getClass ( ) . getClassLoader ( ) ; if ( loader instanceof dalvik.system.BaseDexClassLoader ) { dalvik.system.DexFile apkDexFile = getTestDexFile ( ( ( dalvik.system.BaseDexClassLoader ) ( loader ) ) ) ; assertTrue ( isDexFileBackedByOatFile ( apkDexFile ) ) ; } }
public void onStartTrackingTouch ( com.android.music.SeekBar bar ) { mLastSeekEventTime = 0 ; mmFromTouch = true ; }
public boolean countryUsesUtc ( java.lang.String isoCountryCode , long whenMillis ) { if ( android.text.TextUtils.isEmpty ( isoCountryCode ) ) { return false ; } libcore.util.CountryTimeZones countryTimeZones = libcore.util.TimeZoneFinder.getInstance ( ) . lookupCountryTimeZones ( isoCountryCode ) ; if ( countryTimeZones == null ) { return false ; } return countryTimeZones.hasUtcZone ( whenMillis ) ; }
private void setLoadedProgram ( @ javax.annotation.Nonnull com.android.jack.server.JackHttpServer.Assertion status , @ javax.annotation.CheckForNull T program ) { if ( program == null ) { loadedProgram.set ( status , null ) ; } else { assert ( loadedProgram.get ( status ) ) == null ; this . loadedProgram.set ( status , program ) ; } }
private static void assertArrayEquals ( byte [ ] expected , byte [ ] actual ) { if ( ! ( java.util.Arrays.equals ( expected , actual ) ) ) { fail ( ( ( ( "Expected " + ( libcore.java.util.Base64Test.hexString ( expected ) ) ) + ", got " ) + ( libcore.java.util.Base64Test.hexString ( actual ) ) ) ) ; } }
public void testGetSetFeature ( ) { java.lang.String [ ] features = new java.lang.String [ ] { org.apache.harmony.tests.org.xml.sax.helpers.ParserAdapterTest.NAMESPACES , org.apache.harmony.tests.org.xml.sax.helpers.ParserAdapterTest.NAMESPACE_PREFIXES , org.apache.harmony.tests.org.xml.sax.helpers.ParserAdapterTest.XMLNS_URIs } ; for ( java.lang.String s : features ) { try { adapter.setFeature ( s , true ) ; assertEquals ( true , adapter.getFeature ( s ) ) ; adapter.setFeature ( s , false ) ; assertEquals ( false , adapter.getFeature ( s ) ) ; } catch ( org.xml.sax.SAXException e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } } try { adapter.setFeature ( "http://argle.bargle" , true ) ; fail ( "SAXNotRecognizedException expected" ) ; } catch ( org.xml.sax.SAXNotRecognizedException e ) { } catch ( org.xml.sax.SAXNotSupportedException e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } }
public static < I , O > com.google.common.util.concurrent.ListenableFuture < O > transform ( com.google.common.util.concurrent.ListenableFuture < I > input , com.google.common.util.concurrent.AsyncFunction < ? super I , ? extends O > function , java.util.concurrent.Executor executor ) { com.google.common.base.Preconditions.checkNotNull ( executor ) ; com.google.common.util.concurrent.Futures.ChainingListenableFuture < I , O > output = new com.google.common.util.concurrent.Futures.ChainingListenableFuture < I , O > ( function , input ) ; input.addListener ( com.google.common.util.concurrent.Futures.rejectionPropagatingRunnable ( output , output , executor ) , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; return output ; }
public void testDismissKeyguard_fromShowWhenLocked_notAllowed ( ) throws java.lang.Exception { if ( ( ! ( isHandheld ( ) ) ) || ( isUiModeLockedToVrHeadset ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "ShowWhenLockedActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "ShowWhenLockedActivity" } ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; assertShowingAndOccluded ( ) ; executeShellCommand ( "am broadcast -a trigger_broadcast --ez dismissKeyguard true" ) ; assertShowingAndOccluded ( ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; }
public void timeIcuBreakIterator ( int nreps ) { for ( int i = 0 ; i < nreps ; ++ i ) { java.text.BreakIterator it = java.text.com.ibm.icu.text.BreakIterator.getLineInstance ( text.locale ) ; it.setText ( text.text ) ; while ( ( it.next ( ) ) != java.text.com.ibm.icu.text.BreakIterator ) { } } }
void dumpBroadcastStatsCheckinLocked ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args , int opti , boolean fullCheckin , java.lang.String dumpPackage ) { if ( ( mCurBroadcastStats ) == null ) { return ; } if ( ( mLastBroadcastStats ) != null ) { mLastBroadcastStats.dumpCheckinStats ( pw , dumpPackage ) ; if ( fullCheckin ) { mLastBroadcastStats = null ; return ; } } mCurBroadcastStats.dumpCheckinStats ( pw , dumpPackage ) ; if ( fullCheckin ) { mCurBroadcastStats = null ; } }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setResult ( com.android.cts.verifier.sensors.RESULT_CANCELED ) ; mSensorManager = ( ( android.hardware.SensorManager ) ( getApplicationContext ( ) . getSystemService ( Context.SENSOR_SERVICE ) ) ) ; com.android.cts.verifier.sensors.AccelerometerTestRenderer renderer = new com.android.cts.verifier.sensors.AccelerometerTestRenderer ( this ) ; mListener = renderer ; setContentView ( R.layout.pass_fail_gl ) ; setInfoTextResources ( R.string.snsr_accel_test , R.string.snsr_accel_test_info ) ; mGLSurfaceView = ( ( android.opengl.GLSurfaceView ) ( findViewById ( R.id.gl_surface_view ) ) ) ; mGLSurfaceView.setRenderer ( renderer ) ; }
public boolean disableWBS ( ) { final android.bluetooth.IBluetoothHeadset service = mService ; if ( ( service != null ) && ( isEnabled ( ) ) ) { try { return service.disableWBS ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHeadset.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothHeadset.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothHeadset.DBG ) android.util.Log.d ( android.bluetooth.BluetoothHeadset.TAG , android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return false ; }
final boolean hasIdentityMatrix ( ) { if ( ( mTransformationInfo ) != null ) { updateMatrix ( ) ; return mTransformationInfo.mMatrixIsIdentity ; } return true ; }
public void testCookiesWithLeadingPeriod ( ) throws java.lang.Exception { java.net.CookieManager cm = new java.net.CookieManager ( createCookieStore ( ) , null ) ; java.net.URI uri = new java.net.URI ( "http://services.chargepoint.com" ) ; java.util.List < java.lang.String > list = new java.util.ArrayList < > ( ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > responseHeaders = java.util.Collections.singletonMap ( "Set-Cookie" , java.util.Collections.singletonList ( "b=c; domain=.chargepoint.com;" ) ) ; cm.put ( uri , responseHeaders ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > cookies = cm.get ( new java.net.URI ( "https://webservices.chargepoint.com/foo" ) , responseHeaders ) ; java.util.List < java.lang.String > cookieList = cookies.values ( ) . iterator ( ) . next ( ) ; assertEquals ( java.util.Collections.singletonList ( "b=c" ) , cookieList ) ; }
public void testgetIcon ( ) throws java.lang.Exception { assertNull ( com.android.ide.eclipse.adt.internal.resources.ResourceHelper.getIcon ( com.android.ide.eclipse.adt.internal.resources.ResourceHelperTest.FakeQualifierClass.class ) ) ; com.android.ide.common.resources.configuration.FolderConfiguration config = new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; config.createDefault ( ) ; final int count = com.android.ide.common.resources.configuration.FolderConfiguration.getQualifierCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { com.android.ide.common.resources.configuration.ResourceQualifier qual = config.getQualifier ( i ) ; assertNotNull ( qual ) ; assertNotNull ( qual.getClass ( ) . getCanonicalName ( ) , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.getIcon ( qual.getClass ( ) ) ) ; } }
private static java.io.File storeMergedConfigFile ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > configMap , java.lang.String moduleName ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { java.io.File folder = new java.io.File ( DynamicConfig.MERGED_CONFIG_FILE_FOLDER ) ; folder.mkdirs ( ) ; java.io.File mergedConfigFile = new java.io.File ( folder , ( moduleName + ".dynamic" ) ) ; java.io.OutputStream stream = new java.io.FileOutputStream ( mergedConfigFile ) ; org.xmlpull.v1.XmlSerializer serializer = org.xmlpull.v1.XmlPullParserFactory.newInstance ( ) . newSerializer ( ) ; serializer.setOutput ( stream , com.android.compatibility.common.util.DynamicConfigHandler.ENCODING ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; serializer.startDocument ( com.android.compatibility.common.util.DynamicConfigHandler.ENCODING , false ) ; serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; for ( java.lang.String key : configMap.keySet ( ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; serializer.attribute ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.KEY_ATTR , key ) ; for ( java.lang.String value : configMap.get ( key ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; serializer.text ( value ) ; serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; serializer.endDocument ( ) ; return mergedConfigFile ; }
public com.android.ims.ImsConfig getConfigInterface ( ) throws com.android.ims.ImsException { if ( ( ( mConfig ) != null ) && ( mConfig.isBinderAlive ( ) ) ) { return mConfig ; } checkAndThrowExceptionIfServiceUnavailable ( ) ; try { android.telephony.ims.aidl.IImsConfig config = mMmTelFeatureConnection.getConfigInterface ( ) ; if ( config == null ) { throw new com.android.ims.ImsException ( "getConfigInterface()" , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } mConfig = new com.android.ims.ImsConfig ( config , mContext ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getConfigInterface()" , e , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mConfig ; }
public void testSetNeutralButtonWithParamCharSequence ( ) throws java.lang.Throwable { runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setNeutralButton ( mTitle , mOnClickListener ) ; mDialog = mBuilder.show ( ) ; mButton = mDialog.getButton ( DialogInterface.BUTTON_NEUTRAL ) ; mButton.performClick ( ) ; } } ) ; mInstrumentation.waitForIdleSync ( ) ; assertEquals ( mTitle , mButton.getText ( ) ) ; assertTrue ( mResult ) ; }
static android.renderscript.FieldPacker createFromArray ( java.lang.Object [ ] args ) { android.renderscript.FieldPacker fp = new android.renderscript.FieldPacker ( ( ( RenderScript.sPointerSize ) * 8 ) ) ; for ( java.lang.Object arg : args ) { fp.addSafely ( arg ) ; } fp.resize ( fp.mPos ) ; return fp ; }
public void testPowerOn ( ) { mSimulatedCommands.setRadioPower ( true , null ) ; mSimulatedCommands.notifyRadioOn ( ) ; org.mockito.Mockito.doReturn ( mUiccCard ) . when ( mUiccController ) . getUiccCard ( org.mockito.Mockito.anyInt ( ) ) ; mIccCardProxyUT.sendMessage ( mIccCardProxyUT.obtainMessage ( com.android.internal.telephony.uicc.IccCardProxyTest.EVENT_ICC_CHANGED ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( com.android.internal.telephony.uicc.IccCardProxyTest.SCARY_SLEEP_MS ) ; org.junit.Assert.assertEquals ( CommandsInterface.RadioState.RADIO_ON , mSimulatedCommands.getRadioState ( ) ) ; org.junit.Assert.assertEquals ( mIccCardProxyUT.getState ( ) , State.NOT_READY ) ; logd ( ( "IccCardProxy state = " + ( mIccCardProxyUT.getState ( ) ) ) ) ; }
public synchronized void onDisconnect ( ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( ( ( "onDisconnect call: " + ( mCurrentCall ) ) + " state: " ) + ( mClosed ) ) ) ; } if ( ! ( mClosed ) ) { mHeadsetProfile.terminateCall ( mDevice , mCurrentCall ) ; mLocalDisconnect = true ; } }
public boolean process ( java.util.Set < ? extends javax.lang.model.element.TypeElement > annotations , javax.annotation.processing.RoundEnvironment roundEnv ) { for ( javax.lang.model.element.Element annotatedElement : roundEnv.getElementsAnnotatedWith ( com.google.devtools.common.options.Option.class ) ) { try { javax.lang.model.element.VariableElement optionField = ( ( javax.lang.model.element.VariableElement ) ( annotatedElement ) ) ; checkModifiers ( optionField ) ; checkInOptionBase ( optionField ) ; checkEffectTagRationality ( optionField ) ; checkMetadataTagAndCategoryRationality ( optionField ) ; } catch ( com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException e ) { error ( e.elementInError , e.getMessage ( ) ) ; } } return true ; }
private static int compareForRounding ( long n , long d ) { long halfD = d / 2 ; if ( ( n == halfD ) || ( n == ( - halfD ) ) ) { int lsb = ( ( int ) ( d ) ) & 1 ; return - lsb ; } else { return java.math.BigDecimal.compareAbsoluteValues ( n , halfD ) ; } }
public int freeCache ( java.lang.String uuid , long freeStorageSize ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "freecache" ) ; builder.append ( ' ' ) ; builder.append ( com.android.server.pm.Installer.escapeNull ( uuid ) ) ; builder.append ( ' ' ) ; builder.append ( java.lang.String.valueOf ( freeStorageSize ) ) ; return mInstaller.execute ( builder.toString ( ) ) ; }
public static java.lang.String getPropertyName ( org.jetbrains.java.generate.element.FieldElement fieldElement , com.intellij.openapi.project.Project project ) { java.lang.String name = fieldElement.getName ( ) ; com.intellij.psi.codeStyle.JavaCodeStyleManager codeStyleManager = com.intellij.psi.codeStyle.JavaCodeStyleManager.getInstance ( project ) ; return codeStyleManager.variableNameToPropertyName ( name , ( fieldElement.isModifierStatic ( ) ? com.intellij.psi.codeStyle.VariableKind.STATIC_FIELD : com.intellij.psi.codeStyle.VariableKind.FIELD ) ) ; }
private void maybeShowManageConferenceCallButton ( ) { getUi ( ) . showManageConferenceCallButton ( shouldShowManageConference ( ) ) ; }
public java.util.List < com.android.build.gradle.internal.ProductFlavorCombo < com.android.build.gradle.managed.ProductFlavor > > createProductFlavorCombo ( @ org.gradle.model.Path ( value = "android.productFlavors" ) org.gradle.model.ModelMap < com.android.build.gradle.managed.ProductFlavor > productFlavors ) { java.util.Set < java.lang.String > flavorDimensionList = com.google.common.collect.Sets.newHashSet ( ) ; for ( com.android.build.gradle.managed.ProductFlavor flavor : productFlavors.values ( ) ) { if ( ( flavor.getDimension ( ) ) != null ) { flavorDimensionList.add ( flavor.getDimension ( ) ) ; } } return com.android.build.gradle.internal.ProductFlavorCombo.createCombinations ( com.google.common.collect.Lists.newArrayList ( flavorDimensionList ) , productFlavors.values ( ) ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFrom" ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private void dumpCallTimes ( ) { java.lang.System.out.print ( "\nCall Times\n" ) ; java.lang.System.out.print ( "id t-start t-end g-start g-end excl. incl. method\n" ) ; for ( com.android.traceview.Call call : mCallList ) { java.lang.System.out.format ( "%2d %8d %8d %8d %8d %8d %8d %s\n" , call.getThreadId ( ) , call.mThreadStartTime , call.mThreadEndTime , call.mGlobalStartTime , call.mGlobalEndTime , call.mExclusiveCpuTime , call.mInclusiveCpuTime , call.getMethodData ( ) . getName ( ) ) ; } }
public boolean onUnbind ( android.content.Intent intent ) { android.util.Log.i ( com.android.server.telecom.testapps.TestInCallServiceImpl.TAG , "onPhoneDestroyed" ) ; mPhone.removeListener ( mPhoneListener ) ; mPhone = null ; com.android.server.telecom.testapps.TestCallList.getInstance ( ) . clearCalls ( ) ; com.android.server.telecom.testapps.TestInCallServiceImpl.sInstance = null ; return super . onUnbind ( intent ) ; }
public void exitEmergencyCallbackMode ( ) { if ( com.android.internal.telephony.GsmCdmaPhone.DBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.GsmCdmaPhone.LOG_TAG , ( ( ( "exitEmergencyCallbackMode: mImsPhone=" + ( mImsPhone ) ) + " isPhoneTypeGsm=" ) + ( isPhoneTypeGsm ( ) ) ) ) ; } if ( isPhoneTypeGsm ( ) ) { if ( ( mImsPhone ) != null ) { mImsPhone.exitEmergencyCallbackMode ( ) ; } } else { if ( mWakeLock.isHeld ( ) ) { mWakeLock.release ( ) ; } mCi.exitEmergencyCallbackMode ( obtainMessage ( com.android.internal.telephony.EVENT_EXIT_EMERGENCY_CALLBACK_RESPONSE ) ) ; } }
public void adjustMasterVolume ( int steps , int flags ) { android.media.IAudioService service = android.media.AudioManager.getService ( ) ; try { service.adjustMasterVolume ( steps , flags , getContext ( ) . getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.media.AudioManager.TAG , "Dead object in adjustMasterVolume" , e ) ; } }
private java.lang.String formatNsn ( java.lang.String number , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata metadata , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat numberFormat , java.lang.String carrierCode ) { com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat [ ] intlNumberFormats = metadata.intlNumberFormat ; com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat [ ] availableFormats = ( ( ( intlNumberFormats.length ) == 0 ) || ( numberFormat == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat.NATIONAL ) ) ) ? metadata.numberFormat : metadata.intlNumberFormat ; com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat formattingPattern = chooseFormattingPatternForNumber ( availableFormats , number ) ; return formattingPattern == null ? number : formatNsnUsingPattern ( number , formattingPattern , numberFormat , carrierCode ) ; }
private void hideRecentApps ( boolean triggeredFromAltTab , boolean triggeredFromHome ) { mPreloadedRecentApps = false ; try { com.android.internal.statusbar.IStatusBarService statusbar = getStatusBarService ( ) ; if ( statusbar != null ) { statusbar.hideRecentApps ( triggeredFromAltTab , triggeredFromHome ) ; } } catch ( android.os.RemoteException e ) { android.util.Slog.e ( com.android.internal.policy.impl.PhoneWindowManager.TAG , "RemoteException when closing recent apps" , e ) ; mStatusBarService = null ; } }
public void setCurrency ( java.util.Currency currency ) { if ( ( currency != ( symbols.getCurrency ( ) ) ) || ( ! ( currency.getSymbol ( ) . equals ( symbols.getCurrencySymbol ( ) ) ) ) ) { symbols.setCurrency ( currency ) ; } icuDecimalFormat.setDecimalFormatSymbols ( symbols.getIcuDecimalFormatSymbols ( ) ) ; }
private static org.jetbrains.plugins.github.util.GithubAuthData getValidAuthData ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.project.Project project ) throws java.io.IOException { return org.jetbrains.plugins.github.util.GithubUtil.computeValueInModal ( project , "Access to GitHub" , new com.intellij.util.ThrowableConvertor < com.intellij.openapi.progress.ProgressIndicator , org.jetbrains.plugins.github.util.GithubAuthData , java.io.IOException > ( ) { @ java.lang.Override public org.jetbrains.plugins.github.util.GithubAuthData convert ( com.intellij.openapi.progress.ProgressIndicator indicator ) throws java.io.IOException { return org.jetbrains.plugins.github.util.GithubUtil.getValidAuthDataFromConfig ( project , indicator ) ; } } ) ; }
public void testRsEnabledAnnotations ( ) throws java.io.IOException { java.io.File project = new java.io.File ( regularDir , "extractRsEnabledAnnotations" ) ; runTasksOn ( project , BasePlugin.GRADLE_TEST_VERSION , "clean" , "assembleDebug" ) ; java.io.File archiveFile = new java.io.File ( project , "build/outputs/aar/extractRsEnabledAnnotations-debug.aar" ) ; assertTrue ( archiveFile.isFile ( ) ) ; java.util.zip.ZipFile archive = null ; try { archive = new java.util.zip.ZipFile ( archiveFile ) ; java.util.zip.ZipEntry entry = archive.getEntry ( "annotations.zip" ) ; assertNotNull ( entry ) ; } finally { if ( archive != null ) { archive.close ( ) ; } } }
public boolean isEncrypted ( ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( service == null ) { return false ; } try { return ( service.getConnectionState ( this ) ) > ( android.bluetooth.BluetoothDevice.CONNECTION_STATE_CONNECTED ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; return false ; } }
public void startInPlaceAnimationOnFrontMostApplication ( android.app.ActivityOptions opts ) throws android.os.RemoteException { if ( ( ( opts.getAnimationType ( ) ) != ( android.app.ActivityOptions.ANIM_CUSTOM_IN_PLACE ) ) || ( ( opts.getCustomInPlaceResId ( ) ) == 0 ) ) { throw new java.lang.IllegalArgumentException ( ( "Expected in-place ActivityOption " + "with valid animation" ) ) ; } mWindowManager.prepareAppTransition ( com.android.server.wm.AppTransition.TRANSIT_TASK_IN_PLACE , false ) ; mWindowManager.overridePendingAppTransitionInPlace ( opts.getPackageName ( ) , opts.getCustomInPlaceResId ( ) ) ; mWindowManager.executeAppTransition ( ) ; }
void foo4 ( int [ ] array , int end , boolean expectInterpreter ) { for ( int i = end ; i > 0 ; i -- ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ ( i - 1 ) ] = 1 ; sum += array [ ( i - 1 ) ] ; } }
public void testLintWarningOnGetSignaturesFlagInBitwiseOrExpression ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/GetSignaturesBitwiseOrTest.java:11: Information: Reading app signatures from getPackageInfo: The app signatures could be exploited if not validated properly; see issue explanation for details. [PackageManagerGetSignatures]\n" + ( ( " .getPackageInfo(\"some.pkg\", GET_GIDS | GET_SIGNATURES | GET_PROVIDERS);\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( java ( "src/test/pkg/GetSignaturesBitwiseOrTest.java" , ( "" + ( ( ( ( ( ( ( ( ( ( ( ( "package test.pkg;\n" + "\n" ) + "import static android.content.pm.PackageManager.*;\n" ) + "\n" ) + "import android.app.Activity;\n" ) + "import android.content.pm.PackageManager;\n" ) + "\n" ) + "public class GetSignaturesBitwiseOrTest extends Activity {\n" ) + " public void failLintCheck() throws Exception {\n" ) + " getPackageManager()\n" ) + " .getPackageInfo(\"some.pkg\", GET_GIDS | GET_SIGNATURES | GET_PROVIDERS);\n" ) + " }\n" ) + "}" ) ) ) ) ) ; }
public java.lang.String getSdkOsLocation ( ) { java.lang.String path = ( ( mManager ) == null ) ? null : mManager.getLocation ( ) ; if ( path != null ) { if ( ( ( path.length ( ) ) > 0 ) && ( ! ( path.endsWith ( java.io.File.separator ) ) ) ) { path = path + ( java.io.File.separator ) ; } } return path ; }
public boolean enableDisableTdls ( boolean enable , java.lang.String macAdd , com.android.server.wifi.WifiNative.TdlsEventHandler tdlsCallBack ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "enableDisableTdls not supported" ) ; return false ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { com.android.server.wifi.WifiNative.sTdlsEventHandler = tdlsCallBack ; return com.android.server.wifi.WifiNative.enableDisableTdlsNative ( com.android.server.wifi.WifiNative.sWlan0Index , enable , macAdd ) ; } } }
public boolean setConfiguredNetworkBSSID ( java.lang.String bssid ) { if ( mVerboseLoggingEnabled ) localLog ( ( "setConfiguredNetworkBSSID: " + ( mSupplicantNetworkId ) ) ) ; if ( ! ( mWifiNative.setNetworkVariable ( mSupplicantNetworkId , WifiConfiguration.bssidVarName , bssid ) ) ) { loge ( ( "Set BSSID of network in wpa_supplicant failed on " + ( mSupplicantNetworkId ) ) ) ; return false ; } return true ; }
public com.android.ims.internal.IImsEcbm getEcbmInterface ( int slotId , int featureType ) throws android.os.RemoteException { enforceCallingOrSelfPermission ( android.Manifest.permission.MODIFY_PHONE_STATE , "getEcbmInterface" ) ; synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature.getEcbmInterface ( ) ; } } return null ; }
private static java.lang.Object openDexFile ( java.lang.String sourceName , java.lang.String outputName , int flags , java.lang.ClassLoader loader ) throws java.io.IOException { return dalvik.system.DexFile.openDexFileNative ( new java.io.File ( sourceName ) . getAbsolutePath ( ) , ( outputName == null ? null : new java.io.File ( outputName ) . getAbsolutePath ( ) ) , flags , loader ) ; }
public void apply ( ) throws com.intellij.openapi.options.ConfigurationException { com.google.gct.testing.config.GoogleCloudTestingConfigurable.GoogleCloudTestingState state = new com.google.gct.testing.config.GoogleCloudTestingConfigurable.GoogleCloudTestingState ( ) ; state.fakeBucketName = fakeBucketNameField.getText ( ) ; state.shouldUseFakeBucket = useFakeBucketCheckbox.isSelected ( ) ; state.urlChoice = getUrlChoice ( ) ; state.backendUrl = getBackendUrl ( ) ; state.customUrl = customUrlField.getText ( ) ; getSavedSettings ( ) . loadState ( state ) ; com.google.gct.testing.launcher.CloudAuthenticator.recreateTest ( getBackendUrl ( ) ) ; }
public synchronized void onAcceptFailed ( ) { cleanUpSdpRecord ( ) ; if ( ( mServerSockets ) != null ) { mServerSockets.shutdown ( false ) ; mServerSockets = null ; } if ( ( ( ! ( mInterrupted ) ) && ( ( mAdapter ) != null ) ) && ( mAdapter.isEnabled ( ) ) ) { startSocketListeners ( ) ; } }
private static void checkIndex ( int arrayLength , int offset , int length , java.lang.String arrayName ) { if ( ( ( offset | length ) < 0 ) || ( ( offset + length ) > arrayLength ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( ( ( ( ( "offset: " + offset ) + ", length: " ) + length ) + " (expected: offset <= offset + length <= " ) + arrayName ) + ".length (" ) + arrayLength ) + "))" ) ) ; } }
public void log ( java.util.logging.Level level , java.lang.String msg , java.lang.Throwable thrown ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setThrown ( thrown ) ; doLog ( lr ) ; }
private static void waitForCondition ( java.util.function.BooleanSupplier condition ) throws java.lang.Exception { int count = 0 ; boolean lastResult ; while ( ( ! ( lastResult = condition.getAsBoolean ( ) ) ) && ( ( count ++ ) < 120 ) ) { java.lang.Thread.sleep ( 1000 ) ; } org.junit.Assert.assertTrue ( ( "Failed condition: " + condition ) , lastResult ) ; }
private boolean shouldShowNoteSentToast ( com.android.incallui.call.DialerCall call ) { return ( ( call != null ) && ( com.android.incallui.CallCardPresenter.hasCallSubject ( call ) ) ) && ( ( ( call.getState ( ) ) == ( com.android.incallui.call.state.DialerCallState.DIALING ) ) || ( ( call.getState ( ) ) == ( com.android.incallui.call.state.DialerCallState.CONNECTING ) ) ) ; }
void stopDtmfTone ( com.android.server.telecom.Call call ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "stopDtmfTone" ) ) ) { try { logOutgoing ( "stopDtmfTone %s" , callId ) ; mServiceInterface.stopDtmfTone ( callId , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException e ) { } } }
public void test_SSLEngine_getEnableSessionCreation ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create ( ) ; javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine ( ) ; assertTrue ( e.getEnableSessionCreation ( ) ) ; c.close ( ) ; libcore.javax.net.ssl.TestSSLEnginePair.close ( new javax.net.ssl.SSLEngine [ ] { e } ) ; }
public void testDismissKeyguard_fromShowWhenLocked_notAllowed ( ) throws java.lang.Exception { if ( ( ! ( isHandheld ( ) ) ) || ( isUiModeLockedToVrHeadset ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "ShowWhenLockedActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "ShowWhenLockedActivity" } ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; assertShowingAndOccluded ( ) ; executeShellCommand ( "am broadcast -a trigger_broadcast --ez dismissKeyguard true" ) ; assertShowingAndOccluded ( ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; }
public static void main ( java.lang.String [ ] args ) { Main.byteToLong ( ) ; Main.shortToLong ( ) ; Main.intToLong ( ) ; Main.charToLong ( ) ; Main.longToInt ( ) ; Main.shortToByte ( ) ; Main.intToByte ( ) ; Main.charToByte ( ) ; }
public void run ( ) { android.os.Looper.prepare ( ) ; com.android.internal.view.WindowManagerPolicyThread.set ( this , android.os.Looper.myLooper ( ) ) ; android.os.Process.setThreadPriority ( android.os.Process.THREAD_PRIORITY_FOREGROUND ) ; mPolicy.init ( mContext , mService , mPM ) ; synchronized ( this ) { mRunning = true ; notifyAll ( ) ; } android.os.Looper.loop ( ) ; }
public void withTextResourceIdTest ( ) { android.widget.TextView textView = new android.widget.TextView ( context ) ; textView.setText ( R.string.something ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.ViewMatchers.withText ( R.string.something ) . matches ( textView ) ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.matcher.ViewMatchers.withText ( R.string.other_string ) . matches ( textView ) ) ; }
public void copyFrom ( byte [ ] d ) { validateIsInt8 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_8 , d.length ) ; }
public void setVideoProvider ( com.android.internal.telecom.IVideoProvider videoProvider ) { android.telecom.Log.v ( this , "setVideoProvider" ) ; if ( videoProvider != null ) { try { mVideoProviderProxy = new com.android.server.telecom.VideoProviderProxy ( mLock , videoProvider , this ) ; } catch ( android.os.RemoteException ignored ) { } } else { mVideoProviderProxy = null ; } mVideoProvider = videoProvider ; for ( com.android.server.telecom.Call.Listener l : mListeners ) { l.onVideoCallProviderChanged ( this ) ; } }
public void test_entries ( ) throws java.lang.Exception { java.io.File file = tests.support.resource.Support_Resources.copyFile ( resources , null , jarName ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( file ) ; java.util.Enumeration < java.util.jar.JarEntry > e = jarFile.entries ( ) ; int i ; for ( i = 0 ; e.hasMoreElements ( ) ; i ++ ) { e.nextElement ( ) ; } assertEquals ( jarFile.size ( ) , i ) ; jarFile.close ( ) ; assertEquals ( 6 , i ) ; }
public static com.android.jack.dx.rop.code.RopMethod optimize ( com.android.jack.dx.rop.code.RopMethod rmeth , int paramWidth , boolean isStatic , boolean inPreserveLocals , boolean removeRedundantConditionalBranch , com.android.jack.dx.rop.code.TranslationAdvice inAdvice ) { return com.android.jack.dx.ssa.Optimizer.optimize ( rmeth , paramWidth , isStatic , inPreserveLocals , removeRedundantConditionalBranch , inAdvice , java.util.EnumSet.allOf ( com.android.jack.dx.ssa.Optimizer.OptionalStep.class ) ) ; }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { putProperty ( fileType.getPropertyPrefix ( ) , java.lang.String.valueOf ( true ) ) ; addFileType ( fileType ) ; com.android.sched.vfs.VPath clonedPath = typePath.clone ( ) ; clonedPath.addSuffix ( fileType.getFileExtension ( ) ) ; clonedPath.prependPath ( fileType.getVPathPrefix ( ) ) ; return outputVDir.createOutputVFile ( clonedPath ) ; }
protected void addPathToBuild ( com.android.tradefed.build.IBuildInfo buildInfo ) throws com.android.tradefed.targetprep.TargetSetupError { java.lang.String target = null ; switch ( getConfiguredPythonVersionMajor ( ) ) { case 2 : target = com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV ; break ; case 3 : target = com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_V3 ; break ; } if ( ( buildInfo.getFile ( target ) ) == null ) { buildInfo.setFile ( target , new java.io.File ( mVenvDir.getAbsolutePath ( ) ) , buildInfo.getBuildId ( ) ) ; } }
private com.google.common.collect.ImmutableMap < java.lang.String , com.google.devtools.build.android.desugar.InputFileProvider > indexInputs ( java.util.List < com.google.devtools.build.android.desugar.InputFileProvider > inputProviders ) { java.util.Map < java.lang.String , com.google.devtools.build.android.desugar.InputFileProvider > indexedInputs = new java.util.HashMap < > ( ) ; for ( com.google.devtools.build.android.desugar.InputFileProvider inputProvider : inputProviders ) { for ( java.lang.String relativePath : inputProvider ) { if ( ( relativePath.endsWith ( ".class" ) ) && ( ! ( indexedInputs.containsKey ( relativePath ) ) ) ) { indexedInputs.put ( relativePath , inputProvider ) ; } } } return com.google.common.collect.ImmutableMap.copyOf ( indexedInputs ) ; }
public void dragFinished ( org.eclipse.swt.dnd.DragSourceEvent event ) { adjustEventCoordinates ( event ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutCanvas canvas = mGraphicalEditorPart.getCanvasControl ( ) ; if ( canvas != null ) { canvas.getDragListener ( ) . dragFinished ( event ) ; } }
public static boolean addLegacyPasspointConfig ( android.net.wifi.WifiConfiguration config ) { if ( ( com.android.server.wifi.hotspot2.PasspointManager.sPasspointManager ) == null ) { android.util.Log.e ( com.android.server.wifi.hotspot2.PasspointManager.TAG , "PasspointManager have not been initialized yet" ) ; return false ; } android.util.Log.d ( com.android.server.wifi.hotspot2.PasspointManager.TAG , ( "Installing legacy Passpoint configuration: " + ( config.FQDN ) ) ) ; return com.android.server.wifi.hotspot2.PasspointManager.sPasspointManager.addWifiConfig ( config ) ; }
public void runSensor ( android.hardware.cts.helpers.TestSensorEventListener listener , int eventCount ) { if ( ( mTestSensorEventListener ) != null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "Listener already registered, returning." ) ; return ; } try { registerListener ( listener ) ; waitForEvents ( eventCount ) ; } finally { unregisterListener ( ) ; } }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
protected void setupEmptyView ( ) { if ( ( ( emptyView ) != null ) && ( ( getActivity ( ) ) != null ) ) { if ( ! ( com.android.dialer.util.PermissionsUtil.hasPermission ( getActivity ( ) , android.Manifest.permission.CALL_PHONE ) ) ) { emptyView.setImage ( R.drawable.empty_contacts ) ; emptyView.setActionLabel ( R.string.permission_single_turn_on ) ; emptyView.setDescription ( R.string.permission_place_call ) ; emptyView.setActionClickedListener ( this ) ; } else { emptyView.setImage ( EmptyContentView.NO_IMAGE ) ; emptyView.setActionLabel ( EmptyContentView.NO_LABEL ) ; emptyView.setDescription ( EmptyContentView.NO_LABEL ) ; } } }
public void acceptVideoRequest ( @ android.support.annotation.NonNull android.content.Context context ) { int requestedVideoState = callback.getRequestedVideoState ( ) ; com.android.dialer.common.Assert.checkArgument ( ( requestedVideoState != ( android.telecom.VideoProfile.STATE_AUDIO_ONLY ) ) ) ; com.android.dialer.common.LogUtil.i ( "ImsVideoTech.acceptUpgradeRequest" , ( "videoState: " + requestedVideoState ) ) ; call.getVideoCall ( ) . sendSessionModifyResponse ( new android.telecom.VideoProfile ( requestedVideoState ) ) ; setSessionModificationState ( SessionModificationState.NO_REQUEST ) ; listener.onUpgradedToVideo ( false ) ; logger.logImpression ( DialerImpression.Type.IMS_VIDEO_REQUEST_ACCEPTED ) ; }
public boolean isTrue ( ) throws java.lang.Exception { device.openNotification ( ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.NOTIFICATION_BAR_EXPAND_RES ) . className ( "android.widget.ImageView" ) ) . click ( ) ; return device.hasObject ( android.support.test.uiautomator.By.text ( com.android.devtools.systemimage.uitest.smoke.VpnTest.NETWORK_MONITORED_TEXT ) ) ; }
public boolean process ( java.io.File outputFile , java.io.File mainFile , java.io.File [ ] libraryFiles , java.util.Map < java.lang.String , java.lang.String > injectAttributes ) { org.w3c.dom.Document mainDoc = com.android.manifmerger.MergerXmlUtils.parseDocument ( mainFile , mLog ) ; if ( mainDoc == null ) { return false ; } boolean success = process ( mainDoc , libraryFiles , injectAttributes ) ; if ( ! ( com.android.manifmerger.MergerXmlUtils.printXmlFile ( mainDoc , outputFile , mLog ) ) ) { success = false ; } return success ; }
public void init ( org.eclipse.ui.IWorkbench workbench , org.eclipse.jface.viewers.IStructuredSelection selection ) { mWorkbench = workbench ; setHelpAvailable ( false ) ; org.eclipse.jface.resource.ImageDescriptor desc = com.android.ide.eclipse.adt.internal.editors.IconFactory.getInstance ( ) . getImageDescriptor ( com.android.ide.eclipse.adt.internal.wizards.templates.TemplateWizard.PROJECT_LOGO_LARGE ) ; setDefaultPageImageDescriptor ( desc ) ; if ( ! ( com.android.ide.eclipse.adt.internal.wizards.templates.UpdateToolsPage.isUpToDate ( ) ) ) { mUpdatePage = new com.android.ide.eclipse.adt.internal.wizards.templates.UpdateToolsPage ( ) ; } setNeedsProgressMonitor ( true ) ; com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . refreshSdk ( ) ; }
public void setSupplicantLogLevel ( boolean turnOnVerbose ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { int logLevel = ( turnOnVerbose ) ? SupplicantStaIfaceHal.LOG_LEVEL_DEBUG : SupplicantStaIfaceHal.LOG_LEVEL_INFO ; mSupplicantStaIfaceHal.setLogLevel ( logLevel ) ; } else { doStringCommand ( ( "LOG_LEVEL " + ( turnOnVerbose ? "DEBUG" : "INFO" ) ) ) ; } }
final boolean isPowered ( int plugTypeSet ) { if ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_UNKNOWN ) ) { return true ; } if ( plugTypeSet == 0 ) { return false ; } int plugTypeBit = 0 ; if ( ( mAcOnline ) && ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_CHARGING ) ) ) { plugTypeBit |= android.os.BatteryManager.BATTERY_PLUGGED_AC ; } if ( ( mUsbOnline ) && ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_CHARGING ) ) ) { plugTypeBit |= android.os.BatteryManager.BATTERY_PLUGGED_USB ; } return ( plugTypeSet & plugTypeBit ) != 0 ; }
public final java.nio.DoubleBuffer asDoubleBuffer ( ) { if ( memoryRef.isFreed ) { throw new java.lang.IllegalStateException ( "buffer has been freed" ) ; } int off = this . position ( ) ; int lim = this . limit ( ) ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : 0 ; int size = rem > > 3 ; return new java.nio.ByteBufferAsDoubleBuffer ( this , ( - 1 ) , 0 , size , size , off , order ( ) ) ; }
public void onClick ( android.content.DialogInterface dialog , int id ) { java.lang.String password = mView.getText ( R.id.credential_password ) ; if ( android.text.TextUtils.isEmpty ( password ) ) { mView.setHasEmptyError ( true ) ; removeDialog ( com.android.certinstaller.CertInstaller.PKCS12_PASSWORD_DIALOG ) ; showDialog ( com.android.certinstaller.CertInstaller.PKCS12_PASSWORD_DIALOG ) ; } else { mNextAction = new com.android.certinstaller.CertInstaller.Pkcs12ExtractAction ( password ) ; mNextAction.run ( this ) ; } }
public void singleScanSuccess ( ) { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder ( ) . withBasePeriod ( 10000 ) . withMaxApPerScan ( 10 ) . addBucketWithBand ( 10000 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN , WifiScanner.WIFI_BAND_24_GHZ ) . build ( ) ; doSuccessfulSingleScanTest ( settings , expectedBandScanFreqs ( WifiScanner.WIFI_BAND_24_GHZ ) , new java.util.HashSet < java.lang.Integer > ( ) , com.android.server.wifi.ScanResults.create ( 0 , isAllChannelsScanned ( WifiScanner.WIFI_BAND_24_GHZ ) , 2400 , 2450 , 2450 , 2400 , 2450 , 2450 , 2400 , 2450 , 2450 ) , false ) ; }
public boolean isOuterInterface ( java.lang.String outerName , java.lang.String innerName ) { java.lang.Boolean result = known.get ( outerName ) ; if ( result == null ) { org.objectweb.asm.ClassReader outerClass = com.google.common.base.Preconditions.checkNotNull ( classpath.readIfKnown ( outerName ) , "Couldn't find outer class %s of %s" , outerName , innerName ) ; result = com.google.devtools.build.android.desugar.io.BitFlags.isInterface ( outerClass.getAccess ( ) ) ; known.put ( outerName , result ) ; } return result ; }
public void radioCapabilityUpdated ( com.android.internal.telephony.RadioCapability rc ) { mRadioCapability.set ( rc ) ; if ( android.telephony.SubscriptionManager.isValidSubscriptionId ( getSubId ( ) ) ) { boolean restoreSelection = ! ( mContext.getResources ( ) . getBoolean ( com.android.internal.R.bool.skip_restoring_network_selection ) ) ; sendSubscriptionSettings ( restoreSelection ) ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigManagerDialog.DeviceSelection selection = getSelection ( ) ; if ( ( selection.config ) != null ) { mManager.removeUserConfiguration ( selection.device , selection.config.getName ( ) ) ; } else if ( ( selection.device ) != null ) { mManager.removeUserDevice ( selection.device ) ; } mTreeViewer.refresh ( ) ; select ( ( ( selection.config ) != null ? selection.device : null ) , null ) ; }
public boolean onTransact ( int code , android.os.Parcel data , android.os.Parcel reply , int flags ) throws android.os.RemoteException { try { return super . onTransact ( code , data , reply , flags ) ; } catch ( java.lang.RuntimeException e ) { if ( ! ( e instanceof java.lang.SecurityException ) ) { android.util.Slog.e ( com.android.server.WindowManagerService.TAG , "Window Session Crash" , e ) ; } throw e ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.lang.String testFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance ( ) . getTestFilePath ( com.android.ide.eclipse.adt.internal.project.AndroidManifestParserTest.TESTAPP_XML ) ; mManifestTestApp = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( testFilePath ) ; assertNotNull ( mManifestTestApp ) ; testFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance ( ) . getTestFilePath ( com.android.ide.eclipse.adt.internal.project.AndroidManifestParserTest.INSTRUMENTATION_XML ) ; mManifestInstrumentation = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( testFilePath ) ; assertNotNull ( mManifestInstrumentation ) ; }
public static int $noinline$runSmaliTest ( java.lang.String name , boolean input ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } try { java.lang.Class < ? > c = java.lang.Class.forName ( "SmaliTests" ) ; java.lang.reflect.Method m = c.getMethod ( name , new java.lang.Class [ ] { boolean . class } ) ; return ( ( java.lang.Integer ) ( m.invoke ( null , input ) ) ) ; } catch ( java.lang.Exception ex ) { throw new java.lang.Error ( ex ) ; } }
public java.util.Collection < java.lang.String > getFilterTypes ( ) { com.google.common.collect.ImmutableList.Builder < java.lang.String > splitTypeBuilder = com.google.common.collect.ImmutableList.builder ( ) ; if ( ( densityFilter ) != null ) { splitTypeBuilder.add ( OutputFile.DENSITY ) ; } if ( ( abiFilter ) != null ) { splitTypeBuilder.add ( OutputFile.ABI ) ; } return splitTypeBuilder.build ( ) ; }
public void testNativeTcpSocketPair ( ) throws java.lang.Exception { for ( java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS ) { java.net.InetAddress local = java.net.InetAddress.getByName ( addr ) ; try ( android.net.IpSecTransform transform = buildDefaultTransform ( local ) ) { android.net.cts.IpSecBaseTest.SocketPair < android.net.cts.IpSecBaseTest.NativeTcpSocket > sockets = android.net.cts.IpSecBaseTest.getNativeTcpSocketPair ( local , mISM , transform ) ; checkSocketPair ( sockets.mLeftSock , sockets.mRightSock ) ; } } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; final java.io.File tmpDir = libcore.io.IoUtils.createTemporaryDirectory ( "OldPreferenceTest" ) ; defaultFactory = java.util.prefs.Preferences.setPreferencesFactory ( new libcore.java.util.prefs.PreferencesTest.TestPreferencesFactory ( tmpDir.getAbsolutePath ( ) ) ) ; java.util.prefs.Preferences pref = java.util.prefs.Preferences.userNodeForPackage ( java.util.prefs.Preferences.class ) ; for ( java.lang.String child : pref.childrenNames ( ) ) { pref.node ( child ) . removeNode ( ) ; } pref.clear ( ) ; }
public void initForSecondary ( ) { middleLength = 3 ; minBytes [ 1 ] = 0 ; maxBytes [ 1 ] = 0 ; minBytes [ 2 ] = 0 ; maxBytes [ 2 ] = 0 ; minBytes [ 3 ] = ( Collation.LEVEL_SEPARATOR_BYTE ) + 1 ; maxBytes [ 3 ] = 255 ; minBytes [ 4 ] = 2 ; maxBytes [ 4 ] = 255 ; }
private void writeUserLocked ( android.content.pm.UserInfo userInfo ) { java.io.FileOutputStream fos = null ; android.util.AtomicFile userFile = new android.util.AtomicFile ( new java.io.File ( mUsersDir , ( ( userInfo.id ) + ( com.android.server.pm.UserManagerService.XML_SUFFIX ) ) ) ) ; try { fos = userFile.startWrite ( ) ; final java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( fos ) ; final org.xmlpull.v1.XmlSerializer serializer = new com.android.internal.util.FastXmlSerializer ( ) ; serializer.setOutput ( bos , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ; serializer.startDocument ( null , true ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; serializer.startTag ( null , com.android.server.pm.UserManagerService.TAG_USER ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_ID , java.lang.Integer.toString ( userInfo.id ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_SERIAL_NO , java.lang.Integer.toString ( userInfo.serialNumber ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_FLAGS , java.lang.Integer.toString ( userInfo.flags ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_CREATION_TIME , java.lang.Long.toString ( userInfo.creationTime ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_LAST_LOGGED_IN_TIME , java.lang.Long.toString ( userInfo.lastLoggedInTime ) ) ; com.android.server.pm.UserManagerService.RestrictionsPinState pinState = mRestrictionsPinStates.get ( userInfo.id ) ; if ( pinState != null ) { if ( ( pinState.salt ) != 0 ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_SALT , java.lang.Long.toString ( pinState.salt ) ) ; } if ( ( pinState.pinHash ) != null ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_PIN_HASH , pinState.pinHash ) ; } if ( ( pinState.failedAttempts ) != 0 ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_FAILED_ATTEMPTS , java.lang.Integer.toString ( pinState.failedAttempts ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_LAST_RETRY_MS , java.lang.Long.toString ( pinState.lastAttemptTime ) ) ; } } if ( ( userInfo.iconPath ) != null ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_ICON_PATH , userInfo.iconPath ) ; } if ( userInfo.partial ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_PARTIAL , "true" ) ; } if ( userInfo.guestToRemove ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_GUEST_TO_REMOVE , "true" ) ; } if ( ( userInfo.profileGroupId ) != ( android.content.pm.UserInfo.NO_PROFILE_GROUP_ID ) ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_PROFILE_GROUP_ID , java.lang.Integer.toString ( userInfo.profileGroupId ) ) ; } serializer.startTag ( null , com.android.server.pm.UserManagerService.TAG_NAME ) ; serializer.text ( userInfo.name ) ; serializer.endTag ( null , com.android.server.pm.UserManagerService.TAG_NAME ) ; android.os.Bundle restrictions = mUserRestrictions.get ( userInfo.id ) ; if ( restrictions != null ) { writeRestrictionsLocked ( serializer , restrictions ) ; } serializer.endTag ( null , com.android.server.pm.UserManagerService.TAG_USER ) ; serializer.endDocument ( ) ; userFile.finishWrite ( fos ) ; } catch ( java.lang.Exception ioe ) { android.util.Slog.e ( com.android.server.pm.UserManagerService.LOG_TAG , ( ( ( "Error writing user info " + ( userInfo.id ) ) + "\n" ) + ioe ) ) ; userFile.failWrite ( fos ) ; } }
public void setVisibleRow ( int row ) { myVisibleRow = row ; final java.awt.Rectangle rowBounds = getRowBounds ( myVisibleRow ) ; final int indent = ( ( rowBounds.x ) - ( getVisibleRect ( ) . x ) ) - ( getTreeColumnOffset ( ) ) ; setPreferredSize ( new java.awt.Dimension ( ( ( getRowBounds ( myVisibleRow ) . width ) + indent ) , getPreferredSize ( ) . height ) ) ; }
public void testCommentAfterDeclaration ( ) throws java.lang.Exception { com.intellij.psi.formatter.java.CodeStyleSettings codeStyleSettings = com.intellij.psi.formatter.java.CodeStyleSettingsManager.getSettings ( getProject ( ) ) ; com.intellij.psi.formatter.java.CommonCodeStyleSettings javaSettings = codeStyleSettings.getCommonSettings ( JavaLanguage.INSTANCE ) ; int oldMargin = codeStyleSettings.getDefaultRightMargin ( ) ; int oldWrap = javaSettings.ASSIGNMENT_WRAP ; try { codeStyleSettings.setDefaultRightMargin ( 20 ) ; javaSettings.ASSIGNMENT_WRAP = CommonCodeStyleSettings.WRAP_AS_NEEDED ; doMethodTest ( "int i=0; //comment comment" , ( "int i =\n" + " 0; //comment comment" ) ) ; } finally { codeStyleSettings.setDefaultRightMargin ( oldMargin ) ; javaSettings.ASSIGNMENT_WRAP = oldWrap ; } }
private com.android.ide.common.rendering.api.RenderSession convertToScene ( com.android.layoutlib.api.ILayoutResult result ) { com.android.ide.common.rendering.api.Result sceneResult ; com.android.ide.common.rendering.api.ViewInfo rootViewInfo = null ; if ( ( result.getSuccess ( ) ) == ( com.android.layoutlib.api.ILayoutResult.SUCCESS ) ) { sceneResult = Status.SUCCESS.createResult ( ) ; com.android.layoutlib.api.ILayoutResult.ILayoutViewInfo oldRootView = result.getRootView ( ) ; if ( oldRootView != null ) { rootViewInfo = convertToViewInfo ( oldRootView ) ; } } else { sceneResult = Status.ERROR_UNKNOWN.createResult ( result.getErrorMessage ( ) ) ; } return new com.android.ide.common.rendering.StaticRenderSession ( sceneResult , rootViewInfo , result.getImage ( ) ) ; }
private void receiveOnDatagramSocket1 ( int bufSize , java.lang.String expectedString ) throws java.io.IOException { byte [ ] buf = new byte [ bufSize ] ; this . datagramSocket1.setSoTimeout ( 6000 ) ; java.net.DatagramPacket rdp = new java.net.DatagramPacket ( buf , buf.length ) ; this . datagramSocket1.receive ( rdp ) ; assertEquals ( new java.lang.String ( buf , 0 , bufSize ) . trim ( ) , expectedString ) ; }
boolean connectAudio ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ! ( mStateMachine.isConnected ( ) ) ) { return false ; } if ( ! ( mStateMachine.isSlcConnected ( ) ) ) { return false ; } if ( mStateMachine.isAudioOn ( ) ) { return false ; } mStateMachine.sendMessage ( HeadsetStateMachine.CONNECT_AUDIO ) ; return true ; }
public void dumpShowsLastFailureTraceAndPendingConnectionTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #1" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #2" ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #1" ) ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #2" ) ) ; }
void crashApplication ( com.android.server.am.ProcessRecord r , android.app.ApplicationErrorReport.CrashInfo crashInfo ) { final int callingPid = android.os.Binder.getCallingPid ( ) ; final int callingUid = android.os.Binder.getCallingUid ( ) ; final long origId = android.os.Binder.clearCallingIdentity ( ) ; try { crashApplicationInner ( r , crashInfo , callingPid , callingUid ) ; } finally { android.os.Binder.restoreCallingIdentity ( origId ) ; } }
private static java.lang.Process exec ( java.lang.String cmd ) throws java.io.IOException { java.lang.String [ ] cmdarray = new java.lang.String [ ] { "sh" , "-c" , cmd } ; android.util.Log.v ( com.android.traceur.AtraceUtils.TAG , ( "exec: " + ( java.util.Arrays.toString ( cmdarray ) ) ) ) ; return com.android.traceur.AtraceUtils.RUNTIME.exec ( cmdarray ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeParcelable ( uri , flags ) ; dest.writeByteArray ( callSpecificAppData.toByteArray ( ) ) ; dest.writeParcelable ( phoneAccountHandle , flags ) ; dest.writeInt ( ( isVideoCall ? 1 : 0 ) ) ; dest.writeInt ( ( isDuoCall ? 1 : 0 ) ) ; dest.writeString ( callSubject ) ; dest.writeInt ( ( allowAssistedDial ? 1 : 0 ) ) ; dest.writeBundle ( inCallUiIntentExtras ) ; }
public void testSetLinkPropertiesEmptyDns ( ) throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse ( 0 , ( - 1 ) , 1 , 2 , "IP" , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME , java.util.Arrays.asList ( new android.net.LinkAddress ( android.net.NetworkUtils.numericToInetAddress ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_ADDRESS ) , 0 ) ) , null , java.util.Arrays.asList ( android.net.NetworkUtils.numericToInetAddress ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY ) ) , java.util.Arrays.asList ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS ) , 1440 ) ; android.net.LinkProperties linkProperties = new android.net.LinkProperties ( ) ; org.junit.Assert.assertEquals ( SetupResult.SUCCESS , setLinkProperties ( response , linkProperties ) ) ; }
public void test_SSL_CTX_new ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; org.junit.Assert.assertTrue ( ( c != ( org.conscrypt.NativeCryptoTest.NULL ) ) ) ; long c2 = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; org.junit.Assert.assertTrue ( ( c != c2 ) ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c2 ) ; }
public byte [ ] getEncoded ( ) { try { if ( ( info ) != null ) { return info.getEncoded ( ASN1Encoding.DER ) ; } org.bouncycastle.asn1.pkcs.PrivateKeyInfo info = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo ( new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers.dhKeyAgreement , new org.bouncycastle.asn1.pkcs.DHParameter ( dhSpec.getP ( ) , dhSpec.getG ( ) , dhSpec.getL ( ) ) ) , new org.bouncycastle.asn1.ASN1Integer ( getX ( ) ) ) ; return info.getEncoded ( ASN1Encoding.DER ) ; } catch ( java.io.IOException e ) { return null ; } }
private void notifyFocusChanged ( com.android.ddmlib.IDevice device ) { com.android.hierarchyviewerlib.models.DeviceSelectionModel.IWindowChangeListener [ ] listeners = getWindowChangeListenerList ( ) ; if ( listeners != null ) { for ( int i = 0 ; i < ( listeners.length ) ; i ++ ) { listeners [ i ] . focusChanged ( device ) ; } } }
public void interfaceRemoved ( java.lang.String iface ) { super . interfaceRemoved ( iface ) ; if ( mClatInterfaceName.equals ( iface ) ) { mCallback.setNeighborDiscoveryOffload ( true ) ; } else if ( ! ( mInterfaceName.equals ( iface ) ) ) { return ; } final java.lang.String msg = ( "interfaceRemoved(" + iface ) + ")" ; logMsg ( msg ) ; }
public void addHeaderView ( android.view.View v , java.lang.Object data , boolean isSelectable ) { final android.widget.ListView.FixedViewInfo info = new android.widget.ListView.FixedViewInfo ( ) ; info.view = v ; info.data = data ; info.isSelectable = isSelectable ; mHeaderViewInfos.add ( info ) ; mAreAllItemsSelectable &= isSelectable ; if ( ( mAdapter ) != null ) { if ( ! ( ( mAdapter ) instanceof android.widget.HeaderViewListAdapter ) ) { mAdapter = new android.widget.HeaderViewListAdapter ( mHeaderViewInfos , mFooterViewInfos , mAdapter ) ; } if ( ( mDataSetObserver ) != null ) { mDataSetObserver.onChanged ( ) ; } } }
public static long $noinline$AddNegs3 ( long arg1 , long arg2 ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } long res = 0 ; long n_arg1 = - arg1 ; long n_arg2 = - arg2 ; for ( long i = 0 ; i < 1 ; i ++ ) { res += ( n_arg1 + n_arg2 ) + i ; } return res ; }
private boolean isMarkupElement ( org.w3c.dom.Element element ) { if ( ( mStyle ) != ( XmlFormatStyle.RESOURCE ) ) { return false ; } org.w3c.dom.Node curr = element.getParentNode ( ) ; while ( curr != null ) { if ( com.android.ide.eclipse.adt.internal.editors.values.descriptors.ValuesDescriptors.STRING_ELEMENT.equals ( curr.getNodeName ( ) ) ) { return true ; } curr = curr.getParentNode ( ) ; } return false ; }
public boolean contains ( java.lang.String key , int uid ) { try { return ( mBinder.exist ( key , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public org.objectweb.asm.AnnotationVisitor visitTypeAnnotation ( int typeRef , org.objectweb.asm.TypePath typePath , java.lang.String desc , boolean visible ) { return null ; }
public void invalidateDrawable ( @ android.annotation.NonNull android.graphics.drawable.Drawable drawable ) { if ( verifyDrawable ( drawable ) ) { final android.graphics.Rect dirty = drawable.getDirtyBounds ( ) ; final int scrollX = mScrollX ; final int scrollY = mScrollY ; invalidate ( ( ( dirty.left ) + scrollX ) , ( ( dirty.top ) + scrollY ) , ( ( dirty.right ) + scrollX ) , ( ( dirty.bottom ) + scrollY ) ) ; mPrivateFlags3 |= android.view.View.PFLAG3_OUTLINE_INVALID ; } }
java.lang.String convert ( com.google.common.base.CaseFormat format , java.lang.String s ) { if ( format == ( com.google.common.base.CaseFormat.LOWER_HYPHEN ) ) { return com.google.common.base.Ascii.toLowerCase ( s.replace ( '_' , '-' ) ) ; } if ( format == ( com.google.common.base.CaseFormat.LOWER_UNDERSCORE ) ) { return com.google.common.base.Ascii.toLowerCase ( s ) ; } return super . convert ( format , s ) ; }
private final java.lang.StringBuffer fallbackFormat ( android.icu.util.Calendar fromCalendar , android.icu.util.Calendar toCalendar , boolean fromToOnSameDay , java.lang.StringBuffer appendTo , java.text.FieldPosition pos , java.lang.String fullPattern ) { java.lang.String originalPattern = fDateFormat.toPattern ( ) ; fDateFormat.applyPattern ( fullPattern ) ; fallbackFormat ( fromCalendar , toCalendar , fromToOnSameDay , appendTo , pos ) ; fDateFormat.applyPattern ( originalPattern ) ; return appendTo ; }
protected void setValue ( java.lang.String verb , java.lang.String directObject , java.lang.String longFlagName , java.lang.Object value ) { java.lang.String key = ( ( ( verb + '/' ) + directObject ) + '/' ) + longFlagName ; com.android.sdkmanager.CommandLineProcessor.Arg arg = mArguments.get ( key ) ; arg.setCurrentValue ( value ) ; }
synchronized void nContextDestroy ( ) { validate ( ) ; java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock wlock = mRWLock.writeLock ( ) ; wlock.lock ( ) ; long curCon = mContext ; mContext = 0 ; wlock.unlock ( ) ; rsnContextDestroy ( curCon ) ; }
public void exit ( ) { mRun = false ; synchronized ( this ) { notifyAll ( ) ; } try { this . join ( ) ; } catch ( java.lang.InterruptedException e ) { } mInPixelsAllocation.destroy ( ) ; mInPixelsAllocation2.destroy ( ) ; if ( ( mOutPixelsAllocation ) != ( mOutDisplayAllocation ) ) { mOutPixelsAllocation.destroy ( ) ; } mOutDisplayAllocation.destroy ( ) ; mRS.destroy ( ) ; mInPixelsAllocation = null ; mInPixelsAllocation2 = null ; mOutPixelsAllocation = null ; mOutDisplayAllocation = null ; mRS = null ; }
private int getExpectedInstallLocation ( int userSetting ) { int iloc = android.content.pm.PackageInfo.INSTALL_LOCATION_UNSPECIFIED ; boolean enable = getUserSettingSetInstallLocation ( ) ; if ( enable ) { if ( userSetting == ( com.android.internal.content.PackageHelper.APP_INSTALL_AUTO ) ) { iloc = android.content.pm.PackageInfo.INSTALL_LOCATION_AUTO ; } else if ( userSetting == ( com.android.internal.content.PackageHelper.APP_INSTALL_EXTERNAL ) ) { iloc = android.content.pm.PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL ; } else if ( userSetting == ( com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL ) ) { iloc = android.content.pm.PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY ; } } return iloc ; }
public void enter ( ) { log ( ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; broadcastAudioState ( mCurrentDevice , BluetoothA2dpSink.STATE_NOT_PLAYING , BluetoothA2dpSink.STATE_PLAYING ) ; synchronized ( this ) { if ( ( mStreaming ) == null ) { if ( com.android.bluetooth.a2dpsink.A2dpSinkStateMachine.DBG ) { log ( "Creating New A2dpSinkStreamHandler" ) ; } mStreaming = new com.android.bluetooth.a2dpsink.A2dpSinkStreamHandler ( this , mContext ) ; } } if ( ( mStreaming.getAudioFocus ( ) ) == ( android.media.AudioManager.AUDIOFOCUS_NONE ) ) { informAudioFocusStateNative ( 0 ) ; } }
private void showAvdManagerWindow ( ) { try { com.android.sdkuilib.internal.widgets.MessageBoxLog errorLogger = new com.android.sdkuilib.internal.widgets.MessageBoxLog ( "AVD Manager" , org.eclipse.swt.widgets.Display.getCurrent ( ) , true ) ; com.android.sdkuilib.repository.AvdManagerWindow window = new com.android.sdkuilib.repository.AvdManagerWindow ( null , errorLogger , mOsSdkFolder , com.android.sdkuilib.repository.AvdManagerWindow.AvdInvocationContext.STANDALONE ) ; window.registerPage ( com.android.sdkmanager.internal.repository.SettingsPage.class , UpdaterPage.Purpose.SETTINGS ) ; window.registerPage ( com.android.sdkmanager.internal.repository.AboutPage.class , UpdaterPage.Purpose.ABOUT_BOX ) ; window.open ( ) ; errorLogger.displayResult ( true ) ; } catch ( java.lang.Exception e ) { e.printStackTrace ( ) ; } }
public int getState ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getState = " + ( mService.getState ( ) ) ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return android.bluetooth.BluetoothPbap.STATE_DISCONNECTED ; return service.getState ( ) ; }
public void reloadSdk ( ) { mSdkManager.reloadSdk ( mSdkLog ) ; if ( ( mAvdManager ) != null ) { try { mAvdManager.reloadAvds ( mSdkLog ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { } } mLocalSdkParser.clearPackages ( ) ; broadcastOnSdkReload ( ) ; }
public boolean validates ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull java.lang.String value ) { java.util.regex.Matcher matcher = com.android.manifmerger.AttributeModel.Hexadecimal32Bits.PATTERN.matcher ( value ) ; boolean valid = ( matcher.matches ( ) ) && ( ( matcher.group ( 1 ) . length ( ) ) <= 8 ) ; if ( ! valid ) { attribute.addMessage ( mergingReport , MergingReport.Record.Severity.ERROR , java.lang.String.format ( ( "Attribute %1$s at %2$s is not a valid hexadecimal 32 bit value," + " found %3$s" ) , attribute.getId ( ) , attribute.printPosition ( ) , value ) ) ; } return valid ; }
protected java.lang.String comparisonKey ( ) { java.lang.String s = super . comparisonKey ( ) ; int pos = s.indexOf ( "|r:" ) ; assert pos > 0 ; s = ( ( ( ( ( s.substring ( 0 , pos ) ) + "|tag:" ) + ( getTag ( ) . getId ( ) ) ) + "|abi:" ) + ( getAbiDisplayName ( ) ) ) + ( s.substring ( pos ) ) ; return s ; }
public static boolean requiresClat ( com.android.server.connectivity.NetworkAgentInfo nai ) { final int netType = nai.networkInfo.getType ( ) ; final boolean supported = com.android.internal.util.ArrayUtils.contains ( com.android.server.connectivity.Nat464Xlat.NETWORK_TYPES , nai.networkInfo.getType ( ) ) ; final boolean connected = nai.networkInfo.isConnected ( ) ; final boolean hasIPv4Address = ( ( nai.linkProperties ) != null ) && ( nai.linkProperties.hasIPv4Address ( ) ) ; return ( supported && connected ) && ( ! hasIPv4Address ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/ToastTest.java:31: Warning: Toast created but not shown: did you forget to call show() ? [ShowToast]\n" + ( ( ( ( ( ( ( ( ( ( ( ( " Toast.makeText(context, \"foo\", Toast.LENGTH_LONG);\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/ToastTest.java:32: Warning: Expected duration Toast.LENGTH_SHORT or Toast.LENGTH_LONG, a custom duration value is not supported [ShowToast]\n" ) + " Toast toast = Toast.makeText(context, R.string.app_name, 5000);\n" ) + " ~~~~\n" ) + "src/test/pkg/ToastTest.java:32: Warning: Toast created but not shown: did you forget to call show() ? [ShowToast]\n" ) + " Toast toast = Toast.makeText(context, R.string.app_name, 5000);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/ToastTest.java:38: Warning: Toast created but not shown: did you forget to call show() ? [ShowToast]\n" ) + " Toast.makeText(context, \"foo\", Toast.LENGTH_LONG);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 4 warnings\n" ) + "" ) ) , lintProject ( "src/test/pkg/ToastTest.java.txt=>src/test/pkg/ToastTest.java" ) ) ; }
public boolean needsPreprocessing ( java.io.File resourceFile ) { return ( ( ( isXml ( resourceFile ) ) && ( isInDrawable ( resourceFile ) ) ) && ( ( getEffectiveVersion ( resourceFile ) ) < ( com.android.builder.png.VectorDrawableRenderer.MIN_SDK_WITH_VECTOR_SUPPORT ) ) ) && ( isRootVector ( resourceFile ) ) ; }
public java.lang.String format ( double number , android.icu.text.NumberFormat numberFormat , android.icu.text.PluralRules pluralRules ) { java.lang.String formatStr = numberFormat.format ( number ) ; android.icu.impl.StandardPlural p = android.icu.text.QuantityFormatter.selectPlural ( number , numberFormat , pluralRules ) ; android.icu.impl.SimplePatternFormatter formatter = templates [ p.ordinal ( ) ] ; if ( formatter == null ) { formatter = templates [ android.icu.impl.StandardPlural.OTHER_INDEX ] ; assert formatter != null ; } return formatter.format ( formatStr ) ; }
void setForceScoAudio ( boolean forced ) { mForceScoAudio = forced ; }
public boolean isEnabled ( com.intellij.openapi.actionSystem.AnActionEvent e ) { return ( ( ( selectedConfiguration ) != null ) && ( selectedConfiguration.isEditable ( ) ) ) && ( ( editableConfigurations.indexOf ( selectedConfiguration ) ) < ( ( editableConfigurations.size ( ) ) - 1 ) ) ; }
protected void onPreExecute ( ) { java.lang.String format = "yyyy-MM-dd-HH-mm-ss" ; java.lang.String now = new java.text.SimpleDateFormat ( format , java.util.Locale.US ) . format ( new java.util.Date ( ) ) ; mFile = new java.io.File ( com.android.traceur.AtraceUtils.TRACE_DIRECTORY , java.lang.String.format ( "trace-%s-%s-%s.ctrace" , Build.BOARD , Build.ID , now ) ) ; com.android.traceur.FileSender.postCaptureNotification ( context , mFile ) ; }
public static void addJavadocTag ( org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite , org.eclipse.jdt.core.dom.BodyDeclaration node , java.lang.String tagText ) { org.eclipse.jdt.core.dom.Javadoc javadoc = node.getJavadoc ( ) ; if ( javadoc == null ) { org.eclipse.jdt.core.dom.AST ast = node.getAST ( ) ; javadoc = ( ( org.eclipse.jdt.core.dom.Javadoc ) ( ast.createInstance ( org.eclipse.jdt.core.dom.Javadoc.class ) ) ) ; rewrite.set ( node , node.getJavadocProperty ( ) , javadoc , null ) ; } com.google.currysrc.api.transform.JavadocUtils.addJavadocTag ( rewrite , javadoc , tagText ) ; }
public void testDeserializeWasSerializableClass ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737200316c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + ( "e546573742457617353657269616c697a61626c65000000000000000002000149000169787000000" + "000" ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; try { libcore.libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; }
private boolean isSecondaryExternalPath ( java.lang.String path ) { for ( int i = 1 ; i < ( mExternalStoragePaths.length ) ; i ++ ) { if ( path.startsWith ( mExternalStoragePaths [ i ] ) ) { return true ; } } return false ; }
public void unholdCall ( java.lang.String callId ) { try { android.telecom.Log.startSession ( "ICA.uC" , mOwnerComponentName ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { mCallsManager.unholdCall ( call ) ; } else { android.telecom.Log.w ( this , "unholdCall, unknown call id: %s" , callId ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void run ( org.eclipse.jface.action.IAction action ) { final com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( sdk != null ) { com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . refreshSdk ( ) ; com.android.sdkuilib.repository.AvdManagerWindow window = new com.android.sdkuilib.repository.AvdManagerWindow ( com.android.ide.eclipse.adt.AdtPlugin.getShell ( ) , new com.android.ide.eclipse.adt.internal.sdk.AdtConsoleSdkLog ( ) , sdk.getSdkLocation ( ) , com.android.sdkuilib.repository.AvdManagerWindow.AvdInvocationContext.IDE ) ; window.open ( ) ; } else { com.android.ide.eclipse.adt.AdtPlugin.displayError ( "Android SDK" , "Location of the Android SDK has not been setup in the preferences." ) ; } }
private com.android.ims.internal.IImsMMTelFeature createEmergencyMMTelFeatureInternal ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) { android.telephony.ims.feature.MMTelFeature f = onCreateEmergencyMMTelImsFeature ( slotId ) ; if ( f != null ) { setupFeature ( f , slotId , ImsFeature.EMERGENCY_MMTEL , c ) ; return f.getBinder ( ) ; } else { return null ; } }
private void handleUserUnlockOrSwitch ( int userId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Loading from store after user switch/unlock for " + userId ) ) ; } if ( loadFromUserStoreAfterUnlockOrSwitch ( userId ) ) { saveToStore ( true ) ; mPendingUnlockStoreRead = false ; } }
private java.lang.String getNewClassName ( java.lang.String fqcn ) { assert isInRenamedPackage ( fqcn ) : fqcn ; int lastDot = fqcn.lastIndexOf ( '.' ) ; if ( lastDot < 0 ) { return mNewPackage ; } java.lang.String name = fqcn.substring ( lastDot , fqcn.length ( ) ) ; java.lang.String newClassName = ( mNewPackage ) + name ; return newClassName ; }
private static double luma ( int pixel ) { final int R = android.graphics.Color.red ( pixel ) ; final int G = android.graphics.Color.green ( pixel ) ; final int B = android.graphics.Color.blue ( pixel ) ; return ( ( 0.299 * R ) + ( 0.587 * G ) ) + ( 0.114 * B ) ; }
void resetProperties ( ) { if ( ( mCurrentAppType ) == ( UiccController.APP_FAM_3GPP ) ) { com.android.internal.telephony.uicc.UiccProfile.log ( ( "update icc_operator_numeric=" + "" ) ) ; mTelephonyManager.setSimOperatorNumericForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimCountryIsoForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimOperatorNameForPhone ( mPhoneId , "" ) ; } }
public void dumpShowsLastFailureTraceAndPendingConnectionTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #1" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #2" ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #1" ) ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #2" ) ) ; }
public android.net.wifi.aware.ConfigRequest createFromParcel ( android.os.Parcel in ) { boolean support5gBand = ( in.readInt ( ) ) != 0 ; int masterPreference = in.readInt ( ) ; int clusterLow = in.readInt ( ) ; int clusterHigh = in.readInt ( ) ; int [ ] discoveryWindowInterval = in.createIntArray ( ) ; return new android.net.wifi.aware.ConfigRequest ( support5gBand , masterPreference , clusterLow , clusterHigh , discoveryWindowInterval ) ; }
private void fillUi ( ) { if ( ( ( com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ) != null ) && ( mProject.isOpen ( ) ) ) { com.android.ide.eclipse.adt.internal.sdk.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState ( mProject ) ; mPropertiesWorkingCopy = state.getProperties ( ) . makeWorkingCopy ( ) ; com.android.sdklib.IAndroidTarget target = state.getTarget ( ) ; if ( target != null ) { mSelector.setSelection ( target ) ; } mIsLibrary.setSelection ( state.isLibrary ( ) ) ; mLibraryDependencies.setContent ( state , mPropertiesWorkingCopy ) ; } }
public java.lang.CharSequence getAndroidCarrierNameForSubscription ( ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; return service.getSubscriptionCarrierName ( getSubId ( ) ) ; } catch ( android.os.RemoteException ex ) { ex.rethrowAsRuntimeException ( ) ; } catch ( java.lang.NullPointerException ex ) { throw new java.lang.IllegalStateException ( "Telephony service unavailable" ) ; } return null ; }
public void testSetValues009_Object ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value oldValue = getStaticFieldValue ( classID , "OBJECT_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value newValue = getStaticFieldValue ( classID , "OBJECT_PARAM_VALUE_TO_SET" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( StackTrace002Debuggee.OBJECT_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo suspensionMethodInfo = tester.addTestMethod ( "breakpointObject" ) ; suspensionMethodInfo.addVariable ( "param" , oldValue , newValue ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointObject" ) ; methodInfo.addVariable ( "param" , oldValue , newValue ) ; runStackFrameTest ( tester , suspensionMethodInfo ) ; }
public java.lang.String getDeviceId ( java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "getDeviceId" ) ) ) { return null ; } final com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( 0 ) ; if ( phone != null ) { return phone.getDeviceId ( ) ; } else { return null ; } }
private void doExtractZipFails ( java.io.ByteArrayOutputStream baos ) { java.io.File dir = createTempDir ( ) ; java.io.File targetDir = new java.io.File ( dir , "target" ) ; libcore.tzdata.shared2.TimeZoneDistroTest.TestInputStream inputStream = new libcore.tzdata.shared2.TimeZoneDistroTest.TestInputStream ( new java.io.ByteArrayInputStream ( baos.toByteArray ( ) ) ) ; try { libcore.tzdata.shared2.TimeZoneDistro.extractZipSafely ( inputStream , targetDir , true ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } inputStream.assertClosed ( ) ; }
protected void collect ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JType type ) { if ( type instanceof com.android.jack.ir.ast.JDefinedClassOrInterface ) { com.android.jack.ir.ast.JDefinedClassOrInterface jDefinedClassOrInterface = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( type ) ) ; synchronized ( jDefinedClassOrInterface ) { if ( ! ( jDefinedClassOrInterface.containsMarker ( com.android.jack.backend.dex.MainDexMarker.class ) ) ) { jDefinedClassOrInterface.addMarker ( MainDexMarker.INSTANCE ) ; } } } }
public void wifiNanDestroyDiscoverySession ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "sessionId" , description = "The discovery session ID returned when session was created using publish or subscribe" ) java.lang.Integer sessionId ) throws android.os.RemoteException { synchronized ( mLock ) { android.net.wifi.nan.WifiNanDiscoveryBaseSession session = mDiscoverySessions.get ( sessionId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling wifiNanTerminateSession before session (session ID " + sessionId ) + ") is ready" ) ) ; } session.destroy ( ) ; mDiscoverySessions.remove ( sessionId ) ; } }
public void testEmptyApk ( ) throws java.lang.Exception { try { verifyForMinSdkVersion ( "empty-unsigned.apk" , 1 ) ; org.junit.Assert.fail ( "ApkFormatException should've been thrown" ) ; } catch ( com.android.apksig.apk.ApkFormatException expected ) { } try { verifyForMinSdkVersion ( "v1-only-empty.apk" , 18 ) ; org.junit.Assert.fail ( "ApkFormatException should've been thrown" ) ; } catch ( com.android.apksig.apk.ApkFormatException expected ) { } try { verifyForMinSdkVersion ( "v2-only-empty.apk" , AndroidSdkVersion.N ) ; org.junit.Assert.fail ( "ApkFormatException should've been thrown" ) ; } catch ( com.android.apksig.apk.ApkFormatException expected ) { } }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { com.google.gct.testing.CloudTestConfigurationImpl newConfiguration = ( ( selectedConfiguration ) != null ) ? selectedConfiguration.copy ( "Copy of " ) : new com.google.gct.testing.CloudTestConfigurationImpl ( facet ) ; addNewConfiguration ( newConfiguration ) ; }
boolean isAudioConnected ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return ( mStateMachine.getAudioState ( ) ) == ( android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED ) ; }
private void launchConfirmationDialog ( com.android.internal.telephony.cat.TextMessage msg ) { msg.title = lastSelectedItem ; android.content.Intent newIntent = new android.content.Intent ( this , com.android.stk.StkDialogActivity.class ) ; newIntent.setFlags ( ( ( ( ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) | ( android.content.Intent.FLAG_ACTIVITY_NO_HISTORY ) ) | ( android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS ) ) | ( getFlagActivityNoUserAction ( com.android.stk.StkAppService.InitiatedByUserAction.unknown ) ) ) ) ; newIntent.putExtra ( "TEXT" , msg ) ; startActivity ( newIntent ) ; }
private synchronized void handleException ( java.lang.Exception e ) { mCacheState = com.android.ddmlib.PropertyFetcher.CacheState.UNPOPULATED ; com.android.ddmlib.Log.w ( "PropertyFetcher" , java.lang.String.format ( "%s getting properties for device %s: %s" , e.getClass ( ) . getSimpleName ( ) , mDevice.getSerialNumber ( ) , e.getMessage ( ) ) ) ; for ( java.util.Map.Entry < java.lang.String , com.google.common.util.concurrent.SettableFuture < java.lang.String > > entry : mPendingRequests.entrySet ( ) ) { entry.getValue ( ) . setException ( e ) ; } mPendingRequests.clear ( ) ; }
public com.google.gson.JsonObject toJson ( ) { com.google.gson.JsonObject json = new com.google.gson.JsonObject ( ) ; json.add ( com.android.vts.util.Graph.X_LABEL_KEY , new com.google.gson.JsonPrimitive ( getXLabel ( ) ) ) ; json.add ( com.android.vts.util.Graph.Y_LABEL_KEY , new com.google.gson.JsonPrimitive ( getYLabel ( ) ) ) ; json.add ( com.android.vts.util.Graph.NAME_KEY , new com.google.gson.JsonPrimitive ( getName ( ) ) ) ; json.add ( com.android.vts.util.Graph.TYPE_KEY , new com.google.gson.JsonPrimitive ( getType ( ) . toString ( ) ) ) ; return json ; }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , int duration , int maxExtendedAdvertisingEvents , android.bluetooth.le.AdvertisingSetCallback callback ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , duration , maxExtendedAdvertisingEvents , callback , new android.os.Handler ( android.os.Looper.getMainLooper ( ) ) ) ; }
public void testOnTearDownRestoreFailed ( ) throws java.lang.Exception { mCmdUtil.mCmdSuccess = false ; try { mPreparer.tearDown ( mDevice , mBuildInfo , null ) ; } catch ( java.lang.RuntimeException e ) { org.junit.Assert.assertEquals ( "HAL restore failed." , e.getMessage ( ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testThrowException ( ) ; Main.testDropArguments ( ) ; Main.testCatchException ( ) ; Main.testGuardWithTest ( ) ; Main.testArrayElementGetter ( ) ; Main.testArrayElementSetter ( ) ; Main.testIdentity ( ) ; Main.testConstant ( ) ; }
public void removePackageFromPreferred ( java.lang.String packageName ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.SET_PREFERRED_APPLICATIONS , null ) ; com.android.server.Log.w ( com.android.server.PackageManagerService.TAG , "removePackageFromPreferred: no longer implemented" ) ; }
private java.lang.Object getSelectedItem ( ) { org.eclipse.jface.viewers.ISelection sel = mTreeViewPackage.getSelection ( ) ; if ( sel instanceof org.eclipse.jface.viewers.IStructuredSelection ) { java.lang.Object elem = ( ( org.eclipse.jface.viewers.IStructuredSelection ) ( sel ) ) . getFirstElement ( ) ; if ( ( elem instanceof com.android.sdklib.internal.repository.updater.ArchiveInfo ) || ( elem instanceof com.android.sdkuilib.internal.repository.SdkUpdaterChooserDialog.LicenseEntry ) ) { return elem ; } } return null ; }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.CachedDirectFS ( new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) , permissions ) ; } catch ( com.android.sched.util.file.CannotChangePermissionException | com.android.sched.util.file.NotDirectoryException | com.android.sched.util.file.WrongPermissionException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.FileAlreadyExistsException | com.android.sched.util.file.CannotCreateFileException e ) { throw new com.android.sched.util.codec.ParsingException ( e ) ; } }
public static int readUnsignedLeb128 ( com.android.dex.util.ByteInput in ) { int result = 0 ; int cur ; int count = 0 ; do { cur = ( in.readByte ( ) ) & 255 ; result |= ( cur & 127 ) << ( count * 7 ) ; count ++ ; } while ( ( ( cur & 128 ) == 128 ) && ( count < 5 ) ) ; if ( ( cur & 128 ) == 128 ) { throw new com.android.dex.DexException ( "invalid LEB128 sequence" ) ; } return result ; }
private boolean shouldThrowSocketTimeoutExceptionFromAccept ( java.net.SocketTimeoutException e ) { if ( isBlocking ( ) ) { return true ; } java.lang.Throwable cause = e.getCause ( ) ; if ( cause instanceof android.system.ErrnoException ) { if ( ( ( ( android.system.ErrnoException ) ( cause ) ) . errno ) == ( EAGAIN ) ) { return false ; } } return true ; }
public void allOfWithWrongMatcher ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) org.hamcrest.Matcher < android.net.Uri > allOfMatcher = org.hamcrest.CoreMatchers.allOf ( android.support.test.espresso.intent.matcher.UriMatchers.hasHost ( "www.google.com" ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithName ( "sourceid" ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithName ( "param" ) , android.support.test.espresso.intent.matcher.UriMatchers.hasPath ( "/search" ) ) ; org.junit.Assert.assertFalse ( "Matcher shouldn't have matched." , allOfMatcher.matches ( uri ) ) ; }
public void handoverTo ( android.telecom.PhoneAccountHandle destAcct , int videoState , android.os.Bundle extras ) { requestHandover ( destAcct , videoState , extras , false ) ; }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules ( ) { java.util.List < com.google.currysrc.api.process.Rule > rules = com.google.common.collect.Lists.newArrayList ( Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ) ; rules.add ( com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( Icu4jTransform.ORIGINAL_ICU_PACKAGE , Icu4jTransform.ANDROID_ICU_PACKAGE ) ) ) ; rules.add ( com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.TranslateJcite.BeginEndTagsHandler ( ) ) ) ; return rules ; }
private void updateCurrentCheckboxTree ( com.google.common.base.Function < com.intellij.ui.CheckedTreeNode , java.lang.Void > updateFunction ) { com.google.gct.testing.dimension.CloudConfigurationDimension selectedDimension = getSelectedDimension ( ) ; com.intellij.ui.CheckboxTree currentCheckboxTree = treeMap.get ( selectedDimension ) ; com.intellij.ui.CheckedTreeNode rootNode = ( ( com.intellij.ui.CheckedTreeNode ) ( currentCheckboxTree.getModel ( ) . getRoot ( ) ) ) ; updateNode ( rootNode , updateFunction ) ; updateUI ( currentCheckboxTree ) ; selectedDimension.dimensionChanged ( ) ; updateConfigurationCountLabel ( ) ; list.updateUI ( ) ; }
public static void assertEquals ( float expected , float actual , float delta ) { org.junit.Assert.assertEquals ( null , expected , actual , delta ) ; }
private org.eclipse.swt.graphics.RGB renderDrawableResource ( java.lang.String themeItemName ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor = mPalette.getEditor ( ) ; java.awt.image.BufferedImage image = com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService.create ( editor ) . setSize ( 100 , 100 ) . renderThemeItem ( themeItemName ) ; if ( image != null ) { int rgb = image.getRGB ( ( ( image.getWidth ( ) ) / 2 ) , ( ( image.getHeight ( ) ) / 2 ) ) ; return com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageUtils.intToRgb ( rgb ) ; } return null ; }
java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hearingaid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; synchronized ( mStateMachines ) { java.util.List < android.bluetooth.BluetoothDevice > devices = new java.util.ArrayList < > ( ) ; for ( com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values ( ) ) { if ( sm.isConnected ( ) ) { devices.add ( sm.getDevice ( ) ) ; } } return devices ; } }
public void testAnimation ( ) throws java.lang.Throwable { final android.view.View view = mActivity.findViewById ( R.id.mock_view ) ; view.setAnimation ( null ) ; assertNull ( view.getAnimation ( ) ) ; view.setAnimation ( mAnimation ) ; runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { view.invalidate ( ) ; } } ) ; android.view.animation.cts.AnimationTestUtils.assertRunAnimation ( getInstrumentation ( ) , view , mAnimation , android.view.cts.View_AnimationTest.TIME_OUT ) ; }
private void show ( int id ) { android.widget.TextView tv = new android.widget.TextView ( this ) ; tv.setPadding ( 10 , 10 , 10 , 30 ) ; tv.setText ( id ) ; mInstructions.removeAllViews ( ) ; mInstructions.addView ( tv ) ; }
public boolean handlePinMmi ( java.lang.String dialString ) { com.android.internal.telephony.cdma.CdmaMmiCode mmi = com.android.internal.telephony.cdma.CdmaMmiCode.newFromDialString ( dialString , this ) ; if ( mmi == null ) { android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Mmi is NULL!" ) ; return false ; } else if ( mmi.isPukCommand ( ) ) { mPendingMmis.add ( mmi ) ; mMmiRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , mmi , null ) ) ; mmi.processCode ( ) ; return true ; } android.telephony.Rlog.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Unrecognized mmi!" ) ; return false ; }
public void testV1SignedAttrs ( ) throws java.lang.Exception { java.lang.String apk = "v1-only-with-signed-attrs.apk" ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.JELLY_BEAN_MR2 ) , Issue.JAR_SIG_VERIFY_EXCEPTION ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.KITKAT ) ) ; apk = "v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk" ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.JELLY_BEAN_MR2 ) , Issue.JAR_SIG_VERIFY_EXCEPTION ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verifyForMinSdkVersion ( apk , AndroidSdkVersion.KITKAT ) ) ; }
public void testLegacyForegroundAppAndAllPermissions ( ) throws java.lang.Exception { boolean output = false ; mThrowSecurityException = false ; mMockApplInfo.targetSdkVersion = Build.VERSION_CODES.GINGERBREAD ; mPkgNameOfTopActivity = com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME ; mWifiScanAllowApps = android.app.AppOpsManager.MODE_ALLOWED ; mUid = com.android.server.wifi.util.WifiPermissionsUtilTest.MANAGED_PROFILE_UID ; mCurrentUser = android.os.UserHandle.USER_CURRENT_OR_SELF ; setupTestCase ( ) ; com.android.server.wifi.util.WifiPermissionsUtil codeUnderTest = new com.android.server.wifi.util.WifiPermissionsUtil ( mMockPermissionsWrapper , mMockContext , mMockWifiSettingsStore , mMockUserManager , mNetworkScorerAppManager ) ; try { output = codeUnderTest.canAccessScanResults ( com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME , mUid , mTargetVersion ) ; } catch ( java.lang.SecurityException e ) { throw e ; } org.junit.Assert.assertEquals ( output , true ) ; }
public static < R , C , V > com.google.common.collect.HashBasedTable < R , C , V > create ( int expectedRows , int expectedCellsPerRow ) { com.google.common.collect.CollectPreconditions.checkNonnegative ( expectedCellsPerRow , "expectedCellsPerRow" ) ; java.util.Map < R , java.util.Map < C , V > > backingMap = com.google.common.collect.Maps.newHashMapWithExpectedSize ( expectedRows ) ; return new com.google.common.collect.HashBasedTable < R , C , V > ( backingMap , new com.google.common.collect.HashBasedTable.Factory < C , V > ( expectedCellsPerRow ) ) ; }
private static java.lang.String [ ] getDhcpRanges ( android.content.Context ctx ) { final java.lang.String [ ] fromResource = ctx.getResources ( ) . getStringArray ( com.android.internal.R.array.config_tether_dhcp_range ) ; if ( ( ( fromResource.length ) > 0 ) && ( ( ( fromResource.length ) % 2 ) == 0 ) ) { return fromResource ; } return com.android.server.connectivity.tethering.TetheringConfiguration.copy ( com.android.server.connectivity.tethering.TetheringConfiguration.DHCP_DEFAULT_RANGE ) ; }
private void enqueue ( java.lang.ref.Reference < ? > list ) { java.lang.ref.Reference < ? > start = list ; do { java.lang.ref.Reference < ? > next = list.pendingNext ; list.pendingNext = null ; list.enqueueInternal ( ) ; list = next ; } while ( list != start ) ; }
private com.android.jill.frontend.java.Variable getVariableWithLocalIndex ( @ javax.annotation.Nonnegative int localIdx , @ javax.annotation.Nonnull java.lang.String id , @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull org.objectweb.asm.Type type , @ javax.annotation.CheckForNull java.lang.String signature ) { com.android.jill.frontend.java.Variable var = nameToVar.get ( id ) ; if ( var == null ) { var = new com.android.jill.frontend.java.Variable ( id , name , type , signature , localIdx , ( ( getLocalVariableNode ( localIdx ) ) == null ) ) ; nameToVar.put ( id , var ) ; } return var ; }
public void sendSingleScanAllChannelsRequest ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = com.android.server.wifi.ScanTestUtil.createRequest ( com.android.server.wifi.ScanTestUtil.channelsToSpec ( 2400 , 2450 , 5150 , 5175 , 5600 , 5650 , 5660 ) , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; doSuccessfulSingleScan ( requestSettings , com.android.server.wifi.ScanTestUtil.computeSingleScanNativeSettings ( requestSettings ) , com.android.server.wifi.ScanResults.create ( 0 , true , 2400 , 5150 , 5175 ) ) ; }
public static void doTest ( art.Test1937.Transform t ) { t.sayHi ( ) ; art.Redefinition.doCommonClassRedefinition ( art.Test1937.Transform.class , art.Test1937.CLASS_BYTES , art.Test1937.DEX_BYTES ) ; try { t.sayHi ( ) ; } catch ( java.lang.Throwable e ) { java.lang.System.out.println ( ( "Caught exception " + ( e.getClass ( ) . getName ( ) ) ) ) ; if ( art.Test1937.PRINT_MESSAGE ) { java.lang.System.out.println ( ( "Message: " + ( e.getMessage ( ) ) ) ) ; } } }
public void releaseReference ( ) throws android.os.RemoteException { ( mRefCount ) -- ; if ( ( mRefCount ) > 0 ) { return ; } else if ( ( mRefCount ) < 0 ) { throw new java.lang.IllegalStateException ( "Invalid operation - resource has already been released." ) ; } mResource.freeUnderlyingResources ( ) ; for ( com.android.server.IpSecService.RefcountedResource < ? extends com.android.server.IpSecService.IResource > child : mChildren ) { child.releaseReference ( ) ; } ( mRefCount ) -- ; }
public void onCreateButtonActions ( java.util.List < android.support.v17.leanback.widget.GuidedAction > actions , android.os.Bundle savedInstanceState ) { actions.add ( new android.support.v17.leanback.widget.GuidedAction.Builder ( getActivity ( ) ) . id ( com.android.tv.dvr.ui.DvrSeriesDeletionFragment.ACTION_ID_DELETE ) . title ( getString ( R.string.dvr_detail_delete ) ) . build ( ) ) ; actions.add ( new android.support.v17.leanback.widget.GuidedAction.Builder ( getActivity ( ) ) . clickAction ( GuidedAction.ACTION_ID_CANCEL ) . build ( ) ) ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID ) ; }
public void testStartCallWithSpeakerphoneNotProvided_SpeakerphoneOffByDefault ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } android.media.AudioManager am = ( ( android.media.AudioManager ) ( mContext.getSystemService ( Context.AUDIO_SERVICE ) ) ) ; placeAndVerifyCall ( ) ; verifyConnectionForOutgoingCall ( ) ; assertNotAudioRoute ( mInCallCallbacks.getService ( ) , CallAudioState.ROUTE_SPEAKER ) ; }
public void saveWebArchive ( final java.lang.String basename , final boolean autoname , final android.webkit.ValueCallback < java.lang.String > callback ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { saveWebArchive ( basename , autoname , callback ) ; } } ) ; return ; } mAwContents.saveWebArchive ( basename , autoname , callback ) ; }
public void test2 ( ) throws java.lang.Exception { mEnabled = com.google.common.collect.Sets.newHashSet ( PluralsDetector.MISSING , PluralsDetector.EXTRA ) ; assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( "res/values-cs/plurals3.xml:3: Error: For locale \"cs\" (Czech) the following quantities should also be defined: few [MissingQuantity]\n" + " <plurals name=\"draft\">\n" ) + " ^\n" ) + "res/values-zh-rCN/plurals3.xml:3: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n" ) + " <plurals name=\"draft\">\n" ) + " ^\n" ) + "res/values-zh-rCN/plurals3.xml:7: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n" ) + " <plurals name=\"title_day_dialog_content\">\n" ) + " ^\n" ) + "1 errors, 2 warnings\n" ) ) , lintProject ( "res/values-zh-rCN/plurals3.xml" , "res/values-cs/plurals3.xml" ) ) ; }
private static android.net.NetworkState buildMobile4gState ( java.lang.String iface ) { final android.net.NetworkInfo info = new android.net.NetworkInfo ( android.net.ConnectivityManager.TYPE_WIMAX , 0 , null , null ) ; info.setDetailedState ( DetailedState.CONNECTED , null , null ) ; final android.net.LinkProperties prop = new android.net.LinkProperties ( ) ; prop.setInterfaceName ( iface ) ; final android.net.NetworkCapabilities capabilities = new android.net.NetworkCapabilities ( ) ; return new android.net.NetworkState ( info , prop , capabilities , null , null , null ) ; }
public boolean gattClientRequestLeConnectionParameters ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "index" ) java.lang.Integer index , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "minConnectionInterval" ) java.lang.Integer minConnectionInterval , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "maxConnectionInterval" ) java.lang.Integer maxConnectionInterval , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "slaveLatency" ) java.lang.Integer slaveLatency , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "supervisionTimeout" ) java.lang.Integer supervisionTimeout , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "minConnectionEventLen" ) java.lang.Integer minConnectionEventLen , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "maxConnectionEventLen" ) java.lang.Integer maxConnectionEventLen ) throws java.lang.Exception { boolean result = false ; if ( ( mBluetoothGattList.get ( index ) ) != null ) { result = mBluetoothGattList.get ( index ) . requestLeConnectionUpdate ( minConnectionInterval , maxConnectionInterval , slaveLatency , supervisionTimeout , minConnectionEventLen , maxConnectionEventLen ) ; } else { throw new java.lang.Exception ( ( "Invalid index input:" + index ) ) ; } return result ; }
public static com.android.dialer.contactactions.IntentModule newVideoCallModule ( android.content.Context context , java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.dialer.callintent.CallInitiationType.Type initiationType ) { return new com.android.dialer.contactactions.IntentModule ( context , com.android.dialer.precall.PreCall.getIntent ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , initiationType ) . setPhoneAccountHandle ( phoneAccountHandle ) . setIsVideoCall ( true ) ) , R.string.video_call , R.drawable.quantum_ic_videocam_white_24 ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassLiteral literal ) { com.android.jack.dx.rop.cst.Constant cst = com.android.jack.backend.dex.rop.RopHelper.getCstType ( literal.getRefType ( ) ) ; com.android.jack.ir.ast.JType type = literal.getType ( ) ; com.android.jack.dx.rop.code.Rop constOp = com.android.jack.dx.rop.code.Rops.opConst ( com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( type ) ) ; com.android.jack.dx.rop.code.SourcePosition literalSrcPos = com.android.jack.backend.dex.rop.RopHelper.getSourcePosition ( literal ) ; com.android.jack.dx.rop.code.Insn constInst = new com.android.jack.dx.rop.code.ThrowingCstInsn ( constOp , literalSrcPos , com.android.jack.dx.rop.code.RegisterSpecList.EMPTY , getCatchTypes ( ) , cst ) ; addInstruction ( constInst ) ; addMoveResultPseudoAsExtraInstruction ( destReg , literalSrcPos ) ; return false ; }
final void getUnchecked ( int pos , int [ ] dst , int dstOffset , int length ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } libcore.io.Memory.peekIntArray ( ix ( pos ) , dst , dstOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public java.lang.String getDeviceSoftwareVersionForSlot ( int slotIndex , java.lang.String callingPackage ) { if ( ! ( canReadPhoneState ( callingPackage , "getDeviceSoftwareVersionForSlot" ) ) ) { return null ; } com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( slotIndex ) ; return phone == null ? null : phone.getDeviceSvn ( ) ; }
public java.util.Set < java.lang.String > getMainDexList ( ) { java.util.Set < java.lang.String > resultSet = new java.util.HashSet < java.lang.String > ( toKeep.size ( ) ) ; for ( java.lang.String classDescriptor : toKeep ) { resultSet.add ( ( classDescriptor + ( com.android.multidex.ClassReferenceListBuilder.CLASS_EXTENSION ) ) ) ; } return resultSet ; }
public void run ( ) { org.eclipse.swt.graphics.Image screenshotImage = getScreenshotImage ( hvDevice ) ; if ( screenshotImage != null ) { com.android.hierarchyviewerlib.models.ViewNode viewNode = hvDevice.loadWindowData ( com.android.hierarchyviewerlib.models.Window.getFocusedWindow ( hvDevice ) ) ; if ( viewNode != null ) { com.android.hierarchyviewerlib.models.PixelPerfectModel.getModel ( ) . setData ( hvDevice.getDevice ( ) , screenshotImage , viewNode ) ; } } }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { com.android.services.telephony.Log.i ( this , "User changed, re-registering phone accounts." ) ; int userHandleId = intent.getIntExtra ( Intent.EXTRA_USER_HANDLE , 0 ) ; android.os.UserHandle currentUserHandle = new android.os.UserHandle ( userHandleId ) ; mIsPrimaryUser = android.os.UserManager.get ( mContext ) . getPrimaryUser ( ) . getUserHandle ( ) . equals ( currentUserHandle ) ; tearDownAccounts ( ) ; setupAccounts ( ) ; }
public void test_addSubjectAlternativeNameLintLjava_lang_String ( ) { int [ ] types = new int [ ] { sun.security.x509.GeneralNameInterface.NAME_ANY , sun.security.x509.GeneralNameInterface.NAME_RFC822 , sun.security.x509.GeneralNameInterface.NAME_DNS , sun.security.x509.GeneralNameInterface.NAME_X400 , sun.security.x509.GeneralNameInterface.NAME_DIRECTORY , sun.security.x509.GeneralNameInterface.NAME_EDI , sun.security.x509.GeneralNameInterface.NAME_URI , sun.security.x509.GeneralNameInterface.NAME_IP , sun.security.x509.GeneralNameInterface.NAME_OID } ; for ( int i = 0 ; i < ( types.length ) ; i ++ ) { try { new java.security.cert.X509CertSelector ( ) . addSubjectAlternativeName ( types [ i ] , "-0xDFRF" ) ; fail ( ( "IOException expected for type: " + ( types [ i ] ) ) ) ; } catch ( java.io.IOException expected ) { } } }
public void testInjectSms ( ) { transitionFromStartupToIdle ( ) ; mGsmInboundSmsHandler.sendMessage ( InboundSmsHandler.EVENT_INJECT_SMS , new android.os.AsyncResult ( null , mSmsMessage , null ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( 100 ) ; verifySmsIntentBroadcasts ( 0 ) ; mGsmInboundSmsHandler.sendMessage ( InboundSmsHandler.EVENT_INJECT_SMS , new android.os.AsyncResult ( null , mSmsMessage , null ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( 100 ) ; org.mockito.Mockito.verify ( mContext , org.mockito.Mockito.times ( 2 ) ) . sendBroadcast ( org.mockito.Matchers.any ( android.content.Intent.class ) ) ; org.junit.Assert.assertEquals ( "IdleState" , getCurrentState ( ) . getName ( ) ) ; }
synchronized void nScriptInvokeV ( long id , int slot , byte [ ] params , boolean mUseInc ) { validate ( ) ; long curCon = mContext ; if ( mUseInc ) { curCon = mIncCon ; } rsnScriptInvokeV ( curCon , id , slot , params , mUseInc ) ; }
public static com.android.jack.Options buildCommandLineArgs ( @ javax.annotation.Nonnull java.io.File fileOrSourcelist , @ javax.annotation.Nonnull java.util.List < java.io.File > jarjarRules ) throws java.io.IOException { com.android.jack.Options options = com.android.jack.TestTools.buildCommandLineArgs ( null , new java.io.File [ ] { fileOrSourcelist } ) ; options.setJarjarRulesFiles ( jarjarRules ) ; return options ; }
public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [ ] states ) { android.util.Log.v ( android.bluetooth.BluetoothHidDevice.TAG , ( "getDevicesMatchingConnectionStates(): states=" + ( java.util.Arrays.toString ( states ) ) ) ) ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { return service.getDevicesMatchingConnectionStates ( states ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHidDevice.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothHidDevice.TAG , "Proxy not attached to service" ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; }
private com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode addUnknownAttribute ( java.lang.String xmlFullName , java.lang.String xmlAttrLocalName , java.lang.String xmlNsUri ) { com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor ( xmlAttrLocalName , xmlFullName , xmlNsUri , "Unknown XML attribute" , new com.android.ide.eclipse.adt.internal.resources.AttributeInfo ( xmlAttrLocalName , new com.android.ide.eclipse.adt.editors.layout.gscripts.IAttributeInfo.Format [ ] { com.android.ide.eclipse.adt.editors.layout.gscripts.IAttributeInfo.Format.STRING } ) ) ; com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode uiAttr = desc.createUiNode ( this ) ; uiAttr.setDirty ( true ) ; mUnknownUiAttributes.add ( uiAttr ) ; return uiAttr ; }
public void spliceOperationsFrom ( android.net.NetworkStats stats ) { for ( int i = 0 ; i < ( size ) ; i ++ ) { final int j = stats.findIndex ( iface [ i ] , uid [ i ] , set [ i ] , tag [ i ] , metered [ i ] , roaming [ i ] ) ; if ( j == ( - 1 ) ) { operations [ i ] = 0 ; } else { operations [ i ] = stats.operations [ j ] ; } } }
public void onStop ( ) { android.os.Trace.beginSection ( "AnswerFragment.onStop" ) ; super . onStop ( ) ; com.android.dialer.common.LogUtil.i ( "AnswerFragment.onStop" , null ) ; handler.removeCallbacks ( swipeHintRestoreTimer ) ; if ( ( answerVideoCallScreen ) != null ) { answerVideoCallScreen.onVideoScreenStop ( ) ; } android.os.Trace.endSection ( ) ; }
public boolean supports ( com.android.ide.common.rendering.api.Capability capability ) { return supports ( capability.ordinal ( ) ) ; }
private void makeOptionsObjects ( ) { cfOptions = new com.android.dx.dex.cf.CfOptions ( ) ; cfOptions.positionInfo = positionInfo ; cfOptions.localInfo = localInfo ; cfOptions.strictNameCheck = strictNameCheck ; cfOptions.optimize = optimize ; cfOptions.optimizeListFile = optimizeListFile ; cfOptions.dontOptimizeListFile = dontOptimizeListFile ; cfOptions.statistics = statistics ; if ( warnings ) { cfOptions.warn = com.android.dx.command.DxConsole.err ; } else { cfOptions.warn = com.android.dx.command.DxConsole.noop ; } dexOptions = new com.android.dx.dex.DexOptions ( ) ; dexOptions.forceJumbo = forceJumbo ; }
public void test_getLocalSocketAddress_unbound ( ) throws java.lang.Exception { java.net.InetSocketAddress localAddress1 = new java.net.InetSocketAddress ( java.net.InetAddress.getLocalHost ( ) , 0 ) ; java.net.DatagramSocket s = new java.net.DatagramSocket ( localAddress1 ) ; assertEquals ( localAddress1.getAddress ( ) , s.getLocalAddress ( ) ) ; s.close ( ) ; java.net.InetSocketAddress remoteAddress = ( ( java.net.InetSocketAddress ) ( s.getRemoteSocketAddress ( ) ) ) ; assertNull ( remoteAddress ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.util.Log.i ( com.android.server.am.ActivityManagerService.TAG , "Shutting down activity manager..." ) ; shutdown ( 10000 ) ; android.util.Log.i ( com.android.server.am.ActivityManagerService.TAG , "Shutdown complete, restarting!" ) ; java.lang.Process.killProcess ( java.lang.Process.myPid ( ) ) ; java.lang.System.exit ( 10 ) ; }
public boolean processHeader ( java.lang.String ianaVersion ) throws org.xmlpull.v1.XmlPullParserException { this . ianaVersion = ianaVersion ; return libcore.util.TimeZoneFinder.TimeZonesProcessor.HALT ; }
private java.lang.String format ( double number , android.icu.text.NFRuleSet ruleSet ) { java.lang.StringBuffer result = new java.lang.StringBuffer ( ) ; if ( ( getRoundingMode ( ) ) != ( android.icu.math.BigDecimal.ROUND_UNNECESSARY ) ) { number = new android.icu.math.BigDecimal ( java.lang.Double.toString ( number ) ) . setScale ( getMaximumFractionDigits ( ) , roundingMode ) . doubleValue ( ) ; } ruleSet.format ( number , result , 0 , 0 ) ; postProcess ( result , ruleSet ) ; return result.toString ( ) ; }
public void testAbiOnlyWithMultiMatch2 ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "foo" , 2 ) ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "bar" , 3 ) ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" , "bar" ) ; assertEquals ( match , result ) ; }
public void testTelephonyFeatures ( ) { if ( ! ( mPackageManager.hasSystemFeature ( PackageManager.FEATURE_TELEPHONY ) ) ) { return ; } int phoneType = mTelephonyManager.getPhoneType ( ) ; switch ( phoneType ) { case android.telephony.TelephonyManager.PHONE_TYPE_GSM : assertAvailable ( PackageManager.FEATURE_TELEPHONY_GSM ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_CDMA : assertAvailable ( PackageManager.FEATURE_TELEPHONY_CDMA ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_NONE : fail ( "FEATURE_TELEPHONY is present; phone type should not be PHONE_TYPE_NONE" ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "Did you add a new phone type? " + phoneType ) ) ; } }
public java.lang.String [ ] getIsimImpu ( int subId ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE , "Requires READ_PRIVILEGED_PHONE_STATE" ) ; com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords ( ) ; if ( isim != null ) { return isim.getIsimImpu ( ) ; } else { return null ; } } else { loge ( ( "getIsimImpu phone is null for Subscription:" + subId ) ) ; return null ; } }
public java.lang.String toString ( ) { return com.google.common.base.MoreObjects.toStringHelper ( this ) . add ( "hitCount" , hitCount ) . add ( "missCount" , missCount ) . add ( "loadSuccessCount" , loadSuccessCount ) . add ( "loadExceptionCount" , loadExceptionCount ) . add ( "totalLoadTime" , totalLoadTime ) . add ( "evictionCount" , evictionCount ) . toString ( ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; com.android.cts.verifier.TestListAdapter adapter = new com.android.cts.verifier.TestListAdapter ( this ) ; setListAdapter ( adapter ) ; com.android.cts.verifier.TestListActivity.TestResultContentObserver observer = new com.android.cts.verifier.TestListActivity.TestResultContentObserver ( adapter ) ; android.content.ContentResolver resolver = getContentResolver ( ) ; resolver.registerContentObserver ( TestResultsProvider.RESULTS_CONTENT_URI , true , observer ) ; }
public java.util.List < java.security.cert.X509Certificate > getTrustedChainForServer ( java.security.cert.X509Certificate [ ] certs , java.lang.String authType , java.net.Socket socket ) throws java.security.cert.CertificateException { javax.net.ssl.SSLSession session = null ; javax.net.ssl.SSLParameters parameters = null ; if ( socket instanceof javax.net.ssl.SSLSocket ) { javax.net.ssl.SSLSocket sslSocket = ( ( javax.net.ssl.SSLSocket ) ( socket ) ) ; session = org.conscrypt.TrustManagerImpl.getHandshakeSessionOrThrow ( sslSocket ) ; parameters = sslSocket.getSSLParameters ( ) ; } return checkTrusted ( certs , authType , session , parameters , false ) ; }
int getBuildApi ( ) { if ( ( project ) == null ) { return - 1 ; } com.android.sdklib.IAndroidTarget target = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTarget ( project ) ; if ( target != null ) { return target.getVersion ( ) . getApiLevel ( ) ; } return getMinSdk ( ) ; }
public void testInterfaceCountersUdp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1000 , false ) ; }
private void checkIsAccessible ( ) { checkNotFreed ( ) ; if ( ! ( block.isAccessible ( ) ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } }
public boolean isMultipleAdvertisementSupported ( ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return false ; try { mServiceLock.readLock ( ) . lock ( ) ; if ( ( mService ) != null ) return mService.isMultiAdvertisementSupported ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "failed to get isMultipleAdvertisementSupported, error: " , e ) ; } finally { mServiceLock.readLock ( ) . unlock ( ) ; } return false ; }
public java.io.FileDescriptor socket ( int domain , int type , int protocol ) throws android.system.ErrnoException { final java.io.FileDescriptor fd = os.socket ( domain , type , protocol ) ; if ( ( domain != ( AF_UNIX ) ) && ( domain != ( AF_NETLINK ) ) ) { tagSocket ( fd ) ; } return fd ; }
public void testDefaultDisconnectedState ( ) { com.android.bluetooth.hfpclient.HeadsetClientService mockService = mock ( com.android.bluetooth.hfpclient.HeadsetClientService.class ) ; android.media.AudioManager mockAudioManager = mock ( android.media.AudioManager.class ) ; when ( mockService.getSystemService ( Context.AUDIO_SERVICE ) ) . thenReturn ( mockAudioManager ) ; com.android.bluetooth.hfpclient.HeadsetClientStateMachine mockSM = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine ( mockService , mTargetContext.getMainLooper ( ) ) ; org.junit.Assert.assertEquals ( mockSM.getConnectionState ( ( ( android.bluetooth.BluetoothDevice ) ( null ) ) ) , BluetoothProfile.STATE_DISCONNECTED ) ; }
public com.android.jack.dx.io.instructions.DecodedInstruction decode ( int opcodeUnit , com.android.jack.dx.io.instructions.CodeInput in ) throws java.io.EOFException { int opcode = com.android.jack.dx.io.instructions.InstructionCodec.byte0 ( opcodeUnit ) ; int a = com.android.jack.dx.io.instructions.InstructionCodec.byte1 ( opcodeUnit ) ; long literal = in.readLong ( ) ; return new com.android.jack.dx.io.instructions.OneRegisterDecodedInstruction ( this , opcode , 0 , com.android.jack.dx.io.IndexType.NONE , 0 , literal , a ) ; }
private static boolean isIdent ( java.lang.String token ) { return com.android.tools.metalava.doclava1.ApiFile.isIdent ( token.charAt ( 0 ) ) ; }
public void onStartRtt ( @ android.support.annotation.NonNull android.telecom.Connection.RttTextStream rttTextStream ) { com.android.dialer.common.LogUtil.enterBlock ( "SimulatorConnection.onStartRtt" ) ; if ( ( ( this . rttTextStream ) != null ) || ( ( rttChatBot ) != null ) ) { com.android.dialer.common.LogUtil.e ( "SimulatorConnection.onStartRtt" , "rttTextStream or rttChatBot is not null!" ) ; } this . rttTextStream = rttTextStream ; rttChatBot = new com.android.dialer.simulator.impl.RttChatBot ( rttTextStream ) ; rttChatBot.start ( ) ; onEvent ( new com.android.dialer.simulator.Simulator.Event ( com.android.dialer.simulator.Simulator.Event.START_RTT ) ) ; }
private void refreshSimBadInfo ( ) { final com.android.internal.telephony.IccCard.State simState = mUpdateMonitor.getSimState ( ) ; if ( simState == ( IccCard.State.PUK_REQUIRED ) ) { mHeaderSimBad1.setText ( R.string.lockscreen_sim_puk_locked_message ) ; mHeaderSimBad2.setText ( R.string.lockscreen_sim_puk_locked_instructions ) ; } else if ( simState == ( IccCard.State.ABSENT ) ) { mHeaderSimBad1.setText ( R.string.lockscreen_missing_sim_message ) ; mHeaderSimBad2.setVisibility ( View.GONE ) ; } else { mHeaderSimBad1.setVisibility ( View.GONE ) ; mHeaderSimBad2.setVisibility ( View.GONE ) ; } }
public void enter ( ) { if ( ! ( configureIfaceIp ( true ) ) ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR ; return ; } try { mNMService.tetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception e ) { mLog.e ( ( "Error Tethering: " + e ) ) ; mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR ; return ; } if ( ! ( mIPv6TetherSvc.start ( ) ) ) { mLog.e ( "Failed to start IPv6TetheringInterfaceServices" ) ; return ; } }
private java.lang.String inputStreamToString ( java.io.InputStream in ) throws java.io.IOException { java.io.BufferedReader r = new java.io.BufferedReader ( new java.io.InputStreamReader ( in , java.nio.charset.StandardCharsets.UTF_8 ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String str = null ; while ( ( str = r.readLine ( ) ) != null ) { sb.append ( str ) ; } r.close ( ) ; return sb.toString ( ) ; }
public void testEmptyGeneration ( ) { final java.lang.String expectedOutput = "<?xml version='1.0' encoding='UTF-8' ?>" + ( ( ( "<testsuite name=\"test\" tests=\"0\" failures=\"0\" errors=\"0\" time=\"#TIMEVALUE#\" " + "timestamp=\"ignore\" hostname=\"localhost\"> " ) + "<properties />" ) + "</testsuite>" ) ; mResultReporter.testRunStarted ( "test" , 1 ) ; mResultReporter.testRunEnded ( 1 , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; java.lang.String output = getOutput ( ) ; java.lang.String time = getTime ( output ) ; assertNotNull ( time ) ; java.lang.String expectedTimedOutput = expectedOutput.replaceFirst ( "#TIMEVALUE#" , time ) ; assertEquals ( expectedTimedOutput , output ) ; }
public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; when ( mWificond.createApInterface ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( null ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING , mWifiStateMachinePrime.getCurrentMode ( ) ) ; enterSoftApActiveMode ( ) ; }
private static void appendServiceLocked ( java.lang.String key , java.security.Provider.Service service ) { java.util.ArrayList < java.security.Provider.Service > serviceList = org.apache.harmony.security.fortress.Services.services.get ( key ) ; if ( serviceList == null ) { serviceList = new java.util.ArrayList < java.security.Provider.Service > ( 1 ) ; org.apache.harmony.security.fortress.Services.services.put ( key , serviceList ) ; } serviceList.add ( service ) ; }
protected void setKernelData ( int targetLayer , com.android.rs.refocus.BlurStack blurStack ) { com.android.rs.refocus.d1new.KernelDataForRenderScriptd1new kernelData = new com.android.rs.refocus.d1new.KernelDataForRenderScriptd1new ( targetLayer , blurStack , renderScript ) ; if ( ( com.android.rs.refocus.d1new.RefocusFilterd1new.ENABLE_FAST_FILTER ) && ( ( kernelData.minDiskRadius ) > ( com.android.rs.refocus.d1new.RefocusFilterd1new.MIN_DISC_RADIUS_FOR_FAST_FILTER ) ) ) { useFastFilterForCurrentLayer = true ; } else { useFastFilterForCurrentLayer = false ; } scriptC.set_g_kernel_stack ( kernelData.stackAllocation ) ; scriptC.set_galloc_kernel_info ( kernelData.infoAllocation ) ; }
public void testAbiOnlyWithNoMatch ( ) { java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "foo" , 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "bar" , 2 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "zzz" ) ; assertNull ( result ) ; }
public java.util.ListIterator < V > listIterator ( int index ) { final com.google.common.collect.LinkedListMultimap < K , V > . NodeIterator nodeItr = new NodeIterator ( index ) ; return new com.google.common.collect.TransformedListIterator < java.util.Map.Entry < K , V > , V > ( nodeItr ) { @ java.lang.Override V transform ( java.util.Map.Entry < K , V > entry ) { return entry.getValue ( ) ; } @ java.lang.Override public void set ( V value ) { nodeItr.setValue ( value ) ; } } ; }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] certs , java.lang.String authType , java.lang.String hostname ) throws java.security.cert.CertificateException { if ( ( hostname == null ) && ( mConfig.hasPerDomainConfigs ( ) ) ) { throw new java.security.cert.CertificateException ( "Domain specific configurations require that the hostname be provided" ) ; } android.security.net.config.NetworkSecurityConfig config = mConfig.getConfigForHostname ( hostname ) ; return config.getTrustManager ( ) . checkServerTrusted ( certs , authType , hostname ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mWifiManager = ( ( android.net.wifi.WifiManager ) ( getContext ( ) . getSystemService ( Context.WIFI_SERVICE ) ) ) ; mWifiEnabled = mWifiManager.isWifiEnabled ( ) ; if ( ! ( mWifiEnabled ) ) { mWifiManager.setWifiEnabled ( true ) ; awaitWifiEnabledState ( true ) ; } }
protected java.lang.String getExtension ( ) { return com.android.ide.eclipse.adt.AndroidConstants.EXT_AIDL ; }
public java.lang.String unprefix ( java.lang.String typeName ) { if ( ( prefix.isEmpty ( ) ) || ( ! ( typeName.startsWith ( prefix ) ) ) ) { return typeName ; } return typeName.substring ( prefix.length ( ) ) ; }
public void computeScroll ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { computeScroll ( ) ; } } ) ; return ; } mAwContents.computeScroll ( ) ; }
public void getIccSlotsStatus ( android.os.Message result ) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance ( ) . getIccSlotsStatus ( result ) ; if ( ( mIccSlotStatus ) != null ) { resultSuccess ( result , mIccSlotStatus ) ; } else { resultFail ( result , null , new com.android.internal.telephony.CommandException ( CommandException.Error.REQUEST_NOT_SUPPORTED ) ) ; } }
public void onCallListChange ( com.android.incallui.call.CallList callList ) { if ( ( ( ( ( bubble ) == null ) || ( ! ( bubble.isVisible ( ) ) ) ) && ( ( getCall ( ) ) != null ) ) && ( ! ( com.android.incallui.InCallPresenter.getInstance ( ) . isShowingInCallUi ( ) ) ) ) { com.android.dialer.common.LogUtil.i ( "NewReturnToCallController.onCallListChange" , "going to show bubble" ) ; show ( ) ; } }
public void dup2 ( ) { super . dup2 ( ) ; producerStack.pop ( ) ; producerStack.pop ( ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; actualProducerStack.dup2 ( ) ; }
public static < K extends java.lang.Comparable < ? super K > , V > com.google.common.collect.ImmutableSortedMap < K , V > of ( K k1 , V v1 , K k2 , V v2 ) { return com.google.common.collect.ImmutableSortedMap.fromEntries ( com.google.common.collect.Ordering.natural ( ) , false , 2 , com.google.common.collect.ImmutableMap.entryOf ( k1 , v1 ) , com.google.common.collect.ImmutableMap.entryOf ( k2 , v2 ) ) ; }
public int computeHorizontalScrollRange ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { int ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer call ( ) { return computeHorizontalScrollRange ( ) ; } } ) ; return ret ; } return mAwContents.computeHorizontalScrollRange ( ) ; }
public static android.nfc.NdefRecord newMimeRecord ( java.lang.String type , byte [ ] data ) { com.google.common.base.Preconditions.checkNotNull ( type ) ; com.google.common.base.Preconditions.checkNotNull ( data ) ; byte [ ] typeBytes = type.getBytes ( java.nio.charset.StandardCharsets.US_ASCII ) ; return new android.nfc.NdefRecord ( android.nfc.NdefRecord.TNF_MIME_MEDIA , typeBytes , new byte [ 0 ] , data ) ; }
public void testAccessAdapter ( ) { mGridView = new android.widget.GridView ( mActivity ) ; android.widget.cts.GridViewTest.ImageAdapter adapter = new android.widget.cts.GridViewTest.ImageAdapter ( mActivity ) ; mGridView.setAdapter ( adapter ) ; org.junit.Assert.assertSame ( adapter , mGridView.getAdapter ( ) ) ; mGridView.setAdapter ( null ) ; org.junit.Assert.assertNull ( mGridView.getAdapter ( ) ) ; }
private android.telephony.ims.aidl.IImsRcsFeature createRcsFeatureInternal ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) { android.telephony.ims.feature.RcsFeature f = createRcsFeature ( slotId ) ; if ( f != null ) { setupFeature ( f , slotId , ImsFeature.FEATURE_RCS , c ) ; return f.getBinder ( ) ; } else { android.util.Log.e ( android.telephony.ims.ImsService.LOG_TAG , "createRcsFeatureInternal: null feature returned." ) ; return null ; } }
private int getMonitorDpi ( ) { if ( ( mSettingsController ) != null ) { com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi = mSettingsController.getSettings ( ) . getMonitorDensity ( ) ; } if ( ( com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi ) == ( - 1 ) ) { com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi = java.awt.Toolkit.getDefaultToolkit ( ) . getScreenResolution ( ) ; } return com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi ; }
private static void sendBroadcast ( android.app.Activity activity , android.telephony.SmsCbMessage cbMessage ) { android.content.Intent intent = new android.content.Intent ( Telephony.Sms.Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION ) ; intent.putExtra ( "message" , cbMessage ) ; intent.setPackage ( com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.CB_RECEIVER_PKG ) ; activity.sendOrderedBroadcastAsUser ( intent , UserHandle.ALL , Manifest.permission.RECEIVE_EMERGENCY_BROADCAST , AppOpsManager.OP_RECEIVE_EMERGECY_SMS , null , null , Activity.RESULT_OK , null , null ) ; }
public com.android.ide.common.api.Point getCenter ( ) { return new com.android.ide.common.api.Point ( ( ( x ) + ( ( w ) > 0 ? ( w ) / 2 : 0 ) ) , ( ( y ) + ( ( h ) > 0 ? ( h ) / 2 : 0 ) ) ) ; }
static org.w3c.dom.Node getParentMethod ( @ com.android.annotations.NonNull org.w3c.dom.Node node ) { org.w3c.dom.Node current = node.getParent ( ) ; while ( ( ( current != null ) && ( ! ( current instanceof lombok.ast.MethodDeclaration ) ) ) && ( ! ( current instanceof lombok.ast.ConstructorDeclaration ) ) ) { current = current.getParent ( ) ; } return current ; }
public com.android.manifmerger.XmlDocument reparse ( ) { return new com.android.manifmerger.XmlDocument ( mPositionXmlParser , mSourceLocation , mRootElement ) ; }
public void onApplicationStateChange ( int newState ) { if ( newState == ( ApplicationState.HAS_RUNNING_ACTIVITIES ) ) { mHandler.removeCallbacks ( org.chromium.base.PowerMonitor.sSuspendTask ) ; org.chromium.base.PowerMonitor.nativeOnMainActivityResumed ( ) ; } else if ( newState == ( ApplicationState.HAS_PAUSED_ACTIVITIES ) ) { mHandler.postDelayed ( org.chromium.base.PowerMonitor.sSuspendTask , org.chromium.base.PowerMonitor.SUSPEND_DELAY_MS ) ; } }
private synchronized com.android.bluetooth.avrcp.MediaPlayerInfo removeMediaPlayerInfo ( java.lang.String packageName ) { int removeKey = - 1 ; for ( java.util.Map.Entry < java.lang.Integer , com.android.bluetooth.avrcp.MediaPlayerInfo > entry : mMediaPlayerInfoList.entrySet ( ) ) { if ( entry.getValue ( ) . getPackageName ( ) . equals ( packageName ) ) { removeKey = entry.getKey ( ) ; break ; } } if ( removeKey != ( - 1 ) ) { return mMediaPlayerInfoList.remove ( removeKey ) ; } return null ; }
public void setTarget ( @ com.android.annotations.NonNull java.lang.String target ) { if ( target == null ) { throw new java.lang.RuntimeException ( "Compilation target not set!" ) ; } mTarget = mSdkParser.resolveTarget ( target , mLogger ) ; if ( ( mTarget ) == null ) { throw new java.lang.RuntimeException ( ( "Unknown target: " + target ) ) ; } }
public static void startMethodTracing ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags ) { if ( traceFileName == null ) { throw new java.lang.NullPointerException ( "traceFileName == null" ) ; } if ( fd == null ) { throw new java.lang.NullPointerException ( "fd == null" ) ; } dalvik.system.VMDebug.startMethodTracingNative ( traceFileName , fd , bufferSize , flags ) ; }
public void normalDeletedDiffedFieldValues ( ) { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue ( "name" , com.android.ahat.DiffFieldsTest.t0 , com.android.ahat.heapdump.Value.pack ( 1 ) ) ; com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.deleted ( normal ) ; org.junit.Assert.assertEquals ( "name" , x.name ) ; org.junit.Assert.assertEquals ( com.android.ahat.DiffFieldsTest.t0 , x.type ) ; org.junit.Assert.assertEquals ( com.android.ahat.heapdump.Value.pack ( 1 ) , x.baseline ) ; org.junit.Assert.assertEquals ( DiffedFieldValue.Status.DELETED , x.status ) ; }
public void focusOut ( android.view.View view ) { synchronized ( mH ) { if ( android.view.inputmethod.InputMethodManager.DEBUG ) android.util.Log.v ( android.view.inputmethod.InputMethodManager.TAG , ( ( ( "focusOut: view=" + ( android.view.inputmethod.InputMethodManager.dumpViewInfo ( view ) ) ) + " mServedView=" ) + ( android.view.inputmethod.InputMethodManager.dumpViewInfo ( mServedView ) ) ) ) ; if ( ( mServedView ) != view ) { if ( false && ( view.hasWindowFocus ( ) ) ) { mNextServedView = null ; android.view.inputmethod.InputMethodManager.scheduleCheckFocusLocked ( view ) ; } } } }
public java.lang.String createNetworkSpecifierOpen ( @ android.net.wifi.aware.WifiAwareManager.DataPathRole int role , @ android.annotation.Nullable byte [ ] peer ) { android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "createNetworkSpecifierOpen: called post GC on WifiAwareManager" ) ; return "" ; } if ( mTerminated ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "createNetworkSpecifierOpen: called after termination" ) ; return "" ; } return mgr.createNetworkSpecifier ( mClientId , role , peer , null ) ; }
public java.lang.Object [ ] getTestObjects ( ) { java.util.Locale [ ] locales = com.ibm.icu.dev.test.serializable.SerializableTestUtility.getLocales ( ) ; com.ibm.icu.text.DateFormat [ ] formats = new com.ibm.icu.text.DateFormat [ locales.length ] ; for ( int i = 0 ; i < ( locales.length ) ; i += 1 ) { com.ibm.icu.util.ULocale uloc = com.ibm.icu.util.ULocale.forLocale ( locales [ i ] ) ; formats [ i ] = com.ibm.icu.dev.test.serializable.FormatHandler.getCannedSimpleDateFormat ( ( ( java.lang.String ) ( com.ibm.icu.dev.test.serializable.FormatHandler.DateFormatHandler.cannedPatterns.get ( uloc.toString ( ) ) ) ) , uloc ) ; } return formats ; }
private int getDexoptNeeded ( java.lang.String path , java.lang.String isa , java.lang.String compilerFilter , boolean newProfile , boolean downgrade ) { int dexoptNeeded ; try { dexoptNeeded = dalvik.system.DexFile.getDexOptNeeded ( path , isa , compilerFilter , newProfile , downgrade ) ; } catch ( java.io.IOException ioe ) { android.util.Slog.w ( com.android.server.pm.PackageDexOptimizer.TAG , ( "IOException reading apk: " + path ) , ioe ) ; return com.android.server.pm.PackageDexOptimizer.DEX_OPT_FAILED ; } return adjustDexoptNeeded ( dexoptNeeded ) ; }
public void test_formatStyle ( java.time.temporal.Temporal temporal , java.time.format.FormatStyle style , java.lang.String formattedStr ) { java.time.format.DateTimeFormatterBuilder builder = new java.time.format.DateTimeFormatterBuilder ( ) ; java.time.format.DateTimeFormatter formatter = builder.appendLocalized ( style , style ) . appendLiteral ( " " ) . appendZoneOrOffsetId ( ) . toFormatter ( ) ; formatter = formatter.withLocale ( java.util.Locale.UK ) ; org.testng.Assert.assertEquals ( formatter.format ( temporal ) , formattedStr ) ; }
final void cleanUpActivityServicesLocked ( com.android.server.am.ActivityRecord r ) { if ( ( r.connections ) != null ) { java.util.Iterator < com.android.server.am.ConnectionRecord > it = r.connections.iterator ( ) ; while ( it.hasNext ( ) ) { com.android.server.am.ConnectionRecord c = it.next ( ) ; mService.mServices.removeConnectionLocked ( c , null , r ) ; } r.connections = null ; } }
private com.android.ide.common.blame.SourcePosition parseLineNumber ( java.lang.String lineNumberAsText ) throws com.android.ide.common.blame.parser.ParsingFailedException { int lineNumber = - 1 ; if ( lineNumberAsText != null ) { try { lineNumber = java.lang.Integer.parseInt ( lineNumberAsText ) ; } catch ( java.lang.NumberFormatException e ) { throw new com.android.ide.common.blame.parser.ParsingFailedException ( ) ; } } return new com.android.ide.common.blame.SourcePosition ( lineNumber , ( - 1 ) , ( - 1 ) ) ; }
private static void finishAnnotationValueInit ( ) { int depth = 0 ; while ( ( com.google.doclava.Converter.mAnnotationValuesNeedingInit.size ( ) ) > 0 ) { java.util.HashSet < com.sun.javadoc.AnnotationValue > set = com.google.doclava.Converter.mAnnotationValuesNeedingInit ; com.google.doclava.Converter.mAnnotationValuesNeedingInit = new java.util.HashSet < com.sun.javadoc.AnnotationValue > ( ) ; for ( com.sun.javadoc.AnnotationValue o : set ) { com.google.doclava.AnnotationValueInfo v = com.google.doclava.Converter.mAnnotationValues.get ( o ) ; com.google.doclava.Converter.initAnnotationValue ( o , v ) ; } depth ++ ; } com.google.doclava.Converter.mAnnotationValuesNeedingInit = null ; }
public void getIccCardStatus ( android.os.Message result ) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance ( ) . getIccCardStatus ( result ) ; if ( ( mIccCardStatus ) != null ) { resultSuccess ( result , mIccCardStatus ) ; } else { resultFail ( result , null , new java.lang.RuntimeException ( "IccCardStatus not set" ) ) ; } }
private static int getChar ( java.lang.String s , int spos , int mul ) { char c = s.charAt ( spos ) ; if ( java.lang.Character.isDigit ( c ) ) { return ( java.lang.Character.getNumericValue ( c ) ) * mul ; } else { throw new android.util.TimeFormatException ( ( "Parse error at pos=" + spos ) ) ; } }
byte [ ] getIncomingSmsFingerprint ( ) { java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream ( ) ; output.write ( mEnvelope.teleService ) ; output.write ( mEnvelope.origAddress.origBytes , 0 , mEnvelope.origAddress.origBytes.length ) ; output.write ( mEnvelope.bearerData , 0 , mEnvelope.bearerData.length ) ; output.write ( mEnvelope.origSubaddress.origBytes , 0 , mEnvelope.origSubaddress.origBytes.length ) ; return output.toByteArray ( ) ; }
public static void computeAsin ( android.renderscript.cts.TestAsin.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.asin ( args.inV ) , 4 , 128 ) ; }
public void terminateSession ( int sessionId ) { com.android.server.wifi.nan.WifiNanDiscoverySessionState session = mSessions.get ( sessionId ) ; if ( session == null ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanClientState.TAG , ( "terminateSession: sessionId doesn't exist - " + sessionId ) ) ; return ; } session.terminate ( ) ; mSessions.delete ( sessionId ) ; }
private static java.lang.Class < ? > getProxyClass ( ) throws java.lang.Exception { if ( ( art.Test910.proxyClass ) != null ) { return art.Test910.proxyClass ; } for ( int i = 1 ; i <= 21 ; i ++ ) { art.Test910.proxyClass = art.Test910.createProxyClass ( i ) ; java.lang.String name = art.Test910.proxyClass.getName ( ) ; if ( name.equals ( "$Proxy20" ) ) { return art.Test910.proxyClass ; } } return art.Test910.proxyClass ; }
private void clear ( ) { synchronized ( mLock ) { mConnectionEventList.clear ( ) ; if ( ( mCurrentConnectionEvent ) != null ) { mConnectionEventList.add ( mCurrentConnectionEvent ) ; } mScanReturnEntries.clear ( ) ; mWifiSystemStateEntries.clear ( ) ; mRecordStartTimeSec = ( mClock.getElapsedSinceBootMillis ( ) ) / 1000 ; mRssiPollCounts.clear ( ) ; mRssiDeltaCounts.clear ( ) ; mWifiAlertReasonCounts.clear ( ) ; mWifiScoreCounts.clear ( ) ; mWifiLogProto.clear ( ) ; mScanResultRssiTimestampMillis = - 1 ; } }
public org.bouncycastle.math.ec.ECFieldElement squarePlusProduct ( org.bouncycastle.math.ec.ECFieldElement x , org.bouncycastle.math.ec.ECFieldElement y ) { java.math.BigInteger ax = this . x ; java.math.BigInteger xx = x.toBigInteger ( ) ; java.math.BigInteger yx = y.toBigInteger ( ) ; java.math.BigInteger aa = ax.multiply ( ax ) ; java.math.BigInteger xy = xx.multiply ( yx ) ; return new org.bouncycastle.math.ec.ECFieldElement.Fp ( q , r , modReduce ( aa.add ( xy ) ) ) ; }
public void testEmptyIterator ( ) { assertIteratorExhausted ( new java.util.TreeSet ( ) . iterator ( ) ) ; }
public int getCurrentTtyMode ( java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.gCTM" ) ; if ( ! ( canReadPhoneState ( callingPackage , "getCurrentTtyMode" ) ) ) { return android.telecom.TelecomManager.TTY_MODE_OFF ; } synchronized ( mLock ) { return mCallsManager.getCurrentTtyMode ( ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void bouncyCastle ( ) throws java.lang.Exception { java.io.File bouncyCastleJack = com.android.jack.TestTools.createTempFile ( "bouncyjack" , ".zip" ) ; com.android.jack.TestTools.compileSourceToJack ( new com.android.jack.Options ( ) , com.android.jack.ToolchainTest.BOUNCY_SOURCELIST , com.android.jack.ToolchainTest.corePath.getAbsolutePath ( ) , bouncyCastleJack , true ) ; java.io.File bouncyCastleOutFolder = com.android.jack.TestTools.createTempDir ( "bouncy" , "dex" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , bouncyCastleJack , bouncyCastleOutFolder , false ) ; }
private com.android.ims.ImsCall createNewCall ( android.telephony.ims.ImsCallSession session , android.telephony.ims.ImsCallProfile profile ) { com.android.ims.ImsCall call = new com.android.ims.ImsCall ( mContext , profile ) ; try { call.attachSession ( session ) ; } catch ( com.android.ims.ImsException e ) { if ( call != null ) { call.close ( ) ; call = null ; } } return call ; }
private void logEvent ( int probeType , int errorCode ) { int eventType = probeType | ( errorCode & 255 ) ; mMetricsLog.log ( mInterfaceName , new android.net.metrics.IpReachabilityEvent ( eventType ) ) ; }
public void execute ( java.lang.String programName ) { java.lang.String command = "" ; java.lang.String androidRoot = Options.androidRoot.trim ( ) ; if ( ( androidRoot.length ( ) ) != 0 ) { command = ( "PATH=" + androidRoot ) + "/bin " ; command += ( "ANDROID_ROOT=" + androidRoot ) + " " ; command += ( ( ( "LD_LIBRARY_PATH=" + androidRoot ) + "/lib:" ) + androidRoot ) + "/lib64 " ; } command += constructCommand ( programName ) ; executionResult = executeCommandWithTimeout ( command , true ) ; }
public java.lang.String toString ( ) { return "Iterators.consumingIterator(...)" ; }
protected boolean start ( ) { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , "start()" ) ; initializeNative ( ) ; mAppOps = getSystemService ( android.app.AppOpsManager.class ) ; mAdvertiseManager = new com.android.bluetooth.gatt.AdvertiseManager ( this , com.android.bluetooth.btservice.AdapterService.getAdapterService ( ) ) ; mAdvertiseManager.start ( ) ; mScanManager = new com.android.bluetooth.gatt.ScanManager ( this ) ; mScanManager.start ( ) ; mPeriodicScanManager = new com.android.bluetooth.gatt.PeriodicScanManager ( com.android.bluetooth.btservice.AdapterService.getAdapterService ( ) ) ; mPeriodicScanManager.start ( ) ; return true ; }
public void testNoResolveEntries ( ) { org.mockito.Mockito.when ( mPackageManager.queryIntentServicesAsUser ( org.mockito.ArgumentMatchers.nullable ( android.content.Intent.class ) , org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyInt ( ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; mFilter.startFilterLookup ( mCall , mCallback ) ; org.mockito.Mockito.verify ( mCallback ) . onCallFilteringComplete ( org.mockito.Matchers.eq ( mCall ) , org.mockito.Matchers.eq ( com.android.server.telecom.tests.CallScreeningServiceFilterTest.PASS_RESULT ) ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; if ( ( ownerType ) != null ) { builder.append ( com.google.common.reflect.Types.JavaVersion.CURRENT.typeName ( ownerType ) ) . append ( '.' ) ; } builder.append ( rawType.getName ( ) ) . append ( '<' ) . append ( com.google.common.reflect.Types.COMMA_JOINER.join ( com.google.common.collect.Iterables.transform ( argumentsList , com.google.common.reflect.Types.TYPE_NAME ) ) ) . append ( '>' ) ; return builder.toString ( ) ; }
public void findNext ( final boolean forwards ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { findNext ( forwards ) ; } } ) ; return ; } mAwContents.findNext ( forwards ) ; }
public boolean isUpdateFor ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IPkgDesc existingDesc ) { return isGenericUpdateFor ( existingDesc ) ; }
synchronized void nScriptForEach ( long id , int slot , long ain , long aout , byte [ ] params , boolean mUseInc ) { validate ( ) ; if ( params == null ) { rsnScriptForEach ( mContext , mIncCon , id , slot , ain , aout , mUseInc ) ; } else { rsnScriptForEach ( mContext , mIncCon , id , slot , ain , aout , params , mUseInc ) ; } }
public com.android.sdklib.devices.Device build ( ) { if ( ( mSoftware.size ( ) ) <= 0 ) { throw generateBuildException ( "Device software not configured" ) ; } else if ( ( mState.size ( ) ) <= 0 ) { throw generateBuildException ( "Device states not configured" ) ; } if ( ( mMeta ) == null ) { mMeta = new com.android.sdklib.devices.Meta ( ) ; } for ( com.android.sdklib.devices.State s : mState ) { if ( s.isDefaultState ( ) ) { mDefaultState = s ; break ; } } return new com.android.sdklib.devices.Device ( this ) ; }
public boolean isInCall ( android.content.Context context ) { if ( com.android.dialer.telecom.TelecomUtil.hasReadPhoneStatePermission ( context ) ) { if ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.O ) ) { return com.android.dialer.telecom.TelecomUtil.getTelecomManager ( context ) . isInManagedCall ( ) ; } else { return com.android.dialer.telecom.TelecomUtil.getTelecomManager ( context ) . isInCall ( ) ; } } return false ; }
public void testReadAfterWriteWithNoUserStore ( ) throws java.lang.Exception { mWifiConfigStore.registerStoreData ( mStoreData ) ; mStoreData.setUserData ( com.android.server.wifi.WifiConfigStoreTest.TEST_USER_DATA ) ; mStoreData.setShareData ( com.android.server.wifi.WifiConfigStoreTest.TEST_SHARE_DATA ) ; mWifiConfigStore.write ( true ) ; mWifiConfigStore.read ( ) ; assertEquals ( com.android.server.wifi.WifiConfigStoreTest.TEST_SHARE_DATA , mStoreData.getShareData ( ) ) ; assertNull ( mStoreData.getUserData ( ) ) ; }
private void decodeImageBounds ( android.net.Uri uri ) { com.android.mms.ui.UriImage uriImage = new com.android.mms.ui.UriImage ( mContext , uri ) ; mWidth = uriImage.getWidth ( ) ; mHeight = uriImage.getHeight ( ) ; if ( com.android.mms.model.ImageModel.LOCAL_LOGV ) { android.util.Log.v ( com.android.mms.model.ImageModel.TAG , ( ( ( "Image bounds: " + ( mWidth ) ) + "x" ) + ( mHeight ) ) ) ; } }
public synchronized void onAcceptFailed ( ) { cleanUpSdpRecord ( ) ; if ( ( mServerSockets ) != null ) { mServerSockets.shutdown ( false ) ; mServerSockets = null ; } if ( ( ( ! ( mInterrupted ) ) && ( ( mAdapter ) != null ) ) && ( mAdapter.isEnabled ( ) ) ) { startSocketListeners ( ) ; } }
public void createConfigFile ( ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog dialog = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.LayoutCreatorDialog ( mConfigChooser.getShell ( ) , mEditedFile.getName ( ) , mConfigChooser.getConfiguration ( ) . getFullConfig ( ) ) ; if ( ( dialog.open ( ) ) != ( org.eclipse.jface.window.Window.OK ) ) { return ; } com.android.ide.common.resources.configuration.FolderConfiguration config = new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; dialog.getConfiguration ( config ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.CreateNewConfigJob job = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CreateNewConfigJob ( this , mEditedFile , config ) ; job.schedule ( ) ; }
public boolean matchesMccMnc ( java.lang.String mccMnc ) { if ( mccMnc == null ) { return false ; } if ( ( mccMnc.length ( ) ) != ( com.android.server.wifi.IMSIParameter.MCC_MNC_LENGTH ) ) { return false ; } int checkLength = com.android.server.wifi.IMSIParameter.MCC_MNC_LENGTH ; if ( ( mPrefix ) && ( ( mImsi.length ( ) ) < ( com.android.server.wifi.IMSIParameter.MCC_MNC_LENGTH ) ) ) { checkLength = mImsi.length ( ) ; } return mImsi.regionMatches ( false , 0 , mccMnc , 0 , checkLength ) ; }
public void registerMediaButtonIntent ( android.app.PendingIntent pi , android.content.ComponentName eventReceiver ) { if ( pi == null ) { android.util.Log.e ( android.media.AudioManager.TAG , "Cannot call registerMediaButtonIntent() with a null parameter" ) ; return ; } android.media.session.MediaSessionLegacyHelper helper = android.media.session.MediaSessionLegacyHelper.getHelper ( mApplicationContext ) ; helper.addMediaButtonListener ( pi , eventReceiver , mApplicationContext ) ; }
protected void configureShell ( org.eclipse.swt.widgets.Shell shell ) { super . configureShell ( shell ) ; shell.setText ( ( "Traceview: " + ( mTraceName ) ) ) ; java.io.InputStream in = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( "icons/traceview-128.png" ) ; if ( in != null ) { shell.setImage ( new org.eclipse.swt.graphics.Image ( shell.getDisplay ( ) , in ) ) ; } shell.setBounds ( 100 , 10 , 1282 , 900 ) ; }
public android.webkit.WebBackForwardList copyBackForwardList ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.webkit.WebBackForwardList ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.webkit.WebBackForwardList > ( ) { @ java.lang.Override public android.webkit.WebBackForwardList call ( ) { return copyBackForwardList ( ) ; } } ) ; return ret ; } return new com.android.webview.chromium.WebBackForwardListChromium ( mAwContents.getNavigationHistory ( ) ) ; }
public void testCheckCaseInsensitive ( ) { assertEquals ( true , rq.checkAndSet ( "rus" , config ) ) ; assertTrue ( ( ( config.getRegionQualifier ( ) ) != null ) ) ; assertEquals ( "US" , config.getRegionQualifier ( ) . getValue ( ) ) ; assertEquals ( "rUS" , config.getRegionQualifier ( ) . toString ( ) ) ; assertEquals ( "rUS" , config.getRegionQualifier ( ) . toString ( ) ) ; assertEquals ( "rUS" , com.android.ide.common.resources.configuration.RegionQualifier.getFolderSegment ( "us" ) ) ; }
public int acquireRights ( android.drm.DrmInfoRequest drmInfoRequest ) { android.drm.DrmInfo drmInfo = acquireDrmInfo ( drmInfoRequest ) ; return processDrmInfo ( drmInfo ) ; }
public static com.android.manifmerger.XmlDocument load ( com.android.manifmerger.KeyResolver < java.lang.String > selectors , com.android.manifmerger.XmlLoader.SourceLocation sourceLocation , java.lang.String xml ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( xml ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , sourceLocation , selectors , domDocument.getDocumentElement ( ) ) : null ; }
public android.webkit.WebBackForwardList restoreState ( final android.os.Bundle inState ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.webkit.WebBackForwardList ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.webkit.WebBackForwardList > ( ) { @ java.lang.Override public android.webkit.WebBackForwardList call ( ) { return restoreState ( inState ) ; } } ) ; return ret ; } if ( inState == null ) return null ; if ( ! ( mAwContents.restoreState ( inState ) ) ) return null ; return copyBackForwardList ( ) ; }
private void createGraphvizFile ( java.lang.String countryIso , java.time.Instant startInclusive , java.time.Instant endExclusive , boolean compress , java.lang.String outputFile ) throws java.io.IOException { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country = countryMap.get ( countryIso ) ; com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree tree = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create ( country , startInclusive , endExclusive , compress ) ; tree.createGraphvizFile ( outputFile ) ; }
public int getSuiteResultTestType ( int testType ) { if ( testType == ( com.android.vts.entity.TestSuiteResultEntity.TestType.UNKNOWN.value ( ) ) ) { if ( ( this . getNormalizedVersion ( this . buildSystemFingerprint ) ) != ( this . getNormalizedVersion ( this . buildVendorFingerprint ) ) ) { return com.android.vts.entity.TestSuiteResultEntity.TestType.OTA.value ( ) ; } else if ( this . buildVendorFingerprint.endsWith ( "release-keys" ) ) { return com.android.vts.entity.TestSuiteResultEntity.TestType.SIGNED.value ( ) ; } else { return com.android.vts.entity.TestSuiteResultEntity.TestType.TOT.value ( ) ; } } else { return testType ; } }
private void broadcastIdleTime ( android.bluetooth.BluetoothDevice device , int idleTime ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothHidHost.ACTION_IDLE_TIME_CHANGED ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; intent.putExtra ( BluetoothHidHost.EXTRA_IDLE_TIME , idleTime ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; sendBroadcast ( intent , com.android.bluetooth.hid.BLUETOOTH_PERM ) ; if ( com.android.bluetooth.hid.HidHostService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidHostService.TAG , ( ( ( "Idle time (" + device ) + "): " ) + idleTime ) ) ; } }
public void onGeolocationPermissionsShowPrompt ( java.lang.String origin , android.webkit.GeolocationPermissions.Callback callback ) { org.chromium.base.TraceEvent.begin ( ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onGeolocationPermissionsShowPrompt" ) ; mWebChromeClient.onGeolocationPermissionsShowPrompt ( origin , callback ) ; } org.chromium.base.TraceEvent.end ( ) ; }
java.lang.String getSCAddress ( ) { int len ; java.lang.String ret ; len = getByte ( ) ; if ( len == 0 ) { ret = null ; } else { try { ret = android.telephony.PhoneNumberUtils.calledPartyBCDToString ( pdu , cur , len ) ; } catch ( java.lang.RuntimeException tr ) { android.telephony.Rlog.d ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "invalid SC address: " , tr ) ; ret = null ; } } cur += len ; return ret ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { final int userId = intent.getIntExtra ( Intent.EXTRA_USER_HANDLE , ( - 1 ) ) ; if ( userId == ( - 1 ) ) return ; synchronized ( mStatsLock ) { mWakeLock.acquire ( ) ; try { removeUserLocked ( userId ) ; } finally { mWakeLock.release ( ) ; } } }
public boolean iccCloseLogicalChannel ( int subId , int channel ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccCloseLogicalChannel ( subId , channel ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return false ; }
synchronized void onSetReportFromNative ( byte reportType , byte reportId , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( "onSetReport(): reportType=" + reportType ) + " reportId=" ) + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap ( data ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_SET_REPORT ) ; msg.arg1 = reportType ; msg.arg2 = reportId ; msg.obj = bb ; mHandler.sendMessage ( msg ) ; }
public void TestParseNegativeWithAlternativeMinusSign ( ) { com.ibm.icu.text.DecimalFormat parser = ( ( com.ibm.icu.text.DecimalFormat ) ( com.ibm.icu.text.NumberFormat.getInstance ( new com.ibm.icu.util.ULocale ( "en" ) ) ) ) ; try { double value = parser.parse ( "₋0.5" ) . doubleValue ( ) ; assertEquals ( "Expect -0.5" , ( - 0.5 ) , value ) ; } catch ( java.text.ParseException e ) { com.ibm.icu.dev.test.TestFmwk.errln ( "Parsing -0.5 should have succeeded." ) ; } }
public void run ( ) { mWebView = new android.webkit.WebView ( getActivity ( ) ) ; getActivity ( ) . setContentView ( mWebView ) ; }
protected void runImpl ( final java.lang.String javaPkgName , android.annotation.cts.Profile profile ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException , java.io.IOException { try { if ( ! ( mTestStop ) ) { com.android.cts.Log.d ( "run in individual mode..." ) ; runInIndividualMode ( javaPkgName , profile ) ; } } catch ( com.android.cts.DeviceDisconnectedException e ) { cleanUp ( ) ; throw e ; } }
public void initialize ( ) throws android.os.RemoteException , java.util.NoSuchElementException { synchronized ( mLock ) { mSEHal = android.hardware.secure_element.V1_0.ISecureElement.getService ( mName ) ; if ( ( mSEHal ) == null ) { throw new java.util.NoSuchElementException ( ( "No HAL is provided for " + ( mName ) ) ) ; } mSEHal.init ( mHalCallback ) ; mSEHal.linkToDeath ( mDeathRecipient , 0 ) ; } android.util.Log.i ( mTag , ( ( mName ) + " was initialized" ) ) ; }
private void verifyStandardDeviation ( ) throws java.lang.Throwable { android.hardware.cts.helpers.sensoroperations.VerifySensorOperation verifyStdDev = new android.hardware.cts.helpers.sensoroperations.VerifySensorOperation ( this . getApplicationContext ( ) , android.hardware.Sensor.TYPE_MAGNETIC_FIELD , android.hardware.SensorManager.SENSOR_DELAY_FASTEST , 0 , 100 ) ; verifyStdDev.verifyStandardDeviation ( new float [ ] { 2.0F , 2.0F , 2.0F } ) ; verifyStdDev.execute ( ) ; logSuccess ( ) ; }
public com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata getMetadataForNonGeographicalRegion ( int countryCallingCode ) { synchronized ( countryCodeToNonGeographicalMetadataMap ) { if ( ! ( countryCodeToNonGeographicalMetadataMap.containsKey ( countryCallingCode ) ) ) { java.util.List < java.lang.String > regionCodes = com.google.i18n.phonenumbers.CountryCodeToRegionCodeMap.getCountryCodeToRegionCodeMap ( ) . get ( countryCallingCode ) ; if ( ( ( regionCodes.size ( ) ) == 1 ) && ( PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY.equals ( regionCodes.get ( 0 ) ) ) ) { loadMetadataFromFile ( PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY , countryCallingCode ) ; } } } return countryCodeToNonGeographicalMetadataMap.get ( countryCallingCode ) ; }
public boolean isBetterMatchThan ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier compareTo , com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier reference ) { if ( compareTo == null ) { return true ; } com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier compareQualifier = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier ) ( compareTo ) ) ; com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier referenceQualifier = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier ) ( reference ) ) ; if ( ( compareQualifier.getValue ( ) ) == ( referenceQualifier.getValue ( ) ) ) { return false ; } else if ( ( mValue ) == ( com.android.sdklib.resources.DockMode.NONE ) ) { return true ; } return false ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mTelephonyManager = ( ( android.telephony.TelephonyManager ) ( getContext ( ) . getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; android.telephony.cts.CellInfoTest.mCm = ( ( android.net.ConnectivityManager ) ( getContext ( ) . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; mPm = getContext ( ) . getPackageManager ( ) ; }
public static void loadAllClasses ( ) { art.Test988.MethodThrownThrough.class . toString ( ) ; art.Test988.MethodEntry.class . toString ( ) ; art.Test988.MethodReturn.class . toString ( ) ; art.Test988.FibResult.class . toString ( ) ; art.Test988.FibThrow.class . toString ( ) ; art.Test988.Printable.class . toString ( ) ; java.util.ArrayList.class . toString ( ) ; art.Test988.RecurOp.class . toString ( ) ; art.Test988.IterOp.class . toString ( ) ; java.lang.StringBuilder.class . toString ( ) ; art.Test988.IntrinsicsTest.initialize ( ) ; }
private static void writeGradleSettingsFile ( java.io.File settingsFile , java.util.List < java.lang.String > projectPaths ) throws java.io.IOException { java.lang.StringBuilder contents = new java.lang.StringBuilder ( ) ; for ( java.lang.String path : projectPaths ) { contents.append ( "include '" ) . append ( path ) . append ( "\'\n" ) ; } com.google.common.io.Files.write ( contents.toString ( ) , settingsFile , com.google.common.base.Charsets.UTF_8 ) ; }
private boolean isNanpaNumberWithNationalPrefix ( ) { return ( ( ( ( currentMetadata.getCountryCode ( ) ) == 1 ) && ( ( nationalNumber.charAt ( 0 ) ) == '1' ) ) && ( ( nationalNumber.charAt ( 1 ) ) != '0' ) ) && ( ( nationalNumber.charAt ( 1 ) ) != '1' ) ; }
public boolean isPossibleShortNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.util.List < java.lang.String > regionCodes = getRegionCodesForCountryCode ( number.getCountryCode ( ) ) ; java.lang.String shortNumber = com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) ; for ( java.lang.String region : regionCodes ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( region ) ; if ( phoneMetadata == null ) { continue ; } if ( matcherApi.matchesPossibleNumber ( shortNumber , phoneMetadata.getGeneralDesc ( ) ) ) { return true ; } } return false ; }
public void onClick ( android.view.View v ) { android.app.AlertDialog dialog = new android.app.AlertDialog.Builder ( this ) . setTitle ( "OpenCV Library BSD License" ) . setMessage ( licenseText ) . setPositiveButton ( "Acknowledged" , new android.content.DialogInterface.OnClickListener ( ) { public void onClick ( android.content.DialogInterface dialog , int id ) { dialog.dismiss ( ) ; } } ) . show ( ) ; android.widget.TextView textView = ( ( android.widget.TextView ) ( dialog.findViewById ( android.R.id.message ) ) ) ; textView.setTextSize ( 9 ) ; }
private static void checkName ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String displayName ) { com.android.build.gradle.internal.VariantManager.checkPrefix ( name , displayName , com.android.builder.core.VariantConfiguration.Type.ANDROID_TEST.getPrefix ( ) ) ; com.android.build.gradle.internal.VariantManager.checkPrefix ( name , displayName , com.android.builder.core.VariantConfiguration.Type.UNIT_TEST.getPrefix ( ) ) ; if ( com.android.builder.core.BuilderConstants.LINT.equals ( name ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "%1$s names cannot be %2$s" , displayName , com.android.builder.core.BuilderConstants.LINT ) ) ; } }
public void test10089890 ( ) throws java.lang.Exception { java.util.Locale l = java.util.Locale.US ; java.util.TimeZone utc = java.util.TimeZone.getTimeZone ( "UTC" ) ; java.util.TimeZone pacific = java.util.TimeZone.getTimeZone ( "America/Los_Angeles" ) ; int flags = ( ( ( FORMAT_SHOW_DATE ) | ( FORMAT_ABBREV_ALL ) ) | ( FORMAT_SHOW_TIME ) ) | ( FORMAT_24HOUR ) ; assertEquals ( "Jan 1, 1970, 00:00 – Jan 2, 1970, 00:00" , formatDateRange ( l , utc , 0 , ( ( libcore.icu.DateIntervalFormatTest.DAY ) + 1 ) , flags ) ) ; assertEquals ( "Dec 31, 1969, 16:00 – Jan 1, 1970, 16:00" , formatDateRange ( l , pacific , 0 , libcore.icu.DateIntervalFormatTest.DAY , flags ) ) ; }
public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JReferenceType type , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType ( type ) ; com.android.jack.dx.rop.cst.CstString name = new com.android.jack.dx.rop.cst.CstString ( method.getName ( ) ) ; com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef ( definingClass , name , new com.android.jack.dx.rop.cst.CstString ( com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( method ) ) ) ; return methodRef ; }
public void testNoActionView ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "AndroidManifest.xml:5: Warning: App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent filter. See issue explanation for more details. [GoogleAppIndexingWarning]\n" + " <application\n" ) + " ^\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( xml ( "AndroidManifest.xml" , ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.helloworld\" >\n" ) + "\n" ) + " <application\n" ) + " android:allowBackup=\"true\"\n" ) + " android:icon=\"@mipmap/ic_launcher\"\n" ) + " android:label=\"@string/app_name\"\n" ) + " android:theme=\"@style/AppTheme\" >\n" ) + " <activity\n" ) + " android:name=\".MainActivity\"\n" ) + " android:label=\"@string/app_name\" >\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.MAIN\" />\n" ) + " <category android:name=\"android.intent.category.LAUNCHER\" />\n" ) + " </intent-filter>\n" ) + " </activity>\n" ) + " <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />" ) + " </application>\n" ) + "\n" ) + "</manifest>\n" ) ) ) ) ) ; }
public void test_setOption ( ) throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open ( ) ; dc.setOption ( java.net.StandardSocketOptions.SO_SNDBUF , 1000 ) ; assertEquals ( 1000 , ( ( int ) ( dc.getOption ( java.net.StandardSocketOptions.SO_SNDBUF ) ) ) ) ; assertEquals ( 1000 , dc.socket ( ) . getSendBufferSize ( ) ) ; dc.close ( ) ; try { dc.setOption ( java.net.StandardSocketOptions.SO_LINGER , 2000 ) ; fail ( ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
private boolean isDeadStatement ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JStatement stmt ) { com.android.jack.cfg.BasicBlockMarker bbm = stmt.getMarker ( com.android.jack.cfg.BasicBlockMarker.class ) ; assert bbm != null ; com.android.jack.cfg.BasicBlock basicBlock = bbm.getBasicBlock ( ) ; return ( ( basicBlock != ( exiBlock ) ) && ( ( blockState [ basicBlock.getId ( ) ] ) != ( com.android.jack.cfg.CfgBuilder.ACCESSIBLE ) ) ) && ( ! ( basicBlockOfVirtualStmt.contains ( basicBlock ) ) ) ; }
protected synchronized boolean stop ( ) { android.util.Log.i ( com.android.bluetooth.hfp.HeadsetService.TAG , "stop()" ) ; if ( ! ( mStarted ) ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , "stop() called before start()" ) ; return true ; } mStarted = false ; unregisterReceiver ( mHeadsetReceiver ) ; com.android.bluetooth.hfp.HeadsetStateMachine.destroy ( mStateMachine ) ; mStateMachine = null ; mStateMachinesThread.quitSafely ( ) ; mStateMachinesThread = null ; com.android.bluetooth.hfp.HeadsetService.setHeadsetService ( null ) ; return true ; }
public void onStart ( ) { super . onStart ( ) ; if ( ( ( mLocalManager ) == null ) || ( isUiRestricted ( ) ) ) return ; mLocalManager.setForegroundActivity ( getActivity ( ) ) ; mLocalManager.getEventManager ( ) . registerCallback ( this ) ; updateProgressUi ( mLocalAdapter.isDiscovering ( ) ) ; }
public java.util.List < java.lang.Class < ? extends lombok.ast.Node > > getApplicableNodeTypes ( ) { return java.util.Collections.< java.lang.Class < ? extends lombok.ast.Node > > singletonList ( lombok.ast.ClassDeclaration.class ) ; }
public int compare ( com.android.traceview.ThreadData td1 , com.android.traceview.ThreadData td2 ) { if ( ( timeBase.getTime ( td2 ) ) > ( timeBase.getTime ( td1 ) ) ) return 1 ; if ( ( timeBase.getTime ( td2 ) ) < ( timeBase.getTime ( td1 ) ) ) return - 1 ; return td2.getName ( ) . compareTo ( td1.getName ( ) ) ; }
public static com.google.gct.idea.appengine.util.PsiFile addOrReplaceFile ( com.google.gct.idea.appengine.util.PsiDirectory dir , com.google.gct.idea.appengine.util.PsiFile file ) { final com.google.gct.idea.appengine.util.PsiFile existingFile = dir.findFile ( file.getName ( ) ) ; if ( existingFile != null ) { existingFile.delete ( ) ; } return ( ( com.google.gct.idea.appengine.util.PsiFile ) ( dir.add ( file ) ) ) ; }
public void onFeatureReady ( ) { android.util.Log.i ( com.android.internal.telephony.ims.MmTelFeatureCompatAdapter.TAG , "onFeatureReady called!" ) ; android.content.IntentFilter intentFilter = new android.content.IntentFilter ( com.android.ims.ImsManager.ACTION_IMS_INCOMING_CALL ) ; mContext.registerReceiver ( mReceiver , intentFilter ) ; try { mSessionId = mCompatFeature.startSession ( createIncomingCallPendingIntent ( ) , new com.android.internal.telephony.ims.MmTelFeatureCompatAdapter.ImsRegistrationListenerBase ( ) ) ; mCompatFeature.addRegistrationListener ( mListener ) ; mCompatFeature.addRegistrationListener ( mRegCompatAdapter.getRegistrationListener ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.internal.telephony.ims.MmTelFeatureCompatAdapter.TAG , ( "Couldn't start compat feature: " + ( e.getMessage ( ) ) ) ) ; } }
public void onStart ( ) { super . onStart ( ) ; mWifiEnabler = createWifiEnabler ( ) ; mWifiTracker.startTracking ( ) ; }
private com.android.ide.eclipse.gltrace.state.IGLProperty getImageFromPerTextureLevelState ( com.android.ide.eclipse.gltrace.state.IGLProperty state ) { if ( ( state != null ) && ( ( state.getType ( ) ) != ( com.android.ide.eclipse.gltrace.state.GLStateType.PER_TEXTURE_LEVEL_STATE ) ) ) { state = state.getParent ( ) ; } if ( ( state == null ) || ( ( state.getType ( ) ) != ( com.android.ide.eclipse.gltrace.state.GLStateType.PER_TEXTURE_LEVEL_STATE ) ) ) { return null ; } return ( ( com.android.ide.eclipse.gltrace.state.GLCompositeProperty ) ( state ) ) . getProperty ( GLStateType.TEXTURE_IMAGE ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedPackage pkg , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findPackage ( pkg ) ; if ( c == null ) { return null ; } java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > annotations = c.getAnnotations ( ) ; if ( annotations != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
public boolean validates ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull java.lang.String value ) { boolean matches = ( com.android.manifmerger.AttributeModel.BooleanValidator.TRUE_PATTERN.matcher ( value ) . matches ( ) ) || ( com.android.manifmerger.AttributeModel.BooleanValidator.FALSE_PATTERN.matcher ( value ) . matches ( ) ) ; if ( ! matches ) { attribute.addMessage ( mergingReport , MergingReport.Record.Severity.ERROR , java.lang.String.format ( ( "Attribute %1$s at %2$s has an illegal value=(%3$s), " + "expected 'true' or 'false'" ) , attribute.getId ( ) , attribute.printPosition ( ) , value ) ) ; } return matches ; }
public static java.lang.String apiToMagic ( int targetApiLevel ) { java.lang.String version ; if ( targetApiLevel >= ( com.android.dex.DexFormat.API_CURRENT ) ) { version = com.android.dex.DexFormat.VERSION_CURRENT ; } else if ( targetApiLevel >= ( com.android.dex.DexFormat.API_CONST_METHOD_HANDLE ) ) { version = com.android.dex.DexFormat.VERSION_FOR_API_28 ; } else if ( targetApiLevel >= ( com.android.dex.DexFormat.API_METHOD_HANDLES ) ) { version = com.android.dex.DexFormat.VERSION_FOR_API_26 ; } else if ( targetApiLevel >= ( com.android.dex.DexFormat.API_DEFINE_INTERFACE_METHODS ) ) { version = com.android.dex.DexFormat.VERSION_FOR_API_24 ; } else { version = com.android.dex.DexFormat.VERSION_FOR_API_13 ; } return ( ( com.android.dex.DexFormat.MAGIC_PREFIX ) + version ) + ( com.android.dex.DexFormat.MAGIC_SUFFIX ) ; }
private void updateEmptyMessage ( int filterType ) { final java.lang.String message ; switch ( filterType ) { case android.provider.CallLog.Calls.MISSED_TYPE : message = getString ( R.string.recentMissed_empty ) ; break ; case CallLogQueryHandler.CALL_TYPE_ALL : message = getString ( R.string.recentCalls_empty ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "Unexpected filter type in CallLogFragment: " + filterType ) ) ; } ( ( android.widget.TextView ) ( getListView ( ) . getEmptyView ( ) ) ) . setText ( message ) ; }
private boolean runCorrectnessPatterns ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s ) { boolean pass = true ; pass &= patternDuplicateAnonymousResult ( RS , s ) ; pass &= patternFindMinAndMaxInf ( RS , s ) ; pass &= patternInterleavedReduce ( RS , s ) ; pass &= patternRedundantGet ( RS , s ) ; return pass ; }
private void rewriteClass ( java.util.jar.JarEntry entry , java.io.InputStream inputStream , java.util.jar.JarOutputStream outputStream ) throws java.io.IOException { org.objectweb.asm.ClassReader classReader = new org.objectweb.asm.ClassReader ( inputStream ) ; org.objectweb.asm.tree.ClassNode classNode = new org.objectweb.asm.tree.ClassNode ( org.objectweb.asm.Opcodes.ASM5 ) ; classReader.accept ( classNode , com.android.builder.testing.MockableJarGenerator.EMPTY_FLAGS ) ; modifyClass ( classNode ) ; org.objectweb.asm.ClassWriter classWriter = new org.objectweb.asm.ClassWriter ( com.android.builder.testing.MockableJarGenerator.EMPTY_FLAGS ) ; classNode.accept ( classWriter ) ; outputStream.putNextEntry ( new java.util.zip.ZipEntry ( entry.getName ( ) ) ) ; outputStream.write ( classWriter.toByteArray ( ) ) ; }
public void cleanup ( ) { mRemoteDevices = null ; if ( ( mProfileConnectionState ) != null ) { mProfileConnectionState.clear ( ) ; mProfileConnectionState = null ; } if ( mReceiverRegistered ) { mService.unregisterReceiver ( mReceiver ) ; mReceiverRegistered = false ; } mService = null ; mBondedDevices.clear ( ) ; }
public void testUpdateBatteryLevel_errorTooLargeValue ( ) { int batteryLevel = 101 ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; mRemoteDevices.updateBatteryLevel ( mDevice1 , batteryLevel ) ; org.mockito.Mockito.verify ( mAdapterService , org.mockito.Mockito.never ( ) ) . sendBroadcast ( org.mockito.Mockito.any ( ) , org.mockito.Mockito.anyString ( ) ) ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
public boolean onPreferenceClick ( android.preference.Preference preference ) { com.android.internal.logging.MetricsLogger.action ( mButtonAPNExpand.getContext ( ) , MetricsEvent.ACTION_MOBILE_NETWORK_APN_SETTINGS ) ; final android.content.Intent intent = new android.content.Intent ( android.provider.Settings.ACTION_APN_SETTINGS ) ; intent.putExtra ( ":settings:show_fragment_as_subsetting" , true ) ; intent.putExtra ( com.android.phone.GsmUmtsOptions.EXTRA_SUB_ID , subId ) ; mPrefFragment.startActivity ( intent ) ; return true ; }
public java.lang.String apply ( com.android.dialer.calllog.RefreshAnnotatedCallLogWorker.RefreshResult refreshResult ) { switch ( refreshResult ) { case NOT_DIRTY : return com.android.dialer.metrics.Metrics.ANNOTATED_CALL_LOG_NOT_DIRTY ; case REBUILT_BUT_NO_CHANGES_NEEDED : return checkDirty ? com.android.dialer.metrics.Metrics.ANNOTATED_LOG_NO_CHANGES_NEEDED : com.android.dialer.metrics.Metrics.NEW_CALL_LOG_FORCE_REFRESH_NO_CHANGES_NEEDED ; case REBUILT_AND_CHANGES_NEEDED : return checkDirty ? com.android.dialer.metrics.Metrics.ANNOTATED_CALL_LOG_CHANGES_NEEDED : com.android.dialer.metrics.Metrics.ANNOTATED_CALL_LOG_FORCE_REFRESH_CHANGES_NEEDED ; default : throw new java.lang.IllegalStateException ( ( "Unsupported result: " + refreshResult ) ) ; } }
private void onCarrierConfigChanged ( ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( mPhone.getContext ( ) . getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; android.os.PersistableBundle config = configManager.getConfigForSubId ( mPhone.getSubId ( ) ) ; if ( config != null ) { updateLteEarfcnLists ( config ) ; updateReportingCriteria ( config ) ; } }
public java.lang.Object getData ( @ org.jetbrains.annotations.NonNls java.lang.String dataId ) { if ( ( myDesigner ) != null ) { if ( PlatformDataKeys.FILE_EDITOR.is ( dataId ) ) { return myDesigner.getEditor ( ) ; } if ( ( PlatformDataKeys.COPY_PROVIDER.is ( dataId ) ) && ( ! ( isEditing ( ) ) ) ) { return myCopyProvider ; } } return null ; }
public boolean isForceHiding ( android.view.WindowManager.LayoutParams attrs ) { return ( ( ( ( attrs.privateFlags ) & ( PRIVATE_FLAG_KEYGUARD ) ) != 0 ) || ( ( isKeyguardHostWindow ( attrs ) ) && ( isKeyguardSecureIncludingHidden ( ) ) ) ) || ( ( attrs.type ) == ( TYPE_KEYGUARD_SCRIM ) ) ; }
public java.lang.String onGetDefaultNumber ( com.android.phone.EditPhoneNumberPreference preference ) { if ( preference == ( mSubMenuVoicemailSettings ) ) { if ( com.android.phone.CallFeaturesSetting.DBG ) com.android.phone.CallFeaturesSetting.log ( "updating default for voicemail dialog" ) ; updateVoiceNumberField ( ) ; return null ; } java.lang.String vmDisplay = mPhone.getVoiceMailNumber ( ) ; if ( android.text.TextUtils.isEmpty ( vmDisplay ) ) { return null ; } if ( com.android.phone.CallFeaturesSetting.DBG ) com.android.phone.CallFeaturesSetting.log ( "updating default for call forwarding dialogs" ) ; return ( ( getString ( R.string.voicemail_abbreviated ) ) + " " ) + vmDisplay ; }
public static byte [ ] serialize ( int dropped , java.util.List < android.net.ConnectivityMetricsEvent > events ) throws java.io.IOException { final com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityLog log = new com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityLog ( ) ; log.events = com.android.server.connectivity.IpConnectivityEventBuilder.toProto ( events ) ; log.droppedEvents = dropped ; if ( ( ( log.events.length ) > 0 ) || ( dropped > 0 ) ) { log.version = IpConnectivityMetrics.VERSION ; } return com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityLog.toByteArray ( log ) ; }
public static boolean isBitmapFile ( @ com.android.annotations.NonNull java.io.File file ) { java.lang.String path = file.getPath ( ) ; return ( ( ( ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_PNG ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_JPG ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_GIF ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_JPEG ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_WEBP ) ) ; }
public void test_minus_Period ( ) { test.java.time.MockSimplePeriod period = test.java.time.MockSimplePeriod.of ( 7 , java.time.temporal.ChronoUnit.MONTHS ) ; java.time.OffsetDateTime t = tck.java.time.TCKOffsetDateTime.TEST_2008_6_30_11_30_59_000000500.minus ( period ) ; org.testng.Assert.assertEquals ( t , java.time.OffsetDateTime.of ( 2007 , 11 , 30 , 11 , 30 , 59 , 500 , tck.java.time.TCKOffsetDateTime.OFFSET_PONE ) ) ; }
private static com.android.timezone.distro.tools.TimeZoneDistroBuilder createValidDistroBuilder ( ) throws java.lang.Exception { java.lang.String distroRulesVersion = com.android.cts.tzdata.TzDataCheckTest.VALID_RULES_VERSION ; com.android.timezone.distro.DistroVersion validDistroVersion = new com.android.timezone.distro.DistroVersion ( com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION , com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MINOR_VERSION , distroRulesVersion , com.android.cts.tzdata.TzDataCheckTest.VALID_REVISION ) ; return new com.android.timezone.distro.tools.TimeZoneDistroBuilder ( ) . setDistroVersion ( validDistroVersion ) . setTzDataFile ( com.android.cts.tzdata.TzDataCheckTest.createValidTzDataBytes ( distroRulesVersion ) ) . setIcuDataFile ( new byte [ 10 ] ) ; }
public void requestDefaultSmdpAddress ( java.lang.String cardId , java.util.concurrent.Executor executor , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.String > callback ) { try { getIEuiccCardController ( ) . getDefaultSmdpAddress ( mContext.getOpPackageName ( ) , cardId , new com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode , java.lang.String address ) { executor.execute ( ( ) -> callback.onComplete ( resultCode , address ) ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling getDefaultSmdpAddress" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
public char [ ] formatBigDecimal ( java.math.BigDecimal value , java.text.FieldPosition field ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator fpi = libcore.icu.NativeDecimalFormat.FieldPositionIterator.forFieldPosition ( field ) ; char [ ] result = libcore.icu.NativeDecimalFormat.formatDigitList ( this . address , value.toString ( ) , fpi ) ; if ( ( fpi != null ) && ( field != null ) ) { libcore.icu.NativeDecimalFormat.updateFieldPosition ( field , fpi ) ; } return result ; }
public android.content.Context createConfigurationContext ( android.content.res.Configuration overrideConfiguration ) { if ( overrideConfiguration == null ) { throw new java.lang.IllegalArgumentException ( "overrideConfiguration must not be null" ) ; } android.app.ContextImpl c = new android.app.ContextImpl ( ) ; c.init ( mPackageInfo , null , mMainThread ) ; c.mResources = mResourcesManager.getTopLevelResources ( mPackageInfo.getResDir ( ) , mPackageInfo.getOverlayDirs ( ) , getDisplayId ( ) , overrideConfiguration , mResources.getCompatibilityInfo ( ) , mActivityToken ) ; return c ; }
public static int forkSystemServer ( int uid , int gid , int [ ] gids , int debugFlags , int [ ] [ ] rlimits , long permittedCapabilities , long effectiveCapabilities ) { com.android.internal.os.Zygote.VM_HOOKS.preFork ( ) ; com.android.internal.os.Zygote.resetNicePriority ( ) ; int pid = com.android.internal.os.Zygote.nativeForkSystemServer ( uid , gid , gids , debugFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == 0 ) { android.os.Trace.setTracingEnabled ( true ) ; } com.android.internal.os.Zygote.VM_HOOKS.postForkCommon ( ) ; return pid ; }
public void testGetConfig1 ( ) { com.android.ide.common.resources.configuration.FolderConfiguration configForFolder = com.android.ide.common.resources.configuration.FolderConfiguration.getConfig ( new java.lang.String [ ] { "values" , "en" , "rUS" } ) ; assertNotNull ( configForFolder ) ; assertEquals ( "en" , configForFolder.getLocaleQualifier ( ) . getLanguage ( ) ) ; assertEquals ( "US" , configForFolder.getLocaleQualifier ( ) . getRegion ( ) ) ; assertNull ( configForFolder.getScreenDimensionQualifier ( ) ) ; assertNull ( configForFolder.getLayoutDirectionQualifier ( ) ) ; }
public void hasImeActionTest ( ) { android.widget.EditText editText = new android.widget.EditText ( context ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( EditorInfo.IME_ACTION_GO ) . matches ( editText ) ) ; editText.setImeOptions ( EditorInfo.IME_ACTION_NEXT ) ; org.junit.Assert.assertFalse ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( EditorInfo.IME_ACTION_GO ) . matches ( editText ) ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( EditorInfo.IME_ACTION_NEXT ) . matches ( editText ) ) ; }
public void onScheduledRecordingRemoved ( com.android.tv.dvr.data.ScheduledRecording ... scheduledRecordings ) { for ( com.android.tv.dvr.data.ScheduledRecording schedule : scheduledRecordings ) { com.android.tv.guide.ProgramManager.TableEntry oldEntry = getTableEntry ( schedule ) ; if ( oldEntry != null ) { com.android.tv.guide.ProgramManager.TableEntry newEntry = new com.android.tv.guide.ProgramManager.TableEntry ( oldEntry.channelId , oldEntry.program , null , oldEntry.entryStartUtcMillis , oldEntry.entryEndUtcMillis , oldEntry.isBlocked ( ) ) ; updateEntry ( oldEntry , newEntry ) ; } } }
static long optimalNumOfBits ( long n , double p ) { if ( p == 0 ) { p = java.lang.Double.MIN_VALUE ; } return ( ( long ) ( ( ( - n ) * ( java.lang.Math.log ( p ) ) ) / ( ( java.lang.Math.log ( 2 ) ) * ( java.lang.Math.log ( 2 ) ) ) ) ) ; }
public void write ( byte [ ] b , int off , int len ) throws java.io.IOException { try { mSignature.update ( b , off , len ) ; } catch ( java.security.SignatureException e ) { throw new java.io.IOException ( ( "SignatureException: " + e ) ) ; } super . write ( b , off , len ) ; mCount += len ; }
protected void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; mSensorManager = ( ( android.hardware.SensorManager ) ( getSystemService ( Context.SENSOR_SERVICE ) ) ) ; mSensor = mSensorManager.getDefaultSensor ( Sensor.TYPE_ACCELEROMETER ) ; mView = new com.example.android.apis.graphics.SensorTest.SampleView ( this ) ; setContentView ( mView ) ; if ( android.util.Config.LOGD ) android.util.Log.d ( TAG , ( "create " + ( mSensorManager ) ) ) ; }
public void TestCurrencyRoundingMinWithoutMax ( ) { android.icu.text.NumberFormat currencyFormat = android.icu.text.DecimalFormat.getCurrencyInstance ( java.util.Locale.US ) ; currencyFormat.setCurrency ( android.icu.util.Currency.getInstance ( "AUD" ) ) ; currencyFormat.setMinimumFractionDigits ( 0 ) ; expect ( currencyFormat , 0.001 , "A$0" ) ; currencyFormat = android.icu.text.DecimalFormat.getCurrencyInstance ( java.util.Locale.US ) ; currencyFormat.setCurrency ( android.icu.util.Currency.getInstance ( "CAD" ) ) ; ( ( android.icu.text.DecimalFormat ) ( currencyFormat ) ) . setCurrencyUsage ( CurrencyUsage.CASH ) ; currencyFormat.setMinimumFractionDigits ( 0 ) ; expect ( currencyFormat , 0.08 , "CA$0.10" ) ; }
public void test_forEachRemaining_iterator ( ) throws java.lang.Exception { libcore.java.util.ForEachRemainingTester.test_forEachRemaining ( new java.util.ArrayDeque < > ( ) , new java.lang.String [ ] { "foo" , "bar" , "baz " } ) ; libcore.java.util.ForEachRemainingTester.test_forEachRemaining_NPE ( new java.util.ArrayDeque < > ( ) , new java.lang.String [ ] { "foo" , "bar" , "baz " } ) ; }
public boolean hasNextToken ( ) { if ( ( lineCharIdx ) >= ( line.length ( ) ) ) { return false ; } return true ; }
public void test_wrap_ByteBuffer$ByteBuffer_04 ( ) throws java.lang.Exception { java.lang.String host = "new host" ; int port = 8080 ; java.nio.ByteBuffer bb = java.nio.ByteBuffer.allocate ( 10 ) ; java.nio.ByteBuffer [ ] bbA = new java.nio.ByteBuffer [ ] { java.nio.ByteBuffer.allocate ( 5 ) , java.nio.ByteBuffer.allocate ( 10 ) , java.nio.ByteBuffer.allocate ( 5 ) } ; javax.net.ssl.SSLEngine sse = getEngine ( host , port ) ; try { javax.net.ssl.SSLEngineResult result = sse.wrap ( bbA , bb ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
private void responseString ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String str ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { java.lang.String ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = str ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public static < K , V > java.util.Map < K , java.util.SortedSet < V > > asMap ( com.google.common.collect.SortedSetMultimap < K , V > multimap ) { return ( ( java.util.Map < K , java.util.SortedSet < V > > ) ( ( java.util.Map < K , ? > ) ( multimap.asMap ( ) ) ) ) ; }
public boolean hasChildren ( java.lang.Object element ) { if ( element instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) { java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo > children = ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ( element ) ) . getChildren ( ) ; if ( children != null ) { return ( children.size ( ) ) > 0 ; } } return false ; }
public java.util.List < java.io.File > getInputSources ( ) { return ( inputSources ) == null ? java.util.Collections.< java.io.File > emptyList ( ) : inputSources ; }
void write ( java.io.PrintWriter writer ) { if ( ( ! ( isValid ( ) ) ) || ( annotations.isEmpty ( ) ) ) { return ; } writer.print ( " <item name=\"" ) ; writer.print ( getSignature ( ) ) ; writer.println ( "\">" ) ; for ( com.android.build.gradle.tasks.annotations.Extractor.AnnotationData annotation : annotations ) { annotation.write ( writer ) ; } writer.print ( " </item>" ) ; writer.println ( ) ; }
public void callDropFeedbackPaint ( com.android.ide.common.api.IGraphics gc , com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy targetNode , com.android.ide.common.api.DropFeedback feedback ) { if ( ( ( gc != null ) && ( feedback != null ) ) && ( ( feedback.painter ) != null ) ) { try { feedback.painter.paint ( gc , targetNode , feedback ) ; } catch ( java.lang.Exception e ) { logError ( "DropFeedback.painter failed: %s" , e.toString ( ) ) ; } } }
public com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults ( int subId ) { com.android.internal.telephony.TelephonyPermissions.enforceCallingOrSelfModifyPermissionOrCarrierPrivilege ( mApp , subId , "getCellNetworkScanResults" ) ; if ( com.android.phone.PhoneInterfaceManager.DBG ) com.android.phone.PhoneInterfaceManager.log ( ( "getCellNetworkScanResults: subId " + subId ) ) ; com.android.internal.telephony.CellNetworkScanResult result = ( ( com.android.internal.telephony.CellNetworkScanResult ) ( sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_PERFORM_NETWORK_SCAN , null , subId ) ) ) ; return result ; }
protected com.android.jack.test.toolchain.JackBasedToolchain getReferenceToolchain ( ) { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; java.io.File internalJackOutputLib ; try { internalJackOutputLib = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; toolchain.addProperty ( Options.EMIT_LINE_NUMBER_DEBUG_INFO.getName ( ) , java.lang.Boolean.toString ( withDebugInfos ) ) ; toolchain.addProperty ( ScheduleInstance.DEFAULT_RUNNER.getName ( ) , "single-threaded" ) ; toolchain.addProperty ( Options.LIBRARY_OUTPUT_DIR.getName ( ) , internalJackOutputLib.getAbsolutePath ( ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } return toolchain ; }
private java.util.concurrent.ConcurrentSkipListMap.Node < K , V > loNode ( ) { if ( ( lo ) == null ) return m.findFirst ( ) ; else if ( loInclusive ) return m.findNear ( lo , ( ( java.util.concurrent.ConcurrentSkipListMap.GT ) | ( java.util.concurrent.ConcurrentSkipListMap.EQ ) ) ) ; else return m.findNear ( lo , java.util.concurrent.ConcurrentSkipListMap.GT ) ; }
public void testDependencies ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( ( ( ( ( ( "" + ( ( ( ( ( ( "build.gradle:5: Warning: Old buildToolsVersion 19.0.0; recommended version is 19.1.0 or later [GradleDependency]\n" + " buildToolsVersion \"19.0.0\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:24: Warning: A newer version of com.google.guava:guava than 11.0.2 is available: 18.0 [GradleDependency]\n" ) + " freeCompile \'com.google.guava:guava:11.0.2\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:25: Warning: A newer version of com.android.support:appcompat-v7 than 13.0.0 is available: " ) ) + ( com.android.sdklib.SdkVersionInfo.HIGHEST_KNOWN_STABLE_API ) ) + ".0.0 [GradleDependency]\n" ) + " compile \'com.android.support:appcompat-v7:13.0.0\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 3 warnings\n" ) , lintProject ( "gradle/Dependencies.gradle=>build.gradle" ) ) ; }
protected java.lang.Iterable < org.jf.dexlib2.analysis.ClassDef > getDirectInterfaces ( ) { java.lang.Iterable < org.jf.dexlib2.analysis.ClassDef > directInterfaces = com.google.common.collect.Iterables.filter ( getInterfaces ( ) . values ( ) , com.google.common.base.Predicates.notNull ( ) ) ; if ( ! ( interfacesFullyResolved ) ) { throw new org.jf.dexlib2.analysis.UnresolvedClassException ( "Interfaces for class %s not fully resolved: %s" , getType ( ) , com.google.common.base.Joiner.on ( ',' ) . join ( getUnresolvedInterfaces ( ) ) ) ; } return directInterfaces ; }
private javax.crypto.KeyAgreementSpi getSpi ( java.security.Key key ) { synchronized ( initLock ) { if ( ( ( spiImpl ) != null ) && ( key == null ) ) { return spiImpl ; } final org.apache.harmony.security.fortress.Engine.SpiAndProvider sap = javax.crypto.KeyAgreement.tryAlgorithm ( key , specifiedProvider , algorithm ) ; if ( sap == null ) { throw new java.security.ProviderException ( ( "No provider for " + ( getAlgorithm ( ) ) ) ) ; } spiImpl = ( ( javax.crypto.KeyAgreementSpi ) ( sap.spi ) ) ; provider = sap.provider ; return spiImpl ; } }
void build ( ) { assert ( entry.getSuccessors ( ) . size ( ) ) == 1 ; com.android.jack.ir.ast.cfg.JBasicBlock block = buildBlock ( entry.getSuccessors ( ) . get ( 0 ) ) ; cfg.getEntryBlock ( ) . replaceAllSuccessors ( cfg.getExitBlock ( ) , block ) ; setUpCatchBlockReferences ( ) ; }
private void setupWifiInfo ( ) { when ( mWifiInfo.is24GHz ( ) ) . thenReturn ( true ) ; when ( mWifiInfo.is5GHz ( ) ) . thenReturn ( false ) ; when ( mWifiInfo.getRssi ( ) ) . thenReturn ( ( - 70 ) ) ; when ( mWifiInfo.getNetworkId ( ) ) . thenReturn ( WifiConfiguration.INVALID_NETWORK_ID ) ; when ( mWifiInfo.getBSSID ( ) ) . thenReturn ( null ) ; }
protected boolean stop ( ) { android.util.Log.v ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "stop()" ) ; if ( ( mContactChangeObserver ) == null ) { android.util.Log.i ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Avoid unregister when receiver it is not registered" ) ; return true ; } try { unregisterReceiver ( mPbapReceiver ) ; getContentResolver ( ) . unregisterContentObserver ( mContactChangeObserver ) ; mContactChangeObserver = null ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Unable to unregister pbap receiver" , e ) ; } mSessionStatusHandler.obtainMessage ( com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN ) . sendToTarget ( ) ; setState ( BluetoothProfile.STATE_DISCONNECTED , BluetoothPbap.RESULT_CANCELED ) ; return true ; }
public com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult getContrastResult ( ) { com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult normalTest = getContrastResultForNormalText ( ) ; com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult largeTest = getContrastResultForLargeText ( ) ; if ( normalTest == largeTest ) { return normalTest ; } else if ( ( mTextSize ) == null ) { return com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult.INDETERMINATE ; } else if ( ( ( ( mTextSize ) >= ( com.android.hierarchyviewerlib.models.EvaluateContrastModel.NORMAL_TEXT_BOLD_SZ_PTS ) ) && ( mIsBold ) ) || ( ( mTextSize ) > ( com.android.hierarchyviewerlib.models.EvaluateContrastModel.NORMAL_TEXT_SZ_PTS ) ) ) { return largeTest ; } else { return normalTest ; } }
static java.nio.ByteOrder byteOrder ( ) { if ( ( sun.nio.ch.NativeObject.byteOrder ) != null ) return sun.nio.ch.NativeObject.byteOrder ; long a = sun.nio.ch.NativeObject.unsafe.allocateMemory ( 8 ) ; try { sun.nio.ch.NativeObject.unsafe.putLong$ ( a , 72623859790382856L ) ; byte b = sun.nio.ch.NativeObject.unsafe.getByte$ ( a ) ; switch ( b ) { case 1 : sun.nio.ch.NativeObject.byteOrder = java.nio.ByteOrder.BIG_ENDIAN ; break ; case 8 : sun.nio.ch.NativeObject.byteOrder = java.nio.ByteOrder.LITTLE_ENDIAN ; break ; default : assert false ; } } finally { sun.nio.ch.NativeObject.unsafe.freeMemory ( a ) ; } return sun.nio.ch.NativeObject.byteOrder ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.TextFormat format ) { java.lang.String s = ( ( ( ( "Found lint error: " + ( issue.getId ( ) ) ) + ": " ) + message ) + " at " ) + location ; job.setProperty ( ERROR_KEY , s ) ; fail ( s ) ; }
public void run ( ) { if ( ( mAutoScrollCount ) == 0 ) { mAutoScrollTimer.cancel ( ) ; return ; } setSelectedPosition ( scrollPatternGenerator.next ( ) ) ; ( mAutoScrollCount ) -- ; }
public void testInstall_withBadlyFormedAndroidRevision ( ) throws java.lang.Exception { java.lang.String invalidAndroidRevision = "A01" ; byte [ ] versionBytes = libcore.tzdata.update2.BundleVersion.getBytes ( BundleVersion.FULL_BUNDLE_FORMAT_VERSION , libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , invalidAndroidRevision ) ; libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes ( versionBytes ) ; assertFalse ( installer.install ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public static int getInt ( java.lang.String key , int def ) { if ( ( key.length ( ) ) > ( android.os.SystemProperties.PROP_NAME_MAX ) ) { throw new java.lang.IllegalArgumentException ( ( "key.length > " + ( android.os.SystemProperties.PROP_NAME_MAX ) ) ) ; } if ( android.os.SystemProperties.TRACK_KEY_ACCESS ) android.os.SystemProperties.onKeyAccess ( key ) ; return android.os.SystemProperties.native_get_int ( key , def ) ; }
public boolean shouldDelayChildPressedState ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return shouldDelayChildPressedState ( ) ; } } ) ; return ret ; } return true ; }
public java.util.List < java.lang.String > digits ( ) { return com.google.common.collect.ImmutableList.of ( 0 , 4 ) . stream ( ) . map ( ( i ) -> i == 0 ? com.google.devtools.build.android.desugar.testdata.java8.ConcreteOverridesDefaultWithLambda.THREE : java.lang.String.valueOf ( i ) ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
private void assertFastPathUtf8DecodedEquals ( java.lang.String expected , java.lang.String hexString ) throws java.lang.Exception { java.lang.String actual = new java.lang.String ( libcore.java.lang.StringTest.hexStringtoBytes ( hexString ) ) ; assertEquals ( ( ( "Fast-path UTF-8 decoder decodes sequence [" + hexString ) + "] into unexpected String" ) , expected , actual ) ; java.nio.charset.CharsetDecoder decoder = java.nio.charset.StandardCharsets.UTF_8.newDecoder ( ) . onMalformedInput ( java.nio.charset.CodingErrorAction.REPLACE ) ; assertEquals ( ( ( ( "Fast-path UTF-8 decoder and UTF-8 CharsetDecoder has a different conversion" + " result for sequence [" ) + hexString ) + "]" ) , decoder.decode ( java.nio.ByteBuffer.wrap ( libcore.java.lang.StringTest.hexStringtoBytes ( hexString ) ) ) . toString ( ) , actual ) ; }
public com.android.jack.load.PackageLoader getLoaderForSubPackage ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading , @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JPackageLookupException { for ( com.android.sched.vfs.InputVElement sub : dir.list ( ) ) { if ( ( sub.isVDir ( ) ) && ( sub.getName ( ) . equals ( simpleName ) ) ) { return new com.android.jack.jayce.JaycePackageLoader ( inputJackLibrary , ( ( com.android.sched.vfs.InputVDir ) ( sub ) ) , lookup , defaultLoadLevel ) ; } } throw new com.android.jack.ir.ast.JPackageLookupException ( simpleName , loading ) ; }
public void test_ClassDescriptor ( ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectOutputStreamWithWriteDesc oos = new org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectOutputStreamWithWriteDesc ( baos ) ; oos.writeObject ( java.lang.String.class ) ; oos.close ( ) ; java.lang.Class < ? > cls = org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.TestClassForSerialization.class ; java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream ( baos.toByteArray ( ) ) ; org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectInputStreamWithReadDesc ois = new org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectInputStreamWithReadDesc ( bais , cls ) ; java.lang.Object obj = ois.readObject ( ) ; ois.close ( ) ; assertEquals ( cls , obj ) ; }
public void testInstallWithInvalidBundleVersionFile ( ) throws java.lang.Exception { java.io.File workingDir = new java.io.File ( testInstallDir , TzDataBundleInstaller.WORKING_DIR_NAME ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.ConfigBundle tzData = createTzDataBundleWithInvalidBundleVersion ( libcore.tzdata.update2.TzDataBundleInstallerTest.NEW_RULES_VERSION ) ; assertFalse ( installer.install ( tzData.getBundleBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public static java.lang.String formatRawPattern ( java.lang.String pattern , int min , int max , java.lang.CharSequence ... values ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String compiledPattern = android.icu.impl.SimpleFormatterImpl.compileToStringMinMaxArguments ( pattern , sb , min , max ) ; sb.setLength ( 0 ) ; return android.icu.impl.SimpleFormatterImpl.formatAndAppend ( compiledPattern , sb , null , values ) . toString ( ) ; }
boolean matchesDescription ( org.junit.runner.Description description ) { java.lang.String displayName = description.getDisplayName ( ) ; int endIndex = displayName.lastIndexOf ( "(" , ( ( displayName.length ( ) ) - 1 ) ) ; java.lang.String uniqueName = ( endIndex == ( - 1 ) ) ? displayName : displayName.substring ( 0 , endIndex ) ; return uniqueName.equals ( uniqueMethodId ) ; }
public java.nio.ShortBuffer put ( java.nio.ShortBuffer src ) { if ( isReadOnly ( ) ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( src == ( this ) ) { throw new java.lang.IllegalArgumentException ( "src == this" ) ; } if ( ( src.remaining ( ) ) > ( remaining ( ) ) ) { throw new java.nio.BufferOverflowException ( ) ; } short [ ] contents = new short [ src.remaining ( ) ] ; src.get ( contents ) ; put ( contents ) ; return this ; }
public boolean isVideoCallingEnabled ( java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "isVideoCallingEnabled" ) ) ) { return false ; } com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance ( mPhone.getContext ( ) , mPhone.getPhoneId ( ) ) ; return ( ( imsManager.isVtEnabledByPlatform ( ) ) && ( imsManager.isEnhanced4gLteModeSettingEnabledByUser ( ) ) ) && ( imsManager.isVtEnabledByUser ( ) ) ; }
com.android.sched.vfs.VPath getPathFromDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVFile file ) { java.lang.StringBuffer path = getPathFromDirInternal ( parent , ( ( com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir ) ( file.getParent ( ) ) ) ) . append ( file.getName ( ) ) ; return new com.android.sched.vfs.VPath ( path.toString ( ) , '/' ) ; }
public void filterNodes ( java.lang.String filterText ) { this . mFilterText = filterText ; com.android.hierarchyviewerlib.ui.util.DrawableViewNode tree = com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . getTree ( ) ; if ( tree != null ) { tree.viewNode.filter ( filterText ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . notifySelectionChanged ( ) ; } }
public void removeTransportModeTransforms ( java.io.FileDescriptor socket , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.dup ( socket ) ) { mService.removeTransportModeTransforms ( pfd , transform.getResourceId ( ) ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void setFocusedStack ( int stackId ) { if ( com.android.server.am.ActivityManagerService.DEBUG_FOCUS ) android.util.Slog.d ( com.android.server.am.ActivityManagerService.TAG , ( "setFocusedStack: stackId=" + stackId ) ) ; synchronized ( this ) { com.android.server.am.ActivityStack stack = mStackSupervisor.getStack ( stackId ) ; if ( stack != null ) { com.android.server.am.ActivityRecord r = stack.topRunningActivityLocked ( null ) ; if ( r != null ) { setFocusedActivityLocked ( r , "setFocusedStack" ) ; } } } }
public int getPriority ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "getPriority: " + ( device.getAddress ( ) ) ) ) ; } int priority = Settings.Global.getInt ( getContentResolver ( ) , Settings.Global.getBluetoothInputDevicePriorityKey ( device.getAddress ( ) ) , BluetoothProfile.PRIORITY_UNDEFINED ) ; return priority ; }
public boolean isIgnored ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { if ( ( issue == ( com.android.tools.lint.client.api.IssueRegistry.LINT_ERROR ) ) && ( new com.android.tools.lint.LintCliClient ( mFlags ) . isSuppressed ( IssueRegistry.LINT_ERROR ) ) ) { return true ; } return issue != ( com.android.tools.lint.client.api.IssueRegistry.LINT_ERROR ) ; }
public void checkValidity ( ) { if ( ! ( ( ( ( ( parent ) instanceof com.android.jack.ir.ast.JSwitchStatement ) || ( ( parent ) instanceof com.android.jack.ir.ast.cfg.JSwitchBlockElement ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JCaseStatement ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.cfg.JCaseBlockElement ) ) ) { super . checkValidity ( ) ; } }
public android.net.NetworkCapabilities getNetworkCapabilitiesSync ( ) { android.net.NetworkCapabilities value ; if ( isCallerOnDifferentThread ( ) ) { android.os.Message response = sendMessageSynchronously ( com.android.internal.telephony.dataconnection.DcAsyncChannel.REQ_GET_NETWORK_CAPABILITIES ) ; if ( ( response != null ) && ( ( response.what ) == ( com.android.internal.telephony.dataconnection.DcAsyncChannel.RSP_GET_NETWORK_CAPABILITIES ) ) ) { value = rspNetworkCapabilities ( response ) ; } else { value = null ; } } else { value = mDc.getNetworkCapabilities ( ) ; } return value ; }
void logCallback ( java.lang.String callback , com.android.server.wifi.scanner.WifiScanningServiceImpl.ClientInfo ci , int id , java.lang.String extra ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( callback ) . append ( ": " ) . append ( ( ci == null ? "ClientInfo[unknown]" : ci.toString ( ) ) ) . append ( ",Id=" ) . append ( id ) ; if ( extra != null ) { sb.append ( "," ) . append ( extra ) ; } localLog ( sb.toString ( ) ) ; }
public java.nio.FloatBuffer put ( java.nio.FloatBuffer src ) { if ( isReadOnly ( ) ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( src == ( this ) ) { throw new java.lang.IllegalArgumentException ( "src == this" ) ; } if ( ( src.remaining ( ) ) > ( remaining ( ) ) ) { throw new java.nio.BufferOverflowException ( ) ; } float [ ] contents = new float [ src.remaining ( ) ] ; src.get ( contents ) ; put ( contents ) ; return this ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField x ) { print ( com.android.jack.ir.ast.JModifier.getStringFieldModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printTypeName ( x.getEnclosingType ( ) ) ; print ( '.' ) ; printName ( x ) ; return false ; }
public void stopDtmf ( ) { if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , " stopDtmf()" ) ; android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , this . toString ( ) ) ; } if ( hasActiveFgCall ( ) ) getFgPhone ( ) . stopDtmf ( ) ; if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , "End stopDtmf()" ) ; android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , this . toString ( ) ) ; } }
public void setDataEnabled ( int subId , boolean enable ) { try { android.util.Log.d ( android.telephony.TelephonyManager.TAG , ( "setDataEnabled: enabled=" + enable ) ) ; com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) telephony.setUserDataEnabled ( subId , enable ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setUserDataEnabled" , e ) ; } }
public java.lang.String getVoiceMailNumberForSubscriber ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mContext , callingPackage , "getVoiceMailNumber" ) ) ) { return null ; } java.lang.String number = android.telephony.PhoneNumberUtils.extractNetworkPortion ( phone.getVoiceMailNumber ( ) ) ; if ( com.android.internal.telephony.PhoneSubInfoController.VDBG ) log ( ( "VM: getVoiceMailNUmber: " + number ) ) ; return number ; } else { loge ( ( "getVoiceMailNumber phone is null for Subscription:" + subId ) ) ; return null ; } }
private static com.android.ddmlib.RawImage createRawImage ( java.lang.String name ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream is = new java.io.ObjectInputStream ( com.android.chimpchat.ImageUtilsTest.class . getResourceAsStream ( name ) ) ; com.android.chimpchat.adb.image.CaptureRawAndConvertedImage.ChimpRawImage wrapper = ( ( com.android.chimpchat.adb.image.CaptureRawAndConvertedImage.ChimpRawImage ) ( is.readObject ( ) ) ) ; is.close ( ) ; return wrapper.toRawImage ( ) ; }
static com.google.devtools.common.options.OptionPriority nextOptionPriority ( com.google.devtools.common.options.OptionPriority priority ) { int lastElementPosition = ( priority.priorityIndices.size ( ) ) - 1 ; return new com.google.devtools.common.options.OptionPriority ( priority.priorityCategory , com.google.common.collect.ImmutableList.< java.lang.Integer > builder ( ) . addAll ( priority.priorityIndices.subList ( 0 , lastElementPosition ) ) . add ( ( ( priority.priorityIndices.get ( lastElementPosition ) ) + 1 ) ) . build ( ) ) ; }
public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach ( dalvik.system.EmulatedStackFrame stackFrame , int argumentIdx , int referencesOffset , int frameOffset ) { frame = stackFrame ; frameBuf = java.nio.ByteBuffer.wrap ( frame.stackFrame ) . order ( java.nio.ByteOrder.LITTLE_ENDIAN ) ; numArgs = frame.type.ptypes ( ) . length ; if ( frameOffset != 0 ) { frameBuf.position ( frameOffset ) ; } this . referencesOffset = referencesOffset ; this . argumentIdx = argumentIdx ; return this ; }
public boolean pageUp ( final boolean top ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.Boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return pageUp ( top ) ; } } ) ; return ret ; } return mAwContents.pageUp ( top ) ; }
public com.android.apksig.SigningCertificateLineage spawnDescendant ( com.android.apksig.SigningCertificateLineage.SignerConfig parent , com.android.apksig.SigningCertificateLineage.SignerConfig child ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.SignatureException , java.security.cert.CertificateEncodingException { if ( ( parent == null ) || ( child == null ) ) { throw new java.lang.NullPointerException ( "can't add new descendant to lineage with null inputs" ) ; } com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities = new com.android.apksig.SigningCertificateLineage.SignerCapabilities.Builder ( ) . build ( ) ; return spawnDescendant ( parent , child , signerCapabilities ) ; }
public void testHfIndicatorParser_testCorrectValue ( ) { int batteryLevel = 10 ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; mRemoteDevices.onHfIndicatorValueChanged ( com.android.bluetooth.btservice.RemoteDevicesTest.getHfIndicatorIntent ( mDevice1 , batteryLevel , HeadsetHalConstants.HF_INDICATOR_BATTERY_LEVEL_STATUS ) ) ; org.mockito.Mockito.verify ( mAdapterService ) . sendBroadcast ( mIntentArgument.capture ( ) , mStringArgument.capture ( ) ) ; com.android.bluetooth.btservice.RemoteDevicesTest.verfyBatteryLevelChangedIntent ( mDevice1 , batteryLevel , mIntentArgument ) ; org.junit.Assert.assertEquals ( AdapterService.BLUETOOTH_PERM , mStringArgument.getValue ( ) ) ; }
protected void configureShell ( org.eclipse.swt.widgets.Shell shell ) { super . configureShell ( shell ) ; shell.setText ( com.android.hierarchyviewer.HierarchyViewerApplication.APP_NAME ) ; com.android.ddmuilib.ImageLoader imageLoader = com.android.ddmuilib.ImageLoader.getLoader ( com.android.hierarchyviewerlib.HierarchyViewerDirector.class ) ; org.eclipse.swt.graphics.Image image = imageLoader.loadImage ( "sdk-hierarchyviewer-128.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; shell.setImage ( image ) ; }
public static java.lang.String getSyntheticSwitchMapInitializerName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType ) { java.lang.String enumName = com.android.jack.util.NamingTools.getValidName ( com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter ( ) . getName ( enumType ) ) ; java.lang.String methodName = com.android.jack.util.NamingTools.getNonSourceConflictingName ( ( ( "get" + enumName ) + ( com.android.jack.transformations.enums.OptimizationUtil.Suffix ) ) ) ; return methodName ; }
private void expectSuccessfulHwDisconnectedPnoScan ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.PnoSettings pnoSettings , com.android.server.wifi.WifiNative.PnoEventHandler eventHandler , com.android.server.wifi.ScanResults scanResults ) { expectHwDisconnectedPnoScanStart ( order , pnoSettings ) ; when ( mWifiNative.getScanResults ( ) ) . thenReturn ( scanResults.getScanDetailArrayList ( ) ) ; mWifiMonitor.sendMessage ( mWifiNative.getInterfaceName ( ) , WifiMonitor.PNO_SCAN_RESULTS_EVENT ) ; assertEquals ( "dispatch message after results event" , 1 , mLooper.dispatchAll ( ) ) ; order.verify ( eventHandler ) . onPnoNetworkFound ( scanResults.getRawScanResults ( ) ) ; }
public void stopRtt ( java.lang.String callId ) { try { android.telecom.Log.startSession ( "ICA.sRTT" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.stopRtt ( ) ; } else { android.telecom.Log.w ( this , "stopRtt(): call %s not found" , callId ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
java.lang.String formatNsnUsingPattern ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.NumberFormat formattingPattern , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat numberFormat ) { return formatNsnUsingPattern ( nationalNumber , formattingPattern , numberFormat , null ) ; }
public static < K , V > java.util.Map < K , java.util.Set < V > > asMap ( com.google.common.collect.SetMultimap < K , V > multimap ) { return ( ( java.util.Map < K , java.util.Set < V > > ) ( ( java.util.Map < K , ? > ) ( multimap.asMap ( ) ) ) ) ; }
public com.android.incallui.incall.protocol.PrimaryCallState build ( ) { com.android.incallui.incall.protocol.PrimaryCallState primaryCallState = autoBuild ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( primaryCallState.customLabel ( ) ) ) ) { com.android.dialer.common.Assert.checkArgument ( ( ( primaryCallState.state ( ) ) == ( com.android.incallui.call.state.DialerCallState.CALL_PENDING ) ) ) ; } return primaryCallState ; }
private void beginObserveCoreSettings ( ) { for ( java.lang.String setting : com.android.server.am.CoreSettingsObserver.sSecureSettingToTypeMap.keySet ( ) ) { android.net.Uri uri = Settings.Secure.getUriFor ( setting ) ; mActivityManagerService.mContext.getContentResolver ( ) . registerContentObserver ( uri , false , this ) ; } for ( java.lang.String setting : com.android.server.am.CoreSettingsObserver.sSystemSettingToTypeMap.keySet ( ) ) { android.net.Uri uri = Settings.System.getUriFor ( setting ) ; mActivityManagerService.mContext.getContentResolver ( ) . registerContentObserver ( uri , false , this ) ; } }
public void test_unblock_Exception ( ) throws java.lang.Exception { init ( false ) ; try { key.unblock ( sourceAddress ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } key.drop ( ) ; try { key.unblock ( sourceAddress ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public void cdmaSubscriptionSourceChanged ( int indicationType , int cdmaSource ) { mRil.processIndication ( indicationType ) ; int [ ] response = new int [ 1 ] ; response [ 0 ] = cdmaSource ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_CDMA_SUBSCRIPTION_SOURCE_CHANGED , response ) ; mRil.mCdmaSubscriptionChangedRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
private java.lang.String dumpEntry ( int offset ) { if ( com.android.tools.lint.checks.ApiLookup.DEBUG_SEARCH ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 200 ) ; for ( int i = offset ; i < ( mData.length ) ; i ++ ) { if ( ( mData [ i ] ) == 0 ) { break ; } char c = ( ( char ) ( com.google.common.primitives.UnsignedBytes.toInt ( mData [ i ] ) ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } else { return "<disabled>" ; } }
private static java.lang.ref.WeakReference < java.lang.ClassLoader > setUpLoadLibrary ( java.lang.reflect.Constructor constructor ) throws java.lang.Exception { java.lang.ClassLoader loader = ( ( java.lang.ClassLoader ) ( constructor.newInstance ( Main.DEX_FILE , Main.LIBRARY_SEARCH_PATH , java.lang.ClassLoader.getSystemClassLoader ( ) ) ) ) ; java.lang.Class intHolder = loader.loadClass ( "IntHolder" ) ; java.lang.reflect.Method loadLibrary = intHolder.getDeclaredMethod ( "loadLibrary" , java.lang.String.class ) ; loadLibrary.invoke ( intHolder , Main.nativeLibraryName ) ; Main.waitForCompilation ( intHolder ) ; return new java.lang.ref.WeakReference ( loader ) ; }
public boolean isFieldEmpty ( int field ) { return ( lengths [ field ] ) == ( com.ibm.icu.text.DateTimePatternGenerator.SkeletonFields.DEFAULT_LENGTH ) ; }
public static java.lang.String externalClassVersion ( int classVersion ) { switch ( classVersion ) { case ClassConstants.CLASS_VERSION_1_0 : return JavaConstants.CLASS_VERSION_1_0 ; case ClassConstants.CLASS_VERSION_1_2 : return JavaConstants.CLASS_VERSION_1_2 ; case ClassConstants.CLASS_VERSION_1_3 : return JavaConstants.CLASS_VERSION_1_3 ; case ClassConstants.CLASS_VERSION_1_4 : return JavaConstants.CLASS_VERSION_1_4 ; case ClassConstants.CLASS_VERSION_1_5 : return JavaConstants.CLASS_VERSION_1_5 ; case ClassConstants.CLASS_VERSION_1_6 : return JavaConstants.CLASS_VERSION_1_6 ; case ClassConstants.CLASS_VERSION_1_7 : return JavaConstants.CLASS_VERSION_1_7 ; case ClassConstants.CLASS_VERSION_1_8 : return JavaConstants.CLASS_VERSION_1_8 ; default : return null ; } }
public void write ( int b ) { if ( same ) { if ( ( ( myPageSize ) == ( address ) ) && ( ( address ) < ( myFileLength ) ) ) { base += address ; buffer = storage.getByteBuffer ( base , false ) . getCachedBuffer ( ) ; address = 0 ; } same = ( ( address ) < ( myFileLength ) ) && ( ( buffer.get ( ( ( address ) ++ ) ) ) == ( ( byte ) ( b ) ) ) ; } }
public void onCreate ( android.os.Bundle savedInstanceState ) { android.content.Context context = getActivity ( ) ; com.android.tv.ApplicationSingletons app = com.android.tv.TvApplication.getSingletons ( context ) ; mInputManager = app.getTvInputManagerHelper ( ) ; mChannelDataManager = app.getChannelDataManager ( ) ; mSetupUtils = com.android.tv.util.SetupUtils.getInstance ( context ) ; buildInputs ( ) ; mInputManager.addCallback ( mInputCallback ) ; mChannelDataManager.addListener ( mChannelDataManagerListener ) ; super . onCreate ( savedInstanceState ) ; mParentFragment = ( ( com.android.tv.onboarding.SetupSourcesFragment ) ( getParentFragment ( ) ) ) ; com.android.tv.tuner.TunerInputController.executeNetworkTunerDiscoveryAsyncTask ( getContext ( ) ) ; }
public boolean setCallTransitionFlag ( boolean flag ) { com.android.internal.telephony.ril_proto.RilCtrlCmds.CtrlSetCallTransitionFlag req = new com.android.internal.telephony.ril_proto.RilCtrlCmds.CtrlSetCallTransitionFlag ( ) ; req.setFlag ( flag ) ; if ( ! ( sendCtrlCommand ( RilCtrlCmds.CTRL_CMD_SET_CALL_TRANSITION_FLAG , 0 , 0 , req ) ) ) { android.telephony.Rlog.v ( com.android.internal.telephony.mockril.MockRilController.TAG , "send CTRL_CMD_SET_CALL_TRANSITION_FLAG request failed" ) ; return false ; } return true ; }
public void createOatDir ( java.lang.String oatDir , java.lang.String dexInstructionSet ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.createOatDir ( oatDir , dexInstructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw com.android.server.pm.Installer.InstallerException.from ( e ) ; } }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc expr ) { performCommonChecks ( expr ) ; otherOrMe ( expr ) ; }
int getCount ( ) { int count = 0 ; if ( ( contactsCursor ) != null ) { count += contactsCursor.getCount ( ) ; } if ( ( nearbyPlacesCursor ) != null ) { count += nearbyPlacesCursor.getCount ( ) ; } if ( ( corpDirectoryCursor ) != null ) { count += corpDirectoryCursor.getCount ( ) ; } return count + ( searchActions.size ( ) ) ; }
private void validateIsFloat64 ( ) { if ( ( mType.mElement.mType ) == ( Element.DataType.FLOAT_64 ) ) { return ; } throw new android.support.v8.renderscript.RSIllegalArgumentException ( ( "64 bit float source does not match allocation type " + ( mType.mElement.mType ) ) ) ; }
public java.util.Properties loadProperties ( @ com.android.annotations.NonNull java.io.File file ) { java.util.Properties props = new java.util.Properties ( ) ; java.io.FileInputStream fis = null ; try { fis = new java.io.FileInputStream ( file ) ; props.load ( fis ) ; } catch ( java.io.IOException ignore ) { } finally { com.google.common.io.Closeables.closeQuietly ( fis ) ; } return props ; }
static void constantIndexing2b ( int [ ] array ) { array [ 0 ] = 6 ; array [ 1 ] = 6 ; array [ 2 ] = 6 ; array [ 3 ] = 6 ; array [ ( - 1 ) ] = 1 ; }
public void testKeepPausedAfterVisitingHome ( ) { mDevice.pressKeyCode ( KeyEvent.KEYCODE_MEDIA_PAUSE ) ; mMenuHelper.assertWaitForMenu ( ) ; assertButtonHasFocus ( com.android.tv.tests.ui.PlayControlsRowViewTest.BUTTON_ID_PLAY_PAUSE ) ; mDevice.pressHome ( ) ; mDevice.waitForIdle ( ) ; mDevice.pressHome ( ) ; mDevice.waitForIdle ( ) ; mMenuHelper.assertWaitForMenu ( ) ; assertButtonHasFocus ( com.android.tv.tests.ui.PlayControlsRowViewTest.BUTTON_ID_PLAY_PAUSE ) ; }
static void killProcessGroup ( int uid , int pid ) { if ( ( com.android.server.am.ActivityManagerService.sKillHandler ) != null ) { com.android.server.am.ActivityManagerService.sKillHandler.sendMessage ( com.android.server.am.ActivityManagerService.sKillHandler.obtainMessage ( com.android.server.am.ActivityManagerService.KillHandler.KILL_PROCESS_GROUP_MSG , uid , pid ) ) ; } else { android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , "Asked to kill process group before system bringup!" ) ; java.lang.Process.killProcessGroup ( uid , pid ) ; } }
public void testFailure ( ) throws java.lang.Exception { org.conscrypt.CertPinManager manager = new org.conscrypt.CertPinManager ( ) { @ java.lang.Override public void checkChainPinning ( java.lang.String hostname , java.util.List < java.security.cert.X509Certificate > chain ) throws java.security.cert.CertificateException { throw new java.security.cert.CertificateException ( "pin failure" ) ; } } ; try { callCheckServerTrusted ( null , manager ) ; fail ( "Invalid chain was trusted" ) ; } catch ( java.security.cert.CertificateException expected ) { assertEquals ( "pin failure" , expected.getMessage ( ) ) ; } }
private static boolean isNavigatable ( com.intellij.ui.tabs.impl.JBTabsImpl tabs ) { final int selectedIndex = tabs.getVisibleInfos ( ) . indexOf ( tabs.getSelectedInfo ( ) ) ; return ( ( tabs.isNavigationVisible ( ) ) && ( selectedIndex >= 0 ) ) && ( tabs.myNavigationActionsEnabled ) ; }
public boolean isIdleForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "isIdleForSubscriber" ) ) ) { return false ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return ( phone.getState ( ) ) == ( PhoneConstants.State.IDLE ) ; } else { return false ; } }
public void updatePersistentConfiguration ( android.content.res.Configuration values ) { enforceCallingPermission ( android.Manifest.permission.CHANGE_CONFIGURATION , "updateConfiguration()" ) ; enforceWriteSettingsPermission ( "updateConfiguration()" ) ; if ( values == null ) { throw new java.lang.NullPointerException ( "Configuration must not be null" ) ; } int userId = android.os.UserHandle.getCallingUserId ( ) ; synchronized ( this ) { final long origId = android.os.Binder.clearCallingIdentity ( ) ; updateConfigurationLocked ( values , null , false , true , userId ) ; android.os.Binder.restoreCallingIdentity ( origId ) ; } }
protected com.android.utils.Pair < java.io.InputStream , org.apache.http.HttpResponse > openUrl ( @ com.android.annotations.NonNull java.lang.String url , boolean needsMarkResetSupport , @ com.android.annotations.NonNull com.android.sdklib.internal.repository.ITaskMonitor monitor , @ com.android.annotations.Nullable org.apache.http.Header [ ] headers ) throws com.android.sdklib.internal.repository.CanceledByUserException , java.io.IOException { return com.android.sdklib.internal.repository.UrlOpener.openUrl ( url , needsMarkResetSupport , monitor , headers ) ; }
public java.lang.String [ ] saw ( java.lang.String prefix , int uid ) { return list ( prefix , uid ) ; }
void makeWindowFreezingScreenIfNeededLocked ( com.android.server.wm.WindowState w ) { if ( ! ( okToDisplay ( ) ) ) { if ( com.android.server.wm.WindowManagerService.DEBUG_ORIENTATION ) android.util.Slog.v ( com.android.server.wm.WindowManagerService.TAG , ( "Changing surface while display frozen: " + w ) ) ; w.mOrientationChanging = true ; mInnerFields.mOrientationChangeComplete = false ; if ( ! ( mWindowsFreezingScreen ) ) { mWindowsFreezingScreen = true ; mH.removeMessages ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT ) ; mH.sendEmptyMessageDelayed ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT , com.android.server.wm.WindowManagerService.WINDOW_FREEZE_TIMEOUT_DURATION ) ; } } }
public int getVoiceMessageCount ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; int voicemailCount = ( r != null ) ? r.getVoiceMessageCount ( ) : 0 ; if ( voicemailCount == 0 ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; voicemailCount = sp.getInt ( com.android.internal.telephony.cdma.CDMAPhone.VM_COUNT_CDMA , 0 ) ; } return voicemailCount ; }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , int [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
public java.lang.String getVersionName ( ) { java.lang.String versionName = mMergedFlavor.getVersionName ( ) ; java.lang.String versionSuffix = mBuildType.getVersionNameSuffix ( ) ; if ( ( versionSuffix != null ) && ( ! ( versionSuffix.isEmpty ( ) ) ) ) { if ( versionName == null ) { if ( ! ( mType.isForTesting ( ) ) ) { versionName = getVersionNameFromManifest ( ) ; } else { versionName = "" ; } } versionName = versionName + versionSuffix ; } return versionName ; }
public int getSupportedFeatureSet ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getSupportedFeatureSet ( ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getSupportedFeatureSetNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "Failing getSupportedFeatureset because HAL isn't started" ) ; return 0 ; } } } }
public static void test_String_charAt ( ) { java.lang.String testStr = "Now is the time to test some stuff" ; junit.framework.Assert.assertEquals ( ( ( testStr.length ( ) ) - 1 ) , 33 ) ; junit.framework.Assert.assertEquals ( 'f' , testStr.charAt ( 33 ) ) ; Main.test_String_charAt ( testStr , 'N' , 'o' , ' ' , 'f' ) ; Main.test_String_charAt ( testStr.substring ( 3 , 15 ) , ' ' , 'i' , 'm' , 'e' ) ; }
com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata get ( int countryCallingCode ) { return countryCallingCodeToMetadata.get ( countryCallingCode ) ; }
public com.android.dx.rop.code.RegisterSpecList getSources ( ) { if ( ( sources ) != null ) { return sources ; } if ( ( operands.size ( ) ) == 0 ) { return com.android.dx.rop.code.RegisterSpecList.EMPTY ; } int szSources = operands.size ( ) ; sources = new com.android.dx.rop.code.RegisterSpecList ( szSources ) ; for ( int i = 0 ; i < szSources ; i ++ ) { com.android.dx.ssa.PhiInsn.Operand o = operands.get ( i ) ; sources.set ( i , o.regSpec ) ; } sources.setImmutable ( ) ; return sources ; }
public boolean equals ( java.lang.Object other ) { if ( ( this ) == other ) return true ; if ( ! ( other instanceof sun.security.x509.KeyIdentifier ) ) return false ; byte [ ] otherString = ( ( sun.security.x509.KeyIdentifier ) ( other ) ) . octetString ; return java.util.Arrays.equals ( octetString , otherString ) ; }
public final void testLocalSdkTest_getPkgInfo_Tools ( ) { assertNull ( mLS.getPkgInfo ( PkgType.PKG_TOOLS ) ) ; mLS.clearLocalPkg ( PkgType.PKG_ALL ) ; mFOp.recordExistingFolder ( "/sdk/tools" ) ; mFOp.recordExistingFile ( "/sdk/tools/source.properties" , ( "Pkg.License=Terms and Conditions\n" + ( ( ( ( ( "Archive.Os=WINDOWS\n" + "Pkg.Revision=22.3.4\n" ) + "Platform.MinPlatformToolsRev=18\n" ) + "Pkg.LicenseRef=android-sdk-license\n" ) + "Archive.Arch=ANY\n" ) + "Pkg.SourceUrl=https\\://dl-ssl.google.com/android/repository/repository-8.xml" ) ) ) ; mFOp.recordExistingFile ( ( "/sdk/tools/" + ( com.android.SdkConstants.androidCmdName ( ) ) ) , "placeholder" ) ; mFOp.recordExistingFile ( ( "/sdk/tools/" + ( com.android.SdkConstants.FN_EMULATOR ) ) , "placeholder" ) ; com.android.sdklib.repository.local.LocalPkgInfo pi = mLS.getPkgInfo ( PkgType.PKG_TOOLS ) ; assertNotNull ( pi ) ; assertTrue ( ( pi instanceof com.android.sdklib.repository.local.LocalToolPkgInfo ) ) ; assertEquals ( new java.io.File ( "/sdk/tools" ) , pi.getLocalDir ( ) ) ; assertSame ( mLS , pi.getLocalSdk ( ) ) ; assertEquals ( null , pi.getLoadError ( ) ) ; assertEquals ( new com.android.sdklib.repository.FullRevision ( 22 , 3 , 4 ) , pi.getDesc ( ) . getFullRevision ( ) ) ; assertEquals ( "<LocalToolPkgInfo:PkgDesc FullRev=22.3.4 MinPlatToolsRev=18.0.0>" , pi.toString ( ) ) ; java.lang.Package pkg = pi.getPackage ( ) ; assertNotNull ( pkg ) ; assertEquals ( new com.android.sdklib.repository.FullRevision ( 22 , 3 , 4 ) , pkg.getRevision ( ) ) ; assertEquals ( "Android SDK Tools, revision 22.3.4" , pkg.getShortDescription ( ) ) ; assertTrue ( pkg.isLocal ( ) ) ; com.android.sdklib.internal.repository.archives.Archive a = pkg.getArchives ( ) [ 0 ] ; assertTrue ( a.isLocal ( ) ) ; assertEquals ( "/sdk/tools" , mFOp.getAgnosticAbsPath ( a.getLocalOsPath ( ) ) ) ; }
public com.android.sdklib.BuildToolInfo getBuildTools ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Project project ) { com.android.sdklib.repositoryv2.AndroidSdkHandler sdk = getSdk ( ) ; if ( sdk != null ) { com.android.sdklib.IAndroidTarget compileTarget = getCompileTarget ( project ) ; if ( compileTarget != null ) { return compileTarget.getBuildToolInfo ( ) ; } return sdk.getLatestBuildTool ( getRepositoryLogger ( ) ) ; } return null ; }
public void testAddAll2_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.addAll ( ( ( list.size ( ) ) + 1 ) , new java.util.LinkedList ( ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
private void addProjectInfo ( java.util.Map < java.lang.String , java.lang.Object > parameters ) { parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_PACKAGE_NAME , mValues.packageName ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_APP_TITLE , mValues.applicationName ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API , mValues.minSdk ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API_LEVEL , mValues.minSdkLevel ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_TARGET_API , 15 ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_COPY_ICONS , ( ! ( mValues.createIcon ) ) ) ; }
private void onInitiateDataPathResponseSuccessLocal ( android.os.Message command , int ndpId ) { if ( com.android.server.wifi.aware.WifiAwareStateManager.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareStateManager.TAG , ( ( ( "onInitiateDataPathResponseSuccessLocal: command=" + command ) + ", ndpId=" ) + ndpId ) ) ; } mDataPathMgr.onDataPathInitiateSuccess ( ( ( android.net.wifi.aware.WifiAwareNetworkSpecifier ) ( command.obj ) ) , ndpId ) ; }
public java.lang.String getName ( ) { java.lang.String name = super . getName ( ) ; if ( name.equals ( com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_FRAGMENT ) ) { mFragmentLayout = com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutMetadata.getProperty ( this , com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutMetadata.KEY_FRAGMENT_LAYOUT ) ; if ( ( mFragmentLayout ) != null ) { return com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_INCLUDE ; } } else { mFragmentLayout = null ; } return name ; }
public E poll ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException { long nanos = unit.toNanos ( timeout ) ; final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock.lockInterruptibly ( ) ; E result ; try { while ( ( ( result = dequeue ( ) ) == null ) && ( nanos > 0 ) ) nanos = notEmpty.awaitNanos ( nanos ) ; } finally { lock.unlock ( ) ; } return result ; }
public void executeRequestClosesConnection_noResponseBody ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockConnection.getResponseCode ( ) ) . thenReturn ( java.net.HttpURLConnection.HTTP_NO_CONTENT ) ; mHurlStack.executeRequest ( new com.android.volley.mock.TestRequest.Get ( ) , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; org.mockito.Mockito.verify ( mMockConnection ) . disconnect ( ) ; }
public void test_checkedSetSerializationCompatability ( ) throws java.lang.Exception { java.util.Set < java.lang.String > c = new java.util.HashSet < java.lang.String > ( ) ; assertFalse ( ( c instanceof java.util.SortedSet ) ) ; c = java.util.Collections.checkedSet ( c , java.lang.String.class ) ; tests.util.SerializationTester.assertCompabilityEquals ( c , "serialization/tests/api/java/util/Collections_CheckedSet.golden.ser" ) ; }
protected org.bouncycastle.math.ec.ECPoint createRawPoint ( org.bouncycastle.math.ec.ECFieldElement x , org.bouncycastle.math.ec.ECFieldElement y , org.bouncycastle.math.ec.ECFieldElement [ ] zs , boolean withCompression ) { return new org.bouncycastle.math.ec.ECPoint.Fp ( this , x , y , zs , withCompression ) ; }
private java.lang.String getRealCompilerFilter ( android.content.pm.ApplicationInfo info , java.lang.String targetCompilerFilter , boolean isUsedByOtherApps ) { int flags = info.flags ; boolean vmSafeMode = ( flags & ( android.content.pm.ApplicationInfo.FLAG_VM_SAFE_MODE ) ) != 0 ; if ( vmSafeMode ) { return dalvik.system.DexFile.getSafeModeCompilerFilter ( targetCompilerFilter ) ; } if ( ( dalvik.system.DexFile.isProfileGuidedCompilerFilter ( targetCompilerFilter ) ) && isUsedByOtherApps ) { return dalvik.system.DexFile.getNonProfileGuidedCompilerFilter ( targetCompilerFilter ) ; } return targetCompilerFilter ; }
public ActivityManager.TaskThumbnail getTaskThumbnail ( int id ) { synchronized ( this ) { enforceCallingPermission ( android.Manifest.permission.READ_FRAME_BUFFER , "getTaskThumbnail()" ) ; final com.android.server.am.TaskRecord tr = mStackSupervisor.anyTaskForIdLocked ( id , ( ! ( com.android.server.am.ActivityStackSupervisor.RESTORE_FROM_RECENTS ) ) , StackId.INVALID_STACK_ID ) ; if ( tr != null ) { return tr.getTaskThumbnailLocked ( ) ; } } return null ; }
public void testGetRestrictBackgroundStatus_disabled ( ) throws java.lang.Exception { if ( ! ( isSupported ( ) ) ) return ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED ) ; addRestrictBackgroundWhitelist ( mUid ) ; assertRestrictBackgroundChangedReceived ( 0 ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED ) ; assertsForegroundAlwaysHasNetworkAccess ( ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED ) ; }
public void registerProductFlavorSourceProvider ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.CoreProductFlavor productFlavor , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider ) { if ( ( extraArtifactMap.get ( name ) ) == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "Artifact with name %1$s is not yet registered. Use registerArtifactType()" , name ) ) ; } extraProductFlavorSourceProviders.put ( productFlavor.getName ( ) , new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer ( name , sourceProvider ) ) ; }
public java.lang.Boolean bluetoothHspConnect ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "device" , description = "Name or MAC address of a bluetooth device." ) java.lang.String device ) throws java.lang.Exception { if ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHspFacade.sHspProfile ) == null ) return false ; android.bluetooth.BluetoothDevice mDevice = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice ( mBluetoothAdapter.getBondedDevices ( ) , device ) ; com.googlecode.android_scripting.Log.d ( ( "Connecting to device " + ( mDevice.getAliasName ( ) ) ) ) ; return hspConnect ( mDevice ) ; }
public void testDoNothing ( ) { com.android.manifmerger.Actions actions = mActionRecorderBuilder.build ( ) ; actions.log ( mLoggerMock ) ; org.mockito.Mockito.verify ( mLoggerMock ) . verbose ( Actions.HEADER ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mLoggerMock ) ; assertTrue ( actions.getNodeKeys ( ) . isEmpty ( ) ) ; }
private static java.lang.String getCurrentCountryIso ( android.content.Context context , java.util.Locale locale ) { java.lang.String countryIso ; android.location.CountryDetector detector = ( ( android.location.CountryDetector ) ( context.getSystemService ( Context.COUNTRY_DETECTOR ) ) ) ; if ( detector != null ) { countryIso = detector.detectCountry ( ) . getCountryIso ( ) ; } else { countryIso = locale.getCountry ( ) ; android.telephony.Rlog.w ( com.android.internal.telephony.CallerInfo.TAG , ( "No CountryDetector; falling back to countryIso based on locale: " + countryIso ) ) ; } return countryIso ; }
public void testGetTimeZoneRegionAll ( ) { for ( java.lang.String id : java.util.TimeZone.getAvailableIDs ( ) ) { java.util.TimeZone zone = java.util.TimeZone.getTimeZone ( id ) ; assertNotNull ( id , zone ) ; java.lang.String region = com.android.ide.common.resources.LocaleManager.getTimeZoneRegionAlpha2 ( zone ) ; assertNotNull ( region , zone.getID ( ) ) ; region = com.android.ide.common.resources.LocaleManager.getTimeZoneRegionAlpha3 ( zone ) ; assertNotNull ( region , zone.getID ( ) ) ; } }
private com.android.jack.ir.ast.JExpressionStatement makeResetCall ( int lockIndex , com.android.jack.ir.sourceinfo.SourceInfo info ) { assert ( ( ( lockClass [ lockIndex ] ) != null ) && ( ( requestClass [ lockIndex ] ) != null ) ) && ( ( requestMethodId [ lockIndex ] ) != null ) ; return new com.android.jack.ir.ast.JExpressionStatement ( info , new com.android.jack.ir.ast.JMethodCall ( info , null , resetClass [ lockIndex ] , resetMethodId [ lockIndex ] , false ) ) ; }
public java.math.BigInteger getSerialNumber ( ) { byte [ ] signAndMagnitude = org.conscrypt.NativeCrypto.X509_get_serialNumber ( mContext ) ; if ( ( ( signAndMagnitude [ 0 ] ) & 255 ) == 255 ) { byte [ ] magnitude = new byte [ ( signAndMagnitude.length ) - 1 ] ; java.lang.System.arraycopy ( signAndMagnitude , 1 , magnitude , 0 , ( ( signAndMagnitude.length ) - 1 ) ) ; return new java.math.BigInteger ( ( - 1 ) , magnitude ) ; } else { return new java.math.BigInteger ( signAndMagnitude ) ; } }
public static libcore.Lines readLines ( java.nio.file.Path path ) throws java.io.IOException { try ( java.io.Reader reader = new java.io.FileReader ( path.toFile ( ) ) ) { return libcore.Util.readLines ( reader ) ; } }
public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JReferenceType type , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef ( com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( type ) , new com.android.jack.dx.rop.cst.CstString ( method.getName ( ) ) , com.android.jack.backend.dex.rop.RopHelper.getPrototype ( method.getMethodId ( ) ) ) ; return methodRef ; }
public void tearDown ( ) throws java.lang.Exception { mTelecomSystem.getCallsManager ( ) . getCallAudioManager ( ) . getCallAudioRouteStateMachine ( ) . quitNow ( ) ; mTelecomSystem.getCallsManager ( ) . getCallAudioManager ( ) . getCallAudioModeStateMachine ( ) . quitNow ( ) ; mTelecomSystem = null ; super . tearDown ( ) ; }
public static java.text.DateFormat getTimeFormat ( android.content.Context context ) { libcore.icu.LocaleData d = libcore.icu.LocaleData.get ( context.getResources ( ) . getConfiguration ( ) . locale ) ; boolean is24 = android.text.format.DateFormat.is24HourFormat ( context ) ; return new java.text.SimpleDateFormat ( ( is24 ? d.timeFormat24 : d.timeFormat12 ) ) ; }
public com.sun.tools.doclets.internal.toolkit.Content getTagletOutput ( com.sun.javadoc.Tag tag , com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter writer ) throws java.lang.IllegalArgumentException { java.lang.String encodedText = toString ( tag ) ; if ( encodedText == null ) return null ; com.sun.tools.doclets.internal.toolkit.Content out = writer.getOutputInstance ( ) ; out.addContent ( new com.sun.tools.doclets.formats.html.markup.RawHtml ( encodedText ) ) ; return out ; }
public static java.lang.String getDebugKeystore ( ) throws com.android.sdklib.build.ApkCreationException { try { return com.android.sdklib.internal.build.DebugKeyProvider.getDefaultKeyStoreOsPath ( ) ; } catch ( java.lang.Exception e ) { throw new com.android.sdklib.build.ApkCreationException ( e , e.getMessage ( ) ) ; } }
public java.lang.String replace ( char oldChar , char newChar ) { java.lang.String replaced = this ; if ( oldChar != newChar ) { final int len = length ( ) ; for ( int i = 0 ; i < len ; ++ i ) { if ( ( charAt ( i ) ) == oldChar ) { if ( replaced == ( this ) ) { replaced = java.lang.StringFactory.newStringFromString ( this ) ; } replaced.setCharAt ( i , newChar ) ; } } } return replaced ; }
public void addTcpStatsResult ( int sent , int lost , int rttUs , int sentAckDiffMs ) { if ( ( pendingSummary ) == null ) { pendingSummary = new android.net.metrics.NetworkMetrics.Summary ( netId , transports ) ; } pendingSummary.tcpLossRate.count ( lost , sent ) ; pendingSummary.roundTripTimeUs.count ( rttUs ) ; pendingSummary.sentAckTimeDiffenceMs.count ( sentAckDiffMs ) ; }
public static android.content.Intent getIntent ( android.content.Context context ) { android.content.Intent intent = new android.content.Intent ( ) ; intent.setComponent ( new android.content.ComponentName ( context , com.android.dialer.app.MainComponent.getComponentName ( ) ) ) ; intent.setAction ( Intent.ACTION_VIEW ) ; intent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; return intent ; }
public void defaultWriteObject ( ) throws java.io.IOException { java.io.SerialCallbackContext ctx = curContext ; if ( ctx == null ) { throw new java.io.NotActiveException ( "not in call to writeObject" ) ; } java.lang.Object curObj = ctx.getObj ( ) ; java.io.ObjectStreamClass curDesc = ctx.getDesc ( ) ; bout.setBlockDataMode ( false ) ; defaultWriteFields ( curObj , curDesc ) ; bout.setBlockDataMode ( true ) ; }
protected java.util.Properties createExpectedProps ( ) { java.util.Properties props = super . createExpectedProps ( ) ; props.setProperty ( PkgProps.VERSION_API_LEVEL , "5" ) ; props.setProperty ( PkgProps.SYS_IMG_ABI , "armeabi-v7a" ) ; props.setProperty ( PkgProps.ADDON_VENDOR_ID , "vendor_id" ) ; props.setProperty ( PkgProps.ADDON_VENDOR_DISPLAY , "Vendor Name" ) ; props.setProperty ( PkgProps.SYS_IMG_TAG_ID , "addon_name" ) ; props.setProperty ( PkgProps.SYS_IMG_TAG_DISPLAY , "Add-on Name" ) ; return props ; }
private int pendingInboundCleartextBytes ( javax.net.ssl.SSLEngineResult.HandshakeStatus handshakeStatus ) { return handshakeStatus == ( javax.net.ssl.SSLEngineResult.HandshakeStatus.FINISHED ) ? pendingInboundCleartextBytes ( ) : 0 ; }
public java.util.List < android.telephony.ClientRequestStats > getClientRequestStats ( int subId ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getClientRequestStats ( getOpPackageName ( ) , subId ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#getClientRequestStats" , e ) ; } return null ; }
protected org.eclipse.core.runtime.IStatus run ( org.eclipse.core.runtime.IProgressMonitor monitor ) { try { com.android.ide.eclipse.adt.internal.project.ExportHelper.exportReleaseApk ( project , new java.io.File ( saveLocation ) , null , null , monitor ) ; com.android.ide.eclipse.adt.AdtPlugin.displayWarning ( "Android IDE Plug-in" , java.lang.String.format ( ( "An unsigned package of the application was saved at\n%1$s\n\n" + ( ( ( ( "Before publishing the application you will need to:\n" + "- Sign the application with your release key,\n" ) + "- run zipalign on the signed package. ZipAlign is located in <SDK>/tools/\n\n" ) + "Aligning applications allows Android to use application resources\n" ) + "more efficiently." ) ) , saveLocation ) ) ; return org.eclipse.core.runtime.Status.OK_STATUS ; } catch ( org.eclipse.core.runtime.CoreException e ) { return e.getStatus ( ) ; } }
public static com.android.manifmerger.XmlDocument load ( com.android.manifmerger.KeyResolver < java.lang.String > selectors , java.lang.String displayName , java.io.File xmlFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( xmlFile ) ) ; com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( inputStream ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , new com.android.manifmerger.XmlLoader.FileSourceLocation ( displayName , xmlFile ) , selectors , domDocument.getDocumentElement ( ) ) : null ; }
public void enter ( ) { super . enter ( ) ; if ( ( mLastError ) != ( android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ) { transitionTo ( mInitialState ) ; } if ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG ) android.util.Log.d ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Tethered " + ( mIfaceName ) ) ) ; sendInterfaceState ( IControlsTethering.STATE_TETHERED ) ; }
private com.android.tools.lint.checks.PermissionFinder.Result getPermissionRequirement ( @ com.android.annotations.NonNull com.intellij.psi.PsiField field , @ com.android.annotations.NonNull com.intellij.psi.PsiAnnotation annotation ) { com.android.tools.lint.checks.PermissionRequirement requirement = com.android.tools.lint.checks.PermissionRequirement.create ( mContext , annotation ) ; com.intellij.psi.PsiClass containingClass = field.getContainingClass ( ) ; java.lang.String name = ( containingClass != null ) ? ( ( containingClass.getName ( ) ) + "." ) + ( field.getName ( ) ) : field.getName ( ) ; assert name != null ; return new com.android.tools.lint.checks.PermissionFinder.Result ( mOperation , requirement , name ) ; }
public final com.android.server.am.WaitResult startActivityAndWait ( android.app.IApplicationThread caller , android.content.Intent intent , java.lang.String resolvedType , android.net.Uri [ ] grantedUriPermissions , int grantedMode , android.os.IBinder resultTo , java.lang.String resultWho , int requestCode , boolean onlyIfNeeded , boolean debug ) { com.android.server.am.WaitResult res = new com.android.server.am.WaitResult ( ) ; startActivityMayWait ( caller , intent , resolvedType , grantedUriPermissions , grantedMode , resultTo , resultWho , requestCode , onlyIfNeeded , debug , res , null ) ; return res ; }
public void test_getComment_unset ( ) throws java.lang.Exception { java.io.File file = libcore.java.util.zip.ZipFileTest.createTemporaryZipFile ( ) ; java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipFileTest.createZipOutputStream ( file ) ; java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry ( "test entry" ) ; ze.setComment ( "per-entry comment" ) ; out.putNextEntry ( ze ) ; out.close ( ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( file ) ; assertEquals ( null , zipFile.getComment ( ) ) ; }
public void test3_findFirst2 ( ) { for ( int i = 0 ; i < 32 ; i ++ ) { assertEquals ( com.android.dx.util.BitsTest.label ( i ) , ( - 1 ) , com.android.dx.util.Bits.findFirst ( ( ( 1 << i ) > > > 1 ) , i ) ) ; } }
public void copyFromUnchecked ( java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFromUnchecked" ) ; copyFromUnchecked ( array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public final byte [ ] doFinal ( byte [ ] input ) throws javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } return getSpi ( ) . engineDoFinal ( input , 0 , input.length ) ; }
public V get ( @ javax.annotation.Nullable java.lang.Object rowKey , @ javax.annotation.Nullable java.lang.Object columnKey ) { java.lang.Integer rowIndex = rowKeyToIndex.get ( rowKey ) ; java.lang.Integer columnIndex = columnKeyToIndex.get ( columnKey ) ; return ( rowIndex == null ) || ( columnIndex == null ) ? null : at ( rowIndex , columnIndex ) ; }
public void delete ( java.lang.String name ) throws java.io.IOException { if ( name.equalsIgnoreCase ( sun.security.x509.CRLDistributionPointsExtension.POINTS ) ) { distributionPoints = java.util.Collections.< sun.security.x509.DistributionPoint > emptyList ( ) ; } else { throw new java.io.IOException ( ( ( ( ( ( "Attribute name [" + name ) + "] not recognized by " ) + "CertAttrSet:" ) + ( extensionName ) ) + '.' ) ) ; } encodeThis ( ) ; }
public final int startActivityWithConfig ( android.app.IApplicationThread caller , android.content.Intent intent , java.lang.String resolvedType , android.net.Uri [ ] grantedUriPermissions , int grantedMode , android.os.IBinder resultTo , java.lang.String resultWho , int requestCode , boolean onlyIfNeeded , boolean debug , android.content.res.Configuration config ) { return mMainStack.startActivityMayWait ( caller , intent , resolvedType , grantedUriPermissions , grantedMode , resultTo , resultWho , requestCode , onlyIfNeeded , debug , null , config ) ; }
public int unloadPlugIns ( ) { int result = android.drm.DrmManagerClient.ERROR_UNKNOWN ; if ( ( android.drm.DrmManagerClient.STATE_INITIALIZED ) == ( getState ( ) ) ) { if ( null != ( mEventHandler ) ) { android.os.Message msg = mEventHandler.obtainMessage ( android.drm.DrmManagerClient.ACTION_FINALIZE ) ; result = ( mEventHandler.sendMessage ( msg ) ) ? android.drm.DrmManagerClient.ERROR_NONE : result ; } } else { result = android.drm.DrmManagerClient.ERROR_NONE ; } return result ; }
public void waitForEvents ( long duration , java.util.concurrent.TimeUnit timeUnit ) { if ( ( mTestSensorEventListener ) == null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "No listener registered, returning." ) ; return ; } mTestSensorEventListener.waitForEvents ( duration , timeUnit ) ; }
void updateIndex ( int offset , com.android.dx.merge.IndexMap indexMap , int oldIndex , int newIndex ) { if ( ( newIndex < 0 ) || ( newIndex > 65535 ) ) { throw new com.android.dex.DexIndexOverflowException ( ( "proto ID not in [0, 0xffff]: " + newIndex ) ) ; } indexMap.protoIds [ oldIndex ] = ( ( short ) ( newIndex ) ) ; }
public static void showDialog ( com.android.internal.telephony.Phone phone ) { if ( com.android.phone.IccNetworkDepersonalizationPanel.sShowingDialog ) { android.util.Log.i ( com.android.phone.TAG , "[IccNetworkDepersonalizationPanel] - showDialog; skipped already shown." ) ; return ; } android.util.Log.i ( com.android.phone.TAG , "[IccNetworkDepersonalizationPanel] - showDialog; showing dialog." ) ; com.android.phone.IccNetworkDepersonalizationPanel.sShowingDialog = true ; com.android.phone.IccNetworkDepersonalizationPanel ndpPanel = new com.android.phone.IccNetworkDepersonalizationPanel ( com.android.phone.PhoneGlobals.getInstance ( ) , phone ) ; ndpPanel.show ( ) ; }
public void createControl ( org.eclipse.swt.widgets.Composite parent ) { mImageCanvas = new com.android.ide.eclipse.gltrace.widgets.ImageCanvas ( parent ) ; mImageCanvas.setFitToCanvas ( false ) ; mFitToCanvasAction = new com.android.ide.eclipse.gltrace.views.FitToCanvasAction ( false , mImageCanvas ) ; mSaveImageAction = new com.android.ide.eclipse.gltrace.views.SaveImageAction ( mImageCanvas ) ; mToolBarItems = java.util.Arrays.asList ( ( ( org.eclipse.jface.action.IContributionItem ) ( new org.eclipse.jface.action.ActionContributionItem ( mFitToCanvasAction ) ) ) , ( ( org.eclipse.jface.action.IContributionItem ) ( new org.eclipse.jface.action.ActionContributionItem ( mSaveImageAction ) ) ) ) ; }
public void stopTone ( ) { if ( ( mToneGenerator ) != null ) { mToneGenerator.stopTone ( ) ; } }
public boolean replyReport ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( ( ( "replyReport(): device=" + device ) + " type=" ) + type ) + " id=" ) + id ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.replyReport ( device , type , id , data ) ; }
protected void postInstall ( android.content.Context context , android.content.Intent intent ) { try { unpackBundle ( ) ; applyUpdate ( ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Slog.e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , "SELinux policy update malformed: " , e ) ; } catch ( java.io.IOException e ) { android.util.Slog.e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , "Could not update selinux policy: " , e ) ; } catch ( android.system.ErrnoException e ) { android.util.Slog.e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , "Could not update selinux policy: " , e ) ; } }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass ( ) ) != ( o.getClass ( ) ) ) ) return false ; com.google.gct.testing.dimension.CloudTestingTypeGroup that = ( ( com.google.gct.testing.dimension.CloudTestingTypeGroup ) ( o ) ) ; if ( ! ( name.equals ( that.name ) ) ) return false ; return true ; }
private void doConnect ( android.net.wifi.WifiManager wifiManager ) { int networkId = wifiManager.addNetwork ( mCurrentWifiConfiguration ) ; if ( networkId < 0 ) { showFailToast ( ) ; } else { wifiManager.connect ( networkId , new android.net.wifi.WifiManager.ActionListener ( ) { @ java.lang.Override public void onSuccess ( ) { android.widget.Toast.makeText ( com.android.nfc.ConfirmConnectToWifiNetworkActivity.this , R.string.status_wifi_connected , Toast.LENGTH_SHORT ) . show ( ) ; } @ java.lang.Override public void onFailure ( int reason ) { showFailToast ( ) ; } } ) ; } finish ( ) ; }
void finish ( ) { if ( ( mCaller ) != null ) { mCaller.mInclusiveCpuTime += mInclusiveCpuTime ; mCaller.mInclusiveRealTime += mInclusiveRealTime ; } mMethodData.addElapsedExclusive ( mExclusiveCpuTime , mExclusiveRealTime ) ; if ( ! ( mIsRecursive ) ) { mMethodData.addTopExclusive ( mExclusiveCpuTime , mExclusiveRealTime ) ; } mMethodData.addElapsedInclusive ( mInclusiveCpuTime , mInclusiveRealTime , mIsRecursive , mCaller ) ; }
public void setSimPowerStateForSlot ( int slotIndex , boolean powerUp ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { telephony.setSimPowerStateForSlot ( slotIndex , powerUp ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setSimPowerStateForSlot" , e ) ; } catch ( java.lang.SecurityException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Permission error calling ITelephony#setSimPowerStateForSlot" , e ) ; } }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ! ( o instanceof android.opengl.EGLSurface ) ) return false ; android.opengl.EGLSurface that = ( ( android.opengl.EGLSurface ) ( o ) ) ; return ( getNativeHandle ( ) ) == ( that.getNativeHandle ( ) ) ; }
public void dispose ( ) { synchronized ( mLock ) { if ( com.android.internal.telephony.uicc.UiccCard.DBG ) log ( "Disposing card" ) ; if ( ( mCatService ) != null ) mCatService.dispose ( ) ; for ( com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications ) { if ( app != null ) { app.dispose ( ) ; } } mCatService = null ; mUiccApplications = null ; mCarrierPrivilegeRules = null ; } }
synchronized void nAllocationData3D ( int id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes , dt.mID ) ; }
public void run ( ) { if ( ! ( mCanvas.isDisposed ( ) ) ) { mCanvas.redraw ( ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.OutlinePage outlinePage = mCanvas.getOutlinePage ( ) ; if ( outlinePage != null ) { outlinePage.refreshIcons ( ) ; } } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mTelephonyManager = ( ( android.telephony.TelephonyManager ) ( getContext ( ) . getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; android.telephony.cts.TelephonyManagerTest.mCm = ( ( android.net.ConnectivityManager ) ( getContext ( ) . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; }
public final java.security.Key unwrap ( byte [ ] wrappedKey , java.lang.String wrappedKeyAlgorithm , int wrappedKeyType ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException { if ( ( mode ) != ( javax.crypto.Cipher.UNWRAP_MODE ) ) { throw new java.lang.IllegalStateException ( ) ; } return getSpi ( ) . engineUnwrap ( wrappedKey , wrappedKeyAlgorithm , wrappedKeyType ) ; }
public void testFailures ( ) { assertEquals ( false , lq.checkAndSet ( "" , config ) ) ; assertEquals ( false , lq.checkAndSet ( "abcd" , config ) ) ; assertEquals ( false , lq.checkAndSet ( "en-USofA" , config ) ) ; }
public java.net.Socket createSocket ( java.lang.String host , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { com.android.org.conscrypt.OpenSSLSocketImpl s = ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( host , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public void enter ( ) { log ( ( ( ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) + ", size: " ) + ( mConnectedDevicesList.size ( ) ) ) ) ; mPhonebook.resetAtState ( ) ; mPhoneState.listenForPhoneState ( false ) ; mVoiceRecognitionStarted = false ; mWaitingForVoiceRecognition = false ; mSlcConnected = false ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( "BaseConfigImpl{" + "mBuildConfigFields=" ) + ( mBuildConfigFields ) ) + ", mResValues=" ) + ( mResValues ) ) + ", mProguardFiles=" ) + ( mProguardFiles ) ) + ", mConsumerProguardFiles=" ) + ( mConsumerProguardFiles ) ) + ", mManifestPlaceholders=" ) + ( mManifestPlaceholders ) ) + ", mMultiDex=" ) + ( mMultiDex ) ) + '}' ; }
public android.net.IpSecTransform buildTunnelModeTransform ( @ android.annotation.NonNull java.net.InetAddress sourceAddress , @ android.annotation.NonNull android.net.IpSecManager.SecurityParameterIndex spi ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { com.android.internal.util.Preconditions.checkNotNull ( sourceAddress ) ; com.android.internal.util.Preconditions.checkNotNull ( spi ) ; if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setMode ( android.net.IpSecTransform.MODE_TUNNEL ) ; mConfig.setSourceAddress ( sourceAddress.getHostAddress ( ) ) ; mConfig.setSpiResourceId ( spi.getResourceId ( ) ) ; return new android.net.IpSecTransform ( mContext , mConfig ) ; }
public void stopStreaming ( ) { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( "No streaming service attached" ) ; } try { mService.stopStreaming ( mSubscriptionId , mServiceInfo.getServiceId ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , "Remote process died" ) ; mService = null ; sendErrorToApp ( MbmsException.ERROR_MIDDLEWARE_LOST , null ) ; } finally { mParentSession.onStreamingServiceStopped ( this ) ; } }
public void test_skipBytesI_IOException ( ) throws java.io.IOException { oos.writeObject ( testString ) ; oos.close ( ) ; tests.support.Support_ASimpleInputStream sis = new tests.support.Support_ASimpleInputStream ( bao.toByteArray ( ) ) ; ois = new java.io.ObjectInputStream ( sis ) ; sis.throwExceptionOnNextUse = true ; try { ois.skipBytes ( 5 ) ; fail ( "Test 1: IOException expected." ) ; } catch ( java.io.IOException e ) { } sis.throwExceptionOnNextUse = false ; ois.close ( ) ; }
public void testAesCbcHmacSha384Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 , android.net.cts.IpSecManagerTest.getKey ( 384 ) , 192 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
final void decrementAssociatedCallCount ( boolean isSuppressingUnbind ) { if ( ( mAssociatedCallCount ) > 0 ) { ( mAssociatedCallCount ) -- ; android.telecom.Log.v ( this , "Call count decrement %d, %s" , mAssociatedCallCount , mComponentName.flattenToShortString ( ) ) ; if ( ( ! isSuppressingUnbind ) && ( ( mAssociatedCallCount ) == 0 ) ) { unbind ( ) ; } } else { android.telecom.Log.wtf ( this , "%s: ignoring a request to decrement mAssociatedCallCount below zero" , mComponentName.getClassName ( ) ) ; } }
public void onPause ( ) { if ( ! ( contactsProviderMatchInfos.isEmpty ( ) ) ) { com.android.dialer.logging.Logger.get ( activity ) . logContactsProviderMetrics ( contactsProviderMatchInfos.values ( ) ) ; } getDuo ( ) . unregisterListener ( this ) ; pauseCache ( ) ; for ( android.net.Uri uri : hiddenItemUris ) { com.android.dialer.app.calllog.CallLogAsyncTaskUtil.deleteVoicemail ( activity , uri , null ) ; } }
private int findRopRegForLocal ( int startReg , int category ) { com.android.dx.ssa.back.FirstFitLocalCombiningAllocator.Alignment alignment = getAlignment ( category ) ; int reg = alignment.nextClearBit ( usedRopRegs , startReg ) ; while ( true ) { int i = 1 ; while ( ( i < category ) && ( ! ( usedRopRegs.get ( ( reg + i ) ) ) ) ) { i ++ ; } if ( i == category ) { return reg ; } reg = alignment.nextClearBit ( usedRopRegs , ( reg + i ) ) ; } }
private void exitVideoMode ( ) { com.android.dialer.common.LogUtil.i ( "VideoCallPresenter.exitVideoMode" , "" ) ; showVideoUi ( VideoProfile.STATE_AUDIO_ONLY , DialerCallState.ACTIVE , SessionModificationState.NO_REQUEST , false ) ; enableCamera ( primaryCall , false ) ; com.android.incallui.InCallPresenter.getInstance ( ) . setFullScreen ( false ) ; com.android.incallui.InCallPresenter.getInstance ( ) . enableScreenTimeout ( false ) ; com.android.incallui.VideoCallPresenter.isVideoMode = false ; }
public int getComponentEnabledSetting ( android.content.ComponentName componentName , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ; int uid = android.os.Binder.getCallingUid ( ) ; enforceCrossUserPermission ( uid , userId , false , "get component enabled" ) ; synchronized ( mPackages ) { return mSettings.getComponentEnabledSettingLPr ( componentName , userId ) ; } }
public void finish ( ) { if ( ( ! ( mHaveConditional ) ) && ( ( mNodes ) != null ) ) { for ( com.intellij.psi.PsiElement node : mNodes ) { java.lang.String message = "Unconditional layout inflation from view adapter: " + ( ( "Should use View Holder pattern (use recycled view passed " + "into this method as the second parameter) for smoother " ) + "scrolling" ) ; mContext.report ( com.android.tools.lint.checks.ViewHolderDetector.ISSUE , node , mContext.getLocation ( node ) , message ) ; } } }
private void addCacheHeaders ( java.util.Map < java.lang.String , java.lang.String > headers , com.android.volley.Cache.Entry entry ) { if ( entry == null ) { return ; } if ( ( entry.etag ) != null ) { headers.put ( "If-None-Match" , entry.etag ) ; } if ( ( entry.lastModified ) > 0 ) { java.util.Date refTime = new java.util.Date ( entry.lastModified ) ; headers.put ( "If-Modified-Since" , org.apache.http.impl.cookie.DateUtils.formatDate ( refTime ) ) ; } }
public java.util.SortedMap < R , java.util.Map < C , V > > rowMap ( ) { return ( ( java.util.SortedMap < R , java.util.Map < C , V > > ) ( super . rowMap ( ) ) ) ; }
private void writeDescriptor ( java.lang.String writeValue ) { android.bluetooth.BluetoothGattDescriptor descriptor = getDescriptor ( ) ; if ( descriptor == null ) return ; descriptor.setValue ( writeValue.getBytes ( ) ) ; mBluetoothGatt.writeDescriptor ( descriptor ) ; }
private int getClientId ( final int globalId ) { for ( int i = 0 , nSize = mClientIds.size ( ) ; i < nSize ; i ++ ) { int mDnsId = mClientIds.valueAt ( i ) ; if ( globalId == mDnsId ) { return mClientIds.keyAt ( i ) ; } } return - 1 ; }
private boolean permitsImpl ( java.security.Key key ) { if ( ( algorithm.compareToIgnoreCase ( key.getAlgorithm ( ) ) ) != 0 ) { return true ; } int size = sun.security.util.KeyUtil.getKeySize ( key ) ; if ( size == 0 ) { return false ; } else if ( size > 0 ) { return ! ( ( ( size < ( minSize ) ) || ( size > ( maxSize ) ) ) || ( ( prohibitedSize ) == size ) ) ; } return true ; }
public int compare ( org.w3c.dom.Attr attr1 , org.w3c.dom.Attr attr2 ) { org.eclipse.wst.sse.core.internal.provisional.IndexedRegion region1 = ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( attr1 ) ) ; org.eclipse.wst.sse.core.internal.provisional.IndexedRegion region2 = ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( attr2 ) ) ; return ( region1.getStartOffset ( ) ) - ( region2.getStartOffset ( ) ) ; }
public java.lang.String getType ( android.net.Uri uri ) { int match = com.android.bluetooth.opp.BluetoothOppProvider.sURIMatcher.match ( uri ) ; switch ( match ) { case com.android.bluetooth.opp.BluetoothOppProvider.SHARES : return com.android.bluetooth.opp.BluetoothOppProvider.SHARE_LIST_TYPE ; case com.android.bluetooth.opp.BluetoothOppProvider.SHARES_ID : return com.android.bluetooth.opp.BluetoothOppProvider.SHARE_TYPE ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown URI in getType(): " + uri ) ) ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JEnumLiteral literal ) { com.android.jack.dx.rop.cst.CstString name = new com.android.jack.dx.rop.cst.CstString ( literal.getFieldId ( ) . getName ( ) ) ; com.android.jack.dx.rop.cst.CstNat nat = com.android.jack.backend.dex.rop.RopHelper.createSignature ( literal.getFieldId ( ) ) ; result = new com.android.jack.dx.rop.cst.CstEnumRef ( name , nat ) ; return false ; }
public XmlLoader.SourceLocation getSourceLocation ( ) { return getOwnerElement ( ) . getSourceLocation ( ) ; }
public void test_isReachable_neverThrows ( ) throws java.lang.Exception { java.net.InetAddress inetAddress = java.net.InetAddress.getByName ( "www.google.com" ) ; final java.net.NetworkInterface netIf = java.net.NetworkInterface.getByName ( "dummy0" ) ; if ( netIf == null ) { java.lang.System.logI ( "Skipping test_isReachable_neverThrows because dummy0 isn't available" ) ; return ; } org.junit.Assert.assertFalse ( inetAddress.isReachable ( netIf , 256 , 500 ) ) ; }
public com.android.jack.ir.ast.JNameValuePair exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( sourceInfo ) != null ; assert ( value ) != null ; assert ( name ) != null ; com.android.jack.ir.ast.JLiteral jValue = value.exportAsJast ( exportSession ) ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JMethodIdWide methodId = new com.android.jack.ir.ast.JMethodIdWide ( name , com.android.jack.ir.ast.MethodKind.INSTANCE_VIRTUAL ) ; com.android.jack.ir.ast.JNameValuePair jNameValuePair = new com.android.jack.ir.ast.JNameValuePair ( jSourceInfo , methodId , jValue ) ; return jNameValuePair ; }
public void listen ( android.telephony.PhoneStateListener listener , int events ) { if ( ( mContext ) == null ) return ; try { java.lang.Boolean notifyNow = ( getITelephony ( ) ) != null ; if ( ( listener.mSubId ) == null ) { listener.mSubId = mSubId ; } android.telephony.TelephonyManager.sRegistry.listenForSubscriber ( listener.mSubId , getOpPackageName ( ) , listener.callback , events , notifyNow ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
private android.content.Intent waitForNoIntent ( int timeoutMs , java.util.concurrent.LinkedBlockingQueue < android.content.Intent > queue ) { try { org.junit.Assert.assertNotNull ( queue ) ; android.content.Intent intent = queue.poll ( timeoutMs , java.util.concurrent.TimeUnit.MILLISECONDS ) ; org.junit.Assert.assertNull ( intent ) ; return intent ; } catch ( java.lang.InterruptedException e ) { org.junit.Assert.fail ( ( "Cannot obtain an Intent from the queue: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
public com.android.sched.vfs.OutputVFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.RunnableHooks hooks = context.getRunnableHooks ( ) ; try { com.android.sched.vfs.WriteZipFS vfs = new com.android.sched.vfs.WriteZipFS ( new com.android.sched.util.file.OutputZipFile ( context.getWorkingDirectory ( ) , string , hooks , existence , change , com.android.sched.util.file.OutputZipFile.Compression.COMPRESSED ) ) ; return new com.android.sched.vfs.GenericOutputVFS ( vfs ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
private void rewriteCallIntentAction ( android.content.Intent intent , boolean isPotentialEmergencyNumber ) { java.lang.String action = intent.getAction ( ) ; if ( Intent.ACTION_CALL_PRIVILEGED.equals ( action ) ) { if ( isPotentialEmergencyNumber ) { android.telecom.Log.i ( this , ( "ACTION_CALL_PRIVILEGED is used while the number is a potential" + " emergency number. Using ACTION_CALL_EMERGENCY as an action instead." ) ) ; action = android.content.Intent.ACTION_CALL_EMERGENCY ; } else { action = android.content.Intent.ACTION_CALL ; } android.telecom.Log.v ( this , " - updating action from CALL_PRIVILEGED to %s" , action ) ; intent.setAction ( action ) ; } }
public void sendDialerSpecialCode ( java.lang.String inputCode ) { try { final com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; telephony.sendDialerSpecialCode ( mContext.getOpPackageName ( ) , inputCode ) ; } catch ( android.os.RemoteException ex ) { ex.rethrowFromSystemServer ( ) ; } catch ( java.lang.NullPointerException ex ) { throw new java.lang.IllegalStateException ( "Telephony service unavailable" ) ; } }
void putExtra ( java.lang.String callId , java.lang.String key , int value ) { android.telecom.Log.v ( this , "putExtra: %s %s=%d" , callId , key , value ) ; for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { android.os.Bundle bundle = new android.os.Bundle ( ) ; bundle.putInt ( key , value ) ; adapter.putExtras ( callId , bundle , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void testKeyguardLock ( ) throws java.lang.Exception { if ( ( ! ( isHandheld ( ) ) ) || ( isUiModeLockedToVrHeadset ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "KeyguardLockActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "KeyguardLockActivity" } ) ; mAmWmState.assertVisibility ( "KeyguardLockActivity" , true ) ; executeShellCommand ( android.server.cts.FINISH_ACTIVITY_BROADCAST ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; }
public java.time.Instant getNotUsedAfterInstant ( java.lang.String zoneId ) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneUsage.Entry entry = zoneIdEntryMap.get ( zoneId ) ; if ( entry == null ) { throw new java.lang.IllegalArgumentException ( ( ( ( "No entry for " + zoneId ) + " for isoCode=" ) + ( isoCode ) ) ) ; } return entry.notUsedAfter ; }
public void copy2DRangeTo ( int xoff , int yoff , int w , int h , byte [ ] data ) { validateIsInt8 ( ) ; copy2DRangeToUnchecked ( xoff , yoff , w , h , data , Element.DataType.SIGNED_8 , data.length ) ; }
private boolean isWindowsExecutable ( org.eclipse.core.runtime.IPath commandPath ) { java.lang.String ext = commandPath.getFileExtension ( ) ; if ( isWindowsExecutableExtension ( ext ) ) { return true ; } ext = findWindowsExecutableExtension ( commandPath ) ; if ( ext != null ) { return true ; } return false ; }
private void evictOldScanResults ( ) { long nowMs = android.os.SystemClock.elapsedRealtime ( ) ; for ( java.util.Iterator < android.net.wifi.ScanResult > iter = mScanResultCache.values ( ) . iterator ( ) ; iter.hasNext ( ) ; ) { android.net.wifi.ScanResult result = iter.next ( ) ; if ( ( nowMs - ( ( result.timestamp ) / 1000 ) ) > ( com.android.settingslib.wifi.AccessPoint.MAX_SCAN_RESULT_AGE_MS ) ) { iter.remove ( ) ; } } }
private static void onTransmitFollowupEvent ( short transactionId , int reason ) { if ( com.android.server.wifi.nan.WifiNanNative.VDBG ) { android.util.Log.v ( com.android.server.wifi.nan.WifiNanNative.TAG , ( ( ( "onTransmitFollowupEvent: transactionId=" + transactionId ) + ", reason=" ) + reason ) ) ; } if ( reason == ( com.android.server.wifi.nan.WifiNanNative.NAN_STATUS_SUCCESS ) ) { com.android.server.wifi.nan.WifiNanStateManager.getInstance ( ) . onMessageSendSuccessNotification ( transactionId ) ; } else { com.android.server.wifi.nan.WifiNanStateManager.getInstance ( ) . onMessageSendFailNotification ( transactionId , reason ) ; } }
public void test_getPrivateExponent ( ) throws java.lang.Exception { for ( java.security.Provider p : java.security.Security.getProviders ( "KeyFactory.RSA" ) ) { java.security.interfaces.RSAPrivateKey key = tests.security.interfaces.RSAPrivateKeyTest.getNonCRTKey ( p ) ; assertEquals ( "invalid private exponent" , tests.security.interfaces.RSAPrivateKeyTest.SIMPLE_D , key.getPrivateExponent ( ) ) ; } }
public java.lang.String getNamespace ( ) { if ( ( mNamespace ) == null ) { com.android.sdklib.xml.ManifestData manifestData = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( mProject ) ; if ( manifestData != null ) { java.lang.String javaPackage = manifestData.getPackage ( ) ; mNamespace = java.lang.String.format ( AndroidConstants.NS_CUSTOM_RESOURCES , javaPackage ) ; } } return mNamespace ; }
public android.net.IpSecTransform buildTransportModeTransform ( @ android.annotation.NonNull java.net.InetAddress sourceAddress , @ android.annotation.NonNull android.net.IpSecManager.SecurityParameterIndex spi ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { com.android.internal.util.Preconditions.checkNotNull ( sourceAddress ) ; com.android.internal.util.Preconditions.checkNotNull ( spi ) ; if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setMode ( android.net.IpSecTransform.MODE_TRANSPORT ) ; mConfig.setSourceAddress ( sourceAddress.getHostAddress ( ) ) ; mConfig.setSpiResourceId ( spi.getResourceId ( ) ) ; return new android.net.IpSecTransform ( mContext , mConfig ) . activate ( ) ; }
public static int IntMatCond_IntVarVar ( int a , int b , int x , int y ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int result = ( a > b ) ? x : y ; return result + ( a > b ? 0 : 1 ) ; }
private void getIccCardStatusDone ( com.android.internal.telephony.IccCardStatus ics ) { handleIccCardStatus ( ics ) ; }
public static final double nextDouble ( double value ) { return java.lang.Math.nextUp ( value ) ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.conscrypt.NativeCrypto.SSL_get0_alpn_selected ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; if ( ! ( NativeCrypto.isBoringSSL ) ) { assertEquals ( "ALPN should not enable cutthrough on the client" , 0 , ( ( org.conscrypt.NativeCrypto.SSL_get_mode ( ssl ) ) & ( org.conscrypt.NativeConstants.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ) ) ; } super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
public android.app.ContextImpl getSystemContext ( ) { synchronized ( this ) { if ( ( android.app.ActivityThread.mSystemContext ) == null ) { android.app.ContextImpl context = android.app.ContextImpl.createSystemContext ( this ) ; android.app.LoadedApk info = new android.app.LoadedApk ( this , "android" , context , null , android.content.res.CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO ) ; context.init ( info , null , this ) ; context.getResources ( ) . updateConfiguration ( mResourcesManager.getConfiguration ( ) , mResourcesManager.getDisplayMetricsLocked ( Display.DEFAULT_DISPLAY ) ) ; android.app.ActivityThread.mSystemContext = context ; } } return android.app.ActivityThread.mSystemContext ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; findViewById ( R.id.continue_button ) . setOnClickListener ( new android.view.View.OnClickListener ( ) { @ java.lang.Override public void onClick ( android.view.View v ) { startActivity ( new android.content.Intent ( com.android.cts.verifier.CtsVerifierActivity.this , com.android.cts.verifier.TestListActivity.class ) ) ; } } ) ; }
public static java.lang.String getMethodName ( java.lang.reflect.ArtMethod artMethod ) { java.lang.Class < ? > declClass = artMethod.getDeclaringClass ( ) ; com.android.dex.Dex dex = declClass.getDex ( ) ; int nameIndex = dex.nameIndexFromMethodIndex ( artMethod.getDexMethodIndex ( ) ) ; return declClass.getDexCacheString ( dex , nameIndex ) ; }
public boolean isBondingInitiatedLocally ( ) { final android.bluetooth.IBluetooth service = android.bluetooth.BluetoothDevice.sService ; if ( service == null ) { android.util.Log.w ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled, isBondingInitiatedLocally failed" ) ; return false ; } try { return service.isBondingInitiatedLocally ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
private void loadResources ( ) { com.android.ddmuilib.ImageLoader loader = com.android.ddmuilib.ImageLoader.getLoader ( this . getClass ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.sNotSelectedImage = loader.loadImage ( "not-selected.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.sSelectedImage = loader.loadImage ( "selected-small.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.sFilteredImage = loader.loadImage ( "filtered.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.sFilteredSelectedImage = loader.loadImage ( "selected-filtered-small.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; }
public void goToUnlockScreen ( ) { final com.android.internal.telephony.IccCard.State simState = mUpdateMonitor.getSimState ( ) ; if ( ( stuckOnLockScreenBecauseSimMissing ( ) ) || ( simState == ( IccCard.State.PUK_REQUIRED ) ) ) { return ; } if ( ! ( isSecure ( ) ) ) { getCallback ( ) . keyguardDone ( true ) ; } else { updateScreen ( com.android.internal.policy.impl.LockPatternKeyguardView.Mode.UnlockScreen ) ; } }
public static int getSlotIndex ( int subId ) { if ( ! ( android.telephony.SubscriptionManager.isValidSubscriptionId ( subId ) ) ) { if ( android.telephony.SubscriptionManager.DBG ) { android.telephony.SubscriptionManager.logd ( "[getSlotIndex]- fail" ) ; } } int result = android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX ; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface ( android.os.ServiceManager.getService ( "isub" ) ) ; if ( iSub != null ) { result = iSub.getSlotIndex ( subId ) ; } } catch ( android.os.RemoteException ex ) { } return result ; }
private void launchFinish ( byte [ ] token ) { android.content.Intent intent = getFinishIntent ( ) ; intent.addFlags ( Intent.FLAG_ACTIVITY_FORWARD_RESULT ) ; intent.putExtra ( ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN , token ) ; if ( ( mUserId ) != ( android.os.UserHandle.USER_NULL ) ) { intent.putExtra ( Intent.EXTRA_USER_ID , mUserId ) ; } startActivity ( intent ) ; finish ( ) ; }
public void testAospServiceContexts ( ) throws java.lang.Exception { deviceSvcFile = java.io.File.createTempFile ( "service_contexts" , ".tmp" ) ; deviceSvcFile.deleteOnExit ( ) ; if ( ! ( mDevice.pullFile ( "/system/etc/selinux/plat_service_contexts" , deviceSvcFile ) ) ) { mDevice.pullFile ( "/plat_service_contexts" , deviceSvcFile ) ; } aospSvcFile = copyResourceToTempFile ( "/plat_service_contexts" ) ; assertFileEquals ( aospSvcFile , deviceSvcFile ) ; }
public void testN1 ( ) { loadAndRun ( "dot.junit.opcodes.move_exception.d.T_move_exception_1" , java.lang.ArithmeticException.class ) ; }
protected void setUp ( ) { mSkipTests = ( Build.VERSION.SDK_INT ) < ( Build.VERSION_CODES.M ) ; }
public void setHomePageInBrowser ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance ( instrumentation ) ; java.lang.String homepage = "espn.com" ; java.lang.String appName = "Browser" ; if ( ( ( api ) >= 17 ) && ( ( api ) <= 23 ) ) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; setHomePage ( device , "Other" , ( "http://" + homepage ) ) ; device.pressHome ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.BROWSER_TAB_SWITCHER_RES ) ) . clickAndWaitForNewWindow ( ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.BROWSER_CLOSE_TAB_RES ) ) . clickAndWaitForNewWindow ( ) ; device.pressHome ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; android.support.test.uiautomator.UiObject urlField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.BROWSER_URL_TEXT_FIELD_RES ) ) ; urlField.waitForExists ( java.util.concurrent.TimeUnit.SECONDS.toMillis ( 5 ) ) ; org.junit.Assert.assertTrue ( "Homepage not set correctly" , ( ( urlField.exists ( ) ) && ( urlField.getText ( ) . contains ( homepage ) ) ) ) ; device.pressHome ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; setHomePage ( device , "Default page" ) ; } }
public void invoke ( java.lang.Thread t , java.lang.reflect.Method method , int depth ) { try { java.lang.Object res = get.GetVar ( t , depth ) ; java.lang.System.out.println ( ( ( ( ( ( this ) + " on " ) + method ) + " got value: " ) + ( art.Test1939.SafeToString ( res ) ) ) ) ; } catch ( java.lang.Exception e ) { java.lang.System.out.println ( ( ( ( ( ( this ) + " on " ) + method ) + " failed due to " ) + ( e.getMessage ( ) ) ) ) ; } }
public void d2i_SSL_SESSION_NullArgument ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( null ) ; }
public void visitProgramMethod ( proguard.obfuscate.ProgramClass programClass , proguard.obfuscate.ProgramMethod programMethod ) { java.lang.String name = programMethod.getName ( programClass ) ; if ( proguard.obfuscate.ClassUtil.isInitializer ( name ) ) { return ; } visitMember ( programClass , programMethod , false ) ; }
private boolean noContactsModifiedSince ( long lastModified ) { try ( android.database.Cursor cursor = appContext.getContentResolver ( ) . query ( Contacts.CONTENT_URI , new java.lang.String [ ] { android.provider.ContactsContract.Contacts._ID } , ( ( android.provider.ContactsContract.Contacts.CONTACT_LAST_UPDATED_TIMESTAMP ) + " > ?" ) , new java.lang.String [ ] { java.lang.Long.toString ( lastModified ) } , ( ( android.provider.ContactsContract.Contacts._ID ) + " limit 1" ) ) ) { if ( cursor == null ) { com.android.dialer.common.LogUtil.w ( "Cp2PhoneLookup.noContactsModifiedSince" , "null cursor" ) ; return false ; } return ( cursor.getCount ( ) ) == 0 ; } }
public void onGuidedActionClicked ( android.support.v17.leanback.widget.GuidedAction action ) { if ( ( action.getId ( ) ) == ( com.android.tv.dvr.ui.DvrInsufficientSpaceErrorFragment.ACTION_VIEW_RECENT_RECORDINGS ) ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , com.android.tv.dvr.ui.browse.DvrBrowseActivity.class ) ; getActivity ( ) . startActivity ( intent ) ; } dismissDialog ( ) ; }
private static java.util.Set < java.lang.String > getSchemaSet ( android.database.sqlite.SQLiteDatabase db ) { java.util.Set < java.lang.String > schemaSet = new java.util.HashSet < > ( ) ; android.database.Cursor entityCursor = db.rawQuery ( "SELECT sql FROM sqlite_master" , null ) ; try { while ( entityCursor.moveToNext ( ) ) { java.lang.String sql = entityCursor.getString ( 0 ) ; schemaSet.add ( sql ) ; } } finally { entityCursor.close ( ) ; } return schemaSet ; }
public void run ( ) { for ( int i = 0 ; i < numTimes ; i ++ ) { keyListener.onKeyDown ( mTextView , mTextView.getEditableText ( ) , keyCode , new android.view.KeyEvent ( android.view.KeyEvent.ACTION_DOWN , keyCode ) ) ; } }
private com.android.apigenerator.ApiClass addClass ( java.util.HashMap < java.lang.String , com.android.apigenerator.ApiClass > classes , java.lang.String name , int apiLevel , boolean deprecated ) { com.android.apigenerator.ApiClass theClass = classes.get ( name ) ; if ( theClass == null ) { theClass = new com.android.apigenerator.ApiClass ( name , apiLevel ) ; classes.put ( name , theClass ) ; } if ( deprecated && ( apiLevel < ( theClass.deprecatedIn ) ) ) { theClass.deprecatedIn = apiLevel ; } return theClass ; }
public void test_getIntegerInstance_ar ( ) throws java.lang.Exception { if ( ! ( tests.support.Support_Locale.isLocaleAvailable ( new java.util.Locale ( "ar" ) ) ) ) { return ; } java.text.NumberFormat numberFormat = java.text.NumberFormat.getNumberInstance ( new java.util.Locale ( "ar" ) ) ; assertEquals ( "#0.###;#0.###-" , ( ( java.text.DecimalFormat ) ( numberFormat ) ) . toPattern ( ) ) ; java.text.NumberFormat integerFormat = java.text.NumberFormat.getIntegerInstance ( new java.util.Locale ( "ar" ) ) ; assertEquals ( "#0;#0-" , ( ( java.text.DecimalFormat ) ( integerFormat ) ) . toPattern ( ) ) ; }
public static com.android.dx.rop.cst.CstType intern ( com.android.dx.rop.type.Type type ) { com.android.dx.rop.cst.CstType cst = new com.android.dx.rop.cst.CstType ( type ) ; com.android.dx.rop.cst.CstType result = com.android.dx.rop.cst.CstType.interns.putIfAbsent ( type , cst ) ; return result != null ? result : cst ; }
public void test_EmptyList_replaceAll ( ) { java.util.Collections.emptyList ( ) . replaceAll ( ( k ) -> 1 ) ; try { java.util.Collections.emptyList ( ) . replaceAll ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public static < T > io.appium.droiddriver.finders.Predicate < T > anyOf ( final io.appium.droiddriver.finders.Predicate < ? super T > ... components ) { return new io.appium.droiddriver.finders.Predicate < T > ( ) { @ java.lang.Override public boolean apply ( T input ) { for ( io.appium.droiddriver.finders.Predicate < ? super T > each : components ) { if ( each.apply ( input ) ) { return true ; } } return false ; } @ java.lang.Override public java.lang.String toString ( ) { return ( "anyOf(" + ( android.text.TextUtils.join ( ", " , components ) ) ) + ")" ; } } ; }
public void testAdd2_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.add ( ( ( list.size ( ) ) + 1 ) , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public boolean setNetworkSelectionModeManual ( java.lang.String operatorNumeric , boolean persistSelection ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.setNetworkSelectionModeManual ( getSubId ( ) , operatorNumeric , persistSelection ) ; } } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual NPE" , ex ) ; } return false ; }
public static byte [ ] encode ( java.lang.String s ) throws java.io.UTFDataFormatException { int utfCount = ( ( int ) ( com.android.dex.Mutf8.countBytes ( s , true ) ) ) ; byte [ ] result = new byte [ utfCount ] ; com.android.dex.Mutf8.encode ( result , 0 , s ) ; return result ; }
public void onDataCallListChanged ( java.util.List < android.telephony.data.DataCallResponse > dataCallList ) { android.telephony.data.IDataServiceCallback callback = mCallback.get ( ) ; if ( callback != null ) { try { callback.onDataCallListChanged ( dataCallList ) ; } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.data.DataServiceCallback.TAG , "Failed to onDataCallListChanged on the remote" ) ; } } }
public void testRunEnded ( long elapsedTime , java.util.Map < java.lang.String , java.lang.String > metrics ) { mCurrentModuleResult.addRuntime ( elapsedTime ) ; if ( ( mCanMarkDone ) || ( mModuleWasDone ) ) { mCurrentModuleResult.setDone ( ( ( mCurrentTestNum ) >= ( mTotalTestsInModule ) ) ) ; } mCurrentModuleResult.setNotExecuted ( java.lang.Math.max ( ( ( mTotalTestsInModule ) - ( mCurrentTestNum ) ) , 0 ) ) ; if ( isShardResultReporter ( ) ) { mMasterResultReporter.mergeModuleResult ( mCurrentModuleResult ) ; } }
public static double max ( double a , double b ) { return java.lang.Math.max ( a , b ) ; }
private void expectSwPnoScan ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.ScanSettings nativeScanSettings , com.android.server.wifi.ScanResults results ) { org.mockito.Mockito.when ( mWifiScannerImpl.isHwPnoSupported ( org.mockito.Mockito.anyBoolean ( ) ) ) . thenReturn ( false ) ; org.mockito.Mockito.when ( mWifiScannerImpl.shouldScheduleBackgroundScanForHwPno ( ) ) . thenReturn ( true ) ; expectSuccessfulBackgroundScan ( order , nativeScanSettings , results ) ; }
public void disconnectCall ( com.android.server.telecom.Call call ) { android.telecom.Log.v ( this , "disconnectCall %s" , call ) ; if ( ! ( mCalls.contains ( call ) ) ) { android.telecom.Log.w ( this , "Unknown call (%s) asked to disconnect" , call ) ; } else { mLocallyDisconnectingCalls.add ( call ) ; call.disconnect ( ) ; } }
void init ( com.android.phone.TimeConsumingPreferenceListener listener , boolean skipReading , com.android.internal.telephony.Phone phone ) { mPhone = phone ; mTcpListener = listener ; if ( ! skipReading ) { android.util.Log.i ( com.android.phone.CLIRListPreference.LOG_TAG , "init: requesting CLIR" ) ; mPhone.getOutgoingCallerIdDisplay ( mHandler.obtainMessage ( com.android.phone.CLIRListPreference.MyHandler.MESSAGE_GET_CLIR , com.android.phone.CLIRListPreference.MyHandler.MESSAGE_GET_CLIR , com.android.phone.CLIRListPreference.MyHandler.MESSAGE_GET_CLIR ) ) ; if ( ( mTcpListener ) != null ) { mTcpListener.onStarted ( this , true ) ; } } }
protected synchronized void implCloseSelectableChannel ( ) throws java.io.IOException { onDisconnect ( true ) ; libcore.io.IoBridge.closeAndSignalBlockedThreads ( fd ) ; multicastMembershipHandler = null ; if ( ( ( socket ) != null ) && ( ! ( socket.isClosed ( ) ) ) ) { socket.onClose ( ) ; } }
public boolean onKeyDown ( final int keyCode , final android.view.KeyEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onKeyDown ( keyCode , event ) ; } } ) ; return ret ; } com.android.webview.chromium.UnimplementedWebViewApi.invoke ( ) ; return false ; }
private static void assertMeidFormat ( java.lang.String deviceId ) { java.lang.String meidPattern = "[0-9a-fA-F]{14}" ; java.lang.String invalidPattern = "[0]{14}" ; org.junit.Assert.assertTrue ( ( ( ( "MEID device id " + deviceId ) + " does not match pattern " ) + meidPattern ) , java.util.regex.Pattern.matches ( meidPattern , deviceId ) ) ; org.junit.Assert.assertFalse ( ( ( "MEID device id " + deviceId ) + "must not be a zero sequence" ) , java.util.regex.Pattern.matches ( invalidPattern , deviceId ) ) ; }
public void onMessageReceived ( java.lang.Object peerHandle , byte [ ] message ) { android.os.Bundle mResults = new android.os.Bundle ( ) ; mResults.putInt ( "discoverySessionId" , mDiscoverySessionId ) ; mResults.putInt ( "peerId" , ( ( java.lang.Integer ) ( peerHandle ) ) ) ; mResults.putByteArray ( "message" , message ) ; mResults.putString ( "messageAsString" , new java.lang.String ( message ) ) ; mEventFacade.postEvent ( "WifiNanSessionOnMessageReceived" , mResults ) ; }
public com.android.jack.ir.ast.JClass getDefined ( @ javax.annotation.Nonnull java.lang.String signature ) { return jackLookup.getClass ( signature ) ; }
public void testVFE4 ( ) { load ( "dot.junit.opcodes.aput.d.T_aput_5" , java.lang.VerifyError.class ) ; }
com.google.common.collect.Multiset.Entry < E > getEntry ( int index ) { return forward.entrySet ( ) . asList ( ) . reverse ( ) . get ( index ) ; }
public void testQuotaReported ( ) throws java.lang.Exception { if ( ! ( isBackupSupported ( ) ) ) { return ; } createTestFileOfSize ( android.backup.cts.KeyValueQuotaTest.BACKUP_APP_NAME , 1 ) ; java.lang.String separator = clearLogcat ( ) ; exec ( ( "bmgr backupnow " + ( android.backup.cts.KeyValueQuotaTest.BACKUP_APP_NAME ) ) ) ; waitForLogcat ( android.backup.cts.KeyValueQuotaTest.TIMEOUT_SECONDS , separator , ( "quota is " + ( android.backup.cts.KeyValueQuotaTest.LOCAL_TRANSPORT_BACKUP_QUOTA ) ) ) ; }
public android.os.Bundle updateCredentials ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , java.lang.String s , android.os.Bundle bundle ) throws android.accounts.NetworkErrorException { if ( com.android.bluetooth.pbapclient.Authenticator.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; return null ; }
public void testAesCbcHmacSha256Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
public void run ( com.android.tradefed.result.ITestInvocationListener listener ) throws com.android.tradefed.device.DeviceNotAvailableException { for ( com.android.gfx.benchmark.ApkInfo apk : com.android.gfx.benchmark.ApkInfo.values ( ) ) { getDevice ( ) . installPackage ( new java.io.File ( mApkDir , apk.getFileName ( ) ) , true ) ; runDeviceTests ( com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE , com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS , ( ( "run[" + ( apk.name ( ) ) ) + "]" ) ) ; } }
public void frameworkFromJill ( ) throws java.lang.Exception { java.io.File frameworkJackZip = com.android.jill.JillTestTools.createTempFile ( "framework" , ".zip" ) ; com.android.jill.JillTestTools.runJillToZip ( com.android.jill.NoClasspathTest.FRAMEWORK_JAR , frameworkJackZip ) ; java.io.File frameworkDex = com.android.jill.JillTestTools.createTempDir ( "framework" , "dex" ) ; com.android.jill.JillTestTools.compileJackToDex ( new com.android.jill.Options ( ) , frameworkJackZip , frameworkDex , false ) ; }
public void importFromJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ImportHelper loader , @ javax.annotation.Nonnull java.lang.Object node ) { com.android.jack.ir.ast.JReinterpretCastOperation jReinterpretCastOperation = ( ( com.android.jack.ir.ast.JReinterpretCastOperation ) ( node ) ) ; castType = com.android.jack.jayce.v0002.io.ImportHelper.getSignatureName ( jReinterpretCastOperation.getType ( ) ) ; expr = ( ( com.android.jack.jayce.v0002.nodes.NExpression ) ( loader.load ( jReinterpretCastOperation.getExpr ( ) ) ) ) ; sourceInfo = loader.load ( jReinterpretCastOperation.getSourceInfo ( ) ) ; }
public void testGetPath_PathAndApiClassResourceSet ( ) { initializePsiClass ( "\"\"" , "\"res\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"boo\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.idea.appengine.validation.RestSignatureInspection inspection = new com.google.gct.idea.appengine.validation.RestSignatureInspection ( ) ; java.lang.String path = inspection.getPath ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "boo" , path ) ; }
public java.lang.String getPackageConfigurationName ( ) { if ( isLibrary ) { if ( name.equals ( SourceSet.MAIN_SOURCE_SET_NAME ) ) { return "publish" ; } else { return java.lang.String.format ( "%sPublish" , name ) ; } } if ( name.equals ( SourceSet.MAIN_SOURCE_SET_NAME ) ) { return "apk" ; } else { return java.lang.String.format ( "%sApk" , name ) ; } }
public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto ( android.net.metrics.WakeupStats in ) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats wakeupStats = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats ( ) ; in.updateDuration ( ) ; wakeupStats.durationSec = in.durationSec ; wakeupStats.totalWakeups = in.totalWakeups ; wakeupStats.rootWakeups = in.rootWakeups ; wakeupStats.systemWakeups = in.systemWakeups ; wakeupStats.nonApplicationWakeups = in.nonApplicationWakeups ; wakeupStats.applicationWakeups = in.applicationWakeups ; wakeupStats.noUidWakeups = in.noUidWakeups ; final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent ( 0 , 0 , in.iface ) ; out.setWakeupStats ( wakeupStats ) ; return out ; }
public synchronized void onPlaybackStateChanged ( android.media.session.PlaybackState state ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "onPlaybackStateChanged: state " + ( state.toString ( ) ) ) ) ; updatePlaybackState ( state ) ; byte stateBytes = ( ( byte ) ( convertPlayStateToBytes ( state.getState ( ) ) ) ) ; com.android.bluetooth.avrcp.MediaPlayerInfo player = getAddressedPlayerInfo ( ) ; if ( player != null ) { player.setPlayStatus ( stateBytes ) ; } else { android.util.Log.w ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "onPlaybackStateChanged: no addressed player id=" + ( mCurrAddrPlayerID ) ) ) ; } }
public java.lang.String getMountPoint ( @ com.android.annotations.NonNull java.lang.String name ) { java.lang.String mount = mMountPoints.get ( name ) ; if ( mount == null ) { try { mount = queryMountPoint ( name ) ; mMountPoints.put ( name , mount ) ; } catch ( com.android.ddmlib.TimeoutException ignored ) { } catch ( com.android.ddmlib.AdbCommandRejectedException ignored ) { } catch ( com.android.ddmlib.ShellCommandUnresponsiveException ignored ) { } catch ( java.io.IOException ignored ) { } } return mount ; }
public boolean hasSourceUrl ( com.android.sdklib.internal.repository.SdkSource source ) { for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources.values ( ) ) { for ( com.android.sdklib.internal.repository.SdkSource s : list ) { if ( s.equals ( source ) ) { return true ; } } } return false ; }
public com.android.sched.vfs.OutputVFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.GenericOutputVFS ( new com.android.sched.vfs.DirectFS ( new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) , permissions ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public void testGet2_IndexOutOfBoundsException ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.get ( list.size ( ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public void notifyPendingSystemUpdate ( long updateReceivedTime ) { throwIfParentInstance ( "notifyPendingSystemUpdate" ) ; if ( ( mService ) != null ) { try { mService.notifyPendingSystemUpdate ( android.app.admin.SystemUpdateInfo.of ( updateReceivedTime ) ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } } }
static void offsetRects ( java.util.List < android.graphics.RectF > rects , float offsetX , float offsetY ) { final int rectCount = rects.size ( ) ; for ( int i = 0 ; i < rectCount ; i ++ ) { android.graphics.RectF intersection = rects.get ( i ) ; intersection.offset ( offsetX , offsetY ) ; } }
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc , boolean itf ) { org.junit.Assert.assertTrue ( ( ! ( getBase ( owner ) . equals ( com.android.tools.layoutlib.create.AsmGeneratorTest.JAVA_CLASS_NAME ) ) ) ) ; org.junit.Assert.assertTrue ( testType ( org.objectweb.asm.Type.getType ( desc ) ) ) ; super . visitMethodInsn ( opcode , owner , name , desc , itf ) ; }
private void sendDisplayPinIntent ( byte [ ] address , int pin , int variant ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mRemoteDevices.getDevice ( address ) ) ; if ( pin != 0 ) { intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_KEY , pin ) ; } intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_VARIANT , variant ) ; intent.setFlags ( Intent.FLAG_RECEIVER_FOREGROUND ) ; intent.setPackage ( com.android.bluetooth.btservice.BondStateMachine.PAIRING_REQUEST_PACKAGE ) ; mAdapterService.sendOrderedBroadcast ( intent , mAdapterService.BLUETOOTH_ADMIN_PERM ) ; }
protected static void appendOperator ( java.lang.StringBuilder sb , com.intellij.psi.tree.IElementType operator ) { sb.append ( ' ' ) ; if ( operator == ( com.intellij.psi.JavaTokenType.ANDAND ) ) { sb.append ( "and" ) ; } else if ( operator == ( com.intellij.psi.JavaTokenType.OROR ) ) { sb.append ( "or" ) ; } else { assert operator == ( com.intellij.psi.JavaTokenType.XOR ) : operator ; sb.append ( "xor" ) ; } sb.append ( ' ' ) ; }
public void testGetTvInputInfo ( ) throws java.lang.Exception { if ( ! ( android.media.tv.cts.Utils.hasTvInputFramework ( getActivity ( ) ) ) ) { return ; } assertEquals ( mManager.getTvInputInfo ( mStubId ) , android.media.tv.cts.TvInputManagerTest.getInfoForClassName ( mManager.getTvInputList ( ) , android.media.tv.cts.StubTunerTvInputService.class . getName ( ) ) ) ; }
synchronized void nAllocationRead ( long id , java.lang.Object d , android.support.v8.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead ( mContext , id , d , dt.mID ) ; }
public void TestFormatReplaceOptimization ( ) { android.icu.text.SimpleFormatter fmt = android.icu.text.SimpleFormatter.compile ( "{2}, {0}, {1} and {3}" ) ; int [ ] offsets = new int [ 4 ] ; java.lang.StringBuilder result = new java.lang.StringBuilder ( "original" ) ; assertEquals ( "format" , "original, freddy, frog and by" , fmt.formatAndReplace ( result , offsets , "freddy" , "frog" , result , "by" ) . toString ( ) ) ; int [ ] expectedOffsets = new int [ ] { 10 , 18 , 0 , 27 } ; verifyOffsets ( expectedOffsets , offsets ) ; }
private javax.crypto.KeyAgreementSpi getSpi ( java.security.Key key ) { synchronized ( initLock ) { if ( ( ( spiImpl ) != null ) && ( key == null ) ) { return spiImpl ; } final org.apache.harmony.security.fortress.Engine.SpiAndProvider sap = javax.crypto.KeyAgreement.tryAlgorithm ( key , specifiedProvider , algorithm ) ; if ( sap == null ) { throw new java.security.ProviderException ( ( "No provider for " + ( getAlgorithm ( ) ) ) ) ; } spiImpl = ( ( javax.crypto.KeyAgreementSpi ) ( sap.spi ) ) ; provider = sap.provider ; return spiImpl ; } }
public synchronized void fillSwitchMapClass ( @ javax.annotation.Nonnull com.android.jack.transformations.enums.OptimizationUtil supportUtil , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass switchMapClass ) { this . enumType = enumType ; this . supportUtil = supportUtil ; this . switchMapClass = switchMapClass ; com.android.jack.transformations.request.TransformationRequest transformRequest = new com.android.jack.transformations.request.TransformationRequest ( switchMapClass ) ; if ( com.android.jack.transformations.enums.opt.SyntheticClassManager.isSyntheticSwitchMapClass ( switchMapClass ) ) { createInstanceInitIfNotExists ( transformRequest ) ; } if ( ! ( createOrUpdateSyntheticInitializer ( transformRequest ) ) ) { throw new java.lang.AssertionError ( ( "Fails adding synthetic switch map initializer to class: " + switchMapClass ) ) ; } transformRequest.commit ( ) ; }
public final java.nio.MappedByteBuffer force ( ) { checkIsMapped ( ) ; if ( ( mapMode ) == ( java.nio.channels.FileChannel.MapMode.READ_WRITE ) ) { try { Libcore.os.msync ( block.toInt ( ) , block.getSize ( ) , java.nio.MS_SYNC ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw new java.lang.AssertionError ( errnoException ) ; } } return this ; }
public void testConfigurationUpdatesWhenRotatingWhileDocked ( ) throws java.lang.Exception { if ( ( ( ! ( supportsScreenRotation ( ) ) ) || ( ! ( supportsSplitScreenMultiWindow ( ) ) ) ) || ( ! ( supportsMultiWindowMode ( ) ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no rotation nor multi-window support" ) ; return ; } setDeviceRotation ( 0 ) ; launchActivityInDockStack ( android.server.cts.LAUNCHING_ACTIVITY ) ; launchActivityToSide ( false , false , android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME ) ; launchActivity ( false , false , false , android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; final android.server.cts.ReportedSizes initialSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; rotateAndCheckSizes ( initialSizes ) ; }
public java.util.Map < java.lang.String , java.util.List < java.lang.String > > get ( java.net.URI uri , java.util.Map < java.lang.String , java.util.List < java.lang.String > > map ) throws java.io.IOException { java.util.Map < java.lang.String , java.util.List < java.lang.String > > result = super . get ( uri , map ) ; connectionHolder.get ( ) . disconnect ( ) ; return result ; }
public java.io.OutputStream openWrite ( ) throws java.io.FileNotFoundException { if ( ( vfsRoot ) instanceof com.android.sched.vfs.SequentialOutputVDir ) { if ( ( ( com.android.sched.vfs.SequentialOutputVDir ) ( vfsRoot ) ) . notifyVFileOpenAndReturnPreviousState ( ) ) { throw new java.lang.AssertionError ( ( ( getLocation ( ) . getDescription ( ) ) + " cannot be written to because a previous stream has not been closed." ) ) ; } } return new com.android.sched.vfs.direct.DirectFile.VFileOutputStream ( new java.io.FileOutputStream ( file ) , vfsRoot ) ; }
android.view.View findScrollingChild ( android.view.View view ) { if ( android.support.v4.view.ViewCompat.isNestedScrollingEnabled ( view ) ) { return view ; } if ( view instanceof android.view.ViewGroup ) { android.view.ViewGroup group = ( ( android.view.ViewGroup ) ( view ) ) ; for ( int i = 0 , count = group.getChildCount ( ) ; i < count ; i ++ ) { android.view.View scrollingChild = findScrollingChild ( group.getChildAt ( i ) ) ; if ( scrollingChild != null ) { return scrollingChild ; } } } return null ; }
protected void setPropertiesAttributes ( org.kxml2.io.KXmlSerializer serializer , java.lang.String namespace ) throws java.io.IOException { super . setPropertiesAttributes ( serializer , namespace ) ; serializer.attribute ( null , "device" , mDeviceName ) ; serializer.attribute ( null , "flavor" , mFlavorName ) ; serializer.attribute ( null , "project" , mProjectName ) ; }
public void computeDominators ( ) { if ( ( mDominators ) == null ) { mTopSort = com.android.tools.perflib.heap.analysis.TopologicalSort.compute ( getGCRoots ( ) ) ; mDominators = new com.android.tools.perflib.heap.analysis.Dominators ( this , mTopSort ) ; mDominators.computeRetainedSizes ( ) ; com.android.tools.perflib.heap.analysis.ShortestDistanceVisitor shortestDistanceVisitor = new com.android.tools.perflib.heap.analysis.ShortestDistanceVisitor ( ) ; shortestDistanceVisitor.doVisit ( getGCRoots ( ) ) ; } }
public void imageLoaded ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( this ) { loadImage ( ) ; crosshairLocation = model.getCrosshairLocation ( ) ; zoom = model.getZoom ( ) ; overlayImage = model.getOverlayImage ( ) ; } } } ) ; doRedraw ( ) ; }
public void testPlus ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.PLUS ) ; assertEquals ( ( "" + ( ( ( ( ( ( "build.gradle:9: Warning: Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:appcompat-v7:+) [GradleDynamicVersion]\n" + " compile \'com.android.support:appcompat-v7:+\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:10: Warning: Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:support-v4:21.0.+) [GradleDynamicVersion]\n" ) + " compile group: \'com.android.support\', name: \'support-v4\', version: \'21.0.+\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "gradle/Plus.gradle=>build.gradle" ) ) ; }
public void tearDown ( ) throws java.lang.Exception { if ( testSystemTzDataDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( testInstallDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( tempDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( tempDir ) ; } super . tearDown ( ) ; }
public void testVerifyAppStats ( ) throws java.lang.Exception { for ( int user : mUsers ) { runDeviceTests ( android.appsecurity.cts.StorageHostTest.PKG_A , android.appsecurity.cts.StorageHostTest.CLASS , "testAllocate" , user ) ; } java.lang.Thread.sleep ( 10000 ) ; getDevice ( ) . executeShellCommand ( "sync" ) ; for ( int user : mUsers ) { runDeviceTests ( android.appsecurity.cts.StorageHostTest.PKG_A , android.appsecurity.cts.StorageHostTest.CLASS , "testVerifySpaceManual" , user ) ; runDeviceTests ( android.appsecurity.cts.StorageHostTest.PKG_A , android.appsecurity.cts.StorageHostTest.CLASS , "testVerifySpaceApi" , user ) ; } }
void dispatch ( final java.lang.Object event , final com.google.common.eventbus.EventSubscriber subscriber ) { com.google.common.base.Preconditions.checkNotNull ( event ) ; com.google.common.base.Preconditions.checkNotNull ( subscriber ) ; executor.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.google.common.eventbus.AsyncEventBus.super . dispatch ( event , subscriber ) ; } } ) ; }
public boolean isNonTtyOrTtyOnVolteEnabledForSlot ( ) { if ( getBooleanCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL ) ) { return true ; } android.telecom.TelecomManager tm = ( ( android.telecom.TelecomManager ) ( mContext.getSystemService ( Context.TELECOM_SERVICE ) ) ) ; if ( tm == null ) { android.util.Log.w ( com.android.ims.ImsManager.TAG , "isNonTtyOrTtyOnVolteEnabledForSlot: telecom not available" ) ; return true ; } return ( tm.getCurrentTtyMode ( ) ) == ( android.telecom.TelecomManager.TTY_MODE_OFF ) ; }
public void run ( ) { byte [ ] digest = null ; try { digest = getPackageContentsDigest ( ) ; } catch ( java.io.IOException e ) { android.util.Log.w ( com.android.packageinstaller.InstallFlowAnalytics.TAG , "Failed to hash APK contents" , e ) ; } finally { java.lang.String digestHex = ( digest != null ) ? com.android.internal.util.HexDump.toHexString ( digest , false ) : "" ; com.android.packageinstaller.EventLogTags.writeInstallPackageAttempt ( resultAndFlags , totalElapsedTime , elapsedTimeTillPackageInfoObtained , elapsedTimeTillInstallButtonClick , digestHex ) ; } }
public static void main ( java.lang.String [ ] args ) { Main.testSingleInt ( ) ; Main.testSingleChar ( ) ; Main.testSingleShort ( ) ; Main.testSingleLong ( ) ; Main.testSingle ( ) ; Main.testMultiInt ( ) ; Main.testMulti ( ) ; java.lang.System.out.println ( "ReflectArrayTest passed" ) ; }
private void addStatusBarWindow ( ) { final int height = getStatusBarHeight ( ) ; final android.view.WindowManager.LayoutParams lp = new android.view.WindowManager.LayoutParams ( android.view.ViewGroup.LayoutParams.MATCH_PARENT , height , android.view.ViewGroup.LayoutParams.TYPE_STATUS_BAR , ( ( ( ( android.view.ViewGroup.LayoutParams.FLAG_NOT_FOCUSABLE ) | ( android.view.ViewGroup.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_SPLIT_TOUCH ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH ) ) , android.graphics.PixelFormat.TRANSLUCENT ) ; lp.flags |= android.view.ViewGroup.LayoutParams.FLAG_HARDWARE_ACCELERATED ; lp.gravity = getStatusBarGravity ( ) ; lp.setTitle ( "StatusBar" ) ; lp.packageName = mContext.getPackageName ( ) ; makeStatusBarView ( ) ; mWindowManager.addView ( mStatusBarWindow , lp ) ; }
public java.util.Collection < java.lang.String > getFilterTypes ( ) { com.google.common.collect.ImmutableList.Builder < java.lang.String > splitTypeBuilder = com.google.common.collect.ImmutableList.builder ( ) ; if ( ( densityFilter ) != null ) { splitTypeBuilder.add ( OutputFile.DENSITY ) ; } if ( ( abiFilter ) != null ) { splitTypeBuilder.add ( OutputFile.ABI ) ; } return splitTypeBuilder.build ( ) ; }
protected void addUserInputPages ( ) { com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractIncludeRefactoring ref = ( ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractIncludeRefactoring ) ( getRefactoring ( ) ) ) ; java.lang.String initialName = ref.getInitialName ( ) ; org.eclipse.core.resources.IFile sourceFile = ref.getSourceFile ( ) ; addPage ( new com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractIncludeWizard.InputPage ( mEditor.getProject ( ) , sourceFile , initialName ) ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding targetType = ( ( org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding ) ( x.qualification.resolvedType ) ) ; push ( makeThisReference ( info , targetType , true , scope ) ) ; } catch ( com.android.jack.ir.ast.JTypeLookupException e ) { throw translateException ( x , e ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
protected void displayNetworkSelectionSucceeded ( int msgArg1 ) { java.lang.String status = null ; if ( msgArg1 == ( com.android.phone.NetworkOperators.ALREADY_IN_AUTO_SELECTION ) ) { status = getContext ( ) . getResources ( ) . getString ( R.string.already_auto ) ; } else { status = getContext ( ) . getResources ( ) . getString ( R.string.registration_done ) ; } final com.android.phone.PhoneGlobals app = com.android.phone.PhoneGlobals.getInstance ( ) ; app.notificationMgr.postTransientNotification ( NotificationMgr.NETWORK_SELECTION_NOTIFICATION , status ) ; }
public void run ( ) { for ( com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions ) { if ( a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action ) { try { ( ( com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action ) ( a2 ) ) . getCallback ( ) . action ( a2 , key , ( ! isChecked ) ) ; } catch ( java.lang.Exception e ) { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine gre = mCanvas.getRulesEngine ( ) ; gre.logError ( "XML edit operation failed: %s" , e.toString ( ) ) ; } } } }
public static java.util.ArrayList < java.lang.Byte > primitiveArrayToArrayList ( byte [ ] arr ) { java.util.ArrayList < java.lang.Byte > arrayList = new java.util.ArrayList < > ( arr.length ) ; for ( byte b : arr ) { arrayList.add ( b ) ; } return arrayList ; }
private void createContents ( ) { org.eclipse.swt.widgets.TabFolder tabFolder = new org.eclipse.swt.widgets.TabFolder ( mShell , org.eclipse.swt.SWT.NONE ) ; com.android.sdkuilib.ui.GridDataBuilder.create ( tabFolder ) . fill ( ) . grab ( ) . hSpan ( 2 ) ; org.eclipse.swt.widgets.TabItem avdTabItem = new org.eclipse.swt.widgets.TabItem ( tabFolder , org.eclipse.swt.SWT.NONE ) ; avdTabItem.setText ( "Android Virtual Devices" ) ; createAvdTab ( tabFolder , avdTabItem ) ; org.eclipse.swt.widgets.TabItem devTabItem = new org.eclipse.swt.widgets.TabItem ( tabFolder , org.eclipse.swt.SWT.NONE ) ; devTabItem.setText ( "Device Definitions" ) ; createDeviceTab ( tabFolder , devTabItem ) ; }
public void canUnrequestTethering ( ) throws java.lang.Exception { initTetheredStateMachine ( android.net.ConnectivityManager.TETHERING_BLUETOOTH , null ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_UNREQUESTED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder ( mNMService , mStatsService , mTetherHelper ) ; inOrder.verify ( mNMService ) . untetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mTetherHelper ) . updateInterfaceState ( mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; inOrder.verify ( mTetherHelper ) . updateLinkProperties ( org.mockito.Matchers.eq ( mTestedSm ) , org.mockito.Matchers.any ( android.net.LinkProperties.class ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
public java.util.List < com.android.ide.common.api.MenuAction > callGetContextMenu ( com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy selectedNode ) { com.android.ide.common.api.IViewRule rule = loadRule ( selectedNode.getNode ( ) ) ; if ( rule != null ) { try { return rule.getContextMenu ( selectedNode ) ; } catch ( java.lang.Exception e ) { logError ( "%s.getContextMenu() failed: %s" , rule.getClass ( ) . getSimpleName ( ) , e.toString ( ) ) ; } } return null ; }
private int getParameterWordCount ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { int wordCount = ( method.isStatic ( ) ) ? 0 : Type.OBJECT.getWordCount ( ) ; for ( com.android.jack.ir.ast.JParameter param : method.getParams ( ) ) { if ( ( param.getMarker ( com.android.jack.transformations.lambda.CapturedVariable.class ) ) != null ) { continue ; } wordCount += com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( param.getType ( ) , ( ( param.getMarker ( com.android.jack.transformations.lambda.ForceClosureMarker.class ) ) != null ) ) . getWordCount ( ) ; } return wordCount ; }
public int getApplicationEnabledSetting ( java.lang.String packageName , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ; int uid = android.os.Binder.getCallingUid ( ) ; checkValidCaller ( uid , userId ) ; synchronized ( mPackages ) { return mSettings.getApplicationEnabledSettingLPr ( packageName , userId ) ; } }
private static void testClassVersion ( ) throws java.lang.Exception { java.lang.Class < ? > class_loader_class = java.lang.Class.forName ( "dalvik.system.InMemoryDexClassLoader" ) ; java.lang.reflect.Constructor < ? > ctor = class_loader_class.getConstructor ( java.nio.ByteBuffer.class , java.lang.ClassLoader.class ) ; java.lang.Class target = ( ( java.lang.ClassLoader ) ( ctor.newInstance ( java.nio.ByteBuffer.wrap ( art.Test912.DEX_BYTES ) , art.Test912.class . getClassLoader ( ) ) ) ) . loadClass ( "Transform" ) ; java.lang.System.out.println ( java.util.Arrays.toString ( art.Test912.getClassVersion ( target ) ) ) ; }
private org.jetbrains.plugins.terminal.ActionToolbar createToolbar ( @ org.jetbrains.annotations.Nullable final org.jetbrains.plugins.terminal.LocalTerminalDirectRunner terminalRunner , final org.jetbrains.plugins.terminal.JBTabbedTerminalWidget terminal , com.intellij.openapi.wm.ToolWindow toolWindow ) { org.jetbrains.plugins.terminal.DefaultActionGroup group = new org.jetbrains.plugins.terminal.DefaultActionGroup ( ) ; if ( terminalRunner != null ) { group.add ( new org.jetbrains.plugins.terminal.TerminalView.NewSession ( terminalRunner , terminal ) ) ; group.add ( new org.jetbrains.plugins.terminal.TerminalView.CloseSession ( terminal , toolWindow ) ) ; } return org.jetbrains.plugins.terminal.ActionManager.getInstance ( ) . createActionToolbar ( ActionPlaces.UNKNOWN , group , false ) ; }
public void testAesGcm96Udp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM , android.net.cts.IpSecManagerTest.AEAD_KEY , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , null , null , authCrypt , false , 1 , true ) ; }
private void enforceMediaPermissions ( android.content.ComponentName compName , int pid , int uid , int resolvedUserId ) { if ( isCurrentVolumeController ( uid ) ) return ; if ( ( ( getContext ( ) . checkPermission ( android.Manifest.permission.MEDIA_CONTENT_CONTROL , pid , uid ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) && ( ! ( isEnabledNotificationListener ( compName , android.os.UserHandle.getUserId ( uid ) , resolvedUserId ) ) ) ) { throw new java.lang.SecurityException ( "Missing permission to control media." ) ; } }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType.isCreate ( ) ) { java.lang.String fillParent = getFillParentValueName ( ) ; com.android.ide.common.api.INode hint = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; hint.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Hint" ) ; hint.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/hint" ) ; hint.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; com.android.ide.common.api.INode primary = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; primary.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Primary" ) ; primary.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/primary" ) ; primary.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_BELOW , "@android:id/hint" ) ; primary.setAttribute ( com.android.util.XmlUtils.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; } }
public void getIccCardStatus ( android.os.Message result ) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy ( result ) ; if ( radioProxy != null ) { com.android.internal.telephony.RILRequest rr = obtainRequest ( com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; try { radioProxy.getIccCardStatus ( rr.mSerial ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { handleRadioProxyExceptionForRR ( rr , "getIccCardStatus" , e ) ; } } }
public void invokespecial ( final java.lang.String owner , final java.lang.String name , final java.lang.String desc , final boolean itf ) { if ( ( api ) < ( org.objectweb.asm.Opcodes.ASM5 ) ) { if ( itf ) { throw new java.lang.IllegalArgumentException ( "INVOKESPECIAL on interfaces require ASM 5" ) ; } invokespecial ( owner , name , desc ) ; return ; } mv.visitMethodInsn ( Opcodes.INVOKESPECIAL , owner , name , desc , itf ) ; }
private void invokeCompleteCallback ( boolean success ) { if ( ( mCompleteCallback ) != null ) { try { android.os.Message msg = android.os.Message.obtain ( null , BeamManager.MSG_BEAM_COMPLETE ) ; msg.arg1 = ( success ) ? 1 : 0 ; mCompleteCallback.send ( msg ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.nfc.beam.BeamSendService.TAG , "failed to invoke Beam complete callback" , e ) ; } } }
public void testPullExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mCapabilities = android.telecom.Connection.CAPABILITY_CAN_PULL_CALL ; mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . pullExternalCall ( org.mockito.Matchers.eq ( ids.mConnectionId ) , org.mockito.Matchers.any ( ) ) ; }
public void verifyModifyOriginalConfig ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; config.homeSp.fqdn = "test1" ; mProvider = createProvider ( config ) ; verifyInstalledConfig ( config , true ) ; config.homeSp.fqdn = "test2" ; verifyInstalledConfig ( config , false ) ; }
protected com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode createModel ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode parent , org.w3c.dom.Element element ) { java.util.List < org.w3c.dom.Element > children = com.android.ide.eclipse.adt.internal.editors.layout.gle2.DomUtilities.getChildren ( element ) ; java.lang.String fqcn = ( com.android.ide.common.layout.LayoutConstants.ANDROID_WIDGET_PREFIX ) + ( element.getTagName ( ) ) ; boolean hasChildren = ( children.size ( ) ) > 0 ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode node = createNode ( parent , fqcn , hasChildren ) ; node.setXmlNode ( element ) ; for ( org.w3c.dom.Element child : children ) { createModel ( node , child ) ; } return node ; }
private void updateOnTransition ( boolean onEntry ) { if ( ( ( mKeyguardManager ) != null ) && ( ! ( mKeyguardManager.inKeyguardRestrictedInputMode ( ) ) ) ) { mCallLogQueryHandler.markNewCallsAsOld ( ) ; if ( ! onEntry ) { mCallLogQueryHandler.markMissedCallsAsRead ( ) ; } com.android.dialer.calllog.CallLogNotificationsHelper.removeMissedCallNotifications ( ) ; com.android.dialer.calllog.CallLogNotificationsHelper.updateVoicemailNotifications ( getActivity ( ) ) ; } }
public void dataCallListChanged ( int indicationType , java.util.ArrayList < android.hardware.radio.V1_0.SetupDataCallResult > dcList ) { mRil.processIndication ( indicationType ) ; java.util.ArrayList < com.android.internal.telephony.dataconnection.DataCallResponse > response = com.android.internal.telephony.RIL.convertHalDcList ( dcList ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_DATA_CALL_LIST_CHANGED , response ) ; mRil.mDataCallListChangedRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
public void testCookiesWithoutLeadingPeriod ( ) throws java.lang.Exception { java.net.CookieManager cm = new java.net.CookieManager ( createCookieStore ( ) , null ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > responseHeaders = java.util.Collections.singletonMap ( "Set-Cookie" , java.util.Collections.singletonList ( "a=b; domain=chargepoint.com" ) ) ; java.net.URI uri = new java.net.URI ( "http://services.chargepoint.com" ) ; cm.put ( uri , responseHeaders ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > cookies = cm.get ( new java.net.URI ( "https://webservices.chargepoint.com/foo" ) , responseHeaders ) ; assertEquals ( 0 , cookies.size ( ) ) ; }
public void allowLowRssiIfDataIsMoving ( ) throws java.lang.Exception { mWifiInfo.setRssi ( ( - 80 ) ) ; mWifiInfo.setLinkSpeed ( 6 ) ; mWifiInfo.txSuccessRate = 5.1 ; mWifiInfo.rxSuccessRate = 5.1 ; for ( int i = 0 ; i < 10 ; i ++ ) { mWifiScoreReport.calculateAndReportScore ( mWifiInfo , mNetworkAgent , 0 , mWifiMetrics ) ; } int score = mWifiInfo.score ; org.junit.Assert.assertTrue ( ( score > ( com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE ) ) ) ; }
public void setSurface ( android.view.Surface s ) { mOutSurface = s ; update ( ) ; }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.a2dpsink.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; int connectionState = mStateMachine.getConnectionState ( device ) ; if ( ( connectionState == ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) || ( connectionState == ( android.bluetooth.BluetoothProfile.STATE_CONNECTING ) ) ) { return false ; } if ( ( getPriority ( device ) ) == ( android.bluetooth.BluetoothProfile.PRIORITY_OFF ) ) { return false ; } mStateMachine.sendMessage ( A2dpSinkStateMachine.CONNECT , device ) ; return true ; }
public boolean shouldOverrideKeyEvent ( android.view.KeyEvent event ) { if ( event.isSystem ( ) ) return true ; org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "shouldOverrideKeyEvent" ) ; boolean result = mWebViewClient.shouldOverrideKeyEvent ( mWebView , event ) ; org.chromium.base.TraceEvent.end ( ) ; return result ; }
public int compare ( java.lang.Object o1 , java.lang.Object o2 ) { return o1.toString ( ) . compareTo ( o2.toString ( ) ) ; }
protected com.android.sched.vfs.OutputVFile getOutputDex ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir , int dexCount ) throws com.android.jack.backend.dex.DexWritingException { assert dexCount >= 1 ; java.lang.String dexName ; if ( dexCount == 1 ) { dexName = DexFileWriter.DEX_FILENAME ; } else { dexName = ( ( DexFileWriter.DEX_PREFIX ) + dexCount ) + ( BinaryKind.DEX.getFileExtension ( ) ) ; } try { return outputVDir.createOutputVFile ( new com.android.sched.vfs.VPath ( dexName , '/' ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new com.android.jack.backend.dex.DexWritingException ( e ) ; } }
public void testInstall_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle1 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , 2 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_SUCCESS , installer.installWithErrorCode ( bundle1.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; libcore.tzdata.update2.TimeZoneBundle bundle2 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer.installWithErrorCode ( bundle2.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; }
public static void computeDot ( android.renderscript.cts.TestDot.ArgumentsFloatNFloatNFloat args ) { android.renderscript.cts.Floaty sum = new android.renderscript.cts.Floaty ( 0.0F ) ; for ( int i = 0 ; i < ( args.inLhs.length ) ; i ++ ) { android.renderscript.cts.Floaty a = new android.renderscript.cts.Floaty ( args.inLhs [ i ] ) ; android.renderscript.cts.Floaty b = new android.renderscript.cts.Floaty ( args.inRhs [ i ] ) ; sum.add ( android.renderscript.cts.Floaty.multiply ( a , b ) ) ; } args.out = sum ; args.out.setMinimumError ( 1 , 4 ) ; }
private com.android.builder.VariantConfiguration getVariant ( ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override protected void validate ( ) { } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
public void testLibProguard ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguard" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_OUTPUTS ) ) + "/proguard/release" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int proguardInt -> a" } ) ; }
public void testDeserialize ( ) { java.lang.String json = "{\"startLine\":11,\"startColumn\":22,\"startOffset\":33," + ( "\"endLine\":66,\"endColumn\":77,\"endOffset\":88, " + "\"invalid\":[\"ignored\"]}" ) ; com.android.ide.common.blame.SourcePosition range = mGson.fromJson ( json , com.android.ide.common.blame.SourcePosition.class ) ; org.junit.Assert.assertEquals ( range , new com.android.ide.common.blame.SourcePosition ( 11 , 22 , 33 , 66 , 77 , 88 ) ) ; }
public int idmap ( java.lang.String targetApkPath , java.lang.String overlayApkPath , int uid ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "idmap" ) ; builder.append ( ' ' ) ; builder.append ( targetApkPath ) ; builder.append ( ' ' ) ; builder.append ( overlayApkPath ) ; builder.append ( ' ' ) ; builder.append ( uid ) ; return execute ( builder.toString ( ) ) ; }
void visit ( java.lang.Package pkg ) { if ( ( ( mFindMaxApi ) && ( pkg instanceof com.android.sdklib.internal.repository.packages.PlatformPackage ) ) && ( ! ( pkg.isLocal ( ) ) ) ) { com.android.sdklib.internal.repository.packages.PlatformPackage pp = ( ( com.android.sdklib.internal.repository.packages.PlatformPackage ) ( pkg ) ) ; com.android.sdklib.AndroidVersion v = pp.getAndroidVersion ( ) ; if ( ! ( v.isPreview ( ) ) ) { int api = v.getApiLevel ( ) ; if ( api > ( mApiLevel ) ) { mApiLevel = api ; } } } }
private java.io.File getWrittenResources ( ) throws com.android.ide.common.res2.MergingException , java.io.IOException { com.android.ide.common.res2.ResourceMerger resourceMerger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; com.android.ide.common.res2.MergedResourceWriter writer = new com.android.ide.common.res2.MergedResourceWriter ( folder , mPngCruncher , false , false ) ; resourceMerger.mergeData ( writer , false ) ; return folder ; }
static void deadInduction ( ) { int dead = 0 ; for ( int i = 0 ; i < ( Main.a.length ) ; i ++ ) { Main.a [ i ] = ( Main.novec [ ( 2 * i ) ] ) + 1 ; dead += 5 ; } }
public void testEnums ( ) throws java.lang.Exception { org.json.JSONArray a1 = new org.json.JSONArray ( java.lang.annotation.RetentionPolicy.values ( ) ) ; assertEquals ( "[\"SOURCE\",\"CLASS\",\"RUNTIME\"]" , a1.toString ( ) ) ; org.json.JSONArray a2 = new org.json.JSONArray ( libcore.org.json.JSONArrayTest.MyEnum.values ( ) ) ; assertEquals ( "[null,null,null]" , a2.toString ( ) ) ; }
public void iccExchangeSimIO ( int fileID , int command , int p1 , int p2 , int p3 , java.lang.String pathID , android.os.Message response ) { mCi.iccIO ( command , fileID , pathID , p1 , p2 , p3 , null , null , mHandler.obtainMessage ( com.android.internal.telephony.uicc.UiccProfile.EVENT_SIM_IO_DONE , response ) ) ; }
public void testRegistrationConfigConstructorsEqual ( ) { android.telephony.ims.stub.ImsFeatureConfiguration testConfig = new android.telephony.ims.stub.ImsFeatureConfiguration ( new int [ ] { android.telephony.ims.feature.ImsFeature.FEATURE_MMTEL , android.telephony.ims.feature.ImsFeature.FEATURE_RCS } ) ; android.telephony.ims.stub.ImsFeatureConfiguration testConfig2 = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder ( ) . addFeature ( ImsFeature.FEATURE_RCS ) . addFeature ( ImsFeature.FEATURE_MMTEL ) . build ( ) ; junit.framework.Assert.assertEquals ( testConfig , testConfig2 ) ; }
public com.google.common.base.Optional < java.lang.String > formatToE164 ( com.android.dialer.DialerPhoneNumber number ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; if ( number.hasDialerInternalPhoneNumber ( ) ) { com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber = com.android.dialer.phonenumberproto.Converter.protoToPojo ( number.getDialerInternalPhoneNumber ( ) ) ; if ( phoneNumberUtil.isValidNumber ( phoneNumber ) ) { return com.google.common.base.Optional.fromNullable ( phoneNumberUtil.format ( phoneNumber , PhoneNumberFormat.E164 ) ) ; } } return com.google.common.base.Optional.absent ( ) ; }
public void crunchPng ( java.io.File from , java.io.File to , @ com.android.annotations.Nullable java.util.Map < java.lang.String , java.lang.String > envVariableMap ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.String [ ] command = new java.lang.String [ ] { mAaptLocation , "s" , "-i" , from.getAbsolutePath ( ) , "-o" , to.getAbsolutePath ( ) } ; mCommandLineRunner.runCmdLine ( command , envVariableMap ) ; }
private void closeSearch ( boolean animate ) { com.android.dialer.common.Assert.checkArgument ( isSearchVisible ( ) ) ; if ( isDialpadVisible ( ) ) { hideDialpad ( animate , true ) ; } else if ( ! ( fab.isShown ( ) ) ) { fab.show ( ) ; } showBottomNav ( ) ; toolbar.collapse ( animate ) ; mainActivity.getFragmentManager ( ) . beginTransaction ( ) . remove ( getSearchFragment ( ) ) . commit ( ) ; getDialpadFragment ( ) . clearDialpad ( ) ; }
public int getState ( ) { if ( android.bluetooth.BluetoothSap.VDBG ) android.bluetooth.BluetoothSap.log ( "getState()" ) ; final android.bluetooth.IBluetoothSap service = mService ; if ( service != null ) { try { return service.getState ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothSap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothSap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothSap.DBG ) android.bluetooth.BluetoothSap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return android.bluetooth.BluetoothSap.STATE_ERROR ; }
public java.lang.String getOriginalApplicationId ( ) { if ( mType.isForTesting ( ) ) { return getApplicationId ( ) ; } return getPackageFromManifest ( ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "VoicemailTosMessageCreator.getPromoMessage" , "acknowledge clicked" ) ; if ( isVoicemailTranscriptionAvailable ( ) ) { com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) . setVoicemailTranscriptionEnabled ( context , status.getPhoneAccountHandle ( ) , true ) ; } recordTosAcceptance ( ) ; recordFeatureAcknowledgement ( ) ; statusReader.refresh ( ) ; }
public java.lang.Object getCategoryKey ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ) { return ( ( com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ) ( pkg ) ) . getAndroidVersion ( ) ; } else if ( ( ( pkg instanceof com.android.sdklib.internal.repository.packages.ToolPackage ) || ( pkg instanceof com.android.sdklib.internal.repository.packages.PlatformToolPackage ) ) || ( pkg instanceof com.android.sdklib.internal.repository.packages.BuildToolPackage ) ) { if ( pkg.getRevision ( ) . isPreview ( ) ) { return PkgCategoryApi.KEY_TOOLS_PREVIEW ; } else { return PkgCategoryApi.KEY_TOOLS ; } } else { return PkgCategoryApi.KEY_EXTRA ; } }
private int readHalf ( long offset ) throws java.io.IOException { mFile.seek ( offset ) ; mFile.readFully ( mBuffer , 0 , mWordSize ) ; final int answer ; if ( ( mEndian ) == ( android.os.cts.ReadElf.ELFDATA2LSB ) ) { answer = ( ( mBuffer [ 1 ] ) << 8 ) | ( mBuffer [ 0 ] ) ; } else { answer = ( ( mBuffer [ 0 ] ) << 8 ) | ( mBuffer [ 1 ] ) ; } return answer ; }
protected static void loadLinkerJniLibrary ( ) { java.lang.String libName = ( "lib" + ( org.chromium.base.library_loader.Linker.LINKER_JNI_LIBRARY ) ) + ".so" ; if ( org.chromium.base.library_loader.Linker.DEBUG ) { org.chromium.base.Log.i ( org.chromium.base.library_loader.Linker.TAG , ( "Loading " + libName ) ) ; } try { java.lang.System.loadLibrary ( org.chromium.base.library_loader.Linker.LINKER_JNI_LIBRARY ) ; } catch ( java.lang.UnsatisfiedLinkError e ) { org.chromium.base.Log.w ( org.chromium.base.library_loader.Linker.TAG , ( ( ( ( "Couldn't load " + libName ) + ", trying " ) + libName ) + ".cr" ) ) ; java.lang.System.loadLibrary ( ( ( org.chromium.base.library_loader.Linker.LINKER_JNI_LIBRARY ) + ".cr" ) ) ; } }
public void setUp ( ) throws java.lang.Exception { spf = javax.xml.parsers.SAXParserFactory.newInstance ( ) ; is1 = getClass ( ) . getResourceAsStream ( "/simple.xml" ) ; org.apache.harmony.tests.javax.xml.parsers.SAXParserFactoryTest.ns = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; org.apache.harmony.tests.javax.xml.parsers.SAXParserFactoryTest.attr = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; org.apache.harmony.tests.javax.xml.parsers.SAXParserFactoryTest.el = new java.util.Vector < java.lang.String > ( ) ; }
private com.android.builder.core.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.core.VariantConfiguration variant = new com.android.builder.core.VariantConfiguration ( mDefaultConfig , new com.android.builder.core.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.core.MockSourceProvider ( "debug" ) , VariantType.DEFAULT , null ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest ( ) { return versionName ; } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.core.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
void whitelistOppDevice ( android.bluetooth.BluetoothDevice device ) { if ( com.android.nfc.beam.BeamTransferManager.DBG ) android.util.Log.d ( com.android.nfc.beam.BeamTransferManager.TAG , ( ( "Whitelisting " + device ) + " for BT OPP" ) ) ; android.content.Intent intent = new android.content.Intent ( com.android.nfc.beam.BeamTransferManager.ACTION_WHITELIST_DEVICE ) ; intent.setPackage ( com.android.nfc.beam.BeamTransferManager.BLUETOOTH_PACKAGE ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; mContext.sendBroadcastAsUser ( intent , UserHandle.CURRENT ) ; }
private static java.lang.String getDefaultSignatureAlgorithmForKeyAlgorithm ( java.lang.String algorithm ) { if ( "RSA" . equalsIgnoreCase ( algorithm ) ) { return "sha256WithRSA" ; } else if ( "EC" . equalsIgnoreCase ( algorithm ) ) { return "sha256WithECDSA" ; } else { throw new java.lang.IllegalArgumentException ( ( "Unsupported key type " + algorithm ) ) ; } }
public void testCallbackFiltering1 ( ) throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback ( android.telephony.mbms.DownloadStateCallback.PROGRESS_UPDATES ) ; android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build ( ) ; mDownloadSession.registerStateCallback ( request , mCallbackExecutor , callback ) ; mMiddlewareControl.fireOnStateUpdated ( null , null , 0 ) ; assertNull ( callback.waitOnStateUpdated ( android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT ) ) ; mMiddlewareControl.fireOnProgressUpdated ( null , null , 0 , 0 , 0 , 0 ) ; assertNotNull ( callback.waitOnProgressUpdated ( android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT ) ) ; }
java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hearingaid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; synchronized ( mStateMachines ) { java.util.List < android.bluetooth.BluetoothDevice > devices = new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; for ( com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values ( ) ) { if ( sm.isConnected ( ) ) { devices.add ( sm.getDevice ( ) ) ; } } return devices ; } }
public static java.lang.String dexVersionToMagic ( @ javax.annotation.Nonnegative int dexVersion ) { return ( ( ( com.android.jack.dx.dex.DexFormat.MAGIC_PREFIX ) + ( com.android.jack.dx.dex.DexFormat.DEX_VERSION_PREFIX ) ) + dexVersion ) + ( com.android.jack.dx.dex.DexFormat.MAGIC_SUFFIX ) ; }
public boolean getRoamingCapabilities ( com.android.server.wifi.WifiNative.RoamingCapabilities capabilities ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "getRoamingCapabilities " ) ; if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getRoamingCapabilities ( capabilities ) ; } else { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "getRoamingCapabilities not supported" ) ; return false ; } }
public final void updateAAD ( byte [ ] input ) { if ( input == null ) { throw new java.lang.IllegalArgumentException ( "input == null" ) ; } if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( ( input.length ) == 0 ) { return ; } getSpi ( ) . engineUpdateAAD ( input , 0 , input.length ) ; }
private void broadcastCatCmdIntent ( com.android.internal.telephony.cat.CatCmdMessage cmdMsg ) { android.content.Intent intent = new android.content.Intent ( AppInterface.CAT_CMD_ACTION ) ; intent.putExtra ( "STK CMD" , cmdMsg ) ; intent.putExtra ( "SLOT_ID" , mSlotId ) ; com.android.internal.telephony.cat.CatLog.d ( this , ( ( ( "Sending CmdMsg: " + cmdMsg ) + " on slotid:" ) + ( mSlotId ) ) ) ; mContext.sendBroadcast ( intent ) ; }
public java.lang.String toString ( ) { if ( ( dex ) == null ) { return ( ( ( ( declaringClassIndex ) + " " ) + ( typeIndex ) ) + " " ) + ( nameIndex ) ; } return ( ( dex.typeNames ( ) . get ( typeIndex ) ) + "." ) + ( dex.strings ( ) . get ( nameIndex ) ) ; }
private boolean setupData ( java.lang.String reason ) { com.android.internal.telephony.cdma.CdmaDataConnection conn = findFreeDataConnection ( ) ; if ( conn == null ) { if ( DBG ) log ( "setupData: No free CdmaDataConnection found!" ) ; return false ; } mActiveDataConnection = conn ; mIsApnActive = true ; android.os.Message msg = obtainMessage ( ) ; msg.what = EVENT_DATA_SETUP_COMPLETE ; msg.obj = reason ; conn.connect ( msg ) ; setState ( State.INITING ) ; phone.notifyDataConnection ( reason ) ; return true ; }
public void setHighestPriority ( com.android.tv.dvr.data.ScheduledRecording schedule ) { if ( com.android.tv.common.SoftPreconditions.checkState ( mDataManager.isDvrScheduleLoadFinished ( ) ) ) { long newPriority = mScheduleManager.suggestHighestPriority ( schedule ) ; if ( newPriority != ( schedule.getPriority ( ) ) ) { mDataManager.updateScheduledRecording ( com.android.tv.dvr.data.ScheduledRecording.buildFrom ( schedule ) . setPriority ( newPriority ) . build ( ) ) ; } } }
final void get ( long [ ] dst , int dstOffset , int longCount ) { int byteCount = checkGetBounds ( SizeOf.LONG , dst.length , dstOffset , longCount ) ; this . block.peekLongArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , longCount , order.needsSwap ) ; position += byteCount ; }
public static java.lang.invoke.MethodHandle filterArguments ( java.lang.invoke.MethodHandle target , int pos , java.lang.invoke.MethodHandle ... filters ) { java.lang.invoke.MethodHandles.filterArgumentsCheckArity ( target , pos , filters ) ; for ( int i = 0 ; i < ( filters.length ) ; ++ i ) { java.lang.invoke.MethodHandles.filterArgumentChecks ( target , ( i + pos ) , filters [ i ] ) ; } return new java.lang.invoke.Transformers.FilterArguments ( target , pos , filters ) ; }
public void visitArrayElementValue ( proguard.classfile.visitor.Clazz clazz , proguard.classfile.visitor.Annotation annotation , proguard.classfile.visitor.ArrayElementValue arrayElementValue ) { println ( ( ( ( ( visitorInfo ( arrayElementValue ) ) + " Array element value [" ) + ( ( arrayElementValue.u2elementNameIndex ) == 0 ? "(default)" : arrayElementValue.getMethodName ( clazz ) ) ) + "]:" ) ) ; indent ( ) ; arrayElementValue.elementValuesAccept ( clazz , annotation , this ) ; outdent ( ) ; }
private boolean checkForEarpieceSupport ( ) { android.media.AudioDeviceInfo [ ] deviceList = mAudioManager.getDevices ( AudioManager.GET_DEVICES_OUTPUTS ) ; for ( android.media.AudioDeviceInfo device : deviceList ) { if ( ( device.getType ( ) ) == ( android.media.AudioDeviceInfo.TYPE_BUILTIN_EARPIECE ) ) { return true ; } } return false ; }
public static void log ( int severity , java.lang.String format , java.lang.Object ... args ) { java.lang.String message = java.lang.String.format ( format , args ) ; org.eclipse.core.runtime.Status status = new org.eclipse.core.runtime.Status ( severity , com.android.ide.eclipse.adt.AdtPlugin.PLUGIN_ID , message ) ; if ( ( com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) != null ) { com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . getLog ( ) . log ( status ) ; } else { ( severity < ( org.eclipse.core.runtime.IStatus.ERROR ) ? java.lang.System.out : java.lang.System.err ) . println ( status.toString ( ) ) ; } }
public void testAesCbcHmacSha1Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 ) ; }
public void test_setOption ( ) throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open ( ) ; dc.setOption ( java.net.StandardSocketOptions.SO_SNDBUF , 4096 ) ; assertEquals ( 4096 , ( ( int ) ( dc.getOption ( java.net.StandardSocketOptions.SO_SNDBUF ) ) ) ) ; assertEquals ( 4096 , dc.socket ( ) . getSendBufferSize ( ) ) ; dc.close ( ) ; try { dc.setOption ( java.net.StandardSocketOptions.SO_SNDBUF , 4096 ) ; fail ( ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
private static boolean hasOperand ( com.intellij.psi.PsiExpression operand , java.util.List < com.intellij.psi.PsiMethodCallExpression > list ) { for ( com.intellij.psi.PsiMethodCallExpression method : list ) { com.intellij.psi.PsiElement operand2 = method.getMethodExpression ( ) . getQualifier ( ) ; if ( ( operand2 != null ) && ( operand.getText ( ) . equals ( operand2.getText ( ) ) ) ) { return true ; } } return false ; }
public void registerAndUnregisterIdling ( ) throws java.lang.Exception { android.support.test.espresso.base.OnDemandIdlingResource r1 = new android.support.test.espresso.base.OnDemandIdlingResource ( "r1" ) ; r1.forceIdleNow ( ) ; java.util.concurrent.FutureTask < java.lang.Boolean > resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; junit.framework.Assert.assertTrue ( resourcesIdle.get ( ) ) ; r1.reset ( ) ; registry.unregisterResources ( com.google.common.collect.Lists.newArrayList ( r1 ) ) ; resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; junit.framework.Assert.assertTrue ( resourcesIdle.get ( ) ) ; }
public void hasMyPackageNameTesting ( ) { java.lang.String targetPackage = android.support.test.InstrumentationRegistry.getTargetContext ( ) . getPackageName ( ) ; android.content.ComponentName targetComponent = new android.content.ComponentName ( targetPackage , ( targetPackage + ".SomeClass " ) ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasMyPackageName ( ) . matches ( targetComponent ) ) ; }
public synchronized void release ( ) throws java.io.IOException { java.nio.channels.Channel ch = acquiredBy ( ) ; if ( ! ( ch.isOpen ( ) ) ) throw new java.nio.channels.ClosedChannelException ( ) ; if ( valid ) { if ( ch instanceof sun.nio.ch.FileChannelImpl ) ( ( sun.nio.ch.FileChannelImpl ) ( ch ) ) . release ( this ) ; else if ( ch instanceof sun.nio.ch.AsynchronousFileChannelImpl ) ( ( sun.nio.ch.AsynchronousFileChannelImpl ) ( ch ) ) . release ( this ) ; else throw new java.lang.AssertionError ( ) ; valid = false ; } }
public void testGetValues008_Double ( ) { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( StackTrace002Debuggee.DOUBLE_METHOD ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value oldValue = new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.DOUBLE_PARAM_VALUE ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo suspensionMethodInfo = tester.addTestMethod ( "breakpointDouble" ) ; suspensionMethodInfo.addVariable ( "param" , oldValue ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointDouble" ) ; methodInfo.addVariable ( "param" , oldValue ) ; runStackFrameTest ( tester , suspensionMethodInfo ) ; }
private final boolean updateOomAdjLocked ( com.android.server.am.ProcessRecord app , int cachedAdj , com.android.server.am.ProcessRecord TOP_APP , boolean doingAll , long now ) { if ( ( app.thread ) == null ) { return false ; } computeOomAdjLocked ( app , cachedAdj , TOP_APP , doingAll , now ) ; return applyOomAdjLocked ( app , doingAll , now , android.os.SystemClock.elapsedRealtime ( ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( ( options.coreLibrary ? "__desugar__/" : "" ) ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; reader.accept ( visitor , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; java.lang.String filename = ( rewriter.unprefix ( lambdaClass.getValue ( ) . desiredInternalName ( ) ) ) + ".class" ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , filename , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( "ServerSocket: Type: " ) ; switch ( mSocket.getConnectionType ( ) ) { case BluetoothSocket.TYPE_RFCOMM : { sb.append ( "TYPE_RFCOMM" ) ; break ; } case BluetoothSocket.TYPE_L2CAP : { sb.append ( "TYPE_L2CAP" ) ; break ; } case BluetoothSocket.TYPE_L2CAP_LE : { sb.append ( "TYPE_L2CAP_LE" ) ; break ; } case BluetoothSocket.TYPE_SCO : { sb.append ( "TYPE_SCO" ) ; break ; } } sb.append ( " Channel: " ) . append ( mChannel ) ; return sb.toString ( ) ; }
public void bind ( java.net.SocketAddress localAddr ) throws java.io.IOException { if ( channel.isConnected ( ) ) { throw new java.nio.channels.AlreadyConnectedException ( ) ; } if ( ( java.nio.SocketChannelImpl.SOCKET_STATUS_PENDING ) == ( channel.status ) ) { throw new java.nio.channels.ConnectionPendingException ( ) ; } super . bind ( localAddr ) ; channel.onBind ( false ) ; }
public void computeScroll ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { computeScroll ( ) ; } } ) ; return ; } mAwContents.computeScroll ( ) ; }
private void registerNotificationRequestFromNative ( byte [ ] address , int eventId , int param ) { final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler ; if ( handler == null ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) { android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , "registerNotificationRequestFromNative: mHandler is already null" ) ; } return ; } android.os.Message msg = handler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_REGISTER_NOTIFICATION , eventId , param ) ; msg.obj = address ; handler.sendMessage ( msg ) ; }
public void testOverlay1Content ( ) throws java.lang.Exception { java.io.File project = buildProject ( "overlay1" , BasePlugin.GRADLE_MIN_VERSION ) ; java.io.File drawableOutput = new java.io.File ( project , ( ( "build/" + ( com.android.build.gradle.BasePlugin.FD_INTERMEDIATES ) ) + "/res/debug/drawable" ) ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "no_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "type_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; }
public void removeRemotePackage ( java.lang.String remoteFilePath ) throws com.android.ddmlib.InstallException { try { executeShellCommand ( java.lang.String.format ( "rm \"%1$s\"" , remoteFilePath ) , new com.android.ddmlib.NullOutputReceiver ( ) , com.android.ddmlib.Device.INSTALL_TIMEOUT_MINUTES , java.util.concurrent.TimeUnit.MINUTES ) ; } catch ( java.io.IOException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } catch ( com.android.ddmlib.TimeoutException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } catch ( com.android.ddmlib.AdbCommandRejectedException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } catch ( com.android.ddmlib.ShellCommandUnresponsiveException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } }
public com.google.common.base.Optional < java.lang.String > formatToE164 ( com.android.dialer.DialerPhoneNumber number ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; if ( number.hasDialerInternalPhoneNumber ( ) ) { return com.google.common.base.Optional.of ( phoneNumberUtil.format ( com.android.dialer.phonenumberproto.Converter.protoToPojo ( number.getDialerInternalPhoneNumber ( ) ) , PhoneNumberFormat.E164 ) ) ; } return com.google.common.base.Optional.absent ( ) ; }
protected com.intellij.updater.ValidationResult doValidateNotChanged ( java.io.File toFile , com.intellij.updater.ValidationResult.Kind kind , com.intellij.updater.ValidationResult.Action action ) throws java.io.IOException { if ( toFile.exists ( ) ) { if ( isModified ( toFile ) ) { return new com.intellij.updater.ValidationResult ( kind , myPath , action , ValidationResult.MODIFIED_MESSAGE , ( myPatch.isStrict ( ) ? ValidationResult.Option.NONE : ValidationResult.Option.IGNORE ) ) ; } } else if ( ! ( isOptional ) ) { return new com.intellij.updater.ValidationResult ( kind , myPath , action , ValidationResult.ABSENT_MESSAGE , ( myPatch.isStrict ( ) ? ValidationResult.Option.NONE : ValidationResult.Option.IGNORE ) ) ; } return null ; }
public com.android.sched.util.log.tracer.AbstractTracer.TracerEvent start ( @ javax.annotation.Nonnull com.android.sched.util.log.EventType type ) { eventCount.incrementAndGet ( ) ; java.util.Stack < com.android.sched.util.log.tracer.AbstractTracer.TracerEvent > threadPendingEvents = pendingEvents.get ( ) ; com.android.sched.util.log.tracer.AbstractTracer.TracerEvent parent = null ; if ( ! ( threadPendingEvents.isEmpty ( ) ) ) { parent = threadPendingEvents.peek ( ) ; } com.android.sched.util.log.tracer.AbstractTracer.TracerEvent newEvent = new com.android.sched.util.log.tracer.AbstractTracer.TracerEvent ( parent , type ) ; threadPendingEvents.push ( newEvent ) ; return newEvent ; }
public void TestFunctionalEquivalent ( ) { java.lang.String [ ] calCases = new java.lang.String [ ] { "t" , "en_US_POSIX" , "en@calendar=gregorian" , "f" , "ja_JP_TOKYO" , "ja@calendar=gregorian" , "f" , "ja_JP_TOKYO@calendar=japanese" , "ja@calendar=japanese" , "t" , "sr@calendar=gregorian" , "sr@calendar=gregorian" , "t" , "en" , "en@calendar=gregorian" , "t" , "th_TH" , "th@calendar=gregorian" , "t" , "th_TH@calendar=gregorian" , "th@calendar=gregorian" , "f" , "th_TH_Bangkok" , "th@calendar=gregorian" } ; logln ( "Testing functional equivalents for calendar..." ) ; getFunctionalEquivalentTestCases ( ICUData.ICU_BASE_NAME , android.icu.util.Calendar.class . getClassLoader ( ) , android.icu.dev.test.util.ICUResourceBundleTest.CALENDAR_RESNAME , android.icu.dev.test.util.ICUResourceBundleTest.CALENDAR_KEYWORD , false , calCases ) ; logln ( "Testing error conditions:" ) ; try { java.lang.ClassLoader cl = android.icu.text.BreakIterator.class . getClassLoader ( ) ; android.icu.impl.ICUResourceBundle.getFunctionalEquivalent ( ICUData.ICU_BRKITR_BASE_NAME , cl , "calendar" , "calendar" , new android.icu.util.ULocale ( "ar_EG@calendar=islamic" ) , new boolean [ 1 ] , true ) ; errln ( "Err: expected MissingResourceException" ) ; } catch ( java.util.MissingResourceException t ) { logln ( ( "expected MissingResourceException caught (PASS): " + ( t.toString ( ) ) ) ) ; } }
public static com.android.jack.dx.rop.type.Prototype getPrototypeFromPolymorphicCall ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPolymorphicMethodCall call ) { java.util.List < com.android.jack.ir.ast.JType > parameterTypes = call.getMethodIdWide ( ) . getParamTypes ( ) ; com.android.jack.dx.rop.type.StdTypeList stdTypeList = new com.android.jack.dx.rop.type.StdTypeList ( parameterTypes.size ( ) ) ; int idx = 0 ; for ( com.android.jack.ir.ast.JType parameterType : parameterTypes ) { stdTypeList.set ( ( idx ++ ) , com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( parameterType ) ) ; } return com.android.jack.dx.rop.type.Prototype.intern ( stdTypeList , com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( call.getReturnTypeOfPolymorphicMethod ( ) ) ) ; }
public java.util.List < java.io.File > getRenderscriptImports ( ) { java.util.List < java.io.File > list = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.android.builder.dependency.AndroidDependency lib : mFlatLibraries ) { java.io.File rsLib = lib.getRenderscriptFolder ( ) ; if ( ( rsLib != null ) && ( rsLib.isDirectory ( ) ) ) { list.add ( rsLib ) ; } } return list ; }
protected com.android.jack.test.toolchain.JackBasedToolchain getReferenceToolchain ( ) { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; java.io.File internalJackOutputLib ; try { internalJackOutputLib = com.android.jack.TestTools.createTempDir ( "oneDexPerType" , "dex" ) ; toolchain.addProperty ( Options.EMIT_LINE_NUMBER_DEBUG_INFO.getName ( ) , java.lang.Boolean.toString ( withDebugInfos ) ) ; toolchain.addProperty ( ScheduleInstance.DEFAULT_RUNNER.getName ( ) , "single-threaded" ) ; toolchain.addProperty ( Options.INTERNAL_LIBRARY_OUTPUT_DIR.getName ( ) , internalJackOutputLib.getAbsolutePath ( ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } return toolchain ; }
public void testInnerClass ( ) { android.signature.cts.JDiffClassDescription clz = new android.signature.cts.JDiffClassDescription ( "android.signature.cts.tests.data" , "NormalClass.InnerClass" , new android.signature.cts.tests.JDiffClassDescriptionTest.NoFailures ( ) ) ; clz.setType ( JDiffClassDescription.JDiffType.CLASS ) ; clz.setModifier ( java.lang.reflect.Modifier.PUBLIC ) ; android.signature.cts.JDiffClassDescription.JDiffField field = new android.signature.cts.JDiffClassDescription.JDiffField ( "innerClassData" , "java.lang.String" , java.lang.reflect.Modifier.PRIVATE , android.signature.cts.tests.JDiffClassDescriptionTest.VALUE ) ; clz.addField ( field ) ; clz.checkSignatureCompliance ( ) ; assertEquals ( clz.toSignatureString ( ) , "public class NormalClass.InnerClass" ) ; }
private void onGetReport ( byte [ ] address , byte [ ] report , int rptSize ) { if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , "onGetReport()" ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_ON_GET_REPORT ) ; msg.obj = address ; android.os.Bundle data = new android.os.Bundle ( ) ; data.putByteArray ( BluetoothInputDevice.EXTRA_REPORT , report ) ; data.putInt ( BluetoothInputDevice.EXTRA_REPORT_BUFFER_SIZE , rptSize ) ; msg.setData ( data ) ; mHandler.sendMessage ( msg ) ; }
public void applyBorder ( android.support.v8.renderscript.Allocation in , android.support.v8.renderscript.Allocation out , boolean copyOut , com.android.gallery3d.filtershow.pipeline.FilterEnvironment environment ) { com.android.gallery3d.filtershow.filters.FilterRepresentation border = getFilterRepresentationForType ( FilterRepresentation.TYPE_BORDER ) ; if ( ( border != null ) && ( mDoApplyGeometry ) ) { android.support.v8.renderscript.Allocation bitmapIn = in ; if ( copyOut ) { bitmapIn = android.support.v8.renderscript.Allocation.createTyped ( com.android.gallery3d.filtershow.pipeline.CachingPipeline.getRenderScriptContext ( ) , in.getType ( ) ) ; bitmapIn.copyFrom ( out ) ; } environment.applyRepresentation ( border , bitmapIn , out ) ; } }
private static android.content.Intent getHfIndicatorIntent ( android.bluetooth.BluetoothDevice device , int batteryLevel , int indicatorId ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; intent.putExtra ( BluetoothHeadset.EXTRA_HF_INDICATORS_IND_ID , indicatorId ) ; intent.putExtra ( BluetoothHeadset.EXTRA_HF_INDICATORS_IND_VALUE , batteryLevel ) ; return intent ; }
protected void startupOnInitialize ( ) { super . startupOnInitialize ( ) ; org.eclipse.core.resources.IProject project = getProject ( ) ; mManifestPackage = loadProjectStringProperty ( com.android.ide.eclipse.adt.internal.build.builders.PreCompilerBuilder.PROPERTY_PACKAGE ) ; mGenFolder = project.getFolder ( SdkConstants.FD_GEN_SOURCES ) ; mMustCompileResources = loadProjectBooleanProperty ( com.android.ide.eclipse.adt.internal.build.builders.PreCompilerBuilder.PROPERTY_COMPILE_RESOURCES , true ) ; org.eclipse.jdt.core.IJavaProject javaProject = org.eclipse.jdt.core.JavaCore.create ( project ) ; com.android.ide.eclipse.adt.internal.build.JavaGenerator aidlGenerator = new com.android.ide.eclipse.adt.internal.build.AidlGenerator ( javaProject , mGenFolder ) ; mGeneratorList.add ( aidlGenerator ) ; mDerivedProgressMonitor = new com.android.ide.eclipse.adt.internal.build.builders.PreCompilerBuilder.DerivedProgressMonitor ( mGenFolder ) ; }
public void exit ( ) { if ( ( mPhone ) != null ) { mPhone.mCi.unregisterForRilConnected ( getHandler ( ) ) ; mPhone.mCi.unregisterForDataCallListChanged ( getHandler ( ) ) ; } if ( ( mDcTesterDeactivateAll ) != null ) { mDcTesterDeactivateAll.dispose ( ) ; } if ( ( mNetworkPolicyManager ) != null ) { mNetworkPolicyManager.unregisterListener ( mListener ) ; } }
private static com.google.doclava.ParameterInfo convertParameter ( com.sun.javadoc.Parameter p , com.sun.javadoc.SourcePosition pos , boolean isVarArg ) { if ( p == null ) return null ; com.google.doclava.ParameterInfo pi = new com.google.doclava.ParameterInfo ( p.name ( ) , p.typeName ( ) , com.google.doclava.Converter.obtainType ( p.type ( ) ) , isVarArg , com.google.doclava.Converter.convertSourcePosition ( pos ) ) ; return pi ; }
public void testOcclude ( ) throws java.lang.Exception { if ( ( ! ( isHandheld ( ) ) ) || ( isUiModeLockedToVrHeadset ( ) ) ) { return ; } gotoKeyguard ( ) ; launchActivity ( "ShowWhenLockedActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "ShowWhenLockedActivity" } ) ; assertEquals ( "Picked wrong transition" , android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_OCCLUDE , mAmWmState.getWmState ( ) . getLastTransition ( ) ) ; }
private java.lang.String getCalendarTypeFromPath ( java.lang.String path ) { if ( ( path.startsWith ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_PREFIX ) ) && ( path.endsWith ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_SUFFIX ) ) ) { return path.substring ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_PREFIX.length ( ) , ( ( path.length ( ) ) - ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_SUFFIX.length ( ) ) ) ) ; } throw new com.ibm.icu.util.ICUException ( ( "Malformed 'intervalFormat' alias path: " + path ) ) ; }
public proguard.evaluation.value.ReferenceValue generalize ( proguard.evaluation.value.IdentifiedReferenceValue other ) { return generalize ( ( ( proguard.evaluation.value.TypedReferenceValue ) ( other ) ) ) ; }
public void logVerbose ( java.lang.String log ) { if ( acceptLog ( log ) ) { if ( ( mLog ) != null ) { mLog.printf ( " %1$s" , log ) ; } else { synchronized ( mLogText ) { mLogText.append ( " " ) . append ( log ) ; } } } }
public android.content.res.Resources getResourcesForApplication ( android.content.pm.ApplicationInfo app ) throws android.app.NameNotFoundException { if ( app.packageName.equals ( "system" ) ) { return mContext.mMainThread.getSystemContext ( ) . getResources ( ) ; } android.content.res.Resources r = mContext.mMainThread.getTopLevelResources ( ( ( app.uid ) == ( java.lang.Process.myUid ( ) ) ? app.sourceDir : app.publicSourceDir ) , app.resourceDirs , Display.DEFAULT_DISPLAY , null , mContext.mPackageInfo ) ; if ( r != null ) { return r ; } throw new android.app.NameNotFoundException ( ( "Unable to open " + ( app.publicSourceDir ) ) ) ; }
public com.android.dex.Dex.Section open ( int position ) { if ( ( position < 0 ) || ( position >= ( data.capacity ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( "position=" + position ) + " length=" ) + ( data.capacity ( ) ) ) ) ; } java.nio.ByteBuffer sectionData = data.duplicate ( ) ; sectionData.order ( java.nio.ByteOrder.LITTLE_ENDIAN ) ; sectionData.position ( position ) ; sectionData.limit ( data.capacity ( ) ) ; return new com.android.dex.Dex.Section ( "section" , sectionData ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass cls , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findClass ( cls ) ; if ( c == null ) { return null ; } java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > annotations = c.getAnnotations ( ) ; if ( annotations != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
static int getMaxLengthValuesArray ( android.hardware.Sensor sensor , int sdkLevel ) { int type = sensor.mType ; if ( ( type == ( android.hardware.Sensor.TYPE_ROTATION_VECTOR ) ) && ( sdkLevel <= ( Build.VERSION_CODES.JELLY_BEAN_MR1 ) ) ) { return 3 ; } int offset = ( type * 2 ) + 1 ; if ( offset >= ( android.hardware.Sensor.sSensorReportingModes.length ) ) { return 16 ; } return android.hardware.Sensor.sSensorReportingModes [ offset ] ; }
public void dragSetData ( org.eclipse.swt.dnd.DragSourceEvent e ) { if ( org.eclipse.swt.dnd.TextTransfer.getInstance ( ) . isSupportedType ( e.dataType ) ) { e.data = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SelectionItem.getAsText ( mCanvas , mDragSelection ) ; return ; } if ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleXmlTransfer.getInstance ( ) . isSupportedType ( e.dataType ) ) { e.data = mDragElements ; return ; } e.detail = org.eclipse.swt.dnd.DND.DROP_NONE ; e.doit = false ; }
public void done ( ) { if ( ( mCurrentName ) != null ) { mValues.put ( mCurrentName , mCurrentValue ) ; mCurrentName = null ; mCurrentValue = null ; } if ( ( mValues ) != null ) { mParseSuccessful &= mListener.handleStatus ( mValues ) ; mValues = null ; } }
void consumePattern ( android.icu.impl.UResource.Key key , android.icu.impl.UResource.Value value ) { if ( key.contentEquals ( "dnam" ) ) { setDnamIfAbsent ( value ) ; } else if ( key.contentEquals ( "per" ) ) { setFormatterIfAbsent ( android.icu.text.MeasureFormat.MeasureFormatData.PER_UNIT_INDEX , value , 1 ) ; } else { setFormatterIfAbsent ( android.icu.impl.StandardPlural.indexFromString ( key ) , value , 0 ) ; } }
public void testTimedoutNetworkRequest ( ) { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build ( ) ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback ( ) ; final int timeoutMs = 10 ; mCm.requestNetwork ( nr , networkCallback , timeoutMs ) ; networkCallback.expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.UNAVAILABLE , null ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( android.net.NetworkCapabilities.TRANSPORT_WIFI ) ; mWiFiNetworkAgent.connect ( false ) ; networkCallback.assertNoCallback ( ) ; }
protected junit.framework.TestSuite createCopyOfSuite ( junit.framework.TestSuite s ) { if ( s instanceof com.android.test.runner.junit3.AndroidTestSuite ) { com.android.test.runner.junit3.AndroidTestSuite a = ( ( com.android.test.runner.junit3.AndroidTestSuite ) ( s ) ) ; return new com.android.test.runner.junit3.AndroidTestSuite ( a.getName ( ) , a.getBundle ( ) , a.getInstrumentation ( ) ) ; } else { return super . createCopyOfSuite ( s ) ; } }
public com.android.sched.vfs.InputVDir getDir ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException { try { return vfs.getRootInputVDir ( ) . getInputVDir ( fileType.buildDirVPath ( typePath ) ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } }
public void testConsideringOptions ( ) throws java.lang.Exception { com.intellij.updater.Patch patch = createPatch ( ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; java.util.Map < java.lang.String , com.intellij.updater.ValidationResult.Option > options = new java.util.HashMap < java.lang.String , com.intellij.updater.ValidationResult.Option > ( ) ; for ( com.intellij.updater.PatchAction each : preparationResult.patch.getActions ( ) ) { options.put ( each.getPath ( ) , ValidationResult.Option.IGNORE ) ; } assertNothingHasChanged ( patch , preparationResult , options ) ; }
public boolean visit ( org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration , org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope scope ) { org.eclipse.jdt.internal.compiler.ast.Annotation [ ] annotations = typeDeclaration.annotations ; if ( hasRelevantAnnotations ( annotations ) ) { org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding binding = typeDeclaration.binding ; if ( binding == null ) { return true ; } java.lang.String fqn = new java.lang.String ( typeDeclaration.binding.readableName ( ) ) ; com.android.build.gradle.tasks.annotations.Extractor.Item item = com.android.build.gradle.tasks.annotations.Extractor.ClassItem.create ( fqn , com.android.build.gradle.tasks.annotations.Extractor.ClassKind.forType ( typeDeclaration ) ) ; addItem ( fqn , item ) ; addAnnotations ( annotations , item ) ; } return true ; }
private void onCurrentCalls ( int index , int dir , int state , int mparty , java.lang.String number ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CURRENT_CALLS ) ; event.valueInt = index ; event.valueInt2 = dir ; event.valueInt3 = state ; event.valueInt4 = mparty ; event.valueString = number ; if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; } sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( android.bluetooth.BluetoothDevice device , com.android.bluetooth.a2dp.A2dpService a2dpService , com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface , android.os.Looper looper ) { if ( com.android.bluetooth.a2dp.A2dpStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpStateMachine.TAG , ( "make for device " + device ) ) ; } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( device , a2dpService , a2dpNativeInterface , looper ) ; a2dpSm.start ( ) ; return a2dpSm ; }
private static void deleteSubElement ( @ javax.annotation.Nonnull java.io.File dir ) { if ( dir.isDirectory ( ) ) { java.io.File [ ] fileList = dir.listFiles ( ) ; if ( fileList == null ) { throw new com.android.sched.util.ConcurrentIOException ( new com.android.sched.vfs.ListDirException ( dir ) ) ; } for ( java.io.File sub : fileList ) { com.android.sched.util.file.FileUtils.deleteSubElement ( sub ) ; } } dir.delete ( ) ; }
public void testSet2 ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.set ( list.size ( ) , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
public java.util.List < java.io.File > getRenderscriptSourceList ( ) { java.util.List < java.io.File > sourceList = com.google.common.collect.Lists.newArrayList ( ) ; sourceList.addAll ( mDefaultSourceProvider.getRenderscriptDirectories ( ) ) ; if ( ( mType ) != ( com.android.builder.VariantConfiguration.Type.TEST ) ) { sourceList.addAll ( mBuildTypeSourceProvider.getRenderscriptDirectories ( ) ) ; } if ( hasFlavors ( ) ) { for ( com.android.builder.model.SourceProvider flavorSourceSet : mFlavorSourceProviders ) { sourceList.addAll ( flavorSourceSet.getRenderscriptDirectories ( ) ) ; } } return sourceList ; }
public void enable ( java.util.List < ? extends com.google.gct.testing.dimension.CloudTestingType > types , java.lang.Iterable < java.lang.String > ids ) { checkIsEditable ( ) ; java.util.Set < java.lang.String > idsSet = com.google.common.collect.Sets.newHashSet ( ids ) ; for ( com.google.gct.testing.dimension.CloudTestingType type : types ) { if ( ( getSupportedDomain ( ) . contains ( type ) ) && ( idsSet.contains ( type.getId ( ) ) ) ) { enableType ( type ) ; } } }
public void verifyCallbackChannelRetuned ( ) { resetCounts ( ) ; android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession ; assertNotNull ( session ) ; android.net.Uri fakeChannelUri = android.media.tv.TvContract.buildChannelUri ( 0 ) ; session.notifyChannelRetuned ( fakeChannelUri ) ; new android.cts.util.PollingCheck ( android.media.tv.cts.TvInputServiceTest.TIME_OUT ) { @ java.lang.Override protected boolean check ( ) { return ( mCallback.mChannelRetunedCount ) > 0 ; } } . run ( ) ; }
public static android.net.MacAddress fromString ( java.lang.String addr ) { return new android.net.MacAddress ( android.net.MacAddress.longAddrFromStringAddr ( addr ) ) ; }
public void testSuccessfulFollowOnUpdate_newerVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.ConfigBundle tzData1 = createValidTzDataBundle ( libcore.tzdata.update2.TzDataBundleInstallerTest.NEW_RULES_VERSION ) ; assertTrue ( installer.install ( tzData1.getBundleBytes ( ) ) ) ; assertTzDataInstalled ( tzData1 ) ; libcore.tzdata.update2.ConfigBundle tzData2 = createValidTzDataBundle ( libcore.tzdata.update2.TzDataBundleInstallerTest.NEWER_RULES_VERSION ) ; assertTrue ( installer.install ( tzData2.getBundleBytes ( ) ) ) ; assertTzDataInstalled ( tzData2 ) ; }
protected void tearDown ( ) { try { if ( ( zfile ) != null ) { zfile.close ( ) ; } } catch ( java.io.IOException ignored ) { } }
private void copyResource ( java.io.InputStream is , java.io.OutputStream os ) throws java.io.IOException { jackLibraryProperties.put ( com.android.jill.frontend.java.JavaTransformer.KEY_RSC , java.lang.String.valueOf ( true ) ) ; java.io.OutputStream resourceOS = null ; byte [ ] buffer = new byte [ 4096 ] ; int bytesRead ; while ( ( bytesRead = is.read ( buffer ) ) >= 0 ) { os.write ( buffer , 0 , bytesRead ) ; } os.flush ( ) ; }
public void onServiceStateChanged ( android.telephony.ServiceState state ) { if ( DEBUG ) { android.util.Log.d ( mTag , ( ( ( "onServiceStateChanged voiceState=" + ( state.getVoiceRegState ( ) ) ) + " dataState=" ) + ( state.getDataRegState ( ) ) ) ) ; } mServiceState = state ; mDataNetType = state.getDataNetworkType ( ) ; if ( ( ( ( mDataNetType ) == ( android.telephony.TelephonyManager.NETWORK_TYPE_LTE ) ) && ( ( mServiceState ) != null ) ) && ( mServiceState.isUsingCarrierAggregation ( ) ) ) { mDataNetType = android.telephony.TelephonyManager.NETWORK_TYPE_LTE_CA ; } updateTelephony ( ) ; }
protected java.net.HttpURLConnection createConnection ( java.net.URL url ) throws java.io.IOException { return ( ( java.net.HttpURLConnection ) ( url.openConnection ( ) ) ) ; }
private com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener doRunTests ( java.lang.String pkgName , java.lang.String testClassName , java.lang.String testMethodName ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException { com.android.ddmlib.testrunner.RemoteAndroidTestRunner testRunner = new com.android.ddmlib.testrunner.RemoteAndroidTestRunner ( pkgName , getDevice ( ) ) ; if ( ( testClassName != null ) && ( testMethodName != null ) ) { testRunner.setMethodName ( testClassName , testMethodName ) ; } com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener listener = new com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener ( ) ; testRunner.run ( listener ) ; return listener ; }
public void cellInfoList ( int indicationType , java.util.ArrayList < com.android.internal.telephony.V1_0.CellInfo > records ) { mRil.processIndication ( indicationType ) ; java.util.ArrayList < android.telephony.CellInfo > response = com.android.internal.telephony.RIL.responseCellInfoList ( records ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_CELL_INFO_LIST , response ) ; mRil.mRilCellInfoListRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent.getAction ( ) ; if ( action.equals ( AppInterface.CAT_CMD_ACTION ) ) { handleCommandMessage ( context , intent ) ; } else if ( action.equals ( AppInterface.CAT_SESSION_END_ACTION ) ) { handleSessionEnd ( context , intent ) ; } else if ( action.equals ( AppInterface.CAT_ICC_STATUS_CHANGE ) ) { handleCardStatusChange ( context , intent ) ; } }
public boolean stopFilteringMulticastV6Packets ( ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return ( ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) && ( mSupplicantStaIfaceHal.addRxFilter ( SupplicantStaIfaceHal.RX_FILTER_TYPE_V6_MULTICAST ) ) ) && ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) ; } else { return ( ( doBooleanCommand ( "DRIVER RXFILTER-STOP" ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-ADD 3" ) ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-START" ) ) ; } }
public void callSessionMergeComplete ( com.android.ims.internal.IImsCallSession newSession ) { if ( ( mListener ) != null ) { if ( newSession != null ) { android.telephony.ims.ImsCallSession validActiveSession = this ; try { if ( ! ( java.util.Objects.equals ( miSession.getCallId ( ) , newSession.getCallId ( ) ) ) ) { validActiveSession = new android.telephony.ims.ImsCallSession ( newSession ) ; } } catch ( android.os.RemoteException rex ) { android.util.Log.e ( android.telephony.ims.ImsCallSession.TAG , "callSessionMergeComplete: exception for getCallId!" ) ; } mListener.callSessionMergeComplete ( validActiveSession ) ; } else { mListener.callSessionMergeComplete ( null ) ; } } }
private boolean needsCoverage ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) { if ( ! ( declaredType.isToEmit ( ) ) ) { return false ; } if ( declaredType instanceof com.android.jack.ir.ast.JDefinedInterface ) { return false ; } java.lang.String typeName = com.android.jack.coverage.CodeCoverageSelector.formatter.getName ( declaredType ) ; return filter.matches ( typeName ) ; }
protected void enableService ( ) { if ( android.autofillservice.cts.AutoFillServiceTestCase.isServiceEnabled ( ) ) return ; final android.autofillservice.cts.OneTimeSettingsListener observer = new android.autofillservice.cts.OneTimeSettingsListener ( android.autofillservice.cts.AutoFillServiceTestCase.getContext ( ) , android.provider.Settings.Secure.AUTOFILL_SERVICE ) ; android.autofillservice.cts.Helper.runShellCommand ( "settings put secure %s %s default" , android.provider.Settings.Secure.AUTOFILL_SERVICE , android.autofillservice.cts.AutoFillServiceTestCase.SERVICE_NAME ) ; observer.assertCalled ( ) ; android.autofillservice.cts.AutoFillServiceTestCase.assertServiceEnabled ( ) ; }
public com.android.sched.vfs.InputVFS parseString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) { try { return checkString ( context , string ) ; } catch ( com.android.sched.util.codec.ParsingException e ) { throw new com.android.sched.util.config.ConfigurationError ( e ) ; } }
public void run ( ) { boolean didThrow = false ; try { assertNull ( android.os.Looper.myQueue ( ) ) ; } catch ( java.lang.Throwable e ) { didThrow = true ; } if ( ! didThrow ) { fail ( "should throw exception" ) ; } android.os.Looper.prepare ( ) ; android.os.MessageQueue mq = android.os.Looper.myQueue ( ) ; assertNotNull ( mq ) ; }
public void replaceConfig ( com.android.phone.testapps.imstestapp.TestImsConfigImpl.ConfigItem configItem ) { com.android.phone.testapps.imstestapp.TestImsConfigImpl.ConfigItem config = mArrayOfConfigs.stream ( ) . filter ( ( configElem ) -> ( configElem.item ) == ( configItem.item ) ) . findFirst ( ) . orElse ( null ) ; if ( config != null ) { mArrayOfConfigs.remove ( config ) ; } mArrayOfConfigs.add ( configItem ) ; if ( ( mListener ) != null ) { mListener.notifyConfigChanged ( ) ; } }
public void sendDialerSpecialCode ( java.lang.String callingPackage , java.lang.String inputCode ) { mAppOps.checkPackage ( android.os.Binder.getCallingUid ( ) , callingPackage ) ; java.lang.String defaultDialer = android.telecom.TelecomManager.from ( mPhone.getContext ( ) ) . getDefaultDialerPackage ( ) ; if ( ! ( android.text.TextUtils.equals ( callingPackage , defaultDialer ) ) ) { enforceCarrierPrivilege ( getDefaultSubscription ( ) ) ; } mPhone.sendDialerSpecialCode ( inputCode ) ; }
public void timeSystemCharArrayCopy ( int reps ) { final int len = arrayLength ; char [ ] src = new char [ len ] ; char [ ] dst = new char [ len ] ; for ( int rep = 0 ; rep < reps ; ++ rep ) { java.lang.System.arraycopy ( src , 0 , dst , 0 , len ) ; } }
private static void setHidDeviceNativeInterfaceInstance ( com.android.bluetooth.hid.HidDeviceNativeInterface instance ) throws java.lang.Exception { java.lang.reflect.Method method = com.android.bluetooth.hid.HidDeviceNativeInterface.class . getDeclaredMethod ( "setInstance" , com.android.bluetooth.hid.HidDeviceNativeInterface.class ) ; method.setAccessible ( true ) ; method.invoke ( null , instance ) ; }
void putShortUnchecked ( int i , short x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putShort ( ix ( i ) , x ) ; }
public void testCompile022b ( ) throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test022.jack" ; java.util.Map < java.lang.String , com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo > input = com.google.common.collect.Maps.newHashMap ( ) ; input.put ( "Switch1" , new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo ( true ) . specifyInfo ( "java-lang-Thread$State" , true ) ) ; compileCodeIncremental ( packageName , input ) ; }
public com.android.tools.lint.detector.api.Location getLocation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node ) { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( mParser.getPosition ( node , ( - 1 ) , ( - 1 ) ) ) ) ; if ( pos != null ) { return com.android.tools.lint.detector.api.Location.create ( context.file , pos , ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( pos.getEnd ( ) ) ) ) ; } return com.android.tools.lint.detector.api.Location.create ( context.file ) ; }
private com.android.layoutlib.api.LayoutScene convertToScene ( com.android.layoutlib.api.ILayoutResult result ) { com.android.layoutlib.api.SceneResult sceneResult ; com.android.layoutlib.api.ViewInfo rootViewInfo ; if ( ( result.getSuccess ( ) ) == ( com.android.layoutlib.api.ILayoutResult.SUCCESS ) ) { sceneResult = SceneStatus.SUCCESS.getResult ( ) ; rootViewInfo = convertToViewInfo ( result.getRootView ( ) ) ; } else { sceneResult = new com.android.layoutlib.api.SceneResult ( com.android.layoutlib.api.SceneResult.SceneStatus.ERROR_UNKNOWN , result.getErrorMessage ( ) ) ; rootViewInfo = null ; } return new com.android.ide.common.layoutlib.BasicLayoutScene ( sceneResult , rootViewInfo , result.getImage ( ) ) ; }
private void runAndVerify ( java.lang.String expectedCmd ) throws java.lang.Exception { mMockDevice.executeShellCommand ( expectedCmd , ( ( com.android.ddmlib.IShellOutputReceiver ) ( org.easymock.EasyMock.anyObject ( ) ) ) , org.easymock.EasyMock.eq ( 0 ) ) ; org.easymock.EasyMock.replay ( mMockDevice ) ; mRunner.run ( mMockListener ) ; org.easymock.EasyMock.verify ( mMockDevice ) ; }
public void testEndCallWithNoForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getFirstCallWithState ( org.mockito.Matchers.any ( ) ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( com.android.server.telecom.tests.TelecomServiceImplTest.TEST_PACKAGE ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( org.mockito.Matchers.eq ( 0L ) , org.mockito.Matchers.eq ( com.android.server.telecom.tests.TelecomServiceImplTest.TEST_PACKAGE ) ) ; }
public void testGradleOverrides ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.GRADLE_OVERRIDES ) ; assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( "AndroidManifest.xml:4: Warning: This versionCode value (1) is not used; it is always overridden by the value specified in the Gradle build script (2) [GradleOverrides]\n" + " android:versionCode=\"1\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:5: Warning: This versionName value (1.0) is not used; it is always overridden by the value specified in the Gradle build script (MyName) [GradleOverrides]\n" ) + " android:versionName=\"1.0\" >\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:7: Warning: This minSdkVersion value (14) is not used; it is always overridden by the value specified in the Gradle build script (5) [GradleOverrides]\n" ) + " <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:7: Warning: This targetSdkVersion value (17) is not used; it is always overridden by the value specified in the Gradle build script (16) [GradleOverrides]\n" ) + " <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 4 warnings\n" ) ) , lintProject ( "gradle_override.xml=>AndroidManifest.xml" , "multiproject/library.properties=>build.gradle" ) ) ; }
protected void networkStatus ( int status , java.lang.String redirectUrl ) { if ( ( this ) != ( mNetworkAgent ) ) return ; if ( status == ( android.net.NetworkAgent.INVALID_NETWORK ) ) { if ( mVerboseLoggingEnabled ) { log ( ( "WifiNetworkAgent -> Wifi networkStatus invalid, score=" + ( java.lang.Integer.toString ( mWifiInfo.score ) ) ) ) ; } unwantedNetwork ( com.android.server.wifi.WifiStateMachine.NETWORK_STATUS_UNWANTED_VALIDATION_FAILED ) ; } else if ( status == ( android.net.NetworkAgent.VALID_NETWORK ) ) { if ( mVerboseLoggingEnabled ) { log ( ( "WifiNetworkAgent -> Wifi networkStatus valid, score= " + ( java.lang.Integer.toString ( mWifiInfo.score ) ) ) ) ; } doNetworkStatus ( status ) ; } }
private static com.google.common.collect.ImmutableList < com.google.devtools.common.options.OptionDefinition > getAllOptionDefinitionsSorted ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass ) { return java.util.Arrays.stream ( optionsClass.getFields ( ) ) . map ( ( field ) -> { try { return com.google.devtools.common.options.OptionDefinition.extractOptionDefinition ( field ) ; } catch ( com.google.devtools.common.options.OptionsParser.ConstructionException e ) { return null ; } } ) . filter ( java.util.Objects :: nonNull ) . sorted ( OptionDefinition.BY_OPTION_NAME ) . collect ( com.google.common.collect.ImmutableList.toImmutableList ( com.google.common.collect.ImmutableList ) ) ; }
public void setUseColor ( boolean useColor , int passColor , int skipColor , int failColor , int warnColor ) { this . useColor = useColor ; vogar.Console.Color.PASS.setCode ( passColor ) ; vogar.Console.Color.SKIP.setCode ( skipColor ) ; vogar.Console.Color.FAIL.setCode ( failColor ) ; vogar.Console.Color.WARN.setCode ( warnColor ) ; vogar.Console.Color.COMMENT.setCode ( 34 ) ; }
void registerConnected ( ) { if ( ( mLastNetworkId ) != ( android.net.wifi.WifiConfiguration.INVALID_NETWORK_ID ) ) { mWifiConfigManager.updateNetworkAfterConnect ( mLastNetworkId ) ; mWifiScoreReport.reset ( ) ; } }
public com.android.sched.vfs.VPath prependPath ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { assert ! ( path.isRoot ( ) ) ; if ( ! ( this . isRoot ( ) ) ) { pathFragments.add ( 0 , com.android.sched.vfs.VPath.INTERNAL_SEPARATOR_FRAGMENT ) ; } pathFragments.addAll ( 0 , path.getPathFragments ( ) ) ; return this ; }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : mWifiDiagnostics.reportConnectionEvent ( mDiagsConnectionStartMillis , WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; break ; case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionEvent ( mDiagsConnectionStartMillis , WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } mDiagsConnectionStartMillis = - 1 ; }
private byte [ ] desugar ( org.objectweb.asm.ClassReader reader ) { org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; com.google.devtools.build.android.desugar.DefaultMethodClassFixer fixer = new com.google.devtools.build.android.desugar.DefaultMethodClassFixer ( writer , classpathReader , DependencyCollector.NoWriteCollectors.FAIL_ON_MISSING , bootclassPath , classLoader ) ; reader.accept ( fixer , 0 ) ; return writer.toByteArray ( ) ; }
public void paintIcon ( java.awt.Component c , java.awt.Graphics g , int x , int y ) { int minSize = java.lang.Math.min ( c.getWidth ( ) , c.getHeight ( ) ) ; final java.awt.image.BufferedImage image = com.android.assetstudiolib.Util.newArgbBufferedImage ( minSize , minSize ) ; mVdTree.drawIntoImage ( image ) ; java.awt.Rectangle rect = new java.awt.Rectangle ( 0 , 0 , c.getWidth ( ) , c.getHeight ( ) ) ; com.android.assetstudiolib.Util.drawCenterInside ( ( ( java.awt.Graphics2D ) ( g ) ) , image , rect ) ; }
private android.telephony.SmsCbMessage createFromPdu ( byte [ ] pdu ) { try { com.android.internal.telephony.gsm.SmsCbHeader header = new com.android.internal.telephony.gsm.SmsCbHeader ( pdu ) ; byte [ ] [ ] pdus = new byte [ 1 ] [ ] ; pdus [ 0 ] = pdu ; return com.android.internal.telephony.gsm.GsmSmsCbMessage.createSmsCbMessage ( getContext ( ) , header , com.android.internal.telephony.gsm.GsmSmsCbTest.sTestLocation , pdus ) ; } catch ( java.lang.IllegalArgumentException e ) { return null ; } }
public boolean isProtectedBroadcast ( java.lang.String actionName ) { synchronized ( mPackages ) { if ( mProtectedBroadcasts.contains ( actionName ) ) { return true ; } else if ( actionName != null ) { if ( ( ( ( actionName.startsWith ( "android.net.netmon.lingerExpired" ) ) || ( actionName.startsWith ( "com.android.server.sip.SipWakeupTimer" ) ) ) || ( actionName.startsWith ( "com.android.internal.telephony.data-reconnect" ) ) ) || ( actionName.startsWith ( "android.net.netmon.launchCaptivePortalApp" ) ) ) { return true ; } } } return false ; }
public void test_get_put ( ) throws java.lang.Exception { libcore.java.net.OldCookieHandlerTest.MockCookieHandler mch = new libcore.java.net.OldCookieHandlerTest.MockCookieHandler ( ) ; java.net.CookieHandler defaultHandler = java.net.CookieHandler.getDefault ( ) ; try { java.net.CookieHandler.setDefault ( mch ) ; com.google.mockwebserver.MockWebServer server = new com.google.mockwebserver.MockWebServer ( ) ; server.play ( ) ; server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . addHeader ( ( ( ( ( ( ( ( ( ( ( "Set-Cookie2: a=\"android\"; " + ( ( ( "Comment=\"this cookie is delicious\"; " + "CommentURL=\"http://google.com/\"; " ) + "Discard; " ) + "Domain=\"" ) ) + ( server.getCookieDomain ( ) ) ) + "\"; " ) + "Max-Age=\"60\"; " ) + "Path=\"/path\"; " ) + "Port=\"80,443," ) + ( server.getPort ( ) ) ) + "\"; " ) + "Secure; " ) + "Version=\"1\"" ) ) ) ; java.net.URLConnection connection = server.getUrl ( "/path/foo" ) . openConnection ( ) ; connection.getContent ( ) ; assertTrue ( mch.wasGetCalled ( ) ) ; assertTrue ( mch.wasPutCalled ( ) ) ; } finally { java.net.CookieHandler.setDefault ( defaultHandler ) ; } }
static final < K , V > java.util.concurrent.ConcurrentHashMap.Node < K , V > tabAt ( java.util.concurrent.ConcurrentHashMap.Node < K , V > [ ] tab , int i ) { return ( ( java.util.concurrent.ConcurrentHashMap.Node < K , V > ) ( java.util.concurrent.ConcurrentHashMap.U.getObjectVolatile ( tab , ( ( ( ( long ) ( i ) ) << ( java.util.concurrent.ConcurrentHashMap.ASHIFT ) ) + ( java.util.concurrent.ConcurrentHashMap.ABASE ) ) ) ) ) ; }
protected void engineInit ( int opmode , java.security.Key key , java.security.spec.AlgorithmParameterSpec spec , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( ( spec != null ) && ( ! ( spec instanceof javax.crypto.spec.OAEPParameterSpec ) ) ) { throw new java.security.InvalidAlgorithmParameterException ( "Only OAEPParameterSpec accepted in OAEP mode" ) ; } engineInitInternal ( opmode , key , spec ) ; }
boolean accept ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.ExtraPackage ) { com.android.sdklib.internal.repository.packages.ExtraPackage ep = ( ( com.android.sdklib.internal.repository.packages.ExtraPackage ) ( pkg ) ) ; if ( ep.getVendorId ( ) . equals ( mVendor ) ) { if ( ep.getPath ( ) . equals ( mPath ) ) { return true ; } for ( java.lang.String oldPath : ep.getOldPaths ( ) ) { if ( oldPath.equals ( mPath ) ) { return true ; } } } } return false ; }
public void nvWriteItem ( int itemID , java.lang.String itemValue , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_NV_WRITE_ITEM , response , mRILDefaultWorkSource ) ; rr.mParcel.writeInt ( itemID ) ; rr.mParcel.writeString ( itemValue ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + ' ' ) + itemID ) + ": " ) + itemValue ) ) ; send ( rr ) ; }
public void disconnectResponse ( int token ) { android.util.Log.d ( com.android.bluetooth.sap.SapRilReceiver.TAG , ( "disconnectResponse: token " + token ) ) ; com.android.bluetooth.sap.SapService.notifyUpdateWakeLock ( mSapServiceHandler ) ; com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage ( SapMessage.ID_DISCONNECT_RESP ) ; sapMessage.setResultCode ( SapMessage.INVALID_VALUE ) ; removeOngoingReqAndSendMessage ( token , sapMessage ) ; }
public void test_enumerateLThreadArray ( ) { int numThreads = initialThreadGroup.activeCount ( ) ; java.lang.Thread [ ] listOfThreads = new java.lang.Thread [ numThreads ] ; int countThread = initialThreadGroup.enumerate ( listOfThreads ) ; assertEquals ( numThreads , countThread ) ; assertTrue ( "Initial thread must be in enumeration of threads" , java.util.Arrays.asList ( listOfThreads ) . contains ( initialThread ) ) ; }
public android.net.VpnService.Builder addAddress ( java.net.InetAddress address , int prefixLength ) { check ( address , prefixLength ) ; if ( address.isAnyLocalAddress ( ) ) { throw new java.lang.IllegalArgumentException ( "Bad address" ) ; } mAddresses.append ( ( ( ( ' ' + ( address.getHostAddress ( ) ) ) + '/' ) + prefixLength ) ) ; return this ; }
private java.lang.CharSequence getAppLabel ( java.lang.String appPackage , @ android.annotation.UserIdInt int userId ) { android.content.pm.PackageManager pm = mContext.getPackageManager ( ) ; try { android.content.pm.ApplicationInfo appInfo = pm.getApplicationInfoAsUser ( appPackage , 0 , userId ) ; return appInfo.loadSafeLabel ( pm ) ; } catch ( android.content.pm.PackageManager e ) { android.telephony.Rlog.e ( com.android.internal.telephony.SMSDispatcher.TAG , ( "PackageManager Name Not Found for package " + appPackage ) ) ; return appPackage ; } }
private static java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > getNegativeCurrencyVectorTR ( ) { java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > v = new java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > ( ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 1 , 4 , java.text.NumberFormat.Field.INTEGER ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 4 , 5 , java.text.NumberFormat.Field.DECIMAL_SEPARATOR ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 5 , 7 , java.text.NumberFormat.Field.FRACTION ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 8 , 10 , java.text.NumberFormat.Field.CURRENCY ) ) ; return v ; }
public void testNotifyPackageDataDestroyComplete ( ) { java.util.List < java.lang.String > fooSecondaries = mFooUser0.getSecondaryDexPaths ( ) ; notifyDexLoad ( mFooUser0 , fooSecondaries , mUser0 ) ; mDexManager.notifyPackageDataDestroyed ( mFooUser0.getPackageName ( ) , mUser0 ) ; assertNoUseInfo ( mFooUser0 ) ; }
public void testPublishBadServiceName ( ) { android.net.wifi.nan.PublishConfig publishConfig = new android.net.wifi.nan.PublishConfig.Builder ( ) . setServiceName ( "Including invalid characters - spaces" ) . build ( ) ; int clientId = doConnect ( ) ; android.net.wifi.nan.IWifiNanDiscoverySessionCallback mockCallback = org.mockito.Mockito.mock ( android.net.wifi.nan.IWifiNanDiscoverySessionCallback.class ) ; mDut.publish ( clientId , publishConfig , mockCallback ) ; org.mockito.Mockito.verify ( mNanStateManagerMock ) . publish ( clientId , publishConfig , mockCallback ) ; }
private boolean newlineAfterElementClose ( org.w3c.dom.Element element , int depth ) { if ( hasBlankLineAbove ( ) ) { return false ; } if ( isMarkupElement ( element ) ) { return false ; } return ( ( element.getParentNode ( ) . getNodeType ( ) ) == ( org.w3c.dom.Node.ELEMENT_NODE ) ) && ( ! ( keepElementAsSingleLine ( ( depth - 1 ) , ( ( org.w3c.dom.Element ) ( element.getParentNode ( ) ) ) ) ) ) ; }
public static java.io.File getDevicePolicyFile ( com.android.tradefed.device.ITestDevice device ) throws java.lang.Exception { return android.security.cts.SELinuxHostTest.getDeviceFile ( device , android.security.cts.SELinuxHostTest.cachedDevicePolicyFiles , "/sys/fs/selinux/policy" , "sepolicy" ) ; }
protected void invoke ( int slot , android.support.v8.renderscript.FieldPacker v ) { if ( v != null ) { mRS.nScriptInvokeV ( getID ( mRS ) , slot , v.getData ( ) , mUseIncSupp ) ; } else { mRS.nScriptInvoke ( getID ( mRS ) , slot , mUseIncSupp ) ; } }
final void get ( double [ ] dst , int dstOffset , int doubleCount ) { checkNotFreed ( ) ; int byteCount = checkGetBounds ( SizeOf.DOUBLE , dst.length , dstOffset , doubleCount ) ; this . block.peekDoubleArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , doubleCount , order.needsSwap ) ; position += byteCount ; }
public static boolean removeAll ( java.util.Iterator < ? > removeFrom , java.util.Collection < ? > elementsToRemove ) { return com.google.common.collect.Iterators.removeIf ( removeFrom , com.google.common.base.Predicates.in ( elementsToRemove ) ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( "Hello, world!" ) ; for ( java.lang.String a : args ) { if ( a.startsWith ( "agent:" ) ) { java.lang.String agent = a.substring ( 6 ) ; try { dalvik.system.VMDebug.attachAgent ( agent ) ; } catch ( java.io.IOException e ) { java.lang.System.out.println ( e.getMessage ( ) ) ; } } } Main.attachWithClassLoader ( args ) ; java.lang.System.out.println ( "Goodbye!" ) ; }
public void copy1DRangeFromUnchecked ( int off , int count , java.lang.Object array ) { copy1DRangeFromUnchecked ( off , count , array , validateObjectIsPrimitiveArray ( array , false ) , java.lang.reflect.Array.getLength ( array ) ) ; }
public static java.lang.String getCurrentCountryIso ( android.content.Context context , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle ) { android.os.Trace.beginSection ( "PhoneNumberHelper.getCurrentCountryIso" ) ; java.lang.String countryIso = com.android.dialer.compat.telephony.TelephonyManagerCompat.getNetworkCountryIsoForPhoneAccountHandle ( context , phoneAccountHandle ) ; if ( android.text.TextUtils.isEmpty ( countryIso ) ) { countryIso = com.android.dialer.compat.CompatUtils.getLocale ( context ) . getCountry ( ) ; com.android.dialer.common.LogUtil.i ( "PhoneNumberHelper.getCurrentCountryIso" , ( "No CountryDetector; falling back to countryIso based on locale: " + countryIso ) ) ; } countryIso = countryIso.toUpperCase ( ) ; android.os.Trace.endSection ( ) ; return countryIso ; }
public void flingScroll ( int vx , int vy ) { int maxX = java.lang.Math.max ( ( ( computeHorizontalScrollRange ( ) ) - ( getViewWidth ( ) ) ) , 0 ) ; int maxY = computeMaxScrollY ( ) ; mScroller.fling ( mScrollX , mScrollY , vx , vy , 0 , maxX , 0 , maxY ) ; invalidate ( ) ; }
public void requestUninstall_asyncUninstallFail ( ) throws java.lang.Exception { configureCallerHasPermission ( ) ; com.android.server.timezone.CheckToken token = createArbitraryToken ( ) ; byte [ ] tokenBytes = token.toByteArray ( ) ; com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback ( ) ; org.junit.Assert.assertEquals ( RulesManager.SUCCESS , mRulesManagerService.requestUninstall ( tokenBytes , callback ) ) ; verifyNoInstallerCallsMade ( ) ; callback.assertNoResultReceived ( ) ; configureStageUninstallExpectation ( TimeZoneDistroInstaller.UNINSTALL_FAIL ) ; mFakeExecutor.simulateAsyncExecutionOfLastCommand ( ) ; verifyStageUninstallCalled ( ) ; verifyPackageTrackerCalled ( token , false ) ; callback.assertResultReceived ( Callback.ERROR_UNKNOWN_FAILURE ) ; }
private static boolean isAttributeOperationPresent ( com.android.manifmerger.XmlElement xmlElement , java.util.Map.Entry < com.android.manifmerger.XmlNode.NodeName , com.android.manifmerger.AttributeOperationType > attributeOperation , com.android.manifmerger.Actions actions , com.android.manifmerger.Actions.ActionType action ) { for ( com.android.manifmerger.Actions.AttributeRecord attributeRecord : actions.getAttributeRecords ( xmlElement.getId ( ) , attributeOperation.getKey ( ) ) ) { if ( ( attributeRecord.getActionType ( ) ) == action ) { return true ; } } return false ; }
public boolean equals ( java.lang.Object o ) { if ( o instanceof android.app.ActivityThread.ProviderKey ) { final android.app.ActivityThread.ProviderKey other = ( ( android.app.ActivityThread.ProviderKey ) ( o ) ) ; return ( java.util.Objects.equals ( authority , other.authority ) ) && ( ( userId ) == ( other.userId ) ) ; } return false ; }
public int getWfcModeForSlot ( boolean roaming ) { int setting = 0 ; if ( ! roaming ) { setting = android.provider.Settings.Global.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Global.WFC_IMS_MODE , getIntCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT ) ) ; if ( com.android.ims.ImsManager.DBG ) com.android.ims.ImsManager.log ( ( "getWfcModeForSlot - setting=" + setting ) ) ; } else { setting = android.provider.Settings.Global.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Global.WFC_IMS_ROAMING_MODE , getIntCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT ) ) ; if ( com.android.ims.ImsManager.DBG ) com.android.ims.ImsManager.log ( ( "getWfcModeForSlot (roaming) - setting=" + setting ) ) ; } return setting ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; mRequest = new com.android.volley.toolbox.StringRequest ( Request.Method.GET , "http://foo" , null , null ) ; mDispatcher = new com.android.volley.CacheDispatcher ( mCacheQueue , mNetworkQueue , mCache , mDelivery ) ; }
public void testNoPackageSubstitution ( ) { org.mockito.Mockito.when ( mAttr.getValue ( ) ) . thenReturn ( "com.foo.foo2.ActivityOne" ) ; assertNotNull ( new com.android.manifmerger.XmlAttribute ( mXmlElement , mAttr , new com.android.manifmerger.AttributeModel ( "ActivityOne" , true , null , null ) ) ) ; org.mockito.Mockito.verify ( mAttr ) . getValue ( ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAttr ) ; }
public void test_valueUnbound ( ) throws java.io.IOException , java.net.UnknownHostException { javax.net.ssl.SSLSocket sock = ( ( javax.net.ssl.SSLSocket ) ( javax.net.ssl.SSLSocketFactory.getDefault ( ) . createSocket ( ) ) ) ; javax.net.ssl.SSLSession ss = sock.getSession ( ) ; org.apache.harmony.tests.javax.net.ssl.SSLSessionBindingListenerTest.mySSLSessionBindingListener sbl = new org.apache.harmony.tests.javax.net.ssl.SSLSessionBindingListenerTest.mySSLSessionBindingListener ( ) ; ss.putValue ( "test" , sbl ) ; ss.removeValue ( "test" ) ; assertTrue ( "valueUnbound was not called." , sbl.unboundDone ) ; }
public final int startActivity ( android.app.IApplicationThread caller , java.lang.String callingPackage , android.content.Intent intent , java.lang.String resolvedType , android.os.IBinder resultTo , java.lang.String resultWho , int requestCode , int startFlags , android.app.ProfilerInfo profilerInfo , android.os.Bundle bOptions ) { return startActivityAsUser ( caller , callingPackage , intent , resolvedType , resultTo , resultWho , requestCode , startFlags , profilerInfo , bOptions , android.os.UserHandle.getCallingUserId ( ) ) ; }
public static void encode ( com.android.tools.rpclib.rpc.Encoder e , com.android.tools.rpclib.rpc.Device o ) throws java.io.IOException { e.string ( o.Name ) ; e.string ( o.Model ) ; e.string ( o.OS ) ; e.uint8 ( o.PointerSize ) ; e.uint8 ( o.PointerAlignment ) ; e.uint64 ( o.MaxMemorySize ) ; e.bool ( o.RequiresShaderPatching ) ; }
public void getRulesState_stagedRulesError ( ) throws java.lang.Exception { configureCallerHasPermission ( ) ; java.lang.String systemRulesVersion = "2016a" ; configureDeviceSystemRulesVersion ( systemRulesVersion ) ; configureDeviceCannotReadStagedDistroOperation ( ) ; com.android.timezone.distro.DistroVersion installedDistroVersion = new com.android.timezone.distro.DistroVersion ( com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION , ( ( com.android.timezone.distro.DistroVersion.CURRENT_FORMAT_MINOR_VERSION ) - 1 ) , "2016b" , 4 ) ; configureInstalledDistroVersion ( installedDistroVersion ) ; android.app.timezone.DistroRulesVersion installedDistroRulesVersion = new android.app.timezone.DistroRulesVersion ( installedDistroVersion.rulesVersion , installedDistroVersion.revision ) ; android.app.timezone.RulesState expectedRuleState = new android.app.timezone.RulesState ( "2016a" , RulesManagerService.DISTRO_FORMAT_VERSION_SUPPORTED , false , android.app.timezone.RulesState.STAGED_OPERATION_UNKNOWN , null , android.app.timezone.RulesState.DISTRO_STATUS_INSTALLED , installedDistroRulesVersion ) ; org.junit.Assert.assertEquals ( expectedRuleState , mRulesManagerService.getRulesState ( ) ) ; }
public void onNewFrame ( com.android.layoutlib.api.LayoutScene scene ) { ( mCount ) ++ ; mImageOverlay.setImage ( scene.getImage ( ) ) ; synchronized ( this ) { if ( ( mPendingDrawing ) == false ) { getDisplay ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { drawImage ( ) ; } } ) ; mPendingDrawing = true ; } } }
public void migrateAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.migrateAppData ( uuid , packageName , userId , flags ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
protected static java.util.Map < java.lang.String , java.lang.String > convertHeaders ( com.android.volley.Header [ ] headers ) { java.util.Map < java.lang.String , java.lang.String > result = new java.util.TreeMap < > ( java.lang.String.CASE_INSENSITIVE_ORDER ) ; for ( int i = 0 ; i < ( headers.length ) ; i ++ ) { result.put ( headers [ i ] . getName ( ) , headers [ i ] . getValue ( ) ) ; } return result ; }
public void testSendMessageTooLong ( ) { int sessionId = 2394 ; int peerId = 2032 ; byte [ ] message = new byte [ ( com.android.server.wifi.aware.WifiAwareServiceImplTest.MAX_LENGTH ) + 1 ] ; int messageId = 2043 ; int clientId = doConnect ( ) ; mDut.sendMessage ( clientId , sessionId , peerId , message , messageId , 0 ) ; org.mockito.Mockito.verify ( mAwareStateManagerMock ) . sendMessage ( clientId , sessionId , peerId , message , messageId , 0 ) ; }
public boolean roamToNetwork ( android.net.wifi.WifiConfiguration configuration ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.roamToNetwork ( configuration ) ; } else { return mWifiSupplicantControl.roamToNetwork ( configuration ) ; } }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; com.android.dialer.common.LogUtil.enterBlock ( "MainActivity.onCreate" ) ; activePeer = getNewPeer ( ) ; activePeer.onActivityCreate ( savedInstanceState ) ; }
static java.lang.String getLineOfOffset ( java.lang.String contents , int offset ) { int end = contents.indexOf ( '\n' , offset ) ; if ( end == ( - 1 ) ) { end = contents.indexOf ( '\r' , offset ) ; } return contents.substring ( offset , ( end != ( - 1 ) ? end : contents.length ( ) ) ) ; }
private void deleteAvd ( ) { try { java.lang.String avdName = mSdkCommandLine.getParamName ( ) ; com.android.sdklib.internal.avd.AvdManager avdManager = new com.android.sdklib.internal.avd.AvdManager ( mSdkManager , mSdkLog ) ; com.android.sdklib.internal.avd.AvdInfo info = avdManager.getAvd ( avdName , false ) ; if ( info == null ) { errorAndExit ( "There is no Android Virtual Device named '%s'." , avdName ) ; return ; } avdManager.deleteAvd ( info , mSdkLog ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
private static void normalize ( float [ ] in , float [ ] out ) { float l = android.renderscript.cts.CoreMathVerifier.length ( in ) ; for ( int i = 0 ; i < ( in.length ) ; i ++ ) { out [ i ] = ( in [ i ] ) / l ; } }
private boolean needFullRebuild ( ) { if ( ! ( options.isAutomaticFullRebuildEnabled ( ) ) ) { return false ; } com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; assert ( libraryDependencies ) != null ; return ( ! ( libraryDependencies.hasSameLibraryOnClasspath ( session.getLibraryDependencies ( ) ) ) ) || ( ! ( libraryDependencies.hasSameImportedLibrary ( session.getLibraryDependencies ( ) ) ) ) ; }
protected com.android.dialer.main.MainActivityPeer getNewPeer ( ) { if ( com.android.dialer.configprovider.ConfigProviderBindings.get ( this ) . getBoolean ( "nui_peer_enabled" , false ) ) { return new com.android.dialer.main.impl.NewMainActivityPeer ( this ) ; } else { return new com.android.dialer.main.impl.OldMainActivityPeer ( this ) ; } }
public boolean onCanceledViaNewOutgoingCallBroadcast ( final com.android.server.telecom.Call call ) { mPendingCallsToDisconnect.add ( call ) ; mHandler.postDelayed ( new java.lang.Runnable ( "CM.oCVNOCB" ) { @ java.lang.Override public void loggedRun ( ) { synchronized ( mLock ) { if ( mPendingCallsToDisconnect.remove ( call ) ) { android.telecom.Log.i ( this , "Delayed disconnection of call: %s" , call ) ; call.disconnect ( ) ; } } } } . prepare ( ) , com.android.server.telecom.Timeouts.getNewOutgoingCallCancelMillis ( mContext.getContentResolver ( ) ) ) ; return true ; }
public void notifyPendingSystemUpdate ( long updateReceivedTime , boolean isSecurityPatch ) { throwIfParentInstance ( "notifyPendingSystemUpdate" ) ; if ( ( mService ) != null ) { try { mService.notifyPendingSystemUpdate ( android.app.admin.SystemUpdateInfo.of ( updateReceivedTime , isSecurityPatch ) ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } } }
public void testCheckAccessLevel_hasAppOpsBitDefault_grantedPermission ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( true ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , true ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert.assertEquals ( NetworkStatsAccess.Level.DEVICESUMMARY , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public com.google.common.collect.ImmutableMap < com.android.dialer.speeddial.database.SpeedDialEntry , java.lang.Long > insert ( com.google.common.collect.ImmutableList < com.android.dialer.speeddial.database.SpeedDialEntry > entries ) { if ( entries.isEmpty ( ) ) { return com.google.common.collect.ImmutableMap.of ( ) ; } android.database.sqlite.SQLiteDatabase db = getWritableDatabase ( ) ; db.beginTransaction ( ) ; try { com.google.common.collect.ImmutableMap < com.android.dialer.speeddial.database.SpeedDialEntry , java.lang.Long > insertedEntriesToIdsMap = insert ( db , entries ) ; db.setTransactionSuccessful ( ) ; return insertedEntriesToIdsMap ; } finally { db.endTransaction ( ) ; db.close ( ) ; } }
public static void assertEqualCertificateChains ( long [ ] expected , long [ ] actual ) { assertEquals ( expected.length , actual.length ) ; for ( int i = 0 ; i < ( expected.length ) ; i ++ ) { org.conscrypt.NativeCrypto.X509_cmp ( expected [ i ] , actual [ i ] ) ; } }
private void setupFunctioningHardwareInterface ( ) { org.mockito.Mockito.when ( mHardware.initOffloadConfig ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( mHardware.initOffloadControl ( org.mockito.Matchers.any ( OffloadHardwareInterface.ControlCallback.class ) ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( mHardware.getForwardedStats ( org.mockito.Matchers.any ( ) ) ) . thenReturn ( new com.android.server.connectivity.tethering.OffloadHardwareInterface.ForwardedStats ( ) ) ; }
public void changeBarringPassword ( java.lang.String facility , java.lang.String oldPwd , java.lang.String newPwd , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CHANGE_BARRING_PASSWORD , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeInt ( 3 ) ; rr.mParcel.writeString ( facility ) ; rr.mParcel.writeString ( oldPwd ) ; rr.mParcel.writeString ( newPwd ) ; send ( rr ) ; }
public void copyFrom ( short [ ] d ) { validateIsInt16 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_16 , d.length ) ; }
private void setCalcTypeForLocale ( com.ibm.icu.util.ULocale locale ) { java.lang.String localeCalType = com.ibm.icu.impl.CalendarUtil.getCalendarType ( locale ) ; if ( "islamic-civil" . equals ( localeCalType ) ) setCalculationType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ; else if ( "islamic-umalqura" . equals ( localeCalType ) ) setCalculationType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_UMALQURA ) ; else if ( "islamic-tbla" . equals ( localeCalType ) ) setCalculationType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_TBLA ) ; else if ( localeCalType.startsWith ( "islamic" ) ) setCalculationType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC ) ; else setCalculationType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ; }
public void visitReferenceExpression ( com.intellij.psi.PsiReferenceExpression expression ) { com.intellij.psi.PsiElement resolved = expression.resolve ( ) ; if ( resolved instanceof com.intellij.psi.PsiField ) { com.android.ide.common.resources.ResourceUrl url = com.android.tools.lint.detector.api.ResourceEvaluator.getResourceConstant ( resolved ) ; if ( ( url != null ) && ( ! ( url.framework ) ) ) { com.android.tools.lint.checks.ResourceUsageModel.Resource resource = mModel.addResource ( url.type , url.name , null ) ; com.android.tools.lint.checks.ResourceUsageModel.markReachable ( resource ) ; } } super . visitReferenceExpression ( expression ) ; }
public synchronized void close ( ) throws com.android.sched.util.file.CannotCloseOutputException { if ( ! ( closed ) ) { if ( ( zipFile.getStatus ( ) ) == ( com.android.sched.util.file.StreamFileStatus.OPEN ) ) { try { zipFile.getOutputStream ( ) . close ( ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.file.CannotCloseOutputException ( this , e ) ; } } closed = true ; } }
public static void register ( java.util.Map taglets ) { com.ibm.icu.dev.tool.docs.ICUTaglet.ICUInternalTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUDraftTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUStableTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUProvisionalTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUObsoleteTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUIgnoreTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUNewTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUNoteTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUEnhancedTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUDiscouragedTaglet.register ( taglets ) ; }
public void onExternalCallChanged ( com.android.server.telecom.Call call , boolean isExternalCall ) { if ( isExternalCall ) { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_REMOVE_CALL , new com.android.server.telecom.ConnectionServiceFocusManager.MessageArgs ( android.telecom.Log.createSubsession ( ) , "CSFM.oECC" , call ) ) . sendToTarget ( ) ; } else { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_ADD_CALL , new com.android.server.telecom.ConnectionServiceFocusManager.MessageArgs ( android.telecom.Log.createSubsession ( ) , "CSFM.oECC" , call ) ) . sendToTarget ( ) ; } }
void dispatchAborted ( ) { if ( ( ( mDialogInfo ) != null ) && ( ( mDialogInfo.callback ) != null ) ) { final android.content.pm.IPackageDeleteObserver2 observer = IPackageDeleteObserver2.Stub.asInterface ( mDialogInfo.callback ) ; try { observer.onPackageDeleted ( mPackageName , PackageManager.DELETE_FAILED_ABORTED , "Cancelled by user" ) ; } catch ( android.os.RemoteException ignored ) { } } }
public java.util.Map < java.lang.String , java.lang.Integer > getSeverityOverrides ( ) { if ( ( ( severities ) == null ) || ( severities.isEmpty ( ) ) ) { return null ; } java.util.Map < java.lang.String , java.lang.Integer > map = com.google.common.collect.Maps.newHashMapWithExpectedSize ( severities.size ( ) ) ; for ( java.util.Map.Entry < java.lang.String , com.android.tools.lint.detector.api.Severity > entry : severities.entrySet ( ) ) { map.put ( entry.getKey ( ) , com.android.build.gradle.internal.dsl.LintOptions.convert ( entry.getValue ( ) ) ) ; } return map ; }
public void testIncludeAllPackagesUnderHere ( ) throws java.lang.Exception { junit.framework.TestSuite testSuite = new android.test.suitebuilder.examples.OuterTest ( ) . buildTestsUnderHereRecursively ( ) ; assertContentsInOrder ( android.test.suitebuilder.ListTestCaseNames.getTestCaseNames ( testSuite ) , "testOuter" , "testPublicConstructor" , "testErrorOne" , "testErrorTwo" , "testFailOne" , "testFailTwo" , "testInstrumentation" , "testLevel1" , "testLevel2" , "testAnotherOne" , "testSimpleOne" , "testSimpleTwo" , "testNonSmoke" , "testSmoke" , "testSubclass" , "testSuperclass" , "testUnSuppressedMethod" ) ; }
public void testLaunchToSide ( ) throws java.lang.Exception { if ( ( ! ( supportsMultiWindowMode ( ) ) ) || ( ! ( supportsSplitScreenMultiWindow ( ) ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInDockStack ( android.server.cts.LAUNCHING_ACTIVITY ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { LAUNCHING_ACTIVITY } ) ; launchActivityToSide ( ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { android.server.cts.ActivityManagerDockedStackTests.TEST_ACTIVITY_NAME } ) ; mAmWmState.assertContainsStack ( "Must contain fullscreen stack." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.assertContainsStack ( "Must contain docked stack." , android.server.cts.DOCKED_STACK_ID ) ; }
private java.util.Set < com.android.jack.analysis.DefinitionMarker > getDefinitions ( @ javax.annotation.Nonnull java.util.List < com.android.jack.analysis.DefinitionMarker > definitions , @ javax.annotation.Nonnull java.util.BitSet in ) { java.util.Set < com.android.jack.analysis.DefinitionMarker > reachingDefs = new java.util.HashSet < com.android.jack.analysis.DefinitionMarker > ( ) ; for ( int i = in.nextSetBit ( 0 ) ; i >= 0 ; i = in.nextSetBit ( ( i + 1 ) ) ) { reachingDefs.add ( definitions.get ( i ) ) ; } return reachingDefs ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID ) ; }
public void validatePolicyWithInvalidServerUri ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.UpdateParameter updateParam = android.net.wifi.hotspot2.pps.UpdateParameterTest.createUpdateParameter ( ) ; byte [ ] rawUriBytes = new byte [ ( android.net.wifi.hotspot2.pps.UpdateParameterTest.MAX_URI_BYTES ) + 1 ] ; java.util.Arrays.fill ( rawUriBytes , ( ( byte ) ( 'a' ) ) ) ; updateParam.setServerUri ( new java.lang.String ( rawUriBytes , java.nio.charset.StandardCharsets.UTF_8 ) ) ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; }
public void onIsConferencedChanged ( com.android.server.telecom.Call call ) { if ( ( call.getParentCall ( ) ) != null ) { android.telecom.Log.d ( this , "Ignoring onIsConferenceChanged from child call with new parent" ) ; return ; } if ( ( call.getChildCalls ( ) . size ( ) ) == 1 ) { android.telecom.Log.d ( this , "Ignoring onIsConferenceChanged from parent with only one child call" ) ; return ; } updateHeadsetWithCallState ( false ) ; }
public void testAesCbcHmacSha384Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 , android.net.cts.IpSecManagerTest.getKey ( 384 ) , 192 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , false , 1 , true ) ; }
public final void dispatchUncaughtException ( java.lang.Throwable e ) { java.lang.Thread.UncaughtExceptionHandler initialUeh = java.lang.Thread.getUncaughtExceptionPreHandler ( ) ; if ( initialUeh != null ) { try { initialUeh.uncaughtException ( this , e ) ; } catch ( java.lang.RuntimeException | java.lang.Error ignored ) { } } getUncaughtExceptionHandler ( ) . uncaughtException ( this , e ) ; }
protected void handle ( long taskId , @ javax.annotation.Nonnull org.simpleframework.http.Request request , @ javax.annotation.Nonnull org.simpleframework.http.Response response ) { com.android.jack.server.tasks.ReloadConfig.logger.log ( java.util.logging.Level.INFO , "Reloading configuration" ) ; response.setContentLength ( 0 ) ; try { jackServer.reloadConfig ( ) ; response.setStatus ( Status.OK ) ; } catch ( com.android.sched.util.file.NotFileException | com.android.jack.server.api.v01.ServerException | com.android.sched.util.file.WrongPermissionException | java.io.IOException | com.android.sched.util.file.CannotCreateFileException | com.android.sched.util.file.CannotChangePermissionException e ) { com.android.jack.server.tasks.ReloadConfig.logger.log ( java.util.logging.Level.SEVERE , "Failed to reload configuration" , e ) ; response.setStatus ( Status.INTERNAL_SERVER_ERROR ) ; } }
public void dumpDoesNotClearLastFailureData ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; getDumpString ( ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect" ) ) ; }
public void setSupplicantLogLevel ( boolean turnOnVerbose ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { int logLevel = ( turnOnVerbose ) ? SupplicantStaIfaceHal.LOG_LEVEL_DEBUG : SupplicantStaIfaceHal.LOG_LEVEL_INFO ; mSupplicantStaIfaceHal.setLogLevel ( logLevel ) ; } else { doStringCommand ( ( "LOG_LEVEL " + ( turnOnVerbose ? "DEBUG" : "INFO" ) ) ) ; } }
public void testNonDstZoneNameWithDstTimestamp ( ) throws java.lang.Exception { java.text.SimpleDateFormat format = new java.text.SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm zzzz" , java.util.Locale.US ) ; java.util.Calendar calendar = new java.util.GregorianCalendar ( libcore.java.text.SimpleDateFormatTest.AMERICA_LOS_ANGELES ) ; calendar.setTime ( format.parse ( "2010-12-21T10:00 Pacific Daylight Time" ) ) ; assertEquals ( 9 , calendar.get ( java.util.Calendar.HOUR_OF_DAY ) ) ; assertEquals ( 0 , calendar.get ( java.util.Calendar.MINUTE ) ) ; }
public void testConnectsToEmergencyNumberWithPlusSign_US ( ) { assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "+911" , RegionCode.US ) ) ; assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "＋911" , RegionCode.US ) ) ; assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( " +911" , RegionCode.US ) ) ; assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "+112" , RegionCode.US ) ) ; assertFalse ( com.android.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.connectsToEmergencyNumber ( "+999" , RegionCode.US ) ) ; }
public void testMergeWrite ( ) throws java.lang.Exception { com.android.builder.resources.ResourceMerger merger = com.android.builder.resources.ResourceMergerTest.getResourceMerger ( ) ; com.android.builder.resources.RecordingLogger logger = new com.android.builder.resources.RecordingLogger ( ) ; java.io.File folder = com.android.builder.resources.ResourceMergerTest.getWrittenResources ( ) ; com.android.builder.resources.ResourceSet writtenSet = new com.android.builder.resources.ResourceSet ( "unused" ) ; writtenSet.addSource ( folder ) ; writtenSet.loadFromFiles ( logger ) ; compareResourceMaps ( merger , writtenSet , false ) ; checkLogger ( logger ) ; }
public void testAesGcm128Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM , android.net.cts.IpSecManagerTest.AEAD_KEY , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , null , null , authCrypt , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , null , null , authCrypt , false , 1 , true ) ; }
private void refreshDisplay ( ) { com.android.monkeyrunner.core.IMonkeyImage snapshot = device.takeSnapshot ( ) ; currentImage = snapshot.createBufferedImage ( ) ; java.awt.Graphics2D g = scaledImage.createGraphics ( ) ; g.drawImage ( currentImage , 0 , 0 , scaledImage.getWidth ( ) , scaledImage.getHeight ( ) , null ) ; g.dispose ( ) ; display.setIcon ( new javax.swing.ImageIcon ( scaledImage ) ) ; pack ( ) ; }
public static long getMobileTcpRxPackets ( ) { long total = 0 ; for ( java.lang.String iface : android.net.TrafficStats.getMobileIfaces ( ) ) { long stat = android.net.TrafficStats.UNSUPPORTED ; try { stat = android.net.TrafficStats.getStatsService ( ) . getIfaceStats ( iface , android.net.TrafficStats.TYPE_TCP_RX_PACKETS ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } total += android.net.TrafficStats.addIfSupported ( stat ) ; } return total ; }
public K next ( ) { checkForConcurrentModification ( ) ; com.google.common.collect.LinkedListMultimap.checkElement ( next ) ; current = next ; seenKeys.add ( current.key ) ; do { next = next.next ; } while ( ( ( next ) != null ) && ( ! ( seenKeys.add ( next.key ) ) ) ) ; return current.key ; }
public void saveSendingFileInfo ( java.lang.String mimeType , java.lang.String uriString , boolean isHandover , boolean fromExternal ) throws java.lang.IllegalArgumentException { synchronized ( this ) { mMultipleFlag = false ; mMimeTypeOfSendingFile = mimeType ; mIsHandoverInitiated = isHandover ; android.net.Uri uri = android.net.Uri.parse ( uriString ) ; com.android.bluetooth.opp.BluetoothOppSendFileInfo sendFileInfo = com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo ( mContext , uri , mimeType , fromExternal ) ; uri = com.android.bluetooth.opp.BluetoothOppUtility.generateUri ( uri , sendFileInfo ) ; com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo ( uri , sendFileInfo ) ; mUriOfSendingFile = uri.toString ( ) ; storeApplicationData ( ) ; } }
public java.util.ArrayList < android.hardware.tests.baz.V1_0.IBase.Foo > someMethodWithFooVectors ( java.util.ArrayList < android.hardware.tests.baz.V1_0.IBase.Foo > fooInput ) { android.util.Log.d ( com.android.commands.hidl_test_java.HidlTestJava.TAG , ( "Baz someMethodWithFooVectors " + ( com.android.commands.hidl_test_java.HidlTestJava.fooVecToString ( fooInput ) ) ) ) ; java.util.ArrayList < android.hardware.tests.baz.V1_0.IBase.Foo > fooOutput = new java.util.ArrayList < android.hardware.tests.baz.V1_0.IBase.Foo > ( ) ; fooOutput.add ( fooInput.get ( 1 ) ) ; fooOutput.add ( fooInput.get ( 0 ) ) ; return fooOutput ; }
private boolean isRequired ( ) { int first_api_level = android.os.SystemProperties.getInt ( "ro.product.first_api_level" , 0 ) ; if ( ( first_api_level > 0 ) && ( first_api_level < ( android.security.cts.EncryptionTest.min_api_level ) ) ) { return false ; } else { return ! ( hasLowRAM ( ) ) ; } }
public void testSetPublicIdGetPublicId ( ) { org.xml.sax.helpers.LocatorImpl l = new org.xml.sax.helpers.LocatorImpl ( ) ; l.setPublicId ( org.apache.harmony.tests.org.xml.sax.helpers.LocatorImplTest.PUB ) ; assertEquals ( org.apache.harmony.tests.org.xml.sax.helpers.LocatorImplTest.PUB , l.getPublicId ( ) ) ; l.setPublicId ( null ) ; assertEquals ( null , l.getPublicId ( ) ) ; }
static float computeStraightness ( float [ ] points , float totalLen ) { float dx = ( points [ 2 ] ) - ( points [ 0 ] ) ; float dy = ( points [ 3 ] ) - ( points [ 1 ] ) ; return ( ( float ) ( java.lang.Math.hypot ( dx , dy ) ) ) / totalLen ; }
private java.util.List < java.lang.String > getEnabledTypes ( com.google.gct.testing.GoogleCloudTestingDimension dimension ) { java.util.List < java.lang.String > enabledTypes = new java.util.LinkedList < java.lang.String > ( ) ; for ( com.google.gct.testing.CloudTestingType type : dimension.getEnabledTypes ( ) ) { enabledTypes.add ( type.getId ( ) ) ; } return enabledTypes ; }
public java.lang.String getImei ( int slotIndex ) { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony == null ) return null ; try { return telephony.getImeiForSlot ( slotIndex , getOpPackageName ( ) ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
public org.objectweb.asm.ClassReader readIfKnown ( java.lang.String internalClassName ) { java.lang.String filename = ( rewriter.unprefix ( internalClassName ) ) + ".class" ; com.google.devtools.build.android.desugar.InputFileProvider inputFileProvider = indexedInputs.getInputFileProvider ( filename ) ; if ( inputFileProvider != null ) { try ( java.io.InputStream bytecode = inputFileProvider.getInputStream ( filename ) ) { return rewriter.reader ( bytecode ) ; } catch ( java.io.IOException e ) { throw new java.lang.IllegalStateException ( ( "Couldn't load " + internalClassName ) , e ) ; } } return null ; }
public synchronized void onUserStopped ( ) { setLockdown ( false ) ; mAlwaysOn = false ; unregisterPackageChangeReceiverLocked ( ) ; agentDisconnect ( ) ; }
private static boolean isService ( com.android.ide.eclipse.adt.internal.editors.Hyperlinks.XmlContext context ) { org.w3c.dom.Attr attribute = context.getAttribute ( ) ; org.w3c.dom.Element node = context.getElement ( ) ; java.lang.String nodeName = node.getNodeName ( ) ; if ( ( ( com.android.sdklib.xml.AndroidManifest.NODE_SERVICE.equals ( nodeName ) ) && ( com.android.sdklib.xml.AndroidManifest.ATTRIBUTE_NAME.equals ( attribute.getLocalName ( ) ) ) ) && ( com.android.util.XmlUtils.ANDROID_URI.equals ( attribute.getNamespaceURI ( ) ) ) ) { return true ; } return false ; }
private int abortIdleOptimizations ( long lowStorageThreshold ) { if ( mAbortIdleOptimization.get ( ) ) { return com.android.server.pm.BackgroundDexOptService.OPTIMIZE_ABORT_BY_JOB_SCHEDULER ; } long usableSpace = mDataDir.getUsableSpace ( ) ; if ( usableSpace < lowStorageThreshold ) { android.util.Log.w ( com.android.server.pm.BackgroundDexOptService.TAG , ( "Aborting background dex opt job due to low storage: " + usableSpace ) ) ; return com.android.server.pm.BackgroundDexOptService.OPTIMIZE_ABORT_NO_SPACE_LEFT ; } return com.android.server.pm.BackgroundDexOptService.OPTIMIZE_CONTINUE ; }
public void testAesCbcHmacSha1Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , int timeoutMillis , android.bluetooth.le.AdvertisingSetCallback callback ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , timeoutMillis , callback , new android.os.Handler ( android.os.Looper.getMainLooper ( ) ) ) ; }
protected byte calculateByte ( byte in ) throws java.lang.IllegalStateException , org.bouncycastle.crypto.DataLengthException { return encrypting ? encryptByte ( in ) : decryptByte ( in ) ; }
public boolean onMenuItemClick ( android.view.MenuItem item ) { switch ( item.getItemId ( ) ) { case R.id.menu_reset_webview : if ( ( mWebView ) != null ) { android.view.ViewGroup container = getContainer ( ) ; container.removeView ( mWebView ) ; mWebView.destroy ( ) ; mWebView = null ; } createAndInitializeWebView ( ) ; return true ; case R.id.menu_about : about ( ) ; org.chromium.webview_shell.WebViewBrowserActivity.hideKeyboard ( mUrlBar ) ; return true ; default : return false ; } }
public java.lang.String describeFirstNonRequestableCapability ( ) { final long nonRequestable = ( mNetworkCapabilities ) & ( android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES ) ; if ( nonRequestable != 0 ) { return android.net.NetworkCapabilities.capabilityNameOf ( com.android.internal.util.BitUtils.unpackBits ( nonRequestable ) [ 0 ] ) ; } if ( ( ( mLinkUpBandwidthKbps ) != 0 ) || ( ( mLinkDownBandwidthKbps ) != 0 ) ) return "link bandwidth" ; if ( hasSignalStrength ( ) ) return "signalStrength" ; return null ; }
public boolean equals ( java.lang.Object obj ) { if ( obj instanceof com.android.server.net.NetworkStatsCollection.Key ) { final com.android.server.net.NetworkStatsCollection.Key key = ( ( com.android.server.net.NetworkStatsCollection.Key ) ( obj ) ) ; return ( ( ( ( uid ) == ( key.uid ) ) && ( ( set ) == ( key.set ) ) ) && ( ( tag ) == ( key.tag ) ) ) && ( java.util.Objects.equals ( ident , key.ident ) ) ; } return false ; }
public java.util.Set < java.lang.String > getApplicableFilters ( @ com.android.annotations.NonNull java.util.Set < java.lang.String > allFilters ) { java.util.Set < java.lang.String > list = super . getApplicableFilters ( allFilters ) ; if ( ( isEnable ( ) ) && ( universalApk ) ) { list.add ( com.android.build.SplitOutput.NO_FILTER ) ; } return list ; }
private void setCursorForRegion ( int x , int y , com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo region ) { if ( region != null ) { java.awt.Cursor c = getCursor ( x , y , region ) ; setCursor ( c ) ; } else { setCursor ( java.awt.Cursor.getDefaultCursor ( ) ) ; } }
public boolean hasResources ( com.android.resources.ResourceType type ) { java.util.List < com.android.resources.ResourceFolderType > folderTypes = com.android.resources.FolderTypeRelationship.getRelatedFolders ( type ) ; boolean valid = false ; for ( com.android.resources.ResourceFolderType rft : folderTypes ) { if ( rft == ( mType ) ) { valid = true ; break ; } } if ( valid ) { if ( ( mFiles ) != null ) { for ( com.android.ide.common.resources.ResourceFile f : mFiles ) { if ( f.hasResources ( type ) ) { return true ; } } } } return false ; }
public void test_formatLong_minimumIntegerDigits ( ) { java.text.DecimalFormat df = new java.text.DecimalFormat ( "###0.##" , new java.text.DecimalFormatSymbols ( java.util.Locale.US ) ) ; df.setMinimumIntegerDigits ( 3 ) ; assertEquals ( 3 , df.getMinimumIntegerDigits ( ) ) ; assertEquals ( "012" , df.format ( 12 ) ) ; df.setMaximumIntegerDigits ( 2 ) ; assertEquals ( 2 , df.getMinimumIntegerDigits ( ) ) ; assertEquals ( "00.7" , df.format ( 0.7 ) ) ; }
public void testOnKeyMultiple ( ) throws java.lang.Throwable { final android.view.cts.MockView view = ( ( android.view.cts.MockView ) ( mActivity.findViewById ( R.id.mock_view ) ) ) ; runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { view.setFocusable ( true ) ; } } ) ; assertFalse ( view.hasCalledOnKeyMultiple ( ) ) ; view.dispatchKeyEvent ( new android.view.KeyEvent ( android.view.KeyEvent.ACTION_MULTIPLE , android.view.KeyEvent.KEYCODE_ENTER ) ) ; assertTrue ( view.hasCalledOnKeyMultiple ( ) ) ; }
private void addCommonOptionsForMultiDex ( @ javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain toolchain , @ javax.annotation.Nonnull java.io.File configFile ) { toolchain.addProperty ( MultiDexLegacy.MULTIDEX_LEGACY.getName ( ) , "true" ) ; toolchain.addProperty ( PreProcessor.ENABLE.getName ( ) , "true" ) ; toolchain.addProperty ( PreProcessor.FILE.getName ( ) , configFile.getAbsolutePath ( ) ) ; }
public void testFiveCount_c ( ) throws java.lang.Exception { assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "c" ) ) ; assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "cc" ) ) ; assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "ccc" ) ) ; assertEquals ( "Thursday" , formatDateUtc ( java.util.Locale.ENGLISH , "cccc" ) ) ; assertEquals ( "T" , formatDateUtc ( java.util.Locale.ENGLISH , "ccccc" ) ) ; }
private void removeConnectionServiceAdapter ( com.android.internal.telecom.IConnectionServiceAdapter adapter ) { if ( isServiceValid ( "removeConnectionServiceAdapter" ) ) { try { logOutgoing ( "removeConnectionServiceAdapter %s" , adapter ) ; mServiceInterface.removeConnectionServiceAdapter ( adapter , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException e ) { } } }
private void handleDisconnect ( ) { mServiceConnection = null ; clearAbort ( ) ; handleServiceDisconnected ( ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/AddJavascriptInterfaceTest.java:16: Warning: WebView.addJavascriptInterface should not be called [AddJavascriptInterface]\n" + ( ( ( ( ( " webView.addJavascriptInterface(object, string);\n" + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/AddJavascriptInterfaceTest.java:23: Warning: WebView.addJavascriptInterface should not be called [AddJavascriptInterface]\n" ) + " webView.addJavascriptInterface(object, string);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/AddJavascriptInterfaceTest.java.txt=>src/test/pkg/AddJavascriptInterfaceTest.java" , "bytecode/AddJavascriptInterfaceTest.class.data=>bin/classes/test/pkg/AddJavascriptInterfaceTest.class" , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class" ) , ( "bytecode/AddJavascriptInterfaceTest$WebViewChild.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$WebViewChild.class" ) , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebViewChild.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebViewChild.class" ) , ( "bytecode/AddJavascriptInterfaceTest$NonWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$NonWebView.class" ) , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnNonWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnNonWebView.class" ) ) ) ; }
public android.content.ContentValues getConstraints ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path.equals ( "" ) ) ) || ( ! ( DrmStore.Action.isValid ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( "Given usage or path is invalid/null" ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState ( ) ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _getConstraints ( mUniqueId , path , action ) ; }
public void onClick ( android.view.View v ) { if ( ( v != null ) && ( ( R.id.text_layout ) == ( v.getId ( ) ) ) ) { android.content.Context context = getContext ( ) ; if ( context != null ) { int pos = java.lang.Integer.parseInt ( getKey ( ) ) ; android.net.Uri url = android.content.ContentUris.withAppendedId ( Telephony.Carriers.CONTENT_URI , pos ) ; android.content.Intent editIntent = new android.content.Intent ( android.content.Intent.ACTION_EDIT , url ) ; editIntent.putExtra ( ApnSettings.SUB_ID , mSubId ) ; context.startActivity ( editIntent ) ; } } }
private void showRecentApps ( boolean triggeredFromAltTab ) { mPreloadedRecentApps = false ; try { com.android.internal.statusbar.IStatusBarService statusbar = getStatusBarService ( ) ; if ( statusbar != null ) { statusbar.showRecentApps ( triggeredFromAltTab ) ; } } catch ( android.os.RemoteException e ) { android.util.Slog.e ( com.android.internal.policy.impl.PhoneWindowManager.TAG , "RemoteException when showing recent apps" , e ) ; mStatusBarService = null ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; java.util.List < com.android.jack.ir.ast.JExpression > arguments = popCallArgs ( info , x.arguments , x.binding ) ; pushNewExpression ( info , x , x.enclosingInstance ( ) , arguments , scope ) ; } catch ( com.android.jack.ir.ast.JTypeLookupException e ) { throw translateException ( x , e ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
private void onGetReport ( byte [ ] address , byte [ ] report , int rptSize ) { if ( com.android.bluetooth.hid.HidHostService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidHostService.TAG , "onGetReport()" ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidHostService.MESSAGE_ON_GET_REPORT ) ; msg.obj = address ; android.os.Bundle data = new android.os.Bundle ( ) ; data.putByteArray ( BluetoothHidHost.EXTRA_REPORT , report ) ; data.putInt ( BluetoothHidHost.EXTRA_REPORT_BUFFER_SIZE , rptSize ) ; msg.setData ( data ) ; mHandler.sendMessage ( msg ) ; }
public long insertContact ( android.database.sqlite.SQLiteDatabase db , long rawContactId ) { mSelectionArgs1 [ 0 ] = java.lang.String.valueOf ( rawContactId ) ; computeAggregateData ( db , mRawContactsQueryByRawContactId , mSelectionArgs1 , mContactInsert ) ; return mContactInsert.executeInsert ( ) ; }
public static void genRandomDoubles ( long seed , double min , double max , double [ ] array ) { java.util.Random r = new java.util.Random ( seed ) ; for ( int i = 0 ; i < ( array.length ) ; i ++ ) { array [ i ] = min + ( ( r.nextDouble ( ) ) * ( max - min ) ) ; } }
public static com.google.devtools.common.options.OptionValueDescription createOptionValueDescription ( com.google.devtools.common.options.OptionDefinition option ) { if ( option.allowsMultiple ( ) ) { return new com.google.devtools.common.options.OptionValueDescription.RepeatableOptionValueDescription ( option ) ; } else if ( option.isExpansionOption ( ) ) { return new com.google.devtools.common.options.OptionValueDescription.ExpansionOptionValueDescription ( option ) ; } else if ( option.hasImplicitRequirements ( ) ) { return new com.google.devtools.common.options.OptionValueDescription.OptionWithImplicitRequirementsValueDescription ( option ) ; } else if ( option.isWrapperOption ( ) ) { return new com.google.devtools.common.options.OptionValueDescription.WrapperOptionValueDescription ( option ) ; } else { return new com.google.devtools.common.options.OptionValueDescription.SingleOptionValueDescription ( option ) ; } }
public static void notify ( java.lang.Object thisReference , int uniqueId , int infoType , java.lang.String message ) { android.drm.DrmManagerClient instance = ( ( android.drm.DrmManagerClient ) ( ( ( java.lang.ref.WeakReference ) ( thisReference ) ) . get ( ) ) ) ; if ( ( null != instance ) && ( null != ( instance.mInfoHandler ) ) ) { android.os.Message m = instance.mInfoHandler.obtainMessage ( android.drm.DrmManagerClient.InfoHandler.INFO_EVENT_TYPE , uniqueId , infoType , message ) ; instance.mInfoHandler.sendMessage ( m ) ; } }
public com.android.sdklib.internal.avd.AvdInfo [ ] getValidAvds ( ) { synchronized ( mAllAvdList ) { if ( ( mValidAvdList ) == null ) { java.util.ArrayList < com.android.sdklib.internal.avd.AvdInfo > list = new java.util.ArrayList < com.android.sdklib.internal.avd.AvdInfo > ( ) ; for ( com.android.sdklib.internal.avd.AvdInfo avd : mAllAvdList ) { if ( ( avd.getStatus ( ) ) == ( com.android.sdklib.internal.avd.AvdInfo.AvdStatus.OK ) ) { list.add ( avd ) ; } } mValidAvdList = list.toArray ( new com.android.sdklib.internal.avd.AvdInfo [ list.size ( ) ] ) ; } return mValidAvdList ; } }
private void init ( ) { if ( ( mMediaPlayerList ) != null ) { android.util.Log.wtfStack ( com.android.bluetooth.avrcp.AvrcpTargetService.TAG , "init: The service has already been initialized" ) ; return ; } mAudioManager = ( ( android.media.AudioManager ) ( getSystemService ( Context.AUDIO_SERVICE ) ) ) ; com.android.bluetooth.avrcp.AvrcpTargetService.sDeviceMaxVolume = mAudioManager.getStreamMaxVolume ( AudioManager.STREAM_MUSIC ) ; mMediaPlayerList = new com.android.bluetooth.avrcp.MediaPlayerList ( ) ; mMediaPlayerList.init ( android.os.Looper.myLooper ( ) , this , new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback ( ) ) ; mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface ( ) ; mNativeInterface.init ( this ) ; }
private void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array , android.support.v8.renderscript.Element.DataType dt , int arrayLen ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , array , ( arrayLen * ( dt.mSize ) ) , dt ) ; }
public com.android.jack.ir.ast.JEnum getType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pack , @ javax.annotation.Nonnull java.lang.String simpleName ) { return pack.getPhantomEnum ( simpleName ) ; }
public void waitForFlushComplete ( ) { java.util.concurrent.CountDownLatch latch = mFlushLatch ; try { if ( latch != null ) { java.lang.String message = android.hardware.cts.helpers.SensorCtsHelper.formatAssertionMessage ( mSensor , "WaitForFlush" , mRateUs , mMaxBatchReportLatencyUs ) ; junit.framework.Assert.assertTrue ( message , latch.await ( android.hardware.cts.helpers.TestSensorEventListener.FLUSH_TIMEOUT_US , java.util.concurrent.TimeUnit.MICROSECONDS ) ) ; } } catch ( java.lang.InterruptedException e ) { } }
private void runAndVerify ( java.lang.String expectedCmd ) throws java.lang.Exception { mMockDevice.executeShellCommand ( expectedCmd , ( ( com.android.ddmlib.IShellOutputReceiver ) ( org.easymock.EasyMock.anyObject ( ) ) ) , org.easymock.EasyMock.eq ( 0L ) , org.easymock.EasyMock.eq ( java.util.concurrent.TimeUnit.MILLISECONDS ) ) ; org.easymock.EasyMock.replay ( mMockDevice ) ; mRunner.run ( mMockListener ) ; org.easymock.EasyMock.verify ( mMockDevice ) ; }
public static void computeFma ( android.renderscript.cts.TestFma.ArgumentsFloatFloatFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 1 , 1 , false ) ; android.renderscript.cts.Target.Floaty ab = t.multiply ( t.new32 ( args.inMultiplicand1 ) , t.new32 ( args.inMultiplicand2 ) ) ; args.out = t.add ( ab , t.new32 ( args.inOffset ) ) ; }
public void getNeighboringCids ( android.os.Message response , android.os.WorkSource workSource ) { if ( isPhoneTypeGsm ( ) ) { mCi.getNeighboringCids ( response , workSource ) ; } else { if ( response != null ) { com.android.internal.telephony.CommandException ce = new com.android.internal.telephony.CommandException ( CommandException.Error.REQUEST_NOT_SUPPORTED ) ; android.os.AsyncResult.forMessage ( response ) . exception = ce ; response.sendToTarget ( ) ; } } }
void createSizedHelper ( android.renderscript.Element e ) { for ( int i = 1 ; i <= 8 ; i ++ ) { android.renderscript.Allocation A = android.renderscript.Allocation.createSized ( mRS , e , i ) ; assertEquals ( A.getType ( ) . getElement ( ) , e ) ; assertEquals ( A.getType ( ) . getX ( ) , i ) ; A.destroy ( ) ; } }
public static boolean isValidUint24 ( long i ) { return ( i & 16777215L ) == i ; }
public void startLceService ( int reportIntervalMs , boolean pullMode , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_START_LCE , response , mRILDefaultWorkSource ) ; rr.mParcel.writeInt ( 2 ) ; rr.mParcel.writeInt ( reportIntervalMs ) ; rr.mParcel.writeInt ( ( pullMode ? 1 : 0 ) ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) { riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; } send ( rr ) ; }
public int getDefaultFractionDigits ( ) { if ( icuCurrency.getCurrencyCode ( ) . equals ( "XXX" ) ) { return - 1 ; } return icuCurrency.getDefaultFractionDigits ( ) ; }
public boolean createBondOutOfBand ( android.bluetooth.BluetoothDevice device , int transport , android.bluetooth.OobData oobData ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "createBondOutOfBand() - Not allowed for non-active user" ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return false ; return service.createBond ( device , transport , oobData ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAssertStatement x ) { print ( com.android.jack.ir.impl.BaseGenerationVisitor.CHARS_ASSERT ) ; accept ( x.getTestExpr ( ) ) ; com.android.jack.ir.ast.JExpression arg = x.getArg ( ) ; if ( arg != null ) { print ( " : " ) ; accept ( arg ) ; } return false ; }
public void hangupConnectionByIndex ( com.android.internal.telephony.GsmCdmaCall call , int index ) throws com.android.internal.telephony.CallStateException { int count = call.mConnections.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { com.android.internal.telephony.GsmCdmaConnection cn = ( ( com.android.internal.telephony.GsmCdmaConnection ) ( call.mConnections.get ( i ) ) ) ; if ( ( ! ( cn.mDisconnected ) ) && ( ( cn.getGsmCdmaIndex ( ) ) == index ) ) { mCi.hangupConnection ( index , obtainCompleteMessage ( ) ) ; return ; } } throw new com.android.internal.telephony.CallStateException ( "no GsmCdma index found" ) ; }
private void processSlcConnected ( ) { mSlcConnected = true ; if ( ( mPhoneProxy ) != null ) { try { mPhoneProxy.queryPhoneState ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.bluetooth.hfp.HeadsetStateMachine.TAG , android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } } else { android.util.Log.e ( com.android.bluetooth.hfp.HeadsetStateMachine.TAG , "Handsfree phone proxy null for query phone state" ) ; } }
public void visitInnerClassesInfo ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.InnerClassesInfo innerClassesInfo ) { int innerClassIndex = innerClassesInfo.u2innerClassIndex ; int innerNameIndex = innerClassesInfo.u2innerNameIndex ; if ( ( innerClassIndex != 0 ) && ( innerNameIndex != 0 ) ) { java.lang.String newInnerName = clazz.getClassName ( innerClassIndex ) ; int index = newInnerName.lastIndexOf ( ClassConstants.INNER_CLASS_SEPARATOR ) ; if ( index >= 0 ) { innerClassesInfo.u2innerNameIndex = new proguard.classfile.editor.ConstantPoolEditor ( ( ( proguard.classfile.editor.ProgramClass ) ( clazz ) ) ) . addUtf8Constant ( newInnerName.substring ( ( index + 1 ) ) ) ; } } }
public void testNoDpi ( ) throws java.lang.Exception { mEnabled = com.android.tools.lint.checks.IconDetectorTest.ALL ; assertEquals ( ( "res/drawable-mdpi/frame.png: Warning: The following images appear in both -nodpi and in a density folder: frame.png [IconNoDpi]\n" + ( ( ( ( ( "res/drawable-xlarge-nodpi-v11/frame.png: Warning: The frame.png icon has identical contents in the following configuration folders: drawable-mdpi, drawable-nodpi, drawable-xlarge-nodpi-v11 [IconDuplicatesConfig]\n" + " res/drawable-nodpi/frame.png: <No location-specific message\n" ) + " res/drawable-mdpi/frame.png: <No location-specific message\n" ) + "res: Warning: Missing density variation folders in res: drawable-hdpi, drawable-xhdpi [IconMissingDensityFolder]\n" ) + "0 errors, 3 warnings\n" ) + "" ) ) , lintProject ( "res/drawable-mdpi/frame.png" , "res/drawable-nodpi/frame.png" , "res/drawable-xlarge-nodpi-v11/frame.png" ) ) ; }
public void run ( ) { try { org.apache.http.HttpResponse response = mServer.getResponse ( mRequest ) ; mConnection.sendResponseHeader ( response ) ; mConnection.sendResponseEntity ( response ) ; mConnection.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( android.webkit.cts.CtsTestServer.TAG , "Error handling request:" , e ) ; } }
static void $opt$noinline$constantIndexing2 ( int [ ] array ) { array [ 1 ] = 1 ; array [ 2 ] = 1 ; array [ 3 ] = 1 ; array [ 4 ] = 1 ; array [ ( - 1 ) ] = 1 ; if ( ( array [ 1 ] ) == 1 ) { throw new java.lang.Error ( "" ) ; } }
public boolean enable ( ) { if ( isEnabled ( ) ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enable(): BT already enabled!" ) ; return true ; } try { return mManagerService.enable ( android.app.ActivityThread.currentPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public void setLockScreenShown ( boolean shown ) { if ( ( checkCallingPermission ( android.Manifest.permission.DEVICE_POWER ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( ( "Requires permission " + ( android.Manifest.permission.DEVICE_POWER ) ) ) ; } synchronized ( this ) { long ident = android.os.Binder.clearCallingIdentity ( ) ; try { if ( com.android.server.am.ActivityManagerService.DEBUG_LOCKSCREEN ) logLockScreen ( ( " shown=" + shown ) ) ; mLockScreenShown = ( shown ) ? com.android.server.am.ActivityManagerService.LOCK_SCREEN_SHOWN : com.android.server.am.ActivityManagerService.LOCK_SCREEN_HIDDEN ; updateSleepIfNeededLocked ( ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public static void computeMin ( android.renderscript.cts.TestMin.ArgumentsUshortUshortUshort args ) { args.out = android.renderscript.cts.CoreMathVerifier.minU16 ( args.inV1 , args.inV2 ) ; }
public void setRemoteFeatureMask ( int supportedFeatures ) { if ( com.android.bluetooth.map.BluetoothMapMasInstance.V ) android.util.Log.v ( TAG , ( "setRemoteFeatureMask : Curr: " + ( mRemoteFeatureMask ) ) ) ; mRemoteFeatureMask = supportedFeatures & ( com.android.bluetooth.map.BluetoothMapMasInstance.SDP_MAP_MAS_FEATURES ) ; if ( ( mObserver ) != null ) { mObserver.setObserverRemoteFeatureMask ( mRemoteFeatureMask ) ; if ( com.android.bluetooth.map.BluetoothMapMasInstance.V ) android.util.Log.v ( TAG , ( "setRemoteFeatureMask : set: " + ( mRemoteFeatureMask ) ) ) ; } }
public void junit ( ) throws java.lang.Exception { java.io.File junitJack = com.android.jack.TestTools.createTempFile ( "junit" , ".zip" ) ; com.android.jack.TestTools.compileSourceToJack ( new com.android.jack.Options ( ) , com.android.jack.ToolchainTest.JUNIT_SOURCELIST , ( ( ( com.android.jack.ToolchainTest.corePath.getAbsolutePath ( ) ) + ( java.io.File.pathSeparator ) ) + ( com.android.jack.TestTools.getFromAndroidTree ( "out/host/common/obj/JAVA_LIBRARIES/hamcrest-core-hostdex-jack_intermediates/classes.zip" ) ) ) , junitJack , true ) ; java.io.File junitOutFolder = com.android.jack.TestTools.createTempDir ( "junit" , "dex" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , junitJack , junitOutFolder , false ) ; }
public com.android.server.am.ContentProviderHolder getContentProviderExternal ( java.lang.String name , int userId , android.os.IBinder token ) { enforceCallingPermission ( android.Manifest.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY , "Do not have permission in call getContentProviderExternal()" ) ; userId = mUserController.handleIncomingUser ( android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , userId , false , com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY , "getContentProvider" , null ) ; return getContentProviderExternalUnchecked ( name , token , userId ) ; }
private java.lang.String quotedAttrValue ( java.lang.String attrValue ) { if ( ( attrValue.indexOf ( '"' ) ) == ( - 1 ) ) { return ( '"' + attrValue ) + '"' ; } if ( ( attrValue.indexOf ( '\'' ) ) == ( - 1 ) ) { return ( '\'' + attrValue ) + '\'' ; } attrValue = attrValue.replace ( "\"" , com.android.util.XmlUtils.QUOT_ENTITY ) ; return ( '"' + attrValue ) + '"' ; }
public void logp ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.String msg , java.lang.Throwable thrown ) { if ( ! ( isLoggable ( level ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setThrown ( thrown ) ; doLog ( lr ) ; }
private boolean doesNotHaveExtension ( @ android.support.annotation.NonNull java.util.Optional < com.google.i18n.phonenumbers.Phonenumber.PhoneNumber > parsedPhoneNumber ) { if ( ( parsedPhoneNumber.get ( ) . hasExtension ( ) ) && ( ! ( android.text.TextUtils.isEmpty ( parsedPhoneNumber.get ( ) . getExtension ( ) ) ) ) ) { com.android.dialer.logging.Logger.get ( context ) . logImpression ( DialerImpression.Type.ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_EXTENSION ) ; com.android.dialer.common.LogUtil.i ( "Constraints.doesNotHaveExtension" , "phone number has an extension" ) ; return false ; } return true ; }
public void registerMultiFlavorSourceProvider ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String flavorName , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider ) { if ( ( extraArtifactMap.get ( name ) ) == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "Artifact with name %1$s is not yet registered. Use registerArtifactType()" , name ) ) ; } extraMultiFlavorSourceProviders.put ( flavorName , new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer ( name , sourceProvider ) ) ; }
public void testSerializationCompatibility_SimpleImmutableEntry ( ) throws java.lang.Exception { java.util.AbstractMap.SimpleImmutableEntry e = new java.util.AbstractMap.SimpleImmutableEntry < java.lang.Integer , java.lang.String > ( 1 , "test" ) ; if ( ! ( ( tests.util.SerializationTester.readObject ( e , "serialization/tests/api/java/util/AbstractMapTest_SimpleImmutableEntry.golden.ser" ) ) instanceof java.util.AbstractMap.SimpleImmutableEntry ) ) { fail ( "should be SimpleImmutableEntry" ) ; } tests.util.SerializationTester.assertCompabilityEquals ( e , "serialization/tests/api/java/util/AbstractMapTest_SimpleImmutableEntry.golden.ser" ) ; }
public void test6_findFirst2 ( ) { for ( int i = 0 ; i < 32 ; i ++ ) { int value = 1 << i ; value |= value > > > 1 ; assertEquals ( com.android.dx.util.BitsTest.label ( i ) , i , com.android.dx.util.Bits.findFirst ( value , i ) ) ; } }
void makeWindowFreezingScreenIfNeededLocked ( com.android.server.wm.WindowState w ) { if ( ! ( okToDisplay ( ) ) ) { if ( com.android.server.wm.WindowManagerService.DEBUG_ORIENTATION ) android.util.Slog.v ( com.android.server.wm.WindowManagerService.TAG , ( "Changing surface while display frozen: " + w ) ) ; w.mOrientationChanging = true ; w.mLastFreezeDuration = 0 ; mInnerFields.mOrientationChangeComplete = false ; if ( ( mWindowsFreezingScreen ) == ( com.android.server.wm.WindowManagerService.WINDOWS_FREEZING_SCREENS_NONE ) ) { mWindowsFreezingScreen = com.android.server.wm.WindowManagerService.WINDOWS_FREEZING_SCREENS_ACTIVE ; mH.removeMessages ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT ) ; mH.sendEmptyMessageDelayed ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT , com.android.server.wm.WindowManagerService.WINDOW_FREEZE_TIMEOUT_DURATION ) ; } } }
public void run ( java.util.Collection < com.android.ddmlib.testrunner.ITestRunListener > listeners ) throws com.android.ddmlib.TimeoutException , java.io.IOException { final java.lang.String runCaseCommandStr = java.lang.String.format ( "am instrument -w -r %s %s" , getArgsCommand ( ) , getRunnerPath ( ) ) ; com.android.ddmlib.Log.i ( com.android.ddmlib.testrunner.RemoteAndroidTestRunner.LOG_TAG , java.lang.String.format ( "Running %s on %s" , runCaseCommandStr , mRemoteDevice.getSerialNumber ( ) ) ) ; mParser = new com.android.ddmlib.testrunner.InstrumentationResultParser ( listeners ) ; mRemoteDevice.executeShellCommand ( runCaseCommandStr , mParser , mAdbTimeout ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass x ) { printTypeFlags ( x ) ; print ( com.android.jack.ir.impl.CHARS_CLASS ) ; printTypeName ( x ) ; return false ; }
public static void initialize ( @ com.android.annotations.NonNull com.android.utils.ILogger logger , @ com.android.annotations.NonNull java.io.File out , @ com.android.annotations.NonNull java.util.List < com.android.builder.profile.Recorder.Property > properties ) throws java.io.IOException { synchronized ( com.android.builder.profile.ProcessRecorderFactory.LOCK ) { if ( ( com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized ( ) ) || ( ! ( com.android.builder.profile.ProcessRecorderFactory.isEnabled ( ) ) ) ) { return ; } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.setLogger ( logger ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.setOutputFile ( out ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.setRecordWriter ( new com.android.builder.profile.ProcessRecorder.JsonRecordWriter ( new java.io.FileWriter ( out ) ) ) ; com.android.builder.profile.ProcessRecorderFactory.publishInitialRecords ( properties ) ; } }
public boolean unplug ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( "unplug(): device=" + device ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.unplug ( device ) ; }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : mWifiDiagnostics.reportConnectionEvent ( mDiagsConnectionStartMillis , WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; break ; case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionEvent ( mDiagsConnectionStartMillis , WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } mDiagsConnectionStartMillis = - 1 ; }
public void test_zh_CN ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex.ImmutableIndex zh_CN = libcore.icu.AlphabeticIndexTest.createIndex ( new java.util.Locale ( "zh" , "CN" ) ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "贾" , "J" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "沈" , "C" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "瀋" , "S" ) ; }
public static void computeRemquo ( android.renderscript.cts.TestRemquo.ArgumentsFloatFloatIntFloat args ) { android.renderscript.cts.CoreMathVerifier.RemquoResult result = android.renderscript.cts.CoreMathVerifier.remquo ( args.inB , args.inC ) ; args.out = new android.renderscript.cts.Floaty ( result.remainder , 0 , 0 ) ; args.outD = result.quotient ; }
private static void checkSelectorPresence ( com.android.manifmerger.MergingReport.Builder mergingReport , com.android.manifmerger.XmlElement element ) { org.w3c.dom.Attr selectorAttribute = element.getXml ( ) . getAttributeNodeNS ( SdkConstants.TOOLS_URI , Selector.SELECTOR_LOCAL_NAME ) ; if ( ( selectorAttribute != null ) && ( ! ( element.getOperationType ( ) . isSelectable ( ) ) ) ) { java.lang.String message = java.lang.String.format ( "Unsupported tools:selector=\"%1$s\" found on node %2$s at %3$s" , selectorAttribute.getValue ( ) , element.getId ( ) , element.printPosition ( ) ) ; element.addMessage ( mergingReport , com.android.manifmerger.ERROR , message ) ; } }
public void testUpdateBatteryLevel_errorTooLargeValue ( ) { int batteryLevel = 101 ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; mRemoteDevices.updateBatteryLevel ( mDevice1 , batteryLevel ) ; org.mockito.Mockito.verify ( mAdapterService , org.mockito.Mockito.never ( ) ) . sendBroadcast ( org.mockito.Mockito.any ( ) , org.mockito.Mockito.anyString ( ) ) ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
public boolean enableDataConnectivity ( ) { enforceModifyPermission ( ) ; int subId = mSubscriptionController.getDefaultDataSubId ( ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { phone.setUserDataEnabled ( true ) ; return true ; } else { return false ; } }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules ( ) throws java.io.IOException { com.google.currysrc.api.process.Rule [ ] repackageRules = com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ; com.google.currysrc.api.process.Rule [ ] apiDocsRules = new com.google.currysrc.api.process.Rule [ ] { com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createReplaceSelectedJavadocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( com.android.icu4j.srcgen.Icu4jTransform.ORIGINAL_ICU_PACKAGE , com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU_PACKAGE ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHidePublicClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideOriginalDeprecatedClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideBlacklistedDeclarationsRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.HideDraftProvisionalInternal ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createFixupBidiClassDocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.RemoveJavaDocTags ( "@stable" , "@draft" , "@provisional" , "@internal" , "@since" ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.ReplaceIcuTags ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createTranslateJciteInclusionRule ( ) } ; java.util.List < com.google.currysrc.api.process.Rule > rulesList = com.google.common.collect.Lists.newArrayList ( repackageRules ) ; rulesList.addAll ( java.util.Arrays.asList ( apiDocsRules ) ) ; return rulesList ; }
public void showDialog ( android.preference.Preference preference ) { if ( preference.getKey ( ) . equals ( com.android.phone.CdmaOptions.BUTTON_CDMA_SYSTEM_SELECT_KEY ) ) { mButtonCdmaSystemSelect.showDialog ( null ) ; } else if ( preference.getKey ( ) . equals ( com.android.phone.CdmaOptions.BUTTON_CDMA_SUBSCRIPTION_KEY ) ) { mButtonCdmaSubscription.showDialog ( null ) ; } }
static < K , V > com.google.common.collect.UnmodifiableIterator < V > valueIterator ( final com.google.common.collect.UnmodifiableIterator < java.util.Map.Entry < K , V > > entryIterator ) { return new com.google.common.collect.UnmodifiableIterator < V > ( ) { @ java.lang.Override public boolean hasNext ( ) { return entryIterator.hasNext ( ) ; } @ java.lang.Override public V next ( ) { return entryIterator.next ( ) . getValue ( ) ; } } ; }
public void setMasterSyncAutomatically ( boolean flag , int userId ) { synchronized ( mAuthorities ) { java.lang.Boolean auto = mMasterSyncAutomatically.get ( userId ) ; if ( ( auto != null ) && ( ( ( boolean ) ( auto ) ) == flag ) ) { return ; } mMasterSyncAutomatically.put ( userId , flag ) ; writeAccountInfoLocked ( ) ; } if ( flag ) { requestSync ( null , userId , null , new android.os.Bundle ( ) ) ; } reportChange ( ContentResolver.SYNC_OBSERVER_TYPE_SETTINGS ) ; mContext.sendBroadcast ( android.content.SyncStorageEngine.SYNC_CONNECTION_SETTING_CHANGED_INTENT ) ; }
private void setRebootProgress ( final int progress , final java.lang.CharSequence message ) { mHandler.post ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( ( mProgressDialog ) != null ) { mProgressDialog.setProgress ( progress ) ; if ( message != null ) { mProgressDialog.setMessage ( message ) ; } } } } ) ; }
public boolean inKeyguardRestrictedKeyInputMode ( ) { if ( ( mKeyguardMediator ) == null ) return false ; return mKeyguardMediator.isInputRestricted ( ) ; }
public void trackingDisabled_unsolicitedResultsIgnored_withToken ( ) { configureTrackingDisabled ( ) ; mPackageStatusStorage.generateCheckToken ( com.android.server.timezone.PackageTrackerTest.INITIAL_APP_PACKAGE_VERSIONS ) ; mPackageTracker.start ( ) ; mFakeIntentHelper.assertReliabilityTriggerNotScheduled ( ) ; mPackageTracker.recordCheckResult ( com.android.server.timezone.PackageTrackerTest.createArbitraryCheckToken ( ) , true ) ; mFakeIntentHelper.assertReliabilityTriggerNotScheduled ( ) ; checkPackageStorageStatusIsInitialOrReset ( ) ; }
public void testFiveCount_E ( ) throws java.lang.Exception { assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "E" ) ) ; assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "EE" ) ) ; assertEquals ( "Thu" , formatDateUtc ( java.util.Locale.ENGLISH , "EEE" ) ) ; assertEquals ( "Thursday" , formatDateUtc ( java.util.Locale.ENGLISH , "EEEE" ) ) ; assertEquals ( "T" , formatDateUtc ( java.util.Locale.ENGLISH , "EEEEE" ) ) ; }
public boolean processMessage ( android.os.Message msg ) { if ( ( super . processMessage ( msg ) ) == ( HANDLED ) ) { return HANDLED ; } switch ( msg.what ) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage ( com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET ) ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage ( com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE , com.android.server.telecom.CallAudioRouteStateMachine.NO_INCLUDE_BLUETOOTH_IN_BASELINE ) ; mWasOnSpeaker = false ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState ( ) ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED ; default : return NOT_HANDLED ; } }
public final char char_literal ( ) throws org.jf.smali.RecognitionException { char value = 0 ; org.antlr.runtime.tree.CommonTree CHAR_LITERAL210 = null ; try { { CHAR_LITERAL210 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.CHAR_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_CHAR_LITERAL_in_char_literal3470 ) ) ) ; value = ( CHAR_LITERAL210 != null ? CHAR_LITERAL210.getText ( ) : null ) . charAt ( 1 ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void testEmbedded ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( regularDir , "embedded" ) ; runTasksOn ( project , BasePlugin.GRADLE_TEST_VERSION , "clean" , ":main:assembleRelease" ) ; java.io.File mainApk = new java.io.File ( project , ( ( "main/build/" + ( com.android.builder.model.AndroidProject.FD_OUTPUTS ) ) + "/apk/main-release-unsigned.apk" ) ) ; com.android.build.gradle.ManualBuildTest.checkJar ( mainApk , java.util.Collections.< java.lang.String , java.lang.String > singletonMap ( ( ( ( ( ( ( com.android.SdkConstants.FD_RES ) + '/' ) + ( com.android.SdkConstants.FD_RES_RAW ) ) + '/' ) + ( com.android.builder.core.BuilderConstants.ANDROID_WEAR_MICRO_APK ) ) + ( com.android.SdkConstants.DOT_ANDROID_PACKAGE ) ) , null ) ) ; }
public void setNetworkAvailable ( final boolean networkUp ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setNetworkAvailable ( networkUp ) ; } } ) ; return ; } mAwContents.setNetworkAvailable ( networkUp ) ; }
private android.renderscript.Int2 mode ( android.renderscript.RenderScript RS , final byte [ ] inputArray ) { long [ ] hsg = histogram ( RS , inputArray ) ; int modeIdx = 0 ; for ( int i = 1 ; i < ( hsg.length ) ; ++ i ) if ( ( hsg [ i ] ) > ( hsg [ modeIdx ] ) ) modeIdx = i ; return new android.renderscript.Int2 ( modeIdx , ( ( int ) ( hsg [ modeIdx ] ) ) ) ; }
public void selectionChanged ( ) { synchronized ( this ) { selectedNode = model.getSelection ( ) ; if ( ( ( selectedNode ) != null ) && ( ( selectedNode.viewNode.image ) == null ) ) { com.android.hierarchyviewerlib.HierarchyViewerDirector.getDirector ( ) . loadCaptureInBackground ( selectedNode.viewNode ) ; } } doRedraw ( ) ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , java.lang.Object array , android.renderscript.Element.DataType dt , int arrayLen ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFromUnchecked" ) ; mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , array , ( arrayLen * ( dt.mSize ) ) , dt ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private void filterStdErr ( java.lang.String line ) { com.android.sdklib.internal.repository.ITaskMonitor m = mMonitor ; if ( ( line == null ) || ( m == null ) ) { return ; } if ( ( ( line.indexOf ( "emulator: device" ) ) != ( - 1 ) ) || ( ( line.indexOf ( "HAX is working" ) ) != ( - 1 ) ) ) { m.log ( "%1$s" , line ) ; return ; } m.logError ( "%1$s" , line ) ; }
public void testBroadcastAssociatedBssidEvent ( ) { mWifiMonitor.registerHandler ( com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME , WifiStateMachine.CMD_ASSOCIATED_BSSID , mHandlerSpy ) ; java.lang.String bssid = com.android.server.wifi.WifiMonitorTest.BSSID ; mWifiMonitor.broadcastAssociatedBssidEvent ( com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME , bssid ) ; mLooper.dispatchAll ( ) ; org.mockito.ArgumentCaptor < android.os.Message > messageCaptor = org.mockito.ArgumentCaptor.forClass ( android.os.Message.class ) ; org.mockito.Mockito.verify ( mHandlerSpy ) . handleMessage ( messageCaptor.capture ( ) ) ; org.junit.Assert.assertEquals ( WifiStateMachine.CMD_ASSOCIATED_BSSID , messageCaptor.getValue ( ) . what ) ; org.junit.Assert.assertEquals ( bssid , ( ( java.lang.String ) ( messageCaptor.getValue ( ) . obj ) ) ) ; }
private static boolean isZero ( @ com.android.annotations.NonNull com.intellij.psi.PsiElement argument ) { if ( argument instanceof com.intellij.psi.PsiLiteral ) { java.lang.Object value = ( ( com.intellij.psi.PsiLiteral ) ( argument ) ) . getValue ( ) ; return ( value instanceof java.lang.Number ) && ( ( ( ( java.lang.Number ) ( value ) ) . intValue ( ) ) == 0 ) ; } return false ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > executeAndReturnMultiModel ( boolean emulateStudio_1_0 , java.lang.String ... tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { executeBuild ( java.util.Collections.< java.lang.String > emptyList ( ) , connection , tasks ) ; return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection , emulateStudio_1_0 ) ; } finally { connection.close ( ) ; } }
public void testUnsupportedCallbackException06 ( ) { org.apache.harmony.tests.javax.security.auth.callback.myCallback c = new org.apache.harmony.tests.javax.security.auth.callback.myCallback ( ) ; assertNotNull ( "Callback object is null" , c ) ; javax.security.auth.callback.UnsupportedCallbackException ucE ; for ( int i = 0 ; i < ( org.apache.harmony.tests.javax.security.auth.callback.UnsupportedCallbackExceptionTest.msgs.length ) ; i ++ ) { ucE = new javax.security.auth.callback.UnsupportedCallbackException ( c , org.apache.harmony.tests.javax.security.auth.callback.UnsupportedCallbackExceptionTest.msgs [ i ] ) ; assertEquals ( "getMessage() must return: " . concat ( org.apache.harmony.tests.javax.security.auth.callback.UnsupportedCallbackExceptionTest.msgs [ i ] ) , ucE.getMessage ( ) , org.apache.harmony.tests.javax.security.auth.callback.UnsupportedCallbackExceptionTest.msgs [ i ] ) ; assertEquals ( "Incorrect callback object was returned" , c , ucE.getCallback ( ) ) ; } }
public com.android.jack.ir.ast.JClass getType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pack , @ javax.annotation.Nonnull java.lang.String simpleName ) { return pack.getPhantomClass ( simpleName ) ; }
protected void visitMethod ( int type , int index ) { assert ( cstIndexMap ) != null ; constantValue = cstIndexMap.getCstMethodRef ( index ) ; }
public void autoConnect ( ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) { errorLog ( "autoConnect() - BT is not ON. Exiting autoConnect" ) ; return ; } if ( ( isQuietModeEnabled ( ) ) == false ) { debugLog ( "autoConnect() - Initiate auto connection on BT on..." ) ; autoConnectHeadset ( ) ; autoConnectA2dp ( ) ; autoConnectHeadsetClient ( ) ; autoConnectA2dpSink ( ) ; autoConnectPbapClient ( ) ; } else { debugLog ( "autoConnect() - BT is in quiet mode. Not initiating auto connections" ) ; } }
public static void finalizeAllEnqueued ( ) throws java.lang.InterruptedException { java.lang.ref.FinalizerReference.Sentinel sentinel = new java.lang.ref.FinalizerReference.Sentinel ( ) ; java.lang.ref.FinalizerReference.enqueueSentinelReference ( sentinel ) ; sentinel.awaitFinalization ( ) ; }
protected void visitField ( int type , int index ) { assert ( cstIndexMap ) != null ; if ( type == ( ValueType.VALUE_FIELD.getValue ( ) ) ) { constantValue = cstIndexMap.getCstFieldRef ( index ) ; } else { assert type == ( ValueType.VALUE_ENUM.getValue ( ) ) ; com.android.jack.dx.io.FieldId fieldId = dexBuffer.fieldIds ( ) . get ( index ) ; constantValue = new com.android.jack.dx.rop.cst.CstEnumRef ( cstIndexMap.getCstString ( fieldId.getNameIndex ( ) ) , cstIndexMap.getType ( fieldId.getTypeIndex ( ) ) ) ; } }
public final byte [ ] update ( byte [ ] input ) { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( input == null ) { throw new java.lang.IllegalArgumentException ( "input == null" ) ; } if ( ( input.length ) == 0 ) { return null ; } return getSpi ( ) . engineUpdate ( input , 0 , input.length ) ; }
public void testAllocSpiSpiUnavaiableExeption ( ) throws java.lang.Exception { android.net.IpSecSpiResponse spiResp = new android.net.IpSecSpiResponse ( IpSecManager.Status.SPI_UNAVAILABLE , 0 , 0 ) ; org.mockito.Mockito.when ( mMockIpSecService.allocateSecurityParameterIndex ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyString ( ) , org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyObject ( ) ) ) . thenReturn ( spiResp ) ; try { mIpSecManager.allocateSecurityParameterIndex ( IpSecTransform.DIRECTION_OUT , android.net.IpSecManagerTest.GOOGLE_DNS_4 ) ; org.junit.Assert.fail ( "ResourceUnavailableException was not thrown" ) ; } catch ( android.net.IpSecManager e ) { } }
public java.util.Set < java.lang.String > getCarrierVvmPackageNames ( ) { com.android.dialer.common.Assert.checkArgument ( isValid ( ) ) ; java.util.Set < java.lang.String > names = com.android.voicemail.impl.OmtpVvmCarrierConfigHelper.getCarrierVvmPackageNames ( mOverrideConfig ) ; if ( names != null ) { return names ; } names = com.android.voicemail.impl.OmtpVvmCarrierConfigHelper.getCarrierVvmPackageNames ( mCarrierConfig ) ; if ( names != null ) { return names ; } return com.android.voicemail.impl.OmtpVvmCarrierConfigHelper.getCarrierVvmPackageNames ( mTelephonyConfig ) ; }
public boolean deselect ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo canvasViewInfo ) { if ( canvasViewInfo == null ) { return false ; } for ( java.util.ListIterator < com.android.ide.eclipse.adt.internal.editors.layout.gle2.SelectionItem > it = mSelections.listIterator ( ) ; it.hasNext ( ) ; ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.SelectionItem s = it.next ( ) ; if ( canvasViewInfo == ( s.getViewInfo ( ) ) ) { it.remove ( ) ; return true ; } } return false ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/DetachedFromWindow.java:7: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/DetachedFromWindow.java:26: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" ) + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( ( "src/test/pkg/DetachedFromWindow.java.txt=>" + "src/test/pkg/DetachedFromWindow.java" ) ) ) ; }
private void appendHeader ( boolean isLibrary ) { if ( isLibrary ) { mBuildFile.append ( "apply plugin: '" ) . append ( com.android.tools.lint.checks.GradleDetector.LIB_PLUGIN_ID ) . append ( "\'\n" ) ; } else { mBuildFile.append ( "apply plugin: '" ) . append ( com.android.tools.lint.checks.GradleDetector.APP_PLUGIN_ID ) . append ( "\'\n" ) ; } mBuildFile.append ( "\n" ) ; }
public void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; mVersion.saveProperties ( props ) ; props.setProperty ( PkgProps.SYS_IMG_ABI , mAbi ) ; props.setProperty ( PkgProps.SYS_IMG_TAG_ID , mTag.getId ( ) ) ; props.setProperty ( PkgProps.SYS_IMG_TAG_DISPLAY , mTag.getDisplay ( ) ) ; }
public void perform ( android.support.test.espresso.UiController uiController , android.view.View view ) { android.support.v4.widget.DrawerLayout drawer = ( ( android.support.v4.widget.DrawerLayout ) ( view ) ) ; android.support.v4.widget.DrawerLayout.DrawerListener existingListener = android.support.test.espresso.contrib.DrawerActions.getDrawerListener ( drawer ) ; if ( existingListener instanceof android.support.test.espresso.contrib.DrawerActions.IdlingDrawerListener ) { android.support.test.espresso.contrib.DrawerActions.IdlingDrawerListener idleDrawerListener = ( ( android.support.test.espresso.contrib.DrawerActions.IdlingDrawerListener ) ( existingListener ) ) ; android.support.test.espresso.Espresso.unregisterIdlingResources ( idleDrawerListener ) ; drawer.setDrawerListener ( idleDrawerListener.parentListener ) ; idleDrawerListener.parentListener = null ; } }
public void run ( ) { assertFalse ( mTextView.moveCursorToVisibleOffset ( ) ) ; }
public void testSetWifiEnableWithoutPermission ( ) throws java.lang.Exception { doThrow ( new java.lang.SecurityException ( ) ) . when ( mContext ) . enforceCallingOrSelfPermission ( org.mockito.Matchers.eq ( android.Manifest.permission.CHANGE_WIFI_STATE ) , org.mockito.Matchers.eq ( "WifiService" ) ) ; mWifiServiceImpl.setWifiEnabled ( com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME , true ) ; verify ( mWifiStateMachine , never ( ) ) . syncGetWifiApState ( ) ; }
static boolean isPhoneInEcm ( com.android.internal.telephony.Phone phone ) { if ( ( phone != null ) && ( com.android.internal.telephony.TelephonyCapabilities.supportsEcm ( phone ) ) ) { return phone.isInEcm ( ) ; } return false ; }
public org.bouncycastle.math.ec.ECFieldElement sqrt ( ) { org.bouncycastle.math.ec.LongArray x1 = this . x ; if ( ( x1.isOne ( ) ) || ( x1.isZero ( ) ) ) { return this ; } org.bouncycastle.math.ec.LongArray x2 = x1.modSquareN ( ( ( m ) - 1 ) , m , ks ) ; return new org.bouncycastle.math.ec.ECFieldElement.F2m ( m , ks , x2 ) ; }
int findOffsetIndexForTimeInSeconds ( long seconds ) { int transition = findTransitionIndex ( seconds ) ; if ( transition < 0 ) { return - 1 ; } return ( mTypes [ transition ] ) & 255 ; }
public static final boolean isThreadInProcess ( int tid , int pid ) { android.os.StrictMode.ThreadPolicy oldPolicy = android.os.StrictMode.allowThreadDiskReads ( ) ; try { if ( android.system.Os.access ( ( ( ( "/proc/" + tid ) + "/task/" ) + pid ) , OsConstants.F_OK ) ) { return true ; } else { return false ; } } catch ( java.lang.Exception e ) { return false ; } finally { android.os.StrictMode.setThreadPolicy ( oldPolicy ) ; } }
public java.util.SortedSet < java.lang.String > getLanguages ( ) { java.util.SortedSet < java.lang.String > set = new java.util.TreeSet < java.lang.String > ( ) ; java.util.Collection < java.util.List < com.android.ide.common.resources.ResourceFolder > > folderList = mFolderMap.values ( ) ; for ( java.util.List < com.android.ide.common.resources.ResourceFolder > folderSubList : folderList ) { for ( com.android.ide.common.resources.ResourceFolder folder : folderSubList ) { com.android.ide.common.resources.configuration.FolderConfiguration config = folder.getConfiguration ( ) ; com.android.ide.common.resources.configuration.LanguageQualifier lang = config.getLanguageQualifier ( ) ; if ( lang != null ) { set.add ( lang.getShortDisplayValue ( ) ) ; } } } return set ; }
public void fileChanged ( org.eclipse.core.resources.IProject project , com.android.ide.common.resources.ResourceFile file , int eventType ) { if ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder.sRefreshing ) { return ; } if ( ( eventType & ( ( ( ( org.eclipse.core.resources.IResourceDelta.CHANGED ) | ( org.eclipse.core.resources.IResourceDelta.ADDED ) ) | ( org.eclipse.core.resources.IResourceDelta.REMOVED ) ) | ( org.eclipse.core.resources.IResourceDelta.CONTENT ) ) ) == 0 ) { return ; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder finder = com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder.get ( project ) ; if ( finder != null ) { if ( finder.updateFileIncludes ( file , true ) ) { finder.saveSettings ( ) ; } } }
public android.telephony.ims.feature.RcsFeature createRcsFeature ( int slotId ) { return null ; }
public void onSdkLoaded ( ) { com.android.sdklib.IAndroidTarget oldTarget = getRenderingTarget ( ) ; preRenderingTargetChangeCleanUp ( oldTarget ) ; com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } } }
public void validateCertCredentialWithoutClientCertChain ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = android.net.wifi.hotspot2.pps.CredentialTest.createCredentialWithCertificateCredential ( ) ; cred.setClientCertificateChain ( null ) ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public android.webkit.WebBackForwardList copyBackForwardList ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.webkit.WebBackForwardList ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.webkit.WebBackForwardList > ( ) { @ java.lang.Override public android.webkit.WebBackForwardList call ( ) { return copyBackForwardList ( ) ; } } ) ; return ret ; } return new com.android.webview.chromium.WebBackForwardListChromium ( mAwContents.getNavigationHistory ( ) ) ; }
public void testResValuesMerge ( ) { com.android.builder.model.ProductFlavor flavor = com.android.builder.core.DefaultProductFlavor.mergeFlavors ( mCustom2 , mCustom ) ; java.util.Map < java.lang.String , com.android.builder.model.ClassField > resValues = flavor.getResValues ( ) ; assertEquals ( 3 , resValues.size ( ) ) ; assertEquals ( "oneValue" , resValues.get ( "one" ) . getValue ( ) ) ; assertEquals ( "twoValue" , resValues.get ( "two" ) . getValue ( ) ) ; assertEquals ( "threeValue" , resValues.get ( "three" ) . getValue ( ) ) ; }
public void setLocalRepository ( @ org.jetbrains.annotations.Nullable final java.lang.String overridenLocalRepository ) { if ( overridenLocalRepository == null ) return ; if ( ! ( com.intellij.openapi.util.Comparing.equal ( this . overriddenLocalRepository , overridenLocalRepository ) ) ) { this . overriddenLocalRepository = overridenLocalRepository ; org.jetbrains.idea.maven.server.MavenServerManager.getInstance ( ) . shutdown ( true ) ; changed ( ) ; } }
void setAudioRoute ( java.lang.String callId , int audioRoute , java.lang.String bluetoothAddress ) { android.telecom.Log.v ( this , "setAudioRoute: %s %s %s" , callId , android.telecom.CallAudioState.audioRouteToString ( audioRoute ) , bluetoothAddress ) ; for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.setAudioRoute ( callId , audioRoute , bluetoothAddress , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void testWrongSeparator2 ( ) throws java.lang.Exception { mScopes = null ; mEnabled = com.google.common.collect.Sets.newHashSet ( com.android.tools.lint.checks.MissingClassDetector.MISSING , com.android.tools.lint.checks.MissingClassDetector.INSTANTIATABLE , com.android.tools.lint.checks.MissingClassDetector.INNERCLASS ) ; assertEquals ( ( "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n" + ( ( ( ( ( " <activity\n" + " ^\n" ) + "AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n" ) + " android:name=\".Foo.Bar\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 1 warnings\n" ) ) , lintProject ( "registration/AndroidManifestWrong2.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" , "registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java" ) ) ; }
private void printArrayMap ( ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printArrayMap" , "hashMapSize: %d, currentlyExpandedViewHolderId:%d" , newVoicemailViewHolderArrayMap.size ( ) , currentlyExpandedViewHolderId ) ; if ( ! ( newVoicemailViewHolderArrayMap.isEmpty ( ) ) ) { java.lang.String ids = "" ; for ( int id : newVoicemailViewHolderArrayMap.keySet ( ) ) { ids = ( ids + id ) + " " ; } com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printArrayMap" , ( "ids are " + ids ) ) ; } }
private void rejectCallAndLog ( com.android.server.telecom.Call incomingCall ) { if ( ( incomingCall.getConnectionService ( ) ) != null ) { incomingCall.reject ( false , null ) ; } else { android.telecom.Log.i ( this , "rejectCallAndLog - call already destroyed." ) ; } mCallLogManager.logCall ( incomingCall , Calls.MISSED_TYPE , true ) ; }
private void markStackProducers ( proguard.optimize.evaluation.Clazz clazz , int consumerOffset , proguard.optimize.evaluation.Instruction consumer ) { proguard.evaluation.TracedStack tracedStack = partialEvaluator.getStackBefore ( consumerOffset ) ; int stackSize = tracedStack.size ( ) ; int popCount = consumer.stackPopCount ( clazz ) ; for ( int stackIndex = stackSize - popCount ; stackIndex < stackSize ; stackIndex ++ ) { markStackEntryProducers ( consumerOffset , stackIndex ) ; } }
private void handleSuccessfulIpConfiguration ( ) { mLastSignalLevel = - 1 ; android.net.wifi.WifiConfiguration c = getCurrentWifiConfiguration ( ) ; if ( c != null ) { c.getNetworkSelectionStatus ( ) . clearDisableReasonCounter ( WifiConfiguration.NetworkSelectionStatus.DISABLED_DHCP_FAILURE ) ; updateCapabilities ( c ) ; } if ( c != null ) { android.net.wifi.ScanResult result = getCurrentScanResult ( ) ; if ( result == null ) { logd ( ( "WifiStateMachine: handleSuccessfulIpConfiguration and no scan results" + ( c.configKey ( ) ) ) ) ; } else { result.numIpConfigFailures = 0 ; } } }
public void testCapitalize ( ) { assertEquals ( "UPPER" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "UPPER" ) ) ; assertEquals ( "Lower" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "lower" ) ) ; assertEquals ( "Capital" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "Capital" ) ) ; assertEquals ( "CamelCase" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "camelCase" ) ) ; assertEquals ( "" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "" ) ) ; assertSame ( "Foo" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "Foo" ) ) ; }
public void calculateAndReportScoreSucceeds ( ) throws java.lang.Exception { mWifiInfo.setRssi ( ( - 77 ) ) ; mWifiScoreReport.calculateAndReportScore ( mWifiInfo , mNetworkAgent , mAggr , mWifiMetrics ) ; org.mockito.Mockito.verify ( mNetworkAgent ) . sendNetworkScore ( org.mockito.Mockito.anyInt ( ) ) ; org.mockito.Mockito.verify ( mWifiMetrics ) . incrementWifiScoreCount ( org.mockito.Mockito.anyInt ( ) ) ; }
public boolean process ( java.io.File outputFile , java.io.File mainFile , java.io.File [ ] libraryFiles , java.util.Map < java.lang.String , java.lang.String > injectAttributes ) { org.w3c.dom.Document mainDoc = com.android.manifmerger.XmlUtils.parseDocument ( mainFile , mLog ) ; if ( mainDoc == null ) { return false ; } boolean success = process ( mainDoc , libraryFiles , injectAttributes ) ; if ( ! ( com.android.manifmerger.XmlUtils.printXmlFile ( mainDoc , outputFile , mLog ) ) ) { success = false ; } return success ; }
private void broadcastDefaultSmsSubIdChanged ( int subId ) { if ( com.android.internal.telephony.SubscriptionController.DBG ) logdl ( ( "[broadcastDefaultSmsSubIdChanged] subId=" + subId ) ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_DEFAULT_SMS_SUBSCRIPTION_CHANGED ) ; intent.addFlags ( ( ( android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING ) | ( android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND ) ) ) ; intent.putExtra ( PhoneConstants.SUBSCRIPTION_KEY , subId ) ; intent.putExtra ( Intent.EXTRA_SUBSCRIPTION_INDEX , subId ) ; mContext.sendStickyBroadcastAsUser ( intent , UserHandle.ALL ) ; }
public com.android.tv.menu.ItemListRowView.ItemListAdapter.MyViewHolder onCreateViewHolder ( android.view.ViewGroup parent , int viewType ) { int resId = getLayoutResId ( viewType ) ; android.view.View view = com.android.tv.util.ViewCache.getInstance ( ) . getView ( resId ) ; if ( view == null ) { view = mLayoutInflater.inflate ( resId , parent , false ) ; } return new com.android.tv.menu.ItemListRowView.ItemListAdapter.MyViewHolder ( view ) ; }
public boolean moveTopActivityToPinnedStack ( int stackId , android.graphics.Rect bounds ) { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "moveTopActivityToPinnedStack()" ) ; synchronized ( this ) { if ( ! ( mSupportsPictureInPicture ) ) { throw new java.lang.IllegalStateException ( ( "moveTopActivityToPinnedStack:" + "Device doesn't support picture-in-pciture mode" ) ) ; } long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return mStackSupervisor.moveTopStackActivityToPinnedStackLocked ( stackId , bounds ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
private void onServiceBound ( com.android.internal.telecom.ICallScreeningService service ) { mService = service ; try { mService.screenCall ( new com.android.server.telecom.callfiltering.CallScreeningServiceFilter.CallScreeningAdapter ( ) , mParcelableCallUtilsConverter.toParcelableCall ( mCall , false , mPhoneAccountRegistrar ) ) ; } catch ( android.os.RemoteException e ) { android.telecom.Log.e ( this , e , "Failed to set the call screening adapter." ) ; finishCallScreening ( ) ; } }
public void setWhiteBalance ( java.lang.String value ) { java.lang.String oldValue = get ( android.hardware.Camera.Parameters.KEY_WHITE_BALANCE ) ; if ( same ( value , oldValue ) ) return ; set ( android.hardware.Camera.Parameters.KEY_WHITE_BALANCE , value ) ; set ( android.hardware.Camera.Parameters.KEY_AUTO_WHITEBALANCE_LOCK , android.hardware.Camera.Parameters.FALSE ) ; }
protected void onStop ( ) { super . onStop ( ) ; stopAsyncQuery ( ) ; com.android.mms.util.DraftCache.getInstance ( ) . removeOnDraftChangedListener ( this ) ; getListView ( ) . setChoiceMode ( ListView.CHOICE_MODE_MULTIPLE_MODAL ) ; android.database.Cursor cursor = mListAdapter.getCursor ( ) ; if ( ( cursor != null ) && ( ! ( cursor.isClosed ( ) ) ) ) { cursor.close ( ) ; } mListAdapter.changeCursor ( null ) ; }
public void test_handshake_failsWithInvalidSCT ( ) throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection ( new java.security.cert.X509Certificate [ ] { cert , ca } , certKey , true ) ; connection.clientHooks.ctVerificationEnabled = true ; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile ( "ct-signed-timestamp-list-invalid" ) ; connection.doHandshake ( ) ; assertTrue ( ( ( connection.clientException ) instanceof javax.net.ssl.SSLHandshakeException ) ) ; assertTrue ( ( ( connection.clientException.getCause ( ) ) instanceof java.security.cert.CertificateException ) ) ; }
public java.lang.String getLongDescription ( ) { java.lang.String s = mLongDescription ; if ( ( s != null ) && ( ! ( s.isEmpty ( ) ) ) ) { return s ; } s = getDescription ( ) ; if ( ( s != null ) && ( ! ( s.isEmpty ( ) ) ) ) { return s ; } return getShortDescription ( ) ; }
public void setKeepUninstalledPackages ( @ android.annotation.Nullable android.content.ComponentName admin , @ android.annotation.NonNull java.util.List < java.lang.String > packageNames ) { throwIfParentInstance ( "setKeepUninstalledPackages" ) ; if ( ( mService ) != null ) { try { mService.setKeepUninstalledPackages ( admin , mContext.getPackageName ( ) , packageNames ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
protected void doRevert ( java.io.File toFile , java.io.File backupFile ) throws java.io.IOException { if ( ( ( ! ( toFile.exists ( ) ) ) || ( toFile.isDirectory ( ) ) ) || ( isModified ( toFile ) ) ) { com.intellij.updater.Utils.delete ( toFile ) ; com.intellij.updater.Utils.copy ( backupFile , toFile ) ; } }
public void testManifestPlaceholdersMerge ( ) { com.android.builder.model.ProductFlavor flavor = com.android.builder.core.DefaultProductFlavor.mergeFlavors ( mCustom2 , mCustom ) ; java.util.Map < java.lang.String , java.lang.String > manifestPlaceholders = flavor.getManifestPlaceholders ( ) ; assertEquals ( 3 , manifestPlaceholders.size ( ) ) ; assertEquals ( "oneValue" , manifestPlaceholders.get ( "one" ) ) ; assertEquals ( "twoValue" , manifestPlaceholders.get ( "two" ) ) ; assertEquals ( "threeValue" , manifestPlaceholders.get ( "three" ) ) ; }
public boolean updateNetworkAfterDisconnect ( int networkId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Update network after disconnect for " + networkId ) ) ; } android.net.wifi.WifiConfiguration config = getInternalConfiguredNetwork ( networkId ) ; if ( config == null ) { return false ; } config.lastDisconnected = mClock.getWallClockMillis ( ) ; if ( ( config.status ) == ( WifiConfiguration.Status.CURRENT ) ) { setNetworkStatus ( config , WifiConfiguration.Status.ENABLED ) ; } return true ; }
public void testAesCbcHmacSha512Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , android.net.cts.IpSecManagerTest.getKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public void onUserRestrictionsChanged ( int userId , android.os.Bundle newRestrictions , android.os.Bundle prevRestrictions ) { final boolean bluetoothDisallowed = newRestrictions.getBoolean ( UserManager.DISALLOW_BLUETOOTH ) ; if ( ( ( mEnable ) || ( mEnableExternal ) ) && bluetoothDisallowed ) { try { disable ( "android.os.UserManagerInternal" , true ) ; } catch ( android.os.RemoteException e ) { } } }
protected static void addSourceLevel ( @ javax.annotation.Nonnull com.android.jack.test.toolchain.SourceLevel level , @ javax.annotation.Nonnull java.util.List < java.lang.String > commandLine ) { commandLine.add ( "-source" ) ; switch ( level ) { case JAVA_6 : commandLine.add ( "1.6" ) ; break ; case JAVA_7 : commandLine.add ( "1.7" ) ; break ; case JAVA_8 : commandLine.add ( "1.8" ) ; break ; default : throw new java.lang.AssertionError ( ( ( "Unkown level: '" + ( level.toString ( ) ) ) + "'" ) ) ; } }
public com.google.common.collect.ImmutableMultimap.Builder < K , V > putAll ( K key , java.lang.Iterable < ? extends V > values ) { if ( key == null ) { throw new java.lang.NullPointerException ( ( "null key in entry: null=" + ( com.google.common.collect.Iterables.toString ( values ) ) ) ) ; } java.util.Collection < V > valueList = builderMultimap.get ( key ) ; for ( V value : values ) { com.google.common.collect.CollectPreconditions.checkEntryNotNull ( key , value ) ; valueList.add ( value ) ; } return this ; }
public int getState ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getState = " + ( mService.getState ( ) ) ) ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; } return service.getState ( ) ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.conscrypt.NativeCryptoTest.assertEqualByteArrays ( OCSP_TEST_DATA , org.conscrypt.NativeCrypto.SSL_get_ocsp_response ( ssl ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
private java.util.Properties readInfo ( @ com.android.annotations.NonNull java.io.File info ) { if ( mFileOp.exists ( info ) ) { return mFileOp.loadProperties ( info ) ; } return null ; }
public void testHostnameProvided ( ) throws java.lang.Exception { final java.lang.String expectedHostname = "example.com" ; class TestCertPinManager implements org.conscrypt.CertPinManager { public boolean hostnameMatched = false ; @ java.lang.Override public void checkChainPinning ( java.lang.String hostname , java.util.List < java.security.cert.X509Certificate > chain ) throws java.security.cert.CertificateException { hostnameMatched = expectedHostname.equals ( hostname ) ; } } TestCertPinManager manager = new TestCertPinManager ( ) ; callCheckServerTrusted ( expectedHostname , manager ) ; assertTrue ( manager.hostnameMatched ) ; }
public void handleCreateConnectionComplete ( java.lang.String callId , android.telecom.ConnectionRequest request , android.telecom.ParcelableConnection connection ) { android.telecom.Log.startSession ( "CSW.hCCC" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "handleCreateConnectionComplete %s" , callId ) ; this . handleCreateConnectionComplete ( callId , request , connection ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public int indexOf ( @ javax.annotation.Nullable java.lang.Object object ) { if ( object == null ) { return - 1 ; } for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( array [ ( ( offset ) + i ) ] . equals ( object ) ) { return i ; } } return - 1 ; }
public void visitAnySwitchInstruction ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , int offset , proguard.classfile.editor.SwitchInstruction switchInstruction ) { try { switchInstruction.defaultOffset = newBranchOffset ( offset , switchInstruction.defaultOffset ) ; updateJumpOffsets ( offset , switchInstruction.jumpOffsets ) ; oldInstructionOffsets [ offset ] = - 1 ; } catch ( java.lang.IllegalArgumentException e ) { if ( ( ( level ) == 0 ) || ( ! ( allowExternalBranchTargets ) ) ) { throw e ; } } }
public void dispose ( ) throws android.telephony.mbms.MbmsException { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( "No streaming service attached" ) ; } try { mService.disposeStream ( mAppName , mSubscriptionId , mServiceInfo.getServiceId ( ) ) ; } catch ( android.os.DeadObjectException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , "Remote process died" ) ; mService = null ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_SERVICE_LOST ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , ( "Caught remote exception calling dispose: " + e ) ) ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_UNKNOWN_REMOTE_EXCEPTION ) ; } }
public static java.lang.String getAndroidName ( int api ) { java.lang.String codeName = com.android.sdklib.SdkVersionInfo.getCodeName ( api ) ; java.lang.String name = com.android.sdklib.SdkVersionInfo.getVersionString ( api ) ; if ( name == null ) { return java.lang.String.format ( "API %1$d" , api ) ; } else if ( codeName == null ) { return java.lang.String.format ( "API %1$d: Android %2$s" , api , name ) ; } else { return java.lang.String.format ( "API %1$d: Android %2$s (%3$s)" , api , name , codeName ) ; } }
public void testSendSms ( ) { doReturn ( mServiceState ) . when ( mPhone ) . getServiceState ( ) ; mCdmaSmsDispatcher.sendSms ( mSmsTracker ) ; verify ( mSimulatedCommandsVerifier ) . sendCdmaSms ( nullable ( byte [ ] . class ) , any ( android.os.Message.class ) ) ; }
public void test_JarFile_Modified_Manifest_EntryAttributes ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Modified_Manifest_EntryAttributes.jar" ; java.io.File file = tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; try ( java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( file , true ) ) { java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; try { jarFile.getInputStream ( zipEntry ) ; fail ( "should throw Security Exception" ) ; } catch ( java.lang.SecurityException e ) { } } } }
public java.lang.String performSanityCheck ( com.intellij.openapi.project.Project project , java.lang.String cloudProjectId ) { com.google.api.services.storage.model.Buckets buckets = null ; java.lang.String message = null ; try { com.google.api.services.storage.Storage.Buckets.List listBuckets = com.google.gct.testing.launcher.CloudAuthenticator.getStorage ( ) . buckets ( ) . list ( cloudProjectId ) ; buckets = listBuckets.execute ( ) ; } catch ( java.lang.Throwable t ) { message = t.getMessage ( ) ; } finally { if ( buckets == null ) { return ( "Failed to authorize to Google Cloud project! Please select a project you are authorized to use.\n" + "Exception while performing a pre-trigger sanity check\n\n" ) + message ; } } return null ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; pRS.setMessageHandler ( mRsMessage ) ; com.android.rs.test.ScriptC_refcount s = new com.android.rs.test.ScriptC_refcount ( pRS ) ; initializeGlobals ( pRS , s ) ; s.invoke_refcount_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; mA.destroy ( ) ; mT.destroy ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
public void controlResized ( org.eclipse.swt.events.ControlEvent e ) { org.eclipse.swt.graphics.Rectangle r = scrolledComposite.getClientArea ( ) ; org.eclipse.swt.widgets.Control content = scrolledComposite.getContent ( ) ; if ( ( content != null ) && ( r != null ) ) { org.eclipse.swt.graphics.Point minSize = content.computeSize ( r.width , SWT.DEFAULT ) ; scrolledComposite.setMinSize ( minSize ) ; org.eclipse.swt.widgets.ScrollBar vBar = scrolledComposite.getVerticalBar ( ) ; vBar.setPageIncrement ( r.height ) ; } }
private void notifySelectionChanged ( com.android.ddmlib.IDevice device , com.android.hierarchyviewerlib.device.Window window ) { com.android.hierarchyviewerlib.models.DeviceSelectionModel.IWindowChangeListener [ ] listeners = getWindowChangeListenerList ( ) ; if ( listeners != null ) { for ( int i = 0 ; i < ( listeners.length ) ; i ++ ) { listeners [ i ] . selectionChanged ( device , window ) ; } } }
private static void checkResourceContent ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVFile candidateFile , @ javax.annotation.Nonnull java.io.File referenceFile ) throws java.io.IOException { java.io.BufferedReader candidateReader = null ; java.io.BufferedReader referenceReader = null ; try { candidateReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( candidateFile.getInputStream ( ) ) ) ; referenceReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( new java.io.FileInputStream ( referenceFile ) ) ) ; com.android.jack.resource.ResourceTests.compareReadLines ( referenceReader , candidateReader ) ; } finally { if ( candidateReader != null ) { candidateReader.close ( ) ; } if ( referenceReader != null ) { referenceReader.close ( ) ; } } }
java.lang.Integer connIdByAddress ( int id , java.lang.String address ) { com.android.bluetooth.gatt.ContextMap < T > . App entry = getById ( id ) ; if ( entry == null ) return null ; java.util.Iterator < com.android.bluetooth.gatt.ContextMap < T > . Connection > i = mConnections.iterator ( ) ; while ( i.hasNext ( ) ) { com.android.bluetooth.gatt.ContextMap < T > . Connection connection = i.next ( ) ; if ( ( connection.address.equalsIgnoreCase ( address ) ) && ( ( connection.appId ) == id ) ) return connection.connId ; } return null ; }
private java.lang.String getRelativeUnitPluralPattern ( com.ibm.icu.text.RelativeDateTimeFormatter.Style style , com.ibm.icu.text.RelativeDateTimeFormatter.RelativeUnit unit , int pastFutureIndex , com.ibm.icu.impl.StandardPlural pluralForm ) { if ( pluralForm != ( com.ibm.icu.impl.StandardPlural.OTHER ) ) { java.lang.String formatter = getRelativeUnitPattern ( style , unit , pastFutureIndex , pluralForm ) ; if ( formatter != null ) { return formatter ; } } return getRelativeUnitPattern ( style , unit , pastFutureIndex , StandardPlural.OTHER ) ; }
private byte getBluetoothPlayState ( android.media.session.PlaybackState pbState ) { if ( pbState == null ) { android.util.Log.w ( com.android.bluetooth.avrcp.Avrcp.TAG , "playState object null, sending STOPPED" ) ; return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED ; } switch ( pbState.getState ( ) ) { case android.media.session.PlaybackState.STATE_PLAYING : case android.media.session.PlaybackState.STATE_BUFFERING : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_PLAYING ; case android.media.session.PlaybackState.STATE_STOPPED : case android.media.session.PlaybackState.STATE_NONE : case android.media.session.PlaybackState.STATE_CONNECTING : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED ; case android.media.session.PlaybackState.STATE_PAUSED : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_PAUSED ; case android.media.session.PlaybackState.STATE_FAST_FORWARDING : case android.media.session.PlaybackState.STATE_SKIPPING_TO_NEXT : case android.media.session.PlaybackState.STATE_SKIPPING_TO_QUEUE_ITEM : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_FWD_SEEK ; case android.media.session.PlaybackState.STATE_REWINDING : case android.media.session.PlaybackState.STATE_SKIPPING_TO_PREVIOUS : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_REV_SEEK ; case android.media.session.PlaybackState.STATE_ERROR : default : return com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_ERROR ; } }
private static void setAppState ( android.content.Context context , boolean install ) { if ( context == null ) { return ; } android.content.pm.PackageManager pm = context.getPackageManager ( ) ; if ( pm == null ) { return ; } android.content.ComponentName cName = new android.content.ComponentName ( "com.android.stk" , "com.android.stk.StkLauncherActivity" ) ; int state = ( install ) ? android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED : android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ; try { pm.setComponentEnabledSetting ( cName , state , PackageManager.DONT_KILL_APP ) ; } catch ( java.lang.Exception e ) { com.android.internal.telephony.cat.CatLog.d ( "StkAppInstaller" , "Could not change STK app state" ) ; } }
public void testVerify_matchesAltNameButNotCommonName ( ) { assertTrue ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "Common Name" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "imap.g.com" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "imap.g.com" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "example.com" ) ) ) ; }
private synchronized void disconnectAll ( ) { for ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection connection : mConnections.values ( ) ) { connection.onHfpDisconnected ( ) ; } mConnections.clear ( ) ; if ( ( mConference ) != null ) { mConference.destroy ( ) ; mConference = null ; } }
private void buildAssignVariableRef ( @ javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec destReg , @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariableRef vRef , @ javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition ) { com.android.jack.dx.rop.code.RegisterSpec valueReg = ropReg.getOrCreateRegisterSpec ( vRef ) ; com.android.jack.dx.rop.code.RegisterSpecList sources = com.android.jack.dx.rop.code.RegisterSpecList.make ( valueReg ) ; addInstruction ( new com.android.jack.dx.rop.code.PlainInsn ( com.android.jack.dx.rop.code.Rops.opMove ( valueReg.getTypeBearer ( ) ) , sourcePosition , destReg , sources ) ) ; }
public void sampleAllocation ( int count , java.lang.String desc , java.lang.Object newObj , long size ) { com.android.sched.util.log.Tracer tracer = com.android.sched.util.log.TracerFactory.getTracer ( ) ; try { if ( tracer.isTracing ( ) ) { com.android.sched.util.log.tracer.probe.HeapAllocationProbe.ThreadLocalCounting tlc = com.android.sched.util.log.tracer.probe.HeapAllocationProbe.alloc.get ( ) ; ( tlc.count ) ++ ; tlc.size += size ; tracer.registerObject ( newObj , size , count , getAllocationSite ( ) ) ; } } catch ( com.android.sched.util.config.ConfigurationError e ) { } }
public void testImsServiceDownSentCompatInitializing ( ) throws android.os.RemoteException { mTestImsServiceBinder.createMMTelFeature ( android.telephony.ims.ImsServiceTest.TEST_SLOT_0 , mTestCallback ) ; mTestImsService.mSpyMMTelFeature.sendSetFeatureState ( ImsFeature.STATE_INITIALIZING ) ; org.mockito.ArgumentCaptor < android.content.Intent > intentCaptor = org.mockito.ArgumentCaptor.forClass ( android.content.Intent.class ) ; org.mockito.Mockito.verify ( mMockContext ) . sendBroadcast ( intentCaptor.capture ( ) ) ; try { junit.framework.Assert.assertNotNull ( intentCaptor.getValue ( ) ) ; verifyServiceDownSent ( intentCaptor.getValue ( ) ) ; } catch ( java.lang.IndexOutOfBoundsException e ) { junit.framework.Assert.fail ( "Did not receive all intents" ) ; } }
public void enter ( ) { log ( ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; if ( ( ( ( mCurrentDevice ) != null ) || ( ( mTargetDevice ) != null ) ) || ( ( mIncomingDevice ) != null ) ) { loge ( ( ( ( ( ( "ERROR: enter() inconsistent state in Disconnected: current = " + ( mCurrentDevice ) ) + " target = " ) + ( mTargetDevice ) ) + " incoming = " ) + ( mIncomingDevice ) ) ) ; } removeMessages ( com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT_TIMEOUT ) ; }
private void syncClirSetting ( ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; int clirSetting = sp.getInt ( ( ( CLIR_KEY ) + ( getPhoneId ( ) ) ) , ( - 1 ) ) ; android.telephony.Rlog.i ( com.android.internal.telephony.GsmCdmaPhone.LOG_TAG , ( ( ( ( "syncClirSetting: " + ( CLIR_KEY ) ) + ( getPhoneId ( ) ) ) + "=" ) + clirSetting ) ) ; if ( clirSetting >= 0 ) { mCi.setCLIR ( clirSetting , null ) ; } }
public void runCmdLine ( java.lang.String [ ] command ) throws java.io.IOException , java.lang.InterruptedException { java.lang.Process process = java.lang.Runtime.getRuntime ( ) . exec ( command ) ; if ( ( grabProcessOutput ( process ) ) != 0 ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "Running %s failed. See output" , command [ 0 ] ) ) ; } }
static com.google.common.base.CharMatcher inRange ( final char startInclusive , final char endInclusive , java.lang.String description ) { return new com.google.common.base.CharMatcher.FastMatcher ( description ) { @ java.lang.Override public boolean matches ( char c ) { return ( startInclusive <= c ) && ( c <= endInclusive ) ; } @ com.google.common.annotations.GwtIncompatible ( value = "java.util.BitSet" ) @ java.lang.Override void setBits ( java.util.BitSet table ) { table.set ( startInclusive , ( endInclusive + 1 ) ) ; } } ; }
static boolean matchAttribute ( java.security.Provider.Service service , java.lang.String attr , java.lang.String value ) { if ( value == null ) { return true ; } final java.lang.String pattern = service.getAttribute ( attr ) ; if ( pattern == null ) { return true ; } final java.lang.String valueUc = value.toUpperCase ( java.util.Locale.US ) ; return valueUc.matches ( pattern.toUpperCase ( java.util.Locale.US ) ) ; }
public java.lang.String loadValue ( java.lang.String key ) { java.lang.String value = mWifiNative.getNetworkVariable ( mNetId , key ) ; if ( ! ( android.text.TextUtils.isEmpty ( value ) ) ) { if ( ! ( enterpriseConfigKeyShouldBeQuoted ( key ) ) ) { value = android.net.wifi.WifiInfo.removeDoubleQuotes ( value ) ; } return value ; } else { return null ; } }
private int getNextDebuggerPort ( ) { synchronized ( mDebuggerPorts ) { if ( ! ( mDebuggerPorts.isEmpty ( ) ) ) { int port = mDebuggerPorts.get ( 0 ) ; mDebuggerPorts.remove ( 0 ) ; if ( mDebuggerPorts.isEmpty ( ) ) { mDebuggerPorts.add ( ( port + 1 ) ) ; } return port ; } } return - 1 ; }
public void applyDeviceVolume ( int device ) { int index ; if ( isMuted ( ) ) { index = 0 ; } else if ( ( ( ( device & ( AudioSystem.DEVICE_OUT_ALL_A2DP ) ) != 0 ) && ( mAvrcpAbsVolSupported ) ) || ( ( device & ( mFullVolumeDevices ) ) != 0 ) ) { index = ( ( mIndexMax ) + 5 ) / 10 ; } else { index = ( ( getIndex ( device ) ) + 5 ) / 10 ; } android.media.AudioSystem.setStreamVolumeIndex ( mStreamType , index , device ) ; }
void startProfileServices ( ) { debugLog ( "startCoreServices()" ) ; java.lang.Class [ ] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles ( ) ; if ( ( ( supportedProfileServices.length ) == 1 ) && ( com.android.bluetooth.gatt.GattService.class . getSimpleName ( ) . equals ( supportedProfileServices [ 0 ] . getSimpleName ( ) ) ) ) { updateUuids ( ) ; setBluetoothClassFromConfig ( ) ; mAdapterStateMachine.sendMessage ( AdapterState.BREDR_STARTED ) ; } else { setAllProfileServiceStates ( supportedProfileServices , BluetoothAdapter.STATE_ON ) ; } }
public void testMisMatchedCallStack ( ) { com.android.tools.perflib.vmtrace.CallStackReconstructor reconstructor = new com.android.tools.perflib.vmtrace.CallStackReconstructor ( 255 ) ; reconstructor.addTraceAction ( 3 , TraceAction.METHOD_EXIT , 1 , 1 ) ; reconstructor.addTraceAction ( 2 , TraceAction.METHOD_EXIT , 2 , 2 ) ; reconstructor.addTraceAction ( 1 , TraceAction.METHOD_EXIT , 3 , 3 ) ; java.lang.String callStack = reconstructor.getTopLevel ( ) . toString ( ) ; assertEquals ( " -> 255 -> 1 -> 2 -> 3" , callStack ) ; }
public static long getLoopbackRxPackets ( ) { try { return android.net.TrafficStats.getStatsService ( ) . getIfaceStats ( android.net.TrafficStats.LOOPBACK_IFACE , android.net.TrafficStats.TYPE_RX_PACKETS ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
private static com.android.chimpchat.core.IChimpBackend createBackendByName ( java.lang.String backendName ) { if ( "adb" . equals ( backendName ) ) { return new com.android.chimpchat.adb.AdbBackend ( com.android.chimpchat.ChimpChat.sAdbLocation , com.android.chimpchat.ChimpChat.sNoInitAdb ) ; } else { return null ; } }
public static void v ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.sIsUserExtendedLoggingEnabled ) { android.telecom.Log.maybeDisableLogging ( ) ; android.util.Slog.i ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } else if ( android.telecom.Log.VERBOSE ) { android.util.Slog.v ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public void dup_x1 ( ) { super . dup_x1 ( ) ; producerStack.pop ( ) ; producerStack.pop ( ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; producerStack.push ( producerValue ) ; actualProducerStack.dup_x1 ( ) ; }
public void testDefaultMethod018 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( DEFAULTMETHOD018 ) . addProperty ( Options.ANDROID_MIN_API_LEVEL.getName ( ) , java.lang.String.valueOf ( AndroidCompatibilityChecker.N_API_LEVEL ) ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void testConnectWithConfig ( ) { android.net.wifi.aware.ConfigRequest configRequest = new android.net.wifi.aware.ConfigRequest.Builder ( ) . setMasterPreference ( 55 ) . build ( ) ; java.lang.String callingPackage = "com.google.somePackage" ; mDut.connect ( mBinderMock , callingPackage , mCallbackMock , configRequest , false ) ; org.mockito.Mockito.verify ( mAwareStateManagerMock ) . connect ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.eq ( callingPackage ) , org.mockito.ArgumentMatchers.eq ( mCallbackMock ) , org.mockito.ArgumentMatchers.eq ( configRequest ) , org.mockito.ArgumentMatchers.eq ( false ) ) ; }
private void testExplicitSizeBottomRightGravity ( ) { doLayoutParamTest ( ( android.view.WindowManager.LayoutParams params ) -> { params.width = ( 200 - ( mOutsets.left ) ) - ( mOutsets.right ) ; params.height = ( 200 - ( mOutsets.bottom ) ) - ( mOutsets.top ) ; params.gravity = ( android.view.Gravity.BOTTOM ) | ( android.view.Gravity.RIGHT ) ; } ) ; }
public static com.intellij.execution.testframework.ui.BaseTestsOutputConsoleView createAndAttachConsole ( @ org.jetbrains.annotations.NotNull final java.lang.String testFrameworkName , @ org.jetbrains.annotations.NotNull final com.intellij.execution.process.ProcessHandler processHandler , @ org.jetbrains.annotations.NotNull final com.intellij.execution.testframework.TestConsoleProperties consoleProperties , com.intellij.execution.runners.ExecutionEnvironment environment , @ org.jetbrains.annotations.NotNull final com.google.gct.testing.CloudMatrixExecutionCancellator matrixExecutionCancellator ) throws com.intellij.execution.ExecutionException { com.intellij.execution.testframework.ui.BaseTestsOutputConsoleView console = com.google.gct.testing.results.GoogleCloudTestResultsConnectionUtil.createConsole ( testFrameworkName , consoleProperties , environment , matrixExecutionCancellator ) ; console.attachToProcess ( processHandler ) ; return console ; }
public void annotate ( com.android.dex.util.ExceptionWithContext ex ) { int limit = ( stackPtr ) - 1 ; for ( int i = 0 ; i <= limit ; i ++ ) { java.lang.String idx = ( i == limit ) ? "top0" : com.android.dx.util.Hex.u2 ( ( limit - i ) ) ; ex.addContext ( ( ( ( "stack[" + idx ) + "]: " ) + ( com.android.dx.cf.code.ExecutionStack.stackElementString ( stack [ i ] ) ) ) ) ; } }
private void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array , android.support.v8.renderscript.Element.DataType dt , int arrayLen ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , array , ( arrayLen * ( dt.mSize ) ) , dt ) ; }
private void sendOnChannel2 ( java.lang.String data , java.net.SocketAddress address ) throws java.io.IOException { assertEquals ( data.length ( ) , channel2.send ( java.nio.ByteBuffer.wrap ( data.getBytes ( ) ) , address ) ) ; }
public void copyFrom ( byte [ ] d ) { validateIsInt8 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_8 , d.length ) ; }
public void addTestCase ( com.android.vts.entity.TestCaseRunEntity testCaseEntity ) { for ( com.android.vts.entity.TestCaseRunEntity.TestCase testCase : testCaseEntity.testCases ) { int result = testCase.result ; if ( result > ( resultCounts.length ) ) continue ; ++ ( resultCounts [ result ] ) ; com.android.vts.util.TestRunDetails.ResultColumn column = columns [ result ] ; column.add ( testCase.name ) ; } }
private static void putMtu ( java.nio.ByteBuffer ra , int mtu ) { final byte ND_OPTION_MTU = 5 ; final byte MTU_NUM_8OCTETS = 1 ; ra.put ( ND_OPTION_MTU ) . put ( MTU_NUM_8OCTETS ) . putShort ( android.net.ip.RouterAdvertisementDaemon.asShort ( 0 ) ) . putInt ( ( mtu < ( android.net.util.NetworkConstants.IPV6_MIN_MTU ) ? android.net.util.NetworkConstants.IPV6_MIN_MTU : mtu ) ) ; }
public void rilConnected ( int indicationType ) { mRil.processIndication ( indicationType ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLog ( com.android.internal.telephony.RILConstants.RIL_UNSOL_RIL_CONNECTED ) ; mRil.setRadioPower ( false , null ) ; mRil.setCdmaSubscriptionSource ( mRil.mCdmaSubscription , null ) ; mRil.setCellInfoListRate ( ) ; mRil.notifyRegistrantsRilConnectionChanged ( 15 ) ; mRil.updateScreenState ( true ) ; }
synchronized void nAllocationRead3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt , int mSize , boolean usePadding ) { validate ( ) ; rsnAllocationRead3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes , dt.mID , mSize , usePadding ) ; }
static final < K , V > void setEntryAt ( java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > [ ] tab , int i , java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > e ) { java.util.concurrent.ConcurrentHashMap.UNSAFE.putOrderedObject ( tab , ( ( ( ( long ) ( i ) ) << ( java.util.concurrent.ConcurrentHashMap.TSHIFT ) ) + ( java.util.concurrent.ConcurrentHashMap.TBASE ) ) , e ) ; }
public android.content.pm.PackageCleanItem nextPackageToClean ( android.content.pm.PackageCleanItem lastPackage ) { synchronized ( mPackages ) { if ( ! ( isExternalMediaAvailable ( ) ) ) { return null ; } final java.util.ArrayList < android.content.pm.PackageCleanItem > pkgs = mSettings.mPackagesToBeCleaned ; if ( lastPackage != null ) { pkgs.remove ( lastPackage ) ; } if ( ( pkgs.size ( ) ) > 0 ) { return pkgs.get ( 0 ) ; } } return null ; }
public void test_wrap_01 ( ) throws java.lang.Exception { prepareEngines ( ) ; doHandshake ( ) ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer.allocate ( 100 ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer.allocate ( org.apache.harmony.tests.javax.net.ssl.SSLEngineTest.MAX_TLS_RECORD_SIZE ) ; clientEngine.engine.wrap ( new java.nio.ByteBuffer [ ] { bbs } , 0 , 1 , bbd ) ; }
public void startElement ( java.lang.String uri , java.lang.String localName , java.lang.String name , org.xml.sax.Attributes attributes ) throws org.xml.sax.SAXException { name = name.substring ( ( ( name.indexOf ( ':' ) ) + 1 ) ) ; if ( ( name.equals ( com.android.sdklib.repository.RepoXsdUtil.NODE_IMPORT ) ) || ( name.equals ( com.android.sdklib.repository.RepoXsdUtil.NODE_INCLUDE ) ) ) { java.lang.String importFile = attributes.getValue ( com.android.sdklib.repository.RepoXsdUtil.ATTR_SCHEMA_LOCATION ) ; streams.add ( new javax.xml.transform.stream.StreamSource ( com.android.sdklib.repository.RepoXsdUtil.class . getResourceAsStream ( importFile ) ) ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( ( options.coreLibrary ? "__desugar__/" : "" ) ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; reader.accept ( visitor , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; java.lang.String name = rewriter.unprefix ( ( ( lambdaFixer.getInternalName ( ) ) + ".class" ) ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
private void cmdDumpsys ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { final android.net.ConnectivityMetricsEvent [ ] events ; synchronized ( mLock ) { events = mEventLog.toArray ( ) ; } for ( android.net.ConnectivityMetricsEvent ev : events ) { pw.println ( ev.toString ( ) ) ; } if ( ( mNetdListener ) != null ) { mNetdListener.list ( pw ) ; } mDefaultNetworkMetrics.listEvents ( pw ) ; }
public void test_with_adjustment_AmPm ( ) { java.time.OffsetTime test = tck.java.time.TCKOffsetTime.TEST_11_30_59_500_PONE.with ( new java.time.temporal.TemporalAdjuster ( ) { @ java.lang.Override public java.time.temporal.Temporal adjustInto ( java.time.temporal.Temporal dateTime ) { return dateTime.with ( java.time.temporal.ChronoField.HOUR_OF_DAY , 23 ) ; } } ) ; org.testng.Assert.assertEquals ( test , java.time.OffsetTime.of ( 23 , 30 , 59 , 500 , tck.java.time.TCKOffsetTime.OFFSET_PONE ) ) ; }
protected void onHandleIntent ( android.content.Intent intent ) { android.util.Log.d ( com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.TAG , "Trying to establish a connection." ) ; java.lang.String outputFile = intent.getStringExtra ( com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.OUTPUT_FILE ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testUrlConnection" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testUrlConnection ( ) , outputFile ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testUrlConnectionv6" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testUrlConnectionv6 ( ) , outputFile ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testSntp" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testSntp ( getApplicationContext ( ) ) , outputFile ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testDns" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testDns ( ) , outputFile ) ; }
private void startAlert ( ) { int ringerMode = mAudioManager.getRingerMode ( ) ; if ( ringerMode != ( android.media.AudioManager.RINGER_MODE_NORMAL ) ) { com.android.services.telephony.Log.i ( this , "startAlert: skipping emergency tone due to ringer mode %d" , ringerMode ) ; return ; } if ( ( mToneGenerator ) == null ) { mToneGenerator = new android.media.ToneGenerator ( android.media.AudioManager.STREAM_VOICE_CALL , com.android.services.telephony.EmergencyTonePlayer.ALERT_RELATIVE_VOLUME_PERCENT ) ; mSavedInCallVolume = mAudioManager.getStreamVolume ( AudioManager.STREAM_VOICE_CALL ) ; mAudioManager.setStreamVolume ( AudioManager.STREAM_VOICE_CALL , mAudioManager.getStreamMaxVolume ( AudioManager.STREAM_VOICE_CALL ) , 0 ) ; mToneGenerator.startTone ( ToneGenerator.TONE_CDMA_EMERGENCY_RINGBACK ) ; } }
public boolean checkConfigOverridePermission ( int uid ) { try { int permission = mFacade.checkUidPermission ( android.Manifest.permission.OVERRIDE_WIFI_CONFIG , uid ) ; return permission == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.WifiConfigManager.TAG , ( "Error checking for permission " + e ) ) ; return false ; } }
public void sendSingleScanRequestWithNoResults ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = com.android.server.wifi.ScanTestUtil.createRequest ( WifiScanner.WIFI_BAND_BOTH , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; doSuccessfulSingleScan ( requestSettings , com.android.server.wifi.ScanTestUtil.computeSingleScanNativeSettings ( requestSettings ) , com.android.server.wifi.ScanResults.create ( 0 , new int [ 0 ] ) ) ; }
public void testLicenseIdNotFound ( ) throws java.lang.Exception { java.lang.String document = ( ( ( ( ( ( "<?xml version=\"1.0\"?>" + ( com.android.sdklib.repository.SdkRepositoryTest.OPEN_TAG ) ) + "<r:license id=\"lic1\"> some license </r:license> " ) + "<r:tool> <r:uses-license ref=\"lic2\" /> <r:revision>1</r:revision> " ) + "<r:min-platform-tools-rev>1</r:min-platform-tools-rev> " ) + "<r:archives> <r:archive os=\"any\"> <r:size>1</r:size> <r:checksum>2822ae37115ebf13412bbef91339ee0d9454525e</r:checksum> " ) + "<r:url>url</r:url> </r:archive> </r:archives> </r:tool>" ) + ( com.android.sdklib.repository.SdkRepositoryTest.CLOSE_TAG ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; javax.xml.validation.Validator validator = getRepoValidator ( SdkRepoConstants.NS_LATEST_VERSION , null ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "cvc-id.1: There is no ID/IDREF binding for IDREF 'lic2'.*" , e.getMessage ( ) ) ; return ; } fail ( ) ; }
void setTask ( com.android.server.am.TaskRecord newTask , com.android.server.am.TaskRecord taskToAffiliateWith ) { if ( ( ( task ) != null ) && ( task.removeActivity ( this ) ) ) { if ( ( task ) != newTask ) { task.stack.removeTask ( task , "setTask" ) ; } else { android.util.Slog.d ( com.android.server.am.ActivityRecord.TAG , ( "!!! REMOVE THIS LOG !!! setTask: nearly removed stack=" + ( newTask == null ? null : newTask.stack ) ) ) ; } } task = newTask ; setTaskToAffiliateWith ( taskToAffiliateWith ) ; }
public void serviceDied ( long cookie ) { android.util.Log.e ( mTag , ( ( mName ) + " died" ) ) ; synchronized ( mLock ) { mIsConnected = false ; if ( ( mAccessControlEnforcer ) != null ) { mAccessControlEnforcer.reset ( ) ; } } mHandler.sendMessageDelayed ( mHandler.obtainMessage ( com.android.se.Terminal.EVENT_GET_HAL , 0 ) , com.android.se.Terminal.GET_SERVICE_DELAY_MILLIS ) ; }
public void Test10354 ( ) { android.icu.text.DecimalFormatSymbols dfs = new android.icu.text.DecimalFormatSymbols ( ) ; dfs.setNaN ( "" ) ; android.icu.text.DecimalFormat df = new android.icu.text.DecimalFormat ( ) ; df.setDecimalFormatSymbols ( dfs ) ; try { df.formatToCharacterIterator ( java.lang.Double.NaN ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new java.lang.AssertionError ( e ) ; } }
private void sendIntent ( android.support.v4.util.Pair < java.lang.String , android.net.Uri > booleanUriPair ) { java.lang.String sourcePackage = booleanUriPair.first ; android.net.Uri uri = booleanUriPair.second ; com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.sendIntent" , "srcPkg:%s, uri:%%s" , sourcePackage , java.lang.String.valueOf ( uri ) ) ; android.content.Intent intent = new android.content.Intent ( android.provider.VoicemailContract.ACTION_FETCH_VOICEMAIL , uri ) ; intent.setPackage ( sourcePackage ) ; voicemailLoadingStatusView.setVisibility ( com.android.dialer.voicemail.listui.VISIBLE ) ; getContext ( ) . sendBroadcast ( intent ) ; }
public static java.lang.String getProfileName ( android.content.Context context ) { android.database.Cursor c = context.getContentResolver ( ) . query ( Profile.CONTENT_URI , new java.lang.String [ ] { android.provider.ContactsContract.Profile.DISPLAY_NAME } , null , null , null ) ; java.lang.String ownerName = null ; if ( ( c != null ) && ( c.moveToFirst ( ) ) ) { ownerName = c.getString ( 0 ) ; } if ( c != null ) { c.close ( ) ; } return ownerName ; }
public void testInterceptedSIMCommandsToTelephony ( ) { if ( ! ( mHasTelephony ) ) { return ; } android.content.Intent intent = new android.content.Intent ( ) ; intent.setAction ( "android.intent.action.stk.command" ) ; intent.putExtra ( "STK CMD" , "test" ) ; android.content.ComponentName cn = android.content.ComponentName.unflattenFromString ( "com.android.stk/com.android.stk.StkCmdReceiver" ) ; intent.setComponent ( cn ) ; try { mContext.sendBroadcast ( intent ) ; fail ( ( "Able to send broadcast which can be received by any app which has registered " + ( "broadcast for action 'android.intent.action.stk.command' since it is not " + "protected with any permission. Device is vulnerable to CVE-2015-3843." ) ) ) ; } catch ( java.lang.SecurityException e ) { } }
public final synchronized android.os.CountDownTimer start ( ) { mCancelled = false ; if ( ( mMillisInFuture ) <= 0 ) { onFinish ( ) ; return this ; } mStopTimeInFuture = ( android.os.SystemClock.elapsedRealtime ( ) ) + ( mMillisInFuture ) ; mHandler.sendMessage ( mHandler.obtainMessage ( android.os.CountDownTimer.MSG ) ) ; return this ; }
public void testParseArabic ( ) throws java.lang.Exception { java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" , new java.util.Locale ( "ar" , "EG" ) ) ; sdf.setTimeZone ( libcore.java.text.SimpleDateFormatTest.AMERICA_LOS_ANGELES ) ; java.util.Date d = sdf.parse ( "2012-08-29 10:02:45" ) ; assertEquals ( 1346259765000L , d.getTime ( ) ) ; java.lang.String formatted = sdf.format ( d ) ; assertEquals ( "٢٠١٢-٠٨-٢٩ ١٠:٠٢:٤٥" , formatted ) ; java.util.Date d2 = sdf.parse ( formatted ) ; assertEquals ( d , d2 ) ; }
java.lang.Object [ ] [ ] data_of_calendarDisplayNames ( ) { return new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { "Hijrah" , "Islamic Calendar (Umm al-Qura)" } , new java.lang.Object [ ] { "ISO" , "ISO-8601 Calendar" } , new java.lang.Object [ ] { "Japanese" , "Japanese Calendar" } , new java.lang.Object [ ] { "Minguo" , "Minguo Calendar" } , new java.lang.Object [ ] { "ThaiBuddhist" , "Buddhist Calendar" } } ; }
private void initLayout ( ) { findViewById ( R.id.fab ) . setOnClickListener ( this ) ; com.android.dialer.main.impl.BottomNavBar navBar = findViewById ( R.id.bottom_nav_bar ) ; navBar.setOnTabSelectedListener ( new com.android.dialer.main.impl.MainActivity.MainBottomNavBarBottomNavTabListener ( ) ) ; navBar.selectTab ( BottomNavBar.TabIndex.SPEED_DIAL ) ; android.support.v7.widget.Toolbar toolbar = findViewById ( R.id.toolbar ) ; toolbar.setPopupTheme ( android.R.style.Theme_Material_Light ) ; setSupportActionBar ( toolbar ) ; }
public void startTestImpl ( ) { android.os.BatteryManager bm = ( ( android.os.BatteryManager ) ( getSystemService ( com.android.cts.verifier.jobscheduler.BATTERY_SERVICE ) ) ) ; if ( bm.isCharging ( ) ) { new com.android.cts.verifier.jobscheduler.ChargingConstraintTestActivity.TestDevicePluggedInConstraint ( ) . execute ( ) ; } else if ( isDevicePluggedIn ( ) ) { mTestState = com.android.cts.verifier.jobscheduler.ChargingConstraintTestActivity.STATE_WAITING_TO_START_ON_CHARGING_TEST ; showWaitingForStableChargingViews ( ) ; } }
public boolean p2pGroupAdd ( boolean persistent ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.groupAdd ( persistent ) ; } else { if ( persistent ) { return doBooleanCommand ( "P2P_GROUP_ADD persistent" ) ; } return doBooleanCommand ( "P2P_GROUP_ADD" ) ; } }
protected static void waitForStart ( android.transition.cts.SimpleTransitionListener listener ) throws java.lang.InterruptedException { long endTime = ( android.os.SystemClock.uptimeMillis ( ) ) + 4000 ; synchronized ( listener ) { while ( ! ( listener.started ) ) { long now = android.os.SystemClock.uptimeMillis ( ) ; long waitTime = endTime - now ; if ( waitTime <= 0 ) { throw new java.lang.InterruptedException ( ) ; } listener.wait ( waitTime ) ; } } }
public com.android.ide.eclipse.adt.internal.wizards.templates.TemplateMetadata getTemplate ( ) { if ( ( mTemplate ) == null ) { java.lang.String xml = readTemplateTextResource ( com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.TEMPLATE_XML ) ; if ( xml != null ) { org.w3c.dom.Document doc = com.android.ide.eclipse.adt.internal.editors.layout.gle2.DomUtilities.parseDocument ( xml , true ) ; if ( ( doc != null ) && ( ( doc.getDocumentElement ( ) ) != null ) ) { mTemplate = new com.android.ide.eclipse.adt.internal.wizards.templates.TemplateMetadata ( doc ) ; } } } return mTemplate ; }
public void consume ( org.jetbrains.plugins.groovy.mvc.ModifiableRootModel model ) { for ( org.jetbrains.plugins.groovy.mvc.ContentEntry entry : model.getContentEntries ( ) ) { if ( toRemoveContent.remove ( entry.getUrl ( ) ) ) { model.removeContentEntry ( entry ) ; } else { for ( org.jetbrains.plugins.groovy.mvc.SourceFolder folder : entry.getSourceFolders ( ) ) { if ( toRemove.remove ( folder ) ) { entry.removeSourceFolder ( folder ) ; } } } } }
public void registerOnActivityPausedListener ( android.app.Activity activity , android.app.OnActivityPausedListener listener ) { synchronized ( mOnPauseListeners ) { java.util.ArrayList < android.app.OnActivityPausedListener > list = mOnPauseListeners.get ( activity ) ; if ( list == null ) { list = new java.util.ArrayList < android.app.OnActivityPausedListener > ( ) ; mOnPauseListeners.put ( activity , list ) ; } list.add ( listener ) ; } }
public static com.android.dex.util.ExceptionWithContext withContext ( java.lang.Throwable ex , java.lang.String str ) { com.android.dex.util.ExceptionWithContext ewc ; if ( ex instanceof com.android.dex.util.ExceptionWithContext ) { ewc = ( ( com.android.dex.util.ExceptionWithContext ) ( ex ) ) ; } else { ewc = new com.android.dex.util.ExceptionWithContext ( ex ) ; } ewc.addContext ( str ) ; return ewc ; }
public void dumpDoesNotClearPendingConnectionTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; getDumpString ( ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect" ) ) ; }
private void getIntValueFromCursor ( android.content.ContentValues cv , android.database.Cursor c , java.lang.String key ) { int columnIndex = c.getColumnIndex ( key ) ; if ( columnIndex != ( - 1 ) ) { java.lang.String fromCursor = c.getString ( columnIndex ) ; if ( ! ( android.text.TextUtils.isEmpty ( fromCursor ) ) ) { try { cv.put ( key , new java.lang.Integer ( fromCursor ) ) ; } catch ( java.lang.NumberFormatException nfe ) { } } } }
public boolean replace ( K key , V oldValue , V newValue ) { int hash = java.util.concurrent.ConcurrentHashMap.hash ( key.hashCode ( ) ) ; if ( ( oldValue == null ) || ( newValue == null ) ) throw new java.lang.NullPointerException ( ) ; java.util.concurrent.ConcurrentHashMap.Segment < K , V > s = segmentForHash ( hash ) ; return ( s != null ) && ( s.replace ( key , hash , oldValue , newValue ) ) ; }
public void testE2 ( ) { loadAndRun ( "dot.junit.opcodes.aput_short.d.T_aput_short_1" , java.lang.NullPointerException.class , null , 2 , ( ( short ) ( 10000 ) ) ) ; }
public void add ( com.android.sdklib.internal.repository.SdkSourceCategory category , com.android.sdklib.internal.repository.SdkSource source ) { java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list = mSources.get ( category ) ; if ( list == null ) { list = new java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > ( ) ; mSources.put ( category , list ) ; } list.add ( source ) ; }
protected void renameResource ( @ com.android.annotations.NonNull java.lang.Object [ ] testData , @ com.android.annotations.NonNull java.lang.Object resource , boolean updateReferences , @ com.android.annotations.NonNull java.lang.String newName , @ com.android.annotations.NonNull java.lang.String expected , @ com.android.annotations.NonNull java.lang.String expectedWarnings ) throws java.lang.Exception { org.eclipse.core.resources.IProject project = createProject ( testData ) ; renameResource ( project , resource , updateReferences , newName , expected , expectedWarnings ) ; }
public void stop ( ) { if ( ! ( mStarted.compareAndSet ( true , false ) ) ) { return ; } if ( com.android.networkrecommendation.WifiWakeupController.DEBUG ) { android.util.Log.d ( com.android.networkrecommendation.WifiWakeupController.TAG , "Stopping WifiWakeupController." ) ; } mContext.unregisterReceiver ( mBroadcastReceiver ) ; mContentResolver.unregisterContentObserver ( mContentObserver ) ; }
private int pinLocY ( int y ) { int titleH = getTitleHeight ( ) ; if ( y <= titleH ) { return java.lang.Math.max ( y , 0 ) ; } return ( android.webkit.WebView.pinLoc ( ( y - titleH ) , getViewHeight ( ) , computeVerticalScrollRange ( ) ) ) + titleH ; }
private static Breakpoint.Manager.BP BP ( java.lang.reflect.Executable m ) { return new art.Breakpoint.Manager.BP ( m ) { public java.lang.String toString ( ) { if ( method.getDeclaringClass ( ) . getPackage ( ) . equals ( art.Test993.class . getPackage ( ) ) ) { return super . toString ( ) ; } else { return ( method.toString ( ) ) + " @ <NON-DETERMINISTIC>" ; } } } ; }
static int extractLineNumber ( @ com.android.annotations.Nullable org.w3c.dom.Node xmlNode ) { if ( xmlNode != null ) { java.lang.Object data = xmlNode.getUserData ( com.android.manifmerger.MergerXmlUtils.DATA_LINE_NUMBER ) ; if ( data instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( data ) ) . intValue ( ) ; } } return 0 ; }
private synchronized java.util.jar.Manifest getManifestFromReference ( ) throws java.io.IOException { if ( ( manifest ) == null ) { java.util.jar.JarEntry manEntry = getManEntry ( ) ; if ( manEntry != null ) { if ( verify ) { byte [ ] b = getBytes ( manEntry ) ; manifest = new java.util.jar.Manifest ( new java.io.ByteArrayInputStream ( b ) ) ; if ( ! ( jvInitialized ) ) { jv = new java.util.jar.JarVerifier ( b ) ; } } else { manifest = new java.util.jar.Manifest ( super . getInputStream ( manEntry ) ) ; } } } return manifest ; }
static com.android.dialer.searchfragment.cp2.SearchContactsCursorLoader.SmartDialCursor newInstance ( android.content.Context context , android.database.Cursor smartDialCursor ) { if ( ( smartDialCursor.getCount ( ) ) == 0 ) { return new com.android.dialer.searchfragment.cp2.SearchContactsCursorLoader.SmartDialCursor ( new android.database.Cursor [ ] { new android.database.MatrixCursor ( com.android.dialer.searchfragment.common.Projections.CP2_PROJECTION ) } ) ; } android.database.MatrixCursor headerCursor = new android.database.MatrixCursor ( HEADER_PROJECTION ) ; headerCursor.addRow ( new java.lang.String [ ] { context.getString ( R.string.all_contacts ) } ) ; return new com.android.dialer.searchfragment.cp2.SearchContactsCursorLoader.SmartDialCursor ( new android.database.Cursor [ ] { headerCursor , com.android.dialer.searchfragment.cp2.SearchContactsCursorLoader.SmartDialCursor.convertSmartDialCursorToSearchCursor ( smartDialCursor ) } ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass cls , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findClass ( cls ) ; if ( c == null ) { return null ; } java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > annotations = c.getAnnotations ( ) ; if ( annotations != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; manualDir = new java.io.File ( testDir , FOLDER_TEST_MANUAL ) ; regularDir = new java.io.File ( testDir , FOLDER_TEST_REGULAR ) ; }
public static final void enforceTetherChangePermission ( android.content.Context context , java.lang.String callingPkg ) { if ( ( null == context ) || ( null == callingPkg ) ) { throw new java.lang.IllegalArgumentException ( "arguments should not be null" ) ; } if ( ( context.getResources ( ) . getStringArray ( com.android.internal.R.array.config_mobile_hotspot_provision_app ) . length ) == 2 ) { context.enforceCallingOrSelfPermission ( android.net.android.Manifest.permission.TETHER_PRIVILEGED , "ConnectivityService" ) ; } else { int uid = android.os.Binder.getCallingUid ( ) ; android.provider.Settings.checkAndNoteWriteSettingsOperation ( context , uid , callingPkg , true ) ; } }
public void testInheritCompatLibrary ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/MyActivityImpl.java:8: Error: Call requires API level 11 (current min is 1): android.app.Activity#isChangingConfigurations [NewApi]\n" + " boolean isChanging = super.isChangingConfigurations();\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/MyActivityImpl.java:12: Error: This method is not overriding anything with the current build target, but will in API level 11 (current target is 3): test.pkg.MyActivityImpl#isChangingConfigurations [Override]\n" ) + " public boolean isChangingConfigurations() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "2 errors, 0 warnings\n" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "project.properties1=>project.properties" , "apicheck/MyActivityImpl.java.txt=>src/test/pkg/MyActivityImpl.java" , "apicheck/MyActivityImpl.class.data=>bin/classes/test/pkg/MyActivityImpl.class" , "apicheck/android-support-v4.jar.data=>libs/android-support-v4.jar" ) ) ; }
public java.lang.String getDeviceId ( int slotIndex ) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo ( ) ; if ( info == null ) return null ; return info.getDeviceIdForPhone ( slotIndex , mContext.getOpPackageName ( ) ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
public void java7Switches002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( TEST002 ) . setSourceLevel ( SourceLevel.JAVA_7 ) . compileAndRunTest ( ) ; }
protected boolean stop ( ) { android.util.Log.v ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "stop()" ) ; if ( ( mContactChangeObserver ) == null ) { android.util.Log.i ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Avoid unregister when receiver it is not registered" ) ; return true ; } try { unregisterReceiver ( mPbapReceiver ) ; getContentResolver ( ) . unregisterContentObserver ( mContactChangeObserver ) ; mContactChangeObserver = null ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Unable to unregister pbap receiver" , e ) ; } mSessionStatusHandler.obtainMessage ( com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN ) . sendToTarget ( ) ; setState ( BluetoothPbap.STATE_DISCONNECTED , BluetoothPbap.RESULT_CANCELED ) ; return true ; }
public void addListener ( java.lang.Runnable listener , java.util.concurrent.Executor executor ) { com.google.common.base.Preconditions.checkNotNull ( listener , "Runnable was null." ) ; com.google.common.base.Preconditions.checkNotNull ( executor , "Executor was null." ) ; try { executor.execute ( listener ) ; } catch ( java.lang.RuntimeException e ) { com.google.common.util.concurrent.Futures.ImmediateFuture.log.log ( java.util.logging.Level.SEVERE , ( ( ( "RuntimeException while executing runnable " + listener ) + " with executor " ) + executor ) , e ) ; } }
public void testInstallManifestSdcardUnmount ( ) { if ( android.os.Environment.isExternalStorageEmulated ( ) ) { return ; } boolean origState = checkMediaState ( Environment.MEDIA_MOUNTED ) ; try { assertTrue ( unmountMedia ( ) ) ; android.content.pm.PackageManagerTests.InstallParams ip = new android.content.pm.PackageManagerTests.InstallParams ( "install.apk" , R.raw.install_loc_sdcard ) ; installFromRawResource ( ip , 0 , true , false , ( - 1 ) , PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY ) ; } finally { if ( origState ) { mountMedia ( ) ; } else { unmountMedia ( ) ; } } }
public java.lang.Object [ ] getTestObjects ( ) { java.util.Locale [ ] locales = android.icu.dev.test.serializable.SerializableTestUtility.getLocales ( ) ; android.icu.util.TimeZone pst = android.icu.util.TimeZone.getTimeZone ( "America/Los_Angeles" ) ; android.icu.util.Calendar [ ] calendars = new android.icu.util.Calendar [ locales.length ] ; for ( int i = 0 ; i < ( locales.length ) ; i += 1 ) { calendars [ i ] = android.icu.util.Calendar.getInstance ( pst , locales [ i ] ) ; } return calendars ; }
public static android.icu.util.VersionInfo getDataVersion ( ) { android.icu.util.UResourceBundle icudatares = null ; try { icudatares = android.icu.util.UResourceBundle.getBundleInstance ( ICUData.ICU_BASE_NAME , android.icu.impl.ICUDataVersion.U_ICU_VERSION_BUNDLE , ICUResourceBundle.ICU_DATA_CLASS_LOADER ) ; icudatares = icudatares.get ( android.icu.impl.ICUDataVersion.U_ICU_DATA_KEY ) ; } catch ( java.util.MissingResourceException ex ) { return null ; } return android.icu.util.VersionInfo.getInstance ( icudatares.getString ( ) ) ; }
private ActivityManager.ProcessErrorStateInfo generateProcessError ( com.android.server.am.ProcessRecord app , int condition , java.lang.String activity , java.lang.String shortMsg , java.lang.String longMsg , java.lang.String stackTrace ) { android.app.ActivityManager.ProcessErrorStateInfo report = new android.app.ActivityManager.ProcessErrorStateInfo ( ) ; report.condition = condition ; report.processName = app.processName ; report.pid = app.pid ; report.uid = app.info.uid ; report.tag = activity ; report.shortMsg = shortMsg ; report.longMsg = longMsg ; report.stackTrace = stackTrace ; return report ; }
public java.util.Collection < com.android.ide.common.resources.ResourceItem > getResourceItemsOfType ( @ com.android.annotations.NonNull com.android.resources.ResourceType type ) { ensureInitialized ( ) ; java.util.Map < java.lang.String , com.android.ide.common.resources.ResourceItem > map = mResourceMap.get ( type ) ; if ( map == null ) { return java.util.Collections.emptyList ( ) ; } java.util.Collection < com.android.ide.common.resources.ResourceItem > roList = mReadOnlyListMap.get ( map ) ; if ( roList == null ) { roList = java.util.Collections.unmodifiableCollection ( map.values ( ) ) ; mReadOnlyListMap.put ( map , roList ) ; } return roList ; }
public org.bouncycastle.math.ec.ECFieldElement multiplyPlusProduct ( org.bouncycastle.math.ec.ECFieldElement b , org.bouncycastle.math.ec.ECFieldElement x , org.bouncycastle.math.ec.ECFieldElement y ) { java.math.BigInteger ax = this . x ; java.math.BigInteger bx = b.toBigInteger ( ) ; java.math.BigInteger xx = x.toBigInteger ( ) ; java.math.BigInteger yx = y.toBigInteger ( ) ; java.math.BigInteger ab = ax.multiply ( bx ) ; java.math.BigInteger xy = xx.multiply ( yx ) ; return new org.bouncycastle.math.ec.ECFieldElement.Fp ( q , r , modReduce ( ab.add ( xy ) ) ) ; }
void cleanupDevice ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbapclient.PbapClientService.DBG ) android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientService.TAG , ( "Cleanup device: " + device ) ) ; synchronized ( mPbapClientStateMachineMap ) { com.android.bluetooth.pbapclient.PbapClientStateMachine pbapClientStateMachine = mPbapClientStateMachineMap.get ( device ) ; if ( pbapClientStateMachine != null ) { mPbapClientStateMachineMap.remove ( device ) ; } } }
public void run ( ) { android.util.Log.i ( com.android.server.cts.device.batterystats.SimpleJobService.TAG , "Running job" ) ; try { java.lang.Thread.sleep ( com.android.server.cts.device.batterystats.SimpleJobService.JOB_EXECUTION_MS ) ; } catch ( java.lang.InterruptedException e ) { } jobFinished ( mRunningParams , false ) ; if ( ( com.android.server.cts.device.batterystats.SimpleJobService.sLatch ) != null ) { com.android.server.cts.device.batterystats.SimpleJobService.sLatch.countDown ( ) ; } android.util.Log.i ( com.android.server.cts.device.batterystats.SimpleJobService.TAG , "Finished job" ) ; }
public void testLibsManifestMerging ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libsTest" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "libapp/build/" + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/bundles/release/AndroidManifest.xml" ) ) ; runTasksOn ( project , BasePlugin.GRADLE_TEST_VERSION , "clean" , "build" ) ; assertTrue ( fileOutput.exists ( ) ) ; }
public void testIsMatchFor ( ) { com.android.ide.common.resources.configuration.FolderConfiguration en = com.android.ide.common.resources.configuration.FolderConfiguration.getConfigForFolder ( "values-en" ) ; com.android.ide.common.resources.configuration.FolderConfiguration enUs = com.android.ide.common.resources.configuration.FolderConfiguration.getConfigForFolder ( "values-en-rUS" ) ; assertNotNull ( en ) ; assertNotNull ( enUs ) ; assertTrue ( enUs.isMatchFor ( enUs ) ) ; assertTrue ( en.isMatchFor ( en ) ) ; assertTrue ( enUs.isMatchFor ( en ) ) ; assertTrue ( en.isMatchFor ( enUs ) ) ; }
private static java.lang.String getProcesses ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; try { java.lang.String [ ] rootProcesses = android.tests.getinfo.RootProcessScanner.getRootProcesses ( ) ; for ( java.lang.String rootProcess : rootProcesses ) { builder.append ( rootProcess ) . append ( ';' ) ; } } catch ( java.io.FileNotFoundException notFound ) { builder.append ( notFound.getMessage ( ) ) ; } catch ( android.tests.getinfo.RootProcessScanner.MalformedStatMException malformedStatM ) { builder.append ( malformedStatM.getMessage ( ) ) ; } return builder.toString ( ) ; }
public static void execStandalone ( java.lang.String invokeWith , java.lang.String classPath , java.lang.String className , java.lang.String [ ] args ) { java.lang.StringBuilder command = new java.lang.StringBuilder ( invokeWith ) ; command.append ( " /system/bin/dalvikvm -classpath '" ) . append ( classPath ) ; command.append ( "' " ) . append ( className ) ; com.android.internal.os.Zygote.appendQuotedShellArgs ( command , args ) ; com.android.internal.os.Zygote.execShell ( command.toString ( ) ) ; }
public void testDeserializeUnserializableField ( ) throws java.lang.Exception { java.lang.String s = "aced0005737200386c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6e54657" + ( ( ( ( "3742453657269616c697a61626c65436f6e7461696e65723200000000000000000200014c000e7" + "56e73657269616c697a61626c657400334c6c6962636f72652f6a6176612f696f2f53657269616" ) + "c697a6174696f6e546573742457617353657269616c697a61626c653b7870737200316c6962636" ) + "f72652e6a6176612e696f2e53657269616c697a6174696f6e546573742457617353657269616c6" ) + "97a61626c65000000000000000002000149000169787000000000" ) ; assertFalse ( libcore.java.io.SerializationTest.serializableContainer2InitializedFlag ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertTrue ( libcore.java.io.SerializationTest.serializableContainer2InitializedFlag ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; }
public int addExtraItem ( T item ) { long newItemId = getId ( item ) ; com.android.tv.common.SoftPreconditions.checkState ( ( ! ( mIds.contains ( newItemId ) ) ) ) ; mIds.add ( newItemId ) ; super . add ( item ) ; return ++ ( mExtraItemCount ) ; }
public void onCallAudioStateChanged ( android.telecom.CallAudioState oldCallAudioState , android.telecom.CallAudioState newCallAudioState ) { if ( ! ( mInCallServices.isEmpty ( ) ) ) { android.telecom.Log.i ( this , "Calling onAudioStateChanged, audioState: %s -> %s" , oldCallAudioState , newCallAudioState ) ; for ( com.android.internal.telecom.IInCallService inCallService : mInCallServices.values ( ) ) { try { inCallService.onCallAudioStateChanged ( newCallAudioState ) ; } catch ( android.os.RemoteException ignored ) { } } } }
public void testGetResourceAsStream1 ( ) throws java.io.IOException { java.lang.Class clazz = getClass ( ) ; java.io.InputStream stream = clazz.getResourceAsStream ( "HelloWorld.txt" ) ; assertNotNull ( stream ) ; byte [ ] buffer = new byte [ 20 ] ; int length = stream.read ( buffer ) ; java.lang.String s = new java.lang.String ( buffer , 0 , length ) ; assertEquals ( "Hello, World.\n" , s ) ; stream.close ( ) ; }
public void testContainsAll ( ) { java.util.Collection full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; assertTrue ( full.containsAll ( java.util.Arrays.asList ( ) ) ) ; assertTrue ( full.containsAll ( java.util.Arrays.asList ( one ) ) ) ; assertTrue ( full.containsAll ( java.util.Arrays.asList ( one , two ) ) ) ; assertFalse ( full.containsAll ( java.util.Arrays.asList ( one , two , six ) ) ) ; assertFalse ( full.containsAll ( java.util.Arrays.asList ( six ) ) ) ; }
public void clearView ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearView ( ) ; } } ) ; return ; } mAwContents.clearView ( ) ; }
public java.lang.String getMainDexList ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( java.lang.String classDescriptor : toKeep ) { sb.append ( classDescriptor ) ; sb.append ( com.android.multidex.ClassReferenceListBuilder.CLASS_EXTENSION ) ; sb.append ( com.android.multidex.ClassReferenceListBuilder.EOL ) ; } return sb.toString ( ) ; }
public static boolean hasValidGenericSignature ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn ) { if ( ( cn.signature ) != null ) { try { new com.android.jill.signature.GenericSignatureParser < java.lang.Object > ( com.android.jill.frontend.java.AsmHelper.DummyAction.INSTANCE ) . parseClassSignature ( cn.signature ) ; return true ; } catch ( java.lang.reflect.GenericSignatureFormatError e ) { } } return false ; }
public void onDeregistered ( android.telephony.ims.ImsReasonInfo imsReasonInfo ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "onImsDisconnected imsReasonInfo=" + imsReasonInfo ) ) ; resetImsCapabilities ( ) ; mPhone.setServiceState ( ServiceState.STATE_OUT_OF_SERVICE ) ; mPhone.setImsRegistered ( false ) ; mPhone.processDisconnectReason ( imsReasonInfo ) ; mMetrics.writeOnImsConnectionState ( mPhone.getPhoneId ( ) , ImsConnectionState.State.DISCONNECTED , imsReasonInfo ) ; }
private void notifyReady ( ) throws com.android.ims.ImsException { com.android.ims.ImsManager manager ; synchronized ( mLock ) { manager = mImsManager ; } try { mListener.connectionReady ( manager ) ; } catch ( com.android.ims.ImsException e ) { android.util.Log.w ( com.android.ims.ImsManager.TAG , ( "Connector: notifyReady exception: " + ( e.getMessage ( ) ) ) ) ; throw e ; } synchronized ( mLock ) { mRetryCount = 0 ; } }
private void addNightModeToBundles ( java.util.List < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > addConfig ) { java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > list = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > ( ) ; for ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle bundle : addConfig ) { int index = 0 ; for ( com.android.resources.NightMode mode : com.android.resources.NightMode.values ( ) ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle b = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle ( bundle ) ; b.config.setNightModeQualifier ( new com.android.ide.eclipse.adt.internal.resources.configurations.NightModeQualifier ( mode ) ) ; b.nightModeIndex = index ++ ; list.add ( b ) ; } } addConfig.clear ( ) ; addConfig.addAll ( list ) ; }
public void parseBufferWithDefaultTestData ( ) throws java.lang.Exception { byte [ ] data = getDefaultTestData ( ) ; com.android.server.wifi.hotspot2.anqp.I18Name actualName = com.android.server.wifi.hotspot2.anqp.I18Name.parse ( getTestBuffer ( data , data.length ) ) ; com.android.server.wifi.hotspot2.anqp.I18Name expectedName = new com.android.server.wifi.hotspot2.anqp.I18Name ( com.android.server.wifi.hotspot2.anqp.I18NameTest.TEST_LANGUAGE , com.android.server.wifi.hotspot2.anqp.I18NameTest.TEST_LOCALE , com.android.server.wifi.hotspot2.anqp.I18NameTest.TEST_TEXT ) ; org.junit.Assert.assertEquals ( expectedName , actualName ) ; }
public void run ( ) { int origX = mWebView.getScrollX ( ) ; int origY = mWebView.getScrollY ( ) ; int half = dimension / 2 ; android.graphics.Rect rect = new android.graphics.Rect ( half , half , ( half + 1 ) , ( half + 1 ) ) ; assertTrue ( mWebView.requestChildRectangleOnScreen ( mWebView , rect , true ) ) ; assertTrue ( ( ( mWebView.getScrollX ( ) ) > origX ) ) ; assertTrue ( ( ( mWebView.getScrollY ( ) ) > origY ) ) ; }
public java.lang.String getTitle ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.String ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.String > ( ) { @ java.lang.Override public java.lang.String call ( ) { return getTitle ( ) ; } } ) ; return ret ; } return mAwContents.getTitle ( ) ; }
private static java.io.File getInArgumentPath ( java.lang.String filename ) { java.io.File file = new java.io.File ( filename ) ; if ( ! ( file.isAbsolute ( ) ) ) { java.io.File workDir = com.android.tools.lint.Main.getLintWorkDir ( ) ; if ( workDir != null ) { java.io.File file2 = new java.io.File ( workDir , filename ) ; if ( file2.exists ( ) ) { try { file = file2.getCanonicalFile ( ) ; } catch ( java.io.IOException e ) { file = file2 ; } } } } return file ; }
public com.android.ide.common.rendering.api.ResourceValue getResourceValue ( com.android.resources.ResourceType type , com.android.ide.common.resources.configuration.FolderConfiguration referenceConfig , boolean isFramework ) { com.android.ide.common.resources.ResourceFile match = ( ( com.android.ide.common.resources.ResourceFile ) ( referenceConfig.findMatchingConfigurable ( mFiles ) ) ) ; if ( match != null ) { return match.getValue ( type , mName ) ; } return null ; }
public void testAesCbcHmacSha256Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , android.net.cts.IpSecManagerTest.getKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public void testGetMaxExpansion ( ) { java.lang.String text = "cha" ; java.text.RuleBasedCollator rbColl = ( ( java.text.RuleBasedCollator ) ( java.text.Collator.getInstance ( java.util.Locale.forLanguageTag ( "es-u-co-trad" ) ) ) ) ; java.text.CollationElementIterator iterator = rbColl.getCollationElementIterator ( text ) ; int order = iterator.next ( ) ; while ( order != ( java.text.CollationElementIterator.NULLORDER ) ) { assertEquals ( 1 , iterator.getMaxExpansion ( order ) ) ; order = iterator.next ( ) ; } }
private void onHandshake ( byte [ ] address , int status ) { if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "onHandshake: status=" + status ) ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_ON_HANDSHAKE ) ; msg.obj = address ; msg.arg1 = status ; mHandler.sendMessage ( msg ) ; }
public void startImmediately ( boolean clearStoredLineupId ) { startInternal ( true ) ; if ( mStarted ) { if ( clearStoredLineupId ) { if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , ( "Clear stored lineup id: " + ( mLineupId ) ) ) ; setLastLineupId ( null ) ; } if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , "Starting fetcher immediately" ) ; postFetchRequest ( true , 0 ) ; } }
public android.net.IpSecTransform.Builder setSpi ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecManager.SecurityParameterIndex spi ) { if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setSpiResourceId ( direction , spi.getResourceId ( ) ) ; return this ; }
public void testE3 ( ) { loadAndRun ( "dot.junit.opcodes.aget_short.d.T_aget_short_1" , java.lang.ArrayIndexOutOfBoundsException.class , new short [ 2 ] , ( - 1 ) ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JConstructor x ) { if ( x.isPrivate ( ) ) { print ( com.android.jack.ir.impl.CHARS_PRIVATE ) ; } else { print ( com.android.jack.ir.impl.CHARS_PUBLIC ) ; } printName ( x ) ; printParameterList ( x ) ; return false ; }
public java.util.Set < java.lang.String > keySet ( ) { if ( ( keyset ) != null ) { return keyset ; } java.util.Set < java.lang.String > ks = createSet ( ) ; ks.addAll ( handleKeySet ( ) ) ; if ( ( parent ) != null ) { ks.addAll ( parent.keySet ( ) ) ; } synchronized ( this ) { if ( ( keyset ) == null ) { keyset = ks ; } } return keyset ; }
public void dexopt ( java.lang.String apkPath , int uid , @ android.annotation.Nullable java.lang.String pkgName , java.lang.String instructionSet , int dexoptNeeded , @ android.annotation.Nullable java.lang.String outputPath , int dexFlags , java.lang.String compilerFilter , @ android.annotation.Nullable java.lang.String volumeUuid , @ android.annotation.Nullable java.lang.String sharedLibraries ) throws com.android.internal.os.InstallerConnection.InstallerException { commands.add ( com.android.server.pm.OtaDexoptService.buildCommand ( "dexopt" , apkPath , uid , pkgName , instructionSet , dexoptNeeded , outputPath , dexFlags , compilerFilter , volumeUuid , sharedLibraries ) ) ; }
com.android.bluetooth.avrcp.Metadata getCurrentMetadata ( ) { if ( ( getActiveQueueID ( ) ) != ( - 1 ) ) { for ( com.android.bluetooth.avrcp.Metadata data : getCurrentQueue ( ) ) { if ( data.mediaId.equals ( ( ( Util.NOW_PLAYING_PREFIX ) + ( getActiveQueueID ( ) ) ) ) ) { d ( ( "getCurrentMetadata: Using playlist data: " + ( data.toString ( ) ) ) ) ; return data.clone ( ) ; } } } return com.android.bluetooth.avrcp.Util.toMetadata ( getMetadata ( ) ) ; }
public synchronized void setCarMode ( boolean isCarMode ) { android.telecom.Log.i ( this , ( ( ( "carmodechange: " + ( mIsCarMode ) ) + " => " ) + isCarMode ) ) ; if ( isCarMode != ( mIsCarMode ) ) { mIsCarMode = isCarMode ; com.android.server.telecom.InCallController.InCallServiceConnection newConnection = getCurrentConnection ( ) ; if ( newConnection != ( mCurrentConnection ) ) { if ( mIsConnected ) { mCurrentConnection.disconnect ( ) ; newConnection.connect ( null ) ; } mCurrentConnection = newConnection ; } } }
private boolean merge ( com.android.server.pm.dex.PackageDexUsage.DexUseInfo dexUseInfo ) { boolean oldIsUsedByOtherApps = mIsUsedByOtherApps ; mIsUsedByOtherApps = ( mIsUsedByOtherApps ) || ( dexUseInfo.mIsUsedByOtherApps ) ; boolean updateIsas = mLoaderIsas.addAll ( dexUseInfo.mLoaderIsas ) ; boolean updateLoadingPackages = mLoadingPackages.addAll ( dexUseInfo.mLoadingPackages ) ; return ( updateIsas || ( oldIsUsedByOtherApps != ( mIsUsedByOtherApps ) ) ) || updateLoadingPackages ; }
public java.util.Collection < com.android.builder.model.JavaLibrary > getJavaLibraries ( ) { java.util.Set < java.io.File > files = configuration.getFiles ( ) ; if ( files.isEmpty ( ) ) { return java.util.Collections.emptySet ( ) ; } java.util.Set < com.android.builder.model.JavaLibrary > javaLibraries = com.beust.jcommander.internal.Sets.newHashSet ( ) ; for ( java.io.File file : files ) { javaLibraries.add ( new com.android.build.gradle.internal.model.JavaLibraryImpl ( file ) ) ; } return javaLibraries ; }
public void testOpenLink_NoLinkFound ( ) { expectedException.expect ( android.support.test.espresso.PerformException.class ) ; expectedException.expectCause ( new org.hamcrest.CustomTypeSafeMatcher < java.lang.Throwable > ( "message contains has-links=false" ) { @ java.lang.Override protected boolean matchesSafely ( java.lang.Throwable throwable ) { return throwable.getMessage ( ) . contains ( "bacon" ) ; } } ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.spanned ) ) . perform ( android.support.test.espresso.action.ViewActions.scrollTo ( ) , android.support.test.espresso.action.ViewActions.openLinkWithText ( "bacon" ) ) ; }
public static java.security.Signature getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { if ( algorithm == null ) { throw new java.lang.NullPointerException ( "algorithm == null" ) ; } if ( provider == null ) { throw new java.lang.IllegalArgumentException ( "provider == null" ) ; } return java.security.Signature.getSignatureInstance ( algorithm , provider ) ; }
public void cdmaOtaProvisionStatus ( int indicationType , int status ) { mRil.processIndication ( indicationType ) ; int [ ] response = new int [ 1 ] ; response [ 0 ] = status ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_CDMA_OTA_PROVISION_STATUS , response ) ; mRil.mOtaProvisionRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
protected byte [ ] engineDoFinal ( ) { try { ensureKeystoreOperationInitialized ( ) ; } catch ( java.security.InvalidKeyException e ) { throw new java.lang.IllegalStateException ( "Failed to reinitialize MAC" , e ) ; } byte [ ] result ; try { result = mChunkedStreamer.doFinal ( null , 0 , 0 ) ; } catch ( android.security.KeyStoreException e ) { throw new java.lang.IllegalStateException ( "Keystore operation failed" , e ) ; } resetWhilePreservingInitState ( ) ; return result ; }
public long getInclusiveTime ( com.android.tools.perflib.vmtrace.ClockType clockType , java.util.concurrent.TimeUnit units ) { long inclusiveTime = ( clockType == ( ClockType.THREAD ) ) ? com.google.common.primitives.UnsignedInts.toLong ( ( ( mExitThreadTime ) - ( mEntryThreadTime ) ) ) : com.google.common.primitives.UnsignedInts.toLong ( ( ( mExitGlobalTime ) - ( mEntryGlobalTime ) ) ) ; return units.convert ( inclusiveTime , com.android.tools.perflib.vmtrace.VmTraceData.getDefaultTimeUnits ( ) ) ; }
public void testParametere002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( PARAMETER002 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.LegacyBasedToolchain.class ) . addProperty ( ParameterMetadataAnnotationsAdder.PARAMETER_ANNOTATION.getName ( ) , "true" ) . setWithDebugInfos ( true ) . compileAndRunTest ( ) ; }
public static void checkClientTrusted ( javax.net.ssl.X509TrustManager tm , java.security.cert.X509Certificate [ ] chain , java.lang.String authType , org.conscrypt.OpenSSLSocketImpl socket ) throws java.security.cert.CertificateException { if ( tm instanceof javax.net.ssl.X509ExtendedTrustManager ) { javax.net.ssl.X509ExtendedTrustManager x509etm = ( ( javax.net.ssl.X509ExtendedTrustManager ) ( tm ) ) ; x509etm.checkClientTrusted ( chain , authType , socket ) ; } else { tm.checkClientTrusted ( chain , authType ) ; } }
private static void checkSelectorPresence ( com.android.manifmerger.MergingReport.Builder mergingReport , com.android.manifmerger.XmlElement element ) { org.w3c.dom.Attr selectorAttribute = element.getXml ( ) . getAttributeNodeNS ( SdkConstants.TOOLS_URI , Selector.SELECTOR_LOCAL_NAME ) ; if ( ( selectorAttribute != null ) && ( ! ( element.supportsSelector ( ) ) ) ) { java.lang.String message = java.lang.String.format ( "Unsupported tools:selector=\"%1$s\" found on node %2$s at %3$s" , selectorAttribute.getValue ( ) , element.getId ( ) , element.printPosition ( ) ) ; element.addMessage ( mergingReport , Severity.ERROR , message ) ; } }
public void testConnectFailureDueToNetworkSaveException ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; setupMocksForConnectSequence ( true ) ; org.mockito.Mockito.doThrow ( new java.lang.IllegalArgumentException ( "Some error!!!" ) ) . when ( mSupplicantStaNetworkMock ) . saveWifiConfiguration ( org.mockito.Matchers.any ( android.net.wifi.WifiConfiguration.class ) ) ; assertFalse ( mDut.connectToNetwork ( new android.net.wifi.WifiConfiguration ( ) , false ) ) ; org.mockito.Mockito.verify ( mISupplicantStaIfaceMock , org.mockito.Mockito.times ( 2 ) ) . removeNetwork ( org.mockito.Matchers.anyInt ( ) ) ; }
boolean implementsInterface ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JInterface jinterface ) { for ( com.android.jack.ir.ast.JInterface interf : getImplements ( ) ) { if ( interf.isSameType ( jinterface ) ) { return true ; } else if ( interf instanceof com.android.jack.ir.ast.JDefinedInterface ) { if ( ( ( com.android.jack.ir.ast.JDefinedInterface ) ( interf ) ) . implementsInterface ( jinterface ) ) { return true ; } } } return false ; }
public void testCompileNonConflictingSourceAndImport ( ) throws java.lang.Exception { java.io.File jackOut = com.android.jack.TestTools.createTempDir ( "importtest" , "dir" ) ; com.android.jack.Options options = com.android.jack.TestTools.buildCommandLineArgs ( com.android.jack.TestTools.getJackTestsWithJackFolder ( "fibonacci" ) ) ; options.libraryOutDir = jackOut ; com.android.jack.TestTools.runCompilation ( options ) ; com.android.jack.Options importOptions = com.android.jack.TestTools.buildCommandLineArgs ( com.android.jack.TestTools.getJackTestsWithJackFolder ( "threeaddress" ) ) ; importOptions.jayceImport.add ( jackOut ) ; com.android.jack.TestTools.runCompilation ( importOptions ) ; }
private void done ( boolean success ) { if ( com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG ) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd ( java.lang.String.format ( "Result success %b for %s" , success , ( ( mUrl ) != null ? mUrl.toString ( ) : "null" ) ) ) ; if ( success ) { com.android.carrierdefaultapp.CarrierActionUtils.applyCarrierAction ( CarrierActionUtils.CARRIER_ACTION_ENABLE_RADIO , getIntent ( ) , getApplicationContext ( ) ) ; com.android.carrierdefaultapp.CarrierActionUtils.applyCarrierAction ( CarrierActionUtils.CARRIER_ACTION_ENABLE_METERED_APNS , getIntent ( ) , getApplicationContext ( ) ) ; com.android.carrierdefaultapp.CarrierActionUtils.applyCarrierAction ( CarrierActionUtils.CARRIER_ACTION_CANCEL_ALL_NOTIFICATIONS , getIntent ( ) , getApplicationContext ( ) ) ; } finishAndRemoveTask ( ) ; }
public synchronized int setProvisionedValue ( int item , int value ) throws android.os.RemoteException { mProvisionedIntValue.remove ( item ) ; int retVal = getImsConfigImpl ( ) . setProvisionedValue ( item , value ) ; if ( retVal == ( ImsConfig.OperationStatusConstants.SUCCESS ) ) { updateCachedValue ( item , value , true ) ; } else { android.util.Log.d ( android.telephony.ims.compat.stub.ImsConfigImplBase.TAG , ( ( ( ( ( "Set provision value of " + item ) + " to " ) + value ) + " failed with error code " ) + retVal ) ) ; } return retVal ; }
public void testCheckReadPhoneNumber_hasReadSms ( ) { org.mockito.Mockito.doNothing ( ) . when ( mMockContext ) . enforcePermission ( android.Manifest.permission.READ_SMS , com.android.internal.telephony.TelephonyPermissionsTest.PID , com.android.internal.telephony.TelephonyPermissionsTest.UID , com.android.internal.telephony.TelephonyPermissionsTest.MSG ) ; org.mockito.Mockito.when ( mMockAppOps.noteOp ( AppOpsManager.OP_READ_SMS , com.android.internal.telephony.TelephonyPermissionsTest.UID , com.android.internal.telephony.TelephonyPermissionsTest.PACKAGE ) ) . thenReturn ( AppOpsManager.MODE_ALLOWED ) ; org.junit.Assert.assertTrue ( com.android.internal.telephony.TelephonyPermissions.checkReadPhoneNumber ( mMockContext , ( ) -> mMockTelephony , com.android.internal.telephony.TelephonyPermissionsTest.SUB_ID , com.android.internal.telephony.TelephonyPermissionsTest.PID , com.android.internal.telephony.TelephonyPermissionsTest.UID , com.android.internal.telephony.TelephonyPermissionsTest.PACKAGE , com.android.internal.telephony.TelephonyPermissionsTest.MSG ) ) ; }
public void testKeyStore_Aliases_Encrypted_Success ( ) throws java.lang.Exception { setupPassword ( ) ; mKeyStore.load ( null , null ) ; assertAliases ( new java.lang.String [ ] { } ) ; assertTrue ( mAndroidKeyStore.generate ( ( ( Credentials.USER_PRIVATE_KEY ) + ( android.security.AndroidKeyStoreTest.TEST_ALIAS_1 ) ) ) ) ; assertAliases ( new java.lang.String [ ] { android.security.AndroidKeyStoreTest.TEST_ALIAS_1 } ) ; assertTrue ( mAndroidKeyStore.put ( ( ( Credentials.CA_CERTIFICATE ) + ( android.security.AndroidKeyStoreTest.TEST_ALIAS_2 ) ) , android.security.AndroidKeyStoreTest.FAKE_CA_1 ) ) ; assertAliases ( new java.lang.String [ ] { android.security.AndroidKeyStoreTest.TEST_ALIAS_1 , android.security.AndroidKeyStoreTest.TEST_ALIAS_2 } ) ; }
public static com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type valueOf ( int value ) { switch ( value ) { case 1 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.VOID ; case 2 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.CHAR ; case 3 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.BYTE ; case 4 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.INT ; case 5 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.FLOAT ; case 6 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.BOOL ; case 7 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.ENUM ; case 8 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.INT64 ; default : return null ; } }
protected com.android.sdkuilib.internal.repository.core.PackageLoader getPackageLoader ( boolean useLocalCache ) { com.android.sdklib.internal.repository.DownloadCache dc = mSwtUpdaterData.getDownloadCache ( ) ; assert dc instanceof com.android.sdkuilib.internal.repository.MockDownloadCache ; if ( dc instanceof com.android.sdkuilib.internal.repository.MockDownloadCache ) { ( ( com.android.sdkuilib.internal.repository.MockDownloadCache ) ( dc ) ) . overrideStrategy ( ( useLocalCache ? com.android.sdklib.internal.repository.DownloadCache.Strategy.ONLY_CACHE : null ) ) ; } return mSwtUpdaterData.getPackageLoader ( ) ; }
public void onServiceConnected ( int profile , android.bluetooth.BluetoothProfile proxy ) { synchronized ( this ) { switch ( profile ) { case android.bluetooth.BluetoothProfile.A2DP : mA2dp = ( ( android.bluetooth.BluetoothA2dp ) ( proxy ) ) ; break ; case android.bluetooth.BluetoothProfile.HEADSET : mHeadset = ( ( android.bluetooth.BluetoothHeadset ) ( proxy ) ) ; break ; case android.bluetooth.BluetoothProfile.HID_HOST : mInput = ( ( android.bluetooth.BluetoothHidHost ) ( proxy ) ) ; break ; case android.bluetooth.BluetoothProfile.PAN : mPan = ( ( android.bluetooth.BluetoothPan ) ( proxy ) ) ; break ; } } }
public java.lang.String getShortDescription ( ) { boolean isDefaultTag = SystemImage.DEFAULT_TAG.equals ( mTag ) ; return java.lang.String.format ( "%1$s%2$s System Image, Android API %3$s, revision %4$s%5$s" , ( isDefaultTag ? "" : ( mTag.getDisplay ( ) ) + " " ) , getAbiDisplayName ( ) , mVersion.getApiString ( ) , getRevision ( ) . toShortString ( ) , ( isObsolete ( ) ? " (Obsolete)" : "" ) ) ; }
public com.android.jack.test.toolchain.JackBasedToolchain setSourceLevel ( @ javax.annotation.Nonnull com.android.jack.test.toolchain.SourceLevel sourceLevel ) { super . setSourceLevel ( sourceLevel ) ; switch ( sourceLevel ) { case JAVA_6 : addProperty ( "jack.java.source.version" , "1.6" ) ; break ; case JAVA_7 : addProperty ( "jack.java.source.version" , "1.7" ) ; break ; case JAVA_8 : addProperty ( "jack.java.source.version" , "1.8" ) ; break ; default : throw new java.lang.AssertionError ( ( ( "Unkown level: '" + ( sourceLevel.toString ( ) ) ) + "'" ) ) ; } return this ; }
public void createTest ( com.android.rs.image2.Resources res ) { mScript = new com.android.rs.image2.ScriptC_wbalance ( mRS ) ; mHist = android.support.v8.renderscript.ScriptIntrinsicHistogram.create ( mRS , android.support.v8.renderscript.Element.U8_4 ( mRS ) ) ; mSums = android.support.v8.renderscript.Allocation.createSized ( mRS , android.support.v8.renderscript.Element.I32_4 ( mRS ) , 256 ) ; mHist.setOutput ( mSums ) ; mScript.set_histogramValues ( mSums ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object element ) { if ( com.google.common.collect.Collections2.safeContains ( unfiltered , element ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E e = ( ( E ) ( element ) ) ; return predicate.apply ( e ) ; } return false ; }
public java.net.Socket accept ( ) throws java.io.IOException { if ( ! ( sslParameters.getUseClientMode ( ) ) ) { checkEnabledCipherSuites ( ) ; } org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl socket = new org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ( sslParameters , enabledProtocols.clone ( ) , enabledCipherSuites.clone ( ) ) ; socket.setChannelIdEnabled ( channelIdEnabled ) ; implAccept ( socket ) ; return socket ; }
private void addDockModeToBundles ( java.util.List < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > addConfig ) { java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > list = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > ( ) ; for ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle bundle : addConfig ) { int index = 0 ; for ( com.android.resources.UiMode mode : com.android.resources.UiMode.values ( ) ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle b = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle ( bundle ) ; b.config.setUiModeQualifier ( new com.android.ide.common.resources.configuration.UiModeQualifier ( mode ) ) ; b.dockModeIndex = index ++ ; list.add ( b ) ; } } addConfig.clear ( ) ; addConfig.addAll ( list ) ; }
public void testStateTransition_DisconnectedToConnecting_StackConnected ( ) { mHeadsetStateMachine.sendMessage ( HeadsetStateMachine.STACK_EVENT , new com.android.bluetooth.hfp.HeadsetStackEvent ( HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED , HeadsetHalConstants.CONNECTION_STATE_CONNECTED , mTestDevice ) ) ; verify ( mHeadsetService , timeout ( com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS ) ) . sendBroadcastAsUser ( mIntentArgument.capture ( ) , eq ( UserHandle.ALL ) , eq ( HeadsetService.BLUETOOTH_PERM ) ) ; com.android.bluetooth.hfp.HeadsetTestUtils.verifyConnectionStateBroadcast ( mTestDevice , BluetoothProfile.STATE_CONNECTING , BluetoothProfile.STATE_DISCONNECTED , mIntentArgument.getValue ( ) ) ; org.junit.Assert.assertThat ( mHeadsetStateMachine.getCurrentState ( ) , org.hamcrest.core.IsInstanceOf.instanceOf ( HeadsetStateMachine.Connecting.class ) ) ; }
void setUp ( ) { mNm.setInterruptionFilter ( NotificationManager.INTERRUPTION_FILTER_PRIORITY ) ; android.app.NotificationManager.Policy policy = mNm.getNotificationPolicy ( ) ; policy = new android.app.NotificationManager.Policy ( ( ( policy.priorityCategories ) | ( NotificationManager.Policy.PRIORITY_CATEGORY_MESSAGES ) ) , policy.priorityCallSenders , NotificationManager.Policy.PRIORITY_SENDERS_STARRED ) ; mNm.setNotificationPolicy ( policy ) ; createChannels ( ) ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , false ) ; status = READY ; }
public void testCheckAccessLevel_hasReadHistoryPermission ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( true ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( true ) ; org.junit.Assert.assertEquals ( NetworkStatsAccess.Level.DEVICESUMMARY , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public static java.lang.String getUsernameFromUriNumber ( java.lang.String number ) { int delimiterIndex = number.indexOf ( '@' ) ; if ( delimiterIndex < 0 ) { delimiterIndex = number.indexOf ( "%40" ) ; } if ( delimiterIndex < 0 ) { android.telephony.Rlog.w ( android.telephony.PhoneNumberUtils.LOG_TAG , ( ( "getUsernameFromUriNumber: no delimiter found in SIP addr '" + number ) + "'" ) ) ; delimiterIndex = number.length ( ) ; } return number.substring ( 0 , delimiterIndex ) ; }
private void removeTasksByPackageNameLocked ( java.lang.String packageName , int userId ) { for ( int i = ( mRecentTasks.size ( ) ) - 1 ; i >= 0 ; i -- ) { com.android.server.am.TaskRecord tr = mRecentTasks.get ( i ) ; if ( ( tr.userId ) != userId ) continue ; android.content.ComponentName cn = tr.intent.getComponent ( ) ; if ( ( cn != null ) && ( cn.getPackageName ( ) . equals ( packageName ) ) ) { removeTaskByIdLocked ( tr.taskId , true ) ; } } }
private static com.ibm.icu.text.CompactDecimalDataCache.DataBundle createEmpty ( ) { return new com.ibm.icu.text.CompactDecimalDataCache.DataBundle ( new com.ibm.icu.text.CompactDecimalDataCache.Data ( new long [ com.ibm.icu.text.CompactDecimalDataCache.MAX_DIGITS ] , new java.util.HashMap < java.lang.String , com.ibm.icu.text.DecimalFormat [ ] > ( ) ) , new com.ibm.icu.text.CompactDecimalDataCache.Data ( new long [ com.ibm.icu.text.CompactDecimalDataCache.MAX_DIGITS ] , new java.util.HashMap < java.lang.String , com.ibm.icu.text.DecimalFormat [ ] > ( ) ) , new com.ibm.icu.text.CompactDecimalDataCache.Data ( new long [ com.ibm.icu.text.CompactDecimalDataCache.MAX_DIGITS ] , new java.util.HashMap < java.lang.String , com.ibm.icu.text.DecimalFormat [ ] > ( ) ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [ ] pkgs = intent.getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { synchronized ( this ) { if ( forceStopPackageLocked ( pkg , ( - 1 ) , false , false , false , false ) ) { setResultCode ( Activity.RESULT_OK ) ; return ; } } } } }
public boolean isRoot ( ) { if ( ( ( ( ( mParent ) != null ) && ( mParent.mName.endsWith ( com.android.ide.common.layout.LayoutConstants.GESTURE_OVERLAY_VIEW ) ) ) && ( mParent.isRoot ( ) ) ) && ( ( mParent.mChildren.size ( ) ) == 1 ) ) { return true ; } return ( ( ( mUiViewNode ) == null ) || ( ( mUiViewNode.getUiParent ( ) ) == null ) ) || ( ( mUiViewNode.getUiParent ( ) . getUiParent ( ) ) == null ) ; }
private void reliableWrite ( ) { mBluetoothGatt.beginReliableWrite ( ) ; sleep ( 1000 ) ; mBluetoothGatt.abortReliableWrite ( ) ; sleep ( 2000 ) ; mBluetoothGatt.beginReliableWrite ( ) ; sleep ( 1000 ) ; if ( com.android.cts.verifier.bluetooth.BleClientService.BLE_CLIENT_ACTION_RELIABLE_WRITE.equals ( mCurrentAction ) ) { mExecReliableWrite = com.android.cts.verifier.bluetooth.BleClientService.ReliableWriteState.RELIABLE_WRITE_WRITE_1ST_DATA ; writeCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.CHARACTERISTIC_UUID , com.android.cts.verifier.bluetooth.BleClientService.WRITE_VALUE_507BYTES_FOR_RELIABLE_WRITE ) ; } else { mExecReliableWrite = com.android.cts.verifier.bluetooth.BleClientService.ReliableWriteState.RELIABLE_WRITE_BAD_RESP ; writeCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.CHARACTERISTIC_UUID , com.android.cts.verifier.bluetooth.BleClientService.WRITE_VALUE_BAD_RESP ) ; } }
public com.android.ide.common.api.Margins getInsets ( java.lang.String fqcn ) { if ( com.android.ide.eclipse.adt.internal.editors.layout.gre.ViewMetadataRepository.INSETS_SUPPORTED ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite configComposite = mEditorDelegate.getGraphicalEditor ( ) . getConfigurationComposite ( ) ; java.lang.String theme = configComposite.getThemeName ( ) ; com.android.resources.Density density = configComposite.getDensity ( ) ; return com.android.ide.eclipse.adt.internal.editors.layout.gre.ViewMetadataRepository.getInsets ( fqcn , density , theme ) ; } else { return null ; } }
private void onCreateImsFeatureInternal ( int slotId , int featureType , com.android.ims.internal.IImsFeatureStatusCallback c ) { android.util.SparseArray < android.telephony.ims.feature.ImsFeature > featureMap = mFeatures.get ( slotId ) ; if ( featureMap == null ) { featureMap = new android.util.SparseArray ( ) ; mFeatures.put ( slotId , featureMap ) ; } android.telephony.ims.feature.ImsFeature f = makeImsFeature ( slotId , featureType ) ; if ( f != null ) { f.setContext ( this ) ; f.setSlotId ( slotId ) ; f.setImsFeatureStatusCallback ( c ) ; featureMap.put ( featureType , f ) ; } }
protected boolean engineVerify ( byte [ ] sigBytes ) throws java.security.SignatureException { if ( ( key ) == null ) { throw new java.security.SignatureException ( "Need RSA or EC public key" ) ; } try { int result = org.conscrypt.NativeCrypto.EVP_VerifyFinal ( ctx , sigBytes , 0 , sigBytes.length , key.getNativeRef ( ) ) ; return result == 1 ; } catch ( java.lang.Exception ex ) { throw new java.security.SignatureException ( ex ) ; } finally { resetContext ( ) ; } }
public static void assertNotEquals ( java.lang.String message , float unexpected , float actual , float delta ) { if ( ! ( org.junit.Assert.floatIsDifferent ( unexpected , actual , delta ) ) ) { org.junit.Assert.failEquals ( message , java.lang.Float.valueOf ( actual ) ) ; } }
public void sendStartListenerMessage ( int masId ) { if ( ( ( mSessionStatusHandler ) != null ) && ( ! ( mSessionStatusHandler.hasMessages ( com.android.bluetooth.map.BluetoothMapService.START_LISTENER ) ) ) ) { android.os.Message msg = mSessionStatusHandler.obtainMessage ( com.android.bluetooth.map.BluetoothMapService.START_LISTENER , masId , 0 ) ; mSessionStatusHandler.sendMessageDelayed ( msg , 20 ) ; } else if ( ( mSessionStatusHandler ) != null ) { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) android.util.Log.w ( com.android.bluetooth.map.BluetoothMapService.TAG , "mSessionStatusHandler START_LISTENER message already in Queue" ) ; } }
public void canRemoveNetworkConfigWhenWifiDisabed ( ) { boolean result ; when ( mWifiConfigManager.removeNetwork ( eq ( 0 ) , anyInt ( ) ) ) . thenReturn ( true ) ; mLooper.startAutoDispatch ( ) ; result = mWsm.syncRemoveNetwork ( mWsmAsyncChannel , 0 ) ; mLooper.stopAutoDispatch ( ) ; org.junit.Assert.assertTrue ( result ) ; verify ( mWifiConfigManager ) . removeNetwork ( anyInt ( ) , anyInt ( ) ) ; }
public void run ( ) { mTelephonyManager.listen ( mPhoneStateListener , PhoneStateListener.LISTEN_NONE ) ; unregisteredLatch.countDown ( ) ; }
static java.lang.String retrieveAlphaId ( com.android.internal.telephony.cat.ComprehensionTlv ctlv ) throws com.android.internal.telephony.cat.ResultException { if ( ctlv != null ) { byte [ ] rawValue = ctlv.getRawValue ( ) ; int valueIndex = ctlv.getValueIndex ( ) ; int length = ctlv.getLength ( ) ; if ( length != 0 ) { try { return com.android.internal.telephony.uicc.IccUtils.adnStringFieldToString ( rawValue , valueIndex , length ) ; } catch ( java.lang.IndexOutOfBoundsException e ) { throw new com.android.internal.telephony.cat.ResultException ( ResultCode.CMD_DATA_NOT_UNDERSTOOD ) ; } } else { return CatService.STK_DEFAULT ; } } else { return CatService.STK_DEFAULT ; } }
private void compileJava7Test ( @ javax.annotation.Nonnull java.lang.String name ) throws java.lang.Exception { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . addToClasspath ( toolchain.getDefaultBootClasspath ( ) ) . srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false , com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( ( ( "com.android.jack.java7.switches." + name ) + ".jack" ) ) ) ; }
public void clearCache ( final boolean includeDiskFiles ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearCache ( includeDiskFiles ) ; } } ) ; return ; } mAwContents.clearCache ( includeDiskFiles ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { final java.lang.String action = intent.getAction ( ) ; if ( ( ( ( Intent.ACTION_TIME_TICK.equals ( action ) ) || ( Intent.ACTION_TIME_CHANGED.equals ( action ) ) ) || ( Intent.ACTION_TIMEZONE_CHANGED.equals ( action ) ) ) || ( Intent.ACTION_LOCALE_CHANGED.equals ( action ) ) ) { updateClock ( ) ; } }
public void setRttMode ( java.lang.String callId , int mode ) { try { android.telecom.Log.startSession ( "ICA.sRM" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void testSortBySource_Reload ( ) { com.android.sdklib.internal.repository.sources.SdkSource src1 = new com.android.sdklib.internal.repository.sources.SdkRepoSource ( "http://example.com/url" , "repo1" ) ; m.updateStart ( ) ; assertTrue ( m.updateSourcePackages ( false , null , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.packages.MockEmptyPackage ( src1 , "type1" , 1 ) } ) ) ; assertTrue ( m.updateSourcePackages ( false , src1 , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.packages.MockEmptyPackage ( src1 , "type1" , 2 ) } ) ) ; assertTrue ( m.updateEnd ( false ) ) ; assertEquals ( ( "PkgCategorySource <source=repo1 (example.com), #items=1>\n" + "-- <INSTALLED, pkg:MockEmptyPackage \'type1\' rev=1, updated by:MockEmptyPackage \'type1\' rev=2>\n" ) , getTree ( m , false ) ) ; m.updateStart ( ) ; assertFalse ( m.updateSourcePackages ( false , null , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.packages.MockEmptyPackage ( src1 , "type1" , 1 ) } ) ) ; assertFalse ( m.updateSourcePackages ( false , src1 , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.packages.MockEmptyPackage ( src1 , "type1" , 2 ) } ) ) ; assertTrue ( m.updateEnd ( false ) ) ; assertEquals ( ( "PkgCategorySource <source=repo1 (example.com), #items=1>\n" + "-- <INSTALLED, pkg:MockEmptyPackage \'type1\' rev=1, updated by:MockEmptyPackage \'type1\' rev=2>\n" ) , getTree ( m , false ) ) ; }
private java.lang.String getMsvSuffix ( ) { try { java.lang.String msv = com.android.settings.DeviceInfoSettings.readLine ( com.android.settings.DeviceInfoSettings.FILENAME_MSV ) ; if ( ( java.lang.Long.parseLong ( msv , 16 ) ) == 0 ) { return " (ENGINEERING)" ; } } catch ( java.io.IOException ioe ) { } catch ( java.lang.NumberFormatException nfe ) { } return "" ; }
public java.lang.invoke.MethodHandle asSpreader ( java.lang.Class < ? > arrayType , int arrayLength ) { java.lang.invoke.MethodType postSpreadType = asSpreaderChecks ( arrayType , arrayLength ) ; final int targetParamCount = postSpreadType.parameterCount ( ) ; java.lang.invoke.MethodType dropArrayArgs = postSpreadType.dropParameterTypes ( ( targetParamCount - arrayLength ) , targetParamCount ) ; java.lang.invoke.MethodType adapterType = dropArrayArgs.appendParameterTypes ( arrayType ) ; return new java.lang.invoke.Transformers.Spreader ( this , adapterType , arrayLength ) ; }
void addExtraAttributes ( org.w3c.dom.Document document , org.w3c.dom.Node node , java.lang.String namespaceUri ) { com.android.ide.common.res2.NodeUtils.addAttribute ( document , node , namespaceUri , com.android.ide.common.res2.ResourceFile.ATTR_QUALIFIER , getQualifiers ( ) ) ; if ( ( getType ( ) ) == ( FileType.GENERATED_FILES ) ) { com.android.ide.common.res2.NodeUtils.addAttribute ( document , node , namespaceUri , SdkConstants.ATTR_PREPROCESSING , "true" ) ; } }
public final long getLong ( ) { int newPosition = ( position ) + ( libcore.io.SizeOf.LONG ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferUnderflowException ( ) ; } long result = this . block.peekLong ( ( ( offset ) + ( position ) ) , order ) ; position = newPosition ; return result ; }
public java.io.File findResource ( @ com.android.annotations.NonNull java.lang.String relativePath ) { java.io.File top = getSdkHome ( ) ; if ( top == null ) { throw new java.lang.IllegalArgumentException ( ( ( "Lint must be invoked with the System property " + ( com.android.tools.lint.client.api.LintClient.PROP_BIN_DIR ) ) + " pointing to the ANDROID_SDK tools directory" ) ) ; } java.io.File file = new java.io.File ( top , relativePath ) ; if ( file.exists ( ) ) { return file ; } else { return null ; } }
public void gattClientDisconnect ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "index" ) java.lang.Integer index ) throws java.lang.Exception { if ( ( mBluetoothGattList.get ( index ) ) != null ) { mBluetoothGattList.get ( index ) . disconnect ( ) ; } else { throw new java.lang.Exception ( ( "Invalid index input: " + index ) ) ; } }
public void testWithSingleUninstalledPackage ( ) { java.lang.String testPackageName = "test.package.name" ; android.webkit.WebViewProviderInfo [ ] webviewPackages = new android.webkit.WebViewProviderInfo [ ] { new android.webkit.WebViewProviderInfo ( testPackageName , "" , true , false , null ) } ; setupWithPackages ( webviewPackages , true , 1 ) ; mTestSystemImpl.setPackageInfo ( com.android.server.webkit.WebViewUpdateServiceTest.createPackageInfo ( testPackageName , true , true , false ) ) ; runWebViewBootPreparationOnMainSync ( ) ; checkPreparationPhasesForPackage ( testPackageName , 1 ) ; }
public void removeActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream ) { com.android.server.connectivity.tethering.IPv6TetheringCoordinator.stopIPv6TetheringOn ( downstream ) ; if ( mActiveDownstreams.remove ( findDownstream ( downstream ) ) ) { updateIPv6TetheringInterfaces ( ) ; } if ( mNotifyList.isEmpty ( ) ) { if ( ! ( mActiveDownstreams.isEmpty ( ) ) ) { android.util.Log.wtf ( com.android.server.connectivity.tethering.IPv6TetheringCoordinator.TAG , "Tethering notify list empty, IPv6 downstreams non-empty." ) ; } mNextSubnetId = 0 ; } }
public static final void check ( java.security.cert.X509Certificate [ ] chain ) throws java.security.cert.CertificateException { for ( java.security.cert.X509Certificate cert : chain ) { try { org.conscrypt.ChainStrengthAnalyzer.checkCert ( cert ) ; } catch ( java.security.cert.CertificateException e ) { throw new java.security.cert.CertificateException ( ( "Unacceptable certificate: " + ( cert.getSubjectX500Principal ( ) ) ) , e ) ; } } }
private static int getInterfaceIndex ( java.lang.String ifname ) { final java.net.NetworkInterface iface ; try { iface = java.net.NetworkInterface.getByName ( ifname ) ; } catch ( java.net.SocketException e ) { throw new java.lang.IllegalArgumentException ( ( ( "invalid interface '" + ifname ) + "': " ) , e ) ; } if ( iface == null ) { throw new java.lang.IllegalArgumentException ( ( "NetworkInterface was null for " + ifname ) ) ; } return iface.getIndex ( ) ; }
public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; when ( mWificond.createApInterface ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( null ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING , mWifiStateMachinePrime.getCurrentMode ( ) ) ; enterSoftApActiveMode ( ) ; }
private void cancelAllNotifications ( ) { if ( com.android.internal.telephony.ServiceStateTracker.DBG ) log ( "setNotification: cancelAllNotifications" ) ; android.app.NotificationManager notificationManager = ( ( android.app.NotificationManager ) ( mPhone.getContext ( ) . getSystemService ( Context.NOTIFICATION_SERVICE ) ) ) ; notificationManager.cancel ( com.android.internal.telephony.ServiceStateTracker.PS_NOTIFICATION ) ; notificationManager.cancel ( com.android.internal.telephony.ServiceStateTracker.CS_NOTIFICATION ) ; notificationManager.cancel ( com.android.internal.telephony.ServiceStateTracker.CS_REJECT_CAUSE_NOTIFICATION ) ; }
public static java.lang.String retrieveFieldValueName ( java.lang.String id , int field , int value , int style , java.util.Locale locale ) { return null ; }
public void onPageFinished ( android.webkit.WebView view , java.lang.String url ) { ( mPagesLoaded ) ++ ; getProgressBar ( ) . setVisibility ( View.INVISIBLE ) ; if ( ( mPagesLoaded ) == 1 ) { setWebViewProxy ( ) ; view.loadUrl ( mUrl.toString ( ) ) ; return ; } else if ( ( mPagesLoaded ) == 2 ) { view.requestFocus ( ) ; view.clearHistory ( ) ; } testForCaptivePortal ( ) ; }
private void logString ( java.lang.String value ) { logView.append ( ( ( ( ( new java.util.Date ( ) ) + " " ) + value ) + "\n" ) ) ; libcore.tzdata.update_test_app.installupdatetestapp.Layout layout = logView.getLayout ( ) ; if ( layout != null ) { int scrollAmount = ( layout.getLineTop ( logView.getLineCount ( ) ) ) - ( logView.getHeight ( ) ) ; logView.scrollTo ( 0 , scrollAmount ) ; } }
public void initTerminal ( com.intellij.openapi.project.Project project , com.intellij.openapi.wm.ToolWindow toolWindow ) { myProject = project ; org.jetbrains.plugins.terminal.LocalTerminalDirectRunner terminalRunner = org.jetbrains.plugins.terminal.OpenLocalTerminalAction.createTerminalRunner ( project ) ; toolWindow.setToHideOnEmptyContent ( true ) ; if ( terminalRunner != null ) { myTerminalWidget = terminalRunner.createTerminalWidget ( ) ; } com.intellij.ui.content.Content content = createToolWindowContentPanel ( terminalRunner , myTerminalWidget , toolWindow ) ; toolWindow.getContentManager ( ) . addContent ( content ) ; }
private static boolean match ( java.lang.CharSequence number , java.util.regex.Pattern pattern , boolean allowPrefixMatch ) { java.util.regex.Matcher matcher = pattern.matcher ( number ) ; if ( ! ( matcher.lookingAt ( ) ) ) { return false ; } else { return matcher.matches ( ) ? true : allowPrefixMatch ; } }
private com.android.jack.dx.rop.code.RegisterSpec getRegisterSpec ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { com.android.jack.dx.rop.code.RegisterSpec regSpec ; if ( expr instanceof com.android.jack.ir.ast.JVariableRef ) { regSpec = ropReg.getRegisterSpec ( ( ( com.android.jack.ir.ast.JVariableRef ) ( expr ) ) ) ; } else { assert expr instanceof com.android.jack.ir.ast.JValueLiteral ; regSpec = ropReg.getOrCreateTmpRegister ( com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( expr.getType ( ) ) ) ; buildConstant ( regSpec , ( ( com.android.jack.ir.ast.JValueLiteral ) ( expr ) ) ) ; } return regSpec ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; SameThread.doTest ( ) ; java.lang.System.out.println ( ) ; OtherThread.doTestOtherThreadWait ( ) ; java.lang.System.out.println ( ) ; OtherThread.doTestOtherThreadBusyLoop ( ) ; java.lang.System.out.println ( ) ; AllTraces.doTest ( ) ; java.lang.System.out.println ( ) ; ThreadListTraces.doTest ( ) ; java.lang.System.out.println ( "Done" ) ; }
private static void readZeroTerminated ( java.io.InputStream in , java.util.zip.CRC32 crc , boolean hcrc ) throws java.io.IOException { int result ; while ( ( result = in.read ( ) ) > 0 ) { if ( hcrc ) { crc.update ( result ) ; } } if ( result == ( - 1 ) ) { throw new java.io.EOFException ( ) ; } if ( hcrc ) { crc.update ( result ) ; } }
public java.util.List < android.telephony.ClientRequestStats > getClientRequestStats ( int subId ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getClientRequestStats ( getOpPackageName ( ) , subId ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#getClientRequestStats" , e ) ; } return null ; }
public int hashCode ( ) { com.android.calculator2.BoundedRational reduced = reduce ( ) . positiveDen ( ) ; return java.util.Objects.hash ( reduced.mNum , reduced.mDen ) ; }
public com.google.common.base.Optional < com.android.manifmerger.XmlDocument > merge ( com.android.manifmerger.XmlDocument lowerPriorityDocument , com.android.manifmerger.MergingReport.Builder mergingReportBuilder ) { mergingReportBuilder.getActionRecorder ( ) . recordDefaultNodeAction ( getRootNode ( ) ) ; getRootNode ( ) . mergeWithLowerPriorityNode ( lowerPriorityDocument.getRootNode ( ) , mergingReportBuilder ) ; addImplicitElements ( lowerPriorityDocument , mergingReportBuilder ) ; return mergingReportBuilder.hasErrors ( ) ? com.google.common.base.Optional.< com.android.manifmerger.XmlDocument > absent ( ) : com.google.common.base.Optional.of ( reparse ( ) ) ; }
public com.ibm.icu.util.IslamicCalendar.CalculationType getCalculationType ( ) { return cType ; }
public void close ( ) throws com.android.sched.util.file.CannotCloseOutputException { if ( ! ( closed ) ) { try { dumpToDir ( getRootDir ( ) , finalVFS.getRootDir ( ) ) ; finalVFS.close ( ) ; workVFS.close ( ) ; closed = true ; } catch ( com.android.sched.util.file.CannotCloseInputException | com.android.sched.util.file.CannotCloseOutputException | com.android.sched.util.file.CannotReadException | com.android.sched.util.file.CannotWriteException | com.android.sched.util.file.CannotCreateFileException | com.android.sched.util.file.WrongPermissionException e ) { throw new com.android.sched.util.file.CannotCloseOutputException ( this , e ) ; } } }
public java.lang.String toString ( ) { return ( ( ( "EAPMethod{mEAPMethodID=" + ( mEAPMethodID ) ) + " mAuthParams=" ) + ( mAuthParams ) ) + "}" ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( "arttest" ) ; JniTest.testFindClassOnAttachedNativeThread ( ) ; JniTest.testFindFieldOnAttachedNativeThread ( ) ; JniTest.testCallStaticVoidMethodOnSubClass ( ) ; JniTest.testGetMirandaMethod ( ) ; JniTest.testZeroLengthByteBuffers ( ) ; JniTest.testByteMethod ( ) ; JniTest.testShortMethod ( ) ; JniTest.testBooleanMethod ( ) ; JniTest.testCharMethod ( ) ; }
public void testNotifyPrimaryForeignUse ( ) { notifyDexLoad ( mFooUser0 , mBarUser0.getBaseAndSplitDexPaths ( ) , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mBarUser0 ) ; assertIsUsedByOtherApps ( mBarUser0 , pui , true ) ; org.junit.Assert.assertTrue ( pui.getDexUseInfoMap ( ) . isEmpty ( ) ) ; }
public void visitConstructor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.Nullable lombok.ast.AstVisitor visitor , @ com.android.annotations.NonNull lombok.ast.ConstructorInvocation node , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedMethod constructor ) { if ( ! ( com.android.tools.lint.checks.DateFormatDetector.specifiesLocale ( constructor ) ) ) { com.android.tools.lint.detector.api.Location location = context.getLocation ( node ) ; java.lang.String message = "To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, " + ( "or `getTimeInstance()`, or use `new SimpleDateFormat(String template, " + "Locale locale)` with for example `Locale.US` for ASCII dates." ) ; context.report ( com.android.tools.lint.checks.DateFormatDetector.DATE_FORMAT , node , location , message ) ; } }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeString ( fileServiceId ) ; out.writeParcelable ( sourceUri , flags ) ; out.writeParcelable ( destinationUri , flags ) ; out.writeInt ( subscriptionId ) ; out.writeString ( serializedResultIntentForApp ) ; out.writeInt ( version ) ; }
public void trackingEnabled_reliabilityTrigger_afterRebootNoTriggerNeeded ( ) throws java.lang.Exception { configureTrackingEnabled ( ) ; configureReliabilityConfigSettingsOk ( ) ; com.android.server.timezone.PackageVersions packageVersions = configureValidApplications ( ) ; mPackageStatusStorage.forceCheckStateForTests ( PackageStatus.CHECK_COMPLETED_SUCCESS , packageVersions ) ; mPackageTracker.start ( ) ; checkIntentHelperInitializedAndReliabilityTrackingEnabled ( ) ; checkPackageStorageStatus ( PackageStatus.CHECK_COMPLETED_SUCCESS , packageVersions ) ; mPackageTracker.triggerUpdateIfNeeded ( false ) ; mFakeIntentHelper.assertUpdateNotTriggered ( ) ; checkUpdateCheckSuccessful ( packageVersions ) ; }
public void testBasic ( ) { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject ( "basic" ) ; com.android.builder.model.AndroidProject model = projectData.model ; assertFalse ( "Library Project" , model.isLibrary ( ) ) ; assertEquals ( "Compile Target" , "android-15" , model.getCompileTarget ( ) ) ; assertFalse ( "Non empty bootclasspath" , model.getBootClasspath ( ) . isEmpty ( ) ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod jmethod ) { com.android.jack.ir.ast.JVariable thisVar = jmethod.getThis ( ) ; if ( thisVar != null ) { if ( ( thisVar.getMarker ( com.android.jack.analysis.DefinitionMarker.class ) ) == null ) { thisVar.addMarker ( new com.android.jack.analysis.DefinitionMarker ( thisVar ) ) ; } } return super . visit ( jmethod ) ; }
public void setOverlayImage ( final org.eclipse.swt.graphics.Image overlayImage ) { final org.eclipse.swt.graphics.Image toDispose = this . overlayImage ; org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( com.android.hierarchyviewerlib.models.PixelPerfectModel.this ) { com.android.hierarchyviewerlib.models.PixelPerfectModel.this . overlayImage = overlayImage ; } } } ) ; notifyOverlayChanged ( ) ; if ( toDispose != null ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { toDispose.dispose ( ) ; } } ) ; } }
protected void doApply ( java.util.zip.ZipFile patchFile , java.io.File toFile ) throws java.io.IOException { try { com.intellij.updater.Utils.delete ( toFile ) ; } catch ( java.io.IOException e ) { if ( ( com.intellij.updater.Utils.isWindows ( ) ) && ( toFile.exists ( ) ) ) { throw new com.intellij.updater.RetryException ( e ) ; } else { throw e ; } } }
private static void sendMessage ( java.net.InetAddress targetGroup , int targetPort , java.lang.String msg , java.net.NetworkInterface sendingInterface ) throws java.io.IOException { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open ( ) ; dc.setOption ( java.net.StandardSocketOptions.IP_MULTICAST_IF , sendingInterface ) ; libcore.java.nio.channels.DatagramChannelMulticastTest.sendMessage ( dc , msg , new java.net.InetSocketAddress ( targetGroup , targetPort ) ) ; dc.close ( ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( "arttest" ) ; Main.testFindClassOnAttachedNativeThread ( ) ; Main.testFindFieldOnAttachedNativeThread ( ) ; Main.testReflectFieldGetFromAttachedNativeThreadNative ( ) ; Main.testCallStaticVoidMethodOnSubClass ( ) ; Main.testGetMirandaMethod ( ) ; Main.testZeroLengthByteBuffers ( ) ; Main.testByteMethod ( ) ; Main.testShortMethod ( ) ; Main.testBooleanMethod ( ) ; Main.testCharMethod ( ) ; Main.testIsAssignableFromOnPrimitiveTypes ( ) ; }
public static java.io.InputStream getXsdStream ( int version ) { assert ( version >= 1 ) && ( version <= ( com.android.dvlib.DeviceSchema.NS_LATEST_VERSION ) ) ; java.lang.String rootElement = com.android.dvlib.DeviceSchema.NODE_DEVICES ; java.lang.String filename = java.lang.String.format ( "%1$s-%2$d.xsd" , rootElement , version ) ; try { return com.android.dvlib.DeviceSchema.class . getResourceAsStream ( filename ) ; } catch ( java.lang.Exception ignore ) { } return null ; }
synchronized void nAllocationData2D ( int id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setResult ( com.android.settings.bluetooth.RESULT_CANCELED ) ; if ( ! ( parseIntent ( ) ) ) { finish ( ) ; return ; } if ( getResources ( ) . getBoolean ( R.bool.auto_confirm_bluetooth_activation_dialog ) ) { onClick ( null , com.android.settings.bluetooth.BUTTON_POSITIVE ) ; dismiss ( ) ; } createDialog ( ) ; }
public boolean startOpenGlTracing ( ) { boolean canTraceOpenGl = mClientData.hasFeature ( ClientData.FEATURE_OPENGL_TRACING ) ; if ( ! canTraceOpenGl ) { return false ; } try { com.android.ddmlib.HandleViewDebug.sendStartGlTracing ( this ) ; return true ; } catch ( java.io.IOException e ) { com.android.ddmlib.Log.w ( "ddms" , "Start OpenGL Tracing failed" ) ; return false ; } }
protected void replaceUpdated ( java.io.File from , java.io.File dest ) throws java.io.IOException { if ( ! ( dest.delete ( ) ) ) { if ( com.intellij.updater.Utils.isWindows ( ) ) { throw new com.intellij.updater.RetryException ( ( "Cannot delete file " + dest ) ) ; } else { throw new java.io.IOException ( ( "Cannot delete file " + dest ) ) ; } } com.intellij.updater.Utils.copy ( from , dest ) ; }
public void addChoices ( java.util.List < java.lang.String > titles , java.util.List < java.net.URL > iconUrls , java.util.List < java.lang.String > ids ) { com.android.ide.common.api.IAttributeInfo info = first.getAttributeInfo ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , attributeName ) ; if ( info != null ) { assert IAttributeInfo.Format.FLAG.in ( info.getFormats ( ) ) ; for ( java.lang.String name : info.getFlagValues ( ) ) { titles.add ( prettyName ( name ) ) ; ids.add ( name ) ; } } }
public void testUserMaskingSystem ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa1 ( ) ) ; assertMasked ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa1 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa1 ( ) ) ; }
private java.util.List < android.net.ConnectivityMetricsEvent > getEvents ( ) { synchronized ( mLock ) { return java.util.Arrays.asList ( mEventLog.toArray ( ) ) ; } }
public int read ( byte [ ] b , int off , int len ) throws java.io.IOException { if ( ( closed ) && ( len > 0 ) ) { throw new java.io.IOException ( "Stream Closed" ) ; } tracker.trackIo ( len ) ; return libcore.io.IoBridge.read ( fd , b , off , len ) ; }
public static java.lang.String getNexusLabel ( @ com.android.annotations.NonNull com.android.sdklib.devices.Device device ) { java.lang.String name = device.getDisplayName ( ) ; com.android.sdklib.devices.Screen screen = device.getDefaultHardware ( ) . getScreen ( ) ; float length = ( ( float ) ( screen.getDiagonalLength ( ) ) ) ; length = ( java.lang.Math.round ( ( 10 * length ) ) ) / 10.0F ; return java.lang.String.format ( java.util.Locale.US , "%1$s (%3$s\", %2$s)" , name , com.android.ide.common.rendering.HardwareConfigHelper.getResolutionString ( device ) , java.lang.Float.toString ( length ) ) ; }
public void setSupplicantLogLevel ( boolean turnOnVerbose ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { int logLevel = ( turnOnVerbose ) ? SupplicantStaIfaceHal.LOG_LEVEL_DEBUG : SupplicantStaIfaceHal.LOG_LEVEL_INFO ; mSupplicantStaIfaceHal.setLogLevel ( logLevel ) ; } else { doStringCommand ( ( "LOG_LEVEL " + ( turnOnVerbose ? "DEBUG" : "INFO" ) ) ) ; } }
protected void onLayout ( boolean changed , int l , int t , int r , int b ) { super . onLayout ( changed , l , t , r , b ) ; mIsLayoutDirty = false ; if ( ( ( mChildToScrollTo ) != null ) && ( android.widget.HorizontalScrollView.isViewDescendantOf ( mChildToScrollTo , this ) ) ) { scrollToChild ( mChildToScrollTo ) ; } mChildToScrollTo = null ; scrollTo ( mScrollX , mScrollY ) ; }
private boolean enqueueLocked ( java.lang.ref.Reference < ? extends T > r ) { if ( ( r.queueNext ) != null ) { return false ; } if ( r instanceof sun.misc.Cleaner ) { sun.misc.Cleaner cl = ( ( sun.misc.Cleaner ) ( r ) ) ; cl.clean ( ) ; r.queueNext = java.lang.ref.ReferenceQueue.sQueueNextUnenqueued ; return true ; } if ( ( tail ) == null ) { head = r ; } else { tail.queueNext = r ; } tail = r ; tail.queueNext = r ; return true ; }
private static java.io.File getAutoProcessors ( ) throws java.lang.Exception { if ( ( com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors ) == null ) { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain ( ) ; java.io.File processorsDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; java.io.File processorsSrcDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.annotation.processor.sample.processors" ) ; toolchain.srcToLib ( processorsDir , false , com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR , processorsSrcDir ) ; com.android.jack.test.toolchain.AbstractTestTools.copyFileToDir ( new java.io.File ( processorsSrcDir , "javax.annotation.processing.Processor" ) , "META-INF/services/javax.annotation.processing.Processor" , processorsDir ) ; com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors = processorsDir ; } return com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors ; }
public void hasCategoriesTesting ( ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_VIEW ) ; intent.addCategory ( "category" ) ; intent.addCategory ( "category1" ) ; intent.addCategory ( "category2" ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.IntentMatchers.hasCategories ( intent.getCategories ( ) ) . matches ( intent ) ) ; org.junit.Assert.assertTrue ( android.support.test.espresso.intent.matcher.IntentMatchers.hasCategories ( org.hamcrest.Matchers.hasItems ( "category" , "category1" , "category2" ) ) . matches ( intent ) ) ; }
public void startRanging ( android.net.wifi.RttManager [ ] params , android.net.wifi.RttManager.RttListener listener ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.aware.WifiAwareDiscoveryBaseSession.TAG , "startRanging: called on terminated session" ) ; return ; } else { android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.aware.WifiAwareDiscoveryBaseSession.TAG , "startRanging: called post GC on WifiAwareManager" ) ; return ; } mgr.startRanging ( mClientId , mSessionId , params , listener ) ; } }
public void test_freeMemory ( ) { long freeBefore = r.freeMemory ( ) ; java.util.List < byte [ ] > arrays = new java.util.ArrayList < byte [ ] > ( ) ; for ( int i = 1 ; i < 10 ; i ++ ) { arrays.add ( new byte [ 10000 ] ) ; } long freeAfter = r.freeMemory ( ) ; assertTrue ( "free memory must change with allocations" , ( freeAfter != freeBefore ) ) ; }
public com.android.dx.io.Annotation readAnnotation ( ) { byte visibility = readByte ( ) ; int start = position ; new com.android.dx.io.EncodedValueReader ( this , EncodedValueReader.ENCODED_ANNOTATION ) . skipValue ( ) ; int end = position ; return new com.android.dx.io.Annotation ( this , visibility , new com.android.dx.io.EncodedValue ( java.util.Arrays.copyOfRange ( data , start , end ) ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mNsm = ( ( android.app.usage.NetworkStatsManager ) ( getInstrumentation ( ) . getContext ( ) . getSystemService ( Context.NETWORK_STATS_SERVICE ) ) ) ; mCm = ( ( android.net.ConnectivityManager ) ( getInstrumentation ( ) . getContext ( ) . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; mPm = getInstrumentation ( ) . getContext ( ) . getPackageManager ( ) ; mWriteSettingsMode = getAppOpsMode ( AppOpsManager.OPSTR_WRITE_SETTINGS ) ; setAppOpsMode ( AppOpsManager.OPSTR_WRITE_SETTINGS , "allow" ) ; mUsageStatsMode = getAppOpsMode ( AppOpsManager.OPSTR_GET_USAGE_STATS ) ; }
public void done ( org.eclipse.core.runtime.jobs.IJobChangeEvent event ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutActionBar bar = mEditor.getLayoutActionBar ( ) ; if ( ! ( bar.isDisposed ( ) ) ) { bar.updateErrorIndicator ( ) ; } if ( ! ( mCanvas.isDisposed ( ) ) ) { mCanvas.getDisplay ( ) . asyncExec ( this ) ; } }
private void activate ( ) { java.io.File binDir = new java.io.File ( mVenvDir , ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows ( ) ? "Scripts" : "bin" ) ) ; mRunUtil.setWorkingDir ( binDir ) ; java.lang.String path = java.lang.System.getenv ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH ) ; mRunUtil.setEnvVariable ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH , ( ( binDir + ( java.io.File.pathSeparator ) ) + path ) ) ; java.io.File pipFile = new java.io.File ( binDir , com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP ) ; pipFile.setExecutable ( true ) ; mPip = pipFile.getAbsolutePath ( ) ; }
private int deleteAttribute ( int attributesCount , proguard.classfile.editor.Attribute [ ] attributes , java.lang.String attributeName ) { int index = findAttributeIndex ( attributesCount , attributes , attributeName ) ; if ( index < 0 ) { return attributesCount ; } java.lang.System.arraycopy ( attributes , ( index + 1 ) , attributes , index , ( ( attributesCount - index ) - 1 ) ) ; attributes [ ( -- attributesCount ) ] = null ; return attributesCount ; }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( com.android.bluetooth.a2dp.A2dpService svc , android.content.Context context , com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface , android.os.Looper looper ) { if ( com.android.bluetooth.a2dp.A2dpStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpStateMachine.TAG , "make" ) ; } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( svc , context , a2dpNativeInterface , looper ) ; a2dpSm.start ( ) ; return a2dpSm ; }
public java.util.Map < java.lang.String , java.lang.Integer > getSeverityOverrides ( ) { if ( ( ( severities ) == null ) || ( severities.isEmpty ( ) ) ) { return null ; } java.util.Map < java.lang.String , java.lang.Integer > map = com.google.common.collect.Maps.newHashMapWithExpectedSize ( severities.size ( ) ) ; for ( java.util.Map.Entry < java.lang.String , com.android.tools.lint.detector.api.Severity > entry : severities.entrySet ( ) ) { map.put ( entry.getKey ( ) , com.android.build.gradle.internal.dsl.LintOptions.convert ( entry.getValue ( ) ) ) ; } return map ; }
public static java.lang.String getOutputDirectoryName ( java.lang.String buildType , java.lang.String productFlavor , java.lang.String abi ) { return com.google.common.base.Joiner.on ( java.io.File.separator ) . join ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES , "binaries" , buildType , productFlavor , "lib" , abi ) ; }
protected void readResponseHeaders ( javax.obex.HeaderSet headerset ) { if ( com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook.VDBG ) android.util.Log.v ( com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook.TAG , "readResponseHeaders" ) ; com.android.bluetooth.pbapclient.ObexAppParameters oap = com.android.bluetooth.pbapclient.ObexAppParameters.fromHeaderSet ( headerset ) ; if ( oap.exists ( com.android.bluetooth.pbapclient.OAP_TAGID_NEW_MISSED_CALLS ) ) { mNewMissedCalls = oap.getByte ( com.android.bluetooth.pbapclient.OAP_TAGID_NEW_MISSED_CALLS ) ; } }
public void testPinEntryPinFailure ( ) throws java.lang.Exception { java.lang.String shortEntry = "*.google.com=true|" + ( shortPin ) ; org.conscrypt.PinListEntry e = new org.conscrypt.PinListEntry ( shortEntry , new org.conscrypt.TrustedCertificateStore ( ) ) ; assertTrue ( "Not enforcing!" , e.getEnforcing ( ) ) ; boolean retval = e.isChainValid ( longChain ) ; assertFalse ( "Accepted an incorrect pinning, this is very bad" , retval ) ; }
public static int advance ( java.util.Iterator < ? > iterator , int numberToAdvance ) { com.google.common.base.Preconditions.checkNotNull ( iterator ) ; com.google.common.base.Preconditions.checkArgument ( ( numberToAdvance >= 0 ) , "numberToAdvance must be nonnegative" ) ; int i ; for ( i = 0 ; ( i < numberToAdvance ) && ( iterator.hasNext ( ) ) ; i ++ ) { iterator.next ( ) ; } return i ; }
private void addConfigurationToTree ( int index , com.google.gct.testing.CloudTestConfigurationImpl configuration , boolean makeSelected ) { configuration.addConfigurationChangeListener ( this ) ; final javax.swing.tree.DefaultMutableTreeNode newChild = new javax.swing.tree.DefaultMutableTreeNode ( configuration ) ; if ( configuration.isEditable ( ) ) { addChildToNode ( index , newChild , customRoot ) ; } else { addChildToNode ( index , newChild , defaultsRoot ) ; } if ( makeSelected ) { selectTreeNode ( newChild ) ; } }
public final void setConferenceableConnections ( java.lang.String callId , java.util.List < java.lang.String > conferenceableConnectionIds , android.telecom.Logging.Session.Info sessionInfo ) { java.util.List < android.telecom.RemoteConnection > conferenceable = new java.util.ArrayList < > ( ) ; for ( java.lang.String id : conferenceableConnectionIds ) { if ( mConnectionById.containsKey ( id ) ) { conferenceable.add ( mConnectionById.get ( id ) ) ; } } if ( hasConnection ( callId ) ) { findConnectionForAction ( callId , "setConferenceableConnections" ) . setConferenceableConnections ( conferenceable ) ; } else { findConferenceForAction ( callId , "setConferenceableConnections" ) . setConferenceableConnections ( conferenceable ) ; } }
public void testTranslucentActivityOnTopOfHome ( ) throws java.lang.Exception { if ( noHomeScreen ( ) ) { return ; } executeShellCommand ( android.server.cts.AM_START_HOME_ACTIVITY_COMMAND ) ; executeShellCommand ( getAmStartCmd ( android.server.cts.ActivityManagerActivityVisiblityTests.TRANSLUCENT_ACTIVITY ) ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { android.server.cts.ActivityManagerActivityVisiblityTests.TRANSLUCENT_ACTIVITY } ) ; mAmWmState.assertFrontStack ( "Fullscreen stack must be the front stack." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.assertVisibility ( android.server.cts.ActivityManagerActivityVisiblityTests.TRANSLUCENT_ACTIVITY , true ) ; mAmWmState.assertHomeActivityVisible ( true ) ; }
public com.android.ims.internal.IImsServiceController getImsServiceControllerAndListen ( int slotIndex , @ android.telephony.TelephonyManager.Feature int feature , com.android.ims.internal.IImsServiceFeatureListener callback ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getImsServiceControllerAndListen ( slotIndex , feature , callback ) ; } } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , ( "getImsServiceControllerAndListen, RemoteException: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
protected void setUp ( ) { mFOp = new com.android.sdklib.io.MockFileOp ( ) ; mLS = new com.android.sdklib.repository.local.LocalSdk ( mFOp ) ; mRemotePkgs = com.google.common.collect.TreeMultimap.create ( ) ; mSource = new com.android.sdklib.repository.IDescription ( ) { @ java.lang.Override public java.lang.String getShortDescription ( ) { return "source" ; } @ java.lang.Override public java.lang.String getLongDescription ( ) { return "mock sdk repository source" ; } } ; mLS.setLocation ( new java.io.File ( "/sdk" ) ) ; }
private static void checkActivity ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( ( com.android.tools.lint.checks.SecurityDetector.getExported ( element ) ) && ( com.android.tools.lint.checks.SecurityDetector.isUnprotectedByPermission ( element ) ) ) && ( ! ( com.android.tools.lint.checks.SecurityDetector.isLauncher ( element ) ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_ACTIVITY , element , context.getLocation ( element ) , "Exported activity does not require permission" , null ) ; } }
public void test_SingletonMap_compute ( ) { try { java.util.Collections.singletonMap ( 1 , 11.0 ) . compute ( 1 , ( k , v ) -> 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
private void checkScoAudioState ( ) { synchronized ( mScoClients ) { if ( ( ( ( ( mBluetoothHeadset ) != null ) && ( ( mBluetoothHeadsetDevice ) != null ) ) && ( ( mScoAudioState ) == ( com.android.server.audio.AudioService.SCO_STATE_INACTIVE ) ) ) && ( ( mBluetoothHeadset.getAudioState ( mBluetoothHeadsetDevice ) ) != ( android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ) ) ) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL ; } } }
public static int frequency ( java.util.Iterator < ? > iterator , @ javax.annotation.Nullable java.lang.Object element ) { return com.google.common.collect.Iterators.size ( com.google.common.collect.Iterators.filter ( iterator , com.google.common.base.Predicates.equalTo ( element ) ) ) ; }
private void stopService ( ) throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent ( android.support.test.InstrumentationRegistry.getTargetContext ( ) , com.android.bluetooth.a2dp.A2dpService.class ) ; stopIntent.putExtra ( AdapterService.EXTRA_ACTION , AdapterService.ACTION_SERVICE_STATE_CHANGED ) ; stopIntent.putExtra ( BluetoothAdapter.EXTRA_STATE , BluetoothAdapter.STATE_OFF ) ; mServiceRule.startService ( stopIntent ) ; verify ( mAdapterService , timeout ( com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS ) ) . onProfileServiceStateChanged ( eq ( com.android.bluetooth.a2dp.A2dpService.class . getName ( ) ) , eq ( BluetoothAdapter.STATE_OFF ) ) ; mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService ( ) ; org.junit.Assert.assertNull ( mA2dpService ) ; }
public static com.ibm.icu.util.TimeZone getDefault ( ) { if ( ( com.ibm.icu.util.TimeZone.defaultZone ) == null ) { synchronized ( com.ibm.icu.util.TimeZone.class ) { if ( ( com.ibm.icu.util.TimeZone.defaultZone ) == null ) { if ( ( com.ibm.icu.util.TimeZone.TZ_IMPL ) == ( com.ibm.icu.util.TimeZone.TIMEZONE_JDK ) ) { com.ibm.icu.util.TimeZone.defaultZone = new com.ibm.icu.impl.JavaTimeZone ( ) ; } else { java.util.TimeZone temp = java.util.TimeZone.getDefault ( ) ; com.ibm.icu.util.TimeZone.defaultZone = com.ibm.icu.util.TimeZone.getFrozenTimeZone ( temp.getID ( ) ) ; } } } } return com.ibm.icu.util.TimeZone.defaultZone.cloneAsThawed ( ) ; }
public void test_isClosed ( ) throws java.lang.Exception { java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( ) ; assertFalse ( theSocket.isClosed ( ) ) ; theSocket.close ( ) ; assertTrue ( theSocket.isClosed ( ) ) ; java.net.InetSocketAddress theAddress = new java.net.InetSocketAddress ( java.net.InetAddress.getLocalHost ( ) , 0 ) ; theSocket = new java.net.DatagramSocket ( theAddress ) ; assertFalse ( theSocket.isClosed ( ) ) ; theSocket.close ( ) ; assertTrue ( theSocket.isClosed ( ) ) ; }
public void testCannotSetFixedLengthStreamingModeAfterConnect ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; org.junit.Assert.assertEquals ( "A" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; try { connection.setFixedLengthStreamingMode ( 1 ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
com.google.common.collect.Multiset.Entry < E > getEntry ( int index ) { java.util.Map.Entry < E , java.lang.Integer > mapEntry = map.entrySet ( ) . asList ( ) . get ( index ) ; return com.google.common.collect.Multisets.immutableEntry ( mapEntry.getKey ( ) , mapEntry.getValue ( ) ) ; }
public int getRadioAccessFamily ( int phoneId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( phoneId ) ; if ( phone == null ) { return android.telephony.RadioAccessFamily.RAF_UNKNOWN ; } int subId = phone.getSubId ( ) ; if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , "getRadioAccessFamily" ) ) ) { return android.telephony.RadioAccessFamily.RAF_UNKNOWN ; } return com.android.internal.telephony.ProxyController.getInstance ( ) . getRadioAccessFamily ( phoneId ) ; }
public com.android.jack.load.PackageLoader getLoaderForSubPackage ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading , @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JPackageLookupException { com.android.sched.vfs.InputVDir input = vdirCache.get ( simpleName ) ; if ( input == null ) { throw new com.android.jack.ir.ast.JPackageLookupException ( simpleName , loading ) ; } return new com.android.jack.jayce.JaycePackageLoader ( inputJackLibrary , input , lookup , defaultLoadLevel ) ; }
public void performReceive ( android.content.Intent intent , int resultCode , java.lang.String data , android.os.Bundle extras , boolean ordered , boolean sticky , int sendingUser ) { synchronized ( this ) { requestPssAllProcsLocked ( android.os.SystemClock.uptimeMillis ( ) , true , false ) ; } }
public void testRevokePropagatedOnUpgradeNewToNewModel ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokePropagatedOnUpgradeNewToNewModel_part1" ) ; assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , true , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokePropagatedOnUpgradeNewToNewModel_part2" ) ; }
public byte [ ] getPubkey ( java.lang.String key ) { try { return mBinder.get_pubkey ( key ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return null ; } }
public final int getDotType ( int c ) { int props = trie.get ( c ) ; if ( ! ( android.icu.impl.UCaseProps.propsHasException ( props ) ) ) { return props & ( android.icu.impl.UCaseProps.DOT_MASK ) ; } else { return ( ( exceptions.charAt ( android.icu.impl.UCaseProps.getExceptionsOffset ( props ) ) ) > > ( android.icu.impl.UCaseProps.EXC_DOT_SHIFT ) ) & ( android.icu.impl.UCaseProps.DOT_MASK ) ; } }
private static java.io.File storeMergedConfigFile ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > configMap , java.lang.String moduleName ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { java.io.File folder = com.android.tradefed.util.FileUtil.createTempDir ( com.android.compatibility.common.util.DynamicConfigHandler.MERGED_CONFIG_FILE_FOLDER ) ; java.io.File mergedConfigFile = new java.io.File ( folder , ( moduleName + ".dynamic" ) ) ; java.io.OutputStream stream = new java.io.FileOutputStream ( mergedConfigFile ) ; org.xmlpull.v1.XmlSerializer serializer = org.xmlpull.v1.XmlPullParserFactory.newInstance ( ) . newSerializer ( ) ; serializer.setOutput ( stream , com.android.compatibility.common.util.DynamicConfigHandler.ENCODING ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; serializer.startDocument ( com.android.compatibility.common.util.DynamicConfigHandler.ENCODING , false ) ; serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; for ( java.lang.String key : configMap.keySet ( ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; serializer.attribute ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.KEY_ATTR , key ) ; for ( java.lang.String value : configMap.get ( key ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; serializer.text ( value ) ; serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; serializer.endDocument ( ) ; return mergedConfigFile ; }
public com.android.sdklib.internal.avd.AvdInfo [ ] getBrokenAvds ( ) { synchronized ( mAllAvdList ) { if ( ( mBrokenAvdList ) == null ) { java.util.ArrayList < com.android.sdklib.internal.avd.AvdInfo > list = new java.util.ArrayList < com.android.sdklib.internal.avd.AvdInfo > ( ) ; for ( com.android.sdklib.internal.avd.AvdInfo avd : mAllAvdList ) { if ( ( avd.getStatus ( ) ) != ( com.android.sdklib.internal.avd.AvdInfo.AvdStatus.OK ) ) { list.add ( avd ) ; } } mBrokenAvdList = list.toArray ( new com.android.sdklib.internal.avd.AvdInfo [ list.size ( ) ] ) ; } return mBrokenAvdList ; } }
boolean canBeInternationallyDialled ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = getMetadataForRegion ( getRegionCodeForNumber ( number ) ) ; if ( metadata == null ) { return true ; } java.lang.String nationalSignificantNumber = getNationalSignificantNumber ( number ) ; return ! ( isNumberMatchingDesc ( nationalSignificantNumber , metadata.getNoInternationalDialling ( ) ) ) ; }
public void test_Inserted_Entry_Manifest_with_DigestCode ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Inserted_Entry_Manifest_with_DigestCode.jar" ; java.io.File file = tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; try ( java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( file , true ) ) { java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; int count = 0 ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; jarFile.getInputStream ( zipEntry ) ; count ++ ; } assertEquals ( 5 , count ) ; } }
public void setPadding ( int left , int top , int right , int bottom ) { resetResolvedPadding ( ) ; mUserPaddingStart = android.view.View.UNDEFINED_PADDING ; mUserPaddingEnd = android.view.View.UNDEFINED_PADDING ; mUserPaddingLeftInitial = left ; mUserPaddingRightInitial = right ; mLeftPaddingDefined = true ; mRightPaddingDefined = true ; internalSetPadding ( left , top , right , bottom ) ; }
public void removePackageFromPreferred ( java.lang.String packageName ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.SET_PREFERRED_APPLICATIONS , null ) ; com.android.server.Log.w ( com.android.server.PackageManagerService.TAG , "removePackageFromPreferred: no longer implemented" ) ; }
private void updateAndSendIntent ( android.bluetooth.BluetoothDevice device , int newDeviceState , int prevDeviceState ) { if ( newDeviceState == ( android.bluetooth.BluetoothHealth.STATE_DISCONNECTED ) ) { mHealthDevices.remove ( device ) ; } else { mHealthDevices.put ( device , newDeviceState ) ; } if ( ( newDeviceState != prevDeviceState ) && ( newDeviceState == ( android.bluetooth.BluetoothHealth.STATE_CONNECTED ) ) ) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent ( BluetoothMetricsProto.ProfileId.HEALTH ) ; } }
public final void activityDestroyed ( android.os.IBinder token ) { if ( com.android.server.am.ActivityManagerService.DEBUG_SWITCH ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( "ACTIVITY DESTROYED: " + token ) ) ; synchronized ( this ) { com.android.server.am.ActivityStack stack = com.android.server.am.ActivityRecord.getStackLocked ( token ) ; if ( stack != null ) { stack.activityDestroyedLocked ( token , "activityDestroyed" ) ; } } }
public void findValidValue ( ) { java.util.List < java.lang.String > strings = com.google.common.collect.Lists.newArrayList ( "foo" , "maxSdkVersion:'14'" , "bar" ) ; com.android.build.gradle.integration.common.truth.FakeFailureStrategy failure = new com.android.build.gradle.integration.common.truth.FakeFailureStrategy ( ) ; java.io.File file = new java.io.File ( "foo" ) ; com.android.build.gradle.integration.common.truth.ApkSubject subject = new com.android.build.gradle.integration.common.truth.ApkSubject ( failure , file ) ; failure.reset ( ) ; subject.checkMaxSdkVersion ( strings , 14 ) ; com.google.common.truth.Truth.assertThat ( failure.message ) . isNull ( ) ; }
public void firstMatchesByGivenMatcher ( ) { android.view.View firstViewWithId1 = createViewWithId ( R.id.testId1 ) ; android.view.View secondViewWithId1 = createViewWithId ( R.id.testId1 ) ; org.hamcrest.Matcher < android.view.View > id1FirstOccurrenceMatcher = android.support.test.espresso.matcher.ViewMatchers.thatMatchesFirst ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.testId1 ) ) ; org.junit.Assert.assertTrue ( id1FirstOccurrenceMatcher.matches ( firstViewWithId1 ) ) ; org.junit.Assert.assertFalse ( id1FirstOccurrenceMatcher.matches ( secondViewWithId1 ) ) ; org.junit.Assert.assertTrue ( id1FirstOccurrenceMatcher.matches ( firstViewWithId1 ) ) ; }
protected void renameResource ( @ com.android.annotations.NonNull org.eclipse.core.resources.IProject project , @ com.android.annotations.NonNull java.lang.Object resource , boolean updateReferences , @ com.android.annotations.NonNull java.lang.String newName , @ com.android.annotations.NonNull java.lang.String expected , @ com.android.annotations.NonNull java.lang.String expectedWarnings ) throws java.lang.Exception { org.eclipse.ltk.core.refactoring.participants.RenameProcessor processor = null ; if ( resource instanceof java.lang.String ) { java.lang.String url = ( ( java.lang.String ) ( resource ) ) ; assert url.startsWith ( "@" ) : resource ; com.android.utils.Pair < com.android.resources.ResourceType , java.lang.String > pair = com.android.ide.eclipse.adt.internal.editors.Hyperlinks.parseResource ( url ) ; assertNotNull ( url , pair ) ; com.android.resources.ResourceType type = pair.getFirst ( ) ; java.lang.String currentName = pair.getSecond ( ) ; com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor p ; p = new com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor ( project , type , currentName , newName ) ; p.setUpdateReferences ( updateReferences ) ; processor = p ; } else if ( resource instanceof org.eclipse.core.resources.IResource ) { org.eclipse.core.resources.IResource r = ( ( org.eclipse.core.resources.IResource ) ( resource ) ) ; com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor p ; p = new com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor ( r ) ; java.lang.String fileName = r.getName ( ) ; int dot = fileName.indexOf ( '.' ) ; java.lang.String extension = ( dot != ( - 1 ) ) ? fileName.substring ( dot ) : "" ; p.setNewResourceName ( ( newName + extension ) ) ; p.setUpdateReferences ( updateReferences ) ; processor = p ; } else if ( resource instanceof org.eclipse.jdt.core.IField ) { org.eclipse.jdt.internal.corext.refactoring.rename.RenameFieldProcessor p = new org.eclipse.jdt.internal.corext.refactoring.rename.RenameFieldProcessor ( ( ( org.eclipse.jdt.core.IField ) ( resource ) ) ) ; p.setNewElementName ( newName ) ; p.setUpdateReferences ( updateReferences ) ; processor = p ; } else { fail ( ( "Unsupported resource element in tests: " + resource ) ) ; } assertNotNull ( processor ) ; org.eclipse.ltk.core.refactoring.participants.RenameRefactoring refactoring = new org.eclipse.ltk.core.refactoring.participants.RenameRefactoring ( processor ) ; checkRefactoring ( refactoring , expected , expectedWarnings ) ; }
void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , int duration , int maxExtAdvEvents , android.bluetooth.le.IAdvertisingSetCallback callback ) { enforceAdminPermission ( ) ; mAdvertiseManager.startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , duration , maxExtAdvEvents , callback ) ; }
private final boolean isBluetoothPersistedStateOn ( ) { int state = Settings.Global.getInt ( mContentResolver , Settings.Global.BLUETOOTH_ON , ( - 1 ) ) ; if ( com.android.server.BluetoothManagerService.DBG ) android.util.Slog.d ( com.android.server.BluetoothManagerService.TAG , ( "Bluetooth persisted state: " + state ) ) ; return state != ( com.android.server.BluetoothManagerService.BLUETOOTH_OFF ) ; }
public boolean disconnect ( ) { if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( "disconnect()" ) ; final android.bluetooth.IBluetoothPbap service = mService ; if ( service != null ) { try { service.disconnect ( ) ; return true ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPbap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothPbap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return false ; }
public static java.io.InputStream getXsdStream ( int version ) { assert ( version >= 1 ) && ( version <= ( com.android.dvlib.DeviceSchema.NS_LATEST_VERSION ) ) : "Unexpected schema version " + version ; java.lang.String rootElement = com.android.dvlib.DeviceSchema.NODE_DEVICES ; java.lang.String filename = java.lang.String.format ( "%1$s-%2$d.xsd" , rootElement , version ) ; try { return com.android.dvlib.DeviceSchema.class . getResourceAsStream ( filename ) ; } catch ( java.lang.Exception ignore ) { } return null ; }
public void onResume ( ) { if ( com.android.dialer.util.PermissionsUtil.hasPermission ( activity , android.Manifest.permission.READ_CONTACTS ) ) { contactInfoCache.start ( ) ; } contactsPreferences.refreshValue ( ContactsPreferences.DISPLAY_ORDER_KEY ) ; isSpamEnabled = com.android.dialer.spam.SpamComponent.get ( activity ) . spamSettings ( ) . isSpamEnabled ( ) ; getDuo ( ) . registerListener ( this ) ; notifyDataSetChanged ( ) ; }
public void addFile ( java.io.File file , java.lang.String archivePath ) throws com.android.sdklib.build.ApkCreationException , com.android.sdklib.build.DuplicateFileException , com.android.sdklib.build.SealedApkException { if ( mIsSealed ) { throw new com.android.sdklib.build.SealedApkException ( "APK is already sealed" ) ; } try { doAddFile ( file , archivePath ) ; } catch ( com.android.sdklib.build.DuplicateFileException e ) { throw e ; } catch ( java.lang.Exception e ) { throw new com.android.sdklib.build.ApkCreationException ( e , "Failed to add %s" , file ) ; } }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor getRootDescriptor ( ) { if ( ( mRootDescriptor ) == null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = mEditor.getTargetData ( ) ; if ( data != null ) { com.android.ide.eclipse.adt.internal.editors.descriptors.IDescriptorProvider descriptorProvider = data.getDescriptorProvider ( getRootDescriptorId ( ) ) ; if ( descriptorProvider != null ) { mRootDescriptor = new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor ( "" , descriptorProvider.getRootElementDescriptors ( ) ) ; } } } return mRootDescriptor ; }
public void cellInfoList_1_2 ( int indicationType , java.util.ArrayList < com.android.internal.telephony.V1_2.CellInfo > records ) { mRil.processIndication ( indicationType ) ; java.util.ArrayList < android.telephony.CellInfo > response = com.android.internal.telephony.RIL.convertHalCellInfoList_1_2 ( records ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_CELL_INFO_LIST , response ) ; mRil.mRilCellInfoListRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
private boolean getProvisionedBool ( com.android.ims.ImsConfig config , int item ) throws com.android.ims.ImsException { int value = config.getProvisionedValue ( item ) ; if ( value == ( ImsConfig.FeatureValueConstants.ERROR ) ) { throw new com.android.ims.ImsException ( ( "getProvisionedBool failed with error for item: " + item ) , ImsReasonInfo.CODE_LOCAL_INTERNAL_ERROR ) ; } return ( config.getProvisionedValue ( item ) ) == ( ImsConfig.FeatureValueConstants.ON ) ; }
public void testPreloadDensity ( ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final int densityDpi = mResources.getConfiguration ( ) . densityDpi ; try { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity ( mResources , densityDpi ) ; verifyPreloadDensityInner ( mResources , densityDpi ) ; } finally { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity ( mResources , densityDpi ) ; } }
private void addSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.Annotable annotable , @ javax.annotation.Nonnull java.lang.String signature , @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info ) { com.android.jack.ir.ast.JAnnotation annotation = createAnnotation ( annotable , signatureAnnotationType , info ) ; com.android.jack.ir.ast.JArrayLiteral literal = buildSignatureAnnotationValue ( signature , info ) ; com.android.jack.ir.ast.JMethodId methodId = getOrCreateMethodId ( signatureAnnotationType , com.android.jack.backend.dex.annotations.ReflectAnnotationsAdder.Visitor.ELT_VALUE ) ; com.android.jack.ir.ast.JNameValuePair valuePair = new com.android.jack.ir.ast.JNameValuePair ( info , methodId , literal ) ; assert ( annotation.getNameValuePair ( methodId ) ) == null : "Type can not have more than one generic signature" ; request.append ( new com.android.jack.transformations.request.PutNameValuePair ( annotation , valuePair ) ) ; }
public android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings ( android.bluetooth.BluetoothDevice device ) { if ( android.bluetooth.BluetoothAvrcpController.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAvrcpController.TAG , "getPlayerSettings" ) ; android.bluetooth.BluetoothAvrcpPlayerSettings settings = null ; final android.bluetooth.IBluetoothAvrcpController service = mService ; if ( ( service != null ) && ( isEnabled ( ) ) ) { try { settings = service.getPlayerSettings ( device ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAvrcpController.TAG , ( "Error talking to BT service in getMetadata() " + e ) ) ; return null ; } } return settings ; }
public void run ( ) { mFilterText = "" ; com.android.hierarchyviewerlib.device.IHvDevice hvDevice = window.getHvDevice ( ) ; com.android.hierarchyviewerlib.models.ViewNode viewNode = hvDevice.loadWindowData ( window ) ; if ( viewNode != null ) { hvDevice.loadProfileData ( window , viewNode ) ; viewNode.setViewCount ( ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . setData ( window , viewNode ) ; } }
public void write ( java.io.File incrementalFolder ) throws java.io.IOException { if ( ( ! ( incrementalFolder.isDirectory ( ) ) ) && ( ! ( incrementalFolder.mkdirs ( ) ) ) ) { throw new java.io.IOException ( ( "Failed to create directory " + incrementalFolder ) ) ; } mInputs.write ( new java.io.File ( incrementalFolder , com.android.builder.internal.incremental.ChangeManager.FN_INPUTS_DATA ) ) ; mOutputs.write ( new java.io.File ( incrementalFolder , com.android.builder.internal.incremental.ChangeManager.FN_OUTPUTS_DATA ) ) ; }
public boolean setScanMode ( @ android.bluetooth.BluetoothAdapter.ScanMode int mode , int duration ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return false ; try { mServiceLock.readLock ( ) . lock ( ) ; if ( ( mService ) != null ) return mService.setScanMode ( mode , duration ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } finally { mServiceLock.readLock ( ) . unlock ( ) ; } return false ; }
private int getScaledMaxXScroll ( ) { int width ; if ( ( mHeightCanMeasure ) == false ) { width = ( getViewWidth ( ) ) / 4 ; } else { android.graphics.Rect visRect = new android.graphics.Rect ( ) ; calcOurVisibleRect ( visRect ) ; width = ( visRect.width ( ) ) / 2 ; } return viewToContentX ( width ) ; }
public void testPownF32_3 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_3 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 10560497 , ( - 16 ) , 15 , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n3 ( nAlloc ) ; doF32_3 ( 11191281 , 16 ) ; }
public void onMessageReceivedNotification ( int pubSubId , int requestorInstanceId , byte [ ] peerMac , byte [ ] message ) { android.os.Message msg = mSm.obtainMessage ( com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_TYPE_NOTIFICATION ) ; msg.arg1 = com.android.server.wifi.aware.WifiAwareStateManager.NOTIFICATION_TYPE_MESSAGE_RECEIVED ; msg.arg2 = pubSubId ; msg.obj = requestorInstanceId ; msg.getData ( ) . putByteArray ( com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_BUNDLE_KEY_MAC_ADDRESS , peerMac ) ; msg.getData ( ) . putByteArray ( com.android.server.wifi.aware.WifiAwareStateManager.MESSAGE_BUNDLE_KEY_MESSAGE_DATA , message ) ; mSm.sendMessage ( msg ) ; }
public void setSupplicantLogLevel ( boolean turnOnVerbose ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { int logLevel = ( turnOnVerbose ) ? SupplicantStaIfaceHal.LOG_LEVEL_DEBUG : SupplicantStaIfaceHal.LOG_LEVEL_INFO ; mSupplicantStaIfaceHal.setLogLevel ( logLevel ) ; } else { doStringCommand ( ( "LOG_LEVEL " + ( turnOnVerbose ? "DEBUG" : "INFO" ) ) ) ; } }
public void TestLineMonkey ( ) { int loopCount = 500 ; int seed = 1 ; if ( ( android.icu.dev.test.TestFmwk.getExhaustiveness ( ) ) >= 9 ) { loopCount = 10000 ; } logln ( "Line Break Monkey Test" ) ; android.icu.dev.test.rbbi.RBBITestMonkey.RBBILineMonkey m = new android.icu.dev.test.rbbi.RBBITestMonkey.RBBILineMonkey ( ) ; android.icu.text.BreakIterator bi = android.icu.text.BreakIterator.getLineInstance ( java.util.Locale.US ) ; RunMonkey ( bi , m , "line" , seed , loopCount ) ; }
private void assertSerialNumber ( ) { org.junit.Assert.assertNotNull ( "Non-telephony devices must have a Build.SERIAL number." , Build.SERIAL ) ; org.junit.Assert.assertTrue ( "Hardware id must be no longer than 20 characters." , ( ( Build.SERIAL.length ( ) ) <= 20 ) ) ; org.junit.Assert.assertTrue ( "Hardware id must be alphanumeric." , java.util.regex.Pattern.matches ( "[0-9A-Za-z]+" , Build.SERIAL ) ) ; }
public int checkRightsStatus ( android.net.Uri uri ) { if ( ( null == uri ) || ( ( android.net.Uri.EMPTY ) == uri ) ) { throw new java.lang.IllegalArgumentException ( "Given uri is not valid" ) ; } return checkRightsStatus ( convertUriToPath ( uri ) ) ; }
public java.lang.Object getSystemService ( java.lang.String name ) { if ( name.equals ( Context.LAYOUT_INFLATER_SERVICE ) ) { android.view.LayoutInflater i = ( ( android.view.LayoutInflater ) ( getBaseContext ( ) . getSystemService ( name ) ) ) ; return i.cloneInContext ( this ) ; } else { return getBaseContext ( ) . getSystemService ( name ) ; } }
public static com.android.incallui.incall.protocol.PrimaryInfo.Builder builder ( ) { return new com.android.incallui.incall.protocol.AutoValue_PrimaryInfo.Builder ( ) ; }
public void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; com.android.music.utils.LogHelper.d ( com.android.music.MusicBrowserActivity.TAG , "onCreate()" ) ; if ( ( checkSelfPermission ( permission.READ_EXTERNAL_STORAGE ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { requestPermissions ( new java.lang.String [ ] { android.Manifest.permission.READ_EXTERNAL_STORAGE } , com.android.music.MusicBrowserActivity.MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE ) ; return ; } initApp ( ) ; }
protected boolean isValidSourceFile ( @ com.android.annotations.NonNull java.io.File sourceFolder , @ com.android.annotations.NonNull java.io.File file ) { if ( ! ( super . isValidSourceFile ( sourceFolder , file ) ) ) { return false ; } java.io.File resFolder = file.getParentFile ( ) ; return ( ( resFolder.getParentFile ( ) . equals ( sourceFolder ) ) && ( ! ( isIgnored ( resFolder ) ) ) ) && ( ( com.android.resources.ResourceFolderType.getFolderType ( resFolder.getName ( ) ) ) != null ) ; }
public android.telephony.ims.aidl.IImsMmTelFeature getImsMmTelFeatureAndListen ( int slotIndex , com.android.ims.internal.IImsServiceFeatureCallback callback ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getMmTelFeatureAndListen ( slotIndex , callback ) ; } } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , ( "getImsMmTelFeatureAndListen, RemoteException: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int slotId , int featureType , int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { enforceCallingOrSelfPermission ( android.Manifest.permission.MODIFY_PHONE_STATE , "createCallSession" ) ; synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature.createCallSession ( sessionId , profile , listener ) ; } } return null ; }
public java.lang.String getNamespace ( com.android.ide.common.api.INode layout ) { java.lang.String namespace = com.android.SdkConstants.ANDROID_URI ; java.lang.String fqcn = layout.getFqcn ( ) ; if ( ( ! ( fqcn.equals ( com.android.SdkConstants.GRID_LAYOUT ) ) ) && ( ! ( fqcn.equals ( com.android.SdkConstants.FQCN_GRID_LAYOUT ) ) ) ) { namespace = mRulesEngine.getAppNameSpace ( ) ; } return namespace ; }
public void switchToSubscription ( int subscriptionId , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled ( ) ) ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; return ; } try { getIEuiccController ( ) . switchToSubscription ( subscriptionId , mContext.getOpPackageName ( ) , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
void joinPool ( java.util.concurrent.ExecutorService exec ) { try { exec.shutdown ( ) ; if ( ! ( exec.awaitTermination ( ( 2 * ( jsr166.JSR166TestCase.LONG_DELAY_MS ) ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ) ) fail ( ( ( "ExecutorService " + exec ) + " did not terminate in a timely manner" ) ) ; } catch ( java.lang.SecurityException ok ) { } catch ( java.lang.InterruptedException fail ) { fail ( "Unexpected InterruptedException" ) ; } }
private int deleteMessageFromIcc ( java.lang.String messageIndexString ) { android.telephony.SmsManager smsManager = android.telephony.SmsManager.getDefault ( ) ; try { return smsManager.deleteMessageFromIcc ( java.lang.Integer.parseInt ( messageIndexString ) ) ? 1 : 0 ; } catch ( java.lang.NumberFormatException exception ) { throw new java.lang.IllegalArgumentException ( ( "Bad SMS ICC ID: " + messageIndexString ) ) ; } finally { android.content.ContentResolver cr = getContext ( ) . getContentResolver ( ) ; cr.notifyChange ( com.android.providers.telephony.SmsProvider.ICC_URI , null ) ; } }
public void test_nullLocale_GregorianCalendar_Locale ( ) { assertCalendarConfigEquals ( new java.util.GregorianCalendar ( java.util.Locale.getDefault ( ) ) , new java.util.GregorianCalendar ( ( ( java.util.Locale ) ( null ) ) ) ) ; }
static android.net.Uri originalUri ( android.net.Uri uri ) { java.lang.String mUri = uri.toString ( ) ; int atIndex = mUri.lastIndexOf ( "@" ) ; if ( atIndex != ( - 1 ) ) { mUri = mUri.substring ( 0 , atIndex ) ; uri = android.net.Uri.parse ( mUri ) ; } if ( com.android.bluetooth.opp.BluetoothOppUtility.V ) android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppUtility.TAG , ( "originalUri: " + uri ) ) ; return uri ; }
private boolean checkDevice ( android.bluetooth.BluetoothDevice device ) { if ( ( ( mHidDevice ) == null ) || ( ! ( mHidDevice.equals ( device ) ) ) ) { android.util.Log.w ( com.android.bluetooth.hid.HidDevService.TAG , ( "Unknown device: " + device ) ) ; return false ; } return true ; }
public void currentSignalStrength ( int indicationType , com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { mRil.processIndication ( indicationType ) ; android.telephony.SignalStrength ss = new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , signalStrength.tdScdma.rscp , false ) ; if ( RIL.RILJ_LOGV ) mRil.unsljLogvRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_SIGNAL_STRENGTH , ss ) ; if ( ( mRil.mSignalStrengthRegistrant ) != null ) { mRil.mSignalStrengthRegistrant.notifyRegistrant ( new android.os.AsyncResult ( null , ss , null ) ) ; } }
protected boolean cleanup ( ) { if ( com.android.bluetooth.a2dp.A2dpService.DBG ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpService.TAG , "cleanup()" ) ; } if ( ( mConnectionStateChangedReceiver ) != null ) { unregisterReceiver ( mConnectionStateChangedReceiver ) ; mConnectionStateChangedReceiver = null ; } if ( ( mStateMachine ) != null ) { mStateMachine.cleanup ( ) ; mStateMachine = null ; } if ( ( mAvrcp ) != null ) { mAvrcp.cleanup ( ) ; mAvrcp = null ; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService ( ) ; return true ; }
public boolean isDataConnectivityPossible ( ) { int subId = mSubscriptionController.getDefaultDataSubId ( ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.isDataConnectivityPossible ( ) ; } else { return false ; } }
public void test_initWithSecureRandom ( ) throws java.lang.Exception { java.security.SecureRandom sr = new java.security.SecureRandom ( ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance ( ( ( org.apache.harmony.crypto.tests.javax.crypto.CipherTest.ALGORITHM_3DES ) + "/ECB/PKCS5Padding" ) ) ; cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , sr ) ; cipher = javax.crypto.Cipher.getInstance ( "DES/CBC/NoPadding" ) ; try { cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , sr ) ; fail ( ) ; } catch ( java.security.InvalidKeyException expected ) { } }
void writeTo ( org.json.JSONStringer stringer ) throws org.json.JSONException { stringer.object ( ) ; for ( java.util.Map.Entry < java.lang.String , java.lang.Object > entry : nameValuePairs.entrySet ( ) ) { stringer.key ( entry.getKey ( ) ) . value ( entry.getValue ( ) ) ; } stringer.endObject ( ) ; }
public void snapshotJackFilesModificationDate ( ) throws com.android.jack.library.LibraryIOException { com.android.jack.library.InputJackLibrary compilerStateLib = null ; try { compilerStateLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir ( compilerStateFolder ) ; java.util.Iterator < com.android.sched.vfs.InputVFile > jayceIter = compilerStateLib.iterator ( FileType.JAYCE ) ; while ( jayceIter.hasNext ( ) ) { com.android.sched.vfs.InputVFile jayceFile = jayceIter.next ( ) ; fileModificationDate.put ( jayceFile.getPathFromRoot ( ) , java.lang.Long.valueOf ( jayceFile.getLastModified ( ) ) ) ; } } finally { if ( compilerStateLib != null ) { compilerStateLib.close ( ) ; } } }
public int peek ( ) { if ( ( type ) == ( com.android.dex.EncodedValueReader.MUST_READ ) ) { int argAndType = ( in.readByte ( ) ) & 255 ; type = argAndType & 31 ; arg = ( argAndType & 224 ) > > 5 ; } return type ; }
public void testNonBlockingAccept ( ) throws java.lang.Exception { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open ( ) ; try { ssc.configureBlocking ( false ) ; ssc.socket ( ) . bind ( null ) ; assertNull ( ssc.accept ( ) ) ; } finally { ssc.close ( ) ; } }
public void release ( ) { if ( android.support.v17.leanback.app.BackgroundManager.DEBUG ) android.util.Log.v ( android.support.v17.leanback.app.BackgroundManager.TAG , ( "release " + ( this ) ) ) ; if ( ( mChangeRunnable ) != null ) { mHandler.removeCallbacks ( mChangeRunnable ) ; mChangeRunnable = null ; } if ( mAnimator.isStarted ( ) ) { mAnimator.cancel ( ) ; } if ( ( mLayerDrawable ) != null ) { mLayerDrawable.clearDrawable ( R.id.background_imagein , mContext ) ; mLayerDrawable.clearDrawable ( R.id.background_imageout , mContext ) ; mLayerDrawable = null ; } mBackgroundDrawable = null ; }
public void testUniversal ( ) { com.android.build.gradle.internal.dsl.DensitySplitOptions options = new com.android.build.gradle.internal.dsl.DensitySplitOptions ( ) ; options.setEnable ( true ) ; java.util.Set < java.lang.String > values = options.getApplicableFilters ( ) ; org.junit.Assert.assertTrue ( ( ( values.size ( ) ) >= 6 ) ) ; }
public void deriveValues ( java.util.Set < com.android.tools.idea.wizard.dynamic.ScopedStateStore.Key > modified ) { super . deriveValues ( modified ) ; for ( com.android.tools.idea.wizard.dynamic.ScopedStateStore.Key key : modified ) { if ( key == ( NewCloudModuleDynamicWizardPath.KEY_SELECTED_TEMPLATE_FILE ) ) { java.io.File templateFile = myState.get ( NewCloudModuleDynamicWizardPath.KEY_SELECTED_TEMPLATE_FILE ) ; if ( templateFile != null ) { setModuleDescriptionText ( templateFile ) ; setModuleTypeIcon ( templateFile ) ; } } } }
public final void awaitTerminated ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.util.concurrent.TimeoutException { if ( monitor.enterWhenUninterruptibly ( isStopped , timeout , unit ) ) { try { checkCurrentState ( com.google.common.util.concurrent.Service.State.TERMINATED ) ; } finally { monitor.leave ( ) ; } } else { throw new java.util.concurrent.TimeoutException ( ( ( ( ( "Timed out waiting for " + ( this ) ) + " to reach a terminal state. " ) + "Current state: " ) + ( state ( ) ) ) ) ; } }
public boolean equals ( java.lang.Object object ) { if ( ( object == null ) || ( ( this . getClass ( ) ) != ( object.getClass ( ) ) ) ) { return false ; } proguard.evaluation.TracedStack other = ( ( proguard.evaluation.TracedStack ) ( object ) ) ; return ( ( super . equals ( object ) ) && ( this . producerStack.equals ( other.producerStack ) ) ) && ( this . actualProducerStack.equals ( other.actualProducerStack ) ) ; }
public void reportReplacedJar ( @ com.android.annotations.NonNull java.io.File jar , @ com.android.annotations.NonNull com.android.ide.common.repository.GradleCoordinate dependency ) { mJarDependencies.put ( jar , dependency ) ; if ( jar.equals ( mLastGuessedJar ) ) { boolean replaced = mGuessedDependencyVersions.remove ( jar.getName ( ) ) ; if ( replaced ) { mGuessedDependencyVersions.add ( ( ( ( ( ( jar.getName ( ) ) + " => version " ) + ( dependency.getFullRevision ( ) ) ) + " in " ) + ( dependency.toString ( ) ) ) ) ; } mLastGuessedJar = null ; } }
private static com.android.ide.common.internal.PngCruncher getCruncher ( ) { com.android.utils.ILogger logger = new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ; com.android.ide.common.process.ProcessExecutor processExecutor = new com.android.ide.common.process.DefaultProcessExecutor ( logger ) ; com.android.ide.common.process.ProcessOutputHandler processOutputHandler = new com.android.ide.common.process.LoggedProcessOutputHandler ( logger ) ; java.io.File aapt = com.android.builder.png.NinePatchAaptProcessorTestUtils.getAapt ( com.android.sdklib.repository.FullRevision.parseRevision ( "21" ) ) ; return new com.android.ide.common.internal.AaptCruncher ( aapt.getAbsolutePath ( ) , processExecutor , processOutputHandler ) ; }
private static void shutdownFifo ( ) { com.android.jack.server.Server.logger.log ( java.util.logging.Level.FINE , "Shutdown FIFO" ) ; com.android.jack.server.Server.stop = true ; com.android.jack.server.Server.Unblocker unblocker = new com.android.jack.server.Server.Unblocker ( ) ; unblocker.setName ( "Unblocker" ) ; unblocker.setDaemon ( true ) ; unblocker.start ( ) ; }
private void resetCdmaRoamingModeToDefault ( ) { mPhone = com.android.internal.telephony.PhoneFactory.getDefaultPhone ( ) ; int cdmaRoamingMode = com.android.phone.CdmaOptions.preferredCdmaRoamingMode ; int statusCdmaRoamingMode = com.android.internal.telephony.Phone.CDMA_RM_HOME ; mButtonCdmaRoam.setValue ( java.lang.Integer.toString ( cdmaRoamingMode ) ) ; android.provider.Settings.System.putInt ( mPhone.getContext ( ) . getContentResolver ( ) , android.provider.Settings.System.CDMA_ROAMING_MODE , cdmaRoamingMode ) ; mPhone.setCdmaRoamingPreference ( statusCdmaRoamingMode , this . obtainMessage ( com.android.phone.CdmaOptions.MyHandler.MESSAGE_SET_ROAMING_PREFERENCE ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; final com.android.tests.basic.Main a = getActivity ( ) ; assertNotNull ( a ) ; mTextView = ( ( android.widget.TextView ) ( a.findViewById ( R.id.text ) ) ) ; solo = new com.jayway.android.robotium.solo.Solo ( getInstrumentation ( ) , getActivity ( ) ) ; }
public android.os.Bundle getApplicationRestrictions ( @ android.annotation.Nullable android.content.ComponentName admin , java.lang.String packageName ) { throwIfParentInstance ( "getApplicationRestrictions" ) ; if ( ( mService ) != null ) { try { return mService.getApplicationRestrictions ( admin , mContext.getPackageName ( ) , packageName ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return null ; }
public static com.android.sdklib.internal.project.ProjectProperties load ( com.android.sdklib.io.IAbstractFolder projectFolder , com.android.sdklib.internal.project.ProjectProperties.PropertyType type ) { if ( projectFolder.exists ( ) ) { com.android.sdklib.io.IAbstractFile propFile = projectFolder.getFile ( type.mFilename ) ; if ( propFile.exists ( ) ) { java.util.Map < java.lang.String , java.lang.String > map = com.android.sdklib.SdkManager.parsePropertyFile ( propFile , null ) ; if ( map != null ) { return new com.android.sdklib.internal.project.ProjectProperties ( projectFolder , map , type ) ; } } } return null ; }
public void testCanReadPeersMacAddressCurrentProfileAndAllPermissions ( ) throws java.lang.Exception { boolean output = false ; mThrowSecurityException = false ; mUid = com.android.server.wifi.util.WifiPermissionsUtilTest.MANAGED_PROFILE_UID ; mPermissionsList.put ( mMacAddressPermission , mUid ) ; mWifiScanAllowApps = android.app.AppOpsManager.MODE_ALLOWED ; mMockUserInfo.id = mCallingUser ; setupTestCase ( ) ; com.android.server.wifi.util.WifiPermissionsUtil codeUnderTest = new com.android.server.wifi.util.WifiPermissionsUtil ( mMockPermissionsWrapper , mMockContext , mMockWifiSettingsStore , mMockUserManager , mNetworkScorerAppManager ) ; try { output = codeUnderTest.canAccessScanResults ( com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME , mUid , mTargetVersion ) ; } catch ( java.lang.SecurityException e ) { throw e ; } org.junit.Assert.assertEquals ( output , true ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( "IccIoResult sw1:0x" + ( java.lang.Integer.toHexString ( sw1 ) ) ) + " sw2:0x" ) + ( java.lang.Integer.toHexString ( sw2 ) ) ) + " Payload: " ) + ( ( android.os.Build.IS_DEBUGGABLE ) && ( android.os.Build.IS_ENG ) ? payload : "*******" ) ) + ( ! ( success ( ) ) ? " Error: " + ( getErrorString ( ) ) : "" ) ; }
private com.android.tools.lint.detector.api.Detector getDetectorInstance ( ) { if ( ( mDetector ) == null ) { mDetector = getDetector ( ) ; } return mDetector ; }
public void testStageInstallWithErrorCode_withBadlyFormedRevision ( ) throws java.lang.Exception { com.android.timezone.distro.DistroVersion validDistroVersion = new com.android.timezone.distro.DistroVersion ( 1 , 1 , libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; byte [ ] invalidRevisionBytes = validDistroVersion.toBytes ( ) ; invalidRevisionBytes [ ( ( invalidRevisionBytes.length ) - 3 ) ] = 'A' ; com.android.timezone.distro.TimeZoneDistro distro = createTimeZoneDistroWithVersionBytes ( invalidRevisionBytes ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( distro ) ) ; assertNoDistroOperationStaged ( ) ; assertNoInstalledDistro ( ) ; }
public void test_nullLocale_getInstance_TimeZone_Locale ( ) { assertCalendarConfigEquals ( java.util.Calendar.getInstance ( java.util.TimeZone.getDefault ( ) , java.util.Locale.getDefault ( ) ) , java.util.Calendar.getInstance ( java.util.TimeZone.getDefault ( ) , null ) ) ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setInfoResources ( R.string.ble_client_test_name , R.string.ble_insecure_client_test_info , ( - 1 ) ) ; mIntent = new android.content.Intent ( this , com.android.cts.verifier.bluetooth.BleClientService.class ) ; mIntent.setAction ( BleClientService.BLE_CLIENT_ACTION_CLIENT_CONNECT ) ; startService ( mIntent ) ; }
public void flushPackageRestrictionsAsUser ( int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) { return ; } enforceCrossUserPermission ( android.os.Binder.getCallingUid ( ) , userId , false , false , "flushPackageRestrictions" ) ; synchronized ( mPackages ) { mSettings.writePackageRestrictionsLPr ( userId ) ; mDirtyUsers.remove ( userId ) ; if ( mDirtyUsers.isEmpty ( ) ) { mHandler.removeMessages ( com.android.server.pm.PackageManagerService.WRITE_PACKAGE_RESTRICTIONS ) ; } } }
public void stopStreaming ( java.lang.String serviceId ) { com.android.phone.testapps.embmsmw.AppActiveStreams.StreamCallbackWithState entry = mStreamStates.get ( serviceId ) ; if ( entry != null ) { try { if ( ( entry.getState ( ) ) != ( android.telephony.mbms.StreamingService.STATE_STOPPED ) ) { entry.setState ( StreamingService.STATE_STOPPED ) ; entry.getCallback ( ) . streamStateUpdated ( StreamingService.STATE_STOPPED ) ; } } catch ( android.os.RemoteException e ) { dispose ( serviceId ) ; } } }
private java.lang.String sanitizePaths ( java.lang.String str ) { if ( str != null ) { java.lang.String osPath = getSdkManager ( ) . getLocation ( ) ; str = str.replace ( osPath , "@SDK" ) ; try { osPath = getAvdManager ( ) . getBaseAvdFolder ( ) ; str = str.replace ( osPath , "@AVD" ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException ignore ) { } str = str.replace ( java.io.File.separatorChar , '/' ) ; str = str.replace ( com.android.SdkConstants.mkSdCardCmdName ( ) , "mksdcard" ) ; } return str ; }
public void onDestroy ( ) { super . onDestroy ( ) ; final android.net.http.HttpResponseCache responseCache = mHttpResponseCache ; mHandler.post ( new java.lang.Runnable ( ) { public void run ( ) { try { if ( responseCache != null ) { responseCache.delete ( ) ; } } catch ( java.io.IOException e ) { android.util.Log.i ( com.android.statementservice.DirectStatementService.TAG , ( "HTTP(S) response cache deletion failed:" + e ) ) ; } android.os.Looper.myLooper ( ) . quit ( ) ; } } ) ; mHttpResponseCache = null ; }
public void testCustomElements ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <fantasy android:name=\"fantasyOne\" \n" ) + " no-ns-attribute=\"no-ns\" >\n" ) + " </fantasy>\n" ) + " <application android:label=\"@string/lib_name\" />\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <fantasy android:name=\"fantasyTwo\" \n" ) + " no-ns-attribute=\"no-ns\" >\n" ) + " </fantasy>\n" ) + " <acme:another acme:name=\"anotherOne\" \n" ) + " acme:ns-attribute=\"ns-value\" >\n" ) + " <some-child acme:child-attr=\"foo\" /> \n" ) + " </acme:another>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlLibraryFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertTrue ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.XmlElement rootNode = mergedDocument.get ( ) . getRootNode ( ) ; assertTrue ( rootNode.getNodeByTypeAndKey ( ManifestModel.NodeTypes.APPLICATION , null ) . isPresent ( ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = rootNode.getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; boolean foundFantasyOne = false ; boolean foundFantasyTwo = false ; boolean foundAnother = false ; org.w3c.dom.NodeList childNodes = rootNode.getXml ( ) . getChildNodes ( ) ; for ( int i = 0 ; i < ( childNodes.getLength ( ) ) ; i ++ ) { org.w3c.dom.Node item = childNodes.item ( i ) ; if ( item.getNodeName ( ) . equals ( "fantasy" ) ) { java.lang.String name = ( ( org.w3c.dom.Element ) ( item ) ) . getAttributeNS ( SdkConstants.ANDROID_URI , "name" ) ; if ( name.equals ( "fantasyOne" ) ) foundFantasyOne = true ; if ( name.equals ( "fantasyTwo" ) ) foundFantasyTwo = true ; } if ( item.getNodeName ( ) . equals ( "acme:another" ) ) { foundAnother = true ; } } assertTrue ( foundAnother ) ; assertTrue ( foundFantasyOne ) ; assertTrue ( foundFantasyTwo ) ; org.w3c.dom.Element validated = com.android.manifmerger.XmlDocumentTest.validate ( mergedDocument.get ( ) . prettyPrint ( ) ) ; org.w3c.dom.Node namedItem = validated.getAttributes ( ) . getNamedItem ( "xmlns:acme" ) ; assertEquals ( namedItem.getNodeValue ( ) , "http://acme.org/schemas" ) ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeParcelable ( new android.os.ParcelUuid ( mUuid ) , 0 ) ; out.writeInt ( mInstance ) ; out.writeInt ( mProperties ) ; out.writeInt ( mPermissions ) ; out.writeInt ( mKeySize ) ; out.writeInt ( mWriteType ) ; out.writeTypedList ( mDescriptors ) ; }
public void distanceRecorder_unprocessedChildThrowsException ( ) { final android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > distanceRecorder = new android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > ( android.support.test.espresso.util.TreeIterablesTest.complexTree , new android.support.test.espresso.util.TreeIterablesTest.TestElementTreeViewer ( ) ) ; expectedException.expect ( java.lang.RuntimeException.class ) ; distanceRecorder.getDistance ( android.support.test.espresso.util.TreeIterablesTest.complexTree.children.iterator ( ) . next ( ) ) ; }
public final void change ( T item ) { int oldIndex = indexWithId ( item ) ; if ( oldIndex != ( - 1 ) ) { T old = ( ( T ) ( com.android.tv.dvr.ui.SortedArrayAdapter.get ( oldIndex ) ) ) ; if ( ( mComparator.compare ( old , item ) ) == 0 ) { replace ( oldIndex , item ) ; return ; } remove ( old ) ; } add ( item ) ; }
public void onClick ( android.view.View view ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.speakerButtonListener" , "speaker request for voicemailUri: %s" , voicemailUri.toString ( ) ) ; android.media.AudioManager audioManager = ( ( android.media.AudioManager ) ( getContext ( ) . getSystemService ( android.media.AudioManager.class ) ) ) ; audioManager.setMode ( AudioManager.STREAM_MUSIC ) ; if ( audioManager.isSpeakerphoneOn ( ) ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.phoneButtonListener" , "speaker was on, turning it off" ) ; audioManager.setSpeakerphoneOn ( false ) ; } else { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.phoneButtonListener" , "speaker was off, turning it on" ) ; audioManager.setSpeakerphoneOn ( true ) ; } }
public void linkNativeLibraryDirectory ( java.lang.String uuid , java.lang.String packageName , java.lang.String nativeLibPath32 , int userId ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.linkNativeLibraryDirectory ( uuid , packageName , nativeLibPath32 , userId ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
private static boolean isCustomView ( org.w3c.dom.Element element ) { java.lang.String tag = element.getTagName ( ) ; if ( tag.equals ( com.android.SdkConstants.VIEW_TAG ) ) { return true ; } return ( ( tag.indexOf ( '.' ) ) != ( - 1 ) ) && ( ( ! ( tag.startsWith ( com.android.SdkConstants.ANDROID_PKG_PREFIX ) ) ) || ( tag.startsWith ( com.android.SdkConstants.ANDROID_SUPPORT_PKG_PREFIX ) ) ) ; }
private boolean isNetworkRecommendationsDisabled ( ) { final android.content.ContentResolver cr = mContext.getContentResolver ( ) ; return ( Settings.Global.getInt ( cr , Settings.Global.NETWORK_RECOMMENDATIONS_ENABLED , 0 ) ) != 1 ; }
public boolean resetPnoList ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "resetPnoList not supported" ) ; return false ; } else { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , ( "resetPnoList cmd " + ( com.android.server.wifi.WifiNative.sPnoCmdId ) ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { com.android.server.wifi.WifiNative.sPnoCmdId = com.android.server.wifi.WifiNative.getNewCmdIdLocked ( ) ; com.android.server.wifi.WifiNative.sPnoEventHandler = null ; if ( com.android.server.wifi.WifiNative.resetPnoListNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sPnoCmdId ) ) { return true ; } } return false ; } } }
public android.net.wifi.WifiConfiguration getCurrentWifiConfiguration ( ) { if ( ( mLastNetworkId ) == ( android.net.wifi.WifiConfiguration.INVALID_NETWORK_ID ) ) { return null ; } return mWifiConfigManager.getConfiguredNetwork ( mLastNetworkId ) ; }
public void onServiceConnected ( android.content.ComponentName componentName , android.os.IBinder service ) { android.telecom.Log.startSession ( "CSCR.oSC" ) ; try { synchronized ( mTelecomLock ) { android.telecom.Log.addEvent ( mCall , LogUtils.Events.SCREENING_BOUND , componentName ) ; if ( ! ( mHasFinished ) ) { onServiceBound ( ICallScreeningService.Stub.asInterface ( service ) ) ; } } } finally { android.telecom.Log.endSession ( ) ; } }
protected java.lang.String lintFiles ( java.lang.String ... relativePaths ) throws java.lang.Exception { java.util.List < java.io.File > files = new java.util.ArrayList < java.io.File > ( ) ; java.io.File targetDir = getTargetDir ( ) ; for ( java.lang.String relativePath : relativePaths ) { java.io.File file = getTestfile ( targetDir , relativePath ) ; assertNotNull ( file ) ; files.add ( file ) ; } com.android.tools.lint.checks.AbstractCheckTest.addManifestFile ( targetDir ) ; return checkLint ( files ) ; }
private int getPid ( java.nio.file.Path proc ) throws java.io.IOException { try { return java.lang.Integer.valueOf ( new java.lang.String ( java.nio.file.Files.readAllBytes ( proc.resolve ( "stat" ) ) ) . split ( " " ) [ 0 ] ) ; } catch ( java.io.IOException e ) { logWriter.printError ( "Failed to find real pid of process:" , e ) ; return - 1 ; } }
public void refreshRoutes ( ) { if ( mAttachedToWindow ) { mRoutes.clear ( ) ; mRoutes.addAll ( mRouter.getRoutes ( ) ) ; onFilterRoutes ( mRoutes ) ; java.util.Collections.sort ( mRoutes , android.support.v7.app.MediaRouteChooserDialog.RouteComparator.sInstance ) ; mAdapter.notifyDataSetChanged ( ) ; } }
private boolean shouldShowCallSubject ( com.android.incallui.call.DialerCall call ) { if ( call == null ) { return false ; } boolean isIncomingOrWaiting = ( ( primary.getState ( ) ) == ( com.android.incallui.call.state.DialerCallState.INCOMING ) ) || ( ( primary.getState ( ) ) == ( com.android.incallui.call.state.DialerCallState.CALL_WAITING ) ) ; return ( ( isIncomingOrWaiting && ( ! ( android.text.TextUtils.isEmpty ( call.getCallSubject ( ) ) ) ) ) && ( ( call.getNumberPresentation ( ) ) == ( android.telecom.TelecomManager.PRESENTATION_ALLOWED ) ) ) && ( call.isCallSubjectSupported ( ) ) ; }
public void setVideoProvider ( java.lang.String callId , com.android.internal.telecom.IVideoProvider videoProvider , android.telecom.Logging.Session.Info sessionInfo ) { java.lang.String callingPackage = mOurConnectionServiceImpl.getApplicationContext ( ) . getOpPackageName ( ) ; android.telecom.RemoteConnection.VideoProvider remoteVideoProvider = null ; if ( videoProvider != null ) { remoteVideoProvider = new android.telecom.RemoteConnection.VideoProvider ( videoProvider , callingPackage ) ; } findConnectionForAction ( callId , "setVideoProvider" ) . setVideoProvider ( remoteVideoProvider ) ; }
public final java.lang.String getClassName ( com.android.tools.perflib.heap.State state ) { com.android.tools.perflib.heap.ClassObj theClass ; if ( ( mType ) == ( RootType.SYSTEM_CLASS ) ) { theClass = state.findClass ( mId ) ; } else { theClass = state.findReference ( mId ) . getClassObj ( ) ; } if ( theClass == null ) { return "no class defined!!" ; } return theClass.mClassName ; }
private void createNewContactForRawContact ( com.android.providers.contacts.TransactionContext txContext , android.database.sqlite.SQLiteDatabase db , long rawContactId ) { mSelectionArgs1 [ 0 ] = java.lang.String.valueOf ( rawContactId ) ; computeAggregateData ( db , mRawContactsQueryByRawContactId , mSelectionArgs1 , mContactInsert ) ; long contactId = mContactInsert.executeInsert ( ) ; setContactIdAndMarkAggregated ( rawContactId , contactId ) ; mDbHelper.updateContactVisible ( txContext , contactId ) ; setPresenceContactId ( rawContactId , contactId ) ; updateAggregatedStatusUpdate ( contactId ) ; }
public void setKeepUninstalledPackages ( @ android.annotation.Nullable android.content.ComponentName admin , @ android.annotation.NonNull java.util.List < java.lang.String > packageNames ) { throwIfParentInstance ( "setKeepUninstalledPackages" ) ; if ( ( mService ) != null ) { try { mService.setKeepUninstalledPackages ( admin , mContext.getPackageName ( ) , packageNames ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public void dataCallListChanged ( int indicationType , java.util.ArrayList < android.hardware.radio.V1_0.SetupDataCallResult > dcList ) { mRil.processIndication ( indicationType ) ; java.util.ArrayList < com.android.internal.telephony.dataconnection.DataCallResponse > response = com.android.internal.telephony.RIL.convertHalDcList ( dcList ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_DATA_CALL_LIST_CHANGED , response ) ; mRil.mDataNetworkStateRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
public void sendUssd ( java.lang.String ussdMessage ) throws com.android.ims.ImsException { logi ( ( "sendUssd :: ussdMessage=" + ussdMessage ) ) ; synchronized ( mLockObj ) { if ( ( mSession ) == null ) { loge ( "sendUssd :: " ) ; throw new com.android.ims.ImsException ( "No call session" , android.telephony.ims.ImsReasonInfo.CODE_LOCAL_CALL_TERMINATED ) ; } mSession.sendUssd ( ussdMessage ) ; } }
public void test_d2i_SSL_SESSION ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 0 ] ) ; fail ( "Should throw IOException with invalid SSL_SESSION data" ) ; } catch ( java.io.IOException expected ) { } try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 1 ] ) ; fail ( "Should throw IOException with invalid SSL_SESSION data" ) ; } catch ( java.io.IOException expected ) { } }
java.security.MessageDigest createDigest ( org.bouncycastle.asn1.x509.AlgorithmIdentifier digAlgId ) throws java.security.GeneralSecurityException { java.security.MessageDigest dig ; try { dig = helper.createDigest ( org.bouncycastle.jcajce.util.JcaJceUtils.getDigestAlgName ( digAlgId.getAlgorithm ( ) ) ) ; } catch ( java.security.NoSuchAlgorithmException e ) { if ( ( org.bouncycastle.operator.jcajce.OperatorHelper.oids.get ( digAlgId.getAlgorithm ( ) ) ) != null ) { java.lang.String digestAlgorithm = ( ( java.lang.String ) ( org.bouncycastle.operator.jcajce.OperatorHelper.oids.get ( digAlgId.getAlgorithm ( ) ) ) ) ; dig = helper.createDigest ( digestAlgorithm ) ; } else { throw e ; } } return dig ; }
java.lang.String getRemoteName ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ( mRemoteDevices ) == null ) return null ; com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties ( device ) ; if ( deviceProp == null ) return null ; return deviceProp.getName ( ) ; }
public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser ( ) { if ( ! ( getLeAccess ( ) ) ) { return null ; } if ( ! ( isMultipleAdvertisementSupported ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "Bluetooth LE advertising not supported" ) ; return null ; } synchronized ( mLock ) { if ( ( android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser ) == null ) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser ( mManagerService ) ; } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser ; }
com.android.sched.vfs.ParentVFile createVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.ParentVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed ( ) ) ; assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ) != 0 ; java.io.File path = getNativeFile ( parent.getPath ( ) , name ) ; try { com.android.sched.util.file.AbstractStreamFile.create ( path , new com.android.sched.util.location.FileLocation ( path ) ) ; } catch ( com.android.sched.util.file.FileAlreadyExistsException e ) { } return new com.android.sched.vfs.ParentVFile ( this , parent , name ) ; }
boolean sendData ( android.bluetooth.BluetoothDevice device , java.lang.String report ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "sendData: " + ( device.getAddress ( ) ) ) ) ; } int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothHidHost.STATE_CONNECTED ) ) { return false ; } return sendDataNative ( com.android.bluetooth.Utils.getByteAddress ( device ) , report ) ; }
protected final boolean closeImpl ( ) throws java.io.IOException { if ( ! ( isClosed ) ) { isClosed = true ; try { sun.nio.fs.UnixNativeDispatcher.closedir ( dp ) ; } catch ( sun.nio.fs.UnixException x ) { throw new java.io.IOException ( x.errorString ( ) ) ; } guard.close ( ) ; return true ; } else { return false ; } }
private static com.google.doclava.ParamTagInfo convertParamTag ( com.sun.javadoc.ParamTag tag , com.google.doclava.ContainerInfo base ) { return new com.google.doclava.ParamTagInfo ( tag.name ( ) , tag.kind ( ) , tag.text ( ) , tag.isTypeParameter ( ) , tag.parameterComment ( ) , tag.parameterName ( ) , base , com.google.doclava.Converter.convertSourcePosition ( tag.position ( ) ) ) ; }
private boolean isDevicesExtra ( java.io.File item ) { java.io.File properties = new java.io.File ( item , com.android.SdkConstants.FN_SOURCE_PROP ) ; try { java.io.BufferedReader propertiesReader = new java.io.BufferedReader ( new java.io.FileReader ( properties ) ) ; try { java.lang.String line ; while ( ( line = propertiesReader.readLine ( ) ) != null ) { java.util.regex.Matcher m = com.android.sdklib.devices.DeviceManager.PATH_PROPERTY_PATTERN.matcher ( line ) ; if ( m.matches ( ) ) { return true ; } } } finally { propertiesReader.close ( ) ; } } catch ( java.io.IOException ignore ) { } return false ; }
public android.net.IpSecTransform buildTransportModeTransform ( @ android.annotation.NonNull java.net.InetAddress sourceAddress , @ android.annotation.NonNull android.net.IpSecManager.SecurityParameterIndex spi ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { com.android.internal.util.Preconditions.checkNotNull ( sourceAddress ) ; com.android.internal.util.Preconditions.checkNotNull ( spi ) ; if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setMode ( android.net.IpSecTransform.MODE_TRANSPORT ) ; mConfig.setSourceAddress ( sourceAddress.getHostAddress ( ) ) ; mConfig.setSpiResourceId ( spi.getResourceId ( ) ) ; return new android.net.IpSecTransform ( mContext , mConfig ) . activate ( ) ; }
public java.lang.String createNetworkSpecifier ( @ android.net.wifi.nan.WifiNanManager.DataPathRole int role , int peerId , @ android.annotation.Nullable byte [ ] token ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "createNetworkSpecifier: called on terminated session" ) ; return null ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "createNetworkSpecifier: called post GC on WifiNanManager" ) ; return null ; } return mgr.createNetworkSpecifier ( mClientId , role , mSessionId , peerId , token ) ; } }
public void testMultipleProjects ( ) throws java.lang.Exception { java.io.File project = getProjectDir ( null , "bytecode/classes.jar=>libs/classes.jar" ) ; checkDriver ( "" , "The --sources, --classpath, --libraries and --resources arguments can only be used with a single project\n" , new java.lang.String [ ] { "--libraries" , new java.io.File ( project , "libs/classes.jar" ) . getPath ( ) , "--disable" , "LintError" , project.getPath ( ) , project.getPath ( ) } ) ; }
public java.net.Socket createSocket ( java.lang.String host , int port ) throws java.io.IOException { com.android.org.conscrypt.OpenSSLSocketImpl s = ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( host , port ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeString ( username ) ; dest.writeString ( password ) ; dest.writeInt ( ( machineManaged ? 1 : 0 ) ) ; dest.writeString ( softTokenApp ) ; dest.writeInt ( ( ableToShare ? 1 : 0 ) ) ; dest.writeInt ( eapType ) ; dest.writeString ( nonEapInnerMethod ) ; }
private java.lang.String getApkName ( final java.lang.String split ) { java.lang.String archivesBaseName = ( ( java.lang.String ) ( getProject ( ) . getProperties ( ) . get ( "archivesBaseName" ) ) ) ; java.lang.String apkName = ( ( ( archivesBaseName + "-" ) + ( getOutputBaseName ( ) ) ) + "_" ) + split ; return apkName + ( ( getSigningConfig ( ) ) == null ? "-unsigned.apk" : "-unaligned.apk" ) ; }
private static void addToElement ( com.android.manifmerger.ManifestMerger2.SystemProperty systemProperty , com.android.manifmerger.ActionRecorder actionRecorder , java.lang.String value , com.android.manifmerger.XmlElement to ) { to.getXml ( ) . setAttribute ( systemProperty.toCamelCase ( ) , value ) ; com.android.manifmerger.XmlAttribute xmlAttribute = new com.android.manifmerger.XmlAttribute ( to , to.getXml ( ) . getAttributeNode ( systemProperty.toCamelCase ( ) ) , null ) ; actionRecorder.recordAttributeAction ( xmlAttribute , new com.android.manifmerger.Actions.AttributeRecord ( Actions.ActionType.INJECTED , new com.android.manifmerger.Actions.ActionLocation ( to.getSourceLocation ( ) , PositionImpl.UNKNOWN ) , xmlAttribute.getId ( ) , null , null ) ) ; }
synchronized void setSelectedClient ( com.android.ddmlib.Client selectedClient ) { if ( ( com.android.ddmlib.MonitorThread.sInstance ) == null ) { return ; } if ( ( mSelectedClient ) != selectedClient ) { com.android.ddmlib.Client oldClient = mSelectedClient ; mSelectedClient = selectedClient ; if ( oldClient != null ) { oldClient.update ( Client.CHANGE_PORT ) ; } if ( ( mSelectedClient ) != null ) { mSelectedClient.update ( Client.CHANGE_PORT ) ; } } }
public void testTargetSandboxVersion2AndHigher ( ) throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified ( verify ( "targetSandboxVersion-2.apk" ) ) ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verify ( "v2-only-targetSandboxVersion-2.apk" ) , Issue.JAR_SIG_NO_MANIFEST ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verifyForMinSdkVersion ( "v2-only-targetSandboxVersion-2.apk" , 24 ) ) ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verify ( "v1-only-targetSandboxVersion-2.apk" ) , Issue.NO_SIG_FOR_TARGET_SANDBOX_VERSION ) ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verify ( "unsigned-targetSandboxVersion-2.apk" ) , Issue.NO_SIG_FOR_TARGET_SANDBOX_VERSION ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verify ( "v2-only-targetSandboxVersion-3.apk" ) ) ; }
public void test_with_adjustment ( ) { final java.time.LocalTime sample = java.time.LocalTime.of ( 23 , 5 ) ; java.time.temporal.TemporalAdjuster adjuster = new java.time.temporal.TemporalAdjuster ( ) { @ java.lang.Override public java.time.temporal.Temporal adjustInto ( java.time.temporal.Temporal dateTime ) { return sample ; } } ; org.testng.Assert.assertEquals ( tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.with ( adjuster ) , sample ) ; }
private java.lang.String decodeMessage ( android.os.Message msg ) { if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_QUIT ) ) { return "EVENT_QUIT" ; } else if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_CONTINUE_MMS_CONNECTIVITY ) ) { return "EVENT_CONTINUE_MMS_CONNECTIVITY" ; } else if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_TRANSACTION_REQUEST ) ) { return "EVENT_TRANSACTION_REQUEST" ; } else if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_HANDLE_NEXT_PENDING_TRANSACTION ) ) { return "EVENT_HANDLE_NEXT_PENDING_TRANSACTION" ; } else if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_NEW_INTENT ) ) { return "EVENT_NEW_INTENT" ; } return "unknown message.what" ; }
public void invokevirtual ( final java.lang.String owner , final java.lang.String name , final java.lang.String desc , final boolean itf ) { if ( ( api ) < ( org.objectweb.asm.Opcodes.ASM5 ) ) { if ( itf ) { throw new java.lang.IllegalArgumentException ( "INVOKEVIRTUAL on interfaces require ASM 5" ) ; } invokevirtual ( owner , name , desc ) ; return ; } mv.visitMethodInsn ( Opcodes.INVOKEVIRTUAL , owner , name , desc , itf ) ; }
private org.w3c.dom.Element findOuterScrollingWidget ( org.w3c.dom.Node node , boolean vertical ) { java.util.Collection < java.lang.String > applicableElements = getApplicableElements ( ) ; while ( node != null ) { if ( node instanceof org.w3c.dom.Element ) { org.w3c.dom.Element element = ( ( org.w3c.dom.Element ) ( node ) ) ; java.lang.String tagName = element.getTagName ( ) ; if ( ( applicableElements.contains ( tagName ) ) && ( vertical == ( com.android.tools.lint.checks.NestedScrollingWidgetDetector.isVerticalScroll ( element ) ) ) ) { return element ; } } node = node.getParentNode ( ) ; } return null ; }
private static void checkName ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String displayName ) { if ( name.startsWith ( com.android.builder.BuilderConstants.INSTRUMENT_TEST ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "%1$s names cannot start with '%2$s'" , displayName , com.android.builder.BuilderConstants.INSTRUMENT_TEST ) ) ; } if ( name.startsWith ( com.android.builder.BuilderConstants.UI_TEST ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "%1$s names cannot start with %2$s" , displayName , com.android.builder.BuilderConstants.UI_TEST ) ) ; } if ( com.android.builder.BuilderConstants.LINT.equals ( name ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "%1$s names cannot be %2$s" , displayName , com.android.builder.BuilderConstants.LINT ) ) ; } }
public boolean isRoot ( ) { if ( ( ( ( mParent ) != null ) && ( mParent.mName.endsWith ( "GestureOverlayView" ) ) ) && ( mParent.isRoot ( ) ) ) { return true ; } return ( ( ( mUiViewNode ) == null ) || ( ( mUiViewNode.getUiParent ( ) ) == null ) ) || ( ( mUiViewNode.getUiParent ( ) . getUiParent ( ) ) == null ) ; }
public void testGoogleNowWelcomeViewWatcher ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; android.support.test.uiautomator.UiDevice device = testFramework.getDevice ( ) ; device.registerWatcher ( com.android.devtools.systemimage.uitest.watchers.GoogleNowWelcomeViewWatcher.class . getName ( ) , new com.android.devtools.systemimage.uitest.watchers.GoogleNowWelcomeViewWatcher ( device ) ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Google" ) ; device.removeWatcher ( com.android.devtools.systemimage.uitest.watchers.GoogleNowWelcomeViewWatcher.class . getName ( ) ) ; }
private static org.eclipse.jdt.internal.compiler.lookup.MethodBinding findSuperMethodBinding ( @ com.android.annotations.NonNull org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding ) { try { org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding superclass = binding.declaringClass.superclass ( ) ; while ( superclass != null ) { org.eclipse.jdt.internal.compiler.lookup.MethodBinding [ ] methods = superclass.getMethods ( binding.selector , binding.parameters.length ) ; for ( org.eclipse.jdt.internal.compiler.lookup.MethodBinding method : methods ) { if ( method.areParameterErasuresEqual ( binding ) ) { return method ; } } superclass = superclass.superclass ( ) ; } } catch ( java.lang.Exception ignore ) { } return null ; }
private com.android.sdklib.internal.repository.packages.License parseLicense ( @ com.android.annotations.NonNull org.w3c.dom.Node packageNode , @ com.android.annotations.NonNull java.util.Map < java.lang.String , java.lang.String > licenses ) { org.w3c.dom.Node usesLicense = com.android.sdklib.internal.repository.packages.PackageParserUtils.findChildElement ( packageNode , SdkRepoConstants.NODE_USES_LICENSE ) ; if ( usesLicense != null ) { org.w3c.dom.Node ref = usesLicense.getAttributes ( ) . getNamedItem ( SdkRepoConstants.ATTR_REF ) ; if ( ref != null ) { java.lang.String licenseRef = ref.getNodeValue ( ) ; return new com.android.sdklib.internal.repository.packages.License ( licenses.get ( licenseRef ) , licenseRef ) ; } } return null ; }
private void transformStaticValues ( com.android.dex.Dex in , com.android.dx.merge.IndexMap indexMap ) { com.android.dex.TableOfContents.Section section = in.getTableOfContents ( ) . encodedArrays ; if ( section.exists ( ) ) { com.android.dex.Dex.Section staticValuesIn = in.open ( section.off ) ; for ( int i = 0 ; i < ( section.size ) ; i ++ ) { transformStaticValues ( staticValuesIn , indexMap ) ; } } }
private java.io.File createFileFromStr ( java.lang.String configStr , java.lang.String module ) throws java.io.IOException { java.io.File file = java.io.File.createTempFile ( module , "dynamic" ) ; java.io.FileOutputStream stream = null ; try { stream = new java.io.FileOutputStream ( file ) ; stream.write ( configStr.getBytes ( ) ) ; stream.flush ( ) ; } finally { com.android.tradefed.util.StreamUtil.close ( stream ) ; } return file ; }
public boolean setExternalSim ( boolean external ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.setExternalSim ( external ) ; } else { java.lang.String value = ( external ) ? "1" : "0" ; android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , ( "Setting external_sim to " + value ) ) ; return doBooleanCommand ( ( "SET external_sim " + value ) ) ; } }
public void onReceive ( android.content.Context context , android.content.Intent intent , android.bluetooth.BluetoothDevice device ) { int state = intent.getIntExtra ( BluetoothAdapter.EXTRA_STATE , BluetoothAdapter.ERROR ) ; if ( state == ( android.bluetooth.BluetoothAdapter.STATE_OFF ) ) { context.unregisterReceiver ( mProfileBroadcastReceiver ) ; registerProfileIntentReceiver ( ) ; } mLocalAdapter.setBluetoothStateInt ( state ) ; synchronized ( mCallbacks ) { for ( com.android.settingslib.bluetooth.BluetoothCallback callback : mCallbacks ) { callback.onBluetoothStateChanged ( state ) ; } } mDeviceManager.onBluetoothStateChanged ( state ) ; }
public static void v ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.sIsUserExtendedLoggingEnabled ) { android.telecom.Log.maybeDisableLogging ( ) ; android.util.Slog.i ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } else if ( android.telecom.Log.VERBOSE ) { android.util.Slog.v ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public void TestPatternWhitespace ( ) { java.lang.String r = "a > ‎ b;" ; com.ibm.icu.text.Transliterator t = com.ibm.icu.text.Transliterator.createFromRules ( "test" , r , Transliterator.FORWARD ) ; com.ibm.icu.dev.test.translit.TransliteratorTest.expect ( t , "a" , "b" ) ; com.ibm.icu.text.UnicodeSet set = new com.ibm.icu.text.UnicodeSet ( "[a ‎]" ) ; if ( set.contains ( 8206 ) ) { errln ( "FAIL: U+200E not being ignored by UnicodeSet" ) ; } }
public void testPocBug_35644815 ( ) throws java.lang.Exception { enableAdbRoot ( getDevice ( ) ) ; if ( containsDriver ( getDevice ( ) , "/sys/kernel/debug/ion/clients/pids/" ) ) { java.lang.String pocOut = android.security.cts.AdbUtils.runPoc ( "Bug-35644815" , getDevice ( ) , 60 ) ; assertNotMatches ( "[\\s\\n\\S]*INFO DISC FLAG[\\s\\n\\S]*" , pocOut ) ; } }
private boolean updateClosedCaptionAction ( ) { return updateActionDescription ( MenuAction.SELECT_CLOSED_CAPTION_ACTION ) ; }
private void setCertificate ( byte [ ] cert_der ) { try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance ( "X.509" ) ; java.security.cert.X509Certificate cert = ( ( java.security.cert.X509Certificate ) ( cf.generateCertificate ( new java.io.ByteArrayInputStream ( cert_der ) ) ) ) ; mCallbackProxy.onReceivedCertificate ( new android.net.http.SslCertificate ( cert ) ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( android.webkit.BrowserFrame.LOGTAG , "Can't get the certificate from WebKit, canceling" ) ; return ; } }
public void onServiceConnected ( android.content.ComponentName name , android.os.IBinder service ) { android.telecom.Log.startSession ( "ICSBC.oSC" ) ; synchronized ( mLock ) { try { android.telecom.Log.d ( this , "onServiceConnected: %s %b %b" , name , mIsBound , mIsConnected ) ; mIsBound = true ; if ( mIsConnected ) { onConnected ( service ) ; } } finally { android.telecom.Log.endSession ( ) ; } } }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.RunnableHooks hooks = context.getRunnableHooks ( ) ; try { return new com.android.sched.vfs.ReadWriteZipFS ( new com.android.sched.util.file.OutputZipFile ( context.getWorkingDirectory ( ) , string , hooks , existence , change ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public java.io.Writer append ( java.lang.CharSequence csq , int start , int end ) { com.google.common.base.Preconditions.checkPositionIndexes ( start , end , csq.length ( ) ) ; return this ; }
private static void rotateDexFile ( ) { if ( ( com.android.dx.command.dexer.Main.outputDex ) != null ) { if ( ( com.android.dx.command.dexer.Main.dexOutPool ) != null ) { com.android.dx.command.dexer.Main.dexOutputFutures.add ( com.android.dx.command.dexer.Main.dexOutPool.submit ( new com.android.dx.command.dexer.Main.DexWriter ( com.android.dx.command.dexer.Main.outputDex ) ) ) ; } else { com.android.dx.command.dexer.Main.dexOutputArrays.add ( com.android.dx.command.dexer.Main.writeDex ( com.android.dx.command.dexer.Main.outputDex ) ) ; } } com.android.dx.command.dexer.Main.createDexFile ( ) ; }
public boolean enableNoAutoConnect ( ) { if ( ( isEnabled ( ) ) == true ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enableNoAutoConnect(): BT already enabled!" ) ; return true ; } try { return mManagerService.enableNoAutoConnect ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public void SSL_use_certificate_NullArguments ( ) throws java.lang.Exception { org.conscrypt.NativeCrypto.SSL_use_certificate ( org.conscrypt.NativeCryptoTest.NULL , null ) ; }
private void testScriptSide ( android.renderscript.RenderScript pRS ) { com.android.rs.test.ScriptC_sampler s = new com.android.rs.test.ScriptC_sampler ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_sampler_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; s.destroy ( ) ; }
public void TestGetAvailable ( ) { com.ibm.icu.util.ULocale [ ] locales = com.ibm.icu.util.ULocale.getAvailableLocales ( ) ; if ( ( locales.length ) < 10 ) { errln ( "Did not get the correct result from getAvailableLocales" ) ; } if ( ! ( locales [ ( ( locales.length ) - 1 ) ] . getName ( ) . equals ( "zu_ZA" ) ) ) { errln ( "Did not get the expected result" ) ; } }
public boolean performAccessibilityAction ( final int action , final android.os.Bundle arguments ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return performAccessibilityAction ( action , arguments ) ; } } ) ; return ret ; } if ( mAwContents.supportsAccessibilityAction ( action ) ) { return mAwContents.performAccessibilityAction ( action , arguments ) ; } return mWebViewPrivate.super_performAccessibilityAction ( action , arguments ) ; }
public static com.android.jack.dx.rop.cst.CstNat createSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId field ) { java.lang.String fieldName = field.getName ( ) ; java.lang.String fieldSignature = com.android.jack.backend.dex.rop.RopHelper.formatterWithClosure.getName ( field.getType ( ) , false ) ; if ( fieldSignature.startsWith ( "\\" ) ) { fieldSignature = "L" + ( fieldSignature.substring ( 1 ) ) ; } com.android.jack.dx.rop.cst.CstString name = new com.android.jack.dx.rop.cst.CstString ( fieldName ) ; com.android.jack.dx.rop.cst.CstString descriptor = new com.android.jack.dx.rop.cst.CstString ( fieldSignature ) ; com.android.jack.dx.rop.cst.CstNat signature = new com.android.jack.dx.rop.cst.CstNat ( name , descriptor ) ; return signature ; }
public int getFeatureStatus ( ) { synchronized ( mLock ) { if ( ( isBinderAlive ( ) ) && ( ( mFeatureStatusCached ) != null ) ) { android.util.Log.i ( LOG_TAG , ( "getFeatureStatus - returning cached: " + ( mFeatureStatusCached ) ) ) ; return mFeatureStatusCached ; } } java.lang.Integer status = retrieveFeatureStatus ( ) ; synchronized ( mLock ) { if ( status == null ) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE ; } mFeatureStatusCached = status ; } android.util.Log.i ( LOG_TAG , ( "getFeatureStatus - returning " + status ) ) ; return status ; }
private java.util.List < java.lang.String > _getAllProvidersLocked ( ) { if ( com.android.server.LocationManagerService.LOCAL_LOGV ) { android.util.Log.v ( com.android.server.LocationManagerService.TAG , "getAllProviders" ) ; } java.util.ArrayList < java.lang.String > out = new java.util.ArrayList < java.lang.String > ( mProviders.size ( ) ) ; for ( int i = ( mProviders.size ( ) ) - 1 ; i >= 0 ; i -- ) { com.android.internal.location.LocationProviderProxy p = mProviders.get ( i ) ; out.add ( p.getName ( ) ) ; } return out ; }
public void addActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream , int mode ) { if ( ( findDownstream ( downstream ) ) == null ) { if ( mActiveDownstreams.offer ( new com.android.server.connectivity.tethering.IPv6TetheringCoordinator.Downstream ( downstream , mode , mNextSubnetId ) ) ) { mNextSubnetId = ( ( short ) ( java.lang.Math.max ( 0 , ( ( mNextSubnetId ) + 1 ) ) ) ) ; } updateIPv6TetheringInterfaces ( ) ; } }
public java.lang.String [ ] getProjectOutputs ( ) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IFolder outputFolder = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getOutputFolder ( mProject ) ; java.util.List < org.eclipse.core.resources.IProject > javaProjects = com.android.ide.eclipse.adt.internal.project.ProjectHelper.getReferencedProjects ( mProject ) ; java.util.List < org.eclipse.jdt.core.IJavaProject > referencedJavaProjects = com.android.ide.eclipse.adt.internal.build.BuildHelper.getJavaProjects ( javaProjects ) ; java.util.List < java.lang.String > projectOutputs = getProjectOutputs ( referencedJavaProjects ) ; projectOutputs.add ( 0 , outputFolder.getLocation ( ) . toOSString ( ) ) ; return projectOutputs.toArray ( new java.lang.String [ projectOutputs.size ( ) ] ) ; }
public java.util.List < ? extends com.android.tools.idea.run.CloudConfiguration > getAllCloudConfigurations ( @ org.jetbrains.annotations.NotNull org.jetbrains.android.facet.AndroidFacet facet ) { try { com.google.gct.testing.launcher.CloudAuthenticator.prepareCredential ( ) ; } catch ( java.lang.Exception e ) { return com.google.common.collect.Lists.newArrayList ( ) ; } java.util.List < com.google.gct.testing.CloudPersistentConfiguration > cloudPersistentConfigurations = com.google.gct.testing.CloudCustomPersistentConfigurations.getInstance ( facet.getModule ( ) ) . getState ( ) . myCloudPersistentConfigurations ; return com.google.common.collect.Lists.newArrayList ( com.google.common.collect.Iterables.concat ( com.google.gct.testing.CloudConfigurationProviderImpl.deserializeConfigurations ( cloudPersistentConfigurations , true , facet ) , getDefaultConfigurations ( facet , com.android.tools.idea.run.CloudConfiguration.Kind.MATRIX ) , getDefaultConfigurations ( facet , com.android.tools.idea.run.CloudConfiguration.Kind.SINGLE_DEVICE ) ) ) ; }
void broadcastOnSdkLoaded ( ) { if ( ( ( mWindowShell ) != null ) && ( ( mListeners.size ( ) ) > 0 ) ) { mWindowShell.getDisplay ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { for ( com.android.sdkuilib.repository.ISdkChangeListener listener : mListeners ) { try { listener.onSdkLoaded ( ) ; } catch ( java.lang.Throwable t ) { mSdkLog.error ( t , null ) ; } } } } ) ; } }
public java.lang.String getMacAddress ( ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.getMacAddress ( ) ; } else { java.lang.String ret = doStringCommand ( "DRIVER MACADDR" ) ; if ( ! ( android.text.TextUtils.isEmpty ( ret ) ) ) { java.lang.String [ ] tokens = ret.split ( " = " ) ; if ( ( tokens.length ) == 2 ) return tokens [ 1 ] ; } return null ; } }
public void onTargetChange ( ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData = mConfigComposite.onXmlModelLoaded ( ) ; if ( targetData != null ) { com.android.ide.common.layoutlib.LayoutLibrary layoutLib = targetData.getLayoutLibrary ( ) ; setClippingSupport ( ( ( layoutLib.getBridge ( ) . getApiLevel ( ) ) >= 4 ) ) ; } mConfigListener.onConfigurationChange ( ) ; }
public void getCDMASubscription ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_SUBSCRIPTION , response , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
public void testRSUnitTest ( ) throws java.lang.Exception { java.lang.String thisDeviceName = android.os.Build.DEVICE ; int thisApiVersion = android.os.Build.VERSION.SDK_INT ; android.util.Log.i ( com.android.rs.test.RSTest.TAG , java.lang.String.format ( ( "RenderScript testing (%s) " + "on device %s, API version %d" ) , mTest.toString ( ) , thisDeviceName , thisApiVersion ) ) ; mTest.runTest ( ) ; org.junit.Assert.assertTrue ( mTest.getSuccess ( ) ) ; }
private void assertNoContentInstalled ( ) throws java.lang.Exception { assertNull ( installer.getInstalledDistroVersion ( ) ) ; java.io.File currentTzDataDir = installer.getCurrentTzDataDir ( ) ; assertFalse ( currentTzDataDir.exists ( ) ) ; java.io.File workingDir = installer.getWorkingDir ( ) ; assertFalse ( workingDir.exists ( ) ) ; java.io.File oldDataDir = installer.getOldTzDataDir ( ) ; assertFalse ( oldDataDir.exists ( ) ) ; }
public final boolean bool_literal ( ) throws org.jf.smali.RecognitionException { boolean value = false ; org.antlr.runtime.tree.CommonTree BOOL_LITERAL212 = null ; try { { BOOL_LITERAL212 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.BOOL_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_BOOL_LITERAL_in_bool_literal3504 ) ) ) ; value = java.lang.Boolean.parseBoolean ( ( BOOL_LITERAL212 != null ? BOOL_LITERAL212.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public static void setBlocking ( java.io.FileDescriptor fd , boolean blocking ) throws java.io.IOException { try { int flags = Libcore.os.fcntlVoid ( fd , libcore.io.F_GETFL ) ; if ( ! blocking ) { flags |= O_NONBLOCK ; } else { flags &= ~ ( O_NONBLOCK ) ; } Libcore.os.fcntlInt ( fd , libcore.io.F_SETFL , flags ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } }
private java.lang.String getRClassName ( org.eclipse.core.resources.IProject project ) { org.eclipse.core.resources.IFile manifestFile = com.android.ide.eclipse.adt.internal.project.ProjectHelper.getManifest ( project ) ; if ( ( manifestFile != null ) && ( manifestFile.isSynchronized ( IResource.DEPTH_ZERO ) ) ) { com.android.sdklib.xml.ManifestData data = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( manifestFile ) ; if ( data != null ) { java.lang.String javaPackage = data.getPackage ( ) ; return javaPackage + ".R" ; } } return null ; }
public void prepareToLeaveProcess ( boolean leavingPackage ) { final int size = mItems.size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final android.content.ClipData.Item item = mItems.get ( i ) ; if ( ( item.mIntent ) != null ) { item.mIntent.prepareToLeaveProcess ( leavingPackage ) ; } if ( ( ( ( item.mUri ) != null ) && ( android.os.StrictMode.vmFileUriExposureEnabled ( ) ) ) && leavingPackage ) { item.mUri.checkFileUriExposed ( "ClipData.Item.getUri()" ) ; } } }
public void testLibsManifestMerging ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libsTest" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "libapp/build/" + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/bundles/release/AndroidManifest.xml" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; assertTrue ( fileOutput.exists ( ) ) ; }
public void onCreateActions ( java.util.List < android.support.v17.leanback.widget.GuidedAction > actions , android.os.Bundle savedInstanceState ) { int position = 0 ; for ( com.android.tv.dvr.data.SeriesRecording seriesRecording : mSeriesRecordings ) { actions.add ( new android.support.v17.leanback.widget.GuidedAction.Builder ( getActivity ( ) ) . id ( ( position ++ ) ) . title ( seriesRecording.getTitle ( ) ) . build ( ) ) ; } }
public java.lang.String getDisplayLanguage ( java.util.Locale locale ) { if ( languageCode.isEmpty ( ) ) { return "" ; } java.lang.String localeString = toString ( ) ; if ( languageCode.equals ( "tl" ) ) { localeString = java.util.Locale.toNewString ( "fil" , countryCode , variantCode ) ; } java.lang.String result = libcore.icu.ICU.getDisplayLanguageNative ( localeString , locale.toString ( ) ) ; if ( result == null ) { result = libcore.icu.ICU.getDisplayLanguageNative ( localeString , java.util.Locale.getDefault ( ) . toString ( ) ) ; } return result ; }
static boolean isLocalTone ( com.android.ims.ImsCall imsCall ) { if ( ( ( imsCall == null ) || ( ( imsCall.getCallProfile ( ) ) == null ) ) || ( ( imsCall.getCallProfile ( ) . mMediaProfile ) == null ) ) { return false ; } android.telephony.ims.ImsStreamMediaProfile mediaProfile = imsCall.getCallProfile ( ) . mMediaProfile ; return ( mediaProfile.mAudioDirection ) == ( android.telephony.ims.ImsStreamMediaProfile.DIRECTION_INACTIVE ) ? true : false ; }
protected void registerTabs ( ) { addFailuresTab ( ) ; if ( ! ( getResults ( ) . getPackages ( ) . isEmpty ( ) ) ) { addTab ( "Packages" , new org.gradle.api.internal.ErroringAction < org.gradle.api.internal.html.SimpleHtmlWriter > ( ) { @ java.lang.Override protected void doExecute ( org.gradle.api.internal.html.SimpleHtmlWriter writer ) throws java.io.IOException { renderPackages ( writer ) ; } } ) ; } addTab ( "Classes" , new org.gradle.api.internal.ErroringAction < org.gradle.api.internal.html.SimpleHtmlWriter > ( ) { @ java.lang.Override public void doExecute ( org.gradle.api.internal.html.SimpleHtmlWriter htmlWriter ) throws java.io.IOException { renderClasses ( htmlWriter ) ; } } ) ; }
public static android.telecom.DisconnectCause toTelecomDisconnectCause ( int telephonyDisconnectCause , int telephonyPerciseDisconnectCause , java.lang.String reason ) { android.content.Context context = com.android.phone.PhoneGlobals.getInstance ( ) ; return new android.telecom.DisconnectCause ( com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseCode ( telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseLabel ( context , telephonyDisconnectCause , telephonyPerciseDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseDescription ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectReason ( context , telephonyDisconnectCause , reason ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseTone ( telephonyDisconnectCause ) ) ; }
public java.io.FileDescriptor openSocketFd ( java.lang.String host , int port , int timeoutMs ) throws android.os.RemoteException , android.system.ErrnoException , java.io.IOException { android.os.ParcelFileDescriptor pfd = mService.openSocketFd ( host , port , timeoutMs ) ; java.io.FileDescriptor fd = android.system.Os.dup ( pfd.getFileDescriptor ( ) ) ; pfd.close ( ) ; return fd ; }
protected void mergeDex ( @ javax.annotation.Nonnull com.android.jack.tools.merger.JackMerger merger , com.android.sched.vfs.InputVFile inputDex ) throws com.android.jack.backend.dex.DexWritingException , com.android.jack.tools.merger.MergingOverflowException { try { merger.addDexFile ( new com.android.jack.dx.io.DexBuffer ( inputDex.getInputStream ( ) ) ) ; } catch ( java.io.IOException e ) { throw new com.android.jack.backend.dex.DexWritingException ( new com.android.sched.util.file.CannotReadException ( inputDex , e ) ) ; } }
public void testDecode_truncated ( ) throws java.lang.Exception { assertEquals ( "hello, world" , libcore.io.Base64Test.decodeToString ( "aGVsbG8sIHdvcmxk" ) ) ; assertEquals ( "hello, wo" , libcore.io.Base64Test.decodeToString ( "aGVsbG8sIHdvcmx" ) ) ; assertEquals ( "hello, wo" , libcore.io.Base64Test.decodeToString ( "aGVsbG8sIHdvcm" ) ) ; assertEquals ( "hello, wo" , libcore.io.Base64Test.decodeToString ( "aGVsbG8sIHdvc" ) ) ; assertEquals ( "hello, wo" , libcore.io.Base64Test.decodeToString ( "aGVsbG8sIHdv" ) ) ; }
public int interceptMotionBeforeQueueingNonInteractive ( long whenNanos , int policyFlags ) { if ( ( policyFlags & ( FLAG_WAKE ) ) != 0 ) { mPowerManager.wakeUp ( ( whenNanos / 1000000 ) ) ; return 0 ; } if ( shouldDispatchInputWhenNonInteractive ( ) ) { return ACTION_PASS_TO_USER ; } return 0 ; }
protected java.util.List < com.android.tools.lint.detector.api.Issue > getIssues ( ) { java.util.List < com.android.tools.lint.detector.api.Issue > issues = new java.util.ArrayList < com.android.tools.lint.detector.api.Issue > ( ) ; java.lang.Class < ? extends com.android.tools.lint.detector.api.Detector > detectorClass = getDetectorInstance ( ) . getClass ( ) ; java.util.List < com.android.tools.lint.detector.api.Issue > candidates = new com.android.tools.lint.checks.BuiltinIssueRegistry ( ) . getIssues ( ) ; for ( com.android.tools.lint.detector.api.Issue issue : candidates ) { if ( ( issue.getImplementation ( ) . getDetectorClass ( ) ) == detectorClass ) { issues.add ( issue ) ; } } return issues ; }
public void copyFrom ( byte [ ] d ) { validateIsInt8 ( ) ; copyFromUnchecked ( d , Element.DataType.SIGNED_8 , d.length ) ; }
public void Test11739 ( ) { com.ibm.icu.text.NumberFormat nf = com.ibm.icu.text.NumberFormat.getCurrencyInstance ( new com.ibm.icu.util.ULocale ( "sr_BA" ) ) ; ( ( com.ibm.icu.text.DecimalFormat ) ( nf ) ) . applyPattern ( "#,##0.0 ¤¤¤" ) ; java.text.ParsePosition ppos = new java.text.ParsePosition ( 0 ) ; com.ibm.icu.util.CurrencyAmount result = nf.parseCurrency ( "1.500 амерички долар" , ppos ) ; assertEquals ( "Should parse to 1500 USD" , new com.ibm.icu.util.CurrencyAmount ( 1500 , com.ibm.icu.util.Currency.getInstance ( "USD" ) ) , result ) ; }
private void onInputFormatChanged ( com.google.android.exoplayer.MediaFormatHolder formatHolder ) throws com.google.android.exoplayer.ExoPlaybackException { mFormat = formatHolder.format ; mFormatConfigured = true ; if ( com.android.tv.tuner.exoplayer.ac3.Ac3DefaultTrackRenderer.DEBUG ) { android.util.Log.d ( com.android.tv.tuner.exoplayer.ac3.Ac3DefaultTrackRenderer.TAG , ( "AudioTrack was configured to FORMAT: " + ( mFormat.toString ( ) ) ) ) ; } clearDecodeState ( ) ; com.android.tv.tuner.exoplayer.ac3.Ac3DefaultTrackRenderer.AUDIO_TRACK.reconfigure ( mFormat.getFrameworkMediaFormatV16 ( ) , 0 ) ; }
private java.util.List < char [ ] > getPasswords ( byte [ ] encodedPwd , java.nio.charset.Charset encodingForDecoding , java.nio.charset.Charset ... additionalEncodings ) { java.util.List < char [ ] > passwords = new java.util.ArrayList < > ( 4 ) ; try { char [ ] pwd = com.android.apksigner.PasswordRetriever.decodePassword ( encodedPwd , encodingForDecoding ) ; addPasswords ( passwords , pwd , additionalEncodings ) ; } catch ( java.io.IOException ignored ) { } com.android.apksigner.PasswordRetriever.addPassword ( passwords , com.android.apksigner.PasswordRetriever.castBytesToChars ( encodedPwd ) ) ; return passwords ; }
public void setComment ( java.lang.String comment ) { if ( comment == null ) { this . commentBytes = libcore.util.EmptyArray.BYTE ; return ; } byte [ ] newCommentBytes = comment.getBytes ( charset ) ; checkSizeIsWithinShort ( "Comment" , newCommentBytes ) ; this . commentBytes = newCommentBytes ; }
public void testMultiFilterWithNoMatch ( ) { java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 320 , "zzz" , 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 160 , "bar" , 2 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 320 , "foo" , 3 ) ) ; java.util.List < java.io.File > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "zzz" ) ; assertEquals ( 0 , result.size ( ) ) ; }
protected java.lang.String getDebuggeeClassSignature ( ) { java.lang.String debuggeeClassName = getDebuggeeClassName ( ) ; return org.apache.harmony.jpda.tests.jdwp.share.JDWPRawTestCase.getClassSignature ( debuggeeClassName ) ; }
private void responseCellInfoList_1_2 ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.util.ArrayList < com.android.internal.telephony.V1_2.CellInfo > cellInfo ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { java.util.ArrayList < android.telephony.CellInfo > ret = com.android.internal.telephony.RIL.convertHalCellInfoList_1_2 ( cellInfo ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void run ( ) { boolean pipSupportDisabled = false ; try { pipSupportDisabled = ! ( mActivity.enterPictureInPictureMode ( new android.app.PictureInPictureParams.Builder ( ) . build ( ) ) ) ; } catch ( java.lang.IllegalStateException e ) { pipSupportDisabled = true ; } catch ( java.lang.IllegalArgumentException e ) { pipSupportDisabled = true ; } assertTrue ( pipSupportDisabled ) ; assertFalse ( mActivity.isInPictureInPictureMode ( ) ) ; }
public static com.ibm.icu.util.UResourceBundle getBundleInstance ( java.lang.String baseName , java.util.Locale locale , java.lang.ClassLoader loader ) { if ( baseName == null ) { baseName = com.ibm.icu.impl.ICUData.ICU_BASE_NAME ; } com.ibm.icu.util.ULocale uloc = ( locale == null ) ? com.ibm.icu.util.ULocale.getDefault ( ) : com.ibm.icu.util.ULocale.forLocale ( locale ) ; return com.ibm.icu.util.UResourceBundle.getBundleInstance ( baseName , uloc.getBaseName ( ) , loader , false ) ; }
public char [ ] formatDouble ( double value , java.text.FieldPosition field ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator fpi = libcore.icu.NativeDecimalFormat.FieldPositionIterator.forFieldPosition ( field ) ; char [ ] result = libcore.icu.NativeDecimalFormat.formatDouble ( this . address , value , fpi ) ; if ( ( fpi != null ) && ( field != null ) ) { libcore.icu.NativeDecimalFormat.updateFieldPosition ( field , fpi ) ; } return result ; }
public void testTearDown ( ) { org.mockito.Mockito.when ( mWificondControl.tearDownInterfaces ( ) ) . thenReturn ( true ) ; org.junit.Assert.assertTrue ( mWifiNative.tearDown ( ) ) ; org.mockito.Mockito.verify ( mWificondControl ) . tearDownInterfaces ( ) ; org.mockito.Mockito.verify ( mWifiVendorHal ) . stopVendorHal ( ) ; }
public com.android.build.gradle.integration.common.fixture.app.TestSourceFile getFile ( java.lang.String filename , final java.lang.String path ) { java.util.Collection < com.android.build.gradle.integration.common.fixture.app.TestSourceFile > files = sourceFiles.get ( filename ) ; return com.google.common.collect.Iterables.find ( files , new com.google.common.base.Predicate < com.android.build.gradle.integration.common.fixture.app.TestSourceFile > ( ) { @ java.lang.Override public boolean apply ( com.android.build.gradle.integration.common.fixture.app.TestSourceFile testSourceFile ) { return path.equals ( testSourceFile.getPath ( ) ) ; } } ) ; }
public static PhotoInfo.Builder toPhotoInfoBuilder ( com.android.dialer.NumberAttributes numberAttributes ) { return com.android.dialer.glidephotomanager.PhotoInfo.newBuilder ( ) . setName ( numberAttributes.getName ( ) ) . setPhotoUri ( numberAttributes.getPhotoUri ( ) ) . setPhotoId ( numberAttributes.getPhotoId ( ) ) . setLookupUri ( numberAttributes.getLookupUri ( ) ) . setIsBusiness ( numberAttributes.getIsBusiness ( ) ) . setIsSpam ( numberAttributes.getIsSpam ( ) ) . setIsVoicemail ( numberAttributes.getIsVoicemail ( ) ) . setIsBlocked ( numberAttributes.getIsBlocked ( ) ) ; }
public void test_readlink ( ) throws java.lang.Exception { java.lang.String tmpDir = java.lang.System.getProperty ( "java.io.tmpdir" ) ; java.lang.String path = tmpDir + "/symlink" ; try { java.lang.String xs = "" ; for ( int i = 0 ; i < ( 4096 - 1 ) ; ++ i ) xs += "x" ; Libcore.os.symlink ( xs , path ) ; assertEquals ( xs , Libcore.os.readlink ( path ) ) ; } finally { assertTrue ( ( "Could not delete symlink: " + path ) , new java.io.File ( path ) . delete ( ) ) ; } }
public java.lang.String getNai ( int slotIndex ) { int [ ] subId = android.telephony.SubscriptionManager.getSubId ( slotIndex ) ; if ( subId == null ) { return null ; } return getNaiBySubscriberId ( subId [ 0 ] ) ; }
public org.bouncycastle.math.ec.ECFieldElement squarePlusProduct ( org.bouncycastle.math.ec.ECFieldElement x , org.bouncycastle.math.ec.ECFieldElement y ) { java.math.BigInteger ax = this . x ; java.math.BigInteger xx = x.toBigInteger ( ) ; java.math.BigInteger yx = y.toBigInteger ( ) ; java.math.BigInteger aa = ax.multiply ( ax ) ; java.math.BigInteger xy = xx.multiply ( yx ) ; return new org.bouncycastle.math.ec.ECFieldElement.Fp ( q , r , modReduce ( aa.add ( xy ) ) ) ; }
public int selectAnimationLw ( com.android.internal.policy.impl.WindowState win , int transit ) { if ( com.android.internal.policy.impl.PhoneWindowManager.PRINT_ANIM ) android.util.Log.i ( com.android.internal.policy.impl.PhoneWindowManager.TAG , ( ( ( "selectAnimation in " + win ) + ": transit=" ) + transit ) ) ; if ( transit == ( TRANSIT_PREVIEW_DONE ) ) { if ( win.hasAppShownWindows ( ) ) { if ( com.android.internal.policy.impl.PhoneWindowManager.PRINT_ANIM ) android.util.Log.i ( com.android.internal.policy.impl.PhoneWindowManager.TAG , "**** STARTING EXIT" ) ; return com.android.internal.R.anim.app_starting_exit ; } } return 0 ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( "LibraryBundle{" + "mBundle=" ) + ( mBundle ) ) + ", mBundleFolder=" ) + ( mBundleFolder ) ) + ", mName='" ) + ( mName ) ) + '\'' ) + ", mProjectPath='" ) + ( mProjectPath ) ) + '\'' ) + '}' ; }
private void stopRfcomm ( ) { android.util.Log.d ( android.bluetooth.client.pbap.BluetoothPbapSession.TAG , "stopRfcomm" ) ; if ( ( mConnectThread ) != null ) { try { mConnectThread.closeSocket ( ) ; mConnectThread.join ( ) ; } catch ( java.lang.InterruptedException e ) { } mConnectThread = null ; } if ( ( mTransport ) != null ) { try { mTransport.close ( ) ; } catch ( java.io.IOException e ) { } mTransport = null ; } }
private android.net.NetworkRequest makeSubSpecificDefaultRequest ( com.android.internal.telephony.mocks.ConnectivityServiceMock cs , int subId ) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities ( ) . addCapability ( NetworkCapabilities.NET_CAPABILITY_INTERNET ) . addCapability ( NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED ) . addTransportType ( NetworkCapabilities.TRANSPORT_CELLULAR ) ; netCap.setNetworkSpecifier ( new android.net.StringNetworkSpecifier ( java.lang.Integer.toString ( subId ) ) ) ; return cs.requestNetwork ( netCap , null , 0 , new android.os.Binder ( ) , ( - 1 ) ) ; }
public void onActivityStopped ( android.app.Activity activity ) { if ( BuildConfig.DCHECK_IS_ON ) { assert ( ( java.lang.reflect.Proxy.isProxyClass ( activity.getWindow ( ) . getCallback ( ) . getClass ( ) ) ) || ( activity.getWindow ( ) . getCallback ( ) . getClass ( ) . getName ( ) . equals ( org.chromium.base.BaseChromiumApplication.TOOLBAR_CALLBACK_WRAPPER_CLASS ) ) ) || ( activity.getWindow ( ) . getCallback ( ) . getClass ( ) . getName ( ) . equals ( org.chromium.base.BaseChromiumApplication.TOOLBAR_CALLBACK_INTERNAL_WRAPPER_CLASS ) ) ; } }
private static byte [ ] [ ] getArgsForKeyType ( int keyType , java.security.spec.AlgorithmParameterSpec spec ) { switch ( keyType ) { case com.android.org.conscrypt.NativeConstants.EVP_PKEY_RSA : if ( spec instanceof java.security.spec.RSAKeyGenParameterSpec ) { java.security.spec.RSAKeyGenParameterSpec rsaSpec = ( ( java.security.spec.RSAKeyGenParameterSpec ) ( spec ) ) ; return new byte [ ] [ ] { rsaSpec.getPublicExponent ( ) . toByteArray ( ) } ; } break ; } return null ; }
private V getValue ( ) throws java.util.concurrent.CancellationException , java.util.concurrent.ExecutionException { int state = getState ( ) ; switch ( state ) { case com.google.common.util.concurrent.AbstractFuture.Sync.COMPLETED : if ( ( exception ) != null ) { throw new java.util.concurrent.ExecutionException ( exception ) ; } else { return value ; } case com.google.common.util.concurrent.AbstractFuture.Sync.CANCELLED : case com.google.common.util.concurrent.AbstractFuture.Sync.INTERRUPTED : throw com.google.common.util.concurrent.AbstractFuture.cancellationExceptionWithCause ( "Task was cancelled." , exception ) ; default : throw new java.lang.IllegalStateException ( ( "Error, synchronizer in invalid state: " + state ) ) ; } }
private static boolean isValidResourceUrlChar ( char c ) { return ( ( ( ( java.lang.Character.isJavaIdentifierPart ( c ) ) || ( c == ':' ) ) || ( c == '/' ) ) || ( c == '.' ) ) || ( c == '+' ) ; }
public static void computeConvert ( android.renderscript.cts.TestConvert.ArgumentsUintInt args ) { args.out = android.renderscript.cts.CoreMathVerifier.convertUintToInt ( args.inV ) ; }
public static com.android.jack.dx.rop.code.SourcePosition getSourcePosition ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode stmt ) { if ( ( stmt.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return com.android.jack.dx.rop.code.SourcePosition.NO_INFO ; } int startLine = stmt.getSourceInfo ( ) . getStartLine ( ) ; return new com.android.jack.dx.rop.code.SourcePosition ( new com.android.jack.dx.rop.cst.CstString ( stmt.getSourceInfo ( ) . getFileName ( ) ) , ( - 1 ) , ( startLine == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN_LINE_NUMBER ) ? - 1 : startLine ) ) ; }
public java.lang.String getVisualVoicemailPackageName ( java.lang.String callingPackage , int subId ) { mAppOps.checkPackage ( android.os.Binder.getCallingUid ( ) , callingPackage ) ; if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , "getVisualVoicemailPackageName" ) ) ) { return null ; } final long identity = android.os.Binder.clearCallingIdentity ( ) ; try { return com.android.phone.vvm.RemoteVvmTaskManager.getRemotePackage ( mPhone.getContext ( ) , subId ) . getPackageName ( ) ; } finally { android.os.Binder.restoreCallingIdentity ( identity ) ; } }
private void addAttr ( java.lang.String propertyName , com.android.ide.common.api.INode childNode , java.util.List < java.lang.String > infos ) { java.lang.String a = childNode.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , ( ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_PREFIX ) + propertyName ) ) ; if ( ( a != null ) && ( ( a.length ( ) ) > 0 ) ) { java.lang.String s = ( propertyName + ": " ) + a ; infos.add ( s ) ; } }
protected static void printUsage ( @ javax.annotation.Nonnull java.io.PrintStream printStream ) { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser ( new com.android.jack.Options ( ) ) ; printStream.println ( "Usage: <options> <source files>" ) ; printStream.println ( ) ; printStream.println ( "Options:" ) ; parser.printUsage ( printStream ) ; }
private static boolean readEmptyExtensionData ( byte [ ] extensionData ) throws java.io.IOException { if ( extensionData == null ) { throw new java.lang.IllegalArgumentException ( "'extensionData' cannot be null" ) ; } if ( ( extensionData.length ) != 0 ) { throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.illegal_parameter ) ; } return true ; }
private static void printBitmap ( com.android.ahat.Doc doc , com.android.tools.perflib.heap.Instance inst ) { com.android.tools.perflib.heap.Instance bitmap = com.android.ahat.InstanceUtils.getAssociatedBitmapInstance ( inst ) ; if ( bitmap != null ) { doc.section ( "Bitmap Image" ) ; doc.println ( com.android.ahat.DocString.image ( com.android.ahat.DocString.formattedUri ( "bitmap?id=%d" , bitmap.getId ( ) ) , "bitmap image" ) ) ; } }
private boolean initColumnSize ( ) { if ( ( ! ( myColumnsSizeInitialized ) ) && ( ( getModel ( ) . getRowCount ( ) ) > 0 ) ) { myColumnsSizeInitialized = true ; setColumnPreferredSize ( ) ; setAutoCreateColumnsFromModel ( false ) ; getColumnModel ( ) . getColumn ( GraphTableModel.ROOT_COLUMN ) . setHeaderRenderer ( new com.intellij.vcs.log.ui.frame.VcsLogGraphTable.RootHeaderRenderer ( ) ) ; return true ; } return false ; }
public static synchronized void terminate ( ) { if ( ( ( com.android.ddmlib.AndroidDebugBridge.sThis ) != null ) && ( ( com.android.ddmlib.AndroidDebugBridge.sThis.mDeviceMonitor ) != null ) ) { com.android.ddmlib.AndroidDebugBridge.sThis.mDeviceMonitor.stop ( ) ; com.android.ddmlib.AndroidDebugBridge.sThis.mDeviceMonitor = null ; } com.android.ddmlib.MonitorThread monitorThread = com.android.ddmlib.MonitorThread.getInstance ( ) ; if ( monitorThread != null ) { monitorThread.quit ( ) ; } com.android.ddmlib.AndroidDebugBridge.sInitialized = false ; }
private static com.android.sdklib.util.Pair < com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode , java.lang.Integer > getFirstPosition ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode parent ) { if ( ( parent != null ) && ( parent instanceof com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ) ) { return com.android.sdklib.util.Pair.of ( ( ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ) ( parent ) ) , 0 ) ; } return null ; }
public com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotCreateFileException { java.io.File file = new java.io.File ( dir , path.getPathAsString ( getSeparator ( ) ) ) ; if ( ( ! ( file.getParentFile ( ) . mkdirs ( ) ) ) && ( ! ( file.getParentFile ( ) . isDirectory ( ) ) ) ) { throw new com.android.sched.util.file.CannotCreateFileException ( new com.android.sched.util.location.DirectoryLocation ( file.getParentFile ( ) ) ) ; } return new com.android.sched.vfs.direct.DirectFile ( file , vfsRoot ) ; }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , int timeout , android.bluetooth.le.IAdvertisingSetCallback callback ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , timeout , callback ) ; }
public void run ( ) { for ( int i = 0 ; i < 10 ; i ++ ) { android.util.Log.d ( com.android.statusbartest.NotificationTestList.TAG , "Add two notifications" ) ; mNM.notify ( 1 , notificationWithNumbers ( 1 ) ) ; mNM.notify ( 2 , notificationWithNumbers ( 2 ) ) ; android.util.Log.d ( com.android.statusbartest.NotificationTestList.TAG , "Cancel two notifications" ) ; mNM.cancel ( 1 ) ; mNM.cancel ( 2 ) ; } }
public void testAttributeRemoval ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String higherPriority = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\"\n" ) + " tools:remove=\"theme\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String lowerPriority = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" \n" ) + " android:theme=\"@oldtheme\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "higherPriority" ) , higherPriority ) ; com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlLibraryFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "lowerPriority" ) , lowerPriority ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > result = refDocument.merge ( otherDocument , mergingReportBuilder ) ; assertTrue ( result.isPresent ( ) ) ; com.android.manifmerger.XmlDocument resultDocument = result.get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = resultDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; java.util.List < com.android.manifmerger.XmlAttribute > attributes = activityOne.get ( ) . getAttributes ( ) ; assertEquals ( 2 , attributes.size ( ) ) ; assertTrue ( activityOne.get ( ) . getAttribute ( com.android.manifmerger.XmlNode.fromXmlName ( "android:name" ) ) . isPresent ( ) ) ; assertTrue ( activityOne.get ( ) . getAttribute ( com.android.manifmerger.XmlNode.fromNSName ( SdkConstants.TOOLS_URI , "tools" , "remove" ) ) . isPresent ( ) ) ; com.android.manifmerger.Actions actions = mergingReportBuilder.getActionRecorder ( ) . build ( ) ; java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = actions.getAttributeRecords ( activityOne.get ( ) . getId ( ) , com.android.manifmerger.XmlNode.fromXmlName ( "android:theme" ) ) ; assertNotNull ( attributeRecords ) ; assertEquals ( 1 , attributeRecords.size ( ) ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = attributeRecords.get ( 0 ) ; assertEquals ( Actions.ActionType.REJECTED , attributeRecord.getActionType ( ) ) ; assertEquals ( AttributeOperationType.REMOVE , attributeRecord.getOperationType ( ) ) ; assertEquals ( 7 , attributeRecord.getActionLocation ( ) . getPosition ( ) . getLine ( ) ) ; }
private void contentSizeChanged ( boolean updateLayout ) { if ( ( ( mContentWidth ) | ( mContentHeight ) ) == 0 ) { return ; } if ( mHeightCanMeasure ) { if ( ( ( getMeasuredHeight ( ) ) != ( contentToViewDimension ( mContentHeight ) ) ) && updateLayout ) { requestLayout ( ) ; } } else if ( mWidthCanMeasure ) { if ( ( ( getMeasuredWidth ( ) ) != ( contentToViewDimension ( mContentWidth ) ) ) && updateLayout ) { requestLayout ( ) ; } } else { sendViewSizeZoom ( ) ; } }
private android.telephony.ims.ImsReasonInfo toImsReasonInfoProto ( android.telephony.ims.ImsReasonInfo reasonInfo ) { com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo ri = new com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo ( ) ; if ( reasonInfo != null ) { ri.reasonCode = reasonInfo.getCode ( ) ; ri.extraCode = reasonInfo.getExtraCode ( ) ; java.lang.String extraMessage = reasonInfo.getExtraMessage ( ) ; if ( extraMessage != null ) { ri.extraMessage = extraMessage ; } } return ri ; }
public java.util.List < com.android.tv.dvr.data.ScheduledRecording > getScheduledRecordings ( android.util.Range < java.lang.Long > period , @ com.android.tv.dvr.data.ScheduledRecording.RecordingState int state ) { java.util.List < com.android.tv.dvr.data.ScheduledRecording > result = new java.util.ArrayList < > ( ) ; for ( com.android.tv.dvr.data.ScheduledRecording r : mScheduledRecordings.values ( ) ) { if ( ( r.isOverLapping ( period ) ) && ( ( r.getState ( ) ) == state ) ) { result.add ( r ) ; } } return result ; }
private static com.google.common.collect.ImmutableList < com.android.builder.model.ProductFlavor > filterNullFromArray ( com.android.builder.model.ProductFlavor [ ] flavors ) { com.google.common.collect.ImmutableList.Builder < com.android.builder.model.ProductFlavor > builder = com.google.common.collect.ImmutableList.builder ( ) ; for ( com.android.builder.model.ProductFlavor flavor : flavors ) { if ( flavor != null ) { builder.add ( flavor ) ; } } return builder.build ( ) ; }
public com.google.protobuf.micro.ByteStringMicro readBytes ( ) throws java.io.IOException { final int size = readRawVarint32 ( ) ; if ( ( size <= ( ( bufferSize ) - ( bufferPos ) ) ) && ( size > 0 ) ) { final com.google.protobuf.micro.ByteStringMicro result = com.google.protobuf.micro.ByteStringMicro.copyFrom ( buffer , bufferPos , size ) ; bufferPos += size ; return result ; } else if ( size == 0 ) { return ByteStringMicro.EMPTY ; } else { return com.google.protobuf.micro.ByteStringMicro.copyFrom ( readRawBytes ( size ) ) ; } }
private int doPurge ( ) { java.util.List < java.util.Timer.ScheduledTask > tasksToRemove ; if ( isCancelled.get ( ) ) { return 0 ; } tasksToRemove = new java.util.LinkedList < java.util.Timer.ScheduledTask > ( ) ; for ( java.util.Timer.ScheduledTask scheduledTask : scheduledTasksPriorityQueue ) { if ( scheduledTask.timerTask.isCancelled ( ) ) { tasksToRemove.add ( scheduledTask ) ; } } for ( java.util.Timer.ScheduledTask s : tasksToRemove ) { scheduledTasksPriorityQueue.remove ( s ) ; } return tasksToRemove.size ( ) ; }
private void doClean ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { com.android.ide.eclipse.adt.AdtPlugin.printBuildToConsole ( BuildVerbosity.VERBOSE , project , Messages.Removing_Generated_Classes ) ; if ( ( mGenFolder ) != null ) { removeDerivedResources ( mGenFolder , monitor ) ; } removeMarkersFromProject ( project , AndroidConstants.MARKER_AAPT_COMPILE ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_XML ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_AIDL ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_RENDERSCRIPT ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_ANDROID ) ; }
public byte [ ] getEncoded ( ) { try { org.bouncycastle.asn1.pkcs.PrivateKeyInfo info = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo ( new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( org.bouncycastle.asn1.x9.X9ObjectIdentifiers.id_dsa , new org.bouncycastle.asn1.x509.DSAParameter ( dsaSpec.getP ( ) , dsaSpec.getQ ( ) , dsaSpec.getG ( ) ) ) , new org.bouncycastle.asn1.ASN1Integer ( getX ( ) ) ) ; return info.getEncoded ( ASN1Encoding.DER ) ; } catch ( java.io.IOException e ) { return null ; } }
public void removeConfigCallback ( android.telephony.ims.stub.ImsConfigImplBase.Callback callback ) throws com.android.ims.ImsException { if ( DBG ) android.telephony.Rlog.d ( com.android.ims.ImsConfig.TAG , ( "removeConfigCallback: " + callback ) ) ; try { miConfig.removeImsConfigCallback ( callback ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "removeConfigCallback()" , e , ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } }
public void testRemove1_IndexOutOfBounds ( ) { java.util.concurrent.CopyOnWriteArrayList c = jsr166.CopyOnWriteArrayListTest.populatedArray ( 5 ) ; java.util.List [ ] lists = new java.util.List [ ] { c , c.subList ( 1 , ( ( c.size ( ) ) - 1 ) ) } ; for ( java.util.List list : lists ) { try { list.remove ( ( - 1 ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } } }
boolean getIdleTime ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "getIdleTime: " + ( device.getAddress ( ) ) ) ) ; int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothInputDevice.STATE_CONNECTED ) ) { return false ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_GET_IDLE_TIME , device ) ; mHandler.sendMessage ( msg ) ; return true ; }
public void testGetHttpMethod_NameWithoutRestPrefix ( ) { initializePsiClass ( "\"\"" , "\"\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.idea.appengine.validation.RestSignatureInspection inspection = new com.google.gct.idea.appengine.validation.RestSignatureInspection ( ) ; java.lang.String httpMethod = inspection.getHttpMethod ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "POST" , httpMethod ) ; }
private boolean deleteContentOf ( java.io.File folder ) throws java.lang.SecurityException { java.io.File [ ] files = folder.listFiles ( ) ; if ( files != null ) { for ( java.io.File f : files ) { if ( f.isDirectory ( ) ) { if ( ( deleteContentOf ( f ) ) == false ) { return false ; } } if ( ( f.delete ( ) ) == false ) { return false ; } } } return true ; }
public void testAesCbcHmacSha384Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 , getAuthKey ( 384 ) , 192 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
public static java.awt.image.BufferedImage getStencilImage ( java.lang.String relativePath ) throws java.io.IOException { java.io.InputStream is = com.android.assetstudiolib.GraphicGenerator.class . getResourceAsStream ( relativePath ) ; if ( is == null ) { return null ; } try { return javax.imageio.ImageIO.read ( is ) ; } finally { com.google.common.io.Closeables.close ( is , true ) ; } }
public void canUnrequestTethering ( ) throws java.lang.Exception { initTetheredStateMachine ( android.net.ConnectivityManager.TETHERING_BLUETOOTH , null ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_UNREQUESTED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder ( mNMService , mStatsService , mTetherHelper ) ; inOrder.verify ( mNMService ) . untetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mTetherHelper ) . notifyInterfaceStateChange ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
public void validateUpdateParameterWithInvalidtrustRootCertSha256Fingerprint ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.UpdateParameter updateParam = android.net.wifi.hotspot2.pps.UpdateParameterTest.createUpdateParameter ( ) ; updateParam.setTrustRootCertSha256Fingerprint ( new byte [ ( android.net.wifi.hotspot2.pps.UpdateParameterTest.CERTIFICATE_SHA256_BYTES ) + 1 ] ) ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; updateParam.setTrustRootCertSha256Fingerprint ( new byte [ ( android.net.wifi.hotspot2.pps.UpdateParameterTest.CERTIFICATE_SHA256_BYTES ) - 1 ] ) ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; }
private static void addFileType ( java.lang.String extension , int fileType , java.lang.String mimeType , int mtpFormatCode , boolean primaryType ) { android.media.MediaFile.addFileType ( extension , fileType , mimeType ) ; android.media.MediaFile.sFileTypeToFormatMap.put ( extension , java.lang.Integer.valueOf ( mtpFormatCode ) ) ; android.media.MediaFile.sMimeTypeToFormatMap.put ( mimeType , java.lang.Integer.valueOf ( mtpFormatCode ) ) ; if ( primaryType ) { com.android.internal.util.Preconditions.checkArgument ( ( ! ( android.media.MediaFile.sFormatToMimeTypeMap.containsKey ( mtpFormatCode ) ) ) ) ; android.media.MediaFile.sFormatToMimeTypeMap.put ( mtpFormatCode , mimeType ) ; } }
void verifyTimeWasSet ( long expectedTimeMillis ) { org.mockito.ArgumentCaptor < java.lang.Long > timeServiceTimeCaptor = org.mockito.ArgumentCaptor.forClass ( java.lang.Long.TYPE ) ; org.mockito.Mockito.verify ( mTimeServiceHelper , org.mockito.Mockito.times ( 1 ) ) . setDeviceTime ( timeServiceTimeCaptor.capture ( ) ) ; org.junit.Assert.assertEquals ( expectedTimeMillis , ( ( long ) ( timeServiceTimeCaptor.getValue ( ) ) ) ) ; }
public void testDensityOnlyWithNoMatch ( ) { java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 320 , 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 480 , 2 ) ) ; java.util.List < java.io.File > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( 0 , result.size ( ) ) ; }
public void hangupWaitingOrBackground ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; mMetrics.writeRilHangup ( mInstanceId , rr.mSerial , ( - 1 ) ) ; send ( rr ) ; }
public static android.app.PendingIntent getPendingIntent ( android.content.Context context , int resId ) { java.lang.String text = context.getString ( resId ) ; android.content.Intent toastIntent = new android.content.Intent ( context , com.android.example.notificationshowcase.ToastService.class ) ; toastIntent.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; toastIntent.setAction ( ( ( ( com.android.example.notificationshowcase.ToastService.ACTION_TOAST ) + ":" ) + resId ) ) ; toastIntent.putExtra ( "text" , text ) ; android.app.PendingIntent pi = android.app.PendingIntent.getService ( context , 58 , toastIntent , PendingIntent.FLAG_UPDATE_CURRENT ) ; return pi ; }
private void recordTosAcceptance ( ) { if ( isVvm3 ( ) ) { preferences.edit ( ) . putInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_VVM3_TOS_VERSION_ACCEPTED_KEY , com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_VVM3_TOS_VERSION ) . apply ( ) ; } else { preferences.edit ( ) . putInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_DIALER_TOS_VERSION_ACCEPTED_KEY , com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_DIALER_TOS_VERSION ) . apply ( ) ; } android.telecom.PhoneAccountHandle handle = new android.telecom.PhoneAccountHandle ( android.content.ComponentName.unflattenFromString ( status.phoneAccountComponentName ) , status.phoneAccountId ) ; com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) . onTosAccepted ( context , handle ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { assertNull ( org.conscrypt.NativeCrypto.SSL_get_certificate ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void switchWaitingOrHoldingAndActive ( android.os.Message result ) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy ( result ) ; if ( radioProxy != null ) { com.android.internal.telephony.RILRequest rr = obtainRequest ( com.android.internal.telephony.RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; try { radioProxy.switchWaitingOrHoldingAndActive ( rr.mSerial ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { handleRadioProxyExceptionForRR ( rr , "switchWaitingOrHoldingAndActive" , e ) ; } } }
public void testConstants ( ) { org.junit.Assert.assertNotEquals ( 0 , android.system.OsConstants.RT_SCOPE_HOST ) ; org.junit.Assert.assertNotEquals ( 0 , android.system.OsConstants.RT_SCOPE_LINK ) ; org.junit.Assert.assertNotEquals ( 0 , android.system.OsConstants.RT_SCOPE_SITE ) ; org.junit.Assert.assertNotEquals ( 0 , android.system.OsConstants.IFA_F_DEPRECATED ) ; org.junit.Assert.assertNotEquals ( 0 , android.system.OsConstants.IFA_F_PERMANENT ) ; org.junit.Assert.assertNotEquals ( 0 , android.system.OsConstants.IFA_F_TENTATIVE ) ; }
public void testForceWrite ( ) throws java.lang.Exception { mWifiConfigStore.switchUserStoreAndRead ( mUserStore ) ; mWifiConfigStore.write ( true ) ; assertFalse ( mAlarmManager.isPending ( WifiConfigStore.BUFFERED_WRITE_ALARM_TAG ) ) ; assertTrue ( mSharedStore.isStoreWritten ( ) ) ; assertTrue ( mUserStore.isStoreWritten ( ) ) ; }
public java.lang.String getTargetProjectName ( ) { return targetProjectName ; }
public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter , @ com.android.annotations.NonNull java.lang.String vendorPath ) { assert ( ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_EXTRAS ) ) || ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_ADDONS ) ) ) || ( filter == ( com.android.sdklib.repository.descriptors.PkgType.PKG_PLATFORMS ) ) ; for ( com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos ( filter ) ) { if ( ( pkg.getDesc ( ) . hasPath ( ) ) && ( vendorPath.equals ( pkg.getDesc ( ) . getPath ( ) ) ) ) { return pkg ; } } return null ; }
public libcore.tzdata.update2.BundleVersion getInstalledBundleVersion ( ) throws java.io.IOException , libcore.tzdata.update2.BundleException { if ( ! ( currentTzDataDir.exists ( ) ) ) { return null ; } return readBundleVersion ( currentTzDataDir ) ; }
public void setRoundingMode ( java.math.RoundingMode roundingMode ) { if ( roundingMode == null ) { throw new java.lang.NullPointerException ( "roundingMode == null" ) ; } this . roundingMode = roundingMode ; double roundingIncrement = 0.0 ; ndf.setRoundingMode ( roundingMode , roundingIncrement ) ; }
public void test_with_longTemporalField_secondOfDay ( ) { for ( long i : testPoints ( ( ( 24 * 60 ) * 60 ) ) ) { java.time.LocalTime test = tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.with ( java.time.temporal.ChronoField.SECOND_OF_DAY , i ) ; org.testng.Assert.assertEquals ( test.get ( java.time.temporal.ChronoField.SECOND_OF_DAY ) , i ) ; org.testng.Assert.assertEquals ( test.get ( java.time.temporal.ChronoField.NANO_OF_SECOND ) , tck.java.time.TCKLocalTime.TEST_12_30_40_987654321.get ( java.time.temporal.ChronoField.NANO_OF_SECOND ) ) ; } }
public void testOneSystemOneUserOneDeleted ( ) throws java.lang.Exception { install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; store.installCertificate ( org.conscrypt.TrustedCertificateStoreTest.getCa2 ( ) ) ; store.deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa2 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa2 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa2 ( ) ) ; }
private static void test ( java.lang.String name ) throws java.lang.Exception { try { java.lang.Class < ? > a = java.lang.Class.forName ( name ) ; a.newInstance ( ) ; } catch ( java.lang.LinkageError e ) { java.lang.System.out.println ( ( "passed " + name ) ) ; } }
private void stopForegroundCompat ( ) { if ( ( mStopForeground ) != null ) { mStopForegroundArgs [ 0 ] = java.lang.Boolean.TRUE ; try { mStopForeground.invoke ( this , mStopForegroundArgs ) ; } catch ( java.lang.Exception e ) { com.googlecode.android_scripting.Log.e ( e ) ; } return ; } getNotificationManager ( ) . cancel ( mNotificationId ) ; setForeground ( false ) ; }
public void onClick ( android.view.View v ) { if ( ! ( mTakingPicture ) ) { mTakingPicture = true ; shutterStartTime = java.lang.System.currentTimeMillis ( ) ; mCamera.takePicture ( new android.hardware.Camera.ShutterCallback ( ) { @ java.lang.Override public void onShutter ( ) { long dT = ( java.lang.System.currentTimeMillis ( ) ) - ( shutterStartTime ) ; android.util.Log.d ( "CTS" , ( "Shutter Lag: " + dT ) ) ; } } , null , this ) ; } }
public void TestCurrent ( ) { com.ibm.icu.text.RuleBasedBreakIterator rbbi = new com.ibm.icu.text.RuleBasedBreakIterator ( ".;" ) ; rbbi.setText ( ( ( java.text.CharacterIterator ) ( null ) ) ) ; if ( ( rbbi.current ( ) ) != ( com.ibm.icu.text.BreakIterator.DONE ) ) { errln ( ( "RuleBasedBreakIterator.current() was suppose to return " + "BreakIterator.DONE when the object has a fText of null." ) ) ; } rbbi.setText ( "dummy" ) ; if ( ( rbbi.current ( ) ) != 0 ) { errln ( ( "RuleBasedBreakIterator.current() was suppose to return " + "0 when the object has a fText of dummy." ) ) ; } }
private void initialization ( java.lang.Class < K > type ) { keyType = type ; keys = java.lang.Enum.getSharedConstants ( java.lang.Enum , keyType ) ; enumSize = keys.length ; @ java.lang.SuppressWarnings ( value = "unchecked" ) V [ ] valueArray = ( ( V [ ] ) ( new java.lang.Object [ enumSize ] ) ) ; values = valueArray ; hasMapping = new boolean [ enumSize ] ; }
private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream.defaultReadObject ( ) ; byte [ ] encoded = ( ( byte [ ] ) ( stream.readObject ( ) ) ) ; key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PUBKEY ( encoded ) ) ; final int origGroup = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_KEY_get0_group ( key.getPkeyContext ( ) ) ; group = new org.apache.harmony.xnet.provider.jsse.OpenSSLECGroupContext ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_GROUP_dup ( origGroup ) ) ; }
private static java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > getPositiveCurrencyVectorTR ( ) { java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > v = new java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > ( ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 0 , 1 , java.text.NumberFormat.Field.CURRENCY ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 1 , 4 , java.text.NumberFormat.Field.INTEGER ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 4 , 5 , java.text.NumberFormat.Field.DECIMAL_SEPARATOR ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 5 , 7 , java.text.NumberFormat.Field.FRACTION ) ) ; return v ; }
public E poll ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException { long nanos = unit.toNanos ( timeout ) ; final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock.lockInterruptibly ( ) ; try { while ( ( count ) == 0 ) { if ( nanos <= 0 ) return null ; nanos = notEmpty.awaitNanos ( nanos ) ; } return dequeue ( ) ; } finally { lock.unlock ( ) ; } }
public boolean setLine1NumberForDisplay ( int subId , java.lang.String alphaTag , java.lang.String number ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.setLine1NumberForDisplayForSubscriber ( subId , alphaTag , number ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return false ; }
private void processThisCallLocalArgs ( org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding binding , com.android.jack.ir.ast.JMethodCall call ) throws com.android.jack.ir.ast.JTypeLookupException { if ( ( binding.syntheticOuterLocalVariables ( ) ) != null ) { for ( org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg : binding.syntheticOuterLocalVariables ( ) ) { com.android.jack.ir.ast.JParameter param = ( ( com.android.jack.ir.ast.JParameter ) ( curMethod.getJVariable ( arg ) ) ) ; assert param != null ; call.addArg ( param.makeRef ( call.getSourceInfo ( ) ) ) ; } } }
public void testCtor ( ) throws java.lang.Exception { java.lang.String tz = android.text.format.Time.TIMEZONE_UTC ; android.text.format.Time t = new android.text.format.Time ( tz ) ; assertEquals ( tz , t.timezone ) ; android.text.format.Time expected = new android.text.format.Time ( tz ) ; android.text.format.cts.TimeTest.Fields.set ( expected , 1970 , 0 , 1 , 0 , 0 , 0 , ( - 1 ) , 0 , 0 , 0 ) ; android.text.format.cts.TimeTest.Fields.assertTimeEquals ( expected , t ) ; }
public java.net.Socket createSocket ( java.net.InetAddress addr , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { com.android.org.conscrypt.OpenSSLSocketImpl s = ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( addr , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setAlpnProtocols ( mAlpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; return s ; }
public void run ( ) { synchronized ( this ) { ( wasRun ) ++ ; } if ( incrementCount ) { ( timerCounter ) ++ ; } if ( ( ( terminateCount ) == ( timerCounter ) ) && ( ( timer ) != null ) ) { timer.cancel ( ) ; } if ( sleepInRun ) { try { java.lang.Thread.sleep ( 200 ) ; } catch ( java.lang.InterruptedException e ) { throw new java.lang.RuntimeException ( e ) ; } } synchronized ( sync ) { sync.notify ( ) ; } }
public boolean updateSourcePackages ( com.android.sdklib.internal.repository.SdkSource source , java.lang.Package [ ] newPackages ) { mVisitedSources.add ( source ) ; if ( source == null ) { return processLocals ( this , newPackages ) ; } else { return processSource ( this , source , newPackages ) ; } }
public void execute ( com.android.build.gradle.managed.SigningConfig signingConfig ) { try { signingConfig.setStoreFile ( com.android.ide.common.signing.KeystoreHelper.defaultDebugKeystoreLocation ( ) ) ; signingConfig.setStorePassword ( DefaultSigningConfig.DEFAULT_PASSWORD ) ; signingConfig.setKeyAlias ( DefaultSigningConfig.DEFAULT_ALIAS ) ; signingConfig.setKeyPassword ( DefaultSigningConfig.DEFAULT_PASSWORD ) ; signingConfig.setStoreType ( java.security.KeyStore.getDefaultType ( ) ) ; } catch ( com.android.prefs.AndroidLocation e ) { throw new java.lang.RuntimeException ( e ) ; } }
public < U > java.lang.Class < ? extends U > asSubclass ( java.lang.Class < U > c ) { if ( c.isAssignableFrom ( this ) ) { return ( ( java.lang.Class < ? extends U > ) ( this ) ) ; } java.lang.String actualClassName = this . getName ( ) ; java.lang.String desiredClassName = c.getName ( ) ; throw new java.lang.ClassCastException ( ( ( actualClassName + " cannot be cast to " ) + desiredClassName ) ) ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , float [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void testCheckAccessLevel_hasCarrierPrivileges ( ) throws java.lang.Exception { setHasCarrierPrivileges ( true ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; org.junit.Assert.assertEquals ( NetworkStatsAccess.Level.DEVICE , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public void addFrom ( java.lang.String name , java.lang.String address ) { if ( ( this . from ) == null ) this . from = new java.util.ArrayList < android.text.util.Rfc822Token > ( 1 ) ; this . from.add ( new android.text.util.Rfc822Token ( name , address , null ) ) ; }
public void run ( ) { try { android.os.Looper.prepare ( ) ; mLooper = android.os.Looper.myLooper ( ) ; mHandler = new android.media.cts.EncodeVirtualDisplayWithCompositionTest.GlCompositor.CompositionHandler ( ) ; initGl ( ) ; mStartCompletionSemaphore.release ( ) ; android.os.Looper.loop ( ) ; } catch ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.GlException e ) { e.printStackTrace ( ) ; fail ( "got gl exception" ) ; } finally { cleanupGl ( ) ; mHandler = null ; mLooper = null ; } }
public void test_getJarFileURL ( ) throws java.lang.Exception { java.net.URL url = new java.net.URL ( "jar:file:///bar.jar!/foo.jar!/Bugs/HelloWorld.class" ) ; assertEquals ( "file:///bar.jar" , ( ( java.net.JarURLConnection ) ( url.openConnection ( ) ) ) . getJarFileURL ( ) . toString ( ) ) ; }
private synchronized void connectionStateChanged ( android.bluetooth.BluetoothDevice device , int fromState , int toState ) { }
public static org.gradle.api.Project getProject ( java.io.File outputFile , java.util.Set < org.gradle.api.Project > gradleProjects ) { org.gradle.api.Project projectMatch = null ; for ( org.gradle.api.Project project : gradleProjects ) { java.io.File buildDir = project.getBuildDir ( ) ; if ( com.android.build.gradle.internal.model.DependenciesImpl.contains ( buildDir , outputFile ) ) { projectMatch = project ; break ; } } return projectMatch ; }
public boolean contains ( java.lang.String key ) { return contains ( key , ( - 1 ) ) ; }
void ensureZoomed ( ) { if ( ( mZoomFitNextImage ) && ( ( getClientArea ( ) . height ) > 0 ) ) { mZoomFitNextImage = false ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutActionBar actionBar = getGraphicalEditor ( ) . getLayoutActionBar ( ) ; if ( actionBar.isZoomingAllowed ( ) ) { setFitScale ( true , true ) ; } } }
protected void raiseAlert ( short alertLevel , short alertDescription , java.lang.String message , java.lang.Throwable cause ) throws java.io.IOException { getPeer ( ) . notifyAlertRaised ( alertLevel , alertDescription , message , cause ) ; byte [ ] error = new byte [ 2 ] ; error [ 0 ] = ( ( byte ) ( alertLevel ) ) ; error [ 1 ] = ( ( byte ) ( alertDescription ) ) ; safeWriteRecord ( ContentType.alert , error , 0 , 2 ) ; }
public void testHeadsetSendDTMFNull ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockCallsManager.getForegroundCall ( ) ) . thenReturn ( null ) ; boolean sentDtmf = mBluetoothPhoneService.mBinder.sendDtmf ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_DTMF_TONE ) ; org.mockito.Mockito.verify ( mMockCallsManager , org.mockito.Mockito.never ( ) ) . playDtmfTone ( org.mockito.Matchers.any ( com.android.server.telecom.Call.class ) , org.mockito.Matchers.anyChar ( ) ) ; org.mockito.Mockito.verify ( mMockCallsManager , org.mockito.Mockito.never ( ) ) . stopDtmfTone ( org.mockito.Matchers.any ( com.android.server.telecom.Call.class ) ) ; org.junit.Assert.assertEquals ( sentDtmf , false ) ; }
public void testReplacedAlias ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( false ) ; com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > mergedMap = merger.getDataMap ( ) ; java.util.List < com.android.ide.common.res2.ResourceItem > values = mergedMap.get ( "layout/alias_replaced_by_file" ) ; assertEquals ( 2 , values.size ( ) ) ; com.android.ide.common.res2.ResourceItem layout = values.get ( 1 ) ; assertNull ( layout.getValue ( ) ) ; }
public boolean processMessage ( android.os.Message message ) { if ( android.net.wifi.WifiStateMachine.DBG ) log ( ( ( ( getName ( ) ) + ( message.toString ( ) ) ) + "\n" ) ) ; switch ( message.what ) { case android.net.wifi.WifiStateMachine.CMD_SET_SCAN_MODE : if ( ( message.arg1 ) == ( android.net.wifi.WifiStateMachine.SCAN_ONLY_MODE ) ) { deferMessage ( message ) ; } break ; case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT : deferMessage ( message ) ; handleNetworkDisconnect ( ) ; transitionTo ( mDisconnectedState ) ; break ; default : return NOT_HANDLED ; } return HANDLED ; }
public void cleanup ( ) { mNumTextureUpdated.set ( 0 ) ; if ( ( mTextureId ) != 0 ) { int [ ] textures = new int [ ] { mTextureId } ; android.opengl.GLES20.glDeleteTextures ( 1 , textures , 0 ) ; } android.opengl.GLES20.glFinish ( ) ; if ( ( mSurface ) != null ) { mSurface.release ( ) ; mSurface = null ; } if ( ( mSurfaceTexture ) != null ) { mSurfaceTexture.release ( ) ; mSurfaceTexture = null ; } }
public static java.io.File createTempDir ( ) throws java.io.IOException { try { final java.io.File tmpDir = com.android.sched.util.file.Files.createTempDir ( ) ; java.lang.Runtime.getRuntime ( ) . addShutdownHook ( new java.lang.Thread ( ) { @ java.lang.Override public void run ( ) { try { com.android.jack.test.toolchain.AbstractTestTools.deleteTempDir ( tmpDir ) ; } catch ( java.io.IOException e ) { java.lang.System.err.println ( e.getMessage ( ) ) ; } } } ) ; return tmpDir ; } catch ( java.lang.IllegalStateException e ) { throw new java.io.IOException ( e ) ; } }
private void handleRadioAvailable ( ) { mCi.getBasebandVersion ( obtainMessage ( com.android.internal.telephony.EVENT_GET_BASEBAND_VERSION_DONE ) ) ; mCi.getDeviceIdentity ( obtainMessage ( com.android.internal.telephony.EVENT_GET_DEVICE_IDENTITY_DONE ) ) ; mCi.getRadioCapability ( obtainMessage ( com.android.internal.telephony.EVENT_GET_RADIO_CAPABILITY ) ) ; startLceAfterRadioIsAvailable ( ) ; }
public static org.eclipse.swt.graphics.Image getImage ( java.lang.String path ) { org.eclipse.swt.graphics.Image image = org.eclipse.wb.internal.core.DesignerPlugin.sImageCache.get ( path ) ; if ( image == null ) { org.eclipse.jface.resource.ImageDescriptor descriptor = org.eclipse.wb.internal.core.DesignerPlugin.getImageDescriptor ( path ) ; if ( descriptor != null ) { image = descriptor.createImage ( ) ; } org.eclipse.wb.internal.core.DesignerPlugin.sImageCache.put ( path , image ) ; } return image ; }
public static int waitpid ( int pid , android.util.MutableInt status , int options ) throws android.system.ErrnoException { return Libcore.os.waitpid ( pid , status , options ) ; }
public void testGetAllPhoneAccounts ( ) throws android.os.RemoteException { java.util.List < android.telecom.PhoneAccount > phoneAccountList = new java.util.ArrayList < android.telecom.PhoneAccount > ( ) { { add ( makePhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) . build ( ) ) ; add ( makePhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.SIP_PA_HANDLE_17 ) . build ( ) ) ; } } ; org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getAllPhoneAccounts ( org.mockito.Matchers.any ( android.os.UserHandle.class ) ) ) . thenReturn ( phoneAccountList ) ; org.junit.Assert.assertEquals ( 2 , mTSIBinder.getAllPhoneAccounts ( ) . size ( ) ) ; }
public void sendDtmf ( char c ) { if ( ! ( android.telephony.PhoneNumberUtils.is12Key ( c ) ) ) { loge ( ( ( "sendDtmf called with invalid character '" + c ) + "'" ) ) ; } else { if ( ( mCT.getState ( ) ) == ( PhoneConstants.State.OFFHOOK ) ) { mCT.sendDtmf ( c , null ) ; } } }
public void enter ( ) { super . enter ( ) ; mWasOnSpeaker = true ; setSpeakerphoneOn ( true ) ; setBluetoothOff ( ) ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_SPEAKER , mAvailableRoutes , null , mBluetoothRouteManager.getConnectedDevices ( ) ) ; setSystemAudioState ( newState , true ) ; updateInternalCallAudioState ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; }
protected java.util.zip.ZipFile processZip ( @ javax.annotation.Nonnull java.io.File file ) throws com.android.sched.util.file.ZipException { try { return new java.util.zip.ZipFile ( file ) ; } catch ( java.util.zip.ZipException e ) { throw new com.android.sched.util.file.ZipException ( getLocation ( ) , e ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public static void verifyGolden ( java.lang.Object test , java.lang.Object [ ] objects , org.apache.harmony.testframework.serialization.SerializationTest.SerializableAssert comparator ) throws java.lang.Exception { assertFalse ( "Empty array" , ( ( objects.length ) == 0 ) ) ; for ( int i = 0 ; i < ( objects.length ) ; i ++ ) { java.io.Serializable deserialized = org.apache.harmony.testframework.serialization.SerializationTest.getObject ( test , ( ( ".golden." + i ) + ".ser" ) ) ; comparator.assertDeserialized ( ( ( java.io.Serializable ) ( objects [ i ] ) ) , deserialized ) ; } }
public final java.nio.charset.CoderResult flush ( java.nio.ByteBuffer out ) { if ( ( ( state ) != ( java.nio.charset.CharsetEncoder.FLUSHED ) ) && ( ( state ) != ( java.nio.charset.CharsetEncoder.END_OF_INPUT ) ) ) { throw illegalStateException ( ) ; } if ( ( state ) == ( java.nio.charset.CharsetEncoder.FLUSHED ) ) { return java.nio.charset.CoderResult.UNDERFLOW ; } java.nio.charset.CoderResult result = implFlush ( out ) ; if ( result == ( java.nio.charset.CoderResult.UNDERFLOW ) ) { state = java.nio.charset.CharsetEncoder.FLUSHED ; } return result ; }
public static void writeUint32 ( long i , java.io.OutputStream output ) throws java.io.IOException { output.write ( ( ( byte ) ( i > > > 24 ) ) ) ; output.write ( ( ( byte ) ( i > > > 16 ) ) ) ; output.write ( ( ( byte ) ( i > > > 8 ) ) ) ; output.write ( ( ( byte ) ( i ) ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [ ] pkgs = intent.getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { synchronized ( this ) { if ( forceStopPackageLocked ( pkg , ( - 1 ) , false , false , false , false ) ) { setResultCode ( Activity.RESULT_OK ) ; return ; } } } } }
private void testScriptSide ( android.renderscript.RenderScript pRS ) { com.android.rs.unittest.ScriptC_element s = new com.android.rs.unittest.ScriptC_element ( pRS ) ; initializeGlobals ( pRS , s ) ; s.invoke_element_test ( ) ; pRS.finish ( ) ; s.get_complexStruct ( ) . getAllocation ( ) . destroy ( ) ; s.get_complexStruct ( ) . getElement ( ) . destroy ( ) ; s.destroy ( ) ; }
private void addRemoteAddOn ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay vendor , com.android.sdklib.repository.descriptors.IdDisplay name ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newAddon ( version , revision , vendor , name ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource , 0 ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public static java.util.UUID nameUUIDFromBytes ( byte [ ] name ) { java.security.MessageDigest md ; try { md = java.security.MessageDigest.getInstance ( "MD5" ) ; } catch ( java.security.NoSuchAlgorithmException nsae ) { throw new java.lang.InternalError ( "MD5 not supported" , nsae ) ; } byte [ ] md5Bytes = md.digest ( name ) ; md5Bytes [ 6 ] &= 15 ; md5Bytes [ 6 ] |= 48 ; md5Bytes [ 8 ] &= 63 ; md5Bytes [ 8 ] |= 128 ; return new java.util.UUID ( md5Bytes ) ; }
public void test_getFile ( ) throws java.lang.Exception { u = new java.net.URL ( "http" , "www.yahoo.com:8080" , 1233 , "test/!@$%^&*/test.html#foo" ) ; assertEquals ( "returns a wrong file" , "/test/!@$%^&*/test.html" , u.getFile ( ) ) ; u = new java.net.URL ( "http" , "www.yahoo.com:8080" , 1233 , "" ) ; assertTrue ( "returns a wrong file" , u.getFile ( ) . equals ( "" ) ) ; }
private static int getServerId ( java.io.File serverJar ) throws com.android.jack.launcher.ServerLauncher.NotAServerJarFileName { java.util.regex.Matcher matcher = com.android.jack.launcher.ServerLauncher.SERVER_JAR_PATTERN.matcher ( serverJar.getName ( ) ) ; if ( ! ( matcher.matches ( ) ) ) { throw new com.android.jack.launcher.ServerLauncher.NotAServerJarFileName ( ) ; } return java.lang.Integer.parseInt ( matcher.group ( 1 ) ) ; }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess ( byte [ ] aid ) throws java.io.IOException { return openLogicalChannel ( null , aid , ( ( byte ) ( 0 ) ) , null , null , 0 ) ; }
void stopScan ( com.android.bluetooth.gatt.ScanClient client ) { enforceAdminPermission ( ) ; int scanQueueSize = ( mScanManager.getBatchScanQueue ( ) . size ( ) ) + ( mScanManager.getRegularScanQueue ( ) . size ( ) ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "stopScan() - queue size =" + scanQueueSize ) ) ; com.android.bluetooth.gatt.AppScanStats app = null ; app = mScannerMap.getAppScanStatsById ( client.scannerId ) ; if ( app != null ) app.recordScanStop ( client.scannerId ) ; mScanManager.stopScan ( client ) ; }
private static void draw ( long nCanvas , long nPaint , boolean compositeOnly , boolean forceSrcMode , com.android.layoutlib.bridge.impl.GcSnapshot.Drawable drawable ) { android.graphics.Canvas_Delegate canvasDelegate = android.graphics.Canvas_Delegate.sManager.getDelegate ( nCanvas ) ; if ( canvasDelegate == null ) { return ; } android.graphics.Paint_Delegate paintDelegate = android.graphics.Paint_Delegate.getDelegate ( nPaint ) ; canvasDelegate.getSnapshot ( ) . draw ( drawable , paintDelegate , compositeOnly , forceSrcMode ) ; }
public void TestTypes ( ) { java.lang.String [ ] locs = new java.lang.String [ ] { "en_US_VALLEYGIRL" , "en_US_VALLEYGIRL@collation=phonebook;calendar=japanese" , "en_US_VALLEYGIRL@collation=phonebook;calendar=gregorian" , "ja_JP@calendar=japanese" , "th_TH@calendar=buddhist" , "th-TH-u-ca-gregory" , "ja_JP_TRADITIONAL" , "th_TH_TRADITIONAL" , "th_TH_TRADITIONAL@calendar=gregorian" , "en_US" , "th_TH" , "th" , "en_TH" , "th_TH@calendar=iso8601" } ; java.lang.String [ ] types = new java.lang.String [ ] { "gregorian" , "japanese" , "gregorian" , "japanese" , "buddhist" , "gregorian" , "japanese" , "buddhist" , "gregorian" , "gregorian" , "gregorian" , "gregorian" , "gregorian" , "gregorian" } ; for ( int i = 0 ; i < ( locs.length ) ; i ++ ) { com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance ( new com.ibm.icu.util.ULocale ( locs [ i ] ) ) ; if ( ! ( cal.getType ( ) . equals ( types [ i ] ) ) ) { errln ( ( ( ( ( ( locs [ i ] ) + " Calendar type " ) + ( cal.getType ( ) ) ) + " instead of " ) + ( types [ i ] ) ) ) ; } } }
private void writeObject ( java.io.ObjectOutputStream stream ) throws java.io.IOException { stream.defaultWriteObject ( ) ; stream.writeInt ( mappingsCount ) ; for ( java.util.Map.Entry < K , V > entry : entrySet ( ) ) { stream.writeObject ( entry.getKey ( ) ) ; stream.writeObject ( entry.getValue ( ) ) ; } }
boolean checkAppSwitchAllowedLocked ( int callingPid , int callingUid , java.lang.String name ) { if ( ( mAppSwitchesAllowedTime ) < ( android.os.SystemClock.uptimeMillis ( ) ) ) { return true ; } final int perm = checkComponentPermission ( android.Manifest.permission.STOP_APP_SWITCHES , callingPid , callingUid , ( - 1 ) ) ; if ( perm == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return true ; } android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + " request from " ) + callingUid ) + " stopped" ) ) ; return false ; }
public void testMergedResourcesByName ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; verifyResourceExists ( merger , "drawable/icon" , "drawable-ldpi/icon" , "drawable/icon2" , "drawable/patch" , "raw/foo" , "layout/main" , "layout/layout_ref" , "layout/alias_replaced_by_file" , "layout/file_replaced_by_alias" , "drawable/color_drawable" , "drawable/drawable_ref" , "color/color" , "string/basic_string" , "string/xliff_string" , "string/styled_string" , "style/style" , "array/string_array" , "attr/dimen_attr" , "attr/string_attr" , "attr/enum_attr" , "attr/flag_attr" , "attr/blah" , "declare-styleable/declare_styleable" , "dimen/dimen" , "id/item_id" , "integer/integer" ) ; }
public final void init ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { initialized = false ; javax.crypto.Cipher.checkOpmode ( opmode ) ; chooseProvider ( javax.crypto.Cipher.InitType.ALGORITHM_PARAMS , opmode , key , null , params , random ) ; initialized = true ; this . opmode = opmode ; }
private void replaceInParent ( java.util.TreeMap.Node < K , V > node , java.util.TreeMap.Node < K , V > replacement ) { java.util.TreeMap.Node < K , V > parent = node.parent ; node.parent = null ; if ( replacement != null ) { replacement.parent = parent ; } if ( parent != null ) { if ( ( parent.left ) == node ) { parent.left = replacement ; } else { parent.right = replacement ; } } else { root = replacement ; } }
public void onReceivedLoginRequest ( android.webkit.WebView view , java.lang.String realm , java.lang.String account , java.lang.String args ) { super . onReceivedLoginRequest ( view , realm , account , args ) ; mOnReceivedLoginRequest = true ; mOnReceivedLoginRealm = realm ; mOnReceivedLoginAccount = account ; mOnReceivedLoginArgs = args ; }
public static android.telephony.SmsMessage.SubmitPdu getSubmitPdu ( java.lang.String scAddress , java.lang.String destinationAddress , java.lang.String message , boolean statusReportRequested , int subId ) { com.android.internal.telephony.SmsMessageBase.SubmitPduBase spb ; if ( android.telephony.SmsMessage.useCdmaFormatForMoSms ( subId ) ) { spb = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu ( scAddress , destinationAddress , message , statusReportRequested , null ) ; } else { spb = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu ( scAddress , destinationAddress , message , statusReportRequested ) ; } return new android.telephony.SmsMessage.SubmitPdu ( spb ) ; }
public void recommendation_noScans_returnsCurrentConfig ( ) throws java.lang.Exception { android.net.wifi.ScanResult [ ] scanResults = new android.net.wifi.ScanResult [ 0 ] ; android.net.wifi.WifiConfiguration expectedConfig = new android.net.wifi.WifiConfiguration ( ) ; android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder ( ) . setScanResults ( scanResults ) . setNetworkCapabilities ( new android.net.NetworkCapabilities ( ) . removeCapability ( NetworkCapabilities.NET_CAPABILITY_TRUSTED ) ) . setCurrentRecommendedWifiConfig ( expectedConfig ) . build ( ) ; android.net.RecommendationResult result = verifyAndCaptureResult ( request ) ; org.junit.Assert.assertEquals ( request.getCurrentSelectedConfig ( ) , result.getWifiConfiguration ( ) ) ; }
private void helpDestroy ( ) { boolean shouldDestroy = false ; synchronized ( this ) { if ( ! ( mDestroyed ) ) { shouldDestroy = true ; mDestroyed = true ; } } if ( shouldDestroy ) { java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock rlock = mRS.mRWLock.readLock ( ) ; rlock.lock ( ) ; if ( ( mRS.isAlive ( ) ) && ( ( mID ) != 0 ) ) { mRS.nObjDestroy ( mID ) ; } rlock.unlock ( ) ; mRS = null ; mID = 0 ; } }
private void writeEmptyBlock ( ) throws java.io.IOException { writeDebugBegin ( currentClass , currentLine ) ; writer.writeCatchBlockIds ( currentCatchList ) ; writer.writeKeyword ( Token.BLOCK ) ; writer.writeOpen ( ) ; writer.writeOpenNodeList ( ) ; writer.writeCloseNodeList ( ) ; writeDebugEnd ( currentClass , currentLine ) ; writer.writeClose ( ) ; }
public void update ( ) { log ( ( "update sub = " + ( mPhone.getSubId ( ) ) ) ) ; log ( "update(): Active DDS, register for all events now!" ) ; onUpdateIcc ( ) ; mAutoAttachOnCreation.set ( false ) ; ( ( com.android.internal.telephony.GsmCdmaPhone ) ( mPhone ) ) . updateCurrentCarrierInProvider ( ) ; }
public static void $opt$noinline$testOsrInlineLoop ( java.lang.String [ ] args ) { Main.assertIntEquals ( 12 , Main.$opt$inline$testRemoveSuspendCheck ( 12 , 5 ) ) ; Main.ensureHasProfilingInfo ( "$opt$noinline$testOsrInlineLoop" ) ; Main.ensureHasOsrCode ( "$opt$noinline$testOsrInlineLoop" ) ; }
public void testGetLine1Number ( ) throws java.lang.Exception { int subId = 58374 ; java.lang.String line1Number = "9482752023479" ; makeAccountsVisibleToAllUsers ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT ) ; org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getSubscriptionIdForPhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT ) ) . thenReturn ( subId ) ; android.telephony.TelephonyManager mockTelephonyManager = ( ( android.telephony.TelephonyManager ) ( mContext.getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; org.mockito.Mockito.when ( mockTelephonyManager.getLine1Number ( subId ) ) . thenReturn ( line1Number ) ; org.junit.Assert.assertEquals ( line1Number , mTSIBinder.getLine1Number ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT , com.android.server.telecom.tests.TelecomServiceImplTest.DEFAULT_DIALER_PACKAGE ) ) ; }
public void testHandleUserSwitchAfterBootupBeforeLegacyStoreMigration ( ) throws java.lang.Exception { int user2 = ( com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ) + 1 ; when ( mUserManager.isUserUnlockingOrUnlocked ( user2 ) ) . thenReturn ( false ) ; mWifiConfigManager.handleUserSwitch ( user2 ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . switchUserStoreAndRead ( any ( WifiConfigStore.StoreFile.class ) ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . write ( anyBoolean ( ) ) ; }
private static void addPackageLoaderForLibrary ( com.android.jack.ir.ast.JSession session , com.android.sched.util.config.ReflectFactory < com.android.jack.jayce.JaycePackageLoader > factory , com.android.jack.library.InputJackLibrary inputJackLibrary ) { if ( inputJackLibrary.containsFileType ( FileType.JAYCE ) ) { com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create ( inputJackLibrary , session ) ; session.getTopLevelPackage ( ) . addLoader ( rootPLoader ) ; } }
public com.android.ims.ImsMultiEndpoint getMultiEndpointInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mMultiEndpoint ) == null ) || ( ! ( mImsServiceProxy.isBinderAlive ( ) ) ) ) { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsMultiEndpoint iImsMultiEndpoint = mImsServiceProxy.getMultiEndpointInterface ( ) ; if ( iImsMultiEndpoint == null ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , ImsReasonInfo.CODE_MULTIENDPOINT_NOT_SUPPORTED ) ; } mMultiEndpoint = new com.android.ims.ImsMultiEndpoint ( iImsMultiEndpoint ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mMultiEndpoint ; }
public void run ( ) { mHandler.removeCallbacks ( this ) ; final boolean succeded ; synchronized ( mInstallLock ) { succeded = deleteApplicationCacheFilesLI ( packageName , userId ) ; } clearExternalStorageDataSync ( packageName , userId , false ) ; if ( observer != null ) { try { observer.onRemoveCompleted ( packageName , succeded ) ; } catch ( android.os.RemoteException e ) { android.util.Log.i ( com.android.server.pm.PackageManagerService.TAG , "Observer no longer exists." ) ; } } }
public void run ( ) { com.android.rs.test_compat.RenderScript pRS = com.android.rs.test_compat.RenderScript.create ( mCtx ) ; com.android.rs.test_compat.ScriptC_int4 s = new com.android.rs.test_compat.ScriptC_int4 ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; s.invoke_int4_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
public void exit ( ) { log ( ( ( ( "Exit Connecting(" + ( mDevice ) ) + "): " ) + ( com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString ( getCurrentMessage ( ) . what ) ) ) ) ; mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING ; removeMessages ( com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT ) ; }
public void test_getTcpNoDelay ( ) throws java.lang.Exception { try ( java.net.ServerSocket server = new java.net.ServerSocket ( 0 ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress.getLocalHost ( ) , server.getLocalPort ( ) ) ) { boolean bool = ! ( client.getTcpNoDelay ( ) ) ; client.setTcpNoDelay ( bool ) ; assertTrue ( ( "Failed to get no delay setting: " + ( client.getTcpNoDelay ( ) ) ) , ( ( client.getTcpNoDelay ( ) ) == bool ) ) ; } }
private void fillFiles ( @ javax.annotation.Nonnull java.io.File folder , @ javax.annotation.Nonnull java.lang.String fileExt , @ javax.annotation.Nonnull java.util.Set < java.lang.String > fileNames ) { for ( java.io.File subFile : folder.listFiles ( ) ) { if ( subFile.isDirectory ( ) ) { fillFiles ( subFile , fileExt , fileNames ) ; } else { java.lang.String path = subFile.getPath ( ) ; if ( subFile.getName ( ) . endsWith ( fileExt ) ) { fileNames.add ( path ) ; } } } }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "getClient()" ) ; } com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) { return null ; } if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , ( "getClient() - returning " + ( service.getRemoteDevice ( ) ) ) ) ; } return service.getRemoteDevice ( ) ; }
public int read ( ) throws java.io.IOException { while ( ( in ) != null ) { int c = in.read ( ) ; if ( c != ( - 1 ) ) { return c ; } nextStream ( ) ; } return - 1 ; }
public static org.eclipse.swt.widgets.Display getDisplay ( ) { org.eclipse.ui.IWorkbench bench = null ; synchronized ( com.android.ide.eclipse.adt.AdtPlugin.class ) { if ( ( com.android.ide.eclipse.adt.AdtPlugin.sPlugin ) == null ) { return null ; } bench = com.android.ide.eclipse.adt.AdtPlugin.sPlugin.getWorkbench ( ) ; } if ( bench != null ) { return bench.getDisplay ( ) ; } return null ; }
public boolean onKeyDown ( int keyCode , android.view.KeyEvent event ) { switch ( keyCode ) { case android.view.KeyEvent.KEYCODE_DPAD_LEFT : if ( movePrevious ( ) ) { playSoundEffect ( SoundEffectConstants.NAVIGATION_LEFT ) ; return true ; } break ; case android.view.KeyEvent.KEYCODE_DPAD_RIGHT : if ( moveNext ( ) ) { playSoundEffect ( SoundEffectConstants.NAVIGATION_RIGHT ) ; return true ; } break ; case android.view.KeyEvent.KEYCODE_DPAD_CENTER : case android.view.KeyEvent.KEYCODE_ENTER : mReceivedInvokeKeyDown = true ; } return super . onKeyDown ( keyCode , event ) ; }
private final void resetContext ( ) { org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = new org.conscrypt.NativeRef.EVP_MD_CTX ( org.conscrypt.NativeCrypto.EVP_MD_CTX_create ( ) ) ; if ( signing ) { evpPkeyCtx = org.conscrypt.NativeCrypto.EVP_DigestSignInit ( ctxLocal , evpMdRef , key.getNativeRef ( ) ) ; } else { evpPkeyCtx = org.conscrypt.NativeCrypto.EVP_DigestVerifyInit ( ctxLocal , evpMdRef , key.getNativeRef ( ) ) ; } configureEVP_PKEY_CTX ( evpPkeyCtx ) ; this . ctx = ctxLocal ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; }
final void handleActivityConfigurationChanged ( android.os.IBinder token ) { android.app.ActivityThread.ActivityClientRecord r = mActivities.get ( token ) ; if ( ( r == null ) || ( ( r.activity ) == null ) ) { return ; } if ( android.app.ActivityThread.DEBUG_CONFIGURATION ) android.util.Slog.v ( android.app.ActivityThread.TAG , ( "Handle activity config changed: " + ( r.activityInfo.name ) ) ) ; android.app.ActivityThread.performConfigurationChanged ( r.activity , mCompatConfiguration ) ; android.app.ActivityThread.freeTextLayoutCachesIfNeeded ( r.activity.mCurrentConfig.diff ( mCompatConfiguration ) ) ; }
android.content.res.Configuration applyConfigCompatMainThread ( int displayDensity , android.content.res.Configuration config , android.content.res.CompatibilityInfo compat ) { if ( config == null ) { return null ; } if ( ! ( compat.supportsScreen ( ) ) ) { mMainThreadConfig.setTo ( config ) ; config = mMainThreadConfig ; compat.applyToConfiguration ( displayDensity , config ) ; } return config ; }
public com.android.jack.ir.ast.JMethodId getOrCreateMethodId ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.ir.ast.JType > argsType , @ javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind ) { try { return getMethodId ( name , argsType , kind ) ; } catch ( com.android.jack.lookup.JMethodLookupException e ) { synchronized ( phantomMethods ) { com.android.jack.ir.ast.JMethodId id = getPhantomMethod ( name , argsType , kind ) ; if ( id == null ) { id = new com.android.jack.ir.ast.JMethodId ( name , argsType , kind ) ; phantomMethods.add ( id ) ; } return id ; } } }
protected void checkPoints ( org.bouncycastle.math.ec.ECPoint [ ] points ) { checkPoints ( points , 0 , points.length ) ; }
private boolean deleteDir ( java.io.File dir ) { java.lang.String [ ] children = dir.list ( ) ; if ( children != null ) { for ( int i = 0 ; i < ( children.length ) ; i ++ ) { boolean success = deleteDir ( new java.io.File ( dir , children [ i ] ) ) ; if ( ! success ) { return false ; } } } return dir.delete ( ) ; }
private void disable ( ) { com.android.cts.deviceowner.BluetoothRestrictionTest.sleep ( com.android.cts.deviceowner.BluetoothRestrictionTest.CHECK_WAIT_TIME_MS ) ; if ( ( mBluetoothAdapter.getState ( ) ) == ( android.bluetooth.BluetoothAdapter.STATE_OFF ) ) { assertFalse ( mBluetoothAdapter.isEnabled ( ) ) ; return ; } assertEquals ( BluetoothAdapter.STATE_ON , mBluetoothAdapter.getState ( ) ) ; assertTrue ( mBluetoothAdapter.isEnabled ( ) ) ; mBluetoothAdapter.disable ( ) ; assertDisabledAfterTimeout ( ) ; }
public void test_create_BIO_OutputStream ( ) throws java.lang.Exception { byte [ ] actual = "Test" . getBytes ( ) ; java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; long ctx = org.conscrypt.NativeCrypto.create_BIO_OutputStream ( os ) ; try { org.conscrypt.NativeCrypto.BIO_write ( ctx , actual , 0 , actual.length ) ; org.junit.Assert.assertEquals ( actual.length , os.size ( ) ) ; org.junit.Assert.assertEquals ( java.util.Arrays.toString ( actual ) , java.util.Arrays.toString ( os.toByteArray ( ) ) ) ; } finally { org.conscrypt.NativeCrypto.BIO_free_all ( ctx ) ; } }
private static void assertValues ( android.net.NetworkStats.Entry entry , java.lang.String iface , int uid , int set , int tag , int metered , int roaming ) { org.junit.Assert.assertEquals ( iface , entry.iface ) ; org.junit.Assert.assertEquals ( uid , entry.uid ) ; org.junit.Assert.assertEquals ( set , entry.set ) ; org.junit.Assert.assertEquals ( tag , entry.tag ) ; org.junit.Assert.assertEquals ( metered , entry.metered ) ; org.junit.Assert.assertEquals ( roaming , entry.roaming ) ; }
public void testParseICMPv6NA ( ) { final java.lang.String packet = "00005E000265 807ABF6F48F3 86DD" + ( ( ( ( ( ( "600000000020 3A FF" + "2401FA000004FD0015EA6A5C7B01C146" ) + "FE80000000000000FA000004FD000001" ) + "88 00 E8126" ) + "0000000" ) + "2401FA000004FD0015EA6A5C7B01C146" ) + "02 01 807ABF6F48F3" ) ; final java.lang.String expected = "TX 80:7a:bf:6f:48:f3 > 00:00:5e:00:02:65 ipv6" + ( " 2401:fa00:4:fd00:15ea:6a5c:7b01:c146 > fe80::fa00:4:fd00:1 icmp6" + " na 2401:fa00:4:fd00:15ea:6a5c:7b01:c146 tlla 80:7a:bf:6f:48:f3" ) ; org.junit.Assert.assertEquals ( expected , getSummary ( packet ) ) ; }
public void dconst ( final double cst ) { long bits = java.lang.Double.doubleToLongBits ( cst ) ; if ( ( bits == 0L ) || ( bits == 4607182418800017408L ) ) { mv.visitInsn ( ( ( org.objectweb.asm.Opcodes.DCONST_0 ) + ( ( int ) ( cst ) ) ) ) ; } else { mv.visitLdcInsn ( cst ) ; } }
public void addRegistrationListener ( int serviceClass , com.android.ims.ImsConnectionStateListener listener ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; if ( listener == null ) { throw new java.lang.NullPointerException ( "listener can't be null" ) ; } try { com.android.ims.ImsManager.ImsRegistrationListenerProxy p = createRegistrationListenerProxy ( serviceClass , listener ) ; mRegistrationListeners.add ( p ) ; mImsServiceProxy.addRegistrationListener ( p ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "addRegistrationListener()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void mergeAppDataDirs ( android.content.pm.ApplicationInfo ai , int userId ) { java.util.Set < java.lang.String > dataDirs = com.android.server.pm.dex.DexManager.putIfAbsent ( mAppDataDirs , userId , new java.util.HashSet < > ( ) ) ; dataDirs.add ( ai.dataDir ) ; }
public boolean isAssistedDialed ( ) { if ( ( getIntentExtras ( ) ) != null ) { if ( ( ( getIntentExtras ( ) . getBoolean ( TelephonyManagerCompat.USE_ASSISTED_DIALING , false ) ) && ( ( getAssistedDialingExtras ( ) ) != null ) ) && ( ( android.os.Build.VERSION.SDK_INT ) <= ( com.android.dialer.assisteddialing.ConcreteCreator.BUILD_CODE_CEILING ) ) ) { return true ; } } return false ; }
protected boolean launchSuggestion ( int position , int actionKey , java.lang.String actionMsg ) { if ( ( mSuggestionsAdapter ) == null ) { return false ; } android.database.Cursor c = mSuggestionsAdapter.getCursor ( ) ; if ( ( c != null ) && ( c.moveToPosition ( position ) ) ) { android.content.Intent intent = createIntentFromSuggestion ( c , actionKey , actionMsg ) ; launchIntent ( intent ) ; return true ; } return false ; }
private void terminateCall ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "terminateCall" ) ; } int action = HeadsetClientHalConstants.CALL_ACTION_CHUP ; android.bluetooth.BluetoothHeadsetClientCall c = getCall ( BluetoothHeadsetClientCall.CALL_STATE_DIALING , BluetoothHeadsetClientCall.CALL_STATE_ALERTING , BluetoothHeadsetClientCall.CALL_STATE_ACTIVE ) ; if ( c != null ) { if ( com.android.bluetooth.hfpclient.NativeInterface.handleCallActionNative ( getByteAddress ( mCurrentDevice ) , action , 0 ) ) { addQueuedAction ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TERMINATE_CALL , action ) ; } else { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "ERROR: Couldn't terminate outgoing call" ) ; } } }
public boolean isClosedOrPending ( ) { synchronized ( fdLock ) { if ( ( ( closePending ) || ( ( fd ) == null ) ) || ( ! ( fd.valid ( ) ) ) ) { return true ; } else { return false ; } } }
public void openServer ( java.lang.String server , int port ) throws java.io.IOException , java.net.UnknownHostException { if ( ( serverSocket ) != null ) closeServer ( ) ; serverSocket = doConnect ( server , port ) ; try { serverOutput = new java.io.PrintStream ( new java.io.BufferedOutputStream ( serverSocket.getOutputStream ( ) ) , true , sun.net.NetworkClient.encoding ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.InternalError ( ( ( sun.net.NetworkClient.encoding ) + "encoding not found" ) , e ) ; } serverInput = new java.io.BufferedInputStream ( serverSocket.getInputStream ( ) ) ; }
public void srcToLib ( @ javax.annotation.Nonnull java.io.File out , boolean zipFiles , @ javax.annotation.Nonnull java.io.File ... sources ) throws java.lang.Exception { setIncrementalFolder ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ) ; super . srcToLib ( out , zipFiles , sources ) ; touchSourceFile ( sources ) ; super . srcToLib ( out , zipFiles , sources ) ; }
private boolean sendCommand ( java.lang.String command ) { boolean result = false ; try { byte [ ] bCommand ; try { bCommand = command.getBytes ( com.android.ddmlib.EmulatorConsole.DEFAULT_ENCODING ) ; } catch ( java.io.UnsupportedEncodingException e ) { return result ; } com.android.ddmlib.AdbHelper.write ( mSocketChannel , bCommand , bCommand.length , com.android.ddmlib.DdmPreferences.getTimeOut ( ) ) ; result = true ; } catch ( java.lang.Exception e ) { return false ; } finally { if ( ! result ) { com.android.ddmlib.EmulatorConsole.RemoveConsole ( mPort ) ; } } return result ; }
public void modifyText ( org.eclipse.swt.events.ModifyEvent e ) { validateAndSetMessage ( ) ; }
public static java.lang.Iterable < java.lang.Object [ ] > data ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.util.List < java.lang.Object [ ] > params = new java.util.ArrayList < > ( ) ; com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser ( ) ; java.util.List < com.android.graphics.benchmark.ApkInfo > apks = parser.parse ( new java.io.File ( com.android.graphics.benchmark.ApkInfo.APK_LIST_LOCATION ) ) ; for ( com.android.graphics.benchmark.ApkInfo apk : apks ) { params.add ( new java.lang.Object [ ] { apk.getName ( ) , apk } ) ; } return params ; }
protected void runInIndividualMode ( final java.lang.String javaPkgName ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException , java.io.IOException { java.util.Iterator < com.android.cts.TestSuite > suites = getTestSuites ( ) . iterator ( ) ; while ( ( suites.hasNext ( ) ) && ( ! ( mTestStop ) ) ) { mCurrentTestSuite = suites.next ( ) ; mCurrentTestSuite.run ( mDevice , javaPkgName ) ; } }
public void test_toString ( ) throws java.lang.Exception { java.security.cert.CertificateFactory certFact = java.security.cert.CertificateFactory.getInstance ( "X509" ) ; java.security.cert.X509Certificate pemCert = ( ( java.security.cert.X509Certificate ) ( certFact.generateCertificate ( new java.io.ByteArrayInputStream ( org.apache.harmony.security.tests.support.cert.TestUtils.getX509Certificate_v3 ( ) ) ) ) ) ; byte [ ] extnValue = pemCert.getExtensionValue ( "2.5.29.35" ) ; assertEquals ( java.util.Arrays.toString ( new byte [ ] { 4 , 2 , 48 , 0 } ) , java.util.Arrays.toString ( extnValue ) ) ; assertNotNull ( pemCert.toString ( ) ) ; }
public static synchronized boolean shouldShowSetupActivity ( android.content.Context context ) { com.android.tv.common.SoftPreconditions.checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues.getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP ) ; } else { return com.android.tv.tuner.TunerPreferences.getSharedPreferences ( context ) . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , false ) ; } }
static boolean isValidSniHostname ( java.lang.String sniHostname ) { if ( sniHostname == null ) { return false ; } return ( ( sniHostname.indexOf ( '.' ) ) != ( - 1 ) ) && ( ! ( org.conscrypt.Platform.isLiteralIpAddress ( sniHostname ) ) ) ; }
public boolean accept ( java.lang.String path ) { if ( path.endsWith ( ".class" ) ) { java.lang.String normalized = com.android.dx.command.dexer.Main.fixPath ( path ) ; java.lang.String simple = getSimpleName ( normalized ) ; java.util.List < java.lang.String > fullPaths = map.get ( simple ) ; if ( fullPaths != null ) { for ( java.lang.String fullPath : fullPaths ) { if ( normalized.endsWith ( fullPath ) ) { return true ; } } } return false ; } else { return true ; } }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass ( ) ) != ( o.getClass ( ) ) ) ) return false ; com.google.gct.testing.CloudTestConfigurationImpl that = ( ( com.google.gct.testing.CloudTestConfigurationImpl ) ( o ) ) ; return ( id ) == ( that.id ) ; }
public java.lang.String read ( ) { try { int numRead = mReceiveStream.read ( mReadBuffer , 0 , android.telecom.Call.RttCall.READ_BUFFER_SIZE ) ; if ( numRead < 0 ) { return null ; } return new java.lang.String ( mReadBuffer , 0 , numRead ) ; } catch ( java.io.IOException e ) { android.telecom.Log.w ( this , "Exception encountered when reading from InputStreamReader: %s" , e ) ; return null ; } }
public void test_initWithSecureRandom ( ) throws java.lang.Exception { javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance ( ( ( org.apache.harmony.crypto.tests.javax.crypto.CipherTest.ALGORITHM_3DES ) + "/ECB/PKCS5Padding" ) ) ; cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , new java.security.SecureRandom ( ) ) ; cipher = javax.crypto.Cipher.getInstance ( "DES/CBC/NoPadding" ) ; try { cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , new java.security.SecureRandom ( ) ) ; fail ( ) ; } catch ( java.security.InvalidKeyException expected ) { } }
public com.android.tools.perflib.heap.Heap getHeap ( @ com.android.annotations.NonNull java.lang.String name ) { for ( int i = 0 ; i < ( mHeaps.size ( ) ) ; i ++ ) { if ( name.equals ( mHeaps.get ( i ) . getName ( ) ) ) { return mHeaps.get ( i ) ; } } return null ; }
private void verifyLteInfo ( android.telephony.CellInfoLte lte ) { verifyRssiDbm ( lte.getCellSignalStrength ( ) . getDbm ( ) ) ; int pci = lte.getCellIdentity ( ) . getPci ( ) ; assertTrue ( "getPci() out of range [0, 503]" , ( ( pci >= 0 ) && ( pci <= 503 ) ) ) ; }
public long createAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return - 1 ; try { return mInstalld.createAppData ( uuid , packageName , userId , flags , appId , seInfo , targetSdkVersion ) ; } catch ( java.lang.Exception e ) { throw com.android.server.pm.Installer.InstallerException.from ( e ) ; } }
protected boolean isDataPossible ( java.lang.String apnType ) { boolean possible = ( isDataAllowed ( ) ) && ( ! ( ( getAnyDataEnabled ( ) ) && ( ( mState ) == ( DctConstants.State.FAILED ) ) ) ) ; if ( ( ( ! possible ) && ( DBG ) ) && ( isDataAllowed ( ) ) ) { log ( ( "Data not possible. No coverage: dataState = " + ( mState ) ) ) ; } return possible ; }
public final java.nio.ByteBuffer putShort ( int i , short x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putShort ( ix ( checkIndex ( i , SizeOf.SHORT ) ) , x ) ; return this ; }
protected proguard.optimize.evaluation.Value getMethodParameterValue ( proguard.optimize.evaluation.Clazz clazz , proguard.optimize.evaluation.Method method , int parameterIndex , java.lang.String type , proguard.optimize.evaluation.Clazz referencedClass ) { if ( loadMethodParameterValues ) { proguard.optimize.evaluation.Value value = proguard.optimize.evaluation.StoringInvocationUnit.getMethodParameterValue ( method , parameterIndex ) ; if ( value != null ) { return value ; } } return super . getMethodParameterValue ( clazz , method , parameterIndex , type , referencedClass ) ; }
public void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader ) { if ( ! ( annotations.isEmpty ( ) ) ) { com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession ( loader.getSession ( ) , com.android.jack.jayce.NodeLevel.STRUCTURE ) ; for ( com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations ) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast ( exportSession ) ; loading.addAnnotation ( annotationLiteral ) ; annotationLiteral.updateParents ( loading ) ; } } }
public void testLength ( ) throws java.io.IOException { mMemoryFile = new android.os.MemoryFile ( "Test File" , 1024 ) ; assertEquals ( 1024 , mMemoryFile.length ( ) ) ; mMemoryFile = new android.os.MemoryFile ( "Test File" , 512 ) ; assertEquals ( 512 , mMemoryFile.length ( ) ) ; mMemoryFile = new android.os.MemoryFile ( "Test File" , 0 ) ; assertEquals ( 0 , mMemoryFile.length ( ) ) ; try { mMemoryFile = new android.os.MemoryFile ( "Test File" , ( - 512 ) ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } }
public static android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage tryParse ( android.security.cts.OpenSSLHeartbleedTest.TlsRecord record ) { if ( ( record.protocol ) != ( android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.HANDSHAKE ) ) { return null ; } if ( ( record.fragment.length ) < 1 ) { return null ; } android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage result = new android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage ( ) ; result.type = ( record.fragment [ 0 ] ) & 255 ; return result ; }
public void test_wrap_ByteBuffer$ByteBuffer_01 ( ) throws java.lang.Exception { prepareEngines ( ) ; doHandshake ( ) ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer.allocate ( 100 ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer.allocate ( 20000 ) ; clientEngine.engine.wrap ( new java.nio.ByteBuffer [ ] { bbs } , bbd ) ; serverEngine.engine.wrap ( new java.nio.ByteBuffer [ ] { bbs } , bbd ) ; }
static int indexOf ( java.lang.Object o , java.lang.Object [ ] data , int from , int to ) { if ( o == null ) { for ( int i = from ; i < to ; i ++ ) { if ( ( data [ i ] ) == null ) { return i ; } } } else { for ( int i = from ; i < to ; i ++ ) { if ( o.equals ( data [ i ] ) ) { return i ; } } } return - 1 ; }
public android.net.wifi.WifiWakeReasonAndCounts getWlanWakeReasonCount ( ) { return mWifiVendorHal.getWlanWakeReasonCount ( ) ; }
public void test_unmodifiableMap_remove ( ) { try { java.util.Collections.unmodifiableMap ( new java.util.HashMap < > ( ) ) . remove ( 1 , 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } java.util.Map < java.lang.Integer , java.lang.Double > m = new java.util.HashMap < > ( ) ; m.put ( 1 , 5.0 ) ; try { java.util.Collections.unmodifiableMap ( m ) . remove ( 1 , 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void testFieldAccess ( ) { logWriter.println ( "testFieldAccess started" ) ; synchronizer.receiveMessage ( JPDADebuggeeSynchronizer.SGNL_READY ) ; org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createFieldAccessEventBuilder ( JDWPConstants.TypeTag.CLASS , org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE , org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME ) ; testEventWithCountModifier ( builder , org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.FIELD_READ_WRITE_COUNT_FIELD_NAME ) ; logWriter.println ( "testFieldAccess done" ) ; }
public void onResizeUpdate ( @ com.android.annotations.Nullable com.android.ide.common.api.DropFeedback feedback , @ com.android.annotations.NonNull com.android.ide.common.api.INode child , @ com.android.annotations.NonNull com.android.ide.common.api.INode parent , @ com.android.annotations.NonNull com.android.ide.common.api.Rect newBounds , int modifierMask ) { if ( feedback == null ) { return ; } com.android.ide.common.layout.relative.ResizeHandler state = ( ( com.android.ide.common.layout.relative.ResizeHandler ) ( feedback.userData ) ) ; state.updateResize ( feedback , child , newBounds , modifierMask ) ; }
public void acquireMulticastLock ( android.os.IBinder binder , java.lang.String tag ) { enforceMulticastChangePermission ( ) ; synchronized ( mMulticasters ) { ( mMulticastEnabled ) ++ ; mMulticasters.add ( new com.android.server.WifiService.Multicaster ( tag , binder ) ) ; mWifiStateMachine.stopFilteringMulticastV4Packets ( ) ; } int uid = android.os.Binder.getCallingUid ( ) ; final long ident = android.os.Binder.clearCallingIdentity ( ) ; try { mBatteryStats.noteWifiMulticastEnabled ( uid ) ; } catch ( android.os.RemoteException e ) { } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } }
public < T extends com.android.jack.ir.ast.JNode > void accept ( @ javax.annotation.Nonnull java.util.Collection < T > collection ) { java.util.Collection < T > copiedCollection = new java.util.ArrayList < T > ( collection ) ; for ( T element : copiedCollection ) { element.traverse ( this ) ; } }
public final java.nio.ByteBuffer put ( int i , byte x ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } put ( ix ( checkIndex ( i ) ) , x ) ; return this ; }
public void addIcon ( java.lang.String slot , int index , int viewIndex , com.android.internal.statusbar.StatusBarIcon icon ) { if ( com.android.systemui.statusbar.phone.PhoneStatusBar.SPEW ) android.util.Log.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , ( ( ( ( ( ( ( "addIcon slot=" + slot ) + " index=" ) + index ) + " viewIndex=" ) + viewIndex ) + " icon=" ) + icon ) ) ; com.android.systemui.statusbar.StatusBarIconView view = new com.android.systemui.statusbar.StatusBarIconView ( mContext , slot , null ) ; view.set ( icon ) ; mStatusIcons.addView ( view , viewIndex , new android.widget.LinearLayout.LayoutParams ( mIconSize , mIconSize ) ) ; }
public java.io.File call ( ) throws java.lang.Exception { final com.android.builder.sdk.TargetInfo info = androidBuilder.getTargetInfo ( ) ; if ( info != null ) { java.lang.String path = info.getBuildTools ( ) . getPath ( com.android.sdklib.BuildToolInfo.PathId.ZIP_ALIGN ) ; if ( path != null ) { return new java.io.File ( path ) ; } } return null ; }
public java.lang.String getName ( android.bluetooth.BluetoothDevice device ) { com.android.settingslib.bluetooth.CachedBluetoothDevice cachedDevice = findDevice ( device ) ; if ( ( cachedDevice != null ) && ( ( cachedDevice.getName ( ) ) != null ) ) { return cachedDevice.getName ( ) ; } java.lang.String name = device.getAliasName ( ) ; if ( name != null ) { return name ; } return device.getAddress ( ) ; }
public java.util.List < com.android.sdklib.devices.Device > getUserDevices ( ) { synchronized ( this ) { if ( ( mUserDevices ) == null ) { mUserDevices = new java.util.ArrayList < com.android.sdklib.devices.Device > ( ) ; try { java.io.File userDevicesFile = new java.io.File ( com.android.prefs.AndroidLocation.getFolder ( ) , com.android.sdklib.SdkConstants.FN_DEVICES_XML ) ; mUserDevices.addAll ( loadDevices ( userDevicesFile ) ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { mLog.warning ( "Couldn't load user devices: %1$" , e.getMessage ( ) ) ; } } } return mUserDevices ; }
public void activateDeactivatePolicy ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; if ( checkStatusOfPolicy ( instrumentation , "Sample Device Admin" ) ) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate ( instrumentation , "Sample Device Admin" ) ; } assertFalse ( checkStatusOfPolicy ( instrumentation , "Sample Device Admin" ) ) ; com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate ( instrumentation , "Sample Device Admin" ) ; assertTrue ( checkStatusOfPolicy ( instrumentation , "Sample Device Admin" ) ) ; com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate ( instrumentation , "Sample Device Admin" ) ; assertFalse ( checkStatusOfPolicy ( instrumentation , "Sample Device Admin" ) ) ; }
public void initialize ( int gsmSignalStrength , int gsmBitErrorRate , int cdmaDbm , int cdmaEcio , int evdoDbm , int evdoEcio , int evdoSnr , boolean gsm ) { initialize ( gsmSignalStrength , gsmBitErrorRate , cdmaDbm , cdmaEcio , evdoDbm , evdoEcio , evdoSnr , 99 , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , 0 , gsm ) ; }
public void publicMethods ( ) throws java.lang.Exception { assertNotNull ( com.android.volley.toolbox.ImageRequest.class . getConstructor ( java.lang.String.class , Response.Listener.class , int . class , int . class , android.graphics.Bitmap.Config.class , Response.ErrorListener.class ) ) ; assertNotNull ( com.android.volley.toolbox.ImageRequest.class . getConstructor ( java.lang.String.class , Response.Listener.class , int . class , int . class , android.widget.ImageView.ScaleType.class , android.graphics.Bitmap.Config.class , Response.ErrorListener.class ) ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_TIMEOUT_MS , 1000 ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_MAX_RETRIES , 2 ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT , 2.0F , 0 ) ; }
public void testClearKeyPlaybackCenc ( ) throws java.lang.Exception { testClearKeyPlayback ( android.media.cts.NativeClearKeySystemTest.ISO_BMFF_VIDEO_MIME_TYPE , android.media.cts.NativeClearKeySystemTest.CENC_AUDIO_URL , android.media.cts.NativeClearKeySystemTest.CENC_CLEARKEY_VIDEO_URL , android.media.cts.NativeClearKeySystemTest.VIDEO_WIDTH_CENC , android.media.cts.NativeClearKeySystemTest.VIDEO_HEIGHT_CENC ) ; }
private com.android.sdklib.ISystemImage [ ] getSystemImages ( com.android.sdklib.IAndroidTarget target ) { if ( target != null ) { com.android.sdklib.ISystemImage [ ] images = target.getSystemImages ( ) ; if ( ( ( images == null ) || ( ( images.length ) == 0 ) ) && ( ! ( target.isPlatform ( ) ) ) ) { } if ( images != null ) { return images ; } } return new com.android.sdklib.ISystemImage [ 0 ] ; }
public void paint ( com.intellij.openapi.editor.Editor editor , java.awt.Graphics g , java.awt.Rectangle r ) { if ( ! ( myCondition.get ( ) ) ) return ; int y = r.y ; int lineHeight = myEditor.getLineHeight ( ) ; com.intellij.diff.util.DiffLineSeparatorRenderer.draw ( g , 0 , y , lineHeight ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { com.android.jack.transformations.enums.SwitchEnumSupport.UsedEnumField uef = method.getEnclosingType ( ) . getMarker ( com.android.jack.transformations.enums.SwitchEnumSupport.UsedEnumField.class ) ; assert uef != null ; usedEnumFields = uef.getEnumFields ( ) ; return super . visit ( method ) ; }
static void getShort ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , short value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { final short got = ( v == null ) ? ( ( short ) ( m.invokeExact ( ) ) ) : ( ( short ) ( m.invokeExact ( v ) ) ) ; Main.Tester.assertTrue ( ( got == value ) ) ; } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertEquals ( exceptionThrown , expectFailure ) ; }
void stopKeepalive ( ) { return ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_single_source_ref_count s = new com.android.rs.test.ScriptC_single_source_ref_count ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; s.invoke_entrypoint ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
java.util.logging.Logger demandLogger ( java.lang.String name , java.lang.String resourceBundleName , java.lang.Class < ? > caller ) { java.util.logging.Logger result = getLogger ( name ) ; if ( result == null ) { java.util.logging.Logger newLogger = new java.util.logging.Logger ( name , resourceBundleName , caller , this , false ) ; do { if ( addLogger ( newLogger ) ) { return newLogger ; } result = getLogger ( name ) ; } while ( result == null ) ; } return result ; }
public void testStatements ( ) throws java.lang.Exception { checkStatements ( 9 , ( "" + ( ( ( ( "int x = +5;\n" + "int y = x;\n" ) + "int w;\n" ) + "w = -1;\n" ) + "int z = x + 5 + w;\n" ) ) , "z" ) ; checkStatements ( "hello world" , ( "" + ( ( ( "String initial = \"hello\";\n" + "String other;\n" ) + "other = \" world\";\n" ) + "String finalString = initial + other;\n" ) ) , "finalString" ) ; }
public static com.android.manifmerger.XmlDocument load ( java.io.File xmlFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( xmlFile ) ) ; com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( inputStream ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , new com.android.manifmerger.XmlLoader.FileSourceLocation ( null , xmlFile ) , domDocument.getDocumentElement ( ) ) : null ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( hostname , org.conscrypt.NativeCrypto.SSL_get_servername ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static final void toByteArray ( com.google.protobuf.nano.MessageNano msg , byte [ ] data , int offset , int length ) { try { final com.google.protobuf.nano.CodedOutputByteBufferNano output = com.google.protobuf.nano.CodedOutputByteBufferNano.newInstance ( data , offset , length ) ; msg.writeTo ( output ) ; output.checkNoSpaceLeft ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( ( "Serializing to a byte array threw an IOException " + "(should never happen)." ) , e ) ; } }
public int stopSendingOffloadedPacket ( int slot ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , ( "stopSendingOffloadedPacket " + slot ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.stopSendingOffloadedPacketNative ( com.android.server.wifi.WifiNative.sWlan0Index , slot ) ; } else { return - 1 ; } } }
public void clearUidForwarding ( java.lang.String interfaze , int uidStart , int uidEnd , boolean forwardDns ) { try { mNetd.clearUidRangeRoute ( interfaze , uidStart , uidEnd ) ; if ( forwardDns ) mNetd.clearDnsInterfaceForUidRange ( interfaze , uidStart , uidEnd ) ; } catch ( android.os.RemoteException e ) { } }
public final com.android.tools.perflib.heap.ClassObj findClass ( java.lang.String name ) { for ( int i = 0 ; i < ( mHeaps.size ( ) ) ; i ++ ) { com.android.tools.perflib.heap.ClassObj theClass = mHeaps.get ( i ) . getClass ( name ) ; if ( theClass != null ) { return theClass ; } } return null ; }
public synchronized void stop ( ) { if ( ( mPhoneProxy ) != null ) { if ( com.android.bluetooth.hfp.HeadsetSystemInterface.DBG ) { android.util.Log.d ( com.android.bluetooth.hfp.HeadsetSystemInterface.TAG , "Unbinding phone proxy" ) ; } mPhoneProxy = null ; mHeadsetService.unbindService ( mPhoneProxyConnection ) ; } mHeadsetPhoneState.cleanup ( ) ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void testVoicemailCall ( ) { java.lang.String voicemailNumber = "voicemail:18005551234" ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_CALL , android.net.Uri.parse ( voicemailNumber ) ) ; intent.putExtra ( TelecomManager.EXTRA_START_CALL_WITH_SPEAKERPHONE , true ) ; int result = processIntent ( intent , true ) ; org.junit.Assert.assertEquals ( DisconnectCause.NOT_DISCONNECTED , result ) ; org.mockito.Mockito.verify ( mCallsManager ) . placeOutgoingCall ( org.mockito.Matchers.eq ( mCall ) , org.mockito.Matchers.eq ( android.net.Uri.parse ( voicemailNumber ) ) , org.mockito.ArgumentMatchers.nullable ( android.telecom.GatewayInfo.class ) , org.mockito.Matchers.eq ( true ) , org.mockito.Matchers.eq ( VideoProfile.STATE_AUDIO_ONLY ) ) ; }
public com.android.jack.dx.dex.file.IndexedItem get ( com.android.jack.dx.rop.cst.Constant cst ) { if ( cst == null ) { throw new java.lang.NullPointerException ( "cst == null" ) ; } throwIfNotPrepared ( ) ; com.android.jack.dx.dex.file.IndexedItem result = classDefs.get ( cst ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( "not found" ) ; } return result ; }
protected com.android.sdklib.internal.repository.archives.Archive [ ] initializeArchives ( java.util.Properties props , java.lang.String archiveOsPath ) { return super . initializeArchives ( props , com.android.sdklib.internal.repository.packages.LOCAL_ARCHIVE_PATH ) ; }
public static android.renderscript.Element I16_2 ( android.renderscript.RenderScript rs ) { if ( ( rs.mElement_SHORT_2 ) == null ) { synchronized ( rs ) { if ( ( rs.mElement_SHORT_2 ) == null ) { rs.mElement_SHORT_2 = android.renderscript.Element.createVector ( rs , android.renderscript.Element.DataType.SIGNED_16 , 2 ) ; } } } return rs.mElement_SHORT_2 ; }
private boolean loadData ( java.lang.String path ) { try { mappedFile = libcore.io.MemoryMappedFile.mmapRO ( path ) ; } catch ( android.system.ErrnoException errnoException ) { return false ; } try { readHeader ( ) ; return true ; } catch ( java.lang.Exception ex ) { close ( ) ; java.lang.System.logE ( ( ( "tzdata file \"" + path ) + "\" was present but invalid!" ) , ex ) ; return false ; } }
public void getDownloadableSubscriptionMetadata ( android.telephony.euicc.DownloadableSubscription subscription , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled ( ) ) ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; return ; } try { getIEuiccController ( ) . getDownloadableSubscriptionMetadata ( subscription , mContext.getOpPackageName ( ) , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
synchronized void dropClient ( com.android.ddmlib.Client client , boolean notify ) { if ( ( com.android.ddmlib.MonitorThread.sInstance ) == null ) { return ; } synchronized ( mClientList ) { if ( ! ( mClientList.remove ( client ) ) ) { return ; } } client.close ( notify ) ; broadcast ( com.android.ddmlib.MonitorThread.CLIENT_DISCONNECTED , client ) ; wakeup ( ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.Nullable org.objectweb.asm.tree.AbstractInsnNode instruction , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { if ( ( method != null ) && ( mDriver.isSuppressed ( issue , mClassNode , method , instruction ) ) ) { return ; } report ( issue , location , message ) ; }
public void binderDied ( ) { mImsServiceProxy = null ; mUt = null ; mConfig = null ; mEcbm = null ; mMultiEndpoint = null ; }
private void assertParseFailure ( java.lang.String xml , org.xmlpull.v1.XmlPullParser parser ) throws java.lang.Exception { parser.setInput ( new java.io.StringReader ( xml ) ) ; try { while ( ( parser.next ( ) ) != ( org.xmlpull.v1.XmlPullParser.END_DOCUMENT ) ) { } fail ( ) ; } catch ( org.xmlpull.v1.XmlPullParserException expected ) { } }
public void stopScan ( ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { if ( ( com.android.server.wifi.WifiNative.sScanCmdId ) != 0 ) { com.android.server.wifi.WifiNative.stopScanNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sScanCmdId ) ; } com.android.server.wifi.WifiNative.sScanSettings = null ; com.android.server.wifi.WifiNative.sScanEventHandler = null ; com.android.server.wifi.WifiNative.sScanCmdId = 0 ; } } }
private void initForNewRadioTechnology ( ) { if ( com.android.phone.PhoneGlobals.DBG ) android.util.Log.d ( com.android.phone.PhoneGlobals.LOG_TAG , "initForNewRadioTechnology..." ) ; notifier.updateCallNotifierRegistrationsAfterRadioTechnologyChange ( ) ; }
public synchronized void requestToSetMode ( com.android.cts.verifier.sensors.base.ISensorTestStateContainer stateContainer , boolean modeOn ) throws java.lang.InterruptedException { if ( ( ! ( isSettingAvailable ( ) ) ) || ( ! ( isSettingUiAvailable ( stateContainer ) ) ) ) { return ; } trySetMode ( stateContainer , modeOn ) ; if ( ( getCurrentSettingMode ( ) ) != modeOn ) { java.lang.String message = stateContainer.getString ( R.string.snsr_setting_mode_not_set , getSettingName ( stateContainer ) , modeOn ) ; throw new java.lang.IllegalStateException ( message ) ; } }
public static byte [ ] encode ( java.lang.String s ) throws java.io.UTFDataFormatException { long size = java.nio.charset.ModifiedUtf8.countBytes ( s , true ) ; byte [ ] output = new byte [ ( ( int ) ( size ) ) + 2 ] ; java.nio.charset.ModifiedUtf8.encode ( output , 2 , s ) ; output [ 0 ] = ( ( byte ) ( size > > > 8 ) ) ; output [ 1 ] = ( ( byte ) ( size ) ) ; return output ; }
private java.lang.StringBuffer subformat ( java.lang.String pluralCount , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr ) { if ( ( style ) == ( NumberFormat.PLURALCURRENCYSTYLE ) ) { java.lang.String currencyPluralPattern = currencyPluralInfo.getCurrencyPluralPattern ( pluralCount ) ; if ( ( formatPattern.equals ( currencyPluralPattern ) ) == false ) { applyPatternWithoutExpandAffix ( currencyPluralPattern , false ) ; } } expandAffixAdjustWidth ( pluralCount ) ; return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr ) ; }
public void testNetworkEventSerialization ( ) { android.net.ConnectivityMetricsEvent ev = com.android.server.connectivity.MetricsTestUtil.describeIpEvent ( com.android.server.connectivity.MetricsTestUtil.aType ( android.net.metrics.NetworkEvent.class ) , com.android.server.connectivity.MetricsTestUtil.anInt ( 100 ) , com.android.server.connectivity.MetricsTestUtil.anInt ( 5 ) , com.android.server.connectivity.MetricsTestUtil.aLong ( 20410 ) ) ; java.lang.String want = com.android.server.connectivity.IpConnectivityEventBuilderTest.joinLines ( "dropped_events: 0" , "events <" , " network_event <" , " event_type: 5" , " latency_ms: 20410" , " network_id <" , " network_id: 100" , " >" , " >" , " time_ms: 1" , " transport: 0" , ">" , "version: 2" ) ; com.android.server.connectivity.IpConnectivityEventBuilderTest.verifySerialization ( want , ev ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( getLocals ( ) ) ; ++ i ) { sb.append ( getLocal ( i ) ) ; } sb.append ( ' ' ) ; for ( int i = 0 ; i < ( getStackSize ( ) ) ; ++ i ) { sb.append ( getStack ( i ) . toString ( ) ) ; } return sb.toString ( ) ; }
public int compare ( java.util.HashMap < ? , ? > map1 , java.util.HashMap < ? , ? > map2 ) { java.lang.Object value1 = map1.get ( mSortingKey ) ; java.lang.Object value2 = map2.get ( mSortingKey ) ; if ( ! ( isComparable ( value1 ) ) ) { return isComparable ( value2 ) ? 1 : 0 ; } else if ( ! ( isComparable ( value2 ) ) ) { return - 1 ; } return ( ( java.lang.Comparable ) ( value1 ) ) . compareTo ( value2 ) ; }
public java.lang.Boolean bluetoothHidDeviceReplyReport ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "deviceID" , description = "Name or MAC address of a bluetooth device." ) java.lang.String deviceID , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "type" , description = "Type as in the report." ) java.lang.Integer type , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "id" , description = "id as in the report." ) java.lang.Integer id , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "report" ) java.lang.String report ) throws java.lang.Exception { if ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile ) == null ) { return false ; } android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices ( ) , deviceID ) ; byte [ ] reportByteArray = report.getBytes ( ) ; return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.replyReport ( device , ( ( byte ) ( ( int ) ( type ) ) ) , ( ( byte ) ( ( int ) ( id ) ) ) , reportByteArray ) ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , short [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 2 ) ) ; }
private void switchUser ( int userId ) { if ( ( mCurrentUserId ) == userId ) { return ; } mBlacklist.switchUser ( userId ) ; mLocationHandler.removeMessages ( com.android.server.LocationManagerService.MSG_LOCATION_CHANGED ) ; synchronized ( mLock ) { mLastLocation.clear ( ) ; mLastLocationCoarseInterval.clear ( ) ; for ( com.android.server.location.LocationProviderInterface p : mProviders ) { updateProviderListenersLocked ( p.getName ( ) , false , mCurrentUserId ) ; } mCurrentUserId = userId ; updateProvidersLocked ( ) ; } }
public static int MultiplePhis ( ) { int x = 0 ; int y = 1 ; while ( ( y ++ ) < 10 ) { if ( y > 1 ) { x = 13 ; } else { x = 42 ; } } return x ; }
public static < T > void sort ( T [ ] a , java.util.Comparator < ? super T > c ) { if ( c == null ) { java.util.Arrays.sort ( a ) ; } else { if ( java.util.Arrays.LegacyMergeSort.userRequested ) java.util.Arrays.legacyMergeSort ( a , c ) ; else java.util.TimSort.sort ( a , 0 , a.length , c , null , 0 , 0 ) ; } }
public void testEqualsDuplicated ( ) throws java.lang.Exception { android.net.LinkProperties source = new android.net.LinkProperties ( ) ; source.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; source.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; source.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; android.net.LinkProperties target = new android.net.LinkProperties ( ) ; target.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; target.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; target.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; assertLinkPropertiesEqual ( source , target ) ; }
public void test_binarySearchLjava_util_ListLjava_lang_Object ( ) { final int llSize = ll.size ( ) ; try { java.util.Collections.binarySearch ( null , new java.lang.Object ( ) ) ; fail ( "Expected NullPointerException for null list parameter" ) ; } catch ( java.lang.NullPointerException e ) { } for ( int i = 0 ; i < llSize ; i ++ ) { assertEquals ( "Returned incorrect binary search item position" , ll.get ( i ) , ll.get ( java.util.Collections.binarySearch ( ll , ll.get ( i ) ) ) ) ; } }
public int setAllowedCarriers ( int slotId , java.util.List < android.service.carrier.CarrierIdentifier > carriers ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.setAllowedCarriers ( slotId , carriers ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setAllowedCarriers" , e ) ; } catch ( java.lang.NullPointerException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setAllowedCarriers" , e ) ; } return - 1 ; }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 100 ) ; sb.append ( getClass ( ) . getName ( ) ) ; sb.append ( '{' ) ; sb.append ( section.toString ( ) ) ; sb.append ( ' ' ) ; sb.append ( type.toHuman ( ) ) ; sb.append ( '}' ) ; return sb.toString ( ) ; }
public static boolean isConstructorDelegation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call , @ javax.annotation.Nonnull com.android.jack.ir.ast.JConstructor constructor ) { if ( ( ! ( call.getMethodIdWide ( ) . isInit ( ) ) ) || ( ! ( ( call.getInstance ( ) ) instanceof com.android.jack.ir.ast.JThisRef ) ) ) { return false ; } assert ( call.getDispatchKind ( ) ) == ( JMethodCall.DispatchKind.DIRECT ) ; assert ( constructor.getMethodIdWide ( ) . getKind ( ) ) == ( com.android.jack.ir.ast.MethodKind.INSTANCE_NON_VIRTUAL ) ; return call.getReceiverType ( ) . isSameType ( constructor.getEnclosingType ( ) ) ; }
public android.graphics.Bitmap createNotificationBadgeBitmap ( @ android.support.annotation.NonNull android.net.wifi.WifiConfiguration config , @ android.support.annotation.NonNull java.util.List < android.net.wifi.ScanResult > scanResults ) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult ( scanResults , config ) ; if ( matchingScanResult == null ) { return null ; } int rssi = matchingScanResult.level ; android.net.WifiKey wifiKey = new android.net.WifiKey ( config.SSID , config.BSSID ) ; android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider.getCachedScoredNetwork ( new android.net.NetworkKey ( wifiKey ) ) ; if ( scoredNetwork != null ) { return getBadgedWifiBitmap ( scoredNetwork.calculateBadge ( rssi ) , rssi ) ; } return null ; }
public void testGetAndSetDefaultUncaughtExceptionHandler ( ) { java.lang.Thread.UncaughtExceptionHandler defaultHandler = java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ; jsr166.ThreadTest.MyHandler eh = new jsr166.ThreadTest.MyHandler ( ) ; try { java.lang.Thread.setDefaultUncaughtExceptionHandler ( eh ) ; try { assertSame ( eh , java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ) ; } finally { java.lang.Thread.setDefaultUncaughtExceptionHandler ( defaultHandler ) ; } } catch ( java.lang.SecurityException ok ) { assertNotNull ( java.lang.System.getSecurityManager ( ) ) ; } assertSame ( defaultHandler , java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ) ; }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array ) { try { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy3DRangeFrom" ) ; copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; } finally { android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; } }
private android.bluetooth.BluetoothGattDescriptor getDescriptor ( ) { android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleServerService.CHARACTERISTIC_UUID ) ; if ( characteristic == null ) return null ; android.bluetooth.BluetoothGattDescriptor descriptor = characteristic.getDescriptor ( com.android.cts.verifier.bluetooth.BleServerService.DESCRIPTOR_UUID ) ; if ( descriptor == null ) { showMessage ( "Descriptor not found" ) ; return null ; } return descriptor ; }
public synchronized boolean isDataEnabled ( ) { return ( ( ( mInternalDataEnabled ) && ( mUserDataEnabled ) ) && ( mPolicyDataEnabled ) ) && ( mCarrierDataEnabled ) ; }
public void testConfigurationUpdatesWhenResizedFromDockedStack ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
private void assertParseFailure ( java.lang.String xml ) throws java.lang.Exception { org.xmlpull.v1.XmlPullParser parser = newPullParser ( ) ; assertParseFailure ( xml , parser ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.UnaryExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope b ) { int operator = ( ( x.bits ) & ( org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK ) ) > > ( org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT ) ; if ( ( operator == ( org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS ) ) && ( ! ( ( x.expression ) instanceof org.eclipse.jdt.internal.compiler.ast.Literal ) ) ) { hasEcjUnaryPosBug = true ; org.eclipse.jdt.internal.compiler.impl.Constant outer = x.constant ; org.eclipse.jdt.internal.compiler.impl.Constant inner = x.expression.constant ; @ java.lang.SuppressWarnings ( value = "unused" ) boolean hasEcjUnaryPosBug = ! ( outer.equals ( inner ) ) ; } }
public void addOutput ( byte [ ] data , int offset , int length ) { if ( ! ( isCancelled ( ) ) ) { java.lang.String s ; try { s = new java.lang.String ( data , offset , length , "UTF-8" ) ; } catch ( java.io.UnsupportedEncodingException e ) { s = new java.lang.String ( data , offset , length ) ; } mOutputBuffer.append ( s ) ; } }
private void updateUser ( ) { int userId = android.app.ActivityManager.getCurrentUser ( ) ; synchronized ( mLock ) { if ( ( mCurrentUserId ) != userId ) { final int oldUserId = mCurrentUserId ; mCurrentUserId = userId ; com.android.server.media.MediaSessionService.UserRecord oldUser = mUserRecords.get ( oldUserId ) ; if ( oldUser != null ) { oldUser.stopLocked ( ) ; } com.android.server.media.MediaSessionService.UserRecord newUser = getOrCreateUser ( userId ) ; newUser.startLocked ( ) ; } } }
private static boolean isWMVEnabled ( ) { java.util.List < android.media.DecoderCapabilities.VideoDecoder > decoders = android.media.DecoderCapabilities.getVideoDecoders ( ) ; int count = decoders.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { android.media.DecoderCapabilities.VideoDecoder decoder = decoders.get ( i ) ; if ( decoder == ( android.media.DecoderCapabilities.VideoDecoder.VIDEO_DECODER_WMV ) ) { return true ; } } return false ; }
public java.lang.String createNetworkSpecifierOpen ( @ android.annotation.Nullable android.net.wifi.aware.PeerHandle peerHandle ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.aware.DiscoverySession.TAG , "createNetworkSpecifierOpen: called on terminated session" ) ; return null ; } android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.aware.DiscoverySession.TAG , "createNetworkSpecifierOpen: called post GC on WifiAwareManager" ) ; return null ; } int role = ( ( this ) instanceof android.net.wifi.aware.SubscribeDiscoverySession ) ? WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR : WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER ; return mgr.createNetworkSpecifier ( mClientId , role , mSessionId , peerHandle , null , null ) ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , int [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * 4 ) ) ; }
public void processParameterAnnotations ( org.jf.dexlib.MethodIdItem method , org.jf.dexlib.AnnotationSetRefList parameterAnnotations ) { int cptParam = 0 ; for ( org.jf.dexlib.AnnotationSetItem asi : parameterAnnotations.getAnnotationSets ( ) ) { try { processGeneric ( ( ( ( "param " + ( cptParam ++ ) ) + " " ) + ( method.getMethodString ( ) ) ) , asi ) ; } catch ( com.android.jack.DifferenceFoundException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public void generateTestList ( ) { try { java.io.File tests_list = new java.io.File ( com.android.dumprendertree.LayoutTestsAutoTest.LAYOUT_TESTS_LIST_FILE ) ; java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( tests_list , false ) ) ; com.android.dumprendertree.FsUtils.findLayoutTestsRecursively ( bos , getTestPath ( ) , false ) ; bos.flush ( ) ; bos.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.dumprendertree.LayoutTestsAutoTest.LOGTAG , ( "Error when creating test list: " + ( e.getMessage ( ) ) ) ) ; } }
public void engineSetKeyEntry ( java.lang.String alias , java.security.Key key , char [ ] password , java.security.cert.Certificate [ ] chain ) throws java.security.KeyStoreException { if ( ( password != null ) && ( ( password.length ) > 0 ) ) { throw new java.security.KeyStoreException ( "entries cannot be protected with passwords" ) ; } if ( key instanceof java.security.PrivateKey ) { setPrivateKeyEntry ( alias , ( ( java.security.PrivateKey ) ( key ) ) , chain , null ) ; } else { throw new java.security.KeyStoreException ( "Only PrivateKeys are supported" ) ; } }
public void test_SSLContext_SSLv3Unsupported ( ) throws java.lang.Exception { try { javax.net.ssl.SSLContext context = javax.net.ssl.SSLContext.getInstance ( "SSLv3" ) ; fail ( "SSLv3 should not be supported" ) ; } catch ( java.security.NoSuchAlgorithmException expected ) { } }
private java.lang.CharSequence getDialerTos ( ) { if ( ! ( isVoicemailTranscriptionEnabled ( ) ) ) { return "" ; } if ( isVvm3 ( ) ) { return context.getString ( R.string.dialer_terms_and_conditions_for_verizon_1_0 ) ; } else { java.lang.String learnMoreText = context.getString ( R.string.dialer_terms_and_conditions_learn_more ) ; return context.getString ( R.string.dialer_terms_and_conditions_1_0 , learnMoreText ) ; } }
private void handleAssociatedBSSIDEvent ( java.lang.String eventStr ) { java.lang.String BSSID = null ; java.util.regex.Matcher match = com.android.server.wifi.WifiMonitor.mAssociatedPattern.matcher ( eventStr ) ; if ( match.find ( ) ) { BSSID = match.group ( 1 ) ; } mStateMachine.sendMessage ( WifiStateMachine.CMD_ASSOCIATED_BSSID , com.android.server.wifi.WifiMonitor.eventLogCounter , 0 , BSSID ) ; }
public static android.telephony.SignalStrength convertHalSignalStrength ( com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { int tdscdmaRscp_1_2 = 255 ; if ( ( ( signalStrength.tdScdma.rscp ) >= 25 ) && ( ( signalStrength.tdScdma.rscp ) <= 120 ) ) { int rscpDbm = - ( signalStrength.tdScdma.rscp ) ; tdscdmaRscp_1_2 = rscpDbm + 120 ; } return new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , tdscdmaRscp_1_2 ) ; }
public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { if ( event.getSource ( ) . equals ( mUseAdbHost ) ) { mAdbHostValue.setEnabled ( mUseAdbHost.getBooleanValue ( ) , getFieldEditorParent ( ) ) ; } else if ( event.getSource ( ) . equals ( mProfilerBufsize ) ) { com.android.ddmlib.DdmPreferences.setProfilerBufferSizeMb ( mProfilerBufsize.getIntValue ( ) ) ; } super . propertyChange ( event ) ; }
public void testMethodsGeneratedInDeterministicOrder ( ) throws java.lang.Exception { java.lang.reflect.Method [ ] methods1 = getMethodsForProxyClass ( com.google.dexmaker.stock.ProxyBuilderTest.TestOrderingClass.class ) ; assertNotNull ( methods1 ) ; java.util.Map < java.lang.Class < ? > , java.lang.Class < ? > > map = getGeneratedProxyClasses ( ) ; assertNotNull ( map ) ; map.clear ( ) ; java.lang.reflect.Method [ ] methods2 = getMethodsForProxyClass ( com.google.dexmaker.stock.ProxyBuilderTest.TestOrderingClass.class ) ; assertNotNull ( methods2 ) ; assertTrue ( java.util.Arrays.equals ( methods1 , methods2 ) ) ; }
private static void applyPattern ( long addr , boolean localized , java.lang.String pattern ) { try { libcore.icu.NativeDecimalFormat.applyPatternImpl ( addr , localized , pattern ) ; } catch ( java.lang.NullPointerException npe ) { throw npe ; } catch ( java.lang.RuntimeException re ) { throw new java.lang.IllegalArgumentException ( ( ( ( "syntax error: " + ( re.getMessage ( ) ) ) + ": " ) + pattern ) ) ; } }
private void updateDeviceNumberRow ( ) { if ( ( deviceNumberTextView ) == null ) { return ; } if ( ( isInMultiWindowMode ) || ( android.text.TextUtils.isEmpty ( primaryCallState.callbackNumber ) ) ) { deviceNumberTextView.setVisibility ( View.GONE ) ; deviceNumberDivider.setVisibility ( View.GONE ) ; return ; } deviceNumberTextView.setText ( context.getString ( R.string.contact_grid_callback_number , primaryCallState.callbackNumber ) ) ; deviceNumberTextView.setVisibility ( View.VISIBLE ) ; if ( primaryInfo.shouldShowLocation ) { deviceNumberDivider.setVisibility ( View.VISIBLE ) ; } }
public static void blowup ( ) throws java.lang.Exception { int size = ( 2 * 1024 ) * 1024 ; for ( int i = 0 ; i < ( Main.holder.length ) ; ) { try { Main.holder [ i ] = new char [ size ] ; i ++ ; } catch ( java.lang.OutOfMemoryError oome ) { size = size / 16 ; if ( size == 0 ) { break ; } } } Main.holder [ 0 ] = new char [ 100000 ] ; }
public void testSetTextString ( ) { java.text.RuleBasedCollator rbColl = ( ( java.text.RuleBasedCollator ) ( java.text.Collator.getInstance ( new java.util.Locale ( "es" , "" , "TRADITIONAL" ) ) ) ) ; java.lang.String text = "caa" ; java.text.CollationElementIterator iterator = rbColl.getCollationElementIterator ( text ) ; iterator.setOffset ( 1 ) ; assertEquals ( 1 , iterator.getOffset ( ) ) ; iterator.setText ( "cha" ) ; iterator.setOffset ( 1 ) ; assertEquals ( 1 , iterator.getOffset ( ) ) ; }
public com.android.jack.shrob.obfuscation.nameprovider.NameProvider getMethodNameProvider ( ) throws com.android.jack.JackIOException { com.android.jack.shrob.obfuscation.nameprovider.NameProvider provider ; if ( ( globalMethodNameProvider ) != null ) { provider = globalMethodNameProvider ; } else { provider = getNameProvider ( obfuscationDictionary ) ; } return provider ; }
static boolean native_preRotate ( long native_object , float degrees , float px , float py ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return false ; } d.preTransform ( android.graphics.Matrix_Delegate.getRotate ( degrees , px , py ) ) ; return true ; }
void dumpAppTokensLocked ( ) { for ( int i = ( mAppTokens.size ( ) ) - 1 ; i >= 0 ; i -- ) { android.util.Slog.v ( com.android.server.WindowManagerService.TAG , ( ( ( " #" + i ) + ": " ) + ( mAppTokens.get ( i ) . token ) ) ) ; } }
public void testSetTestClassWithTestSuiteProvider ( ) throws java.lang.Exception { mAndroidTestRunner.setTestClassName ( android.test.AndroidTestRunnerTest.SampleTestSuiteProvider.class . getName ( ) , null ) ; java.util.List < junit.framework.TestCase > testCases = mAndroidTestRunner.getTestCases ( ) ; java.util.List < java.lang.String > testNames = new java.util.ArrayList < > ( ) ; for ( junit.framework.TestCase testCase : testCases ) { testNames.add ( testCase.getName ( ) ) ; } assertEquals ( java.util.Arrays.asList ( "testOne" ) , testNames ) ; }
public static java.lang.String getGcpUrl ( java.lang.String projectId ) { return ( "https://source.developers.google.com/p/" + projectId ) + "/" ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.conscrypt.NativeCrypto.SSL_read ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 1 ) ; fail ( ) ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { model.removeImageChangeListener ( this ) ; crosshairColor.dispose ( ) ; transform.dispose ( ) ; if ( ( grid ) != null ) { grid.dispose ( ) ; } }
static boolean native_postSkew ( long native_object , float kx , float ky , float px , float py ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return false ; } d.postTransform ( android.graphics.Matrix_Delegate.getSkew ( kx , ky , px , py ) ) ; return true ; }
private void expandRegister ( int regIdx , com.android.jack.dx.rop.code.RegisterSpec registerToExpand ) { boolean replace = ( ( compatRegs ) == null ) ? true : ! ( compatRegs.get ( regIdx ) ) ; com.android.jack.dx.rop.code.RegisterSpec expandedReg ; if ( replace ) { expandedReg = registerToExpand.withReg ( base ) ; if ( ! ( duplicateFirst ) ) { base += expandedReg.getCategory ( ) ; } } else { expandedReg = registerToExpand ; } duplicateFirst = false ; result.set0 ( regIdx , expandedReg ) ; }
public static int $noinline$runSmaliTest ( java.lang.String name , boolean input ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } try { java.lang.Class < ? > c = java.lang.Class.forName ( "SmaliTests" ) ; java.lang.reflect.Method m = c.getMethod ( name , boolean . class ) ; return ( ( java.lang.Integer ) ( m.invoke ( null , input ) ) ) ; } catch ( java.lang.Exception ex ) { throw new java.lang.Error ( ex ) ; } }
public void loadQuickContactBadge ( android.widget.QuickContactBadge badge , com.android.dialer.glidephotomanager.PhotoInfo photoInfo ) { com.android.dialer.common.Assert.isMainThread ( ) ; badge.assignContactUri ( com.android.dialer.glidephotomanager.impl.GlidePhotoManagerImpl.parseUri ( photoInfo.lookupUri ( ) ) ) ; badge.setOverlay ( null ) ; com.android.dialer.glide.GlideRequest < android.graphics.drawable.Drawable > request = buildRequest ( com.android.dialer.glide.GlideApp.with ( badge ) , photoInfo ) ; request.into ( badge ) ; }
protected void test ( ) { if ( ( com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) ) == null ) { status = PASS ; } else { java.util.List < java.lang.String > result = new java.util.ArrayList ( com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . mPosted ) ; if ( ( result.size ( ) ) == 0 ) { status = PASS ; } else { logFail ( ) ; status = FAIL ; } } next ( ) ; }
public static android.renderscript.Element I16_4 ( android.renderscript.RenderScript rs ) { if ( ( rs.mElement_SHORT_4 ) == null ) { synchronized ( rs ) { if ( ( rs.mElement_SHORT_4 ) == null ) { rs.mElement_SHORT_4 = android.renderscript.Element.createVector ( rs , android.renderscript.Element.DataType.SIGNED_16 , 4 ) ; } } } return rs.mElement_SHORT_4 ; }
public java.lang.String substring ( int beginIndex ) { if ( beginIndex < 0 ) { throw new java.lang.StringIndexOutOfBoundsException ( this , beginIndex ) ; } int subLen = ( length ( ) ) - beginIndex ; if ( subLen < 0 ) { throw new java.lang.StringIndexOutOfBoundsException ( this , beginIndex ) ; } return beginIndex == 0 ? this : fastSubstring ( beginIndex , subLen ) ; }
public void testParseICMPv6NS ( ) { final java.lang.String packet = "807ABF6F48F3 100E7E263FC1 86DD" + ( ( ( ( ( ( "6C0000000020 3A FF" + "FE80000000000000FA000004FD000001" ) + "FF0200000000000000000001FF01C146" ) + "87 00 8AD4" ) + "00000000" ) + "2401FA000004FD0015EA6A5C7B01C146" ) + "01 01 00005E000265" ) ; final java.lang.String expected = "RX 10:0e:7e:26:3f:c1 > 80:7a:bf:6f:48:f3 ipv6" + ( " fe80::fa00:4:fd00:1 > ff02::1:ff01:c146 icmp6" + " ns 2401:fa00:4:fd00:15ea:6a5c:7b01:c146 slla 00:00:5e:00:02:65" ) ; org.junit.Assert.assertEquals ( expected , getSummary ( packet ) ) ; }
public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ( ( mEnforcingState ) != null ) && ( ! ( mEnforcingState.equals ( com.android.tradefed.targetprep.VtsCoveragePreparer.SELINUX_DISABLED ) ) ) ) { device.executeShellCommand ( ( "setenforce " + ( mEnforcingState ) ) ) ; } if ( ( mDeviceInfoPath ) != null ) { com.android.tradefed.util.FileUtil.recursiveDelete ( mDeviceInfoPath ) ; device.executeShellCommand ( ( "rm -r " + ( com.android.tradefed.targetprep.VtsCoveragePreparer.COVERAGE_CONFIGURE_DST ) ) ) ; } device.executeShellCommand ( "rm -rf /data/misc/trace/*" ) ; }
protected < DST extends com.android.sched.item.Component > java.util.Iterator < DST > adaptWithLog ( @ javax.annotation.Nonnull com.android.sched.schedulable.AdapterSchedulable < T , DST > adapter , @ javax.annotation.Nonnull T data ) throws java.lang.Exception { com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager.getManagedSchedulable ( adapter.getClass ( ) ) ; com.android.sched.util.log.Event event = logAndTrace ( adapter , managedSchedulable , data ) ; try { return adapter.adapt ( data ) ; } finally { event.end ( ) ; } }
public void run ( final com.android.cts.TestDevice device ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException { mTestStop = false ; java.util.Iterator < com.android.cts.Test > tests = getTests ( ) . iterator ( ) ; while ( ( tests.hasNext ( ) ) && ( ! ( mTestStop ) ) ) { mCurrentTest = tests.next ( ) ; if ( mCurrentTest.getResult ( ) . isNotExecuted ( ) ) { mCurrentTest.run ( device ) ; } } }
public static android.net.wifi.WifiConfiguration generateWifiConfig ( int networkId , int uid , java.lang.String ssid , boolean shared , boolean enabled , java.lang.String fqdn , java.lang.String providerFriendlyName ) { final android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration ( ) ; config.SSID = ssid ; config.networkId = networkId ; config.creatorUid = uid ; config.shared = shared ; config.status = ( enabled ) ? WifiConfiguration.Status.ENABLED : WifiConfiguration.Status.DISABLED ; config.FQDN = fqdn ; config.providerFriendlyName = providerFriendlyName ; return config ; }
public void test_group ( ) throws java.lang.Throwable { java.nio.channels.spi.AsynchronousChannelProvider provider = java.nio.channels.spi.AsynchronousChannelProvider.provider ( ) ; java.nio.channels.AsynchronousChannelGroup group = provider.openAsynchronousChannelGroup ( 2 , java.util.concurrent.Executors.defaultThreadFactory ( ) ) ; java.nio.channels.AsynchronousServerSocketChannel assc = java.nio.channels.AsynchronousServerSocketChannel.open ( group ) ; assertNull ( assc.getLocalAddress ( ) ) ; assc.bind ( new java.net.InetSocketAddress ( 0 ) ) ; assertNotNull ( assc.getLocalAddress ( ) ) ; assertEquals ( provider , assc.provider ( ) ) ; assc.close ( ) ; }
protected void engineInit ( java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( ( params != null ) && ( ! ( params instanceof org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec ) ) ) { throw new java.security.InvalidAlgorithmParameterException ( "No algorithm parameters supported" ) ; } initFromKey ( key , params ) ; }
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo > lookup ( @ android.support.annotation.NonNull com.android.dialer.DialerPhoneNumber number ) { if ( ! ( com.android.dialer.blocking.FilteredNumberCompat.useNewFiltering ( appContext ) ) ) { return com.google.common.util.concurrent.Futures.immediateFuture ( com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.getDefaultInstance ( ) ) ; } return executorService.submit ( ( ) -> queryNumbers ( com.google.common.collect.ImmutableSet.of ( number ) ) . get ( number ) ) ; }
public boolean setP2pGroupIdle ( java.lang.String iface , int time ) { return mSupplicantP2pIfaceHal.setGroupIdle ( iface , time ) ; }
private com.android.jack.ir.ast.JDefinedClassOrInterface getAccessorClassForSuperCall ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaringType ) { assert ( currentType ) != null ; com.android.jack.ir.ast.JDefinedClass enclosing = ( ( com.android.jack.ir.ast.JDefinedClass ) ( currentType ) ) ; while ( ! ( com.android.jack.transformations.ast.inner.InnerAccessorGenerator.isSuperClassOf ( ( ( com.android.jack.ir.ast.JDefinedClass ) ( declaringType ) ) , enclosing ) ) ) { enclosing = ( ( com.android.jack.ir.ast.JDefinedClass ) ( enclosing.getEnclosingType ( ) ) ) ; } return enclosing ; }
public com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult getContrastResultForNormalText ( ) { if ( ( ( mIsBold ) && ( ( mTextSize ) != null ) ) && ( ( mTextSize ) >= ( com.android.hierarchyviewerlib.models.EvaluateContrastModel.NORMAL_TEXT_BOLD_SZ_PTS ) ) ) { return getContrastResultForLargeText ( ) ; } return ( mContrastRatio ) >= ( com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_RATIO_NORMAL_TEXT ) ? com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult.PASS : com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult.FAIL ; }
public void test_socket_accept_Blocking_Bound ( ) throws java.io.IOException { serverChannel.configureBlocking ( true ) ; serverChannel.socket ( ) . bind ( null ) ; serverChannel.close ( ) ; try { serverChannel.socket ( ) . accept ( ) ; fail ( "Should throw a ClosedChannelException" ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
public int getModifiers ( ) { if ( isArray ( ) ) { int componentModifiers = getComponentType ( ) . getModifiers ( ) ; if ( ( componentModifiers & ( java.lang.reflect.Modifier.INTERFACE ) ) != 0 ) { componentModifiers &= ~ ( ( java.lang.reflect.Modifier.INTERFACE ) | ( java.lang.reflect.Modifier.STATIC ) ) ; } return ( ( java.lang.reflect.Modifier.ABSTRACT ) | ( java.lang.reflect.Modifier.FINAL ) ) | componentModifiers ; } int JAVA_FLAGS_MASK = 65535 ; int modifiers = getInnerClassFlags ( ( ( accessFlags ) & JAVA_FLAGS_MASK ) ) ; return modifiers & JAVA_FLAGS_MASK ; }
protected static java.lang.String hex ( char [ ] s ) { java.lang.StringBuffer result = new java.lang.StringBuffer ( ) ; for ( int i = 0 ; i < ( s.length ) ; ++ i ) { if ( i != 0 ) result.append ( ',' ) ; result.append ( com.ibm.icu.dev.test.TestFmwk.hex ( s [ i ] ) ) ; } return result.toString ( ) ; }
static void setInt ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , int value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { if ( v == null ) { m.invokeExact ( value ) ; } else { m.invokeExact ( v , value ) ; } } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertEquals ( exceptionThrown , expectFailure ) ; }
public static java.lang.String toString ( java.util.ArrayList < android.hardware.tests.baz.V1_0.IBase.Foo.Bar > vec ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "[" ) ; for ( int i = 0 ; i < ( vec.size ( ) ) ; ++ i ) { if ( i > 0 ) { builder.append ( ", " ) ; } builder.append ( com.android.commands.hidl_test_java.HidlTestJava.toString ( vec.get ( i ) ) ) ; } builder.append ( "]" ) ; return builder.toString ( ) ; }
public void testSortByApi_Empty ( ) { m.updateStart ( ) ; assertFalse ( m.updateSourcePackages ( null , new java.lang.Package [ 0 ] ) ) ; assertFalse ( m.updateEnd ( ) ) ; assertEquals ( ( "PkgCategoryApi <API=TOOLS, label=Tools, #items=0>\n" + "PkgCategoryApi <API=EXTRAS, label=Extras, #items=0>\n" ) , getTree ( m ) ) ; }
public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ( ( mLocation ) != null ) && ( ! ( mIgnore ) ) ) { java.lang.String message = ( ( "Potentially insecure random numbers on Android 4.3 and older. " + "Read " ) + ( com.android.tools.lint.checks.SecureRandomGeneratorDetector.BLOG_URL ) ) + " for more info." ; context.report ( com.android.tools.lint.checks.SecureRandomGeneratorDetector.ISSUE , mLocation , message ) ; } }
public boolean isInManagedCall ( android.content.Context context ) { if ( com.android.dialer.telecom.TelecomUtil.hasReadPhoneStatePermission ( context ) ) { if ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.O ) ) { return com.android.dialer.telecom.TelecomUtil.getTelecomManager ( context ) . isInManagedCall ( ) ; } else { return com.android.dialer.telecom.TelecomUtil.getTelecomManager ( context ) . isInCall ( ) ; } } return false ; }
public final void testCreateDup ( ) { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( "xml" , "com.example.MyJavaClass" ) ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ( ved ) ; com.android.ide.common.rendering.api.ViewInfo lvi = new com.android.ide.common.rendering.api.ViewInfo ( "name" , uiv , 10 , 12 , 110 , 120 ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo.create ( lvi , true ) . getFirst ( ) ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create ( cvi ) ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create ( cvi ) ; assertSame ( proxy2 , proxy1 ) ; }
private void processConnectionEvent ( int state , android.bluetooth.BluetoothDevice device ) { switch ( state ) { case HeadsetClientHalConstants.CONNECTION_STATE_DISCONNECTED : if ( mCurrentDevice.equals ( device ) ) { processAudioEvent ( HeadsetClientHalConstants.AUDIO_STATE_DISCONNECTED , device ) ; transitionTo ( mDisconnected ) ; } else { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Disconnected from unknown device: " + device ) ) ; } break ; default : android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( ( ( "Connection State Device: " + device ) + " bad state: " ) + state ) ) ; break ; } }
public java.lang.String wifiAwareCreateNetworkSpecifier ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "sessionId" , description = "The session ID returned when session was created using publish or subscribe" ) java.lang.Integer sessionId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "peerId" , description = "The ID of the peer (obtained through OnMatch or OnMessageReceived" ) java.lang.Integer peerId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "token" , description = "Arbitrary token message to be sent to peer as part of data-path creation process" ) java.lang.String token ) { android.net.wifi.aware.WifiAwareDiscoveryBaseSession session ; synchronized ( mLock ) { session = mDiscoverySessions.get ( sessionId ) ; } if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling WifiAwareStartRanging before session (session ID " + sessionId ) + " is ready" ) ) ; } byte [ ] bytes = token.getBytes ( ) ; return session.createNetworkSpecifier ( new android.net.wifi.aware.WifiAwareManager.PeerHandle ( peerId ) , bytes ) ; }
public static int Min2Print6 ( int a , int b , int c , int d , int e , int f ) { int [ ] values = new int [ ] { a , b , c , d , e , f } ; java.lang.System.out.println ( ( ( "Running Main.Min2Print6(" + ( java.util.Arrays.toString ( values ) ) ) + ")" ) ) ; return a > b ? a : b ; }
public T getDelegate ( long native_object ) { if ( native_object > 0 ) { T delegate = mDelegates.get ( native_object ) ; if ( com.android.layoutlib.bridge.util.Debug.DEBUG ) { if ( delegate == null ) { java.lang.System.out.println ( ( ( ( "Unknown " + ( mClass.getSimpleName ( ) ) ) + " with int " ) + native_object ) ) ; } } assert delegate != null ; return delegate ; } return null ; }
private static java.nio.charset.Charset lookup ( java.lang.String charsetName ) { if ( charsetName == null ) throw new java.lang.IllegalArgumentException ( "Null charset name" ) ; java.lang.Object [ ] a ; if ( ( ( a = java.nio.charset.Charset.cache1 ) != null ) && ( charsetName.equals ( a [ 0 ] ) ) ) return ( ( java.nio.charset.Charset ) ( a [ 1 ] ) ) ; return java.nio.charset.Charset.lookup2 ( charsetName ) ; }
protected java.lang.String listingString0 ( boolean noteIndices ) { int baseAddress = user.getAddress ( ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( 100 ) ; int sz = targets.length ; sb.append ( ( packed ? "packed" : "sparse" ) ) ; sb.append ( "-switch-payload // for switch @ " ) ; sb.append ( com.android.dx.util.Hex.u2 ( baseAddress ) ) ; for ( int i = 0 ; i < sz ; i ++ ) { int absTarget = targets [ i ] . getAddress ( ) ; int relTarget = absTarget - baseAddress ; sb.append ( "\n " ) ; sb.append ( cases.get ( i ) ) ; sb.append ( ": " ) ; sb.append ( com.android.dx.util.Hex.u4 ( absTarget ) ) ; sb.append ( " // " ) ; sb.append ( com.android.dx.util.Hex.s4 ( relTarget ) ) ; } return sb.toString ( ) ; }
public com.google.gct.testing.GoogleCloudTestingConfiguration copy ( java.lang.String prefix ) { com.google.gct.testing.GoogleCloudTestingConfiguration newConfiguration = ( prefix == null ) ? new com.google.gct.testing.GoogleCloudTestingConfiguration ( id , name , icon , facet ) : new com.google.gct.testing.GoogleCloudTestingConfiguration ( ( prefix + ( name ) ) , icon , facet ) ; newConfiguration.deviceDimension.enableAll ( deviceDimension.getEnabledTypes ( ) ) ; newConfiguration.apiDimension.enableAll ( apiDimension.getEnabledTypes ( ) ) ; newConfiguration.languageDimension.enableAll ( languageDimension.getEnabledTypes ( ) ) ; newConfiguration.orientationDimension.enableAll ( orientationDimension.getEnabledTypes ( ) ) ; return newConfiguration ; }
public void test_getURIs ( ) throws java.net.URISyntaxException { java.util.List < java.net.URI > list = cookieStore.getURIs ( ) ; assertTrue ( list.isEmpty ( ) ) ; java.net.URI uri1 = new java.net.URI ( "http://geturis1.test.com" ) ; java.net.HttpCookie cookie1 = new java.net.HttpCookie ( "cookie_name1" , "cookie_value1" ) ; cookieStore.add ( uri1 , cookie1 ) ; list = cookieStore.getURIs ( ) ; assertEquals ( "geturis1.test.com" , list.get ( 0 ) . getHost ( ) ) ; java.net.HttpCookie cookie2 = new java.net.HttpCookie ( "cookie_name2" , "cookie_value2" ) ; cookieStore.add ( uri1 , cookie2 ) ; list = cookieStore.getURIs ( ) ; assertEquals ( 1 , list.size ( ) ) ; java.net.URI uri2 = new java.net.URI ( "http://geturis2.test.com" ) ; cookieStore.add ( uri2 , cookie2 ) ; list = cookieStore.getURIs ( ) ; assertEquals ( 2 , list.size ( ) ) ; assertTrue ( list.contains ( uri1 ) ) ; assertTrue ( list.contains ( uri2 ) ) ; }
public static org.w3c.dom.Document parse ( @ com.android.annotations.NonNull byte [ ] data ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String xml = com.android.utils.PositionXmlParser.getXmlString ( data ) ; xml = com.android.utils.XmlUtils.stripBom ( xml ) ; return com.android.utils.PositionXmlParser.parse ( xml , new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) , true ) ; }
public void testAddObserverReturnValue ( ) { org.chromium.base.ObserverList < java.lang.Object > observerList = new org.chromium.base.ObserverList < java.lang.Object > ( ) ; java.lang.Object a = new java.lang.Object ( ) ; assertTrue ( observerList.addObserver ( a ) ) ; assertFalse ( observerList.addObserver ( a ) ) ; java.lang.Object b = new java.lang.Object ( ) ; assertTrue ( observerList.addObserver ( b ) ) ; assertFalse ( observerList.addObserver ( null ) ) ; }
public static byte [ ] convert ( java.lang.String bpf ) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator ( 3 ) ; for ( java.lang.String line : bpf.split ( "\\n" ) ) android.net.apf.Bpf2Apf.convertLine ( line , gen ) ; return gen.generate ( ) ; }
public boolean setOperatorBrandOverride ( int subId , java.lang.String brand ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.setOperatorBrandOverride ( subId , brand ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setOperatorBrandOverride RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setOperatorBrandOverride NPE" , ex ) ; } return false ; }
private java.text.DateFormat getTimeFormat ( ) { return android.text.format.DateFormat.getTimeFormat ( getContext ( ) ) ; }
java.lang.String getRemoteName ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ( mRemoteDevices ) == null ) return null ; com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties ( device ) ; if ( deviceProp == null ) return null ; return deviceProp.getName ( ) ; }
private static void checkFromToBounds ( int arrayLength , int origin , int fence ) { if ( origin > fence ) { throw new java.lang.ArrayIndexOutOfBoundsException ( ( ( ( ( "origin(" + origin ) + ") > fence(" ) + fence ) + ")" ) ) ; } if ( origin < 0 ) { throw new java.lang.ArrayIndexOutOfBoundsException ( origin ) ; } if ( fence > arrayLength ) { throw new java.lang.ArrayIndexOutOfBoundsException ( fence ) ; } }
public void test_formatLjava_util_Date ( ) { try { java.text.DateFormat format = java.text.DateFormat.getDateTimeInstance ( java.text.DateFormat.SHORT , java.text.DateFormat.SHORT , java.util.Locale.US ) ; java.util.Date current = new java.util.Date ( ) ; java.lang.String dtf = format.format ( current ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "M/d/yy h:mm a" , java.util.Locale.US ) ; assertTrue ( "Incorrect date format" , sdf.format ( current ) . equals ( dtf ) ) ; } catch ( java.lang.Exception e ) { fail ( ( "Unexpected exception " + ( e.toString ( ) ) ) ) ; } }
public final java.lang.String toHuman ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( 100 ) ; boolean first = true ; sb.append ( "{" ) ; for ( com.android.dx.dex.file.OffsettedItem i : items ) { if ( first ) { first = false ; } else { sb.append ( ", " ) ; } sb.append ( i.toHuman ( ) ) ; } sb.append ( "}" ) ; return sb.toString ( ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { switch ( which ) { case android.content.DialogInterface.BUTTON_POSITIVE : mOppManager.enableBluetooth ( ) ; mOppManager.mSendingFlag = true ; android.widget.Toast.makeText ( this , getString ( R.string.enabling_progress_content ) , Toast.LENGTH_SHORT ) . show ( ) ; android.content.Intent in = new android.content.Intent ( this , com.android.bluetooth.opp.BluetoothOppBtEnablingActivity.class ) ; in.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; this . startActivity ( in ) ; finish ( ) ; break ; case android.content.DialogInterface.BUTTON_NEGATIVE : finish ( ) ; break ; } }
protected static void addProperties ( @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.lang.String > properties , @ javax.annotation.Nonnull java.util.List < java.lang.String > args ) { for ( java.util.Map.Entry < java.lang.String , java.lang.String > entry : properties.entrySet ( ) ) { args.add ( "-D" ) ; args.add ( ( ( ( entry.getKey ( ) ) + "=" ) + ( entry.getValue ( ) ) ) ) ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.SuperReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.ast.JClass superClass ; assert ( ( superClass = curClass.classType.getSuperClass ( ) ) == null ) || ( getTypeMap ( ) . get ( x.resolvedType ) . isSameType ( superClass ) ) ; push ( makeThisRef ( makeSourceInfo ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertEqualCertificateChains ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerCertificates ( ) , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_get_certificate ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void test_isLetterOrDigitC ( ) { assertTrue ( "Digit returned false" , java.lang.Character.isLetterOrDigit ( '9' ) ) ; assertTrue ( "Letter returned false" , java.lang.Character.isLetterOrDigit ( 'K' ) ) ; assertFalse ( "Control returned true" , java.lang.Character.isLetterOrDigit ( '\n' ) ) ; assertFalse ( "Punctuation returned true" , java.lang.Character.isLetterOrDigit ( '?' ) ) ; }
public void test_parkUntil_3 ( ) { java.util.concurrent.CyclicBarrier barrier = new java.util.concurrent.CyclicBarrier ( 1 ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker parker = new tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker ( barrier , true , 1000 ) ; java.lang.Thread parkerThread = new java.lang.Thread ( parker ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.UNSAFE.unpark ( parkerThread ) ; parkerThread.start ( ) ; parker.assertDurationIsInRange ( 0 ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { java.lang.String v = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_SESSION_get_version ( session ) ; assertTrue ( StandardNames.SSL_SOCKET_PROTOCOLS.contains ( v ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object rowKey , @ javax.annotation.Nullable java.lang.Object columnKey ) { return ( ( rowKey != null ) && ( columnKey != null ) ) && ( super . contains ( rowKey , columnKey ) ) ; }
public synchronized boolean enable ( boolean quietMode ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; if ( mUserManager.hasUserRestriction ( UserManager.DISALLOW_BLUETOOTH , UserHandle.SYSTEM ) ) { debugLog ( "enable() called when Bluetooth was disallowed" ) ; return false ; } debugLog ( ( "enable() - Enable called with quiet mode status = " + quietMode ) ) ; mQuietmode = quietMode ; mAdapterStateMachine.sendMessage ( AdapterState.BLE_TURN_ON ) ; return true ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [ ] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( classpath , fileOrSourceList , withDebugInfo , false , 0.0F , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public void notifyChanged ( ) { synchronized ( notifyLock ) { if ( ( listeners ) != null ) { if ( ( notifyThread ) == null ) { notifyThread = new android.icu.impl.ICUNotifier.NotifyThread ( this ) ; notifyThread.setDaemon ( true ) ; notifyThread.start ( ) ; } notifyThread.queue ( listeners.toArray ( new java.util.EventListener [ listeners.size ( ) ] ) ) ; } } }
private long readId ( ) throws java.io.IOException { return readId ( mInput ) ; }
public void testWrapperCleanup ( ) { android.os.TestLooperManager looperManager = new android.os.TestLooperManager ( mThread.getLooper ( ) ) ; com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap ( mMockController , mThread.getLooper ( ) ) ; wrapper.registerCallback ( mTestCbs ) ; wrapper.cleanup ( ) ; verify ( mMockController ) . unregisterCallback ( any ( ) ) ; org.junit.Assert.assertNull ( wrapper.getTimeoutHandler ( ) ) ; }
public boolean unregisterApp ( ) { boolean result = false ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { result = service.unregisterApp ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHidDevice.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothHidDevice.TAG , "Proxy not attached to service" ) ; } return result ; }
protected void syncSpi ( ) throws java.util.prefs.BackingStoreException { syncSpiPrivileged ( ) ; }
public static void setAdb ( java.lang.String adb , boolean startAdb ) { if ( adb != null ) { if ( com.android.ide.eclipse.ddms.DdmsPlugin.setAdbLocation ( adb ) ) { if ( startAdb ) { new java.lang.Thread ( ) { @ java.lang.Override public void run ( ) { com.android.ddmlib.AndroidDebugBridge.createBridge ( com.android.ide.eclipse.ddms.DdmsPlugin.sAdbLocation , false ) ; } } . start ( ) ; } } } }
protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( params != null ) { throw new java.security.InvalidAlgorithmParameterException ( ( "unknown param type: " + ( params.getClass ( ) . getName ( ) ) ) ) ; } engineInitInternal ( opmode , key , null ) ; }
private void fillCombo ( org.eclipse.swt.widgets.Combo combo , com.android.sdklib.resources.ResourceEnum [ ] resEnums ) { for ( com.android.sdklib.resources.ResourceEnum resEnum : resEnums ) { if ( ( ( ( mDeviceMode ) == false ) || ( resEnum.isValidValueForDevice ( ) ) ) && ( ( resEnum.isFakeValue ( ) ) == false ) ) { combo.add ( resEnum.getShortDisplayValue ( ) ) ; } } }
private void registerForSimRecordEvents ( ) { com.android.internal.telephony.uicc.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.registerForNetworkSelectionModeAutomatic ( this , com.android.internal.telephony.gsm.EVENT_SET_NETWORK_AUTOMATIC , null ) ; r.registerForRecordsEvents ( this , com.android.internal.telephony.gsm.EVENT_ICC_RECORD_EVENTS , null ) ; r.registerForRecordsLoaded ( this , com.android.internal.telephony.gsm.EVENT_SIM_RECORDS_LOADED , null ) ; }
public android.net.LinkProperties.CompareResult < android.net.RouteInfo > compareAllRoutes ( android.net.LinkProperties target ) { return new android.net.LinkProperties.CompareResult ( getAllRoutes ( ) , ( target != null ? target.getAllRoutes ( ) : null ) ) ; }
public void run ( ) { com.android.server.location.GpsXtraDownloader xtraDownloader = new com.android.server.location.GpsXtraDownloader ( mProperties ) ; byte [ ] data = xtraDownloader.downloadXtraData ( ) ; if ( data != null ) { if ( com.android.server.location.GpsLocationProvider.DEBUG ) { android.util.Log.d ( com.android.server.location.GpsLocationProvider.TAG , "calling native_inject_xtra_data" ) ; } native_inject_xtra_data ( data , data.length ) ; } sendMessage ( com.android.server.location.GpsLocationProvider.DOWNLOAD_XTRA_DATA_FINISHED , 0 , null ) ; if ( data == null ) { mHandler.sendEmptyMessageDelayed ( com.android.server.location.GpsLocationProvider.DOWNLOAD_XTRA_DATA , com.android.server.location.GpsLocationProvider.RETRY_INTERVAL ) ; } mWakeLock.release ( ) ; }
public static java.util.List < org.eclipse.jdt.core.IJavaProject > getJavaProjects ( java.util.List < org.eclipse.core.resources.IProject > projects ) throws org.eclipse.core.runtime.CoreException { java.util.ArrayList < org.eclipse.jdt.core.IJavaProject > list = new java.util.ArrayList < org.eclipse.jdt.core.IJavaProject > ( ) ; for ( org.eclipse.core.resources.IProject p : projects ) { if ( ( p.isOpen ( ) ) && ( p.hasNature ( org.eclipse.jdt.core.JavaCore.NATURE_ID ) ) ) { list.add ( org.eclipse.jdt.core.JavaCore.create ( p ) ) ; } } return list ; }
private void generateTestList ( java.lang.String path ) { try { java.io.File tests_list = new java.io.File ( com.android.dumprendertree.Menu.LAYOUT_TESTS_LIST_FILE ) ; java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( tests_list , false ) ) ; com.android.dumprendertree.FsUtils.findLayoutTestsRecursively ( bos , path , false ) ; bos.flush ( ) ; bos.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.dumprendertree.Menu.LOGTAG , ( "Error when creating test list: " + ( e.getMessage ( ) ) ) ) ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ConditionalExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JExpression valueIfFalse = pop ( x.valueIfFalse ) ; com.android.jack.ir.ast.JExpression valueIfTrue = pop ( x.valueIfTrue ) ; com.android.jack.ir.ast.JExpression condition = pop ( x.condition ) ; push ( new com.android.jack.ir.ast.JConditionalExpression ( info , condition , valueIfTrue , valueIfFalse ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public static android.telecom.DisconnectCause toTelecomDisconnectCause ( int telephonyDisconnectCause , java.lang.String reason ) { android.content.Context context = com.android.phone.PhoneGlobals.getInstance ( ) ; return new android.telecom.DisconnectCause ( com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseCode ( telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseLabel ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseDescription ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectReason ( context , telephonyDisconnectCause , reason ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseTone ( telephonyDisconnectCause ) ) ; }
public void test_ConstructorLjava_net_InetAddressIZ ( ) throws java.io.IOException { try ( java.net.ServerSocket server = new java.net.ServerSocket ( 0 ) ) { int serverPort = server.getLocalPort ( ) ; try ( java.net.Socket client = new java.net.Socket ( java.net.InetAddress.getLocalHost ( ) , serverPort , true ) ) { assertEquals ( "Failed to create socket" , serverPort , client.getPort ( ) ) ; } try ( java.net.Socket client = new java.net.Socket ( java.net.InetAddress.getLocalHost ( ) , serverPort , false ) ) { assertEquals ( "Failed to create socket" , serverPort , client.getPort ( ) ) ; } } }
protected void writeDebugEnd ( @ javax.annotation.CheckForNull org.objectweb.asm.tree.ClassNode classNode , @ javax.annotation.Nonnegative int currentLine ) throws java.io.IOException { if ( ( classNode != null ) && ( currentLine != ( SourceInfoWriter.NO_LINE ) ) ) { sourceInfoWriter.writeDebugEnd ( classNode , ( currentLine + 1 ) ) ; } else { sourceInfoWriter.writeUnknownDebugEnd ( ) ; } }
private void computeCatchList ( @ javax.annotation.Nonnull org.objectweb.asm.tree.LabelNode labelNode ) { for ( org.objectweb.asm.tree.TryCatchBlockNode tryCatchNode : currentMethod.tryCatchBlocks ) { java.lang.String id = getCatchId ( tryCatchNode.handler ) ; if ( ( tryCatchNode.start ) == labelNode ) { currentCatchList.add ( id ) ; } else if ( ( tryCatchNode.end ) == labelNode ) { assert currentCatchList.contains ( id ) ; currentCatchList.remove ( id ) ; } } }
private static java.lang.String getFolderName ( com.android.ide.common.res2.ResourceItem resourceItem ) { com.android.resources.ResourceType itemType = resourceItem.getType ( ) ; java.lang.String folderName = itemType.getName ( ) ; java.lang.String qualifiers = resourceItem.getQualifiers ( ) ; if ( ! ( qualifiers.isEmpty ( ) ) ) { folderName = ( folderName + ( com.android.SdkConstants.RES_QUALIFIER_SEP ) ) + qualifiers ; } return folderName ; }
static synchronized long nativeCreateFromTypeface ( long native_instance , int style ) { android.graphics.Typeface_Delegate delegate = android.graphics.Typeface_Delegate.sManager.getDelegate ( native_instance ) ; if ( delegate == null ) { return 0 ; } android.graphics.Typeface_Delegate newDelegate = new android.graphics.Typeface_Delegate ( delegate.mFamily , style ) ; if ( ( android.graphics.Typeface_Delegate.sFontLoader ) != null ) { newDelegate.init ( ) ; } else { android.graphics.Typeface_Delegate.sPostInitDelegate.add ( newDelegate ) ; } return android.graphics.Typeface_Delegate.sManager.addNewDelegate ( newDelegate ) ; }
public void run ( ) { mStatusBarView.getLocationOnScreen ( mAbsPos ) ; android.util.Log.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , ( ( ( ( ( ( ( "mStatusBarView: ----- (" + ( mAbsPos [ 0 ] ) ) + "," ) + ( mAbsPos [ 1 ] ) ) + ") " ) + ( mStatusBarView.getWidth ( ) ) ) + "x" ) + ( getStatusBarHeight ( ) ) ) ) ; mStatusBarView.debug ( ) ; }
public java.util.Collection < com.android.build.gradle.internal.dsl.CoreBuildType > getBuildTypes ( ) { return com.google.common.collect.ImmutableList.copyOf ( com.google.common.collect.Iterables.transform ( model.getBuildTypes ( ) . values ( ) , new com.google.common.base.Function < com.android.build.gradle.managed.BuildType , com.android.build.gradle.internal.dsl.CoreBuildType > ( ) { @ java.lang.Override public com.android.build.gradle.internal.dsl.CoreBuildType apply ( com.android.build.gradle.managed.BuildType buildType ) { return new com.android.build.gradle.managed.adaptor.BuildTypeAdaptor ( buildType ) ; } } ) ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_renegotiate ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_write ( s , fd , callback , new byte [ ] { 42 } , 0 , 1 , 0 ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static android.icu.impl.ICUResourceBundle getBundleInstance ( java.lang.String baseName , java.lang.String localeID , java.lang.ClassLoader root , boolean disableFallback ) { return android.icu.impl.ICUResourceBundle.getBundleInstance ( baseName , localeID , root , ( disableFallback ? android.icu.impl.ICUResourceBundle.OpenType.DIRECT : android.icu.impl.ICUResourceBundle.OpenType.LOCALE_DEFAULT_ROOT ) ) ; }
private vogar.Mode createMode ( vogar.ModeId modeId , vogar.Variant variant ) { switch ( modeId ) { case JVM : return new vogar.JavaVm ( this ) ; case HOST : return new vogar.android.HostRuntime ( this , modeId , variant ) ; case DEVICE : case APP_PROCESS : return new vogar.android.DeviceRuntime ( this , modeId , variant ) ; case ACTIVITY : return new vogar.android.ActivityMode ( this ) ; default : throw new java.lang.IllegalArgumentException ( ( "Unsupported mode: " + modeId ) ) ; } }
public void onWindowFocusChanged ( final boolean hasWindowFocus ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onWindowFocusChanged ( hasWindowFocus ) ; } } ) ; return ; } mAwContents.onWindowFocusChanged ( hasWindowFocus ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariableRef x ) { com.android.jack.debug.DebugVariableInfoMarker debugInfo = x.getMarker ( com.android.jack.debug.DebugVariableInfoMarker.class ) ; if ( ( debugInfo != null ) && ( ( debugInfo.getType ( ) ) != null ) ) { trace ( debugInfo.getType ( ) ) ; } }
public void configure ( java.lang.String [ ] argv ) { super . configure ( argv ) ; checkedClasspaths = new org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath [ ] { new com.android.jack.ecj.loader.jast.JAstClasspath ( "<jack-logical-entry>" , session.getLookup ( ) , null ) } ; }
public void run ( ) { com.android.rs.test_v14.RenderScript pRS = com.android.rs.test_v14.RenderScript.create ( mCtx ) ; com.android.rs.test_v14.ScriptC_vector s = new com.android.rs.test_v14.ScriptC_vector ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; if ( ! ( initializeGlobals ( s ) ) ) { result = - 1 ; } else { s.invoke_vector_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; } pRS.destroy ( ) ; }
public void testRootnF32_4_relaxed ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_4 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 4400074 , 1 , 32 , n ) ; nAlloc.copyFrom ( n ) ; script_f32_relaxed.set_n4 ( nAlloc ) ; doF32_4_relaxed ( 11145969 , 16 ) ; }
public static int forkSystemServer ( int uid , int gid , int [ ] gids , int runtimeFlags , int [ ] [ ] rlimits , long permittedCapabilities , long effectiveCapabilities ) { com.android.internal.os.Zygote.VM_HOOKS.preFork ( ) ; com.android.internal.os.Zygote.resetNicePriority ( ) ; int pid = com.android.internal.os.Zygote.nativeForkSystemServer ( uid , gid , gids , runtimeFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == 0 ) { android.os.Trace.setTracingEnabled ( true , runtimeFlags ) ; } com.android.internal.os.Zygote.VM_HOOKS.postForkCommon ( ) ; return pid ; }
public void init ( android.content.Context context , com.android.incallui.Call call ) { mContext = com.google.common.base.Preconditions.checkNotNull ( context ) ; if ( call != null ) { mPrimary = call ; if ( ! ( call.isConferenceCall ( ) ) ) { startContactInfoSearch ( call , true , ( ( call.getState ( ) ) == ( Call.State.INCOMING ) ) ) ; } else { updateContactEntry ( null , true ) ; } } }
private void updateAdb ( ) { try { mSdkManager.updateAdb ( ) ; mSdkLog.info ( ( "adb has been updated. You must restart adb with the following commands\n" + ( "\tadb kill-server\n" + "\tadb start-server\n" ) ) ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } catch ( java.io.IOException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
public void test_shutdownNow ( ) throws java.lang.Exception { java.nio.channels.AsynchronousChannelGroup acg = java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool ( java.util.concurrent.Executors.newFixedThreadPool ( 5 ) , 1 ) ; java.nio.channels.AsynchronousServerSocketChannel assc = java.nio.channels.AsynchronousServerSocketChannel.open ( acg ) ; acg.shutdownNow ( ) ; assertTrue ( acg.isShutdown ( ) ) ; assertFalse ( assc.isOpen ( ) ) ; try { java.nio.channels.AsynchronousServerSocketChannel.open ( acg ) ; fail ( ) ; } catch ( java.nio.channels.ShutdownChannelGroupException expected ) { } acg.shutdownNow ( ) ; }
public void testEmptyStringException ( ) { try { new java.text.RuleBasedCollator ( "" ) ; fail ( ) ; } catch ( java.text.ParseException e ) { assertEquals ( "java.text.ParseException" , e.getClass ( ) . getName ( ) ) ; assertEquals ( 0 , e.getErrorOffset ( ) ) ; } }
public java.lang.String getFirmwareVersion ( ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getFirmwareVersionNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return "" ; } } }
private static java.lang.StringBuilder getPathFromDirInternal ( @ javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVDir baseDir , @ javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVDir currentDir ) { if ( baseDir == currentDir ) { return new java.lang.StringBuilder ( ) ; } com.android.sched.vfs.CachedDirectFS.CachedParentVDir currentParent = currentDir.getParent ( ) ; assert currentParent != null ; return com.android.sched.vfs.CachedDirectFS.getPathFromDirInternal ( baseDir , currentParent ) . append ( currentDir.getName ( ) ) . append ( '/' ) ; }
public void write ( ) throws java.io.IOException { if ( com.android.jill.frontend.java.AsmHelper.isAnnotation ( currentClass ) ) { writeAnnotationMethod ( ) ; } else if ( com.android.jill.frontend.java.AsmHelper.isConstructor ( currentMethod ) ) { writeConstructor ( ) ; } else { writeMethod ( ) ; } }
protected boolean setException ( java.lang.Throwable throwable ) { boolean result = sync.setException ( com.google.common.base.Preconditions.checkNotNull ( throwable ) ) ; if ( result ) { executionList.execute ( ) ; } return result ; }
private void propagateVarRef ( com.android.jack.ir.ast.JSsaVariableRef lhs , com.android.jack.ir.ast.JSsaVariableRef rhs , com.android.jack.transformations.request.TransformationRequest tr ) { com.android.jack.ir.ast.JSsaVariableRef def = rhs.getDef ( ) ; for ( com.android.jack.ir.ast.JSsaVariableRef oldUse : lhs.getUses ( ) ) { com.android.jack.ir.ast.JSsaVariableRef newUse = def.makeRef ( oldUse.getSourceInfo ( ) ) ; newUse.addAllMarkers ( oldUse.getAllMarkers ( ) ) ; tr.append ( new com.android.jack.transformations.request.Replace ( oldUse , newUse ) ) ; } }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( "getConnectionState(): device=" + device ) ) ; } com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothInputHost.STATE_DISCONNECTED ; } return service.getConnectionState ( device ) ; }
protected org.bouncycastle.asn1.x9.X9ECParameters createParameters ( ) { java.math.BigInteger n = new java.math.BigInteger ( "ffffffffffffffffffffffff99def836146bc9b1b4d22831" , 16 ) ; java.math.BigInteger h = java.math.BigInteger.valueOf ( 1 ) ; org.bouncycastle.math.ec.ECCurve cFp192v1 = new org.bouncycastle.math.ec.ECCurve.Fp ( new java.math.BigInteger ( "6277101735386680763835789423207666416083908700390324961279" ) , new java.math.BigInteger ( "fffffffffffffffffffffffffffffffefffffffffffffffc" , 16 ) , new java.math.BigInteger ( "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1" , 16 ) , n , h ) ; return new org.bouncycastle.asn1.x9.X9ECParameters ( cFp192v1 , cFp192v1.decodePoint ( org.bouncycastle.util.encoders.Hex.decode ( "03188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012" ) ) , n , h , org.bouncycastle.util.encoders.Hex.decode ( "3045AE6FC8422f64ED579528D38120EAE12196D5" ) ) ; }
public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { assert ( attribute.getName ( ) . equals ( com.android.SdkConstants.ATTR_ID ) ) || ( attribute.getLocalName ( ) . equals ( com.android.SdkConstants.ATTR_ID ) ) ; java.lang.String id = attribute.getValue ( ) ; mFileIds.add ( id ) ; mGlobalIds.add ( id ) ; if ( ( ( ( id.startsWith ( "@+" ) ) && ( ! ( id.startsWith ( com.android.SdkConstants.NEW_ID_PREFIX ) ) ) ) && ( ! ( id.startsWith ( "@+android:id/" ) ) ) ) || ( ( id.startsWith ( com.android.SdkConstants.NEW_ID_PREFIX ) ) && ( ( id.indexOf ( '/' , com.android.SdkConstants.NEW_ID_PREFIX.length ( ) ) ) != ( - 1 ) ) ) ) { int nameStart = ( id.startsWith ( com.android.SdkConstants.NEW_ID_PREFIX ) ) ? com.android.SdkConstants.NEW_ID_PREFIX.length ( ) : 2 ; java.lang.String suggested = ( com.android.SdkConstants.NEW_ID_PREFIX ) + ( id.substring ( nameStart ) . replace ( '/' , '_' ) ) ; java.lang.String message = java.lang.String.format ( "ID definitions *must* be of the form `@+id/name`; try using `%1$s`" , suggested ) ; context.report ( com.android.tools.lint.checks.WrongIdDetector.INVALID , attribute , context.getLocation ( attribute ) , message ) ; } }
void stopAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client ) { gattClientEnableAdvNative ( client.advertiserId , false , 0 ) ; }
public void testRootnF32_2 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 2 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 11329265 , 1 , 32 , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n2 ( nAlloc ) ; doF32_2 ( 11329265 , 16 ) ; }
protected android.support.v8.renderscript.Script.KernelID createKernelID ( int slot , int sig , android.support.v8.renderscript.Element ein , android.support.v8.renderscript.Element eout ) { android.support.v8.renderscript.Script.KernelID k = mKIDs.get ( slot ) ; if ( k != null ) { return k ; } long id = mRS.nScriptKernelIDCreate ( getID ( mRS ) , slot , sig ) ; if ( id == 0 ) { throw new android.support.v8.renderscript.RSDriverException ( "Failed to create KernelID" ) ; } k = new android.support.v8.renderscript.Script.KernelID ( id , mRS , this , slot , sig ) ; mKIDs.put ( slot , k ) ; return k ; }
public boolean isSameUpdatePackageAs ( java.lang.Package pkg ) { if ( ( ( mUpdatePkg ) != null ) && ( ( mUpdatePkg.canBeUpdatedBy ( pkg ) ) == ( com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE ) ) ) { return mUpdatePkg.getRevision ( ) . equals ( pkg.getRevision ( ) ) ; } return false ; }
public java.util.List < com.android.builder.dependency.JarDependency > getLocalDependencies ( ) { java.util.List < java.io.File > jars = getLocalJars ( ) ; java.util.List < com.android.builder.dependency.JarDependency > localDependencies = com.google.common.collect.Lists.newArrayListWithCapacity ( jars.size ( ) ) ; for ( java.io.File jar : jars ) { localDependencies.add ( new com.android.builder.dependency.JarDependency ( jar , true , true , null , null ) ) ; } return localDependencies ; }
public android.icu.util.TimeZone cloneAsThawed ( ) { android.icu.impl.JavaTimeZone tz = ( ( android.icu.impl.JavaTimeZone ) ( super . cloneAsThawed ( ) ) ) ; tz.javatz = ( ( java.util.TimeZone ) ( javatz.clone ( ) ) ) ; tz.javacal = new java.util.GregorianCalendar ( javatz ) ; tz.isFrozen = false ; return tz ; }
public static void assertEqualCertificateChains ( long [ ] expected , long [ ] actual ) { org.junit.Assert.assertEquals ( expected.length , actual.length ) ; for ( int i = 0 ; i < ( expected.length ) ; i ++ ) { org.conscrypt.NativeCrypto.X509_cmp ( expected [ i ] , actual [ i ] ) ; } }
static boolean equalsImpl ( java.util.Map < ? , ? > map , java.lang.Object object ) { if ( map == object ) { return true ; } else if ( object instanceof java.util.Map ) { java.util.Map < ? , ? > o = ( ( java.util.Map < ? , ? > ) ( object ) ) ; return map.entrySet ( ) . equals ( o.entrySet ( ) ) ; } return false ; }
public void testAddAll3 ( ) { java.util.concurrent.ArrayBlockingQueue q = new java.util.concurrent.ArrayBlockingQueue ( SIZE ) ; java.lang.Integer [ ] ints = new java.lang.Integer [ SIZE ] ; for ( int i = 0 ; i < ( ( SIZE ) - 1 ) ; ++ i ) ints [ i ] = new java.lang.Integer ( i ) ; try { q.addAll ( java.util.Arrays.asList ( ints ) ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
static short FindLMBCSLocale ( java.lang.String LocaleID ) { int index = 0 ; if ( LocaleID == null ) { return 0 ; } while ( ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID ) != null ) { if ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID.equals ( LocaleID ) ) { return com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . OptGroup ; } else if ( ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID.compareTo ( LocaleID ) ) > 0 ) { break ; } index ++ ; } return com.ibm.icu.charset.CharsetLMBCS.ULMBCS_GRP_L1 ; }
private static void splitAndAdd ( java.lang.String searchPath , boolean directoriesOnly , java.util.List < java.io.File > resultList ) { if ( searchPath == null ) { return ; } for ( java.lang.String path : searchPath.split ( ":" ) ) { try { android.system.StructStat sb = Libcore.os.stat ( path ) ; if ( ( ! directoriesOnly ) || ( S_ISDIR ( sb.st_mode ) ) ) { resultList.add ( new java.io.File ( path ) ) ; } } catch ( android.system.ErrnoException ignored ) { } } }
public static java.lang.Integer getInteger ( java.lang.String nm , java.lang.Integer val ) { java.lang.String v = null ; try { v = java.lang.System.getProperty ( nm ) ; } catch ( java.lang.IllegalArgumentException | java.lang.NullPointerException e ) { } if ( v != null ) { try { return java.lang.Integer.decode ( v ) ; } catch ( java.lang.NumberFormatException e ) { } } return val ; }
public void getIdlingResources ( ) { int originalCount = android.support.test.espresso.Espresso.getIdlingResources ( ) . size ( ) ; android.support.test.espresso.IdlingResource resource = new android.support.test.espresso.EspressoTest.DummyIdlingResource ( "testGetIdlingResources" ) ; android.support.test.espresso.Espresso.registerIdlingResources ( resource ) ; org.junit.Assert.assertEquals ( ( originalCount + 1 ) , android.support.test.espresso.Espresso.getIdlingResources ( ) . size ( ) ) ; android.support.test.espresso.Espresso.unregisterIdlingResources ( resource ) ; org.junit.Assert.assertEquals ( originalCount , android.support.test.espresso.Espresso.getIdlingResources ( ) . size ( ) ) ; }
protected java.lang.String getTitle ( ) { return getModel ( ) . getTitle ( ) ; }
public void checkClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode ) { if ( ( ( classNode.name.indexOf ( '$' ) ) != ( - 1 ) ) && ( ( ( classNode.access ) & ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) == 0 ) ) { return ; } if ( com.android.tools.lint.checks.ViewConstructorDetector.isViewClass ( context , classNode ) ) { com.android.tools.lint.checks.ViewConstructorDetector.checkConstructors ( context , classNode ) ; } }
public android.content.Intent intentForPosition ( int position ) { com.android.internal.app.ResolverActivity.DisplayResolveInfo dri = mList.get ( position ) ; android.content.Intent intent = new android.content.Intent ( ( ( dri.origIntent ) != null ? dri.origIntent : mIntent ) ) ; intent.addFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT ) | ( android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP ) ) ) ; android.content.pm.ActivityInfo ai = dri.ri.activityInfo ; intent.setComponent ( new android.content.ComponentName ( ai.applicationInfo.packageName , ai.name ) ) ; return intent ; }
public boolean equals ( java.lang.Object other ) { if ( ( this ) == other ) { return true ; } if ( ! ( other instanceof com.android.jack.dx.rop.type.Type ) ) { return false ; } return descriptor.equals ( ( ( com.android.jack.dx.rop.type.Type ) ( other ) ) . descriptor ) ; }
public static boolean isEqual ( byte [ ] digesta , byte [ ] digestb ) { if ( ( digesta.length ) != ( digestb.length ) ) { return false ; } int v = 0 ; for ( int i = 0 ; i < ( digesta.length ) ; i ++ ) { v |= ( digesta [ i ] ) ^ ( digestb [ i ] ) ; } return v == 0 ; }
void scanNextPath ( ) { if ( ( mNextPath ) >= ( mPaths.length ) ) { mConnection.disconnect ( ) ; mConnection = null ; return ; } java.lang.String mimeType = ( ( mMimeTypes ) != null ) ? mMimeTypes [ mNextPath ] : null ; mConnection.scanFile ( mPaths [ mNextPath ] , mimeType ) ; ( mNextPath ) ++ ; }
public void testCameraAppDisabled ( ) throws java.lang.Exception { enableSampleDeviceAdmin ( ) ; if ( verifyCameraAppDisabled ( ) ) { setCameraEnabled ( true ) ; } org.junit.Assert.assertFalse ( verifyCameraAppDisabled ( ) ) ; setCameraEnabled ( false ) ; gotoCameraApp ( ) ; new com.android.devtools.systemimage.uitest.watchers.CameraAccessPermissionsWatcher ( device ) . checkForCondition ( ) ; org.junit.Assert.assertTrue ( verifyCameraAppDisabled ( ) ) ; setCameraEnabled ( true ) ; org.junit.Assert.assertFalse ( verifyCameraAppDisabled ( ) ) ; }
public boolean onUnhandledKeyEvent ( android.view.KeyEvent event ) { if ( ! ( isActivityPaused ( ) ) ) { if ( ( event.getAction ( ) ) == ( android.view.KeyEvent.ACTION_DOWN ) ) { return mActivity.onKeyDown ( event.getKeyCode ( ) , event ) ; } else { return mActivity.onKeyUp ( event.getKeyCode ( ) , event ) ; } } return false ; }
public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newFirstIndex , int newSecondIndex ) { return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction ( getFormat ( ) , getOpcode ( ) , newFirstIndex , getFirstIndexType ( ) , getTarget ( ) , getLiteral ( ) , a , registerCount , newSecondIndex , getSecondIndexType ( ) ) ; }
public long beforeHandshake ( long c ) throws javax.net.ssl.SSLException { long s = super . beforeHandshake ( c ) ; if ( ( privateKey ) != null ) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_PrivateKey ( s , privateKey ) ; } if ( ( certificates ) != null ) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_certificate ( s , certificates ) ; } if ( channelIdEnabled ) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_enable_tls_channel_id ( s ) ; } return s ; }
public void test_flush ( ) throws java.lang.Exception { char [ ] buf = new char [ 10 ] ; "HelloWorld" . getChars ( 0 , 10 , buf , 0 ) ; pw = new java.io.PipedWriter ( ) ; rdrThread = new java.lang.Thread ( ( reader = new org.apache.harmony.tests.java.io.PipedWriterTest.PReader ( pw ) ) , "flush" ) ; rdrThread.start ( ) ; pw.write ( buf ) ; pw.flush ( ) ; rdrThread.join ( ) ; assertEquals ( "Failed to flush chars" , "HelloWorld" , new java.lang.String ( reader.buf ) ) ; }
public void run ( ) { java.lang.String p = "<p>Find all instances of find on the page and highlight them.</p>" ; mWebView.loadData ( ( ( "<html><body>" + p ) + "</body></html>" ) , "text/html" , "UTF-8" ) ; }
public void exit ( ) { cleanupUpstream ( ) ; }
public static java.util.Enumeration getNames ( ) { java.util.Vector v = new java.util.Vector ( ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable.addEnumeration ( v , org.bouncycastle.asn1.x9.X962NamedCurves.getNames ( ) ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable.addEnumeration ( v , org.bouncycastle.asn1.sec.SECNamedCurves.getNames ( ) ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable.addEnumeration ( v , org.bouncycastle.asn1.nist.NISTNamedCurves.getNames ( ) ) ; return v.elements ( ) ; }
public com.android.jack.dx.dex.file.TypeIdItem intern ( com.android.jack.dx.rop.type.Type type ) { if ( type == null ) { throw new java.lang.NullPointerException ( "type == null" ) ; } throwIfPrepared ( ) ; com.android.jack.dx.dex.file.TypeIdItem result = typeIds.get ( type ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.TypeIdItem ( type ) ; typeIds.put ( type , result ) ; } return result ; }
public void enter ( ) { android.telecom.Log.i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , "Audio focus entering RINGING state" ) ; if ( mCallAudioManager.startRinging ( ) ) { mAudioManager.requestAudioFocusForCall ( AudioManager.STREAM_RING , AudioManager.AUDIOFOCUS_GAIN_TRANSIENT ) ; mAudioManager.setMode ( AudioManager.MODE_RINGTONE ) ; mCallAudioManager.setCallAudioRouteFocusState ( CallAudioRouteStateMachine.RINGING_FOCUS ) ; } else { android.telecom.Log.i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , "Entering RINGING but not acquiring focus -- silent ringtone" ) ; } mCallAudioManager.stopCallWaiting ( ) ; }
private com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor createMerge ( com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ ] viewLayoutAttribs ) { java.lang.String xml_name = com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_MERGE ; com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( xml_name , xml_name , com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_MERGE , "A root tag useful for XML layouts inflated using a ViewStub." , null , null , viewLayoutAttribs , null , false ) ; return desc ; }
public void testGetUserSelectedOutgoingPhoneAccount ( ) throws android.os.RemoteException { org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getUserSelectedOutgoingPhoneAccount ( org.mockito.Matchers.any ( android.os.UserHandle.class ) ) ) . thenReturn ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) ; org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getPhoneAccountUnchecked ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) ) . thenReturn ( makeMultiUserPhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) . build ( ) ) ; android.telecom.PhoneAccountHandle returnedHandle = mTSIBinder.getUserSelectedOutgoingPhoneAccount ( ) ; org.junit.Assert.assertEquals ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 , returnedHandle ) ; }
private java.net.URLConnection openGifURLConnection ( ) throws java.io.IOException { java.lang.String cts = java.lang.System.getProperty ( "java.io.tmpdir" ) ; java.io.File tmpDir = new java.io.File ( cts ) ; tests.support.resource.Support_Resources.copyFile ( tmpDir , null , "Harmony.GIF" ) ; java.net.URL fUrl1 = new java.net.URL ( ( ( "file://" + ( tmpDir.getPath ( ) ) ) + "/Harmony.GIF" ) ) ; java.net.URLConnection con1 = fUrl1.openConnection ( ) ; return con1 ; }
public com.android.server.wifi.WifiNative.RingBufferStatus [ ] getRingBufferStatus ( ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getRingBufferStatusNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } }
public com.android.ide.common.resources.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.common.resources.FrameworkResources resources = new com.android.ide.common.resources.FrameworkResources ( ) ; try { resources.loadResources ( frameworkRes ) ; resources.loadPublicResources ( frameworkRes , com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ; return resources ; } catch ( java.io.IOException e ) { } } return null ; }
private void responseLceData ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.LceDataInfo lceInfo ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { java.util.ArrayList < java.lang.Integer > ret = com.android.internal.telephony.RIL.convertHalLceData ( lceInfo , mRil ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void test_RAND_bytes_Success ( ) throws java.lang.Exception { byte [ ] output = new byte [ 128 ] ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.RAND_bytes ( output ) ; boolean isZero = true ; for ( int i = 0 ; i < ( output.length ) ; i ++ ) { isZero &= ( output [ i ] ) == 0 ; } assertFalse ( ( "Random output was zero. This is a very low probability event (1 in 2^128) " + "and probably indicates an error." ) , isZero ) ; }
static void getString ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , java.lang.String value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { final java.lang.String got = ( v == null ) ? ( ( java.lang.String ) ( m.invokeExact ( ) ) ) : ( ( java.lang.String ) ( m.invokeExact ( v ) ) ) ; Main.Tester.assertTrue ( got.equals ( value ) ) ; } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertEquals ( expectFailure , exceptionThrown ) ; }
public boolean generate ( java.lang.String key , int uid ) { try { return ( mBinder.generate ( key , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public static com.android.jack.dx.rop.code.Rop opReturn ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type.getBasicFrameType ( ) ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.RETURN_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.RETURN_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.RETURN_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.RETURN_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.RETURN_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_VOID : return com.android.jack.dx.rop.code.Rops.RETURN_VOID ; } return com.android.jack.dx.rop.code.Rops.throwBadType ( type ) ; }
public static < K , V > org.hamcrest.Matcher < java.util.Map < ? extends K , ? extends V > > hasEntry ( K key , V value ) { return new org.hamcrest.collection.IsMapContaining < K , V > ( org.hamcrest.collection.IsMapContaining.equalTo ( key ) , org.hamcrest.collection.IsMapContaining.equalTo ( value ) ) ; }
static boolean hasAllApns ( java.lang.String [ ] apnTypes ) { if ( com.android.internal.util.ArrayUtils.isEmpty ( apnTypes ) ) { return false ; } java.util.List apnList = java.util.Arrays.asList ( apnTypes ) ; if ( apnList.contains ( PhoneConstants.APN_TYPE_ALL ) ) { android.util.Log.d ( com.android.settings.ApnEditor.TAG , "hasAllApns: true because apnList.contains(PhoneConstants.APN_TYPE_ALL)" ) ; return true ; } for ( java.lang.String apn : com.android.internal.telephony.PhoneConstants.APN_TYPES ) { if ( ! ( apnList.contains ( apn ) ) ) { return false ; } } android.util.Log.d ( com.android.settings.ApnEditor.TAG , "hasAllApns: true" ) ; return true ; }
public void testFloat16Sub ( ) { script.set_gInput ( mInput ) ; script.forEach_sub ( mF16Matrix ) ; script.forEach_bitcast ( mF16Matrix , mU16Matrix ) ; mU16Matrix.copyTo ( output ) ; for ( int x = 0 ; x < ( numInputs ) ; x ++ ) { for ( int y = 0 ; y < ( numInputs ) ; y ++ ) { checkFloat16Sub ( x , y ) ; } } }
public void copy1DRangeFromUnchecked ( int off , int count , int [ ] d ) { int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( ( d.length ) * 4 ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize ) ; }
private static int getDefaultKeySizeForType ( int keyType ) { if ( keyType == ( com.android.org.conscrypt.NativeCrypto.EVP_PKEY_EC ) ) { return android.security.KeyPairGeneratorSpec.EC_DEFAULT_KEY_SIZE ; } else if ( keyType == ( com.android.org.conscrypt.NativeCrypto.EVP_PKEY_RSA ) ) { return android.security.KeyPairGeneratorSpec.RSA_DEFAULT_KEY_SIZE ; } throw new java.lang.IllegalArgumentException ( ( "Invalid key type " + keyType ) ) ; }
private static java.io.File getWrittenResources ( ) throws MergeConsumer.ConsumerException , com.android.ide.common.res2.DuplicateDataException , java.io.IOException { com.android.ide.common.res2.AssetMerger assetMerger = com.android.ide.common.res2.AssetMergerTest.getAssetMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; com.android.ide.common.res2.MergedAssetWriter writer = new com.android.ide.common.res2.MergedAssetWriter ( folder ) ; assetMerger.mergeData ( writer , false ) ; return folder ; }
private void parseProfileButtons ( com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes buttonAttributes , java.lang.String elementName , org.xml.sax.Attributes xmlAtts ) { buttonAttributes.mHasBtnA = ( java.lang.Integer.parseInt ( xmlAtts.getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnA ) ) ) == 1 ; buttonAttributes.mHasBtnB = ( java.lang.Integer.parseInt ( xmlAtts.getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnB ) ) ) == 1 ; buttonAttributes.mHasBtnC = ( java.lang.Integer.parseInt ( xmlAtts.getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnC ) ) ) == 1 ; }
public void setWifiLinkLayerStats ( java.lang.String iface , int enable ) { }
final android.content.res.XmlBlock openXmlBlockAsset ( int cookie , java.lang.String fileName ) throws java.io.IOException { synchronized ( this ) { if ( ! ( mOpen ) ) { throw new java.lang.RuntimeException ( "Assetmanager has been closed" ) ; } long xmlBlock = openXmlAssetNative ( cookie , fileName ) ; if ( xmlBlock != 0 ) { android.content.res.XmlBlock res = new android.content.res.XmlBlock ( this , xmlBlock ) ; incRefsLocked ( res.hashCode ( ) ) ; return res ; } } throw new java.io.FileNotFoundException ( ( "Asset XML file: " + fileName ) ) ; }
public synchronized void tearDown ( com.android.tradefed.invoker.IInvocationContext context , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { -- ( mNumOfInstances ) ; if ( ( mNumOfInstances ) > 0 ) { return ; } if ( ( ( mVenvDir ) != null ) && ( mIsDirCreator ) ) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete ( mVenvDir.toPath ( ) ) ; com.android.tradefed.log.LogUtil.CLog.d ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; } catch ( java.io.IOException exception ) { com.android.tradefed.log.LogUtil.CLog.e ( "Failed to delete %s: %s" , mVenvDir , exception ) ; } mVenvDir = null ; } }
public void setWifiLinkLayerStats ( java.lang.String iface , int enable ) { if ( iface == null ) return ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { com.android.server.wifi.WifiNative.setWifiLinkLayerStatsNative ( com.android.server.wifi.WifiNative.sWlan0Index , enable ) ; } } }
public void test_useDelimiter_String ( ) { s = new java.util.Scanner ( "test" ) ; try { s.useDelimiter ( ( ( java.lang.String ) ( null ) ) ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } s = new java.util.Scanner ( "test" ) ; s.useDelimiter ( "\\w+" ) ; assertEquals ( "\\w+" , s.delimiter ( ) . toString ( ) ) ; }
public boolean hasNextLong ( int radix ) { java.util.regex.Pattern integerPattern = getIntegerPattern ( radix ) ; boolean isLongValue = false ; if ( hasNext ( integerPattern ) ) { java.lang.String intString = matcher.group ( ) ; intString = removeLocaleInfo ( intString , int . class ) ; try { cachedNextValue = java.lang.Long.valueOf ( intString , radix ) ; isLongValue = true ; } catch ( java.lang.NumberFormatException e ) { matchSuccessful = false ; } } return isLongValue ; }
private void putAllImpl ( java.util.Map < ? extends K , ? extends V > map ) { for ( java.util.Map.Entry < ? extends K , ? extends V > entry : map.entrySet ( ) ) { putImpl ( entry.getKey ( ) , entry.getValue ( ) ) ; } }
private com.android.build.gradle.internal.test.report.PackageTestResults addPackage ( java.lang.String packageName ) { com.android.build.gradle.internal.test.report.PackageTestResults packageResults = packages.get ( packageName ) ; if ( packageResults == null ) { packageResults = new com.android.build.gradle.internal.test.report.PackageTestResults ( packageName , this ) ; packages.put ( packageName , packageResults ) ; } return packageResults ; }
void registerClient ( java.util.UUID uuid , android.bluetooth.IBluetoothGattCallback callback ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "registerClient() - UUID=" + uuid ) ) ; mClientMap.add ( uuid , callback , this ) ; gattClientRegisterAppNative ( uuid.getLeastSignificantBits ( ) , uuid.getMostSignificantBits ( ) ) ; }
public void testNewConstructors_Success ( ) throws java.lang.Exception { java.security.SecureRandom sr1 = new java.security.SecureRandom ( ) ; assertNotNull ( sr1 ) ; assertNotNull ( sr1.getProvider ( ) ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr1.getProvider ( ) . getClass ( ) . getName ( ) ) ; test_SecureRandom ( sr1 ) ; java.security.SecureRandom sr2 = new java.security.SecureRandom ( libcore.java.security.SecureRandomTest.STATIC_SEED_BYTES ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr2.getProvider ( ) . getClass ( ) . getName ( ) ) ; test_SecureRandom ( sr2 ) ; }
private static java.lang.String normalizeInterfaceMethodName ( java.lang.String name , boolean isLambda , boolean isStatic ) { if ( isLambda ) { return name + ( DependencyCollector.INTERFACE_COMPANION_SUFFIX ) ; } else if ( isStatic ) { return name + ( com.google.devtools.build.android.desugar.InterfaceDesugaring.INTERFACE_STATIC_COMPANION_METHOD_SUFFIX ) ; } else { return name ; } }
public E next ( ) { if ( ( cursor ) == ( fence ) ) throw new java.util.NoSuchElementException ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) E result = ( ( E ) ( elements [ cursor ] ) ) ; if ( ( ( tail ) != ( fence ) ) || ( result == null ) ) throw new java.util.ConcurrentModificationException ( ) ; lastRet = cursor ; cursor = ( ( cursor ) + 1 ) & ( ( elements.length ) - 1 ) ; return result ; }
public int getProfileConnectionState ( int profile ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "getProfileConnectionState- Not allowed for non-active user" ) ; return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; } return service.getProfileConnectionState ( profile ) ; }
public boolean isRingingForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , "isRingingForSubscriber" ) ) ) { return false ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return ( phone.getState ( ) ) == ( PhoneConstants.State.RINGING ) ; } else { return false ; } }
public void runTest ( ) { mConvolve.setInput ( mInPixelsAllocation ) ; if ( mUseNative ) { mOutPixelsAllocation = ( ( android.renderscript.Allocation ) ( mGroup.execute ( mInPixelsAllocation ) [ 0 ] ) ) ; } else { mConvolve.forEach ( mScratchPixelsAllocation1 ) ; mMatrix.forEach ( mScratchPixelsAllocation1 , mOutPixelsAllocation ) ; } }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertEqualSessions ( clientSession [ 0 ] , session ) ; super . afterHandshake ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , s , org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , sock , fd , callback ) ; }
public static com.android.sched.scheduler.TagOrMarkerOrComponentSet getJackFormatInitialTagSet ( @ javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler ) { com.android.sched.scheduler.TagOrMarkerOrComponentSet set = scheduler.createTagOrMarkerOrComponentSet ( ) ; set.add ( com.android.jack.ir.JackFormatIr.class ) ; set.add ( com.android.jack.shrob.obfuscation.OriginalNames.class ) ; set.add ( com.android.jack.ir.sourceinfo.SourceInfoCreation.class ) ; return set ; }
public void shutdown ( ) { if ( ! ( mStopped ) ) { mStopped = true ; try { mServerSocket.close ( ) ; } catch ( java.io.IOException e ) { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log.d ( TAG , "Exception while thread shutdown:" , e ) ; } } if ( ! ( java.lang.Thread.currentThread ( ) . equals ( this ) ) ) { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log.d ( TAG , "shutdown called from another thread - interrupt()." ) ; interrupt ( ) ; } }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/LocaleTest.java:11: Warning: Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead [DefaultLocale]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " System.out.println(\"WRONG\".toUpperCase());\n" + " ~~~~~~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:16: Warning: Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead [DefaultLocale]\n" ) + " System.out.println(\"WRONG\".toLowerCase());\n" ) + " ~~~~~~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:20: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %f\", 1.0f); // Implies locale\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:21: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %1$f\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:22: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %e\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:23: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %d\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:24: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %g\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:25: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %g\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:26: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %1$tm %1$te,%1$tY\",\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:32: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]\n" ) + " new SimpleDateFormat(); // WRONG\n" ) + " ~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:33: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]\n" ) + " new SimpleDateFormat(\"yyyy-MM-dd\"); // WRONG\n" ) + " ~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:34: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]\n" ) + " new SimpleDateFormat(\"yyyy-MM-dd\", DateFormatSymbols.getInstance()); // WRONG\n" ) + " ~~~~~~~~~~~~~~~~\n" ) + "0 errors, 12 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "res/layout/onclick.xml=>res/layout/onclick.xml" , "bytecode/LocaleTest.java.txt=>src/test/pkg/LocaleTest.java" , "bytecode/LocaleTest.class.data=>bin/classes/test/pkg/LocaleTest.class" ) ) ; }
public boolean setRemoteAlias ( android.bluetooth.BluetoothDevice device , java.lang.String name ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "setRemoteAlias() - Not allowed for non-active user" ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) { return false ; } return service.setRemoteAlias ( device , name ) ; }
public void test_EVP_SignInit ( ) throws java.lang.Exception { final long ctx = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "RSA-SHA256" ) ; assertTrue ( ( ctx != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_MD_CTX_destroy ( ctx ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "foobar" ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } }
static byte [ ] toBytes ( java.lang.Object object ) { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try { java.io.ObjectOutputStream os = new java.io.ObjectOutputStream ( baos ) ; os.writeObject ( object ) ; os.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.certinstaller.Util.TAG , ( ( ( "toBytes(): " + e ) + ": " ) + object ) ) ; } return baos.toByteArray ( ) ; }
private static void generateTestManifest ( java.lang.String testPackageName , java.lang.String minSdkVersion , int targetSdkVersion , java.lang.String testedPackageName , java.lang.String instrumentationRunner , java.lang.Boolean handleProfiling , java.lang.Boolean functionalTest , java.lang.String outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testPackageName , minSdkVersion , targetSdkVersion , testedPackageName , instrumentationRunner , handleProfiling , functionalTest ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public boolean canThrow ( ) { return ( ( ( ( ( getType ( ) ) == ( JPrimitiveTypeEnum.BYTE.getType ( ) ) ) || ( ( getType ( ) ) == ( JPrimitiveTypeEnum.CHAR.getType ( ) ) ) ) || ( ( getType ( ) ) == ( JPrimitiveTypeEnum.SHORT.getType ( ) ) ) ) || ( ( getType ( ) ) == ( JPrimitiveTypeEnum.INT.getType ( ) ) ) ) || ( ( getType ( ) ) == ( JPrimitiveTypeEnum.LONG.getType ( ) ) ) ; }
private static java.util.ResourceBundle.Control getDefaultControl ( java.lang.String baseName ) { return java.util.ResourceBundle.Control.INSTANCE ; }
public void run ( ) { com.android.rs.test_compat.RenderScript pRS = com.android.rs.test_compat.RenderScript.create ( mCtx ) ; com.android.rs.test_compat.ScriptC_bug_char s = new com.android.rs.test_compat.ScriptC_bug_char ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeValues ( s ) ; s.invoke_bug_char_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
void onAdvertiserStarted ( int status , int advertiserId ) throws android.os.RemoteException { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "onAdvertiserStarted() - advertiserId=" + advertiserId ) + ", status=" ) + status ) ) ; com.android.bluetooth.gatt.AdvertiserMap.App app = mAdvertiserMap.getById ( advertiserId ) ; if ( app != null ) { if ( status == 0 ) { app.callback.onMultiAdvertiseCallback ( AdvertiseCallback.ADVERTISE_SUCCESS , true , null ) ; } else { app.callback.onMultiAdvertiseCallback ( AdvertiseCallback.ADVERTISE_FAILED_INTERNAL_ERROR , true , null ) ; } } }
public void test_removeHandshakeCompletedListener ( ) throws java.io.IOException { javax.net.ssl.SSLSocket ssl = getSSLSocket ( ) ; javax.net.ssl.HandshakeCompletedListener ls = new org.apache.harmony.tests.javax.net.ssl.SSLSocketTest.HandshakeCL ( ) ; try { ssl.removeHandshakeCompletedListener ( null ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } try { ssl.removeHandshakeCompletedListener ( ls ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } ssl.addHandshakeCompletedListener ( ls ) ; ssl.removeHandshakeCompletedListener ( ls ) ; ssl.close ( ) ; }
public void onPageFinished ( android.webkit.WebView view , java.lang.String url ) { if ( ! ( isPrivateBrowsingEnabled ( ) ) ) { com.android.browser.LogTag.logPageFinishedLoading ( url , ( ( android.os.SystemClock.uptimeMillis ( ) ) - ( mLoadStartTime ) ) ) ; } syncCurrentState ( view , url ) ; mWebViewController.onPageFinished ( this ) ; }
public int getProfileConnectionState ( com.android.settingslib.bluetooth.LocalBluetoothProfile profile ) { if ( ( mProfileConnectionState.get ( profile ) ) == null ) { int state = profile.getConnectionStatus ( mDevice ) ; mProfileConnectionState.put ( profile , state ) ; } return mProfileConnectionState.get ( profile ) ; }
com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback getProjectCallback ( boolean reset , com.android.ide.common.rendering.LayoutLibrary layoutLibrary ) { if ( ( mProjectCallback ) == null ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager resManager = com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.getInstance ( ) ; org.eclipse.core.resources.IProject project = getProject ( ) ; com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectRes = resManager.getProjectResources ( project ) ; mProjectCallback = new com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback ( layoutLibrary , projectRes , project , mCredential , this ) ; } else if ( reset ) { mProjectCallback.getMissingClasses ( ) . clear ( ) ; mProjectCallback.getUninstantiatableClasses ( ) . clear ( ) ; } return mProjectCallback ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_copy_test s = new com.android.rs.test.ScriptC_copy_test ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; testFloat2 ( pRS , s ) ; testFloat3 ( pRS , s ) ; testFloat4 ( pRS , s ) ; s.invoke_sendResult ( true ) ; pRS.finish ( ) ; waitForMessage ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
private boolean scanFile ( int arrayPos ) { com.android.bluetooth.opp.BluetoothOppShareInfo info = mShares.get ( arrayPos ) ; synchronized ( this ) { if ( com.android.bluetooth.opp.BluetoothOppService.D ) { android.util.Log.d ( com.android.bluetooth.opp.BluetoothOppService.TAG , ( "Scanning file " + ( info.mFilename ) ) ) ; } if ( ! ( mMediaScanInProgress ) ) { mMediaScanInProgress = true ; new com.android.bluetooth.opp.BluetoothOppService.MediaScannerNotifier ( this , info , mHandler ) ; return true ; } else { return false ; } } }
static void nativeSetDrawFilter ( long nativeCanvas , long nativeFilter ) { android.graphics.Canvas_Delegate canvasDelegate = android.graphics.Canvas_Delegate.sManager.getDelegate ( nativeCanvas ) ; if ( canvasDelegate == null ) { return ; } canvasDelegate.mDrawFilter = android.graphics.DrawFilter_Delegate.getDelegate ( nativeFilter ) ; if ( ( ( canvasDelegate.mDrawFilter ) != null ) && ( ( canvasDelegate.mDrawFilter.isSupported ( ) ) == false ) ) { com.android.layoutlib.bridge.Bridge.getLog ( ) . fidelityWarning ( LayoutLog.TAG_DRAWFILTER , canvasDelegate.mDrawFilter.getSupportMessage ( ) , null , null ) ; } }
public void copy1DRangeFromUnchecked ( int off , int count , int [ ] d ) { copy1DRangeFromUnchecked ( off , count , ( ( java.lang.Object ) ( d ) ) , Element.DataType.SIGNED_32 , d.length ) ; }
protected final int next ( int numBits ) { int numBytes = ( numBits + 7 ) / 8 ; byte [ ] b = new byte [ numBytes ] ; int next = 0 ; nextBytes ( b ) ; for ( int i = 0 ; i < numBytes ; i ++ ) { next = ( next << 8 ) + ( ( b [ i ] ) & 255 ) ; } return next > > > ( ( numBytes * 8 ) - numBits ) ; }
public void testEvaluateNetworks_potentialConnectableNetworksIsNull ( ) { when ( mWifiConfigManager.wasEphemeralNetworkDeleted ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( false ) ; when ( mNetworkScoreManager.requestRecommendation ( any ( android.net.RecommendationRequest.class ) ) ) . thenReturn ( android.net.RecommendationResult.createDoNotConnectRecommendation ( ) ) ; mRecommendedNetworkEvaluator.evaluateNetworks ( com.google.android.collect.Lists.newArrayList ( mTrustedScanDetail , mEphemeralScanDetail , mUntrustedScanDetail ) , null , null , false , true , null ) ; }
public void glDrawArrays ( int mode , int first , int count ) { begin ( "glDrawArrays" ) ; arg ( "mode" , mode ) ; arg ( "first" , first ) ; arg ( "count" , count ) ; startLogIndices ( ) ; for ( int i = 0 ; i < count ; i ++ ) { doElement ( mStringBuilder , i , ( first + i ) ) ; } endLogIndices ( ) ; end ( ) ; mgl.glDrawArrays ( mode , first , count ) ; checkError ( ) ; }
public static void run ( ) throws java.lang.Exception { java.lang.Thread t = new java.lang.Thread ( "TestThread" ) { @ java.lang.Override public void run ( ) { try { art.Test924.doTest ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } } ; t.start ( ) ; t.join ( ) ; }
public void installSystemApplicationInfo ( android.content.pm.ApplicationInfo info ) { synchronized ( this ) { getSystemContext ( ) . installSystemApplicationInfo ( info ) ; mProfiler = new android.app.ActivityThread.Profiler ( ) ; } }
public void test_accept_SOTIMEOUT ( ) throws java.io.IOException { final int SO_TIMEOUT = 10 ; java.nio.channels.ServerSocketChannel sc = java.nio.channels.ServerSocketChannel.open ( ) ; try { sc.bind ( null ) ; sc.configureBlocking ( false ) ; java.net.ServerSocket ss = sc.socket ( ) ; ss.setSoTimeout ( SO_TIMEOUT ) ; java.nio.channels.SocketChannel client = sc.accept ( ) ; assertNull ( client ) ; int soTimeout = ss.getSoTimeout ( ) ; assertEquals ( SO_TIMEOUT , soTimeout ) ; } finally { sc.close ( ) ; } }
public static boolean hasError ( @ javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration ) { return ( ( typeDeclaration.hasErrors ( ) ) || ( ( ( typeDeclaration.getCompilationUnitDeclaration ( ) ) != null ) && ( typeDeclaration.getCompilationUnitDeclaration ( ) . hasErrors ( ) ) ) ) || ( ( typeDeclaration.binding ) == null ) ; }
private void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull java.lang.Object cookie , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull java.lang.String message ) { if ( context.isEnabled ( issue ) ) { boolean checkComments = context.containsCommentSuppress ( ) ; if ( checkComments ) { int startOffset = getStartOffset ( context , cookie ) ; if ( ( startOffset >= 0 ) && ( context.isSuppressedWithComment ( startOffset , issue ) ) ) { return ; } } context.report ( issue , createLocation ( context , cookie ) , message ) ; } }
private static java.lang.String concatenateRange ( java.lang.String [ ] array , int start , int end ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( 32 ) ; for ( int i = start ; i < end ; ++ i ) { if ( i != start ) { builder.append ( '-' ) ; } builder.append ( array [ i ] ) ; } return builder.toString ( ) ; }
public static byte [ ] byteArrayFromArrayList ( java.util.ArrayList < java.lang.Byte > bytes ) { byte [ ] byteArray = new byte [ bytes.size ( ) ] ; int i = 0 ; for ( java.lang.Byte b : bytes ) { byteArray [ ( i ++ ) ] = b ; } return byteArray ; }
private synchronized void loadStrings ( java.lang.String tzCanonicalID ) { if ( ( tzCanonicalID == null ) || ( ( tzCanonicalID.length ( ) ) == 0 ) ) { return ; } loadTimeZoneNames ( tzCanonicalID ) ; java.util.Set < java.lang.String > mzIDs = getAvailableMetaZoneIDs ( tzCanonicalID ) ; for ( java.lang.String mzID : mzIDs ) { loadMetaZoneNames ( mzID ) ; } }
public static java.util.logging.Logger getAnonymousLogger ( java.lang.String resourceBundleName ) { java.util.logging.LogManager manager = java.util.logging.LogManager.getLogManager ( ) ; manager.drainLoggerRefQueueBounded ( ) ; java.util.logging.Logger result = new java.util.logging.Logger ( null , resourceBundleName , dalvik.system.VMStack.getStackClass1 ( ) , manager , false ) ; result.anonymous = true ; java.util.logging.Logger root = manager.getLogger ( "" ) ; result.doSetParent ( root ) ; return result ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( "Hello, world!" ) ; if ( Main.checkLivePhase ( ) ) { java.lang.System.out.println ( "Agent in live phase." ) ; } Main.set ( 0 ) ; Main.set ( 1 ) ; Main.set ( 2 ) ; Main.set ( 4 ) ; Main.set ( 8 ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.io.BufferedReader in = new java.io.BufferedReader ( new java.io.InputStreamReader ( java.lang.System.in ) ) ; java.lang.String line = null ; java.lang.StringBuilder responseData = new java.lang.StringBuilder ( ) ; android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator ( 3 ) ; while ( ( line = in.readLine ( ) ) != null ) android.net.apf.Bpf2Apf.convertLine ( line , gen ) ; java.lang.System.out.write ( gen.generate ( ) ) ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor createDesc ( java.lang.String name , java.lang.String fqn , boolean hasChildren ) { if ( hasChildren ) { return new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( name , name , fqn , "" , "" , new com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ 0 ] , new com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ 0 ] , new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor [ 1 ] , false ) ; } else { return new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( name , fqn ) ; } }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( permissions.get ( 0 ) ) ; for ( int i = 1 ; i < ( permissions.size ( ) ) ; i ++ ) { com.android.tools.lint.checks.PermissionRequirement.appendOperator ( sb , operator ) ; sb.append ( permissions.get ( i ) ) ; } return sb.toString ( ) ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_get_npn_negotiated_protocol ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; assertTrue ( "NPN should enable cutthrough on the client" , ( 0 != ( ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_get_mode ( ssl ) ) & ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ) ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
private static java.awt.image.BufferedImage convertTo9Patch ( java.awt.image.BufferedImage image ) { java.awt.image.BufferedImage buffer = com.android.draw9patch.graphics.GraphicsUtilities.createTranslucentCompatibleImage ( ( ( image.getWidth ( ) ) + 2 ) , ( ( image.getHeight ( ) ) + 2 ) ) ; java.awt.Graphics2D g2 = buffer.createGraphics ( ) ; g2.drawImage ( image , 1 , 1 , null ) ; g2.dispose ( ) ; return buffer ; }
public void stop ( ) { if ( ! ( mStarted ) ) { return ; } mStarted = false ; mDbLoadFinished = false ; mInputManager.removeCallback ( mTvInputCallback ) ; mContentResolver.unregisterContentObserver ( mChannelObserver ) ; mHandler.removeCallbacksAndMessages ( null ) ; mChannelWrapperMap.clear ( ) ; clearChannels ( ) ; mPostRunnablesAfterChannelUpdate.clear ( ) ; if ( ( mChannelsUpdateTask ) != null ) { mChannelsUpdateTask.cancel ( true ) ; mChannelsUpdateTask = null ; } applyUpdatedValuesToDb ( ) ; }
private android.os.Parcel getParcelForFile ( java.io.File file ) throws java.io.IOException { java.io.FileInputStream stream = new java.io.FileInputStream ( file ) ; try { byte [ ] raw = com.android.server.am.UsageStatsService.readFully ( stream ) ; android.os.Parcel in = android.os.Parcel.obtain ( ) ; in.unmarshall ( raw , 0 , raw.length ) ; in.setDataPosition ( 0 ) ; return in ; } finally { stream.close ( ) ; } }
private void handleUserUnlockOrSwitch ( int userId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Loading from store after user switch/unlock for " + userId ) ) ; } if ( loadFromUserStoreAfterUnlockOrSwitch ( userId ) ) { saveToStore ( true ) ; mPendingUnlockStoreRead = false ; } }
public void findBestSampleSize ( ) { org.junit.Assert.assertEquals ( 1 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 100 , 150 , 100 , 150 ) ) ; org.junit.Assert.assertEquals ( 2 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 280 , 160 , 140 , 80 ) ) ; org.junit.Assert.assertEquals ( 1 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 1000 , 800 , 501 , 401 ) ) ; org.junit.Assert.assertEquals ( 4 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 100 , 200 , 24 , 50 ) ) ; }
public void onResume ( ) { super . onResume ( ) ; com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( ( "onResume - mIsResponseSent[" + ( mIsResponseSent ) ) + "], slot id: " ) + ( mSlotId ) ) ) ; startTimeOut ( ) ; }
private static com.android.sched.util.file.Directory createTempDir ( @ javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks ) { try { java.io.File tmp = com.android.sched.util.file.Files.createTempDir ( ) ; com.android.sched.util.file.Directory dir = new com.android.sched.util.file.Directory ( tmp.getPath ( ) , hooks , com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST , com.android.sched.util.file.FileOrDirectory.Permission.WRITE , com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE ) ; hooks.addHook ( new com.android.jack.Options.TempDirDeleter ( dir ) ) ; return dir ; } catch ( java.io.IOException e ) { throw new com.android.jack.JackUserException ( e ) ; } }
public void test_EVP_SignInit ( ) throws java.lang.Exception { final int ctx = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "RSA-SHA256" ) ; assertTrue ( ( ctx != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_MD_CTX_destroy ( ctx ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "foobar" ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } }
public static com.android.jack.dx.rop.code.Rop opGetStatic ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type.getBasicType ( ) ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.GET_STATIC_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.GET_STATIC_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_BOOLEAN : return com.android.jack.dx.rop.code.Rops.GET_STATIC_BOOLEAN ; case com.android.jack.dx.rop.type.Type.BT_BYTE : return com.android.jack.dx.rop.code.Rops.GET_STATIC_BYTE ; case com.android.jack.dx.rop.type.Type.BT_CHAR : return com.android.jack.dx.rop.code.Rops.GET_STATIC_CHAR ; case com.android.jack.dx.rop.type.Type.BT_SHORT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_SHORT ; } return com.android.jack.dx.rop.code.Rops.throwBadType ( type ) ; }
public void fidelityWarning ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { java.lang.String description = describe ( message ) ; com.android.ide.eclipse.adt.AdtPlugin.log ( throwable , "%1$s: %2$s" , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addFidelityWarning ( tag , description ) ; }
public boolean registerApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config , android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp , android.bluetooth.BluetoothHidDeviceAppQosSettings inQos , android.bluetooth.BluetoothHidDeviceAppQosSettings outQos , android.bluetooth.IBluetoothHidDeviceCallback callback ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "registerApp()" ) ; } com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.registerApp ( config , sdp , inQos , outQos , callback ) ; }
public void test_verifySignedCertificateTimestamps_withInvalidOCSPResponse ( ) throws java.lang.Exception { org.conscrypt.OpenSSLX509Certificate [ ] chain = new org.conscrypt.OpenSSLX509Certificate [ ] { cert , ca } ; byte [ ] ocspResponse = new byte [ ] { 1 , 2 , 3 , 4 } ; org.conscrypt.ct.CTVerificationResult result = ctVerifier.verifySignedCertificateTimestamps ( chain , null , ocspResponse ) ; assertEquals ( 0 , result.getValidSCTs ( ) . size ( ) ) ; assertEquals ( 0 , result.getInvalidSCTs ( ) . size ( ) ) ; }
protected void readSourceFolder ( java.io.File sourceFolder , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { java.io.File [ ] folders = sourceFolder.listFiles ( ) ; if ( folders != null ) { for ( java.io.File folder : folders ) { if ( ( folder.isDirectory ( ) ) && ( com.android.ide.common.packaging.PackagingUtils.checkFolderForPackaging ( folder.getName ( ) ) ) ) { com.android.ide.common.res2.ResourceSet.FolderData folderData = com.android.ide.common.res2.ResourceSet.getFolderData ( folder ) ; if ( folderData != null ) { parseFolder ( sourceFolder , folder , folderData , logger ) ; } } } } }
private static void check ( long actual , long expected , java.lang.String msg ) { if ( actual != expected ) { java.lang.System.out.println ( ( ( ( ( msg + " : " ) + actual ) + " != " ) + expected ) ) ; java.lang.System.exit ( 1 ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , int [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) ) ; }
void onRemovedFromCallList ( ) { com.android.dialer.common.LogUtil.enterBlock ( "DialerCall.onRemovedFromCallList" ) ; if ( ( videoTechManager ) != null ) { videoTechManager.dispatchRemovedFromCallList ( ) ; } if ( ( ( rttTranscript ) != null ) && ( ! ( isCallRemoved ) ) ) { saveRttTranscript ( ) ; } isCallRemoved = true ; }
public boolean generate ( java.lang.String key , int uid , int flags ) { try { return ( mBinder.generate ( key , uid , flags ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
private void loadClass ( ) throws java.io.IOException { java.io.DataInputStream in = mInput ; in.readInt ( ) ; long id = readId ( ) ; in.readInt ( ) ; java.lang.String name = mStrings.get ( readId ( ) ) ; mClassNames.put ( id , name ) ; }
synchronized void recordImplicitRejection ( @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull com.android.manifmerger.XmlElement implicitAttributeOwner ) { java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = getAttributeRecords ( attribute ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = new com.android.manifmerger.Actions.AttributeRecord ( Actions.ActionType.REJECTED , new com.android.manifmerger.Actions.ActionLocation ( implicitAttributeOwner.getDocument ( ) . getSourceLocation ( ) , implicitAttributeOwner.getPosition ( ) ) , attribute.getId ( ) , null , AttributeOperationType.REPLACE ) ; attributeRecords.add ( attributeRecord ) ; }
public void testAssistantStackFinishToPreviousApp ( ) throws java.lang.Exception { launchActivity ( android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY ) ; enableAssistant ( ) ; launchActivity ( android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK , android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF , "true" ) ; disableAssistant ( ) ; mAmWmState.waitForValidState ( mDevice , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.waitForActivityState ( mDevice , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY , android.server.cts.ActivityManagerState.STATE_RESUMED ) ; mAmWmState.assertFocusedActivity ( "TestActivity should be resumed" , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY ) ; mAmWmState.assertFrontStack ( "Fullscreen stack should be on top." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.assertFocusedStack ( "Fullscreen stack should be focused." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; }
public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { visitor.visitClassObj ( this ) ; for ( java.lang.Object value : getStaticFieldValues ( ) . values ( ) ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { if ( ! ( mReferencesAdded ) ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( this ) ; } visitor.visitLater ( this , ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) ) ; } } mReferencesAdded = true ; }
private static java.lang.reflect.Method getDumpHprofDataMethod ( ) { java.lang.ClassLoader myLoader = Main.class . getClassLoader ( ) ; java.lang.Class < ? > vmdClass ; try { vmdClass = myLoader.loadClass ( "dalvik.system.VMDebug" ) ; } catch ( java.lang.ClassNotFoundException cnfe ) { return null ; } java.lang.reflect.Method meth ; try { meth = vmdClass.getMethod ( "dumpHprofData" , java.lang.String.class ) ; } catch ( java.lang.NoSuchMethodException nsme ) { java.lang.System.err.println ( "Found VMDebug but not dumpHprofData method" ) ; return null ; } return meth ; }
boolean start ( ) { if ( ( ( ( mAdbOsLocation ) != null ) && ( ( com.android.ddmlib.AndroidDebugBridge.sAdbServerPort ) != 0 ) ) && ( ( ! ( mVersionCheck ) ) || ( ! ( startAdb ( ) ) ) ) ) { return false ; } mStarted = true ; mDeviceMonitor = new com.android.ddmlib.DeviceMonitor ( this ) ; mDeviceMonitor.start ( ) ; return true ; }
public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor.visit ( this ) ) { if ( visitor.needLoading ( ) ) { loader.ensureFields ( this ) ; loader.ensureMethods ( this ) ; loader.ensureAnnotations ( this ) ; } visitor.accept ( fields ) ; visitor.accept ( methods ) ; visitor.accept ( annotations ) ; } visitor.endVisit ( this ) ; }
private void readObject ( java.io.ObjectInputStream in ) throws java.io.IOException , java.lang.ClassNotFoundException { in.defaultReadObject ( ) ; if ( ( cType ) == null ) { cType = ( civil ) ? android.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL : android.icu.util.IslamicCalendar.CalculationType.ISLAMIC ; } else { civil = ( cType ) == ( android.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ; } }
public void test_unblock_Exception ( ) throws java.lang.Exception { setup ( false ) ; try { key.unblock ( sourceAddress ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } key.drop ( ) ; try { key.unblock ( sourceAddress ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public static int ioctlInt ( java.io.FileDescriptor fd , int cmd , android.util.MutableInt arg ) throws android.system.ErrnoException { return Libcore.os.ioctlInt ( fd , cmd , arg ) ; }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules ( ) throws java.io.IOException { com.google.currysrc.api.process.Rule [ ] repackageRules = com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ; com.google.currysrc.api.process.Rule [ ] apiDocsRules = new com.google.currysrc.api.process.Rule [ ] { com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( com.android.icu4j.srcgen.Icu4jTransform.ORIGINAL_ICU_PACKAGE , com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU_PACKAGE ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHidePublicClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createMakePublicForTesting ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideOriginalDeprecatedClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideBlacklistedDeclarationsRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.HideDraftProvisionalInternal ( ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.RemoveJavaDocTags ( "@stable" , "@draft" , "@provisional" , "@internal" , "@since" ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.ReplaceIcuTags ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createTranslateJciteInclusionRule ( ) } ; java.util.List < com.google.currysrc.api.process.Rule > rulesList = com.google.common.collect.Lists.newArrayList ( repackageRules ) ; rulesList.addAll ( java.util.Arrays.asList ( apiDocsRules ) ) ; return rulesList ; }
private void addNavigationBar ( ) { if ( com.android.systemui.statusbar.phone.PhoneStatusBar.DEBUG ) android.util.Log.v ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , ( "addNavigationBar: about to add " + ( mNavigationBarView ) ) ) ; if ( ( mNavigationBarView ) == null ) return ; prepareNavigationBarView ( ) ; mWindowManager.addView ( mNavigationBarView , getNavigationBarLayoutParams ( ) ) ; }
private static native java.lang.Class < java.lang.Void > lookupType ( ) ;
private void updateNodeProxies ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo vi ) { if ( vi == null ) { return ; } com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode key = vi.getUiViewNode ( ) ; if ( key != null ) { mCanvas.getNodeFactory ( ) . create ( vi ) ; } for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo child : vi.getChildren ( ) ) { updateNodeProxies ( child ) ; } }
static android.net.Uri getContentFilterUri ( java.lang.String query , long directoryId ) { return com.android.dialer.searchfragment.directories.DirectoryContactsCursorLoader.ENTERPRISE_CONTENT_FILTER_URI.buildUpon ( ) . appendPath ( query ) . appendQueryParameter ( ContactsContract.DIRECTORY_PARAM_KEY , java.lang.String.valueOf ( directoryId ) ) . appendQueryParameter ( ContactsContract.REMOVE_DUPLICATE_ENTRIES , "true" ) . appendQueryParameter ( ContactsContract.LIMIT_PARAM_KEY , com.android.dialer.searchfragment.directories.DirectoryContactsCursorLoader.MAX_RESULTS ) . build ( ) ; }
private void updateConfigurationCountLabel ( ) { int numberOfConfigurations = configuration.count ( ) ; double coverage = ( computeCoverage ( configuration.countCombinationsCollapsingOrientation ( ) ) ) * 100.0 ; myConfigurationCountLabel.setText ( ( ( "<html>Tests will run on <b>" + numberOfConfigurations ) + " configurations</b>.</html>" ) ) ; if ( numberOfConfigurations < 1 ) { myConfigurationCountLabel.setForeground ( JBColor.RED ) ; } else { myConfigurationCountLabel.setForeground ( com.intellij.util.ui.UIUtil.getActiveTextColor ( ) ) ; } }
public boolean hasResourceItem ( @ com.android.annotations.NonNull java.lang.String url ) { assert ( url.startsWith ( "@" ) ) || ( url.startsWith ( "?" ) ) : url ; int typeEnd = url.indexOf ( '/' , 1 ) ; if ( typeEnd != ( - 1 ) ) { int nameBegin = typeEnd + 1 ; int typeBegin = ( url.startsWith ( "@+" ) ) ? 2 : 1 ; int colon = url.lastIndexOf ( ':' , typeEnd ) ; if ( colon != ( - 1 ) ) { typeBegin = colon + 1 ; } java.lang.String typeName = url.substring ( typeBegin , typeEnd ) ; com.android.resources.ResourceType type = com.android.resources.ResourceType.getEnum ( typeName ) ; if ( type != null ) { java.lang.String name = url.substring ( nameBegin ) ; return hasResourceItem ( type , name ) ; } } return false ; }
public static java.nio.MemoryBlock allocate ( int byteCount ) { dalvik.system.VMRuntime runtime = dalvik.system.VMRuntime.getRuntime ( ) ; byte [ ] array = ( ( byte [ ] ) ( runtime.newNonMovableArray ( byte . class , byteCount ) ) ) ; long address = runtime.addressOf ( array ) ; return new java.nio.MemoryBlock.NonMovableHeapBlock ( array , address , byteCount ) ; }
public void testWildcardsRejectedForIpAddress ( ) { assertFalse ( verifyWithServerCertificate ( "1.2.3.4" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "*.2.3.4" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "1.2.3.4" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "*.2.3.4" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "*.2.3.4" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*.2.3.4" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "2001:1234::1" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "*:1234::1" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "2001:1234::1" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "*:1234::1" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "*:1234::1" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*:1234::1" ) ) ) ; }
public boolean installPackage ( java.lang.String path ) { try { java.lang.String result = device.installPackage ( path , true ) ; if ( result != null ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , ( "Got error installing package: " + result ) ) ; return false ; } return true ; } catch ( com.android.ddmlib.InstallException e ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , ( "Error installing package: " + path ) , e ) ; return false ; } }
public java.util.Set < java.lang.String > getApplicableFilters ( ) { java.util.Set < java.lang.String > list = super . getApplicableFilters ( ) ; if ( ( isEnable ( ) ) && ( universalApk ) ) { list.add ( com.android.build.OutputFile.NO_FILTER ) ; } return list ; }
public void run ( ) { com.android.rs.test_v16.RenderScript pRS = com.android.rs.test_v16.RenderScript.create ( mCtx ) ; pRS.setMessageHandler ( mRsMessage ) ; com.android.rs.test_v16.ScriptC_refcount s = new com.android.rs.test_v16.ScriptC_refcount ( pRS ) ; initializeGlobals ( pRS , s ) ; s.invoke_refcount_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
public int createOppOpsRecord ( java.lang.String serviceName , int rfcommChannel , int l2capPsm , int version , byte [ ] formatsList ) { if ( ! ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) ) { throw new java.lang.RuntimeException ( ( ( com.android.bluetooth.sdp.SdpManager.TAG ) + " sNativeAvailable == false - native not initialized" ) ) ; } return sdpCreateOppOpsRecordNative ( serviceName , rfcommChannel , l2capPsm , version , formatsList ) ; }
static void getFloat ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , float value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { final float got = ( v == null ) ? ( ( float ) ( m.invokeExact ( ) ) ) : ( ( float ) ( m.invokeExact ( v ) ) ) ; Main.Tester.assertTrue ( ( got == value ) ) ; } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertEquals ( exceptionThrown , expectFailure ) ; }
public static com.android.jack.dx.rop.cst.CstNat createSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId field ) { java.lang.String fieldSignature = com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( field.getType ( ) ) ; com.android.jack.dx.rop.cst.CstString descriptor = new com.android.jack.dx.rop.cst.CstString ( fieldSignature ) ; com.android.jack.dx.rop.cst.CstNat signature = new com.android.jack.dx.rop.cst.CstNat ( descriptor ) ; return signature ; }
private final synchronized void sendIntent ( boolean isUnplug ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_HEADSET_PLUG ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY ) ; intent.putExtra ( "state" , ( isUnplug ? 0 : 1 ) ) ; intent.putExtra ( "name" , mHeadsetName ) ; android.app.ActivityManagerNative.broadcastStickyIntent ( intent , null ) ; if ( isUnplug ) { intent = new android.content.Intent ( android.media.AudioManager.ACTION_AUDIO_BECOMING_NOISY ) ; mContext.sendBroadcast ( intent ) ; } }
public final java.nio.ByteBuffer putChar ( char x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putChar ( ix ( nextPutIndex ( SizeOf.CHAR ) ) , x ) ; return this ; }
public void run ( @ javax.annotation.Nonnull java.lang.String mainClass , @ javax.annotation.Nonnull java.lang.String expected ) throws java.lang.Exception { java.util.List < com.android.jack.test.runner.RuntimeRunner > runnerList = com.android.jack.test.toolchain.AbstractTestTools.listRuntimeTestRunners ( ) ; for ( com.android.jack.test.runner.RuntimeRunner runner : runnerList ) { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; ( ( com.android.jack.test.runner.AbstractRuntimeRunner ) ( runner ) ) . setOutputStream ( out ) ; junit.framework.Assert.assertEquals ( 0 , runner.run ( new java.lang.String [ 0 ] , mainClass , dexFile ) ) ; junit.framework.Assert.assertEquals ( expected , out.toString ( ) ) ; } }
public void run ( ) { mAwContents.loadUrl ( loadUrlParams ) ; }
public void outcomeStarted ( java.lang.String outcomeName ) { com.google.gson.JsonObject jsonObject = new com.google.gson.JsonObject ( ) ; jsonObject.addProperty ( "outcome" , outcomeName ) ; writer.print ( ( ( ( marker ) + ( gson.toJson ( jsonObject ) ) ) + "\n" ) ) ; }
public void run ( ) { try { synchronized ( mCancelWaiter ) { mCancelWaiter.wait ( mTimeout ) ; if ( mCanceled ) { return ; } } } catch ( java.lang.InterruptedException e ) { android.util.Log.w ( com.android.nfc.NfcService.TAG , "Watchdog thread interruped." ) ; interrupt ( ) ; } android.util.Log.e ( com.android.nfc.NfcService.TAG , "Watchdog triggered, aborting." ) ; mDeviceHost.doAbort ( getName ( ) ) ; }
public void test_write_I ( ) throws java.io.IOException { int length = compressToBytes ( testString ) ; try ( java.util.zip.InflaterOutputStream ios = new java.util.zip.InflaterOutputStream ( os ) ) { for ( int i = 0 ; i < length ; i ++ ) { ios.write ( compressedBytes [ i ] ) ; } java.lang.String result = new java.lang.String ( os.toByteArray ( ) ) ; assertEquals ( testString , result ) ; } }
public void testOverlappingNANPANumber ( ) { assertTrue ( com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "211" , RegionCode.BB ) ) ; assertEquals ( ShortNumberInfo.ShortNumberCost.TOLL_FREE , com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.getExpectedCostForRegion ( parse ( "211" , RegionCode.BB ) , RegionCode.BB ) ) ; assertFalse ( com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "211" , RegionCode.US ) ) ; assertEquals ( ShortNumberInfo.ShortNumberCost.UNKNOWN_COST , com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.getExpectedCostForRegion ( parse ( "211" , RegionCode.US ) , RegionCode.US ) ) ; assertFalse ( com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "211" , RegionCode.CA ) ) ; assertEquals ( ShortNumberInfo.ShortNumberCost.TOLL_FREE , com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.getExpectedCostForRegion ( parse ( "211" , RegionCode.CA ) , RegionCode.CA ) ) ; }
public void testSetSelection ( ) { mGridView = new android.widget.GridView ( mActivity ) ; mGridView.setSelection ( 0 ) ; org.junit.Assert.assertEquals ( 0 , mGridView.getSelectedItemPosition ( ) ) ; mGridView.setSelection ( ( - 1 ) ) ; org.junit.Assert.assertEquals ( ( - 1 ) , mGridView.getSelectedItemPosition ( ) ) ; mGridView.setSelection ( mGridView.getCount ( ) ) ; org.junit.Assert.assertEquals ( mGridView.getCount ( ) , mGridView.getSelectedItemPosition ( ) ) ; }
public boolean matchesSafely ( java.util.Map < ? extends K , ? extends V > map ) { for ( java.util.Map.Entry < ? extends K , ? extends V > entry : map.entrySet ( ) ) { if ( ( keyMatcher.matches ( entry.getKey ( ) ) ) && ( valueMatcher.matches ( entry.getValue ( ) ) ) ) { return true ; } } return false ; }
public static org.eclipse.ui.IWorkbenchWindow getActiveWorkbenchWindow ( ) { org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench ( ) ; org.eclipse.ui.IWorkbenchWindow window = workbench.getActiveWorkbenchWindow ( ) ; if ( window == null ) { org.eclipse.ui.IWorkbenchWindow [ ] windows = workbench.getWorkbenchWindows ( ) ; if ( ( windows.length ) > 0 ) { window = windows [ 0 ] ; } } return window ; }
public void testHeadsetHangupCallNull ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockCallsManager.getForegroundCall ( ) ) . thenReturn ( null ) ; boolean callHungup = mBluetoothPhoneService.mBinder.hangupCall ( ) ; org.mockito.Mockito.verify ( mMockCallsManager , org.mockito.Mockito.never ( ) ) . disconnectCall ( org.mockito.Matchers.any ( com.android.server.telecom.Call.class ) ) ; org.junit.Assert.assertEquals ( callHungup , false ) ; }
public static void writeUint24 ( int i , java.io.OutputStream output ) throws java.io.IOException { output.write ( ( ( byte ) ( i > > > 16 ) ) ) ; output.write ( ( ( byte ) ( i > > > 8 ) ) ) ; output.write ( ( ( byte ) ( i ) ) ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.w3c.dom.Node scope , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( ( scope != null ) && ( mDriver.isSuppressed ( this , issue , scope ) ) ) { return ; } super . report ( issue , location , message , data ) ; }
public static int frequency ( java.lang.Iterable < ? > iterable , @ javax.annotation.Nullable java.lang.Object element ) { if ( iterable instanceof com.google.common.collect.Multiset ) { return ( ( com.google.common.collect.Multiset < ? > ) ( iterable ) ) . count ( element ) ; } else if ( iterable instanceof java.util.Set ) { return ( ( java.util.Set < ? > ) ( iterable ) ) . contains ( element ) ? 1 : 0 ; } return com.google.common.collect.Iterators.frequency ( iterable.iterator ( ) , element ) ; }
public void testAttachLayoutAnimationParameters ( ) { android.widget.cts.GridViewTest.MockGridView mockGridView = new android.widget.cts.GridViewTest.MockGridView ( mActivity ) ; android.view.ViewGroup.LayoutParams p = new android.view.ViewGroup.LayoutParams ( 320 , 480 ) ; mockGridView.attachLayoutAnimationParameters ( null , p , 1 , 2 ) ; android.view.animation.GridLayoutAnimationController.AnimationParameters animationParams = ( ( android.view.animation.GridLayoutAnimationController.AnimationParameters ) ( p.layoutAnimationParameters ) ) ; assertEquals ( 1 , animationParams.index ) ; assertEquals ( 2 , animationParams.count ) ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; merger.writeBlobTo ( folder , new com.android.ide.common.res2.MergedResourceWriter ( com.google.common.io.Files.createTempDir ( ) , null ) ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger ( ) ; assertTrue ( loadedMerger.loadFromBlob ( folder , true ) ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public void testDisconnectBeforeConnect ( ) throws java.io.IOException { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.disconnect ( ) ; assertContent ( "A" , connection ) ; org.junit.Assert.assertEquals ( 200 , connection.getResponseCode ( ) ) ; }
public void testRegistrationConfigParcel ( ) { android.telephony.ims.stub.ImsFeatureConfiguration testConfig = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder ( ) . addFeature ( 0 , ImsFeature.FEATURE_MMTEL ) . addFeature ( 0 , ImsFeature.FEATURE_RCS ) . build ( ) ; android.os.Parcel p = android.os.Parcel.obtain ( ) ; testConfig.writeToParcel ( p , 0 ) ; p.setDataPosition ( 0 ) ; android.telephony.ims.stub.ImsFeatureConfiguration result = ImsFeatureConfiguration.CREATOR.createFromParcel ( p ) ; p.recycle ( ) ; junit.framework.Assert.assertEquals ( testConfig , result ) ; }
private void checkPreparationPhasesForPackage ( java.lang.String expectedPackage , int numPreparation ) { org.mockito.Mockito.verify ( mTestSystemImpl , org.mockito.Mockito.times ( numPreparation ) ) . onWebViewProviderChanged ( org.mockito.Mockito.argThat ( new com.android.server.webkit.WebViewUpdateServiceTest.IsPackageInfoWithName ( expectedPackage ) ) ) ; mWebViewUpdateServiceImpl.notifyRelroCreationCompleted ( ) ; android.webkit.WebViewProviderResponse response = mWebViewUpdateServiceImpl.waitForAndGetProvider ( ) ; org.junit.Assert.assertEquals ( WebViewFactory.LIBLOAD_SUCCESS , response.status ) ; org.junit.Assert.assertEquals ( expectedPackage , response.packageInfo.packageName ) ; }
public void testBasics ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( CHECKSUMS.README_TXT , com.intellij.updater.Digester.digestRegularFile ( new java.io.File ( getDataDir ( ) , "Readme.txt" ) , false ) ) ; org.junit.Assert.assertEquals ( CHECKSUMS.FOCUSKILLER_DLL , com.intellij.updater.Digester.digestRegularFile ( new java.io.File ( getDataDir ( ) , "/bin/focuskiller.dll" ) , false ) ) ; org.junit.Assert.assertEquals ( CHECKSUMS.BOOTSTRAP_JAR , com.intellij.updater.Digester.digestZipFile ( new java.io.File ( getDataDir ( ) , "/lib/bootstrap.jar" ) ) ) ; org.junit.Assert.assertEquals ( CHECKSUMS.BOOTSTRAP_JAR_BINARY , com.intellij.updater.Digester.digestRegularFile ( new java.io.File ( getDataDir ( ) , "/lib/bootstrap.jar" ) , false ) ) ; }
private boolean isPlayingState ( @ android.annotation.Nullable android.media.session.PlaybackState state ) { if ( state == null ) return false ; return ( state != null ) && ( ( state.getState ( ) ) == ( android.media.session.PlaybackState.STATE_PLAYING ) ) ; }
public static libcore.javax.net.ssl.TestSSLContext create ( libcore.java.security.TestKeyStore client , libcore.java.security.TestKeyStore server ) { java.lang.String protocol = "TLS" ; javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext ( protocol , client.keyManagers , client.trustManagers ) ; javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext ( protocol , server.keyManagers , server.trustManagers ) ; return libcore.javax.net.ssl.TestSSLContext.create ( client.keyStore , client.storePassword , server.keyStore , server.storePassword , client.keyManagers , server.keyManagers , client.trustManagers [ 0 ] , server.trustManagers [ 0 ] , clientContext , serverContext ) ; }
