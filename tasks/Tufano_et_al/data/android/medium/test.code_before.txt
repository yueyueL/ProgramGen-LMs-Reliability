protected boolean assertEquals ( java.lang.String message , java.lang.Object expected , java.lang.Object actual ) { boolean result = ( expected == null ) ? actual == null : expected.equals ( actual ) ; return handleAssert ( result , message , stringFor ( expected ) , stringFor ( actual ) ) ; }
synchronized boolean unregisterApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp()" ) ; } if ( config == null ) { android.util.Log.w ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp: failed. The config in parameter should not be null" ) ; return false ; } if ( ( ( mAppConfig ) == null ) || ( ! ( config.equals ( mAppConfig ) ) ) ) { android.util.Log.w ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp: failed. The app configuration does not match the record" ) ; return false ; } return unregisterAppNative ( ) ; }
public void onUpgrade ( android.database.sqlite.SQLiteDatabase db , int oldVersion , int currentVersion ) { if ( Log.LOGV ) com.android.deskclock.Log.v ( ( ( ( ( "Upgrading alarms database from version " + oldVersion ) + " to " ) + currentVersion ) + ", which will destroy all old data" ) ) ; db.execSQL ( "DROP TABLE IF EXISTS alarms" ) ; onCreate ( db ) ; }
public static int booleanFieldEqualZero ( ) { return ( Main.booleanField ) != false ? 13 : 54 ; }
private void runInBatchMode ( final java.lang.String javaPkgName ) throws com.android.cts.DeviceDisconnectedException { mTimeOutTimer = new com.android.cts.HostTimer ( new com.android.cts.TestPackage.TimeOutTask ( this ) , HostConfig.Ints.batchStartTimeoutMs.value ( ) ) ; mTimeOutTimer.start ( ) ; mProgressObserver = new com.android.cts.ProgressObserver ( ) ; if ( ( javaPkgName != null ) && ( ( javaPkgName.length ( ) ) > 0 ) ) { runInBatchModeImpl ( javaPkgName ) ; } else { for ( java.lang.String pkgName : getPackageNames ( ) ) { runInBatchModeImpl ( pkgName ) ; } } }
public com.android.ide.eclipse.adt.internal.resources.ResourceType [ ] getAvailableResourceTypes ( ) { if ( ( mResourcesMap ) != null ) { java.util.Set < com.android.ide.eclipse.adt.internal.resources.ResourceType > types = mResourcesMap.keySet ( ) ; if ( types != null ) { return types.toArray ( new com.android.ide.eclipse.adt.internal.resources.ResourceType [ types.size ( ) ] ) ; } } return null ; }
protected void onDialogClosed ( boolean positiveResult ) { if ( ( ( mButtonClicked ) == ( android.content.DialogInterface.BUTTON1 ) ) || ( ( mButtonClicked ) == ( android.content.DialogInterface.BUTTON3 ) ) ) { setPhoneNumber ( getEditText ( ) . getText ( ) . toString ( ) ) ; super . onDialogClosed ( positiveResult ) ; setText ( getStringValue ( ) ) ; } else { super . onDialogClosed ( positiveResult ) ; } if ( ( mDialogOnClosedListener ) != null ) { mDialogOnClosedListener.onDialogClosed ( this , mButtonClicked ) ; } }
public final short short_literal ( ) throws org.jf.smali.RecognitionException { short value = 0 ; org.antlr.runtime.tree.CommonTree SHORT_LITERAL193 = null ; try { { SHORT_LITERAL193 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.SHORT_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_SHORT_LITERAL_in_short_literal3279 ) ) ) ; value = org.jf.smali.LiteralTools.parseShort ( ( SHORT_LITERAL193 != null ? SHORT_LITERAL193.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void testIntersectionType004 ( ) throws java.lang.Exception { try { new com.android.jack.test.helper.RuntimeTestHelper ( INTERSECTION_TYPE_004 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName ( ) , java.lang.Boolean.TRUE.toString ( ) ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackCliToolchain.class ) . compileAndRunTest ( ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.frontend.FrontendCompilationException e ) { } }
public void onFindResultReceived ( int activeMatchOrdinal , int numberOfMatches , boolean isDoneCounting ) { if ( ( mFindListener ) == null ) return ; org.chromium.content.common.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onFindResultReceived" ) ; mFindListener.onFindResultReceived ( activeMatchOrdinal , numberOfMatches , isDoneCounting ) ; org.chromium.content.common.TraceEvent.end ( ) ; }
public boolean onPasswordInputComplete ( java.lang.String text , boolean obfuscate ) { if ( ( ! ( android.text.TextUtils.isEmpty ( text ) ) ) && ( ( text.length ( ) ) >= ( com.android.tv.settings.connectivity.FormPageDisplayer.PSK_MIN_LENGTH ) ) ) { android.os.Bundle result = new android.os.Bundle ( ) ; result.putString ( FormPage.DATA_KEY_SUMMARY_STRING , text ) ; if ( obfuscate ) { result.putString ( FormPage.DATA_KEY_SECONDARY_STRING , PasswordInputWizardFragment.OPTION_OBFUSCATE ) ; } listener.onBundlePageResult ( formPage , result ) ; return true ; } return false ; }
private com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource getResource ( @ com.android.annotations.NonNull java.lang.String possibleUrlReference ) { com.android.ide.common.resources.ResourceUrl url = com.android.ide.common.resources.ResourceUrl.parse ( possibleUrlReference ) ; if ( ( url != null ) && ( ! ( url.framework ) ) ) { return getResource ( url.type , url.name ) ; } return null ; }
private static java.io.File replaceRepackageClassesValue ( @ javax.annotation.Nonnull java.io.File inFlags , @ javax.annotation.Nonnull java.lang.String flagNumber ) throws java.io.IOException { java.io.File result = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( ( "proguard" + flagNumber ) , ( ".flags" + flagNumber ) ) ; java.util.List < java.lang.String > lines = com.google.common.io.Files.readLines ( inFlags , java.nio.charset.StandardCharsets.UTF_8 ) ; java.lang.String fileAsOneLine = com.google.common.base.Joiner.on ( ' ' ) . join ( lines ) ; java.lang.String resultContent = fileAsOneLine.replaceAll ( "-repackageclasses\\s+\'.+\'" , "-repackageclasses ''" ) ; com.google.common.io.Files.write ( resultContent , result , java.nio.charset.StandardCharsets.UTF_8 ) ; return result ; }
public void testAppLauncher ( ) throws java.lang.Exception { com.android.devtools.systemimage.uitest.utils.ShellUtil.ShellResult result = com.android.devtools.systemimage.uitest.utils.ShellUtil.invokeCommand ( "ls" ) ; assertTrue ( result.stderr , ( ( ( result.stdout.length ( ) ) > 0 ) && ( ( result.stderr.length ( ) ) == 0 ) ) ) ; }
public void testConfigurationUpdatesWhenResizedFromDockedStack ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
public int hashCode ( ) { int result = countryIso.hashCode ( ) ; result = ( 31 * result ) + ( ( defaultTimeZoneId ) != null ? defaultTimeZoneId.hashCode ( ) : 0 ) ; result = ( 31 * result ) + ( timeZoneIds.hashCode ( ) ) ; return result ; }
public void testHashCode ( ) throws java.text.ParseException { { java.lang.String rule = "&9 < a < b < c < d" ; java.text.RuleBasedCollator coll = new java.text.RuleBasedCollator ( rule ) ; assertEquals ( rule.hashCode ( ) , coll.hashCode ( ) ) ; } { java.lang.String rule = "&9 < a < b < c < d < e" ; java.text.RuleBasedCollator coll = new java.text.RuleBasedCollator ( rule ) ; assertEquals ( rule.hashCode ( ) , coll.hashCode ( ) ) ; } }
public void markBootComplete ( java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { com.android.server.pm.Installer.assertValidInstructionSet ( instructionSet ) ; if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.markBootComplete ( instructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void testCheckAndSet ( ) { assertEquals ( true , lq.checkAndSet ( "b+kok" , config ) ) ; assertTrue ( ( ( config.getLocaleQualifier ( ) ) != null ) ) ; assertEquals ( "b+kok" , config.getLocaleQualifier ( ) . toString ( ) ) ; }
private boolean isDevicesExtra ( java.io.File item ) { java.io.File properties = new java.io.File ( item , com.android.sdklib.SdkConstants.FN_SOURCE_PROP ) ; try { java.io.BufferedReader propertiesReader = new java.io.BufferedReader ( new java.io.FileReader ( properties ) ) ; java.lang.String line ; while ( ( line = propertiesReader.readLine ( ) ) != null ) { java.util.regex.Matcher m = com.android.sdklib.devices.DeviceManager.sPathPropertyPattern.matcher ( line ) ; if ( m.matches ( ) ) { return true ; } } } catch ( java.io.IOException e ) { return false ; } return false ; }
public void test_formatJLjava_lang_StringBufferLjava_text_FieldPosition_ArithmeticException ( ) { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols ( java.util.Locale.US ) ; java.text.DecimalFormat decimalFormat = new java.text.DecimalFormat ( "00.0#E0" , dfs ) ; decimalFormat.setRoundingMode ( java.math.RoundingMode.UNNECESSARY ) ; try { decimalFormat.format ( 99999 , new java.lang.StringBuffer ( ) , new java.text.FieldPosition ( 0 ) ) ; fail ( "ArithmeticException expected" ) ; } catch ( java.lang.ArithmeticException e ) { } }
public void testSetTextCharacterIterator ( ) { java.text.RuleBasedCollator rbColl = ( ( java.text.RuleBasedCollator ) ( java.text.Collator.getInstance ( new java.util.Locale ( "es" , "" , "TRADITIONAL" ) ) ) ) ; java.lang.String text = "caa" ; java.text.CollationElementIterator iterator = rbColl.getCollationElementIterator ( text ) ; iterator.setOffset ( 1 ) ; assertEquals ( 1 , iterator.getOffset ( ) ) ; iterator.setText ( new java.text.StringCharacterIterator ( "cha" ) ) ; iterator.setOffset ( 1 ) ; assertEquals ( 1 , iterator.getOffset ( ) ) ; }
public void setTrafficClass ( int value ) throws java.net.SocketException { checkOpenAndCreate ( true ) ; if ( ( value < 0 ) || ( value > 255 ) ) { throw new java.lang.IllegalArgumentException ( ) ; } impl.setOption ( java.net.SocketOptions.IP_TOS , java.lang.Integer.valueOf ( value ) ) ; }
private java.util.Set < java.lang.Long > queryPhoneTableForContactIds ( com.google.common.collect.ImmutableSet < com.android.dialer.DialerPhoneNumber > dialerPhoneNumbers ) { java.util.Set < java.lang.Long > contactIds = new android.support.v4.util.ArraySet ( ) ; com.android.dialer.phonelookup.cp2.Cp2PhoneLookup.PartitionedNumbers partitionedNumbers = new com.android.dialer.phonelookup.cp2.Cp2PhoneLookup.PartitionedNumbers ( dialerPhoneNumbers ) ; contactIds.addAll ( queryPhoneTableForContactIdsBasedOnE164 ( partitionedNumbers.validE164Numbers ( ) ) ) ; contactIds.addAll ( queryPhoneTableForContactIdsBasedOnRawNumber ( partitionedNumbers.unformattableNumbers ( ) ) ) ; return contactIds ; }
private void setUsbDataUnlocked ( boolean enable ) { if ( com.android.server.usb.UsbDeviceManager.DEBUG ) android.util.Slog.d ( com.android.server.usb.UsbDeviceManager.TAG , ( "setUsbDataUnlocked: " + enable ) ) ; mUsbDataUnlocked = enable ; updateUsbNotification ( ) ; updateUsbStateBroadcastIfNeeded ( ) ; setEnabledFunctions ( mCurrentFunctions , true ) ; }
public void open ( java.lang.String closer ) { if ( closer == null ) { throw new java.lang.NullPointerException ( "closer == null" ) ; } if ( ( ( this ) == ( dalvik.system.CloseGuard.NOOP ) ) || ( ! ( dalvik.system.CloseGuard.ENABLED ) ) ) { return ; } java.lang.String message = ( "Explicit termination method '" + closer ) + "' not called" ; allocationSite = new java.lang.Throwable ( message ) ; }
public synchronized void addURL ( java.net.URL url ) { if ( closed ) return ; synchronized ( urls ) { if ( ( url == null ) || ( path.contains ( url ) ) ) return ; urls.add ( 0 , url ) ; path.add ( url ) ; } }
public V setValue ( V value ) { if ( value == null ) throw new java.lang.NullPointerException ( ) ; V v = super . setValue ( value ) ; this . put ( getKey ( ) , value ) ; return v ; }
public void checkValue ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.util.Map.Entry < T , U > data ) throws com.android.sched.util.codec.CheckingException { com.android.sched.util.config.ChainedException.ChainedExceptionBuilder < com.android.sched.util.codec.CheckingException > exceptions = new com.android.sched.util.config.ChainedException.ChainedExceptionBuilder < com.android.sched.util.codec.CheckingException > ( ) ; try { keyParser.checkValue ( context , data.getKey ( ) ) ; } catch ( com.android.sched.util.codec.CheckingException e ) { exceptions.appendException ( e ) ; } try { valueParser.checkValue ( context , data.getValue ( ) ) ; } catch ( com.android.sched.util.codec.CheckingException e ) { exceptions.appendException ( e ) ; } exceptions.throwIfNecessary ( ) ; }
public void addListener ( com.android.tv.dvr.DvrWatchedPositionManager.WatchedPositionChangedListener listener , long recordedProgramId ) { if ( recordedProgramId == ( RecordedProgram.ID_NOT_SET ) ) { return ; } java.util.Set < com.android.tv.dvr.DvrWatchedPositionManager.WatchedPositionChangedListener > listenerSet = mListeners.get ( recordedProgramId ) ; if ( listenerSet == null ) { listenerSet = new java.util.concurrent.CopyOnWriteArraySet < > ( ) ; mListeners.put ( recordedProgramId , listenerSet ) ; } listenerSet.add ( listener ) ; }
public void testBindSocketOfNonSocketFdThrows ( ) throws java.lang.Exception { final java.io.File devNull = new java.io.File ( "/dev/null" ) ; assertTrue ( devNull.canRead ( ) ) ; final java.io.FileInputStream fis = new java.io.FileInputStream ( devNull ) ; assertTrue ( ( null != ( fis.getFD ( ) ) ) ) ; assertTrue ( fis.getFD ( ) . valid ( ) ) ; try { mNetwork.bindSocket ( fis.getFD ( ) ) ; fail ( "SocketException not thrown" ) ; } catch ( java.net.SocketException expected ) { } }
public void testAesCbcHmacMd5Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth ) ; }
private void setupNext ( ) { isNextLocale = false ; if ( isSpecLocale ) { nextSpec = spec ; int i = nextSpec.lastIndexOf ( android.icu.text.TransliteratorRegistry.LOCALE_SEP ) ; if ( i > 0 ) { nextSpec = spec.substring ( 0 , i ) ; isNextLocale = true ; } else { nextSpec = scriptName ; } } else { if ( ( nextSpec ) != ( scriptName ) ) { nextSpec = scriptName ; } else { nextSpec = null ; } } }
private com.android.ide.eclipse.gltrace.state.IGLProperty createVboState ( ) { com.android.ide.eclipse.gltrace.state.IGLProperty size = new com.android.ide.eclipse.gltrace.state.GLIntegerProperty ( GLStateType.BUFFER_SIZE , java.lang.Integer.valueOf ( 0 ) ) ; com.android.ide.eclipse.gltrace.state.IGLProperty usage = new com.android.ide.eclipse.gltrace.state.GLEnumProperty ( GLStateType.BUFFER_USAGE , com.android.ide.eclipse.gldebugger.GLEnum.GL_STATIC_DRAW ) ; com.android.ide.eclipse.gltrace.state.IGLProperty data = new com.android.ide.eclipse.gltrace.state.GLObjectProperty ( GLStateType.BUFFER_DATA , new byte [ 0 ] ) ; com.android.ide.eclipse.gltrace.state.IGLProperty type = new com.android.ide.eclipse.gltrace.state.GLEnumProperty ( GLStateType.BUFFER_TYPE , com.android.ide.eclipse.gldebugger.GLEnum.GL_ARRAY_BUFFER ) ; com.android.ide.eclipse.gltrace.state.IGLProperty perVboState = new com.android.ide.eclipse.gltrace.state.GLCompositeProperty ( GLStateType.VBO_COMPOSITE , size , usage , data , type ) ; return new com.android.ide.eclipse.gltrace.state.GLSparseArrayProperty ( GLStateType.VBO , perVboState ) ; }
public void deriveValues ( java.util.Set < com.android.tools.idea.wizard.ScopedStateStore.Key > modified ) { super . deriveValues ( modified ) ; }
public final byte [ ] doFinal ( byte [ ] input , int inputOffset , int inputLen ) throws javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException { checkCipherState ( ) ; if ( ( ( ( input == null ) || ( inputOffset < 0 ) ) || ( inputLen > ( ( input.length ) - inputOffset ) ) ) || ( inputLen < 0 ) ) { throw new java.lang.IllegalArgumentException ( "Bad arguments" ) ; } chooseFirstProvider ( ) ; return spi.engineDoFinal ( input , inputOffset , inputLen ) ; }
static void gc ( ) { final dalvik.system.VMRuntime runtime = dalvik.system.VMRuntime.getRuntime ( ) ; java.lang.System.gc ( ) ; runtime.runFinalizationSync ( ) ; java.lang.System.gc ( ) ; runtime.runFinalizationSync ( ) ; java.lang.System.gc ( ) ; runtime.runFinalizationSync ( ) ; }
public void testDistanceRecorder_unknownItemThrowsException ( ) { final android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > distanceRecorder = new android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > ( android.support.test.espresso.util.TreeIterablesTest.complexTree , new android.support.test.espresso.util.TreeIterablesTest.TestElementTreeViewer ( ) ) ; try { distanceRecorder.getDistance ( new android.support.test.espresso.util.TreeIterablesTest.TestElement ( "hello" ) ) ; fail ( "node should be unknown" ) ; } catch ( java.lang.RuntimeException expected ) { } }
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.phonelookup.PhoneLookupInfo.DialerBlockedNumberInfo > lookup ( com.android.dialer.DialerPhoneNumber dialerPhoneNumber ) { return executorService.submit ( ( ) -> queryNumbers ( com.google.common.collect.ImmutableSet.of ( dialerPhoneNumber ) ) . get ( dialerPhoneNumber ) ) ; }
public void dumpDisplayListForCurrentNode ( ) { final com.android.hierarchyviewerlib.ui.util.DrawableViewNode selectedNode = com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . getSelection ( ) ; if ( selectedNode != null ) { executeInBackground ( "Dump displaylist" , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.android.hierarchyviewerlib.device.DeviceBridge.outputDisplayList ( selectedNode.viewNode ) ; } } ) ; } }
java.lang.String getChild ( org.eclipse.core.resources.IProject project , java.lang.String root ) { if ( ( com.android.SdkConstants.SCROLL_VIEW.equals ( root ) ) || ( com.android.SdkConstants.HORIZONTAL_SCROLL_VIEW.equals ( root ) ) ) { return ( " <LinearLayout " + ( getDefaultAttrs ( project , root ) . replace ( '\n' , ' ' ) ) ) + "></LinearLayout>\n" ; } return null ; }
public java.lang.String getApiLabel ( ) { com.android.sdklib.AndroidVersion key = ( ( com.android.sdklib.AndroidVersion ) ( getKey ( ) ) ) ; if ( key.equals ( com.android.sdkuilib.internal.repository.sdkman2.PkgCategoryApi.KEY_TOOLS ) ) { return "TOOLS" ; } else if ( key.equals ( com.android.sdkuilib.internal.repository.sdkman2.PkgCategoryApi.KEY_EXTRA ) ) { return "EXTRAS" ; } else { return key.toString ( ) ; } }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { com.android.jack.shrob.seed.SeedMarker marker = type.getMarker ( com.android.jack.shrob.seed.SeedMarker.class ) ; if ( ( marker != null ) && ( ( marker.getModifier ( ) ) != ( com.android.jack.shrob.spec.KeepModifier.ALLOW_SHRINKING ) ) ) { com.android.jack.shrob.shrink.Keeper.Visitor visitor = new com.android.jack.shrob.shrink.Keeper.Visitor ( ) ; visitor.trace ( type ) ; } }
public void sendMessage ( @ android.annotation.NonNull java.lang.Object peerHandle , int messageId , @ android.annotation.Nullable byte [ ] message , int retryCount ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "sendMessage: called on terminated session" ) ; return ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "sendMessage: called post GC on WifiNanManager" ) ; return ; } mgr.sendMessage ( mClientId , mSessionId , peerHandle , message , messageId , retryCount ) ; } }
public void updateOutlineSelection ( final java.util.List < com.android.ide.common.api.INode > nodes ) { org.eclipse.swt.widgets.Display.getDefault ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { selectDropped ( nodes ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.OutlinePage outlinePage = mCanvas.getOutlinePage ( ) ; org.eclipse.ui.IWorkbenchPartSite site = outlinePage.getEditor ( ) . getSite ( ) ; org.eclipse.jface.viewers.ISelectionProvider selectionProvider = site.getSelectionProvider ( ) ; org.eclipse.jface.viewers.ISelection selection = selectionProvider.getSelection ( ) ; if ( selection != null ) { outlinePage.setSelection ( selection ) ; } } } ) ; }
public static int frequency ( java.util.Iterator < ? > iterator , @ javax.annotation.Nullable java.lang.Object element ) { int result = 0 ; if ( element == null ) { while ( iterator.hasNext ( ) ) { if ( ( iterator.next ( ) ) == null ) { result ++ ; } } } else { while ( iterator.hasNext ( ) ) { if ( element.equals ( iterator.next ( ) ) ) { result ++ ; } } } return result ; }
static java.lang.String pseudoToU16 ( java.lang.String input ) { int len = input.length ( ) ; char [ ] output = new char [ len ] ; int i ; if ( ! ( android.icu.dev.test.bidi.BidiTest.tablesInitialized ) ) { android.icu.dev.test.bidi.BidiTest.buildPseudoTables ( ) ; } for ( i = 0 ; i < len ; i ++ ) output [ i ] = android.icu.dev.test.bidi.BidiTest.pseudoToUChar [ input.charAt ( i ) ] ; return new java.lang.String ( output ) ; }
public void run ( int i ) { android.net.Uri channelUri = channelUris.get ( i ) ; int j = 0 ; try ( android.database.Cursor cursor = mContentResolver.query ( android.media.tv.TvContract.buildProgramsUriForChannel ( channelUri , 0 , ( ( PROGRAM_DURATION_MS * TRANSACTION_SIZE ) / 2 ) ) , null , null , null , null ) ) { while ( cursor.moveToNext ( ) ) { ++ j ; } } }
public void validateCertCredentialWithoutClientPrivateKey ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential ( ) ; cred.certCredential.certType = "x509v3" ; cred.certCredential.certSha256FingerPrint = java.security.MessageDigest.getInstance ( "SHA-256" ) . digest ( FakeKeys.CLIENT_CERT.getEncoded ( ) ) ; cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0 ; cred.clientCertificateChain = new java.security.cert.X509Certificate [ ] { android.net.wifi.FakeKeys.CLIENT_CERT } ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
private void addCall ( com.android.server.telecom.Call call ) { if ( mCalls.contains ( call ) ) { android.telecom.Log.w ( LOG_TAG , "Call TC@%s is being added twice." , call.getId ( ) ) ; return ; } android.telecom.Log.d ( LOG_TAG , "Call added with id TC@%s in state %s" , call.getId ( ) , com.android.server.telecom.CallState.toString ( call.getState ( ) ) ) ; if ( ( mCallStateToCalls.get ( call.getState ( ) ) ) != null ) { mCallStateToCalls.get ( call.getState ( ) ) . add ( call ) ; } updateForegroundCall ( ) ; mCalls.add ( call ) ; onCallEnteringState ( call , call.getState ( ) ) ; }
public void test_engineInit_02 ( ) { org.apache.harmony.xnet.tests.support.KeyManagerFactorySpiImpl kmf = new org.apache.harmony.xnet.tests.support.KeyManagerFactorySpiImpl ( ) ; try { kmf.engineInit ( null ) ; fail ( "InvalidAlgorithmParameterException wasn't thrown" ) ; } catch ( java.security.InvalidAlgorithmParameterException iape ) { } catch ( java.lang.Exception e ) { fail ( ( e + " was thrown instead of InvalidAlgorithmParameterException" ) ) ; } try { char [ ] psw = "password" . toCharArray ( ) ; tests.api.javax.net.ssl.KeyManagerFactorySpiTest.Parameters pr = new tests.api.javax.net.ssl.KeyManagerFactorySpiTest.Parameters ( psw ) ; kmf.engineInit ( pr ) ; } catch ( java.lang.Exception e ) { fail ( ( e + " unexpected exception was thrown" ) ) ; } }
public boolean onCreate ( ) { android.util.Log.d ( com.android.providers.telephony.CarrierIdProvider.TAG , "onCreate" ) ; mDbHelper = new com.android.providers.telephony.CarrierIdProvider.CarrierIdDatabaseHelper ( getContext ( ) ) ; mDbHelper.getReadableDatabase ( ) ; updateFromAssetsIfNeeded ( mDbHelper.getWritableDatabase ( ) ) ; return true ; }
boolean matchesDescription ( org.junit.runner.Description description ) { java.lang.String displayName = description.getDisplayName ( ) ; int endIndex = displayName.lastIndexOf ( "(" , ( ( displayName.length ( ) ) - 1 ) ) ; java.lang.String uniqueName = ( endIndex == ( - 1 ) ) ? displayName : displayName.substring ( 0 , endIndex ) ; return uniqueName.equals ( uniqueMethodId ) ; }
void startCleaningPackages ( ) { synchronized ( mPackages ) { if ( ! ( isExternalMediaAvailable ( ) ) ) { return ; } if ( mSettings.mPackagesToBeCleaned.isEmpty ( ) ) { return ; } } android.content.Intent intent = new android.content.Intent ( android.content.pm.PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE ) ; intent.setComponent ( com.android.server.pm.PackageManagerService.DEFAULT_CONTAINER_COMPONENT ) ; android.app.IActivityManager am = android.app.ActivityManagerNative.getDefault ( ) ; if ( am != null ) { try { am.startService ( null , intent , null , mContext.getOpPackageName ( ) , UserHandle.USER_OWNER ) ; } catch ( android.os.RemoteException e ) { } } }
private com.android.sdklib.IAndroidTarget getRenderingTarget ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk == null ) { return null ; } com.android.sdklib.IAndroidTarget renderingTarget = mConfigComposite.getRenderingTarget ( ) ; if ( renderingTarget != null ) { return renderingTarget ; } if ( ( mEditedFile ) != null ) { return currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; } return null ; }
private static void assertPartial ( byte [ ] expected , byte [ ] actual ) { for ( int i = 0 ; i < ( expected.length ) ; i ++ ) { if ( ( expected [ i ] ) != ( actual [ i ] ) ) { fail ( ( ( ( "Expected " + ( java.util.Arrays.toString ( expected ) ) ) + " but found " ) + ( java.util.Arrays.toString ( actual ) ) ) ) ; } } }
private boolean hasOnlyOneDefinition ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariable var , @ javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb ) { com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker rdm = bb.getMarker ( com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class ) ; assert rdm != null ; boolean alreadyDefined = false ; for ( com.android.jack.analysis.DefinitionMarker dm : rdm.getReachingDefs ( ) ) { if ( ( dm.getDefinedVariable ( ) ) == var ) { if ( alreadyDefined ) { return false ; } alreadyDefined = true ; } } return true ; }
private android.os.IInterface createImsFeature ( int slotId , int featureType , com.android.ims.internal.IImsFeatureStatusCallback c ) throws android.os.RemoteException { switch ( featureType ) { case android.telephony.ims.feature.ImsFeature.EMERGENCY_MMTEL : { return mIImsServiceController.createEmergencyMMTelFeature ( slotId , c ) ; } case android.telephony.ims.feature.ImsFeature.MMTEL : { return mIImsServiceController.createMMTelFeature ( slotId , c ) ; } case android.telephony.ims.feature.ImsFeature.RCS : { return mIImsServiceController.createRcsFeature ( slotId , c ) ; } default : return null ; } }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; dataOut.writeBoolean ( myIsNormalized ) ; com.intellij.updater.Patch.writeMap ( dataOut , myWarnings ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
public void writeCharacteristic ( int clientIf , java.lang.String address , int srvcType , int srvcInstanceId , android.os.ParcelUuid srvcId , int charInstanceId , android.os.ParcelUuid charId , int writeType , int authReq , byte [ ] value ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.writeCharacteristic ( clientIf , address , srvcType , srvcInstanceId , srvcId.getUuid ( ) , charInstanceId , charId.getUuid ( ) , writeType , authReq , value ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; cancelNotificationTaskOfSecureTestStartFailure ( ) ; stopAdvertise ( ) ; if ( ( mGattServer ) == null ) { return ; } if ( ( mDevice ) != null ) { mGattServer.cancelConnection ( mDevice ) ; } mGattServer.clearServices ( ) ; mGattServer.close ( ) ; }
public void setNetworkSelectionModeAutomatic ( android.os.Message response ) { com.android.internal.telephony.gsm.GSMPhone.NetworkSelectMessage nsm = new com.android.internal.telephony.gsm.GSMPhone.NetworkSelectMessage ( ) ; nsm.message = response ; nsm.operatorNumeric = "" ; nsm.operatorAlphaLong = "" ; android.os.Message msg = obtainMessage ( com.android.internal.telephony.gsm.EVENT_SET_NETWORK_AUTOMATIC_COMPLETE , nsm ) ; if ( com.android.internal.telephony.gsm.GSMPhone.LOCAL_DEBUG ) android.util.Log.d ( com.android.internal.telephony.gsm.GSMPhone.LOG_TAG , "wrapping and sending message to connect automatically" ) ; mCM.setNetworkSelectionModeAutomatic ( msg ) ; }
private static void reportTypeDef ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.Node node , boolean flag , @ com.android.annotations.NonNull java.lang.Object [ ] allowedValues ) { java.lang.String values = com.android.tools.lint.checks.SupportAnnotationDetector.listAllowedValues ( allowedValues ) ; java.lang.String message ; if ( flag ) { message = "Must be one or more of: " + values ; } else { message = "Must be one of: " + values ; } context.report ( com.android.tools.lint.checks.SupportAnnotationDetector.TYPE_DEF , node , context.getLocation ( node ) , message ) ; }
public < T extends com.android.jack.ir.ast.JExpression > T cloneExpression ( @ javax.annotation.Nonnull T expr ) { expression = null ; this . accept ( expr ) ; if ( ( expression ) == null ) { throw new java.lang.AssertionError ( ( "Unable to clone expression " + expr ) ) ; } assert ( expression ) != null ; return ( ( T ) ( expression ) ) ; }
private java.util.Map.Entry < K , V2 > transformEntry ( java.util.Map.Entry < K , V1 > entry ) { if ( entry == null ) { return null ; } K key = entry.getKey ( ) ; V2 v2 = transformer.transformEntry ( key , entry.getValue ( ) ) ; return com.google.common.collect.Maps.immutableEntry ( key , v2 ) ; }
private static void printGetMethod ( java.lang.Class < ? > klass ) { java.lang.reflect.Method m ; try { m = klass.getDeclaredMethod ( "sayHi" ) ; java.lang.System.out.println ( ( "No error thrown for class " + ( klass.toString ( ) ) ) ) ; } catch ( java.lang.NoSuchMethodException e ) { java.lang.System.out.println ( ( "NoSuchMethodException thrown for class " + ( klass.toString ( ) ) ) ) ; } catch ( java.lang.Throwable t ) { java.lang.System.out.println ( ( "Unknown error thrown for class " + ( klass.toString ( ) ) ) ) ; t.printStackTrace ( ) ; } }
public android.bluetooth.BluetoothClass getBluetoothClass ( ) { if ( ( android.bluetooth.BluetoothDevice.sService ) == null ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot get Bluetooth Class" ) ; return null ; } try { int classInt = android.bluetooth.BluetoothDevice.sService.getRemoteClass ( this ) ; if ( classInt == ( BluetoothClass.ERROR ) ) return null ; return new android.bluetooth.BluetoothClass ( classInt ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return null ; }
public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { if ( ( api ) == 24 ) { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( "Email or phone" ) ) . exists ( ) ; } else { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( "Email or phone" ) ) . exists ( ) ; } }
public void close ( ) throws java.io.IOException { guard.close ( ) ; synchronized ( this ) { if ( ( channel ) != null ) { channel.close ( ) ; } if ( shouldClose ) { libcore.io.IoUtils.close ( fd ) ; } else { fd = new java.io.FileDescriptor ( ) ; } } }
public android.net.IpSecTransform.Builder setSpi ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecManager.SecurityParameterIndex spi ) { mConfig.setSpiResourceId ( direction , spi.getResourceId ( ) ) ; return this ; }
public final void testGetDeviceStatus ( ) { assertEquals ( DeviceStatus.EXISTS , dm.getDeviceStatus ( "7in WSVGA (Tablet)" , "Generic" , ( - 1338842870 ) ) ) ; assertEquals ( DeviceStatus.CHANGED , dm.getDeviceStatus ( "7in WSVGA (Tablet)" , "Generic" , 1 ) ) ; assertEquals ( DeviceStatus.EXISTS , dm.getDeviceStatus ( "Nexus One" , "Google" , ( - 1812631727 ) ) ) ; assertEquals ( DeviceStatus.CHANGED , dm.getDeviceStatus ( "Nexus One" , "Google" , 2 ) ) ; assertEquals ( DeviceStatus.MISSING , dm.getDeviceStatus ( "My Device" , "Custom OEM" , 3 ) ) ; }
public void onSizeChanged ( final int w , final int h , final int ow , final int oh ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onSizeChanged ( w , h , ow , oh ) ; } } ) ; return ; } mAwContents.onSizeChanged ( w , h , ow , oh ) ; }
private void generateTestManifest ( java.lang.String testPackageName , int minSdkVersion , int targetSdkVersion , java.lang.String testedPackageName , java.lang.String instrumentationRunner , java.lang.String outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testPackageName , minSdkVersion , targetSdkVersion , testedPackageName , instrumentationRunner ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public android.content.Context createConfigurationContext ( android.content.res.Configuration overrideConfiguration ) { if ( overrideConfiguration == null ) { throw new java.lang.IllegalArgumentException ( "overrideConfiguration must not be null" ) ; } android.app.ContextImpl c = new android.app.ContextImpl ( ) ; c.init ( mPackageInfo , null , mMainThread ) ; c.mResources = mMainThread.getTopLevelResources ( mPackageInfo.getResDir ( ) , getDisplayId ( ) , overrideConfiguration , mResources.getCompatibilityInfo ( ) ) ; return c ; }
public void onDestroy ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.TAG , "onDestroy called" ) ; if ( ( mHeadsetProfile ) != null ) { mAdapter.closeProfileProxy ( BluetoothProfile.HEADSET_CLIENT , mHeadsetProfile ) ; } try { unregisterReceiver ( mBroadcastReceiver ) ; } catch ( java.lang.IllegalArgumentException ex ) { android.util.Log.w ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.TAG , "Receiver was not registered." ) ; } synchronized ( this ) { mDevice = null ; if ( ( mDevicePhoneAccount ) != null ) { mTelecomManager.unregisterPhoneAccount ( mDevicePhoneAccount.getAccountHandle ( ) ) ; mDevicePhoneAccount = null ; } } }
public void enter ( ) { if ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG ) android.util.Log.d ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Tethered " + ( mIfaceName ) ) ) ; sendInterfaceState ( IControlsTethering.STATE_TETHERED ) ; }
public static void checkServerTrusted ( javax.net.ssl.X509TrustManager x509tm , java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.net.Socket socket ) throws java.security.cert.CertificateException { if ( x509tm instanceof javax.net.ssl.X509ExtendedTrustManager ) { javax.net.ssl.X509ExtendedTrustManager x509etm = ( ( javax.net.ssl.X509ExtendedTrustManager ) ( x509tm ) ) ; x509etm.checkServerTrusted ( chain , authType , socket ) ; } else { x509tm.checkServerTrusted ( chain , authType ) ; } }
void onUserInitialized ( com.android.server.am.UserState uss , boolean foreground , int oldUserId , int newUserId ) { synchronized ( this ) { if ( foreground ) { moveUserToForeground ( uss , oldUserId , newUserId ) ; } } completeSwitchAndInitialize ( uss , newUserId , true , false ) ; }
public void trackingEnabled_updateAppConfigMissing ( ) throws java.lang.Exception { configureTrackingEnabled ( ) ; configureReliabilityConfigSettingsOk ( ) ; configureUpdateAppPackageNameMissing ( ) ; configureDataAppPackageOk ( com.android.server.timezone.PackageTrackerTest.DATA_APP_PACKAGE_NAME ) ; try { mPackageTracker.start ( ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } mFakeIntentHelper.assertNotInitialized ( ) ; mFakeIntentHelper.assertReliabilityTriggeringDisabled ( ) ; }
public void enter ( ) { super . enter ( ) ; setSpeakerphoneOn ( false ) ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_BLUETOOTH , mAvailableRoutes ) ; setSystemAudioState ( newState ) ; updateInternalCallAudioState ( ) ; }
private java.io.File createJackArchiveWithResources ( ) throws java.lang.Exception { java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "resourcetestjack" , ".zip" ) ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; toolchain.addResource ( new java.io.File ( com.android.jack.resource.ResourceTests.FILE , "rsc" ) ) ; toolchain.srcToLib ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( toolchain.getDefaultBootClasspath ( ) ) , jackAr , true , com.android.jack.resource.ResourceTests.FILE ) ; return jackAr ; }
public void test_isHidden ( ) throws java.io.IOException { org.junit.Assert.assertFalse ( provider.isHidden ( filesSetup.getDataFilePath ( ) ) ) ; java.nio.file.Files.setAttribute ( filesSetup.getDataFilePath ( ) , "dos:hidden" , true ) ; org.junit.Assert.assertFalse ( provider.isHidden ( filesSetup.getDataFilePath ( ) ) ) ; }
public static void appendMessageToFileContent ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull java.io.File out , @ javax.annotation.Nonnull java.lang.String message ) throws java.io.IOException { java.io.PrintStream fos = new java.io.PrintStream ( new java.io.FileOutputStream ( out ) ) ; java.io.FileInputStream fis = new java.io.FileInputStream ( file ) ; new com.android.sched.util.stream.ByteStreamSucker ( fis , fos , false ) . suck ( ) ; fos.print ( message ) ; fos.close ( ) ; }
public boolean mergeProfiles ( int uid , java.lang.String packageName ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { return mInstalld.mergeProfiles ( uid , packageName ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
private static void onSubscribeTerminated ( int subscribeId , int status ) { if ( com.android.server.wifi.aware.WifiAwareNative.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNative.TAG , ( ( ( "onSubscribeTerminated: subscribeId=" + subscribeId ) + ", status=" ) + status ) ) ; } com.android.server.wifi.aware.WifiAwareStateManager.getInstance ( ) . onSessionTerminatedNotification ( subscribeId , ( status == ( com.android.server.wifi.aware.WifiAwareNative.AWARE_STATUS_SUCCESS ) ? android.net.wifi.aware.WifiAwareDiscoverySessionCallback.TERMINATE_REASON_DONE : android.net.wifi.aware.WifiAwareDiscoverySessionCallback.TERMINATE_REASON_FAIL ) , false ) ; }
private static java.lang.String decodeUtf16 ( byte [ ] data , int offset , int numFields ) throws com.android.internal.telephony.cdma.sms.BearerData.CodingException { int byteCount = numFields * 2 ; if ( ( byteCount < 0 ) || ( ( byteCount + offset ) > ( data.length ) ) ) { throw new com.android.internal.telephony.cdma.sms.BearerData.CodingException ( "UTF-16 decode failed: offset or length out of range" ) ; } try { return new java.lang.String ( data , offset , byteCount , "utf-16be" ) ; } catch ( java.io.UnsupportedEncodingException ex ) { throw new com.android.internal.telephony.cdma.sms.BearerData.CodingException ( ( "UTF-16 decode failed: " + ex ) ) ; } }
private void loadStackFrame ( ) throws java.io.IOException { long id = readId ( ) ; java.lang.String methodName = mStrings.get ( readId ( ) ) ; java.lang.String methodSignature = mStrings.get ( readId ( ) ) ; java.lang.String sourceFile = mStrings.get ( readId ( ) ) ; int serial = mInput.readInt ( ) ; int lineNumber = mInput.readInt ( ) ; com.android.tools.perflib.heap.StackFrame frame = new com.android.tools.perflib.heap.StackFrame ( id , methodName , methodSignature , sourceFile , serial , lineNumber ) ; mSnapshot.addStackFrame ( frame ) ; }
public static android.icu.impl.SimplePatternFormatter compileMinMaxPlaceholders ( java.lang.CharSequence pattern , int min , int max ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String compiledPattern = android.icu.impl.SimplePatternFormatter.compileToStringMinMaxPlaceholders ( pattern , sb , min , max ) ; return new android.icu.impl.SimplePatternFormatter ( compiledPattern ) ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { return new com.android.tools.lint.checks.CallSuperDetector.PerformanceVisitor ( context ) ; }
public void testResourceConfigMerge ( ) { com.android.builder.model.ProductFlavor productflavor = mCustom.mergeOver ( mCustom2 ) ; java.util.Collection < java.lang.String > configs = productflavor.getResourceConfigurations ( ) ; assertEquals ( 2 , configs.size ( ) ) ; assertTrue ( configs.contains ( "hdpi" ) ) ; assertTrue ( configs.contains ( "ldpi" ) ) ; }
public synchronized void acknowledgeIncomingGsmSmsWithPdu ( boolean success , java.lang.String ackPdu , android.os.Message response ) { android.util.Log.d ( com.android.internal.telephony.gsm.UsimDataDownloadCommands.TAG , ( ( ( "acknowledgeLastIncomingGsmSmsWithPdu: success=" + success ) + ", ackPDU= " ) + ackPdu ) ) ; junit.framework.Assert.assertTrue ( "unexpected call to acknowledge SMS" , mExpectingAcknowledgeGsmSms ) ; junit.framework.Assert.assertEquals ( mExpectingAcknowledgeGsmSmsSuccess , success ) ; junit.framework.Assert.assertEquals ( mExpectingAcknowledgeGsmSmsPdu , ackPdu ) ; mExpectingAcknowledgeGsmSms = false ; if ( response != null ) { android.os.AsyncResult.forMessage ( response ) ; response.sendToTarget ( ) ; } notifyAll ( ) ; }
public void testCaCertificateChangesDetected ( ) { com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig eapConfig = new com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig ( WifiEnterpriseConfig.Eap.TTLS ) . setPhase2 ( WifiEnterpriseConfig.Phase2.MSCHAPV2 ) . setIdentity ( "username" , "password" ) . setCaCerts ( new java.security.cert.X509Certificate [ ] { android.net.wifi.FakeKeys.CA_CERT0 } ) ; com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig eapConfigAddedCert = new com.android.server.wifi.WifiConfigurationUtilTest.EnterpriseConfig ( WifiEnterpriseConfig.Eap.TTLS ) . setPhase2 ( WifiEnterpriseConfig.Phase2.MSCHAPV2 ) . setIdentity ( "username" , "password" ) . setCaCerts ( new java.security.cert.X509Certificate [ ] { android.net.wifi.FakeKeys.CA_CERT0 , android.net.wifi.FakeKeys.CA_CERT1 } ) ; assertTrue ( com.android.server.wifi.WifiConfigurationUtil.hasEnterpriseConfigChanged ( eapConfig.enterpriseConfig , eapConfigAddedCert.enterpriseConfig ) ) ; }
public org.objectweb.asm.tree.AbstractInsnNode clone ( final java.util.Map < org.objectweb.asm.tree.LabelNode , org.objectweb.asm.tree.LabelNode > labels ) { org.objectweb.asm.tree.LookupSwitchInsnNode clone = new org.objectweb.asm.tree.LookupSwitchInsnNode ( clone ( dflt , labels ) , null , clone ( this . labels , labels ) ) ; clone.keys.addAll ( keys ) ; return clone ; }
public void setRingerMode ( int ringerMode ) { if ( mUseFixedVolume ) { return ; } if ( ( ringerMode == ( AudioManager.RINGER_MODE_VIBRATE ) ) && ( ! ( mHasVibrator ) ) ) { ringerMode = AudioManager.RINGER_MODE_SILENT ; } if ( ringerMode != ( getRingerMode ( ) ) ) { setRingerModeInt ( ringerMode , true ) ; broadcastRingerMode ( ringerMode ) ; } }
private void insertIndy ( java.lang.String name , java.lang.String desc , annotations.CalledByIndy callsite ) { org.objectweb.asm.Handle bsm = buildBootstrapMethodHandle ( callsite ) ; java.lang.Object [ ] bsmArgs = buildBootstrapArguments ( callsite ) ; mv.visitInvokeDynamicInsn ( name , desc , bsm , bsmArgs ) ; }
void schedulePackageCleaning ( java.lang.String packageName ) { mHandler.sendMessage ( mHandler.obtainMessage ( com.android.server.pm.PackageManagerService.START_CLEANING_PACKAGE , packageName ) ) ; }
public static void setUp ( ) throws java.lang.Exception { com.android.jack.Options options = new com.android.jack.Options ( ) ; com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks ( ) ; options.checkValidity ( hooks ) ; options.getConfigBuilder ( hooks ) . setDebug ( ) ; com.android.sched.util.config.ThreadConfig.setConfig ( options.getConfig ( ) ) ; }
public com.android.dialer.historyitemactions.HistoryItemActionModulesBuilder addModuleForSendingTextMessage ( ) { if ( ( moduleInfo.getIsBlocked ( ) ) || ( android.text.TextUtils.isEmpty ( moduleInfo.getNormalizedNumber ( ) ) ) ) { return this ; } modules.add ( com.android.dialer.historyitemactions.IntentModule.newModuleForSendingTextMessage ( context , moduleInfo.getNormalizedNumber ( ) ) ) ; return this ; }
public java.lang.String iccTransmitApduLogicalChannel ( int channel , int cla , int instruction , int p1 , int p2 , int p3 , java.lang.String data ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccTransmitApduLogicalChannel ( channel , cla , instruction , p1 , p2 , p3 , data ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return "" ; }
void setArg ( int index , java.lang.Object obj ) { mArgs [ index ] = obj ; android.renderscript.ScriptGroup.Closure.ValueAndSize vs = new android.renderscript.ScriptGroup.Closure.ValueAndSize ( mRS , obj ) ; mRS.nClosureSetArg ( getID ( mRS ) , index , vs.value , vs.size ) ; }
public boolean isDataVersionAcceptable ( byte [ ] version ) { return ( version [ 0 ] ) == 1 ; }
public byte [ ] getEncoded ( ) { try { org.bouncycastle.asn1.pkcs.PrivateKeyInfo info = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo ( new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( org.bouncycastle.asn1.oiw.OIWObjectIdentifiers.elGamalAlgorithm , new org.bouncycastle.asn1.oiw.ElGamalParameter ( elSpec.getP ( ) , elSpec.getG ( ) ) ) , new org.bouncycastle.asn1.DERInteger ( getX ( ) ) ) ; return info.getEncoded ( ASN1Encoding.DER ) ; } catch ( java.io.IOException e ) { return null ; } }
public java.nio.ByteBuffer putInt ( int index , int value ) { checkNotFreed ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkIndex ( index , SizeOf.INT ) ; this . block.pokeInt ( ( ( offset ) + index ) , value , order ) ; return this ; }
public static android.content.Intent checkIntentComponent ( final android.content.ComponentName component ) { final org.hamcrest.Matcher < android.content.Intent > m = new org.hamcrest.BaseMatcher < android.content.Intent > ( ) { @ java.lang.Override public boolean matches ( java.lang.Object item ) { if ( item == null ) return false ; return com.google.common.base.Objects.equal ( ( ( android.content.Intent ) ( item ) ) . getComponent ( ) , component ) ; } @ java.lang.Override public void describeTo ( org.hamcrest.Description description ) { description.appendText ( ( ( "Intent: component=\"" + component ) + "\"" ) ) ; } } ; return org.mockito.Mockito.argThat ( m ) ; }
public static java.lang.String externalFullMethodDescription ( java.lang.String internalClassName , int accessFlags , java.lang.String internalMethodName , java.lang.String internalMethodDescriptor ) { return ( ( ( ( proguard.classfile.util.ClassUtil.externalMethodAccessFlags ( accessFlags ) ) + ( proguard.classfile.util.ClassUtil.externalMethodReturnTypeAndName ( internalClassName , internalMethodName , internalMethodDescriptor ) ) ) + ( proguard.classfile.ClassConstants.EXTERNAL_METHOD_ARGUMENTS_OPEN ) ) + ( proguard.classfile.util.ClassUtil.externalMethodArguments ( internalMethodDescriptor ) ) ) + ( proguard.classfile.ClassConstants.EXTERNAL_METHOD_ARGUMENTS_CLOSE ) ; }
public void callSessionSuppServiceReceived ( com.android.ims.internal.ImsCallSession session , com.android.ims.ImsSuppServiceNotification suppServiceInfo ) { if ( isTransientConferenceSession ( session ) ) { logi ( ( ( "callSessionSuppServiceReceived :: not supported for transient conference" + " session=" ) + session ) ) ; return ; } logi ( ( ( ( "callSessionSuppServiceReceived :: session=" + session ) + ", suppServiceInfo" ) + suppServiceInfo ) ) ; com.android.ims.ImsCall.Listener listener ; synchronized ( this ) { listener = mListener ; } if ( listener != null ) { try { listener.onCallSuppServiceReceived ( this , suppServiceInfo ) ; } catch ( java.lang.Throwable t ) { loge ( "callSessionSuppServiceReceived :: " , t ) ; } } }
private static TestFmwk.Target test_for_TestFmwk_GetTargets ( android.icu.dev.test.TestFmwk testFmwk ) { try { return ( ( android.icu.dev.test.TestFmwk.Target ) ( android.icu.junit.TestFmwkUtils.getTargetsMethod.invoke ( testFmwk , new java.lang.Object [ ] { null } ) ) ) ; } catch ( java.lang.reflect.InvocationTargetException | java.lang.IllegalAccessException e ) { throw new java.lang.IllegalStateException ( ( "Problem calling getTargets(null) on " + testFmwk ) , e ) ; } }
public boolean p2pGroupRemove ( java.lang.String iface ) { if ( android.text.TextUtils.isEmpty ( iface ) ) return false ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " P2P_GROUP_REMOVE " ) + iface ) ) ; } }
public void onCharacteristicChanged ( android.bluetooth.BluetoothGatt gatt , android.bluetooth.BluetoothGattCharacteristic characteristic ) { if ( com.android.cts.verifier.bluetooth.BleClientService.DEBUG ) android.util.Log.d ( com.android.cts.verifier.bluetooth.BleClientService.TAG , "onCharacteristicChanged" ) ; if ( ( ( characteristic.getUuid ( ) ) != null ) && ( characteristic.getUuid ( ) . equals ( com.android.cts.verifier.bluetooth.BleClientService.UPDATE_CHARACTERISTIC_UUID ) ) ) { notifyCharacteristicChanged ( characteristic.getStringValue ( 0 ) ) ; setNotification ( false ) ; sleep ( 1000 ) ; mBluetoothGatt.readRemoteRssi ( ) ; } }
public void test_hasNextLPattern ( ) throws java.io.IOException { java.util.regex.Pattern pattern ; s = new java.util.Scanner ( "aab@2@abb@" ) . useDelimiter ( "\\@" ) ; pattern = java.util.regex.Pattern.compile ( "a*b" ) ; assertTrue ( s.hasNext ( pattern ) ) ; assertEquals ( "aab" , s.next ( pattern ) ) ; assertFalse ( s.hasNext ( pattern ) ) ; try { s.next ( pattern ) ; fail ( "should throw InputMismatchException" ) ; } catch ( java.util.InputMismatchException e ) { } s = new java.util.Scanner ( "word ? " ) ; pattern = java.util.regex.Pattern.compile ( "\\w+" ) ; assertTrue ( s.hasNext ( pattern ) ) ; assertEquals ( "word" , s.next ( pattern ) ) ; assertFalse ( s.hasNext ( pattern ) ) ; try { s.next ( pattern ) ; fail ( "should throw InputMismatchException" ) ; } catch ( java.util.InputMismatchException e ) { } s = new java.util.Scanner ( "word1 WorD2 " ) ; pattern = java.util.regex.Pattern.compile ( "\\w+" ) ; assertTrue ( s.hasNext ( pattern ) ) ; assertEquals ( "word1" , s.next ( pattern ) ) ; assertTrue ( s.hasNext ( pattern ) ) ; assertEquals ( "WorD2" , s.next ( pattern ) ) ; assertFalse ( s.hasNext ( pattern ) ) ; try { s.next ( pattern ) ; fail ( "should throw NoSuchElementException" ) ; } catch ( java.util.NoSuchElementException e ) { } s = new java.util.Scanner ( "word1 WorD2 " ) ; pattern = java.util.regex.Pattern.compile ( "\\w+" ) ; try { s.hasNext ( ( ( java.util.regex.Pattern ) ( null ) ) ) ; fail ( "Should throw NullPointerException" ) ; } catch ( java.lang.NullPointerException e ) { } s.close ( ) ; try { s.hasNext ( pattern ) ; fail ( "should throw IllegalStateException" ) ; } catch ( java.lang.IllegalStateException e ) { } os.write ( "aab b" . getBytes ( ) ) ; serverSocket.close ( ) ; s = new java.util.Scanner ( client ) ; pattern = java.util.regex.Pattern.compile ( "a+b" ) ; assertTrue ( s.hasNext ( pattern ) ) ; assertEquals ( "aab" , s.next ( pattern ) ) ; assertFalse ( s.hasNext ( pattern ) ) ; try { s.next ( pattern ) ; fail ( "should throw InputMismatchException" ) ; } catch ( java.util.InputMismatchException e ) { } }
public com.android.builder.core.VariantConfiguration addProductFlavor ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.GroupableProductFlavor productFlavor , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider , @ com.android.annotations.NonNull java.lang.String dimensionName ) { com.google.common.base.Preconditions.checkNotNull ( productFlavor ) ; com.google.common.base.Preconditions.checkNotNull ( sourceProvider ) ; com.google.common.base.Preconditions.checkNotNull ( dimensionName ) ; super . addProductFlavor ( productFlavor , sourceProvider , dimensionName ) ; computeNdkConfig ( ) ; return this ; }
public int dexOptSecondaryDexPath ( android.content.pm.ApplicationInfo info , java.lang.String path , java.util.Set < java.lang.String > isas , java.lang.String compilerFilter , boolean isUsedByOtherApps , boolean downgrade ) { synchronized ( mInstallLock ) { final long acquireTime = acquireWakeLockLI ( info.uid ) ; try { return dexOptSecondaryDexPathLI ( info , path , isas , compilerFilter , isUsedByOtherApps , downgrade ) ; } finally { releaseWakeLockLI ( acquireTime ) ; } } }
public boolean isMatchFor ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier qualifier ) { if ( qualifier instanceof com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier ) { com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier referenceQualifier = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier ) ( qualifier ) ) ; if ( ( ( referenceQualifier.mValue ) == ( com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier.KeyboardState.SOFT ) ) && ( ( mValue ) == ( com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier.KeyboardState.EXPOSED ) ) ) { return true ; } return ( referenceQualifier.mValue ) == ( mValue ) ; } return false ; }
private android.support.test.uiautomator.UiObject findEjectIcon ( java.lang.String rootLabel ) throws android.support.test.uiautomator.UiObjectNotFoundException { final android.support.test.uiautomator.UiSelector rootsList = findRootListSelector ( ) ; revealRoot ( rootsList , rootLabel ) ; final android.support.test.uiautomator.UiScrollable rootsListObject = new android.support.test.uiautomator.UiScrollable ( rootsList ) ; final android.support.test.uiautomator.UiObject rootItem = rootsListObject.getChildByText ( new android.support.test.uiautomator.UiSelector ( ) , rootLabel , false ) ; final android.support.test.uiautomator.UiSelector ejectIcon = new android.support.test.uiautomator.UiSelector ( ) . resourceId ( "com.android.documentsui:id/eject_icon" ) ; return new android.support.test.uiautomator.UiObject ( rootItem.getSelector ( ) . childSelector ( ejectIcon ) ) ; }
static int log10Floor ( long x ) { int y = com.google.common.math.LongMath.MAX_LOG10_FOR_LEADING_ZEROS [ java.lang.Long.numberOfLeadingZeros ( x ) ] ; long sgn = ( x - ( com.google.common.math.LongMath.POWERS_OF_10 [ y ] ) ) > > > ( ( java.lang.Long.SIZE ) - 1 ) ; return y - ( ( int ) ( sgn ) ) ; }
public void throwing ( java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.Throwable thrown ) { if ( ( ( java.util.logging.Level.FINER.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( java.util.logging.Level.FINER , "THROW" ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setThrown ( thrown ) ; doLog ( lr ) ; }
boolean updateOrientationFromAppTokensLocked ( boolean inTransaction ) { long ident = android.os.Binder.clearCallingIdentity ( ) ; try { int req = getOrientationFromWindowsLocked ( ) ; if ( req == ( android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED ) ) { req = getOrientationFromAppTokensLocked ( ) ; } if ( req != ( mForcedAppOrientation ) ) { mForcedAppOrientation = req ; mPolicy.setCurrentOrientationLw ( req ) ; if ( updateRotationUncheckedLocked ( inTransaction ) ) { return true ; } } return false ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } }
private void complete ( ) { com.ibm.icu.text.DateTimePatternGenerator.PatternInfo patternInfo = new com.ibm.icu.text.DateTimePatternGenerator.PatternInfo ( ) ; for ( int i = 0 ; i < ( com.ibm.icu.text.DateTimePatternGenerator.CANONICAL_ITEMS.length ) ; ++ i ) { addPattern ( java.lang.String.valueOf ( com.ibm.icu.text.DateTimePatternGenerator.CANONICAL_ITEMS [ i ] ) , false , patternInfo ) ; } }
public void testAdbInstallFile ( ) throws java.lang.Exception { final android.appsecurity.cts.List < java.lang.String > output = android.appsecurity.cts.AdbOutputReader.getOutput ( 5000L , new java.lang.String [ ] { "adb" , "-s" , getDevice ( ) . getSerialNumber ( ) , "shell" , "cmd" , "package" , "install" , "-S" , "1024" , "/data/local/tmp/foo.apk" } ) ; assertEquals ( "Line count" , 1 , output.size ( ) ) ; assertEquals ( "Error text" , "Error: APK content must be streamed" , output.get ( 0 ) ) ; }
public java.lang.Object [ ] getChildren ( java.lang.Object parentElement ) { if ( parentElement instanceof com.android.ddmlib.IDevice ) { com.android.hierarchyviewerlib.device.Window [ ] list = model.getWindows ( ( ( com.android.ddmlib.IDevice ) ( parentElement ) ) ) ; if ( list != null ) { return list ; } } return new java.lang.Object [ 0 ] ; }
protected void doOKAction ( ) { final org.jetbrains.plugins.github.GithubSettings settings = org.jetbrains.plugins.github.GithubSettings.getInstance ( ) ; settings.setAnonymousGist ( myGithubCreateGistPanel.isAnonymous ( ) ) ; settings.setOpenInBrowserGist ( myGithubCreateGistPanel.isOpenInBrowser ( ) ) ; settings.setPrivateGist ( myGithubCreateGistPanel.isPrivate ( ) ) ; super . doOKAction ( ) ; }
public boolean onError ( android.media.MediaPlayer mp , int newWhat , int extra ) { android.util.Log.i ( android.security.cts.StagefrightTest.TAG , ( "error: " + newWhat ) ) ; if ( ( what ) != ( android.media.MediaPlayer.MEDIA_ERROR_SERVER_DIED ) ) { what = newWhat ; } lock.lock ( ) ; condition.signal ( ) ; lock.unlock ( ) ; return true ; BRANCH ( 19 ) ; android.security.cts.b532 DO ; security : { exceptions ( android.security.cts.StagefrightTest ) ; } }
public java.util.Set < K > keySet ( ) { java.util.Set < K > result = keySet ; if ( result == null ) { return keySet = new com.google.common.collect.Maps.KeySet < K , V > ( ) { @ java.lang.Override java.util.Map < K , V > map ( ) { return com.google.common.collect.Maps.ImprovedAbstractMap.this ; } } ; } return result ; }
public void sendDialerSpecialCode ( java.lang.String callingPackage , java.lang.String inputCode ) { mAppOps.checkPackage ( android.os.Binder.getCallingUid ( ) , callingPackage ) ; java.lang.String defaultDialer = android.telecom.TelecomManager.from ( mPhone.getContext ( ) ) . getDefaultDialerPackage ( ) ; if ( ! ( android.text.TextUtils.equals ( callingPackage , defaultDialer ) ) ) { enforceCarrierPrivilege ( getDefaultSubscription ( ) ) ; } mPhone.sendDialerSpecialCode ( inputCode ) ; }
public synchronized void close ( int cause ) { if ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( ( ( "Closing call " + ( mCurrentCall ) ) + "state: " ) + ( mClosed ) ) ) ; } if ( mClosed ) { return ; } android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( ( "Setting " + ( mCurrentCall ) ) + " to disconnected" ) ) ; setDisconnected ( new android.telecom.DisconnectCause ( cause ) ) ; mClosed = true ; mCurrentCall = null ; destroy ( ) ; }
private void stopRtt ( java.lang.String callId ) { android.telecom.Log.d ( this , "stopRtt(%s)" , callId ) ; if ( mConnectionById.containsKey ( callId ) ) { findConnectionForAction ( callId , "stopRtt" ) . onStopRtt ( ) ; } else if ( mConferenceById.containsKey ( callId ) ) { android.telecom.Log.w ( this , "stopRtt called on a conference." ) ; } }
public boolean removeTask ( int taskId ) { synchronized ( this ) { enforceCallingPermission ( android.Manifest.permission.REMOVE_TASKS , "removeTask()" ) ; long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return removeTaskByIdLocked ( taskId , true ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public static java.io.BufferedOutputStream open ( java.lang.String path ) throws java.io.FileNotFoundException { java.io.File file = com.google.android.droiddriver.util.FileUtils.getAbsoluteFile ( path ) ; com.google.android.droiddriver.util.Logs.log ( Log.INFO , ( "opening file " + ( file.getAbsolutePath ( ) ) ) ) ; java.io.BufferedOutputStream stream = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( file ) ) ; file.setReadable ( true , false ) ; file.setWritable ( true , false ) ; return stream ; }
public static void start ( ) { if ( ! ( com.android.internal.os.SamplingProfilerIntegration.enabled ) ) { return ; } if ( ( com.android.internal.os.SamplingProfilerIntegration.samplingProfiler ) != null ) { android.util.Log.e ( com.android.internal.os.SamplingProfilerIntegration.TAG , ( "SamplingProfilerIntegration already started at " + ( new java.util.Date ( com.android.internal.os.SamplingProfilerIntegration.startMillis ) ) ) ) ; return ; } java.lang.ThreadGroup group = java.lang.Thread.currentThread ( ) . getThreadGroup ( ) ; dalvik.system.profiler.SamplingProfiler.ThreadSet threadSet = dalvik.system.profiler.SamplingProfiler.newThreadGroupTheadSet ( group ) ; com.android.internal.os.SamplingProfilerIntegration.samplingProfiler = new dalvik.system.profiler.SamplingProfiler ( com.android.internal.os.SamplingProfilerIntegration.samplingProfilerDepth , threadSet ) ; com.android.internal.os.SamplingProfilerIntegration.samplingProfiler.start ( com.android.internal.os.SamplingProfilerIntegration.samplingProfilerMilliseconds ) ; com.android.internal.os.SamplingProfilerIntegration.startMillis = java.lang.System.currentTimeMillis ( ) ; }
protected void finalize ( ) { if ( ( ( mSelfObserver ) != null ) && ( ( mSelfObserverRegistered ) == true ) ) { mContentResolver.unregisterContentObserver ( mSelfObserver ) ; } }
public void waitToFinishRendering ( ) throws java.lang.InterruptedException { if ( ! ( android.graphics.cts.CameraGpuCtsActivity.nIsCameraReady ( mNativeRenderer ) ) ) { return ; } if ( ! ( mFinishedRendering.await ( 30 , java.util.concurrent.TimeUnit.SECONDS ) ) ) { throw new java.lang.IllegalStateException ( "Coudn't finish drawing frames!" ) ; } }
public java.lang.String getProvisionedStringValue ( int item ) throws com.android.ims.ImsException { java.lang.String ret = "Unknown" ; try { ret = miConfig.getProvisionedStringValue ( item ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getProvisionedStringValue()" , e , ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } if ( DBG ) android.telephony.Rlog.d ( com.android.ims.ImsConfig.TAG , ( ( ( "getProvisionedStringValue(): item = " + item ) + ", ret =" ) + ret ) ) ; return ret ; }
private static void registerDefaultProviders ( ) { java.security.Security.secprops.put ( "security.provider.1" , "org.conscrypt.OpenSSLProvider" ) ; java.security.Security.secprops.put ( "security.provider.2" , "org.apache.harmony.security.provider.cert.DRLCertFactory" ) ; java.security.Security.secprops.put ( "security.provider.3" , "org.bouncycastle.jce.provider.BouncyCastleProvider" ) ; java.security.Security.secprops.put ( "security.provider.4" , "org.apache.harmony.security.provider.crypto.CryptoProvider" ) ; java.security.Security.secprops.put ( "security.provider.5" , "org.conscrypt.JSSEProvider" ) ; }
public boolean matchesSafely ( java.util.EventObject item ) { return ( eventClass.isInstance ( item ) ) && ( eventHasSameSource ( item ) ) ; }
protected void sendSms ( java.lang.String text , android.app.PendingIntent sentIntent ) { com.android.voicemail.impl.VvmLog.v ( com.android.voicemail.impl.sms.OmtpMessageSender.TAG , java.lang.String.format ( "Sending sms '%s' to %s:%d" , text , destinationNumber , applicationPort ) ) ; com.android.voicemail.impl.TelephonyMangerCompat.sendVisualVoicemailSms ( context , phoneAccountHandle , destinationNumber , applicationPort , text , sentIntent ) ; }
private static android.net.Uri createDraftMmsMessage ( com.google.android.mms.pdu.PduPersister persister , com.google.android.mms.pdu.SendReq sendReq , com.android.mms.model.SlideshowModel slideshow ) { try { com.google.android.mms.pdu.PduBody pb = slideshow.toPduBody ( ) ; sendReq.setBody ( pb ) ; android.net.Uri res = persister.persist ( sendReq , Mms.Draft.CONTENT_URI ) ; slideshow.sync ( pb ) ; return res ; } catch ( com.google.android.mms.MmsException e ) { return null ; } }
private static org.objectweb.asm.tree.MethodNode getFirstRealMethod ( @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode ) { if ( ( classNode.methods ) != null ) { @ java.lang.SuppressWarnings ( value = "rawtypes" ) java.util.List methods = classNode.methods ; for ( java.lang.Object m : methods ) { org.objectweb.asm.tree.MethodNode method = ( ( org.objectweb.asm.tree.MethodNode ) ( m ) ) ; if ( ( method.name.charAt ( 0 ) ) != '<' ) { return method ; } } if ( ( classNode.methods.size ( ) ) > 0 ) { return ( ( org.objectweb.asm.tree.MethodNode ) ( classNode.methods.get ( 0 ) ) ) ; } } return null ; }
public void testDisabled ( ) throws org.json.JSONException { android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "reason" , WifiNanNative.NAN_STATUS_DE_FAILURE ) ; com.android.server.wifi.nan.WifiNanHalMock.callDisabled ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mNanStateManager ) . onNanDownNotification ( WifiNanNative.NAN_STATUS_DE_FAILURE ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNanStateManager ) ; }
private static void test_String_charAtExc2 ( ) { try { Main.test_String_charAtExc3 ( ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.StringIndexOutOfBoundsException expected ) { } }
void assertDisconnectReason ( final android.telecom.Connection connection , final java.lang.String disconnectReason ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return disconnectReason ; } @ java.lang.Override public java.lang.Object actual ( ) { return connection.getDisconnectCause ( ) . getReason ( ) ; } } , android.telecom.cts.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( "Connection should have been disconnected with reason: " + disconnectReason ) ) ; }
public void clearSslPreferences ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearSslPreferences ( ) ; } } ) ; return ; } mAwContents.clearSslPreferences ( ) ; }
public void createConnectionFailed ( java.lang.String callId , android.telecom.ConnectionRequest request , boolean isIncoming , android.telecom.Logging.Session.Info sessionInfo ) throws android.os.RemoteException { android.telecom.Log.i ( this , ( "createConnectionFailed --> " + callId ) ) ; if ( mConnectionById.containsKey ( callId ) ) { throw new java.lang.RuntimeException ( ( "Connection already exists: " + callId ) ) ; } }
public void testOnTearDown ( ) throws java.lang.Exception { org.easymock.EasyMock.expect ( mMockDevice.executeShellCommand ( org.easymock.EasyMock.eq ( "getenforce" ) ) ) . andReturn ( SELINUX_PERMISSIVE ) ; org.easymock.EasyMock.expect ( mMockDevice.executeShellCommand ( org.easymock.EasyMock.eq ( ( "setenforce " + ( SELINUX_PERMISSIVE ) ) ) ) ) . andReturn ( "" ) . times ( 1 ) ; org.easymock.EasyMock.replay ( mMockDevice ) ; mPreparer.setUp ( mMockDevice , mMockBuildInfo ) ; mPreparer.tearDown ( mMockDevice , mMockBuildInfo , null ) ; org.easymock.EasyMock.verify ( mMockDevice ) ; }
public void onReceivedLoginRequest ( java.lang.String realm , java.lang.String account , java.lang.String args ) { org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , ( "onReceivedLoginRequest=" + realm ) ) ; mWebViewClient.onReceivedLoginRequest ( mWebView , realm , account , args ) ; org.chromium.base.TraceEvent.end ( ) ; }
public void test_setInput$B ( ) { byte [ ] byteArray = new byte [ ] { 2 , 3 , 4 , 't' , 'y' , 'u' , 'e' , 'w' , 7 , 6 , 5 , 9 } ; java.util.zip.Inflater inflate = new java.util.zip.Inflater ( ) ; inflate.setInput ( byteArray ) ; assertTrue ( "setInputB did not deliver any byte to the input buffer" , ( ( inflate.getRemaining ( ) ) != 0 ) ) ; }
public void onTargetChange ( ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData = mConfigComposite.onXmlModelLoaded ( ) ; if ( targetData != null ) { com.android.ide.common.layoutlib.LayoutLibrary layoutLib = targetData.getLayoutLibrary ( ) ; setClippingSupport ( layoutLib.supports ( Capability.UNBOUND_RENDERING ) ) ; } mConfigListener.onConfigurationChange ( ) ; }
protected boolean doCheckState ( ) { if ( ! ( super . doCheckState ( ) ) ) { setErrorMessage ( Messages.NDKPreferencePage_not_a_valid_directory ) ; return false ; } java.lang.String dirname = getTextControl ( ) . getText ( ) . trim ( ) ; if ( ! ( com.android.ide.eclipse.ndk.internal.NdkManager.isValidNdkLocation ( dirname ) ) ) { setErrorMessage ( Messages.NDKPreferencePage_not_a_valid_NDK_directory ) ; return false ; } return true ; }
public static java.lang.String getClientKeyType ( byte keyType ) { switch ( keyType ) { case NativeCrypto.TLS_CT_RSA_SIGN : return org.conscrypt.OpenSSLSocketImpl.KEY_TYPE_RSA ; case NativeCrypto.TLS_CT_DSS_SIGN : return org.conscrypt.OpenSSLSocketImpl.KEY_TYPE_DSA ; case NativeCrypto.TLS_CT_RSA_FIXED_DH : return org.conscrypt.OpenSSLSocketImpl.KEY_TYPE_DH_RSA ; case NativeCrypto.TLS_CT_DSS_FIXED_DH : return org.conscrypt.OpenSSLSocketImpl.KEY_TYPE_DH_DSA ; case NativeCrypto.TLS_CT_ECDSA_SIGN : return org.conscrypt.OpenSSLSocketImpl.KEY_TYPE_EC ; case NativeCrypto.TLS_CT_RSA_FIXED_ECDH : return org.conscrypt.OpenSSLSocketImpl.KEY_TYPE_EC_RSA ; case NativeCrypto.TLS_CT_ECDSA_FIXED_ECDH : return org.conscrypt.OpenSSLSocketImpl.KEY_TYPE_EC_EC ; default : return null ; } }
public void getIccCardStatus ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
public void setData ( com.android.ddmlib.IDevice device , com.android.ddmlib.RawImage image , com.android.hierarchyviewerlib.device.ViewNode viewNode ) { synchronized ( this ) { this . device = device ; this . image = image ; this . viewNode = viewNode ; this . crosshairLocation = new com.android.hierarchyviewerlib.models.PixelPerfectModel.Point ( ( ( image.width ) / 2 ) , ( ( image.height ) / 2 ) ) ; this . selected = null ; } notifyImageLoaded ( ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock jCatchBlock ) { com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = jCatchBlock.getSourceInfo ( ) ; com.android.jack.ir.ast.JLocalRef localRef = new com.android.jack.ir.ast.JLocalRef ( sourceInfo , jCatchBlock.getCatchVar ( ) ) ; com.android.jack.ir.ast.JAsgOperation assign = new com.android.jack.ir.ast.JAsgOperation ( sourceInfo , localRef , new com.android.jack.ir.ast.JExceptionRuntimeValue ( sourceInfo , ( ( com.android.jack.ir.ast.JClassOrInterface ) ( localRef.getType ( ) ) ) ) ) ; tr.append ( new com.android.jack.transformations.request.PrependStatement ( jCatchBlock , assign.makeStatement ( ) ) ) ; return super . visit ( jCatchBlock ) ; }
public static void cancelNotification ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull android.telecom.PhoneAccountHandle phoneAccountHandle ) { com.android.dialer.common.LogUtil.enterBlock ( "LegacyVoicemailNotifier.cancelNotification" ) ; com.android.dialer.common.Assert.checkArgument ( android.support.v4.os.BuildCompat.isAtLeastO ( ) ) ; com.android.dialer.common.Assert.isNotNull ( phoneAccountHandle ) ; com.android.dialer.notification.DialerNotificationManager.cancel ( context , com.android.dialer.app.calllog.LegacyVoicemailNotifier.getNotificationTag ( context , phoneAccountHandle ) , com.android.dialer.app.calllog.LegacyVoicemailNotifier.NOTIFICATION_ID ) ; }
public void testGetPath_ApiAndApiClassResourceSet ( ) { initializePsiClass ( "\"res1\"" , "\"res2\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.intellij.endpoints.validation.RestSignatureInspection inspection = new com.google.gct.intellij.endpoints.validation.RestSignatureInspection ( ) ; java.lang.String path = inspection.getPath ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "res2" , path ) ; }
private java.lang.String dumpEntry ( int offset ) { if ( com.android.tools.lint.checks.TypoLookup.DEBUG_SEARCH ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( int i = offset ; i < ( mData.length ) ; i ++ ) { if ( ( mData [ i ] ) == 0 ) { break ; } char c = ( ( char ) ( com.google.common.primitives.UnsignedBytes.toInt ( mData [ i ] ) ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } else { return "<disabled>" ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , long [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 8 ) ) ; }
public void testFilteredOutBuildType ( ) throws java.lang.Exception { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject ( com.android.build.gradle.model.AndroidProjectTest.FOLDER_TEST_REGULAR , "filteredOutBuildType" ) ; com.android.builder.model.AndroidProject model = projectData.model ; assertEquals ( "Variant Count" , 1 , model.getVariants ( ) . size ( ) ) ; com.android.builder.model.Variant variant = model.getVariants ( ) . iterator ( ) . next ( ) ; assertEquals ( "Variant name" , "release" , variant.getBuildType ( ) ) ; }
public static void onWebViewProviderChanged ( android.content.pm.PackageInfo packageInfo , java.lang.String cacheKey ) { synchronized ( android.webkit.WebViewZygote.sLock ) { android.webkit.WebViewZygote.sPackage = packageInfo ; android.webkit.WebViewZygote.sPackageCacheKey = cacheKey ; if ( ! ( android.webkit.WebViewZygote.sMultiprocessEnabled ) ) { return ; } final java.lang.String serviceName = android.webkit.WebViewZygote.getServiceNameLocked ( ) ; android.webkit.WebViewZygote.sZygote = null ; if ( android.os.SystemService.isStopped ( serviceName ) ) { android.os.SystemService.start ( serviceName ) ; } else { android.os.SystemService.restart ( serviceName ) ; } android.webkit.WebViewZygote.sStartedService = true ; } }
protected boolean stop ( ) { if ( ( mHandler ) != null ) { mHandler.removeCallbacksAndMessages ( null ) ; android.os.Looper looper = mHandler.getLooper ( ) ; if ( looper != null ) { looper.quit ( ) ; } } cleanupApps ( ) ; return true ; }
public void testParse0 ( ) throws java.lang.Exception { android.text.format.Time t = new android.text.format.Time ( android.text.format.Time.TIMEZONE_UTC ) ; assertFalse ( t.parse ( "12345678T901234" ) ) ; assertTrue ( t.parse ( "20081013T160000Z" ) ) ; assertEquals ( 2008 , t.year ) ; assertEquals ( 9 , t.month ) ; assertEquals ( 13 , t.monthDay ) ; assertEquals ( 16 , t.hour ) ; assertEquals ( 0 , t.minute ) ; assertEquals ( 0 , t.second ) ; }
public static void write ( java.io.FileDescriptor fd , byte [ ] bytes , int byteOffset , int byteCount ) throws java.io.IOException { java.util.Arrays.checkOffsetAndCount ( bytes.length , byteOffset , byteCount ) ; if ( byteCount == 0 ) { return ; } try { while ( byteCount > 0 ) { int bytesWritten = Libcore.os.write ( fd , bytes , byteOffset , byteCount ) ; byteCount -= bytesWritten ; byteOffset += bytesWritten ; } } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } }
public java.util.List < android.bluetooth.BluetoothDevice > bluetoothGetConnectedDevicesOnProfile ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "profileId" , description = "profileId same as BluetoothProfile" ) java.lang.Integer profileId ) { android.bluetooth.BluetoothProfile profile = null ; switch ( profileId ) { case android.bluetooth.BluetoothProfile.A2DP_SINK : return mA2dpSinkProfile.bluetoothA2dpSinkGetConnectedDevices ( ) ; case android.bluetooth.BluetoothProfile.HEADSET_CLIENT : return mHfpClientProfile.bluetoothHfpClientGetConnectedDevices ( ) ; case android.bluetooth.BluetoothProfile.PBAP_CLIENT : return mPbapClientProfile.bluetoothPbapClientGetConnectedDevices ( ) ; default : com.googlecode.android_scripting.Log.w ( ( ( "Profile id " + profileId ) + " is not yet supported." ) ) ; return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; } }
private static void testAllClassesQuery ( com.android.tools.perflib.heap.State state ) { java.util.Map < java.lang.String , java.util.Set < com.android.tools.perflib.heap.ClassObj > > allClasses = com.android.tools.perflib.heap.Queries.allClasses ( state ) ; for ( java.lang.String thePackage : allClasses.keySet ( ) ) { java.lang.System.out.println ( ( "------------------- " + thePackage ) ) ; java.util.Set < com.android.tools.perflib.heap.ClassObj > classes = allClasses.get ( thePackage ) ; for ( com.android.tools.perflib.heap.ClassObj theClass : classes ) { java.lang.System.out.println ( ( " " + ( theClass.mClassName ) ) ) ; } } }
private void readProgramHeaders ( long phOffset , int phNumber , int phSize ) throws java.io.IOException { for ( int i = 0 ; i < phNumber ; i ++ ) { final long baseOffset = phOffset + ( i * phSize ) ; final long type = readWord ( baseOffset ) ; if ( type == ( android.security.cts.ReadElf.PT_LOAD ) ) { final long virtAddress = readWord ( ( baseOffset + ( ( mHalfWordSize ) * ( android.security.cts.ReadElf.PHOFF_VADDR ) ) ) ) ; if ( virtAddress == 0 ) { mIsPIE = true ; } } } }
public static com.android.jack.dx.rop.code.SourcePosition getSourcePosition ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode stmt ) { if ( ( stmt.getSourceInfo ( ) ) != ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return new com.android.jack.dx.rop.code.SourcePosition ( new com.android.jack.dx.rop.cst.CstString ( stmt.getSourceInfo ( ) . getFileName ( ) ) , ( - 1 ) , stmt.getSourceInfo ( ) . getStartLine ( ) ) ; } else { return new com.android.jack.dx.rop.code.SourcePosition ( null , ( - 1 ) , ( - 1 ) ) ; } }
public void test_unmodifiableList_sort ( ) { try { java.util.Collections.unmodifiableList ( new java.util.ArrayList < > ( ) ) . sort ( ( k1 , k2 ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } try { java.util.ArrayList l = new java.util.ArrayList ( ) ; l.add ( 1 ) ; l.add ( 2 ) ; java.util.Collections.unmodifiableList ( l ) . sort ( ( k1 , k2 ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
private void createPropertySheet ( ) { mPropertySheetComposite = new org.eclipse.wb.internal.core.editor.structure.PageSiteComposite ( mControl , org.eclipse.swt.SWT.BORDER ) ; mPropertySheetComposite.setTitleText ( "Properties" ) ; mPropertySheetComposite.setTitleImage ( com.android.ide.eclipse.adt.internal.editors.IconFactory.getInstance ( ) . getIcon ( "properties_view" ) ) ; mPropertySheet = new com.android.ide.eclipse.adt.internal.editors.layout.properties.PropertySheetPage ( mGraphicalEditorPart ) ; mPropertySheetComposite.setPage ( mPropertySheet ) ; }
public com.android.jack.ir.ast.JParameterRef exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) { assert ( sourceInfo ) != null ; assert ( localId ) != null ; com.android.jack.ir.ast.JParameterRef jRef = new com.android.jack.ir.ast.JParameterRef ( sourceInfo.exportAsJast ( exportSession ) , com.android.jack.ir.ast.JParameterUnresolved.INSTANCE ) ; exportSession.getParameterResolver ( ) . addLink ( localId , new com.android.jack.jayce.linker.ParameterRefLinker ( jRef ) ) ; return jRef ; }
public void test_bind_unresolvedAddress ( ) throws java.io.IOException { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open ( ) ; try { dc.bind ( new java.net.InetSocketAddress ( "unresolvedname" , 31415 ) ) ; fail ( ) ; } catch ( java.nio.channels.UnresolvedAddressException expected ) { } assertNull ( dc.getLocalAddress ( ) ) ; assertTrue ( dc.isOpen ( ) ) ; assertFalse ( dc.isConnected ( ) ) ; dc.close ( ) ; }
private static dalvik.system.DexPathList.Element [ ] makePathElements ( java.util.List < java.io.File > files , java.util.List < java.io.IOException > suppressedExceptions , java.lang.ClassLoader loader ) { return dalvik.system.DexPathList.makeElements ( files , null , suppressedExceptions , true , loader ) ; }
public synchronized java.util.Iterator < java.lang.Object > iterator ( ) { return com.google.common.collect.Iterators.forArray ( java.lang.Integer.valueOf ( getCount ( ) ) , java.lang.Double.valueOf ( getTotal ( ) ) , java.lang.Double.valueOf ( getMin ( ) ) , java.lang.Double.valueOf ( getAverage ( ) ) , java.lang.Double.valueOf ( getMax ( ) ) , getMinObject ( ) , getMaxObject ( ) ) ; }
public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ( mVenvDir ) != null ) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete ( mVenvDir.toPath ( ) ) ; com.android.tradefed.log.LogUtil.CLog.i ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; } catch ( java.io.IOException exception ) { com.android.tradefed.log.LogUtil.CLog.e ( "Failed to delete %s: %s" , mVenvDir , exception ) ; } mVenvDir = null ; } }
public boolean isTtySupported ( java.lang.String callingPackage ) { try { com.android.server.telecom.Log.startSession ( "TSI.iTS" ) ; if ( ! ( canReadPhoneState ( callingPackage , "hasVoiceMailNumber" ) ) ) { return false ; } synchronized ( mLock ) { return mCallsManager.isTtySupported ( ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
public void readContent ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl in ) throws java.io.IOException { modifiers = in.readInt ( ) ; type = in.readId ( ) ; name = in.readId ( ) ; initialValue = in.readNode ( com.android.jack.jayce.v0002.nodes.NLiteral.class ) ; ordinal = in.readInt ( ) ; annotations = in.readNodes ( com.android.jack.jayce.v0002.nodes.NAnnotationLiteral.class ) ; markers = in.readNodes ( com.android.jack.jayce.v0002.nodes.NMarker.class ) ; }
public void onConfigurationChanged ( final android.content.res.Configuration newConfig ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onConfigurationChanged ( newConfig ) ; } } ) ; return ; } mAwContents.onConfigurationChanged ( newConfig ) ; }
static < D extends java.lang.reflect.GenericDeclaration > java.lang.reflect.TypeVariable < D > newTypeVariable ( D declaration , java.lang.String name , java.lang.reflect.Type ... bounds ) { return new com.google.common.reflect.Types.TypeVariableImpl < D > ( declaration , name , ( ( bounds.length ) == 0 ? new java.lang.reflect.Type [ ] { java.lang.Object.class } : bounds ) ) ; }
private void emitTypeIndex ( com.android.jack.dx.rop.cst.CstType type ) throws java.io.IOException { if ( ( type == null ) || ( ( file ) == null ) ) { output.writeUleb128 ( 0 ) ; } else { output.writeUleb128 ( ( 1 + ( file.getTypeIds ( ) . indexOf ( type ) ) ) ) ; } if ( com.android.jack.dx.dex.file.DebugInfoEncoder.DEBUG ) { java.lang.System.err.printf ( "Emit type %s\n" , ( type == null ? "<null>" : type.toHuman ( ) ) ) ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { updateLaunchConfigurationDialog ( ) ; boolean auto = mAutoTargetButton.getSelection ( ) ; mPreferredAvdSelector.setEnabled ( auto ) ; mPreferredAvdLabel.setEnabled ( auto ) ; boolean all = mAllDevicesTargetButton.getSelection ( ) ; mDeviceTypeCombo.setEnabled ( all ) ; }
private void copy1DRangeToUnchecked ( int off , int count , java.lang.Object array , android.renderscript.Element.DataType dt , int arrayLen ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeToUnchecked" ) ; final int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( arrayLen * ( dt.mSize ) ) , dataSize ) ; mRS.nAllocationRead1D ( getIDSafe ( ) , off , mSelectedLOD , count , array , dataSize , dt ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private static libcore.tzdata.update2.tools.TimeZoneBundleBuilder createValidTimeZoneBundleBuilder ( java.lang.String rulesVersion , int revision ) throws java.lang.Exception { byte [ ] bionicTzData = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTzData ( rulesVersion ) ; byte [ ] icuData = new byte [ ] { 'a' } ; libcore.tzdata.update2.BundleVersion bundleVersion = new libcore.tzdata.update2.BundleVersion ( BundleVersion.CURRENT_FORMAT_MAJOR_VERSION , BundleVersion.CURRENT_FORMAT_MINOR_VERSION , rulesVersion , revision ) ; return new libcore.tzdata.update2.tools.TimeZoneBundleBuilder ( ) . setBundleVersion ( bundleVersion ) . setTzData ( bionicTzData ) . setIcuData ( icuData ) ; }
private boolean processRefresh ( com.android.internal.telephony.gsm.stk.CommandDetails cmdDet , java.util.List < com.android.internal.telephony.gsm.stk.ComprehensionTlv > ctlvs ) { com.android.internal.telephony.gsm.stk.StkLog.d ( this , "process Refresh" ) ; switch ( cmdDet.commandQualifier ) { case com.android.internal.telephony.gsm.stk.CommandParamsFactory.REFRESH_NAA_INIT_AND_FULL_FILE_CHANGE : case com.android.internal.telephony.gsm.stk.CommandParamsFactory.REFRESH_NAA_INIT_AND_FILE_CHANGE : case com.android.internal.telephony.gsm.stk.CommandParamsFactory.REFRESH_NAA_INIT : case com.android.internal.telephony.gsm.stk.CommandParamsFactory.REFRESH_UICC_RESET : mCmdParams = new com.android.internal.telephony.gsm.stk.DisplayTextParams ( cmdDet , null ) ; break ; } return false ; }
public void deleteOdex ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.deleteOdex ( apkPath , instructionSet , outputPath ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
protected void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; com.android.server.telecom.Log.d ( this , "Settings: onCreate()..." ) ; com.android.server.telecom.QuickResponseUtils.maybeMigrateLegacyQuickResponses ( this ) ; getPreferenceManager ( ) . setSharedPreferencesName ( QuickResponseUtils.SHARED_PREFERENCES_NAME ) ; mPrefs = getPreferenceManager ( ) . getSharedPreferences ( ) ; }
public static void setPrivateDataDirectorySuffix ( java.lang.String suffix , android.content.Context context ) { if ( ! ( org.chromium.base.PathUtils.sInitializationStarted.getAndSet ( true ) ) ) { org.chromium.base.PathUtils.sDataDirectorySuffix = suffix ; org.chromium.base.PathUtils.sDataDirectoryAppContext = context.getApplicationContext ( ) ; org.chromium.base.PathUtils.sDirPathFetchTask = new android.os.AsyncTask < java.lang.Void , java.lang.Void , java.lang.String [ ] > ( ) { @ java.lang.Override protected java.lang.String [ ] doInBackground ( java.lang.Void ... unused ) { return org.chromium.base.PathUtils.setPrivateDataDirectorySuffixInternal ( ) ; } } . executeOnExecutor ( AsyncTask.THREAD_POOL_EXECUTOR ) ; } }
public void cdmaSubscriptionSourceChanged ( int indicationType , int var2 ) { }
public void onOrientationChanged ( int rotation ) { if ( rotation == ( android.view.OrientationEventListener.ORIENTATION_UNKNOWN ) ) { return ; } final int orientation = toScreenOrientation ( rotation ) ; if ( ( orientation != ( com.android.incallui.InCallOrientationEventListener.SCREEN_ORIENTATION_UNKNOWN ) ) && ( ( com.android.incallui.InCallOrientationEventListener.sCurrentOrientation ) != orientation ) ) { com.android.dialer.common.LogUtil.i ( "InCallOrientationEventListener.onOrientationChanged" , "orientation: %d -> %d" , com.android.incallui.InCallOrientationEventListener.sCurrentOrientation , orientation ) ; com.android.incallui.InCallOrientationEventListener.sCurrentOrientation = orientation ; com.android.incallui.InCallPresenter.getInstance ( ) . onDeviceOrientationChange ( com.android.incallui.InCallOrientationEventListener.sCurrentOrientation ) ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mDevice = getDevice ( ) ; sepolicyAnalyze = copyResourceToTempFile ( "/sepolicy-analyze" ) ; sepolicyAnalyze.setExecutable ( true ) ; devicePolicyFile = java.io.File.createTempFile ( "sepolicy" , ".tmp" ) ; devicePolicyFile.deleteOnExit ( ) ; mDevice.executeAdbCommand ( "pull" , "/sys/fs/selinux/policy" , devicePolicyFile.getAbsolutePath ( ) ) ; }
protected void init ( ) { android.icu.dev.test.util.LocaleAliasCollationTest.available = android.icu.util.ULocale.getAvailableLocales ( ) ; for ( int i = 0 ; i < ( android.icu.dev.test.util.LocaleAliasCollationTest.available.length ) ; i ++ ) { availableMap.put ( android.icu.dev.test.util.LocaleAliasCollationTest.available [ i ] . toString ( ) , "" ) ; } }
public boolean isValidNumberForRegion ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.lang.String regionCode ) { int countryCode = number.getCountryCode ( ) ; com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = getMetadataForRegionOrCallingCode ( countryCode , regionCode ) ; if ( ( metadata == null ) || ( ( ! ( com.google.i18n.phonenumbers.PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY.equals ( regionCode ) ) ) && ( countryCode != ( getCountryCodeForValidRegion ( regionCode ) ) ) ) ) { return false ; } java.lang.String nationalSignificantNumber = getNationalSignificantNumber ( number ) ; return ( getNumberTypeHelper ( nationalSignificantNumber , metadata ) ) != ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.UNKNOWN ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; org.chromium.base.ContextUtils.initApplicationContext ( getInstrumentation ( ) . getTargetContext ( ) . getApplicationContext ( ) ) ; org.chromium.base.library_loader.LibraryLoader.get ( LibraryProcessType.PROCESS_BROWSER ) . ensureInitialized ( ) ; nativeInit ( ) ; mTestEnvironmentPointer = nativeSetupTestEnvironment ( ) ; }
protected void printProblem ( @ javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel , @ javax.annotation.Nonnull java.lang.String message , @ javax.annotation.CheckForNull java.lang.String fileName , int startLine , int endLine , int startColumn , int endColumn ) { if ( problemLevel.isVisibleWith ( verbosityLevel ) ) { printFilteredProblem ( problemLevel , message , fileName , startLine , endLine , startColumn , endColumn ) ; } }
public void checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType ) throws java.security.cert.CertificateException { checkTrusted ( chain , authType , null , false ) ; }
protected com.android.jack.ir.ast.JArrayType getArrayType ( @ javax.annotation.Nonnull java.lang.String typeName ) throws com.android.jack.ir.ast.JTypeLookupException { int typeNameLength = typeName.length ( ) ; assert ( typeNameLength > 0 ) && ( ( typeName.charAt ( 0 ) ) == '[' ) ; int dim = 0 ; do { dim ++ ; assert dim < typeNameLength ; } while ( ( typeName.charAt ( dim ) ) == '[' ) ; return getArrayType ( getType ( typeName.substring ( dim ) ) , dim ) ; }
public void destroy ( ) { synchronized ( exitValueMutex ) { if ( ( exitValue ) == null ) { try { Libcore.os.kill ( pid , java.lang.SIGKILL ) ; } catch ( libcore.io.ErrnoException e ) { java.lang.System.logI ( ( "Failed to destroy process " + ( pid ) ) , e ) ; } } } libcore.io.IoUtils.closeQuietly ( inputStream ) ; libcore.io.IoUtils.closeQuietly ( errorStream ) ; libcore.io.IoUtils.closeQuietly ( outputStream ) ; }
static boolean isValidSniHostname ( java.lang.String sniHostname ) { if ( sniHostname == null ) { return false ; } return ( ( sniHostname.indexOf ( '.' ) ) != ( - 1 ) ) && ( ! ( org.conscrypt.Platform.isLiteralIpAddress ( sniHostname ) ) ) ; }
public com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor getBaseViewDescriptor ( ) { if ( ( mBaseViewDescriptor ) == null ) { for ( com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc : mViewDescriptors ) { if ( desc instanceof com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ) { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor viewDesc = ( ( com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ) ( desc ) ) ; if ( SdkConstants.CLASS_VIEW.equals ( viewDesc.getFullClassName ( ) ) ) { mBaseViewDescriptor = viewDesc ; break ; } } } } return mBaseViewDescriptor ; }
public void pullFile ( java.lang.String remoteFilepath , java.lang.String localFilename , com.android.ddmlib.SyncService.ISyncProgressMonitor monitor ) throws com.android.ddmlib.SyncException , com.android.ddmlib.TimeoutException , java.io.IOException { java.lang.Integer mode = readMode ( remoteFilepath ) ; if ( mode == null ) { } else if ( mode == 0 ) { throw new com.android.ddmlib.SyncException ( com.android.ddmlib.SyncException.SyncError.NO_REMOTE_OBJECT ) ; } monitor.start ( 0 ) ; doPullFile ( remoteFilepath , localFilename , monitor ) ; monitor.stop ( ) ; }
public void testMakeTimeZone_TooManyOffsets ( ) throws java.lang.Exception { int [ ] [ ] times = new int [ ] [ ] { new int [ ] { - 2000 , 255 } } ; int [ ] [ ] offsets = new int [ 257 ] [ ] ; java.util.Arrays.fill ( offsets , new int [ 2 ] ) ; offsets [ 255 ] = new int [ ] { 3600 , 0 } ; try { createZoneInfo ( times , offsets ) ; fail ( "Did not detect too many offsets" ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public boolean process ( java.lang.String countryIso , java.lang.String defaultTimeZoneId , java.util.List < java.lang.String > countryTimeZoneIds , java.lang.String debugInfo ) { countryIso = libcore.util.TimeZoneFinder.normalizeCountryIso ( countryIso ) ; if ( ! ( countryCodeToMatch.equals ( countryIso ) ) ) { return libcore.util.TimeZoneFinder.CountryZonesProcessor.CONTINUE ; } validatedCountryTimeZones = libcore.util.TimeZoneFinder.createValidatedCountryTimeZones ( countryIso , defaultTimeZoneId , countryTimeZoneIds , debugInfo ) ; return libcore.util.TimeZoneFinder.CountryZonesProcessor.HALT ; }
public void onGeolocationPermissionsShowPrompt ( java.lang.String origin , android.webkit.GeolocationPermissions.Callback callback ) { org.chromium.base.TraceEvent.begin ( ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onGeolocationPermissionsShowPrompt" ) ; mWebChromeClient.onGeolocationPermissionsShowPrompt ( origin , callback ) ; } org.chromium.base.TraceEvent.end ( ) ; }
public void run ( ) { try { org.apache.http.HttpResponse response = mServer.getResponse ( mRequest ) ; mConnection.sendResponseHeader ( response ) ; mConnection.sendResponseEntity ( response ) ; mConnection.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( android.webkit.cts.CtsTestServer.TAG , "Error handling request:" , e ) ; } }
public void hangupWaitingOrBackground ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; mMetrics.writeRilHangup ( mInstanceId , rr.mSerial , ( - 1 ) ) ; send ( rr ) ; }
public void testE4 ( ) { dot.junit.opcodes.aput_object.d.T_aput_object_4 t = new dot.junit.opcodes.aput_object.d.T_aput_object_4 ( ) ; java.lang.String [ ] arr = new java.lang.String [ 2 ] ; try { t.run ( arr , 0 , t ) ; fail ( "expected ArrayStoreException" ) ; } catch ( java.lang.ArrayStoreException aie ) { } }
public boolean execute ( com.android.server.NativeDaemonConnector.Command cmd ) { if ( com.android.server.NsdService.DBG ) { android.util.Slog.d ( com.android.server.NsdService.TAG , cmd.toString ( ) ) ; } try { mNativeConnector.execute ( cmd ) ; } catch ( com.android.server.NativeDaemonConnectorException e ) { android.util.Slog.e ( com.android.server.NsdService.TAG , ( "Failed to execute " + cmd ) , e ) ; return false ; } return true ; }
protected void onScrollChanged ( int l , int t , int oldl , int oldt ) { if ( ( t == 0 ) || ( t >= ( mBottomY ) ) ) { if ( ( mMediaController ) != null ) { mMediaController.show ( ) ; } } }
private com.android.jack.ir.ast.JFieldId getOrCreateAssertionstatusField ( @ javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest request ) { try { com.android.jack.ir.ast.JFieldId id = currentType.getFieldId ( com.android.jack.transformations.AssertionTransformer.Visitor.ASSERTION_FIELD_NAME , JPrimitiveTypeEnum.BOOLEAN.getType ( ) , FieldKind.STATIC ) ; com.android.jack.ir.ast.JField field = id.getField ( ) ; assert field != null ; if ( field.getEnclosingType ( ) . isSameType ( currentType ) ) { return id ; } } catch ( com.android.jack.lookup.JLookupException e ) { } return addAssertionStatusToType ( currentType , request ) ; }
public boolean retainAll ( final java.util.Collection < ? > c ) { com.google.common.base.Preconditions.checkNotNull ( c ) ; com.google.common.base.Predicate < java.util.Map.Entry < R , V > > predicate = new com.google.common.base.Predicate < java.util.Map.Entry < R , V > > ( ) { @ java.lang.Override public boolean apply ( java.util.Map.Entry < R , V > entry ) { return ! ( c.contains ( entry.getKey ( ) ) ) ; } } ; return removePredicate ( predicate ) ; }
private void checkInputFile ( java.io.File file ) throws com.android.sdklib.build.ApkBuilder.ApkCreationException { if ( file.isDirectory ( ) ) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException ( "%s is a directory!" , file ) ; } if ( file.exists ( ) ) { if ( ( file.canRead ( ) ) == false ) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException ( "Cannot read %s" , file ) ; } } else { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException ( "%s does not exist" , file ) ; } }
private void onApplicationFieldModified ( ) { if ( ! ( mInternalApplicationNameUpdate ) ) { mApplicationNameModifiedByUser = true ; if ( ! ( mActivityNameModifiedByUser ) ) { java.lang.String name = com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( mApplicationNameField.getText ( ) ) ; try { mInternalActivityNameUpdate = true ; mActivityNameField.setText ( ( name + ( com.android.ide.eclipse.adt.internal.wizards.newproject.NewProjectCreationPage.ACTIVITY_NAME_SUFFIX ) ) ) ; } finally { mInternalActivityNameUpdate = false ; } } } }
private static android.view.KeyEvent newKeyEvent ( long downTime , long eventTime , int action , int keyCode , int metaState ) { android.view.KeyEvent event = new android.view.KeyEvent ( downTime , eventTime , action , keyCode , 0 , metaState ) ; event.setSource ( InputDevice.SOURCE_KEYBOARD ) ; return event ; }
private com.android.server.wifi.NetworkUpdateResult verifyAddEphemeralNetworkToWifiConfigManager ( android.net.wifi.WifiConfiguration configuration ) { com.android.server.wifi.NetworkUpdateResult result = addNetworkToWifiConfigManager ( configuration ) ; assertTrue ( ( ( result.getNetworkId ( ) ) != ( android.net.wifi.WifiConfiguration.INVALID_NETWORK_ID ) ) ) ; assertTrue ( result.isNewNetwork ( ) ) ; assertTrue ( result.hasIpChanged ( ) ) ; assertTrue ( result.hasProxyChanged ( ) ) ; verifyNetworkAddBroadcast ( configuration ) ; verifyNetworkNotInConfigStoreData ( configuration ) ; return result ; }
public V remove ( java.lang.Object key ) { int hash = java.util.concurrent.ConcurrentHashMap.hash ( key.hashCode ( ) ) ; return segmentFor ( hash ) . remove ( key , hash , null ) ; }
public void setUiTTYMode ( android.content.Context context , int uiTtyMode , android.os.Message onComplete ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { mImsServiceProxy.setUiTTYMode ( uiTtyMode , onComplete ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "setTTYMode()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } if ( ! ( com.android.ims.ImsManager.getBooleanCarrierConfig ( context , CarrierConfigManager.KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL ) ) ) { setAdvanced4GMode ( ( ( uiTtyMode == ( android.telecom.TelecomManager.TTY_MODE_OFF ) ) && ( com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser ( context ) ) ) ) ; } }
public void shutdown ( ) { for ( android.content.BroadcastReceiver receiver : listeningDevices.values ( ) ) { mService.unregisterReceiver ( receiver ) ; } listeningDevices.clear ( ) ; mService.unregisterReceiver ( mPairingHelper ) ; }
private boolean isVerificationEnabled ( ) { return ( android.provider.Settings.Secure.getInt ( mContext.getContentResolver ( ) , android.provider.Settings.Secure.PACKAGE_VERIFIER_ENABLE , ( com.android.server.pm.PackageManagerService.DEFAULT_VERIFY_ENABLE ? 1 : 0 ) ) ) == 1 ? true : false ; }
private int getPhoneTypeFromNetworkType ( int phoneId ) { java.lang.String mode = android.telephony.TelephonyManager.getTelephonyProperty ( phoneId , "ro.telephony.default_network" , null ) ; if ( mode != null ) { return android.telephony.TelephonyManager.getPhoneType ( java.lang.Integer.parseInt ( mode ) ) ; } return android.telephony.TelephonyManager.PHONE_TYPE_NONE ; }
public static double nextUp ( double d ) { if ( ( sun.misc.FpUtils.isNaN ( d ) ) || ( d == ( java.lang.Double.POSITIVE_INFINITY ) ) ) return d ; else { d += 0.0 ; return java.lang.Double.longBitsToDouble ( ( ( java.lang.Double.doubleToRawLongBits ( d ) ) + ( d >= 0.0 ? + 1L : - 1L ) ) ) ; } }
private void onConnectionStateChanged ( int state , int peer_feat , int chld_feat , byte [ ] address ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CONNECTION_STATE_CHANGED ) ; event.valueInt = state ; event.valueInt2 = peer_feat ; event.valueInt3 = chld_feat ; event.device = getDevice ( address ) ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType == ( com.android.ide.common.api.InsertType.CREATE ) ) { java.lang.String matchParent = getFillParentValueName ( ) ; node.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , matchParent ) ; node.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT , matchParent ) ; } }
public static void setSyncAutomatically ( android.accounts.Account account , java.lang.String authority , boolean sync ) { try { android.content.ContentResolver.getContentService ( ) . setSyncAutomatically ( account , authority , sync ) ; } catch ( android.os.RemoteException e ) { } }
private boolean isNetworkInConfigStoreData ( android.net.wifi.WifiConfiguration configuration , com.android.server.wifi.WifiConfigStoreData storeData ) { boolean foundNetworkInStoreData = false ; for ( android.net.wifi.WifiConfiguration retrievedConfig : storeData.getConfigurations ( ) ) { if ( retrievedConfig.configKey ( ) . equals ( configuration.configKey ( ) ) ) { foundNetworkInStoreData = true ; break ; } } return foundNetworkInStoreData ; }
public java.util.Set < java.lang.String > getApplicableFilters ( @ com.android.annotations.NonNull java.util.Set < java.lang.String > allFilters ) { java.util.Set < java.lang.String > list = super . getApplicableFilters ( allFilters ) ; if ( ( isEnable ( ) ) && ( universalApk ) ) { list.add ( com.android.build.SplitOutput.NO_FILTER ) ; } return list ; }
public java.util.Set < java.lang.String > getDensityList ( ) { com.android.resources.Density [ ] values = com.android.resources.Density.values ( ) ; java.util.Set < java.lang.String > fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize ( ( ( values.length ) - 1 ) ) ; for ( com.android.resources.Density value : values ) { if ( value != ( com.android.resources.Density.NODPI ) ) { fullList.add ( value.getResourceValue ( ) ) ; } } return density.computeList ( fullList ) ; }
public void wifiNanSendMessage ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "sessionId" , description = "The session ID returned when session" + " was created using publish or subscribe" ) java.lang.Integer sessionId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "peerId" , description = "The ID of the peer being communicated " + "with. Obtained from a previous message or match session." ) java.lang.Integer peerId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "message" ) java.lang.String message , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "messageId" , description = "Arbitrary handle used for " + "identification of the message in the message status callbacks" ) java.lang.Integer messageId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "retryCount" , description = "Number of retries (0 for none) if " + "transmission fails due to no ACK reception" ) java.lang.Integer retryCount ) throws android.os.RemoteException { android.net.wifi.nan.WifiNanDiscoveryBaseSession session = mSessions.get ( sessionId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling wifiNanSendMessage before session (session ID " + sessionId ) + " is ready" ) ) ; } byte [ ] bytes = message.getBytes ( ) ; session.sendMessage ( peerId , bytes , messageId , retryCount ) ; }
public void testAesCbcHmacMd5Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public void updateFocusedWindow ( com.android.ddmlib.IDevice device , int focusedWindow ) { java.lang.Integer oldValue = null ; synchronized ( mDeviceMap ) { oldValue = mFocusedWindowHashes.put ( device , new java.lang.Integer ( focusedWindow ) ) ; } if ( ( oldValue == null ) || ( ( oldValue != null ) && ( ( oldValue.intValue ( ) ) != focusedWindow ) ) ) { notifyFocusChanged ( device ) ; } }
public void getOutgoingCallerIdDisplay ( android.os.Message onComplete ) { if ( isPhoneTypeGsm ( ) ) { com.android.internal.telephony.Phone imsPhone = mImsPhone ; if ( ( imsPhone != null ) && ( ( imsPhone.getServiceState ( ) . getState ( ) ) == ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) ) { imsPhone.getOutgoingCallerIdDisplay ( onComplete ) ; return ; } mCi.getCLIR ( onComplete ) ; } else { loge ( "getOutgoingCallerIdDisplay: not possible in CDMA" ) ; } }
private java.lang.Object getListener ( int key ) { if ( key == ( android.net.nsd.NsdManager.INVALID_LISTENER_KEY ) ) return null ; synchronized ( mMapLock ) { return mListenerMap.get ( key ) ; } }
public final java.nio.IntBuffer asIntBuffer ( ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } int off = this . position ( ) ; int lim = this . limit ( ) ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : 0 ; int size = rem > > 2 ; return new java.nio.ByteBufferAsIntBuffer ( this , ( - 1 ) , 0 , size , size , off , order ( ) ) ; }
public void testClick ( ) { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.large_view ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.withText ( "large view" ) ) ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.large_view ) ) . perform ( android.support.test.espresso.action.ViewActions.click ( ) ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.large_view ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Ouch!!!" ) ) ) ; }
public java.lang.String iccTransmitApduLogicalChannel ( int channel , int cla , int instruction , int p1 , int p2 , int p3 , java.lang.String data ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccTransmitApduLogicalChannel ( channel , cla , instruction , p1 , p2 , p3 , data ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return "" ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( content ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( bytecode ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , ( ( lambdaFixer.getInternalName ( ) ) + ".class" ) , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , method = "setProgressDrawable" , args = { android.graphics.drawable.Drawable.class } ) } ) public void testAccessProgressDrawable ( ) { android.widget.ProgressBar progressBar = new android.widget.ProgressBar ( mContext , null , com.android.internal.R.attr.progressBarStyleHorizontal ) ; android.widget.cts.ProgressBarTest.MockDrawable mockDrawable = new android.widget.cts.ProgressBarTest.MockDrawable ( ) ; progressBar.setProgressDrawable ( mockDrawable ) ; assertSame ( mockDrawable , progressBar.getProgressDrawable ( ) ) ; assertFalse ( mockDrawable.hasCalledDraw ( ) ) ; progressBar.draw ( new android.graphics.Canvas ( ) ) ; assertTrue ( mockDrawable.hasCalledDraw ( ) ) ; progressBar.setProgressDrawable ( null ) ; assertNull ( progressBar.getProgressDrawable ( ) ) ; }
public int answer ( java.lang.String permName , int uid ) throws java.lang.Exception { if ( uid == ( com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID ) ) { return android.content.pm.PackageManager.PERMISSION_GRANTED ; } return android.content.pm.PackageManager.PERMISSION_DENIED ; }
public static java.nio.charset.Charset getCharset ( @ javax.annotation.Nonnull org.simpleframework.http.ContentType contentType ) throws java.nio.charset.IllegalCharsetNameException , java.nio.charset.UnsupportedCharsetException { assert com.android.jack.server.type.TextPlain.CONTENT_TYPE_NAME.equals ( contentType.getType ( ) ) : contentType.getType ( ) ; java.lang.String charsetName = contentType.getCharset ( ) ; java.nio.charset.Charset charset ; if ( charsetName == null ) { charset = com.android.jack.server.type.TextPlain.DEFAULT_CHARSET ; } else { charset = java.nio.charset.Charset.forName ( charsetName ) ; } return charset ; }
public boolean connect ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "connect()" ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.connect ( ) ; }
public boolean setWfdEnable ( boolean enable ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.enableWfd ( enable ) ; } else { return doBooleanCommand ( ( "SET wifi_display " + ( enable ? "1" : "0" ) ) ) ; } }
public java.util.Set < vogar.tasks.Task > installTasks ( ) { java.util.Set < vogar.tasks.Task > result = new java.util.HashSet < vogar.tasks.Task > ( ) ; for ( java.io.File classpathElement : run.classpath.getElements ( ) ) { dexAndPush ( result , run.basenameOfJar ( classpathElement ) , classpathElement , null ) ; } return result ; }
private void setUpAndRegisterReceiver ( ) { if ( ( mReceiver ) != null ) { mContext.unregisterReceiver ( mReceiver ) ; } mReceiver = new android.assist.cts.AssistStructureTest.AssistStructureTestBroadcastReceiver ( ) ; android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( Utils.APP_3P_HASRESUMED ) ; filter.addAction ( Utils.ASSIST_RECEIVER_REGISTERED ) ; mContext.registerReceiver ( mReceiver , filter ) ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull final com.android.tools.lint.detector.api.JavaContext context ) { return new lombok.ast.ForwardingAstVisitor ( ) { @ java.lang.Override public boolean visitMethodDeclaration ( lombok.ast.MethodDeclaration node ) { com.android.tools.lint.client.api.JavaParser.ResolvedNode resolved = context.resolve ( node ) ; if ( resolved instanceof com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) { com.android.tools.lint.client.api.JavaParser.ResolvedMethod method = ( ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) ( resolved ) ) ; com.android.tools.lint.checks.CallSuperDetector.checkCallSuper ( context , node , method ) ; } return false ; } } ; }
public void accept ( int result ) { if ( result == ( android.app.Activity.RESULT_OK ) ) { logFail ( ) ; status = FAIL ; } else { if ( ( mNm.getEffectsSuppressor ( ) ) == null ) { status = PASS ; } else { logFail ( ) ; status = RETEST ; delay ( ) ; } } next ( ) ; }
public void controlResized ( org.eclipse.swt.events.ControlEvent e ) { super . controlResized ( e ) ; mHScale.setClientSize ( getClientArea ( ) . width ) ; mVScale.setClientSize ( getClientArea ( ) . height ) ; }
public boolean visitReturn ( lombok.ast.Return node ) { if ( ( node.astValue ( ) ) == ( mTarget ) ) { mFound = true ; } return super . visitReturn ( node ) ; }
public boolean updatePublish ( short transactionId , android.net.wifi.nan.PublishConfig config ) { if ( ! ( mIsPublishSession ) ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , "A SUBSCRIBE session is being used to publish" ) ; try { mCallback.onSessionConfigFail ( WifiNanDiscoverySessionCallback.REASON_OTHER ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , ( "updatePublish: RemoteException=" + e ) ) ; } return false ; } return com.android.server.wifi.nan.WifiNanNative.getInstance ( ) . publish ( transactionId , mPubSubId , config ) ; }
public final void testDefaultAttributeFilter ( ) { assertEquals ( "true" , BaseLayout.DEFAULT_ATTR_FILTER.replace ( "myuri" , "layout_alignRight" , "true" ) ) ; assertEquals ( null , BaseLayout.DEFAULT_ATTR_FILTER.replace ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , "layout_alignRight" , "true" ) ) ; assertEquals ( "true" , BaseLayout.DEFAULT_ATTR_FILTER.replace ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , "myproperty" , "true" ) ) ; }
public static int getClassFileVersion ( org.jetbrains.asm4.ClassReader reader ) { final com.intellij.openapi.util.Ref < java.lang.Integer > result = new com.intellij.openapi.util.Ref < java.lang.Integer > ( 0 ) ; reader.accept ( new org.jetbrains.asm4.ClassVisitor ( org.jetbrains.asm4.Opcodes.ASM4 ) { public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { result.set ( version ) ; } } , 0 ) ; return result.get ( ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/DetachedFromWindow.java:7: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/DetachedFromWindow.java:26: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" ) + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( ( "src/test/pkg/DetachedFromWindow.java.txt=>" + "src/test/pkg/DetachedFromWindow.java" ) ) ) ; }
public void setCallerDisplayName ( java.lang.String callId , java.lang.String callerDisplayName , int presentation ) { android.telecom.Log.startSession ( "CSW.sCDN" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setCallerDisplayName %s %s %d" , callId , callerDisplayName , presentation ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setCallerDisplayName ( callerDisplayName , presentation ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void copyFrom ( short [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
private int deleteCodeCacheDirsLI ( java.lang.String volumeUuid , java.lang.String packageName ) { int [ ] users = com.android.server.pm.PackageManagerService.sUserManager.getUserIds ( ) ; int res = 0 ; for ( int user : users ) { int resInner = mInstaller.deleteCodeCacheFiles ( volumeUuid , packageName , user ) ; if ( resInner < 0 ) { res = resInner ; } } return res ; }
public void testGetBundleVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.BundleVersion bundleVersion = new libcore.tzdata.update2.BundleVersion ( BundleVersion.FULL_BUNDLE_FORMAT_VERSION , "2016c" , "001" ) ; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try ( java.util.zip.ZipOutputStream zipOutputStream = new java.util.zip.ZipOutputStream ( baos ) ) { libcore.tzdata.update2.TimeZoneBundleTest.addZipEntry ( zipOutputStream , TimeZoneBundle.BUNDLE_VERSION_FILE_NAME , bundleVersion.getBytes ( ) ) ; } libcore.tzdata.update2.TimeZoneBundle bundle = new libcore.tzdata.update2.TimeZoneBundle ( baos.toByteArray ( ) ) ; assertEquals ( bundleVersion , bundle.getBundleVersion ( ) ) ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
boolean markChecked ( com.android.server.timezone.CheckToken checkToken , boolean succeeded ) { synchronized ( this ) { int optimisticLockId = checkToken.mOptimisticLockId ; int newOptimisticLockId = optimisticLockId + 1 ; int status = ( succeeded ) ? com.android.server.timezone.PackageStatus.CHECK_COMPLETED_SUCCESS : com.android.server.timezone.PackageStatus.CHECK_COMPLETED_FAILURE ; return writeStatusRow ( optimisticLockId , newOptimisticLockId , status , checkToken.mPackageVersions ) ; } }
public void getModemActivityInfo ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_GET_ACTIVITY_INFO , response ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) { riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; } send ( rr ) ; android.os.Message msg = mSender.obtainMessage ( com.android.internal.telephony.RIL.EVENT_BLOCKING_RESPONSE_TIMEOUT ) ; msg.obj = null ; msg.arg1 = rr.mSerial ; mSender.sendMessageDelayed ( msg , com.android.internal.telephony.RIL.DEFAULT_BLOCKING_MESSAGE_RESPONSE_TIMEOUT_MS ) ; }
private java.util.List < java.awt.Rectangle > getHorizontalRectangles ( java.awt.image.BufferedImage image , java.util.List < com.android.ninepatch.NinePatchChunk.Pair < java.lang.Integer > > leftPairs ) { java.util.List < java.awt.Rectangle > rectangles = new java.util.ArrayList < java.awt.Rectangle > ( ) ; for ( com.android.ninepatch.NinePatchChunk.Pair < java.lang.Integer > left : leftPairs ) { int y = left.mFirst ; int height = ( left.mSecond ) - ( left.mFirst ) ; rectangles.add ( new java.awt.Rectangle ( 1 , y , ( ( image.getWidth ( ) ) - 2 ) , height ) ) ; } return rectangles ; }
private boolean isRoamIndForHomeSystem ( java.lang.String roamInd ) { java.lang.String [ ] homeRoamIndicators = mPhone.getContext ( ) . getResources ( ) . getStringArray ( com.android.internal.R.array.config_cdma_home_system ) ; if ( homeRoamIndicators != null ) { for ( java.lang.String homeRoamInd : homeRoamIndicators ) { if ( homeRoamInd.equals ( roamInd ) ) { return true ; } } return false ; } return false ; }
public void addFieldAnnotations ( com.android.dx.rop.cst.CstFieldRef field , com.android.dx.rop.annotation.Annotations annotations ) { if ( ( fieldAnnotations ) == null ) { fieldAnnotations = new java.util.ArrayList < com.android.dx.dex.file.FieldAnnotationStruct > ( ) ; } fieldAnnotations.add ( new com.android.dx.dex.file.FieldAnnotationStruct ( field , new com.android.dx.dex.file.AnnotationSetItem ( annotations ) ) ) ; }
public void setup ( ) throws android.os.RemoteException { mFeature = new android.telephony.ims.internal.TestMmTelFeature ( ) ; mFeatureBinder = mFeature.getBinder ( ) ; mCapabilityCallback = org.mockito.Mockito.spy ( new android.telephony.ims.internal.feature.ImsFeature.CapabilityCallback ( ) ) ; mListener = org.mockito.Mockito.spy ( new android.telephony.ims.internal.feature.MmTelFeature.Listener ( ) ) ; mFeatureBinder.setListener ( mListener ) ; }
public static int EqualTrueRhs ( boolean arg ) { return arg != true ? 3 : 5 ; }
void createDefaultBuildTypes ( @ org.gradle.model.Path ( value = "android.buildTypes" ) org.gradle.model.collection.ManagedSet < com.android.build.gradle.managed.BuildType > buildTypes ) { buildTypes.create = $missing$ ; { it.name = com.android.builder.core.BuilderConstants.DEBUG ; it.setIsDebuggable ( true ) ; it.setIsEmbedMicroApp ( false ) ; } buildTypes.create = $missing$ ; it.name = com.android.builder.core.BuilderConstants.RELEASE ; }
public void testGetOpacity ( ) { android.graphics.drawable.Drawable d = mContext.getResources ( ) . getDrawable ( R.drawable.pass ) ; android.graphics.drawable.InsetDrawable insetDrawable = new android.graphics.drawable.InsetDrawable ( d , 0 ) ; assertEquals ( PixelFormat.OPAQUE , insetDrawable.getOpacity ( ) ) ; d = mContext.getResources ( ) . getDrawable ( R.drawable.testimage ) ; insetDrawable = new android.graphics.drawable.InsetDrawable ( d , 0 ) ; assertEquals ( PixelFormat.OPAQUE , insetDrawable.getOpacity ( ) ) ; }
void onTargetPackageRemoved ( @ android.annotation.NonNull final java.lang.String packageName , final int userId ) { if ( com.android.server.om.OverlayManagerService.DEBUG ) { android.util.Slog.d ( com.android.server.om.OverlayManagerService.TAG , ( ( ( "onTargetPackageRemoved packageName=" + packageName ) + " userId=" ) + userId ) ) ; } updateAllOverlaysForTarget ( packageName , userId , null ) ; }
public void testPackageOverridePackageFromFlavor ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilder ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; mFlavor.setPackageName ( "foo.bar" ) ; builder.setBuildVariant ( mMain , mFlavor , mDebug ) ; assertEquals ( "foo.bar" , builder.getPackageOverride ( "" ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.util.Log.d ( com.android.bluetooth.btservice.RemoteDevices.TAG , ( "Received intent: " + intent ) ) ; java.lang.String action = intent.getAction ( ) ; switch ( action ) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged ( intent ) ; break ; case android.bluetooth.BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT : onVendorSpecificHeadsetEvent ( intent ) ; break ; default : android.util.Log.w ( com.android.bluetooth.btservice.RemoteDevices.TAG , ( "Unhandled intent: " + intent ) ) ; break ; } }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; dataOut.writeBoolean ( myIsNormalized ) ; com.intellij.updater.Patch.writeMap ( dataOut , myWarnings ) ; com.intellij.updater.Patch.writeList ( dataOut , myDeleteFiles ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
private static WifiNanNative.Capabilities getCapabilities ( ) { com.android.server.wifi.nan.WifiNanNative.Capabilities cap = new com.android.server.wifi.nan.WifiNanNative.Capabilities ( ) ; cap.maxConcurrentNanClusters = 1 ; cap.maxPublishes = 2 ; cap.maxSubscribes = 2 ; cap.maxServiceNameLen = 255 ; cap.maxMatchFilterLen = 255 ; cap.maxTotalMatchFilterLen = 255 ; cap.maxServiceSpecificInfoLen = 255 ; cap.maxVsaDataLen = 255 ; cap.maxMeshDataLen = 255 ; cap.maxNdiInterfaces = 1 ; cap.maxNdpSessions = 1 ; cap.maxAppInfoLen = 255 ; cap.maxQueuedTransmitMessages = 6 ; return cap ; }
public void run ( ) { com.android.mms.data.ContactList recipients = ( isRecipientsEditorVisible ( ) ) ? mRecipientsEditor.constructContactsFromInput ( false ) : getRecipients ( ) ; if ( android.util.Log.isLoggable ( LogTag.APP , Log.VERBOSE ) ) { com.android.mms.ui.ComposeMessageActivity.log ( ( "[CMA] onUpdate contact updated: " + updated ) ) ; com.android.mms.ui.ComposeMessageActivity.log ( ( "[CMA] onUpdate recipients: " + recipients ) ) ; } updateTitle ( recipients ) ; this . mMsgListAdapter.notifyDataSetChanged ( ) ; if ( ( mRecipientsEditor ) != null ) { mRecipientsEditor.populate ( recipients ) ; } }
public void updatePublish ( @ android.annotation.NonNull android.net.wifi.nan.PublishConfig publishConfig ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanPublishSession.TAG , "updatePublish: called on terminated session" ) ; return ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanPublishSession.TAG , "updatePublish: called post GC on WifiNanManager" ) ; return ; } mgr.updatePublish ( mSessionId , publishConfig ) ; } }
public void dismissPendingDialogs ( ) { if ( ( mDialog ) != null ) { mDialog.dismiss ( ) ; mDialog = null ; } if ( ( mAnswerFragment ) != null ) { mAnswerFragment.dismissPendingDialogs ( ) ; } }
public int relayout ( android.view.IWindow window , android.view.WindowManager.LayoutParams attrs , int requestedWidth , int requestedHeight , int viewFlags , boolean insetsPending , android.graphics.Rect outFrame , android.graphics.Rect outContentInsets , android.graphics.Rect outVisibleInsets , android.view.Surface outSurface ) { return relayoutWindow ( this , window , attrs , requestedWidth , requestedHeight , viewFlags , insetsPending , outFrame , outContentInsets , outVisibleInsets , outSurface ) ; }
public int compare ( java.util.Map.Entry < java.lang.Long , com.android.tools.perflib.vmtrace.MethodInfo > o1 , java.util.Map.Entry < java.lang.Long , com.android.tools.perflib.vmtrace.MethodInfo > o2 ) { long diff = ( o2.getValue ( ) . getInclusiveTime ( thread , ClockType.THREAD ) ) - ( o1.getValue ( ) . getInclusiveTime ( thread , ClockType.THREAD ) ) ; return com.google.common.primitives.Ints.saturatedCast ( diff ) ; }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "connect(): not allowed for non-active user" ) ; return false ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; return false ; }
public void test_socket_accept_Blocking_Bound ( ) throws java.io.IOException { serverChannel.configureBlocking ( true ) ; java.net.ServerSocket gotSocket = serverChannel.socket ( ) ; gotSocket.bind ( null ) ; serverChannel.close ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw a ClosedChannelException" ) ; } catch ( java.nio.channels.ClosedChannelException e ) { } }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getClient" + ( mRemoteDevice ) ) ) ; if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "getClient(): not allowed for non-active user" ) ; return null ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ( mState ) == ( android.bluetooth.BluetoothPbap.STATE_DISCONNECTED ) ) { return null ; } return mRemoteDevice ; }
public void testConstructorDeclaredAnnotation ( ) throws java.lang.Exception { java.lang.Class < ? extends java.lang.annotation.Annotation > repeated = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Repeated.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorWithoutAnnotations ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationOddity ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationExplicitSingle ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotation ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; java.lang.Class < ? extends java.lang.annotation.Annotation > container = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Container.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorWithoutAnnotations ( ) , container , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationOddity ( ) , container , "@Container({@Repeated(2), @Repeated(3)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotationExplicitSingle ( ) , container , "@Container({@Repeated(1)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorMultipleAnnotation ( ) , container , "@Container({@Repeated(1), @Repeated(2)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedConstructorClass.getConstructorSingleAnnotation ( ) , container , null ) ; }
public void testUnocclude ( ) throws java.lang.Exception { if ( ! ( supportsKeyguard ( ) ) ) { return ; } gotoKeyguard ( ) ; launchActivity ( "ShowWhenLockedActivity" ) ; launchActivity ( "TestActivity" ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; mAmWmState.computeState ( mDevice , null ) ; assertEquals ( "Picked wrong transition" , android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_UNOCCLUDE , mAmWmState.getWmState ( ) . getLastTransition ( ) ) ; }
private void transformTries ( com.android.dx.io.DexBuffer.Section out , com.android.dx.io.Code [ ] tries , int [ ] catchHandlerOffsets ) { for ( com.android.dx.io.Code.Try tryItem : tries ) { out.writeInt ( tryItem.getStartAddress ( ) ) ; out.writeUnsignedShort ( tryItem.getInstructionCount ( ) ) ; out.writeUnsignedShort ( catchHandlerOffsets [ tryItem.getCatchHandlerIndex ( ) ] ) ; } }
public final void testPkgTypePlatformTool ( ) { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_PLATFORM_TOOLS ; assertFalse ( p.hasMajorRevision ( ) ) ; assertTrue ( p.hasFullRevision ( ) ) ; assertFalse ( p.hasAndroidVersion ( ) ) ; assertFalse ( p.hasPath ( ) ) ; assertFalse ( p.hasVendorId ( ) ) ; assertFalse ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
public void cancelMissedCallsNotification ( java.lang.String callingPackage ) { try { com.android.server.telecom.Log.startSession ( "TSI.cMCN" ) ; synchronized ( mLock ) { enforcePermissionOrPrivilegedDialer ( android.Manifest.permission.MODIFY_PHONE_STATE , callingPackage ) ; android.os.UserHandle userHandle = android.os.Binder.getCallingUserHandle ( ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { mCallsManager.getMissedCallNotifier ( ) . clearMissedCalls ( userHandle ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
public boolean isConnected ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "isConnected " + device ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return false ; return ( ( service.getState ( ) ) == ( android.bluetooth.BluetoothPbap.STATE_CONNECTED ) ) && ( service.getRemoteDevice ( ) . equals ( device ) ) ; }
public void exit ( ) { try { mBatteryStats.noteWifiScanStoppedFromSource ( mScanWorkSource ) ; } catch ( android.os.RemoteException e ) { loge ( e.toString ( ) ) ; } mWifiMetrics.incrementScanReturnEntry ( WifiMetricsProto.WifiLog.SCAN_UNKNOWN , mActiveScans.size ( ) ) ; sendOpFailedToAllAndClear ( mActiveScans , WifiScanner.REASON_UNSPECIFIED , "Scan was interrupted" ) ; }
private void agentDisconnect ( android.net.NetworkInfo networkInfo , android.net.NetworkAgent networkAgent ) { networkInfo.setIsAvailable ( false ) ; networkInfo.setDetailedState ( DetailedState.DISCONNECTED , null , null ) ; if ( networkAgent != null ) { networkAgent.sendNetworkInfo ( networkInfo ) ; } }
public void testInstall_withBadlyFormedAndroidRevision ( ) throws java.lang.Exception { java.lang.String invalidAndroidRevision = "A01" ; byte [ ] versionBytes = libcore.tzdata.update2.BundleVersion.getBytes ( BundleVersion.FULL_BUNDLE_FORMAT_VERSION , libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , invalidAndroidRevision ) ; libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes ( versionBytes ) ; assertFalse ( installer.install ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public void onMessageWaitingIndicatorChanged ( boolean visible ) { if ( com.android.phone.CallNotifier.VDBG ) log ( ( ( ( "onMessageWaitingIndicatorChanged(): " + ( this . mSubId ) ) + " " ) + visible ) ) ; mMWIStatus.put ( this . mSubId , visible ) ; updatePhoneStateListeners ( false ) ; }
void foo9 ( int [ ] array ) { for ( int i = 0 ; i < 10 ; i ++ ) { sum += array [ i ] ; } }
synchronized void nAllocationData1D ( long id , int off , int mip , int count , float [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
public void testAnnotationProcessorError005 ( ) throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper te = new com.android.jack.test.helper.ErrorTestHelper ( ) ; buildAnnotationRequiredByAnnotationProc ( te , new java.lang.Class < ? > [ ] { com.android.jack.errorhandling.annotationprocessor.SourceAnnotationTest.class , com.android.jack.errorhandling.annotationprocessor.SourceErrorAnnotationTest.class } ) ; com.android.jack.test.toolchain.AbstractTestTools.createFile ( te.getSourceFolder ( ) , "jack.incremental" , "A.java" , ( ( ( ( ( ( ( "package jack.incremental;\n" + "import " ) + ( com.android.jack.errorhandling.annotationprocessor.SourceAnnotationTest.class . getName ( ) ) ) + ";\n" ) + "@" ) + ( com.android.jack.errorhandling.annotationprocessor.SourceAnnotationTest.class . getSimpleName ( ) ) ) + "\n" ) + "public class A {}\n" ) ) ; com.android.jack.test.toolchain.JackApiToolchain jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackApiToolchain.class ) ; jackApiToolchain.setAnnotationProcessorClass ( com.android.jack.errorhandling.annotationprocessor.SourceAnnotationProcessor.class ) ; jackApiToolchain.setAnnotationProcessorOutDir ( te.getTestingFolder ( ) ) ; java.io.File dexOutput = te.getOutputDexFolder ( ) ; jackApiToolchain.srcToExe ( ( ( ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( jackApiToolchain.getDefaultBootClasspath ( ) ) ) + ( java.io.File.pathSeparator ) ) + ( te.getJackFolder ( ) ) ) , dexOutput , false , te.getSourceFolder ( ) ) ; org.jf.dexlib.DexFile dexFile = new org.jf.dexlib.DexFile ( new java.io.File ( dexOutput , jackApiToolchain.getBinaryFileName ( ) ) ) ; java.util.List < java.lang.String > sourceFileInDex = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.jf.dexlib.ClassDefItem classDef : dexFile.ClassDefsSection.getItems ( ) ) { sourceFileInDex.add ( classDef.getSourceFile ( ) . getStringValue ( ) ) ; } junit.framework.Assert.assertTrue ( sourceFileInDex.contains ( "ADuplicated.java" ) ) ; junit.framework.Assert.assertTrue ( sourceFileInDex.contains ( "A.java" ) ) ; }
public byte [ ] getOpaqueData ( ) { try { java.io.ByteArrayOutputStream byteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream stream = new java.io.ObjectOutputStream ( byteArrayOutputStream ) ; android.telephony.mbms.DownloadRequest.OpaqueDataContainer container = new android.telephony.mbms.DownloadRequest.OpaqueDataContainer ( serializedResultIntentForApp , version ) ; stream.writeObject ( container ) ; stream.flush ( ) ; return byteArrayOutputStream.toByteArray ( ) ; } catch ( java.io.IOException e ) { android.util.Log.e ( android.telephony.mbms.DownloadRequest.LOG_TAG , "Got IOException trying to serialize opaque data" ) ; return null ; } }
private static boolean isMethodOnFragmentClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.MethodInvocation call , @ com.android.annotations.NonNull java.lang.String fragmentClass , @ com.android.annotations.NonNull java.lang.String v4FragmentClass , boolean returnForUnresolved ) { com.android.tools.lint.client.api.JavaParser.ResolvedNode resolved = context.resolve ( call ) ; if ( resolved instanceof com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) { com.android.tools.lint.client.api.JavaParser.ResolvedClass containingClass = ( ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) ( resolved ) ) . getContainingClass ( ) ; return ( containingClass.isSubclassOf ( fragmentClass , false ) ) || ( containingClass.isSubclassOf ( v4FragmentClass , false ) ) ; } else if ( resolved == null ) { return returnForUnresolved ; } return false ; }
public void testFlagFExistingI ( ) { int iFlags = PackageManager.INSTALL_INTERNAL ; int rFlags = ( PackageManager.INSTALL_FORWARD_LOCK ) | ( PackageManager.INSTALL_REPLACE_EXISTING ) ; installFromRawResource ( "install.apk" , R.raw.install , iFlags , false , false , ( - 1 ) , ( - 1 ) ) ; installFromRawResource ( "install.apk" , R.raw.install , rFlags , true , false , ( - 1 ) , ( - 1 ) ) ; }
public void validateUserCredentialWithoutRealm ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential ( ) ; cred.userCredential.username = "username" ; cred.userCredential.password = "password" ; cred.userCredential.eapType = android.net.wifi.EAPConstants.EAP_TTLS ; cred.userCredential.nonEapInnerMethod = "MS-CHAP" ; cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0 ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public void onImsDisconnected ( com.android.ims.ImsReasonInfo imsReasonInfo ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "onImsDisconnected imsReasonInfo=" + imsReasonInfo ) ) ; resetImsCapabilities ( ) ; mPhone.setServiceState ( ServiceState.STATE_OUT_OF_SERVICE ) ; mPhone.setImsRegistered ( false ) ; mPhone.processDisconnectReason ( imsReasonInfo ) ; mMetrics.writeOnImsConnectionState ( mPhone.getPhoneId ( ) , ImsConnectionState.State.DISCONNECTED , imsReasonInfo ) ; }
private static java.lang.String getVersion ( java.lang.String prefix , java.lang.String jarName , java.lang.String defaultVersion ) { if ( jarName.matches ( ( prefix + "([\\d\\.]+)\\.jar" ) ) ) { return jarName.substring ( prefix.length ( ) , ( ( jarName.length ( ) ) - 4 ) ) ; } return defaultVersion ; }
void connect ( android.content.Context context ) { if ( ! ( mBound ) ) { android.content.Intent service = new android.content.Intent ( ) ; service.setComponent ( mComponentName ) ; mBound = context.bindServiceAsUser ( service , this , ( ( android.content.Context.BIND_AUTO_CREATE ) | ( android.content.Context.BIND_FOREGROUND_SERVICE ) ) , UserHandle.SYSTEM ) ; if ( ! ( mBound ) ) { android.util.Log.w ( com.android.server.NetworkScoreService.TAG , ( "Bind call failed for " + service ) ) ; } else { if ( com.android.server.NetworkScoreService.DBG ) android.util.Log.d ( com.android.server.NetworkScoreService.TAG , "ScoringServiceConnection bound." ) ; } } }
protected int beginMmsConnectivity ( ) throws java.io.IOException { createWakeLock ( ) ; int result = mConnMgr.startUsingNetworkFeature ( ConnectivityManager.TYPE_MOBILE , Phone.FEATURE_ENABLE_MMS ) ; if ( android.util.Log.isLoggable ( LogTag.TRANSACTION , Log.VERBOSE ) ) { android.util.Log.v ( com.android.mms.transaction.TransactionService.TAG , ( "beginMmsConnectivity: result=" + result ) ) ; } switch ( result ) { case com.android.internal.telephony.Phone.APN_ALREADY_ACTIVE : case com.android.internal.telephony.Phone.APN_REQUEST_STARTED : acquireWakeLock ( ) ; return result ; } throw new java.io.IOException ( "Cannot establish MMS connectivity" ) ; }
char [ ] getDigitsLocal ( ) { if ( ( digits ) != null ) { return digits ; } else { char [ ] digitArray = new char [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { digitArray [ i ] = ( ( char ) ( ( zeroDigit ) + i ) ) ; } return digitArray ; } }
public java.lang.String getInternalNameOrThrow ( ) { java.lang.String descriptor = descriptor ( ) ; int length = descriptor.length ( ) ; com.google.common.base.Preconditions.checkState ( ( ( ( descriptor.charAt ( 0 ) ) == 'L' ) && ( ( descriptor.charAt ( ( length - 1 ) ) ) == ';' ) ) , "The type is expected to be either a class or an interface: %s" , descriptor ) ; return descriptor.substring ( 1 , ( length - 1 ) ) ; }
private static void onFollowupEvent ( int pubSubId , int requestorInstanceId , byte [ ] mac , byte [ ] message ) { if ( com.android.server.wifi.aware.WifiAwareNative.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNative.TAG , ( ( ( ( ( "onFollowupEvent: pubSubId=" + pubSubId ) + ", requestorInstanceId=" ) + requestorInstanceId ) + ", mac=" ) + ( java.lang.String.valueOf ( libcore.util.HexEncoding.encode ( mac ) ) ) ) ) ; } com.android.server.wifi.aware.WifiAwareStateManager.getInstance ( ) . onMessageReceivedNotification ( pubSubId , requestorInstanceId , mac , message ) ; }
private com.android.dx.io.ClassData readClassData ( ) { int staticFieldsSize = readUleb128 ( ) ; int instanceFieldsSize = readUleb128 ( ) ; int directMethodsSize = readUleb128 ( ) ; int virtualMethodsSize = readUleb128 ( ) ; com.android.dx.io.ClassData [ ] staticFields = readFields ( staticFieldsSize ) ; com.android.dx.io.ClassData [ ] instanceFields = readFields ( instanceFieldsSize ) ; com.android.dx.io.ClassData [ ] directMethods = readMethods ( directMethodsSize ) ; com.android.dx.io.ClassData [ ] virtualMethods = readMethods ( virtualMethodsSize ) ; return new com.android.dx.io.ClassData ( staticFields , instanceFields , directMethods , virtualMethods ) ; }
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , d.length , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize ) ; }
public com.android.jack.test.helper.RuntimeTestHelper addTestExeFileChecker ( @ javax.annotation.Nonnull com.android.jack.test.helper.FileChecker checker ) { this . testExeCheckers.add ( checker ) ; return this ; }
private java.util.List parseClassSpecificationArguments ( java.util.List classSpecifications ) throws java.io.IOException , proguard.ParseException { if ( classSpecifications == null ) { classSpecifications = new java.util.ArrayList ( ) ; } readNextWord ( ( ( ( ( ( ( "keyword '" + ( ConfigurationConstants.CLASS_KEYWORD ) ) + "', '" ) + ( proguard.classfile.ClassConstants.EXTERNAL_ACC_INTERFACE ) ) + "', or '" ) + ( proguard.classfile.ClassConstants.EXTERNAL_ACC_ENUM ) ) + "'" ) , false , true ) ; classSpecifications.add ( parseClassSpecificationArguments ( ) ) ; return classSpecifications ; }
public java.lang.String shell ( org.python.core.PyObject [ ] args , java.lang.String [ ] kws ) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser ( args , kws ) ; com.google.common.base.Preconditions.checkNotNull ( ap ) ; java.lang.String cmd = ap.getString ( 0 ) ; return impl.shell ( cmd ) ; }
public com.android.ims.ImsCallProfile createCallProfile ( int serviceType , int callType ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { return mMmTelFeatureConnection.createCallProfile ( serviceType , callType ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "createCallProfile()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void testStageUninstall_existingStagedDataDistro ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro installedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; simulateInstalledDistro ( installedDistro ) ; java.io.File stagedDataDir = installer.getStagedTzDataDir ( ) ; assertTrue ( stagedDataDir.mkdir ( ) ) ; assertTrue ( installer.stageUninstall ( ) ) ; assertDistroUninstallStaged ( ) ; assertInstalledDistro ( installedDistro ) ; }
public boolean removeProvider ( java.lang.String fqdn ) { if ( ! ( mProviders.containsKey ( fqdn ) ) ) { android.util.Log.e ( com.android.server.wifi.hotspot2.PasspointManager.TAG , "Config doesn't exist" ) ; return false ; } mProviders.remove ( fqdn ) ; return true ; }
private void enableUi ( org.eclipse.swt.widgets.Composite root , boolean enabled ) { root.setEnabled ( enabled ) ; for ( org.eclipse.swt.widgets.Control child : root.getChildren ( ) ) { if ( child instanceof org.eclipse.swt.widgets.Composite ) { enableUi ( ( ( org.eclipse.swt.widgets.Composite ) ( child ) ) , enabled ) ; } else { child.setEnabled ( enabled ) ; } } }
public void uninstallPackage ( @ com.android.annotations.NonNull java.lang.String packageName , int timeout ) throws com.android.builder.testing.api.DeviceException { try { iDevice.uninstallPackage ( packageName ) ; } catch ( java.lang.Exception e ) { throw new com.android.builder.testing.api.DeviceException ( e ) ; } }
public void testNumberOfCameras ( ) throws java.lang.Exception { int numCameras = mUtils.getCameraService ( ) . getNumberOfCameras ( ) ; assertTrue ( ( "At least this many cameras: " + ( mUtils.getGuessedNumCameras ( ) ) ) , ( numCameras >= ( mUtils.getGuessedNumCameras ( ) ) ) ) ; android.util.Log.v ( com.android.mediaframeworktest.integration.CameraBinderTest.TAG , ( "Number of cameras " + numCameras ) ) ; }
public java.util.Date getNextUpdate ( ) { java.util.Calendar calendar = java.util.Calendar.getInstance ( ) ; calendar.setTimeZone ( java.util.TimeZone.getTimeZone ( "UTC" ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.ASN1_TIME_to_Calendar ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_CRL_get_nextUpdate ( mContext ) , calendar ) ; return calendar.getTime ( ) ; }
private void writeDescriptor ( java.lang.String writeValue ) { android.bluetooth.BluetoothGattDescriptor descriptor = getDescriptor ( ) ; if ( descriptor == null ) return ; descriptor.setValue ( writeValue.getBytes ( ) ) ; }
public void testNewInstanceString_ByteArrayArgConstructor ( ) { runTestNewInstanceString ( "([B)V" , new org.apache.harmony.jpda.tests.jdwp.ClassType.NewInstanceStringTest.ConstructorArgumentsProvider ( ) { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue ( debuggeeClassId , "BYTE_ARRAY" ) ; constructorArguments.add ( byteArrayValue ) ; } } ) ; }
private void postCallback ( int advertiserId , int status ) { try { com.android.bluetooth.gatt.AdvertiseClient client = getAdvertiseClient ( advertiserId ) ; android.bluetooth.le.AdvertiseSettings settings = ( client == null ) ? null : client.settings ; boolean isStart = true ; mService.onMultipleAdvertiseCallback ( advertiserId , status , isStart , settings ) ; } catch ( android.os.RemoteException e ) { loge ( "failed onMultipleAdvertiseCallback" , e ) ; } }
private boolean matchesPossibleNumberAndNationalNumber ( java.lang.String number , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc ) { if ( ( ( numberDesc.getPossibleLengthCount ( ) ) > 0 ) && ( ! ( numberDesc.getPossibleLengthList ( ) . contains ( number.length ( ) ) ) ) ) { return false ; } return matcherApi.matchesNationalNumber ( number , numberDesc , false ) ; }
public void linkFile ( java.lang.String relativePath , java.lang.String fromBase , java.lang.String toBase ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.linkFile ( relativePath , fromBase , toBase ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
static int hfToAmVol ( int hfVol ) { int amRange = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMaxAmVcVol ) - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMinAmVcVol ) ; int hfRange = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MAX_HFP_SCO_VOICE_CALL_VOLUME ) - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MIN_HFP_SCO_VOICE_CALL_VOLUME ) ; int amOffset = ( amRange * ( hfVol - ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.MIN_HFP_SCO_VOICE_CALL_VOLUME ) ) ) / hfRange ; int amVol = ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.mMinAmVcVol ) + amOffset ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( ( ( "HF -> AM " + hfVol ) + " " ) + amVol ) ) ; return amVol ; }
public final int startActivities ( android.app.IApplicationThread caller , java.lang.String callingPackage , android.content.Intent [ ] intents , java.lang.String [ ] resolvedTypes , android.os.IBinder resultTo , android.os.Bundle options , int userId ) { enforceNotIsolatedCaller ( "startActivities" ) ; userId = handleIncomingUser ( android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , userId , false , com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY , "startActivity" , null ) ; int ret = mStackSupervisor.startActivities ( caller , ( - 1 ) , callingPackage , intents , resolvedTypes , resultTo , options , userId ) ; return ret ; }
private void cancelMissedCallNotification ( android.os.UserHandle userHandle ) { mMissedCallCounts.putIfAbsent ( userHandle , new java.util.concurrent.atomic.AtomicInteger ( 0 ) ) ; mMissedCallCounts.get ( userHandle ) . set ( 0 ) ; if ( sendNotificationCustomComponent ( null , userHandle ) ) { return ; } if ( shouldManageNotificationThroughDefaultDialer ( userHandle ) ) { sendNotificationThroughDefaultDialer ( null , userHandle ) ; return ; } long token = android.os.Binder.clearCallingIdentity ( ) ; try { mNotificationManager.cancelAsUser ( null , com.android.server.telecom.ui.MissedCallNotifierImpl.MISSED_CALL_NOTIFICATION_ID , userHandle ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } }
public java.util.Map < java.lang.String , java.io.File > getDynamicConfigFiles ( ) { java.util.Map < java.lang.String , java.io.File > configMap = new java.util.HashMap < > ( ) ; for ( java.lang.String key : mBuildInfo.getBuildAttributes ( ) . keySet ( ) ) { if ( key.startsWith ( DynamicConfigHostSide.CONFIG_PATH_PREFIX ) ) { configMap.put ( key.substring ( DynamicConfigHostSide.CONFIG_PATH_PREFIX.length ( ) ) , new java.io.File ( mBuildInfo.getBuildAttributes ( ) . get ( key ) ) ) ; } } return configMap ; }
public void onNewFrame ( final java.awt.image.BufferedImage image ) { getDisplay ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { mImageOverlay.setImage ( image ) ; redraw ( ) ; } } ) ; }
public static boolean getBoolean ( android.security.keymaster.KeyCharacteristics keyCharacteristics , int tag ) { if ( keyCharacteristics.hwEnforced.containsTag ( tag ) ) { return keyCharacteristics.hwEnforced.getBoolean ( tag , false ) ; } else { return keyCharacteristics.swEnforced.getBoolean ( tag , false ) ; } }
public void testBasicWorkingSntpClientQuery ( ) throws java.lang.Exception { mServer.setServerReply ( libcore.util.HexEncoding.decode ( android.net.SntpClientTest.WORKING_VERSION4.toCharArray ( ) , false ) ) ; assertTrue ( mClient.requestTime ( mServer.getAddress ( ) , mServer.getPort ( ) , 500 , mNetwork ) ) ; assertEquals ( 1 , mServer.numRequestsReceived ( ) ) ; assertEquals ( 1 , mServer.numRepliesSent ( ) ) ; }
android.icu.text.MeasureFormat withNumberFormat ( android.icu.text.NumberFormat format ) { return new android.icu.text.MeasureFormat ( getLocale ( ) , this . formatWidth , new android.icu.text.MeasureFormat.ImmutableNumberFormat ( format ) , this . rules , this . unitToStyleToCountToFormat , this . numericFormatters , this . currencyFormat , this . integerFormat , this . unitToStyleToPerUnitPattern , this . styleToPerPattern ) ; }
public void testInterfaceCountersUdp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1000 , false ) ; }
public void TestGreek ( ) throws java.io.IOException { long start = java.lang.System.currentTimeMillis ( ) ; new android.icu.dev.test.translit.RoundTripTest.Test ( "Latin-Greek" , 50 ) . test ( "[a-zA-Z]" , getGreekSet ( ) , "[µͺϐ-ϵϹ]" , this , new android.icu.dev.test.translit.RoundTripTest.LegalGreek ( true ) ) ; showElapsed ( start , "TestGreek" ) ; }
public static void main ( java.lang.String [ ] args ) throws java.io.IOException { if ( ( args.length ) != 3 ) { com.android.dx.merge.DexMerger.printUsage ( ) ; return ; } com.android.dx.io.DexBuffer dexA = new com.android.dx.io.DexBuffer ( new java.io.File ( args [ 1 ] ) ) ; com.android.dx.io.DexBuffer dexB = new com.android.dx.io.DexBuffer ( new java.io.File ( args [ 2 ] ) ) ; com.android.dx.io.DexBuffer merged = new com.android.dx.merge.DexMerger ( dexA , dexB , CollisionPolicy.KEEP_FIRST ) . merge ( ) ; merged.writeTo ( new java.io.File ( args [ 0 ] ) ) ; }
public static < I , O > com.google.common.util.concurrent.ListenableFuture < O > transform ( com.google.common.util.concurrent.ListenableFuture < I > input , com.google.common.util.concurrent.AsyncFunction < ? super I , ? extends O > function ) { return com.google.common.util.concurrent.Futures.transform ( input , function , com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor ( ) ) ; }
public void onProgressChanged ( android.widget.SeekBar seekBar , int progress , boolean fromUser ) { if ( fromUser ) { mAudioTrack.setAppVolume ( progress ) ; com.android.videoeditor.service.ApiService.setAudioTrackVolume ( getContext ( ) , mProject.getPath ( ) , mAudioTrack.getId ( ) , progress ) ; } }
private void initializeGlobals ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_element s ) { simpleElem = com.android.rs.test.Element.F32_3 ( RS ) ; complexElem = com.android.rs.test.ScriptField_ComplexStruct.createElement ( RS ) ; s.set_simpleElem ( simpleElem ) ; s.set_complexElem ( complexElem ) ; com.android.rs.test.ScriptField_ComplexStruct data = new com.android.rs.test.ScriptField_ComplexStruct ( RS , 1 ) ; s.bind_complexStruct ( data ) ; }
public static com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier getQualifier ( java.lang.String segment ) { java.util.regex.Matcher m = com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier.sRegionPattern.matcher ( segment ) ; if ( m.matches ( ) ) { com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier qualifier = new com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier ( ) ; qualifier.mValue = m.group ( 1 ) ; return qualifier ; } return null ; }
public static java.lang.String internalMethodDescriptor ( java.lang.String externalReturnType , java.util.List externalArguments ) { java.lang.StringBuffer internalMethodDescriptor = new java.lang.StringBuffer ( ) ; internalMethodDescriptor.append ( ClassConstants.INTERNAL_METHOD_ARGUMENTS_OPEN ) ; for ( int index = 0 ; index < ( externalArguments.size ( ) ) ; index ++ ) { internalMethodDescriptor.append ( proguard.classfile.util.ClassUtil.internalType ( ( ( java.lang.String ) ( externalArguments.get ( index ) ) ) ) ) ; } internalMethodDescriptor.append ( ClassConstants.INTERNAL_METHOD_ARGUMENTS_CLOSE ) ; internalMethodDescriptor.append ( proguard.classfile.util.ClassUtil.internalType ( externalReturnType ) ) ; return internalMethodDescriptor.toString ( ) ; }
boolean makeAppCrashingLocked ( com.android.server.am.ProcessRecord app , java.lang.String tag , java.lang.String shortMsg , java.lang.String longMsg , byte [ ] crashData ) { app.crashing = true ; app.crashingReport = generateProcessError ( app , ActivityManager.ProcessErrorStateInfo.CRASHED , tag , shortMsg , longMsg , crashData ) ; startAppProblemLocked ( app ) ; app.stopFreezingAllLocked ( ) ; return handleAppCrashLocked ( app ) ; }
public void uninstallCaCert ( @ android.annotation.Nullable android.content.ComponentName admin , byte [ ] certBuffer ) { throwIfParentInstance ( "uninstallCaCert" ) ; if ( ( mService ) != null ) { try { final java.lang.String alias = android.app.admin.DevicePolicyManager.getCaCertAlias ( certBuffer ) ; mService.uninstallCaCerts ( admin , new java.lang.String [ ] { alias } ) ; } catch ( java.security.cert.CertificateException e ) { android.util.Log.w ( android.app.admin.DevicePolicyManager.TAG , "Unable to parse certificate" , e ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public boolean accept ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project , @ org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file ) { if ( ( file.isDirectory ( ) ) || ( ! ( file.isValid ( ) ) ) ) { return false ; } if ( com.intellij.psi.SingleRootFileViewProvider.isTooLargeForContentLoading ( file ) ) { return false ; } final com.intellij.openapi.fileTypes.FileType ft = file.getFileType ( ) ; return ( ! ( ft.isBinary ( ) ) ) || ( ( BinaryFileTypeDecompilers.INSTANCE.forFileType ( ft ) ) != null ) ; }
public java.lang.Boolean getFunctionalTest ( ) { com.android.builder.core.VariantConfiguration config = this ; if ( mType.isForTesting ( ) ) { config = getTestedConfig ( ) ; com.google.common.base.Preconditions.checkState ( ( config != null ) ) ; } java.lang.Boolean functionalTest = config.mMergedFlavor.getTestFunctionalTest ( ) ; return functionalTest != null ? functionalTest : com.android.builder.core.VariantConfiguration.DEFAULT_FUNCTIONAL_TEST ; }
public void testRunWithAddInstrumentationArg ( ) throws com.android.ddmlib.AdbCommandRejectedException , com.android.ddmlib.ShellCommandUnresponsiveException , com.android.ddmlib.TimeoutException , java.io.IOException { final java.lang.String extraArgName = "blah" ; final java.lang.String extraArgValue = "blahValue" ; mRunner.addInstrumentationArg ( extraArgName , extraArgValue ) ; mRunner.run ( new com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.EmptyListener ( ) ) ; assertStringsEquals ( java.lang.String.format ( "am instrument -w -r -e %s %s %s/%s" , extraArgName , extraArgValue , com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_PACKAGE , com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_RUNNER ) , mMockDevice.getLastShellCommand ( ) ) ; }
public final void activityResumed ( android.os.IBinder token ) { final long origId = android.os.Binder.clearCallingIdentity ( ) ; synchronized ( this ) { com.android.server.am.ActivityStack stack = com.android.server.am.ActivityRecord.getStackLocked ( token ) ; if ( stack != null ) { com.android.server.am.ActivityRecord.activityResumedLocked ( token ) ; } } android.os.Binder.restoreCallingIdentity ( origId ) ; }
public com.android.ims.internal.IImsConfig getConfigInterface ( int slotId , int featureType , int sessionId ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature.getConfigInterface ( sessionId ) ; } } return null ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.when ( mContext.getResources ( ) ) . thenReturn ( mResources ) ; org.mockito.Mockito.when ( mResources.getInteger ( R.integer.config_networkAvoidBadWifi ) ) . thenReturn ( 0 ) ; mContentResolver = new android.test.mock.MockContentResolver ( ) ; mContentResolver.addProvider ( Settings.AUTHORITY , new com.android.internal.util.test.FakeSettingsProvider ( ) ) ; org.mockito.Mockito.when ( mContext.getContentResolver ( ) ) . thenReturn ( mContentResolver ) ; }
private void initForReal ( ) { mAwContents = new org.chromium.android_webview.AwContents ( mFactory.getBrowserContext ( ) , mWebView , mWebView.getContext ( ) , new com.android.webview.chromium.WebViewChromium.InternalAccessAdapter ( ) , new com.android.webview.chromium.WebViewChromium.WebViewNativeGLDelegate ( ) , mContentsClientAdapter , mWebSettings.getAwSettings ( ) ) ; if ( ( mAppTargetSdkVersion ) >= ( Build.VERSION_CODES.KITKAT ) ) { org.chromium.android_webview.AwContents.setShouldDownloadFavicons ( ) ; } mAwContents.setLayerType ( mWebView.getLayerType ( ) , null ) ; }
public void testSetupDriverForSoftApModeError ( ) { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; android.net.wifi.IWificond wificond = org.mockito.Mockito.mock ( android.net.wifi.IWificond.class ) ; org.mockito.Mockito.when ( wificondControl.setupDriverForSoftApMode ( ) ) . thenReturn ( null ) ; mWifiNative.setWificondControl ( wificondControl ) ; android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode ( ) ; org.junit.Assert.assertEquals ( null , returnedApInterface ) ; org.mockito.Mockito.verify ( wificondControl ) . setupDriverForSoftApMode ( ) ; }
protected boolean generateSourceProperties ( com.android.sdklib.internal.repository.archives.Archive archive , java.io.File unzipDestFolder ) { java.util.Properties props = new java.util.Properties ( ) ; archive.saveProperties ( props ) ; java.lang.Package pkg = archive.getParentPackage ( ) ; if ( pkg != null ) { pkg.saveProperties ( props ) ; } try { mFileOp.saveProperties ( new java.io.File ( unzipDestFolder , com.android.SdkConstants.FN_SOURCE_PROP ) , props , "## Android Tool: Source of this archive." ) ; return true ; } catch ( java.io.IOException ignore ) { return false ; } }
public java.lang.String getDescriptionForNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.util.Locale languageCode ) { com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType numberType = phoneUtil.getNumberType ( number ) ; if ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.UNKNOWN ) ) { return "" ; } else if ( ! ( canBeGeocoded ( numberType ) ) ) { return getCountryNameForNumber ( number , languageCode ) ; } return getDescriptionForValidNumber ( number , languageCode ) ; }
private static void checkPatternOnFixedDate ( java.lang.String pattern , java.lang.String expectedOutput ) throws java.text.ParseException { org.apache.harmony.tests.java.text.SimpleDateFormatTest.checkPatternOnFixedDate ( pattern , expectedOutput , expectedOutput ) ; }
private void close ( int cause ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "Closing " + ( mClosed ) ) ) ; if ( mClosed ) { return ; } setDisconnected ( new android.telecom.DisconnectCause ( cause ) ) ; mClosed = true ; mCurrentCall = null ; destroy ( ) ; }
public void connectionForPatchWithBodyRequest ( ) throws java.lang.Exception { com.android.volley.mock.TestRequest.PatchWithBody request = new com.android.volley.mock.TestRequest.PatchWithBody ( ) ; assertEquals ( request.getMethod ( ) , Method.PATCH ) ; com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest ( mMockConnection , request ) ; assertEquals ( "PATCH" , mMockConnection.getRequestMethod ( ) ) ; assertTrue ( mMockConnection.getDoOutput ( ) ) ; }
public void testFromStringFailsWithUpperCaseString ( ) { java.lang.String string = com.google.common.hash.Hashing.sha1 ( ) . hashString ( "foo" ) . toString ( ) . toUpperCase ( ) ; try { com.google.common.hash.HashCode.fromString ( string ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public void imsNetworkStateChanged ( int indicationType ) { }
public static com.android.dialer.speeddial.SpeedDialCursor newInstance ( android.database.Cursor strequentCursor ) { if ( ( strequentCursor == null ) || ( ( strequentCursor.getCount ( ) ) == 0 ) ) { return null ; } com.android.dialer.speeddial.SpeedDialCursor cursor = new com.android.dialer.speeddial.SpeedDialCursor ( com.android.dialer.speeddial.SpeedDialCursor.buildCursors ( strequentCursor ) ) ; strequentCursor.close ( ) ; return cursor ; }
public void add ( com.android.sdklib.internal.repository.SdkSource source ) { mSources.add ( source ) ; }
public void test_ConstructorII ( ) throws java.io.IOException { int freePortNumber = tests.support.Support_PortManager.getNextPort ( ) ; s = new java.net.ServerSocket ( freePortNumber , 1 ) ; s.setSoTimeout ( 2000 ) ; startClient ( freePortNumber ) ; sconn = s.accept ( ) ; sconn.close ( ) ; s.close ( ) ; }
public java.lang.String [ ] getForbiddenPlmns ( int subId , int appType ) { mApp.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE , "Requires READ_PRIVILEGED_PHONE_STATE" ) ; if ( ( appType != ( android.telephony.TelephonyManager.APPTYPE_USIM ) ) && ( appType != ( android.telephony.TelephonyManager.APPTYPE_SIM ) ) ) { com.android.phone.PhoneInterfaceManager.loge ( "getForbiddenPlmnList(): App Type must be USIM or SIM" ) ; return null ; } java.lang.Object response = sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_GET_FORBIDDEN_PLMNS , new java.lang.Integer ( appType ) , subId ) ; if ( response instanceof java.lang.String [ ] ) { return ( ( java.lang.String [ ] ) ( response ) ) ; } return null ; }
java.lang.String attemptToFormatAccruedDigits ( ) { for ( com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat numberFormat : possibleFormats ) { java.util.regex.Matcher m = regexCache.getPatternForRegex ( numberFormat.pattern ) . matcher ( nationalNumber ) ; if ( m.matches ( ) ) { shouldAddSpaceAfterNationalPrefix = com.google.i18n.phonenumbers.AsYouTypeFormatter.NATIONAL_PREFIX_SEPARATORS_PATTERN.matcher ( numberFormat.nationalPrefixFormattingRule ) . find ( ) ; java.lang.String formattedNumber = m.replaceAll ( numberFormat.format ) ; return appendNationalNumber ( formattedNumber ) ; } } return "" ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { if ( ConnectivityManager.CONNECTIVITY_ACTION.equals ( intent.getAction ( ) ) ) { boolean isConnected = com.android.bips.util.WifiMonitor.isConnected ( context ) ; if ( ( ( mConnected ) == null ) || ( ( mConnected ) != isConnected ) ) { mConnected = isConnected ; mListener.onConnectionStateChanged ( mConnected ) ; } } }
private void addRemoteSysImg ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay tag , java.lang.String abi ) { com.android.sdklib.repository.descriptors.IPkgDesc d = com.android.sdklib.repository.descriptors.PkgDesc.newSysImg ( version , tag , abi , revision ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public int read ( ) throws java.io.IOException { java.lang.Object traceContext = sun.misc.IoTrace.fileReadBegin ( path ) ; byte [ ] b = new byte [ 1 ] ; int res = - 1 ; try { res = read ( b , 0 , 1 ) ; } finally { sun.misc.IoTrace.fileReadEnd ( traceContext , res ) ; } return res != ( - 1 ) ? ( b [ 0 ] ) & 255 : - 1 ; }
private void propagateVarRef ( com.android.jack.ir.ast.JSsaVariableDefRef lhs , com.android.jack.ir.ast.JSsaVariableUseRef rhs , com.android.jack.transformations.request.TransformationRequest tr ) { com.android.jack.ir.ast.JSsaVariableDefRef def = rhs.getDef ( ) ; for ( com.android.jack.ir.ast.JSsaVariableRef oldUse : com.google.common.collect.Lists.newArrayList ( lhs.getUses ( ) ) ) { com.android.jack.ir.ast.JSsaVariableRef newUse = def.makeRef ( oldUse.getSourceInfo ( ) ) ; newUse.addAllMarkers ( oldUse.getAllMarkers ( ) ) ; tr.append ( new com.android.jack.transformations.request.Replace ( oldUse , newUse ) ) ; } }
public void testOverlay1Content ( ) throws java.lang.Exception { java.io.File project = buildProject ( "overlay1" , BasePlugin.GRADLE_TEST_VERSION ) ; java.io.File drawableOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/res/debug/drawable" ) ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "no_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "type_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; }
public void onLooperPrepared ( ) { mEuiccCard = new com.android.internal.telephony.uicc.euicc.EuiccCard ( mContextFixture.getTestDouble ( ) , mMockCi , mMockIccCardStatus , 0 ) { @ java.lang.Override protected byte [ ] getDeviceId ( ) { return com.android.internal.telephony.uicc.IccUtils.bcdToBytes ( "987654321012345" ) ; } @ java.lang.Override protected void loadEidAndNotifyRegistrants ( ) { } } ; mHandler = new android.os.Handler ( mTestHandlerThread.getLooper ( ) ) ; setReady ( true ) ; }
public void onCallTerminated ( com.android.ims.ImsCall imsCall , com.android.ims.ImsReasonInfo reasonInfo ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "mImsUssdListener onCallTerminated reasonCode=" + ( reasonInfo.getCode ( ) ) ) ) ; removeMessages ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_CHECK_FOR_WIFI_HANDOVER ) ; if ( imsCall == ( mUssdSession ) ) { mUssdSession = null ; if ( ( mPendingUssd ) != null ) { com.android.internal.telephony.CommandException ex = new com.android.internal.telephony.CommandException ( CommandException.Error.GENERIC_FAILURE ) ; android.os.AsyncResult.forMessage ( mPendingUssd , null , ex ) ; mPendingUssd.sendToTarget ( ) ; mPendingUssd = null ; } } imsCall.close ( ) ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , byte [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , data.length ) ; }
public java.lang.String computeFullNameWithSplits ( @ com.android.annotations.NonNull java.lang.String splitName ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String flavorName = getFlavorName ( ) ; if ( ! ( flavorName.isEmpty ( ) ) ) { sb.append ( flavorName ) ; sb.append ( com.android.builder.internal.StringHelper.capitalize ( splitName ) ) ; } else { sb.append ( splitName ) ; } sb.append ( com.android.builder.internal.StringHelper.capitalize ( mBuildType.getName ( ) ) ) ; if ( ( mType ) == ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { sb.append ( "Test" ) ; } return sb.toString ( ) ; }
private void refreshUI ( ) { int nFrames = 0 ; nFrames = ( ( mTrace ) == null ) ? 1 : mTrace.getFrames ( ) . size ( ) ; setFrameCount ( nFrames ) ; selectFrame ( 1 ) ; }
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFromUnchecked" ) ; int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , d.length , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize , Element.DataType.SIGNED_8 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public void sendEmergencyCallStateChange ( boolean callActive ) { if ( mBroadcastEmergencyCallStateChanges ) { android.content.Intent intent = new android.content.Intent ( TelephonyIntents.ACTION_EMERGENCY_CALL_STATE_CHANGED ) ; intent.putExtra ( PhoneConstants.PHONE_IN_EMERGENCY_CALL , callActive ) ; android.telephony.SubscriptionManager.putPhoneIdAndSubIdExtra ( intent , getPhoneId ( ) ) ; android.app.ActivityManagerNative.broadcastStickyIntent ( intent , null , UserHandle.USER_ALL ) ; if ( com.android.internal.telephony.GsmCdmaPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.GsmCdmaPhone.LOG_TAG , "sendEmergencyCallStateChange" ) ; } }
private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream.defaultReadObject ( ) ; byte [ ] encoded = ( ( byte [ ] ) ( stream.readObject ( ) ) ) ; key = new org.conscrypt.OpenSSLKey ( org.conscrypt.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO ( encoded ) ) ; final long origGroup = org.conscrypt.NativeCrypto.EC_KEY_get0_group ( key.getNativeRef ( ) ) ; group = new org.conscrypt.OpenSSLECGroupContext ( org.conscrypt.NativeCrypto.EC_GROUP_dup ( origGroup ) ) ; }
public void onSizeChanged ( final int w , final int h , final int ow , final int oh ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onSizeChanged ( w , h , ow , oh ) ; } } ) ; return ; } mAwContents.onSizeChanged ( w , h , ow , oh ) ; }
private void addToPlayListRequestFromNative ( byte [ ] address , byte scope , byte [ ] uid , int uidCounter ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "addToPlayListRequestFromNative: scope=" + scope ) ) ; android.util.Log.w ( com.android.bluetooth.avrcp.Avrcp.TAG , "Add to NowPlayingList is not supported" ) ; addToNowPlayingRspNative ( address , AvrcpConstants.RSP_INTERNAL_ERR ) ; }
public short readShort ( ) { short result = libcore.io.Memory.peekShort ( ( ( address ) + ( position ) ) , swap ) ; position += SizeOf.SHORT ; return result ; }
public void testGetValues009_Object ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue ( classID , "OBJECT_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( "breakpointObject" , StackTrace002Debuggee.OBJECT_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointObject" ) ; methodInfo.addVariable ( "param" , expectedValue ) ; runStackFrameTest ( tester ) ; }
public void visitInvokeDynamicConstant ( proguard.shrink.Clazz clazz , proguard.shrink.InvokeDynamicConstant invokeDynamicConstant ) { if ( shouldBeMarkedAsUsed ( invokeDynamicConstant ) ) { markAsUsed ( invokeDynamicConstant ) ; markConstant ( clazz , invokeDynamicConstant.u2nameAndTypeIndex ) ; clazz.attributesAccept ( new proguard.shrink.UsageMarker.MyBootStrapMethodUsageMarker ( invokeDynamicConstant.u2bootstrapMethodAttributeIndex ) ) ; } }
public com.android.jack.frontend.VirtualMethodsMarker clone ( ) { com.android.jack.frontend.VirtualMethodsMarker clone ; try { clone = ( ( com.android.jack.frontend.VirtualMethodsMarker ) ( super . clone ( ) ) ) ; clone.virtualMethods = ( ( java.util.TreeSet < com.android.jack.ir.ast.JMethodId > ) ( virtualMethods.clone ( ) ) ) ; return clone ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.AssertionError ( ) ; } }
public boolean equals ( java.lang.Object a , java.lang.Object b ) { if ( ( a instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) && ( b instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ) { com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode keyA = ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ( a ) ) . getUiViewKey ( ) ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode keyB = ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ( b ) ) . getUiViewKey ( ) ; if ( keyA != null ) { return keyA.equals ( keyB ) ; } } if ( a != null ) { return a.equals ( b ) ; } return false ; }
public void testOnSetUpAdapterSingleInstance ( ) throws java.lang.Exception { java.lang.String output = "android.hardware.foo@1.1::IFoo/default" ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mPreparer.setUp ( mDevice , mBuildInfo ) ; java.lang.String adapterCmd = java.lang.String.format ( "%s /data/nativetest64/%s %s %s %d" , SCRIPT_PATH , TEST_HAL_ADAPTER_BINARY , "IFoo" , "default" , THREAD_COUNT_DEFAULT ) ; verify ( mDevice , times ( 1 ) ) . executeShellCommand ( eq ( adapterCmd ) ) ; }
com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex ( com.android.internal.telephony.gsm.GsmCall call , int index ) throws com.android.internal.telephony.CallStateException { int count = call.connections.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { com.android.internal.telephony.gsm.GsmConnection cn = ( ( com.android.internal.telephony.gsm.GsmConnection ) ( call.connections.get ( i ) ) ) ; if ( ( cn.getGSMIndex ( ) ) == index ) { return cn ; } } return null ; }
private void startService ( ) throws java.util.concurrent.TimeoutException { android.content.Intent startIntent = new android.content.Intent ( android.support.test.InstrumentationRegistry.getTargetContext ( ) , com.android.bluetooth.a2dp.A2dpService.class ) ; startIntent.putExtra ( AdapterService.EXTRA_ACTION , AdapterService.ACTION_SERVICE_STATE_CHANGED ) ; startIntent.putExtra ( BluetoothAdapter.EXTRA_STATE , BluetoothAdapter.STATE_ON ) ; mServiceRule.startService ( startIntent ) ; verify ( mAdapterService , timeout ( com.android.bluetooth.a2dp.A2dpServiceTest.TIMEOUT_MS ) ) . onProfileServiceStateChanged ( eq ( com.android.bluetooth.a2dp.A2dpService.class . getName ( ) ) , eq ( BluetoothAdapter.STATE_ON ) ) ; mA2dpService = com.android.bluetooth.a2dp.A2dpService.getA2dpService ( ) ; org.junit.Assert.assertNotNull ( mA2dpService ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Boolean > isDirty ( com.google.common.collect.ImmutableSet < com.android.dialer.DialerPhoneNumber > phoneNumbers , long lastModified ) { return null ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mGridView = null ; mActivity = getActivity ( ) ; new android.cts.util.PollingCheck ( ) { @ java.lang.Override protected boolean check ( ) { return mActivity.hasWindowFocus ( ) ; } } . run ( ) ; mInstrumentation = getInstrumentation ( ) ; }
public void testDeserializeUnserializableField ( ) throws java.lang.Exception { java.lang.String s = "aced0005737200386c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6e54657" + ( ( ( ( "3742453657269616c697a61626c65436f6e7461696e65723200000000000000000200014c000e7" + "56e73657269616c697a61626c657400334c6c6962636f72652f6a6176612f696f2f53657269616" ) + "c697a6174696f6e546573742457617353657269616c697a61626c653b7870737200316c6962636" ) + "f72652e6a6176612e696f2e53657269616c697a6174696f6e546573742457617353657269616c6" ) + "97a61626c65000000000000000002000149000169787000000000" ) ; assertFalse ( libcore.java.io.SerializationTest.serializableContainer2InitializedFlag ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertTrue ( libcore.java.io.SerializationTest.serializableContainer2InitializedFlag ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; }
void createBinaries ( org.gradle.model.collection.CollectionBuilder < com.android.build.gradle.model.AndroidBinary > binaries , @ org.gradle.model.Path ( value = "android.buildTypes" ) org.gradle.model.collection.ManagedSet < com.android.build.gradle.managed.BuildType > buildTypes , com.android.build.gradle.model.List < com.android.build.gradle.internal.ProductFlavorCombo > flavorCombos , com.android.build.gradle.model.AndroidComponentSpec spec ) { if ( flavorCombos.isEmpty ( ) ) { flavorCombos.add ( new com.android.build.gradle.internal.ProductFlavorCombo ( ) ) ; } for ( com.android.build.gradle.managed.BuildType buildType : buildTypes ) ; flavorCombos.each = $missing$ ; com.android.build.gradle.internal.ProductFlavorCombo flavorCombo ; binaries.create ( com.android.build.gradle.model.AndroidComponentModelPlugin.Rules.getBinaryName ( buildType , flavorCombo ) ) ; com.android.build.gradle.model.def binary = it ; com.android.build.gradle.model.DefaultAndroidBinary binary ; com.android.build.gradle.model.DefaultAndroidBinary buildType = new com.android.build.gradle.managed.adaptor.BuildTypeAdaptor ( buildType ) ; binary.productFlavors = flavorCombo.flavorList ; }
public void testBindFailureWhenBound ( ) { java.util.HashSet < android.util.Pair < java.lang.Integer , java.lang.Integer > > testFeatures = new java.util.HashSet < > ( ) ; testFeatures.add ( new android.util.Pair ( 1 , 1 ) ) ; bindAndConnectService ( testFeatures ) ; junit.framework.Assert.assertFalse ( mTestImsServiceController.bind ( testFeatures ) ) ; org.mockito.Mockito.verify ( mMockContext , org.mockito.Mockito.times ( 1 ) ) . bindService ( org.mockito.Matchers.any ( ) , org.mockito.Matchers.any ( ) , org.mockito.Matchers.anyInt ( ) ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( "TestNode [fqn=" + ( mFqcn ) ) + ", infos=" ) + ( mAttributeInfos ) ) + ", attributes=" ) + ( mAttributes ) ) + ", bounds=" ) + ( mBounds ) ) + "]" ; }
public void onResume ( ) { super . onResume ( ) ; startTimeOut ( mTextMsg.userClear ) ; }
public android.net.wifi.WifiConfiguration buildWifiConfig ( java.lang.String uriString , java.lang.String mimeType , byte [ ] data ) { if ( mimeType.equals ( ConfigBuilder.WifiConfigType ) ) { try { return com.android.server.wifi.configparse.ConfigBuilder.buildConfig ( uriString , data , mContext ) ; } catch ( java.io.IOException | java.security.GeneralSecurityException | org.xml.sax.SAXException e ) { android.util.Log.e ( com.android.server.wifi.WifiServiceImpl.TAG , ( "Failed to parse wi-fi configuration: " + e ) ) ; } } else { android.util.Log.i ( com.android.server.wifi.WifiServiceImpl.TAG , ( "Unknown wi-fi config type: " + mimeType ) ) ; } return null ; }
public boolean isBleScanAlwaysAvailable ( ) { try { return ( Settings.Global.getInt ( mContentResolver , Settings.Global.BLE_SCAN_ALWAYS_AVAILABLE ) ) != 0 ; } catch ( android.provider.Settings.SettingNotFoundException e ) { } return false ; }
public void testCapitalize ( ) { assertEquals ( "UPPER" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "UPPER" ) ) ; assertEquals ( "Lower" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "lower" ) ) ; assertEquals ( "Capital" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "Capital" ) ) ; assertEquals ( "CamelCase" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "camelCase" ) ) ; assertEquals ( "" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize ( "" ) ) ; }
public void testUngrant_NoGrant_Failure ( ) throws java.lang.Exception { assertTrue ( "Password should work for keystore" , mKeyStore.password ( android.security.KeyStoreTest.TEST_PASSWD ) ) ; assertTrue ( "Should be able to generate key for testcase" , mKeyStore.generate ( android.security.KeyStoreTest.TEST_KEYNAME , KeyStore.UID_SELF , NativeCrypto.EVP_PKEY_RSA , android.security.KeyStoreTest.RSA_KEY_SIZE , KeyStore.FLAG_ENCRYPTED , null ) ) ; assertFalse ( "Should not be able to revoke not existent grant" , mKeyStore.ungrant ( android.security.KeyStoreTest.TEST_KEYNAME , 0 ) ) ; }
private boolean checkAndroidProject ( org.eclipse.core.resources.IProject project ) throws org.eclipse.core.runtime.CoreException { if ( ( project.hasNature ( org.eclipse.jdt.core.JavaCore.NATURE_ID ) ) == false ) { java.lang.String msg = java.lang.String.format ( "%1$s is not a Java project!" , project.getName ( ) ) ; com.android.ide.eclipse.adt.AdtPlugin.displayError ( "Android Launch" , msg ) ; return false ; } if ( ( project.hasNature ( AndroidConstants.NATURE ) ) == false ) { java.lang.String msg = java.lang.String.format ( "%1$s is not an Android project!" , project.getName ( ) ) ; com.android.ide.eclipse.adt.AdtPlugin.displayError ( "Android Launch" , msg ) ; return false ; } return true ; }
public void stop ( ) { if ( ! ( mStarted ) ) { return ; } mTvInputManager.unregisterCallback ( mInternalCallback ) ; mStarted = false ; mInputStateMap.clear ( ) ; mInputMap.clear ( ) ; mInputIdToPartnerInputMap.clear ( ) ; }
private static com.android.manifmerger.NodeOperationType calculateNodeOperationType ( @ com.android.annotations.NonNull com.android.manifmerger.XmlElement higherPriority , @ com.android.annotations.NonNull com.android.manifmerger.XmlElement lowerPriority ) { com.android.manifmerger.NodeOperationType operationType = higherPriority.getOperationType ( ) ; if ( ( ( operationType.isSelectable ( ) ) && ( ( higherPriority.mSelector ) != null ) ) && ( ! ( higherPriority.mSelector.appliesTo ( lowerPriority ) ) ) ) { operationType = NodeOperationType.MERGE ; } return operationType ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( ( options.coreLibrary ? "__desugar__/" : "" ) ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; reader.accept ( visitor , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; java.lang.String filename = ( rewriter.unprefix ( lambdaClass.getValue ( ) . desiredInternalName ( ) ) ) + ".class" ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , filename , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
protected void abortOnBadSetup ( org.eclipse.jdt.core.IJavaProject javaProject ) throws org.eclipse.core.runtime.CoreException { super . abortOnBadSetup ( javaProject ) ; org.eclipse.core.resources.IMarker [ ] markers = javaProject.getProject ( ) . findMarkers ( null , false , IResource.DEPTH_ZERO ) ; if ( ( markers.length ) > 0 ) { stopBuild ( "" ) ; } }
private static com.google.common.collect.ImmutableSet < java.lang.Class < ? > > getRawTypes ( java.lang.reflect.Type [ ] types ) { com.google.common.collect.ImmutableSet.Builder < java.lang.Class < ? > > builder = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.lang.reflect.Type type : types ) { builder.addAll ( com.google.common.reflect.TypeToken.getRawTypes ( type ) ) ; } return builder.build ( ) ; }
public static com.android.ide.eclipse.adt.internal.resources.configurations.CountryCodeQualifier getQualifier ( java.lang.String segment ) { java.util.regex.Matcher m = com.android.ide.eclipse.adt.internal.resources.configurations.CountryCodeQualifier.sCountryCodePattern.matcher ( segment ) ; if ( m.matches ( ) ) { java.lang.String v = m.group ( 1 ) ; int code = - 1 ; try { code = java.lang.Integer.parseInt ( v ) ; } catch ( java.lang.NumberFormatException e ) { return null ; } com.android.ide.eclipse.adt.internal.resources.configurations.CountryCodeQualifier qualifier = new com.android.ide.eclipse.adt.internal.resources.configurations.CountryCodeQualifier ( code ) ; return qualifier ; } return null ; }
public void testProperties ( ) throws java.lang.Exception { com.android.ide.common.rendering.RenderSecurityManager manager = new com.android.ide.common.rendering.RenderSecurityManager ( null , null ) ; try { manager.setActive ( true ) ; java.lang.System.getProperties ( ) ; fail ( "Should have thrown security exception" ) ; } catch ( java.lang.SecurityException exception ) { assertEquals ( "Property access not allowed during rendering" , exception.toString ( ) ) ; } finally { manager.dispose ( ) ; } }
private void notifyRouteChange ( java.lang.String action , android.net.RouteInfo route ) { final int length = mObservers.beginBroadcast ( ) ; try { for ( int i = 0 ; i < length ; i ++ ) { try { if ( action.equals ( "updated" ) ) { mObservers.getBroadcastItem ( i ) . routeUpdated ( route ) ; } else { mObservers.getBroadcastItem ( i ) . routeRemoved ( route ) ; } } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { } } } finally { mObservers.finishBroadcast ( ) ; } }
public static boolean isBlocked ( android.content.Context context , java.lang.String phoneNumber ) { final android.os.Bundle res = context.getContentResolver ( ) . call ( android.provider.BlockedNumberContract.AUTHORITY_URI , android.provider.BlockedNumberContract.METHOD_IS_BLOCKED , phoneNumber , null ) ; return ( res != null ) && ( res.getBoolean ( android.provider.BlockedNumberContract.RES_NUMBER_IS_BLOCKED , false ) ) ; }
void handleLaunchTaskBehindCompleteLocked ( com.android.server.am.ActivityRecord r ) { r.mLaunchTaskBehind = false ; final com.android.server.am.TaskRecord task = r.task ; task.setLastThumbnail ( task.stack.screenshotActivities ( r ) ) ; mService.addRecentTaskLocked ( task ) ; mWindowManager.setAppVisibility ( r.appToken , false ) ; }
private com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo getContainingPadding ( int start , int end , int x , com.android.draw9patch.ui.ImageViewer.UpdateRegion region ) { com.android.draw9patch.ui.Pair < java.lang.Integer > p = null ; if ( ( x >= start ) && ( x <= end ) ) { p = new com.android.draw9patch.ui.Pair < java.lang.Integer > ( start , end ) ; } return new com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo ( region , p ) ; }
private int calculateBaselineRouteMessage ( boolean isExplicitUserRequest ) { if ( ( ( mAvailableRoutes ) & ( com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_EARPIECE ) ) != 0 ) { return isExplicitUserRequest ? com.android.server.telecom.CallAudioRouteStateMachine.USER_SWITCH_EARPIECE : com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_EARPIECE ; } else if ( ( ( mAvailableRoutes ) & ( com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_WIRED_HEADSET ) ) != 0 ) { return isExplicitUserRequest ? com.android.server.telecom.CallAudioRouteStateMachine.USER_SWITCH_HEADSET : com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET ; } else { return isExplicitUserRequest ? com.android.server.telecom.CallAudioRouteStateMachine.USER_SWITCH_SPEAKER : com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_SPEAKER ; } }
public com.google.common.collect.ImmutableList < com.android.manifmerger.Actions.NodeRecord > getNodeRecords ( com.android.manifmerger.XmlNode.NodeKey key ) { return mRecords.containsKey ( key ) ? mRecords.get ( key ) . getNodeRecords ( ) : com.google.common.collect.ImmutableList.< com.android.manifmerger.Actions.NodeRecord > of ( ) ; }
void onPostDialWait ( com.android.server.telecom.Call call , java.lang.String remaining ) { if ( ! ( mInCallServices.isEmpty ( ) ) ) { com.android.server.telecom.Log.i ( this , "Calling onPostDialWait, remaining = %s" , remaining ) ; for ( com.android.internal.telecom.IInCallService inCallService : mInCallServices.values ( ) ) { try { inCallService.setPostDialWait ( mCallIdMapper.getCallId ( call ) , remaining ) ; } catch ( android.os.RemoteException ignored ) { } } } }
synchronized void nAllocationElementRead ( long id , int xoff , int yoff , int zoff , int mip , int compIdx , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationElementRead ( mContext , id , xoff , yoff , zoff , mip , compIdx , d , sizeBytes , dt.mID ) ; }
private boolean shouldTurnOffFullNetworkUpdate ( ) { return ( mIsPowerSaveOn ) || ( ( ( ! ( mIsCharging ) ) && ( ! ( mIsScreenOn ) ) ) && ( ! ( mIsTetheringOn ) ) ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( "AaptOptions{" + ", ignoreAssets=" ) + ( ignoreAssets ) ) + ", noCompress=" ) + ( noCompress ) ) + ", failOnMissingConfigEntry=" ) + ( failOnMissingConfigEntry ) ) + "}" ; }
public final byte [ ] doFinal ( byte [ ] input ) throws java.lang.IllegalStateException { if ( ! ( isInitMac ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( input != null ) { spiImpl.engineUpdate ( input , 0 , input.length ) ; } return spiImpl.engineDoFinal ( ) ; }
public void Dispose ( ) { for ( org.eclipse.swt.graphics.Image icon : mIconMap.values ( ) ) { if ( icon != null ) { icon.dispose ( ) ; } } mIconMap.clear ( ) ; }
private java.lang.String getIcuLocaleId ( ) { if ( ( cachedIcuLocaleId ) == null ) { cachedIcuLocaleId = libcore.icu.ICU.localeIdFromLocale ( this ) ; } return cachedIcuLocaleId ; }
void resetProperties ( ) { if ( ( mCurrentAppType ) == ( com.android.internal.telephony.uicc.UiccController.APP_FAM_3GPP ) ) { log ( ( "update icc_operator_numeric=" + "" ) ) ; mTelephonyManager.setSimOperatorNumericForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimCountryIsoForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimOperatorNameForPhone ( mPhoneId , "" ) ; } }
private void onInstallSelectedArchives ( ) { java.util.ArrayList < com.android.sdklib.internal.repository.Archive > archives = new java.util.ArrayList < com.android.sdklib.internal.repository.Archive > ( ) ; for ( java.lang.Object element : mTreeViewerSources.getCheckedElements ( ) ) { if ( element instanceof com.android.sdklib.internal.repository.Archive ) { archives.add ( ( ( com.android.sdklib.internal.repository.Archive ) ( element ) ) ) ; } } if ( ( mUpdaterData ) != null ) { mUpdaterData.updateOrInstallAll_WithGUI ( archives ) ; } }
public java.lang.String getProperty ( @ javax.annotation.Nonnull java.lang.String key ) throws com.android.jack.library.LibraryFormatException { if ( ! ( libraryProperties.containsKey ( key ) ) ) { com.android.jack.library.CommonJackLibrary.logger.log ( java.util.logging.Level.SEVERE , ( ( ( ( "Property " + key ) + " from the library " ) + ( getLocation ( ) . getDescription ( ) ) ) + " does not exist" ) ) ; throw new com.android.jack.library.LibraryFormatException ( getLocation ( ) ) ; } return ( ( java.lang.String ) ( libraryProperties.get ( key ) ) ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "name" , name ) . add ( "storeLocation" , getStoreLocation ( ) ) . add ( "storePassword" , getStorePassword ( ) ) . add ( "keyAlias" , getKeyAlias ( ) ) . add ( "keyPassword" , getKeyPassword ( ) ) . add ( "storeType" , getStoreFile ( ) ) . toString ( ) ; }
void setBeamShareActivityState ( boolean enabled ) { android.os.UserManager um = ( ( android.os.UserManager ) ( mContext.getSystemService ( Context.USER_SERVICE ) ) ) ; java.util.List < android.os.UserHandle > luh = um.getUserProfiles ( ) ; for ( android.os.UserHandle uh : luh ) { enforceBeamShareActivityPolicy ( mContext , uh , enabled ) ; } }
public void test_socket_accept_Nonblocking_Bound ( ) throws java.io.IOException { serverChannel.configureBlocking ( false ) ; java.net.ServerSocket gotSocket = serverChannel.socket ( ) ; gotSocket.bind ( null ) ; try { gotSocket.accept ( ) ; fail ( "Should throw an IllegalBlockingModeException" ) ; } catch ( java.nio.channels.IllegalBlockingModeException e ) { } serverChannel.close ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw a ClosedChannelException" ) ; } catch ( java.nio.channels.ClosedChannelException e ) { } }
protected com.android.sched.vfs.OutputVFile getOutputDex ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVFS outputVfs , int dexCount ) throws com.android.jack.backend.dex.DexWritingException { assert dexCount >= 1 ; java.lang.String dexName ; if ( dexCount == 1 ) { dexName = DexFileWriter.DEX_FILENAME ; } else { dexName = ( ( DexFileWriter.DEX_PREFIX ) + dexCount ) + ( FileType.DEX.getFileExtension ( ) ) ; } try { return outputVfs.getRootOutputVDir ( ) . createOutputVFile ( new com.android.sched.vfs.VPath ( dexName , '/' ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new com.android.jack.backend.dex.DexWritingException ( e ) ; } }
public byte [ ] iccExchangeSimIO ( int fileID , int command , int p1 , int p2 , int p3 , java.lang.String filePath ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccExchangeSimIO ( fileID , command , p1 , p2 , p3 , filePath ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public void setVideoProvider ( com.android.internal.telecom.IVideoProvider videoProvider ) { android.telecom.Log.v ( this , "setVideoProvider" ) ; if ( videoProvider != null ) { try { mVideoProviderProxy = new com.android.server.telecom.VideoProviderProxy ( mLock , videoProvider , this ) ; } catch ( android.os.RemoteException ignored ) { } } else { mVideoProviderProxy = null ; } mVideoProvider = videoProvider ; for ( com.android.server.telecom.Call.Listener l : mListeners ) { l.onVideoCallProviderChanged ( this ) ; } }
public com.android.sched.scheduler.Plan < T > getPlan ( ) { assert ( request ) != null ; com.android.sched.util.log.Event event = tracer.start ( SchedEventType.PLANBUILDER ) ; try { plan.initPlan ( request , this ) ; } finally { event.end ( ) ; } return plan ; }
public static java.lang.String getListViewFqcn ( java.lang.Class < ? > clz ) { java.lang.String fqcn = clz.getName ( ) ; if ( fqcn.endsWith ( com.android.ide.common.layout.LayoutConstants.LIST_VIEW ) ) { return fqcn ; } else if ( fqcn.startsWith ( com.android.ide.common.layout.LayoutConstants.ANDROID_PKG_PREFIX ) ) { return null ; } java.lang.Class < ? > superClass = clz.getSuperclass ( ) ; if ( superClass != null ) { return com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback.getListViewFqcn ( superClass ) ; } else { return null ; } }
public void run ( ) { if ( file.delete ( ) ) { logger.log ( java.util.logging.Level.FINE , "Remove {0} (''{1}'')" , new java.lang.Object [ ] { location.getDescription ( ) , file.getAbsoluteFile ( ) } ) ; } else { logger.log ( java.util.logging.Level.SEVERE , "Can not delete {0}" , location.getDescription ( ) ) ; } }
private void handleClearItemSelected ( ) { android.content.ContentResolver resolver = getContentResolver ( ) ; resolver.delete ( TestResultsProvider.RESULTS_CONTENT_URI , "1" , null ) ; android.widget.Toast.makeText ( this , R.string.test_results_cleared , Toast.LENGTH_SHORT ) . show ( ) ; }
private void responseStrings ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String ... str ) { java.util.ArrayList < java.lang.String > strings = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( str.length ) ; i ++ ) { strings.add ( str [ i ] ) ; } responseStringArrayList ( responseInfo , strings ) ; }
void unhold ( ) { com.android.internal.util.Preconditions.checkNotNull ( mConnectionService ) ; if ( ( mState ) == ( CallState.ON_HOLD ) ) { mConnectionService.unhold ( this ) ; com.android.server.telecom.Log.event ( this , Log.Events.REQUEST_UNHOLD ) ; } }
public void onCreate ( ) { super . onCreate ( ) ; mFacadeManager = new com.googlecode.android_scripting.facade.FacadeManager ( com.googlecode.android_scripting.facade.FacadeConfiguration.getSdkLevel ( ) , this , null , com.googlecode.android_scripting.facade.FacadeConfiguration.getFacadeClasses ( ) ) ; mEventFacade = mFacadeManager.getReceiver ( com.googlecode.android_scripting.facade.EventFacade.class ) ; mTriggerRepository = ( ( com.googlecode.android_scripting.BaseApplication ) ( getApplication ( ) ) ) . getTriggerRepository ( ) ; mTriggerRepository.bootstrapObserver ( new com.googlecode.android_scripting.activity.TriggerService.RepositoryObserver ( ) ) ; mTriggerRepository.bootstrapObserver ( new com.googlecode.android_scripting.trigger.EventGenerationControllingObserver ( mFacadeManager ) ) ; installAlarm ( ) ; }
private java.lang.StringBuffer subformat ( int number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr ) { if ( ( currencySignCount ) == ( com.ibm.icu.text.DecimalFormat.CURRENCY_SIGN_COUNT_IN_PLURAL_FORMAT ) ) { return subformat ( currencyPluralInfo.select ( getFixedDecimal ( number ) ) , result , fieldPosition , isNegative , isInteger , parseAttr ) ; } else { return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr ) ; } }
public void sendSMS ( java.lang.String smscPDU , java.lang.String pdu , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SEND_SMS , result ) ; constructGsmSendSmsRilRequest ( rr , smscPDU , pdu ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; mMetrics.writeRilSendSms ( mInstanceId , rr.mSerial , SmsSession.Event.Tech.SMS_GSM , SmsSession.Event.Format.SMS_FORMAT_3GPP ) ; send ( rr ) ; }
protected java.util.List < com.intellij.refactoring.safeDelete.PsiMethod > computeCallers ( ) { if ( getTopMethod ( ) . equals ( getMethod ( ) ) ) { final java.util.ArrayList < com.intellij.refactoring.safeDelete.usageInfo.SafeDeleteParameterCallHierarchyUsageInfo > items = getTopLevelItems ( ) ; return com.intellij.util.containers.ContainerUtil.map ( items , new com.intellij.util.Function < com.intellij.refactoring.safeDelete.usageInfo.SafeDeleteParameterCallHierarchyUsageInfo , com.intellij.refactoring.safeDelete.PsiMethod > ( ) { @ java.lang.Override public com.intellij.refactoring.safeDelete.PsiMethod fun ( com.intellij.refactoring.safeDelete.usageInfo.SafeDeleteParameterCallHierarchyUsageInfo info ) { return info.getCallerMethod ( ) ; } } ) ; } return super . computeCallers ( ) ; }
public void setMinusSign ( char minusSign ) { this . minusSign = minusSign ; char [ ] minusArray = new char [ ] { minusSign } ; minusString = new java.lang.String ( minusArray ) ; }
public void testWrongSeparator1 ( ) throws java.lang.Exception { mScopes = null ; assertEquals ( ( "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n" + ( ( " <activity\n" + " ^\n" ) + "1 errors, 0 warnings\n" ) ) , lintProject ( "registration/AndroidManifestWrong.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" , "registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java" ) ) ; }
static < T > T record ( @ com.android.annotations.NonNull org.gradle.api.Project project , @ com.android.annotations.NonNull com.android.builder.profile.ExecutionType executionType , @ com.android.annotations.NonNull com.android.build.gradle.internal.profile.Closure < T > closure ) { return ( ( T ) ( com.android.builder.profile.ThreadRecorder.get ( ) . record ( executionType , new com.android.builder.profile.Recorder.Block ( ) { @ java.lang.Override java.lang.Object call ( ) throws java.lang.Exception { return closure.call ( ) ; } } , new com.android.builder.profile.Recorder.Property ( com.android.build.gradle.internal.profile.SpanRecorders.PROJECT , project.getName ( ) ) ) ) ) ; }
private com.android.server.am.ActivityRecord getWaitingHistoryRecordLocked ( ) { com.android.server.am.ActivityRecord r = this ; final com.android.server.am.ActivityStack stack = task.stack ; if ( r.waitingVisible ) { r = stack.mResumedActivity ; if ( r == null ) { r = stack.mPausingActivity ; } if ( r == null ) { r = this ; } } return r ; }
public void ensureRetentionPolicy ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedAnnotation loaded ) { synchronized ( this ) { if ( isLoaded ( com.android.jack.ir.impl.EcjSourceTypeLoader.Scope.RETENTION ) ) { return ; } loaded.setRetentionPolicy ( com.android.jack.ir.impl.ReferenceMapper.getRetentionPolicy ( getBinding ( ) . getAnnotationTagBits ( ) ) ) ; markLoaded ( com.android.jack.ir.impl.EcjSourceTypeLoader.Scope.RETENTION , loaded ) ; } }
public boolean isBondingInitiatedLocally ( ) { try { return android.bluetooth.BluetoothDevice.sService.isBondingInitiatedLocally ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public int compareTo ( com.android.dx.io.EncodedValue other ) { int size = java.lang.Math.min ( data.length , other.data.length ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( ( data [ i ] ) != ( other.data [ i ] ) ) { return ( ( data [ i ] ) & 255 ) - ( ( other.data [ i ] ) & 255 ) ; } } return ( data.length ) - ( other.data.length ) ; }
public void copyFrom ( short [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
public void testCancelSoon ( ) throws java.lang.Exception { if ( ! ( doTestDragAndDrop ( android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON , android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE , null ) ) ) { return ; } assertResult ( android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED , android.wm.cts.CrossAppDragAndDropTests.RESULT_OK ) ; assertResult ( android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS , android.wm.cts.CrossAppDragAndDropTests.RESULT_OK ) ; }
private static final int getCharScript ( int script ) { switch ( script ) { case com.ibm.icu.lang.UScript.SIMPLIFIED_HAN : case com.ibm.icu.lang.UScript.TRADITIONAL_HAN : return com.ibm.icu.lang.UScript.HAN ; case com.ibm.icu.lang.UScript.JAPANESE : return com.ibm.icu.lang.UScript.HIRAGANA ; case com.ibm.icu.lang.UScript.KOREAN : return com.ibm.icu.lang.UScript.HANGUL ; default : return script ; } }
public static void createjar ( @ javax.annotation.Nonnull java.io.File jarfile , @ javax.annotation.Nonnull java.io.File inputFiles ) { java.lang.String [ ] args = new java.lang.String [ ] { "jar" , "cf" , jarfile.getAbsolutePath ( ) , "-C" , inputFiles.getAbsolutePath ( ) , "." } ; com.android.jack.test.util.ExecuteFile execFile = new com.android.jack.test.util.ExecuteFile ( args ) ; try { if ( ( execFile.run ( ) ) != 0 ) { throw new java.lang.RuntimeException ( "Jar exited with an error" ) ; } } catch ( com.android.jack.test.util.ExecFileException e ) { throw new java.lang.RuntimeException ( "An error occured while running jar command" , e ) ; } }
protected org.bouncycastle.asn1.x9.X9ECParameters createParameters ( ) { org.bouncycastle.math.ec.ECCurve curve = org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves.configureCurve ( new org.bouncycastle.math.ec.ECCurve.Fp ( new java.math.BigInteger ( "AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3" , 16 ) , new java.math.BigInteger ( "AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F0" , 16 ) , new java.math.BigInteger ( "7CBBBCF9441CFAB76E1890E46884EAE321F70C0BCB4981527897504BEC3E36A62BCDFA2304976540F6450085F2DAE145C22553B465763689180EA2571867423E" , 16 ) ) ) ; return new org.bouncycastle.asn1.x9.X9ECParameters ( curve , curve.decodePoint ( org.bouncycastle.util.encoders.Hex.decode ( "04640ECE5C12788717B9C1BA06CBC2A6FEBA85842458C56DDE9DB1758D39C0313D82BA51735CDB3EA499AA77A7D6943A64F7A3F25FE26F06B51BAA2696FA9035DA5B534BD595F5AF0FA2C892376C84ACE1BB4E3019B71634C01131159CAE03CEE9D9932184BEEF216BD71DF2DADF86A627306ECFF96DBB8BACE198B61E00F8B332" ) ) , new java.math.BigInteger ( "AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069" , 16 ) , new java.math.BigInteger ( "01" , 16 ) ) ; }
public static void populateEndpointParameters ( java.util.Map < java.lang.String , java.lang.Object > replacementMap , java.lang.String rootPackage ) { replacementMap.put ( com.google.gct.idea.appengine.wizard.AppEngineTemplates.ATTR_ENDPOINTS_OWNER , rootPackage ) ; replacementMap.put ( com.google.gct.idea.appengine.wizard.AppEngineTemplates.ATTR_ENDPOINTS_PACKAGE , "" ) ; }
public org.bouncycastle.cms.SignerInformationVerifier get ( org.bouncycastle.cms.SignerId signerId ) throws org.bouncycastle.operator.OperatorCreationException { if ( org.bouncycastle.cms.test.NewSignedDataTest._signCert.getSerialNumber ( ) . equals ( signerId.getSerialNumber ( ) ) ) { return new org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoVerifierBuilder ( ) . setProvider ( org.bouncycastle.cms.test.NewSignedDataTest.BC ) . build ( org.bouncycastle.cms.test.NewSignedDataTest._signCert ) ; } else { return new org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoVerifierBuilder ( ) . setProvider ( org.bouncycastle.cms.test.NewSignedDataTest.BC ) . build ( org.bouncycastle.cms.test.NewSignedDataTest._origCert ) ; } }
boolean stopVoiceRecognition ( android.bluetooth.BluetoothDevice device ) { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientService.TAG , "stopVoiceRecognition API not available" ) ; return false ; }
public void visitProgramMethod ( proguard.optimize.info.ProgramClass programClass , proguard.optimize.info.ProgramMethod programMethod ) { hasSideEffects = ( ! ( proguard.optimize.info.NoSideEffectMethodMarker.hasNoSideEffects ( programMethod ) ) ) && ( ( proguard.optimize.info.SideEffectMethodMarker.hasSideEffects ( programMethod ) ) || ( ( ! ( programClass.equals ( referencingClass ) ) ) && ( ! ( initializedSuperClasses ( referencingClass ) . containsAll ( initializedSuperClasses ( programClass ) ) ) ) ) ) ; }
private void recordTosAcceptance ( ) { if ( isVvm3 ( ) ) { preferences.edit ( ) . putInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_VVM3_TOS_VERSION_ACCEPTED_KEY , com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_VVM3_TOS_VERSION ) . apply ( ) ; } else { preferences.edit ( ) . putInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_DIALER_TOS_VERSION_ACCEPTED_KEY , com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_DIALER_TOS_VERSION ) . apply ( ) ; } android.telecom.PhoneAccountHandle handle = new android.telecom.PhoneAccountHandle ( android.content.ComponentName.unflattenFromString ( status.phoneAccountComponentName ) , status.phoneAccountId ) ; com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) . onTosAccepted ( context , handle ) ; }
private int getInternalStateUid ( int clientId ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.nan.WifiNanServiceImpl.class . getDeclaredField ( "mUidByClientId" ) ; field.setAccessible ( true ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) android.util.SparseIntArray uidByClientId = ( ( android.util.SparseIntArray ) ( field.get ( mDut ) ) ) ; return uidByClientId.get ( clientId , ( - 1 ) ) ; }
private void postMessage ( int messageCode , boolean shouldCreateHandler , com.android.internal.os.SomeArgs args ) { synchronized ( this ) { if ( ( ( mHandler ) == null ) && shouldCreateHandler ) { mHandler = getNewHandler ( ) ; } if ( ( mHandler ) == null ) { com.android.server.telecom.Log.d ( this , "Message %d skipped because there is no handler." , messageCode ) ; } else { mHandler.obtainMessage ( messageCode , args ) . sendToTarget ( ) ; } } }
private static int getGroupSourceReqOp ( int javaValue ) { switch ( javaValue ) { case libcore.io.IoBridge.JAVA_MCAST_JOIN_SOURCE_GROUP : return MCAST_JOIN_SOURCE_GROUP ; case libcore.io.IoBridge.JAVA_MCAST_LEAVE_SOURCE_GROUP : return MCAST_LEAVE_SOURCE_GROUP ; case libcore.io.IoBridge.JAVA_MCAST_BLOCK_SOURCE : return MCAST_BLOCK_SOURCE ; case libcore.io.IoBridge.JAVA_MCAST_UNBLOCK_SOURCE : return MCAST_UNBLOCK_SOURCE ; default : throw new java.lang.AssertionError ( ( "Unknown java value for setsocketopt op lookup: " + javaValue ) ) ; } }
public int totalCount ( ) { synchronized ( mScoClients ) { int count = 0 ; int size = mScoClients.size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { count += mScoClients.get ( i ) . getCount ( ) ; } return count ; } }
private static void handleSystemServerProcess ( com.android.internal.os.ZygoteConnection.Arguments parsedArgs ) throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller { com.android.internal.os.ZygoteInit.closeServerSocket ( ) ; Libcore.os.umask ( ( ( libcore.io.OsConstants.S_IRWXG ) | ( libcore.io.OsConstants.S_IRWXO ) ) ) ; if ( ( parsedArgs.niceName ) != null ) { java.lang.Process.setArgV0 ( parsedArgs.niceName ) ; } if ( ( parsedArgs.invokeWith ) != null ) { com.android.internal.os.WrapperInit.execApplication ( parsedArgs.invokeWith , parsedArgs.niceName , parsedArgs.targetSdkVersion , null , parsedArgs.remainingArgs ) ; } else { com.android.internal.os.RuntimeInit.zygoteInit ( parsedArgs.targetSdkVersion , parsedArgs.remainingArgs ) ; } }
public void setDataDependency ( int networkType , boolean met ) { try { mService.setDataDependency ( networkType , met ) ; } catch ( android.os.RemoteException e ) { } }
static int getMajorVersion ( ) { java.lang.String version = android.opengl.GLES20.glGetString ( GLES20.GL_VERSION ) ; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile ( "OpenGL ES ([0-9]+)\\.([0-9]+)" ) ; java.util.regex.Matcher matcher = pattern.matcher ( version ) ; if ( matcher.find ( ) ) { return java.lang.Integer.parseInt ( matcher.group ( 1 ) ) ; } return 2 ; }
void stop ( ) { if ( ( mDefaultNetworkCallback ) != null ) { getConnectivityManager ( ) . unregisterNetworkCallback ( mDefaultNetworkCallback ) ; mDefaultNetworkCallback = null ; } if ( ( mDunTetheringCallback ) != null ) { getConnectivityManager ( ) . unregisterNetworkCallback ( mDunTetheringCallback ) ; mDunTetheringCallback = null ; } mNetworkMap.clear ( ) ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , float [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * 4 ) ) ; }
public void installPackage ( @ com.android.annotations.NonNull java.io.File apkFile , int timeout ) throws com.android.builder.testing.api.DeviceException { try { iDevice.installPackage ( apkFile.getAbsolutePath ( ) , true ) ; } catch ( java.lang.Exception e ) { throw new com.android.builder.testing.api.DeviceException ( e ) ; } }
public void testReleaseVersion ( ) { assertEquals ( android.os.cts.BuildVersionTest.EXPECTED_RELEASE , Build.VERSION.RELEASE ) ; assertEquals ( android.os.cts.BuildVersionTest.EXPECTED_SDK , Build.VERSION.SDK ) ; }
public void bind ( java.net.SocketAddress localAddr ) throws java.net.SocketException { if ( channelImpl.isConnected ( ) ) { throw new java.nio.channels.AlreadyConnectedException ( ) ; } super . bind ( localAddr ) ; channelImpl.isBound = true ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationLiteral literal ) { for ( com.android.jack.ir.ast.JNameValuePair pair : literal.getNameValuePairs ( ) ) { com.android.jack.ir.ast.JMethodId id = getResolvedMethodId ( literal.getType ( ) , pair.getMethodId ( ) ) ; pair.resolveMethodId ( id ) ; } return super . visit ( literal ) ; }
protected boolean start ( ) { if ( com.android.bluetooth.pbapclient.PbapClientService.DBG ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "onStart" ) ; } android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( BluetoothDevice.ACTION_ACL_DISCONNECTED ) ; filter.addAction ( Intent.ACTION_USER_UNLOCKED ) ; try { registerReceiver ( mPbapBroadcastReceiver , filter ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "Unable to register pbapclient receiver" , e ) ; } removeUncleanAccounts ( ) ; com.android.bluetooth.pbapclient.PbapClientService.setPbapClientService ( this ) ; return true ; }
public void testVrHighPerformanceVP9 ( ) throws java.lang.Exception { if ( ! ( supportsVrHighPerformance ( ) ) ) { android.cts.util.MediaUtils.skipTest ( android.media.cts.DecoderTest.TAG , "FEATURE_VR_MODE_HIGH_PERFORMANCE not present" ) ; return ; } boolean vp9IsReady = android.media.cts.DecoderTest.doesMimeTypeHaveVrReadyCodec ( MediaFormat.MIMETYPE_VIDEO_VP9 ) ; if ( ! vp9IsReady ) { android.cts.util.MediaUtils.skipTest ( android.media.cts.DecoderTest.TAG , "VP9 isn't required to be VR ready" ) ; return ; } decodeInParallel ( R.raw.bbb_s2_1920x1080_webm_vp9_0p41_10mbps_60fps_vorbis_6ch_384kbps_22050hz , 300 , 30 , 4 ) ; }
public void onServiceDisconnected ( android.content.ComponentName name ) { finish ( ) ; }
public void setEnabled ( com.google.gct.testing.dimension.CloudTestingType type , boolean isEnabled ) { checkIsEditable ( ) ; validateType ( type ) ; if ( isEnabled ) { enableType ( type ) ; } else { enabledTypes.remove ( type ) ; } }
public void test_close ( ) throws java.io.IOException { oos.writeBytes ( "HelloWorld" ) ; oos.close ( ) ; ois = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( bao.toByteArray ( ) ) ) ; ois.close ( ) ; }
private native java.lang.String getHostByAddr0 ( byte [ ] addr ) throws java.net.UnknownHostException ;
public boolean validates ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull java.lang.String value ) { try { return ( java.lang.Integer.parseInt ( value ) ) > 0 ; } catch ( java.lang.NumberFormatException e ) { mergingReport.addError ( java.lang.String.format ( "Attribute %1$s at %2$s must be an integer, found %3$s" , attribute.getId ( ) , attribute.printPosition ( ) , value ) ) ; return false ; } }
void collapseViewHolder ( ) { transcriptionTextView.setMaxLines ( 1 ) ; isViewHolderExpanded = false ; mediaPlayerView.setVisibility ( View.GONE ) ; }
public static void computeNativePowr ( android.renderscript.cts.TestNativePowr.ArgumentsFloatFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 32000 , 32000 , true ) ; if ( ( java.lang.Math.abs ( args.inV ) ) < 1.0E-20 ) { args.out = android.renderscript.cts.CoreMathVerifier.any32 ( t ) ; } else { args.out = android.renderscript.cts.CoreMathVerifier.powr ( args.inV , args.inY , t ) ; } }
public final void dumpInstanceCounts ( ) { for ( com.android.tools.perflib.heap.ClassObj theClass : mClassesById.values ( ) ) { int count = theClass.mInstances.size ( ) ; if ( count > 0 ) { java.lang.System.out.println ( ( ( theClass + ": " ) + count ) ) ; } } }
static void acquireScreenCpuWakeLock ( android.content.Context context ) { if ( ( com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.sCpuWakeLock ) != null ) { return ; } android.os.PowerManager pm = ( ( android.os.PowerManager ) ( context.getSystemService ( Context.POWER_SERVICE ) ) ) ; com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.sCpuWakeLock = pm.newWakeLock ( ( ( ( android.os.PowerManager.PARTIAL_WAKE_LOCK ) | ( android.os.PowerManager.ACQUIRE_CAUSES_WAKEUP ) ) | ( android.os.PowerManager.ON_AFTER_RELEASE ) ) , com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.TAG ) ; com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.sCpuWakeLock.acquire ( ) ; android.util.Log.d ( com.android.cellbroadcastreceiver.CellBroadcastAlertWakeLock.TAG , "acquired screen + CPU wake lock" ) ; }
public boolean open ( ) { createShell ( ) ; createContents ( ) ; positionShell ( ) ; postCreate ( ) ; mShell.open ( ) ; mShell.layout ( ) ; org.eclipse.swt.widgets.Display display = getParent ( ) . getDisplay ( ) ; while ( ! ( mShell.isDisposed ( ) ) ) { if ( ! ( display.readAndDispatch ( ) ) ) { display.sleep ( ) ; } } return mReturnValue ; }
public void reportLocation ( android.location.Location location , boolean passive ) { if ( ( mContext.checkCallingOrSelfPermission ( com.android.server.LocationManagerService.INSTALL_LOCATION_PROVIDER ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( "Requires INSTALL_LOCATION_PROVIDER permission" ) ; } mLocationHandler.removeMessages ( com.android.server.LocationManagerService.MESSAGE_LOCATION_CHANGED , location ) ; android.os.Message m = android.os.Message.obtain ( mLocationHandler , com.android.server.LocationManagerService.MESSAGE_LOCATION_CHANGED , location ) ; m.arg1 = ( passive ) ? 1 : 0 ; mLocationHandler.sendMessageAtFrontOfQueue ( m ) ; }
protected synchronized void implCloseSelectableChannel ( ) throws java.io.IOException { onDisconnect ( true ) ; libcore.io.IoBridge.closeSocket ( fd ) ; if ( ( ( socket ) != null ) && ( ! ( socket.isClosed ( ) ) ) ) { socket.onClose ( ) ; } }
public final int integer_literal ( ) throws org.jf.smali.RecognitionException { int value = 0 ; org.antlr.runtime.tree.CommonTree INTEGER_LITERAL191 = null ; try { { INTEGER_LITERAL191 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.INTEGER_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_INTEGER_LITERAL_in_integer_literal3247 ) ) ) ; value = org.jf.smali.LiteralTools.parseInt ( ( INTEGER_LITERAL191 != null ? INTEGER_LITERAL191.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
boolean isAudioConnected ( android.bluetooth.BluetoothDevice device ) { synchronized ( this ) { if ( ( ( ( getCurrentState ( ) ) == ( mAudioOn ) ) && ( mCurrentDevice.equals ( device ) ) ) && ( ( mAudioState ) != ( android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ) ) ) { return true ; } } return false ; }
private boolean differentLocalAddressTypes ( java.net.Inet6Address other ) { if ( ( isLinkLocalAddress ( ) ) && ( ! ( other.isLinkLocalAddress ( ) ) ) ) { return false ; } if ( ( isSiteLocalAddress ( ) ) && ( ! ( other.isSiteLocalAddress ( ) ) ) ) { return false ; } return true ; }
public void test_doOutput ( ) throws java.lang.Throwable { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.setUpStoreProperties ( ) ; javax.net.ssl.SSLServerSocket ss = ( ( javax.net.ssl.SSLServerSocket ) ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getServerSocketFactory ( ) . createServerSocket ( 0 ) ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier hnv = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier ( ) ; javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier ( hnv ) ; java.net.URL url = new java.net.URL ( ( "https://localhost:" + ( ss.getLocalPort ( ) ) ) ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( ) ) ) ; connection.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; connection.setDoOutput ( true ) ; javax.net.ssl.SSLSocket peerSocket = ( ( javax.net.ssl.SSLSocket ) ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.doInteraction ( connection , ss ) ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.checkConnectionStateParameters ( connection , peerSocket ) ; connection.connect ( ) ; }
public boolean sendMessage ( byte [ ] bytes , int offset , int count ) throws android.system.ErrnoException , java.io.InterruptedIOException { return sendMessage ( bytes , offset , count , 0 ) ; }
public final short getAByte ( ) { int a = getA ( ) ; if ( ( a & ( ~ 255 ) ) != 0 ) { throw new com.android.jack.dx.util.DexException ( ( "Register A out of range: " + ( com.android.jack.dx.util.Hex.u8 ( a ) ) ) ) ; } return ( ( short ) ( a ) ) ; }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { putProperty ( fileType.getPropertyName ( ) , java.lang.String.valueOf ( true ) ) ; return outputVDir.createOutputVFile ( new com.android.sched.vfs.VPath ( ( ( typePath.getPathAsString ( '/' ) ) + ( fileType.getFileExtension ( ) ) ) , '/' ) ) ; }
public void onCallerInfoQueryComplete ( android.net.Uri queryHandle , com.android.internal.telephony.CallerInfo info ) { if ( ! ( java.util.Objects.equals ( queryHandle , handle ) ) ) { com.android.server.telecom.Log.w ( this , ( "CallerInfo query returned with " + "different handle." ) ) ; return ; } if ( ( info.contactDisplayPhotoUri ) == null ) { com.android.server.telecom.ui.CallInfo callInfo = callInfoFactory.makeCallInfo ( info , null , handle , date ) ; showMissedCallNotification ( callInfo , userHandle ) ; } }
protected void sortAndNumberInternal ( @ javax.annotation.Nonnull java.util.ArrayList < com.android.jack.ir.ast.JDefinedClassOrInterface > defaultList , @ javax.annotation.Nonnull java.util.ArrayList < com.android.jack.ir.ast.JDefinedClassOrInterface > mainList ) { java.util.Collections.sort ( defaultList , nameComp ) ; int number = 0 ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : mainList ) { type.addMarker ( new com.android.jack.backend.dex.NumberMarker ( ( number ++ ) ) ) ; } for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : defaultList ) { type.addMarker ( new com.android.jack.backend.dex.NumberMarker ( ( number ++ ) ) ) ; } }
public void copyFrom ( com.android.systemui.statusbar.policy.State s ) { super . copyFrom ( s ) ; com.android.systemui.statusbar.policy.MobileSignalController.MobileState state = ( ( com.android.systemui.statusbar.policy.MobileSignalController.MobileState ) ( s ) ) ; dataSim = state.dataSim ; networkName = state.networkName ; networkNameData = state.networkNameData ; dataConnected = state.dataConnected ; isDefault = state.isDefault ; isEmergency = state.isEmergency ; airplaneMode = state.airplaneMode ; carrierNetworkChangeMode = state.carrierNetworkChangeMode ; }
public void testManifestIExistingE ( ) { int iFlags = PackageManager.INSTALL_EXTERNAL ; int rFlags = PackageManager.INSTALL_REPLACE_EXISTING ; installFromRawResource ( "install.apk" , R.raw.install , iFlags , false , false , ( - 1 ) , ( - 1 ) ) ; installFromRawResource ( "install.apk" , R.raw.install_loc_internal , rFlags , true , false , ( - 1 ) , PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY ) ; }
private com.android.internal.telephony.dataconnection.DataConnection.SetupResult setLinkProperties ( com.android.internal.telephony.dataconnection.DataCallResponse response , android.net.LinkProperties linkProperties ) throws java.lang.Exception { java.lang.Class [ ] cArgs = new java.lang.Class [ 2 ] ; cArgs [ 0 ] = com.android.internal.telephony.dataconnection.DataCallResponse.class ; cArgs [ 1 ] = android.net.LinkProperties.class ; java.lang.reflect.Method method = com.android.internal.telephony.dataconnection.DataConnection.class . getDeclaredMethod ( "setLinkProperties" , cArgs ) ; method.setAccessible ( true ) ; return ( ( com.android.internal.telephony.dataconnection.DataConnection.SetupResult ) ( method.invoke ( mDc , response , linkProperties ) ) ) ; }
private void sendAddressedPlayerChanged ( int newAddrPlayerID ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "sendAddressedPlayerChanged: new PlayerID=" + newAddrPlayerID ) ) ; mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_ADDRESSED_PLAYER_CHANGED_RSP , newAddrPlayerID , 0 ) . sendToTarget ( ) ; }
public void testProxyingPackagePrivateMethods_AreIntercepted ( ) throws java.lang.Throwable { assertEquals ( "fake result" , proxyFor ( com.google.dexmaker.stock.ProxyBuilderTest.HasPackagePrivateMethod.class ) . build ( ) . result ( ) ) ; }
protected java.lang.String getRootId ( ) { org.w3c.dom.Element primary = getPrimaryElement ( ) ; if ( primary != null ) { java.lang.String oldId = primary.getAttributeNS ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID ) ; if ( ( oldId != null ) && ( ( oldId.length ( ) ) > 0 ) ) { return oldId ; } } return null ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , int [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * 4 ) , Element.DataType.SIGNED_32 ) ; }
void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.DirectFS.DirectVFile file ) throws com.android.sched.util.file.CannotDeleteFileException { assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ) != 0 ; java.io.File rawFile = file.getNativePath ( ) ; if ( ( ! ( rawFile.delete ( ) ) ) || ( rawFile.exists ( ) ) ) { throw new com.android.sched.util.file.CannotDeleteFileException ( file.getLocation ( ) ) ; } }
public static byte getDirectionality ( int codePoint ) { if ( ( java.lang.Character.getType ( codePoint ) ) == ( java.lang.Character.UNASSIGNED ) ) { return java.lang.Character.DIRECTIONALITY_UNDEFINED ; } byte directionality = java.lang.Character.getDirectionalityImpl ( codePoint ) ; if ( directionality == ( - 1 ) ) { return - 1 ; } return java.lang.Character.DIRECTIONALITY [ directionality ] ; }
public void testLegitPubkeyIsntBlacklisted ( ) throws java.lang.Exception { java.security.PublicKey pk = com.android.org.bouncycastle.jce.provider.CertBlacklistTest.createPublicKey ( com.android.org.bouncycastle.jce.provider.CertBlacklistTest.TEST_CERT ) ; writeBlacklist ( new java.util.HashSet < java.lang.String > ( ) ) ; com.android.org.bouncycastle.jce.provider.CertBlacklist bl = new com.android.org.bouncycastle.jce.provider.CertBlacklist ( tmpFile.getCanonicalPath ( ) , com.android.org.bouncycastle.jce.provider.CertBlacklist.DEFAULT_SERIAL_BLACKLIST_PATH ) ; assertEquals ( bl.isPublicKeyBlackListed ( pk ) , false ) ; }
private void handlePassthroughCmdRequestFromNative ( byte [ ] address , int id , int keyState ) { switch ( id ) { case android.bluetooth.BluetoothAvrcp.PASSTHROUGH_ID_REWIND : rewind ( address , keyState ) ; return ; case android.bluetooth.BluetoothAvrcp.PASSTHROUGH_ID_FAST_FOR : fastForward ( address , keyState ) ; return ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PASS_THROUGH , id , keyState , address ) ; mHandler.sendMessage ( msg ) ; }
public java.lang.String getText ( java.lang.Object element ) { if ( element instanceof com.android.ddmlib.IDevice ) { return ( ( com.android.ddmlib.IDevice ) ( element ) ) . toString ( ) ; } else if ( element instanceof com.android.hierarchyviewerlib.device.Window ) { return ( ( com.android.hierarchyviewerlib.device.Window ) ( element ) ) . getTitle ( ) ; } return null ; }
public void setVisualVoicemailEnabled ( android.telecom.PhoneAccountHandle phoneAccountHandle , boolean enabled ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { telephony.setVisualVoicemailEnabled ( mContext.getOpPackageName ( ) , phoneAccountHandle , enabled ) ; } } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; mManager = new com.android.server.wifi.hotspot2.PasspointManager ( mContext , mWifiInjector ) ; org.mockito.ArgumentCaptor < com.android.server.wifi.hotspot2.PasspointEventHandler.Callbacks > callbacks = org.mockito.ArgumentCaptor.forClass ( PasspointEventHandler.Callbacks.class ) ; org.mockito.Mockito.verify ( mWifiInjector ) . makePasspointEventHandler ( callbacks.capture ( ) ) ; mCallbacks = callbacks.getValue ( ) ; }
public void sendCallEvent ( java.lang.String callId , java.lang.String event , android.os.Bundle extras ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = callId ; args.arg2 = event ; args.arg3 = extras ; mHandler.obtainMessage ( android.telecom.ConnectionService.MSG_SEND_CALL_EVENT , args ) . sendToTarget ( ) ; }
private static void onSubscribeTerminated ( int subscribeId , int status ) { if ( com.android.server.wifi.aware.WifiAwareNative.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNative.TAG , ( ( ( "onSubscribeTerminated: subscribeId=" + subscribeId ) + ", status=" ) + status ) ) ; } com.android.server.wifi.aware.WifiAwareStateManager.getInstance ( ) . onSessionTerminatedNotification ( subscribeId , ( status == ( com.android.server.wifi.aware.WifiAwareNative.AWARE_STATUS_SUCCESS ) ? android.net.wifi.aware.WifiAwareDiscoverySessionCallback.TERMINATE_REASON_DONE : android.net.wifi.aware.WifiAwareDiscoverySessionCallback.TERMINATE_REASON_FAIL ) , false ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { assertEquals ( hostname , org.conscrypt.NativeCrypto.SSL_get_servername ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void setTerminal ( com.android.terminal.Terminal term ) { final com.android.terminal.Terminal orig = mTerm ; if ( orig != null ) { orig.setClient ( null ) ; } mTerm = term ; mScrolled = false ; if ( term != null ) { term.setClient ( mClient ) ; mTermKeys.setTerminal ( term ) ; mRows = mTerm.getRows ( ) ; mCols = mTerm.getCols ( ) ; mScrollRows = mTerm.getScrollRows ( ) ; mAdapter.notifyDataSetChanged ( ) ; } }
public java.lang.String getGccToolchainVersion ( com.android.build.gradle.internal.core.Abi abi ) { if ( ( toolchain ) == ( com.android.build.gradle.internal.core.Toolchain.GCC ) ) { return toolchainVersion.isEmpty ( ) ? getDefaultToolchainVersion ( abi ) : toolchainVersion ; } else { return abi.supports64Bits ( ) ? Toolchain.CLANG.getDefaultGccVersion64 ( ) : Toolchain.CLANG.getDefaultGccVersion32 ( ) ; } }
public void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; assert ( mPreviewVersion.getMajor ( ) ) == ( getRevision ( ) ) ; props.setProperty ( PkgProps.PKG_MINOR_REV , java.lang.Integer.toString ( mPreviewVersion.getMinor ( ) ) ) ; props.setProperty ( PkgProps.PKG_MICRO_REV , java.lang.Integer.toString ( mPreviewVersion.getMicro ( ) ) ) ; props.setProperty ( PkgProps.PKG_PREVIEW_REV , java.lang.Integer.toString ( mPreviewVersion.getPreview ( ) ) ) ; }
protected void abortOnBadSetup ( org.eclipse.jdt.core.IJavaProject javaProject ) throws com.android.ide.eclipse.adt.internal.build.builders.AbortBuildException { super . abortOnBadSetup ( javaProject ) ; org.eclipse.core.resources.IProject iProject = getProject ( ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_AAPT_COMPILE , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_AIDL , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_RENDERSCRIPT , IResource.DEPTH_INFINITE , false ) ; stopOnMarker ( iProject , AndroidConstants.MARKER_ANDROID , IResource.DEPTH_ZERO , false ) ; stopOnMarker ( iProject , org.eclipse.jdt.core.IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER , IResource.DEPTH_INFINITE , true ) ; stopOnMarker ( iProject , org.eclipse.jdt.core.IJavaModelMarker.BUILDPATH_PROBLEM_MARKER , IResource.DEPTH_INFINITE , true ) ; }
public void setChunkedStreamingMode ( int chunkLength ) { if ( super . connected ) { throw new java.lang.IllegalStateException ( "Already connected" ) ; } if ( ( fixedContentLength ) >= 0 ) { throw new java.lang.IllegalStateException ( "Already in fixed-length mode" ) ; } if ( chunkLength <= 0 ) { this . chunkLength = libcore.net.http.HttpEngine.DEFAULT_CHUNK_LENGTH ; } else { this . chunkLength = chunkLength ; } }
private static com.google.doclava.TypeInfo [ ] convertTypes ( com.google.doclava.Type [ ] p ) { if ( p == null ) return null ; int len = p.length ; com.google.doclava.TypeInfo [ ] q = new com.google.doclava.TypeInfo [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { q [ i ] = com.google.doclava.Converter.obtainType ( p [ i ] ) ; } return q ; }
protected void createButtonsForButtonBar ( org.eclipse.swt.widgets.Composite parent ) { createButton ( parent , IDialogConstants.CLOSE_ID , IDialogConstants.CLOSE_LABEL , false ) ; mFindNext = createButton ( parent , com.android.ddmuilib.logcat.FindDialog.FIND_NEXT_ID , "Find Next" , false ) ; mFindPrevious = createButton ( parent , com.android.ddmuilib.logcat.FindDialog.FIND_PREVIOUS_ID , "Find Previous" , true ) ; mFindNext.setEnabled ( false ) ; mFindPrevious.setEnabled ( false ) ; }
public void onAvailable ( android.net.Network network , android.net.NetworkCapabilities networkCapabilities , android.net.LinkProperties linkProperties ) { onAvailable ( network ) ; onCapabilitiesChanged ( network , networkCapabilities ) ; onLinkPropertiesChanged ( network , linkProperties ) ; }
public java.lang.String getSymbol ( java.util.Locale locale ) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.get ( locale ) ; if ( localeData.internationalCurrencySymbol.equals ( currencyCode ) ) { return localeData.currencySymbol ; } java.lang.String symbol = libcore.icu.ICU.getCurrencySymbol ( locale , currencyCode ) ; return symbol != null ? symbol : currencyCode ; }
public void testGrantPreviouslyRevokedWithPrejudiceShowsPrompt23 ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; try { runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testGrantPreviouslyRevokedWithPrejudiceShowsPrompt_part1" ) ; fail ( "App must be killed on a permission revoke" ) ; } catch ( java.lang.Throwable expected ) { } runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testGrantPreviouslyRevokedWithPrejudiceShowsPrompt_part2" ) ; }
android.view.View findViewTagInHeadersOrFooters ( java.util.ArrayList < android.widget.ListView.FixedViewInfo > where , java.lang.Object tag ) { if ( where != null ) { int len = where.size ( ) ; android.view.View v ; for ( int i = 0 ; i < len ; i ++ ) { v = where.get ( i ) . view ; if ( ! ( v.isRootNamespace ( ) ) ) { v = v.findViewWithTag ( tag ) ; if ( v != null ) { return v ; } } } } return null ; }
private ApkVerifier.Result verify ( java.lang.String apkFilenameInResources , java.lang.Integer minSdkVersionOverride ) throws com.android.apksig.apk.ApkFormatException , java.io.IOException , java.security.NoSuchAlgorithmException { byte [ ] apkBytes = getResourceContents ( apkFilenameInResources ) ; com.android.apksig.ApkVerifier.Builder builder = new com.android.apksig.ApkVerifier.Builder ( com.android.apksig.util.DataSources.asDataSource ( java.nio.ByteBuffer.wrap ( apkBytes ) ) ) ; if ( minSdkVersionOverride != null ) { builder.setMinCheckedPlatformVersion ( minSdkVersionOverride ) ; } return builder.build ( ) . verify ( ) ; }
private void addRemoteSample ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.FullRevision minToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = com.android.sdklib.repository.descriptors.PkgDesc.newSample ( version , revision , minToolsRev ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public java.util.Collection < com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem > getResources ( com.android.resources.ResourceType type , com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectResources ) { java.util.Collection < com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem > list = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem > ( ) ; if ( ( mFiles ) != null ) { for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile f : mFiles ) { list.addAll ( f.getResources ( type , projectResources ) ) ; } } return list ; }
public static void recordLinearCountHistogram ( java.lang.String name , int sample , int min , int max , int numBuckets ) { if ( org.chromium.base.metrics.RecordHistogram.sIsDisabledForTests ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordLinearCountHistogram ( name , key , sample , min , max , numBuckets ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
com.android.server.am.BroadcastQueue broadcastQueueForIntent ( android.content.Intent intent ) { final boolean isFg = ( ( intent.getFlags ( ) ) & ( android.content.Intent.FLAG_RECEIVER_FOREGROUND ) ) != 0 ; if ( DEBUG_BROADCAST_BACKGROUND ) android.util.Slog.i ( com.android.server.am.ActivityManagerService.TAG_BROADCAST , ( ( ( ( "Broadcast intent " + intent ) + " on " ) + ( isFg ? "foreground" : "background" ) ) + " queue" ) ) ; return isFg ? mFgBroadcastQueue : mBgBroadcastQueue ; }
public static org.conscrypt.OpenSSLEngine getInstance ( java.lang.String engine ) throws java.lang.IllegalArgumentException { if ( engine == null ) { throw new java.lang.NullPointerException ( "engine == null" ) ; } final long engineCtx ; synchronized ( org.conscrypt.OpenSSLEngine.mLoadingLock ) { engineCtx = org.conscrypt.NativeCrypto.ENGINE_by_id ( engine ) ; if ( engineCtx == 0 ) { throw new java.lang.IllegalArgumentException ( ( "Unknown ENGINE id: " + engine ) ) ; } org.conscrypt.NativeCrypto.ENGINE_add ( engineCtx ) ; } return new org.conscrypt.OpenSSLEngine ( engineCtx ) ; }
public void copyFrom ( byte [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
private static void provide ( java.lang.String type , java.lang.String algorithm ) { java.util.Set < java.lang.String > algorithms = libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.get ( type ) ; if ( algorithms == null ) { algorithms = new java.util.HashSet ( ) ; libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.put ( type , algorithms ) ; } assertTrue ( ( ( ( "Duplicate " + type ) + " " ) + algorithm ) , algorithms.add ( algorithm.toUpperCase ( ) ) ) ; }
public void resizeStack ( int stackId , android.graphics.Rect bounds ) { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "resizeStack()" ) ; long ident = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( this ) { mStackSupervisor.resizeStackLocked ( stackId , bounds ) ; } } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } }
public void testAesCbcHmacMd5Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth ) ; }
public com.android.sched.vfs.InputOutputVFile getFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException { try { return getSectionVFS ( fileType ) . getRootInputOutputVDir ( ) . getInputVFile ( buildFileVPath ( fileType , typePath ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } }
public void testSign_Success ( ) throws java.lang.Exception { mKeyStore.password ( android.security.KeyStoreTest.TEST_PASSWD ) ; assertTrue ( mKeyStore.generate ( android.security.KeyStoreTest.TEST_KEYNAME , KeyStore.UID_SELF , KeyStore.FLAG_ENCRYPTED ) ) ; assertTrue ( mKeyStore.contains ( android.security.KeyStoreTest.TEST_KEYNAME ) ) ; final byte [ ] signature = mKeyStore.sign ( android.security.KeyStoreTest.TEST_KEYNAME , android.security.KeyStoreTest.TEST_DATA ) ; assertNotNull ( "Signature should not be null" , signature ) ; }
public void notifyChange ( android.net.Uri uri , android.database.ContentObserver observer , boolean syncToNetwork ) { notifyChange ( uri , observer , syncToNetwork , android.os.UserHandle.getCallingUserId ( ) ) ; }
public void testAesCbcHmacSha512Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.getKey ( 256 ) ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , android.net.cts.IpSecManagerTest.getKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
protected void onRestoreInstanceState ( android.os.Parcelable state ) { android.widget.DatePicker.SavedState ss = ( ( android.widget.DatePicker.SavedState ) ( state ) ) ; super . onRestoreInstanceState ( ss.getSuperState ( ) ) ; mYear = ss.getYear ( ) ; mMonth = ss.getMonth ( ) ; mDay = ss.getDay ( ) ; }
private void notifyDexLoad ( com.android.server.pm.dex.DexManagerTests.TestData testData , java.util.List < java.lang.String > dexPaths , int loaderUserId ) { mDexManager.notifyDexLoad ( testData.mPackageInfo.applicationInfo , dexPaths , testData.mLoaderIsa , loaderUserId ) ; }
private java.util.List < com.android.ddmuilib.logcat.LogCatMessage > getSelectedLogCatMessages ( ) { int [ ] indices = mTable.getSelectionIndices ( ) ; java.util.Arrays.sort ( indices ) ; java.util.List < com.android.ddmuilib.logcat.LogCatMessage > selectedMessages = new java.util.ArrayList < com.android.ddmuilib.logcat.LogCatMessage > ( indices.length ) ; for ( int i : indices ) { java.lang.Object data = mTable.getItem ( i ) . getData ( ) ; if ( data instanceof com.android.ddmuilib.logcat.LogCatMessage ) { selectedMessages.add ( ( ( com.android.ddmuilib.logcat.LogCatMessage ) ( data ) ) ) ; } } return selectedMessages ; }
public java.lang.String getCdmaMin ( int subId ) { enforceModifyPermissionOrCarrierPrivilege ( subId ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( ( phone != null ) && ( ( phone.getPhoneType ( ) ) == ( com.android.internal.telephony.PhoneConstants.PHONE_TYPE_CDMA ) ) ) { return phone.getCdmaMin ( ) ; } else { return null ; } }
public boolean hasNext ( ) { return iterableIterator.hasNext ( ) ; }
public void onDeregistered ( android.telephony.ims.ImsReasonInfo imsReasonInfo ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "onImsDisconnected imsReasonInfo=" + imsReasonInfo ) ) ; resetImsCapabilities ( ) ; mPhone.setServiceState ( ServiceState.STATE_OUT_OF_SERVICE ) ; mPhone.setImsRegistered ( false ) ; mPhone.processDisconnectReason ( imsReasonInfo ) ; mMetrics.writeOnImsConnectionState ( mPhone.getPhoneId ( ) , ImsConnectionState.State.DISCONNECTED , imsReasonInfo ) ; }
public com.android.tv.ui.sidepanel.SideFragment.ItemAdapter.ViewHolder onCreateViewHolder ( android.view.ViewGroup parent , int viewType ) { return new com.android.tv.ui.sidepanel.SideFragment.ItemAdapter.ViewHolder ( mLayoutInflater.inflate ( viewType , parent , false ) ) ; }
private java.lang.CharSequence getErrorMessage ( android.os.AsyncResult ar ) { return mContext.getText ( com.android.internal.R.string.mmiError ) ; }
private static < E > com.google.common.collect.ImmutableSet < E > copyFromCollection ( java.util.Collection < ? extends E > collection ) { java.lang.Object [ ] elements = collection.toArray ( ) ; switch ( elements.length ) { case 0 : return com.google.common.collect.ImmutableSet.of ( ) ; case 1 : @ java.lang.SuppressWarnings ( value = "unchecked" ) E onlyElement = ( ( E ) ( elements [ 0 ] ) ) ; return com.google.common.collect.ImmutableSet.of ( onlyElement ) ; default : return com.google.common.collect.ImmutableSet.construct ( elements.length , elements ) ; } }
public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; when ( mWificond.createApInterface ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; enterSoftApActiveMode ( ) ; verify ( mWificond ) . tearDownInterfaces ( ) ; }
public static boolean isInternalPrimitiveType ( char internalType ) { return ( ( ( ( ( ( ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_BOOLEAN ) ) || ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_BYTE ) ) ) || ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_CHAR ) ) ) || ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_SHORT ) ) ) || ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_INT ) ) ) || ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_FLOAT ) ) ) || ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_LONG ) ) ) || ( internalType == ( proguard.classfile.ClassConstants.INTERNAL_TYPE_DOUBLE ) ) ; }
public final void testPkgTypePlatform ( ) throws java.lang.Exception { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_PLATFORMS ; assertTrue ( p.hasMajorRevision ( ) ) ; assertFalse ( p.hasFullRevision ( ) ) ; assertTrue ( p.hasAndroidVersion ( ) ) ; assertTrue ( p.hasPath ( ) ) ; assertFalse ( p.hasVendorId ( ) ) ; assertTrue ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
public void visitAnyParameterAnnotationsAttribute ( proguard.classfile.io.Clazz clazz , proguard.classfile.io.Method method , proguard.classfile.io.ParameterAnnotationsAttribute parameterAnnotationsAttribute ) { dataOutput.writeByte ( parameterAnnotationsAttribute.u2parametersCount ) ; for ( int parameterIndex = 0 ; parameterIndex < ( parameterAnnotationsAttribute.u2parametersCount ) ; parameterIndex ++ ) { int u2annotationsCount = parameterAnnotationsAttribute.u2parameterAnnotationsCount [ parameterIndex ] ; proguard.classfile.io.Annotation [ ] annotations = parameterAnnotationsAttribute.parameterAnnotations [ parameterIndex ] ; dataOutput.writeShort ( u2annotationsCount ) ; for ( int index = 0 ; index < u2annotationsCount ; index ++ ) { visitAnnotation ( clazz , annotations [ index ] ) ; } } }
public void schedule ( java.util.TimerTask task , java.util.Date when ) { if ( ( when.getTime ( ) ) < 0 ) { throw new java.lang.IllegalArgumentException ( ( "when < 0: " + ( when.getTime ( ) ) ) ) ; } long delay = ( when.getTime ( ) ) - ( java.lang.System.currentTimeMillis ( ) ) ; scheduleImpl ( task , ( delay < 0 ? 0 : delay ) , ( - 1 ) , false ) ; }
public final void visitSource ( final java.lang.String file , final java.lang.String debug ) { if ( file != null ) { sourceFile = newUTF8 ( file ) ; } if ( debug != null ) { sourceDebug = new org.objectweb.asm.ByteVector ( ) . putUTF8 ( debug ) ; } }
void enableVerboseLogging ( int verbose ) { if ( verbose > 0 ) { com.android.server.wifi.WifiNative.DBG = true ; } else { com.android.server.wifi.WifiNative.DBG = false ; } }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , int timeoutMillis , android.bluetooth.le.AdvertisingSetCallback callback ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , timeoutMillis , callback , new android.os.Handler ( android.os.Looper.getMainLooper ( ) ) ) ; }
public java.lang.String combineDateAndTime ( java.lang.String relativeDateString , java.lang.String timeString ) { return com.ibm.icu.impl.SimpleFormatterImpl.formatCompiledPattern ( combinedDateAndTime , timeString , relativeDateString ) ; }
protected void writeDiff ( java.io.File olderFile , java.io.File newerFile , java.util.zip.ZipOutputStream patchOutput ) throws java.io.IOException { java.io.BufferedInputStream olderFileIn = new java.io.BufferedInputStream ( new java.io.FileInputStream ( olderFile ) ) ; java.io.BufferedInputStream newerFileIn = new java.io.BufferedInputStream ( new java.io.FileInputStream ( newerFile ) ) ; try { writeDiff ( olderFileIn , newerFileIn , patchOutput ) ; } finally { olderFileIn.close ( ) ; newerFileIn.close ( ) ; } }
public void dispatchKey ( android.view.KeyEvent event ) { if ( ( ( mSession ) != null ) && ( ( mSurface ) != null ) ) { try { mSession.finishKey ( mWindow ) ; } catch ( android.os.RemoteException ex ) { } } }
public int getConfigInt ( int item ) throws com.android.ims.ImsException { int ret = 0 ; try { ret = miConfig.getConfigInt ( item ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getInt()" , e , ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } if ( DBG ) android.telephony.Rlog.d ( com.android.ims.ImsConfig.TAG , ( ( ( "getInt(): item = " + item ) + ", ret =" ) + ret ) ) ; return ret ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { return new com.android.tools.lint.checks.CallSuperDetector.PerformanceVisitor ( context ) ; }
synchronized long nInvokeClosureCreate ( long invokeID , byte [ ] params , long [ ] fieldIDs , long [ ] values , int [ ] sizes ) { validate ( ) ; return rsnInvokeClosureCreate ( mContext , invokeID , params , fieldIDs , values , sizes ) ; }
public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { mStartId = startId ; if ( ( mAdapter ) == null ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "Stopping BluetoothPbapService: " + "device does not have BT or device is not ready" ) ) ; closeService ( ) ; } else { if ( intent != null ) { parseIntent ( intent ) ; } } return START_NOT_STICKY ; }
public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo ( int filter , com.android.sdklib.AndroidVersion version ) { assert ( ( filter == ( com.android.sdklib.repository.local.LocalSdk.PKG_PLATFORMS ) ) || ( filter == ( com.android.sdklib.repository.local.LocalSdk.PKG_SAMPLES ) ) ) || ( filter == ( com.android.sdklib.repository.local.LocalSdk.PKG_SOURCES ) ) ; for ( com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos ( filter ) ) { if ( pkg instanceof com.android.sdklib.repository.local.LocalAndroidVersionPkgInfo ) { com.android.sdklib.repository.local.LocalAndroidVersionPkgInfo p = ( ( com.android.sdklib.repository.local.LocalAndroidVersionPkgInfo ) ( pkg ) ) ; if ( p.getAndroidVersion ( ) . equals ( version ) ) { return p ; } } } return null ; }
private void addChildNode ( com.intellij.ui.CheckedTreeNode parentNode , com.google.gct.testing.dimension.GoogleCloudTestingType type , com.google.gct.testing.dimension.GoogleCloudTestingDimension dimension ) { com.intellij.ui.CheckedTreeNode newNode = new com.intellij.ui.CheckedTreeNode ( type ) ; parentNode.add ( newNode ) ; newNode.setChecked ( dimension.getEnabledTypes ( ) . contains ( type ) ) ; newNode.setEnabled ( dimension.isEditable ( ) ) ; }
public boolean isDirEmpty ( java.lang.String path , java.lang.String message ) { java.io.File pathFile = new java.io.File ( ( ( ( mOutDir ) + ( java.io.File.separator ) ) + path ) ) ; java.lang.String [ ] pathListing = pathFile.list ( ) ; if ( ( pathListing != null ) && ( ( pathListing.length ) > 0 ) ) { println ( "WARNING: There are already some %1$s files present. None will be created!" , message ) ; return false ; } return true ; }
public void writeOnImsCommand ( int phoneId , com.android.ims.internal.ImsCallSession session , int command ) { com.android.internal.telephony.metrics.InProgressCallSession callSession = mInProgressCallSessions.get ( phoneId ) ; if ( callSession == null ) { android.telephony.Rlog.e ( com.android.internal.telephony.metrics.TelephonyMetrics.TAG , "Call session is missing" ) ; } else { callSession.addEvent ( new com.android.internal.telephony.metrics.CallSessionEventBuilder ( com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.IMS_COMMAND ) . setCallIndex ( getCallId ( session ) ) . setImsCommand ( command ) ) ; } }
public void testSaveProperties ( ) { java.util.Properties props = createProps ( ) ; com.android.sdklib.internal.repository.packages.MockExtraPackage p = new com.android.sdklib.internal.repository.packages.MockExtraPackage ( null , props , "vendor" , "the_path" , ( - 1 ) , null , null , null , com.android.sdklib.internal.repository.archives.Archive.Os.ANY , com.android.sdklib.internal.repository.archives.Archive.Arch.ANY , LOCAL_ARCHIVE_PATH ) ; java.util.Properties props2 = new java.util.Properties ( ) ; p.saveProperties ( props2 ) ; assertEquals ( props2 , props ) ; }
private java.lang.String getBackendUrl ( ) { if ( useProd.isSelected ( ) ) { return prodUrlField.getText ( ) ; } if ( useStaging.isSelected ( ) ) { return stagingUrlField.getText ( ) ; } if ( useTest.isSelected ( ) ) { return testUrlField.getText ( ) ; } if ( useCustom.isSelected ( ) ) { return customUrlField.getText ( ) ; } throw new java.lang.RuntimeException ( "No URL option is selected!" ) ; }
public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.TAG , ( "onStartCommand " + intent ) ) ; if ( intent.getBooleanExtra ( HeadsetClientService.HFP_CLIENT_STOP_TAG , false ) ) { stopSelf ( ) ; return 0 ; } else { android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED ) ; filter.addAction ( BluetoothHeadsetClient.ACTION_CALL_CHANGED ) ; registerReceiver ( mBroadcastReceiver , filter ) ; return START_STICKY ; } }
public static int fromKeymaster ( int digest ) { switch ( digest ) { case android.security.keymaster.KeymasterDefs.KM_DIGEST_NONE : return android.security.KeyStoreKeyConstraints.Digest.NONE ; case android.security.keymaster.KeymasterDefs.KM_DIGEST_SHA_2_256 : return android.security.KeyStoreKeyConstraints.Digest.SHA256 ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown digest: " + digest ) ) ; } }
private boolean equals ( @ javax.annotation.Nonnull long [ ] bitmap ) { assert ( this . bitmap.length ) == ( bitmap.length ) ; for ( int i = 0 ; i < ( this . bitmap.length ) ; i ++ ) { if ( ( this . bitmap [ i ] ) != ( bitmap [ i ] ) ) { return false ; } } return true ; }
public void testApplyingWithAbsentFileToDelete ( ) throws java.lang.Exception { com.intellij.updater.PatchFileCreator.create ( myOlderDir , myNewerDir , myFile , java.util.Collections.< java.lang.String > emptyList ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , com.intellij.updater.TEST_UI ) ; new java.io.File ( myOlderDir , "bin/idea.bat" ) . delete ( ) ; assertAppliedAndRevertedCorrectly ( com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ) ; }
public void setDataEnabled ( int subId , boolean enable ) { try { android.util.Log.d ( android.telephony.TelephonyManager.TAG , ( "setDataEnabled: enabled=" + enable ) ) ; com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) telephony.setDataEnabled ( subId , enable ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setDataEnabled" , e ) ; } }
public void run ( com.android.jack.ir.ast.cfg.JControlFlowGraph t ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock bb : t.getAllBlocksUnordered ( ) ) { for ( com.android.jack.ir.ast.cfg.JBasicBlockElement e : bb.getElements ( true ) ) { if ( e instanceof com.android.jack.ir.ast.cfg.JPhiBlockElement ) { com.android.jack.ir.ast.cfg.JPhiBlockElement phi = ( ( com.android.jack.ir.ast.cfg.JPhiBlockElement ) ( e ) ) ; if ( phi.getLhs ( ) . getUses ( ) . isEmpty ( ) ) { ( ( com.android.jack.ir.ast.cfg.JRegularBasicBlock ) ( bb ) ) . removeElement ( e ) ; continue ; } pruneUnreachableDef ( phi ) ; } } } }
public static < T > java.lang.Iterable < T > concat ( java.lang.Iterable < ? extends T > a , java.lang.Iterable < ? extends T > b ) { com.google.common.base.Preconditions.checkNotNull ( a ) ; com.google.common.base.Preconditions.checkNotNull ( b ) ; return com.google.common.collect.Iterables.concat ( java.util.Arrays.asList ( a , b ) ) ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , float [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * 4 ) ) ; }
protected void replaceImpl ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode existingNode , @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode newNode ) throws java.lang.UnsupportedOperationException { if ( ( lhs ) == existingNode ) { lhs = ( ( com.android.jack.ir.ast.JSsaVariableDefRef ) ( newNode ) ) ; return ; } for ( com.android.jack.ir.ast.cfg.JBasicBlock pred : rhs.keySet ( ) ) { if ( ( rhs.get ( pred ) ) == existingNode ) { rhs.put ( pred , ( ( com.android.jack.ir.ast.JSsaVariableUseRef ) ( newNode ) ) ) ; return ; } } super . replaceImpl ( existingNode , newNode ) ; }
com.android.build.gradle.tasks.List < com.android.build.gradle.tasks.File > getInputFiles ( ) { com.google.common.collect.ImmutableList.Builder < com.android.build.gradle.tasks.File > builder = com.google.common.collect.ImmutableList.builder ( ) ; com.android.build.gradle.tasks.forEachInputFile split ; com.android.build.gradle.tasks.forEachInputFile file ; builder.add ( file ) ; return builder.build ( ) ; }
private void handleSimAbsent ( int slotId ) { if ( ( ( com.android.internal.telephony.SubscriptionInfoUpdater.mIccId [ slotId ] ) != null ) && ( ! ( com.android.internal.telephony.SubscriptionInfoUpdater.mIccId [ slotId ] . equals ( com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM ) ) ) ) { logd ( ( ( "SIM" + ( slotId + 1 ) ) + " hot plug out" ) ) ; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId [ slotId ] = com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM ; if ( isAllIccIdQueryDone ( ) ) { updateSubscriptionInfoByIccId ( ) ; } updateCarrierServices ( slotId , IccCardConstants.INTENT_VALUE_ICC_ABSENT ) ; }
public void test_SSL_check_private_key_key_then_cert ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; long s = org.conscrypt.NativeCrypto.SSL_new ( c ) ; org.conscrypt.NativeCrypto.SSL_use_PrivateKey ( s , org.conscrypt.NativeCryptoTest.getServerPrivateKey ( ) . getPkeyContext ( ) ) ; try { org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.conscrypt.NativeCrypto.SSL_use_certificate ( s , org.conscrypt.NativeCryptoTest.getServerCertificates ( ) ) ; org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; org.conscrypt.NativeCrypto.SSL_free ( s ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; }
public void setAdditionalInputMethodSubtypes ( java.lang.String imiId , android.view.inputmethod.InputMethodSubtype [ ] subtypes ) { synchronized ( mH ) { try { mService.setAdditionalInputMethodSubtypes ( imiId , subtypes ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.view.inputmethod.InputMethodManager.TAG , ( "IME died: " + ( mCurId ) ) , e ) ; } } }
public int getNodeStartOffset ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node ) { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( getPosition ( node , ( - 1 ) , ( - 1 ) ) ) ) ; if ( pos != null ) { return pos.getOffset ( ) ; } return - 1 ; }
public int getPort ( ) { java.net.SocketAddress remote = sc.remoteAddress ( ) ; if ( remote == null ) { return 0 ; } else { return ( ( java.net.InetSocketAddress ) ( remote ) ) . getPort ( ) ; } }
private void print ( java.lang.String s ) throws java.io.IOException { if ( ( ( precision ) != ( - 1 ) ) && ( ( precision ) < ( s.length ( ) ) ) ) s = s.substring ( 0 , precision ) ; if ( f.contains ( java.util.Formatter.Flags.UPPERCASE ) ) s = s.toUpperCase ( ) ; a.append ( justify ( s ) ) ; }
public int dexopt ( java.lang.String apkPath , int uid , boolean isPublic ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "dexopt" ) ; builder.append ( ' ' ) ; builder.append ( apkPath ) ; builder.append ( ' ' ) ; builder.append ( uid ) ; builder.append ( ( isPublic ? " 1" : " 0" ) ) ; builder.append ( " *" ) ; return execute ( builder.toString ( ) ) ; }
public android.app.ContextImpl getSystemContext ( ) { synchronized ( this ) { if ( ( android.app.ActivityThread.mSystemContext ) == null ) { android.app.ContextImpl context = android.app.ContextImpl.createSystemContext ( this ) ; android.app.LoadedApk info = new android.app.LoadedApk ( this , "android" , context , null , android.content.res.CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO ) ; context.init ( info , null , this ) ; context.getResources ( ) . updateConfiguration ( mResourcesManager.getConfiguration ( ) , mResourcesManager.getDisplayMetricsLocked ( Display.DEFAULT_DISPLAY ) ) ; android.app.ActivityThread.mSystemContext = context ; } } return android.app.ActivityThread.mSystemContext ; }
public static libcore.Repository openJdk9 ( java.nio.file.Path upstreamRoot , java.lang.String upstreamName ) { java.util.List < java.lang.String > sourceDirs = java.util.Arrays.asList ( "jdk/src/java.base/share/classes" , "jdk/src/java.logging/share/classes" , "jdk/src/java.prefs/share/classes" , "jdk/src/java.sql/share/classes" , "jdk/src/java.desktop/share/classes" , "jdk/src/java.base/solaris/classes" , "jdk/src/java.base/unix/classes" , "jdk/src/java.prefs/unix/classes" , "jdk/src/jdk.unsupported/share/classes" , "jdk/src/jdk.net/share/classes" , "jdk/src/java.base/linux/classes" , "build/linux-x86_64-normal-server-release/support/gensrc/java.base" , "jdk/src/java.base/unix/native/libjava" , "jdk/src/java.base/share/native/libjava" ) ; return new libcore.Repository.OpenJdkRepository ( upstreamRoot , upstreamName , sourceDirs ) ; }
public void verifyCallbackVideoAvailable ( ) { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession ; assertNotNull ( session ) ; session.notifyVideoAvailable ( ) ; new android.cts.util.PollingCheck ( android.media.tv.cts.TvInputServiceTest.TIME_OUT ) { @ java.lang.Override protected boolean check ( ) { return ( mCallback.mVideoAvailableCount ) > 0 ; } } . run ( ) ; }
public void testNoLintWarningOnGetPackageInfoOnNonPackageManagerClass ( ) throws java.lang.Exception { assertEquals ( "No warnings." , lintProject ( ( "src/test/pkg/GetSignaturesNotPackageManagerTest.java.txt" + "=>src/test/pkg/GetSignaturesNotPackageManagerTest.java" ) ) ) ; }
public boolean equals ( java.lang.Object other ) { if ( other == null ) { return false ; } else if ( ( this ) == other ) { return true ; } else if ( other instanceof android.icu.impl.ICUResource.Key ) { android.icu.impl.ICUResource.Key otherKey = ( ( android.icu.impl.ICUResource.Key ) ( other ) ) ; return ( ( length ) == ( otherKey.length ) ) && ( contentEquals ( otherKey.bytes , otherKey.offset , length ) ) ; } else { return false ; } }
public boolean checkAndSet ( java.lang.String value , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config ) { com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier.KeyboardState orientation = com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier.KeyboardState.getEnum ( value ) ; if ( orientation != null ) { com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier qualifier = new com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier ( ) ; qualifier.mValue = orientation ; config.setKeyboardStateQualifier ( qualifier ) ; return true ; } return false ; }
public void testCorruptOverrideFile ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData ( libcore.util.ZoneInfoDBTest.makeCorruptFile ( ) , libcore.util.ZoneInfoDBTest.TZDATA_IN_DATA , libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT ) ; assertEquals ( libcore.util.ZoneInfoDBTest.CURRENT_VERSION , data.getVersion ( ) ) ; assertEquals ( java.util.TimeZone.getAvailableIDs ( ) . length , data.getAvailableIDs ( ) . length ) ; }
public static void startMethodTracing ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags ) { if ( fd == null ) { throw new java.lang.NullPointerException ( "fd == null" ) ; } dalvik.system.VMDebug.startMethodTracingFd ( traceFileName , fd , dalvik.system.VMDebug.checkBufferSize ( bufferSize ) , flags ) ; }
public static void handleTrustStorageUpdate ( ) { try { javax.net.ssl.X509TrustManager x509TrustManager = org.apache.harmony.xnet.provider.jsse.SSLParametersImpl.getDefaultTrustManager ( ) ; if ( x509TrustManager instanceof org.apache.harmony.xnet.provider.jsse.TrustManagerImpl ) { org.apache.harmony.xnet.provider.jsse.TrustManagerImpl trustManager = ( ( org.apache.harmony.xnet.provider.jsse.TrustManagerImpl ) ( x509TrustManager ) ) ; trustManager.handleTrustStorageUpdate ( ) ; } } catch ( java.security.KeyManagementException ignored ) { } }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mGLSurfaceView = new android.opengl.GLSurfaceView ( this ) ; mGLSurfaceView.setRenderer ( new com.android.cts.verifier.sensors.AccelerometerTestRenderer ( this ) ) ; setContentView ( mGLSurfaceView ) ; }
public void fetchCalls ( ) { callLogQueryHandler.fetchCalls ( callTypeFilter , dateLimit ) ; if ( ! ( isCallLogActivity ) ) { com.android.dialer.common.FragmentUtils.getParentUnsafe ( this , com.android.dialer.app.calllog.CallLogFragment.CallLogFragmentListener.class ) . updateTabUnreadCounts ( ) ; } }
public static java.lang.String toString ( int state ) { switch ( state ) { case com.android.ims.internal.ImsCallSession.State.IDLE : return "IDLE" ; case com.android.ims.internal.ImsCallSession.State.INITIATED : return "INITIATED" ; case com.android.ims.internal.ImsCallSession.State.NEGOTIATING : return "NEGOTIATING" ; case com.android.ims.internal.ImsCallSession.State.ESTABLISHING : return "ESTABLISHING" ; case com.android.ims.internal.ImsCallSession.State.ESTABLISHED : return "ESTABLISHED" ; case com.android.ims.internal.ImsCallSession.State.RENEGOTIATING : return "RENEGOTIATING" ; case com.android.ims.internal.ImsCallSession.State.REESTABLISHING : return "REESTABLISHING" ; case com.android.ims.internal.ImsCallSession.State.TERMINATING : return "TERMINATING" ; case com.android.ims.internal.ImsCallSession.State.TERMINATED : return "TERMINATED" ; default : return "UNKNOWN" ; } }
public void setUp ( ) throws java.lang.Exception { logd ( "CarrierActionAgentTest +Setup!" ) ; super . setUp ( getClass ( ) . getSimpleName ( ) ) ; mFakeContentResolver = new com.android.internal.telephony.CarrierActionAgentTest.FakeContentResolver ( ) ; mFakeContentProvider = new com.android.internal.telephony.CarrierActionAgentTest.FakeContentProvider ( ) ; mFakeContentResolver.addProvider ( Settings.AUTHORITY , mFakeContentProvider ) ; org.mockito.Mockito.doReturn ( mFakeContentResolver ) . when ( mContext ) . getContentResolver ( ) ; new com.android.internal.telephony.CarrierActionAgentTest.CarrierActionAgentHandler ( getClass ( ) . getSimpleName ( ) ) . start ( ) ; waitUntilReady ( ) ; logd ( "CarrierActionAgentTest -Setup!" ) ; }
android.telecom.cts.MockConference verifyConferenceForOutgoingCall ( ) { try { if ( ! ( connectionService.lock.tryAcquire ( TestUtils.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , java.util.concurrent.TimeUnit.MILLISECONDS ) ) ) { fail ( "No outgoing conference requested by Telecom" ) ; } } catch ( java.lang.InterruptedException e ) { android.util.Log.i ( android.telecom.cts.TAG , "Test interrupted!" ) ; } android.telecom.cts.MockConference conference = connectionService.conferences.get ( 0 ) ; setAndVerifyConferenceForOutgoingCall ( conference ) ; return conference ; }
public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { mTabIndex = mAdapter.getRtlPosition ( position ) ; final int count = mOnPageChangeListeners.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { mOnPageChangeListeners.get ( i ) . onPageScrolled ( position , positionOffset , positionOffsetPixels ) ; } }
public void testPackageSubstitution_withDot ( ) { org.mockito.Mockito.when ( mAttr.getValue ( ) ) . thenReturn ( ".ActivityOne" ) ; assertNotNull ( new com.android.manifmerger.XmlAttribute ( mXmlElement , mAttr , new com.android.manifmerger.AttributeModel ( "ActivityOne" , true , null , null ) ) ) ; org.mockito.Mockito.verify ( mAttr ) . setValue ( "com.foo.bar.ActivityOne" ) ; }
public void setOutgoingCallerIdDisplay ( int commandInterfaceCLIRMode , android.os.Message onComplete ) { if ( isPhoneTypeGsm ( ) ) { com.android.internal.telephony.Phone imsPhone = mImsPhone ; if ( ( imsPhone != null ) && ( ( imsPhone.getServiceState ( ) . getState ( ) ) == ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) ) { imsPhone.setOutgoingCallerIdDisplay ( commandInterfaceCLIRMode , onComplete ) ; return ; } mCi.setCLIR ( commandInterfaceCLIRMode , obtainMessage ( com.android.internal.telephony.EVENT_SET_CLIR_COMPLETE , commandInterfaceCLIRMode , 0 , onComplete ) ) ; } else { loge ( "setOutgoingCallerIdDisplay: not possible in CDMA" ) ; } }
public void init ( org.bouncycastle.crypto.CipherParameters params ) { if ( params instanceof org.bouncycastle.crypto.params.KeyParameter ) { cipher.init ( true , params ) ; L = new byte [ ZEROES.length ] ; cipher.processBlock ( ZEROES , 0 , L , 0 ) ; Lu = org.bouncycastle.crypto.macs.CMac.doubleLu ( L ) ; Lu2 = org.bouncycastle.crypto.macs.CMac.doubleLu ( Lu ) ; } else if ( params != null ) { throw new java.lang.IllegalArgumentException ( "CMac mode only permits key to be set." ) ; } reset ( ) ; }
public boolean addLinkAddress ( android.net.LinkAddress address ) { if ( ( address != null ) && ( ! ( mLinkAddresses.contains ( address ) ) ) ) { mLinkAddresses.add ( address ) ; return true ; } return false ; }
public final float getFloat ( ) { int newPosition = ( position ) + ( libcore.io.SizeOf.FLOAT ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferUnderflowException ( ) ; } float result = java.lang.Float.intBitsToFloat ( this . block.peekInt ( ( ( offset ) + ( position ) ) , order ) ) ; position = newPosition ; return result ; }
public boolean shouldRollBack ( double number ) { return ( ( ( ( ( sub1 ) != null ) && ( sub1.isModulusSubstitution ( ) ) ) || ( ( ( sub2 ) != null ) && ( sub2.isModulusSubstitution ( ) ) ) ) && ( ( number % ( java.lang.Math.pow ( radix , exponent ) ) ) == 0 ) ) && ( ( ( baseValue ) % ( java.lang.Math.pow ( radix , exponent ) ) ) != 0 ) ; }
public void testRootnF32_4 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_4 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; android.renderscript.cts.RSUtils.genRandom ( 4400074 , 32 , 1 , 1 , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n4 ( nAlloc ) ; doF32_4 ( 11145969 , 16 ) ; }
public void checkClientTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.net.Socket socket ) throws java.security.cert.CertificateException { javax.net.ssl.SSLSession session = null ; javax.net.ssl.SSLParameters parameters = null ; if ( socket instanceof javax.net.ssl.SSLSocket ) { javax.net.ssl.SSLSocket sslSocket = ( ( javax.net.ssl.SSLSocket ) ( socket ) ) ; session = sslSocket.getHandshakeSession ( ) ; if ( session == null ) { throw new java.security.cert.CertificateException ( "Not in handshake; no session available" ) ; } parameters = sslSocket.getSSLParameters ( ) ; } checkTrusted ( chain , authType , session , parameters , true ) ; }
public void setHs20 ( boolean hs20 ) { if ( hs20 ) { doBooleanCommand ( "SET HS20 1" ) ; } else { doBooleanCommand ( "SET HS20 0" ) ; } }
public void testGetDeviceId ( ) { if ( ! ( mHasTelephony ) ) { return ; } try { java.lang.String id = mTelephonyManager.getDeviceId ( ) ; fail ( ( "Got device ID: " + id ) ) ; } catch ( java.lang.SecurityException e ) { } try { java.lang.String id = mTelephonyManager.getDeviceId ( 0 ) ; fail ( ( "Got device ID: " + id ) ) ; } catch ( java.lang.SecurityException e ) { } }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object o ) { if ( o instanceof com.google.common.collect.Multiset.Entry ) { com.google.common.collect.Multiset.Entry < ? > entry = ( ( com.google.common.collect.Multiset.Entry < ? > ) ( o ) ) ; java.util.Collection < V > collection = multimap ( ) . asMap ( ) . get ( entry.getElement ( ) ) ; return ( collection != null ) && ( ( collection.size ( ) ) == ( entry.getCount ( ) ) ) ; } return false ; }
private static void testUnloadClass ( java.lang.reflect.Constructor < ? > constructor ) throws java.lang.Exception { java.lang.ref.WeakReference < java.lang.Class > klass = Main.setUpUnloadClassWeak ( constructor ) ; java.lang.Runtime.getRuntime ( ) . gc ( ) ; java.lang.ref.WeakReference < java.lang.Class > klass2 = Main.setUpUnloadClassWeak ( constructor ) ; java.lang.Runtime.getRuntime ( ) . gc ( ) ; java.lang.System.out.println ( klass.get ( ) ) ; java.lang.System.out.println ( klass2.get ( ) ) ; }
public com.google.doclava.FieldInfo cloneForClass ( com.google.doclava.ClassInfo newContainingClass ) { return new com.google.doclava.FieldInfo ( name ( ) , newContainingClass , realContainingClass ( ) , isPublic ( ) , isProtected ( ) , isPackagePrivate ( ) , isPrivate ( ) , isFinal ( ) , isStatic ( ) , isTransient ( ) , isVolatile ( ) , isSynthetic ( ) , mType , getRawCommentText ( ) , mConstantValue , position ( ) , annotations ( ) ) ; }
public void testCanEncodeCharSequence ( ) { assertTrue ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( "w" ) ) ; assertFalse ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( "슣" ) ) ; assertFalse ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( "𐀀" ) ) ; try { org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( null ) ; } catch ( java.lang.NullPointerException e ) { } assertTrue ( org.apache.harmony.tests.java.nio.charset.ASCIICharsetEncoderTest.encoder.canEncode ( "" ) ) ; }
protected void clean ( org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { super . clean ( monitor ) ; org.eclipse.core.resources.IProject project = getProject ( ) ; com.android.ide.eclipse.adt.AdtPlugin.printBuildToConsole ( BuildVerbosity.VERBOSE , project , Messages.Removing_Generated_Classes ) ; removeDerivedResources ( mGenFolder , monitor ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_AAPT_COMPILE ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_XML ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_AIDL ) ; }
private java.io.File createDex ( vogar.Action action , java.io.File actionJar ) { java.io.File dex = run.localFile ( action , "classes.dex" ) ; vogar.Classpath classesToDex = vogar.Classpath.of ( actionJar ) ; classesToDex.addAll ( run.classpath ) ; run.androidSdk.dex ( dex , classesToDex ) ; return dex ; }
private void informWifiStateBatteryStats ( int state ) { try { mBatteryStats.noteWifiState ( state , null ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.WifiStateTracker.TAG , ( "Battery stats unreachable " + ( e.getMessage ( ) ) ) ) ; } }
public void getAvailableNetworks ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_QUERY_AVAILABLE_NETWORKS , response ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
public com.android.tv.dvr.RecordedProgram addRecordedProgramInternal ( com.android.tv.dvr.RecordedProgram recordedProgram ) { com.android.tv.common.SoftPreconditions.checkState ( ( ( recordedProgram.getId ( ) ) == ( RecordedProgram.ID_NOT_SET ) ) , com.android.tv.dvr.DvrDataManagerInMemoryImpl.TAG , ( ( ( "expected id of " + ( RecordedProgram.ID_NOT_SET ) ) + " but was " ) + recordedProgram ) ) ; recordedProgram = com.android.tv.dvr.RecordedProgram.buildFrom ( recordedProgram ) . setId ( mNextId.incrementAndGet ( ) ) . build ( ) ; mRecordedPrograms.put ( recordedProgram.getId ( ) , recordedProgram ) ; notifyRecordedProgramsAdded ( recordedProgram ) ; return recordedProgram ; }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.pbapclient.PbapClientService service = getService ( ) ; if ( service == null ) { return false ; } return service.connect ( device ) ; }
protected java.util.HashMap < java.lang.String , java.lang.Object > getSmsTrackerMap ( java.lang.String destAddr , java.lang.String scAddr , java.lang.String text , com.android.internal.telephony.SmsMessageBase.SubmitPduBase pdu ) { java.util.HashMap < java.lang.String , java.lang.Object > map = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; map.put ( "destAddr" , destAddr ) ; map.put ( "scAddr" , scAddr ) ; map.put ( "text" , text ) ; map.put ( "smsc" , pdu.encodedScAddress ) ; map.put ( "pdu" , pdu.encodedMessage ) ; return map ; }
public void testEquals_Normal ( ) { tests.api.java.nio.charset.CharsetTest.MockCharset c1 = new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mock" , null ) ; tests.api.java.nio.charset.CharsetTest.MockCharset2 c2 = new tests.api.java.nio.charset.CharsetTest.MockCharset2 ( "mock" , null ) ; assertTrue ( c1.equals ( c2 ) ) ; assertTrue ( c2.equals ( c1 ) ) ; c2 = new tests.api.java.nio.charset.CharsetTest.MockCharset2 ( "Mock" , null ) ; assertFalse ( c1.equals ( c2 ) ) ; assertFalse ( c2.equals ( c1 ) ) ; }
private int performDexOptInternal ( java.lang.String packageName , boolean checkProfiles , java.lang.String targetCompilerFilter , boolean force ) { android.content.pm.PackageParser.Package p ; synchronized ( mPackages ) { p = mPackages.get ( packageName ) ; if ( p == null ) { return PackageDexOptimizer.DEX_OPT_FAILED ; } mPackageUsage.write ( false ) ; } long callingId = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mInstallLock ) { return performDexOptInternalWithDependenciesLI ( p , checkProfiles , targetCompilerFilter , force ) ; } } finally { android.os.Binder.restoreCallingIdentity ( callingId ) ; } }
public void addF64 ( android.support.v8.renderscript.Double4 v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addF64 ( new android.support.v8.renderscript.Double4 ( v.x , v.y , v.z , v.w ) ) ; return ; } addF64 ( v.x ) ; addF64 ( v.y ) ; addF64 ( v.z ) ; addF64 ( v.w ) ; }
private static boolean hasOperand ( lombok.ast.Expression operand , java.util.List < lombok.ast.MethodInvocation > list ) { for ( lombok.ast.MethodInvocation method : list ) { lombok.ast.Expression operand1 = method.astOperand ( ) ; if ( operand.toString ( ) . equals ( operand1.toString ( ) ) ) { return true ; } } return false ; }
private static org.w3c.dom.Document parse ( @ com.android.annotations.NonNull java.lang.String xml , @ com.android.annotations.NonNull org.xml.sax.InputSource input , boolean checkBom ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { try { javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory.newInstance ( ) ; factory.setFeature ( com.android.utils.PositionXmlParser.NAMESPACE_FEATURE , true ) ; factory.setFeature ( com.android.utils.PositionXmlParser.NAMESPACE_PREFIX_FEATURE , true ) ; factory.setFeature ( com.android.utils.PositionXmlParser.PROVIDE_XMLNS_URIS , true ) ; javax.xml.parsers.SAXParser parser = factory.newSAXParser ( ) ; com.android.utils.PositionXmlParser.DomBuilder handler = new com.android.utils.PositionXmlParser.DomBuilder ( xml ) ; org.xml.sax.XMLReader xmlReader = parser.getXMLReader ( ) ; xmlReader.setProperty ( "http://xml.org/sax/properties/lexical-handler" , handler ) ; parser.parse ( input , handler ) ; return handler.getDocument ( ) ; } catch ( org.xml.sax.SAXException e ) { if ( checkBom && ( e.getMessage ( ) . contains ( "Content is not allowed in prolog" ) ) ) { xml = xml.replaceFirst ( "^([\\W]+)<" , "<" ) ; return com.android.utils.PositionXmlParser.parse ( xml , new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) , false ) ; } throw e ; } }
public void sendSingleScanRequestWithNoResults ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = createRequest ( WifiScanner.WIFI_BAND_BOTH , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; doSuccessfulSingleScan ( requestSettings , computeSingleScanNativeSettings ( requestSettings ) , com.android.server.wifi.ScanResults.create ( 0 , new int [ 0 ] ) ) ; }
public void testAesCbcHmacSha1Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth ) ; }
public void startSwipe ( android.support.v7.widget.RecyclerView.ViewHolder viewHolder ) { if ( ! ( mCallback.hasSwipeFlag ( mRecyclerView , viewHolder ) ) ) { android.util.Log.e ( android.support.v7.widget.helper.ItemTouchHelper.TAG , "Start swipe has been called but dragging is not enabled" ) ; return ; } if ( ( viewHolder.itemView.getParent ( ) ) != ( mRecyclerView ) ) { android.util.Log.e ( android.support.v7.widget.helper.ItemTouchHelper.TAG , ( "Start swipe has been called with a view holder which is not a child of " + "the RecyclerView controlled by this ItemTouchHelper." ) ) ; return ; } obtainVelocityTracker ( ) ; mDx = mDy = 0.0F ; select ( viewHolder , android.support.v7.widget.helper.ItemTouchHelper.ACTION_STATE_SWIPE ) ; }
public void testFormattingUncommonTimeZoneAbbreviations ( ) { java.lang.String fmt = "yyyy-MM-dd HH:mm:ss.SSS z" ; java.lang.String date = "1970-01-01 01:00:00.000 CET" ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( fmt , java.util.Locale.US ) ; sdf.setTimeZone ( java.util.TimeZone.getTimeZone ( "Europe/Berlin" ) ) ; assertEquals ( date , sdf.format ( new java.util.Date ( 0 ) ) ) ; sdf = new java.text.SimpleDateFormat ( fmt , java.util.Locale.US ) ; sdf.setTimeZone ( java.util.TimeZone.getTimeZone ( "Europe/Zurich" ) ) ; assertEquals ( date , sdf.format ( new java.util.Date ( 0 ) ) ) ; }
public java.lang.String getMessage ( ) { com.android.sched.util.location.Location existingSource = existingType.getLocation ( ) ; return ( ( ( ( ( ( ( "Failed to perform import: Type " + ( com.android.jack.Jack.getUserFriendlyFormatter ( ) . getName ( existingType ) ) ) + " from " ) + ( failedToImportSource.getDescription ( ) ) ) + " has already been imported from " ) + ( existingSource.getDescription ( ) ) ) + " (see property '" ) + ( JayceFileImporter.COLLISION_POLICY.getName ( ) ) ) + "' for type collision policy)" ; }
public void moveCompleteApp ( java.lang.String fromUuid , java.lang.String toUuid , java.lang.String packageName , java.lang.String dataAppName , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.moveCompleteApp ( fromUuid , toUuid , packageName , dataAppName , appId , seInfo , targetSdkVersion ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void startsOutAvailable ( ) { mTestedSm = new com.android.server.connectivity.tethering.TetherInterfaceStateMachine ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mLooper.getLooper ( ) , android.net.ConnectivityManager.TETHERING_BLUETOOTH , mSharedLog , mNMService , mStatsService , mTetherHelper ) ; mTestedSm.start ( ) ; mLooper.dispatchAll ( ) ; org.mockito.Mockito.verify ( mTetherHelper ) . updateInterfaceState ( mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito.verify ( mTetherHelper ) . updateLinkProperties ( org.mockito.Matchers.eq ( mTestedSm ) , org.mockito.Matchers.any ( android.net.LinkProperties.class ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mTetherHelper , mNMService , mStatsService ) ; }
public java.util.List < android.service.carrier.CarrierIdentifier > getAllowedCarriers ( int slotId ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getAllowedCarriers ( slotId ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#getAllowedCarriers" , e ) ; } catch ( java.lang.NullPointerException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setAllowedCarriers" , e ) ; } return new java.util.ArrayList < android.service.carrier.CarrierIdentifier > ( 0 ) ; }
void stopDtmfTone ( com.android.server.telecom.Call call ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "stopDtmfTone" ) ) ) { try { logOutgoing ( "stopDtmfTone %s" , callId ) ; mServiceInterface.stopDtmfTone ( callId ) ; } catch ( android.os.RemoteException e ) { } } }
private static android.database.MatrixCursor createHeaderCursor ( android.content.Context context , java.lang.String name , long id ) { android.database.MatrixCursor headerCursor = new android.database.MatrixCursor ( com.android.dialer.searchfragment.directories.DirectoryContactsCursor.PROJECTION , 1 ) ; if ( com.android.contacts.common.compat.DirectoryCompat.isOnlyEnterpriseDirectoryId ( id ) ) { headerCursor.addRow ( new java.lang.Object [ ] { context.getString ( R.string.directory_search_label_work ) , id } ) ; } else { headerCursor.addRow ( new java.lang.Object [ ] { context.getString ( R.string.directory , name ) , id } ) ; } return headerCursor ; }
public com.android.build.gradle.tasks.PackageApplication getPackageApplication ( ) { return getApkVariantData ( ) . packageApplicationTask ; }
public void severe ( java.lang.String msg ) { if ( ( java.util.logging.Level.SEVERE.intValue ( ) ) < ( levelValue ) ) { return ; } log ( java.util.logging.Level.SEVERE , msg ) ; }
private int parseDayOfWeek ( java.lang.String string , int offset , java.lang.String [ ] longs , java.lang.String [ ] shorts ) { int index = parseText ( string , offset , longs , java.util.Calendar.DAY_OF_WEEK ) ; if ( index < 0 ) { index = parseText ( string , offset , shorts , java.util.Calendar.DAY_OF_WEEK ) ; } return index ; }
void loadIcons ( int [ ] recordNumbers , android.os.Message msg ) { if ( ( ( recordNumbers == null ) || ( ( recordNumbers.length ) == 0 ) ) || ( msg == null ) ) { return ; } mEndMsg = msg ; mIcons = new android.graphics.Bitmap [ recordNumbers.length ] ; mRecordNumbers = recordNumbers ; mCurrentRecordIndex = 0 ; mState = com.android.internal.telephony.gsm.stk.IconLoader.STATE_MULTI_ICONS ; startLoadingIcon ( recordNumbers [ 0 ] ) ; }
private void addError ( org.eclipse.swt.widgets.Composite parent , java.lang.String message ) { if ( ( mError ) == null ) { mError = com.android.ide.eclipse.adt.AdtPlugin.getImageLoader ( ) . loadImage ( com.android.ide.eclipse.adt.internal.wizards.export.ProjectCheckPage.IMG_ERROR , mDisplay ) ; } new org.eclipse.swt.widgets.Label ( parent , org.eclipse.swt.SWT.NONE ) . setImage ( mError ) ; org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label ( parent , org.eclipse.swt.SWT.NONE ) ; label.setLayoutData ( new org.eclipse.swt.layout.GridData ( org.eclipse.swt.layout.GridData.FILL_HORIZONTAL ) ) ; label.setText ( message ) ; setErrorMessage ( "Application cannot be exported due to the error(s) below." ) ; setPageComplete ( false ) ; mHasMessage = true ; }
public void testPackageOverridePackageFromFlavorWithSuffix2 ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilder ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; mFlavor.setPackageName ( "foo.bar" ) ; mDebug.setPackageNameSuffix ( "fortytwo" ) ; builder.setBuildVariant ( mMain , mFlavor , mDebug ) ; assertEquals ( "foo.bar.fortytwo" , builder.getPackageOverride ( "" ) ) ; }
private void setCallState ( android.bluetooth.BluetoothHeadsetClientCall c , int state ) { if ( state == ( c.getState ( ) ) ) { return ; } if ( state == ( android.bluetooth.BluetoothHeadsetClientCall.CALL_STATE_TERMINATED ) ) { if ( ( mAudioManager.getMode ( ) ) != ( android.media.AudioManager.MODE_NORMAL ) ) { mAudioManager.setMode ( AudioManager.MODE_NORMAL ) ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "abandonAudioFocus " ) ; mAudioManager.abandonAudioFocusForCall ( ) ; } } c.setState ( state ) ; sendCallChangedIntent ( c ) ; }
public com.android.ahat.DocString render ( com.android.ahat.heapdump.PathElement element ) { if ( element == null ) { return com.android.ahat.DocString.link ( com.android.ahat.DocString.uri ( "rooted" ) , com.android.ahat.DocString.text ( "ROOT" ) ) ; } else { com.android.ahat.DocString label = com.android.ahat.DocString.text ( "→ " ) ; label.append ( com.android.ahat.Summarizer.summarize ( element.instance ) ) ; label.append ( element.field ) ; return label ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; getActivity ( ) ; }
public void testConnectivityChanged_manifestRequestOnly_shouldNotReceiveIntent ( ) { android.net.cts.ConnectivityReceiver.prepare ( ) ; toggleWifi ( ) ; android.content.Intent finalIntent = new android.content.Intent ( ConnectivityReceiver.FINAL_ACTION ) ; finalIntent.setClass ( mContext , android.net.cts.ConnectivityReceiver.class ) ; mContext.sendBroadcast ( finalIntent ) ; assertFalse ( android.net.cts.ConnectivityReceiver.waitForBroadcast ( ) ) ; }
public boolean isNonDefault ( ) { return ( ( ( mSupport5gBand ) || ( ( mMasterPreference ) != 0 ) ) || ( ( mClusterLow ) != ( android.net.wifi.aware.ConfigRequest.CLUSTER_ID_MIN ) ) ) || ( ( mClusterHigh ) != ( android.net.wifi.aware.ConfigRequest.CLUSTER_ID_MAX ) ) ; }
void updateNavigationBar ( boolean isDialpadVisible ) { if ( ! ( com.android.dialer.compat.ActivityCompat.isInMultiWindowMode ( inCallActivity ) ) ) { android.view.View navigationBarBackground = inCallActivity.getWindow ( ) . findViewById ( R.id.navigation_bar_background ) ; if ( navigationBarBackground != null ) { navigationBarBackground.setVisibility ( ( isDialpadVisible ? android.view.View.VISIBLE : android.view.View.GONE ) ) ; } } }
public void resetMemory ( java.lang.String cardId , @ android.telephony.euicc.EuiccCardManager.ResetOption int options , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.Void > callback ) { try { getIEuiccCardController ( ) . resetMemory ( mContext.getOpPackageName ( ) , cardId , options , new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode ) { callback.onComplete ( resultCode , null ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling resetMemory" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
public void clearAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , long ceDataInode ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.clearAppData ( uuid , packageName , userId , flags , ceDataInode ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
protected com.android.volley.Request < android.graphics.Bitmap > makeImageRequest ( java.lang.String requestUrl , int maxWidth , int maxHeight , final java.lang.String cacheKey ) { return new com.android.volley.toolbox.ImageRequest ( requestUrl , new com.android.volley.Response.Listener < android.graphics.Bitmap > ( ) { @ java.lang.Override public void onResponse ( android.graphics.Bitmap response ) { onGetImageSuccess ( cacheKey , response ) ; } } , maxWidth , maxHeight , android.graphics.Bitmap.Config.RGB_565 , new com.android.volley.Response.ErrorListener ( ) { @ java.lang.Override public void onErrorResponse ( com.android.volley.VolleyError error ) { onGetImageError ( cacheKey , error ) ; } } ) ; }
public void testAesCbcHmacSha256Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public int getAttributeValueType ( int index ) throws com.android.apksigner.AndroidBinXmlParser.XmlParserException { int type = getAttribute ( index ) . getValueType ( ) ; switch ( type ) { case com.android.apksigner.AndroidBinXmlParser.Attribute.TYPE_STRING : return com.android.apksigner.AndroidBinXmlParser.VALUE_TYPE_STRING ; case com.android.apksigner.AndroidBinXmlParser.Attribute.TYPE_INT_DEC : case com.android.apksigner.AndroidBinXmlParser.Attribute.TYPE_INT_HEX : case com.android.apksigner.AndroidBinXmlParser.Attribute.TYPE_REFERENCE : return com.android.apksigner.AndroidBinXmlParser.VALUE_TYPE_INT ; case com.android.apksigner.AndroidBinXmlParser.Attribute.TYPE_INT_BOOLEAN : return com.android.apksigner.AndroidBinXmlParser.VALUE_TYPE_BOOLEAN ; default : return com.android.apksigner.AndroidBinXmlParser.VALUE_TYPE_UNSUPPORTED ; } }
private static boolean hasLooperConstructorParameter ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass cls ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod constructor : cls.getConstructors ( ) ) { for ( int i = 0 , n = constructor.getArgumentCount ( ) ; i < n ; i ++ ) { com.android.tools.lint.client.api.JavaParser.TypeDescriptor type = constructor.getArgumentType ( i ) ; if ( type.matchesSignature ( com.android.tools.lint.checks.HandlerDetector.LOOPER_CLS ) ) { return true ; } } } return false ; }
protected void install ( byte [ ] content , int version ) throws java.io.IOException { boolean valid = installer.install ( content ) ; android.util.Slog.i ( com.android.server.updates.TzDataInstallReceiver.TAG , ( "Timezone data install valid for this device: " + valid ) ) ; super . install ( content , version ) ; }
private static com.android.server.wifi.hotspot2.PasspointProvider generateProvider ( android.net.wifi.WifiConfiguration config ) { com.android.server.wifi.hotspot2.PasspointProvider provider = org.mockito.Mockito.mock ( com.android.server.wifi.hotspot2.PasspointProvider.class ) ; org.mockito.Mockito.when ( provider.getWifiConfig ( ) ) . thenReturn ( config ) ; return provider ; }
public void test_toString ( ) { java.text.FieldPosition fpos = new java.text.FieldPosition ( 1 ) ; fpos.setBeginIndex ( 2 ) ; fpos.setEndIndex ( 3 ) ; assertEquals ( "ToString returned the wrong value:" , "java.text.FieldPosition[attribute=null, field=1, beginIndex=2, endIndex=3]" , fpos.toString ( ) ) ; java.text.FieldPosition fpos2 = new java.text.FieldPosition ( java.text.DateFormat.Field.ERA ) ; fpos2.setBeginIndex ( 4 ) ; fpos2.setEndIndex ( 5 ) ; assertEquals ( "ToString returned the wrong value:" , ( ( "java.text.FieldPosition[attribute=" + ( java.text.DateFormat.Field.ERA ) ) + ", field=-1, beginIndex=4, endIndex=5]" ) , fpos2.toString ( ) ) ; }
public com.android.jack.test.toolchain.JackApiV01Toolchain build ( ) { return new com.android.jack.test.toolchain.JackApiV01IncrementalToolchain ( com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "jack" ) ) ; }
public void binderDied ( ) { if ( DEBUG_ALL ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( "Death received in " + ( this ) ) + " for thread " ) + ( mAppThread.asBinder ( ) ) ) ) ; synchronized ( this ) { appDiedLocked ( mApp , mPid , mAppThread , true ) ; } }
public boolean putAll ( com.google.common.collect.Multimap < ? extends K , ? extends V > multimap ) { boolean changed = false ; for ( java.util.Map.Entry < ? extends K , ? extends V > entry : multimap.entries ( ) ) { changed |= put ( entry.getKey ( ) , entry.getValue ( ) ) ; } return changed ; }
public void testStageInstallWithErrorCode_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir ( ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( new java.io.File ( workingDir , "myFile" ) , new byte [ ] { 'a' } ) ; com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( distro ) ) ; assertInstallDistroStaged ( distro ) ; assertNoInstalledDistro ( ) ; }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , int [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
public void test_isDaemon ( ) { st = new java.lang.Thread ( new org.apache.harmony.tests.java.lang.ThreadTest.SimpleThread ( 1 ) , "SimpleThread10" ) ; assertTrue ( "Non-Daemon thread returned true" , ( ! ( st.isDaemon ( ) ) ) ) ; st.setDaemon ( true ) ; assertTrue ( "Daemon thread returned false" , st.isDaemon ( ) ) ; st.start ( ) ; }
public void testApplyingWithCaseChangedNames ( ) throws java.lang.Exception { com.intellij.openapi.util.io.FileUtil.rename ( new java.io.File ( myOlderDir , "Readme.txt" ) , new java.io.File ( myOlderDir , "README.txt" ) ) ; com.intellij.updater.PatchFileCreator.create ( myOlderDir , myNewerDir , myFile , java.util.Collections.< java.lang.String > emptyList ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , com.intellij.updater.TEST_UI ) ; assertAppliedAndRevertedCorrectly ( com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ) ; }
public void onResume ( ) { super . onResume ( ) ; com.android.dialer.logging.Logger.get ( getContext ( ) ) . logImpression ( DialerImpression.Type.VVM_SETTINGS_VIEWED ) ; voicemailClient.addActivationStateListener ( this ) ; android.preference.PreferenceScreen preferenceScreen = getPreferenceScreen ( ) ; if ( preferenceScreen != null ) { preferenceScreen.removeAll ( ) ; } addPreferencesFromResource ( R.xml.voicemail_settings ) ; initializePreferences ( ) ; setupVisualVoicemailPreferences ( ) ; setupNotificationsPreference ( ) ; setupAdvancedSettingsPreference ( ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent.getAction ( ) ; if ( com.android.internal.telephony.CarrierSignalAgent.DBG ) log ( ( "CarrierSignalAgent receiver action: " + action ) ) ; if ( action.equals ( CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED ) ) { loadCarrierConfig ( ) ; } }
public void testStyles ( ) throws java.lang.Exception { assertEquals ( ( "pxsp.xml:12: Warning: Should use \"sp\" instead of \"dp\" for text sizes\n" + ( ( ( "pxsp.xml:17: Warning: Avoid using \"px\" as units; use \"dp\" instead\n" + "pxsp.xml:18: Warning: Avoid using \"px\" as units; use \"dp\" instead\n" ) + "pxsp.xml:6: Warning: Should use \"sp\" instead of \"dp\" for text sizes\n" ) + "pxsp.xml:9: Warning: Avoid using \"px\" as units; use \"dp\" instead" ) ) , lintFiles ( "res/values/pxsp.xml" ) ) ; }
private java.util.List < java.lang.String > getStringList ( java.lang.StringBuilder stringAccumulator ) { java.util.List < java.lang.String > filteredStrings = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String s : getString ( mStringAccumulator ) . split ( com.android.sdklib.devices.DeviceParser.DeviceHandler.sSpaceRegex ) ) { if ( ( s != null ) && ( ! ( s.isEmpty ( ) ) ) ) { filteredStrings.add ( s.trim ( ) ) ; } } return filteredStrings ; }
private void handleServiceCategoryProgramData ( com.android.internal.telephony.cdma.SmsMessage sms ) { java.util.ArrayList < android.telephony.cdma.CdmaSmsCbProgramData > programDataList = sms.getSmsCbProgramData ( ) ; if ( programDataList == null ) { android.util.Log.e ( com.android.internal.telephony.cdma.CdmaSMSDispatcher.TAG , "handleServiceCategoryProgramData: program data list is null!" ) ; return ; } android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED_ACTION ) ; intent.putExtra ( "sender" , sms.getOriginatingAddress ( ) ) ; intent.putParcelableArrayListExtra ( "program_data" , programDataList ) ; dispatch ( intent , com.android.internal.telephony.cdma.RECEIVE_SMS_PERMISSION , mScpResultsReceiver ) ; }
public boolean process ( java.util.Set < ? extends javax.lang.model.element.TypeElement > annotations , javax.annotation.processing.RoundEnvironment roundEnv ) { try { for ( javax.lang.model.element.Element annotatedElement : roundEnv.getElementsAnnotatedWith ( com.google.devtools.common.options.Option.class ) ) { checkInOptionBase ( annotatedElement ) ; } } catch ( com.google.devtools.common.options.OptionProcessor.OptionProcessorException e ) { error ( e.elementInError , e.getMessage ( ) ) ; } return true ; }
public void run ( ) { uiNode.setAttributeValue ( LayoutConstants.ATTR_LAYOUT_X , java.lang.String.format ( LayoutConstants.VALUE_N_DIP , where.x ) , false ) ; uiNode.setAttributeValue ( LayoutConstants.ATTR_LAYOUT_Y , java.lang.String.format ( LayoutConstants.VALUE_N_DIP , where.y ) , false ) ; uiNode.commitDirtyAttributesToXml ( ) ; }
public void run ( ) { if ( mIsHttps ) { mResult = sendHttpProbe ( httpsUrl , ValidationProbeEvent.PROBE_HTTPS ) ; } else { mResult = sendHttpProbe ( httpUrl , ValidationProbeEvent.PROBE_HTTP ) ; } if ( ( ( mIsHttps ) && ( mResult.isSuccessful ( ) ) ) || ( ( ! ( mIsHttps ) ) && ( mResult.isPortal ( ) ) ) ) { while ( ( latch.getCount ( ) ) > 0 ) { latch.countDown ( ) ; } } latch.countDown ( ) ; }
private com.android.jack.ir.ast.JFieldId getOrCreateAssertionstatusField ( @ javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest request ) { try { com.android.jack.ir.ast.JFieldId id = currentType.getFieldId ( com.android.jack.transformations.AssertionTransformer.Visitor.ASSERTION_FIELD_NAME , JPrimitiveTypeEnum.BOOLEAN.getType ( ) , FieldKind.STATIC ) ; com.android.jack.ir.ast.JField field = id.getField ( ) ; assert field != null ; if ( field.getEnclosingType ( ) . equals ( currentType ) ) { return id ; } } catch ( com.android.jack.lookup.JLookupException e ) { } return addAssertionStatusToType ( currentType , request ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s[%d], valInt=%d, valInt2=%d, valString=%s, device=%s" , getTypeString ( ) , type , valueInt , valueInt2 , valueString , device ) ; }
public long getContext ( ) throws javax.net.ssl.SSLException { long sslCtx = super . getContext ( ) ; org.conscrypt.NativeCrypto.SSL_CTX_add_client_custom_ext ( sslCtx , TEST_EXTENSION_TYPEA ) ; org.conscrypt.NativeCrypto.SSL_CTX_add_client_custom_ext ( sslCtx , TEST_EXTENSION_TYPEB ) ; return sslCtx ; }
public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { switch ( mTarget ) { case DEVICE : if ( ( ( ! ( e instanceof com.android.tradefed.device.DeviceNotAvailableException ) ) && ( mCleanup ) ) && ( ( mFilePushed ) != null ) ) { device.executeShellCommand ( ( "rm -r " + ( mFilePushed ) ) ) ; } break ; case HOST : if ( ( mFilePushed ) != null ) { com.android.tradefed.util.FileUtil.deleteFile ( new java.io.File ( mFilePushed ) ) ; } } }
public void onResume ( ) { com.android.dialer.common.LogUtil.d ( "CallLogFragment.onResume" , toString ( ) ) ; super . onResume ( ) ; final boolean hasReadCallLogPermission = com.android.dialer.util.PermissionsUtil.hasPermission ( getActivity ( ) , android.Manifest.permission.READ_CALL_LOG ) ; if ( ( ! ( mHasReadCallLogPermission ) ) && hasReadCallLogPermission ) { mRefreshDataRequired = true ; updateEmptyMessage ( mCallTypeFilter ) ; } mHasReadCallLogPermission = hasReadCallLogPermission ; mAdapter.clearFilteredNumbersCache ( ) ; refreshData ( ) ; mAdapter.onResume ( ) ; rescheduleDisplayUpdate ( ) ; }
public static javax.net.ssl.TrustManager wrap ( javax.net.ssl.TrustManager trustManager ) { if ( ! ( trustManager instanceof javax.net.ssl.X509TrustManager ) ) { return trustManager ; } return new libcore.javax.net.ssl.TestTrustManager ( ( ( javax.net.ssl.X509TrustManager ) ( trustManager ) ) ) ; }
public void testCorruptOverrideFile ( ) throws java.lang.Exception { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData ( libcore.util.ZoneInfoDBTest.makeCorruptFile ( ) , libcore.util.ZoneInfoDBTest.DEFAULT_FILE_1 , libcore.util.ZoneInfoDBTest.DEFAULT_FILE_2 ) ; assertEquals ( libcore.util.ZoneInfoDBTest.CURRENT_VERSION , data.getVersion ( ) ) ; assertEquals ( java.util.TimeZone.getAvailableIDs ( ) . length , data.getAvailableIDs ( ) . length ) ; }
public void test1 ( ) throws java.lang.Exception { check ( ( "<root>\n" + ( ( ( "[ <element/>\n" + " <second/>\n" ) + "]\n" ) + "</root>\n" ) ) , ( " <element/>\n" + " <second/>\n" ) , ( "<root>\n" + ( ( ( " <element/>\n" + " <second/>\n" ) + "\n" ) + "</root>\n" ) ) , com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences.defaults ( ) ) ; }
private com.android.jack.ir.ast.JExpression makeLocalRef ( com.android.jack.ir.sourceinfo.SourceInfo info , org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding b ) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.ir.ast.JVariable variable = curMethod.getJVariable ( b ) ; assert variable != null ; if ( variable instanceof com.android.jack.ir.ast.JLocal ) { return new com.android.jack.ir.ast.JLocalRef ( info , ( ( com.android.jack.ir.ast.JLocal ) ( variable ) ) ) ; } else { return new com.android.jack.ir.ast.JParameterRef ( info , ( ( com.android.jack.ir.ast.JParameter ) ( variable ) ) ) ; } }
public void testLibProguard ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguard" ) ; java.io.File fileOutput = new java.io.File ( project , "build/proguard/release" ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int proguardInt -> a" } ) ; }
public static com.android.dx.rop.code.RopMethod convert ( com.android.dx.cf.code.ConcreteMethod method , com.android.dx.rop.code.TranslationAdvice advice , com.android.dx.cf.iface.MethodList methods ) { try { com.android.dx.cf.code.Ropper r = new com.android.dx.cf.code.Ropper ( method , advice , methods ) ; r.doit ( ) ; return r.getRopMethod ( ) ; } catch ( com.android.dx.cf.code.SimException ex ) { ex.addContext ( ( "...while working on method " + ( method.getNat ( ) . toHuman ( ) ) ) ) ; throw ex ; } }
public com.android.sched.vfs.InputOutputVDir checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.direct.DirectDir ( new com.android.sched.util.file.Directory ( string , context.getRunnableHooks ( ) , existence , permissions , change ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e ) ; } }
final int startActivitiesInPackage ( int uid , java.lang.String callingPackage , android.content.Intent [ ] intents , java.lang.String [ ] resolvedTypes , android.os.IBinder resultTo , android.os.Bundle options , int userId ) { userId = handleIncomingUser ( android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , userId , false , com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY , "startActivityInPackage" , null ) ; int ret = mStackSupervisor.startActivities ( null , uid , callingPackage , intents , resolvedTypes , resultTo , options , userId ) ; return ret ; }
public void testEmptyStringException ( ) { try { new java.text.RuleBasedCollator ( "" ) ; fail ( ( "Constructor RuleBasedCollator(\"\") " + "should throw ParseException" ) ) ; } catch ( java.text.ParseException e ) { assertEquals ( "java.text.ParseException" , e.getClass ( ) . getName ( ) ) ; assertEquals ( 0 , e.getErrorOffset ( ) ) ; } }
private void reportResumedActivityLocked ( com.android.server.am.HistoryRecord r ) { final int identHash = java.lang.System.identityHashCode ( r ) ; updateUsageStats ( r , true ) ; int i = mWatchers.beginBroadcast ( ) ; while ( i > 0 ) { i -- ; android.app.IActivityWatcher w = mWatchers.getBroadcastItem ( i ) ; if ( w != null ) { try { w.activityResuming ( identHash ) ; } catch ( android.os.RemoteException e ) { } } } mWatchers.finishBroadcast ( ) ; }
public void loadComponentsInApMode ( ) throws java.lang.Exception { when ( mWifiNative.startHal ( anyBoolean ( ) ) ) . thenReturn ( true ) ; mWsm.setHostApRunning ( new android.net.wifi.WifiConfiguration ( ) , true ) ; mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( "SoftApState" , getCurrentState ( ) . getName ( ) ) ; verify ( mWifiNative ) . startHal ( eq ( false ) ) ; verify ( mSoftApManager ) . start ( ) ; }
public void onProgressChanged ( com.android.browser.Tab tab ) { mCrashRecoveryHandler.backupState ( ) ; int newProgress = tab.getLoadProgress ( ) ; if ( newProgress == 100 ) { android.webkit.CookieSyncManager.getInstance ( ) . sync ( ) ; if ( tab.inPageLoad ( ) ) { updateInLoadMenuItems ( mCachedMenu , tab ) ; } } else { if ( ! ( tab.inPageLoad ( ) ) ) { updateInLoadMenuItems ( mCachedMenu , tab ) ; } } mUi.onProgressChanged ( tab ) ; }
public void onClick ( android.view.View view ) { com.android.apps.tag.record.RecordUtils.ClickInfo info = ( ( com.android.apps.tag.record.RecordUtils.ClickInfo ) ( view.getTag ( ) ) ) ; try { info.activity.startActivity ( info.intent ) ; info.activity.finish ( ) ; } catch ( android.content.ActivityNotFoundException e ) { android.util.Log.e ( com.android.apps.tag.record.UriRecord.TAG , ( "Failed to launch activity for intent " + ( info.intent ) ) , e ) ; } }
static void deadSequence ( ) { int dead = 0 ; for ( int i = 0 ; i < ( Main.a.length ) ; i ++ ) { Main.a [ i ] = 3 ; dead += i ; } }
public void handleMessage ( int messageType , java.lang.Object message ) throws com.google.android.exoplayer.ExoPlaybackException { if ( messageType == ( MSG_SET_PLAYBACK_PARAMS ) ) { try { super . handleMessage ( messageType , message ) ; } catch ( java.lang.IllegalArgumentException e ) { if ( com.android.tv.tuner.exoplayer.ac3.Ac3TrackRenderer.isAudioTrackSetPlaybackParamsError ( e ) ) { notifyAudioTrackSetPlaybackParamsError ( e ) ; } } return ; } super . handleMessage ( messageType , message ) ; }
public void onShowCustomView ( android.view.View view , android.webkit.WebChromeClient.CustomViewCallback cb ) { org.chromium.base.TraceEvent.begin ( ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onShowCustomView" ) ; mWebChromeClient.onShowCustomView ( view , cb ) ; } org.chromium.base.TraceEvent.end ( ) ; }
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFromUnchecked" ) ; int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , d.length , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize , Element.DataType.SIGNED_8 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public java.lang.String [ ] getHttpAuthUsernamePassword ( final java.lang.String host , final java.lang.String realm ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.String [ ] ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.String [ ] > ( ) { @ java.lang.Override public java.lang.String [ ] call ( ) { return getHttpAuthUsernamePassword ( host , realm ) ; } } ) ; return ret ; } return mAwContents.getHttpAuthUsernamePassword ( host , realm ) ; }
public void performReceive ( android.content.Intent intent , int resultCode , java.lang.String data , android.os.Bundle extras , boolean ordered , boolean sticky ) throws android.os.RemoteException { synchronized ( this ) { mDidUpdate = true ; } systemReady ( goingCallback ) ; }
public static java.lang.String getIndent ( org.eclipse.wst.sse.core.internal.provisional.text.IStructuredDocument document , org.w3c.dom.Node xmlNode ) { if ( xmlNode instanceof org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) { org.eclipse.wst.sse.core.internal.provisional.IndexedRegion region = ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( xmlNode ) ) ; int startOffset = region.getStartOffset ( ) ; return com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor.getIndentAtOffset ( document , startOffset ) ; } return "" ; }
public final java.lang.String getClassName ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Snapshot snapshot ) { com.android.tools.perflib.heap.ClassObj theClass ; if ( ( mType ) == ( RootType.SYSTEM_CLASS ) ) { theClass = snapshot.findClass ( mId ) ; } else { theClass = snapshot.findReference ( mId ) . getClassObj ( ) ; } if ( theClass == null ) { return com.android.tools.perflib.heap.RootObj.UNDEFINED_CLASS_NAME ; } return theClass.mClassName ; }
public boolean onGenericMotionEvent ( final android.view.MotionEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onGenericMotionEvent ( event ) ; } } ) ; return ret ; } return mAwContents.onGenericMotionEvent ( event ) ; }
public int beginConfigure ( ) { if ( android.hardware.camera2.legacy.CameraDeviceUserShim.DEBUG ) { android.util.Log.d ( android.hardware.camera2.legacy.CameraDeviceUserShim.TAG , "beginConfigure called." ) ; } if ( mLegacyDevice.isClosed ( ) ) { android.util.Log.e ( android.hardware.camera2.legacy.CameraDeviceUserShim.TAG , "Cannot begin configure, device has been closed." ) ; return android.hardware.camera2.utils.CameraBinderDecorator.ENODEV ; } synchronized ( mConfigureLock ) { if ( mConfiguring ) { android.util.Log.e ( android.hardware.camera2.legacy.CameraDeviceUserShim.TAG , "Cannot begin configure, configuration change already in progress." ) ; return android.hardware.camera2.utils.CameraBinderDecorator.INVALID_OPERATION ; } mConfiguring = true ; } return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR ; }
public com.google.common.collect.Multiset.Entry < E > lastEntry ( ) { return delegate ( ) . lastEntry ( ) ; }
public void close ( ) { android.util.Log.d ( android.net.IpSecTransform.TAG , ( "Removing Transform with Id " + ( mResourceId ) ) ) ; if ( ( mResourceId ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { mCloseGuard.close ( ) ; return ; } try { android.net.IIpSecService svc = getIpSecService ( ) ; svc.deleteTransportModeTransform ( mResourceId ) ; stopKeepalive ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowAsRuntimeException ( ) ; } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID ; mCloseGuard.close ( ) ; } }
private boolean hasFormattingPatternForNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { int countryCallingCode = number.getCountryCode ( ) ; java.lang.String phoneNumberRegion = getRegionCodeForCountryCode ( countryCallingCode ) ; com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata metadata = getMetadataForRegionOrCallingCode ( countryCallingCode , phoneNumberRegion ) ; if ( metadata == null ) { return false ; } java.lang.String nationalNumber = getNationalSignificantNumber ( number ) ; com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat formatRule = chooseFormattingPatternForNumber ( metadata.numberFormat , nationalNumber ) ; return formatRule != null ; }
protected boolean stop ( ) { try { unregisterReceiver ( mPbapBroadcastReceiver ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "Unable to unregister pbapclient receiver" , e ) ; } mPbapClientStateMachine.disconnect ( null ) ; return true ; }
public void onSdkLoaded ( ) { com.android.sdklib.IAndroidTarget oldTarget = getRenderingTarget ( ) ; preRenderingTargetChangeCleanUp ( oldTarget ) ; computeSdkVersion ( ) ; com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigChooser.onSdkLoaded ( target ) ; changed ( ( ( CHANGED_FOLDER ) | ( CHANGED_RENDER_TARGET ) ) ) ; } } }
private void finishInitializing ( ) { if ( ( mCurrentCall ) == null ) { java.lang.String number = getAddress ( ) . getSchemeSpecificPart ( ) ; android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "Dialing " + number ) ) ; mHeadsetProfile.dial ( mDevice , number ) ; setDialing ( ) ; } else { handleCallChanged ( mCurrentCall ) ; } }
public void deleteActivityContainer ( android.app.IActivityContainer container ) throws android.os.RemoteException { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "deleteActivityContainer()" ) ; synchronized ( this ) { mStackSupervisor.deleteActivityContainer ( container ) ; } }
public void restrictedStateChanged ( int indicationType , int var2 ) { }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
private static dalvik.system.DexFile loadDexFile ( java.io.File file , java.io.File optimizedDirectory , java.lang.ClassLoader loader ) throws java.io.IOException { if ( optimizedDirectory == null ) { return new dalvik.system.DexFile ( file , loader ) ; } else { java.lang.String optimizedPath = dalvik.system.DexPathList.optimizedPathFor ( file , optimizedDirectory ) ; return dalvik.system.DexFile.loadDex ( file.getPath ( ) , optimizedPath , 0 , loader ) ; } }
public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable ( ) { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build ( ) ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback ( ) ; mCm.requestNetwork ( nr , networkCallback , 10 ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( TRANSPORT_WIFI ) ; mWiFiNetworkAgent.connect ( false ) ; networkCallback.expectCallback ( com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE , mWiFiNetworkAgent ) ; com.android.server.ConnectivityServiceTest.sleepFor ( 15 ) ; networkCallback.assertNoCallback ( ) ; }
public void TestFixedDecimalSuperscript ( ) { com.ibm.icu.util.ULocale en = new com.ibm.icu.util.ULocale ( "en" ) ; com.ibm.icu.text.DecimalFormat decfmt = ( ( com.ibm.icu.text.DecimalFormat ) ( com.ibm.icu.text.NumberFormat.getInstance ( en ) ) ) ; java.text.AttributedCharacterIterator iterator = decfmt.formatToCharacterIterator ( 123456.0 ) ; com.ibm.icu.text.ScientificFormatHelper helper = com.ibm.icu.text.ScientificFormatHelper.getInstance ( decfmt.getDecimalFormatSymbols ( ) ) ; try { helper.toSuperscriptExponentDigits ( iterator ) ; fail ( "expected illegal argument exception" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
private static boolean isUpAndHasAddresses ( java.net.NetworkInterface iface ) throws java.io.IOException { return ( iface.isUp ( ) ) && ( iface.getInetAddresses ( ) . hasMoreElements ( ) ) ; }
private static void assertDefaultPhoneAccountHandleEquals ( com.android.server.telecom.PhoneAccountRegistrar.DefaultPhoneAccountHandle a , com.android.server.telecom.PhoneAccountRegistrar.DefaultPhoneAccountHandle b ) { if ( a != b ) { if ( ( a != null ) && ( b != null ) ) { assertEquals ( a.userHandle , b.userHandle ) ; com.android.server.telecom.tests.PhoneAccountRegistrarTest.assertPhoneAccountHandleEquals ( a.phoneAccountHandle , b.phoneAccountHandle ) ; } else { fail ( ( ( ( "Default phone account handles are not equal: " + a ) + ", " ) + b ) ) ; } } }
public static com.android.jack.dx.rop.code.SourcePosition getSourcePosition ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode stmt ) { if ( ( stmt.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return com.android.jack.dx.rop.code.SourcePosition.NO_INFO ; } int startLine = stmt.getSourceInfo ( ) . getStartLine ( ) ; return new com.android.jack.dx.rop.code.SourcePosition ( new com.android.jack.dx.rop.cst.CstString ( stmt.getSourceInfo ( ) . getFileName ( ) ) , ( - 1 ) , ( startLine == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN_LINE_NUMBER ) ? - 1 : startLine ) ) ; }
public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance ( byte [ ] in ) throws java.security.cert.CertificateException { try { return ( ( org.apache.harmony.security.provider.cert.X509CertPathImpl ) ( org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode ( in ) ) ) ; } catch ( java.io.IOException e ) { throw new java.security.cert.CertificateException ( ( "Incorrect encoded form: " + ( e.getMessage ( ) ) ) ) ; } }
protected void removeFile ( com.android.resources.ResourceType type , com.android.ide.common.resources.ResourceFile file ) { java.util.List < com.android.ide.common.resources.ResourceItem > list = mResourceMap.get ( type ) ; if ( list != null ) { for ( int i = 0 ; i < ( list.size ( ) ) ; i ++ ) { com.android.ide.common.resources.ResourceItem item = list.get ( i ) ; item.removeFile ( file ) ; } } }
public void testAesCbcHmacMd5Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
public void onChange ( ) { if ( ( ( getActivity ( ) ) != null ) && ( isAdded ( ) ) ) { getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; } }
public void testHasValue ( ) { android.os.Bundle bundle = new android.os.Bundle ( ) ; android.os.Bundle value = new android.os.Bundle ( ) ; value.putString ( "hello" , "world" ) ; bundle.putBundle ( "key" , value ) ; assertTrue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( "world" ) ) . matches ( bundle ) ) ; assertTrue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( android.support.test.espresso.intent.matcher.BundleMatchers.hasValue ( org.hamcrest.Matchers.equalTo ( "world" ) ) ) . matches ( bundle ) ) ; }
public void testSwitchTimezone0 ( ) throws java.lang.Exception { final java.lang.String timeZone = "America/Los_Angeles" ; android.text.format.Time t = new android.text.format.Time ( android.text.format.Time.TIMEZONE_UTC ) ; t.parse ( "20061005T120000" ) ; t.switchTimezone ( timeZone ) ; assertEquals ( timeZone , t.timezone ) ; }
private static void validateManifestAttribute ( com.android.manifmerger.MergingReport.Builder mergingReport , com.android.manifmerger.XmlElement manifest , com.android.manifmerger.XmlDocument.Type fileType ) { org.w3c.dom.Attr attributeNode = manifest.getXml ( ) . getAttributeNode ( AndroidManifest.ATTRIBUTE_PACKAGE ) ; if ( ( attributeNode == null ) && ( fileType != ( XmlDocument.Type.OVERLAY ) ) ) { manifest.addMessage ( mergingReport , ( fileType == ( XmlDocument.Type.MAIN ) ? ERROR : WARNING ) , java.lang.String.format ( "Missing 'package' declaration in manifest at %1$s" , manifest.printPosition ( ) ) ) ; } }
public android.os.ParcelUuid [ ] getUuids ( ) { if ( ( ( android.bluetooth.BluetoothDevice.sService ) == null ) || ( ( isBluetoothEnabled ( ) ) == false ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot get remote device Uuids" ) ; return null ; } try { return android.bluetooth.BluetoothDevice.sService.getRemoteUuids ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return null ; }
public void testAndroidStrings ( ) { assertEquals ( mAppTextView1.getText ( ) , "SUCCESS-APP" ) ; assertEquals ( mLib1TextView1.getText ( ) , "SUCCESS-LIB1" ) ; assertEquals ( mLib2TextView1.getText ( ) , "SUCCESS-LIB2" ) ; }
synchronized boolean unregisterApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp()" ) ; } if ( config == null ) { android.util.Log.w ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp: failed. The config in parameter should not be null" ) ; return false ; } if ( ( ( mAppConfig ) == null ) || ( ! ( config.equals ( mAppConfig ) ) ) ) { android.util.Log.w ( com.android.bluetooth.hid.HidDeviceService.TAG , "unregisterApp: failed. The app configuration does not match the record" ) ; return false ; } return unregisterAppNative ( ) ; }
private static org.w3c.dom.Document checkDocument ( @ com.android.annotations.NonNull java.lang.String xml , boolean namespaceAware ) { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance ( ) ; org.xml.sax.InputSource is = new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) ; factory.setNamespaceAware ( namespaceAware ) ; factory.setValidating ( false ) ; try { javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder ( ) ; return builder.parse ( is ) ; } catch ( org.xml.sax.SAXException sax ) { com.android.build.gradle.tasks.annotations.Extractor.warning ( sax.toString ( ) ) ; } catch ( java.lang.Exception e ) { } return null ; }
public void adjustLabel ( com.android.sdklib.internal.repository.sources.SdkSource source ) { if ( ( ( getLabel ( ) ) == null ) || ( getLabel ( ) . startsWith ( "http" ) ) ) { setLabel ( ( source == ( com.android.sdkuilib.internal.repository.sdkman2.PkgCategorySource.UNKNOWN_SOURCE ) ? "Local Packages" : source.toString ( ) ) ) ; } }
public void copyFromUnchecked ( byte [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFromUnchecked ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFromUnchecked ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFromUnchecked ( 0 , mCurrentCount , d ) ; } }
public void testGetMaximumTimeToLock ( ) { mDevicePolicyManager.setMaximumTimeToLock ( mComponent , 3000 ) ; assertEquals ( 3000 , mDevicePolicyManager.getMaximumTimeToLock ( mComponent ) ) ; mDevicePolicyManager.setMaximumTimeToLock ( mComponent , 5000 ) ; assertEquals ( 5000 , mDevicePolicyManager.getMaximumTimeToLock ( mComponent ) ) ; }
private static java.util.List < com.android.ide.eclipse.gltrace.state.transforms.IStateTransform > transformsForGlFrontFace ( com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage msg ) { int mode = msg.getArgs ( 0 ) . getIntValue ( 0 ) ; com.android.ide.eclipse.gltrace.state.transforms.IStateTransform transform = new com.android.ide.eclipse.gltrace.state.transforms.PropertyChangeTransform ( com.android.ide.eclipse.gltrace.state.transforms.GLPropertyAccessor.makeAccessor ( msg.getContextId ( ) , GLStateType.RASTERIZATION_STATE , GLStateType.FRONT_FACE ) , com.android.ide.eclipse.gldebugger.GLEnum.valueOf ( mode ) ) ; return java.util.Collections.singletonList ( transform ) ; }
public synchronized int bindServer ( ) { int port = getSyncPortNumber ( ) ; try { logWriter.println ( ( "[SYNC] Binding socket on port: " + port ) ) ; serverSocket = new java.net.ServerSocket ( port ) ; port = serverSocket.getLocalPort ( ) ; logWriter.println ( ( "[SYNC] Bound socket on port: " + port ) ) ; return port ; } catch ( java.io.IOException e ) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException ( "[SYNC] Exception in binding for socket sync connection" , e ) ; } }
public void handleMessage ( android.os.Message msg ) { com.android.settings.deviceinfo.Status status = mStatus.get ( ) ; if ( status == null ) { return ; } switch ( msg.what ) { case com.android.settings.deviceinfo.Status.EVENT_SIGNAL_STRENGTH_CHANGED : status.updateSignalStrength ( ) ; break ; case com.android.settings.deviceinfo.Status.EVENT_SERVICE_STATE_CHANGED : android.telephony.ServiceState serviceState = status.mPhoneStateReceiver.getServiceState ( ) ; status.updateServiceState ( serviceState ) ; break ; case com.android.settings.deviceinfo.Status.EVENT_UPDATE_STATS : status.updateTimes ( ) ; sendEmptyMessageDelayed ( com.android.settings.deviceinfo.Status.EVENT_UPDATE_STATS , 1000 ) ; break ; } }
public void onProfileServiceStateChanged ( java.lang.String serviceName , int state ) { android.os.Message m = mHandler.obtainMessage ( com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED ) ; m.obj = serviceName ; m.arg1 = state ; mHandler.sendMessage ( m ) ; }
public void dispose ( ) { if ( mDbg ) log ( ( "[IccCard] Disposing card type " + ( is3gpp ? "3gpp" : "3gpp2" ) ) ) ; mPhone.mCM.unregisterForIccStatusChanged ( mHandler ) ; mPhone.mCM.unregisterForOffOrNotAvailable ( mHandler ) ; mPhone.mCM.unregisterForOn ( mHandler ) ; mCatService.dispose ( ) ; mCdmaSSM.dispose ( mHandler ) ; mIccRecords.dispose ( ) ; mIccFileHandler.dispose ( ) ; }
public Debug.MemoryInfo dumpMemInfo ( java.io.FileDescriptor fd , boolean checkin , boolean all , java.lang.String [ ] args ) { java.io.FileOutputStream fout = new java.io.FileOutputStream ( fd ) ; java.io.PrintWriter pw = new java.io.PrintWriter ( fout ) ; try { return dumpMemInfo ( pw , checkin , all ) ; } finally { pw.flush ( ) ; } }
public void testFilterByTagRegex ( ) { com.android.ddmuilib.logcat.LogCatFilter filter = new com.android.ddmuilib.logcat.LogCatFilter ( "" , "tag.*" , "" , "" , "" , com.android.ddmlib.Log.LogLevel.VERBOSE ) ; com.android.ddmuilib.logcat.LogCatMessage msg = new com.android.ddmuilib.logcat.LogCatMessage ( com.android.ddmlib.Log.LogLevel.VERBOSE , "" , "" , "" , "tag123" , "" , "" ) ; assertEquals ( true , filter.matches ( msg ) ) ; msg = new com.android.ddmuilib.logcat.LogCatMessage ( com.android.ddmlib.Log.LogLevel.VERBOSE , "" , "" , "" , "ta123" , "" , "" ) ; assertEquals ( false , filter.matches ( msg ) ) ; }
private com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder _addProjectResourceFolder ( com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources resources , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config , org.eclipse.core.resources.IFolder folder ) throws java.lang.Exception { java.lang.reflect.Method addMethod = com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources.class . getDeclaredMethod ( "add" , com.android.resources.ResourceFolderType.class , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.class , com.android.io.IAbstractFolder.class ) ; addMethod.setAccessible ( true ) ; com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder resFolder = ( ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder ) ( addMethod.invoke ( resources , ResourceFolderType.LAYOUT , config , new com.android.ide.eclipse.adt.io.IFolderWrapper ( folder ) ) ) ) ; return resFolder ; }
public void onResume ( ) { super . onResume ( ) ; startTimeOut ( ) ; }
private void updateCallCache ( com.android.incallui.call.DialerCall call ) { if ( call == null ) { currentVideoState = android.telecom.VideoProfile.STATE_AUDIO_ONLY ; currentCallState = com.android.incallui.call.DialerCall.State.INVALID ; videoCall = null ; primaryCall = null ; } else { currentVideoState = call.getVideoState ( ) ; videoCall = call.getVideoCall ( ) ; currentCallState = call.getState ( ) ; primaryCall = call ; } }
private static java.lang.String getMapKey ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile resourceFile ) { com.android.sdklib.io.IAbstractFile file = resourceFile.getFile ( ) ; java.lang.String name = file.getName ( ) ; java.lang.String folderName = file.getParentFolder ( ) . getName ( ) ; return com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder.getMapKey ( folderName , name ) ; }
private void contentSizeChanged ( boolean updateLayout ) { if ( ( ( mContentWidth ) | ( mContentHeight ) ) == 0 ) { return ; } if ( mHeightCanMeasure ) { if ( ( ( getMeasuredHeight ( ) ) != ( contentToView ( mContentHeight ) ) ) && updateLayout ) { requestLayout ( ) ; } } else if ( mWidthCanMeasure ) { if ( ( ( getMeasuredWidth ( ) ) != ( contentToView ( mContentWidth ) ) ) && updateLayout ) { requestLayout ( ) ; } } else { sendViewSizeZoom ( ) ; } }
public void testEncryption ( ) throws java.lang.Exception { if ( android.security.cts.EncryptionTest.deviceIsEncrypted ( ) ) { return ; } if ( hasLowRAM ( ) ) { android.util.Log.i ( android.security.cts.EncryptionTest.TAG , "hasLowRAM: true" ) ; return ; } assertFalse ( "Device encryption is required" , android.security.cts.EncryptionTest.aesIsFast ( ) ) ; }
public static org.bouncycastle.math.ec.ECPoint shamirsTrick ( org.bouncycastle.math.ec.ECPoint P , java.math.BigInteger k , org.bouncycastle.math.ec.ECPoint Q , java.math.BigInteger l ) { org.bouncycastle.math.ec.ECCurve cp = P.getCurve ( ) ; Q = org.bouncycastle.math.ec.ECAlgorithms.importPoint ( cp , Q ) ; return org.bouncycastle.math.ec.ECAlgorithms.implShamirsTrick ( P , k , Q , l ) ; }
public void onDestroy ( ) { com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkAppService.LOG_TAG , "onDestroy()" ) ; if ( ( mStkCmdReceiver ) != null ) { unregisterReceiver ( mStkCmdReceiver ) ; mStkCmdReceiver = null ; } mPowerManager = null ; waitForLooper ( ) ; mServiceLooper.quit ( ) ; }
public static java.lang.String getDescription ( @ org.jetbrains.annotations.NotNull java.lang.Throwable t ) { boolean isAndroid = false ; for ( java.lang.StackTraceElement el : t.getStackTrace ( ) ) { if ( el.getClassName ( ) . contains ( "android" ) ) { isAndroid = true ; break ; } } java.lang.String sourceLocation = "" ; if ( ( t.getStackTrace ( ) . length ) > 0 ) { java.lang.StackTraceElement loc = t.getStackTrace ( ) [ 0 ] ; sourceLocation = ( ( " @ " + ( loc.getFileName ( ) ) ) + ":" ) + ( loc.getLineNumber ( ) ) ; } java.lang.String prefix = ( isAndroid ) ? "android:" : "" ; java.lang.String desc = ( prefix + ( t.getClass ( ) . getSimpleName ( ) ) ) + sourceLocation ; if ( ( desc.length ( ) ) > 150 ) { desc = desc.substring ( 0 , 150 ) ; } return desc ; }
public static java.lang.String getLocale ( java.util.Locale locale ) { java.lang.String language = locale.getLanguage ( ) ; java.lang.String country = locale.getCountry ( ) ; if ( "iw" . equals ( language ) ) { language = "he" ; } else if ( "in" . equals ( language ) ) { language = "id" ; } else if ( "tl" . equals ( language ) ) { language = "fil" ; } return country.isEmpty ( ) ? language : ( language + "-" ) + country ; }
public void testSwipingDownHasNoEffectWhenAtStart ( ) { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.vertical_pager ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Position #0" ) ) ) ) . perform ( android.support.test.espresso.action.ViewActions.swipeDown ( ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Position #0" ) ) ) ) . perform ( android.support.test.espresso.action.ViewActions.swipeDown ( ) ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( "Position #0" ) ) ) ) ; }
public int hashCode ( ) { return ( ( getClassName ( ) . hashCode ( ) ) * 31 ) + ( getTestName ( ) . hashCode ( ) ) ; }
public void TestClone ( ) { android.icu.text.RuleBasedBreakIterator rbbi = new android.icu.text.RuleBasedBreakIterator ( "" ) ; try { rbbi.setText ( ( ( java.text.CharacterIterator ) ( null ) ) ) ; if ( ( ( ( android.icu.text.RuleBasedBreakIterator ) ( rbbi.clone ( ) ) ) . getText ( ) ) != null ) errln ( ( "RuleBasedBreakIterator.clone() was suppose to return " + "the same object because fText is set to null." ) ) ; } catch ( java.lang.Exception e ) { errln ( ( "RuleBasedBreakIterator.clone() was not suppose to return " + "an exception." ) ) ; } }
public void startImmediately ( ) { start ( ) ; if ( mStarted ) { if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , "Starting fetcher immediately" ) ; fetchEpg ( ) ; } }
public void testWithId_describeWithResourceLookup ( ) { android.view.View view = new android.view.View ( context ) ; org.hamcrest.Matcher < android.view.View > matcher = android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.testId1 ) ; matcher.matches ( view ) ; android.support.test.espresso.matcher.ViewMatchers.assertThat ( matcher.toString ( ) , org.hamcrest.Matchers.containsString ( "id/testId1" ) ) ; }
public void checkClientTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , javax.net.ssl.SSLEngine engine ) throws java.security.cert.CertificateException { javax.net.ssl.SSLSession session = engine.getHandshakeSession ( ) ; if ( session == null ) { throw new java.security.cert.CertificateException ( "Not in handshake; no session available" ) ; } checkTrusted ( chain , authType , session , engine.getSSLParameters ( ) , true ) ; }
public static int presentationFromCLIP ( int cli ) { switch ( cli ) { case 0 : return com.android.internal.telephony.PhoneConstants.PRESENTATION_ALLOWED ; case 1 : return com.android.internal.telephony.PhoneConstants.PRESENTATION_RESTRICTED ; case 2 : return com.android.internal.telephony.PhoneConstants.PRESENTATION_UNKNOWN ; default : android.util.Log.d ( com.android.internal.telephony.cdma.CdmaCallWaitingNotification.LOG_TAG , ( "Unexpected presentation " + cli ) ) ; return com.android.internal.telephony.PhoneConstants.PRESENTATION_UNKNOWN ; } }
protected boolean check ( ) { boolean done = false ; if ( handler.hasCalledHandleMessage ( ) ) { if ( ( ( handler.mResultUrl ) != null ) && ( handler.mResultUrl.equals ( TestHtmlConstants.HTML_URL2 ) ) ) { done = true ; } else { handler.reset ( ) ; android.os.Message newMsg = new android.os.Message ( ) ; newMsg.setTarget ( handler ) ; mOnUiThread.requestFocusNodeHref ( newMsg ) ; } } return done ; }
public void doInspections ( @ org.jetbrains.annotations.NotNull final com.intellij.analysis.AnalysisScope scope ) { if ( ! ( com.intellij.codeInspection.ex.GlobalInspectionContextUtil.canRunInspections ( myProject , true ) ) ) return ; cleanupTools ( ) ; com.intellij.openapi.application.ApplicationManager.getApplication ( ) . invokeLater ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { myCurrentScope = scope ; launchInspections ( scope ) ; } } , com.intellij.openapi.application.ApplicationManager.getApplication ( ) . getDisposed ( ) ) ; }
public void default_methods_with_lambdas_in_another_package ( ) throws java.lang.Exception { com.android.jack.java8.retrolambda.anotherpackage.jack.UsesLambdasInAnotherPackage obj = new com.android.jack.java8.retrolambda.anotherpackage.jack.UsesLambdasInAnotherPackage ( ) { } ; org.junit.Assert.assertEquals ( obj.stateless ( ) . call ( ) , "foo" ) ; org.junit.Assert.assertEquals ( obj.captureThis ( ) . call ( ) , "foo" ) ; org.junit.Assert.assertEquals ( "should contain only delegates to the two default methods" , obj.getClass ( ) . getDeclaredMethods ( ) . length , 2 ) ; }
public static com.android.sdklib.xml.AndroidManifestParser.ManifestData parse ( com.android.sdklib.io.IAbstractFile manifestFile , boolean gatherData , com.android.sdklib.xml.AndroidManifestParser.ManifestErrorHandler errorHandler ) throws com.android.sdklib.io.StreamException , java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { if ( manifestFile != null ) { javax.xml.parsers.SAXParser parser = com.android.sdklib.xml.AndroidManifestParser.sParserFactory.newSAXParser ( ) ; com.android.sdklib.xml.AndroidManifestParser.ManifestData data = null ; if ( gatherData ) { data = new com.android.sdklib.xml.AndroidManifestParser.ManifestData ( ) ; } com.android.sdklib.xml.AndroidManifestParser.ManifestHandler manifestHandler = new com.android.sdklib.xml.AndroidManifestParser.ManifestHandler ( manifestFile , data , errorHandler ) ; parser.parse ( new org.xml.sax.InputSource ( manifestFile.getContents ( ) ) , manifestHandler ) ; return data ; } return null ; }
public android.bluetooth.BluetoothSocket createScoSocket ( ) throws java.io.IOException { if ( ( isBluetoothEnabled ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "Bluetooth is not enabled" ) ; throw new java.io.IOException ( ) ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_SCO , ( - 1 ) , true , true , this , ( - 1 ) , null ) ; }
private boolean mode_array ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s , int seed , int [ ] size ) { final byte [ ] inputArray = createInputArrayByte ( size [ 0 ] , seed ) ; final com.android.rs.test.Int2 javaRslt = mode ( RS , inputArray ) ; final com.android.rs.test.Int2 rsRslt = s.reduce_mode ( inputArray ) . get ( ) ; return result ( "mode" , new com.android.rs.test.UT_reduce.timing ( size [ 0 ] ) , javaRslt , rsRslt ) ; }
public java.nio.charset.Charset charsetForName ( java.lang.String charsetName ) { if ( ( ( "MockCharset00" . equalsIgnoreCase ( charsetName ) ) || ( "MockCharset01" . equalsIgnoreCase ( charsetName ) ) ) || ( "MockCharset02" . equalsIgnoreCase ( charsetName ) ) ) { return new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockCharset00" , new java.lang.String [ ] { "mockCharset01" , "mockCharset02" } ) ; } return null ; }
public void testMethodClassConstructor ( ) throws java.lang.Exception { java.lang.Class < ? > clazz = getMethodClassWith1ImplicitParameterConstructor ( ) ; java.lang.reflect.Constructor < ? > constructor = clazz.getDeclaredConstructor ( libcore.java.lang.reflect.ParameterTest.class ) ; libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper helper = new libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper ( constructor ) ; helper.checkStandardParametersBehavior ( ) . checkParametersToString ( "[libcore.java.lang.reflect.ParameterTest arg0]" ) . checkParametersMetadataNotAvailable ( ) . checkParametersNoVarArgs ( ) ; helper.getParameterTestHelper ( 0 ) . checkGetType ( libcore.java.lang.reflect.ParameterTest.class ) . checkGetParameterizedType ( "class libcore.java.lang.reflect.ParameterTest" ) ; }
public void registerForImsiReady ( android.os.Handler h , int what , java.lang.Object obj ) { if ( mDestroyed.get ( ) ) { return ; } android.os.Registrant r = new android.os.Registrant ( h , what , obj ) ; mImsiReadyRegistrants.add ( r ) ; if ( ( mImsi ) != null ) { r.notifyRegistrant ( new android.os.AsyncResult ( null , null , null ) ) ; } }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull final com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { putProperty ( fileType.buildPropertyName ( null ) , java.lang.String.valueOf ( true ) ) ; addFileType ( fileType ) ; return vfs.getRootInputOutputVDir ( ) . createOutputVFile ( fileType.buildFileVPath ( typePath ) ) ; }
private boolean mergeManifest ( org.w3c.dom.Document currentManifest , org.w3c.dom.Document fragment ) { com.android.manifmerger.ManifestMerger merger = new com.android.manifmerger.ManifestMerger ( com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ; return ( ( currentManifest != null ) && ( fragment != null ) ) && ( merger.process ( currentManifest , fragment ) ) ; }
private void loadInternalDataFromUserStore ( java.util.List < android.net.wifi.WifiConfiguration > configurations , java.util.Set < java.lang.String > deletedEphemeralSSIDs ) { for ( android.net.wifi.WifiConfiguration configuration : configurations ) { configuration.networkId = ( mNextNetworkId ) ++ ; if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Adding network from user store " + ( configuration.configKey ( ) ) ) ) ; } mConfiguredNetworks.put ( configuration ) ; } for ( java.lang.String ssid : deletedEphemeralSSIDs ) { mDeletedEphemeralSSIDs.add ( ssid ) ; } }
public void updateAggregateData ( long contactId ) { if ( ! ( mEnabled ) ) { return ; } final android.database.sqlite.SQLiteDatabase db = mDbHelper.getWritableDatabase ( ) ; computeAggregateData ( db , contactId , mContactUpdate ) ; mContactUpdate.bindLong ( com.android.providers.contacts.ContactAggregator.ContactReplaceSqlStatement.CONTACT_ID , contactId ) ; mContactUpdate.execute ( ) ; mDbHelper.updateContactVisible ( contactId ) ; updateAggregatedPresence ( contactId ) ; }
public boolean setNetworkSelectionModeManual ( int subId , com.android.internal.telephony.OperatorInfo operator , boolean persistSelection ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.setNetworkSelectionModeManual ( subId , operator , persistSelection ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual NPE" , ex ) ; } return false ; }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( android.bluetooth.BluetoothPbap.VDBG ) android.bluetooth.BluetoothPbap.log ( "getClient()" ) ; final android.bluetooth.IBluetoothPbap service = mService ; if ( service != null ) { try { return service.getClient ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPbap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothPbap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return null ; }
public abstract java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( ) ;
public static com.android.volley.RequestQueue newRequestQueue ( android.content.Context context ) { return com.android.volley.toolbox.Volley.newRequestQueue ( context , null ) ; }
boolean isAudioConnected ( android.bluetooth.BluetoothDevice device ) { synchronized ( this ) { if ( ( ( ( getCurrentState ( ) ) == ( mAudioOn ) ) && ( mCurrentDevice.equals ( device ) ) ) && ( ( mAudioState ) != ( android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ) ) ) { return true ; } } return false ; }
public boolean visitComment ( lombok.ast.Comment node ) { java.lang.String contents = node.astContent ( ) ; com.android.tools.lint.checks.CommentDetector.checkComment ( mContext , node , contents , node.getPosition ( ) . getStart ( ) , 0 , contents.length ( ) ) ; return super . visitComment ( node ) ; }
public void test6_anyInRange ( ) { int [ ] bits = new int [ 100 ] ; for ( int i = 0 ; i < ( bits.length ) ; i ++ ) { bits [ i ] = - 1 ; } for ( int i = 0 ; i < 50 ; i += 7 ) { assertTrue ( com.android.dx.util._tests.BitsTest.label ( i ) , com.android.dx.util.Bits.anyInRange ( bits , i , ( 100 - i ) ) ) ; } }
private static com.google.common.collect.ImmutableList < java.lang.String > getExpansionIfKnown ( java.lang.reflect.Field optionField , com.google.devtools.common.options.Option annotation , @ javax.annotation.Nullable com.google.devtools.common.options.OptionsData optionsData ) { if ( optionsData != null ) { return optionsData.getEvaluatedExpansion ( optionField ) ; } else { if ( com.google.devtools.common.options.OptionsData.usesExpansionFunction ( annotation ) ) { return null ; } else { return com.google.common.collect.ImmutableList.copyOf ( annotation.expansion ( ) ) ; } } }
void parseOptFormalTypeParameters ( ) { org.apache.harmony.luni.lang.reflect.ListOfVariables typeParams = new org.apache.harmony.luni.lang.reflect.ListOfVariables ( ) ; if ( ( symbol ) == '<' ) { scanSymbol ( ) ; typeParams.add ( parseFormalTypeParameter ( ) ) ; while ( ( ( symbol ) != '>' ) && ( ( symbol ) > 0 ) ) { typeParams.add ( parseFormalTypeParameter ( ) ) ; } expect ( '>' ) ; } this . formalTypeParameters = typeParams.getArray ( ) ; }
public void addHeaderView ( android.view.View v , java.lang.Object data , boolean isSelectable ) { if ( ( mAdapter ) != null ) { throw new java.lang.IllegalStateException ( "Cannot add header view to list -- setAdapter has already been called." ) ; } android.widget.ListView.FixedViewInfo info = new android.widget.ListView.FixedViewInfo ( ) ; info.view = v ; info.data = data ; info.isSelectable = isSelectable ; mHeaderViewInfos.add ( info ) ; }
synchronized boolean unplug ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "unplug(): device=" + device ) ) ; } return ( ( checkDevice ( device ) ) && ( checkCallingUid ( ) ) ) && ( mHidDeviceNativeInterface.unplug ( ) ) ; }
private void copyFileToZip ( @ javax.annotation.Nonnull java.io.File fileToCopy , @ javax.annotation.Nonnull java.lang.String entryName , @ javax.annotation.Nonnull java.util.zip.ZipOutputStream zos ) throws java.io.IOException { java.io.FileInputStream fis = null ; try { fis = new java.io.FileInputStream ( fileToCopy ) ; java.util.zip.ZipEntry sourceEntry = new java.util.zip.ZipEntry ( entryName ) ; zos.putNextEntry ( sourceEntry ) ; com.android.jack.util.BytesStreamSucker sucker = new com.android.jack.util.BytesStreamSucker ( fis , zos ) ; sucker.suck ( ) ; } finally { if ( fis != null ) { fis.close ( ) ; } } }
public int compareTo ( android.icu.text.DateTimePatternGenerator.DateTimeMatcher that ) { for ( int i = 0 ; i < ( original.length ) ; ++ i ) { int comp = original [ i ] . compareTo ( that.original [ i ] ) ; if ( comp != 0 ) return - comp ; } return 0 ; }
public boolean handlePinMmi ( java.lang.String dialString , java.lang.String callingPackage ) { try { com.android.server.telecom.Log.startSession ( "TSI.hPM" ) ; synchronized ( mLock ) { enforcePermissionOrPrivilegedDialer ( android.Manifest.permission.MODIFY_PHONE_STATE , callingPackage ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; boolean retval = false ; try { retval = getTelephonyManager ( ) . handlePinMmi ( dialString ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } return retval ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
private void writeHistoryStatsFLOCK ( android.util.AtomicFile historyFile ) { java.io.FileOutputStream fos = null ; try { fos = historyFile.startWrite ( ) ; org.xmlpull.v1.XmlSerializer out = new com.android.internal.util.FastXmlSerializer ( ) ; out.setOutput ( fos , "utf-8" ) ; out.startDocument ( null , true ) ; out.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; out.startTag ( null , "usage-history" ) ; synchronized ( mStatsLock ) { for ( int i = 0 ; i < ( mLastResumeTimes.size ( ) ) ; i ++ ) { out.startTag ( null , "pkg" ) ; out.attribute ( null , "name" , mLastResumeTimes.keyAt ( i ) ) ; android.util.ArrayMap < java.lang.String , java.lang.Long > comp = mLastResumeTimes.valueAt ( i ) ; for ( int j = 0 ; j < ( comp.size ( ) ) ; j ++ ) { out.startTag ( null , "comp" ) ; out.attribute ( null , "name" , comp.keyAt ( j ) ) ; out.attribute ( null , "lrt" , comp.valueAt ( j ) . toString ( ) ) ; out.endTag ( null , "comp" ) ; } out.endTag ( null , "pkg" ) ; } } out.endTag ( null , "usage-history" ) ; out.endDocument ( ) ; historyFile.finishWrite ( fos ) ; } catch ( java.io.IOException e ) { android.util.Slog.w ( com.android.server.am.UsageStatsService.TAG , ( "Error writing history stats" + e ) ) ; if ( fos != null ) { historyFile.failWrite ( fos ) ; } } }
void onUssdFinished ( java.lang.String ussdMessage , boolean isUssdRequest ) { if ( ( mState ) == ( State.PENDING ) ) { if ( ussdMessage == null ) { mMessage = mContext.getText ( com.android.internal.R.string.mmiComplete ) ; } else { mMessage = ussdMessage ; } mIsUssdRequest = isUssdRequest ; if ( ! isUssdRequest ) { mState = State.COMPLETE ; } mPhone.onMMIDone ( this ) ; } }
public void testAesCbcHmacMd5Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
private static com.android.jack.dx.rop.type.Type putIntern ( com.android.jack.dx.rop.type.Type type ) { synchronized ( com.android.jack.dx.rop.type.Type.internTable ) { java.lang.String descriptor = type.descriptor ; com.android.jack.dx.rop.type.Type already = com.android.jack.dx.rop.type.Type.internTable.get ( descriptor ) ; if ( already != null ) { return already ; } com.android.jack.dx.rop.type.Type.internTable.put ( descriptor , type ) ; return type ; } }
private java.lang.StringBuffer subformat ( java.lang.String pluralCount , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr ) { if ( ( style ) == ( NumberFormat.PLURALCURRENCYSTYLE ) ) { java.lang.String currencyPluralPattern = currencyPluralInfo.getCurrencyPluralPattern ( pluralCount ) ; if ( ( formatPattern.equals ( currencyPluralPattern ) ) == false ) { applyPatternWithoutExpandAffix ( currencyPluralPattern , false ) ; } } expandAffixAdjustWidth ( pluralCount ) ; return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr ) ; }
public void run ( ) { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_math_agree s = new com.android.rs.test.ScriptC_math_agree ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeValues ( s ) ; s.invoke_math_agree_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
private java.io.File createTextFile ( java.lang.String contents ) throws java.io.IOException { java.io.File file = java.io.File.createTempFile ( getClass ( ) . getSimpleName ( ) , ".txt" ) ; try ( java.io.FileOutputStream fos = new java.io.FileOutputStream ( file ) ) { java.io.BufferedWriter writer = new java.io.BufferedWriter ( new java.io.OutputStreamWriter ( fos , java.nio.charset.StandardCharsets.UTF_8 ) ) ; writer.write ( contents ) ; writer.close ( ) ; } return file ; }
public boolean isPeripheralModeSupported ( ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return false ; try { return mService.isPeripheralModeSupported ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "failed to get peripheral mode capability: " , e ) ; } return false ; }
private void selectTrack ( int type , android.media.tv.TvTrackInfo track ) { mTvView.selectTrack ( type , ( track == null ? null : track.getId ( ) ) ) ; if ( type == ( android.media.tv.TvTrackInfo.TYPE_AUDIO ) ) { mTvOptionsManager.onMultiAudioChanged ( ( track == null ? null : com.android.tv.util.Utils.getMultiAudioString ( this , track , false ) ) ) ; } else if ( type == ( android.media.tv.TvTrackInfo.TYPE_SUBTITLE ) ) { mTvOptionsManager.onClosedCaptionsChanged ( track ) ; } }
public java.util.List < com.google.currysrc.api.transform.TransformRule > getTransformRules ( java.io.File file ) { com.google.currysrc.api.transform.TransformRule [ ] repackageRules = com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ; com.google.currysrc.api.transform.TransformRule [ ] apiDocsRules = new com.google.currysrc.api.transform.TransformRule [ ] { createHidePublicClassesRule ( ) , createHideOriginalDeprecatedClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.HideDraftProvisionalInternal ( ) ) , createFixupBidiClassDocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.transformers.RemoveJavaDocTags ( "@stable" , "@draft" , "@provisional" , "@internal" ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.ReplaceIcuTags ( ) ) , createTranslateJciteInclusionRule ( ) } ; java.util.List < com.google.currysrc.api.transform.TransformRule > rulesList = com.google.common.collect.Lists.newArrayList ( repackageRules ) ; rulesList.addAll ( java.util.Arrays.asList ( apiDocsRules ) ) ; rulesList.add ( com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.transformers.HidePublicClasses ( java.util.Collections.< com.google.currysrc.api.transform.ast.TypeLocater > emptyList ( ) , "All android.icu classes are currently hidden" ) ) ) ; return rulesList ; }
public void indicateRingbackTone ( int indicationType , boolean var2 ) { }
public int hashCode ( ) { int result = mBuildConfigLines.hashCode ( ) ; result = ( 31 * result ) + ( mProguardFiles.hashCode ( ) ) ; return result ; }
private void loadViewRecursive ( com.android.hierarchyviewerlib.device.ViewNode viewNode ) { org.eclipse.swt.graphics.Image image = com.android.hierarchyviewerlib.device.DeviceBridge.loadCapture ( viewNode.window , viewNode ) ; if ( image == null ) { return ; } viewNode.image = image ; final int N = viewNode.children.size ( ) ; for ( int i = 0 ; i < N ; i ++ ) { loadViewRecursive ( viewNode.children.get ( i ) ) ; } }
public < T extends com.android.sched.marker.Marker > T getMarker ( @ javax.annotation.Nonnull java.lang.Class < T > cls ) { if ( ( markers ) == null ) { return null ; } return ( ( T ) ( markers.get ( cls ) ) ) ; }
private int findNextUnreservedRopReg ( int startReg , int width ) { int reg ; reg = reservedRopRegs.nextClearBit ( startReg ) ; while ( true ) { int i = 1 ; while ( ( i < width ) && ( ! ( reservedRopRegs.get ( ( reg + i ) ) ) ) ) { i ++ ; } if ( i == width ) { return reg ; } reg = reservedRopRegs.nextClearBit ( ( reg + i ) ) ; } }
public void testIsReadOnly ( ) { assertFalse ( mDatabase.isReadOnly ( ) ) ; mDatabase = android.database.sqlite.SQLiteDatabase.openDatabase ( mDatabaseFilePath , null , SQLiteDatabase.OPEN_READONLY ) ; assertTrue ( mDatabase.isReadOnly ( ) ) ; }
synchronized boolean sendReport ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( "sendReport(): device=" + device ) + " id=" ) + id ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return mHidDeviceNativeInterface.sendReport ( id , data ) ; }
public int prefixLength ( ) { return mImsi.length ( ) ; }
public boolean resetRoamingConfiguration ( ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "resetRoamingConfiguration " ) ; try { if ( ( mWifiVendorHal ) != null ) { com.android.server.wifi.WifiNative.RoamingConfig config = new com.android.server.wifi.WifiNative.RoamingConfig ( ) ; return mWifiVendorHal.configureRoaming ( config ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } return false ; }
public boolean isSimPinEnabled ( ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.isSimPinEnabled ( getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#isSimPinEnabled" , e ) ; } return false ; }
public java.util.Iterator < com.android.sched.vfs.InputVFile > getJayceIterator ( ) { com.android.jack.library.InputJackLibrary compilerStateLib = new com.android.jack.library.InputJackLibraryCodec ( ) . parseString ( new com.android.sched.util.codec.CodecContext ( ) , compilerStateFolder.getPath ( ) ) ; return compilerStateLib.iterator ( FileType.JAYCE ) ; }
public java.lang.String getIsimChallengeResponse ( java.lang.String nonce ) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo ( ) ; if ( info == null ) return null ; return info.getIsimChallengeResponse ( nonce ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
public void testRegisterAndUnregisterNeverIdling ( ) throws java.lang.Exception { android.support.test.espresso.IdlingResource r1 = new android.support.test.espresso.base.OnDemandIdlingResource ( "r1" ) ; registry.registerResources ( com.google.common.collect.Lists.newArrayList ( r1 ) ) ; java.util.concurrent.FutureTask < java.lang.Boolean > resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; assertFalse ( resourcesIdle.get ( ) ) ; registry.unregisterResources ( com.google.common.collect.Lists.newArrayList ( r1 ) ) ; resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; assertTrue ( resourcesIdle.get ( ) ) ; }
public java.lang.String getIsimChallengeResponse ( java.lang.String nonce ) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo ( ) ; if ( info == null ) return null ; return info.getIsimChallengeResponse ( nonce ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
public com.android.sdklib.BuildToolInfo getBuildTool ( @ com.android.annotations.Nullable com.android.sdklib.repository.FullRevision revision ) { com.android.sdklib.repository.local.LocalPkgInfo pkg = getPkgInfo ( com.android.sdklib.repository.local.LocalSdk.PKG_BUILD_TOOLS , revision ) ; if ( pkg instanceof com.android.sdklib.repository.local.LocalBuildToolPkgInfo ) { return ( ( com.android.sdklib.repository.local.LocalBuildToolPkgInfo ) ( pkg ) ) . getBuildToolInfo ( ) ; } return null ; }
public void onLoadResource ( java.lang.String url ) { org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , ( "onLoadResource=" + url ) ) ; mWebViewClient.onLoadResource ( mWebView , url ) ; org.chromium.base.TraceEvent.end ( ) ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , byte [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , data.length ) ; }
public boolean equals ( java.lang.Object object ) { if ( object instanceof com.google.common.hash.HashCode ) { com.google.common.hash.HashCode that = ( ( com.google.common.hash.HashCode ) ( object ) ) ; return java.security.MessageDigest.isEqual ( this . asBytes ( ) , that.asBytes ( ) ) ; } return false ; }
private void sendUuidIntent ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.RemoteDevices.DeviceProperties prop = getDeviceProperties ( device ) ; android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_UUID ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; intent.putExtra ( BluetoothDevice.EXTRA_UUID , ( prop == null ? null : prop.mUuids ) ) ; com.android.bluetooth.btservice.RemoteDevices.mAdapterService.sendBroadcast ( intent , AdapterService.BLUETOOTH_ADMIN_PERM ) ; com.android.bluetooth.btservice.RemoteDevices.mSdpTracker.remove ( device ) ; }
public static void sort ( short [ ] a ) { java.util.DualPivotQuicksort.sort ( a ) ; }
public void testPackageOverridePackageFromFlavorWithSuffix ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilder ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; mFlavor.setPackageName ( "foo.bar" ) ; mDebug.setPackageNameSuffix ( ".fortytwo" ) ; builder.setBuildVariant ( mMain , mFlavor , mDebug ) ; assertEquals ( "foo.bar.fortytwo" , builder.getPackageOverride ( "" ) ) ; }
public void onTabChanged ( java.lang.String tabId ) { final int slotId = java.lang.Integer.parseInt ( tabId ) ; mSir = mSelectableSubInfos.get ( slotId ) ; updatePhoneInfos ( ) ; mTelephonyManager.listen ( mPhoneStateListener , ( ( ( android.telephony.PhoneStateListener.LISTEN_DATA_CONNECTION_STATE ) | ( android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS ) ) | ( android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE ) ) ) ; updateDataState ( ) ; updateNetworkType ( ) ; updatePreference ( ) ; }
public void test_zh_CN ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex zh_CN = new libcore.icu.AlphabeticIndex ( new java.util.Locale ( "zh" , "CN" ) ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "贾" , "J" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "沈" , "C" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "瀋" , "S" ) ; }
public boolean handlePinMmi ( java.lang.String dialString ) { com.android.internal.telephony.cdma.CdmaMmiCode mmi = com.android.internal.telephony.cdma.CdmaMmiCode.newFromDialString ( dialString , this ) ; if ( mmi == null ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Mmi is NULL!" ) ; return false ; } else if ( mmi.isPukCommand ( ) ) { mPendingMmis.add ( mmi ) ; mMmiRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , mmi , null ) ) ; mmi.processCode ( ) ; return true ; } android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "Unrecognized mmi!" ) ; return false ; }
private int getSubId ( ) { if ( ( mSubId ) == ( SubscriptionManager.DEFAULT_SUBSCRIPTION_ID ) ) { return android.telephony.TelephonyManager.getDefaultSubscription ( ) ; } return mSubId ; }
public com.android.ims.internal.IImsServiceController getImsServiceControllerAndListen ( int slotIndex , @ android.telephony.TelephonyManager.Feature int feature , com.android.ims.internal.IImsServiceFeatureListener callback ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getImsServiceControllerAndListen ( slotIndex , feature , callback ) ; } } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , ( "getImsServiceControllerAndListen, RemoteException: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
public void clientReadPhy ( int clientIf , java.lang.String address ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; }
private int getLteEarfcn ( android.hardware.radio.V1_0.DataRegStateResult dataRegStateResult ) { int lteEarfcn = com.android.internal.telephony.ServiceStateTracker.INVALID_LTE_EARFCN ; switch ( dataRegStateResult.cellIdentity.cellInfoType ) { case android.hardware.radio.V1_0.CellInfoType.LTE : { if ( ( dataRegStateResult.cellIdentity.cellIdentityLte.size ( ) ) == 1 ) { com.android.internal.telephony.V1_0.CellIdentityLte cellIdentityLte = dataRegStateResult.cellIdentity.cellIdentityLte.get ( 0 ) ; lteEarfcn = cellIdentityLte.earfcn ; } break ; } default : { break ; } } return lteEarfcn ; }
public void copyFrom ( byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFrom" ) ; mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
protected com.android.jack.library.OutputJackLibrary getOutputJackLibraryFromVfs ( ) { com.android.sched.vfs.InputOutputVFS outputDir ; com.android.sched.vfs.Container containerType = com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_CONTAINER_TYPE ) ; if ( containerType == ( com.android.sched.vfs.Container.DIR ) ) { outputDir = com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_DIR ) ; } else { outputDir = com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_ZIP ) ; } return com.android.jack.library.JackLibraryFactory.getOutputLibrary ( outputDir , com.android.jack.Jack.getEmitterId ( ) , com.android.jack.Jack.getVersionString ( ) ) ; }
public static < T > java.lang.Iterable < T > concat ( java.lang.Iterable < ? extends T > a , java.lang.Iterable < ? extends T > b ) { com.google.common.base.Preconditions.checkNotNull ( a ) ; com.google.common.base.Preconditions.checkNotNull ( b ) ; return com.google.common.collect.Iterables.concat ( java.util.Arrays.asList ( a , b ) ) ; }
protected com.android.tools.lint.checks.TestConfiguration getConfiguration ( com.android.tools.lint.detector.api.Project project ) { return new com.android.tools.lint.checks.TestConfiguration ( ) { @ java.lang.Override public boolean isEnabled ( com.android.tools.lint.detector.api.Issue issue ) { return ( super . isEnabled ( issue ) ) && ( mEnabled.contains ( issue ) ) ; } } ; }
private void getTotalNumOfItemsRequestFromNative ( byte [ ] address , byte scope ) { android.os.Bundle data = new android.os.Bundle ( ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_GET_TOTAL_NUM_OF_ITEMS ) ; msg.arg1 = scope ; msg.obj = address ; mHandler.sendMessage ( msg ) ; }
public com.android.sched.util.log.tracer.AbstractTracer.TracerEvent start ( @ javax.annotation.Nonnull java.lang.String name ) { com.android.sched.util.log.tracer.DynamicEventType event = dynalicEventByName.get ( name ) ; if ( event == null ) { event = new com.android.sched.util.log.tracer.DynamicEventType ( name ) ; dynalicEventByName.put ( name , event ) ; } return start ( event ) ; }
public final byte byte_literal ( ) throws org.jf.smali.RecognitionException { byte value = 0 ; org.antlr.runtime.tree.CommonTree BYTE_LITERAL207 = null ; try { { BYTE_LITERAL207 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.BYTE_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_BYTE_LITERAL_in_byte_literal3483 ) ) ) ; value = org.jf.smali.LiteralTools.parseByte ( ( BYTE_LITERAL207 != null ? BYTE_LITERAL207.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
protected void finalize ( ) { finalizerWait.countDown ( ) ; java.lang.System.out.println ( "Finalizer started and spinning..." ) ; long start ; long end ; start = java.lang.System.nanoTime ( ) ; for ( int i = 0 ; i < 1000000 ; i ++ ) { ( j ) ++ ; } end = java.lang.System.nanoTime ( ) ; java.lang.System.out.println ( "Finalizer done spinning." ) ; java.lang.System.out.println ( "Finalizer sleeping forever now." ) ; while ( true ) { Main.snooze ( 10000 ) ; } }
public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newIndex ) { return new com.android.jack.dx.io.instructions.FourRegisterDecodedInstruction ( getFormat ( ) , getOpcode ( ) , newIndex , getIndexType ( ) , getTarget ( ) , getLiteral ( ) , a , b , c , d ) ; }
private void initLocalZeroPaddingNumberFormat ( ) { if ( ( numberFormat ) instanceof com.ibm.icu.text.DecimalFormat ) { decDigits = ( ( com.ibm.icu.text.DecimalFormat ) ( numberFormat ) ) . getDecimalFormatSymbols ( ) . getDigits ( ) ; useLocalZeroPaddingNumberFormat = true ; } else if ( ( numberFormat ) instanceof com.ibm.icu.impl.DateNumberFormat ) { decDigits = ( ( com.ibm.icu.impl.DateNumberFormat ) ( numberFormat ) ) . getDigits ( ) ; useLocalZeroPaddingNumberFormat = true ; } else { useLocalZeroPaddingNumberFormat = false ; } if ( useLocalZeroPaddingNumberFormat ) { decimalBuf = new char [ 10 ] ; } }
public static com.google.common.io.InputSupplier < java.io.InputStreamReader > newReaderSupplier ( final com.google.common.io.InputSupplier < ? extends java.io.InputStream > in , final java.nio.charset.Charset charset ) { com.google.common.base.Preconditions.checkNotNull ( in ) ; com.google.common.base.Preconditions.checkNotNull ( charset ) ; return new com.google.common.io.InputSupplier < java.io.InputStreamReader > ( ) { @ java.lang.Override public java.io.InputStreamReader getInput ( ) throws java.io.IOException { return new java.io.InputStreamReader ( in.getInput ( ) , charset ) ; } } ; }
public void onInterfaceDeleted ( java.lang.String interfaceName ) { if ( com.android.server.wifi.nan.WifiNanDataPathStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.nan.WifiNanDataPathStateManager.TAG , ( "onInterfaceDeleted: interfaceName=" + interfaceName ) ) ; if ( ! ( mInterfaces.contains ( interfaceName ) ) ) { android.util.Log.w ( com.android.server.wifi.nan.WifiNanDataPathStateManager.TAG , ( "onInterfaceDeleted: interface not on list -- " + interfaceName ) ) ; } mInterfaces.remove ( interfaceName ) ; }
public boolean needsUnlockedKeyStore ( ) { for ( android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks ( ) ) { if ( ( config.allowedKeyManagement.get ( WifiConfiguration.KeyMgmt.WPA_EAP ) ) && ( config.allowedKeyManagement.get ( WifiConfiguration.KeyMgmt.IEEE8021X ) ) ) { if ( mWifiKeyStore.needsSoftwareBackedKeyStore ( config.enterpriseConfig ) ) { return true ; } } } return false ; }
public void removeActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream ) { com.android.server.connectivity.tethering.IPv6TetheringCoordinator.stopIPv6TetheringOn ( downstream ) ; if ( mActiveDownstreams.remove ( downstream ) ) { updateIPv6TetheringInterfaces ( ) ; } }
public void callSessionConferenceStateUpdated ( com.android.ims.internal.ImsCallSession session , com.android.ims.ImsConferenceState state ) { logi ( ( "callSessionConferenceStateUpdated :: state=" + state ) ) ; conferenceStateUpdated ( state ) ; }
public void testJustInfoAndError ( ) { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder ( mLoggerMock ) . addInfo ( "merging info" ) . addError ( "something bad happened" ) . build ( ) ; assertEquals ( MergingReport.Result.ERROR , mergingReport.getResult ( ) ) ; }
public void getVoiceRadioTechnology ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_VOICE_RADIO_TECH , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
public void testInterfaceCountersUdp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1000 , false ) ; }
public void test_JarFile_Modified_Manifest_MainAttributes ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Modified_Manifest_MainAttributes.jar" ; tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( new java.io.File ( resources , modifiedJarName ) , true ) ; java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; try { jarFile.getInputStream ( zipEntry ) ; fail ( "SecurityException expected" ) ; } catch ( java.lang.SecurityException e ) { } } }
private void generateTestManifest ( java.lang.String outManifestLocation ) { com.android.builder.TestManifestGenerator generator = new com.android.builder.TestManifestGenerator ( outManifestLocation , mVariant.getPackageName ( ) , mVariant.getTestedPackageName ( ) , mVariant.getInstrumentationRunner ( ) ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public boolean enable ( ) { if ( ( isEnabled ( ) ) == true ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enable(): BT is already enabled..!" ) ; return true ; } try { return mManagerService.enable ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public static java.math.MathContext getMathContextOr16Digits ( com.ibm.icu.impl.number.Rounder.IBasicRoundingProperties properties ) { java.math.MathContext mathContext = properties.getMathContext ( ) ; if ( mathContext == null ) { java.math.RoundingMode roundingMode = properties.getRoundingMode ( ) ; if ( roundingMode == null ) roundingMode = java.math.RoundingMode.HALF_EVEN ; mathContext = com.ibm.icu.impl.number.RoundingUtils.MATH_CONTEXT_BY_ROUNDING_MODE_16_DIGITS [ roundingMode.ordinal ( ) ] ; } return mathContext ; }
public java.net.Socket createSocket ( java.lang.String host , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { com.android.org.conscrypt.OpenSSLSocketImpl s = ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( host , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public org.eclipse.swt.widgets.Control createControl ( org.eclipse.swt.widgets.Composite composite ) { org.eclipse.swt.widgets.Group workingSetGroup = new org.eclipse.swt.widgets.Group ( composite , org.eclipse.swt.SWT.NONE ) ; workingSetGroup.setFont ( composite.getFont ( ) ) ; workingSetGroup.setText ( NewWizardMessages.NewJavaProjectWizardPageOne_WorkingSets_group ) ; workingSetGroup.setLayout ( new org.eclipse.swt.layout.GridLayout ( 1 , false ) ) ; fWorkingSetBlock.createContent ( workingSetGroup ) ; return workingSetGroup ; }
private void deleteDownload ( int arrayPos ) { com.android.providers.downloads.DownloadInfo info = ( ( com.android.providers.downloads.DownloadInfo ) ( mDownloads.get ( arrayPos ) ) ) ; if ( ( info.status ) == ( android.provider.Downloads.STATUS_RUNNING ) ) { info.status = android.provider.Downloads.STATUS_CANCELED ; } else if ( ( ( info.destination ) != ( android.provider.Downloads.DESTINATION_EXTERNAL ) ) && ( ( info.filename ) != null ) ) { new java.io.File ( info.filename ) . delete ( ) ; } mNotifier.mNotificationMgr.cancel ( info.id ) ; mDownloads.remove ( arrayPos ) ; }
boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "disconnect: " + ( device.getAddress ( ) ) ) ) ; enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_DISCONNECT , device ) ; mHandler.sendMessage ( msg ) ; return true ; }
public void cachePackageCodeLocation ( java.lang.String packageName , java.lang.String baseCodePath , java.lang.String [ ] splitCodePaths , java.lang.String dataDir , int userId ) { com.android.server.pm.dex.DexManager.PackageCodeLocations pcl = com.android.server.pm.dex.DexManager.putIfAbsent ( mPackageCodeLocationsCache , packageName , new com.android.server.pm.dex.DexManager.PackageCodeLocations ( packageName , baseCodePath , splitCodePaths ) ) ; pcl.updateCodeLocation ( baseCodePath , splitCodePaths ) ; if ( dataDir != null ) { pcl.mergeAppDataDirs ( dataDir , userId ) ; } }
public void waitForUninterruptibly ( com.google.common.util.concurrent.Monitor.Guard guard ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException ( ) ; } if ( ! ( lock.isHeldByCurrentThread ( ) ) ) { throw new java.lang.IllegalMonitorStateException ( ) ; } waitUninterruptibly ( guard , true ) ; }
public static void recordBooleanHistogram ( java.lang.String name , boolean sample ) { if ( ( org.chromium.base.metrics.RecordHistogram.sDisabledBy ) != null ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordBooleanHistogram ( name , key , sample ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
public boolean enableDataConnectivity ( ) { enforceModifyPermission ( ) ; int subId = mSubscriptionController.getDefaultDataSubId ( ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { phone.setDataEnabled ( true ) ; return true ; } else { return false ; } }
public void testLibProguard ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( regularDir , "libProguard" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_OUTPUTS ) ) + "/proguard/release" ) ) ; runTasksOn ( project , BasePlugin.GRADLE_TEST_VERSION , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int proguardInt -> a" } ) ; }
public static java.lang.String [ ] allToString ( @ android.security.KeyStoreKeyConstraints.DigestEnum int digests ) { int [ ] values = android.security.KeyStoreKeyConstraints.getSetFlags ( digests ) ; java.lang.String [ ] result = new java.lang.String [ values.length ] ; for ( int i = 0 ; i < ( values.length ) ; i ++ ) { result [ i ] = android.security.KeyStoreKeyConstraints.Digest.toString ( values [ i ] ) ; } return result ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , int [ ] data ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFrom" ) ; validateIsInt32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public short int16 ( ) throws java.io.IOException { read ( 2 ) ; int i = 0 ; i |= ( mBuffer [ 0 ] ) & 255 ; i |= ( ( mBuffer [ 1 ] ) & 255 ) << 8 ; return ( ( short ) ( i ) ) ; }
private void assertHasWireData ( com.google.protobuf.nano.MessageNano message , boolean expected ) { int wireLength = com.google.protobuf.nano.MessageNano.toByteArray ( message ) . length ; if ( expected ) { assertFalse ( ( wireLength == 0 ) ) ; } else { assertEquals ( 0 , wireLength ) ; } }
public void run ( ) { switch ( mID ) { default : outArray [ 0 ] = mID ; outArray [ 1 ] = mData [ 0 ] ; outArray [ 2 ] = mData [ 1 ] ; outArray [ 3 ] = mData [ 2 ] ; try { releaseForTest ( ) ; } catch ( java.lang.Exception e ) { } return ; } }
public void onEventReceived ( com.googlecode.android_scripting.event.Event event ) { if ( event.getName ( ) . equals ( eventName ) ) { synchronized ( futureEvent ) { if ( ! ( futureEvent.isDone ( ) ) ) { futureEvent.set ( event ) ; com.googlecode.android_scripting.Log.v ( java.lang.String.format ( "Removeing observer (%s) got event (%s)" , this , event ) ) ; removeEventObserver ( this ) ; } if ( removeEvent ) mEventQueue.remove ( event ) ; } } }
public boolean enableNetworkWithoutConnect ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "enableNetworkWithoutConnect nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( ( ( "ENABLE_NETWORK " + netId ) + " " ) + "no-connect" ) ) ; }
public void cleanup ( ) { if ( ( myEntryPointsManager ) != null ) { com.intellij.openapi.util.Disposer.dispose ( myEntryPointsManager ) ; myEntryPointsManager = null ; } myPackages = null ; myApplet = null ; myAppMainPattern = null ; myAppPremainPattern = null ; myAppAgentmainPattern = null ; myServlet = null ; myDefaultPackage = null ; myProjectIterator = null ; }
public void testNewIncomingCall ( ) throws java.lang.Exception { com.android.ims.internal.IImsCallSession sessionBinder = org.mockito.Mockito.mock ( com.android.ims.internal.IImsCallSession.class ) ; com.android.ims.internal.ImsCallSession session = new com.android.ims.internal.ImsCallSession ( sessionBinder ) ; mFeature.incomingCall ( session ) ; org.mockito.ArgumentCaptor < com.android.ims.internal.IImsCallSession > captor = org.mockito.ArgumentCaptor.forClass ( com.android.ims.internal.IImsCallSession.class ) ; org.mockito.Mockito.verify ( mListener ) . onIncomingCall ( captor.capture ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; junit.framework.Assert.assertEquals ( sessionBinder , captor.getValue ( ) ) ; }
public void getCallBarring ( java.lang.String facility , android.os.Message onComplete ) { if ( com.android.internal.telephony.imsphone.ImsPhone.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG , ( "getCallBarring facility=" + facility ) ) ; android.os.Message resp ; resp = obtainMessage ( com.android.internal.telephony.imsphone.ImsPhone.EVENT_GET_CALL_BARRING_DONE , onComplete ) ; try { com.android.ims.ImsUtInterface ut = mCT.getUtInterface ( ) ; ut.queryCallBarring ( getCBTypeFromFacility ( facility ) , resp ) ; } catch ( com.android.ims.ImsException e ) { sendErrorResponse ( onComplete , e ) ; } }
public void testGetTvInputInfo ( ) throws java.lang.Exception { if ( ! ( android.media.tv.cts.Utils.hasTvInputFramework ( getContext ( ) ) ) ) { return ; } assertEquals ( mManager.getTvInputInfo ( mStubId ) , android.media.tv.cts.TvInputManagerTest.getInfoForClassName ( mManager.getTvInputList ( ) , android.media.tv.cts.StubTunerTvInputService.class . getName ( ) ) ) ; }
public void testFindAll ( ) throws java.lang.InterruptedException { java.lang.String p = "<p>Find all instances of find on the page and highlight them.</p>" ; mWebView.loadData ( ( ( "<html><body>" + p ) + "</body></html>" ) , "text/html" , "UTF-8" ) ; waitForLoadComplete ( mWebView , android.webkit.cts.WebViewTest.TEST_TIMEOUT ) ; assertEquals ( 2 , mWebView.findAll ( "find" ) ) ; }
public byte [ ] getIncomingSmsFingerprint ( ) { java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream ( ) ; output.write ( mEnvelope.serviceCategory ) ; output.write ( mEnvelope.teleService ) ; output.write ( mEnvelope.origAddress.origBytes , 0 , mEnvelope.origAddress.origBytes.length ) ; output.write ( mEnvelope.bearerData , 0 , mEnvelope.bearerData.length ) ; output.write ( mEnvelope.origSubaddress.origBytes , 0 , mEnvelope.origSubaddress.origBytes.length ) ; return output.toByteArray ( ) ; }
protected DateFormat.Field patternCharToDateFormatField ( char ch ) { int patternCharIndex = - 1 ; if ( ( 'A' <= ch ) && ( ch <= 'z' ) ) { patternCharIndex = com.ibm.icu.text.SimpleDateFormat.PATTERN_CHAR_TO_INDEX [ ( ( ( int ) ( ch ) ) - ( com.ibm.icu.text.SimpleDateFormat.PATTERN_CHAR_BASE ) ) ] ; } if ( patternCharIndex != ( - 1 ) ) { return com.ibm.icu.text.SimpleDateFormat.PATTERN_INDEX_TO_DATE_FORMAT_ATTRIBUTE [ patternCharIndex ] ; } return null ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; final com.android.internal.app.AlertController.AlertParams p = mAlertParams ; p.mIconAttrId = android.R.attr.alertDialogIcon ; p.mTitle = getString ( R.string.bt_enable_title ) ; p.mView = createView ( ) ; p.mPositiveButtonText = getString ( R.string.bt_enable_ok ) ; p.mPositiveButtonListener = this ; p.mNegativeButtonText = getString ( R.string.bt_enable_cancel ) ; p.mNegativeButtonListener = this ; setupAlert ( ) ; }
private static byte [ ] readFully ( java.io.File file ) throws java.io.IOException { java.io.ByteArrayOutputStream result = new java.io.ByteArrayOutputStream ( ) ; byte [ ] buf = new byte [ 65536 ] ; int chunkSize ; try ( java.io.FileInputStream in = new java.io.FileInputStream ( file ) ) { while ( ( chunkSize = in.read ( buf ) ) != ( - 1 ) ) { result.write ( buf , 0 , chunkSize ) ; } } return result.toByteArray ( ) ; }
public void onHandleIntent ( android.content.Intent intent ) { android.util.Log.i ( compiler.abcc.AbccService.TAG , ( "got onHandleIntent intent: " + intent ) ) ; if ( ( intent.getAction ( ) ) != "compiler.abcc.BITCODE_COMPILE_TEST" ) { android.util.Log.e ( compiler.abcc.AbccService.TAG , "We don't support formal release by onHandleIntent() yet!" ) ; return ; } extractIntentInfo ( intent ) ; installToolchain ( ) ; new compiler.abcc.AbccService.WorkingThread ( ) . start ( ) ; }
public libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder setTypes ( int [ ] [ ] typePairs ) { int [ ] isDsts = new int [ typePairs.length ] ; int [ ] offsetSeconds = new int [ typePairs.length ] ; for ( int i = 0 ; i < ( typePairs.length ) ; i ++ ) { offsetSeconds [ i ] = typePairs [ i ] [ 0 ] ; isDsts [ i ] = typePairs [ i ] [ 1 ] ; } this . isDsts = isDsts ; this . offsetsSeconds = offsetSeconds ; return this ; }
public com.ibm.icu.impl.CurrencyData.CurrencyDisplayInfo getInstance ( com.ibm.icu.util.ULocale locale , boolean withFallback ) { com.ibm.icu.impl.ICUResourceBundle rb = ( ( com.ibm.icu.impl.ICUResourceBundle ) ( com.ibm.icu.util.UResourceBundle.getBundleInstance ( ICUResourceBundle.ICU_CURR_BASE_NAME , locale ) ) ) ; if ( ! withFallback ) { int status = rb.getLoadingStatus ( ) ; if ( ( status == ( ICUResourceBundle.FROM_DEFAULT ) ) || ( status == ( ICUResourceBundle.FROM_ROOT ) ) ) { return null ; } } return new com.ibm.icu.impl.ICUCurrencyDisplayInfoProvider.ICUCurrencyDisplayInfo ( rb , withFallback ) ; }
private void transformAnnotationSetRefLists ( com.android.dx.io.DexBuffer in , com.android.dx.merge.IndexMap indexMap ) { com.android.dx.dex.TableOfContents.Section section = in.getTableOfContents ( ) . annotationSetRefLists ; if ( section.exists ( ) ) { com.android.dx.io.DexBuffer.Section setIn = in.open ( section.off ) ; for ( int i = 0 ; i < ( section.size ) ; i ++ ) { transformAnnotationSetRefList ( indexMap , setIn ) ; } } }
public java.nio.DoubleBuffer put ( java.nio.DoubleBuffer src ) { if ( src == ( this ) ) { throw new java.lang.IllegalArgumentException ( ) ; } if ( ( src.remaining ( ) ) > ( remaining ( ) ) ) { throw new java.nio.BufferOverflowException ( ) ; } double [ ] doubles = new double [ src.remaining ( ) ] ; src.get ( doubles ) ; put ( doubles ) ; return this ; }
static void nativeGetPixels ( long nativeBitmap , int [ ] pixels , int offset , int stride , int x , int y , int width , int height ) { android.graphics.Bitmap_Delegate delegate = android.graphics.Bitmap_Delegate.sManager.getDelegate ( nativeBitmap ) ; if ( delegate == null ) { return ; } delegate.getImage ( ) . getRGB ( x , y , width , height , pixels , offset , stride ) ; }
public void callDropFeedbackPaint ( com.android.ide.eclipse.adt.editors.layout.gscripts.IGraphics gc , com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy targetNode , com.android.ide.eclipse.adt.editors.layout.gscripts.DropFeedback feedback ) { if ( ( ( gc != null ) && ( feedback != null ) ) && ( ( feedback.paintClosure ) != null ) ) { try { feedback.paintClosure.call ( new java.lang.Object [ ] { gc , targetNode , feedback } ) ; } catch ( java.lang.Exception e ) { logError ( "DropFeedback.paintClosure failed: %s" , e.toString ( ) ) ; } } }
public java.util.List < java.lang.String [ ] > getNavbarLinks ( javax.servlet.http.HttpServletRequest request ) { java.util.List < java.lang.String [ ] > links = new java.util.ArrayList < > ( ) ; com.android.vts.servlet.Page root = Page.HOME ; java.lang.String [ ] rootEntry = new java.lang.String [ ] { root.getUrl ( ) , root.getName ( ) } ; links.add ( rootEntry ) ; return links ; }
private boolean isAllowedProviderSafe ( java.lang.String provider ) { if ( ( LocationManager.GPS_PROVIDER.equals ( provider ) ) && ( ( mContext.checkCallingPermission ( com.android.server.LocationManagerService.ACCESS_FINE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) { return false ; } if ( ( ( LocationManager.NETWORK_PROVIDER.equals ( provider ) ) && ( ( mContext.checkCallingPermission ( com.android.server.LocationManagerService.ACCESS_FINE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) && ( ( mContext.checkCallingPermission ( com.android.server.LocationManagerService.ACCESS_COARSE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) ) { return false ; } return true ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( ( options.coreLibrary ? "__desugar__/" : "" ) ) ; com.google.devtools.build.android.desugar.IndexedJars appIndexedJar = new com.google.devtools.build.android.desugar.IndexedJars ( com.google.common.collect.ImmutableList.of ( options.inputJar ) ) ; com.google.devtools.build.android.desugar.IndexedJars appAndClasspathIndexedJars = new com.google.devtools.build.android.desugar.IndexedJars ( options.classpath , appIndexedJar ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , appAndClasspathIndexedJars , parent ) ; boolean allowCallsToObjectsNonNull = ( options.minSdkVersion ) >= 19 ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( ( ( options.copyBridgesFromClasspath ) && ( ! allowDefaultMethods ) ? appAndClasspathIndexedJars : appIndexedJar ) , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; if ( ! allowCallsToObjectsNonNull ) { visitor = new com.google.devtools.build.android.desugar.ObjectsRequireNonNullMethodInliner ( visitor ) ; } reader.accept ( visitor , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , null , allowDefaultMethods ) ; if ( ! allowCallsToObjectsNonNull ) { visitor = new com.google.devtools.build.android.desugar.ObjectsRequireNonNullMethodInliner ( visitor ) ; } reader.accept ( visitor , 0 ) ; java.lang.String filename = ( rewriter.unprefix ( lambdaClass.getValue ( ) . desiredInternalName ( ) ) ) + ".class" ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , filename , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
public < T extends com.android.jack.api.JackConfig > T createConfig ( java.lang.Class < T > cls ) throws com.android.jack.api.ConfigNotSupportedException { if ( cls == ( com.android.jack.api.v01.Api01Config.class ) ) { return ( ( T ) ( new com.android.jack.api.v01.impl.Api01ConfigImpl ( ) ) ) ; } throw new com.android.jack.api.ConfigNotSupportedException ( ( ( cls.getName ( ) ) + " are not supported" ) ) ; }
public void run ( ) { com.android.bluetooth.opp.BluetoothOppManager.getInstance ( this ) . saveSendingFileInfo ( mimeType , uris , false ) ; launchDevicePicker ( ) ; finish ( ) ; }
public void onReceivedTitle ( java.lang.String title ) { org.chromium.content.common.TraceEvent.begin ( ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onReceivedTitle" ) ; mWebChromeClient.onReceivedTitle ( mWebView , title ) ; } org.chromium.content.common.TraceEvent.end ( ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "OnClickActivity.java:27: Error: On click handler wrong5(View) must be public\n" + ( ( ( ( ( ( "OnClickActivity.java:31: Error: On click handler wrong6(View) should not be static\n" + "onclick.xml:10: Error: Corresponding method handler \'public void nonexistent(android.view.View)\' not found\n" ) + "onclick.xml:16: Error: Corresponding method handler \'public void wrong1(android.view.View)\' not found\n" ) + "onclick.xml:22: Error: Corresponding method handler \'public void wrong2(android.view.View)\' not found\n" ) + "onclick.xml:28: Error: Corresponding method handler \'public void wrong3(android.view.View)\' not found\n" ) + "onclick.xml:34: Error: Corresponding method handler \'public void wrong4(android.view.View)\' not found\n" ) + "onclick.xml:58: Error: Corresponding method handler 'public void simple_typo(android.view.View)' not found (did you mean void test.pkg.OnClickActivity#simple_tyop(android.view.View) ?)" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "res/layout/onclick.xml=>res/layout/onclick.xml" , "bytecode/OnClickActivity.java.txt=>src/test/pkg/OnClickActivity.java" , "bytecode/OnClickActivity.class.data=>bin/classes/test/pkg/OnClickActivity.class" ) ) ; }
private void disconnectProfiles ( android.bluetooth.BluetoothDevice device , java.lang.String deviceID ) { com.googlecode.android_scripting.Log.d ( ( "Disconnecting device " + device ) ) ; mA2dpProfile.a2dpDisconnect ( device ) ; mA2dpSinkProfile.a2dpSinkDisconnect ( device ) ; mHidProfile.hidDisconnect ( device ) ; mHspProfile.hspDisconnect ( device ) ; mHfpClientProfile.hfpClientDisconnect ( device ) ; }
public void onBar1Changed ( int progress ) { mRadius = ( ( ( float ) ( progress ) ) / 100.0F ) * ( MAX_RADIUS ) ; if ( ( mRadius ) <= 0.1F ) { mRadius = 0.1F ; } if ( mUseIntrinsic ) { mIntrinsic.setRadius ( mRadius ) ; } else { mScript.invoke_setRadius ( ( ( int ) ( mRadius ) ) ) ; } }
private IBinder.DeathRecipient getInternalStateDeathRecipient ( int clientId ) throws java.lang.Exception { java.lang.reflect.Field field = com.android.server.wifi.nan.WifiNanServiceImpl.class . getDeclaredField ( "mDeathRecipientsByClientId" ) ; field.setAccessible ( true ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) android.util.SparseArray < android.os.IBinder.DeathRecipient > deathRecipientsByClientId = ( ( android.util.SparseArray < android.os.IBinder.DeathRecipient > ) ( field.get ( mDut ) ) ) ; return deathRecipientsByClientId.get ( clientId ) ; }
public void addDevice ( com.android.vts.entity.DeviceInfoEntity device ) { if ( device == null ) return ; devices.add ( ( ( ( ( ( ( device.branch ) + "/" ) + ( device.buildFlavor ) ) + " (" ) + ( device.buildId ) ) + ")" ) ) ; }
void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; props.setProperty ( com.android.sdklib.internal.repository.ExtraPackage.PROP_PATH , mPath ) ; if ( ( mVendor ) != null ) { props.setProperty ( com.android.sdklib.internal.repository.ExtraPackage.PROP_PATH , mVendor ) ; } if ( ( getMinApiLevel ( ) ) != ( MIN_API_LEVEL_NOT_SPECIFIED ) ) { props.setProperty ( com.android.sdklib.internal.repository.ExtraPackage.PROP_MIN_API_LEVEL , java.lang.Integer.toString ( getMinApiLevel ( ) ) ) ; } }
java.util.List < com.android.cts.verifier.TestListItem > filterTests ( java.util.List < com.android.cts.verifier.TestListItem > tests ) { java.util.List < com.android.cts.verifier.TestListItem > filteredTests = new java.util.ArrayList < com.android.cts.verifier.TestListItem > ( ) ; for ( com.android.cts.verifier.TestListItem test : tests ) { if ( ( ! ( hasAnyFeature ( test.excludedFeatures ) ) ) && ( hasAllFeatures ( test.requiredFeatures ) ) ) { if ( ( ( test.applicableFeatures ) == null ) || ( hasAnyFeature ( test.applicableFeatures ) ) ) { filteredTests.add ( test ) ; } } } return filteredTests ; }
private static com.android.dx.dex.file.ClassDefItem translateClass ( byte [ ] bytes , com.android.dx.cf.direct.DirectClassFile cf ) { try { return com.android.dx.dex.cf.CfTranslator.translate ( cf , bytes , com.android.dx.command.dexer.Main.args.cfOptions , com.android.dx.command.dexer.Main.args.dexOptions , com.android.dx.command.dexer.Main.outputDex ) ; } catch ( com.android.dx.cf.iface.ParseException ex ) { DxConsole.err.println ( "\ntrouble processing:" ) ; if ( com.android.dx.command.dexer.Main.args.debug ) { ex.printStackTrace ( DxConsole.err ) ; } else { ex.printContext ( DxConsole.err ) ; } } com.android.dx.command.dexer.Main.errors.incrementAndGet ( ) ; return null ; }
public void onMtuChanged ( android.bluetooth.BluetoothDevice device , int mtu ) { com.googlecode.android_scripting.Log.d ( ( ( ( "gatt_server change onMtuChanged " + ( mEventType ) ) + " " ) + ( index ) ) ) ; mResults.putParcelable ( "BluetoothDevice" , device ) ; mResults.putInt ( "mtu" , mtu ) ; mEventFacade.postEvent ( ( ( ( mEventType ) + ( index ) ) + "onMtuChanged" ) , mResults.clone ( ) ) ; mResults.clear ( ) ; }
public void testWriteFiboDexFile ( ) throws java.lang.Exception { java.io.File outputDir = com.android.jack.util.FileUtils.getWorkingDirectory ( ) ; com.android.jack.Options fiboArgs = com.android.jack.TestTools.buildCommandLineArgs ( com.android.jack.FibonacciThreeAddressTest.JAVA_FILEPATH ) ; java.io.File outputFile = new java.io.File ( outputDir , fiboArgs.getOutputFile ( ) . getName ( ) ) ; java.io.File outputDirectory = outputFile.getParentFile ( ) ; com.android.jack.util.FileUtils.createIfNotExists ( outputDirectory ) ; com.android.jack.Jack.run ( fiboArgs ) ; junit.framework.Assert.assertTrue ( outputFile.exists ( ) ) ; junit.framework.Assert.assertTrue ( ( ( outputFile.length ( ) ) > 0 ) ) ; }
public static java.lang.String retrieveFieldValueName ( java.lang.String id , int field , int value , int style , java.util.Locale locale ) { return null ; }
public void modifyText ( org.eclipse.swt.events.ModifyEvent event ) { if ( ( mManualTextChange ) > 0 ) { return ; } try { mValue = java.lang.Double.parseDouble ( mDecimalText.getText ( ) ) ; setValueIntoSexagesimalControl ( mValue ) ; mValueValidity = true ; } catch ( java.lang.NumberFormatException e ) { mValueValidity = false ; resetSexagesimalControls ( ) ; } }
public com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources resources = new com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources ( ) ; try { loadResources ( resources , frameworkRes ) ; return resources ; } catch ( java.io.IOException e ) { } } return null ; }
public com.android.jack.ir.ast.JParameterRef exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ExportSession exportSession ) { assert ( sourceInfo ) != null ; assert ( localId ) != null ; com.android.jack.ir.ast.JParameterRef jRef = JParameterUnresolved.INSTANCE.makeRef ( sourceInfo ) ; exportSession.getVariableResolver ( ) . addLink ( localId , new com.android.jack.jayce.linker.VariableRefLinker ( jRef ) ) ; return jRef ; }
public com.android.jack.api.impl.SubReleaseKind getCompilerSubReleaseKind ( ) { return SubReleaseKind.ALPHA ; }
public boolean equals ( java.lang.Object obj ) { if ( obj instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.Point ) { com.android.ide.eclipse.adt.editors.layout.gscripts.Point rhs = ( ( com.android.ide.eclipse.adt.editors.layout.gscripts.Point ) ( obj ) ) ; return ( ( this . x ) == ( rhs.x ) ) && ( ( this . y ) == ( rhs.y ) ) ; } return false ; }
public void testRewriteGradleMessages ( ) { java.lang.String original = "error example\ntwo line error\nnext line\nsomething else" ; java.lang.String rewriten = mGradleMessageRewriter.rewriteMessages ( original ) ; java.lang.String expected = "Android Gradle Plugin - Build Issue: " + ( ( ( ( ( ( ( "{\"kind\":\"ERROR\",\"text\":\"errorText\",\"sourcePath\":\"error/source\"," + "\"position\":{\"startLine\":1,\"startColumn\":2,\"startOffset\":3," ) + "\"endLine\":4,\"endColumn\":5,\"endOffset\":6},\"original\":\"\"}\n" ) + "Android Gradle Plugin - Build Issue: {\"kind\":\"WARNING\",\"text\":" ) + "\"two line warning\",\"sourcePath\":\"sourcePath\"," ) + "\"position\":{\"startLine\":1,\"startColumn\":2},\"original\":\"\"}\n" ) + "Android Gradle Plugin - Build Issue: {\"kind\":\"SIMPLE\"," ) + "\"text\":\"something else\",\"position\":{},\"original\":\"something else\"}" ) ; assertEquals ( expected.trim ( ) , rewriten.trim ( ) ) ; }
java.lang.String retrieveLastLocalMessage ( ) { lastIndexOfLocalMessage = com.android.incallui.rtt.impl.RttChatMessage.getLastIndexLocalMessage ( rttMessages ) ; if ( ( lastIndexOfLocalMessage ) >= 0 ) { com.android.incallui.rtt.impl.RttChatMessage rttChatMessage = rttMessages.get ( lastIndexOfLocalMessage ) ; rttChatMessage.unfinish ( ) ; return rttChatMessage.getContent ( ) ; } else { return null ; } }
public void onCallListChange ( com.android.incallui.call.CallList callList ) { com.google.common.collect.ImmutableList.Builder < com.android.dialer.activecalls.ActiveCallInfo > activeCalls = com.google.common.collect.ImmutableList.builder ( ) ; for ( com.android.incallui.call.DialerCall call : callList.getAllCalls ( ) ) { if ( ( call.getState ( ) ) != ( com.android.incallui.call.DialerCall.State.DISCONNECTED ) ) { activeCalls.add ( com.android.dialer.activecalls.ActiveCallInfo.builder ( ) . setPhoneAccountHandle ( com.google.common.base.Optional.fromNullable ( call.getAccountHandle ( ) ) ) . build ( ) ) ; } } com.android.dialer.activecalls.ActiveCallsComponent.get ( appContext ) . activeCalls ( ) . setActiveCalls ( activeCalls.build ( ) ) ; }
public com.google.common.util.concurrent.Service.State startAndWait ( ) { return com.google.common.util.concurrent.Futures.getUnchecked ( start ( ) ) ; }
public void rmdex ( java.lang.String codePath , java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { com.android.server.pm.Installer.assertValidInstructionSet ( instructionSet ) ; mInstaller.execute ( "rmdex" , codePath , instructionSet ) ; }
private java.util.List < android.net.wifi.WifiConfiguration > parseNetworkList ( org.xmlpull.v1.XmlPullParser in , int outerTagDepth ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { java.util.List < android.net.wifi.WifiConfiguration > networkList = new java.util.ArrayList < > ( ) ; while ( com.android.server.wifi.util.XmlUtil.gotoNextSectionWithNameOrEnd ( in , com.android.server.wifi.NetworkListStoreData.XML_TAG_SECTION_HEADER_NETWORK , outerTagDepth ) ) { android.net.wifi.WifiConfiguration config = parseWifiConfiguration ( in , ( outerTagDepth + 1 ) ) ; networkList.add ( config ) ; } return networkList ; }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass ( ) ) != ( o.getClass ( ) ) ) ) return false ; com.google.gct.testing.GoogleCloudTestingConfiguration that = ( ( com.google.gct.testing.GoogleCloudTestingConfiguration ) ( o ) ) ; return ( id ) == ( that.id ) ; }
private void create ( java.lang.String pattern , android.icu.text.DecimalFormatSymbols inputSymbols , android.icu.text.CurrencyPluralInfo info , int inputStyle ) { if ( inputStyle != ( android.icu.text.NumberFormat.PLURALCURRENCYSTYLE ) ) { createFromPatternAndSymbols ( pattern , inputSymbols ) ; } else { symbols = ( ( android.icu.text.DecimalFormatSymbols ) ( inputSymbols.clone ( ) ) ) ; currencyPluralInfo = info ; java.lang.String currencyPluralPatternForOther = currencyPluralInfo.getCurrencyPluralPattern ( "other" ) ; applyPatternWithoutExpandAffix ( currencyPluralPatternForOther , false ) ; setCurrencyForSymbols ( ) ; } style = inputStyle ; }
public void timeDateIntervalFormat_formatDateRange_TIME ( int reps ) throws java.lang.Exception { java.util.Locale l = java.util.Locale.US ; java.util.TimeZone utc = java.util.TimeZone.getTimeZone ( "UTC" ) ; int flags = ( FORMAT_SHOW_TIME ) | ( FORMAT_24HOUR ) ; for ( int rep = 0 ; rep < reps ; ++ rep ) { formatDateRange ( l , utc , 0L , 0L , flags ) ; } }
private void writeDup ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > nextFrame ) throws java.io.IOException { writeAssign ( frame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK , nextFrame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; try { for ( int i = 1 ; i <= 70 ; i ++ ) { java.lang.Class < ? > clazz = getClassLoader ( ) . loadClass ( java.lang.String.format ( "com.android.tests.basic.manymethods.Big%03d" , i ) ) ; } } catch ( java.lang.ClassNotFoundException e ) { throw new java.lang.RuntimeException ( e ) ; } }
private void writeGoto ( int insIndex ) throws java.io.IOException { sourceInfoWriter.writeDebugBegin ( currentClass , currentLine ) ; writer.writeCatchBlockIds ( currentCatchList ) ; writer.writeKeyword ( Token.GOTO ) ; writer.writeOpen ( ) ; writer.writeId ( java.lang.Integer.toString ( insIndex ) ) ; sourceInfoWriter.writeDebugEnd ( currentClass , ( ( currentLine ) + 1 ) ) ; writer.writeClose ( ) ; }
protected java.util.Set < com.google.common.reflect.TypeToken < ? super T > > delegate ( ) { com.google.common.collect.ImmutableSet < com.google.common.reflect.TypeToken < ? super T > > filteredTypes = types ; if ( filteredTypes == null ) { @ java.lang.SuppressWarnings ( value = { "unchecked" , "rawtypes" } ) com.google.common.collect.ImmutableList < com.google.common.reflect.TypeToken < ? super T > > collectedTypes = ( ( com.google.common.collect.ImmutableList ) ( com.google.common.reflect.TypeToken.TypeCollector.FOR_GENERIC_TYPE.collectTypes ( this ) ) ) ; return types = com.google.common.collect.FluentIterable.from ( collectedTypes ) . filter ( com.google.common.reflect.TypeToken.TypeFilter.IGNORE_TYPE_VARIABLE_OR_WILDCARD ) . toImmutableSet ( ) ; } else { return filteredTypes ; } }
public void testMergeWrite ( ) throws java.lang.Exception { com.android.builder.resources.ResourceSet mergedSet = com.android.builder.resources.ResourceMergerTest.getMergedSet ( ) ; java.io.File folder = com.android.builder.resources.ResourceMergerTest.getWrittenSet ( ) ; com.android.builder.resources.ResourceSet writtenSet = new com.android.builder.resources.ResourceSet ( ) ; writtenSet.addSource ( folder ) ; assertEquals ( mergedSet.getSize ( ) , writtenSet.getSize ( ) ) ; java.util.Map < java.lang.String , com.android.builder.resources.Resource > map = writtenSet.getResourceMap ( ) ; for ( com.android.builder.resources.Resource item : mergedSet.getResources ( ) ) { assertNotNull ( map.get ( item.getKey ( ) ) ) ; } }
private static java.util.Set < java.lang.String > getDisabledCapabilities ( @ android.annotation.Nullable android.os.PersistableBundle bundle ) { if ( bundle == null ) { return null ; } if ( ! ( bundle.containsKey ( com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper.KEY_VVM_DISABLED_CAPABILITIES_STRING_ARRAY ) ) ) { return null ; } android.util.ArraySet < java.lang.String > result = new android.util.ArraySet < java.lang.String > ( ) ; result.addAll ( java.util.Arrays.asList ( bundle.getStringArray ( com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper.KEY_VVM_DISABLED_CAPABILITIES_STRING_ARRAY ) ) ) ; return result ; }
public void test_getClientAliases ( ) { init ( tests.api.javax.net.ssl.X509KeyManagerTest.CLIENT ) ; assertNull ( manager.getClientAliases ( null , null ) ) ; assertNull ( manager.getClientAliases ( "" , null ) ) ; java.lang.String [ ] resArray = manager.getClientAliases ( tests.api.javax.net.ssl.X509KeyManagerTest.TYPE_RSA , null ) ; assertNotNull ( resArray ) ; assertEquals ( 3 , resArray.length ) ; assertKnownAliases ( resArray ) ; }
public com.android.internal.telephony.InboundSmsTracker makeInboundSmsTracker ( byte [ ] pdu , long timestamp , int destPort , boolean is3gpp2 , boolean is3gpp2WapPdu , java.lang.String address , java.lang.String messageBody ) { return new com.android.internal.telephony.InboundSmsTracker ( pdu , timestamp , destPort , is3gpp2 , is3gpp2WapPdu , address , messageBody ) ; }
public boolean containsValue ( java.lang.Object o ) { return values ( ) . contains ( o ) ; }
public void noCrashClassObj ( ) throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump ( ) ; com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot ( ) ; com.android.ahat.AhatHandler handler = new com.android.ahat.ObjectHandler ( snapshot ) ; com.android.ahat.heapdump.AhatInstance object = snapshot.findClass ( "Main" ) ; org.junit.Assert.assertNotNull ( object ) ; com.android.ahat.TestHandler.testNoCrash ( handler , ( "http://localhost:7100/object?id=" + ( object.getId ( ) ) ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [ ] pkgs = intent.getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { synchronized ( this ) { if ( forceStopPackageLocked ( pkg , ( - 1 ) , false , false , false ) ) { setResultCode ( Activity.RESULT_OK ) ; return ; } } } } }
public void testAbiOnlyWithNoMatch ( ) { java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "foo" , 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "bar" , 2 ) ) ; java.util.List < com.android.build.OutputFile > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "zzz" ) ; assertEquals ( 0 , result.size ( ) ) ; }
public int invokeOemRilRequestRaw ( byte [ ] oemReq , byte [ ] oemResp ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.invokeOemRilRequestRaw ( oemReq , oemResp ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return - 1 ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JArrayLiteral arrayLiteral ) { java.util.List < com.android.jack.ir.ast.JLiteral > values = arrayLiteral.getValues ( ) ; if ( ( values.size ( ) ) > 1 ) { print ( '{' ) ; } visitCollectionWithCommas ( values.iterator ( ) ) ; if ( ( values.size ( ) ) > 1 ) { print ( '}' ) ; } return false ; }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , long [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * 8 ) ) ; }
public void setVoicemailTranscriptionEnabled ( android.content.Context context , android.telecom.PhoneAccountHandle phoneAccountHandle , boolean enabled ) { com.android.dialer.common.Assert.checkArgument ( isVoicemailTranscriptionAvailable ( context , phoneAccountHandle ) , "transcription must be available before enabling/disabling it" ) ; com.android.voicemail.impl.settings.VisualVoicemailSettingsUtil.setVoicemailTranscriptionEnabled ( context , phoneAccountHandle , enabled ) ; }
public static com.intellij.execution.ui.ConsoleView createAndAttachConsole ( @ org.jetbrains.annotations.NotNull final java.lang.String testFrameworkName , @ org.jetbrains.annotations.NotNull final com.intellij.execution.process.ProcessHandler processHandler , @ org.jetbrains.annotations.NotNull final com.intellij.execution.configurations.CommandLineState commandLineState , @ org.jetbrains.annotations.NotNull final com.intellij.execution.configurations.ModuleRunConfiguration config , @ org.jetbrains.annotations.NotNull final com.intellij.execution.Executor executor ) throws com.intellij.execution.ExecutionException { final com.intellij.execution.testframework.TestConsoleProperties consoleProperties = new com.intellij.execution.testframework.sm.runner.SMTRunnerConsoleProperties ( config , testFrameworkName , executor ) ; return com.google.gct.testing.results.GoogleCloudTestResultsConnectionUtil.createAndAttachConsole ( testFrameworkName , processHandler , consoleProperties , commandLineState.getEnvironment ( ) ) ; }
void stopScan ( com.android.bluetooth.gatt.ScanClient client ) { enforceAdminPermission ( ) ; int scanQueueSize = ( mScanManager.getBatchScanQueue ( ) . size ( ) ) + ( mScanManager.getRegularScanQueue ( ) . size ( ) ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "stopScan() - queue size =" + scanQueueSize ) ) ; mScanManager.stopScan ( client ) ; }
private void createStateVariation ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationChooser chooser , com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration parent ) { com.android.sdklib.devices.State currentState = parent.getDeviceState ( ) ; com.android.sdklib.devices.State nextState = parent.getNextDeviceState ( currentState ) ; if ( nextState != currentState ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ComplementingConfiguration configuration = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ComplementingConfiguration.create ( chooser , parent ) ; configuration.setOverrideDeviceState ( true ) ; configuration.setDeviceState ( nextState , false ) ; addPreview ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview.create ( this , configuration ) ) ; } }
public boolean isPeripheralModeSupported ( ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return false ; try { return mService.isPeripheralModeSupported ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "failed to get peripheral mode capability: " , e ) ; } return false ; }
public void onViewHolderExpanded ( com.android.dialer.voicemail.listui.NewVoicemailViewHolder expandedViewHolder ) { currentlyExpandedViewHolderId = expandedViewHolder.getViewHolderId ( ) ; for ( com.android.dialer.voicemail.listui.NewVoicemailViewHolder viewHolder : newVoicemailViewHolderSet ) { if ( ! ( viewHolder.equals ( expandedViewHolder ) ) ) { viewHolder.collapseViewHolder ( ) ; } } }
public void setUp ( ) { helper.setUp ( ) ; com.android.vts.util.ProfilingPointSummaryTest.summary = new com.android.vts.util.ProfilingPointSummary ( ) ; com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode mode = com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_INCREASING ; com.android.vts.entity.ProfilingPointRunEntity pt = com.android.vts.util.ProfilingPointSummaryTest.createProfilingReport ( com.android.vts.util.ProfilingPointSummaryTest.labels , com.android.vts.util.ProfilingPointSummaryTest.values , mode ) ; com.android.vts.util.ProfilingPointSummaryTest.summary.update ( pt ) ; }
public void setVideoProvider ( java.lang.String callId , com.android.internal.telecom.IVideoProvider videoProvider , android.telecom.Logging.Session.Info sessionInfo ) { java.lang.String callingPackage = mOurConnectionServiceImpl.getApplicationContext ( ) . getOpPackageName ( ) ; android.telecom.RemoteConnection.VideoProvider remoteVideoProvider = null ; if ( videoProvider != null ) { remoteVideoProvider = new android.telecom.RemoteConnection.VideoProvider ( videoProvider , callingPackage ) ; } findConnectionForAction ( callId , "setVideoProvider" ) . setVideoProvider ( remoteVideoProvider ) ; }
public java.lang.String getIsimImpi ( ) { com.android.internal.telephony.Phone phone = getPhone ( getDefaultSubscription ( ) ) ; mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE , "Requires READ_PRIVILEGED_PHONE_STATE" ) ; com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords ( ) ; if ( isim != null ) { return isim.getIsimImpi ( ) ; } else { return null ; } }
public boolean resetRoamingConfiguration ( ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "resetRoamingConfiguration " ) ; try { if ( ( mWifiVendorHal ) != null ) { com.android.server.wifi.WifiNative.RoamingConfig config = new com.android.server.wifi.WifiNative.RoamingConfig ( ) ; return mWifiVendorHal.configureRoaming ( config ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } return false ; }
public void update ( final com.intellij.openapi.actionSystem.AnActionEvent e ) { final com.intellij.openapi.actionSystem.Presentation presentation = e.getPresentation ( ) ; presentation.setEnabled ( ( ( com.google.gct.testing.ShowScreenshotsAction.getSelectedTestProxy ( e ) ) != null ) ) ; }
private java.lang.String getRawScanResults ( java.lang.String range ) { return doStringCommandWithoutLogging ( ( ( "BSS RANGE=" + range ) + " MASK=0x21d97" ) ) ; }
byte [ ] getLocaleData ( ) { android.content.res.Configuration conf = mContext.getResources ( ) . getConfiguration ( ) ; final java.util.Locale loc = conf.locale ; java.lang.String localeString = loc.getLanguage ( ) ; java.lang.String country = loc.getCountry ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( country ) ) ) { localeString += "_" + country ; } return localeString.getBytes ( ) ; }
public void dumpShowsLastFailureTraceAndCurrentConnectionTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #1" ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #2" ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #1" ) ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #2" ) ) ; }
void updateThumbnail ( android.graphics.Bitmap newThumbnail , java.lang.CharSequence description ) { if ( newThumbnail != null ) { if ( ActivityManagerService.DEBUG_THUMBNAILS ) android.util.Slog.i ( ActivityManagerService.TAG , ( ( ( "Setting thumbnail of " + ( this ) ) + " to " ) + newThumbnail ) ) ; boolean thumbnailUpdated = task.setLastThumbnail ( newThumbnail ) ; if ( thumbnailUpdated && ( isPersistable ( ) ) ) { mStackSupervisor.mService.notifyTaskPersisterLocked ( task , false ) ; } } task.lastDescription = description ; }
public void dump ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { pw.println ( "WifiNanDataPathStateManager:" ) ; pw.println ( ( " mInterfaces: " + ( mInterfaces ) ) ) ; pw.println ( ( " mNetworkCapabilitiesFilter: " + ( mNetworkCapabilitiesFilter ) ) ) ; pw.println ( ( " mNetworkRequestsCache: " + ( mNetworkRequestsCache ) ) ) ; pw.println ( " mNetworkFactory:" ) ; mNetworkFactory.dump ( fd , pw , args ) ; }
public void createAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.createAppData ( uuid , packageName , userId , flags , appId , seInfo , targetSdkVersion ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public java.lang.String getUrl ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.String ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.String > ( ) { @ java.lang.Override public java.lang.String call ( ) { return getUrl ( ) ; } } ) ; return ret ; } java.lang.String url = mAwContents.getUrl ( ) ; if ( ( url == null ) || ( url.trim ( ) . isEmpty ( ) ) ) return null ; return url ; }
void enqueueEvent ( java.lang.Object event , com.google.common.eventbus.EventHandler handler ) { eventsToDispatch.get ( ) . offer ( new com.google.common.eventbus.EventBus.EventWithHandler ( event , handler ) ) ; }
public void setStatusHints ( java.lang.String callId , android.telecom.StatusHints statusHints ) { android.telecom.Log.startSession ( "CSW.sSH" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setStatusHints %s %s" , callId , statusHints ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setStatusHints ( statusHints ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void testPocBug_35216793 ( ) throws java.lang.Exception { enableAdbRoot ( getDevice ( ) ) ; if ( containsDriver ( getDevice ( ) , "/dev/v4l-subdev*" ) ) { android.security.cts.AdbUtils.runPocNoOutput ( "Bug-35216793" , getDevice ( ) , 60 ) ; } }
public void testRoamingDataIcon ( ) { setupDefaultSignal ( ) ; setGsmRoaming ( true ) ; verifyLastMobileDataIndicators ( true , TelephonyIcons.TELEPHONY_SIGNAL_STRENGTH_ROAMING [ 1 ] [ DEFAULT_LEVEL ] , TelephonyIcons.ROAMING_ICON ) ; verifyLastQsMobileDataIndicators ( true , TelephonyIcons.QS_TELEPHONY_SIGNAL_STRENGTH [ 1 ] [ DEFAULT_LEVEL ] , TelephonyIcons.QS_DATA_R , false , false ) ; }
public static com.android.manifmerger.XmlDocument load ( com.android.manifmerger.KeyResolver < java.lang.String > selectors , com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver < com.android.manifmerger.ManifestMerger2.SystemProperty > systemPropertyResolver , com.android.manifmerger.XmlLoader.SourceLocation sourceLocation , java.lang.String xml , com.android.manifmerger.XmlDocument.Type type ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( xml ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , sourceLocation , selectors , systemPropertyResolver , domDocument.getDocumentElement ( ) , type ) : null ; }
public void systemReady ( ) { if ( ( mKeyguardMediator ) != null ) { mKeyguardMediator.onSystemReady ( ) ; } synchronized ( mLock ) { updateOrientationListenerLp ( ) ; mSystemReady = true ; mHandler.post ( new java.lang.Runnable ( ) { public void run ( ) { updateSettings ( ) ; } } ) ; } }
public void testBatchAndFlush ( ) throws java.lang.Exception { try { mWakeLock.acquire ( ) ; for ( android.hardware.Sensor sensor : mSensorList ) { if ( ( sensor.getReportingMode ( ) ) != ( android.hardware.Sensor.REPORTING_MODE_ONE_SHOT ) ) { registerListenerCallFlush ( sensor , null ) ; } } } finally { mWakeLock.release ( ) ; } }
private void forgetNetworkAndVerifySuccess ( ) throws java.lang.Exception { when ( mWifiNative.removeNetwork ( 0 ) ) . thenReturn ( true ) ; mLooper.startAutoDispatch ( ) ; final android.os.Message result = mWsmAsyncChannel.sendMessageSynchronously ( WifiManager.FORGET_NETWORK , 0 ) ; mLooper.stopAutoDispatch ( ) ; org.junit.Assert.assertEquals ( WifiManager.FORGET_NETWORK_SUCCEEDED , result.what ) ; result.recycle ( ) ; mLooper.startAutoDispatch ( ) ; org.junit.Assert.assertTrue ( mWsm.syncGetConfiguredNetworks ( ( - 1 ) , mWsmAsyncChannel ) . isEmpty ( ) ) ; mLooper.stopAutoDispatch ( ) ; }
public void setPlaybackInfoForRcc ( int rccId , int what , int value ) { mMediaFocusControl.setPlaybackInfoForRcc ( rccId , what , value ) ; }
public java.lang.String describeFirstNonRequestableCapability ( ) { if ( hasCapability ( android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED ) ) return "NET_CAPABILITY_VALIDATED" ; if ( hasCapability ( android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL ) ) return "NET_CAPABILITY_CAPTIVE_PORTAL" ; if ( hasCapability ( android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND ) ) return "NET_CAPABILITY_FOREGROUND" ; if ( ( ( mNetworkCapabilities ) & ( android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES ) ) != 0 ) { return "unknown non-requestable capabilities " + ( java.lang.Long.toHexString ( mNetworkCapabilities ) ) ; } if ( ( ( mLinkUpBandwidthKbps ) != 0 ) || ( ( mLinkDownBandwidthKbps ) != 0 ) ) return "link bandwidth" ; if ( hasSignalStrength ( ) ) return "signalStrength" ; return null ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ! ( obj instanceof android.hardware.radio.RadioManager.BandConfig ) ) return false ; android.hardware.radio.RadioManager.BandConfig other = ( ( android.hardware.radio.RadioManager.BandConfig ) ( obj ) ) ; if ( ( mDescriptor ) != ( other.getDescriptor ( ) ) ) return false ; return true ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; java.util.ArrayList < java.lang.Object > l = new java.util.ArrayList < > ( 100 ) ; Main.doTest ( l ) ; }
public void updateRecordedProgram ( com.android.tv.dvr.RecordedProgram r ) { long id = r.getId ( ) ; if ( mRecordedPrograms.containsKey ( id ) ) { mRecordedPrograms.put ( id , r ) ; notifyRecordedProgramsChanged ( r ) ; } else { throw new java.lang.IllegalArgumentException ( ( "Recording not found:" + r ) ) ; } }
private android.net.wifi.WifiConfiguration updateExistingInternalWifiConfigurationFromExternal ( android.net.wifi.WifiConfiguration config , int uid ) { android.net.wifi.WifiConfiguration existingConfig = new android.net.wifi.WifiConfiguration ( getInternalConfiguredNetwork ( config ) ) ; mergeWithInternalWifiConfiguration ( config , existingConfig ) ; existingConfig.lastUpdateUid = uid ; existingConfig.lastUpdateName = mContext.getPackageManager ( ) . getNameForUid ( uid ) ; existingConfig.updateTime = com.android.server.wifi.WifiConfigManagerNew.createDebugTimeStampString ( mClock.getWallClockMillis ( ) ) ; return existingConfig ; }
public int dexopt ( java.lang.String apkPath , int uid , boolean isPublic , java.lang.String pkgName , java.lang.String instructionSet , int dexoptNeeded , boolean vmSafeMode , boolean debuggable , @ android.annotation.Nullable java.lang.String outputPath , boolean bootComplete ) { if ( ! ( com.android.server.pm.Installer.isValidInstructionSet ( instructionSet ) ) ) { android.util.Slog.e ( com.android.server.pm.Installer.TAG , ( "Invalid instruction set: " + instructionSet ) ) ; return - 1 ; } return mInstaller.dexopt ( apkPath , uid , isPublic , pkgName , instructionSet , dexoptNeeded , vmSafeMode , debuggable , outputPath , bootComplete ) ; }
public void writeTo ( com.google.protobuf.nano.CodedOutputByteBufferNano output ) throws java.io.IOException { int unknownFieldCount = ( ( unknownFieldData ) == null ) ? 0 : unknownFieldData.size ( ) ; for ( int i = 0 ; i < unknownFieldCount ; i ++ ) { com.google.protobuf.nano.UnknownFieldData unknownField = unknownFieldData.get ( i ) ; output.writeRawVarint32 ( unknownField.tag ) ; output.writeRawBytes ( unknownField.bytes ) ; } }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType == ( com.android.ide.common.api.InsertType.CREATE ) ) { com.android.ide.common.api.INode hint = node.appendChild ( com.android.ide.common.layout.FQCN_EDIT_TEXT ) ; hint.setAttribute ( com.android.ide.common.layout.ANDROID_URI , BaseView.ATTR_TEXT , "Hint" ) ; hint.setAttribute ( com.android.ide.common.layout.ANDROID_URI , com.android.ide.common.layout.ATTR_ID , "@android:id/hint" ) ; hint.setAttribute ( com.android.ide.common.layout.ANDROID_URI , com.android.ide.common.layout.ATTR_LAYOUT_WIDTH , com.android.ide.common.layout.VALUE_FILL_PARENT ) ; com.android.ide.common.api.INode primary = node.appendChild ( com.android.ide.common.layout.FQCN_EDIT_TEXT ) ; primary.setAttribute ( com.android.ide.common.layout.ANDROID_URI , BaseView.ATTR_TEXT , "Primary" ) ; primary.setAttribute ( com.android.ide.common.layout.ANDROID_URI , com.android.ide.common.layout.ATTR_ID , "@android:id/primary" ) ; primary.setAttribute ( com.android.ide.common.layout.ANDROID_URI , com.android.ide.common.layout.ATTR_LAYOUT_BELOW , "@android:id/hint" ) ; primary.setAttribute ( com.android.ide.common.layout.ANDROID_URI , com.android.ide.common.layout.ATTR_LAYOUT_WIDTH , com.android.ide.common.layout.VALUE_FILL_PARENT ) ; } }
void bindPaymentServiceLocked ( int userId , android.content.ComponentName service ) { unbindPaymentServiceLocked ( ) ; android.content.Intent intent = new android.content.Intent ( android.nfc.cardemulation.HostApduService.SERVICE_INTERFACE ) ; intent.setComponent ( service ) ; mLastBoundPaymentServiceName = service ; if ( ! ( mContext.bindServiceAsUser ( intent , mPaymentConnection , Context.BIND_AUTO_CREATE , new android.os.UserHandle ( userId ) ) ) ) { android.util.Log.e ( com.android.nfc.cardemulation.HostEmulationManager.TAG , "Could not bind (persistent) payment service." ) ; } }
private void rangeCheck ( int index ) { if ( ( index < 0 ) || ( index >= ( size ) ) ) throw new java.lang.IndexOutOfBoundsException ( java.util.concurrent.CopyOnWriteArrayList.outOfBounds ( index , size ) ) ; }
private android.os.Message obtainCompleteMessage ( int what ) { ( pendingOperations ) ++ ; lastRelevantPoll = null ; needsPoll = true ; if ( com.android.internal.telephony.gsm.GsmCallTracker.DBG_POLL ) log ( ( ( ( "obtainCompleteMessage: pendingOperations=" + ( pendingOperations ) ) + ", needsPoll=" ) + ( needsPoll ) ) ) ; return obtainMessage ( what ) ; }
public void onDialerCallSessionModificationStateChange ( ) { if ( ( mDialerCall.getVideoTech ( ) . getSessionModificationState ( ) ) == ( com.android.incallui.videotech.utils.SessionModificationState.NO_REQUEST ) ) { cleanup ( ) ; updateNotification ( com.android.incallui.call.CallList.getInstance ( ) ) ; } }
public static int sendto ( java.io.FileDescriptor fd , java.nio.ByteBuffer buffer , int flags , java.net.InetAddress inetAddress , int port ) throws java.io.IOException { boolean isDatagram = inetAddress != null ; if ( ( ! isDatagram ) && ( ( buffer.remaining ( ) ) == 0 ) ) { return 0 ; } int result ; try { result = Libcore.os.sendto ( fd , buffer , flags , inetAddress , port ) ; } catch ( libcore.io.ErrnoException errnoException ) { result = libcore.io.IoBridge.maybeThrowAfterSendto ( isDatagram , errnoException ) ; } return result ; }
public void sendSms ( int token , int messageRef , java.lang.String format , java.lang.String smsc , boolean isRetry , byte [ ] pdu ) throws com.android.ims.ImsException { try { mMmTelFeatureConnection.sendSms ( token , messageRef , format , smsc , isRetry , pdu ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "sendSms()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void testLauncherNonExportedAppFails ( ) throws java.lang.Exception { if ( ! ( mHasLauncherApps ) ) { return ; } installApp ( com.android.cts.devicepolicy.SIMPLE_APP_APK ) ; try { int serialNumber = getUserSerialNumber ( 0 ) ; assertTrue ( runDeviceTests ( com.android.cts.devicepolicy.LAUNCHER_TESTS_PKG , com.android.cts.devicepolicy.LAUNCHER_TESTS_CLASS , "testLaunchNonExportActivityFails" , 0 , ( "-e testUser " + serialNumber ) ) ) ; } finally { getDevice ( ) . uninstallPackage ( com.android.cts.devicepolicy.SIMPLE_APP_PKG ) ; } }
private java.io.File getListingOfDex ( @ javax.annotation.Nonnull java.io.File dex ) throws java.io.FileNotFoundException , java.io.IOException { assert dex.isFile ( ) ; com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile ( new java.lang.String [ ] { "bash" , "-c" , ( ( ( com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt ( "dexdump" ) . getAbsolutePath ( ) ) + " " ) + ( dex.getAbsolutePath ( ) ) ) + " | grep \" Class descriptor : \" | cut -d\\\' -f2 | sed -e \'s/$/:/\'" } ) ; java.io.File outList = com.android.jack.TestTools.createTempFile ( "types" , ".txt" ) ; exec.setOut ( outList ) ; junit.framework.Assert.assertTrue ( exec.run ( ) ) ; return outList ; }
public void testStartStopFlow ( ) throws java.lang.Exception { mInOrder = org.mockito.Mockito.inOrder ( mServiceManagerMock , mWifiMock , mManagerStatusCallbackMock ) ; executeAndValidateStartupSequence ( ) ; mDut.stop ( ) ; mTestLooper.dispatchAll ( ) ; mInOrder.verify ( mWifiMock ) . stop ( ) ; mInOrder.verify ( mManagerStatusCallbackMock ) . onStop ( ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mManagerStatusCallbackMock ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeParcelableArray ( mScanResults , flags ) ; dest.writeParcelable ( mCurrentSelectedConfig , flags ) ; dest.writeParcelable ( mRequiredCapabilities , flags ) ; }
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc , boolean itf ) { if ( opcode == ( org.objectweb.asm.Opcodes.INVOKESTATIC ) ) { annotations.CalledByIndy callsite = callsiteMap.get ( name ) ; if ( callsite != null ) { insertIndy ( callsite.name ( ) , desc , callsite ) ; return ; } } mv.visitMethodInsn ( opcode , owner , name , desc , itf ) ; }
public void reportStkServiceIsRunning ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_REPORT_STK_SERVICE_IS_RUNNING , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; send ( rr ) ; }
void addEntry ( int hash , K key , V value , int bucketIndex ) { if ( ( ( size ) >= ( threshold ) ) && ( null != ( table [ bucketIndex ] ) ) ) { resize ( ( 2 * ( table.length ) ) ) ; hash = ( null != key ) ? hash ( key ) : 0 ; bucketIndex = java.util.HashMap.indexFor ( hash , table.length ) ; } createEntry ( hash , key , value , bucketIndex ) ; }
public void testGetPath_NoAttributeSpecified ( ) { initializePsiClass ( "\"\"" , "\"\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.intellij.endpoints.validation.RestSignatureInspection inspection = new com.google.gct.intellij.endpoints.validation.RestSignatureInspection ( ) ; java.lang.String path = inspection.getPath ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "foo" , path ) ; }
public void testMethodDeclaredAnnotation ( ) throws java.lang.Exception { java.lang.Class < ? extends java.lang.annotation.Annotation > repeated = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Repeated.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodWithoutAnnotations ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationOddity ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationExplicitSingle ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotation ( ) , repeated , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodStaticSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodAbstractClass.getMethodAbstractSingleAnnotation ( ) , repeated , "@Repeated(1)" ) ; java.lang.Class < ? extends java.lang.annotation.Annotation > container = libcore.java.lang.reflect.annotations.AnnotatedElementTestSupport.Container.class ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodWithoutAnnotations ( ) , container , null ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationOddity ( ) , container , "@Container({@Repeated(2), @Repeated(3)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotationExplicitSingle ( ) , container , "@Container({@Repeated(1)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodMultipleAnnotation ( ) , container , "@Container({@Repeated(1), @Repeated(2)})" ) ; libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.checkParameter0DeclaredAnnotation ( libcore.java.lang.reflect.annotations.AnnotatedElementParameterTest.AnnotatedMethodClass.getMethodSingleAnnotation ( ) , container , null ) ; }
public void ctorDoesNotCrashEvenIfReleaseFileIsMissing ( ) throws java.lang.Exception { mTraceReleaseFile.delete ( ) ; new com.android.server.wifi.LastMileLogger ( mWifiInjector , mTraceDataFile.getPath ( ) , mTraceEnableFile.getPath ( ) , mTraceReleaseFile.getPath ( ) ) ; org.mockito.Mockito.verify ( mLog ) . warn ( org.mockito.Matchers.contains ( "Failed" ) ) ; }
int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( ( mInputDevices.get ( device ) ) == null ) { return android.bluetooth.BluetoothInputDevice.STATE_DISCONNECTED ; } return mInputDevices.get ( device ) ; }
public void testPerformanceSummaryAddedProfilingPoint ( ) throws java.io.FileNotFoundException , java.io.IOException { setUp ( false ) ; com.android.vts.util.PerformanceSummary today = dailySummaries.get ( 0 ) ; com.android.vts.util.ProfilingPointSummary summary = new com.android.vts.util.ProfilingPointSummary ( ) ; com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode mode = com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_INCREASING ; com.android.vts.entity.ProfilingPointRunEntity pt = com.android.vts.servlet.VtsPerformanceJobServletTest.createProfilingReport ( com.android.vts.servlet.VtsPerformanceJobServletTest.LABELS , com.android.vts.servlet.VtsPerformanceJobServletTest.HIGH_VALS , mode ) ; summary.update ( pt ) ; summary.update ( pt ) ; today.insertProfilingPointSummary ( "p3" , summary ) ; java.lang.String output = com.android.vts.servlet.VtsPerformanceJobServlet.getPeformanceSummary ( "test" , dailySummaries , legendLabels ) ; com.android.vts.servlet.VtsPerformanceJobServletTest.compareToBaseline ( output , "performanceSummary3.html" ) ; }
public void connectResponse ( int token , int sapConnectRsp , int maxMsgSize ) { android.util.Log.d ( com.android.bluetooth.sap.SapRilReceiver.TAG , ( ( ( ( ( "connectResponse: token " + token ) + " sapConnectRsp " ) + sapConnectRsp ) + " maxMsgSize " ) + maxMsgSize ) ) ; com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage ( SapMessage.ID_CONNECT_RESP ) ; sapMessage.setConnectionStatus ( sapConnectRsp ) ; if ( sapConnectRsp == ( SapMessage.CON_STATUS_ERROR_MAX_MSG_SIZE_UNSUPPORTED ) ) { sapMessage.setMaxMsgSize ( maxMsgSize ) ; } sapMessage.setResultCode ( SapMessage.INVALID_VALUE ) ; removeOngoingReqAndSendMessage ( token , sapMessage ) ; }
public void deleteSmsOnSim ( int index , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_DELETE_SMS_ON_SIM , response ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( index ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGV ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " " ) + index ) ) ; send ( rr ) ; }
private static boolean isAttributeValueLink ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.XmlContext context ) { org.w3c.dom.Attr attribute = context.getAttribute ( ) ; if ( attribute == null ) { return false ; } if ( ( ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isClassAttribute ( context ) ) || ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isOnClickAttribute ( context ) ) ) || ( com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isManifestName ( context ) ) ) { return true ; } java.lang.String value = attribute.getValue ( ) ; if ( value.startsWith ( "@+" ) ) { return false ; } com.android.util.Pair < com.android.resources.ResourceType , java.lang.String > resource = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.parseResource ( value ) ; if ( resource != null ) { com.android.resources.ResourceType type = resource.getFirst ( ) ; if ( type != null ) { return true ; } } return false ; }
java.util.List < java.lang.String > getSecondaryDexPathsFromProtectedDirs ( ) { java.util.List < java.lang.String > paths = new java.util.ArrayList < > ( ) ; paths.add ( ( ( mPackageInfo.applicationInfo.dataDir ) + "/secondary6.dex" ) ) ; paths.add ( ( ( mPackageInfo.applicationInfo.dataDir ) + "/secondary7.dex" ) ) ; return paths ; }
public void hangupWaitingOrBackground ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; mMetrics.writeRilHangup ( mInstanceId , rr.mSerial , ( - 1 ) ) ; send ( rr ) ; }
public boolean dumpProfiles ( int uid , java.lang.String packageName , java.lang.String codePaths ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return false ; try { return mInstalld.dumpProfiles ( uid , packageName , codePaths ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void test ( ) throws java.lang.Exception { mScopes = null ; assertEquals ( ( "AndroidManifest.xml:13: Error: Class referenced in the manifest, test.pkg.TestProvider, was not found in the project or the libraries [MissingRegistered]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( " <activity android:name=\".TestProvider\" />\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.TestProvider2, was not found in the project or the libraries [MissingRegistered]\n" ) + " <service android:name=\"test.pkg.TestProvider2\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:15: Error: Class referenced in the manifest, test.pkg.TestService, was not found in the project or the libraries [MissingRegistered]\n" ) + " <provider android:name=\".TestService\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:16: Error: Class referenced in the manifest, test.pkg.OnClickActivity, was not found in the project or the libraries [MissingRegistered]\n" ) + " <receiver android:name=\"OnClickActivity\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:17: Error: Class referenced in the manifest, test.pkg.TestReceiver, was not found in the project or the libraries [MissingRegistered]\n" ) + " <service android:name=\"TestReceiver\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "5 errors, 0 warnings\n" ) ) , lintProject ( "bytecode/AndroidManifestWrongRegs.xml=>AndroidManifest.xml" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" , "bytecode/.classpath=>.classpath" ) ) ; }
public com.google.common.collect.ImmutableList < java.lang.String > getEvaluatedExpansion ( java.lang.reflect.Field field , @ javax.annotation.Nullable java.lang.String unparsedValue ) throws com.google.devtools.common.options.OptionsParsingException { com.google.devtools.common.options.OptionsData.ExpansionData expansionData = expansionDataForFields.get ( field ) ; if ( expansionData == null ) { return com.google.devtools.common.options.OptionsData.EMPTY_EXPANSION ; } return expansionData.getExpansion ( new com.google.devtools.common.options.ExpansionContext ( this , field , unparsedValue ) ) ; }
java.io.InputStream openRead ( @ javax.annotation.Nonnull com.android.sched.vfs.ReadZipFS.ZipVFile file ) { try { return zipFile.getInputStream ( file.getZipEntry ( ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } }
public void disableService ( ) { if ( ! ( android.autofillservice.cts.Helper.hasAutofillFeature ( ) ) ) return ; if ( ! ( android.autofillservice.cts.AutoFillServiceTestCase.isServiceEnabled ( ) ) ) return ; final android.autofillservice.cts.OneTimeSettingsListener observer = new android.autofillservice.cts.OneTimeSettingsListener ( android.autofillservice.cts.AutoFillServiceTestCase.getContext ( ) , android.provider.Settings.Secure.AUTOFILL_SERVICE ) ; android.autofillservice.cts.Helper.runShellCommand ( "settings delete secure %s" , android.provider.Settings.Secure.AUTOFILL_SERVICE ) ; observer.assertCalled ( ) ; android.autofillservice.cts.AutoFillServiceTestCase.assertServiceDisabled ( ) ; android.autofillservice.cts.InstrumentedAutoFillService.setIgnoreUnexpectedRequests ( false ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( R.drawable.icon1 , "tick tick tick" , java.lang.System.currentTimeMillis ( ) ) ; n.setLatestEventInfo ( this , "Persistent #1" , "This is a notification!!!" , makeIntent ( ) ) ; mNM.notify ( 1 , n ) ; }
public boolean setNetworkSelectionModeManual ( int subId , com.android.internal.telephony.OperatorInfo operator , boolean persistSelection ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.setNetworkSelectionModeManual ( subId , operator , persistSelection ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual NPE" , ex ) ; } return false ; }
public java.util.Iterator < E > iterator ( ) { return new java.util.Iterator < E > ( ) { private final java.util.Iterator < ? extends E > i = c.iterator ( ) ; public boolean hasNext ( ) { return i.hasNext ( ) ; } public E next ( ) { return i.next ( ) ; } public void remove ( ) { throw new java.lang.UnsupportedOperationException ( ) ; } } ; }
private int getCallbackAction ( ) { com.android.dialer.common.Assert.checkState ( ( ! ( callDetailsEntries.isEmpty ( ) ) ) ) ; com.android.dialer.calldetails.CallDetailsEntries.CallDetailsEntry entry = callDetailsEntries.get ( 0 ) ; return com.android.dialer.calllogutils.CallbackActionHelper.getCallbackAction ( contact.getNumber ( ) , entry.getFeatures ( ) , entry.getIsLightbringerCall ( ) ) ; }
protected synchronized boolean cleanup ( ) { android.util.Log.i ( com.android.bluetooth.hfp.HeadsetService.TAG , "cleanup" ) ; if ( ! ( mCreated ) ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , "cleanup() called before create()" ) ; return true ; } mCreated = false ; return true ; }
public void computeScroll ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { computeScroll ( ) ; } } ) ; return ; } mAwContents.computeScroll ( ) ; }
public void validateCertCredentialWithoutClientPrivateKey ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential ( ) ; cred.certCredential.certType = "x509v3" ; cred.certCredential.certSha256FingerPrint = java.security.MessageDigest.getInstance ( "SHA-256" ) . digest ( FakeKeys.CLIENT_CERT.getEncoded ( ) ) ; cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0 ; cred.clientCertificateChain = new java.security.cert.X509Certificate [ ] { android.net.wifi.FakeKeys.CLIENT_CERT } ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
private boolean shouldStubAsDefaultMethod ( int access , java.lang.String name , java.lang.String desc ) { return ( com.google.devtools.build.android.desugar.BitFlags.noneSet ( access , ( ( ( ( org.objectweb.asm.Opcodes.ACC_ABSTRACT ) | ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) | ( org.objectweb.asm.Opcodes.ACC_BRIDGE ) ) | ( org.objectweb.asm.Opcodes.ACC_PRIVATE ) ) ) ) && ( ! ( instanceMethods.contains ( ( ( name + ":" ) + desc ) ) ) ) ; }
public void testCardLoaded ( ) { testPowerOn ( ) ; org.mockito.Mockito.when ( mUiccCard.getCardState ( ) ) . thenReturn ( CardState.CARDSTATE_PRESENT ) ; mIccCardProxyUT.sendMessage ( mIccCardProxyUT.obtainMessage ( com.android.internal.telephony.uicc.IccCardProxyTest.EVENT_ICC_CHANGED ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( com.android.internal.telephony.uicc.IccCardProxyTest.SCARY_SLEEP_MS ) ; org.junit.Assert.assertEquals ( mIccCardProxyUT.getState ( ) , State.NOT_READY ) ; }
public com.google.common.collect.ImmutableList < java.io.File > getTestedApks ( @ com.android.annotations.NonNull com.android.ide.common.process.ProcessExecutor processExecutor , @ com.android.annotations.Nullable java.io.File splitSelectExe , @ com.android.annotations.NonNull com.android.builder.testing.api.DeviceConfigProvider deviceConfigProvider ) throws com.android.ide.common.process.ProcessException { com.google.common.collect.ImmutableList.Builder < java.io.File > testedApks = com.google.common.collect.ImmutableList.builder ( ) ; testedApks.addAll ( testedConfiguration.getFiles ( ) ) ; return testedApks.build ( ) ; }
public static < I , O > com.google.common.util.concurrent.ListenableFuture < O > transform ( com.google.common.util.concurrent.ListenableFuture < I > input , final com.google.common.base.Function < ? super I , ? extends O > function ) { return com.google.common.util.concurrent.Futures.transform ( input , function , com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor ( ) ) ; }
private boolean isContactShareable ( ) { return ( ( mContactData ) != null ) && ( ! ( mContactData.isDirectoryEntry ( ) ) ) ; }
private int calculateContainerSize ( java.io.File apkFile , boolean forwardLocked ) throws java.io.IOException { com.android.internal.content.NativeLibraryHelper.ApkHandle handle = new com.android.internal.content.NativeLibraryHelper.ApkHandle ( apkFile ) ; final int abi = com.android.internal.content.NativeLibraryHelper.findSupportedAbi ( handle , Build.SUPPORTED_ABIS ) ; try { return calculateContainerSize ( handle , apkFile , abi , forwardLocked ) ; } finally { handle.close ( ) ; } }
public java.lang.Object [ ] getElements ( java.lang.Object inputElement ) { synchronized ( this ) { if ( ( ( mSelectedNode ) != null ) && ( inputElement instanceof com.android.hierarchyviewerlib.models.TreeViewModel ) ) { if ( ( mSelectedNode.viewNode.categories.size ( ) ) == 0 ) { return mSelectedNode.viewNode.properties.toArray ( new com.android.hierarchyviewerlib.device.ViewNode.Property [ mSelectedNode.viewNode.properties.size ( ) ] ) ; } else { return mSelectedNode.viewNode.categories.toArray ( new java.lang.String [ mSelectedNode.viewNode.categories.size ( ) ] ) ; } } return new java.lang.Object [ 0 ] ; } }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.gallery_2 ) ; android.database.Cursor c = getContentResolver ( ) . query ( People.CONTENT_URI , null , null , null , null ) ; startManagingCursor ( c ) ; android.widget.SpinnerAdapter adapter = new android.widget.SimpleCursorAdapter ( this , android.R.layout.simple_gallery_item , c , new java.lang.String [ ] { android.provider.Contacts.People.NAME } , new int [ ] { android.R.id.text1 } ) ; android.widget.Gallery g = ( ( android.widget.Gallery ) ( findViewById ( R.id.gallery ) ) ) ; g.setAdapter ( adapter ) ; }
public UResource.TableSink getOrCreateTableSink ( com.ibm.icu.impl.UResource.Key key ) { int setNum = com.ibm.icu.impl.DayPeriodRules.parseSetNum ( key.toString ( ) ) ; if ( setNum > ( data.maxRuleSetNum ) ) { data.maxRuleSetNum = setNum ; } return null ; }
public byte [ ] getOctetString ( ) throws java.io.IOException { if ( ( buffer.read ( ) ) != ( sun.security.util.DerValue.tag_OctetString ) ) throw new java.io.IOException ( "DER input not an octet string" ) ; int length = sun.security.util.DerInputStream.getLength ( buffer ) ; byte [ ] retval = new byte [ length ] ; if ( ( length != 0 ) && ( ( buffer.read ( retval ) ) != length ) ) throw new java.io.IOException ( "short read of DER octet string" ) ; return retval ; }
private int addDefaultRingtoneItem ( android.widget.ListView listView ) { return addStaticItem ( listView , com.android.internal.R.string.ringtone_default ) ; }
private void sendDisplayPinIntent ( byte [ ] address , int pin , int variant ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mRemoteDevices.getDevice ( address ) ) ; if ( pin != 0 ) { intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_KEY , pin ) ; } intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_VARIANT , variant ) ; intent.setFlags ( Intent.FLAG_RECEIVER_FOREGROUND ) ; intent.setFlags ( Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND ) ; mAdapterService.sendOrderedBroadcast ( intent , mAdapterService.BLUETOOTH_ADMIN_PERM ) ; }
public int getCdmaEriIconModeForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( canReadPhoneState ( callingPackage , "getCdmaEriIconModeForSubscriber" ) ) ) { return - 1 ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.getCdmaEriIconMode ( ) ; } else { return - 1 ; } }
public void startTimer ( java.lang.String timerEventName ) { }
private void replyHalfConnected ( int status ) { android.os.Message msg = mSrcHandler.obtainMessage ( com.android.internal.util.AsyncChannel.CMD_CHANNEL_HALF_CONNECTED ) ; msg.arg1 = status ; msg.obj = this ; msg.replyTo = mDstMessenger ; mSrcHandler.sendMessage ( msg ) ; }
protected void initializeScriptAndBuffers ( android.graphics.Bitmap inputImage , com.android.rs.test.LayerInfo focalLayer ) { scriptC = new com.android.rs.test.renderscript.ScriptC_layered_filter_fast_f32 ( renderScript ) ; com.android.rs.test.KernelDataForRenderScript.setUseNewRS ( false ) ; int margin = ( com.android.rs.test.KernelDataForRenderScript.getMaxKernelRadius ( ) ) + 1 ; buffers = new com.android.rs.test.f32.ImageBuffersForRenderScriptF32 ( inputImage , margin , renderScript , scriptC ) ; buffers.initializeRenderScript ( focalLayer , scriptC ) ; }
public boolean isLeapYear ( long prolepticYear ) { checkCalendarInit ( ) ; int epochMonth = yearToEpochMonth ( ( ( int ) ( prolepticYear ) ) ) ; if ( ( epochMonth < 0 ) || ( epochMonth > ( maxEpochDay ) ) ) { throw new java.time.DateTimeException ( "Hijrah date out of range" ) ; } int len = getYearLength ( ( ( int ) ( prolepticYear ) ) ) ; return len > 354 ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { if ( Intent.ACTION_SCREEN_ON.equals ( intent.getAction ( ) ) ) { mStartButton.setEnabled ( true ) ; } else if ( com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.ACTION_EXPEDITE_IDLE_MODE.equals ( intent.getAction ( ) ) ) { mStartButton.setEnabled ( false ) ; } else { android.util.Log.e ( com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.TAG , "Invalid broadcast received, was expecting SCREEN_ON" ) ; } }
public void testTimeoutFailure ( ) throws java.lang.Exception { mServer.clearServerReply ( ) ; assertFalse ( mClient.requestTime ( mServer.getAddress ( ) , mServer.getPort ( ) , 500 ) ) ; assertEquals ( 1 , mServer.numRequestsReceived ( ) ) ; assertEquals ( 0 , mServer.numRepliesSent ( ) ) ; }
public void test_bind_unresolvedAddress ( ) throws java.io.IOException { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open ( ) ; try { ssc.bind ( new java.net.InetSocketAddress ( "unresolvedname" , 31415 ) ) ; fail ( ) ; } catch ( java.nio.channels.UnresolvedAddressException expected ) { } assertNull ( ssc.getLocalAddress ( ) ) ; assertTrue ( ssc.isOpen ( ) ) ; ssc.close ( ) ; }
public void run ( ) { java.util.List < com.android.ddmuilib.logcat.LogCatMessage > selectedMessages = getSelectedLogCatMessages ( ) ; if ( ( selectedMessages.size ( ) ) == 0 ) { addNewFilter ( ) ; } else { com.android.ddmuilib.logcat.LogCatMessage m = selectedMessages.get ( 0 ) ; addNewFilter ( m.getTag ( ) , m.getMessage ( ) , m.getPid ( ) , m.getAppName ( ) , m.getLogLevel ( ) ) ; } }
public void connectionForDeprecatedGetRequest ( ) throws java.lang.Exception { com.android.volley.mock.TestRequest.DeprecatedGet request = new com.android.volley.mock.TestRequest.DeprecatedGet ( ) ; assertEquals ( request.getMethod ( ) , Method.DEPRECATED_GET_OR_POST ) ; com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest ( mMockConnection , request ) ; assertEquals ( "GET" , mMockConnection.getRequestMethod ( ) ) ; assertFalse ( mMockConnection.getDoOutput ( ) ) ; }
private boolean isPermissionEnforcedLocked ( java.lang.String permission ) { if ( android.Manifest.permission.READ_EXTERNAL_STORAGE.equals ( permission ) ) { if ( ( mSettings.mReadExternalStorageEnforced ) != null ) { return mSettings.mReadExternalStorageEnforced ; } else { return ( android.provider.Settings.Secure.getInt ( mContext.getContentResolver ( ) , Secure.READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT , 0 ) ) != 0 ; } } else { return true ; } }
public java.security.KeyPair generateKeyPair ( ) { if ( ( group ) == null ) { final java.lang.String curveName = org.conscrypt.OpenSSLECKeyPairGenerator.SIZE_TO_CURVE_NAME.get ( org.conscrypt.OpenSSLECKeyPairGenerator.DEFAULT_KEY_SIZE ) ; group = org.conscrypt.OpenSSLECGroupContext.getCurveByName ( curveName ) ; } final org.conscrypt.OpenSSLKey key = new org.conscrypt.OpenSSLKey ( org.conscrypt.NativeCrypto.EC_KEY_generate_key ( group.getContext ( ) ) ) ; return new java.security.KeyPair ( new org.conscrypt.OpenSSLECPublicKey ( group , key ) , new org.conscrypt.OpenSSLECPrivateKey ( group , key ) ) ; }
public void testLoadSample_1 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = getTestResource ( "/com/android/sdklib/testdata/addons_list_sample_1.xml" ) ; int version = mFetcher._getXmlSchemaVersion ( xmlStream ) ; assertEquals ( 1 , version ) ; java.lang.Boolean [ ] validatorFound = new java.lang.Boolean [ ] { java.lang.Boolean.FALSE } ; java.lang.String [ ] validationError = new java.lang.String [ ] { null } ; java.lang.String url = "not-a-valid-url://addons_list.xml" ; java.lang.String uri = mFetcher._validateXml ( xmlStream , url , version , validationError , validatorFound ) ; assertEquals ( java.lang.Boolean.TRUE , validatorFound [ 0 ] ) ; assertEquals ( null , validationError [ 0 ] ) ; assertEquals ( com.android.sdklib.repository.SdkAddonsListConstants.getSchemaUri ( 1 ) , uri ) ; com.android.sdklib.internal.repository.MockMonitor monitor = new com.android.sdklib.internal.repository.MockMonitor ( ) ; org.w3c.dom.Document doc = mFetcher._getDocument ( xmlStream , monitor ) ; assertNotNull ( doc ) ; com.android.sdklib.internal.repository.AddonsListFetcher.Site [ ] result = mFetcher._parseAddonsList ( doc , uri , monitor ) ; assertEquals ( "" , monitor.getCapturedDescriptions ( ) ) ; assertEquals ( "" , monitor.getCapturedResults ( ) ) ; assertEquals ( 3 , result.length ) ; assertEquals ( "My Example Add-ons." , result [ 0 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/my_addons.xml" , result [ 0 ] . getUrl ( ) ) ; assertEquals ( "ありがとうございます。" , result [ 1 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.co.jp/addons.xml" , result [ 1 ] . getUrl ( ) ) ; assertEquals ( "Example of directory URL." , result [ 2 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/" , result [ 2 ] . getUrl ( ) ) ; }
public static void assertDefaultCipherSuites ( java.lang.String [ ] cipherSuites ) { libcore.java.security.StandardNames.assertValidCipherSuites ( libcore.java.security.StandardNames.CIPHER_SUITES , cipherSuites ) ; assertEquals ( libcore.java.security.StandardNames.CIPHER_SUITES_DEFAULT , java.util.Arrays.asList ( cipherSuites ) ) ; }
private boolean isRoamIndForHomeSystem ( java.lang.String roamInd ) { java.lang.String [ ] homeRoamIndicators = mPhone.getContext ( ) . getResources ( ) . getStringArray ( com.android.internal.R.array.config_cdma_home_system ) ; if ( homeRoamIndicators != null ) { for ( java.lang.String homeRoamInd : homeRoamIndicators ) { if ( homeRoamInd.equals ( roamInd ) ) { return true ; } } return false ; } return false ; }
public void testSubList2_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.add ( "asdasd" ) ; c.subList ( 1 , 100 ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 0 ] ) ; java.lang.System.out.println ( "thread test starting" ) ; Main.testThreadCapacity ( ) ; Main.testThreadDaemons ( ) ; Main.testSleepZero ( ) ; Main.testSetName ( ) ; Main.testThreadPriorities ( ) ; java.lang.System.out.println ( "thread test done" ) ; }
public android.net.Uri getAdnUriForPhoneAccount ( android.telecom.PhoneAccountHandle accountHandle , java.lang.String callingPackage ) { try { com.android.server.telecom.Log.startSession ( "TSI.aAUFPA" ) ; synchronized ( mLock ) { enforcePermissionOrPrivilegedDialer ( android.Manifest.permission.MODIFY_PHONE_STATE , callingPackage ) ; if ( ! ( isPhoneAccountHandleVisibleToCallingUser ( accountHandle , android.os.Binder.getCallingUserHandle ( ) ) ) ) { com.android.server.telecom.Log.d ( this , "%s is not visible for the calling user [gA4PA]" , accountHandle ) ; return null ; } long token = android.os.Binder.clearCallingIdentity ( ) ; java.lang.String retval = "content://icc/adn/" ; try { long subId = mPhoneAccountRegistrar.getSubscriptionIdForPhoneAccount ( accountHandle ) ; retval = ( retval + "subId/" ) + subId ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } return android.net.Uri.parse ( retval ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
public void testHeadsetServiceDisconnect ( ) { receiverUnderTest.onReceive ( mContext , buildConnectionActionIntent ( BluetoothHeadset.STATE_CONNECTED , device1 ) ) ; receiverUnderTest.onReceive ( mContext , buildConnectionActionIntent ( BluetoothHeadset.STATE_CONNECTED , device2 ) ) ; serviceListenerUnderTest.onServiceDisconnected ( 0 ) ; org.mockito.Mockito.verify ( mRouteManager ) . onDeviceLost ( device1.getAddress ( ) ) ; org.mockito.Mockito.verify ( mRouteManager ) . onDeviceLost ( device2.getAddress ( ) ) ; assertNull ( mBluetoothDeviceManager.getHeadsetService ( ) ) ; assertEquals ( 0 , mBluetoothDeviceManager.getNumConnectedDevices ( ) ) ; }
public void drawLine ( int x1 , int y1 , int x2 , int y2 ) { checkGC ( ) ; x1 = mHScale.translate ( x1 ) ; y1 = mVScale.translate ( y1 ) ; x2 = mHScale.translate ( x2 ) ; y2 = mVScale.translate ( y2 ) ; getGc ( ) . drawLine ( x1 , y1 , x2 , y2 ) ; }
void handleGsmAuthRequest ( com.android.server.wifi.util.TelephonyUtil.SimAuthRequestData requestData ) { if ( ( ( targetWificonfiguration ) == null ) || ( ( targetWificonfiguration.networkId ) == ( requestData.networkId ) ) ) { logd ( "id matches targetWifiConfiguration" ) ; } else { logd ( "id does not match targetWifiConfiguration" ) ; return ; } java.lang.String response = com.android.server.wifi.util.TelephonyUtil.getGsmSimAuthResponse ( requestData.data , getTelephonyManager ( ) ) ; if ( response == null ) { mWifiNative.simAuthFailedResponse ( requestData.networkId ) ; } else { logv ( ( "Supplicant Response -" + response ) ) ; mWifiNative.simAuthResponse ( requestData.networkId , "GSM-AUTH" , response ) ; } }
public static boolean getEnhancedBlockSetting ( android.content.Context context , java.lang.String key ) { android.os.Bundle extras = new android.os.Bundle ( ) ; extras.putString ( android.provider.BlockedNumberContract.EXTRA_ENHANCED_SETTING_KEY , key ) ; final android.os.Bundle res = context.getContentResolver ( ) . call ( android.provider.BlockedNumberContract.AUTHORITY_URI , android.provider.BlockedNumberContract.SystemContract.METHOD_GET_ENHANCED_BLOCK_SETTING , null , extras ) ; return ( res != null ) && ( res.getBoolean ( android.provider.BlockedNumberContract.RES_ENHANCED_SETTING_IS_ENABLED , false ) ) ; }
public void testNoDpi2 ( ) throws java.lang.Exception { mEnabled = com.android.tools.lint.checks.IconDetectorTest.ALL ; assertEquals ( ( "res/drawable-xhdpi/frame.png: Warning: The image frame.png varies significantly in its density-independent (dip) size across the various density versions: drawable-ldpi/frame.png: 629x387 dp (472x290 px), drawable-mdpi/frame.png: 472x290 dp (472x290 px), drawable-hdpi/frame.png: 315x193 dp (472x290 px), drawable-xhdpi/frame.png: 236x145 dp (472x290 px) [IconDipSize]\n" + ( ( ( ( ( ( ( ( ( ( ( " res/drawable-hdpi/frame.png: <No location-specific message\n" + " res/drawable-mdpi/frame.png: <No location-specific message\n" ) + " res/drawable-ldpi/frame.png: <No location-specific message\n" ) + "res/drawable-xxhdpi/frame.png: Warning: The following unrelated icon files have identical contents: frame.png, frame.png, frame.png, file1.png, file2.png, frame.png, frame.png [IconDuplicates]\n" ) + " res/drawable-xhdpi/frame.png: <No location-specific message\n" ) + " res/drawable-nodpi/file2.png: <No location-specific message\n" ) + " res/drawable-nodpi/file1.png: <No location-specific message\n" ) + " res/drawable-mdpi/frame.png: <No location-specific message\n" ) + " res/drawable-ldpi/frame.png: <No location-specific message\n" ) + " res/drawable-hdpi/frame.png: <No location-specific message\n" ) + "0 errors, 2 warnings\n" ) + "" ) ) , lintProject ( "res/drawable-mdpi/frame.png=>res/drawable-mdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-hdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-ldpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-xhdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-xxhdpi/frame.png" , "res/drawable-mdpi/frame.png=>res/drawable-nodpi/file1.png" , "res/drawable-mdpi/frame.png=>res/drawable-nodpi/file2.png" ) ) ; }
private void deleteTestFiles ( @ javax.annotation.Nonnegative com.android.ddmlib.IDevice device , @ javax.annotation.Nonnull java.io.File testDir ) throws com.android.jack.test.runner.RuntimeRunnerException { java.lang.String testDirName = testDir.getName ( ) ; try { executeShellCommand ( ( "rm -rf " + ( testDir.getAbsolutePath ( ) ) ) , device ) ; executeShellCommand ( ( ( "find dalvik-cache -name '*" + testDirName ) + "*' -exec rm -rf {} +" ) , device ) ; } catch ( com.android.ddmlib.TimeoutException | com.android.ddmlib.AdbCommandRejectedException | com.android.ddmlib.ShellCommandUnresponsiveException | java.io.IOException e ) { throw new com.android.jack.test.runner.RuntimeRunnerException ( e ) ; } }
private static java.util.List < java.lang.Object > getTestsAndSuites ( junit.framework.TestSuite suite ) { try { return suite.getTestsAndSuites ( ) ; } catch ( java.lang.NoSuchMethodError e ) { if ( ! ( e.getMessage ( ) . contains ( "getTestsAndSuites()Ljava/util/List;" ) ) ) { throw e ; } java.util.Enumeration < ? > enumeration = suite.tests ( ) ; java.util.List < java.lang.Object > tests = new java.util.ArrayList < java.lang.Object > ( ) ; while ( enumeration.hasMoreElements ( ) ) { tests.add ( enumeration.nextElement ( ) ) ; } return tests ; } }
public void testSet1_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.set ( ( - 1 ) , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
private com.android.jack.optimizations.lambdas.LambdaTests.Class impl ( @ javax.annotation.Nonnull java.lang.String [ ] names , @ javax.annotation.Nonnull java.lang.String str ) { if ( ( names.length ) > 0 ) { builder.append ( str ) ; java.util.Arrays.sort ( names ) ; for ( java.lang.String n : names ) { builder.append ( " " ) . append ( n ) . append ( "\n" ) ; } } return this ; }
void regularScanTimeout ( ) { for ( com.android.bluetooth.gatt.ScanClient client : mRegularScanClients ) { if ( ! ( isExemptFromScanDowngrade ( client ) ) ) { android.util.Log.w ( com.android.bluetooth.gatt.ScanManager.TAG , ( ( "Moving scan client to opportunistic (scannerId " + ( client.scannerId ) ) + ")" ) ) ; setOpportunisticScanClient ( client ) ; client.stats.setScanTimeout ( ) ; } } configureRegularScanParams ( ) ; if ( ( numRegularScanClients ( ) ) == 0 ) { logd ( "stop scan" ) ; gattClientScanNative ( false ) ; } }
private boolean scanWithParams ( java.lang.String freqList , java.lang.String hiddenNetworkSSIDList ) { java.lang.StringBuilder scanCommand = new java.lang.StringBuilder ( ) ; scanCommand.append ( "SCAN TYPE=ONLY" ) ; if ( freqList != null ) { scanCommand.append ( ( " freq=" + freqList ) ) ; } if ( hiddenNetworkSSIDList != null ) { scanCommand.append ( ( " ssid " + hiddenNetworkSSIDList ) ) ; } return doBooleanCommand ( scanCommand.toString ( ) ) ; }
private void updateScreenState ( ) { final int oldState = mRadioScreenState ; mRadioScreenState = ( ( ( mDefaultDisplayState ) == ( android.view.Display.STATE_ON ) ) || ( mIsDevicePlugged ) ) ? com.android.internal.telephony.RIL.RADIO_SCREEN_ON : com.android.internal.telephony.RIL.RADIO_SCREEN_OFF ; if ( ( mRadioScreenState ) != oldState ) { if ( com.android.internal.telephony.RIL.RILJ_LOGV ) { riljLog ( ( ( ( "defaultDisplayState: " + ( mDefaultDisplayState ) ) + ", isDevicePlugged: " ) + ( mIsDevicePlugged ) ) ) ; } sendScreenState ( ( ( mRadioScreenState ) == ( com.android.internal.telephony.RIL.RADIO_SCREEN_ON ) ) ) ; } }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public static java.lang.String stringAddrFromLongAddr ( long addr ) { addr = ( java.lang.Long.reverseBytes ( addr ) ) > > 16 ; java.util.StringJoiner j = new java.util.StringJoiner ( ":" ) ; for ( int i = 0 ; i < ( android.net.MacAddress.ETHER_ADDR_LEN ) ; i ++ ) { j.add ( java.lang.Integer.toHexString ( ( ( byte ) ( addr ) ) ) ) ; addr = addr > > 8 ; } return j.toString ( ) ; }
public void onCapabilities ( com.android.bips.jni.LocalPrinterCapabilities capabilities ) { if ( ( mSession.isDestroyed ( ) ) || ( ! ( mSession.isKnown ( mPrinterId ) ) ) ) return ; if ( capabilities == null ) { if ( com.android.bips.LocalPrinter.DEBUG ) android.util.Log.d ( com.android.bips.LocalPrinter.TAG , ( "No capabilities so removing printer " + ( this ) ) ) ; mSession.removePrinters ( java.util.Collections.singletonList ( mPrinterId ) ) ; } else { mCapabilities = capabilities ; mSession.handlePrinter ( this ) ; } }
public void onReliableWriteCompleted ( android.bluetooth.BluetoothGatt gatt , int status ) { if ( com.android.cts.verifier.bluetooth.BleClientService.DEBUG ) android.util.Log.d ( com.android.cts.verifier.bluetooth.BleClientService.TAG , ( "onReliableWriteComplete: " + status ) ) ; if ( status == ( android.bluetooth.BluetoothGatt.GATT_SUCCESS ) ) { notifyReliableWriteCompleted ( ) ; } else { notifyError ( ( "Failed to complete reliable write: " + status ) ) ; } sleep ( 1000 ) ; mBluetoothGatt.disconnect ( ) ; }
public void runCmdLine ( java.lang.String [ ] command ) throws java.io.IOException , java.lang.InterruptedException { java.lang.Process process = java.lang.Runtime.getRuntime ( ) . exec ( command ) ; if ( ( grabProcessOutput ( process ) ) != 0 ) { throw new java.lang.RuntimeException ( ) ; } }
public com.android.jack.api.v01.Api01Compiler build ( ) throws com.android.jack.api.v01.ConfigurationException { com.android.sched.util.RunnableHooks configHooks = new com.android.sched.util.RunnableHooks ( ) ; try { com.android.jack.Jack.check ( options , configHooks ) ; } catch ( com.android.jack.api.v01.impl.com.android.sched e ) { throw new com.android.jack.api.v01.ConfigurationException ( e.getMessage ( ) , e ) ; } catch ( com.android.jack.IllegalOptionsException e ) { throw new com.android.jack.api.v01.ConfigurationException ( e.getMessage ( ) , e ) ; } return new com.android.jack.api.v01.impl.Api01ConfigImpl.Api01CompilerImpl ( options ) ; }
public java.lang.String getOriginalMimeType ( java.lang.String path ) { if ( ( null == path ) || ( path.equals ( "" ) ) ) { throw new java.lang.IllegalArgumentException ( "Given path should be non null" ) ; } else if ( ( getState ( ) ) == ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _getOriginalMimeType ( mUniqueId , path ) ; }
private void assertDeleted ( java.security.cert.X509Certificate x , java.lang.String alias ) { assertNull ( store.getCertificate ( alias ) ) ; assertFalse ( store.containsAlias ( alias ) ) ; assertNull ( store.getCertificateAlias ( x ) ) ; assertFalse ( store.isTrustAnchor ( x ) ) ; assertEquals ( store.allSystemAliases ( ) . contains ( alias ) , ( ( store.getCertificate ( alias , true ) ) != null ) ) ; }
public void TestQuotingLikeMessageFormat ( ) { java.lang.String pattern = "{0} don't can''t '{5}''}{a' again '}'{1} to the '{end" ; com.ibm.icu.impl.SimplePatternFormatter spf = com.ibm.icu.impl.SimplePatternFormatter.compile ( pattern ) ; com.ibm.icu.text.MessageFormat mf = new com.ibm.icu.text.MessageFormat ( pattern , com.ibm.icu.util.ULocale.ROOT ) ; java.lang.String expected = "X don't can't {5}'}{a again }Y to the {end" ; assertEquals ( "MessageFormat" , expected , mf.format ( new java.lang.Object [ ] { "X" , "Y" } ) ) ; assertEquals ( "SimplePatternFormatter" , expected , spf.format ( "X" , "Y" ) ) ; }
private void onGetReport ( byte [ ] address , byte [ ] report , int rptSize ) { if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , "onGetReport()" ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_ON_GET_REPORT ) ; msg.obj = address ; android.os.Bundle data = new android.os.Bundle ( ) ; data.putByteArray ( BluetoothInputDevice.EXTRA_REPORT , report ) ; data.putInt ( BluetoothInputDevice.EXTRA_REPORT_BUFFER_SIZE , rptSize ) ; msg.setData ( data ) ; mHandler.sendMessage ( msg ) ; }
public static java.util.List < org.jetbrains.plugins.github.api.GithubRepo > getAvailableRepos ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.api.GithubAuthData auth ) throws java.io.IOException { return org.jetbrains.plugins.github.api.GithubApiUtil.doGetAvailableRepos ( auth , null ) ; }
private static java.lang.String computeVersionLessCoordinateKey ( @ com.android.annotations.NonNull com.android.builder.model.MavenCoordinates coord ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( coord.getGroupId ( ) ) ; sb.append ( ':' ) . append ( coord.getArtifactId ( ) ) ; if ( ( coord.getClassifier ( ) ) != null ) { sb.append ( ':' ) . append ( coord.getClassifier ( ) ) ; } return sb.toString ( ) ; }
public void out ( @ com.android.annotations.Nullable java.lang.String line ) { if ( line != null ) { mLogger.verbose ( line ) ; if ( line.equalsIgnoreCase ( "Done" ) ) { mOwner.reset ( ) ; mJob.finished ( ) ; } else if ( line.equalsIgnoreCase ( "Error" ) ) { mOwner.reset ( ) ; mJob.error ( ) ; } } }
public static void expectDivisionByZero ( long value ) { try { Main.$opt$Div ( value , 0L ) ; throw new java.lang.Error ( "Expected RuntimeException when dividing by 0" ) ; } catch ( java.lang.RuntimeException e ) { } try { Main.$opt$DivZero ( value ) ; throw new java.lang.Error ( "Expected RuntimeException when dividing by 0" ) ; } catch ( java.lang.RuntimeException e ) { } }
private static boolean isIdent ( java.lang.String token ) { return com.android.tools.metalava.doclava1.ApiFile.isident ( token.charAt ( 0 ) ) ; }
public int compareTo ( com.android.sdklib.ISystemImage other ) { return this . getAbiType ( ) . compareToIgnoreCase ( other.getAbiType ( ) ) ; }
final void constructorPutAll ( java.util.Map < ? extends K , ? extends V > map ) { for ( java.util.Map.Entry < ? extends K , ? extends V > e : map.entrySet ( ) ) { constructorPut ( e.getKey ( ) , e.getValue ( ) ) ; } }
public void socketpair ( int domain , int type , int protocol , java.io.FileDescriptor fd1 , java.io.FileDescriptor fd2 ) throws android.system.ErrnoException { os.socketpair ( domain , type , protocol , fd1 , fd2 ) ; tagSocket ( fd1 ) ; tagSocket ( fd2 ) ; }
private static < T > com.android.build.gradle.tasks.Set < T > removeAllNullEntries ( com.android.build.gradle.tasks.Set < T > input ) { com.android.build.gradle.tasks.HashSet < T > output = new com.android.build.gradle.tasks.HashSet < T > ( ) ; for ( T element : input ) { if ( element != null ) { output.add ( element ) ; } } return output ; }
public static com.android.internal.telephony.dataconnection.DataCallResponse createDataCallResponse ( ) { return new com.android.internal.telephony.dataconnection.DataCallResponse ( 0 , ( - 1 ) , 1 , 2 , "IP" , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_ADDRESS , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS , 1440 ) ; }
protected void verifyResources ( com.android.builder.resources.ResourceSet resourceSet , java.lang.String ... resourceKeys ) { java.util.Map < java.lang.String , com.android.builder.resources.Resource > map = resourceSet.getResourceMap ( ) ; for ( java.lang.String res : resourceKeys ) { assertNotNull ( ( ( "resource '" + res ) + "' is missing!" ) , map.get ( res ) ) ; } }
private void updateDialAndDeleteButtonStateEnabledAttr ( ) { final boolean notEmpty = ( mDigits.length ( ) ) != 0 ; mDelete.setEnabled ( notEmpty ) ; }
public boolean remove ( java.lang.Object o ) { java.lang.Object [ ] snapshot = getArray ( ) ; int index = java.util.concurrent.CopyOnWriteArrayList.indexOf ( o , snapshot , 0 , snapshot.length ) ; return index < 0 ? false : remove ( o , snapshot , index ) ; }
public void testNoMerging ( ) throws java.lang.Exception { java.io.File master = getProjectDir ( "MasterProject" , "multiproject/main-manifest.xml=>AndroidManifest.xml" , "multiproject/main.properties=>project.properties" , "multiproject/MainCode.java.txt=>src/foo/main/MainCode.java" ) ; java.io.File library = getProjectDir ( "LibraryProject" , "multiproject/library-manifest.xml=>AndroidManifest.xml" , "multiproject/library.properties=>project.properties" , "multiproject/LibraryCode.java.txt=>src/foo/library/LibraryCode.java" , "multiproject/strings.xml=>res/values/strings.xml" ) ; assertEquals ( ( "/TESTROOT/UnusedResourceDetectorTest_testNoMerging/LibraryProject/res/values/strings.xml:7: Warning: The resource R.string.string3 appears to be unused [UnusedResources]\n" + ( ( " <string name=\"string3\">String 3</string>\n" + " ~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , checkLint ( java.util.Arrays.asList ( master , library ) ) ) ; }
public boolean requestIcon ( java.lang.String bssid , java.lang.String fileName ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.initiateHs20IconQuery ( bssid , fileName ) ; } else { java.lang.String result = doStringCommand ( ( ( ( "REQ_HS20_ICON " + bssid ) + " " ) + fileName ) ) ; return ( result != null ) && ( result.startsWith ( "OK" ) ) ; } }
private android.database.Cursor getSingleMessageFromSim ( java.lang.String messageIndexString ) { try { int messageIndex = java.lang.Integer.parseInt ( messageIndexString ) ; android.telephony.gsm.SmsManager smsManager = android.telephony.gsm.SmsManager.getDefault ( ) ; java.util.ArrayList < android.telephony.gsm.SmsMessage > messages = smsManager.getAllMessagesFromSim ( ) ; java.util.ArrayList < java.util.ArrayList > singleRow = new java.util.ArrayList < java.util.ArrayList > ( ) ; singleRow.add ( convertSimToSms ( messages.get ( messageIndex ) ) ) ; return withSimNotificationUri ( new com.android.internal.database.ArrayListCursor ( com.android.providers.telephony.SmsProvider.SIM_COLUMNS , singleRow ) ) ; } catch ( java.lang.NumberFormatException exception ) { throw new java.lang.IllegalArgumentException ( ( "Bad SMS SIM ID: " + messageIndexString ) ) ; } }
public boolean isVideoTelephonyAvailable ( ) { try { return getITelephony ( ) . isVideoTelephonyAvailable ( ) ; } catch ( android.os.RemoteException ex ) { return false ; } catch ( java.lang.NullPointerException ex ) { return false ; } }
public static int EqualFalseLhs ( boolean arg ) { return false != arg ? 3 : 5 ; }
public void pcoData ( int indicationType , android.hardware.radio.V1_0.PcoDataInfo var2 ) { }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( "res/layout/include_params.xml:43: Error: Layout parameter layout_margin ignored unless both layout_width and layout_height are also specified on <include> tag [IncludeLayoutParam]\n" + " android:layout_margin=\"20dp\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:44: Error: Layout parameter layout_weight ignored unless both layout_width and layout_height are also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_weight=\"1.5\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:51: Error: Layout parameter layout_weight ignored unless layout_width is also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_weight=\"1.5\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/include_params.xml:58: Error: Layout parameter layout_weight ignored unless layout_height is also specified on <include> tag [IncludeLayoutParam]\n" ) + " android:layout_weight=\"1.5\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "4 errors, 0 warnings\n" ) ) , lintProject ( "res/layout/include_params.xml" ) ) ; }
public void syncEnded ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.project.Project project ) { com.intellij.openapi.application.ApplicationManager.getApplication ( ) . runWriteAction ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.intellij.openapi.module.Module module = com.intellij.openapi.module.ModuleManager.getInstance ( project ) . findModuleByName ( moduleName ) ; com.google.gct.idea.appengine.wizard.Parameter appEngineVersionParam = template.getMetadata ( ) . getParameter ( "appEngineVersion" ) ; java.lang.String appEngineVersion = ( appEngineVersionParam == null ) ? "unknown" : appEngineVersionParam.initial ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.createRunConfiguration ( project , module , moduleRoot , appEngineVersion ) ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.addAppEngineGradleFacet ( ) ; } } ) ; }
protected void visitType ( int type , int index ) { if ( dex.typeNames ( ) . get ( index ) . equals ( Type.VOID.getDescriptor ( ) ) ) { constantValue = com.android.jack.dx.rop.cst.CstType.intern ( Type.VOID ) ; } else { constantValue = getCstTypeFromTypeIndex ( dex , index ) ; } }
private void onCodecConfigChanged ( android.bluetooth.BluetoothCodecConfig newCodecConfig , android.bluetooth.BluetoothCodecConfig [ ] codecsLocalCapabilities , android.bluetooth.BluetoothCodecConfig [ ] codecsSelectableCapabilities ) { if ( com.android.bluetooth.a2dp.A2dpNativeInterface.DBG ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpNativeInterface.TAG , ( "onCodecConfigChanged: " + newCodecConfig ) ) ; } com.android.bluetooth.a2dp.A2dpService service = com.android.bluetooth.a2dp.A2dpService.getA2dpService ( ) ; if ( service != null ) { service.onCodecConfigChangedFromNative ( newCodecConfig , codecsLocalCapabilities , codecsSelectableCapabilities ) ; } else { android.util.Log.w ( com.android.bluetooth.a2dp.A2dpNativeInterface.TAG , "onCodecConfigChanged ignored: service not available" ) ; } }
protected void onProgressUpdate ( java.lang.Integer ... progress ) { progressDialog.setMessage ( ( ( ( "load " + ( progress [ 0 ] ) ) + "/" ) + ( progress [ 1 ] ) ) ) ; progressDialog.setMax ( progress [ 1 ] ) ; progressDialog.setProgress ( progress [ 0 ] ) ; android.util.Log.v ( com.example.android.rs.vr.VrActivity.LOGTAG , ( ( ( "Loading " + ( progress [ 0 ] ) ) + "/" ) + ( progress [ 1 ] ) ) ) ; }
public static com.intellij.execution.ui.ConsoleView createAndAttachConsole ( @ org.jetbrains.annotations.NotNull final java.lang.String testFrameworkName , @ org.jetbrains.annotations.NotNull final com.intellij.execution.process.ProcessHandler processHandler , @ org.jetbrains.annotations.NotNull final com.intellij.execution.configurations.CommandLineState commandLineState , @ org.jetbrains.annotations.NotNull final com.intellij.execution.configurations.ModuleRunConfiguration config , @ org.jetbrains.annotations.NotNull final com.intellij.execution.Executor executor ) throws com.intellij.execution.ExecutionException { final com.intellij.execution.testframework.TestConsoleProperties consoleProperties = new com.intellij.execution.testframework.sm.runner.SMTRunnerConsoleProperties ( config , testFrameworkName , executor ) ; return com.google.gct.testing.results.GoogleCloudTestResultsConnectionUtil.createAndAttachConsole ( testFrameworkName , processHandler , consoleProperties , commandLineState.getEnvironment ( ) ) ; }
public boolean checkAndSet ( java.lang.String value , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config ) { com.android.resources.KeyboardState orientation = com.android.resources.KeyboardState.getEnum ( value ) ; if ( orientation != null ) { com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier qualifier = new com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier ( ) ; qualifier.mValue = orientation ; config.setKeyboardStateQualifier ( qualifier ) ; return true ; } return false ; }
private void freeLoadedPrograms ( ) { java.util.Collection < com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > > programs = getInstalledJacks ( ) ; for ( com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > program : programs ) { synchronized ( program ) { program.setLoadedProgram ( null ) ; } } java.lang.System.gc ( ) ; }
public static com.android.jack.ir.ast.JSession buildJAst ( @ javax.annotation.Nonnull com.android.jack.Options options ) throws java.lang.Exception { com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks ( ) ; try { options.checkValidity ( hooks ) ; com.android.sched.util.config.ThreadConfig.setConfig ( options.getConfig ( ) ) ; com.android.jack.ir.ast.JSession session = com.android.jack.Jack.buildSession ( options , hooks ) ; return session ; } finally { hooks.runHooks ( ) ; } }
public boolean sameItemAs ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.SystemImagePackage ) { com.android.sdklib.internal.repository.packages.SystemImagePackage newPkg = ( ( com.android.sdklib.internal.repository.packages.SystemImagePackage ) ( pkg ) ) ; return ( getAbi ( ) . equals ( newPkg.getAbi ( ) ) ) && ( getAndroidVersion ( ) . equals ( newPkg.getAndroidVersion ( ) ) ) ; } return false ; }
public void onReceivedClientCertRequest ( org.chromium.android_webview.AwContentsClientBridge.ClientCertificateRequestCallback callback , java.lang.String [ ] keyTypes , java.security.Principal [ ] principals , java.lang.String host , int port ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onReceivedClientCertRequest" ) ; org.chromium.base.TraceEvent.begin ( ) ; final com.android.webview.chromium.WebViewContentsClientAdapter.ClientCertRequestImpl request = new com.android.webview.chromium.WebViewContentsClientAdapter.ClientCertRequestImpl ( callback , keyTypes , principals , host , port ) ; mWebViewClient.onReceivedClientCertRequest ( mWebView , request ) ; org.chromium.base.TraceEvent.end ( ) ; }
private void handleReleasedFocus ( com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus connectionServiceFocus ) { if ( java.util.Objects.equals ( mCurrentFocus , connectionServiceFocus ) ) { mEventHandler.removeMessages ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_RELEASE_FOCUS_TIMEOUT , mCurrentFocusRequest ) ; com.android.server.telecom.ConnectionServiceFocusManager.ConnectionServiceFocus newCSF = null ; if ( ( mCurrentFocusRequest ) != null ) { newCSF = mCurrentFocusRequest.call.getConnectionServiceWrapper ( ) ; } updateConnectionServiceFocus ( newCSF ) ; updateCurrentFocusCall ( ) ; if ( ( mCurrentFocusRequest ) != null ) { onRequestFocusDone ( mCurrentFocusRequest ) ; mCurrentFocusRequest = null ; } } }
public void testPreloadDensity ( ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final android.content.res.Resources res = getContext ( ) . getResources ( ) ; final int densityDpi = res.getConfiguration ( ) . densityDpi ; try { testPreloadDensityInner ( res , densityDpi ) ; } finally { android.graphics.drawable.cts.DrawableTestUtils.setResourcesDensity ( res , densityDpi ) ; } }
public void test_zh_TW ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex.ImmutableIndex zh_TW = libcore.icu.AlphabeticIndexTest.createIndex ( new java.util.Locale ( "zh" , "TW" ) ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_TW , "沈" , "7劃" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_TW , "瀋" , "18劃" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_TW , "贾" , "10劃" ) ; }
public void accept ( int result ) { if ( result == ( android.app.Activity.RESULT_OK ) ) { status = PASS ; next ( ) ; } else { logFail ( ) ; status = RETEST ; delay ( ) ; } }
private static void addTimeUnit ( com.ibm.icu.impl.ICUResourceBundle pastOrFuture , com.ibm.icu.text.QuantityFormatter.Builder builder ) { int size = pastOrFuture.getSize ( ) ; for ( int i = 0 ; i < size ; i ++ ) { com.ibm.icu.util.UResourceBundle r = pastOrFuture.get ( i ) ; builder.add ( r.getKey ( ) , r.getString ( ) ) ; } }
public java.lang.String getDisplayName ( java.util.Locale locale ) { java.util.Objects.requireNonNull ( locale , "locale" ) ; sun.util.locale.provider.LocaleResources lr = sun.util.locale.provider.LocaleProviderAdapter.getResourceBundleBased ( ) . getLocaleResources ( locale ) ; java.util.ResourceBundle rb = lr.getJavaTimeFormatData ( ) ; return rb.containsKey ( "field.week" ) ? rb.getString ( "field.week" ) : toString ( ) ; }
public static void copy ( com.google.common.io.InputSupplier < ? extends java.io.InputStream > from , java.io.File to ) throws java.io.IOException { com.google.common.io.ByteStreams.copy ( from , com.google.common.io.Files.newOutputStreamSupplier ( to ) ) ; }
public void testIsFocusable ( ) { android.view.View focusable = new android.view.View ( context ) ; focusable.setFocusable ( true ) ; android.view.View notFocusable = new android.view.View ( context ) ; notFocusable.setFocusable ( false ) ; assertTrue ( android.support.test.espresso.matcher.ViewMatchers.isFocusable ( ) . matches ( focusable ) ) ; assertFalse ( android.support.test.espresso.matcher.ViewMatchers.isFocusable ( ) . matches ( notFocusable ) ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/AddJavascriptInterfaceTest.java:16: Warning: WebView.addJavascriptInterface should not be called [AddJavascriptInterface]\n" + ( ( ( ( ( " webView.addJavascriptInterface(object, string);\n" + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/AddJavascriptInterfaceTest.java:23: Warning: WebView.addJavascriptInterface should not be called [AddJavascriptInterface]\n" ) + " webView.addJavascriptInterface(object, string);\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/AddJavascriptInterfaceTest.java.txt=>src/test/pkg/AddJavascriptInterfaceTest.java" , "bytecode/AddJavascriptInterfaceTest.class.data=>bin/classes/test/pkg/AddJavascriptInterfaceTest.class" , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class" ) , ( "bytecode/AddJavascriptInterfaceTest$WebViewChild.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$WebViewChild.class" ) , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebViewChild.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebViewChild.class" ) , ( "bytecode/AddJavascriptInterfaceTest$NonWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$NonWebView.class" ) , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnNonWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnNonWebView.class" ) ) ) ; }
protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { final java.security.spec.AlgorithmParameterSpec spec ; if ( params != null ) { try { spec = params.getParameterSpec ( javax.crypto.spec.IvParameterSpec.class ) ; } catch ( java.security.spec.InvalidParameterSpecException e ) { throw new java.security.InvalidAlgorithmParameterException ( e ) ; } } else { spec = null ; } engineInit ( opmode , key , spec , random ) ; }
private synchronized void onApplicationStateChanged ( byte [ ] address , boolean registered ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onApplicationStateChanged(): registered=" + registered ) ) ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_APPLICATION_STATE_CHANGED ) ; msg.obj = address ; msg.arg1 = ( registered ) ? 1 : 0 ; mHandler.sendMessage ( msg ) ; }
public long getFieldID ( long classID , java.lang.String fieldName ) { org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = getFieldsInClass ( classID ) ; return getFieldID ( reply , fieldName ) ; }
private void addToBuffer ( int offset , android.renderscript.Matrix4f m ) { mIOBuffer.reset ( offset ) ; for ( int i = 0 ; i < 16 ; i ++ ) { mIOBuffer.addF32 ( m.mMat [ i ] ) ; } mAlloc.setFromFieldPacker ( 0 , mIOBuffer ) ; }
public void testRefactor1 ( ) throws java.lang.Exception { moveType ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , "com.example.refactoringtest.CustomView1" , "src/com/example/refactoringtest/subpackage" , true , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "* Move resource \'testRefactor1/src/com/example/refactoringtest/CustomView1.java\' to \'subpackage\'\n" ) + "\n" ) + "* Move resource \'testRefactor1/src/com/example/refactoringtest/CustomView1.java\' to \'subpackage\'\n" ) + "\n" ) + "* Android Type Move\n" ) + "\n" ) + " * customviews.xml - /testRefactor1/res/layout/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.subpackage.CustomView1\n" ) + "\n" ) + "\n" ) + " * customviews.xml - /testRefactor1/res/layout-land/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <com.example.refactoringtest.subpackage.CustomView1" ) ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( networkKey , rssiCurve , meteredHint ) ; }
private boolean hasRestrictedNetworkPermission ( android.content.pm.PackageInfo app ) { int flags = ( ( app.applicationInfo ) != null ) ? app.applicationInfo.flags : 0 ; if ( ( ( flags & ( android.content.pm.ApplicationInfo.FLAG_SYSTEM ) ) != 0 ) || ( ( flags & ( android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP ) ) != 0 ) ) { return true ; } return ( hasPermission ( app , android.Manifest.permission.CONNECTIVITY_INTERNAL ) ) || ( hasPermission ( app , android.Manifest.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS ) ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] buffer = new byte [ 1 ] ; org.conscrypt.NativeCrypto.SSL_read ( s , fd , callback , buffer , 0 , 1 , 0 ) ; assertEquals ( 42 , buffer [ 0 ] ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedPackage pkg , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findPackage ( pkg ) ; if ( c == null ) { return null ; } if ( ( c.annotations ) != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : c.annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
public void Test13088 ( ) { com.ibm.icu.util.ULocale loc = new com.ibm.icu.util.ULocale ( "fa" ) ; double num = - 12.34 ; com.ibm.icu.text.NumberFormat numfmt = com.ibm.icu.text.NumberFormat.getPercentInstance ( loc ) ; expect2 ( numfmt , num , "‎٪ ‎−۱٬۲۳۴" ) ; }
private static android.telephony.SmsCbMessage createFromPdu ( byte [ ] pdu ) { try { byte [ ] [ ] pdus = new byte [ 1 ] [ ] ; pdus [ 0 ] = pdu ; return com.android.internal.telephony.gsm.GsmSmsCbMessage.createSmsCbMessage ( com.android.cellbroadcastreceiver.DialogSmsDisplayTests.sEmptyLocation , pdus ) ; } catch ( java.lang.IllegalArgumentException e ) { return null ; } }
public com.android.ide.eclipse.gltrace.state.GLSparseArrayProperty clone ( ) { com.android.sdklib.util.SparseArray < com.android.ide.eclipse.gltrace.state.IGLProperty > copy = new com.android.sdklib.util.SparseArray < com.android.ide.eclipse.gltrace.state.IGLProperty > ( mSparseArray.size ( ) ) ; for ( int i = 0 ; i < ( mSparseArray.size ( ) ) ; i ++ ) { int key = mSparseArray.keyAt ( i ) ; com.android.ide.eclipse.gltrace.state.IGLProperty value = mSparseArray.get ( key ) ; copy.put ( key , value ) ; } return new com.android.ide.eclipse.gltrace.state.GLSparseArrayProperty ( mType , mDefaultValue , copy ) ; }
public void processBasicBlockElements ( ) { instructions = new java.util.LinkedList < > ( ) ; extraInstructions = new java.util.LinkedList < > ( ) ; noMoreInstruction = false ; java.util.ArrayList < com.android.jack.ir.ast.cfg.JBasicBlockElement > elements = com.google.common.collect.Lists.newArrayList ( this . currentBasicBlock.elements ( true ) ) ; super . accept ( elements ) ; }
private static void printBitset ( java.util.BitSet bs ) { java.lang.System.out.println ( ) ; for ( int i = ( bs.size ( ) ) - 1 ; i >= 0 ; i -- ) { if ( bs.get ( i ) ) java.lang.System.out.print ( 1 ) ; else java.lang.System.out.print ( 0 ) ; } }
private com.android.internal.telephony.CommandException getCommandException ( int code , java.lang.String errorString ) { android.telephony.Rlog.d ( com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG , ( ( ( "getCommandException code= " + code ) + ", errorString= " ) + errorString ) ) ; com.android.internal.telephony.CommandException.Error error = CommandException.Error.GENERIC_FAILURE ; switch ( code ) { case com.android.ims.ImsReasonInfo.CODE_UT_NOT_SUPPORTED : error = CommandException.Error.REQUEST_NOT_SUPPORTED ; break ; case com.android.ims.ImsReasonInfo.CODE_UT_CB_PASSWORD_MISMATCH : error = CommandException.Error.PASSWORD_INCORRECT ; break ; case com.android.ims.ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE : error = CommandException.Error.RADIO_NOT_AVAILABLE ; default : break ; } return new com.android.internal.telephony.CommandException ( error , errorString ) ; }
private void setParameters ( int width , int height , int bitRate ) { if ( ( ( width % 16 ) != 0 ) || ( ( height % 16 ) != 0 ) ) { android.util.Log.w ( android.media.cts.EncodeDecodeTest.TAG , "WARNING: width or height not multiple of 16" ) ; } mWidth = width ; mHeight = height ; mBitRate = bitRate ; }
private com.android.timezone.distro.DistroVersion readDistroVersion ( java.io.File distroDir ) throws com.android.timezone.distro.DistroException , java.io.IOException { android.util.Slog.i ( logTag , "Reading distro format version" ) ; java.io.File distroVersionFile = new java.io.File ( distroDir , com.android.timezone.distro.TimeZoneDistro.DISTRO_VERSION_FILE_NAME ) ; if ( ! ( distroVersionFile.exists ( ) ) ) { throw new com.android.timezone.distro.DistroException ( ( "No distro version file found: " + distroVersionFile ) ) ; } byte [ ] versionBytes = com.android.timezone.distro.FileUtils.readBytes ( distroVersionFile , DistroVersion.DISTRO_VERSION_FILE_LENGTH ) ; return com.android.timezone.distro.DistroVersion.fromBytes ( versionBytes ) ; }
public void testE2 ( ) { dot.junit.opcodes.aput_object.d.T_aput_object_1 t = new dot.junit.opcodes.aput_object.d.T_aput_object_1 ( ) ; java.lang.String [ ] arr = new java.lang.String [ 2 ] ; try { t.run ( arr , ( - 1 ) , "abc" ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
private proguard.classfile.Attribute getAttribute ( proguard.classfile.Clazz clazz , java.lang.String name ) { for ( int index = 0 ; index < ( u2attributesCount ) ; index ++ ) { proguard.classfile.Attribute attribute = attributes [ index ] ; if ( attribute.getAttributeName ( clazz ) . equals ( name ) ) { return attribute ; } } return null ; }
synchronized boolean reportError ( byte error ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , ( "reportError(): error = " + error ) ) ; return reportErrorNative ( error ) ; }
private int performDexOptInternal ( java.lang.String packageName , boolean checkProfiles , java.lang.String targetCompilerFilter , boolean force ) { android.content.pm.PackageParser.Package p ; synchronized ( mPackages ) { p = mPackages.get ( packageName ) ; if ( p == null ) { return PackageDexOptimizer.DEX_OPT_FAILED ; } mPackageUsage.write ( false ) ; } long callingId = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mInstallLock ) { return performDexOptInternalWithDependenciesLI ( p , checkProfiles , targetCompilerFilter , force ) ; } } finally { android.os.Binder.restoreCallingIdentity ( callingId ) ; } }
public void testWrongSeparator2 ( ) throws java.lang.Exception { assertEquals ( ( "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n" + ( ( ( ( ( " <activity\n" + " ^\n" ) + "AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n" ) + " android:name=\".Foo.Bar\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 1 warnings\n" ) ) , lintProject ( "registration/AndroidManifestWrong2.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java" ) ) ; }
public boolean isAudioOn ( ) { if ( android.bluetooth.BluetoothHeadset.VDBG ) android.bluetooth.BluetoothHeadset.log ( "isAudioOn()" ) ; if ( ( ( mService ) != null ) && ( isEnabled ( ) ) ) { try { return mService.isAudioOn ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHeadset.TAG , android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } } if ( ( mService ) == null ) android.util.Log.w ( android.bluetooth.BluetoothHeadset.TAG , "Proxy not attached to service" ) ; return false ; }
public static com.android.sdklib.repository.descriptors.IPkgDesc newPlatformTool ( @ com.android.annotations.NonNull final com.android.sdklib.repository.FullRevision revision ) { return new com.android.sdklib.repository.descriptors.PkgDesc ( ) { @ java.lang.Override public com.android.sdklib.repository.descriptors.PkgType getType ( ) { return PkgType.PKG_PLATFORM_TOOLS ; } @ java.lang.Override public com.android.sdklib.repository.FullRevision getFullRevision ( ) { return revision ; } @ java.lang.Override public boolean isUpdateFor ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IPkgDesc existingDesc ) { return isGenericUpdateFor ( existingDesc ) ; } } ; }
public static com.android.internal.telephony.gsm.SmsMessage newFromCMT ( java.lang.String [ ] lines ) { try { com.android.internal.telephony.gsm.SmsMessage msg = new com.android.internal.telephony.gsm.SmsMessage ( ) ; msg.parsePdu ( com.android.internal.telephony.IccUtils.hexStringToBytes ( lines [ 1 ] ) ) ; return msg ; } catch ( java.lang.RuntimeException ex ) { android.util.Log.e ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "SMS PDU parsing failed: " , ex ) ; return null ; } }
public android.security.KeyPairGeneratorSpec build ( ) { return new android.security.KeyPairGeneratorSpec ( mContext , mKeystoreAlias , mKeyType , mKeySize , mSpec , mSubjectDN , mSerialNumber , mStartDate , mEndDate , mFlags , mKeyValidityStart , mKeyValidityForOriginationEnd , mKeyValidityForConsumptionEnd , mPurposes , mDigests , mPaddings , mBlockModes , mUserAuthenticators , mUserAuthenticationValidityDurationSeconds ) ; }
public void testEmptyIterator ( ) { java.util.concurrent.ConcurrentSkipListSet q = new java.util.concurrent.ConcurrentSkipListSet ( ) ; int i = 0 ; java.util.Iterator it = q.iterator ( ) ; while ( it.hasNext ( ) ) { assertTrue ( q.contains ( it.next ( ) ) ) ; ++ i ; } assertEquals ( 0 , i ) ; }
public static void execShell ( java.lang.String command ) { dalvik.system.Zygote.nativeExecShell ( command ) ; }
private static void prepareCredential ( ) { if ( ( com.google.gct.testing.launcher.CloudAuthenticator.httpTransport ) == null ) { com.google.gct.testing.launcher.CloudAuthenticator.httpTransport = com.google.gct.testing.launcher.CloudAuthenticator.createHttpTransport ( ) ; } if ( ( com.google.gct.testing.launcher.CloudAuthenticator.credential ) == null ) { if ( ! ( com.google.gct.testing.launcher.CloudAuthenticator.authorize ( ) ) ) { throw new java.lang.RuntimeException ( "Failed to authorize in Google Cloud!" ) ; } com.google.gct.testing.launcher.CloudAuthenticator.credential = com.google.gct.login.GoogleLogin.getInstance ( ) . getCredential ( ) ; } }
public void startStreaming ( android.telephony.MbmsStreamingManager streamingManager ) { try { mStreamingService = streamingManager.startStreaming ( mStreamingServiceInfo , new com.android.phone.testapps.embmsfrontend.StreamingServiceTracker.Callback ( ) ) ; } catch ( android.telephony.mbms.MbmsException e ) { android.widget.Toast.makeText ( mActivity , ( "Error starting streaming" + ( e.getErrorCode ( ) ) ) , Toast.LENGTH_SHORT ) . show ( ) ; } }
private void dispose ( ) { com.android.ide.eclipse.adt.internal.resources.manager.GlobalProjectMonitor monitor = com.android.ide.eclipse.adt.internal.resources.manager.GlobalProjectMonitor.getMonitor ( ) ; monitor.removeProjectListener ( mProjectListener ) ; monitor.removeFileListener ( mFileListener ) ; synchronized ( com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock ) { for ( java.util.Map.Entry < org.eclipse.core.resources.IProject , com.android.ide.eclipse.adt.internal.project.ProjectState > entry : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.entrySet ( ) ) { entry.getValue ( ) . setTarget ( null ) ; } } }
private boolean isActionBarIcon ( com.android.tools.lint.detector.api.Context context , java.lang.String name , java.io.File file ) { if ( isActionBarIcon ( name ) ) { return true ; } if ( ( ( file != null ) && ( name.startsWith ( "ic_menu_" ) ) ) && ( com.android.tools.lint.checks.IconDetector.isAndroid30 ( context , com.android.tools.lint.detector.api.Context.getFolderVersion ( file ) ) ) ) { return true ; } return false ; }
public void add ( int index , long value ) { if ( ( index < 0 ) || ( index > ( mSize ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ) ; } ensureCapacity ( 1 ) ; if ( ( ( mSize ) - index ) != 0 ) { java.lang.System.arraycopy ( mValues , index , mValues , ( index + 1 ) , ( ( mSize ) - index ) ) ; } mValues [ index ] = value ; ( mSize ) ++ ; }
public void delete ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotDeleteFileException { java.io.File file = new java.io.File ( dir , path.getPathAsString ( java.io.File.separatorChar ) ) ; if ( ! ( file.delete ( ) ) ) { throw new com.android.sched.util.file.CannotDeleteFileException ( ( file.isDirectory ( ) ? new com.android.sched.util.location.DirectoryLocation ( file ) : new com.android.sched.util.location.FileLocation ( file ) ) ) ; } }
public java.util.List < java.io.File > getAidlImports ( ) { java.util.List < java.io.File > list = new java.util.ArrayList < java.io.File > ( ) ; for ( com.android.builder.AndroidDependency lib : mFlatLibraryProjects ) { java.io.File aidlLib = lib.getAidlFolder ( ) ; if ( ( aidlLib != null ) && ( aidlLib.isDirectory ( ) ) ) { list.add ( aidlLib ) ; } } return list ; }
private static void rotateDexFile ( ) { if ( ( com.android.dx.command.dexer.Main.outputDex ) != null ) { com.android.dx.command.dexer.Main.dexOutputArrays.add ( com.android.dx.command.dexer.Main.writeDex ( ) ) ; } com.android.dx.command.dexer.Main.createDexFile ( ) ; }
public void testDetachFromWindow ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/DetachedFromWindow.java:7: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/DetachedFromWindow.java:26: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" ) + " protected void onDetachedFromWindow() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( ( "src/test/pkg/DetachedFromWindow.java.txt=>" + "src/test/pkg/DetachedFromWindow.java" ) ) ) ; }
public void testAesCbcHmacSha256Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.getKey ( 256 ) ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , android.net.cts.IpSecManagerTest.getKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , null , false , 1 , true ) ; }
public void swap ( ) { super . swap ( ) ; producerPop ( ) ; producerPop ( ) ; producerPush ( ) ; producerPush ( ) ; }
public void testProcSelfPagemapSane ( ) throws android.system.ErrnoException , java.io.IOException { java.io.FileDescriptor pagemap = null ; try { pagemap = android.system.Os.open ( "/proc/self/pagemap" , OsConstants.O_RDONLY , 0 ) ; for ( android.util.Pair < java.lang.Long , java.lang.Long > range : android.permission.cts.FileSystemPermissionTest.mappedPageRanges ( ) ) if ( ! ( android.permission.cts.FileSystemPermissionTest.pfnIsZero ( pagemap , range.first , range.second ) ) ) fail ( ( "Device is missing the following kernel security patch: " + "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ab676b7d6fbf4b294bf198fb27ade5b0e865c7ce" ) ) ; } catch ( android.system.ErrnoException e ) { if ( ( e.errno ) == ( android.system.OsConstants.EPERM ) ) return ; throw e ; } finally { if ( pagemap != null ) android.system.Os.close ( pagemap ) ; } }
public void updateUserName ( int userId , java.lang.String name ) { com.android.server.pm.PackageManagerService.enforceSystemOrRoot ( "Only the system can rename users" ) ; com.android.server.pm.PackageManagerService.sUserManager.updateUserName ( userId , name ) ; }
public void testGetPackage ( ) { assertEquals ( com.android.ide.eclipse.adt.internal.project.AndroidManifestParserTest.PACKAGE_NAME , mManifestTestApp.getPackage ( ) ) ; }
private void enableUsageLocal ( ) { if ( com.android.server.wifi.nan.WifiNanStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.nan.WifiNanStateManager.TAG , ( "enableUsageLocal: mUsageEnabled=" + ( mUsageEnabled ) ) ) ; if ( mUsageEnabled ) { return ; } com.android.server.wifi.nan.WifiNanNative.getInstance ( ) . deInitNan ( ) ; mUsageEnabled = true ; queryCapabilities ( ) ; createAllDataPathInterfaces ( ) ; sendNanStateChangedBroadcast ( true ) ; }
public void testGetDeviceId ( ) { java.lang.String deviceId = mTelephonyManager.getDeviceId ( ) ; int phoneType = mTelephonyManager.getPhoneType ( ) ; switch ( phoneType ) { case android.telephony.TelephonyManager.PHONE_TYPE_GSM : android.telephony.cts.TelephonyManagerTest.assertImeiDeviceId ( deviceId ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_CDMA : android.telephony.cts.TelephonyManagerTest.assertMeidDeviceId ( deviceId ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_NONE : assertMacAddressReported ( ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "Did you add a new phone type? " + phoneType ) ) ; } }
private static void assertSubArrayEquals ( byte [ ] expected , int len , byte [ ] actual ) { assertEquals ( len , actual.length ) ; for ( int i = 0 ; i < len ; ++ i ) { assertEquals ( expected [ i ] , actual [ i ] ) ; } }
private static com.android.jack.shrob.proguard.ProguardParser createParserFromFile ( @ javax.annotation.Nonnull java.io.File file ) { try { com.android.jack.shrob.proguard.ProguardParser parser = com.android.jack.shrob.proguard.GrammarActions.createParserCommon ( new org.antlr.runtime.ANTLRFileStream ( file.getAbsolutePath ( ) ) ) ; return parser ; } catch ( java.io.IOException e ) { com.android.jack.shrob.proguard.GrammarActions.logger.log ( java.util.logging.Level.SEVERE , "Error while creating parser for file {0}" , file.getAbsolutePath ( ) ) ; } return null ; }
public void aggregateContact ( android.database.sqlite.SQLiteDatabase db , long rawContactId , java.lang.String accountType , java.lang.String accountName , long currentContactId ) { if ( ! ( mEnabled ) ) { return ; } com.android.providers.contacts.ContactAggregator.MatchCandidateList candidates = new com.android.providers.contacts.ContactAggregator.MatchCandidateList ( ) ; com.android.providers.contacts.ContactMatcher matcher = new com.android.providers.contacts.ContactMatcher ( ) ; android.content.ContentValues values = new android.content.ContentValues ( ) ; aggregateContact ( db , rawContactId , accountType , accountName , currentContactId , candidates , matcher , values ) ; }
private void processExisting ( int permissions ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException , com.android.sched.util.file.WrongPermissionException { assert ( file ) != null ; if ( ! ( file.exists ( ) ) ) { throw new com.android.sched.util.file.NoSuchFileException ( ( ( com.android.sched.util.location.FileOrDirLocation ) ( location ) ) ) ; } if ( ! ( file.isDirectory ( ) ) ) { throw new com.android.sched.util.file.NotDirectoryException ( ( ( com.android.sched.util.location.DirectoryLocation ) ( location ) ) ) ; } checkPermissions ( file , permissions ) ; }
public void testDependencies ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( ( ( ( ( ( "" + ( ( ( ( ( ( "build.gradle:5: Warning: Old buildToolsVersion 19.0.0; recommended version is 19.1.0 or later [GradleDependency]\n" + " buildToolsVersion \"19.0.0\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:24: Warning: A newer version of com.google.guava:guava than 11.0.2 is available: 18.0 [GradleDependency]\n" ) + " freeCompile \'com.google.guava:guava:11.0.2\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:25: Warning: A newer version of com.android.support:appcompat-v7 than 13.0.0 is available: " ) ) + ( com.android.sdklib.SdkVersionInfo.HIGHEST_KNOWN_STABLE_API ) ) + ".0.0 [GradleDependency]\n" ) + " compile \'com.android.support:appcompat-v7:13.0.0\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 3 warnings\n" ) , lintProject ( "gradle/Dependencies.gradle=>build.gradle" ) ) ; }
static android.app.ContextImpl createSystemUiContext ( android.app.ContextImpl systemContext ) { final android.app.LoadedApk packageInfo = systemContext.mPackageInfo ; android.app.ContextImpl context = new android.app.ContextImpl ( null , systemContext.mMainThread , packageInfo , null , null , null , 0 , null ) ; context.setResources ( android.app.ContextImpl.createResources ( null , packageInfo , null , Display.DEFAULT_DISPLAY , null , packageInfo.getCompatibilityInfo ( ) ) ) ; return context ; }
private java.net.InetAddress socksGetServerAddress ( ) throws java.net.UnknownHostException { java.lang.String proxyName ; java.net.InetSocketAddress addr = ( ( java.net.InetSocketAddress ) ( proxy.address ( ) ) ) ; proxyName = addr.getHostName ( ) ; if ( proxyName == null ) { proxyName = addr.getAddress ( ) . getHostAddress ( ) ; } return java.net.InetAddress.getByName ( proxyName ) ; }
private java.util.List < java.lang.String > buildCommandLineJunit ( @ javax.annotation.Nonnull java.lang.String [ ] options , @ javax.annotation.CheckForNull java.lang.String jUnitRunnerName , @ javax.annotation.Nonnull java.lang.String [ ] jUnitTestClasses , @ javax.annotation.Nonnull java.io.File ... classpathFiles ) { java.util.List < java.lang.String > args = new java.util.ArrayList < java.lang.String > ( ) ; addStartOfCommandLine ( options , classpathFiles , args ) ; args.add ( jUnitRunnerName ) ; for ( java.lang.String className : jUnitTestClasses ) { args.add ( className ) ; } return args ; }
public java.lang.Class < ? > forClass ( ) { if ( ( cl ) == null ) { return null ; } if ( ( java.lang.System.getSecurityManager ( ) ) != null ) { if ( sun.reflect.misc.ReflectUtil.needsPackageAccessCheck ( dalvik.system.VMStack.getCallingClassLoader ( ) , cl.getClassLoader ( ) ) ) { sun.reflect.misc.ReflectUtil.checkPackageAccess ( cl ) ; } } return cl ; }
public void onFailure ( int reason , java.lang.String description ) { android.os.Bundle bundle = new android.os.Bundle ( ) ; bundle.putInt ( "callbackId" , mCallbackId ) ; bundle.putInt ( "sessionId" , mSessionId ) ; bundle.putInt ( "reason" , reason ) ; bundle.putString ( "description" , description ) ; mEventFacade.postEvent ( "WifiNanRangingListenerOnFailure" , bundle ) ; }
private void handlePackageModified ( java.lang.String packageName , boolean removed ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , ( ( ( "packageName: " + packageName ) + " removed: " ) + removed ) ) ; if ( removed ) { if ( isBrowseSupported ( packageName ) ) { removePackageFromBrowseList ( packageName ) ; } } else { if ( isBrowsableListUpdated ( packageName ) ) { buildBrowsablePlayersList ( ) ; buildMediaPlayersList ( ) ; } } }
public void dump ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { pw.println ( "NanSessionState:" ) ; pw.println ( ( " mSessionId: " + ( mSessionId ) ) ) ; pw.println ( ( " mIsPublishSession: " + ( mIsPublishSession ) ) ) ; pw.println ( ( " mPubSubId: " + ( mPubSubId ) ) ) ; pw.println ( ( ( " mMacByRequestorInstanceId: [" + ( mMacByRequestorInstanceId ) ) + "]" ) ) ; }
public void test_ja ( ) throws java.lang.Exception { libcore.icu.ImmutableIndex ja = libcore.icu.AlphabeticIndexTest.createIndex ( java.util.Locale.JAPANESE ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "Allen" , "A" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "ぁ" , "あ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "ァ" , "あ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "日" , "" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "Smith" , "S" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "沈" , "" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ja , "ᄀ" , "" ) ; }
public java.lang.String getDescriptionForNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.util.Locale languageCode , java.lang.String userRegion ) { com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType numberType = phoneUtil.getNumberType ( number ) ; if ( numberType == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberType.UNKNOWN ) ) { return "" ; } else if ( ! ( canBeGeocoded ( numberType ) ) ) { return getCountryNameForNumber ( number , languageCode ) ; } return getDescriptionForValidNumber ( number , languageCode , userRegion ) ; }
private void connectNativeNetdService ( ) { boolean nativeServiceAvailable = false ; try { mNetdService = INetd.Stub.asInterface ( android.os.ServiceManager.getService ( com.android.server.NetworkManagementService.NETD_SERVICE_NAME ) ) ; nativeServiceAvailable = mNetdService.isAlive ( ) ; } catch ( android.os.RemoteException e ) { } if ( ! nativeServiceAvailable ) { android.util.Slog.wtf ( com.android.server.NetworkManagementService.TAG , ( "Can't connect to NativeNetdService " + ( com.android.server.NetworkManagementService.NETD_SERVICE_NAME ) ) ) ; } }
public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; when ( mWificond.createApInterface ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; enterSoftApActiveMode ( ) ; verify ( mWificond ) . tearDownInterfaces ( ) ; }
public void moveToFront ( ) { checkCaller ( ) ; startActivityFromRecentsInner ( mTaskId , null ) ; }
public static boolean weakerAccess ( final int me , final int then ) { return ( ( ( ( me & ( org.jetbrains.asm4.Opcodes.ACC_PRIVATE ) ) > 0 ) && ( ( then & ( org.jetbrains.asm4.Opcodes.ACC_PRIVATE ) ) == 0 ) ) || ( ( ( me & ( org.jetbrains.asm4.Opcodes.ACC_PROTECTED ) ) > 0 ) && ( ( then & ( org.jetbrains.asm4.Opcodes.ACC_PUBLIC ) ) > 0 ) ) ) || ( ( org.jetbrains.jps.builders.java.dependencyView.Difference.isPackageLocal ( me ) ) && ( ( then & ( org.jetbrains.asm4.Opcodes.ACC_PROTECTED ) ) > 0 ) ) ; }
public void setNetworkAvailable ( final boolean networkUp ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setNetworkAvailable ( networkUp ) ; } } ) ; return ; } mAwContents.setNetworkAvailable ( networkUp ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; Main.testExceptionDetailMessages ( ) ; Main.testfindVirtual ( ) ; Main.testUnreflects ( ) ; Main.testAsType ( ) ; Main.testConstructors ( ) ; Main.testStringConstructors ( ) ; Main.testReturnValueConversions ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; versionedDxDir.mkdirs ( ) ; clearVersionedDxDir ( ) ; getGeneratedProxyClasses ( ) . clear ( ) ; }
private void notifyHandshakeCompletedListeners ( ) { if ( ( ( listeners ) != null ) && ( ! ( listeners.isEmpty ( ) ) ) ) { javax.net.ssl.HandshakeCompletedEvent event = new javax.net.ssl.HandshakeCompletedEvent ( this , sslParameters.getSession ( ) ) ; for ( javax.net.ssl.HandshakeCompletedListener listener : listeners ) { try { listener.handshakeCompleted ( event ) ; } catch ( java.lang.RuntimeException e ) { java.lang.Thread thread = java.lang.Thread.currentThread ( ) ; thread.getUncaughtExceptionHandler ( ) . uncaughtException ( thread , e ) ; } } } }
public void removeTasks ( java.util.List < com.intellij.openapi.externalSystem.model.task.TaskData > tasks , com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.Phase phase ) { if ( tasks.isEmpty ( ) ) return ; final com.intellij.openapi.externalSystem.service.project.manage.ExternalProjectsManager.ExternalProjectsStateProvider stateProvider = com.intellij.openapi.externalSystem.service.project.manage.ExternalProjectsManager.getInstance ( myProject ) . getStateProvider ( ) ; for ( com.intellij.openapi.externalSystem.model.task.TaskData task : tasks ) { final com.intellij.openapi.externalSystem.service.project.manage.TaskActivationState taskActivationState = stateProvider.getTasksActivation ( task.getOwner ( ) , task.getLinkedExternalProjectPath ( ) ) ; taskActivationState.getTasks ( phase ) . remove ( task.getName ( ) ) ; } fireTasksChanged ( ) ; }
public void testIntersectionType002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( INTERSECTION_TYPE_002 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addProperty ( Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName ( ) , java.lang.Boolean.TRUE.toString ( ) ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . compileAndRunTest ( ) ; }
public void testDupResourceSet ( ) throws java.lang.Exception { java.io.File root = com.android.builder.TestUtils.getRoot ( "resources" , "dupSet" ) ; com.android.builder.resources.ResourceSet set = new com.android.builder.resources.ResourceSet ( "main" ) ; set.addSource ( new java.io.File ( root , "res1" ) ) ; set.addSource ( new java.io.File ( root , "res2" ) ) ; boolean gotException = false ; try { set.loadFromFiles ( ) ; } catch ( com.android.builder.resources.DuplicateDataException e ) { gotException = true ; } assertTrue ( gotException ) ; }
public void testKeepPausedAfterVisitingHome ( ) { mDevice.pressKeyCode ( KeyEvent.KEYCODE_MEDIA_PAUSE ) ; mMenuHelper.assertWaitForMenu ( ) ; assertButtonHasFocus ( com.android.tv.tests.ui.PlayControlsRowViewTest.BUTTON_INDEX_PLAY_PAUSE ) ; mDevice.pressHome ( ) ; mDevice.waitForIdle ( ) ; mDevice.pressHome ( ) ; mDevice.waitForIdle ( ) ; mMenuHelper.assertWaitForMenu ( ) ; assertButtonHasFocus ( com.android.tv.tests.ui.PlayControlsRowViewTest.BUTTON_INDEX_PLAY_PAUSE ) ; }
public void testRemove2_IndexOutOfBounds ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.add ( "asdasd" ) ; c.add ( "adasdasd" ) ; c.remove ( 100 ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { android.view.accessibility.AccessibilityNodeProvider ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.view.accessibility.AccessibilityNodeProvider > ( ) { @ java.lang.Override public android.view.accessibility.AccessibilityNodeProvider call ( ) { return getAccessibilityNodeProvider ( ) ; } } ) ; return ret ; } return mAwContents.getAccessibilityNodeProvider ( ) ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , int [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) ) ; }
public void testEvaluateNetworks_untrustedNetworksAllowed_onlyDeletedEphemeral ( ) { org.mockito.Mockito.when ( mWifiConfigManager.wasEphemeralNetworkDeleted ( com.android.server.wifi.util.ScanResultUtil.createQuotedSSID ( com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult ( ) . SSID ) ) ) . thenReturn ( true ) ; android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks ( com.google.android.collect.Lists.newArrayList ( com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL ) , null , null , false , true , null ) ; junit.framework.Assert.assertNull ( result ) ; org.mockito.Mockito.verifyZeroInteractions ( mNetworkScoreManager ) ; }
public java.lang.Object [ ] getChildren ( java.lang.Object parentElement ) { if ( ( parentElement instanceof com.android.ddmlib.IDevice ) && ( mDoTreeViewStuff ) ) { com.android.hierarchyviewerlib.device.Window [ ] list = mModel.getWindows ( ( ( com.android.ddmlib.IDevice ) ( parentElement ) ) ) ; if ( list != null ) { return list ; } } return new java.lang.Object [ 0 ] ; }
public void run ( ) { synchronized ( this ) { mViewport = mModel.getViewport ( ) ; mZoom = mModel.getZoom ( ) ; setTransform ( ) ; } }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.conscrypt.NativeCrypto.SSL_get0_alpn_selected ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
public void testCanUninstallAllUserCaCerts ( ) throws java.security.cert.CertificateException { assertTrue ( mDevicePolicyManager.installCaCert ( getWho ( ) , FAKE_RSA_1.caCertificate ) ) ; assertTrue ( mDevicePolicyManager.installCaCert ( getWho ( ) , FAKE_DSA_1.caCertificate ) ) ; mDevicePolicyManager.uninstallAllUserCaCerts ( getWho ( ) ) ; assertFalse ( hasCaCertInstalled ( FAKE_RSA_1.caCertificate ) ) ; assertFalse ( hasCaCertInstalled ( FAKE_DSA_1.caCertificate ) ) ; }
private void queryCapabilityConfigurationInternal ( int capability , int radioTech , android.telephony.ims.internal.aidl.IImsCapabilityCallback c ) { boolean enabled = queryCapabilityConfiguration ( capability , radioTech ) ; try { if ( c != null ) { c.onQueryCapabilityConfiguration ( capability , radioTech , enabled ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.ims.internal.feature.MmTelFeature.LOG_TAG , "queryCapabilityConfigurationInternal called on dead binder!" ) ; } }
public void clearAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , long ceDataInode ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.clearAppData ( uuid , packageName , userId , flags , ceDataInode ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void readContent ( @ javax.annotation.Nonnull com.android.jack.jayce.v0003.io.JayceInternalReaderImpl in ) throws java.io.IOException { captureInstance = in.readBoolean ( ) ; capturedVariableIds = in.readIds ( ) ; method = in.readNode ( com.android.jack.jayce.v0003.nodes.NMethod.class ) ; typeSig = in.readId ( ) ; boundsIds = in.readIds ( ) ; }
private static boolean isDrawableFile ( java.lang.String name ) { return ( ( ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_PNG ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_JPG ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_GIF ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( name , com.android.SdkConstants.DOT_XML ) ) ; }
private void init ( java.lang.String pattern ) { this . icuDecimalFormat = new java.text.DecimalFormat ( pattern , symbols.getIcuDecimalFormatSymbols ( ) ) ; maximumIntegerDigits = icuDecimalFormat.getMaximumIntegerDigits ( ) ; minimumIntegerDigits = icuDecimalFormat.getMinimumIntegerDigits ( ) ; maximumFractionDigits = icuDecimalFormat.getMaximumFractionDigits ( ) ; minimumFractionDigits = icuDecimalFormat.getMinimumFractionDigits ( ) ; }
public java.util.List < java.io.File > getProvidedJars ( ) { java.util.Set < java.io.File > jars = com.google.common.collect.Sets.newHashSetWithExpectedSize ( mJars.size ( ) ) ; for ( com.android.builder.dependency.JarDependency jar : mJars ) { java.io.File jarFile = jar.getJarFile ( ) ; if ( ( ! ( jar.isPackaged ( ) ) ) && ( jarFile.exists ( ) ) ) { jars.add ( jarFile ) ; } } return com.google.common.collect.Lists.newArrayList ( jars ) ; }
public final java.nio.LongBuffer asLongBuffer ( ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } int off = this . position ( ) ; int lim = this . limit ( ) ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : 0 ; int size = rem > > 3 ; return new java.nio.ByteBufferAsLongBuffer ( this , ( - 1 ) , 0 , size , size , off , order ( ) ) ; }
public final byte [ ] update ( byte [ ] input ) { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( input == null ) { throw new java.lang.IllegalArgumentException ( "input == null" ) ; } if ( ( input.length ) == 0 ) { return null ; } return spiImpl.engineUpdate ( input , 0 , input.length ) ; }
public void done ( ) { synchronized ( mLock ) { if ( mDone ) { return ; } mDone = true ; mDigest = mMessageDigest.digest ( ) ; } }
public void checkValidity ( ) { if ( ! ( ( ( ( ( ( parent ) instanceof com.android.jack.ir.ast.JExpression ) || ( ( parent ) instanceof com.android.jack.ir.ast.JNameValuePair ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JAnnotationMethod ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JReturnStatement ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JFieldInitializer ) ) ) { throw new com.android.jack.ir.JNodeInternalError ( this , "Invalid parent" ) ; } }
public static com.google.gct.testing.GoogleCloudTestingConfiguration getConfigurationById ( int id , org.jetbrains.android.facet.AndroidFacet facet ) { for ( com.google.gct.testing.GoogleCloudTestingConfiguration configuration : com.google.gct.testing.GoogleCloudTestingConfigurationFactory.getCustomConfigurationsFromStorage ( facet ) ) { if ( ( configuration.getId ( ) ) == id ) { return configuration ; } } for ( com.google.gct.testing.GoogleCloudTestingConfiguration configuration : com.google.gct.testing.GoogleCloudTestingConfigurationFactory.getDefaultConfigurationsFromStorage ( facet ) ) { if ( ( configuration.getId ( ) ) == id ) { return configuration ; } } return null ; }
private static java.lang.String readFile ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile file ) { java.io.InputStream contents = null ; try { contents = file.getFile ( ) . getContents ( ) ; return com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder.readFile ( new java.io.InputStreamReader ( contents ) ) ; } catch ( com.android.sdklib.io.StreamException e ) { } finally { try { if ( contents != null ) { contents.close ( ) ; } } catch ( java.io.IOException e ) { com.android.ide.eclipse.adt.AdtPlugin.log ( e , "Can't read layout file" ) ; } } return null ; }
public static java.lang.String getGcpUrl ( com.google.gct.login.CredentialedUser user , java.lang.String projectId ) { com.google.api.services.source.Source sourceRepos = new com.google.api.services.source.Source.Builder ( new com.google.api.client.http.javanet.NetHttpTransport ( ) , new com.google.api.client.json.jackson2.JacksonFactory ( ) , user.getCredential ( ) ) . setApplicationName ( "Android Studio" ) . build ( ) ; java.lang.String calculatedUrl = ( "https://source.developers.google.com/p/" + projectId ) + "/" ; try { com.google.api.services.source.model.ListReposResponse response = sourceRepos.repos ( ) . list ( projectId ) . execute ( ) ; if ( ( response != null ) && ( ( response.getRepos ( ) ) != null ) ) { for ( com.google.api.services.source.model.Repo repo : response.getRepos ( ) ) { if ( "default" . equalsIgnoreCase ( repo.getRepoName ( ) ) ) { calculatedUrl = repo.getCloneUrl ( ) ; } } } } catch ( java.lang.Exception e ) { com.google.gct.idea.git.GcpHttpAuthDataProvider.LOG.error ( ( "Exception loading repo url for " + projectId ) , e ) ; } if ( com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty ( calculatedUrl ) ) { com.google.gct.idea.git.GcpHttpAuthDataProvider.LOG.error ( ( "Exception loading repo url for " + projectId ) ) ; } return calculatedUrl ; }
public void visitLocalVariableInfo ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , proguard.classfile.editor.LocalVariableInfo localVariableInfo ) { java.lang.String descriptor = clazz.getString ( localVariableInfo.u2descriptorIndex ) ; java.lang.String newDescriptor = proguard.classfile.editor.ClassReferenceFixer.newDescriptor ( descriptor , localVariableInfo.referencedClass ) ; if ( ! ( descriptor.equals ( newDescriptor ) ) ) { localVariableInfo.u2descriptorIndex = new proguard.classfile.editor.ConstantPoolEditor ( ( ( proguard.classfile.editor.ProgramClass ) ( clazz ) ) ) . addUtf8Constant ( newDescriptor ) ; } }
private static final boolean hasCollationElements ( java.util.Locale locale ) { com.ibm.icu.impl.ICUResourceBundle rb = ( ( com.ibm.icu.impl.ICUResourceBundle ) ( com.ibm.icu.util.UResourceBundle.getBundleInstance ( ICUResourceBundle.ICU_COLLATION_BASE_NAME , locale ) ) ) ; if ( rb != null ) { try { java.lang.String collkey = rb.getStringWithFallback ( "collations/default" ) ; com.ibm.icu.impl.ICUResourceBundle elements = rb.getWithFallback ( ( "collations/" + collkey ) ) ; if ( elements != null ) { return true ; } } catch ( java.lang.Exception e ) { } } return false ; }
public void deleteOdex ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { mInstaller.execute ( "delete_odex" , apkPath , instructionSet , outputPath ) ; }
void bind ( android.database.Cursor cursor ) { com.android.dialer.calllog.ui.CoalescedAnnotatedCallLogCursorLoader.Row row = new com.android.dialer.calllog.ui.CoalescedAnnotatedCallLogCursorLoader.Row ( cursor ) ; primaryTextView.setText ( buildPrimaryText ( row ) ) ; secondaryTextView.setText ( buildSecondaryText ( row ) ) ; if ( row.isNew ( ) ) { primaryTextView.setTextAppearance ( R.style.primary_textview_new_call ) ; secondaryTextView.setTextAppearance ( R.style.secondary_textview_new_call ) ; } setPhoto ( row ) ; setPrimaryCallTypes ( row ) ; setSecondaryCallTypes ( row ) ; setPhoneAccounts ( row ) ; }
void beginServiceDeclaration ( int serverIf , int srvcType , int srvcInstanceId , int minHandles , java.util.UUID srvcUuid , boolean advertisePreferred ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "beginServiceDeclaration() - uuid=" + srvcUuid ) ) ; com.android.bluetooth.gatt.ServiceDeclaration serviceDeclaration = addDeclaration ( ) ; serviceDeclaration.addService ( srvcUuid , srvcType , srvcInstanceId , minHandles , advertisePreferred ) ; }
public void getSimIdentityEapAkaPrime ( ) { android.telephony.TelephonyManager tm = mock ( android.telephony.TelephonyManager.class ) ; when ( tm.getSubscriberId ( ) ) . thenReturn ( "3214561234567890" ) ; when ( tm.getSimState ( ) ) . thenReturn ( TelephonyManager.SIM_STATE_READY ) ; when ( tm.getSimOperator ( ) ) . thenReturn ( "321456" ) ; assertEquals ( "63214561234567890@wlan.mnc456.mcc321.3gppnetwork.org" , com.android.server.wifi.util.TelephonyUtil.getSimIdentity ( tm , WifiEnterpriseConfig.Eap.AKA_PRIME ) ) ; }
public void setPreferredNetworkType ( int networkType , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( RILConstants.RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE , response ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( networkType ) ; mPreferredNetworkType = networkType ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " : " ) + networkType ) ) ; mMetrics.writeSetPreferredNetworkType ( mInstanceId , networkType ) ; send ( rr ) ; }
public void downPoint ( float [ ] imgPoint ) { path [ 0 ] = imgPoint [ 0 ] ; path [ 1 ] = imgPoint [ 1 ] ; len = 2 ; mPoints_backup.reset ( ) ; mPoints_backup.addPath ( mPoints ) ; mPoints.reset ( ) ; mPoints.moveTo ( imgPoint [ 0 ] , imgPoint [ 1 ] ) ; }
public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value stringBufferValue = getStaticFieldValue ( debuggeeClassId , "STRING_BUFFER" ) ; constructorArguments.add ( stringBufferValue ) ; }
public static com.google.devtools.common.options.OptionDefinition extractOptionDefinition ( java.lang.reflect.Field field ) { com.google.devtools.common.options.Option annotation = ( field == null ) ? null : field.getAnnotation ( com.google.devtools.common.options.Option.class ) ; if ( annotation == null ) { throw new com.google.devtools.common.options.OptionsParser.ConstructionException ( ( ( "The field " + field ) + " does not have the right annotation to be considered an option." ) ) ; } return new com.google.devtools.common.options.OptionDefinition ( field , annotation ) ; }
public com.android.jack.ir.ast.JMethod getMethod ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull com.android.jack.ir.ast.JType returnType , @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.ir.ast.JType > args ) throws com.android.jack.lookup.JMethodLookupException { loader.ensureMethod ( this , name , args , returnType ) ; for ( com.android.jack.ir.ast.JMethod m : methods ) { if ( ( m.getMethodId ( ) . equals ( name , args ) ) && ( m.getType ( ) . equals ( returnType ) ) ) { return m ; } } throw new com.android.jack.lookup.JMethodWithReturnLookupException ( this , name , args , returnType ) ; }
void onSyncLost ( int sync_handle ) throws java.lang.Exception { if ( com.android.bluetooth.gatt.PeriodicScanManager.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.PeriodicScanManager.TAG , ( "onSyncLost() - sync_handle=" + sync_handle ) ) ; java.util.Map.Entry < android.os.IBinder , com.android.bluetooth.gatt.PeriodicScanManager.SyncInfo > entry = findSync ( sync_handle ) ; if ( entry == null ) { android.util.Log.i ( com.android.bluetooth.gatt.PeriodicScanManager.TAG , ( "onSyncLost() - no callback found for sync_handle " + sync_handle ) ) ; return ; } android.bluetooth.le.IPeriodicAdvertisingCallback callback = entry.getValue ( ) . callback ; mSyncs.remove ( entry ) ; callback.onSyncLost ( sync_handle ) ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case android.carrierapi.cts.NetworkScanApiTest.EVENT_NETWORK_SCAN_START : android.util.Log.d ( android.carrierapi.cts.NetworkScanApiTest.TAG , "request network scan" ) ; mTelephonyManager.requestNetworkScan ( mNetworkScanRequest , mNetworkScanCallback ) ; break ; default : android.util.Log.d ( android.carrierapi.cts.NetworkScanApiTest.TAG , ( "Unknown Event " + ( msg.what ) ) ) ; } }
public boolean setNetworkRSSIStats ( int networkId , int numUserTriggeredWifiDisableLowRSSI , int numUserTriggeredWifiDisableBadRSSI , int numUserTriggeredWifiDisableNotHighRSSI , int numTicksAtLowRSSI , int numTicksAtBadRSSI , int numTicksAtNotHighRSSI ) { android.net.wifi.WifiConfiguration config = getInternalConfiguredNetwork ( networkId ) ; if ( config == null ) { return false ; } config.numUserTriggeredWifiDisableLowRSSI = numUserTriggeredWifiDisableLowRSSI ; config.numUserTriggeredWifiDisableBadRSSI = numUserTriggeredWifiDisableBadRSSI ; config.numUserTriggeredWifiDisableNotHighRSSI = numUserTriggeredWifiDisableNotHighRSSI ; config.numTicksAtLowRSSI = numTicksAtLowRSSI ; config.numTicksAtBadRSSI = numTicksAtBadRSSI ; config.numTicksAtNotHighRSSI = numTicksAtNotHighRSSI ; return true ; }
static com.android.bluetooth.hearingaid.HearingAidStateMachine make ( android.bluetooth.BluetoothDevice device , com.android.bluetooth.hearingaid.HearingAidService svc , android.os.Looper looper ) { android.util.Log.i ( com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG , ( "make for device " + device ) ) ; com.android.bluetooth.hearingaid.HearingAidStateMachine HearingAidSm = new com.android.bluetooth.hearingaid.HearingAidStateMachine ( device , svc , looper ) ; HearingAidSm.start ( ) ; return HearingAidSm ; }
public synchronized void stopMonitoring ( java.lang.String iface ) { if ( mVerboseLoggingEnabled ) android.util.Log.d ( com.android.server.wifi.WifiMonitor.TAG , ( ( "stopMonitoring(" + iface ) + ")" ) ) ; setMonitoring ( iface , true ) ; sendMessage ( iface , com.android.server.wifi.WifiMonitor.SUP_DISCONNECTION_EVENT ) ; setMonitoring ( iface , false ) ; }
public void onLooperPrepared ( ) { mPhoneStateListenerUT = new android.telephony.PhoneStateListener ( ) { @ java.lang.Override public void onServiceStateChanged ( android.telephony.ServiceState serviceState ) { logd ( "Service State Changed" ) ; mServiceState.setVoiceRegState ( serviceState.getVoiceRegState ( ) ) ; mServiceState.setDataRegState ( serviceState.getDataRegState ( ) ) ; setReady ( true ) ; } } ; setReady ( true ) ; }
private void buildInstanceOf ( com.android.jack.dx.rop.code.RegisterSpec destReg , com.android.jack.ir.ast.JInstanceOf instanceOf ) { com.android.jack.dx.rop.code.SourcePosition srcPos = com.android.jack.backend.dex.rop.RopHelper.getSourcePosition ( instanceOf ) ; com.android.jack.dx.rop.code.RegisterSpec regExpr = getRegisterSpec ( instanceOf.getExpr ( ) ) ; com.android.jack.dx.rop.cst.CstType type = com.android.jack.backend.dex.rop.RopHelper.getCstType ( instanceOf.getTestType ( ) ) ; addInstruction ( new com.android.jack.dx.rop.code.ThrowingCstInsn ( com.android.jack.dx.rop.code.Rops.INSTANCE_OF , srcPos , com.android.jack.dx.rop.code.RegisterSpecList.make ( regExpr ) , getCatchTypes ( ) , type ) ) ; addMoveResultPseudoAsExtraInstruction ( destReg , srcPos ) ; }
private com.android.resources.ResourceType getType ( org.w3c.dom.Node node ) { java.lang.String nodeName = node.getLocalName ( ) ; java.lang.String typeString = null ; if ( com.android.SdkConstants.TAG_ITEM.equals ( nodeName ) ) { org.w3c.dom.Attr attribute = ( ( org.w3c.dom.Attr ) ( node.getAttributes ( ) . getNamedItemNS ( null , com.android.SdkConstants.ATTR_TYPE ) ) ) ; if ( attribute != null ) { typeString = attribute.getValue ( ) ; } } else { typeString = nodeName ; } if ( typeString != null ) { return com.android.resources.ResourceType.getEnum ( typeString ) ; } return null ; }
public java.nio.ByteBuffer putDouble ( double value ) { checkNotFreed ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } int newPosition = ( position ) + ( libcore.io.SizeOf.DOUBLE ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferOverflowException ( ) ; } this . block.pokeLong ( ( ( offset ) + ( position ) ) , java.lang.Double.doubleToRawLongBits ( value ) , order ) ; position = newPosition ; return this ; }
private void loadPackages ( boolean useLocalCache , boolean overrideExisting ) { if ( ( mImpl.mUpdaterData ) == null ) { return ; } boolean displaySortByApi = isSortByApi ( ) ; if ( mTreeColumnName.isDisposed ( ) ) { return ; } mTreeColumnName.setImage ( getImage ( ( displaySortByApi ? PackagesPageIcons.ICON_SORT_BY_API : PackagesPageIcons.ICON_SORT_BY_SOURCE ) ) ) ; mImpl.loadPackagesImpl ( useLocalCache , overrideExisting ) ; }
public void rmdex ( java.lang.String codePath , java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { com.android.server.pm.Installer.assertValidInstructionSet ( instructionSet ) ; checkLock ( ) ; try { mInstalld.rmdex ( codePath , instructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void testAddAll ( ) { java.util.concurrent.CopyOnWriteArraySet full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; java.util.Vector v = new java.util.Vector ( ) ; v.add ( three ) ; v.add ( four ) ; v.add ( five ) ; full.addAll ( v ) ; assertEquals ( 6 , full.size ( ) ) ; }
public void run ( ) { try { V value = com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly ( future ) ; callback.onSuccess ( value ) ; } catch ( java.util.concurrent.ExecutionException e ) { callback.onFailure ( e.getCause ( ) ) ; } catch ( java.lang.RuntimeException e ) { callback.onFailure ( e ) ; } catch ( java.lang.Error e ) { callback.onFailure ( e ) ; } }
private void resetBatteryLevel ( android.bluetooth.BluetoothDevice device ) { if ( device == null ) { com.android.bluetooth.btservice.RemoteDevices.warnLog ( "device is null" ) ; return ; } com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProperties = getDeviceProperties ( device ) ; if ( deviceProperties == null ) { return ; } deviceProperties.setBatteryLevel ( ( - 1 ) ) ; }
public static int forkAndSpecialize ( int uid , int gid , int [ ] gids , int debugFlags , int [ ] [ ] rlimits ) { dalvik.system.Zygote.preFork ( ) ; int pid = dalvik.system.Zygote.nativeForkAndSpecialize ( uid , gid , gids , debugFlags , rlimits ) ; dalvik.system.Zygote.postFork ( ) ; return pid ; }
public static boolean contains ( java.io.File dir , java.io.File file ) { if ( ( dir == null ) || ( file == null ) ) return false ; java.lang.String dirPath = dir.getAbsolutePath ( ) ; java.lang.String filePath = file.getAbsolutePath ( ) ; if ( dirPath.equals ( filePath ) ) { return true ; } if ( ! ( dirPath.endsWith ( "/" ) ) ) { dirPath += "/" ; } return filePath.startsWith ( dirPath ) ; }
public void onAlternateLayoutCreated ( ) { org.eclipse.core.resources.IFile best = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher.getBestFileMatch ( this ) ; if ( ( best != null ) && ( ! ( best.equals ( mEditedFile ) ) ) ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher ( this ) ; matcher.adaptConfigSelection ( true ) ; mConfiguration.syncFolderConfig ( ) ; if ( ( mClient ) != null ) { mClient.changed ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationClient.CHANGED_ALL ) ; } } }
public void coreToJayceFromFolder ( ) throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options ( ) ; options.setBinaryFile ( new java.io.File ( ( ( com.android.jack.test.TestsProperties.getAndroidRootDir ( ) . getPath ( ) ) + "/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/" ) ) ) ; options.setVerbose ( true ) ; options.container = ContainerType.DIR ; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir ( "core_" , "_dir" ) ; new com.android.jill.Jill ( options , "0.1" ) . process ( options.getBinaryFile ( ) ) ; }
private java.io.File createHugeZipFile ( int count ) throws java.io.IOException { java.io.File result = java.io.File.createTempFile ( "ZipFileTest" , "zip" ) ; result.deleteOnExit ( ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( result ) ) ) ; for ( int i = 0 ; i < count ; ++ i ) { java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry ( java.lang.Integer.toHexString ( i ) ) ; out.putNextEntry ( entry ) ; out.closeEntry ( ) ; } out.close ( ) ; return result ; }
public boolean unregisterNetworkEvaluator ( com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator evaluator ) { for ( com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators ) { if ( registeredEvaluator == evaluator ) { android.util.Log.d ( com.android.server.wifi.WifiNetworkSelector.TAG , ( "Unregistered network evaluator: " + ( evaluator.getName ( ) ) ) ) ; return true ; } } android.util.Log.e ( com.android.server.wifi.WifiNetworkSelector.TAG , ( "Couldn't unregister network evaluator: " + ( evaluator.getName ( ) ) ) ) ; return false ; }
public com.android.server.wifi.scanner.WifiScannerImpl create ( android.content.Context context , android.os.Looper looper , com.android.server.wifi.Clock clock ) { com.android.server.wifi.WifiNative wifiNative = com.android.server.wifi.WifiNative.getWlanNativeInterface ( ) ; if ( wifiNative.getScanCapabilities ( new com.android.server.wifi.WifiNative.ScanCapabilities ( ) ) ) { return new com.android.server.wifi.scanner.HalWifiScannerImpl ( context , wifiNative , looper , clock ) ; } else { return new com.android.server.wifi.scanner.SupplicantWifiScannerImpl ( context , wifiNative , looper , clock ) ; } }
public void acknowledgeLastIncomingCdmaSms ( boolean success , int cause , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE , result ) ; rr.mParcel.writeInt ( ( success ? 0 : 1 ) ) ; rr.mParcel.writeInt ( cause ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " " ) + success ) + " " ) + cause ) ) ; send ( rr ) ; }
public void testCompile ( ) throws java.lang.Exception { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( toolchain.getDefaultBootClasspath ( ) ) , com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false , com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.java7.trywithresources.test001.jack" ) ) ; }
public java.lang.String getVoiceMailNumber ( ) { java.lang.String number = mIccRecords.getVoiceMailNumber ( ) ; if ( android.text.TextUtils.isEmpty ( number ) ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; number = sp.getString ( com.android.internal.telephony.gsm.GSMPhone.VM_NUMBER , null ) ; } return number ; }
public static com.google.common.collect.ImmutableMap < com.google.devtools.common.options.OptionMetadataTag , java.lang.String > getOptionMetadataTagDescription ( java.lang.String productName ) { com.google.common.collect.ImmutableMap.Builder < com.google.devtools.common.options.OptionMetadataTag , java.lang.String > effectTagDescriptionBuilder = com.google.common.collect.ImmutableMap.builder ( ) ; effectTagDescriptionBuilder.put ( OptionMetadataTag.EXPERIMENTAL , "This option triggers an experimental feature with no guarantees of functionality." ) . put ( OptionMetadataTag.INCOMPATIBLE_CHANGE , ( "This option triggers a breaking change. Use this option to test your migration " + "readiness or get early access to the new feature" ) ) . put ( OptionMetadataTag.DEPRECATED , ( "This option is deprecated. It might be that the feature it affects is deprecated, " + "or that another method of supplying the information is preferred." ) ) . put ( OptionMetadataTag.HIDDEN , "This option should not be used by a user, and should not be logged." ) . put ( OptionMetadataTag.INTERNAL , "This option isn't even a option, and should not be logged." ) ; return effectTagDescriptionBuilder.build ( ) ; }
void moveUserToForeground ( com.android.server.am.UserStartedState uss , int oldUserId , int newUserId ) { boolean homeInFront = mStackSupervisor.switchUserLocked ( newUserId , uss ) ; if ( homeInFront ) { startHomeActivityLocked ( newUserId ) ; } else { mStackSupervisor.resumeTopActivitiesLocked ( ) ; } com.android.server.am.EventLogTags.writeAmSwitchUser ( newUserId ) ; getUserManagerLocked ( ) . userForeground ( newUserId ) ; sendUserSwitchBroadcastsLocked ( oldUserId , newUserId ) ; }
private static android.net.wifi.hotspot2.pps.Credential createCredentialWithUserCredential ( ) { android.net.wifi.hotspot2.pps.Credential.UserCredential userCred = new android.net.wifi.hotspot2.pps.Credential.UserCredential ( ) ; userCred.username = "username" ; userCred.password = "password" ; userCred.machineManaged = true ; userCred.ableToShare = true ; userCred.softTokenApp = "TestApp" ; userCred.eapType = android.net.wifi.EAPConstants.EAP_TTLS ; userCred.nonEapInnerMethod = "MS-CHAP" ; return android.net.wifi.hotspot2.pps.CredentialTest.createCredential ( userCred , null , null , FakeKeys.CA_CERT0 , new java.security.cert.X509Certificate [ ] { android.net.wifi.FakeKeys.CLIENT_CERT } , FakeKeys.RSA_KEY1 ) ; }
public com.android.jack.ir.ast.JMethodId get ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId method ) { com.android.jack.ir.ast.JMethodId found = virtualMethods.ceiling ( method ) ; if ( ( found != null ) && ( ( com.android.jack.frontend.VirtualMethodsMarker.methodIdComparator.compare ( method , found ) ) == 0 ) ) { return found ; } else { return null ; } }
private static java.net.InetAddress [ ] getAllByName ( java.lang.String host , java.net.InetAddress reqAddr ) throws java.net.UnknownHostException { if ( ( host == null ) || ( ( host.length ( ) ) == 0 ) ) { return java.net.InetAddress.loopbackAddresses ( ) ; } try { return new java.net.InetAddress [ ] { java.net.InetAddress.parseNumericAddress ( host ) } ; } catch ( java.lang.IllegalArgumentException e ) { } return java.net.InetAddress.getAllByName0 ( host , reqAddr , true ) ; }
public static com.android.tools.lint.checks.PermissionHolder join ( @ com.android.annotations.NonNull com.android.tools.lint.checks.PermissionHolder lookup , @ com.android.annotations.NonNull com.android.tools.lint.checks.PermissionRequirement requirement ) { com.android.tools.lint.checks.PermissionHolder.SetPermissionLookup empty = new com.android.tools.lint.checks.PermissionHolder.SetPermissionLookup ( java.util.Collections.< java.lang.String > emptySet ( ) ) ; return com.android.tools.lint.checks.PermissionHolder.SetPermissionLookup.join ( lookup , requirement.getMissingPermissions ( empty ) ) ; }
public static < T extends com.google.protobuf.nano.MessageNano > java.lang.String print ( T message ) { if ( message == null ) { return "null" ; } java.lang.StringBuffer buf = new java.lang.StringBuffer ( ) ; try { com.google.protobuf.nano.MessageNanoPrinter.print ( message.getClass ( ) . getSimpleName ( ) , message.getClass ( ) , message , new java.lang.StringBuffer ( ) , buf ) ; } catch ( java.lang.IllegalAccessException e ) { return "Error printing proto: " + ( e.getMessage ( ) ) ; } return buf.toString ( ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "VoicemailTosMessageCreator.getPromoMessage" , "declined transcription" ) ; com.android.voicemail.VoicemailClient voicemailClient = com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) ; voicemailClient.setVoicemailTranscriptionEnabled ( context , status.getPhoneAccountHandle ( ) , false ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; getActivity ( ) ; }
public java.lang.String getDigest ( ) { if ( ! ( containsFileType ( FileType.PREBUILT ) ) ) { return null ; } else { return getSectionVFS ( FileType.PREBUILT ) . getDigest ( ) ; } }
public void run ( ) { org.eclipse.jface.viewers.TreeSelection selection = ( ( org.eclipse.jface.viewers.TreeSelection ) ( mTreeViewer.getSelection ( ) ) ) ; mTreeViewer.refresh ( device ) ; if ( ( ( selection.getFirstElement ( ) ) instanceof com.android.hierarchyviewerlib.device.Window ) && ( ( ( ( com.android.hierarchyviewerlib.device.Window ) ( selection.getFirstElement ( ) ) ) . getDevice ( ) ) == device ) ) { mTreeViewer.setSelection ( selection , true ) ; } }
public boolean checkAndSet ( java.lang.String value , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config ) { com.android.resources.Navigation method = com.android.resources.Navigation.getEnum ( value ) ; if ( method != null ) { com.android.ide.eclipse.adt.internal.resources.configurations.NavigationMethodQualifier qualifier = new com.android.ide.eclipse.adt.internal.resources.configurations.NavigationMethodQualifier ( method ) ; config.setNavigationMethodQualifier ( qualifier ) ; return true ; } return false ; }
protected final java.util.List < com.android.documentsui.model.DocumentInfo > doInBackground ( com.android.documentsui.dirlist.MultiSelectManager.Selection ... selected ) { return mModel.getDocuments ( selected [ 0 ] ) ; }
public java.io.File getOutputDirectory ( org.gradle.nativebinaries.BuildType buildType , org.gradle.nativebinaries.platform.Platform platform ) { return new java.io.File ( ( ( ( ( project.getBuildDir ( ) ) + "/" ) + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/binaries/" ) , ( ( ( ( ( ndkExtension.getModuleName ( ) ) + "SharedLibrary/" ) + ( buildType.getName ( ) ) ) + "/lib/" ) + ( platform.getName ( ) ) ) ) ; }
public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { internalName = name ; isInterface = com.google.devtools.build.android.desugar.BitFlags.isSet ( access , Opcodes.ACC_INTERFACE ) ; super . visit ( version , access , name , signature , superName , interfaces ) ; }
private boolean shouldTurnOffSignalStrength ( ) { return ( mIsPowerSaveOn ) || ( ( ! ( mIsCharging ) ) && ( ! ( mIsScreenOn ) ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; if ( ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.AdtProjectTest.sProject ) == null ) { org.eclipse.core.resources.IProject project = null ; java.lang.String projectName = "testproject-" + ( java.lang.System.currentTimeMillis ( ) ) ; project = createProject ( projectName ) ; assertNotNull ( project ) ; com.android.ide.eclipse.adt.internal.editors.layout.refactoring.AdtProjectTest.sProject = project ; } }
private void updateAccessPointsDelayed ( ) { if ( ( ( ( getActivity ( ) ) != null ) && ( ! ( mIsRestricted ) ) ) && ( mWifiManager.isWifiEnabled ( ) ) ) { setProgressBarVisible ( true ) ; getView ( ) . postDelayed ( mUpdateAccessPointsRunnable , 300 ) ; } }
public void testAssistStructure ( ) throws java.lang.Exception { mTestActivity.start3pApp ( android.assist.cts.AssistStructureTest.TEST_CASE_TYPE ) ; mTestActivity.startTest ( android.assist.cts.AssistStructureTest.TEST_CASE_TYPE ) ; waitForAssistantToBeReady ( mReadyLatch ) ; waitForOnResume ( ) ; startSession ( ) ; waitForContext ( ) ; verifyAssistDataNullness ( false , false , false , false ) ; verifyAssistStructure ( android.assist.common.Utils.getTestAppComponent ( android.assist.cts.AssistStructureTest.TEST_CASE_TYPE ) , false ) ; }
android.net.INetworkPolicyListener expect ( ) { assertNull ( "expect() called before waitAndVerify()" , latch ) ; latch = new java.util.concurrent.CountDownLatch ( 1 ) ; return org.mockito.Mockito.doAnswer ( this ) . when ( listener ) ; }
void load ( java.lang.String pathName , java.lang.ClassLoader loader ) { if ( pathName == null ) { throw new java.lang.NullPointerException ( "pathName == null" ) ; } java.lang.String error = java.lang.Runtime.nativeLoad ( pathName , loader ) ; if ( error != null ) { throw new java.lang.UnsatisfiedLinkError ( error ) ; } }
private com.android.jack.ir.ast.JExpressionStatement makeRequestCall ( com.android.jack.ir.sourceinfo.SourceInfo info ) { assert ( ( lockClass ) != null ) && ( ( requestMethodId ) != null ) ; return new com.android.jack.ir.ast.JExpressionStatement ( info , new com.android.jack.ir.ast.JMethodCall ( info , null , requestClass , requestMethodId , JPrimitiveTypeEnum.VOID.getType ( ) , false ) ) ; }
public void testTransmitFollowupSuccess ( ) throws org.json.JSONException { final short transactionId = 123 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "id" , transactionId ) ; args.putInt ( "reason" , WifiNanNative.NAN_STATUS_SUCCESS ) ; com.android.server.wifi.nan.WifiNanHalMock.callTransmitFollowup ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mNanStateManager ) . onMessageSendSuccessNotification ( transactionId ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNanStateManager ) ; }
private java.io.File getOutArgumentPath ( java.lang.String filename ) { java.io.File file = new java.io.File ( filename ) ; if ( ! ( file.isAbsolute ( ) ) ) { java.io.File workDir = getLintWorkDir ( ) ; if ( workDir != null ) { java.io.File file2 = new java.io.File ( workDir , filename ) ; try { file = file2.getCanonicalFile ( ) ; } catch ( java.io.IOException e ) { file = file2 ; } } } return file ; }
private java.io.File findApk ( java.lang.String filename ) { java.io.File file = new java.io.File ( mApkDir , filename ) ; if ( file.exists ( ) ) { return file ; } file = new java.io.File ( mApkDir , ( ( ( com.google.common.io.Files.getNameWithoutExtension ( filename ) ) + "/" ) + filename ) ) ; if ( file.exists ( ) ) { return file ; } return null ; }
com.android.jack.ir.JNodeInternalError translateException ( java.lang.Throwable e ) { if ( e instanceof java.lang.VirtualMachineError ) { throw ( ( java.lang.VirtualMachineError ) ( e ) ) ; } com.android.jack.ir.JNodeInternalError ice ; if ( e instanceof com.android.jack.ir.JNodeInternalError ) { ice = ( ( com.android.jack.ir.JNodeInternalError ) ( e ) ) ; } else { ice = new com.android.jack.ir.JNodeInternalError ( "Error constructing Java AST" , e ) ; } return ice ; }
private static java.io.File prepareLib ( @ javax.annotation.Nonnull java.io.File sources , @ javax.annotation.Nonnull java.io.File ... classpath ) throws java.lang.Exception { java.io.File outDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.srcToLib ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathsAsString ( toolchain.getDefaultBootClasspath ( ) , classpath ) , outDir , false , sources ) ; return outDir ; }
public void test10089890 ( ) throws java.lang.Exception { assertEquals ( "Jan 1–2" , formatDateRange ( 0 , ( ( ( 24 * 60 ) * 60 ) * 1000L ) , ( ( FORMAT_SHOW_DATE ) | ( FORMAT_ABBREV_ALL ) ) , "Europe/London" ) ) ; assertEquals ( "Dec 31, 1969 – Jan 1, 1970" , formatDateRange ( 0 , ( ( ( 24 * 60 ) * 60 ) * 1000L ) , ( ( FORMAT_SHOW_DATE ) | ( FORMAT_ABBREV_ALL ) ) , "America/Los_Angeles" ) ) ; }
public void requestImageRef ( final android.os.Message msg ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { requestImageRef ( msg ) ; } } ) ; return ; } mAwContents.requestImageRef ( msg ) ; }
public void adjustStreamVolume ( int streamType , int direction , int flags ) { android.media.IAudioService service = android.media.AudioManager.getService ( ) ; try { if ( mUseMasterVolume ) { service.adjustMasterVolume ( direction , flags , mApplicationContext.getOpPackageName ( ) ) ; } else { service.adjustStreamVolume ( streamType , direction , flags , mApplicationContext.getOpPackageName ( ) ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.media.AudioManager.TAG , "Dead object in adjustStreamVolume" , e ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , short [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 2 ) ) ; }
private boolean visibleNotification ( int arrayPos ) { com.android.bluetooth.opp.BluetoothOppShareInfo info = mShares.get ( arrayPos ) ; return info.hasCompletionNotification ( ) ; }
public void testSet2 ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.add ( "asdasd" ) ; c.add ( "asdad" ) ; c.set ( 100 , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
private static java.lang.String getAbiList ( java.io.BufferedWriter writer , java.io.DataInputStream inputStream ) throws java.io.IOException { writer.write ( "1" ) ; writer.newLine ( ) ; writer.write ( "--query-abi-list" ) ; writer.newLine ( ) ; writer.flush ( ) ; int numBytes = inputStream.readInt ( ) ; byte [ ] bytes = new byte [ numBytes ] ; inputStream.readFully ( bytes ) ; return new java.lang.String ( bytes , java.nio.charset.StandardCharsets.US_ASCII ) ; }
java.lang.Object readResolve ( ) { int n = elements.length ; com.google.common.collect.ImmutableSortedMultiset.Builder < java.lang.Object > builder = com.google.common.collect.ImmutableSortedMultiset.orderedBy ( comparator ) ; for ( int i = 0 ; i < n ; i ++ ) { builder.addCopies ( elements [ i ] , counts [ i ] ) ; } return builder.build ( ) ; }
private static int from3DigitVersionString ( java.lang.String versionString ) throws libcore.tzdata.update2.DistroException { final java.lang.String parseErrorMessage = "versionString must be a zero padded, 3 digit, positive" + " decimal integer" ; if ( ( versionString.length ( ) ) != 3 ) { throw new libcore.tzdata.update2.DistroException ( parseErrorMessage ) ; } try { int version = java.lang.Integer.parseInt ( versionString ) ; return libcore.tzdata.update2.DistroVersion.validate3DigitVersion ( version ) ; } catch ( java.lang.NumberFormatException e ) { throw new libcore.tzdata.update2.DistroException ( parseErrorMessage , e ) ; } }
public java.net.Socket createSocket ( java.net.InetAddress addr , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl s = ( ( org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( addr , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; return s ; }
private static java.util.Properties createProps ( int min_platform_tools_rev ) { java.util.Properties props = new java.util.Properties ( ) ; props.setProperty ( ToolPackage.PROP_MIN_PLATFORM_TOOLS_REV , java.lang.Integer.toString ( min_platform_tools_rev ) ) ; return props ; }
synchronized boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "disconnect(): device=" + device ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return disconnectNative ( ) ; }
private void setWindowImage ( org.eclipse.swt.widgets.Shell androidSdkUpdater ) { java.lang.String imageName = "android_icon_16.png" ; if ( ( com.android.sdklib.SdkConstants.currentPlatform ( ) ) == ( com.android.sdklib.SdkConstants.PLATFORM_DARWIN ) ) { imageName = "android_icon_128.png" ; } if ( ( mUpdaterData ) != null ) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory ( ) ; if ( imgFactory != null ) { mShell.setImage ( imgFactory.getImageByName ( imageName ) ) ; } } }
public java.nio.file.Path convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { java.nio.file.Path path = java.nio.file.FileSystems.getDefault ( ) . getPath ( input ) ; if ( ( mustExist ) && ( ! ( java.nio.file.Files.exists ( path ) ) ) ) { throw new com.google.devtools.common.options.OptionsParsingException ( java.lang.String.format ( "%s is not a valid path." , input ) ) ; } return path ; } catch ( java.nio.file.InvalidPathException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( java.lang.String.format ( "%s is not a valid path." , input ) , e ) ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; this . source3 = getLongMessage ( 1000000 ) ; this . digest = getMessageDigest ( ) ; this . sourceData = getSourceData ( ) ; this . checkDigest = getCheckDigest ( ) ; }
public void testClassEntryCompareContract ( ) throws java.lang.Exception { com.android.tools.lint.client.api.LintDriver.ClassEntry c0 = new com.android.tools.lint.client.api.LintDriver.ClassEntry ( new java.io.File ( "abcde" ) , null , null , null ) ; com.android.tools.lint.client.api.LintDriver.ClassEntry c1 = new com.android.tools.lint.client.api.LintDriver.ClassEntry ( new java.io.File ( "abcde" ) , null , null , null ) ; assertTrue ( ( ( c0.compareTo ( c1 ) ) <= 0 ) ) ; assertTrue ( ( ( c1.compareTo ( c0 ) ) <= 0 ) ) ; }
synchronized void nAllocationData2D ( int id , int xoff , int yoff , int mip , int face , int w , int h , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void adjustVolume ( int direction ) { android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_ADJUST_VOLUME , direction , 0 ) ; mHandler.sendMessage ( msg ) ; }
private static void assertHexadecimalMeidFormat ( java.lang.String deviceId ) { java.lang.String meidPattern = "[0-9a-fA-F]{14}" ; assertTrue ( ( ( ( "MEID hex device id " + deviceId ) + " does not match pattern " ) + meidPattern ) , java.util.regex.Pattern.matches ( meidPattern , deviceId ) ) ; }
private boolean checkReadPhoneState ( java.lang.String callingPackage , java.lang.String message ) { try { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE , message ) ; return true ; } catch ( java.lang.SecurityException e ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PHONE_STATE , message ) ; } return ( mAppOps.noteOp ( AppOpsManager.OP_READ_PHONE_STATE , android.os.Binder.getCallingUid ( ) , callingPackage ) ) == ( android.app.AppOpsManager.MODE_ALLOWED ) ; }
public int hashCode ( ) { return ( ( scanType ) * 31 ) + ( ( java.util.Arrays.hashCode ( specifiers ) ) * 37 ) ; }
public void testSplashscreenContent ( ) throws java.lang.Exception { launchActivityOnDisplayNoWait ( "SplashscreenActivity" , ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID ) ; mAmWmState.waitForDisplayUnfrozen ( mDevice ) ; mAmWmState.getWmState ( ) . getStableBounds ( ) ; final java.awt.image.BufferedImage image = takeScreenshot ( ) ; assertColors ( image , mAmWmState.getWmState ( ) . getStableBounds ( ) , java.awt.Color.RED.getRGB ( ) , 0.5F , java.awt.Color.BLACK.getRGB ( ) , 0.01F ) ; }
public void getVoiceRadioTechnology ( android.os.Message result ) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy ( result ) ; if ( radioProxy != null ) { com.android.internal.telephony.RILRequest rr = obtainRequest ( com.android.internal.telephony.RIL_REQUEST_VOICE_RADIO_TECH , result , mRILDefaultWorkSource ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; try { radioProxy.getVoiceRadioTechnology ( rr.mSerial ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { handleRadioProxyExceptionForRR ( rr , "getVoiceRadioTechnology" , e ) ; } } }
public java.util.List < java.lang.String > getProviders ( android.location.Criteria criteria , boolean enabledOnly ) { try { synchronized ( mLock ) { return _getProvidersLocked ( criteria , enabledOnly ) ; } } catch ( java.lang.SecurityException se ) { throw se ; } catch ( java.lang.Exception e ) { android.util.Slog.e ( com.android.server.LocationManagerService.TAG , "getProviders got exception:" , e ) ; return null ; } }
public int movedex ( java.lang.String srcPath , java.lang.String dstPath ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "movedex" ) ; builder.append ( ' ' ) ; builder.append ( srcPath ) ; builder.append ( ' ' ) ; builder.append ( dstPath ) ; return execute ( builder.toString ( ) ) ; }
private static void setWfcRoamingSettingInternal ( android.content.Context context , boolean enabled ) { final com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance ( context , android.telephony.SubscriptionManager.getDefaultVoicePhoneId ( ) ) ; if ( imsManager != null ) { final int value = ( enabled ) ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF ; java.lang.Thread thread = new java.lang.Thread ( new java.lang.Runnable ( ) { public void run ( ) { try { imsManager.getConfigInterface ( ) . setProvisionedValue ( ImsConfig.ConfigConstants.VOICE_OVER_WIFI_ROAMING , value ) ; } catch ( com.android.ims.ImsException e ) { } } } ) ; thread.start ( ) ; } }
public static double $noinline$returnDouble ( ) { if ( Main.doThrow ) throw new java.lang.Error ( "" ) ; int i = 0 ; for ( ; i < 300000000 ; ++ i ) { } while ( ! ( Main.ensureInOsrCode ( ) ) ) { } java.lang.System.out.println ( i ) ; return java.lang.Double.longBitsToDouble ( - 1152921504606842607L ) ; }
private static void assertSubArrayEquals ( byte [ ] expected , int len , byte [ ] actual ) { assertEquals ( len , actual.length ) ; for ( int i = 0 ; i < len ; ++ i ) { assertEquals ( expected [ i ] , actual [ i ] ) ; } }
public void log ( java.util.logging.Level level , java.lang.String msg , java.lang.Throwable thrown ) { if ( ( ( level.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setThrown ( thrown ) ; doLog ( lr ) ; }
protected void registerTabs ( ) { addFailuresTab ( ) ; if ( ! ( getResults ( ) . getPackages ( ) . isEmpty ( ) ) ) { addTab ( "Packages" , new org.gradle.api.Action < org.w3c.dom.Element > ( ) { @ java.lang.Override public void execute ( org.w3c.dom.Element element ) { renderPackages ( element ) ; } } ) ; } addTab ( "Classes" , new org.gradle.api.Action < org.w3c.dom.Element > ( ) { @ java.lang.Override public void execute ( org.w3c.dom.Element element ) { renderClasses ( element ) ; } } ) ; }
public final android.content.IContentProvider acquireExistingProvider ( android.net.Uri uri ) { if ( ! ( android.content.ContentResolver.SCHEME_CONTENT.equals ( uri.getScheme ( ) ) ) ) { return null ; } java.lang.String auth = uri.getAuthority ( ) ; if ( auth != null ) { return acquireExistingProvider ( mContext , uri.getAuthority ( ) ) ; } return null ; }
public void replaceWith ( com.android.ide.common.rendering.api.ResourceValue value ) { assert value instanceof com.android.ide.common.rendering.api.StyleResourceValue ; super . replaceWith ( value ) ; if ( value instanceof com.android.ide.common.rendering.api.StyleResourceValue ) { mItems.clear ( ) ; mItems.putAll ( ( ( com.android.ide.common.rendering.api.StyleResourceValue ) ( value ) ) . mItems ) ; } }
public void testMatchesIntentWithTypeAndMatcherWithNoType ( ) { org.hamcrest.Matcher < android.content.Intent > matcher = android.support.test.espresso.intent.matcher.IntentMatchers.hasAction ( org.hamcrest.Matchers.equalTo ( Intent.ACTION_VIEW ) ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_VIEW ) . addCategory ( "category" ) . setDataAndType ( uri , Context.ACTIVITY_SERVICE ) ; assertTrue ( matcher.matches ( intent ) ) ; }
private void dexAndPush ( java.util.Set < vogar.tasks.Task > tasks , java.lang.String name , java.io.File jar , vogar.Action action ) { java.io.File localDex = run.localDexFile ( name ) ; java.io.File deviceDex = run.targetDexFile ( name ) ; vogar.tasks.Task dex = new vogar.android.DexTask ( run.androidSdk , run.classpath , run.benchmark , name , jar , action , localDex ) ; tasks.add ( dex ) ; tasks.add ( run.target.pushTask ( localDex , deviceDex ) . afterSuccess ( dex ) ) ; }
public static vogar.commands.Jack getJackCompiler ( vogar.Log log ) throws java.lang.IllegalStateException { if ( ( vogar.commands.Jack.JACK_JAR ) != null ) { return new vogar.commands.Jack ( log , com.google.common.collect.Lists.newArrayList ( "java" , "-jar" , vogar.commands.Jack.JACK_JAR.getAbsolutePath ( ) ) ) ; } else { throw new java.lang.IllegalStateException ( "Jack library not found, cannot use jack." ) ; } }
public void copyFrom ( short [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
private java.io.File createJackArchiveWithResources ( ) throws java.lang.Exception { java.io.File jackAr = com.android.jack.TestTools.createTempFile ( "resourcetestjack" , ".zip" ) ; com.android.jack.Options options = new com.android.jack.Options ( ) ; options.addResource ( new java.io.File ( com.android.jack.resource.ResourceTests.FILE , "rsc" ) ) ; com.android.jack.TestTools.compileSourceToJack ( options , com.android.jack.resource.ResourceTests.FILE , com.android.jack.TestTools.getDefaultBootclasspathString ( ) , jackAr , true ) ; return jackAr ; }
protected void orderItems ( ) { int idx = 0 ; if ( ( items ( ) . size ( ) ) > ( com.android.dx.dex.file.MemberIdsSection.MAX_MEMBERS ) ) { throw new com.android.dx.util.DexException ( tooManyMembersMessage ( ) ) ; } for ( java.lang.Object i : items ( ) ) { ( ( com.android.dx.dex.file.MemberIdItem ) ( i ) ) . setIndex ( idx ) ; idx ++ ; } }
private void reportConnectionAttemptStart ( android.net.wifi.WifiConfiguration config , java.lang.String targetBSSID , int roamType ) { mWifiMetrics.startConnectionEvent ( config , targetBSSID , roamType ) ; mWifiDiagnostics.reportConnectionEvent ( ( - 1 ) , WifiDiagnostics.CONNECTION_EVENT_STARTED ) ; }
public void write ( boolean forceSync , com.android.server.wifi.WifiConfigStoreData storeData ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { byte [ ] sharedDataBytes = storeData.createSharedRawData ( ) ; mSharedStore.storeRawDataToWrite ( sharedDataBytes ) ; if ( ( mUserStore ) != null ) { byte [ ] userDataBytes = storeData.createUserRawData ( ) ; mUserStore.storeRawDataToWrite ( userDataBytes ) ; } if ( forceSync ) { writeBufferedData ( ) ; } else { startBufferedWriteAlarm ( ) ; } }
public static void main ( java.lang.String [ ] args ) { if ( com.android.ddms.Main.isMac ( ) ) { java.lang.management.RuntimeMXBean rt = java.lang.management.ManagementFactory.getRuntimeMXBean ( ) ; java.lang.System.setProperty ( ( "JAVA_STARTED_ON_FIRST_THREAD_" + ( rt.getName ( ) . split ( "@" ) [ 0 ] ) ) , "1" ) ; } java.lang.Thread.setDefaultUncaughtExceptionHandler ( new com.android.ddms.Main.UncaughtHandler ( ) ) ; com.android.ddms.PrefsDialog.init ( ) ; com.android.ddmlib.Log.d ( "ddms" , "Initializing" ) ; if ( ( ( args.length ) >= 3 ) && ( args [ 0 ] . equals ( "ping" ) ) ) { com.android.sdkstats.SdkStatsService.ping ( args [ 1 ] , args [ 2 ] , null ) ; return ; } else if ( ( args.length ) > 0 ) { com.android.ddmlib.Log.e ( "ddms" , ( "Unknown argument: " + ( args [ 0 ] ) ) ) ; java.lang.System.exit ( 1 ) ; } java.lang.String ddmsParentLocation = java.lang.System.getProperty ( "com.android.ddms.bindir" ) ; com.android.ddms.Main.ping ( ddmsParentLocation ) ; com.android.ddmlib.DebugPortManager.setProvider ( com.android.ddms.DebugPortProvider.getInstance ( ) ) ; com.android.ddms.UIThread ui = com.android.ddms.UIThread.getInstance ( ) ; try { ui.runUI ( ddmsParentLocation ) ; } finally { com.android.ddms.PrefsDialog.save ( ) ; com.android.ddmlib.AndroidDebugBridge.terminate ( ) ; } com.android.ddmlib.Log.d ( "ddms" , "Bye" ) ; java.lang.System.exit ( 0 ) ; }
public java.util.List < java.lang.String > getBuildConfigLines ( ) { java.util.List < java.lang.String > fullList = new java.util.ArrayList < java.lang.String > ( ) ; java.util.List < java.lang.String > list = mDefaultConfig.getBuildConfigLines ( ) ; if ( ! ( list.isEmpty ( ) ) ) { fullList.add ( "// lines from default config." ) ; fullList.addAll ( list ) ; } list = mBuildType.getBuildConfigLines ( ) ; if ( ! ( list.isEmpty ( ) ) ) { fullList.add ( ( "// lines from build type: " + ( mBuildType.getName ( ) ) ) ) ; fullList.addAll ( list ) ; } for ( com.android.builder.ProductFlavor flavor : mFlavorConfigs ) { list = flavor.getBuildConfigLines ( ) ; if ( ! ( list.isEmpty ( ) ) ) { fullList.add ( ( "// lines from product flavor: " + ( flavor.getName ( ) ) ) ) ; fullList.addAll ( list ) ; } } return fullList ; }
private void assertOverLapping ( boolean expected , long lower , long upper , com.android.tv.dvr.ScheduledRecording r ) { assertEquals ( ( ( ( ( ( "isOverlapping(Range(" + lower ) + "," ) + upper ) + "), recording " ) + r ) , expected , r.isOverLapping ( new android.util.Range ( lower , upper ) ) ) ; }
public void adjustVolume ( int direction ) { android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_ADJUST_VOLUME , direction , 0 ) ; mHandler.sendMessage ( msg ) ; }
private ApkVerifier.Result verifyForMinSdkVersion ( java.lang.String apkFilenameInResources , int minSdkVersion ) throws com.android.apksig.apk.ApkFormatException , java.io.IOException , java.security.NoSuchAlgorithmException { return verify ( apkFilenameInResources , minSdkVersion ) ; }
public void logError ( java.lang.String log ) { synchronized ( mLogText ) { mLogText.append ( "=> " ) . append ( log ) ; } }
public void enter ( ) { if ( com.android.server.wifi.WifiStateMachine.DBG ) { log ( ( ( "RoamingState Enter" + " mScreenOn=" ) + ( mScreenOn ) ) ) ; } setScanAlarm ( false ) ; ( roamWatchdogCount ) ++ ; logd ( ( "Start Roam Watchdog " + ( roamWatchdogCount ) ) ) ; sendMessageDelayed ( obtainMessage ( com.android.server.wifi.WifiStateMachine.CMD_ROAM_WATCHDOG_TIMER , roamWatchdogCount , 0 ) , com.android.server.wifi.WifiStateMachine.ROAM_GUARD_TIMER_MSEC ) ; mAssociated = false ; }
synchronized long nInvokeClosureCreate ( long invokeID , byte [ ] params , long [ ] fieldIDs , long [ ] values , int [ ] sizes ) { validate ( ) ; return rsnInvokeClosureCreate ( mContext , invokeID , params , fieldIDs , values , sizes ) ; }
public void setMethodId ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId methodId ) { assert ( getExpectedMethodKind ( ) ) == ( methodId.getMethodIdWide ( ) . getKind ( ) ) ; this . methodId = methodId ; methodId.addMethod ( this ) ; }
private static final java.lang.String fingerprint ( byte [ ] bytes ) { if ( bytes == null ) { return "" ; } java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( bytes.length ) ; i ++ ) { byte b = bytes [ i ] ; android.net.http.IntegralToString.appendByteAsHex ( sb , b , true ) ; if ( ( i + 1 ) != ( bytes.length ) ) { sb.append ( ':' ) ; } } return sb.toString ( ) ; }
public void testE3 ( ) { dot.junit.opcodes.aput_short.d.T_aput_short_1 t = new dot.junit.opcodes.aput_short.d.T_aput_short_1 ( ) ; short [ ] arr = new short [ 2 ] ; try { t.run ( arr , ( - 1 ) , ( ( short ) ( 10000 ) ) ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
public static < K , V > com.google.common.cache.RemovalListener < K , V > asynchronous ( final com.google.common.cache.RemovalListener < K , V > listener , final java.util.concurrent.Executor executor ) { return new com.google.common.cache.RemovalListener < K , V > ( ) { @ java.lang.Override public void onRemoval ( final com.google.common.cache.RemovalNotification < K , V > notification ) { executor.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { listener.onRemoval ( notification ) ; } } ) ; } } ; }
synchronized void nAllocationRead2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID ) ; }
public void testInstallEmptyDeletedSystemExists ( ) throws java.lang.Exception { org.conscrypt.TrustedCertificateStoreTest.install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; store.deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertEmpty ( ) ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; store.installCertificate ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; }
private static < K , V > com.google.common.collect.SortedMapDifference < K , V > sortedMapDifference ( boolean areEqual , java.util.SortedMap < K , V > onlyOnLeft , java.util.SortedMap < K , V > onlyOnRight , java.util.SortedMap < K , V > onBoth , java.util.SortedMap < K , com.google.common.collect.MapDifference.ValueDifference < V > > differences ) { return new com.google.common.collect.Maps.SortedMapDifferenceImpl < K , V > ( areEqual , java.util.Collections.unmodifiableSortedMap ( onlyOnLeft ) , java.util.Collections.unmodifiableSortedMap ( onlyOnRight ) , java.util.Collections.unmodifiableSortedMap ( onBoth ) , java.util.Collections.unmodifiableSortedMap ( differences ) ) ; }
public void setError ( java.lang.CharSequence error , android.graphics.drawable.Drawable icon ) { mError = android.text.TextUtils.stringOrSpannedString ( error ) ; mErrorWasChanged = true ; if ( ( mError ) == null ) { setErrorIcon ( null ) ; if ( ( mErrorPopup ) != null ) { if ( mErrorPopup.isShowing ( ) ) { mErrorPopup.dismiss ( ) ; } mErrorPopup = null ; } } else { setErrorIcon ( icon ) ; if ( mTextView.isFocused ( ) ) { showError ( ) ; } } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { super . widgetSelected ( e ) ; if ( ( mResourceType ) == ( com.android.resources.ResourceType.STRING ) ) { createNewString ( ) ; } else { assert com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isValueResource ( mResourceType ) ; java.lang.String newName = createNewValue ( mResourceType ) ; if ( newName != null ) { setupResourceList ( ) ; selectItemName ( newName ) ; } } }
private void constructorPutAll ( java.util.Map < ? extends K , ? extends V > map ) { for ( java.util.Map.Entry < ? extends K , ? extends V > e : map.entrySet ( ) ) { constructorPut ( e.getKey ( ) , e.getValue ( ) ) ; } }
static void preload ( ) { android.util.Log.d ( com.android.internal.os.ZygoteInit.TAG , "begin preload" ) ; com.android.internal.os.ZygoteInit.preloadClasses ( ) ; com.android.internal.os.ZygoteInit.preloadResources ( ) ; com.android.internal.os.ZygoteInit.preloadOpenGL ( ) ; com.android.internal.os.ZygoteInit.preloadSharedLibraries ( ) ; android.webkit.WebViewFactory.prepareWebViewInZygote ( ) ; android.util.Log.d ( com.android.internal.os.ZygoteInit.TAG , "end preload" ) ; }
public void finish ( @ javax.annotation.Nonnull java.io.OutputStream out ) throws java.io.IOException { dexResult.prepare ( cstManager.getCstStrings ( ) , cstManager.getCstFieldRefs ( ) , cstManager.getCstMethodRefs ( ) , cstManager.getCstTypes ( ) ) ; if ( ! ( cstManager.validate ( dexResult ) ) ) { throw new java.lang.AssertionError ( ) ; } dexResult.writeTo ( out , null , false ) ; finished = true ; }
private static int longCompareTo ( long value1 , long value2 ) { return value1 > value2 ? 1 : value1 < value2 ? - 1 : 0 ; }
public void init ( boolean forEncryption , org.bouncycastle.crypto.CipherParameters privParam , org.bouncycastle.crypto.CipherParameters pubParam , org.bouncycastle.crypto.CipherParameters param ) { this . forEncryption = forEncryption ; this . privParam = privParam ; this . pubParam = pubParam ; this . param = ( ( org.bouncycastle.crypto.params.IESParameters ) ( param ) ) ; this . V = new byte [ 0 ] ; }
private void skipGeneric ( ) { int nestingLevel = 1 ; do { char c = descriptor.charAt ( ( ( index ) ++ ) ) ; switch ( c ) { case proguard.classfile.ClassConstants.INTERNAL_TYPE_GENERIC_START : nestingLevel ++ ; break ; case proguard.classfile.ClassConstants.INTERNAL_TYPE_GENERIC_END : nestingLevel -- ; break ; } } while ( nestingLevel > 0 ) ; }
public void testToString ( ) { assertEquals ( "[]" , new java.util.concurrent.CopyOnWriteArraySet ( ) . toString ( ) ) ; java.util.concurrent.CopyOnWriteArraySet full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; java.lang.String s = full.toString ( ) ; for ( int i = 0 ; i < 3 ; ++ i ) assertTrue ( s.contains ( java.lang.String.valueOf ( i ) ) ) ; assertEquals ( new java.util.ArrayList ( full ) . toString ( ) , full.toString ( ) ) ; }
public void onDevicesChange ( ) { mDeviceList = sdk.getDevices ( ) ; addDeviceMenuListener ( mDeviceCombo ) ; }
private boolean IsFreeSpaceAvailable ( ) { java.io.File dataDir = android.os.Environment.getDataDirectory ( ) ; @ java.lang.SuppressWarnings ( value = "deprecation" ) long lowThreshold = android.os.storage.StorageManager.from ( mContext ) . getStorageLowBytes ( dataDir ) ; if ( lowThreshold == 0 ) { throw new java.lang.IllegalStateException ( "Invalid low memory threshold" ) ; } long usableSpace = dataDir.getUsableSpace ( ) ; return usableSpace >= lowThreshold ; }
public void testCdmaEnhancedPrivacyVoiceCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_HAS_CDMA_VOICE_PRIVACY ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveOutgoingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; assertTrue ( Call.Details.hasProperty ( mInCallServiceFixtureX.getCall ( ids.mCallId ) . getProperties ( ) , Call.Details.PROPERTY_HAS_CDMA_VOICE_PRIVACY ) ) ; }
protected void sendData ( java.lang.String destAddr , java.lang.String scAddr , int destPort , byte [ ] data , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent ) { com.android.internal.telephony.cdma.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu ( scAddr , destAddr , destPort , data , ( deliveryIntent != null ) ) ; sendSubmitPdu ( pdu , sentIntent , deliveryIntent , destAddr ) ; }
private static void repeatConstMethodType0 ( java.lang.invoke.MethodType expected ) { java.lang.System.out.print ( "repeatConstMethodType0(" ) ; java.lang.System.out.print ( expected ) ; java.lang.System.out.println ( ")" ) ; for ( int i = 0 ; i < 12000 ; ++ i ) { java.lang.invoke.MethodType actual = Main.methodType0 ( ) ; if ( ! ( actual.equals ( expected ) ) ) { java.lang.System.out.print ( "Expected: " ) ; java.lang.System.out.println ( expected ) ; java.lang.System.out.print ( "Actual: " ) ; java.lang.System.out.println ( actual ) ; Main.unreachable ( ) ; } } }
public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration create ( @ com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationChooser chooser , @ com.android.annotations.NonNull org.eclipse.core.resources.IFile file ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration = com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration.copy ( chooser.getConfiguration ( ) ) ; com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources resources = chooser.getResources ( ) ; com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher ( chooser , configuration , file , resources , false ) ; if ( ( configuration.mEditedConfig ) == null ) { configuration.mEditedConfig = new com.android.ide.common.resources.configuration.FolderConfiguration ( ) ; } matcher.adaptConfigSelection ( true ) ; return configuration ; }
public void dump ( java.io.PrintWriter out ) { out.println ( ( ( "Last sweep " + ( com.android.server.wifi.hotspot2.Utils.toHMS ( ( ( mClock.getElapsedSinceBootMillis ( ) ) - ( mLastSweep ) ) ) ) ) + " ago." ) ) ; for ( com.android.server.wifi.hotspot2.ANQPData anqpData : mANQPCache.values ( ) ) { out.println ( anqpData ) ; } }
public android.app.ContextImpl getSystemContext ( ) { synchronized ( this ) { if ( ( android.app.ActivityThread.mSystemContext ) == null ) { android.app.ContextImpl context = android.app.ContextImpl.createSystemContext ( this ) ; android.app.LoadedApk info = new android.app.LoadedApk ( this , "android" , context , null , android.content.res.CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO ) ; context.init ( info , null , this ) ; context.getResources ( ) . updateConfiguration ( getConfiguration ( ) , getDisplayMetricsLocked ( Display.DEFAULT_DISPLAY , CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO ) ) ; android.app.ActivityThread.mSystemContext = context ; } } return android.app.ActivityThread.mSystemContext ; }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.lang.String host ) throws java.security.cert.CertificateException { return checkTrusted ( chain , authType , host , false ) ; }
public static android.icu.util.UResourceBundle getBundleInstance ( java.lang.String baseName , java.util.Locale locale ) { if ( baseName == null ) { baseName = android.icu.impl.ICUResourceBundle.ICU_BASE_NAME ; } android.icu.util.ULocale uloc = ( locale == null ) ? android.icu.util.ULocale.getDefault ( ) : android.icu.util.ULocale.forLocale ( locale ) ; return android.icu.util.UResourceBundle.getBundleInstance ( baseName , uloc.toString ( ) , ICUResourceBundle.ICU_DATA_CLASS_LOADER , false ) ; }
public void validateCopyConstructorWithValidSource ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration sourceConfig = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; sourceConfig.homeSp = android.net.wifi.hotspot2.PasspointConfigurationTest.createHomeSp ( ) ; sourceConfig.credential = android.net.wifi.hotspot2.PasspointConfigurationTest.createCredential ( ) ; android.net.wifi.hotspot2.PasspointConfiguration copyConfig = new android.net.wifi.hotspot2.PasspointConfiguration ( sourceConfig ) ; org.junit.Assert.assertTrue ( copyConfig.equals ( sourceConfig ) ) ; }
private void addActiveLog ( java.lang.String packageName , boolean enable ) { synchronized ( mActiveLogs ) { if ( ( mActiveLogs.size ( ) ) > 10 ) { mActiveLogs.remove ( ) ; } mActiveLogs.add ( new com.android.server.BluetoothManagerService.ActiveLog ( packageName , enable , java.lang.System.currentTimeMillis ( ) ) ) ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { if ( ( mCurrentDevice ) != null ) { com.android.ddmuilib.ScreenShotDialog dlg = new com.android.ddmuilib.ScreenShotDialog ( shell ) ; dlg.open ( mCurrentDevice ) ; } }
private void handleSessionEnd ( ) { com.android.internal.telephony.cat.CatLog.d ( this , ( "SESSION END on " + ( mSlotId ) ) ) ; mCurrntCmd = mMenuCmd ; android.content.Intent intent = new android.content.Intent ( AppInterface.CAT_SESSION_END_ACTION ) ; intent.putExtra ( "SLOT_ID" , mSlotId ) ; mContext.sendBroadcast ( intent , AppInterface.STK_PERMISSION ) ; }
public boolean connectAudio ( ) { if ( ( ( mService ) != null ) && ( isEnabled ( ) ) ) { try { return mService.connectAudio ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHeadset.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothHeadset.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothHeadset.DBG ) android.util.Log.d ( android.bluetooth.BluetoothHeadset.TAG , android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return false ; }
public com.google.common.collect.SortedMultiset < E > subMultiset ( E fromElement , com.google.common.collect.BoundType fromBoundType , E toElement , com.google.common.collect.BoundType toBoundType ) { return forwardMultiset ( ) . subMultiset ( toElement , toBoundType , fromElement , fromBoundType ) . descendingMultiset ( ) ; }
public void testParseNonAscii ( ) throws java.lang.Exception { assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( "＋1 (650) 253-0000" , RegionCode.SG ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( "1 (650) 253­-0000" , RegionCode.US ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( ( "＋１　（６５０）" + ( "　２５３－０００" + "０" ) ) , RegionCode.SG ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( ( "＋１　（６５０）" + ( "　２５３ー０００" + "０" ) ) , RegionCode.SG ) ) ; assertEquals ( com.google.i18n.phonenumbers.PhoneNumberUtilTest.US_NUMBER , phoneUtil.parse ( ( "᠑ ᠖᠕᠐ " + "᠒᠕᠓ ᠐᠐᠐᠐" ) , RegionCode.US ) ) ; }
protected java.lang.String getName ( ) { return com.android.bluetooth.hdp.HealthService.TAG ; }
public void setClientCertificateAlias ( java.lang.String alias ) { setFieldValue ( android.net.wifi.WifiEnterpriseConfig.CLIENT_CERT_KEY , alias , android.net.wifi.WifiEnterpriseConfig.CLIENT_CERT_PREFIX ) ; setFieldValue ( android.net.wifi.WifiEnterpriseConfig.PRIVATE_KEY_ID_KEY , alias , Credentials.USER_PRIVATE_KEY ) ; if ( android.text.TextUtils.isEmpty ( alias ) ) { mFields.put ( android.net.wifi.WifiEnterpriseConfig.ENGINE_KEY , android.net.wifi.WifiEnterpriseConfig.ENGINE_DISABLE ) ; mFields.put ( android.net.wifi.WifiEnterpriseConfig.ENGINE_ID_KEY , android.net.wifi.WifiEnterpriseConfig.EMPTY_VALUE ) ; } else { mFields.put ( android.net.wifi.WifiEnterpriseConfig.ENGINE_KEY , android.net.wifi.WifiEnterpriseConfig.ENGINE_ENABLE ) ; mFields.put ( android.net.wifi.WifiEnterpriseConfig.ENGINE_ID_KEY , convertToQuotedString ( android.net.wifi.WifiEnterpriseConfig.ENGINE_ID_KEYSTORE ) ) ; } }
public void run ( ) { mHandler.removeCallbacks ( this ) ; final boolean succeded ; synchronized ( mInstallLock ) { succeded = deleteApplicationCacheFilesLI ( packageName ) ; } if ( observer != null ) { try { observer.onRemoveCompleted ( packageName , succeded ) ; } catch ( android.os.RemoteException e ) { android.util.Log.i ( com.android.server.pm.PackageManagerService.TAG , "Observer no longer exists." ) ; } } }
final void put ( double [ ] src , int srcOffset , int doubleCount ) { int byteCount = checkPutBounds ( SizeOf.DOUBLE , src.length , srcOffset , doubleCount ) ; this . block.pokeDoubleArray ( ( ( offset ) + ( position ) ) , src , srcOffset , doubleCount , order.needsSwap ) ; position += byteCount ; }
public java.lang.String getType ( android.net.Uri url ) { switch ( com.android.providers.telephony.TelephonyProvider.s_urlMatcher.match ( url ) ) { case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY : case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY_USING_SUBID : return "vnd.android.cursor.dir/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_ID : case com.android.providers.telephony.TelephonyProvider.URL_FILTERED_ID : return "vnd.android.cursor.item/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE : return "vnd.android.cursor.item/telephony-carrier" ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown URL " + url ) ) ; } }
public void parseCacheHeaders_cacheControlMustRevalidate ( ) { long now = java.lang.System.currentTimeMillis ( ) ; headers.put ( "Date" , com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date ( now ) ) ; headers.put ( "Expires" , com.android.volley.toolbox.HttpHeaderParserTest.rfc1123Date ( ( now + ( com.android.volley.toolbox.HttpHeaderParserTest.ONE_HOUR_MILLIS ) ) ) ) ; headers.put ( "Cache-Control" , "must-revalidate" ) ; com.android.volley.Cache.Entry entry = com.android.volley.toolbox.HttpHeaderParser.parseCacheHeaders ( response ) ; assertNotNull ( entry ) ; assertNull ( entry.etag ) ; assertEqualsWithin ( now , entry.ttl , com.android.volley.toolbox.HttpHeaderParserTest.ONE_MINUTE_MILLIS ) ; assertEquals ( entry.softTtl , entry.ttl ) ; }
protected boolean cleanup ( ) { if ( mNativeAvailable ) { cleanupNative ( ) ; mNativeAvailable = false ; } if ( ( mInputDevices ) != null ) { mInputDevices.clear ( ) ; } com.android.bluetooth.hid.HidService.clearHidService ( ) ; return true ; }
public static com.android.dialer.contactactions.IntentModule newCallModule ( android.content.Context context , java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.dialer.callintent.CallInitiationType.Type initiationType ) { return new com.android.dialer.contactactions.IntentModule ( context , com.android.dialer.precall.PreCall.getIntent ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , initiationType ) . setPhoneAccountHandle ( phoneAccountHandle ) ) , R.string.call , R.drawable.quantum_ic_call_white_24 ) ; }
public static void setEndpointIdentificationAlgorithm ( javax.net.ssl.SSLParameters params , java.lang.String endpointIdentificationAlgorithm ) { params.setEndpointIdentificationAlgorithm ( endpointIdentificationAlgorithm ) ; }
public boolean checkAndSet ( java.lang.String value , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config ) { java.util.regex.Matcher m = com.android.ide.eclipse.adt.internal.resources.configurations.ScreenDimensionQualifier.sDimensionPattern.matcher ( value ) ; if ( m.matches ( ) ) { java.lang.String d1 = m.group ( 1 ) ; java.lang.String d2 = m.group ( 2 ) ; com.android.ide.eclipse.adt.internal.resources.configurations.ScreenDimensionQualifier qualifier = com.android.ide.eclipse.adt.internal.resources.configurations.ScreenDimensionQualifier.getQualifier ( d1 , d2 ) ; if ( qualifier != null ) { config.setScreenDimensionQualifier ( qualifier ) ; return true ; } } return false ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } java.lang.String prefix = "" ; if ( options.coreLibrary ) { prefix = "__desugar__/" ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( prefix ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.Writer writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; reader.accept ( visitor , 0 ) ; java.lang.String name = entry.getName ( ) ; name = rewriter.unprefix ( name ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.Writer writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , null ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; java.lang.String name = ( lambdaFixer.getInternalName ( ) ) + ".class" ; name = rewriter.unprefix ( name ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
public void checkValidity ( ) { if ( ! ( ( ( ( ( ( parent ) instanceof com.android.jack.ir.ast.JLocal ) || ( ( parent ) instanceof com.android.jack.ir.ast.JParameter ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JMethod ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JField ) ) || ( ( parent ) instanceof com.android.jack.ir.ast.JCastOperation ) ) ) { throw new com.android.jack.ir.InternalCompilerException ( this , "Invalid parent" ) ; } }
public static void setDefault ( com.ibm.icu.util.ULocale.Category category , java.util.Locale newLocale ) { if ( com.ibm.icu.util.ULocale.JDKLocaleHelper.isJava7orNewer ) { java.lang.Object cat = null ; switch ( category ) { case DISPLAY : cat = com.ibm.icu.util.ULocale.JDKLocaleHelper.eDISPLAY ; break ; case FORMAT : cat = com.ibm.icu.util.ULocale.JDKLocaleHelper.eFORMAT ; break ; } if ( cat != null ) { try { com.ibm.icu.util.ULocale.JDKLocaleHelper.mSetDefault.invoke ( null , cat , newLocale ) ; } catch ( java.lang.reflect.InvocationTargetException e ) { } catch ( java.lang.IllegalArgumentException e ) { } catch ( java.lang.IllegalAccessException e ) { } } } }
public void testFormatIpv4MappedAddress ( ) throws java.lang.Exception { byte [ ] mappedAddress = new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , - 1 , 127 , 0 , 0 , 1 } ; assertEquals ( "127.0.0.1" , formatIpAddress ( mappedAddress ) ) ; }
private static boolean isCommittedInChainedCalls ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull lombok.ast.MethodInvocation node ) { lombok.ast.Node parent = node.getParent ( ) ; while ( parent instanceof lombok.ast.MethodInvocation ) { lombok.ast.MethodInvocation methodInvocation = ( ( lombok.ast.MethodInvocation ) ( parent ) ) ; if ( ( com.android.tools.lint.checks.CleanupDetector.isTransactionCommitMethodCall ( context , methodInvocation ) ) || ( com.android.tools.lint.checks.CleanupDetector.isShowFragmentMethodCall ( context , methodInvocation ) ) ) { return true ; } parent = parent.getParent ( ) ; } return false ; }
public void registerForDataRoamingOff ( android.os.Handler h , int what , java.lang.Object obj ) { android.os.Registrant r = new android.os.Registrant ( h , what , obj ) ; mDataRoamingOffRegistrants.add ( r ) ; if ( ! ( mSS.getDataRoaming ( ) ) ) { r.notifyRegistrant ( ) ; } }
boolean hasCallbackAlreadyHappened ( int callback ) { synchronized ( mLocalLock ) { java.util.Iterator < java.lang.Integer > it = mCallbackQueue.iterator ( ) ; while ( it.hasNext ( ) ) { if ( ( it.next ( ) ) == callback ) { return true ; } } } return false ; }
public void getDataRegistrationStateResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.DataRegStateResult dataRegResponse ) { responseStrings ( responseInfo , java.lang.Integer.toString ( dataRegResponse.regState ) , java.lang.Integer.toString ( dataRegResponse.lac ) , java.lang.Integer.toString ( dataRegResponse.cid ) , java.lang.Integer.toString ( dataRegResponse.rat ) , java.lang.Integer.toString ( dataRegResponse.reasonDataDenied ) , java.lang.Integer.toString ( dataRegResponse.maxDataCalls ) , java.lang.Integer.toString ( dataRegResponse.tac ) , java.lang.Integer.toString ( dataRegResponse.phyCid ) , java.lang.Integer.toString ( dataRegResponse.eci ) , java.lang.Integer.toString ( dataRegResponse.csgid ) , java.lang.Integer.toString ( dataRegResponse.tadv ) ) ; }
static void rethrow ( final java.lang.Throwable ex ) { if ( ex != null ) { if ( ex instanceof java.lang.Error ) throw ( ( java.lang.Error ) ( ex ) ) ; if ( ex instanceof java.lang.RuntimeException ) throw ( ( java.lang.RuntimeException ) ( ex ) ) ; throw java.util.concurrent.ForkJoinTask.uncheckedThrowable ( ex , java.lang.RuntimeException.class ) ; } }
public static void main ( java.lang.String [ ] args ) { Main.testFindClassOnAttachedNativeThread ( ) ; Main.testFindFieldOnAttachedNativeThread ( ) ; Main.testCallStaticVoidMethodOnSubClass ( ) ; Main.testGetMirandaMethod ( ) ; Main.testZeroLengthByteBuffers ( ) ; Main.testByteMethod ( ) ; Main.testShortMethod ( ) ; Main.testBooleanMethod ( ) ; Main.testCharMethod ( ) ; Main.testEnvironment ( ) ; Main.testNewStringObject ( ) ; Main.testSignalHandler ( ) ; Main.testGetErrorByLoadInvalidLibrary ( ) ; }
public void registerForRecordsLoaded ( android.os.Handler h , int what , java.lang.Object obj ) { if ( mDestroyed.get ( ) ) { return ; } android.os.Registrant r = new android.os.Registrant ( h , what , obj ) ; mRecordsLoadedRegistrants.add ( r ) ; if ( ( ( mRecordsToLoad ) == 0 ) && ( ( mRecordsRequested ) == true ) ) { r.notifyRegistrant ( new android.os.AsyncResult ( null , null , null ) ) ; } }
void tearDown ( ) { mNm.cancelAll ( ) ; deleteChannel ( ) ; com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . resetData ( ) ; }
public static java.lang.String map2AlgName ( java.lang.String oid ) { java.lang.String algUC = org.apache.harmony.security.utils.AlgNameMapper.oid2AlgMap.get ( oid ) ; if ( algUC != null ) { return org.apache.harmony.security.utils.AlgNameMapper.algAliasesMap.get ( algUC ) ; } org.apache.harmony.security.utils.AlgNameMapperSource s = org.apache.harmony.security.utils.AlgNameMapper.source ; if ( s != null ) { return s.mapOidToName ( oid ) ; } return null ; }
public void removePackageFromPreferred ( java.lang.String packageName ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.SET_PREFERRED_APPLICATIONS , null ) ; synchronized ( mPackages ) { android.content.pm.PackageParser.Package p = mPackages.get ( packageName ) ; if ( p == null ) { return ; } if ( ( p.mPreferredOrder ) > 0 ) { com.android.server.PackageManagerService.PackageSetting ps = ( ( com.android.server.PackageManagerService.PackageSetting ) ( p.mExtras ) ) ; if ( ps != null ) { mSettings.mPreferredPackages.remove ( ps ) ; p.mPreferredOrder = 0 ; updatePreferredIndicesLP ( ) ; mSettings.writeLP ( ) ; } } } }
private void grow ( int minCapacity ) { int oldCapacity = buf.length ; int newCapacity = oldCapacity << 1 ; if ( ( newCapacity - minCapacity ) < 0 ) newCapacity = minCapacity ; if ( newCapacity < 0 ) { if ( minCapacity < 0 ) throw new java.lang.OutOfMemoryError ( ) ; newCapacity = java.lang.Integer.MAX_VALUE ; } buf = java.util.Arrays.copyOf ( buf , newCapacity ) ; }
public void test_accept ( ) throws java.lang.Exception { java.net.ServerSocket s = new java.net.ServerSocket ( 0 ) ; new libcore.java.net.ConcurrentCloseTest.Killer ( s ) . start ( ) ; try { java.lang.System.err.println ( "accept..." ) ; s.accept ( ) ; fail ( "accept returned!" ) ; } catch ( java.net.SocketException expected ) { assertEquals ( "Socket closed" , expected.getMessage ( ) ) ; } }
public void testResetBatteryLevel_testResetBeforeUpdate ( ) { com.android.bluetooth.btservice.RemoteDevices remoteDevices = new com.android.bluetooth.btservice.RemoteDevices ( mAdapterService ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; remoteDevices.resetBatteryLevel ( mDevice1 ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
public void notInBadgingOutput ( ) { java.util.List < java.lang.String > strings = com.google.common.collect.Lists.newArrayList ( "" ) ; com.android.build.gradle.integration.common.truth.FakeFailureStrategy failure = new com.android.build.gradle.integration.common.truth.FakeFailureStrategy ( ) ; java.io.File file = new java.io.File ( "foo" ) ; com.android.build.gradle.integration.common.truth.ApkSubject subject = new com.android.build.gradle.integration.common.truth.ApkSubject ( failure , file ) ; failure.reset ( ) ; subject.checkMaxSdkVersion ( strings , 1 ) ; com.google.common.truth.Truth.assertThat ( failure.message ) . is ( "maxSdkVersion not found in badging output for <foo>" ) ; }
public static android.telephony.MbmsStreamingManager create ( android.content.Context context , android.telephony.mbms.IMbmsStreamingManagerCallback listener , java.lang.String streamingAppName ) throws android.telephony.mbms.MbmsException { int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId ( ) ; android.telephony.MbmsStreamingManager manager = new android.telephony.MbmsStreamingManager ( context , listener , streamingAppName , subId ) ; manager.bindAndInitialize ( ) ; return manager ; }
public final org.jf.dexlib2.iface.reference.FieldReference field_literal ( ) throws org.jf.smali.RecognitionException { org.jf.dexlib2.iface.reference.FieldReference value = null ; org.jf.dexlib2.immutable.reference.ImmutableFieldReference fully_qualified_field208 = null ; try { { match ( input , org.jf.smali.smaliTreeWalker.I_ENCODED_FIELD , org.jf.smali.smaliTreeWalker.FOLLOW_I_ENCODED_FIELD_in_field_literal3569 ) ; match ( input , Token.DOWN , null ) ; pushFollow ( org.jf.smali.smaliTreeWalker.FOLLOW_fully_qualified_field_in_field_literal3571 ) ; fully_qualified_field208 = fully_qualified_field ( ) ; ( state._fsp ) -- ; match ( input , Token.UP , null ) ; value = fully_qualified_field208 ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public boolean implies ( java.security.Permission permission ) { if ( ! ( permission instanceof javax.crypto.CryptoPermission ) ) { return false ; } javax.crypto.CryptoPermission cryptoPerm = ( ( javax.crypto.CryptoPermission ) ( permission ) ) ; java.security.PermissionCollection pc = getPermissionCollection ( cryptoPerm.getAlgorithm ( ) ) ; return pc.implies ( cryptoPerm ) ; }
private boolean waitForObject ( ) { while ( true ) { java.lang.Object object = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject ; if ( object != null ) { return true ; } synchronized ( this ) { try { wait ( ) ; } catch ( java.lang.InterruptedException e ) { return false ; } catch ( java.lang.OutOfMemoryError e ) { return false ; } } } }
private void extractFuzzyImage ( java.lang.String name ) { android.graphics.Bitmap mBitmap = android.graphics.Bitmap.createBitmap ( buffers.inputImage.getWidth ( ) , buffers.inputImage.getHeight ( ) , Bitmap.Config.ARGB_8888 ) ; android.renderscript.Allocation mAllocation = android.renderscript.Allocation.createFromBitmap ( renderScript , mBitmap ) ; scriptC.forEach_PackFuzzyImage ( mAllocation ) ; mAllocation.copyTo ( mBitmap ) ; android.renderscript.cts.refocus.MediaStoreSaver.savePNG ( mBitmap , "fuzzyF32" , name , renderScript.getApplicationContext ( ) ) ; }
public native void set ( long millis ) ;
private void displayPage ( int index ) { org.eclipse.swt.widgets.Composite page = mPages.get ( index ) ; if ( page != null ) { mStackLayout.topControl = page ; mPagesRootComposite.layout ( true ) ; if ( ! ( mInternalPageChange ) ) { mInternalPageChange = true ; mPageList.setSelection ( index ) ; mInternalPageChange = false ; } } }
public void setSoWriteTimeout ( int writeTimeoutMilliseconds ) throws java.net.SocketException { this . writeTimeoutMilliseconds = writeTimeoutMilliseconds ; android.system.StructTimeval tv = android.system.StructTimeval.fromMillis ( writeTimeoutMilliseconds ) ; try { Libcore.os.setsockoptTimeval ( getFileDescriptor$ ( ) , android.system.OsConstants.SOL_SOCKET , android.system.OsConstants.SO_SNDTIMEO , tv ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsSocketException ( ) ; } }
void foo1 ( int [ ] array , int start , int end , boolean expectInterpreter ) { for ( int i = start ; i < end ; i ++ ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ i ] = 1 ; sum += array [ i ] ; } }
public void keyguardWaitingForActivityDrawn ( ) { enforceNotIsolatedCaller ( "keyguardWaitingForActivityDrawn" ) ; final long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( this ) { if ( DEBUG_LOCKSCREEN ) logLockScreen ( "" ) ; mWindowManager.keyguardWaitingForActivityDrawn ( ) ; if ( ( mLockScreenShown ) == ( com.android.server.am.ActivityManagerService.LOCK_SCREEN_SHOWN ) ) { mLockScreenShown = com.android.server.am.ActivityManagerService.LOCK_SCREEN_LEAVING ; updateSleepIfNeededLocked ( ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } }
private boolean runPerformanceQuick ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s ) { boolean pass = true ; for ( com.android.rs.test.UT_reduce.TestDescription td : performanceTests ) { pass &= run ( td , RS , s , ( ( com.android.rs.test.UT_reduce.maxSeedsPerTest ) * ( td.seed ) ) , td.defSize ) ; } return pass ; }
protected void runTestImpl ( final com.android.cts.Test test ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException { try { if ( ! ( mTestStop ) ) { mCurrentTestSuite = test.getTestSuite ( ) ; mCurrentTestSuite.run ( mDevice , test ) ; } } catch ( com.android.cts.DeviceDisconnectedException e ) { cleanUp ( ) ; throw e ; } }
private void readStack ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , int stackIdx ) throws java.io.IOException , java.lang.IndexOutOfBoundsException { writeLocalRef ( getStackVariable ( frame , stackIdx ) ) ; }
public void testSet1_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.set ( ( - 1 ) , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
public void remove ( @ javax.annotation.Nonnegative int index ) { index ++ ; plan.remove ( index ) ; currentTagValidityIdx = index - 1 ; constraintTagValidityIdx = index ; }
private static java.lang.String getPathFromBaseDir ( @ javax.annotation.Nonnull java.lang.String baseDir , @ javax.annotation.Nonnull java.lang.String path ) { java.util.List < java.io.File > pathList = com.android.jack.shrob.proguard.GrammarActions.getPathFromBaseDirAsList ( baseDir , path ) ; java.lang.StringBuffer sb = new java.lang.StringBuffer ( ) ; for ( java.util.Iterator < java.io.File > iter = pathList.iterator ( ) ; iter.hasNext ( ) ; ) { sb.append ( iter.next ( ) . getAbsolutePath ( ) ) ; if ( iter.hasNext ( ) ) { sb.append ( java.io.File.pathSeparatorChar ) ; } } return sb.toString ( ) ; }
public void run ( ) { for ( int i = ( nodes.size ( ) ) - 1 ; i >= 0 ; i -- ) { final com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode node = uiLastNode [ 0 ] = nodes.get ( i ) ; doDownInternal ( node , selectXmlNode , uiSearchRoot , false ) ; } }
private boolean userExists ( int userId ) { try { android.content.pm.UserInfo user = android.app.AppGlobals.getPackageManager ( ) . getUser ( userId ) ; return user != null ; } catch ( android.os.RemoteException re ) { } return false ; }
public java.util.Iterator < java.util.Map.Entry < C , java.util.Map < R , V > > > iterator ( ) { return new com.google.common.collect.TransformedIterator < C , java.util.Map.Entry < C , java.util.Map < R , V > > > ( columnKeySet ( ) . iterator ( ) ) { @ java.lang.Override java.util.Map.Entry < C , java.util.Map < R , V > > transform ( C columnKey ) { return new com.google.common.collect.ImmutableEntry < C , java.util.Map < R , V > > ( columnKey , column ( columnKey ) ) ; } } ; }
void replySucceeded ( android.os.Message msg ) { if ( ( msg.replyTo ) != null ) { android.os.Message reply = android.os.Message.obtain ( ) ; reply.what = android.net.wifi.WifiScanner.CMD_OP_SUCCEEDED ; reply.arg2 = msg.arg2 ; if ( ( msg.obj ) != null ) { reply.obj = msg.obj ; } try { msg.replyTo.send ( reply ) ; } catch ( android.os.RemoteException e ) { } } else { } }
public void testAesCbcHmacSha384Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 , getAuthKey ( 384 ) , 192 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth ) ; }
void clearValue ( java.lang.String optionName , java.util.Map < java.lang.String , com.google.devtools.common.options.OptionsParser.OptionValueDescription > clearedValues ) throws com.google.devtools.common.options.OptionsParsingException { java.lang.reflect.Field field = optionsData.getFieldFromName ( optionName ) ; if ( field == null ) { throw new java.lang.IllegalArgumentException ( ( ( "No such option '" + optionName ) + "'" ) ) ; } com.google.devtools.common.options.Option option = field.getAnnotation ( com.google.devtools.common.options.Option.class ) ; clearValue ( field , option , clearedValues ) ; }
public boolean setPriority ( android.bluetooth.BluetoothDevice device , int priority ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; Settings.Global.putInt ( getContentResolver ( ) , Settings.Global.getBluetoothInputDevicePriorityKey ( device.getAddress ( ) ) , priority ) ; if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( ( ( "Saved priority " + device ) + " = " ) + priority ) ) ; return true ; }
public void testHandleEquality ( ) { byte [ ] handleBytes = new byte [ ] { - 1 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 } ; com.android.tools.rpclib.binary.Handle handle1 = new com.android.tools.rpclib.binary.Handle ( handleBytes ) ; com.android.tools.rpclib.binary.Handle handle2 = new com.android.tools.rpclib.binary.Handle ( handleBytes ) ; assertEquals ( handle1 , handle2 ) ; }
public final int readUnsignedShort ( ) throws java.io.IOException { int ch1 = in.read ( ) ; int ch2 = in.read ( ) ; if ( ( ch1 | ch2 ) < 0 ) throw new java.io.EOFException ( ) ; return ( ch1 << 8 ) + ( ch2 << 0 ) ; }
synchronized boolean sendReport ( int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , ( "sendReport(): id=" + id ) ) ; return sendReportNative ( id , data ) ; }
public sun.misc.Resource getResource ( java.lang.String name , boolean check ) { if ( sun.misc.URLClassPath.DEBUG ) { java.lang.System.err.println ( ( ( "URLClassPath.getResource(\"" + name ) + "\")" ) ) ; } sun.misc.URLClassPath.Loader loader ; for ( int i = 0 ; ( loader = getLoader ( i ) ) != null ; i ++ ) { sun.misc.Resource res = loader.getResource ( name , check ) ; if ( res != null ) { return res ; } } return null ; }
private void cmdDumpsys ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { final android.net.ConnectivityMetricsEvent [ ] events ; synchronized ( mLock ) { events = mEventLog.toArray ( ) ; } for ( android.net.ConnectivityMetricsEvent ev : events ) { pw.println ( ev.toString ( ) ) ; } if ( ( mNetdListener ) != null ) { mNetdListener.list ( pw ) ; } }
public void requestAudioFocusForCall ( int streamType , int durationHint ) { android.media.IAudioService service = android.media.AudioManager.getService ( ) ; try { service.requestAudioFocus ( new android.media.AudioAttributes.Builder ( ) . setInternalLegacyStreamType ( streamType ) . build ( ) , durationHint , mICallBack , null , MediaFocusControl.IN_VOICE_COMM_FOCUS_ID , mApplicationContext.getOpPackageName ( ) , android.media.AudioManager.AUDIOFOCUS_FLAG_LOCK , null ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.media.AudioManager.TAG , "Can't call requestAudioFocusForCall() on AudioService:" , e ) ; } }
public boolean visitNode ( lombok.ast.Node node ) { return ( mEscapes ) || ( super . visitNode ( node ) ) ; }
private static boolean isIncrementalCompilation ( @ javax.annotation.Nonnull com.android.jack.Options options ) { if ( ( ! ( options.getEcjArguments ( ) . isEmpty ( ) ) ) && ( com.android.jack.experimental.incremental.JackIncremental.getCompilerState ( ) . exists ( ) ) ) { return true ; } return false ; }
protected int getCaretOffset ( java.lang.String fileContent , java.lang.String caretLocation ) { int caretDelta = caretLocation.indexOf ( "^" ) ; assertTrue ( caretLocation , ( caretDelta != ( - 1 ) ) ) ; java.lang.String caretContext = ( caretLocation.substring ( 0 , caretDelta ) ) + ( caretLocation.substring ( ( caretDelta + 1 ) ) ) ; int caretContextIndex = fileContent.indexOf ( caretContext ) ; assertTrue ( ( ( "Caret content " + caretContext ) + " not found in file" ) , ( caretContextIndex != ( - 1 ) ) ) ; return caretContextIndex + caretDelta ; }
public void testProxyWithConnectionClose ( ) throws java.io.IOException { libcore.javax.net.ssl.TestSSLContext testSSLContext = libcore.javax.net.ssl.TestSSLContext.create ( ) ; server.useHttps ( testSSLContext.serverContext.getSocketFactory ( ) , true ) ; server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setSocketPolicy ( SocketPolicy.UPGRADE_TO_SSL_AT_END ) . clearHeaders ( ) ) ; server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "this response comes via a proxy" ) ) ; server.play ( ) ; java.net.URL url = new java.net.URL ( "https://android.com/foo" ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( server.toProxyAddress ( ) ) ) ) ; connection.setRequestProperty ( "Connection" , "close" ) ; connection.setSSLSocketFactory ( testSSLContext.clientContext.getSocketFactory ( ) ) ; connection.setHostnameVerifier ( new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier ( ) ) ; assertContent ( "this response comes via a proxy" , connection ) ; }
public void callSessionRttModifyRequestReceived ( android.telephony.ims.ImsCallSession session , android.telephony.ims.ImsCallProfile callProfile ) { com.android.ims.ImsCall.Listener listener ; synchronized ( this ) { listener = mListener ; } if ( ! ( callProfile.mMediaProfile.isRttCall ( ) ) ) { logi ( ( "callSessionRttModifyRequestReceived:: ignoring request, requested profile " + "is not RTT." ) ) ; return ; } if ( listener != null ) { try { listener.onRttModifyRequestReceived ( this ) ; } catch ( java.lang.Throwable t ) { loge ( "callSessionRttModifyRequestReceived:: " , t ) ; } } }
public long getPhotoId ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstExtendedCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return 0 ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public boolean onMenuItemClick ( android.view.MenuItem item ) { int state = mTelephonyManager.getDataState ( ) ; switch ( state ) { case android.telephony.TelephonyManager.DATA_CONNECTED : phone.setDataEnabled ( false ) ; break ; case android.telephony.TelephonyManager.DATA_DISCONNECTED : phone.setDataEnabled ( true ) ; break ; default : break ; } return true ; }
private void startConnectSession ( ) { if ( Constants.USE_TCP_DEBUG ) { mConnectThread = new com.android.bluetooth.opp.BluetoothOppTransfer.SocketConnectThread ( "localhost" , Constants.TCP_DEBUG_PORT , 0 ) ; mConnectThread.start ( ) ; } else { mConnectThread = new com.android.bluetooth.opp.BluetoothOppTransfer.SocketConnectThread ( mBatch.mDestination , false ) ; mConnectThread.start ( ) ; } }
public void dispose ( ) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = mService.get ( ) ; if ( streamingService == null ) { return ; } try { streamingService.dispose ( mSubscriptionId ) ; } catch ( android.os.RemoteException e ) { } mService.set ( null ) ; }
public void binderDied ( ) { try { synchronized ( mWindowMap ) { com.android.server.WindowManagerService.WindowState win = windowForClientLocked ( mSession , mClient ) ; android.util.Log.i ( com.android.server.WindowManagerService.TAG , ( "WIN DEATH: " + win ) ) ; if ( win != null ) { removeWindowLocked ( mSession , win ) ; } } } catch ( java.lang.IllegalArgumentException ex ) { } }
public android.net.wifi.WifiLinkLayerStats getWifiLinkLayerStats ( java.lang.String iface ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getWifiLinkLayerStats ( ) ; } else { if ( iface == null ) return null ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getWifiLinkLayerStatsNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } } }
public android.content.res.Resources getResources ( ) { return resources ; }
private java.io.File createDex ( vogar.Action action , java.io.File actionJar ) { java.io.File dex = run.localFile ( action , "classes.dex" ) ; vogar.Classpath classesToDex = vogar.Classpath.of ( actionJar ) ; classesToDex.addAll ( run.classpath ) ; if ( run.useJack ) { throw new java.lang.UnsupportedOperationException ( "Jack support for --mode=activity not yet implemented" ) ; } java.io.File localTempDir = run.localDir ( action.getName ( ) ) ; vogar.Classpath dependentCp = new vogar.Classpath ( ) ; run.androidSdk.dex ( run.multidex , dex , localTempDir , classesToDex , dependentCp ) ; return dex ; }
android.media.MediaMetadata getCurrentMetaData ( ) { synchronized ( mLock ) { if ( ( ( mAddressedPlayer ) != null ) && ( ( mAddressedPlayer.getCurrentTrack ( ) ) != null ) ) { android.media.MediaMetadata mmd = mAddressedPlayer.getCurrentTrack ( ) . getMediaMetaData ( ) ; if ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.TAG , ( "getCurrentMetaData mmd " + mmd ) ) ; } } return com.android.bluetooth.avrcpcontroller.AvrcpControllerStateMachine.mEmptyMMD ; } }
public void testInnerClassSingleParameter ( ) throws java.lang.Exception { java.lang.reflect.Constructor < ? > constructor = libcore.java.lang.reflect.ParameterTest.InnerClass.class . getDeclaredConstructor ( libcore.java.lang.reflect.ParameterTest.class ) ; libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper helper = new libcore.java.lang.reflect.ParameterTest.ExecutableTestHelper ( constructor ) ; helper.checkStandardParametersBehavior ( ) . checkParametersToString ( "[libcore.java.lang.reflect.ParameterTest arg0]" ) . checkParametersMetadataNotAvailable ( ) . checkParametersNoVarArgs ( ) ; helper.getParameterTestHelper ( 0 ) . checkGetType ( libcore.java.lang.reflect.ParameterTest.class ) . checkGetParameterizedType ( "class libcore.java.lang.reflect.ParameterTest" ) ; }
public void destroy ( ) { mHandler.removeMessages ( com.android.internal.app.ResolverComparator.RESOLVER_RANKER_SERVICE_RESULT ) ; mHandler.removeMessages ( com.android.internal.app.ResolverComparator.RESOLVER_RANKER_RESULT_TIMEOUT ) ; if ( ( mConnection ) != null ) { mContext.unbindService ( mConnection ) ; mConnection.destroy ( ) ; } if ( com.android.internal.app.ResolverComparator.DEBUG ) { android.util.Log.d ( com.android.internal.app.ResolverComparator.TAG , "Unbinded Resolver Ranker." ) ; } }
public void notInBadgingOutput ( ) { java.util.List < java.lang.String > strings = com.google.common.collect.Lists.newArrayList ( "" ) ; com.android.build.gradle.integration.common.truth.ApkSubjectTest.FakeFailureStrategy failure = new com.android.build.gradle.integration.common.truth.ApkSubjectTest.FakeFailureStrategy ( ) ; java.io.File file = new java.io.File ( "foo" ) ; com.android.build.gradle.integration.common.truth.ApkSubject subject = new com.android.build.gradle.integration.common.truth.ApkSubject ( failure , file ) ; subject.checkMaxSdkVersion ( strings , 1 ) ; com.google.common.truth.Truth.assertThat ( failure.message ) . is ( "maxSdkVersion not found in badging output for <foo>" ) ; }
public void enableSystemApp ( @ android.annotation.NonNull android.content.ComponentName admin , java.lang.String packageName ) { throwIfParentInstance ( "enableSystemApp" ) ; if ( ( mService ) != null ) { try { mService.enableSystemApp ( admin , packageName ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public void onSelected ( ) { if ( ( com.android.tv.menu.BaseCardView.isAttachedToWindow ( ) ) && ( ( com.android.tv.menu.BaseCardView.getVisibility ( ) ) == ( android.view.View.VISIBLE ) ) ) { startFocusAnimation ( com.android.tv.menu.BaseCardView.SCALE_FACTOR_1F ) ; } else { cancelFocusAnimationIfAny ( ) ; setFocusAnimatedValue ( com.android.tv.menu.BaseCardView.SCALE_FACTOR_1F ) ; } }
private boolean compareIcuRoundingIncrement ( java.text.DecimalFormat other ) { java.math.BigDecimal increment = this . icuDecimalFormat.getRoundingIncrement ( ) ; if ( increment != null ) { return ( ( other.getRoundingIncrement ( ) ) != null ) && ( increment.equals ( other.getRoundingIncrement ( ) ) ) ; } return ( other.getRoundingIncrement ( ) ) == null ; }
public java.util.List < android.content.pm.ResolveInfo > queryIntent ( android.content.Intent intent , java.lang.String resolvedType , int flags , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return null ; mFlags = flags ; return super . queryIntent ( intent , resolvedType , ( ( flags & ( android.content.pm.PackageManager.MATCH_DEFAULT_ONLY ) ) != 0 ) , userId ) ; }
public void testDensityOnlyWithCustomDeviceDensity ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 320 , 2 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 480 , 3 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 1 , "foo" ) ; assertEquals ( match , result ) ; }
public void showXml ( org.eclipse.swt.events.MouseEvent e ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutPoint p = com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint.create ( this , e ) . toLayout ( ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo vi = mViewHierarchy.findViewInfoAt ( p ) ; if ( ( vi == null ) || ( vi.isRoot ( ) ) ) { return ; } org.w3c.dom.Node xmlNode = vi.getXmlNode ( ) ; if ( xmlNode != null ) { boolean found = mLayoutEditor.show ( xmlNode ) ; if ( ! found ) { getDisplay ( ) . beep ( ) ; } } }
public void test_getInstanceLjava_lang_String01 ( ) throws java.security.NoSuchAlgorithmException { if ( ! ( tests.api.javax.net.ssl.KeyManagerFactory1Test.DEFSupported ) ) { fail ( tests.api.javax.net.ssl.KeyManagerFactory1Test.NotSupportedMsg ) ; return ; } javax.net.ssl.KeyManagerFactory keyMF ; for ( int i = 0 ; i < ( tests.api.javax.net.ssl.KeyManagerFactory1Test.validValues.length ) ; i ++ ) { keyMF = javax.net.ssl.KeyManagerFactory.getInstance ( tests.api.javax.net.ssl.KeyManagerFactory1Test.validValues [ i ] ) ; assertNotNull ( "No KeyManagerFactory created" , keyMF ) ; assertEquals ( "Invalid algorithm" , keyMF.getAlgorithm ( ) , tests.api.javax.net.ssl.KeyManagerFactory1Test.validValues [ i ] ) ; } }
static int wtf ( int logId , java.lang.String tag , java.lang.String msg , java.lang.Throwable tr , boolean localStack , boolean system ) { android.util.Log.TerribleFailure what = new android.util.Log.TerribleFailure ( msg , tr ) ; int bytes = android.util.Log.println_native ( logId , android.util.Log.ASSERT , tag , ( ( msg + '\n' ) + ( android.util.Log.getStackTraceString ( ( localStack ? what : tr ) ) ) ) ) ; android.util.Log.sWtfHandler.onTerribleFailure ( tag , what , system ) ; return bytes ; }
public void testSendUuidIntent ( ) { mRemoteDevices.updateUuids ( mDevice1 ) ; if ( ( android.os.Looper.myLooper ( ) ) != null ) { android.os.Looper.myLooper ( ) . quitSafely ( ) ; } android.os.Looper.loop ( ) ; verify ( mAdapterService ) . sendBroadcast ( any ( ) , anyString ( ) ) ; verifyNoMoreInteractions ( mAdapterService ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , byte [ ] data ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFrom" ) ; validateIsInt8 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private static int [ ] getOrientations ( final android.app.Activity activity ) { final int originalOrientation = activity.getResources ( ) . getConfiguration ( ) . orientation ; final int newOrientation = ( originalOrientation == ( android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT ) ) ? android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE : android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT ; return new int [ ] { originalOrientation , newOrientation } ; }
public void testIsEmergencyNumberWithPlusSign_US ( ) { assertFalse ( shortInfo.isEmergencyNumber ( "+911" , RegionCode.US ) ) ; assertFalse ( shortInfo.isEmergencyNumber ( "＋911" , RegionCode.US ) ) ; assertFalse ( shortInfo.isEmergencyNumber ( " +911" , RegionCode.US ) ) ; assertFalse ( shortInfo.isEmergencyNumber ( "+112" , RegionCode.US ) ) ; assertFalse ( shortInfo.isEmergencyNumber ( "+999" , RegionCode.US ) ) ; }
public void testGradle ( ) throws java.lang.Exception { java.io.File project = getProjectDir ( null , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "multiproject/library.properties=>build.gradle" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" ) ; checkDriver ( ( "" + ( ( ( ( ( "\n" + "Scanning MainTest_testGradle: \n" ) + "MainTest_testGradle: Error: \"MainTest_testGradle\" is a Gradle project. " ) + "To correctly analyze Gradle projects, you should run \"gradlew :lint\" " ) + "instead. [LintError]\n" ) + "1 errors, 0 warnings\n" ) ) , "" , com.android.tools.lint.LintCliFlags.ERRNO_SUCCESS , new java.lang.String [ ] { "--check" , "HardcodedText" , project.getPath ( ) } ) ; }
public void outjars ( java.util.Map filterArgs , java.lang.Object outJarFiles ) throws proguard.gradle.ParseException { this . outJarFiles.add ( getProject ( ) . file ( outJarFiles ) ) ; this . outJarFilters.add ( filterArgs ) ; this . inJarCounts.add ( java.lang.Integer.valueOf ( inJarFiles.size ( ) ) ) ; }
public com.tonicsystems.jarjar.FieldVisitor visitField ( int access , java.lang.String name , java.lang.String desc , java.lang.String signature , java.lang.Object value ) { handleObject ( value ) ; return new com.tonicsystems.jarjar.FieldVisitor ( Opcodes.ASM4 ) { @ java.lang.Override public com.tonicsystems.jarjar.AnnotationVisitor visitAnnotation ( java.lang.String desc , boolean visible ) { return com.tonicsystems.jarjar.StringReader.this . visitAnnotation ( desc , visible ) ; } } ; }
public void shutdown ( ) { mPackageUsage.write ( true ) ; }
static int closedFormNestedNN ( int n ) { int closed = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { closed ++ ; } } return closed ; }
public java.lang.String wifiNanCreateNetworkSpecifier ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "role" , description = "The role of the device: Initiator (0) or Responder (1)" ) java.lang.Integer role , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "sessionId" , description = "The session ID returned when session was created using publish or subscribe" ) java.lang.Integer sessionId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "peerId" , description = "The ID of the peer (obtained through OnMatch or OnMessageReceived" ) java.lang.Integer peerId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "token" , description = "Arbitrary token message to be sent to peer as part of data-path creation process" ) java.lang.String token ) { android.net.wifi.nan.WifiNanSession session = mSessions.get ( sessionId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling wifiNanStartRanging before session (session ID " + sessionId ) + " is ready" ) ) ; } byte [ ] bytes = token.getBytes ( ) ; return session.createNetworkSpecifier ( role , peerId , bytes ) ; }
private boolean contains ( int [ ] array , int elem ) { for ( int i = 0 ; i < ( array.length ) ; i ++ ) { if ( elem == ( array [ i ] ) ) { return true ; } } return false ; }
public void sendUrgentData ( int data ) throws java.io.IOException { if ( ! ( getImpl ( ) . supportsUrgentData ( ) ) ) { throw new java.net.SocketException ( "Urgent data not supported" ) ; } getImpl ( ) . sendUrgentData ( data ) ; }
public static int testTrueBranch ( int x , int y ) { int z ; if ( Main.inlineTrue ( ) ) { z = x + y ; } else { z = x - y ; java.lang.System.nanoTime ( ) ; } return z ; }
private static java.lang.String getOsVersion ( ) { java.util.regex.Pattern p = java.util.regex.Pattern.compile ( "(\\d+)\\.(\\d+).*" ) ; java.lang.String osVers = java.lang.System.getProperty ( "os.version" ) ; java.util.regex.Matcher m = p.matcher ( osVers ) ; if ( m.matches ( ) ) { return ( ( m.group ( 1 ) ) + '.' ) + ( m.group ( 2 ) ) ; } return null ; }
public void testFocusCallIsNullWhenRemoveTheFocusCall ( ) { requestFocus ( mActiveCall , null ) ; assertEquals ( mActiveCall , mFocusManagerUT.getCurrentFocusCall ( ) ) ; mCallsManagerListener.onCallRemoved ( ( ( com.android.server.telecom.Call ) ( mActiveCall ) ) ) ; waitForHandlerAction ( mFocusManagerUT.getHandler ( ) , com.android.server.telecom.tests.ConnectionServiceFocusManagerTest.CHECK_HANDLER_INTERVAL_MS ) ; assertNull ( mFocusManagerUT.getCurrentFocusCall ( ) ) ; }
void assertCSConnections ( final int numConnections ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return numConnections ; } @ java.lang.Override public java.lang.Object actual ( ) { return android.telecom.cts.CtsConnectionService.getAllConnectionsFromTelecom ( ) . size ( ) ; } } , android.telecom.cts.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( ( "ConnectionService should contain " + numConnections ) + " connections." ) ) ; }
public void testConstructor ( ) throws java.lang.Exception { try { libcore.io.ClassPathURLStreamHandler streamHandler = new libcore.io.ClassPathURLStreamHandler ( "Missing.file" ) ; fail ( "Should throw IOException" ) ; } catch ( java.io.IOException expected ) { } java.lang.String fileName = jarFile.getCanonicalPath ( ) ; libcore.io.ClassPathURLStreamHandler streamHandler = new libcore.io.ClassPathURLStreamHandler ( fileName ) ; streamHandler.close ( ) ; }
public void testPullNonPullableExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; java.lang.Thread.sleep ( com.android.server.telecom.tests.TEST_TIMEOUT ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.never ( ) ) . pullExternalCall ( ids.mConnectionId ) ; }
public void testAbbreviate ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( IconDetector.ICON_DENSITIES ) ; assertEquals ( ( "res/drawable-hdpi: Warning: Missing the following drawables in drawable-hdpi: " + ( ( ( ( ( "ic_launcher10.png, ic_launcher11.png, ic_launcher12.png, ic_launcher2.png, " + "ic_launcher3.png... (6 more) [IconDensities]\n" ) + "res/drawable-xhdpi: Warning: Missing the following drawables in drawable-xhdpi: " ) + "ic_launcher10.png, ic_launcher11.png, ic_launcher12.png, ic_launcher2.png, " ) + "ic_launcher3.png... (6 more) [IconDensities]\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( "apicheck/minsdk4.xml=>AndroidManifest.xml" , "res/drawable/ic_launcher.png=>res/drawable-hdpi/ic_launcher1.png" , "res/drawable/ic_launcher.png=>res/drawable-xhdpi/ic_launcher1.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher1.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher2.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher3.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher4.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher5.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher6.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher7.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher8.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher9.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher10.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher11.png" , "res/drawable/ic_launcher.png=>res/drawable-mdpi/ic_launcher12.png" ) ) ; }
private void checkAndEnableDataCallAfterEmergencyCallDropped ( ) { if ( mIsInEmergencyCall ) { mIsInEmergencyCall = false ; java.lang.String inEcm = android.os.SystemProperties.get ( TelephonyProperties.PROPERTY_INECM_MODE , "false" ) ; if ( Phone.DEBUG_PHONE ) { log ( ( "checkAndEnableDataCallAfterEmergencyCallDropped,inEcm=" + inEcm ) ) ; } if ( ( inEcm.compareTo ( "false" ) ) == 0 ) { mPhone.mDcTracker.setInternalDataEnabled ( true ) ; mPhone.notifyEmergencyCallRegistrants ( false ) ; } mPhone.sendEmergencyCallStateChange ( false ) ; } }
public android.net.NetworkScorerAppManager.NetworkScorerAppData getScorer ( java.lang.String packageName ) { if ( android.text.TextUtils.isEmpty ( packageName ) ) { return null ; } java.util.Collection < android.net.NetworkScorerAppManager.NetworkScorerAppData > applications = getAllValidScorers ( ) ; for ( android.net.NetworkScorerAppManager.NetworkScorerAppData app : applications ) { if ( packageName.equals ( app.mPackageName ) ) { return app ; } } return null ; }
public void testAcceptRingingCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( mFakeCallsManager.getFirstCallWithState ( org.mockito.Matchers.any ( int [ ] . class ) ) ) . thenReturn ( call ) ; int fakeVideoState = 29578215 ; org.mockito.Mockito.when ( call.getVideoState ( ) ) . thenReturn ( fakeVideoState ) ; mTSIBinder.acceptRingingCall ( ) ; org.mockito.Mockito.verify ( call ) . answer ( fakeVideoState ) ; }
public void run ( ) { com.google.api.services.oauth2.model.Userinfoplus userInfo = null ; try { userInfo = userInfoService.userinfo ( ) . get ( ) . execute ( ) ; } catch ( java.io.IOException e ) { com.google.gct.login.GoogleLoginUtils.LOG.error ( "Error retrieving user information." , e ) ; } if ( ( userInfo != null ) && ( ( userInfo.getId ( ) ) != null ) ) { callback.setProperty ( userInfo ) ; } else { callback.setProperty ( null ) ; } }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "connect(): not allowed for non-active user" ) ; return false ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; return false ; }
protected com.intellij.updater.ValidationResult doValidate ( java.io.File toFile ) { com.intellij.updater.ValidationResult result = doValidateAccess ( toFile , ValidationResult.Action.CREATE ) ; if ( result != null ) return result ; if ( toFile.exists ( ) ) { com.intellij.updater.ValidationResult [ ] options = ( myPatch.isStrict ( ) ) ? new com.intellij.updater.ValidationResult.Option [ ] { ValidationResult.Option.REPLACE } : new com.intellij.updater.ValidationResult.Option [ ] { ValidationResult.Option.REPLACE , ValidationResult.Option.KEEP } ; return new com.intellij.updater.ValidationResult ( ValidationResult.Kind.CONFLICT , myPath , ValidationResult.Action.CREATE , ValidationResult.ALREADY_EXISTS_MESSAGE , options ) ; } return null ; }
public void onFormResubmission ( android.os.Message dontResend , android.os.Message resend ) { org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onFormResubmission" ) ; mWebViewClient.onFormResubmission ( mWebView , dontResend , resend ) ; org.chromium.base.TraceEvent.end ( ) ; }
public < E extends T > java.util.List < E > sortedCopy ( java.lang.Iterable < E > iterable ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E [ ] array = ( ( E [ ] ) ( com.google.common.collect.Iterables.toArray ( iterable ) ) ) ; java.util.Arrays.sort ( array , this ) ; return com.google.common.collect.Lists.newArrayList ( java.util.Arrays.asList ( array ) ) ; }
static boolean containsValueImpl ( java.util.Map < ? , ? > map , @ javax.annotation.Nullable java.lang.Object value ) { for ( java.util.Map.Entry < ? , ? > entry : map.entrySet ( ) ) { if ( com.google.common.base.Objects.equal ( entry.getValue ( ) , value ) ) { return true ; } } return false ; }
com.android.sched.vfs.DirectFS.DirectVFile getVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.DirectFS.DirectVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileException { assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) ) != 0 ; java.io.File file = new java.io.File ( parent.getNativePath ( ) , name ) ; com.android.sched.util.file.AbstractStreamFile.check ( file , new com.android.sched.util.location.FileLocation ( file ) ) ; return new com.android.sched.vfs.DirectFS.DirectVFile ( this , parent , name ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; result.append ( "(" ) ; for ( int i = 0 , typesLength = types.length ; i < typesLength ; i ++ ) { result.append ( ( ( buffer ) != null ? buffer.typeNames ( ) . get ( types [ i ] ) : types [ i ] ) ) ; } result.append ( ")" ) ; return result.toString ( ) ; }
private void closeStream ( java.io.InputStream is ) { if ( is != null ) { if ( is instanceof com.android.sdklib.io.NonClosingInputStream ) { ( ( com.android.sdklib.io.NonClosingInputStream ) ( is ) ) . setCloseBehavior ( CloseBehavior.CLOSE ) ; } try { is.close ( ) ; } catch ( java.io.IOException ignore ) { } } }
static java.lang.String outOfBounds ( int index , int size ) { return ( ( "Index: " + index ) + ", Size: " ) + size ; }
public java.lang.String print ( boolean shortFormat ) { return "memory" ; }
public void testTimedoutAfterUnregisteredNetworkRequest ( ) { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build ( ) ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback ( ) ; mCm.requestNetwork ( nr , networkCallback , 10 ) ; mCm.unregisterNetworkCallback ( networkCallback ) ; com.android.server.ConnectivityServiceTest.sleepFor ( 15 ) ; networkCallback.assertNoCallback ( ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( TRANSPORT_WIFI ) ; mWiFiNetworkAgent.connect ( false ) ; networkCallback.assertNoCallback ( ) ; }
public void test_getDisplayCountry ( ) { assertTrue ( ( "Returned incorrect country: " + ( testLocale.getDisplayCountry ( ) ) ) , testLocale.getDisplayCountry ( ) . equals ( "Canada" ) ) ; java.util.Locale l_countryCD = new java.util.Locale ( "" , "CD" ) ; assertEquals ( "Congo - Kinshasa" , l_countryCD.getDisplayCountry ( ) ) ; }
public void testStageInstallWithErrorCode_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro distro1 = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 2 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( distro1 ) ) ; assertInstallDistroStaged ( distro1 ) ; com.android.timezone.distro.TimeZoneDistro distro2 = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.OLDER_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer.stageInstallWithErrorCode ( distro2 ) ) ; assertInstallDistroStaged ( distro1 ) ; assertNoInstalledDistro ( ) ; }
public java.util.zip.ZipOutputStream getOutputStream ( ) { assert ( file ) != null ; clearRemover ( ) ; try { return new com.android.sched.util.file.OutputZipFile.CustomZipOutputStream ( new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( file ) ) , compression ) ; } catch ( java.io.FileNotFoundException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public void verifyModifyOriginalConfig ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; config.homeSp.fqdn = "test1" ; mProvider = new com.android.server.wifi.hotspot2.PasspointProvider ( config ) ; verifyInstalledConfig ( config , true ) ; config.homeSp.fqdn = "test2" ; verifyInstalledConfig ( config , false ) ; }
public static void setUp ( ) throws com.android.jack.IllegalOptionsException , com.android.sched.util.config.ConfigurationException { com.android.jack.Options options = new com.android.jack.Options ( ) ; com.android.jack.Types.hooks = new com.android.sched.util.RunnableHooks ( ) ; options.checkValidity ( com.android.jack.Types.hooks ) ; options.getConfigBuilder ( com.android.jack.Types.hooks ) . setDebug ( ) ; com.android.sched.util.config.ThreadConfig.setConfig ( options.getConfig ( ) ) ; com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; session.getLookup ( ) . getOrCreatePackage ( "java/lang" ) ; }
public void setChoices ( double [ ] limits , java.lang.String [ ] formats ) { if ( ( limits.length ) != ( formats.length ) ) { throw new java.lang.IllegalArgumentException ( ) ; } choiceLimits = limits ; choiceFormats = formats ; }
public boolean setPhonebookAccessPermission ( int value ) { if ( ( android.bluetooth.BluetoothDevice.sService ) == null ) { return false ; } try { return android.bluetooth.BluetoothDevice.sService.setPhonebookAccessPermission ( this , value ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public void onOtaspChanged ( int otaspMode ) { com.android.phone.otasp.OtaspSimStateReceiver.logd ( ( "onOtaspChanged: otaspMode=" + otaspMode ) ) ; if ( ( ( otaspMode == ( com.android.internal.telephony.ServiceStateTracker.OTASP_NEEDED ) ) && ( com.android.phone.otasp.OtaspSimStateReceiver.isCarrierSupported ( ) ) ) && ( com.android.phone.PhoneGlobals.getPhone ( ) . getIccRecordsLoaded ( ) ) ) { com.android.phone.otasp.OtaspSimStateReceiver.logd ( "otasp activation required, start otaspActivationService" ) ; mContext.startService ( new android.content.Intent ( mContext , com.android.phone.otasp.OtaspActivationService.class ) ) ; } }
public static < T > T get ( java.util.Iterator < T > iterator , int position ) { com.google.common.collect.Iterators.checkNonnegative ( position ) ; int skipped = 0 ; while ( iterator.hasNext ( ) ) { T t = iterator.next ( ) ; if ( ( skipped ++ ) == position ) { return t ; } } throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( "position (" + position ) + ") must be less than the number of elements that remained (" ) + skipped ) + ")" ) ) ; }
public void setVerbosityLevel ( @ javax.annotation.Nonnull com.android.jack.api.v01.VerbosityLevel verbosityLevel ) throws com.android.jack.api.v01.ConfigurationException { com.android.jack.Options.VerbosityLevel jackVerbosityLevel ; switch ( verbosityLevel ) { case DEBUG : { jackVerbosityLevel = com.android.jack.api.v01.com.android.jack.Options.VerbosityLevel ; break ; } case ERROR : { jackVerbosityLevel = com.android.jack.api.v01.com.android.jack.Options.VerbosityLevel ; break ; } case INFO : { jackVerbosityLevel = com.android.jack.api.v01.com.android.jack.Options.VerbosityLevel ; break ; } case WARNING : { jackVerbosityLevel = com.android.jack.api.v01.com.android.jack.Options.VerbosityLevel ; break ; } default : { throw new com.android.jack.api.v01.ConfigurationException ( ( ( "Verbosity level '" + verbosityLevel ) + "' is unsupported" ) ) ; } } options.setVerbosityLevel ( jackVerbosityLevel ) ; }
public void testAdbInstallFile ( ) throws java.lang.Exception { final java.util.List < java.lang.String > output ; }
public final void dumpSizes ( ) { for ( com.android.tools.perflib.heap.ClassObj theClass : mClassesById.values ( ) ) { int size = 0 ; for ( com.android.tools.perflib.heap.Instance instance : theClass.mInstances ) { size += instance.getCompositeSize ( ) ; } if ( size > 0 ) { java.lang.System.out.println ( ( ( ( ( theClass + ": base " ) + ( theClass.getSize ( ) ) ) + ", composite " ) + size ) ) ; } } }
public boolean nvResetConfig ( int resetType ) { enforceModifyPermissionOrCarrierPrivilege ( getDefaultSubscription ( ) ) ; if ( com.android.phone.PhoneInterfaceManager.DBG ) com.android.phone.PhoneInterfaceManager.log ( ( "nvResetConfig: type " + resetType ) ) ; java.lang.Boolean success = ( ( java.lang.Boolean ) ( sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_NV_RESET_CONFIG , resetType ) ) ) ; if ( com.android.phone.PhoneInterfaceManager.DBG ) com.android.phone.PhoneInterfaceManager.log ( ( ( ( "nvResetConfig: type " + resetType ) + ' ' ) + ( success ? "ok" : "fail" ) ) ) ; return success ; }
public static com.android.newbubble.NewBubbleInfo.Builder from ( @ android.support.annotation.NonNull com.android.newbubble.NewBubbleInfo bubbleInfo ) { return com.android.newbubble.NewBubbleInfo.builder ( ) . setPrimaryColor ( bubbleInfo.getPrimaryColor ( ) ) . setPrimaryIcon ( bubbleInfo.getPrimaryIcon ( ) ) . setStartingYPosition ( bubbleInfo.getStartingYPosition ( ) ) . setActions ( bubbleInfo.getActions ( ) ) . setAvatar ( bubbleInfo.getAvatar ( ) ) ; }
public static void recordSparseSlowlyHistogram ( java.lang.String name , int sample ) { if ( ( org.chromium.base.metrics.RecordHistogram.sDisabledBy ) != null ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordSparseHistogram ( name , key , sample ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
public void copy ( @ javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile , @ javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile ) throws com.android.sched.util.file.CannotCloseException , com.android.sched.util.file.CannotReadException , com.android.sched.util.file.CannotWriteException , com.android.sched.util.file.WrongPermissionException { if ( srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile ) { vfs.copy ( ( ( com.android.sched.vfs.DeflateFS.DeflateVFile ) ( srcFile ) ) . getWrappedFile ( ) , dstFile.getWrappedFile ( ) ) ; } else { super . copy ( srcFile , dstFile ) ; } }
public boolean equals ( java.lang.Object other ) { if ( ! ( other instanceof java.lang.reflect.AbstractMethod ) ) { return false ; } java.lang.reflect.AbstractMethod otherMethod = ( ( java.lang.reflect.AbstractMethod ) ( other ) ) ; return ( ( this . declaringClass ) == ( otherMethod.declaringClass ) ) && ( ( this . dexMethodIndex ) == ( otherMethod.dexMethodIndex ) ) ; }
public void testLaunchToSide ( ) throws java.lang.Exception { launchActivityInDockStack ( android.server.cts.ActivityManagerDockedStackTests.LAUNCH_TO_SIDE_ACTIVITY_NAME ) ; launchActivityToSide ( android.server.cts.ActivityManagerDockedStackTests.LAUNCH_TO_SIDE_ACTIVITY_NAME ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { android.server.cts.ActivityManagerDockedStackTests.LAUNCH_TO_SIDE_ACTIVITY_NAME } ) ; mAmWmState.assertContainsStack ( "Must contain fullscreen stack." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.assertContainsStack ( "Must contain docked stack." , android.server.cts.DOCKED_STACK_ID ) ; }
private libcore.tzdata.update2.DistroVersion readDistroVersion ( java.io.File distroDir ) throws java.io.IOException , libcore.tzdata.update2.DistroException { android.util.Slog.i ( logTag , "Reading distro format version" ) ; java.io.File distroVersionFile = new java.io.File ( distroDir , TimeZoneDistro.DISTRO_VERSION_FILE_NAME ) ; if ( ! ( distroVersionFile.exists ( ) ) ) { throw new libcore.tzdata.update2.DistroException ( ( "No distro version file found: " + distroVersionFile ) ) ; } byte [ ] versionBytes = libcore.tzdata.update2.FileUtils.readBytes ( distroVersionFile , DistroVersion.DISTRO_VERSION_FILE_LENGTH ) ; return libcore.tzdata.update2.DistroVersion.fromBytes ( versionBytes ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.lang.System.setProperty ( "dexmaker.dexcache" , getInstrumentation ( ) . getTargetContext ( ) . getCacheDir ( ) . getPath ( ) ) ; java.lang.ClassLoader newClassLoader = getInstrumentation ( ) . getClass ( ) . getClassLoader ( ) ; java.lang.Thread.currentThread ( ) . setContextClassLoader ( newClassLoader ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.when ( mMockContext.getPackageManager ( ) ) . thenReturn ( mMockPm ) ; }
public void testEndCallWithNonRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( null ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( ) ; }
protected java.util.List < org.eclipse.ltk.core.refactoring.Change > computeChanges ( ) { final com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler template = mValues.template ; template.setBackupMergedFiles ( false ) ; java.util.Map < java.lang.String , java.lang.Object > paramMap = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; addProjectInfo ( paramMap ) ; com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.addDirectoryParameters ( paramMap , getProject ( ) ) ; return template.render ( mProject , paramMap ) ; }
private void validateIsInt16 ( ) { if ( ( ( mType.mElement.mType ) == ( Element.DataType.SIGNED_16 ) ) || ( ( mType.mElement.mType ) == ( Element.DataType.UNSIGNED_16 ) ) ) { return ; } throw new android.renderscript.RSIllegalArgumentException ( ( "16 bit integer source does not match allocation type " + ( mType.mElement.mType ) ) ) ; }
public void sendSingleScanAllChannelsRequest ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = createRequest ( channelsToSpec ( 2400 , 2450 , 5150 , 5175 , 5600 , 5650 , 5660 ) , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; doSuccessfulSingleScan ( requestSettings , computeSingleScanNativeSettings ( requestSettings ) , com.android.server.wifi.ScanResults.create ( 0 , true , 2400 , 5150 , 5175 ) ) ; }
public java.util.Set < java.io.File > getCompileClasspath ( @ com.android.annotations.NonNull com.android.builder.core.VariantConfiguration < ? , ? , ? > variantConfiguration ) { java.util.Set < java.io.File > compileClasspath = variantConfiguration.getCompileClasspath ( ) ; if ( variantConfiguration.getRenderscriptSupportMode ( ) ) { java.io.File renderScriptSupportJar = getRenderScriptSupportJar ( ) ; java.util.Set < java.io.File > fullJars = com.google.common.collect.Sets.newHashSetWithExpectedSize ( ( ( compileClasspath.size ( ) ) + 1 ) ) ; fullJars.addAll ( compileClasspath ) ; if ( renderScriptSupportJar != null ) { fullJars.add ( renderScriptSupportJar ) ; } compileClasspath = fullJars ; } return compileClasspath ; }
private void responseSignalStrength ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , com.android.internal.telephony.V1_0.SignalStrength sigStrength ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { android.telephony.SignalStrength ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = com.android.internal.telephony.RIL.convertHalSignalStrength ( sigStrength ) ; sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void invokeOemRilRequestRaw ( byte [ ] data , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW , response ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + "[" ) + ( com.android.internal.telephony.IccUtils.bytesToHexString ( data ) ) ) + "]" ) ) ; rr.mp.writeByteArray ( data ) ; send ( rr ) ; }
private static void reportTypeDef ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull lombok.ast.Node argument , @ com.android.annotations.Nullable lombok.ast.Node errorNode ) { java.lang.Object allowed = annotation.getValue ( ) ; if ( allowed instanceof java.lang.Object [ ] ) { java.lang.Object [ ] allowedValues = ( ( java.lang.Object [ ] ) ( allowed ) ) ; com.android.tools.lint.checks.SupportAnnotationDetector.reportTypeDef ( context , argument , errorNode , false , allowedValues ) ; } }
public void onWindowVisibilityChanged ( final int visibility ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onWindowVisibilityChanged ( visibility ) ; } } ) ; return ; } mAwContents.onWindowVisibilityChanged ( visibility ) ; }
public static void stopListenForWindowChanges ( com.android.hierarchyviewerlib.device.WindowUpdater.IWindowChangeListener listener , com.android.ddmlib.IDevice device ) { synchronized ( com.android.hierarchyviewerlib.device.WindowUpdater.windowChangeListeners ) { java.util.ArrayList < com.android.hierarchyviewerlib.device.WindowUpdater.IWindowChangeListener > listeners = com.android.hierarchyviewerlib.device.WindowUpdater.windowChangeListeners.get ( device ) ; listeners.remove ( listener ) ; if ( ( listeners.size ( ) ) != 0 ) { return ; } com.android.hierarchyviewerlib.device.WindowUpdater.windowChangeListeners.remove ( device ) ; } java.lang.Thread listeningThread ; synchronized ( com.android.hierarchyviewerlib.device.WindowUpdater.listeningThreads ) { listeningThread = com.android.hierarchyviewerlib.device.WindowUpdater.listeningThreads.get ( device ) ; com.android.hierarchyviewerlib.device.WindowUpdater.listeningThreads.remove ( device ) ; } listeningThread.interrupt ( ) ; }
public static int IntMatCond_IntVarVar ( int a , int b , int x , int y ) { int result = ( a > b ) ? x : y ; return result + ( a > b ? 0 : 1 ) ; }
public void setNextValueAsArrayTypeID ( long val ) { this . setNextValueAsObjectID ( val ) ; }
protected void onDestroy ( ) { super . onDestroy ( ) ; if ( ( mScreenManipulator ) != null ) { mScreenManipulator.releaseScreenOn ( ) ; mScreenManipulator.close ( ) ; } if ( mDeviceSuspendLock.isHeld ( ) ) { mDeviceSuspendLock.release ( ) ; } }
public boolean addToBlacklist ( java.lang.String bssid ) { if ( android.text.TextUtils.isEmpty ( bssid ) ) return false ; return doBooleanCommand ( ( "BLACKLIST " + bssid ) ) ; }
private static byte [ ] getActualPlainText ( java.lang.String algorithm ) { if ( ( ( ( algorithm.equals ( "AES" ) ) || ( algorithm.equals ( "AES/CBC/NOPADDING" ) ) ) || ( algorithm.equals ( "AES/CTS/NOPADDING" ) ) ) || ( algorithm.equals ( "AES/ECB/NOPADDING" ) ) ) { return libcore.javax.crypto.CipherTest.SIXTEEN_BYTE_BLOCK_PLAIN_TEXT ; } return libcore.javax.crypto.CipherTest.ORIGINAL_PLAIN_TEXT ; }
public boolean cleanup ( ) { if ( com.android.bluetooth.opp.BluetoothOppService.V ) { android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppService.TAG , "onDestroy" ) ; } getContentResolver ( ) . unregisterContentObserver ( mObserver ) ; unregisterReceiver ( mBluetoothReceiver ) ; stopListeners ( ) ; if ( ( mBatchs ) != null ) { mBatchs.clear ( ) ; } if ( ( mShares ) != null ) { mShares.clear ( ) ; } if ( ( mHandler ) != null ) { mHandler.removeCallbacksAndMessages ( null ) ; } return true ; }
public void finish ( @ javax.annotation.Nonnull java.io.OutputStream out ) throws java.io.IOException { dexResult.prepare ( cstManager.getCstIndexMaps ( ) ) ; if ( ! ( cstManager.validate ( dexResult ) ) ) { throw new java.lang.AssertionError ( ) ; } dexResult.writeTo ( out , null , false ) ; finished = true ; }
public boolean isPossibleShortNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.util.List < java.lang.String > regionCodes = getRegionCodesForCountryCode ( number.getCountryCode ( ) ) ; java.lang.String shortNumber = com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) ; for ( java.lang.String region : regionCodes ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( region ) ; if ( phoneMetadata == null ) { continue ; } if ( matcherApi.matchesPossibleNumber ( shortNumber , phoneMetadata.getGeneralDesc ( ) ) ) { return true ; } } return false ; }
public void takeScreenshot ( ) { if ( ( mState ) >= ( com.android.nfc.beam.SendUi.STATE_W4_TOUCH ) ) { return ; } mState = com.android.nfc.beam.SendUi.STATE_W4_SCREENSHOT ; new com.android.nfc.beam.SendUi.ScreenshotTask ( ) . execute ( ) ; }
private static int char32AtAndAdvance ( java.text.AttributedCharacterIterator iterator ) { char c1 = iterator.current ( ) ; iterator.next ( ) ; if ( com.ibm.icu.lang.UCharacter.isHighSurrogate ( c1 ) ) { char c2 = iterator.current ( ) ; if ( c2 != ( java.text.CharacterIterator.DONE ) ) { if ( com.ibm.icu.lang.UCharacter.isLowSurrogate ( c2 ) ) { iterator.next ( ) ; return com.ibm.icu.lang.UCharacter.toCodePoint ( c1 , c2 ) ; } } } return c1 ; }
public void testAesCbcHmacSha512Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.getKey ( 256 ) ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , android.net.cts.IpSecManagerTest.getKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , false , 1 , true ) ; }
public void testExistsOnSystem ( ) { java.io.File sh = new java.io.File ( "/system/bin/uncrypt" ) ; assertTrue ( sh.exists ( ) ) ; try { android.system.Os.stat ( sh.getAbsolutePath ( ) ) ; fail ( ) ; } catch ( libcore.java.io.android expected ) { } }
public void setView ( int type , int i , float [ ] vertexColors ) { view = new android.opengl.cts.OpenGLES20ActivityTwo.OpenGLES20View ( this , type , i , vertexColors , mLatch ) ; setContentView ( view ) ; }
public void testDeserializeProxyWasInterface ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737d00000001002e6c6962636f72652e6a6176612e696f2e53657269616c697a6" + ( ( ( ( "174696f6e5465737424576173496e74657266616365787200176a6176612e6c616e672e7265666c6" + "563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f72656" ) + "66c6563742f496e766f636174696f6e48616e646c65723b78707372003f6c6962636f72652e6a617" ) + "6612e696f2e53657269616c697a6174696f6e546573742453657269616c697a61626c65496e766f6" ) + "36174696f6e48616e646c6572e6ceffa2941ee3210200007870" ) ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.lang.ClassNotFoundException expected ) { } }
public java.util.List < com.android.resources.ResourceType > getResourceTypes ( ) { update ( ) ; if ( ( mResourceTypeList ) == null ) { java.util.Set < com.android.resources.ResourceType > keys = mResourceItems.keySet ( ) ; mResourceTypeList = new java.util.ArrayList < com.android.resources.ResourceType > ( ) ; mResourceTypeList.addAll ( keys ) ; mResourceTypeList = java.util.Collections.unmodifiableList ( mResourceTypeList ) ; } return mResourceTypeList ; }
public void enter ( ) { log ( ( "Enter Pending: " + ( getCurrentMessage ( ) . what ) ) ) ; }
private void onApnChanged ( ) { com.android.internal.telephony.DctConstants.State overallState = getOverallState ( ) ; boolean isDisconnected = ( overallState == ( DctConstants.State.IDLE ) ) || ( overallState == ( DctConstants.State.FAILED ) ) ; if ( ( mPhone ) instanceof com.android.internal.telephony.gsm.GSMPhone ) { ( ( com.android.internal.telephony.gsm.GSMPhone ) ( mPhone ) ) . updateCurrentCarrierInProvider ( ) ; } if ( DBG ) log ( "onApnChanged: createAllApnList and cleanUpAllConnections" ) ; createAllApnList ( ) ; cleanUpAllConnections ( ( ! isDisconnected ) , Phone.REASON_APN_CHANGED ) ; if ( isDisconnected ) { setupDataOnConnectableApns ( Phone.REASON_APN_CHANGED ) ; } }
public static com.android.jack.dx.rop.code.Rop opGetField ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type.getBasicType ( ) ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.GET_FIELD_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.GET_FIELD_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_BOOLEAN : return com.android.jack.dx.rop.code.Rops.GET_FIELD_BOOLEAN ; case com.android.jack.dx.rop.type.Type.BT_BYTE : return com.android.jack.dx.rop.code.Rops.GET_FIELD_BYTE ; case com.android.jack.dx.rop.type.Type.BT_CHAR : return com.android.jack.dx.rop.code.Rops.GET_FIELD_CHAR ; case com.android.jack.dx.rop.type.Type.BT_SHORT : return com.android.jack.dx.rop.code.Rops.GET_FIELD_SHORT ; } return com.android.jack.dx.rop.code.Rops.throwBadType ( type ) ; }
public int dexopt ( java.lang.String apkPath , int uid , boolean isPublic , java.lang.String instructionSet ) { if ( ! ( com.android.server.pm.Installer.isValidInstructionSet ( instructionSet ) ) ) { android.util.Slog.e ( com.android.server.pm.Installer.TAG , ( "Invalid instruction set: " + instructionSet ) ) ; return - 1 ; } return mInstaller.dexopt ( apkPath , uid , isPublic , instructionSet ) ; }
private void cleanUpUser ( int userId ) { synchronized ( mPackages ) { java.util.Set < java.util.Map.Entry < java.lang.String , com.android.server.pm.PackageSetting > > entries = mSettings.mPackages.entrySet ( ) ; for ( java.util.Map.Entry < java.lang.String , com.android.server.pm.PackageSetting > entry : entries ) { entry.getValue ( ) . removeUser ( userId ) ; } if ( mDirtyUsers.remove ( userId ) ) ; mSettings.removeUserLPr ( userId ) ; } }
private static com.android.build.gradle.internal.model.List < java.lang.String > getProductFlavorNames ( @ com.android.annotations.NonNull com.android.build.gradle.internal.variant.BaseVariantData variantData ) { com.android.build.gradle.internal.model.List < java.lang.String > flavorNames = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.android.builder.core.DefaultProductFlavor flavor : variantData.variantConfiguration.productFlavors ) { flavorNames.add ( flavor.name ) ; } return flavorNames ; }
public void testAesCbcHmacSha1Udp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth ) ; }
public void start ( ) { if ( ! ( mStarted.compareAndSet ( false , true ) ) ) { return ; } android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( WifiManager.WIFI_STATE_CHANGED_ACTION ) ; filter.addAction ( WifiManager.SCAN_RESULTS_AVAILABLE_ACTION ) ; mContext.registerReceiver ( mBroadcastReceiver , filter , null , mHandler ) ; mContentResolver.registerContentObserver ( Settings.Global.getUriFor ( Settings.Global.WIFI_WAKEUP_ENABLED ) , true , mContentObserver ) ; mWifiWakeupEnabled = getWifiWakeupEnabledSetting ( ) ; }
private void checkMessages ( java.util.List < com.android.ddmuilib.logcat.LogCatMessage > receivedMessages , com.android.ddmlib.IDevice device ) { if ( ! ( mMonitorEnabled.get ( ) ) ) { return ; } for ( com.android.ddmuilib.logcat.LogCatMessage m : receivedMessages ) { if ( isImportantMessage ( m ) ) { focusLogCatView ( device , m.getAppName ( ) ) ; mMonitorEnabled.set ( false ) ; break ; } } }
public boolean cancelPairingUserInput ( ) { if ( ( android.bluetooth.BluetoothDevice.sService ) == null ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot create pairing user input" ) ; return false ; } try { return android.bluetooth.BluetoothDevice.sService.cancelBondProcess ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public void setUiTTYMode ( android.content.Context context , int uiTtyMode , android.os.Message onComplete ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { mMmTelFeatureConnection.setUiTTYMode ( uiTtyMode , onComplete ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "setTTYMode()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void testShowDescriptionWithUrl ( ) throws java.lang.Exception { checkDriver ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "SdCardPath\n" + "----------\n" ) + "Summary: Looks for hardcoded references to /sdcard\n" ) + "\n" ) + "Priority: 6 / 10\n" ) + "Severity: Warning\n" ) + "Category: Correctness\n" ) + "\n" ) + "Your code should not reference the /sdcard path directly; instead use\n" ) + "Environment.getExternalStorageDirectory().getPath().\n" ) + "\n" ) + "Similarly, do not reference the /data/data/ path directly; it can vary in\n" ) + "multi-user scenarios. Instead, use Context.getFilesDir().getPath().\n" ) + "\n" ) + "More information: \n" ) + "http://developer.android.com/guide/topics/data/data-storage.html#filesExternal\n" ) + "\n" ) ) , "" , com.android.tools.lint.LintCliFlags.ERRNO_SUCCESS , new java.lang.String [ ] { "--show" , "SdCardPath" } ) ; }
void test ( ) { com.android.cts.verifier.notifications.MockListener.probeListenerStatus ( mContext , new com.android.cts.verifier.notifications.MockListener.StatusCatcher ( ) { @ java.lang.Override public void accept ( int result ) { if ( result == ( android.app.Activity.RESULT_OK ) ) { status = com.android.cts.verifier.notifications.InteractiveVerifierActivity.PASS ; next ( ) ; } else { logFail ( ) ; status = com.android.cts.verifier.notifications.InteractiveVerifierActivity.RETEST ; delay ( ) ; } } } ) ; delay ( ) ; }
public org.eclipse.swt.graphics.Font getFont ( java.lang.Object element , int columnIndex ) { if ( element instanceof com.android.sdkuilib.internal.repository.core.PkgItem ) { if ( ( ( ( com.android.sdkuilib.internal.repository.core.PkgItem ) ( element ) ) . getState ( ) ) == ( com.android.sdkuilib.internal.repository.core.PkgItem.PkgState.NEW ) ) { return getTreeFontItalic ( ) ; } } else if ( element instanceof java.lang.Package ) { return getTreeFontItalic ( ) ; } return super . getFont ( element ) ; }
synchronized boolean replyReport ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( ( ( "replyReport(): device=" + device ) + " type=" ) + type ) + " id=" ) + id ) ) ; } if ( ! ( checkDevice ( device ) ) ) { return false ; } return replyReportNative ( type , id , data ) ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; pRS.setMessageHandler ( mRsMessage ) ; com.android.rs.unittest.ScriptC_refcount s = new com.android.rs.unittest.ScriptC_refcount ( pRS ) ; initializeGlobals ( pRS , s ) ; s.invoke_refcount_test ( ) ; pRS.finish ( ) ; mA.destroy ( ) ; mT.destroy ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
public void setHs20 ( boolean hs20 ) { if ( hs20 ) { doBooleanCommand ( "SET HS20 1" ) ; } else { doBooleanCommand ( "SET HS20 0" ) ; } }
protected void setEnabledProtocols ( java.lang.String [ ] protocols ) { if ( protocols == null ) { throw new java.lang.IllegalArgumentException ( "protocols == null" ) ; } java.lang.String [ ] filteredProtocols = org.conscrypt.SSLParametersImpl.filterFomProtocols ( protocols , NativeCrypto.OBSOLETE_PROTOCOL_SSLV3 ) ; isEnabledProtocolsFiltered = ( protocols.length ) != ( filteredProtocols.length ) ; enabledProtocols = org.conscrypt.NativeCrypto.checkEnabledProtocols ( filteredProtocols ) . clone ( ) ; }
public void reportConnectionFailureFetchesFatesInVerboseMode ( ) { final boolean verbosityToggle = true ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.mockito.Mockito.verify ( mWifiNative ) . getTxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; org.mockito.Mockito.verify ( mWifiNative ) . getRxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; }
public static java.lang.String map2OID ( java.lang.String algName ) { org.apache.harmony.security.utils.AlgNameMapper.checkCacheVersion ( ) ; java.lang.String result = org.apache.harmony.security.utils.AlgNameMapper.alg2OidMap.get ( algName.toUpperCase ( java.util.Locale.US ) ) ; if ( result != null ) { return result ; } org.apache.harmony.security.utils.AlgNameMapperSource s = org.apache.harmony.security.utils.AlgNameMapper.source ; if ( s != null ) { return s.mapNameToOid ( algName ) ; } return null ; }
private static java.security.cert.CertPath fromEncoding ( java.io.InputStream inStream , org.apache.harmony.xnet.provider.jsse.OpenSSLX509CertPath.Encoding encoding ) throws java.security.cert.CertificateException { switch ( encoding ) { case PKCS7 : return org.apache.harmony.xnet.provider.jsse.OpenSSLX509CertPath.fromPkcs7Encoding ( inStream ) ; default : throw new java.security.cert.CertificateEncodingException ( "Unknown encoding" ) ; } }
public void test_SSLSocket_getEnabledCipherSuites ( ) throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ( ( javax.net.ssl.SSLSocketFactory ) ( javax.net.ssl.SSLSocketFactory.getDefault ( ) ) ) ; javax.net.ssl.SSLSocket ssl = ( ( javax.net.ssl.SSLSocket ) ( sf.createSocket ( ) ) ) ; java.lang.String [ ] cipherSuites = ssl.getEnabledCipherSuites ( ) ; libcore.java.security.StandardNames.assertDefaultCipherSuites ( cipherSuites ) ; assertNotSame ( cipherSuites , ssl.getEnabledCipherSuites ( ) ) ; }
public void testRunNormalInputCommandFailed ( ) { mTest.setDevice ( com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice ( ) ) ; mTest.setRunUtil ( com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil ( "which" , "python" , CommandStatus.FAILED ) ) ; try { mTest.run ( mMockInvocationListener ) ; fail ( ) ; } catch ( java.lang.RuntimeException e ) { if ( ! ( "Failed to run VTS test" . equals ( e.getMessage ( ) ) ) ) { fail ( ) ; } } catch ( com.android.tradefed.device.DeviceNotAvailableException e ) { fail ( ) ; e.printStackTrace ( ) ; } }
public static void assertArrayEquals ( java.lang.String message , int [ ] expecteds , int [ ] actuals ) { java.lang.String expectedString = java.util.Arrays.toString ( expecteds ) ; java.lang.String actualString = java.util.Arrays.toString ( actuals ) ; if ( ! ( expectedString.equals ( actualString ) ) ) { fail ( message , ( ( ( "expected " + expectedString ) + " but was " ) + actualString ) ) ; } }
public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newIndex ) { return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction ( getFormat ( ) , getOpcode ( ) , newIndex , getIndexType ( ) , getTarget ( ) , getLiteral ( ) , a , registerCount ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { final com.intellij.openapi.module.Module selectedModule = LangDataKeys.MODULE.getData ( e.getDataContext ( ) ) ; com.google.gct.idea.appengine.deploy.AppEngineUpdateDialog.show ( e.getProject ( ) , selectedModule ) ; }
public java.io.File getResourceFolder ( ) { java.io.File folder = mClient.getResourceFolder ( this ) ; if ( ( folder != null ) && ( com.android.tools.lint.detector.api.Project.isAospFrameworksProject ( mDir ) ) ) { mMinSdk = mTargetSdk = com.android.SdkConstants.HIGHEST_KNOWN_API ; folder = new java.io.File ( folder , com.android.SdkConstants.RES_FOLDER ) ; if ( ! ( folder.exists ( ) ) ) { folder = null ; } } return folder ; }
public void testV1SignedAttrsWrongContentType ( ) throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verify ( "v1-only-with-signed-attrs-wrong-content-type.apk" ) , Issue.JAR_SIG_DID_NOT_VERIFY ) ; }
public void onFindResultReceived ( int activeMatchOrdinal , int numberOfMatches , boolean isDoneCounting ) { if ( ( mFindListener ) == null ) return ; org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onFindResultReceived" ) ; mFindListener.onFindResultReceived ( activeMatchOrdinal , numberOfMatches , isDoneCounting ) ; org.chromium.base.TraceEvent.end ( ) ; }
public void onAdvertisingParametersUpdated ( int advertiserId , int status ) { handler.post ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { android.bluetooth.le.AdvertisingSet advertisingSet = mAdvertisingSets.get ( advertiserId ) ; callback.onAdvertisingParametersUpdated ( advertisingSet , status ) ; } } ) ; }
public void testGetRootId ( ) { com.android.bluetooth.avrcp.BrowsedPlayerWrapper wrapper = com.android.bluetooth.avrcp.BrowsedPlayerWrapper.wrap ( null , "test" , "test" , mConnCb ) ; verify ( mMockBrowser ) . testInit ( any ( ) , any ( ) , mBrowserConnCb.capture ( ) , any ( ) ) ; com.android.bluetooth.avrcp.MediaBrowser.ConnectionCallback browserConnCb = mBrowserConnCb.getValue ( ) ; browserConnCb.onConnected ( ) ; org.junit.Assert.assertEquals ( BrowsedPlayerWrapper.ConnectionState.CONNECTED , wrapper.getConnectionState ( ) ) ; org.junit.Assert.assertEquals ( "root_folder" , wrapper.getRootId ( ) ) ; }
public boolean equals ( java.lang.Object o ) { if ( ! ( o instanceof org.conscrypt.OpenSSLECPointContext ) ) { return false ; } final org.conscrypt.OpenSSLECPointContext other = ( ( org.conscrypt.OpenSSLECPointContext ) ( o ) ) ; if ( ! ( org.conscrypt.NativeCrypto.EC_GROUP_cmp ( group.getNativeRef ( ) , other.group.getNativeRef ( ) ) ) ) { return false ; } return org.conscrypt.NativeCrypto.EC_POINT_cmp ( group.getNativeRef ( ) , pointCtx , other.pointCtx ) ; }
public final float getFloat ( ) { checkNotFreed ( ) ; int newPosition = ( position ) + ( libcore.io.SizeOf.FLOAT ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferUnderflowException ( ) ; } float result = java.lang.Float.intBitsToFloat ( this . block.peekInt ( ( ( offset ) + ( position ) ) , order ) ) ; position = newPosition ; return result ; }
private void persistComponentNamesToSettingLocked ( java.lang.String settingName , java.util.Set < android.content.ComponentName > componentNames ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; for ( android.content.ComponentName componentName : componentNames ) { if ( ( builder.length ( ) ) > 0 ) { builder.append ( com.android.server.accessibility.AccessibilityManagerService.COMPONENT_NAME_SEPARATOR ) ; } builder.append ( componentName.flattenToShortString ( ) ) ; } Settings.Secure.putString ( mContext.getContentResolver ( ) , settingName , builder.toString ( ) ) ; }
private int convertCallState ( int callState , boolean isForegroundCall ) { switch ( callState ) { case CallState.NEW : case CallState.ABORTED : case CallState.DISCONNECTED : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_IDLE ; case CallState.ACTIVE : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_ACTIVE ; case CallState.CONNECTING : case CallState.SELECT_PHONE_ACCOUNT : case CallState.DIALING : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_ALERTING ; case CallState.ON_HOLD : return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_HELD ; case CallState.RINGING : if ( isForegroundCall ) { return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_INCOMING ; } else { return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_WAITING ; } } return com.android.server.telecom.BluetoothPhoneServiceImpl.CALL_STATE_IDLE ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JLambda x ) { lparen ( ) ; visitCollectionWithCommas ( x.getParameters ( ) . iterator ( ) ) ; rparen ( ) ; print ( " -> " ) ; accept ( x.getBody ( ) ) ; return false ; }
public void testXsdNamespaceBuilder ( ) throws java.lang.Exception { com.intellij.openapi.vfs.VirtualFile file = myFixture.copyFileToProject ( "web-app_2_5.xsd" ) ; final com.intellij.xml.index.XsdNamespaceBuilder builder = com.intellij.xml.index.XsdNamespaceBuilder.computeNamespace ( new java.io.InputStreamReader ( file.getInputStream ( ) ) ) ; assertEquals ( com.intellij.xml.index.XmlSchemaIndexTest.NS , builder.getNamespace ( ) ) ; assertEquals ( "2.5" , builder.getVersion ( ) ) ; assertEquals ( java.util.Arrays.asList ( "web-app" ) , builder.getTags ( ) ) ; }
private void responseSignalStrength ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , com.android.internal.telephony.V1_0.SignalStrength sigStrength ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { android.telephony.SignalStrength ret = com.android.internal.telephony.RIL.convertHalSignalStrength ( sigStrength ) ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public final boolean isEmpty ( ) { return false ; }
public void onResume ( ) { super . onResume ( ) ; com.android.dialer.common.LogUtil.enterBlock ( "NewCallLogFragment.onResume" ) ; registerRefreshAnnotatedCallLogReceiver ( ) ; com.android.dialer.calllog.CallLogComponent.get ( getContext ( ) ) . getRefreshAnnotatedCallLogNotifier ( ) . notify ( true ) ; if ( ( recyclerView.getAdapter ( ) ) != null ) { ( ( com.android.dialer.calllog.ui.NewCallLogAdapter ) ( recyclerView.getAdapter ( ) ) ) . clearCache ( ) ; recyclerView.getAdapter ( ) . notifyDataSetChanged ( ) ; } shouldMarkCallsRead = false ; com.android.dialer.common.concurrent.ThreadUtil.getUiThreadHandler ( ) . postDelayed ( setShouldMarkCallsReadTrue , com.android.dialer.calllog.ui.NewCallLogFragment.MARK_ALL_CALLS_READ_WAIT_MILLIS ) ; }
public byte [ ] iccExchangeSimIO ( int fileID , int command , int p1 , int p2 , int p3 , java.lang.String filePath ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccExchangeSimIO ( fileID , command , p1 , p2 , p3 , filePath ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public java.util.List < java.lang.Class < ? extends org.w3c.dom.Node > > getApplicableNodeTypes ( ) { return null ; }
public static void setTag ( java.lang.String tag ) { android.telecom.Log.TAG = tag ; }
public void testAesCbcHmacSha1Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public void onPageScrollStateChanged ( int state ) { final int count = mOnPageChangeListeners.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { mOnPageChangeListeners.get ( i ) . onPageScrollStateChanged ( state ) ; } }
protected java.lang.String getProposal ( ) { if ( mId.equals ( InefficientWeightDetector.BASELINE_WEIGHTS.getId ( ) ) ) { return com.android.ide.common.layout.LayoutConstants.VALUE_FALSE ; } return super . getProposal ( ) ; }
private static java.io.File getNoConfigProcessors ( ) throws java.lang.Exception { if ( ( com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors ) == null ) { com.android.jack.test.toolchain.Toolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain ( ) ; java.io.File processorsDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; java.io.File processorsSrcDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.annotation.processor.sample.processors" ) ; toolchain.srcToLib ( processorsDir , false , com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR , processorsSrcDir ) ; com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors = processorsDir ; } return com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors ; }
public void test_setDecimalSeparatorAlwaysShownZ ( ) { java.text.DecimalFormat df = new java.text.DecimalFormat ( "###0.##" , new java.text.DecimalFormatSymbols ( java.util.Locale.US ) ) ; assertEquals ( "Wrong default result" , "5" , df.format ( 5 ) ) ; df.setDecimalSeparatorAlwaysShown ( true ) ; assertTrue ( "Not set" , df.isDecimalSeparatorAlwaysShown ( ) ) ; assertEquals ( "Wrong set result" , "7." , df.format ( 7 ) ) ; }
private final void requestServiceBindingsLocked ( com.android.server.am.ServiceRecord r ) { java.util.Iterator < com.android.server.am.IntentBindRecord > bindings = r.bindings.values ( ) . iterator ( ) ; while ( bindings.hasNext ( ) ) { com.android.server.am.IntentBindRecord i = bindings.next ( ) ; if ( ! ( requestServiceBindingLocked ( r , i , false ) ) ) { break ; } } }
public void selectionChanged ( org.eclipse.jface.viewers.SelectionChangedEvent event ) { org.eclipse.jface.viewers.ISelection selection = event.getSelection ( ) ; getEditor ( ) . getSite ( ) . getSelectionProvider ( ) . setSelection ( selection ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.SelectionManager manager = mGraphicalEditor.getCanvasControl ( ) . getSelectionManager ( ) ; manager.setSelection ( selection ) ; }
public int dexopt ( java.lang.String apkPath , int uid , boolean isPublic , java.lang.String instructionSet , int dexoptNeeded , boolean bootComplete ) { if ( ! ( com.android.server.pm.Installer.isValidInstructionSet ( instructionSet ) ) ) { android.util.Slog.e ( com.android.server.pm.Installer.TAG , ( "Invalid instruction set: " + instructionSet ) ) ; return - 1 ; } return mInstaller.dexopt ( apkPath , uid , isPublic , instructionSet , dexoptNeeded , bootComplete ) ; }
private static void assertPartial ( byte [ ] expected , byte [ ] actual ) { for ( int i = 0 ; i < ( expected.length ) ; i ++ ) { if ( ( expected [ i ] ) != ( actual [ i ] ) ) { fail ( ( ( ( "Expected " + ( java.util.Arrays.toString ( expected ) ) ) + " but found " ) + ( java.util.Arrays.toString ( actual ) ) ) ) ; } } }
private int newBranchOffset ( int oldInstructionOffset , int oldBranchOffset ) { return ( newInstructionOffset ( ( oldInstructionOffset + oldBranchOffset ) ) ) - ( newOffset ) ; }
public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { java.lang.String action = intent.getAction ( ) ; if ( ( Telephony.Sms.Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION.equals ( action ) ) || ( Telephony.Sms.Intents.SMS_CB_RECEIVED_ACTION.equals ( action ) ) ) { handleCellBroadcastIntent ( intent ) ; } else { android.util.Log.e ( com.android.cellbroadcastreceiver.CellBroadcastAlertService.TAG , ( "Unrecognized intent action: " + action ) ) ; } stopSelf ( ) ; return START_NOT_STICKY ; }
private void initLayout ( ) { findViewById ( R.id.fab ) . setOnClickListener ( this ) ; android.support.v4.view.ViewPager pager = findViewById ( R.id.pager ) ; com.android.dialer.main.impl.MainPagerAdapter pagerAdapter = new com.android.dialer.main.impl.MainPagerAdapter ( this , getSupportFragmentManager ( ) ) ; pager.setAdapter ( pagerAdapter ) ; android.support.design.widget.TabLayout tabLayout = findViewById ( R.id.tab_layout ) ; tabLayout.setupWithViewPager ( pager ) ; android.support.v7.widget.Toolbar toolbar = findViewById ( R.id.toolbar ) ; toolbar.setPopupTheme ( android.R.style.Theme_Material_Light ) ; setSupportActionBar ( toolbar ) ; }
public java.lang.String getAttributeNamespace ( int index ) throws com.android.apksigner.AndroidBinXmlParser.XmlParserException { return getAttribute ( index ) . getNamespace ( ) ; }
public com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult isPossibleNumberWithReason ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.lang.String nationalNumber = getNationalSignificantNumber ( number ) ; int countryCode = number.getCountryCode ( ) ; if ( ! ( hasValidCountryCallingCode ( countryCode ) ) ) { return com.google.i18n.phonenumbers.PhoneNumberUtil.ValidationResult.INVALID_COUNTRY_CODE ; } java.lang.String regionCode = getRegionCodeForCountryCode ( countryCode ) ; com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = getMetadataForRegionOrCallingCode ( countryCode , regionCode ) ; return testNumberLength ( nationalNumber , metadata.getGeneralDesc ( ) ) ; }
private java.io.InputStream fetchUrl ( java.lang.String urlString , com.android.sdklib.internal.repository.DownloadCache cache , com.android.sdklib.internal.repository.ITaskMonitor monitor , java.lang.Exception [ ] outException ) { try { return cache.openCachedUrl ( urlString , monitor ) ; } catch ( java.lang.Exception e ) { if ( outException != null ) { outException [ 0 ] = e ; } } return null ; }
public void developerOptionsEnabled ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; if ( ! ( com.android.devtools.systemimage.uitest.utils.DeveloperOptionsManager.isDeveloperOptionsEnabled ( instrumentation ) ) ) { com.android.devtools.systemimage.uitest.utils.DeveloperOptionsManager.enableDeveloperOptions ( instrumentation ) ; } assertTrue ( "Developer options not enabled." , com.android.devtools.systemimage.uitest.utils.DeveloperOptionsManager.isDeveloperOptionsEnabled ( instrumentation ) ) ; }
public void destruction ( java.lang.Thread t ) throws java.io.IOException , java.lang.InterruptedException { com.android.builder.png.AaptProcess aaptProcess = mAaptProcesses.get ( java.lang.Thread.currentThread ( ) . getName ( ) ) ; if ( aaptProcess != null ) { mLogger.verbose ( "Thread(%1$s): notify aapt slave shutdown" , java.lang.Thread.currentThread ( ) . getName ( ) ) ; aaptProcess.shutdown ( ) ; mAaptProcesses.remove ( aaptProcess ) ; } }
public void test_getDisplayName_raw ( ) throws java.lang.Exception { java.util.Locale weird = new java.util.Locale ( "AaBbCc" , "DdEeFf" , "GgHhIi" ) ; assertEquals ( "aabbcc" , weird.getLanguage ( ) ) ; assertEquals ( "" , weird.getDisplayLanguage ( ) ) ; assertEquals ( "DDEEFF" , weird.getCountry ( ) ) ; assertEquals ( "" , weird.getDisplayCountry ( ) ) ; assertEquals ( "GgHhIi" , weird.getVariant ( ) ) ; assertEquals ( "" , weird.getDisplayVariant ( ) ) ; assertEquals ( "aabbcc (DDEEFF,GgHhIi)" , weird.getDisplayName ( ) ) ; }
public void moveCompleteApp ( java.lang.String fromUuid , java.lang.String toUuid , java.lang.String packageName , java.lang.String dataAppName , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.moveCompleteApp ( fromUuid , toUuid , packageName , dataAppName , appId , seInfo , targetSdkVersion ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public static com.android.jack.dx.rop.cst.CstFieldRef createFieldRef ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId field , @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassOrInterface receiverType ) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType ( receiverType ) ; com.android.jack.dx.rop.cst.CstString name = new com.android.jack.dx.rop.cst.CstString ( field.getName ( ) ) ; com.android.jack.dx.rop.cst.CstFieldRef fieldRef = new com.android.jack.dx.rop.cst.CstFieldRef ( definingClass , name , com.android.jack.backend.dex.rop.RopHelper.getCstType ( field.getType ( ) ) ) ; return fieldRef ; }
public void testSort_delegatesToListSort ( ) { libcore.java.util.CollectionsTest.ArrayListInheritor < java.lang.String > list = new libcore.java.util.CollectionsTest.ArrayListInheritor < > ( java.util.Arrays.asList ( "a" , "c" , "b" ) ) ; assertEquals ( 0 , list.numSortCalls ( ) ) ; java.util.Collections.sort ( list ) ; assertEquals ( 1 , list.numSortCalls ( ) ) ; }
public void testAllFilesInSysAreNotWritable ( ) throws java.lang.Exception { java.util.Set < java.io.File > writable = android.permission.cts.FileSystemPermissionTest.getAllWritableFilesInDirAndSubDir ( new java.io.File ( "/sys" ) ) ; writable.removeAll ( android.permission.cts.FileSystemPermissionTest.SYS_EXCEPTIONS ) ; assertTrue ( ( "Found writable: " + ( writable.toString ( ) ) ) , writable.isEmpty ( ) ) ; }
public void setUp ( ) { org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.when ( mActivity.getSystemService ( Context.MEDIA_ROUTER_SERVICE ) ) . thenReturn ( mMediaRouter ) ; mSummaryProvider = WifiDisplaySettings.SUMMARY_PROVIDER_FACTORY.createSummaryProvider ( mActivity , mSummaryLoader ) ; }
public void terminate ( ) { mCallback = null ; if ( mIsPublishSession ) { com.android.server.wifi.aware.WifiAwareNative.getInstance ( ) . stopPublish ( ( ( short ) ( 0 ) ) , mPubSubId ) ; } else { com.android.server.wifi.aware.WifiAwareNative.getInstance ( ) . stopSubscribe ( ( ( short ) ( 0 ) ) , mPubSubId ) ; } }
public void testDensityOnlyWithMatch ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( ) ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 160 ) ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 320 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( match , result ) ; }
protected void onDetachedFromWindow ( ) { mPrivateFlags &= ~ ( android.view.View.CANCEL_NEXT_UP_EVENT ) ; removeUnsetPressCallback ( ) ; removeLongPressCallback ( ) ; destroyDrawingCache ( ) ; }
public void testMissingDataDirDistroVersionFile ( ) throws java.lang.Exception { createSystemTzDataFileOnHost ( com.android.cts.tzdata.TzDataCheckTest.VALID_RULES_VERSION ) ; com.android.cts.tzdata.TzDataCheckTest.PathPair dataCurrentDir = mDataDir.createSubPath ( com.android.cts.tzdata.TzDataCheckTest.CURRENT_DIR_NAME ) ; libcore.tzdata.shared2.TimeZoneDistro distroWithoutAVersionFile = com.android.cts.tzdata.TzDataCheckTest.createValidDistroBuilder ( ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; com.android.cts.tzdata.TzDataCheckTest.unpackOnHost ( dataCurrentDir , distroWithoutAVersionFile ) ; pushHostTestDirToDevice ( ) ; assertEquals ( 3 , runTzDataCheckOnDevice ( ) ) ; assertDevicePathDoesNotExist ( dataCurrentDir ) ; }
public void onComplete ( ) { com.android.dialer.blockreportspam.BlockReportSpamDialogs.DialogFragmentForBlockingNumberAndOptionallyReportingAsSpam.newInstance ( displayNumber , com.android.dialer.spam.SpamComponent.get ( this ) . spam ( ) . isDialogReportSpamCheckedByDefault ( ) , new com.android.dialer.blockreportspam.BlockReportSpamDialogs.OnSpamDialogClickListener ( ) { @ java.lang.Override public void onClick ( boolean isSpamChecked ) { blockReportNumberAndFinish ( number , isSpamChecked , contactLookupResultType ) ; } } , dismissListener ) . show ( getFragmentManager ( ) , BlockReportSpamDialogs.BLOCK_REPORT_SPAM_DIALOG_TAG ) ; }
public int arrayBaseOffset ( java.lang.Class clazz ) { java.lang.Class < ? > component = clazz.getComponentType ( ) ; if ( component == null ) { throw new java.lang.IllegalArgumentException ( ( "Valid for array classes only: " + clazz ) ) ; } int offset = 12 ; if ( ( component == ( long . class ) ) || ( component == ( double . class ) ) ) { offset += 4 ; } return offset ; }
private static boolean overridesIsValidFragment ( com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass ) { java.lang.Iterable < com.android.tools.lint.client.api.JavaParser.ResolvedMethod > resolvedMethods = resolvedClass.getMethods ( com.android.tools.lint.checks.PreferenceActivityDetector.IS_VALID_FRAGMENT , false ) ; for ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod resolvedMethod : resolvedMethods ) { if ( ( ( resolvedMethod.getArgumentCount ( ) ) == 1 ) && ( resolvedMethod.getArgumentType ( 0 ) . getName ( ) . equals ( com.android.tools.lint.client.api.JavaParser.TYPE_STRING ) ) ) { return true ; } } return false ; }
public boolean isCspPlmnEnabled ( ) { com.android.internal.telephony.IccRecords r = mIccRecords.get ( ) ; return r != null ? r.isCspPlmnEnabled ( ) : false ; }
private void onRoamingOff ( ) { if ( com.android.internal.telephony.dataconnection.DcTracker.DBG ) log ( "onRoamingOff" ) ; setInitialAttachApn ( ) ; setDataProfilesAsNeeded ( ) ; if ( ! ( mDataEnabledSettings.isUserDataEnabled ( ) ) ) return ; if ( ( getDataOnRoamingEnabled ( ) ) == false ) { notifyOffApnsOfAvailability ( Phone.REASON_ROAMING_OFF ) ; setupDataOnConnectableApns ( Phone.REASON_ROAMING_OFF ) ; } else { notifyDataConnection ( Phone.REASON_ROAMING_OFF ) ; } }
public void test_getResourceAsStreamLjava_lang_String ( ) { java.io.InputStream is = null ; assertNotNull ( "Failed to find resource: hyts_Foo.c" , ( is = java.lang.ClassLoader.getSystemClassLoader ( ) . getResourceAsStream ( "hyts_Foo.c" ) ) ) ; try { is.close ( ) ; } catch ( java.io.IOException e ) { fail ( ( "Exception during getResourceAsStream: " + ( e.toString ( ) ) ) ) ; } }
private static int log10Floor ( int x ) { int y = com.google.common.math.IntMath.MAX_LOG10_FOR_LEADING_ZEROS [ java.lang.Integer.numberOfLeadingZeros ( x ) ] ; int sgn = ( x - ( com.google.common.math.IntMath.POWERS_OF_10 [ y ] ) ) > > > ( ( java.lang.Integer.SIZE ) - 1 ) ; return y - sgn ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mMockInvocationListener = org.easymock.EasyMock.createMock ( com.android.tradefed.result.ITestInvocationListener.class ) ; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest ( ) ; mTest.setBuild ( com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo ( ) ) ; mTest.setTestCasePath ( com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH ) ; mTest.setTestConfigPath ( com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CONFIG_PATH ) ; }
public void createNewSession ( com.intellij.openapi.project.Project project , org.jetbrains.plugins.terminal.AbstractTerminalRunner terminalRunner ) { com.intellij.openapi.wm.ToolWindow terminal = com.intellij.openapi.wm.ToolWindowManager.getInstance ( project ) . getToolWindow ( "Terminal" ) ; openSession ( terminal , terminalRunner ) ; terminal.activate ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { } } , true ) ; }
private void onCloseTab ( com.android.browser.Tab tab ) { if ( tab != null ) { if ( tab == ( mUiController.getCurrentTab ( ) ) ) { mUiController.closeCurrentTab ( ) ; } else { mUiController.closeTab ( tab ) ; } } }
public void tearDown ( ) throws java.lang.Exception { if ( testSystemTzDataDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( testInstallDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( tempDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( tempDir ) ; } super . tearDown ( ) ; }
protected com.intellij.updater.ValidationResult doValidate ( java.io.File toFile ) throws java.io.IOException { com.intellij.updater.ValidationResult result = doValidateAccess ( toFile , ValidationResult.Action.UPDATE ) ; if ( result != null ) return result ; return doValidateNotChanged ( toFile , ValidationResult.Kind.ERROR , ValidationResult.Action.UPDATE ) ; }
public java.lang.String [ ] getActiveApnTypes ( ) { if ( DBG ) log ( "get all active apn types" ) ; java.util.ArrayList < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( ) ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts.values ( ) ) { if ( apnContext.isReady ( ) ) { result.add ( apnContext.getApnType ( ) ) ; } } return result.toArray ( new java.lang.String [ 0 ] ) ; }
private void adjustTreeButtons ( org.eclipse.jface.viewers.ISelection selection ) { mRemoveButton.setEnabled ( ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) ) ; mUpButton.setEnabled ( ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) ) ; mDownButton.setEnabled ( ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) ) ; }
void removeUriPermissionIfNeededLocked ( com.android.server.am.UriPermission perm ) { if ( ( perm.modeFlags ) == 0 ) { final android.util.ArrayMap < com.android.server.am.ActivityManagerService.GrantUri , com.android.server.am.UriPermission > perms = mGrantedUriPermissions.get ( perm.targetUid ) ; if ( perms != null ) { if ( DEBUG_URI_PERMISSION ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG_URI_PERMISSION , ( ( ( "Removing " + ( perm.targetUid ) ) + " permission to " ) + ( perm.uri ) ) ) ; perms.remove ( perm.uri ) ; if ( perms.isEmpty ( ) ) { mGrantedUriPermissions.remove ( perm.targetUid ) ; } } } }
private void verifyCallAction ( android.content.Intent intent ) { if ( getClass ( ) . getName ( ) . equals ( intent.getComponent ( ) . getClassName ( ) ) ) { if ( ! ( Intent.ACTION_CALL.equals ( intent.getAction ( ) ) ) ) { com.android.server.telecom.Log.w ( this , "Attempt to deliver non-CALL action; forcing to CALL" ) ; intent.setAction ( Intent.ACTION_CALL ) ; } } }
public void testGatewayInfo ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } if ( ( mCall.getDetails ( ) . getGatewayInfo ( ) ) != null ) { org.junit.Assert.assertThat ( mCall.getDetails ( ) . getGatewayInfo ( ) , org.hamcrest.CoreMatchers.is ( android.telecom.GatewayInfo.class ) ) ; } }
public void checkMemberAccess ( java.lang.Class < ? > clazz , int which ) { }
public void testForName_DuplicateWithBuiltInCharset ( ) throws java.lang.Exception { assertFalse ( ( ( java.nio.charset.Charset.forName ( "us-ascii" ) ) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset ) ) ; assertFalse ( ( ( java.nio.charset.Charset.availableCharsets ( ) . get ( "us-ascii" ) ) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset ) ) ; }
public void invalidateCurrentNode ( ) { final com.android.hierarchyviewerlib.ui.util.DrawableViewNode selectedNode = com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . getSelection ( ) ; if ( selectedNode != null ) { executeInBackground ( "Invalidating view" , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.android.hierarchyviewerlib.device.IHvDevice hvDevice = getHvDevice ( selectedNode.viewNode.window.getDevice ( ) ) ; hvDevice.invalidateView ( selectedNode.viewNode ) ; } } ) ; } }
public void testDensityOnlyWithMatch ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( ) ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 160 ) ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 320 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( match , result ) ; }
private int convertId ( @ com.android.annotations.Nullable java.lang.String value ) { if ( ( value != null ) && ( ( value.length ( ) ) > 0 ) ) { if ( com.android.sdklib.local.LocalAddonPkgInfo.PATTERN_USB_IDS.matcher ( value ) . matches ( ) ) { java.lang.String v = value.substring ( 2 ) ; try { return java.lang.Integer.parseInt ( v , 16 ) ; } catch ( java.lang.NumberFormatException e ) { } } } return com.android.sdklib.IAndroidTarget.NO_USB_ID ; }
public boolean supportsFeature ( @ com.android.annotations.NonNull com.android.ddmlib.HardwareFeature feature ) { if ( ( mHardwareCharacteristics ) == null ) { try { java.lang.String characteristics = getPropertyCacheOrSync ( com.android.ddmlib.PROP_BUILD_CHARACTERISTICS ) ; mHardwareCharacteristics = com.google.common.collect.Sets.newHashSet ( com.google.common.base.Splitter.on ( ',' ) . split ( characteristics ) ) ; } catch ( java.lang.Exception e ) { mHardwareCharacteristics = java.util.Collections.emptySet ( ) ; } } return mHardwareCharacteristics.contains ( feature.getCharacteristic ( ) ) ; }
private com.android.jack.dx.rop.code.InsnList createInsnList ( @ javax.annotation.Nonnull java.util.List < com.android.jack.dx.rop.code.Insn > instructions , @ javax.annotation.Nonnegative int extraSize ) { com.android.jack.dx.rop.code.InsnList il = new com.android.jack.dx.rop.code.InsnList ( ( ( instructions.size ( ) ) + extraSize ) ) ; int indexInstruction = 0 ; for ( com.android.jack.dx.rop.code.Insn instruction : instructions ) { il.set ( ( indexInstruction ++ ) , instruction ) ; } return il ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.util.Log.d ( com.android.bluetooth.gatt.ScanManager.TAG , ( "awakened up at time " + ( android.os.SystemClock.elapsedRealtime ( ) ) ) ) ; java.lang.String action = intent.getAction ( ) ; if ( action.equals ( com.android.bluetooth.gatt.ScanManager.ACTION_REFRESH_BATCHED_SCAN ) ) { if ( mBatchClients.isEmpty ( ) ) { return ; } flushBatchScanResults ( mBatchClients.iterator ( ) . next ( ) ) ; } }
public void encode ( org.bouncycastle.crypto.tls.TlsContext context , java.io.OutputStream output ) throws java.io.IOException { org.bouncycastle.crypto.tls.TlsUtils.writeUint8 ( type , output ) ; org.bouncycastle.crypto.tls.TlsUtils.checkUint16 ( payload.length ) ; org.bouncycastle.crypto.tls.TlsUtils.writeUint16 ( payload.length , output ) ; output.write ( payload ) ; byte [ ] padding = new byte [ paddingLength ] ; context.getSecureRandom ( ) . nextBytes ( padding ) ; output.write ( padding ) ; }
public boolean zoomIn ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return zoomIn ( ) ; } } ) ; return ret ; } return mAwContents.zoomIn ( ) ; }
private com.android.jack.dx.rop.annotation.Annotation createAnnotation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotation annotation ) throws com.android.jack.backend.dex.AnnotationBuilder.SourceAnnotationException { com.android.jack.dx.rop.annotation.Annotation ropAnnotation = new com.android.jack.dx.rop.annotation.Annotation ( com.android.jack.backend.dex.rop.RopHelper.getCstType ( annotation.getType ( ) ) , com.android.jack.backend.dex.AnnotationBuilder.getVisibility ( annotation.getRetentionPolicy ( ) ) ) ; constantBuilder.createAnnotationPairs ( annotation , ropAnnotation ) ; ropAnnotation.setImmutable ( ) ; return ropAnnotation ; }
public void testAesCbcHmacSha256Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.getKey ( 256 ) ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , android.net.cts.IpSecManagerTest.getKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , false , 1 , true ) ; }
public static java.net.NetworkInterface getByName ( java.lang.String name ) throws java.net.SocketException { if ( name == null ) throw new java.lang.NullPointerException ( ) ; return java.net.NetworkInterface.getByName0 ( name ) ; }
public android.telecom.PhoneAccount getPhoneAccount ( android.telecom.PhoneAccountHandle accountHandle ) { synchronized ( mLock ) { final android.os.UserHandle callingUserHandle = android.os.Binder.getCallingUserHandle ( ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { com.android.server.telecom.Log.startSession ( "TSI.gPA" ) ; return mPhoneAccountRegistrar.getPhoneAccount ( accountHandle , callingUserHandle , true ) ; } catch ( java.lang.Exception e ) { com.android.server.telecom.Log.e ( this , e , "getPhoneAccount %s" , accountHandle ) ; throw e ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; com.android.server.telecom.Log.endSession ( ) ; } } }
public static java.util.List < java.lang.String > readLines ( java.nio.file.Path path ) throws java.io.IOException { java.util.List < java.lang.String > result = new java.util.ArrayList < > ( ) ; try ( java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.FileReader ( path.toFile ( ) ) ) ) { java.lang.String line ; while ( ( line = reader.readLine ( ) ) != null ) { result.add ( line ) ; } } return result ; }
public void testMissingMetadataFileThrowsRuntimeException ( ) { com.google.i18n.phonenumbers.SingleFileMetadataSourceImpl singleFileMetadataSource = new com.google.i18n.phonenumbers.SingleFileMetadataSourceImpl ( "no/such/file" , PhoneNumberUtil.DEFAULT_METADATA_LOADER ) ; try { singleFileMetadataSource.loadMetadataFromFile ( ) ; fail ( "expected exception" ) ; } catch ( java.lang.RuntimeException e ) { assertTrue ( ( "Unexpected error: " + e ) , e.getMessage ( ) . contains ( "no/such/file" ) ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { try { java.lang.Class < ? > a = java.lang.Class.forName ( "A" ) ; } catch ( java.lang.VerifyError e ) { java.lang.System.out.println ( "passed" ) ; } }
public static java.lang.String pii ( java.lang.Object pii ) { if ( ( pii == null ) || ( android.telecom.Log.VERBOSE ) ) { return java.lang.String.valueOf ( pii ) ; } return ( "[" + ( android.telecom.Log.secureHash ( java.lang.String.valueOf ( pii ) . getBytes ( ) ) ) ) + "]" ; }
public void TestArabicLongStyle ( ) { com.ibm.icu.text.NumberFormat cdf = com.ibm.icu.text.CompactDecimalFormat.getInstance ( com.ibm.icu.util.ULocale.forLanguageTag ( "ar" ) , CompactStyle.LONG ) ; assertEquals ( "Arabic Long" , "‏-٥٫٣ ألف" , cdf.format ( ( - 5300 ) ) ) ; }
private void createState ( ) { int mode ; try { mode = mResources.getInteger ( R.integer.nexus_mode ) ; } catch ( android.content.res.Resources exc ) { mode = 0 ; } mScript.set_gIsPreview ( ( isPreview ( ) ? 1 : 0 ) ) ; mScript.set_gMode ( mode ) ; mScript.set_gXOffset ( 0.0F ) ; }
private static java.lang.ref.WeakReference < java.lang.ClassLoader > setUpLoadLibrary ( java.lang.reflect.Constructor constructor ) throws java.lang.Exception { java.lang.ClassLoader loader = ( ( java.lang.ClassLoader ) ( constructor.newInstance ( Main.DEX_FILE , java.lang.ClassLoader.getSystemClassLoader ( ) ) ) ) ; java.lang.Class intHolder = loader.loadClass ( "IntHolder" ) ; java.lang.reflect.Method loadLibrary = intHolder.getDeclaredMethod ( "loadLibrary" , java.lang.String.class ) ; loadLibrary.invoke ( intHolder , Main.nativeLibraryName ) ; return new java.lang.ref.WeakReference ( loader ) ; }
public java.util.List < java.lang.String [ ] > getNavbarLinks ( javax.servlet.http.HttpServletRequest request ) { java.util.List < java.lang.String [ ] > links = new java.util.ArrayList < > ( ) ; com.android.vts.servlet.Page root = Page.HOME ; java.lang.String [ ] rootEntry = new java.lang.String [ ] { CURRENT_PAGE , root.getName ( ) } ; links.add ( rootEntry ) ; return links ; }
private static void assertStatsEntry ( android.net.NetworkStats stats , java.lang.String iface , int uid , int set , int tag , long rxBytes , long txBytes ) { final int i = stats.findIndex ( iface , uid , set , tag , android.net.NetworkStats.ROAMING_NO ) ; final android.net.NetworkStats.Entry entry = stats.getValues ( i , null ) ; assertEquals ( "unexpected rxBytes" , rxBytes , entry.rxBytes ) ; assertEquals ( "unexpected txBytes" , txBytes , entry.txBytes ) ; }
public void dumpShowsFailureTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "rdev_connect" ) ) ; }
public void testAppInstallAndLaunch ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; com.android.devtools.systemimage.uitest.utils.AppManager.installApp ( instrumentation , "HelloCompute.apk" ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "RsHelloCompute" ) ; assertTrue ( testFramework.getDevice ( ) . findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( com.android.devtools.systemimage.uitest.smoke.AppTest.APP_IMAGE_VIEW_ID ) ) . exists ( ) ) ; com.android.devtools.systemimage.uitest.utils.AppManager.uninstallApp ( instrumentation , "RsHelloCompute" , null ) ; }
public void setSkins ( @ com.android.annotations.NonNull java.io.File [ ] skins , @ com.android.annotations.NonNull java.io.File defaultSkin ) { mDefaultSkin = defaultSkin ; java.util.HashSet < java.io.File > skinSet = new java.util.HashSet < java.io.File > ( ) ; skinSet.addAll ( java.util.Arrays.asList ( skins ) ) ; skinSet.addAll ( java.util.Arrays.asList ( mBasePlatform.getSkins ( ) ) ) ; mSkins = skinSet.toArray ( new java.io.File [ skinSet.size ( ) ] ) ; }
public void test_init_limitting_to_1method_and_run_for_SuiteTest_should_throw_exception ( ) { java.lang.Class < ? > target = vogar.target.junit3.SuiteTest.class ; try { runner.init ( monitor , "" , "testSimple" , target , skipPastReference , testEnvironment , 0 , false ) ; runner.run ( "" , null , null ) ; fail ( "should throw ClassCastException." ) ; } catch ( java.lang.ClassCastException e ) { } }
public java.lang.String getVersionName ( ) { java.lang.String versionName = mMergedFlavor.getVersionName ( ) ; java.lang.String versionSuffix = mBuildType.getVersionNameSuffix ( ) ; if ( ( versionSuffix != null ) && ( ! ( versionSuffix.isEmpty ( ) ) ) ) { if ( versionName == null ) { if ( ( mType ) != ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { versionName = getVersionNameFromManifest ( ) ; } else { versionName = "" ; } } versionName = versionName + versionSuffix ; } return versionName ; }
private void addDexFolder ( @ com.android.annotations.NonNull java.io.File dexFolder ) throws com.android.builder.packaging.DuplicateFileException , com.android.builder.packaging.PackagerException , com.android.builder.packaging.SealedPackageException { java.io.File [ ] files = dexFolder.listFiles ( new java.io.FilenameFilter ( ) { @ java.lang.Override public boolean accept ( java.io.File file , java.lang.String name ) { return name.endsWith ( SdkConstants.DOT_DEX ) ; } } ) ; if ( ( files != null ) && ( ( files.length ) > 0 ) ) { for ( java.io.File file : files ) { addFile ( file , file.getName ( ) ) ; } } }
synchronized void recordImplicitRejection ( @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull com.android.manifmerger.XmlElement implicitAttributeOwner ) { java.util.List < com.android.manifmerger.ActionRecorder.AttributeRecord > attributeRecords = getAttributeRecords ( attribute ) ; com.android.manifmerger.ActionRecorder.AttributeRecord attributeRecord = new com.android.manifmerger.ActionRecorder.AttributeRecord ( com.android.manifmerger.ActionRecorder.ActionType.REJECTED , new com.android.manifmerger.ActionRecorder.ActionLocation ( implicitAttributeOwner.getDocument ( ) . getSourceLocation ( ) , implicitAttributeOwner.getPosition ( ) ) , AttributeOperationType.REPLACE ) ; attributeRecords.add ( attributeRecord ) ; }
public void setStrength ( int value ) { if ( value == ( java.text.Collator.IDENTICAL ) ) { value = java.text.com.ibm.icu.text.Collator ; } icuColl.setStrength ( value ) ; }
public static void setThreadPoolSize ( org.gradle.api.Project project ) { if ( ! ( project.hasProperty ( com.android.build.gradle.internal.ExecutionConfigurationUtil.THREAD_POOL_SIZE_PROPERTY ) ) ) { return ; } java.lang.String threadPoolSizeProperty = project.property ( com.android.build.gradle.internal.ExecutionConfigurationUtil.THREAD_POOL_SIZE_PROPERTY ) . toString ( ) ; try { com.android.ide.common.internal.ExecutorSingleton.setThreadPoolSize ( java.lang.Integer.parseInt ( threadPoolSizeProperty ) ) ; } catch ( java.lang.NumberFormatException e ) { project.getLogger ( ) . error ( "com.android.threadPoolSize should be an integer." ) ; } }
public java.net.Socket createSocket ( java.net.Socket k , java.lang.String host , int port , boolean close ) throws java.io.IOException { org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl s = ( ( org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( k , host , port , close ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public static void loop6 ( boolean incoming ) { while ( true ) { java.lang.System.out.println ( incoming ) ; while ( ( java.lang.Runtime.getRuntime ( ) ) != null ) { } } }
public void clear ( ) { for ( int i = 0 ; i < ( segments.length ) ; ++ i ) segments [ i ] . clear ( ) ; }
private synchronized void onApplicationStateChanged ( byte [ ] address , boolean registered ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onApplicationStateChanged(): registered=" + registered ) ) ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_APPLICATION_STATE_CHANGED ) ; msg.obj = address ; msg.arg1 = ( registered ) ? 1 : 0 ; mHandler.sendMessage ( msg ) ; }
public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { if ( event.getSource ( ) . equals ( mSwitchPerspective ) ) { mWhichPerspective.setEnabled ( mSwitchPerspective.getBooleanValue ( ) , getFieldEditorParent ( ) ) ; } }
void foo4 ( int [ ] array , int end , boolean expectInterpreter ) { for ( int i = end ; i > 0 ; i -- ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ ( i - 1 ) ] = 1 ; sum += array [ ( i - 1 ) ] ; } }
public void onStart ( ) { super . onStart ( ) ; com.android.dialer.oem.CequintCallerIdManager cequintCallerIdManager = null ; if ( com.android.dialer.oem.CequintCallerIdManager.isCequintCallerIdEnabled ( getContext ( ) ) ) { cequintCallerIdManager = com.android.dialer.oem.CequintCallerIdManager.createInstanceForCallLog ( ) ; } mContactInfoCache.setCequintCallerIdManager ( cequintCallerIdManager ) ; }
public void reset ( ) throws java.io.IOException { }
protected void fillPathBuilder ( java.lang.StringBuilder pathBuilder , boolean escapePath ) { if ( isRoot ) { return ; } if ( ( parent ) != null ) { parent.fillPathBuilder ( pathBuilder , escapePath ) ; } pathBuilder.append ( com.android.ddmlib.FileListingService.FILE_SEPARATOR ) ; pathBuilder.append ( ( escapePath ? escape ( name ) : name ) ) ; }
public void test_firstElement ( ) { assertEquals ( "Returned incorrect firstElement" , "Test 0" , tVector.firstElement ( ) ) ; tVector.insertElementAt ( null , 0 ) ; assertNull ( "Returned incorrect firstElement--wanted null" , tVector.firstElement ( ) ) ; tVector = new java.util.Vector ( 10 ) ; try { tVector.firstElement ( ) ; fail ( "NoSuchElementException expected" ) ; } catch ( java.util.NoSuchElementException e ) { } }
private void verifyConnectionStateIntent ( int timeoutMs , android.bluetooth.BluetoothDevice device , int newState , int prevState ) { android.content.Intent intent = waitForIntent ( timeoutMs , mConnectionStateChangedQueue ) ; org.junit.Assert.assertNotNull ( intent ) ; org.junit.Assert.assertEquals ( BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED , intent.getAction ( ) ) ; org.junit.Assert.assertEquals ( device , intent.getParcelableExtra ( BluetoothDevice.EXTRA_DEVICE ) ) ; org.junit.Assert.assertEquals ( newState , intent.getIntExtra ( BluetoothProfile.EXTRA_STATE , ( - 1 ) ) ) ; org.junit.Assert.assertEquals ( prevState , intent.getIntExtra ( BluetoothProfile.EXTRA_PREVIOUS_STATE , ( - 1 ) ) ) ; }
public java.util.Map < java.lang.String , com.android.build.gradle.integration.common.fixture.GradleTestProject.SubProjectData > executeAndReturnMultiModel ( java.lang.String ... tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { executeBuild ( java.util.Collections.< java.lang.String > emptyList ( ) , connection , tasks ) ; return buildMultiModel ( connection ) ; } finally { connection.close ( ) ; } }
public void testEnablingAndDisablingSecurityLogging ( ) { mDevicePolicyManager.setSecurityLoggingEnabled ( getWho ( ) , true ) ; assertTrue ( mDevicePolicyManager.isSecurityLoggingEnabled ( getWho ( ) ) ) ; mDevicePolicyManager.setSecurityLoggingEnabled ( getWho ( ) , false ) ; assertFalse ( mDevicePolicyManager.isSecurityLoggingEnabled ( getWho ( ) ) ) ; }
protected void syncClirSetting ( ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; int clirSetting = sp.getInt ( com.android.internal.telephony.gsm.CLIR_KEY , ( - 1 ) ) ; if ( clirSetting >= 0 ) { mCM.setCLIR ( clirSetting , null ) ; } }
public boolean onPreferenceChange ( android.support.v7.preference.Preference preference , java.lang.Object newValue ) { android.content.ComponentName name = new android.content.ComponentName ( getContext ( ) , com.android.traceur.QsService.class ) ; getContext ( ) . getPackageManager ( ) . setComponentEnabledSetting ( name , ( ( ( java.lang.Boolean ) ( newValue ) ) ? android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED : android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ) , PackageManager.DONT_KILL_APP ) ; return true ; }
public void testError1 ( ) throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper helper = new com.android.jack.test.helper.IncrementalTestHelper ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ) ; java.io.File source1 = helper.addJavaFile ( "jack.source" , "Source1.java" , ( "package jack.source; \n" + ( "public class Source1 { \n" + "public m(){} }" ) ) ) ; helper.addJavaFile ( "jack.source" , "Source2.java" , ( "package jack.source; \n" + ( "public class Source2 extends Source1 { \n" + "@Override public void m(){} }" ) ) ) ; java.io.File outputDex1 = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; java.util.List < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > excludeList = new java.util.ArrayList < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > ( 3 ) ; excludeList.add ( com.android.jack.test.toolchain.JillBasedToolchain.class ) ; excludeList.add ( com.android.jack.test.toolchain.IncrementalToolchain.class ) ; excludeList.add ( com.android.jack.test.toolchain.TwoStepsToolchain.class ) ; com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackApiToolchainBase.class , excludeList ) ; java.io.File outputJack = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "output" , toolchain.getLibraryExtension ( ) ) ; java.io.File [ ] defaultClasspath = toolchain.getDefaultBootClasspath ( ) ; toolchain.setIncrementalFolder ( helper.getCompilerStateFolder ( ) ) ; toolchain.setOutputJack ( outputJack , true ) ; toolchain.setErrorStream ( com.google.common.io.ByteStreams.nullOutputStream ( ) ) ; try { toolchain.addToClasspath ( defaultClasspath ) . srcToExe ( outputDex1 , false , helper.getSourceFolder ( ) ) ; junit.framework.Assert.fail ( ) ; } catch ( com.android.jack.frontend.FrontendCompilationException e ) { } junit.framework.Assert.assertEquals ( 0 , getCount ( helper.getCompilerStateFolder ( ) , FileType.JAYCE ) ) ; source1 = helper.addJavaFile ( "jack.source" , "Source1.java" , ( "package jack.source; \n" + ( "public class Source1 { \n" + "public void m(){} }" ) ) ) ; java.io.File outputDex2 = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class , excludeList ) ; toolchain.setIncrementalFolder ( helper.getCompilerStateFolder ( ) ) ; toolchain.setOutputJack ( outputJack , true ) ; toolchain.addToClasspath ( defaultClasspath ) . srcToExe ( outputDex2 , false , helper.getSourceFolder ( ) ) ; junit.framework.Assert.assertEquals ( 2 , getCount ( helper.getCompilerStateFolder ( ) , FileType.JAYCE ) ) ; junit.framework.Assert.assertEquals ( 2 , getCount ( outputJack , FileType.JAYCE ) ) ; }
private static int getTargetApi ( lombok.ast.ClassDeclaration node ) { while ( node != null ) { int targetApi = com.android.tools.lint.checks.ApiDetector.getTargetApi ( node.astModifiers ( ) ) ; if ( targetApi != ( - 1 ) ) { return targetApi ; } node = com.android.tools.lint.detector.api.JavaContext.findSurroundingClass ( node.getParent ( ) ) ; } return - 1 ; }
public void testLanguageLevelWhenConfigurationIsNotSpecified ( ) throws java.lang.Exception { importProject ( ( "<groupId>test</groupId>" + ( ( ( ( ( ( ( ( ( "<artifactId>project</artifactId>" + "<version>1</version>" ) + "<build>" ) + " <plugins>" ) + " <plugin>" ) + " <groupId>org.apache.maven.plugins</groupId>" ) + " <artifactId>maven-compiler-plugin</artifactId>" ) + " </plugin>" ) + " </plugins>" ) + "</build>" ) ) ) ; assertModules ( "project" ) ; assertNull ( getLanguageLevelForModule ( ) ) ; }
public void untetherAll ( ) { synchronized ( mPublicSync ) { if ( com.android.server.connectivity.Tethering.DBG ) android.util.Log.d ( com.android.server.connectivity.Tethering.TAG , ( "Untethering " + ( mTetherStates.keySet ( ) ) ) ) ; for ( int i = 0 ; i < ( mTetherStates.size ( ) ) ; i ++ ) { untether ( mTetherStates.keyAt ( i ) ) ; } } }
public com.android.sched.vfs.OutputVFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.GenericOutputVFS ( new com.android.sched.vfs.DirectFS ( new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) , permissions ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
private int putListener ( java.lang.Object listener , android.net.nsd.NsdServiceInfo s ) { android.net.nsd.NsdManager.checkListener ( listener ) ; final int key ; synchronized ( mMapLock ) { int valueIndex = mListenerMap.indexOfValue ( listener ) ; com.android.internal.util.Preconditions.checkArgument ( ( valueIndex == ( - 1 ) ) , "listener already in use" ) ; key = java.lang.Math.abs ( ( ( mListenerKey ) ++ ) ) ; mListenerMap.put ( key , listener ) ; mServiceMap.put ( key , s ) ; } return key ; }
public void getDownloadableSubscriptionMetadata ( android.telephony.euicc.DownloadableSubscription subscription , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled ( ) ) ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; return ; } try { getIEuiccController ( ) . getDownloadableSubscriptionMetadata ( subscription , mContext.getOpPackageName ( ) , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.testI ( ) ; Main.testB ( ) ; Main.testO ( ) ; Main.testIOB ( ) ; Main.testF ( ) ; Main.testD ( ) ; Main.testL ( ) ; Main.testLL ( ) ; }
public int onStartCommand ( android.content.Intent intent , int flags , int startId ) { mStartId = startId ; if ( ( mAdapter ) == null ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "Stopping BluetoothPbapService: " + "device does not have BT or device is not ready" ) ) ; closeService ( ) ; } else { if ( intent != null ) { parseIntent ( intent ) ; } } return START_NOT_STICKY ; }
public boolean isTrue ( ) throws java.lang.Exception { return ( airplaneModeIcon.exists ( ) ) && ( airplaneModeIcon.isEnabled ( ) ) ; }
public long getPhotoId ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : return java.lang.Math.max ( com.android.dialer.common.Assert.isNotNull ( firstExtendedCp2Contact ) . getPhotoId ( ) , 0 ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return 0 ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public void run ( ) { try { com.android.sched.util.file.FileUtils.deleteDir ( dir.getFile ( ) ) ; } catch ( java.io.IOException e ) { throw new com.android.jack.JackIOException ( ( "Failed to delete temporary directory " + ( dir ) ) , e ) ; } }
public synchronized void reload ( ) { if ( mProjectFolder.exists ( ) ) { com.android.sdklib.io.IAbstractFile propFile = mProjectFolder.getFile ( mType.mFilename ) ; if ( propFile.exists ( ) ) { java.util.Map < java.lang.String , java.lang.String > map = com.android.sdklib.internal.project.ProjectProperties.parsePropertyFile ( propFile , null ) ; if ( map != null ) { mProperties.clear ( ) ; mProperties.putAll ( map ) ; } } } }
public void testValidateLocalRepositoryFile3 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = this . getClass ( ) . getResourceAsStream ( "/com/android/sdklib/testdata/repository_sample_3.xml" ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( xmlStream ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getValidator ( 3 , handler ) ; validator.validate ( source ) ; handler.verify ( ) ; }
private void killApplication ( java.lang.String pkgName , int appId , java.lang.String reason ) { android.app.IActivityManager am = android.app.ActivityManagerNative.getDefault ( ) ; if ( am != null ) { try { am.killApplicationWithAppId ( pkgName , appId , reason ) ; } catch ( android.os.RemoteException e ) { } } }
public void requireVersion ( int version ) { if ( ( mVersion ) >= version ) { return ; } mVersion = version ; org.chromium.mojo.bindings.RunOrClosePipeMessageParams message = new org.chromium.mojo.bindings.RunOrClosePipeMessageParams ( ) ; message.reserved0 = 16 ; message.reserved1 = 0 ; message.requireVersion = new org.chromium.mojo.bindings.RequireVersion ( ) ; message.requireVersion.version = version ; org.chromium.mojo.bindings.InterfaceControlMessagesHelper.sendRunOrClosePipeMessage ( getCore ( ) , mMessageReceiver , message ) ; }
public java.lang.Object clone ( ) { android.icu.text.DateIntervalFormat other = ( ( android.icu.text.DateIntervalFormat ) ( super . clone ( ) ) ) ; other.fDateFormat = ( ( android.icu.text.SimpleDateFormat ) ( fDateFormat.clone ( ) ) ) ; other.fInfo = ( ( android.icu.text.DateIntervalInfo ) ( fInfo.clone ( ) ) ) ; other.fFromCalendar = ( ( android.icu.util.Calendar ) ( fFromCalendar.clone ( ) ) ) ; other.fToCalendar = ( ( android.icu.util.Calendar ) ( fToCalendar.clone ( ) ) ) ; return other ; }
public final java.nio.MappedByteBuffer load ( ) { try { Libcore.os.mlock ( block.toInt ( ) , block.getSize ( ) ) ; Libcore.os.munlock ( block.toInt ( ) , block.getSize ( ) ) ; } catch ( libcore.io.ErrnoException ignored ) { } return this ; }
private int getScanBand ( boolean isFullBandScan ) { if ( isFullBandScan ) { int freqBand = mStateMachine.getFrequencyBand ( ) ; if ( freqBand == ( android.net.wifi.WifiManager.WIFI_FREQUENCY_BAND_5GHZ ) ) { return android.net.wifi.WifiScanner.WIFI_BAND_5_GHZ_WITH_DFS ; } else if ( freqBand == ( android.net.wifi.WifiManager.WIFI_FREQUENCY_BAND_2GHZ ) ) { return android.net.wifi.WifiScanner.WIFI_BAND_24_GHZ ; } else { return android.net.wifi.WifiScanner.WIFI_BAND_BOTH_WITH_DFS ; } } else { return android.net.wifi.WifiScanner.WIFI_BAND_UNSPECIFIED ; } }
public void handleMessage ( android.os.Message msg ) { try { java.lang.Thread.sleep ( 2000 ) ; } catch ( java.lang.InterruptedException e ) { java.lang.Thread.currentThread ( ) . interrupt ( ) ; } stopSelf ( msg.arg1 ) ; }
com.android.dx.util.IntList getSuccessors ( ) { com.android.dx.util.IntList successors = new com.android.dx.util.IntList ( callerBlocks.size ( ) ) ; for ( int label = callerBlocks.nextSetBit ( 0 ) ; label >= 0 ; label = callerBlocks.nextSetBit ( ( label + 1 ) ) ) { com.android.dx.cf.code.BasicBlock subCaller = labelToBlock ( label ) ; successors.add ( subCaller.getSuccessors ( ) . get ( 0 ) ) ; } successors.setImmutable ( ) ; return successors ; }
public void onDestroy ( ) { try { if ( ( fileLock ) != null ) { fileLock.release ( ) ; } } catch ( java.io.IOException e ) { android.util.Log.e ( LOG_MESSAGE_TAG , e.getMessage ( ) ) ; } android.content.Intent intent = new android.content.Intent ( ) . putExtra ( android.cts.LockHoldingService.NOTIFICATION_KEY , android.cts.LockHoldingService.NOTIFICATION_STOP ) . setAction ( android.cts.LockHoldingService.ACTION_TYPE_FOR_INTENT_COMMUNICATION ) ; sendBroadcast ( intent ) ; }
public java.util.Set < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > getInvisibleNodes ( ) { if ( ( mInvisibleParents.size ( ) ) == 0 ) { return java.util.Collections.emptySet ( ) ; } java.util.Set < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > nodes = new java.util.HashSet < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > ( mInvisibleParents.size ( ) ) ; for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo info : mInvisibleParents ) { com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode node = info.getUiViewKey ( ) ; if ( node != null ) { nodes.add ( node ) ; } } return nodes ; }
public boolean disableNetwork ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "disableNetwork nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( "DISABLE_NETWORK " + netId ) ) ; }
public boolean startWpsPbc ( java.lang.String iface , java.lang.String bssid ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.startWpsPbc ( iface , bssid ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( android.text.TextUtils.isEmpty ( bssid ) ) { return doBooleanCommandNative ( ( ( "IFNAME=" + iface ) + " WPS_PBC" ) ) ; } else { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " WPS_PBC " ) + bssid ) ) ; } } } }
public int getWatchedStatus ( com.android.tv.dvr.RecordedProgram recordedProgram ) { long watchedPosition = getWatchedPosition ( recordedProgram.getId ( ) ) ; if ( watchedPosition == ( android.media.tv.TvInputManager.TIME_SHIFT_INVALID_TIME ) ) { return com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_STATUS_NEW ; } else if ( watchedPosition > ( ( recordedProgram.getDurationMillis ( ) ) * ( com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_THRESHOLD_RATE ) ) ) { return com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_STATUS_WATCHED ; } else { return com.android.tv.dvr.DvrWatchedPositionManager.DVR_WATCHED_STATUS_WATCHING ; } }
public void addI16 ( android.support.v8.renderscript.Short3 v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addI16 ( new android.support.v8.renderscript.Short3 ( v.x , v.y , v.z ) ) ; return ; } addI16 ( v.x ) ; addI16 ( v.y ) ; addI16 ( v.z ) ; }
public void writeRilDeactivateDataCall ( int phoneId , int rilSerial , int cid , int reason ) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall ( ) ; deactivateDataCall.cid = cid ; deactivateDataCall.reason = reason + 1 ; addTelephonyEvent ( new com.android.internal.telephony.metrics.TelephonyEventBuilder ( phoneId ) . setDeactivateDataCall ( deactivateDataCall ) . build ( ) ) ; }
public java.lang.String [ ] setPackagesSuspended ( @ android.annotation.NonNull android.content.ComponentName admin , java.lang.String [ ] packageNames , boolean suspended ) { throwIfParentInstance ( "setPackagesSuspended" ) ; if ( ( mService ) != null ) { try { return mService.setPackagesSuspended ( admin , packageNames , suspended ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } } return packageNames ; }
public void TestCurrFmtNegSameAsPositive ( ) { android.icu.text.DecimalFormatSymbols decfmtsym = android.icu.text.DecimalFormatSymbols.getInstance ( java.util.Locale.US ) ; decfmtsym.setMinusSign ( '​' ) ; android.icu.text.DecimalFormat decfmt = new android.icu.text.DecimalFormat ( "¤#,##0.00;¤#,##0.00" , decfmtsym ) ; java.lang.String currFmtResult = decfmt.format ( ( - 100.0 ) ) ; if ( ! ( currFmtResult.equals ( "​$100.00" ) ) ) { errln ( ( "decfmt.toPattern results wrong, expected ​$100.00, got " + currFmtResult ) ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , float [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) ) ; }
public java.lang.Number parse ( java.lang.String text , java.text.ParsePosition parsePosition ) { com.ibm.icu.impl.number.Properties pprops = com.ibm.icu.text.DecimalFormat.threadLocalProperties.get ( ) ; synchronized ( this ) { pprops.copyFrom ( properties ) ; } java.lang.Number result = com.ibm.icu.impl.number.Parse.parse ( text , parsePosition , pprops , symbols ) ; if ( result instanceof java.math.BigDecimal ) { result = new com.ibm.icu.math.BigDecimal ( ( ( java.math.BigDecimal ) ( result ) ) ) ; } return result ; }
public boolean execute ( org.intellij.plugins.intelliLang.inject.groovy.PsiElement element , int offsetInElement ) { final com.intellij.psi.xml.XmlTag tag = com.intellij.psi.util.PsiTreeUtil.getParentOfType ( element , com.intellij.psi.xml.XmlTag.class ) ; final java.lang.String className = ( tag == null ) ? null : tag.getAttributeValue ( "className" ) ; if ( ( className != null ) && ( tag.getLocalName ( ) . endsWith ( "patternClass" ) ) ) { com.intellij.util.containers.ContainerUtil.addIfNotNull ( psiFacade.findClass ( className , com.intellij.psi.search.GlobalSearchScope.allScope ( project ) ) , roots ) ; } return true ; }
private byte getPlayStateBytes ( android.media.session.PlaybackState pbState ) { byte playStateBytes = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED ; if ( pbState != null ) { playStateBytes = ( ( byte ) ( convertPlayStateToBytes ( pbState.getState ( ) ) ) ) ; android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "getPlayBackState: playStateBytes = " + playStateBytes ) ) ; } else { android.util.Log.w ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "playState object null, sending playStateBytes = " + playStateBytes ) ) ; } return playStateBytes ; }
public void testPownF32_2 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 2 ] ; android.renderscript.cts.RSUtils.genRandom ( 11329265 , 32 , 1 , ( - 16 ) , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n2 ( nAlloc ) ; doF32_2 ( 11329265 , 16 ) ; }
public android.view.View getView ( int position , android.view.View convertView , android.view.ViewGroup parent ) { android.widget.TextView view = ( ( android.widget.TextView ) ( super . getView ( position , convertView , parent ) ) ) ; java.io.File file = getItem ( position ) ; view.setText ( file.getName ( ) ) ; return view ; }
public void flingScroll ( final int vx , final int vy ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { flingScroll ( vx , vy ) ; } } ) ; return ; } mAwContents.flingScroll ( vx , vy ) ; }
public void prepareFullBuild ( org.eclipse.core.resources.IProject project , java.util.List < org.eclipse.core.runtime.IPath > sourceFolders ) { mDeltaVisitor.reset ( ) ; buildCompilationList ( project , sourceFolders ) ; }
private static java.util.List < com.android.jack.test.runner.RuntimeRunner > parseRuntimeList ( @ javax.annotation.CheckForNull java.lang.String runtimeList ) throws com.android.jack.test.runner.RuntimeRunnerException , java.lang.IllegalArgumentException , java.lang.SecurityException { java.util.List < com.android.jack.test.runner.RuntimeRunner > result = new java.util.ArrayList < com.android.jack.test.runner.RuntimeRunner > ( 0 ) ; if ( runtimeList != null ) { java.lang.String [ ] rtList = runtimeList.split ( com.android.jack.test.toolchain.AbstractTestTools.PROPERTY_VALUE_SEPARATOR ) ; for ( java.lang.String rtName : rtList ) { result.add ( com.android.jack.test.runner.RuntimeRunnerFactory.create ( rtName ) ) ; } } return result ; }
public void addQueryListener ( int token , com.android.internal.telephony.CallerInfoAsyncQuery.OnQueryCompleteListener listener , java.lang.Object cookie ) { if ( com.android.internal.telephony.CallerInfoAsyncQuery.DBG ) android.util.Log.d ( com.android.internal.telephony.CallerInfoAsyncQuery.LOG_TAG , ( ( ( "adding listener to query: " + ( com.android.internal.telephony.CallerInfoAsyncQuery.sanitizeUriToString ( mHandler.mQueryUri ) ) ) + " handler: " ) + ( mHandler.toString ( ) ) ) ) ; com.android.internal.telephony.CallerInfoAsyncQuery.CookieWrapper cw = new com.android.internal.telephony.CallerInfoAsyncQuery.CookieWrapper ( ) ; cw.listener = listener ; cw.cookie = cookie ; cw.event = com.android.internal.telephony.CallerInfoAsyncQuery.EVENT_ADD_LISTENER ; mHandler.startQuery ( token , cw , null , null , null , null , null ) ; }
private void assertLinkAddressesEqual ( android.net.LinkAddress l1 , android.net.LinkAddress l2 ) { assertTrue ( ( ( l1 + " unexpectedly not equal to " ) + l2 ) , l1.equals ( l2 ) ) ; assertTrue ( ( ( l2 + " unexpectedly not equal to " ) + l1 ) , l2.equals ( l1 ) ) ; assertEquals ( l1.hashCode ( ) , l2.hashCode ( ) ) ; }
public static com.android.internal.telephony.gsm.SmsMessage newFromCMT ( java.lang.String [ ] lines ) { try { com.android.internal.telephony.gsm.SmsMessage msg = new com.android.internal.telephony.gsm.SmsMessage ( ) ; msg.parsePdu ( com.android.internal.telephony.IccUtils.hexStringToBytes ( lines [ 1 ] ) ) ; return msg ; } catch ( java.lang.RuntimeException ex ) { android.util.Log.e ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "SMS PDU parsing failed: " , ex ) ; return null ; } }
public void start ( android.content.Context context , android.os.Looper looper ) { if ( com.android.server.wifi.nan.WifiNanRttStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.nan.WifiNanRttStateManager.TAG , "start()" ) ; android.os.IBinder b = android.os.ServiceManager.getService ( Context.WIFI_RTT_SERVICE ) ; android.net.wifi.IRttManager service = IRttManager.Stub.asInterface ( b ) ; if ( service == null ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanRttStateManager.TAG , "start(): not able to get WIFI_RTT_SERVICE" ) ; return ; } startWithRttService ( context , looper , service ) ; }
public void removeActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream ) { com.android.server.connectivity.tethering.IPv6TetheringCoordinator.stopIPv6TetheringOn ( downstream ) ; if ( mActiveDownstreams.remove ( downstream ) ) { updateIPv6TetheringInterfaces ( ) ; } }
public boolean enableNoAutoConnect ( ) { if ( ( isEnabled ( ) ) == true ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enableNoAutoConnect(): BT is already enabled..!" ) ; return true ; } try { return mManagerService.enableNoAutoConnect ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public static long digestRegularFile ( java.io.File file ) throws java.io.IOException { java.io.InputStream in = new java.io.BufferedInputStream ( new java.io.FileInputStream ( file ) ) ; try { return com.intellij.updater.Digester.digestStream ( in ) ; } finally { in.close ( ) ; } }
private boolean isDuoCallButtonVisible ( android.view.View videoCallButtonView ) { if ( videoCallButtonView == null ) { return false ; } if ( ( videoCallButtonView.getVisibility ( ) ) != ( android.view.View.VISIBLE ) ) { return false ; } com.android.dialer.app.calllog.IntentProvider intentProvider = ( ( com.android.dialer.app.calllog.IntentProvider ) ( videoCallButtonView.getTag ( ) ) ) ; if ( intentProvider == null ) { return false ; } return DuoConstants.PACKAGE_NAME.equals ( intentProvider.getIntent ( activity ) . getPackage ( ) ) ; }
public void log ( com.android.utils.ILogger logger ) { for ( com.android.manifmerger.MergingReport.Record record : mRecords ) { switch ( record.mType ) { case WARNING : logger.warning ( record.mLog ) ; break ; case ERROR : logger.error ( null , record.mLog ) ; break ; case INFO : logger.info ( record.mLog ) ; break ; default : logger.error ( null , ( "Unhandled record type " + ( record.mType ) ) ) ; } } mActionRecorder.log ( logger ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { int rc = getResultCode ( ) ; boolean success = ( rc == ( android.app.Activity.RESULT_OK ) ) || ( rc == ( android.provider.Telephony.Sms.Intents.RESULT_SMS_HANDLED ) ) ; acknowledgeLastIncomingSms ( success , rc , null ) ; }
public void generateComponentLayout ( final com.intellij.uiDesigner.lw.LwComponent lwComponent , final org.jetbrains.asm4.commons.GeneratorAdapter generator , final int componentLocal , final int parentLocal ) { generator.loadLocal ( parentLocal ) ; generator.loadLocal ( componentLocal ) ; generator.push ( ( ( java.lang.String ) ( lwComponent.getCustomLayoutConstraints ( ) ) ) ) ; generator.invokeVirtual ( ourContainerType , ourAddMethod ) ; }
private static byte [ ] readFullyNoClose ( java.io.InputStream in ) throws java.io.IOException { java.io.ByteArrayOutputStream bytes = new java.io.ByteArrayOutputStream ( ) ; byte [ ] buffer = new byte [ 1024 ] ; int count ; while ( ( count = in.read ( buffer ) ) != ( - 1 ) ) { bytes.write ( buffer , 0 , count ) ; } return bytes.toByteArray ( ) ; }
public static void wtf ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { java.lang.String msg = android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ; android.util.Log.wtf ( android.telecom.Log.TAG , msg , new java.lang.IllegalStateException ( msg ) ) ; }
public void showWaitingForDebugger ( android.app.IApplicationThread who , boolean waiting ) { synchronized ( this ) { com.android.server.am.ProcessRecord app = ( who != null ) ? getRecordForAppLocked ( who ) : null ; if ( app == null ) return ; android.os.Message msg = android.os.Message.obtain ( ) ; msg.what = com.android.server.am.ActivityManagerService.WAIT_FOR_DEBUGGER_MSG ; msg.obj = app ; msg.arg1 = ( waiting ) ? 1 : 0 ; mHandler.sendMessage ( msg ) ; } }
public void onUnhold ( ) { if ( ( getConnectionService ( ) . getAllConnections ( ) . size ( ) ) > 1 ) { android.util.Log.w ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , "Ignoring unhold; call hold on the foreground call" ) ; return ; } android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "onUnhold " + ( mCurrentCall ) ) ) ; if ( ( ! ( mClosed ) ) && ( ( mHeadsetProfile ) != null ) ) { mHeadsetProfile.acceptCall ( mDevice , BluetoothHeadsetClient.CALL_ACCEPT_HOLD ) ; } }
public static MergingReport.Result validate ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlDocument xmlDocument ) { com.android.manifmerger.MergingReport.Result validated = com.android.manifmerger.PreValidator.validate ( mergingReport , xmlDocument.getRootNode ( ) ) ; if ( validated == ( MergingReport.Result.SUCCESS ) ) { com.android.manifmerger.PreValidator.splitUsesFeatureDeclarations ( mergingReport , xmlDocument.getRootNode ( ) ) ; } return validated ; }
public boolean equals ( java.lang.Object other ) { if ( ! ( other instanceof android.icu.text.DateTimePatternGenerator.DateTimeMatcher ) ) { return false ; } android.icu.text.DateTimePatternGenerator.DateTimeMatcher that = ( ( android.icu.text.DateTimePatternGenerator.DateTimeMatcher ) ( other ) ) ; for ( int i = 0 ; i < ( original.length ) ; ++ i ) { if ( ! ( original [ i ] . equals ( that.original [ i ] ) ) ) return false ; } return true ; }
public void add ( java.lang.String fileName , java.lang.String jarName ) { java.lang.String packageName ; int pos ; if ( ( pos = fileName.lastIndexOf ( "/" ) ) != ( - 1 ) ) { packageName = fileName.substring ( 0 , pos ) ; } else { packageName = fileName ; } addToList ( packageName , jarName , indexMap ) ; addToList ( jarName , packageName , jarMap ) ; }
public void test_providerCount ( ) { java.security.Provider [ ] providers = java.security.Security.getProviders ( ) ; assertTrue ( ( ( providers.length ) > 0 ) ) ; assertTrue ( ( ( providers.length ) < 10 ) ) ; }
public void stopStreaming ( java.lang.String serviceId , int reason ) { com.android.phone.testapps.embmsmw.AppActiveStreams.StreamCallbackWithState entry = mStreamStates.get ( serviceId ) ; if ( entry != null ) { try { if ( ( entry.getState ( ) ) != ( android.telephony.mbms.StreamingService.STATE_STOPPED ) ) { entry.setState ( StreamingService.STATE_STOPPED ) ; entry.getCallback ( ) . streamStateUpdated ( StreamingService.STATE_STOPPED , reason ) ; } } catch ( android.os.RemoteException e ) { dispose ( serviceId ) ; } } }
public void testStringFromCharset ( ) { java.nio.charset.Charset cs = java.nio.charset.Charset.forName ( "UTF-8" ) ; byte [ ] bytes = new byte [ ] { ( ( byte ) ( 'h' ) ) , ( ( byte ) ( 'i' ) ) } ; assertEquals ( "hi" , new java.lang.String ( bytes , cs ) ) ; }
private static java.util.Calendar parseDate ( java.util.Locale l , java.lang.String fmt , java.lang.String value ) { java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( fmt , l ) ; java.text.ParsePosition pp = new java.text.ParsePosition ( 0 ) ; java.util.Date d = sdf.parse ( value , pp ) ; if ( d == null ) { fail ( pp.toString ( ) ) ; } java.util.Calendar c = java.util.Calendar.getInstance ( java.util.TimeZone.getTimeZone ( "UTC" ) ) ; c.setTime ( d ) ; return c ; }
public static < I extends org.chromium.mojo.bindings.Interface , P extends org.chromium.mojo.bindings.Interface.Proxy > boolean handleRunOrClosePipe ( org.chromium.mojo.bindings.Interface.Manager < I , P > manager , org.chromium.mojo.bindings.ServiceMessage message ) { org.chromium.mojo.bindings.Message payload = message.getPayload ( ) ; org.chromium.mojo.bindings.interfacecontrol.RunOrClosePipeMessageParams query = org.chromium.mojo.bindings.interfacecontrol.RunOrClosePipeMessageParams.deserialize ( payload ) ; if ( ( query.input.which ( ) ) == ( RunOrClosePipeInput.Tag.RequireVersion ) ) { return ( query.input.getRequireVersion ( ) . version ) <= ( manager.getVersion ( ) ) ; } return false ; }
public static java.lang.invoke.MethodHandle permuteArguments ( java.lang.invoke.MethodHandle target , java.lang.invoke.MethodType newType , int ... reorder ) { reorder = reorder.clone ( ) ; java.lang.invoke.MethodType oldType = target.type ( ) ; java.lang.invoke.MethodHandles.permuteArgumentChecks ( reorder , newType , oldType ) ; throw new java.lang.UnsupportedOperationException ( "MethodHandles.permuteArguments is not implemented" ) ; }
public int lengthOfYear ( ) { java.util.Calendar jcal = java.util.Calendar.getInstance ( java.time.chrono.JapaneseChronology.LOCALE ) ; jcal.set ( java.util.Calendar.ERA , ( ( era.getValue ( ) ) + ( java.time.chrono.JapaneseEra.ERA_OFFSET ) ) ) ; jcal.set ( yearOfEra , ( ( isoDate.getMonthValue ( ) ) - 1 ) , isoDate.getDayOfMonth ( ) ) ; return jcal.getActualMaximum ( java.util.Calendar.DAY_OF_YEAR ) ; }
private void onPackageDoubleClick ( ) { com.android.sdkuilib.internal.repository.ArchiveInfo ai = getSelectedArchive ( ) ; if ( ai == null ) { return ; } boolean wasAccepted = ai.isAccepted ( ) ; ai.setAccepted ( ( ! wasAccepted ) ) ; ai.setRejected ( wasAccepted ) ; mLicenseAcceptAll = false ; mTableViewPackage.refresh ( ai ) ; updateLicenceRadios ( ai ) ; }
private void removeImsServiceFeatureListener ( ) { synchronized ( mLock ) { mImsStatusCallbacks.clear ( ) ; } }
public CommandSupplier.Builder inject ( com.android.dialer.commandline.CommandSupplier.Builder builder ) { builder.addCommand ( "help" , help ) ; builder.addCommand ( "version" , version ) ; builder.addCommand ( "echo" , echo ) ; builder.addCommand ( "blocking" , blocking ) ; return builder ; }
public void run ( ) { this . onStartOtaIfNecessary ( slotId , new android.service.euicc.EuiccService.OtaStatusChangedCallback ( ) { @ java.lang.Override public void onOtaStatusChanged ( int status ) { try { statusChangedCallback.onOtaStatusChanged ( status ) ; } catch ( android.os.RemoteException e ) { } } } ) ; }
public void copyFrom ( float [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
public com.android.ims.internal.IImsEcbm getEcbmInterface ( int slotId , int featureType , int sessionId ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature.getEcbmInterface ( sessionId ) ; } } return null ; }
public void duplicateCacheMiss ( ) throws java.lang.Exception { com.android.volley.mock.MockRequest secondRequest = new com.android.volley.mock.MockRequest ( ) ; mRequest.setSequence ( 1 ) ; secondRequest.setSequence ( 2 ) ; mCacheQueue.add ( mRequest ) ; mCacheQueue.add ( secondRequest ) ; mCacheQueue.waitUntilEmpty ( com.android.volley.CacheDispatcherTest.TIMEOUT_MILLIS ) ; assertTrue ( ( ( mNetworkQueue.size ( ) ) == 1 ) ) ; assertFalse ( mDelivery.postResponse_called ) ; }
public void stopKeepaliveResponse ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { throw new java.lang.UnsupportedOperationException ( "stopKeepaliveResponse not implemented" ) ; }
private void showErrorMessage ( java.lang.String message ) { new android.app.AlertDialog.Builder ( this ) . setTitle ( R.string.error_title ) . setMessage ( message ) . setPositiveButton ( android.R.string.ok , null ) . show ( ) ; }
public void disconnectBluetoothAudio ( ) { com.android.server.telecom.Log.v ( this , "disconnectBluetoothAudio()..." ) ; if ( ( mBluetoothHeadset ) != null ) { mBluetoothState = com.android.server.telecom.BluetoothManager.BLUETOOTH_DEVICE_CONNECTED ; mBluetoothHeadset.disconnectAudio ( ) ; } else { mBluetoothState = com.android.server.telecom.BluetoothManager.BLUETOOTH_DISCONNECTED ; } mHandler.removeCallbacks ( mBluetoothConnectionTimeout.getRunnableToCancel ( ) ) ; mBluetoothConnectionTimeout.cancel ( ) ; }
public void handle ( @ javax.annotation.Nonnull org.simpleframework.http.Request request , @ javax.annotation.Nonnull org.simpleframework.http.Response response ) { java.lang.String method = request.getMethod ( ) ; com.android.jack.server.router.MethodRouter.logger.log ( java.util.logging.Level.FINE , ( ( "Route request for method '" + method ) + "'" ) ) ; org.simpleframework.http.core.Container container = registry.get ( method ) ; if ( container != null ) { container.handle ( request , response ) ; } else { primary.handle ( request , response ) ; } }
public void readCharacteristic ( int clientIf , java.lang.String address , int srvcType , int srvcInstanceId , android.os.ParcelUuid srvcId , int charInstanceId , android.os.ParcelUuid charId , int authReq ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.readCharacteristic ( clientIf , address , srvcType , srvcInstanceId , srvcId.getUuid ( ) , charInstanceId , charId.getUuid ( ) , authReq ) ; }
private void checkCreateActivityInProject ( java.lang.String activityName ) throws java.lang.Exception { com.google.common.base.Stopwatch stopwatch = new com.google.common.base.Stopwatch ( ) ; stopwatch.start ( ) ; java.io.File templateFile = com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandlerTest.findTemplate ( "activities" , activityName ) ; com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandlerTest.sProjectTestedSeparately.add ( templateFile ) ; checkProjectWithActivity ( templateFile.getName ( ) ) ; stopwatch.stop ( ) ; java.lang.System.out.println ( ( ( ( "Checked " + ( templateFile.getName ( ) ) ) + " successfully in " ) + ( stopwatch.toString ( ) ) ) ) ; }
public void onRttCallScreenUiUnready ( ) { com.android.dialer.common.LogUtil.enterBlock ( "RttCallPresenter.onRttCallScreenUiUnready" ) ; com.android.incallui.InCallPresenter.getInstance ( ) . removeListener ( this ) ; stopListenOnRemoteMessage ( ) ; }
public static java.net.InetAddress getLocalHost ( ) throws java.net.UnknownHostException { java.lang.SecurityManager security = java.lang.System.getSecurityManager ( ) ; try { java.lang.String local = Libcore.os.uname ( ) . nodename ; if ( security != null ) { security.checkConnect ( local , ( - 1 ) ) ; } return java.net.InetAddress.lookupHostByName ( local , java.net.InetAddress.NETID_UNSET ) [ 0 ] ; } catch ( java.lang.SecurityException e ) { return java.net.InetAddress.impl.loopbackAddress ( ) ; } }
private static void setSymbols ( android.icu.text.DecimalFormatSymbols dfs , java.lang.String [ ] symbols ) { dfs.setCurrencySymbol ( symbols [ 0 ] ) ; dfs.setExponentSeparator ( symbols [ 1 ] ) ; dfs.setInfinity ( symbols [ 2 ] ) ; dfs.setInternationalCurrencySymbol ( symbols [ 3 ] ) ; dfs.setNaN ( symbols [ 4 ] ) ; android.icu.dev.test.serializable.FormatTests.setCharSymbols ( dfs , symbols [ 5 ] . toCharArray ( ) ) ; }
private void showTranscriptionDonationEnabledPreferences ( ) { donateTranscribedVoicemailPreference.setOnPreferenceChangeListener ( this ) ; donateTranscribedVoicemailPreference.setChecked ( voicemailClient.isVoicemailDonationEnabled ( getContext ( ) , phoneAccountHandle ) ) ; donateTranscribedVoicemailPreference.setSummary ( R.string.voicemail_donate_preference_summary_info ) ; donateTranscribedVoicemailPreference.setEnabled ( true ) ; getPreferenceScreen ( ) . addPreference ( donateTranscribedVoicemailPreference ) ; }
public void testNegateMathContextPositive ( ) { java.lang.String a = "92948782094488478231212478987482988429808779810457634781384756794987" ; int aScale = 41 ; int precision = 37 ; java.math.RoundingMode rm = java.math.RoundingMode.FLOOR ; java.math.MathContext mc = new java.math.MathContext ( precision , rm ) ; java.lang.String c = "-929487820944884782312124789.8748298842" ; int cScale = 10 ; java.math.BigDecimal aNumber = new java.math.BigDecimal ( new java.math.BigInteger ( a ) , aScale ) ; java.math.BigDecimal res = aNumber.negate ( mc ) ; assertEquals ( "incorrect value" , c , res.toString ( ) ) ; assertEquals ( "incorrect scale" , cScale , res.scale ( ) ) ; }
private void scan ( java.lang.String [ ] directories , java.lang.String volumeName ) { mWakeLock.acquire ( ) ; android.content.ContentValues values = new android.content.ContentValues ( ) ; values.put ( MediaStore.MEDIA_SCANNER_VOLUME , volumeName ) ; android.net.Uri scanUri = getContentResolver ( ) . insert ( android.provider.MediaStore.getMediaScannerUri ( ) , values ) ; android.net.Uri uri = android.net.Uri.parse ( ( "file://" + ( directories [ 0 ] ) ) ) ; sendBroadcast ( new android.content.Intent ( android.content.Intent.ACTION_MEDIA_SCANNER_STARTED , uri ) ) ; try { if ( volumeName.equals ( MediaProvider.EXTERNAL_VOLUME ) ) { openDatabase ( volumeName ) ; } android.media.MediaScanner scanner = createMediaScanner ( ) ; scanner.scanDirectories ( directories , volumeName ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.providers.media.MediaScannerService.TAG , "exception in MediaScanner.scan()" , e ) ; } getContentResolver ( ) . delete ( scanUri , null , null ) ; sendBroadcast ( new android.content.Intent ( android.content.Intent.ACTION_MEDIA_SCANNER_FINISHED , uri ) ) ; mWakeLock.release ( ) ; }
synchronized void nAllocationRead ( long id , java.lang.Object d , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead ( mContext , id , d , dt.mID ) ; }
public java.util.List < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > getAnnotations ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedPackage pkg ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findPackage ( pkg ) ; if ( c == null ) { return null ; } return c.annotations ; }
private void notifyLimitReached ( java.lang.String limitName , java.lang.String iface ) { final int length = mObservers.beginBroadcast ( ) ; try { for ( int i = 0 ; i < length ; i ++ ) { try { mObservers.getBroadcastItem ( i ) . limitReached ( limitName , iface ) ; } catch ( android.os.RemoteException | java.lang.RuntimeException e ) { } } } finally { mObservers.finishBroadcast ( ) ; } }
private java.lang.String sanitizeCodename ( @ com.android.annotations.Nullable java.lang.String codename ) { if ( codename != null ) { codename = codename.trim ( ) ; if ( ( ( codename.length ( ) ) == 0 ) || ( SdkConstants.CODENAME_RELEASE.equals ( codename ) ) ) { codename = null ; } } return codename ; }
synchronized long nScriptFieldIDCreate ( long sid , int slot ) { validate ( ) ; return rsnScriptFieldIDCreate ( mContext , sid , slot ) ; }
private static boolean isUnsupportedForWrapping ( java.lang.String algorithm ) { if ( libcore.javax.crypto.CipherTest.isOnlyWrappingAlgorithm ( algorithm ) ) { return false ; } if ( algorithm.equals ( "RSA/ECB/NOPADDING" ) ) { return true ; } if ( algorithm.startsWith ( "AES" ) ) { return true ; } return false ; }
public static org.conscrypt.OpenSSLX509Certificate fromX509PemInputStream ( java.io.InputStream is ) throws org.conscrypt.OpenSSLX509CertificateFactory.ParsingException { @ java.lang.SuppressWarnings ( value = "resource" ) final org.conscrypt.OpenSSLBIOInputStream bis = new org.conscrypt.OpenSSLBIOInputStream ( is ) ; try { final long certCtx = org.conscrypt.NativeCrypto.PEM_read_bio_X509 ( bis.getBioContext ( ) ) ; if ( certCtx == 0L ) { return null ; } return new org.conscrypt.OpenSSLX509Certificate ( certCtx ) ; } catch ( java.lang.Exception e ) { throw new org.conscrypt.OpenSSLX509CertificateFactory.ParsingException ( e ) ; } finally { org.conscrypt.NativeCrypto.BIO_free ( bis.getBioContext ( ) ) ; } }
public com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile getFile ( org.eclipse.core.resources.IFile file ) { if ( ( mFiles ) != null ) { for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile f : mFiles ) { com.android.io.IAbstractFile abstractFile = f.getFile ( ) ; if ( abstractFile instanceof com.android.ide.eclipse.adt.io.IFileWrapper ) { org.eclipse.core.resources.IFile iFile = ( ( com.android.ide.eclipse.adt.io.IFileWrapper ) ( f.getFile ( ) ) ) . getIFile ( ) ; if ( ( iFile != null ) && ( iFile.equals ( file ) ) ) { return f ; } } } } return null ; }
public void onClose ( ) { if ( com.android.bluetooth.opp.BluetoothOppObexServerSession.V ) android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppObexServerSession.TAG , "release WakeLock" ) ; if ( mWakeLock.isHeld ( ) ) { mWakeLock.release ( ) ; } if ( mPartialWakeLock.isHeld ( ) ) { mPartialWakeLock.release ( ) ; } if ( ( mCallback ) != null ) { android.os.Message msg = android.os.Message.obtain ( mCallback ) ; msg.what = BluetoothOppObexSession.MSG_SESSION_COMPLETE ; msg.obj = mInfo ; msg.sendToTarget ( ) ; } }
android.net.wifi.WifiInfo getWifiInfo ( ) { android.net.wifi.WifiInfo wifiInfo = mock ( android.net.wifi.WifiInfo.class ) ; when ( wifiInfo.is24GHz ( ) ) . thenReturn ( true ) ; when ( wifiInfo.is5GHz ( ) ) . thenReturn ( false ) ; when ( wifiInfo.getRssi ( ) ) . thenReturn ( ( - 70 ) ) ; when ( wifiInfo.getNetworkId ( ) ) . thenReturn ( WifiConfiguration.INVALID_NETWORK_ID ) ; when ( wifiInfo.getBSSID ( ) ) . thenReturn ( null ) ; return wifiInfo ; }
public void setScanInterval ( int scanInterval ) { doBooleanCommand ( ( "SCAN_INTERVAL " + scanInterval ) ) ; }
private static java.lang.String toUnsignedString0 ( int i , int shift ) { char [ ] buf = new char [ 32 ] ; int charPos = 32 ; int radix = 1 << shift ; int mask = radix - 1 ; do { buf [ ( -- charPos ) ] = java.lang.Integer.digits [ ( i & mask ) ] ; i >>>= shift ; } while ( i != 0 ) ; return new java.lang.String ( buf , charPos , ( 32 - charPos ) ) ; }
public void error ( java.lang.Throwable error ) { java.lang.String message = error.getMessage ( ) ; if ( message == null ) { message = error.getClass ( ) . getName ( ) ; } java.io.PrintStream ps = new java.io.PrintStream ( com.android.ide.eclipse.adt.AdtPlugin.getErrorStream ( ) ) ; error.printStackTrace ( ps ) ; }
private void assertCalendarEquals ( java.util.Calendar calendar , int year , int month , int day , int hour , int minute ) { assertEquals ( year , calendar.get ( java.util.Calendar.YEAR ) ) ; assertEquals ( month , calendar.get ( java.util.Calendar.MONTH ) ) ; assertEquals ( day , calendar.get ( java.util.Calendar.DATE ) ) ; assertEquals ( hour , calendar.get ( java.util.Calendar.HOUR_OF_DAY ) ) ; assertEquals ( minute , calendar.get ( java.util.Calendar.MINUTE ) ) ; }
public void onClick ( android.view.View v ) { java.lang.String subject = mCallSubjectView.getText ( ) . toString ( ) ; android.content.Intent intent = new com.android.dialer.callintent.CallIntentBuilder ( mNumber , CallInitiationType.Type.CALL_SUBJECT_DIALOG ) . setPhoneAccountHandle ( mPhoneAccountHandle ) . setCallSubject ( subject ) . build ( ) ; getSystemService ( android.telecom.TelecomManager.class ) . placeCall ( intent.getData ( ) , intent.getExtras ( ) ) ; mSubjectHistory.add ( subject ) ; saveSubjectHistory ( mSubjectHistory ) ; finish ( ) ; }
public boolean removeAll ( final java.util.Collection < ? > c ) { com.google.common.base.Preconditions.checkNotNull ( c ) ; com.google.common.base.Predicate < java.util.Map.Entry < R , V > > predicate = new com.google.common.base.Predicate < java.util.Map.Entry < R , V > > ( ) { @ java.lang.Override public boolean apply ( java.util.Map.Entry < R , V > entry ) { return c.contains ( entry.getValue ( ) ) ; } } ; return removePredicate ( predicate ) ; }
public java.lang.String getGradleBuildscript ( ) { return ( ( ( ( ( ( ( ( ( "buildscript {\n" + ( " repositories {\n" + " maven { url '" ) ) + ( getRepoDir ( ) . toString ( ) ) ) + "\' }\n" ) + " }\n" ) + " dependencies {\n" ) + " classpath \"com.android.tools.build:gradle:" ) + ( com.android.build.gradle.integration.common.fixture.GradleTestProject.ANDROID_GRADLE_VERSION ) ) + "\"\n" ) + " }\n" ) + "}\n" ; }
protected boolean onLevelChange ( int state ) { setNumLevels ( com.android.systemui.statusbar.phone.SignalDrawable.getNumLevels ( state ) ) ; setSignalState ( com.android.systemui.statusbar.phone.SignalDrawable.getState ( state ) ) ; int level = com.android.systemui.statusbar.phone.SignalDrawable.getLevel ( state ) ; if ( level != ( mLevel ) ) { mLevel = level ; invalidateSelf ( ) ; } return true ; }
public void testKeyStore_GetCertificateAlias_CAEntry_Encrypted_Success ( ) throws java.lang.Exception { setupPassword ( ) ; mKeyStore.load ( null , null ) ; assertTrue ( mAndroidKeyStore.put ( ( ( Credentials.CA_CERTIFICATE ) + ( android.security.AndroidKeyStoreTest.TEST_ALIAS_1 ) ) , android.security.AndroidKeyStoreTest.FAKE_CA_1 , KeyStore.UID_SELF , KeyStore.FLAG_ENCRYPTED ) ) ; java.security.cert.CertificateFactory f = java.security.cert.CertificateFactory.getInstance ( "X.509" ) ; java.security.cert.Certificate actual = f.generateCertificate ( new java.io.ByteArrayInputStream ( android.security.AndroidKeyStoreTest.FAKE_CA_1 ) ) ; assertEquals ( "Stored certificate alias should be found" , android.security.AndroidKeyStoreTest.TEST_ALIAS_1 , mKeyStore.getCertificateAlias ( actual ) ) ; }
public static boolean waitFor ( java.util.concurrent.CountDownLatch latch ) throws java.lang.InterruptedException { for ( int i = 0 ; i < ( android.location.cts.TestUtils.STANDARD_WAIT_TIME_ROUNDS ) ; ++ i ) { java.lang.Thread.sleep ( android.location.cts.TestUtils.STANDARD_SLEEP_TIME_MS ) ; if ( latch.await ( android.location.cts.TestUtils.STANDARD_WAIT_TIME_MS , java.util.concurrent.TimeUnit.MILLISECONDS ) ) { return true ; } } return false ; }
public void widgetDefaultSelected ( org.eclipse.swt.events.SelectionEvent e ) { java.lang.Object selection = ( ( org.eclipse.swt.widgets.TreeItem ) ( e.item ) ) . getData ( ) ; if ( selection instanceof com.android.ddmlib.IDevice ) { com.android.hierarchyviewerlib.ComponentRegistry.getDirector ( ) . loadPixelPerfectData ( ( ( com.android.ddmlib.IDevice ) ( selection ) ) ) ; } }
private static void saveUnit ( android.icu.text.DecimalFormat.Unit unit , java.lang.String pluralVariant , int idx , java.util.Map < java.lang.String , android.icu.text.DecimalFormat [ ] > units ) { android.icu.text.DecimalFormat [ ] byBase = units.get ( pluralVariant ) ; if ( byBase == null ) { byBase = new android.icu.text.DecimalFormat.Unit [ android.icu.text.CompactDecimalDataCache.MAX_DIGITS ] ; units.put ( pluralVariant , byBase ) ; } byBase [ idx ] = unit ; }
public void forEachRemaining ( java.util.function.Consumer < ? super E > action ) { java.util.Objects.requireNonNull ( action ) ; final int size = snapshot.length ; for ( int i = cursor ; i < size ; i ++ ) { action.accept ( ( ( E ) ( snapshot [ i ] ) ) ) ; } cursor = size ; }
java.util.List < android.bluetooth.BluetoothDevice > getDevices ( ) { return new java.util.ArrayList < > ( ) ; }
public void schedule ( java.util.TimerTask task , java.util.Date when , long period ) { if ( ( period <= 0 ) || ( ( when.getTime ( ) ) < 0 ) ) { throw new java.lang.IllegalArgumentException ( ) ; } long delay = ( when.getTime ( ) ) - ( java.lang.System.currentTimeMillis ( ) ) ; scheduleImpl ( task , ( delay < 0 ? 0 : delay ) , period , false ) ; }
public void copyFrom ( byte [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
public void testAesCbcHmacSha1Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
char [ ] getDigitsLocal ( ) { if ( ( digits ) != null ) { return digits ; } else { char [ ] digitArray = new char [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { digitArray [ i ] = ( ( char ) ( ( zeroDigit ) + i ) ) ; } return digitArray ; } }
public java.io.File call ( ) { if ( ( variantData.dexTask ) != null ) { return variantData.dexTask.getOutputFolder ( ) ; } if ( ( variantData.javaCompileTask ) != null ) { return variantData.javaCompileTask.getDestinationDir ( ) ; } return null ; }
private boolean IsFreeSpaceAvailable ( ) { java.io.File dataDir = android.os.Environment.getDataDirectory ( ) ; @ java.lang.SuppressWarnings ( value = "deprecation" ) long lowThreshold = android.os.storage.StorageManager.from ( mContext ) . getStorageLowBytes ( dataDir ) ; if ( lowThreshold == 0 ) { throw new java.lang.IllegalStateException ( "Invalid low memory threshold" ) ; } long usableSpace = dataDir.getUsableSpace ( ) ; return usableSpace >= lowThreshold ; }
public void testGetOutputAfterGetInputStreamFails ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.setDoOutput ( true ) ; try { connection.getInputStream ( ) ; connection.getOutputStream ( ) ; fail ( ) ; } catch ( java.net.ProtocolException expected ) { } }
public < T extends com.android.jack.ir.ast.JNode > void accept ( @ javax.annotation.Nonnull java.util.List < T > list ) { int i = 0 ; try { for ( int c = list.size ( ) ; i < c ; ++ i ) { list.get ( i ) . traverse ( this ) ; } } catch ( java.lang.Throwable e ) { throw com.android.jack.ir.ast.JVisitor.translateException ( list.get ( i ) , e ) ; } }
public void testCompatRevoked22 ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_22 ) , false , false ) ) ; try { runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest22" , "testCompatRevoked_part1" ) ; fail ( "App must be killed on a permission revoke" ) ; } catch ( java.lang.AssertionError expected ) { } runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest22" , "testCompatRevoked_part2" ) ; }
public static void main ( java.lang.String [ ] args ) { if ( ( ( Main.arrayAccess ( ) ) + ( Main.intDiv ( 10 ) ) ) != ( - 35 ) ) { java.lang.System.out.println ( "FAIL" ) ; } }
public static boolean isEnhancedCallBlockingEnabledByPlatform ( android.content.Context context ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( context.getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; android.os.PersistableBundle carrierConfig = configManager.getConfig ( ) ; if ( carrierConfig == null ) { carrierConfig = configManager.getDefaultConfig ( ) ; } return carrierConfig.getBoolean ( CarrierConfigManager.KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL ) ; }
public void validateCertPath ( java.security.cert.CertPath path ) { java.util.List < ? extends java.security.cert.Certificate > certificates = path.getCertificates ( ) ; java.security.cert.Certificate certificate = certificates.get ( 0 ) ; assertEquals ( "unexpected certificate type" , "X.509" , certificate.getType ( ) ) ; java.security.cert.X509Certificate x509Certificate = ( ( java.security.cert.X509Certificate ) ( certificate ) ) ; javax.security.auth.x500.X500Principal subjectX500Principal = x509Certificate.getSubjectX500Principal ( ) ; javax.security.auth.x500.X500Principal expectedPrincipal = new javax.security.auth.x500.X500Principal ( ( "CN=Android CTS, " + "OU=Android, O=Android, L=Android, ST=Android, C=AN" ) ) ; assertEquals ( "unexpected principal" , expectedPrincipal , subjectX500Principal ) ; }
public void setUp ( ) throws java.lang.Exception { mMockRunUtil = org.easymock.EasyMock.createMock ( com.android.tradefed.util.IRunUtil.class ) ; mPreparer = new com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer ( ) { @ java.lang.Override com.android.tradefed.util.IRunUtil getRunUtil ( ) { return mMockRunUtil ; } } ; mPreparer.mDepModules.add ( "enum" ) ; }
private void addLocalDefaultLocale ( ) { if ( ( com.google.gct.testing.dimension.LanguageDimension.localDefaultLanguage ) != null ) { supportedLanguages.remove ( com.google.gct.testing.dimension.LanguageDimension.localDefaultLanguage ) ; supportedLanguages.add ( 0 , com.google.gct.testing.dimension.LanguageDimension.localDefaultLanguage ) ; } }
private static double getDoubleAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name , double defaultValue ) { java.lang.Object value = annotation.getValue ( name ) ; if ( value instanceof java.lang.Number ) { return ( ( java.lang.Number ) ( value ) ) . doubleValue ( ) ; } return defaultValue ; }
public void update ( ) { updateAll ( ) ; }
boolean disableNetwork ( android.net.wifi.WifiConfiguration config ) { if ( config == null ) { return false ; } if ( mVerboseLoggingEnabled ) localLog ( ( "disableNetwork: " + ( config.networkId ) ) ) ; if ( ! ( mWifiNative.disableNetwork ( config.networkId ) ) ) { loge ( ( "Disable network in wpa_supplicant failed on " + ( config.networkId ) ) ) ; return false ; } return true ; }
public boolean shouldDelayChildPressedState ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return shouldDelayChildPressedState ( ) ; } } ) ; return ret ; } return true ; }
public com.android.server.wifi.WifiNative.RingBufferStatus [ ] getRingBufferStatus ( ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getRingBufferStatusNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } }
private byte [ ] getResourceContents ( java.lang.String resourceName ) throws java.io.IOException { try ( java.io.InputStream in = getClass ( ) . getResourceAsStream ( resourceName ) ) { if ( in == null ) { throw new java.lang.IllegalArgumentException ( ( "Resource not found: " + resourceName ) ) ; } return com.android.apksig.ApkVerifierTest.toByteArray ( in ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.String name = java.lang.System.getProperty ( "java.vm.name" ) ; if ( ! ( "Dalvik" . equals ( name ) ) ) { java.lang.System.out.println ( ( "This test is not supported on " + name ) ) ; return ; } Main.testMethodTracing ( ) ; Main.testCountInstances ( ) ; Main.testRuntimeStat ( ) ; Main.testRuntimeStats ( ) ; }
public int hashCode ( ) { int result = mBuildConfigFields.hashCode ( ) ; result = ( 31 * result ) + ( mResValues.hashCode ( ) ) ; result = ( 31 * result ) + ( mProguardFiles.hashCode ( ) ) ; result = ( 31 * result ) + ( mConsumerProguardFiles.hashCode ( ) ) ; return result ; }
public void setPackageStoppedState ( java.lang.String packageName , boolean stopped ) { final int uid = android.os.Binder.getCallingUid ( ) ; final int permission = mContext.checkCallingOrSelfPermission ( android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE ) ; final boolean allowedByPermission = permission == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ; synchronized ( mPackages ) { if ( mSettings.setPackageStoppedStateLPw ( packageName , stopped , allowedByPermission , uid ) ) { scheduleWriteStoppedPackagesLocked ( ) ; } } }
public void enter ( ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_CONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; if ( mUserManager.isUserUnlocked ( ) ) { mConnectionHandler.obtainMessage ( PbapClientConnectionHandler.MSG_DOWNLOAD ) . sendToTarget ( ) ; } }
public void checkClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode ) { if ( ( ( classNode.name.indexOf ( '$' ) ) != ( - 1 ) ) && ( ( ( classNode.access ) & ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) == 0 ) ) { return ; } if ( ( ( classNode.access ) & ( org.objectweb.asm.Opcodes.ACC_ABSTRACT ) ) != 0 ) { return ; } if ( com.android.tools.lint.checks.ViewConstructorDetector.isViewClass ( context , classNode ) ) { com.android.tools.lint.checks.ViewConstructorDetector.checkConstructors ( context , classNode ) ; } }
public void testCloseBehavior ( ) throws java.io.IOException { java.io.InputStream is = loadResource ( ) ; try { java.io.InputStream ncis = new com.android.io.NonClosingInputStream ( is ) ; assertEquals ( '1' , parseAndClose ( ncis ) ) ; try { assertEquals ( '2' , parse ( ncis ) ) ; fail ( "Expected: IOException 'stream closed'; Actual: no error." ) ; } catch ( java.io.IOException e ) { assertEquals ( "Stream closed" , e.getMessage ( ) ) ; } } finally { is.close ( ) ; } }
public void fetchVoicemailStatus ( ) { java.lang.StringBuilder where = new java.lang.StringBuilder ( ) ; java.util.List < java.lang.String > selectionArgs = new java.util.ArrayList < > ( ) ; com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) . appendOmtpVoicemailStatusSelectionClause ( context , where , selectionArgs ) ; if ( com.android.dialer.telecom.TelecomUtil.hasReadWriteVoicemailPermissions ( context ) ) { startQuery ( com.android.dialer.database.CallLogQueryHandler.QUERY_VOICEMAIL_STATUS_TOKEN , null , Status.CONTENT_URI , com.android.dialer.database.VoicemailStatusQuery.getProjection ( ) , where.toString ( ) , selectionArgs.toArray ( new java.lang.String [ selectionArgs.size ( ) ] ) , null ) ; } }
public int getScreenResolution ( ) { long display = sun.awt.X11.XToolkit.getDisplay ( ) ; sun.awt.SunToolkit.awtLock ( ) ; HEAD ( 763 ) ; sun.awt.X11.b2a Merge ; }
public static int getCodePoint ( char lead , char trail ) { if ( ( android.icu.text.UTF16.isLeadSurrogate ( lead ) ) && ( android.icu.text.UTF16.isTrailSurrogate ( trail ) ) ) { return android.icu.impl.UCharacterProperty.getRawSupplementary ( lead , trail ) ; } throw new java.lang.IllegalArgumentException ( "Illegal surrogate characters" ) ; }
public static void begin ( java.lang.String name ) { if ( org.chromium.base.TraceEvent.sEnabled ) org.chromium.base.TraceEvent.nativeBegin ( name , null ) ; }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , android.support.v8.renderscript.Allocation data , int dataXoff , int dataYoff , int dataZoff ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data.getID ( mRS ) , dataXoff , dataYoff , dataZoff , data.mSelectedLOD ) ; }
private static java.lang.String [ ] getDhcpRanges ( android.content.Context ctx ) { final java.lang.String [ ] fromResource = ctx.getResources ( ) . getStringArray ( com.android.internal.R.array.config_tether_dhcp_range ) ; if ( ( ( fromResource.length ) > 0 ) && ( ( ( fromResource.length ) % 2 ) == 0 ) ) { return fromResource ; } return com.android.server.connectivity.tethering.TetheringConfiguration.copy ( com.android.server.connectivity.tethering.TetheringConfiguration.DHCP_DEFAULT_RANGE ) ; }
public void testMissingRequiredBundleFile ( ) throws java.lang.Exception { libcore.tzdata.update2.ConfigBundle installedConfigBundle = createValidTzDataBundle ( "2030a" ) ; assertTrue ( install ( installedConfigBundle ) ) ; assertTzDataInstalled ( installedConfigBundle ) ; libcore.tzdata.update2.ConfigBundle incompleteUpdate = createValidTzDataBundleBuilder ( "2030b" ) . clearBionicTzData ( ) . buildUnvalidated ( ) ; assertFalse ( install ( incompleteUpdate ) ) ; assertTzDataInstalled ( installedConfigBundle ) ; }
private com.android.bluetooth.pbapclient.PbapClientService getService ( ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbapclient.PbapClientService.TAG , "PbapClient call not allowed for non-active user" ) ; return null ; } if ( ( ( mService ) != null ) && ( mService.isAvailable ( ) ) ) { return mService ; } return null ; }
public int getJayceCount ( ) { int size = 0 ; java.util.Iterator < com.android.sched.vfs.InputVFile > jayceIter = getJayceIterator ( ) ; while ( jayceIter.hasNext ( ) ) { size ++ ; jayceIter.next ( ) ; } return size ; }
public static int waitpid ( int pid , android.util.MutableInt status , int options ) throws android.system.ErrnoException { if ( status == null ) { return Libcore.os.waitpid ( pid , null , options ) ; } else { android.util.MutableInt internalStatus = new android.util.MutableInt ( status.value ) ; try { return Libcore.os.waitpid ( pid , internalStatus , options ) ; } finally { status.value = internalStatus.value ; } } }
public void action ( final com.android.ide.common.api.MenuAction action , final java.lang.String valueId , final java.lang.Boolean newValue ) { java.lang.String fullActionId = action.getId ( ) ; boolean isProp = fullActionId.startsWith ( "@prop@" ) ; final java.lang.String actionId = ( isProp ) ? fullActionId.substring ( 6 ) : fullActionId ; final com.android.ide.common.api.INode node = selectedNode ; if ( fullActionId.equals ( "layout_1width" ) ) { if ( ! ( valueId.startsWith ( "z" ) ) ) { node.editXml ( ( "Change attribute " + ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH ) ) , new com.android.ide.common.api.INodeHandler ( ) { public void handle ( com.android.ide.common.api.INode n ) { n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , valueId ) ; } } ) ; } return ; } else if ( fullActionId.equals ( "layout_2height" ) ) { if ( ! ( valueId.startsWith ( "z" ) ) ) { node.editXml ( ( "Change attribute " + ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT ) ) , new com.android.ide.common.api.INodeHandler ( ) { public void handle ( com.android.ide.common.api.INode n ) { n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT , valueId ) ; } } ) ; } return ; } if ( isProp ) { java.util.Map < java.lang.String , com.android.ide.common.layout.BaseViewRule.Prop > props = mAttributesMap.get ( key ) ; final com.android.ide.common.layout.BaseViewRule.Prop prop = ( props != null ) ? props.get ( actionId ) : null ; if ( prop != null ) { node.editXml ( ( "Change attribute " + actionId ) , new com.android.ide.common.api.INodeHandler ( ) { public void handle ( com.android.ide.common.api.INode n ) { if ( prop.isToggle ( ) ) { java.lang.String value = "" ; if ( valueId.equals ( "1t" ) ) { value = ( newValue ) ? "true" : "" ; } else if ( valueId.equals ( "2f" ) ) { value = ( newValue ) ? "false" : "" ; } n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId , value ) ; } else if ( prop.isFlag ( ) ) { java.lang.String values = "" ; if ( ! ( valueId.equals ( "~2clr" ) ) ) { values = n.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId ) ; java.util.Set < java.lang.String > newValues = new java.util.HashSet < java.lang.String > ( ) ; if ( values != null ) { newValues.addAll ( java.util.Arrays.asList ( values.split ( "\\|" ) ) ) ; } if ( newValue ) { newValues.add ( valueId ) ; } else { newValues.remove ( valueId ) ; } values = com.android.ide.common.layout.BaseViewRule.join ( '|' , newValues ) ; } n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId , values ) ; } else { java.lang.String value = "" ; if ( ! ( valueId.equals ( "~2clr" ) ) ) { value = ( newValue ) ? valueId : "" ; } n.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , actionId , value ) ; } } } ) ; } } }
static boolean containsKeyImpl ( java.util.Map < ? , ? > map , @ javax.annotation.Nullable java.lang.Object key ) { for ( java.util.Map.Entry < ? , ? > entry : map.entrySet ( ) ) { if ( com.google.common.base.Objects.equal ( entry.getKey ( ) , key ) ) { return true ; } } return false ; }
public void testReadTimeZone_badMagic ( ) throws java.lang.Exception { libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder builder = new libcore.util.ZoneInfoTestHelper.ZoneInfoDataBuilder ( ) ; builder.initializeToValid ( ) ; builder.setMagic ( - 559038737 ) ; try { createZoneInfo ( getName ( ) , java.lang.System.currentTimeMillis ( ) , builder.build ( ) ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } }
public void handleDataPathTimeout ( java.lang.String networkSpecifier ) { if ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.VDBG ) android.util.Log.v ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.TAG , ( "handleDataPathTimeout: networkSpecifier=" + networkSpecifier ) ) ; com.android.server.wifi.aware.WifiAwareDataPathStateManager.AwareNetworkRequestInformation nnri = mNetworkRequestsCache.remove ( networkSpecifier ) ; if ( nnri == null ) { if ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.DBG ) { android.util.Log.d ( com.android.server.wifi.aware.WifiAwareDataPathStateManager.TAG , ( "handleDataPathTimeout: network request not found for networkSpecifier=" + networkSpecifier ) ) ; } return ; } mMgr.endDataPath ( nnri.ndpId ) ; }
public void connectionForPatchWithBodyRequest ( ) throws java.lang.Exception { com.android.volley.mock.TestRequest.PatchWithBody request = new com.android.volley.mock.TestRequest.PatchWithBody ( ) ; assertEquals ( request.getMethod ( ) , Method.PATCH ) ; com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest ( mMockConnection , request ) ; assertEquals ( "PATCH" , mMockConnection.getRequestMethod ( ) ) ; assertTrue ( mMockConnection.getDoOutput ( ) ) ; }
public void onAnimationEnd ( android.view.animation.Animation animation ) { if ( ! ( ( mainActivity.isFinishing ( ) ) || ( mainActivity.isDestroyed ( ) ) ) ) { mainActivity.getFragmentManager ( ) . beginTransaction ( ) . remove ( dialpadFragment ) . commit ( ) ; } }
public static void start ( @ com.android.annotations.NonNull org.eclipse.ui.IWorkbenchWindow window ) { assert ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sSingleton ) == null ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator coordinator = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator ( window ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sSingleton = coordinator ; org.eclipse.ui.IPartService service = window.getPartService ( ) ; if ( service != null ) { service.addPartListener ( coordinator ) ; } }
public static com.android.sdklib.repository.descriptors.IPkgDesc newSource ( @ com.android.annotations.NonNull final com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull final com.android.sdklib.repository.MajorRevision revision ) { return new com.android.sdklib.repository.descriptors.PkgDesc ( ) { @ java.lang.Override public com.android.sdklib.repository.descriptors.PkgType getType ( ) { return PkgType.PKG_SOURCES ; } @ java.lang.Override public com.android.sdklib.repository.MajorRevision getMajorRevision ( ) { return revision ; } @ java.lang.Override public com.android.sdklib.AndroidVersion getAndroidVersion ( ) { return version ; } @ java.lang.Override public boolean isUpdateFor ( @ com.android.annotations.NonNull com.android.sdklib.repository.descriptors.IPkgDesc existingDesc ) { return isGenericUpdateFor ( existingDesc ) ; } } ; }
public void testLongHandDependencies ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( ( ( ( ( ( "" + "build.gradle:9: Warning: A newer version of com.android.support:support-v4 than 19.0 is available: " ) + ( com.android.sdklib.SdkVersionInfo.HIGHEST_KNOWN_STABLE_API ) ) + ".0.2 [GradleDependency]\n" ) + " compile group: \'com.android.support\', name: \'support-v4\', version: \'19.0\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) , lintProject ( "gradle/DependenciesProps.gradle=>build.gradle" ) ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "pattern" , pattern ) . add ( "pattern.flags" , java.lang.Integer.toHexString ( pattern.flags ( ) ) ) . toString ( ) ; }
public void updatePackageTable ( ) { }
void startProfileServices ( ) { debugLog ( "startCoreServices()" ) ; java.lang.Class [ ] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles ( ) ; if ( ( ( supportedProfileServices.length ) == 1 ) && ( com.android.bluetooth.gatt.GattService.class . getSimpleName ( ) . equals ( supportedProfileServices [ 0 ] . getSimpleName ( ) ) ) ) { updateUuids ( ) ; setBluetoothClassFromConfig ( ) ; mAdapterStateMachine.sendMessage ( AdapterState.BREDR_STARTED ) ; } else { setAllProfileServiceStates ( supportedProfileServices , BluetoothAdapter.STATE_ON ) ; } }
public static android.hardware.cts.helpers.sensoroperations.TestSensorOperation createFlushOperation ( android.hardware.cts.helpers.TestSensorEnvironment environment , final long duration , final java.util.concurrent.TimeUnit timeUnit ) { android.hardware.cts.helpers.sensoroperations.TestSensorOperation.Executor executor = new android.hardware.cts.helpers.sensoroperations.TestSensorOperation.Executor ( ) { @ java.lang.Override public void execute ( android.hardware.cts.helpers.TestSensorManager sensorManager , android.hardware.cts.helpers.TestSensorEventListener listener ) throws java.lang.InterruptedException { try { sensorManager.registerListener ( listener ) ; android.hardware.cts.helpers.SensorCtsHelper.sleep ( duration , timeUnit ) ; java.util.concurrent.CountDownLatch latch = sensorManager.requestFlush ( ) ; listener.waitForFlushComplete ( latch , true ) ; } finally { sensorManager.unregisterListener ( ) ; } } } ; return new android.hardware.cts.helpers.sensoroperations.TestSensorOperation ( environment , executor ) ; }
private synchronized void msgPassThru ( int cmd ) { android.util.Log.d ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , ( "msgPassThru " + cmd ) ) ; if ( ( mA2dpDevice ) == null ) { android.util.Log.e ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , "Already disconnected ignoring." ) ; return ; } mAvrcpCtrlSrvc.sendPassThroughCmd ( mA2dpDevice , cmd , AvrcpControllerService.KEY_STATE_PRESSED ) ; mAvrcpCtrlSrvc.sendPassThroughCmd ( mA2dpDevice , cmd , AvrcpControllerService.KEY_STATE_RELEASED ) ; }
public byte [ ] convert ( ) { try { byte [ ] ret ; ret = convert0 ( ) ; if ( com.android.dx.dex.file.DebugInfoEncoder.DEBUG ) { for ( int i = 0 ; i < ( ret.length ) ; i ++ ) { java.lang.System.err.printf ( "byte %02x\n" , ( 255 & ( ret [ i ] ) ) ) ; } } return ret ; } catch ( java.io.IOException ex ) { throw com.android.dx.util.ExceptionWithContext.withContext ( ex , "...while encoding debug info" ) ; } }
public static java.io.File getDynamicConfigFile ( com.android.tradefed.build.IBuildInfo info , java.lang.String moduleName ) { for ( com.android.tradefed.build.VersionedFile vFile : info.getFiles ( ) ) { if ( vFile.getVersion ( ) . equals ( ( ( com.android.compatibility.common.util.DynamicConfigHostSide.CONFIG_PATH_PREFIX ) + moduleName ) ) ) { return vFile.getFile ( ) ; } } return null ; }
public static float distance ( float x , float y , float sx , float sy ) { float dx = x - sx ; float dy = y - sy ; return ( ( float ) ( java.lang.Math.sqrt ( ( ( dx * dx ) + ( dy * dy ) ) ) ) ) ; }
public void test_RSA_public_decrypt_null_key_Failure ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.RSA_public_decrypt ( 0 , new byte [ 0 ] , new byte [ 0 ] , 0 , 0 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
public java.util.Map < java.lang.String , java.io.File > getDynamicConfigFiles ( ) { java.util.Map < java.lang.String , java.io.File > configMap = new java.util.HashMap < > ( ) ; for ( java.lang.String key : mBuildInfo.getBuildAttributes ( ) . keySet ( ) ) { if ( key.startsWith ( DynamicConfigHostSide.CONFIG_PATH_PREFIX ) ) { configMap.put ( key.substring ( DynamicConfigHostSide.CONFIG_PATH_PREFIX.length ( ) ) , new java.io.File ( mBuildInfo.getBuildAttributes ( ) . get ( key ) ) ) ; } } return configMap ; }
public boolean isVisibleOrBehindKeyguardLw ( ) { final com.android.server.WindowManagerService.AppWindowToken atoken = mAppToken ; return ( ( ( ( ( mSurface ) != null ) && ( ! ( mAttachedHidden ) ) ) && ( atoken == null ? mPolicyVisibility : ! ( atoken.hiddenRequested ) ) ) && ( ! ( mExiting ) ) ) && ( ! ( mDestroying ) ) ; }
private void onConnectStateChanged ( byte [ ] address , int state , int error , int localRole , int remoteRole ) { if ( com.android.bluetooth.pan.PanService.DBG ) { log ( ( ( ( ( ( "onConnectStateChanged: " + state ) + ", local role:" ) + localRole ) + ", remoteRole: " ) + remoteRole ) ) ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.pan.PanService.MESSAGE_CONNECT_STATE_CHANGED ) ; msg.obj = new com.android.bluetooth.pan.PanService.ConnectState ( address , state , error , localRole , remoteRole ) ; mHandler.sendMessage ( msg ) ; }
public com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor getBaseViewDescriptor ( ) { if ( ( mBaseViewDescriptor ) == null ) { for ( com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc : mViewDescriptors ) { if ( desc instanceof com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ) { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor viewDesc = ( ( com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ) ( desc ) ) ; if ( AndroidConstants.CLASS_VIEW.equals ( viewDesc.getFullClassName ( ) ) ) { mBaseViewDescriptor = viewDesc ; break ; } } } } return mBaseViewDescriptor ; }
public void testResultReportingFastTests ( ) throws java.lang.Exception { mReporter.invocationStarted ( mBuildInfo ) ; mReporter.testRunStarted ( com.android.compatibility.common.tradefed.result.MetadataReporterTest.ID , 3 ) ; runFastTests ( ) ; java.util.Collection < com.android.compatibility.common.tradefed.result.MetadataReporter.TestMetadata > metadata = mReporter.getTestMetadata ( ) ; assertTrue ( metadata.isEmpty ( ) ) ; mReporter.testRunEnded ( 10 , new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) ; mReporter.invocationEnded ( 10 ) ; }
public void destroyAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , long ceDataInode ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.destroyAppData ( uuid , packageName , userId , flags , ceDataInode ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void addProviderWithValidSimCredentialWithInvalidIMSI ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; config.homeSp.fqdn = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FQDN ; config.homeSp.friendlyName = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FRIENDLY_NAME ; config.credential = new android.net.wifi.hotspot2.pps.Credential ( ) ; config.credential.realm = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_REALM ; config.credential.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential ( ) ; config.credential.simCredential.imsi = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_IMSI ; config.credential.simCredential.eapType = android.net.wifi.EAPConstants.EAP_SIM ; org.mockito.Mockito.when ( mSimAccessor.getMatchingImsis ( new com.android.server.wifi.IMSIParameter ( com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_IMSI ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertFalse ( mManager.addProvider ( config ) ) ; }
private boolean isViewDescendantOf ( android.view.View child , android.view.View parent ) { if ( child == parent ) { return true ; } final android.view.ViewParent theParent = child.getParent ( ) ; return ( theParent instanceof android.view.ViewGroup ) && ( isViewDescendantOf ( ( ( android.view.View ) ( theParent ) ) , parent ) ) ; }
public void testGetNewCall ( ) throws java.lang.Exception { assertEquals ( "setSupportProgressBarVisibility" , com.android.tools.lint.checks.AppCompatCallDetector.getNewCall ( "Should use setSupportProgressBarVisibility instead of setProgressBarVisibility name" ) ) ; assertEquals ( "getSupportActionBar" , com.android.tools.lint.checks.AppCompatCallDetector.getNewCall ( "Should use getSupportActionBar instead of getActionBar name" ) ) ; assertNull ( com.android.tools.lint.checks.AppCompatCallDetector.getNewCall ( "No match" ) ) ; }
public void computeScroll ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { runVoidTaskOnUiThreadBlocking ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { computeScroll ( ) ; } } ) ; return ; } mAwContents.computeScroll ( ) ; }
private static java.lang.String getDownloadsDirectory ( ) { android.os.StrictMode.ThreadPolicy oldPolicy = android.os.StrictMode.allowThreadDiskReads ( ) ; java.lang.String downloadsPath ; try { long time = android.os.SystemClock.elapsedRealtime ( ) ; downloadsPath = android.os.Environment.getExternalStoragePublicDirectory ( Environment.DIRECTORY_DOWNLOADS ) . getPath ( ) ; org.chromium.base.metrics.RecordHistogram.recordTimesHistogram ( "Android.StrictMode.DownloadsDir" , ( ( android.os.SystemClock.elapsedRealtime ( ) ) - time ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; } finally { android.os.StrictMode.setThreadPolicy ( oldPolicy ) ; } return downloadsPath ; }
public static boolean deleteFolder ( final java.io.File folder ) { if ( ! ( folder.exists ( ) ) ) { return true ; } java.io.File [ ] files = folder.listFiles ( ) ; if ( files != null ) { for ( final java.io.File file : files ) { if ( file.isDirectory ( ) ) { com.android.utils.FileUtils.deleteFolder ( file ) ; } else { file.delete ( ) ; } } } return folder.delete ( ) ; }
private void checkReceiver ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( getExported ( element ) ) && ( isUnprotectedByPermission ( element ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_RECEIVER , element , context.getLocation ( element ) , "Exported receiver does not require permission" , null ) ; } }
java.lang.String validateInstrumentationRunner ( java.lang.String instrumentation ) { if ( ! ( mHasRunnerLibrary ) ) { return java.lang.String.format ( LaunchMessages.InstrValidator_NoTestLibMsg_s , AndroidConstants.LIBRARY_TEST_RUNNER ) ; } if ( ! ( instrumentation.equals ( SdkConstants.CLASS_INSTRUMENTATION_RUNNER ) ) ) { java.lang.String result = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.testClassForManifest ( mJavaProject , instrumentation , SdkConstants.CLASS_INSTRUMENTATION_RUNNER , true ) ; if ( result != ( com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.TEST_CLASS_OK ) ) { return java.lang.String.format ( LaunchMessages.InstrValidator_WrongRunnerTypeMsg_s , SdkConstants.CLASS_INSTRUMENTATION_RUNNER ) ; } } return com.android.ide.eclipse.adt.internal.launch.junit.InstrumentationRunnerValidator.INSTRUMENTATION_OK ; }
public void testWithExistingUserDirectories ( ) throws java.lang.Exception { org.conscrypt.TrustedCertificateStoreTest.DIR_ADDED.mkdirs ( ) ; org.conscrypt.TrustedCertificateStoreTest.DIR_DELETED.mkdirs ( ) ; org.conscrypt.TrustedCertificateStoreTest.install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; }
public void cleanCodeCache ( dexfuzz.executors.Architecture architecture , java.lang.String testLocation , java.lang.String programName ) { java.lang.String command = ( "rm -f " + ( getCacheLocation ( architecture ) ) ) + ( getOatFileName ( testLocation , programName ) ) ; executeCommand ( command , false ) ; }
public java.util.Map < java.lang.String , java.io.File > getDynamicConfigFiles ( ) { java.util.Map < java.lang.String , java.io.File > configMap = new java.util.HashMap < > ( ) ; for ( com.android.tradefed.build.VersionedFile vFile : mBuildInfo.getFiles ( ) ) { if ( vFile.getVersion ( ) . startsWith ( com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper.CONFIG_PATH_PREFIX ) ) { configMap.put ( vFile.getVersion ( ) . substring ( com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper.CONFIG_PATH_PREFIX.length ( ) ) , vFile.getFile ( ) ) ; } } return configMap ; }
private void stopDataStallAlarm ( ) { android.app.AlarmManager am = ( ( android.app.AlarmManager ) ( mPhone.getContext ( ) . getSystemService ( Context.ALARM_SERVICE ) ) ) ; if ( VDBG ) { log ( ( ( ( "stopDataStallAlarm: current tag=" + ( mDataStallAlarmTag ) ) + " mDataStallAlarmIntent=" ) + ( mDataStallAlarmIntent ) ) ) ; } mDataStallAlarmTag += 1 ; if ( ( mDataStallAlarmIntent ) != null ) { am.cancel ( mDataStallAlarmIntent ) ; mDataStallAlarmIntent = null ; } }
public void testMultipleIntentFilter_sameKey_noOverride ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application>\n" ) + " <activity android:name=\"activityOne\">\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.VIEW\"/>\n" ) + " <category android:name=\"android.intent.category.DEFAULT\"/>\n" ) + " <category android:name=\"android.intent.category.BROWSABLE\"/>\n" ) + " <data android:scheme=\"myspecialdeeplinkscheme\"/>\n" ) + " <data android:host=\"home\"/>\n" ) + " </intent-filter>\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.VIEW\"/>\n" ) + " <category android:name=\"android.intent.category.DEFAULT\"/>\n" ) + " <category android:name=\"android.intent.category.BROWSABLE\"/>\n" ) + " <data android:scheme=\"https\"/>\n" ) + " <data android:host=\"www.foo.com\"/>\n" ) + " </intent-filter>\n" ) + " </activity>\n" ) + " </application>" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <application>\n" ) + " <activity android:name=\"activityOne\">\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.SEARCH\" />\n" ) + " </intent-filter>\n" ) + " </activity>" ) + " </application>" ) + " <uses-sdk android:targetSdkVersion=\"3\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertTrue ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.XmlDocument xmlDocument = mergedDocument.get ( ) ; java.util.List < com.android.manifmerger.XmlElement > allIntentFilters = com.android.manifmerger.XmlDocumentTest.getAllElementsOfType ( xmlDocument , ManifestModel.NodeTypes.INTENT_FILTER ) ; assertEquals ( 3 , allIntentFilters.size ( ) ) ; }
public void testE4 ( ) { dot.junit.opcodes.aput_object.d.T_aput_object_4 t = new dot.junit.opcodes.aput_object.d.T_aput_object_4 ( ) ; java.lang.String [ ] arr = new java.lang.String [ 2 ] ; try { t.run ( arr , 0 , t ) ; fail ( "expected ArrayStoreException" ) ; } catch ( java.lang.ArrayStoreException aie ) { } }
protected void onPrintJobQueued ( android.printservice.PrintJob printJob ) { if ( com.android.bips.BuiltInPrintService.DEBUG ) android.util.Log.d ( com.android.bips.BuiltInPrintService.TAG , "onPrintJobQueued" ) ; if ( com.android.bips.util.WifiMonitor.isConnected ( this ) ) { mJobQueue.print ( new com.android.bips.LocalPrintJob ( this , mBackend , printJob ) ) ; } else { printJob.fail ( getString ( R.string.wifi_not_connected ) ) ; } }
private static void generateTestManifest ( @ com.android.annotations.NonNull java.lang.String testPackageName , @ com.android.annotations.Nullable java.lang.String minSdkVersion , @ com.android.annotations.Nullable java.lang.String targetSdkVersion , @ com.android.annotations.NonNull java.lang.String testedPackageName , @ com.android.annotations.NonNull java.lang.String instrumentationRunner , @ com.android.annotations.NonNull java.lang.Boolean handleProfiling , @ com.android.annotations.NonNull java.lang.Boolean functionalTest , @ com.android.annotations.NonNull java.io.File outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testPackageName , minSdkVersion , targetSdkVersion , testedPackageName , instrumentationRunner , handleProfiling , functionalTest ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public static void computeAcosh ( android.renderscript.cts.TestAcosh.ArgumentsFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 4 ; double x = ( ( double ) ( args.in ) ) ; args.out = ( ( float ) ( java.lang.StrictMath.log ( ( x + ( java.lang.StrictMath.sqrt ( ( ( x * x ) - 1.0 ) ) ) ) ) ) ) ; }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) { assert ! ( isClosed ( ) ) ; return new com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir ( this , parent , name ) ; }
private static com.android.jack.ir.ast.JMethodCall makeMethodCall ( @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info , @ javax.annotation.CheckForNull com.android.jack.ir.ast.JExpression instance , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface receiverType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod targetMethod ) { com.android.jack.ir.ast.JMethodId methodId = targetMethod.getMethodId ( ) ; assert ( ( methodId.getKind ( ) ) == ( com.android.jack.ir.ast.MethodKind.STATIC ) ) || ( instance != null ) ; com.android.jack.ir.ast.JMethodCall call = new com.android.jack.ir.ast.JMethodCall ( info , instance , receiverType , methodId , targetMethod.getType ( ) , methodId.canBeVirtual ( ) ) ; return call ; }
public static void computeFract ( android.renderscript.cts.TestFract.ArgumentsFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 12 ; float floor = ( ( float ) ( java.lang.StrictMath.floor ( args.inV ) ) ) ; args.out = ( ( float ) ( java.lang.StrictMath.min ( ( ( args.inV ) - floor ) , 0.99999994F ) ) ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( "access test" ) ; otherpackage.PublicAccess pa = new otherpackage.PublicAccess ( ) ; pa.main ( ) ; }
public void addMatrix ( android.support.v8.renderscript.Matrix4f v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addMatrix ( new android.support.v8.renderscript.Matrix4f ( v.getArray ( ) ) ) ; return ; } for ( int i = 0 ; i < ( v.mMat.length ) ; i ++ ) { addF32 ( v.mMat [ i ] ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; initTestFiles ( ) ; android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( TestNotificationService.ACTION_OPERATION_RESULT ) ; context.registerReceiver ( mReceiver , filter ) ; context.sendBroadcast ( new android.content.Intent ( com.android.documentsui.services.TestNotificationService.ACTION_CHANGE_CANCEL_MODE ) ) ; mOperationExecuted = false ; mErrorReason = "No response from Notification" ; mCountDownLatch = new java.util.concurrent.CountDownLatch ( 1 ) ; }
private com.android.ide.eclipse.gltrace.state.IGLProperty getTextureImageProperty ( com.android.ide.eclipse.gltrace.state.IGLProperty state ) { if ( ( state.getType ( ) ) == ( com.android.ide.eclipse.gltrace.state.GLStateType.TEXTURE_IMAGE ) ) { return state ; } if ( ( state.getType ( ) ) != ( com.android.ide.eclipse.gltrace.state.GLStateType.PER_TEXTURE_LEVEL_STATE ) ) { state = state.getParent ( ) ; } if ( ( state != null ) && ( ( state.getType ( ) ) == ( com.android.ide.eclipse.gltrace.state.GLStateType.PER_TEXTURE_LEVEL_STATE ) ) ) { return ( ( com.android.ide.eclipse.gltrace.state.GLCompositeProperty ) ( state ) ) . getProperty ( GLStateType.TEXTURE_IMAGE ) ; } return null ; }
private void putCharsets ( java.util.Map < java.nio.charset.Charset , java.lang.String > map ) { int num = com.ibm.icu.charset.UConverterAlias.countAvailable ( ) ; for ( int i = 0 ; i < num ; i ++ ) { java.lang.String name = com.ibm.icu.charset.UConverterAlias.getAvailableName ( i ) ; try { java.nio.charset.Charset cs = getCharset ( name ) ; map.put ( cs , com.ibm.icu.charset.CharsetProviderICU.getJavaCanonicalName ( name ) ) ; } catch ( java.nio.charset.UnsupportedCharsetException ex ) { } catch ( java.io.IOException e ) { } } }
public void startVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { for ( com.android.jack.ir.ast.JMethod sameEnclosingTypeMethod : type.getMethods ( ) ) { com.android.jack.ir.ast.JMethodIdWide id = sameEnclosingTypeMethod.getMethodId ( ) . getMethodIdWide ( ) ; if ( ( ! ( id.canBeVirtual ( ) ) ) && ( ! ( com.android.jack.shrob.obfuscation.Renamer.mustBeRenamed ( id ) ) ) ) { if ( com.android.jack.shrob.obfuscation.Renamer.getKey ( id ) . equals ( methodKey ) ) { hasFoundMethodId = true ; return ; } } } visit ( type ) ; visitSuperTypes ( type ) ; visitSubTypes ( type ) ; }
public void setZoom ( int value ) { synchronized ( this ) { if ( ( grid ) != null ) { grid.dispose ( ) ; grid = null ; zoom = value ; } } redraw ( ) ; }
private boolean isSessionDiscoverable ( com.android.server.media.MediaSessionRecord record ) { return record.isActive ( ) ; }
public byte [ ] addCustomExtension ( int ext_type ) { return null ; }
public void test_handshake_failsWithMissingSCT ( ) throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection ( new java.security.cert.X509Certificate [ ] { cert , ca } , certKey , true ) ; connection.clientHooks.ctVerificationEnabled = true ; try { connection.doHandshake ( ) ; fail ( "SSLHandshakeException not thrown" ) ; } catch ( java.util.concurrent.ExecutionException e ) { assertEquals ( javax.net.ssl.SSLHandshakeException.class , e.getCause ( ) . getClass ( ) ) ; assertEquals ( java.security.cert.CertificateException.class , e.getCause ( ) . getCause ( ) . getClass ( ) ) ; } }
private void grow ( int minCapacity ) { int oldCapacity = buf.length ; int newCapacity = oldCapacity << 1 ; if ( ( newCapacity - minCapacity ) < 0 ) newCapacity = minCapacity ; if ( newCapacity < 0 ) { if ( minCapacity < 0 ) throw new java.lang.OutOfMemoryError ( ) ; newCapacity = java.lang.Integer.MAX_VALUE ; } buf = java.util.Arrays.copyOf ( buf , newCapacity ) ; }
public static void logError ( java.lang.String message ) { com.android.ide.eclipse.adt.AdtPlugin.log ( IStatus.ERROR , AdtPlugin.PLUGIN_ID , message ) ; }
public int syncGetSupportedFeatures ( com.android.internal.util.AsyncChannel channel ) { android.os.Message resultMsg = channel.sendMessageSynchronously ( com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES ) ; int supportedFeatureSet = resultMsg.arg1 ; resultMsg.recycle ( ) ; return supportedFeatureSet ; }
public void doF32_2_relaxed ( long seed , int ulp ) { baseTestHelper ( android.renderscript.cts.RSBaseCompute.TEST_RELAXED_F32_2 , android.renderscript.Element.F32_2 ( mRS ) , android.renderscript.Element.F32_2 ( mRS ) , seed , 1 , 0 , 1 , 0 , 2 , 2 , 2 , 0 , ulp ) ; }
static int blowup ( char [ ] [ ] holder , int size ) { int i = 0 ; try { for ( ; i < size ; i ++ ) holder [ i ] = new char [ 128 ] ; } catch ( java.lang.OutOfMemoryError oome ) { return i ; } return size ; }
public void addPages ( ) { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage ( ) ; addPage ( mWelcomePage ) ; if ( ! ( mStore.isPingOptIn ( ) ) ) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage ( ) ; addPage ( mUsagePage ) ; } }
public void putAll ( java.util.Map < ? , ? > attrib ) { if ( ( attrib == null ) || ( ! ( attrib instanceof java.util.jar.Attributes ) ) ) { throw new java.lang.ClassCastException ( ( ( attrib.getClass ( ) . getName ( ) ) + " not an Attributes" ) ) ; } this . map.putAll ( attrib ) ; }
protected void runTest ( ) throws java.lang.Throwable { try { super . runTest ( ) ; } catch ( java.lang.RuntimeException e ) { if ( e.getMessage ( ) . startsWith ( "Test requires build-tools 22" ) ) { com.android.builder.png.NinePatchAsyncAaptProcessTest.sLogger.warning ( ( ( "Skipped " + ( this . getName ( ) ) ) + " as it requires build tools 22." ) ) ; } else { throw e ; } } }
public static void v ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.VERBOSE ) { android.util.Log.v ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( prefix , format , args ) ) ; } }
public com.android.tools.lint.detector.api.Location.Handle createLocationHandle ( final com.android.tools.lint.detector.api.XmlContext context , final org.w3c.dom.Node node ) { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel model = ( ( org.eclipse.wst.sse.core.internal.provisional.IStructuredModel ) ( context.getProperty ( com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.MODEL_PROPERTY ) ) ) ; return new com.android.ide.eclipse.adt.internal.lint.EclipseLintClient.LazyLocation ( context.file , model.getStructuredDocument ( ) , ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( node ) ) ) ; }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getClient = " + ( mService.getRemoteDevice ( ) ) ) ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) { return null ; } return service.getRemoteDevice ( ) ; }
public void test_getLocalSocketAddress_late_bind ( ) throws java.lang.Exception { java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( ( ( java.net.SocketAddress ) ( null ) ) ) ; assertNull ( theSocket.getLocalSocketAddress ( ) ) ; int portNumber = tests.support.Support_PortManager.getNextPortForUDP ( ) ; java.net.InetSocketAddress localAddress = new java.net.InetSocketAddress ( java.net.InetAddress.getLocalHost ( ) , portNumber ) ; theSocket.bind ( localAddress ) ; assertEquals ( localAddress , theSocket.getLocalSocketAddress ( ) ) ; theSocket.close ( ) ; }
public void testListItem ( ) throws java.lang.Throwable { android.content.IntentFilter filter = new android.content.IntentFilter ( android.content.Intent.ACTION_MAIN ) ; filter.addCategory ( TestListActivity.CATEGORY_MANUAL_TEST ) ; android.app.Instrumentation.ActivityMonitor monitor = new android.app.Instrumentation.ActivityMonitor ( filter , null , false ) ; mInstrumentation.addMonitor ( monitor ) ; sendKeys ( KeyEvent.KEYCODE_ENTER ) ; android.app.Activity activity = mInstrumentation.waitForMonitorWithTimeout ( monitor , java.util.concurrent.TimeUnit.SECONDS.toMillis ( 10 ) ) ; assertNotNull ( activity ) ; activity.finish ( ) ; }
public void testInstall_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir ( ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( new java.io.File ( workingDir , "myFile" ) , new byte [ ] { 'a' } ) ; libcore.tzdata.update2.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.installWithErrorCode ( distro.getBytes ( ) ) ) ; assertDistroInstalled ( distro ) ; }
private static void appendHex ( java.lang.StringBuilder builder , java.lang.String s , java.nio.charset.Charset charset ) { for ( byte b : s.getBytes ( charset ) ) { libcore.net.UriCodec.appendHex ( builder , b ) ; } }
public void handleMessage ( android.os.Message msg ) { debugLog ( ( "handleMessage() - Message: " + ( msg.what ) ) ) ; switch ( msg.what ) { case com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_STATE_CHANGED : { debugLog ( "handleMessage() - MESSAGE_PROFILE_SERVICE_STATE_CHANGED" ) ; processProfileServiceStateChanged ( ( ( java.lang.String ) ( msg.obj ) ) , msg.arg1 ) ; } break ; } }
public void testSetupDriverForClientModeError ( ) { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; android.net.wifi.IWificond wificond = org.mockito.Mockito.mock ( android.net.wifi.IWificond.class ) ; org.mockito.Mockito.when ( wificondControl.setupDriverForClientMode ( ) ) . thenReturn ( null ) ; mWifiNative.setWificondControl ( wificondControl ) ; android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupDriverForClientMode ( ) ; org.junit.Assert.assertEquals ( null , returnedClientInterface ) ; org.mockito.Mockito.verify ( wificondControl ) . setupDriverForClientMode ( ) ; }
public void TestNameMap ( ) { android.icu.text.Transliterator uni2name = android.icu.text.Transliterator.getInstance ( "Any-Name[^abc]" ) ; android.icu.text.Transliterator name2uni = android.icu.text.Transliterator.getInstance ( "Name-Any" ) ; expect ( uni2name , " abc丁µઁ�\t￿" , "\\N{NO-BREAK SPACE}abc\\N{CJK UNIFIED IDEOGRAPH-4E01}\\N{MICRO SIGN}\\N{GUJARATI SIGN CANDRABINDU}\\N{REPLACEMENT CHARACTER}\\N{<control-0004>}\\N{<control-0009>}\\N{<control-0081>}\\N{<noncharacter-FFFF>}" ) ; expect ( name2uni , "{\\N { NO-BREAK SPACE}abc\\N{ CJK UNIFIED IDEOGRAPH-4E01 }\\N{x\\N{MICRO SIGN}\\N{GUJARATI SIGN CANDRABINDU}\\N{REPLACEMENT CHARACTER}\\N{<control-0004>}\\N{<control-0009>}\\N{<control-0081>}\\N{<noncharacter-FFFF>}\\N{<control-0004>}\\N{" , "{ abc丁\\N{xµઁ�\t￿\\N{" ) ; android.icu.text.Transliterator t = android.icu.text.Transliterator.getInstance ( "Any-Name;Name-Any" ) ; java.lang.String s = "{ abc丁\\N{xµઁ�\t￿\\N{" ; expect ( t , s , s ) ; }
public int hashCode ( ) { int primeNum = 31 ; return ( ( ( ( ( mCdmaDbm ) * primeNum ) + ( ( mCdmaEcio ) * primeNum ) ) + ( ( mEvdoDbm ) * primeNum ) ) + ( ( mEvdoEcio ) * primeNum ) ) + ( ( mEvdoSnr ) * primeNum ) ; }
public boolean processMessage ( android.os.Message message ) { switch ( message.what ) { case com.android.bluetooth.pbap.PbapStateMachine.DISCONNECT : stopObexServerSession ( ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.CREATE_NOTIFICATION : createPbapNotification ( ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.REMOVE_NOTIFICATION : android.content.Intent i = new android.content.Intent ( BluetoothPbapService.USER_CONFIRM_TIMEOUT_ACTION ) ; mService.sendBroadcast ( i ) ; notifyAuthCancelled ( ) ; removePbapNotification ( com.android.bluetooth.pbap.PbapStateMachine.NOTIFICATION_ID_AUTH ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.AUTH_KEY_INPUT : java.lang.String key = ( ( java.lang.String ) ( message.obj ) ) ; notifyAuthKeyInput ( key ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.AUTH_CANCELLED : notifyAuthCancelled ( ) ; break ; } return HANDLED ; }
private static com.android.apksig.internal.jar.ManifestParser.Attribute parseAttr ( java.lang.String attr ) { int delimiterIndex = attr.indexOf ( ':' ) ; if ( delimiterIndex == ( - 1 ) ) { return new com.android.apksig.internal.jar.ManifestParser.Attribute ( attr.trim ( ) , "" ) ; } else { return new com.android.apksig.internal.jar.ManifestParser.Attribute ( attr.substring ( 0 , delimiterIndex ) . trim ( ) , attr.substring ( ( delimiterIndex + 1 ) ) . trim ( ) ) ; } }
private com.android.jack.dx.rop.code.RegisterSpec getRegisterSpec ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { com.android.jack.dx.rop.code.RegisterSpec regSpec ; if ( expr instanceof com.android.jack.ir.ast.JVariableRef ) { regSpec = ropReg.getRegisterSpec ( ( ( com.android.jack.ir.ast.JVariableRef ) ( expr ) ) ) ; } else { assert expr instanceof com.android.jack.ir.ast.JValueLiteral ; regSpec = ropReg.getOrCreateTmpRegister ( expr.getType ( ) , false ) ; buildConstant ( regSpec , ( ( com.android.jack.ir.ast.JValueLiteral ) ( expr ) ) ) ; } return regSpec ; }
public static com.android.server.NsdService create ( android.content.Context context ) throws java.lang.InterruptedException { com.android.server.NsdService.NsdSettings settings = com.android.server.NsdService.NsdSettings.makeDefault ( context ) ; android.os.HandlerThread thread = new android.os.HandlerThread ( com.android.server.NsdService.TAG ) ; thread.start ( ) ; android.os.Handler handler = new android.os.Handler ( thread.getLooper ( ) ) ; com.android.server.NsdService service = new com.android.server.NsdService ( context , settings , handler ) ; service.mNativeDaemonConnected.await ( ) ; return service ; }
public void unregisterMediaButtonEventReceiver ( android.content.ComponentName eventReceiver ) { if ( eventReceiver == null ) { return ; } android.content.Intent mediaButtonIntent = new android.content.Intent ( android.content.Intent.ACTION_MEDIA_BUTTON ) ; mediaButtonIntent.setComponent ( eventReceiver ) ; android.app.PendingIntent pi = android.app.PendingIntent.getBroadcast ( mApplicationContext , 0 , mediaButtonIntent , 0 ) ; unregisterMediaButtonIntent ( pi ) ; }
public void adjustMasterVolume ( int steps , int flags ) { android.media.IAudioService service = android.media.AudioManager.getService ( ) ; try { service.adjustMasterVolume ( steps , flags , getContext ( ) . getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.media.AudioManager.TAG , "Dead object in adjustMasterVolume" , e ) ; } }
public org.bouncycastle.math.ec.ECPoint normalize ( ) { if ( this . isInfinity ( ) ) { return this ; } switch ( this . getCurveCoordinateSystem ( ) ) { case ECCurve.COORD_AFFINE : case ECCurve.COORD_LAMBDA_AFFINE : { return this ; } default : { org.bouncycastle.math.ec.ECFieldElement Z1 = getZCoord ( 0 ) ; if ( ( Z1.bitLength ( ) ) == 1 ) { return this ; } return normalize ( Z1.invert ( ) ) ; } } }
private static java.lang.String getMajorVersionAsString ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVFS vdir , @ javax.annotation.Nonnull java.util.Properties libraryProperties ) throws com.android.jack.library.LibraryFormatException { try { return com.android.jack.library.JackLibraryFactory.getVersionString ( java.lang.Integer.parseInt ( ( ( java.lang.String ) ( libraryProperties.get ( JackLibrary.KEY_LIB_MAJOR_VERSION ) ) ) ) ) ; } catch ( java.lang.NumberFormatException e ) { com.android.jack.library.JackLibraryFactory.logger.log ( java.util.logging.Level.SEVERE , ( ( ( "Failed to parse the property " + ( JackLibrary.KEY_LIB_MAJOR_VERSION ) ) + " from the library " ) + vdir ) , e ) ; throw new com.android.jack.library.LibraryFormatException ( vdir.getLocation ( ) ) ; } }
public void testIssue42798 ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/StringFormat3.java:12: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #3 in method call) [StringFormatMatches]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " context.getString(R.string.gridview_views_count), article.playsCount);\n" + " ~~~~~~~~~~~~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "src/test/pkg/StringFormat3.java:16: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #3 in method call) [StringFormatMatches]\n" ) + " context.getString(R.string.gridview_views_count), \"wrong\");\n" ) + " ~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "src/test/pkg/StringFormat3.java:17: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #2 in method call) [StringFormatMatches]\n" ) + " String s4 = String.format(context.getString(R.string.gridview_views_count), \"wrong\");\n" ) + " ~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "src/test/pkg/StringFormat3.java:22: Error: Wrong argument type for formatting argument \'#1\' in gridview_views_count: conversion is \'d\', received String (argument #3 in method call) [StringFormatMatches]\n" ) + " context.getString(R.string.gridview_views_count), \"string\");\n" ) + " ~~~~~~~~\n" ) + " res/values/formatstrings5.xml:3: Conflicting argument declaration here\n" ) + "res/values/formatstrings5.xml:3: Warning: Formatting %d followed by words: This should probably be a plural rather than a string [PluralsCandidate]\n" ) + " <string name=\"gridview_views_count\">%d vues</string>\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "4 errors, 1 warnings\n" ) ) , lintProject ( "res/values/formatstrings5.xml" , "src/test/pkg/StringFormat3.java.txt=>src/test/pkg/StringFormat3.java" ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mHasFeature = ( mHasFeature ) && ( ( getMaxNumberOfUsersSupported ( ) ) > 1 ) ; if ( mHasFeature ) { removeTestUsers ( ) ; installTestApps ( ) ; mProfileUserId = createManagedProfile ( ) ; installApp ( com.android.cts.devicepolicy.MANAGED_PROFILE_APK ) ; setProfileOwner ( ( ( ( MANAGED_PROFILE_PKG ) + "/" ) + ( ADMIN_RECEIVER_TEST_CLASS ) ) , mProfileUserId ) ; mProfileSerialNumber = getUserSerialNumber ( mProfileUserId ) ; mMainUserSerialNumber = getUserSerialNumber ( 0 ) ; startUser ( mProfileUserId ) ; } }
private void connectToPlayer ( ) { if ( com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG , "connectToPlayer" ) ; mMediaBrowser.connect ( ) ; }
public java.util.Iterator < com.android.jack.ir.ast.JDefinedClassOrInterface > adapt ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JSession session ) throws java.lang.Exception { return com.google.common.collect.Iterators.filter ( new java.util.ArrayList < com.android.jack.ir.ast.JDefinedClassOrInterface > ( session.getTypesToEmit ( ) ) . iterator ( ) , new com.google.common.base.Predicate < com.android.jack.ir.ast.JDefinedClassOrInterface > ( ) { @ java.lang.Override public boolean apply ( com.android.jack.ir.ast.JDefinedClassOrInterface clOrI ) { return ! ( clOrI.isLoadedFromJackFile ( ) ) ; } } ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { startUpSync.countDown ( ) ; for ( int i = 0 ; i < ( NUM_STRESS_ITERATIONS ) ; i ++ ) { libcore.javax.net.ssl.SSLEngineTest.assertSendsCorrectly ( "This is the server. Hi!" . getBytes ( ) , pair.server , pair.client , false ) ; } return null ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; if ( ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.AdtProjectTest.sProject ) == null ) { org.eclipse.core.resources.IProject project = null ; java.lang.String projectName = "testproject-" + ( java.lang.System.currentTimeMillis ( ) ) ; project = createProject ( projectName ) ; assertNotNull ( project ) ; com.android.ide.eclipse.adt.internal.editors.layout.refactoring.AdtProjectTest.sProject = project ; } }
public char [ ] readPassword ( ) { synchronized ( java.io.Console.CONSOLE_LOCK ) { int previousState = java.io.Console.setEcho ( false , 0 ) ; try { java.lang.String password = readLine ( ) ; writer.println ( ) ; return password == null ? null : password.toCharArray ( ) ; } finally { java.io.Console.setEcho ( true , previousState ) ; } } }
public void testShowWhenLockedActivity ( ) throws java.lang.Exception { if ( ! ( supportsKeyguard ( ) ) ) { return ; } launchActivity ( "ShowWhenLockedActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "ShowWhenLockedActivity" } ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; gotoKeyguard ( ) ; mAmWmState.computeState ( mDevice , null ) ; mAmWmState.assertVisibility ( "ShowWhenLockedActivity" , true ) ; assertShowingAndOccluded ( ) ; pressHomeButton ( ) ; unlockDevice ( ) ; }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.RunnableHooks hooks = context.getRunnableHooks ( ) ; try { java.security.Provider.Service service = messageDigestCodec.checkString ( context , "SHA" ) ; return new com.android.sched.vfs.ReadWriteZipFS ( new com.android.sched.util.file.OutputZipFile ( context.getWorkingDirectory ( ) , string , hooks , existence , change ) , 1 , 2 , new com.android.sched.util.config.MessageDigestFactory ( service ) , false ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public byte [ ] [ ] saw ( byte [ ] prefix ) { java.util.ArrayList < byte [ ] > values = execute ( 's' , prefix ) ; return values == null ? null : values.toArray ( new byte [ values.size ( ) ] [ ] ) ; }
private void checkOutputDir ( ) throws com.android.jill.IllegalOptionsException { assert ( output ) != null ; if ( ! ( output.exists ( ) ) ) { throw new com.android.jill.IllegalOptionsException ( ( ( output.getName ( ) ) + " does not exist." ) ) ; } if ( ( ! ( output.canRead ( ) ) ) || ( ! ( output.canWrite ( ) ) ) ) { throw new com.android.jill.IllegalOptionsException ( ( ( "The specified output folder '" + ( output.getAbsolutePath ( ) ) ) + "' for jack files cannot be written to or read from." ) ) ; } }
public int hashCode ( ) { int hashCode = 1 ; for ( java.lang.Object x : getArray ( ) ) hashCode = ( 31 * hashCode ) + ( x == null ? 0 : x.hashCode ( ) ) ; return hashCode ; }
private void updateBrandingText ( com.android.dialer.voicemail.model.VoicemailEntry voicemailEntry ) { if ( ( ( voicemailEntry.transcriptionState ( ) ) == ( com.android.dialer.compat.android.provider.VoicemailCompat.TRANSCRIPTION_AVAILABLE ) ) && ( ! ( android.text.TextUtils.isEmpty ( voicemailEntry.transcription ( ) ) ) ) ) { transcriptionBrandingTextView.setVisibility ( android.view.View.VISIBLE ) ; } else { transcriptionBrandingTextView.setVisibility ( android.view.View.GONE ) ; } }
public static com.intellij.psi.search.GlobalSearchScope addNonClasspathScope ( com.intellij.openapi.project.Project project , com.intellij.psi.search.GlobalSearchScope base ) { com.intellij.psi.search.GlobalSearchScope scope = base ; for ( com.intellij.psi.PsiElementFinder finder : com.intellij.openapi.extensions.Extensions.getExtensions ( com.intellij.psi.EP_NAME , project ) ) { if ( finder instanceof com.intellij.psi.NonClasspathClassFinder ) { scope = scope.uniteWith ( com.intellij.psi.search.NonClasspathDirectoryScope.compose ( ( ( com.intellij.psi.NonClasspathClassFinder ) ( finder ) ) . getClassRoots ( ) ) ) ; } } return scope ; }
public float getXDpi ( ) { if ( ( mState.device ) != null ) { float dpi = mState.device.getXDpi ( ) ; if ( ( java.lang.Float.isNaN ( dpi ) ) == false ) { return dpi ; } } return getDensity ( ) . getDpiValue ( ) ; }
public boolean equals ( @ javax.annotation.Nullable java.lang.Object object ) { if ( object instanceof com.google.common.collect.Multimap ) { com.google.common.collect.Multimap < ? , ? > that = ( ( com.google.common.collect.Multimap < ? , ? > ) ( object ) ) ; return this . map.equals ( that.asMap ( ) ) ; } return false ; }
public void testGroupingSizeZero ( ) { java.util.Locale localeWithoutGrouping = new java.util.Locale ( "hy" ) ; java.text.DecimalFormat decimalFormat = ( ( java.text.DecimalFormat ) ( java.text.NumberFormat.getInstance ( localeWithoutGrouping ) ) ) ; assertEquals ( 0 , decimalFormat.getGroupingSize ( ) ) ; assertFalse ( decimalFormat.isGroupingUsed ( ) ) ; java.text.DecimalFormatSymbols symbols = decimalFormat.getDecimalFormatSymbols ( ) ; assertTrue ( ( ( symbols.getGroupingSeparator ( ) ) != ' ' ) ) ; java.util.Formatter formatter = new java.util.Formatter ( localeWithoutGrouping ) ; formatter.format ( "%,d" , 123456789 ) ; }
final void putUnchecked ( int pos , long [ ] src , int srcOffset , int length ) { libcore.io.Memory.pokeLongArray ( ix ( pos ) , src , srcOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public void onLoadFinished ( android.support.v4.content.Loader < android.database.Cursor > loader , android.database.Cursor data ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailFragment.onCreateLoader" , "cursor size is %d" , data.getCount ( ) ) ; recyclerView.setLayoutManager ( new android.support.v7.widget.LinearLayoutManager ( getContext ( ) ) ) ; recyclerView.setAdapter ( new com.android.dialer.voicemail.listui.NewVoicemailAdapter ( data ) ) ; }
public java.util.Set < java.lang.String > getDensityFilters ( ) { com.android.resources.Density [ ] values = com.android.resources.Density.values ( ) ; java.util.Set < java.lang.String > fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize ( ( ( values.length ) - 1 ) ) ; for ( com.android.resources.Density value : values ) { if ( value != ( com.android.resources.Density.NODPI ) ) { fullList.add ( value.getResourceValue ( ) ) ; } } return density.getApplicableFilters ( fullList ) ; }
public java.lang.String getToolTipText ( java.awt.event.MouseEvent event ) { if ( ( ( mTraceData ) == null ) || ( ( mCallHierarchyRenderer ) == null ) ) { return null ; } mTmpPoint.setLocation ( event.getPoint ( ) ) ; mViewPortInverseTransform.transform ( mTmpPoint , mTmpPoint ) ; return mCallHierarchyRenderer.getToolTipFor ( mTmpPoint.x , mTmpPoint.y ) ; }
public static void print ( java.lang.String [ ] stack ) { java.lang.System.out.println ( "---------" ) ; for ( int i = 0 ; i < ( stack.length ) ; i += 2 ) { java.lang.System.out.print ( ' ' ) ; java.lang.System.out.print ( stack [ i ] ) ; java.lang.System.out.print ( ' ' ) ; java.lang.System.out.println ( stack [ ( i + 1 ) ] ) ; } }
public void onNewPicture ( android.graphics.Picture picture ) { if ( ( mPictureListener ) == null ) return ; org.chromium.base.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onNewPicture" ) ; mPictureListener.onNewPicture ( mWebView , picture ) ; org.chromium.base.TraceEvent.end ( ) ; }
public void testEnsureFileDoesNotExist_noPermission ( ) throws java.lang.Exception { java.io.File dir = createTempDir ( ) ; java.io.File protectedDir = createDir ( dir , "protected" ) ; java.io.File undeletable = createRegularFile ( protectedDir , "undeletable" ) ; assertTrue ( protectedDir.setWritable ( false ) ) ; assertTrue ( undeletable.exists ( ) ) ; try { libcore.tzdata.update2.FileUtils.ensureFileDoesNotExist ( undeletable ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } finally { assertTrue ( protectedDir.setWritable ( true ) ) ; } assertTrue ( undeletable.exists ( ) ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( "{ audioQuality=" + ( mAudioQuality ) ) + ", audioDirection=" ) + ( mAudioDirection ) ) + ", videoQuality=" ) + ( mVideoQuality ) ) + ", videoDirection=" ) + ( mVideoDirection ) ) + " }" ; }
public void testRewriteGradleMessages ( ) { java.lang.String original = "error example\ntwo line error\nnext line\nsomething else" ; java.lang.String rewriten = mGradleMessageRewriter.rewriteMessages ( original ) ; java.lang.String expected = "{\"kind\":\"ERROR\",\"text\":\"errorText\",\"sourcePath\":\"error/source\"," + ( ( ( ( ( ( "\"position\":{\"startLine\":1,\"startColumn\":2,\"startOffset\":3," + "\"endLine\":4,\"endColumn\":5,\"endOffset\":6},\"original\":\"\"}\n" ) + "{\"kind\":\"WARNING\",\"text\":" ) + "\"two line warning\",\"sourcePath\":\"sourcePath\"," ) + "\"position\":{\"startLine\":1,\"startColumn\":2},\"original\":\"\"}\n" ) + "{\"kind\":\"SIMPLE\"," ) + "\"text\":\"something else\",\"position\":{},\"original\":\"something else\"}" ) ; assertEquals ( expected.trim ( ) , rewriten.trim ( ) ) ; }
protected void onOrientationChange ( ) { int index = mOrientation.getSelectionIndex ( ) ; if ( index != ( - 1 ) ) { mSelectedConfiguration.setScreenOrientationQualifier ( new com.android.ide.eclipse.adt.internal.resources.configurations.ScreenOrientationQualifier ( com.android.resources.ScreenOrientation.getByIndex ( index ) ) ) ; } else { mSelectedConfiguration.setScreenOrientationQualifier ( new com.android.ide.eclipse.adt.internal.resources.configurations.ScreenOrientationQualifier ( ) ) ; } onChange ( true ) ; }
private synchronized void initGenericTypes ( ) { if ( ! ( genericTypesAreInitialized ) ) { java.lang.String signatureAttribute = getSignatureAttribute ( ) ; org.apache.harmony.luni.lang.reflect.GenericSignatureParser parser = new org.apache.harmony.luni.lang.reflect.GenericSignatureParser ( declaringClass.getClassLoader ( ) ) ; parser.parseForConstructor ( this , signatureAttribute , exceptionTypes ) ; formalTypeParameters = parser.formalTypeParameters ; genericParameterTypes = parser.parameterTypes ; genericExceptionTypes = parser.exceptionTypes ; genericTypesAreInitialized = true ; } }
private android.hardware.cts.helpers.sensorverification.MeanVerification getVerification ( float [ ] expected , float [ ] threshold , float [ ] ... values ) { android.hardware.cts.helpers.sensorverification.MeanVerification verification = new android.hardware.cts.helpers.sensorverification.MeanVerification ( expected , threshold ) ; for ( float [ ] value : values ) { verification.addSensorEvent ( new android.hardware.cts.helpers.TestSensorEvent ( null , 0 , 0 , value ) ) ; } return verification ; }
public boolean hasIccCard ( ) { return hasIccCardUsingSlotId ( mSubscriptionController.getSlotId ( getDefaultSubscription ( ) ) ) ; }
private static void maybeReportIssue ( int flagValue , com.android.tools.lint.detector.api.JavaContext context , lombok.ast.MethodInvocation node ) { if ( ( flagValue & ( com.android.tools.lint.checks.GetSignaturesDetector.GET_SIGNATURES_FLAG ) ) != 0 ) { context.report ( com.android.tools.lint.checks.GetSignaturesDetector.ISSUE , node , context.getLocation ( node.astArguments ( ) . last ( ) ) , ( "Reading app signatures from getPackageInfo: The app signatures " + ( "could be exploited if not validated properly; " + "see issue explanation for details." ) ) ) ; } }
protected java.io.FileDescriptor createSocket ( ) { java.io.FileDescriptor s = null ; try { s = android.system.Os.socket ( android.net.util.AF_INET6 , android.net.util.SOCK_DGRAM , android.net.util.IPPROTO_UDP ) ; android.system.Os.bind ( s , android.net.util.BlockingSocketReaderTest.LOOPBACK6 , 0 ) ; mLocalSockName = ( ( java.net.InetSocketAddress ) ( android.system.Os.getsockname ( s ) ) ) ; android.system.Os.setsockoptTimeval ( s , android.net.util.SOL_SOCKET , android.net.util.SO_SNDTIMEO , android.net.util.BlockingSocketReaderTest.TIMEO ) ; } catch ( android.system.ErrnoException | java.net.SocketException e ) { closeSocket ( s ) ; fail ( ) ; return null ; } mLocalSocket = s ; return s ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { mContext = context ; if ( CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED.equals ( intent.getAction ( ) ) ) { if ( com.android.phone.otasp.OtaspSimStateReceiver.DBG ) com.android.phone.otasp.OtaspSimStateReceiver.logd ( ( "Received intent: " + ( intent.getAction ( ) ) ) ) ; final android.telephony.TelephonyManager telephonyManager = ( ( android.telephony.TelephonyManager ) ( context.getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; telephonyManager.listen ( mPhoneStateListener , PhoneStateListener.LISTEN_OTASP_CHANGED ) ; } }
private com.android.jack.ir.ast.JMethod createStaticInitializer ( com.android.jack.ir.sourceinfo.SourceInfo info , com.android.jack.ir.ast.JDefinedClassOrInterface enclosingType ) { int modifier = ( com.android.jack.ir.ast.JModifier.STATIC ) | ( com.android.jack.ir.ast.JModifier.STATIC_INIT ) ; com.android.jack.ir.ast.JMethod method = new com.android.jack.ir.ast.JMethod ( info , new com.android.jack.ir.ast.JMethodId ( com.android.jack.util.NamingTools.STATIC_INIT_NAME , com.android.jack.ir.ast.MethodKind.STATIC ) , enclosingType , JPrimitiveTypeEnum.VOID.getType ( ) , modifier ) ; method.setBody ( new com.android.jack.ir.ast.JMethodBody ( info , new com.android.jack.ir.ast.JBlock ( info ) ) ) ; enclosingType.addMethod ( method ) ; method.updateParents ( enclosingType ) ; return method ; }
public com.sun.tools.doclets.internal.toolkit.taglets.TagletOutput getTagletOutput ( com.sun.javadoc.Doc holder , com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter writer ) throws java.lang.IllegalArgumentException { com.sun.tools.doclets.internal.toolkit.taglets.TagletOutput out = writer.getTagletOutputInstance ( ) ; com.sun.javadoc.Tag [ ] tags = holder.tags ( getName ( ) ) ; if ( ( tags.length ) == 0 ) { return null ; } out.setOutput ( toString ( tags [ 0 ] ) ) ; return out ; }
public int [ ] getAdnRecordsSize ( int efid ) { if ( DBG ) logd ( ( "getAdnRecordsSize: efid=" + efid ) ) ; synchronized ( mLock ) { checkThread ( ) ; recordSize = new int [ 3 ] ; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; android.os.Message response = mBaseHandler.obtainMessage ( com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE , status ) ; com.android.internal.telephony.IccFileHandler fh = phone.getIccFileHandler ( ) ; if ( fh != null ) { fh.getEFLinearRecordSize ( efid , response ) ; waitForResult ( status ) ; } } return recordSize ; }
private static boolean needToConvert ( com.android.internal.telephony.Phone phone ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( phone.getContext ( ) . getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; if ( configManager != null ) { android.os.PersistableBundle bundle = configManager.getConfig ( ) ; if ( bundle != null ) { return bundle.getBoolean ( CarrierConfigManager.KEY_SMS_REQUIRES_DESTINATION_NUMBER_CONVERSION_BOOL ) ; } } return false ; }
private static void sortAttributeChoices ( com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor descriptor , java.util.List < java.lang.String > choices ) { final com.android.ide.common.api.IAttributeInfo attributeInfo = descriptor.getAttributeInfo ( ) ; java.util.Collections.sort ( choices , new java.util.Comparator < java.lang.String > ( ) { @ java.lang.Override public int compare ( java.lang.String s1 , java.lang.String s2 ) { int compare = ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiResourceAttributeNode.score ( attributeInfo , s1 ) ) - ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiResourceAttributeNode.score ( attributeInfo , s2 ) ) ; if ( compare == 0 ) { compare = s1.compareTo ( s2 ) ; } return compare ; } } ) ; }
public static java.lang.annotation.Annotation createAnnotation ( java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType , libcore.reflect.AnnotationMember [ ] elements ) { libcore.reflect.AnnotationFactory factory = new libcore.reflect.AnnotationFactory ( annotationType , elements ) ; return ( ( java.lang.annotation.Annotation ) ( java.lang.reflect.Proxy.newProxyInstance ( annotationType.getClassLoader ( ) , new java.lang.Class [ ] { annotationType } , factory ) ) ) ; }
public java.util.List < java.io.File > getJavaLibraries ( ) { if ( ( mJavaLibraries ) == null ) { java.io.File jarFile = mLibrary.getJarFile ( ) ; if ( jarFile.exists ( ) ) { mJavaLibraries = java.util.Collections.singletonList ( jarFile ) ; } else { mJavaLibraries = java.util.Collections.emptyList ( ) ; } } return mJavaLibraries ; }
public void onPause ( ) { super . onPause ( ) ; if ( ( ( mLocalManager ) == null ) || ( isUiRestricted ( ) ) ) { return ; } removeAllDevices ( ) ; mLocalManager.setForegroundActivity ( null ) ; mLocalManager.getEventManager ( ) . unregisterCallback ( this ) ; }
public void readContent ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl in ) throws java.io.IOException { level = in.getNodeLevel ( ) ; name = in.readId ( ) ; returnType = in.readId ( ) ; modifier = in.readInt ( ) ; annotations = in.readNodes ( com.android.jack.jayce.v0002.nodes.NAnnotationLiteral.class ) ; defaultValue = in.readNode ( com.android.jack.jayce.v0002.nodes.NLiteral.class ) ; markers = in.readNodes ( com.android.jack.jayce.v0002.nodes.NMarker.class ) ; }
public void setUp ( ) throws com.android.tradefed.device.DeviceNotAvailableException , java.lang.Exception { mDevice = getDevice ( ) ; mIsBackupSupported = hasDeviceFeature ( android.cts.backup.BaseBackupHostSideTest.FEATURE_BACKUP ) ; org.junit.Assume.assumeTrue ( mIsBackupSupported ) ; junit.framework.Assert.assertTrue ( "LocalTransport should be available." , hasBackupTransport ( android.cts.backup.BaseBackupHostSideTest.LOCAL_TRANSPORT ) ) ; mWasBackupEnabled = enableBackup ( true ) ; mOldTransport = setBackupTransport ( android.cts.backup.BaseBackupHostSideTest.LOCAL_TRANSPORT ) ; assertNotNull ( mCtsBuildInfo ) ; }
public java.util.Collection < com.android.ide.common.resources.ResourceItem > getResourceItemsOfType ( com.android.resources.ResourceType type ) { java.util.List < com.android.ide.common.resources.ResourceItem > list = mResourceMap.get ( type ) ; if ( list == null ) { return java.util.Collections.emptyList ( ) ; } java.util.List < com.android.ide.common.resources.ResourceItem > roList = mReadOnlyListMap.get ( list ) ; if ( roList == null ) { roList = java.util.Collections.unmodifiableList ( list ) ; mReadOnlyListMap.put ( list , roList ) ; } return roList ; }
private static void checkOnTouchListener ( com.android.tools.lint.detector.api.ClassContext context , org.objectweb.asm.tree.ClassNode classNode ) { org.objectweb.asm.tree.MethodNode onTouchNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethod ( classNode.methods , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH_SIG ) ; if ( onTouchNode != null ) { org.objectweb.asm.tree.AbstractInsnNode performClickInsnNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethodCallInstruction ( onTouchNode.instructions , com.android.SdkConstants.ANDROID_VIEW_VIEW , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK_SIG ) ; if ( performClickInsnNode == null ) { java.lang.String message = java.lang.String.format ( "%1$s#onTouch should call View#performClick when a click is detected" , classNode.name ) ; context.report ( com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ISSUE , onTouchNode , null , context.getLocation ( onTouchNode , classNode ) , message , null ) ; } } }
public void testConfigurationUpdatesWhenResizedFromDockedStack ( ) throws java.lang.Exception { HEAD ( 5 ) ; android.server.cts.c121a Merge ; }
public android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeFormatterData get ( android.icu.util.ULocale locale ) { java.lang.String key = locale.toString ( ) ; android.icu.text.RelativeDateTimeFormatter.RelativeDateTimeFormatterData result = cache.get ( key ) ; if ( result == null ) { result = new android.icu.text.RelativeDateTimeFormatter.Loader ( locale ) . load ( ) ; cache.put ( key , result ) ; } return result ; }
public android.os.Bundle getAvailableChannels ( int band ) { mChannelHelper.updateChannels ( ) ; android.net.wifi.WifiScanner.ChannelSpec [ ] channelSpecs = mChannelHelper.getAvailableScanChannels ( band ) ; java.util.ArrayList < java.lang.Integer > list = new java.util.ArrayList < java.lang.Integer > ( channelSpecs.length ) ; for ( android.net.wifi.WifiScanner.ChannelSpec channelSpec : channelSpecs ) { list.add ( channelSpec.frequency ) ; } android.os.Bundle b = new android.os.Bundle ( ) ; b.putIntegerArrayList ( WifiScanner.GET_AVAILABLE_CHANNELS_EXTRA , list ) ; return b ; }
public void checkValidity ( ) { }
private void validateExposureTime ( long request , long result ) { long expTimeDelta = request - result ; mCollector.expectTrue ( ( ( ( "Exposture time is invalid for AE manaul control test, request: " + request ) + " result: " ) + result ) , ( ( expTimeDelta < ( android.hardware.camera2.cts.CaptureRequestTest.EXPOSURE_TIME_ERROR_MARGIN_NS ) ) && ( expTimeDelta >= 0 ) ) ) ; }
public void test_getSoTimeout ( ) throws java.lang.Exception { java.net.DatagramSocket ds = new java.net.DatagramSocket ( ) ; ds.setSoTimeout ( 100 ) ; assertEquals ( "Returned incorrect timeout" , 100 , ds.getSoTimeout ( ) ) ; }
public void onClick ( android.view.View v ) { zoomWithPreview ( 1.0F ) ; updateZoomButtonsEnabled ( ) ; }
private synchronized void onIntrData ( byte reportId , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onIntrData(): reportId=" + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap ( data ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_INTR_DATA ) ; msg.arg1 = reportId ; msg.obj = bb ; mHandler.sendMessage ( msg ) ; }
public final short getShort ( long addr ) { if ( myValuesAreBufferAligned ) { long page = addr / ( myPageSize ) ; int page_offset = ( ( int ) ( addr % ( myPageSize ) ) ) ; return getBuffer ( page , false ) . getShort ( page_offset ) ; } else { get ( addr , myTypedIOBuffer , 0 , 2 ) ; return com.intellij.util.io.Bits.getShort ( myTypedIOBuffer , 0 ) ; } }
private java.io.File createRscLibrary ( ) throws java.io.IOException , java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; java.io.File emptyLib = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "rsc" , toolchain.getLibraryExtension ( ) ) ; toolchain.addResource ( com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.library.test001.lib" ) ) ; toolchain.srcToLib ( emptyLib , true ) ; return emptyLib ; }
private void write ( int index , java.io.FileWriter writer ) throws java.io.IOException { switch ( index ) { case com.android.sdklib.internal.export.ApkData.INDEX_OUTPUTNAME : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mOutputName ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_PROJECT : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mRelativePath ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_MINOR : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mMinor ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_MINSDK : com.android.sdklib.internal.export.ApkData.writeValue ( writer , mMinSdkVersion ) ; break ; case com.android.sdklib.internal.export.ApkData.INDEX_ABI : com.android.sdklib.internal.export.ApkData.writeValue ( writer , ( ( mAbi ) != null ? mAbi : "" ) ) ; break ; } }
private boolean delete ( byte [ ] key ) { execute ( 'd' , key ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; }
private void processIcbMmiCodeForUpdate ( ) { java.lang.String dialingNumber = mSia ; java.lang.String [ ] icbNum = null ; int callAction ; if ( dialingNumber != null ) { icbNum = dialingNumber.split ( "\\$" ) ; } callAction = callBarAction ( dialingNumber ) ; try { mPhone.mCT.getUtInterface ( ) . updateCallBarring ( ImsUtInterface.CB_BS_MT , callAction , obtainMessage ( com.android.internal.telephony.imsphone.ImsPhoneMmiCode.EVENT_SET_COMPLETE , this ) , icbNum ) ; } catch ( com.android.ims.ImsException e ) { android.telephony.Rlog.d ( com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG , "Could not get UT handle for updating ICB." ) ; } }
public void testSessionToken ( ) throws java.lang.Exception { java.lang.String tag = "test session" ; android.media.session.MediaSession session = new android.media.session.MediaSession ( getContext ( ) , tag ) ; android.media.session.MediaSession.Token sessionToken = session.getSessionToken ( ) ; assertNotNull ( sessionToken ) ; assertEquals ( 0 , sessionToken.describeContents ( ) ) ; android.os.Parcel p = android.os.Parcel.obtain ( ) ; sessionToken.writeToParcel ( p , 0 ) ; p.setDataPosition ( 0 ) ; android.media.session.MediaSession.Token token = MediaSession.Token.CREATOR.createFromParcel ( p ) ; assertEquals ( token , sessionToken ) ; p.recycle ( ) ; }
private android.net.Network connectKeepaliveNetwork ( android.net.LinkProperties lp ) { if ( ( mWiFiNetworkAgent ) != null ) { org.junit.Assert.assertNull ( mCm.getNetworkCapabilities ( mWiFiNetworkAgent.getNetwork ( ) ) ) ; } mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( TRANSPORT_WIFI ) ; android.os.ConditionVariable cv = waitForConnectivityBroadcasts ( 1 ) ; mWiFiNetworkAgent.connect ( true ) ; com.android.server.ConnectivityServiceTest.waitFor ( cv ) ; verifyActiveNetwork ( com.android.server.TRANSPORT_WIFI ) ; mWiFiNetworkAgent.sendLinkProperties ( lp ) ; waitForIdle ( ) ; return mWiFiNetworkAgent.getNetwork ( ) ; }
public void startScan ( int callingUid , int scanCounter , android.net.wifi.ScanSettings settings , android.os.WorkSource workSource ) { android.os.Bundle bundle = new android.os.Bundle ( ) ; bundle.putParcelable ( com.android.server.wifi.WifiStateMachine.CUSTOMIZED_SCAN_SETTING , settings ) ; bundle.putParcelable ( com.android.server.wifi.WifiStateMachine.CUSTOMIZED_SCAN_WORKSOURCE , workSource ) ; bundle.putLong ( com.android.server.wifi.WifiStateMachine.SCAN_REQUEST_TIME , java.lang.System.currentTimeMillis ( ) ) ; sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_START_SCAN , callingUid , scanCounter , bundle ) ; }
public boolean onHandleForceStop ( android.content.Intent intent , java.lang.String [ ] packages , int uid , boolean doit ) { int userId = intent.getIntExtra ( Intent.EXTRA_USER_HANDLE , 0 ) ; if ( packages != null ) { for ( java.lang.String pkg : packages ) { synchronized ( this ) { if ( forceStopPackageLocked ( pkg , ( - 1 ) , false , false , false , false , false , userId , "finished booting" ) ) { return true ; } } } } return false ; }
public void setUp ( ) throws java.lang.Exception { mMockDevice = org.easymock.EasyMock.createNiceMock ( com.android.tradefed.device.ITestDevice.class ) ; mMockBuildInfo = org.easymock.EasyMock.createNiceMock ( com.android.tradefed.build.IBuildInfo.class ) ; mMockHelper = new com.android.compatibility.common.tradefed.build.VtsCompatibilityInvocationHelper ( ) ; mPreparer = new com.android.tradefed.targetprep.VtsTraceCollectPreparer ( ) { @ java.lang.Override com.android.compatibility.common.tradefed.build.VtsCompatibilityInvocationHelper createVtsHelper ( ) { return mMockHelper ; } } ; com.android.tradefed.config.OptionSetter setter = new com.android.tradefed.config.OptionSetter ( mPreparer ) ; setter.setOptionValue ( "local-trace-dir" , com.android.tradefed.targetprep.VtsTraceCollectPreparerTest.TEST_TRACE_DIR ) ; }
private void createConnectionFailed ( final java.lang.String callId , final android.telecom.ConnectionRequest request , boolean isIncoming ) { android.telecom.Log.i ( this , "createConnectionFailed %s" , callId ) ; if ( isIncoming ) { onCreateIncomingConnectionFailed ( request ) ; } else { onCreateOutgoingConnectionFailed ( request ) ; } }
public void testUnescapeStringShouldUnescapeAtSignAndQuestionMarkOnlyAtBeginning ( ) throws java.lang.Exception { assertEquals ( "@text" , com.android.ide.common.resources.ValueResourceParser.unescapeResourceString ( "\\@text" , false , true ) ) ; assertEquals ( "a@text" , com.android.ide.common.resources.ValueResourceParser.unescapeResourceString ( "a@text" , false , true ) ) ; assertEquals ( "?text" , com.android.ide.common.resources.ValueResourceParser.unescapeResourceString ( "\\?text" , false , true ) ) ; assertEquals ( "a?text" , com.android.ide.common.resources.ValueResourceParser.unescapeResourceString ( "a?text" , false , true ) ) ; assertEquals ( " ?text" , com.android.ide.common.resources.ValueResourceParser.unescapeResourceString ( "\" ?text\"" , false , true ) ) ; }
public void feed ( long offset , long size , com.android.apksigner.core.util.DataSink sink ) throws java.io.IOException { checkChunkValid ( offset , size ) ; int chunkPosition = ( ( int ) ( offset ) ) ; int chunkLimit = ( ( int ) ( chunkPosition + size ) ) ; java.nio.ByteBuffer chunk ; synchronized ( mBuffer ) { mBuffer.position ( 0 ) ; mBuffer.limit ( chunkLimit ) ; mBuffer.position ( chunkPosition ) ; chunk = mBuffer.slice ( ) ; } sink.consume ( chunk ) ; }
private boolean shouldTurnOffFullNetworkUpdate ( ) { return ( mIsPowerSaveOn ) || ( ( ( ! ( mIsCharging ) ) && ( ! ( mIsScreenOn ) ) ) && ( ! ( mIsTetheringOn ) ) ) ; }
private void responseSetupDataCall ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SetupDataCallResult dcResponse ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.dataconnection.DataCallResponse ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = com.android.internal.telephony.RIL.convertHalDc ( dcResponse ) ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public static int fromJCAMode ( java.lang.String mode ) { java.lang.String modeLower = mode.toLowerCase ( java.util.Locale.US ) ; if ( "ecb" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.ECB ; } else if ( "cbc" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.CBC ; } else if ( "ctr" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.CTR ; } else if ( "gcm" . equals ( modeLower ) ) { return android.security.KeyStoreKeyConstraints.BlockMode.CTR ; } else { throw new java.lang.IllegalArgumentException ( ( "Unknown block mode: " + mode ) ) ; } }
private static java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec ( java.lang.String algorithm ) { if ( ! ( libcore.javax.crypto.CipherTest.isPBE ( algorithm ) ) ) { return null ; } final byte [ ] salt = new byte [ 8 ] ; new java.security.SecureRandom ( ) . nextBytes ( salt ) ; return new javax.crypto.spec.PBEParameterSpec ( salt , 1024 ) ; }
public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ( mVenvDir ) != null ) { com.android.tradefed.util.FileUtil.recursiveDelete ( mVenvDir ) ; com.android.tradefed.log.LogUtil.CLog.i ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; mVenvDir = null ; } }
public boolean updateSubscribe ( short transactionId , android.net.wifi.nan.SubscribeConfig config ) { if ( mIsPublishSession ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , "A PUBLISH session is being used to subscribe" ) ; try { mCallback.onSessionConfigFail ( WifiNanNative.NAN_STATUS_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanDiscoverySessionState.TAG , ( "updateSubscribe: RemoteException=" + e ) ) ; } return false ; } return com.android.server.wifi.nan.WifiNanNative.getInstance ( ) . subscribe ( transactionId , mPubSubId , config ) ; }
public android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings ( java.lang.String packageName , int subId ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { return telephony.getSystemVisualVoicemailSmsFilterSettings ( packageName , subId ) ; } } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public void compileFinalizer ( ) throws java.lang.Exception { java.io.File out = com.android.jack.TestTools.createTempFile ( "out" , ".zip" ) ; java.lang.String classpath = com.android.jack.TestTools.getClasspathAsString ( com.android.jack.compile.androidtree.dalvik.finalizer.FinalizerTest.BOOTCLASSPATH ) ; com.android.jack.TestTools.compileSourceToDex ( new com.android.jack.Options ( ) , com.android.jack.TestTools.getDalvikTestFolder ( "036-finalizer" ) , classpath , out , true ) ; }
public void sendBackgroundScanBandRequest ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = createRequest ( WifiScanner.WIFI_BAND_BOTH , 30000 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; com.android.server.wifi.WifiNative.ScanSettings nativeSettings = new com.android.server.wifi.scanner.NativeScanSettingsBuilder ( ) . withBasePeriod ( 30000 ) . withMaxApPerScan ( com.android.server.wifi.scanner.WifiScanningServiceTest.MAX_AP_PER_SCAN ) . withMaxScansToCache ( BackgroundScanScheduler.DEFAULT_MAX_SCANS_TO_BATCH ) . addBucketWithBand ( 30000 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN , WifiScanner.WIFI_BAND_BOTH ) . build ( ) ; doSuccessfulBackgroundScan ( requestSettings , nativeSettings ) ; assertEquals ( mWifiMetrics.getBackgroundScanCount ( ) , 1 ) ; }
public static void increaseAnsweredCount ( android.content.Context context ) { android.content.SharedPreferences sharedPreferences = com.android.dialer.util.DialerUtils.getDefaultSharedPreferenceForDeviceProtectedStorageContext ( context ) ; int answeredCount = sharedPreferences.getInt ( com.android.incallui.answer.impl.hint.AnswerHintFactory.ANSWERED_COUNT_PREFERENCE_KEY , 0 ) ; sharedPreferences.edit ( ) . putInt ( com.android.incallui.answer.impl.hint.AnswerHintFactory.ANSWERED_COUNT_PREFERENCE_KEY , ( answeredCount + 1 ) ) . apply ( ) ; }
public android.icu.util.TimeZone lookupTimeZoneByCountryAndOffset ( java.lang.String countryIso , int offsetSeconds , boolean isDst , long whenMillis , android.icu.util.TimeZone bias ) { libcore.util.CountryTimeZones countryTimeZones = lookupCountryTimeZones ( countryIso ) ; if ( countryTimeZones == null ) { return null ; } return countryTimeZones.lookupByOffsetWithBias ( offsetSeconds , isDst , whenMillis , bias ) ; }
private void loadPreferences ( ) { org.eclipse.core.runtime.preferences.IEclipsePreferences prefs = new org.eclipse.core.runtime.preferences.InstanceScope ( ) . getNode ( GlTracePlugin.PLUGIN_ID ) ; mAppPackageToTrace = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_APP_PACKAGE , "" ) ; mActivityToTrace = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_ACTIVITY , "" ) ; mTraceFilePath = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_TRACEFILE , "" ) ; mLastUsedDevice = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_DEVICE , "" ) ; }
private void loadStackTrace ( ) throws java.io.IOException { int serialNumber = mInput.readInt ( ) ; int threadSerialNumber = mInput.readInt ( ) ; final int numFrames = mInput.readInt ( ) ; com.android.tools.perflib.heap.StackFrame [ ] frames = new com.android.tools.perflib.heap.StackFrame [ numFrames ] ; for ( int i = 0 ; i < numFrames ; i ++ ) { frames [ i ] = mSnapshot.getStackFrame ( readId ( ) ) ; } com.android.tools.perflib.heap.StackTrace trace = new com.android.tools.perflib.heap.StackTrace ( serialNumber , threadSerialNumber , frames ) ; mSnapshot.addStackTrace ( trace ) ; }
public synchronized void stop ( ) { if ( ( mPhoneProxy ) != null ) { if ( com.android.bluetooth.hfp.HeadsetSystemInterface.DBG ) { android.util.Log.d ( com.android.bluetooth.hfp.HeadsetSystemInterface.TAG , "Unbinding phone proxy" ) ; } mPhoneProxy = null ; mHeadsetService.unbindService ( mPhoneProxyConnection ) ; } mHeadsetPhoneState.listenForPhoneState ( false ) ; mHeadsetPhoneState.cleanup ( ) ; }
public boolean updatePublish ( short transactionId , android.net.wifi.aware.PublishConfig config ) { if ( ! ( mIsPublishSession ) ) { android.util.Log.e ( com.android.server.wifi.aware.WifiAwareDiscoverySessionState.TAG , "A SUBSCRIBE session is being used to publish" ) ; try { mCallback.onSessionConfigFail ( WifiAwareNative.AWARE_STATUS_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.aware.WifiAwareDiscoverySessionState.TAG , ( "updatePublish: RemoteException=" + e ) ) ; } return false ; } return com.android.server.wifi.aware.WifiAwareNative.getInstance ( ) . publish ( transactionId , mPubSubId , config ) ; }
public static void sort ( float [ ] a ) { java.util.DualPivotQuicksort.sort ( a ) ; }
public void setComponentEnabledSetting ( android.content.ComponentName componentName , int newState , int flags ) { setEnabledSetting ( componentName.getPackageName ( ) , componentName.getClassName ( ) , newState , flags ) ; }
private static void edgeSplitMoveExceptionsAndResults ( com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock block : cfg.getInternalBlocksUnordered ( ) ) { if ( ( ( ! ( block instanceof com.android.jack.ir.ast.cfg.JExitBasicBlock ) ) && ( ( block.getPredecessorCount ( ) ) > 1 ) ) && ( block instanceof com.android.jack.ir.ast.cfg.JCatchBasicBlock ) ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock predecessor : com.google.common.collect.Lists.newArrayList ( block.getPredecessors ( ) ) ) { com.android.jack.transformations.ssa.SsaBasicBlockSplitter.insertNewSimpleSuccessor ( predecessor , block ) ; } } } }
private void setAndBroadcastNetworkSetTime ( long time ) { if ( com.android.internal.telephony.ServiceStateTracker.DBG ) log ( ( ( "setAndBroadcastNetworkSetTime: time=" + time ) + "ms" ) ) ; android.os.SystemClock.setCurrentTimeMillis ( time ) ; android.content.Intent intent = new android.content.Intent ( TelephonyIntents.ACTION_NETWORK_SET_TIME ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REPLACE_PENDING ) ; intent.putExtra ( "time" , time ) ; mPhone.getContext ( ) . sendStickyBroadcastAsUser ( intent , UserHandle.ALL ) ; com.android.internal.telephony.metrics.TelephonyMetrics.getInstance ( ) . writeNITZEvent ( mPhone.getPhoneId ( ) , time ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.lang.System.setProperty ( "dexmaker.dexcache" , getContext ( ) . getCacheDir ( ) . toString ( ) ) ; com.android.server.BroadcastInterceptingContext context = new com.android.server.BroadcastInterceptingContext ( getContext ( ) ) ; mServerSocket = new android.net.LocalServerSocket ( com.android.server.NetworkManagementServiceTest.SOCKET_NAME ) ; mNMService = com.android.server.NetworkManagementService.create ( context , com.android.server.NetworkManagementServiceTest.SOCKET_NAME ) ; mSocket = mServerSocket.accept ( ) ; mOutputStream = mSocket.getOutputStream ( ) ; }
public static < T > T get ( java.util.Iterator < T > iterator , int position ) { com.google.common.collect.Iterators.checkNonnegative ( position ) ; int skipped = 0 ; while ( iterator.hasNext ( ) ) { T t = iterator.next ( ) ; if ( ( skipped ++ ) == position ) { return t ; } } throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( "position (" + position ) + ") must be less than the number of elements that remained (" ) + skipped ) + ")" ) ) ; }
protected boolean processLayersFromFrontToFocus ( com.android.rs.test.BlurStack blurStack ) { for ( int targetLayer = 0 ; targetLayer < ( blurStack.getFocusLayer ( ) ) ; ++ targetLayer ) { com.android.rs.test.LayerInfo layerInfo = blurStack.getLayerInfo ( targetLayer ) ; setTargetLayer ( layerInfo ) ; int dilationRadius = com.android.rs.test.RefocusFilter.getKernelRadius ( layerInfo.frontDepth , blurStack ) ; setBlendInfo ( dilationRadius ) ; setKernelData ( targetLayer , blurStack ) ; computeLayerMatteInFrontOfFocalDepth ( ) ; filterLayerInFrontOfFocalDepth ( ) ; } finalizeFuzzyImageUsingSharpImage ( ) ; return true ; }
public void logrb ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.String bundleName , java.lang.String msg , java.lang.Object [ ] params ) { if ( ( ( level.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setParameters ( params ) ; doLog ( lr , bundleName ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { try { java.lang.System.loadLibrary ( args [ 0 ] ) ; } catch ( java.lang.UnsatisfiedLinkError ule ) { Main.usingRI = true ; java.lang.System.out.println ( "JNI_OnLoad called" ) ; } Main.testClearDexCache ( ) ; Main.testMultiDex ( ) ; Main.testRacyLoader ( ) ; Main.testRacyLoader2 ( ) ; Main.testMisbehavingLoader ( ) ; Main.testRacyMisbehavingLoader ( ) ; Main.testRacyMisbehavingLoader2 ( ) ; }
void load ( java.lang.String absolutePath , java.lang.ClassLoader loader ) { java.lang.System.logE ( ( "java.lang.Runtime#load(String, ClassLoader)" + " is private and will be removed in a future Android release" ) ) ; if ( absolutePath == null ) { throw new java.lang.NullPointerException ( "absolutePath == null" ) ; } java.lang.String error = doLoad ( absolutePath , loader ) ; if ( error != null ) { throw new java.lang.UnsatisfiedLinkError ( error ) ; } }
public boolean connect ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "connect()" ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.connect ( ) ; }
public boolean dumpProfiles ( int uid , java.lang.String packageName , java.lang.String codePaths ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { return mInstalld.dumpProfiles ( uid , packageName , codePaths ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
static void rethrow ( final java.lang.Throwable ex ) { if ( ex != null ) { if ( ex instanceof java.lang.Error ) throw ( ( java.lang.Error ) ( ex ) ) ; if ( ex instanceof java.lang.RuntimeException ) throw ( ( java.lang.RuntimeException ) ( ex ) ) ; throw java.util.concurrent.ForkJoinTask.uncheckedThrowable ( ex , java.lang.RuntimeException.class ) ; } }
private void combineFiles ( java.lang.String Dest , java.lang.String Src ) throws java.io.IOException { java.io.FileInputStream is = new java.io.FileInputStream ( new java.io.File ( Src ) ) ; java.io.FileOutputStream os = new java.io.FileOutputStream ( new java.io.File ( Dest ) , true ) ; int rbyte ; while ( ( rbyte = is.read ( ) ) != ( - 1 ) ) { os.write ( rbyte ) ; } is.close ( ) ; os.close ( ) ; }
public void setComment ( java.lang.String comment ) { if ( comment == null ) { this . commentBytes = null ; return ; } byte [ ] newCommentBytes = comment.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; if ( ( newCommentBytes.length ) > 65535 ) { throw new java.lang.IllegalArgumentException ( ( ( "Comment too long: " + ( newCommentBytes.length ) ) + " bytes" ) ) ; } this . commentBytes = newCommentBytes ; }
public void setSmscAddress ( java.lang.String address , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS , result ) ; rr.mParcel.writeString ( address ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " : " ) + address ) ) ; send ( rr ) ; }
private void updateSampleRepo ( ) { org.eclipse.jgit.api.Git localGitRepo = getLocalRepo ( ) ; if ( localGitRepo == null ) { localGitRepo = cloneGithubRepo ( ) ; } else { try { localGitRepo.pull ( ) . call ( ) ; } catch ( org.eclipse.jgit.api.errors.GitAPIException e ) { com.google.gct.intellij.endpoints.synchronization.SampleSyncTask.LOG.error ( "Error syncing local sample repository" , e ) ; } } if ( localGitRepo != null ) { localGitRepo.getRepository ( ) . close ( ) ; } }
synchronized int getAudioState ( ) { com.android.internal.util.IState state = getCurrentState ( ) ; if ( state == ( mAudioConnecting ) ) { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTING ; } else if ( ( state == ( mAudioDisconnecting ) ) || ( state == ( mAudioOn ) ) ) { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED ; } else { return android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ; } }
public void setUp ( ) { org.mockito.MockitoAnnotations.initMocks ( this ) ; if ( ( android.os.Looper.myLooper ( ) ) == null ) { android.os.Looper.prepare ( ) ; } mDevice1 = android.bluetooth.BluetoothAdapter.getDefaultAdapter ( ) . getRemoteDevice ( com.android.bluetooth.btservice.RemoteDevicesTest.TEST_BT_ADDR_1 ) ; mRemoteDevices = new com.android.bluetooth.btservice.RemoteDevices ( mAdapterService ) ; }
private void milliSleep ( int millis ) { try { java.lang.Thread.sleep ( millis ) ; } catch ( java.lang.Exception e ) { } }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsUcharUcharUcharUchar args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( byte ) ( java.lang.StrictMath.min ( ( ( args.inMaxValue ) & 255 ) , java.lang.StrictMath.max ( ( ( args.inValue ) & 255 ) , ( ( args.inMinValue ) & 255 ) ) ) ) ) ; }
public void notifySpeakerphone ( boolean isSpeakerphone ) { if ( ! ( mCallsManager.hasAnyCalls ( ) ) ) { isSpeakerphone = false ; } if ( ( mIsShowingSpeakerphone ) == isSpeakerphone ) { return ; } com.android.server.telecom.Log.d ( this , "Speakerphone status bar icon being set to %b" , isSpeakerphone ) ; if ( isSpeakerphone ) { mStatusBarManager.setIcon ( com.android.server.telecom.StatusBarNotifier.SLOT_SPEAKERPHONE , android.R.drawable.stat_sys_speakerphone , 0 , mContext.getString ( R.string.accessibility_speakerphone_enabled ) ) ; } else { mStatusBarManager.removeIcon ( com.android.server.telecom.StatusBarNotifier.SLOT_SPEAKERPHONE ) ; } mIsShowingSpeakerphone = isSpeakerphone ; }
private static void appendCamelCase ( java.lang.StringBuilder sb , @ com.android.annotations.Nullable java.lang.String word ) { if ( word != null ) { if ( ( sb.length ( ) ) == 0 ) { sb.append ( word ) ; } else { sb.append ( com.android.build.gradle.internal.StringHelper.capitalize ( word ) ) ; } } }
public boolean logIn ( java.lang.String message ) { com.google.gdt.eclipse.login.common.GoogleLoginState state = createGoogleLoginState ( ) ; boolean loggedIn = state.logIn ( message ) ; com.google.gct.login.IGoogleLoginUpdateUser callback = new com.google.gct.login.IGoogleLoginUpdateUser ( ) { @ java.lang.Override public void updateUser ( ) { uiFacade.notifyStatusIndicator ( ) ; } } ; if ( loggedIn ) { users.addUser ( new com.google.gct.login.CredentialedUser ( state , callback ) ) ; } return loggedIn ; }
public com.android.ims.ImsUtInterface getSupplementaryServiceConfiguration ( ) throws com.android.ims.ImsException { if ( ( ( mUt ) != null ) && ( mUt.isBinderAlive ( ) ) ) { return mUt ; } checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsUt iUt = mMmTelFeatureConnection.getUtInterface ( ) ; if ( iUt == null ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , ImsReasonInfo.CODE_UT_NOT_SUPPORTED ) ; } mUt = new com.android.ims.ImsUt ( iUt ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mUt ; }
public void setIncludePath ( org.apache.tools.ant.types.Path value ) { mIncludePath = value ; }
public java.lang.String toString ( ) { java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; final long bioCtx = org.conscrypt.NativeCrypto.create_BIO_OutputStream ( os ) ; try { org.conscrypt.NativeCrypto.X509_CRL_print ( bioCtx , mContext ) ; return os.toString ( ) ; } finally { org.conscrypt.NativeCrypto.BIO_free ( bioCtx ) ; } }
public void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; com.android.jack.jayce.v0003.io.ExportSession exportSession = new com.android.jack.jayce.v0003.io.ExportSession ( session.getPhantomLookup ( ) , session , com.android.jack.jayce.NodeLevel.STRUCTURE ) ; for ( com.android.jack.jayce.v0003.nodes.NAnnotation annotation : annotations ) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast ( exportSession ) ; loading.addAnnotation ( annotationLiteral ) ; annotationLiteral.updateParents ( loading ) ; } }
public void delete ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException , com.android.sched.util.file.CannotDeleteFileException { try { baseVFS.getRootInputVDir ( ) . delete ( fileType.buildFileVPath ( typePath ) ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } }
public void mousePressed ( java.awt.event.MouseEvent e ) { if ( isOverLink ( e.getX ( ) , e.getY ( ) ) ) { com.intellij.ide.BrowserUtil.browse ( "https://console.developers.google.com/project" ) ; com.android.tools.idea.stats.UsageTracker.getInstance ( ) . trackEvent ( GctTracking.CATEGORY , GctTracking.PROJECT_SELECTION , "create.new.project" , null ) ; } }
public com.android.dialer.voicemail.listui.NewVoicemailViewHolder onCreateViewHolder ( android.view.ViewGroup viewGroup , int viewType ) { android.view.LayoutInflater inflater = android.view.LayoutInflater.from ( viewGroup.getContext ( ) ) ; android.view.View view = inflater.inflate ( R.layout.new_voicemail_call_log_entry , viewGroup , false ) ; com.android.dialer.voicemail.listui.NewVoicemailViewHolder newVoicemailViewHolder = new com.android.dialer.voicemail.listui.NewVoicemailViewHolder ( view ) ; return newVoicemailViewHolder ; }
public void listen ( android.telephony.PhoneStateListener listener , int events ) { if ( ( mContext ) == null ) return ; try { java.lang.Boolean notifyNow = ( getITelephony ( ) ) != null ; android.telephony.TelephonyManager.sRegistry.listenForSubscriber ( listener.mSubId , getOpPackageName ( ) , listener.callback , events , notifyNow ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
private void handleRadioAvailable ( ) { mCi.getBasebandVersion ( obtainMessage ( com.android.internal.telephony.EVENT_GET_BASEBAND_VERSION_DONE ) ) ; if ( isPhoneTypeGsm ( ) ) { mCi.getIMEI ( obtainMessage ( com.android.internal.telephony.EVENT_GET_IMEI_DONE ) ) ; mCi.getIMEISV ( obtainMessage ( com.android.internal.telephony.EVENT_GET_IMEISV_DONE ) ) ; } else { mCi.getDeviceIdentity ( obtainMessage ( com.android.internal.telephony.EVENT_GET_DEVICE_IDENTITY_DONE ) ) ; } mCi.getRadioCapability ( obtainMessage ( com.android.internal.telephony.EVENT_GET_RADIO_CAPABILITY ) ) ; startLceAfterRadioIsAvailable ( ) ; }
private void setSuspendOptimizations ( int reason , boolean enabled ) { if ( com.android.server.wifi.WifiStateMachine.DBG ) log ( ( ( ( "setSuspendOptimizations: " + reason ) + " " ) + enabled ) ) ; if ( enabled ) { mSuspendOptNeedsDisabled &= ~ reason ; } else { mSuspendOptNeedsDisabled |= reason ; } if ( com.android.server.wifi.WifiStateMachine.DBG ) log ( ( "mSuspendOptNeedsDisabled " + ( mSuspendOptNeedsDisabled ) ) ) ; }
private int buildBatteryLevelInt ( ) { return ( ( ( ( ( int ) ( batteryLevel ) ) << 24 ) & - 16777216 ) | ( ( ( ( int ) ( batteryTemperature ) ) << 14 ) & 16760832 ) ) | ( ( ( int ) ( batteryVoltage ) ) & 16383 ) ; }
public void testCannotSetChunkedStreamingModeAfterFixedLengthStreamingMode ( ) throws java.lang.Exception { server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.setFixedLengthStreamingMode ( 1 ) ; try { connection.setChunkedStreamingMode ( 1 ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
private com.android.bluetooth.a2dp.A2dpService getService ( ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.a2dp.A2dpService.TAG , "A2dp call not allowed for non-active user" ) ; return null ; } if ( ( ( mService ) != null ) && ( mService.isAvailable ( ) ) ) { return mService ; } return null ; }
public static java.lang.invoke.MethodHandle explicitCastArguments ( java.lang.invoke.MethodHandle target , java.lang.invoke.MethodType newType ) { java.lang.invoke.MethodHandles.explicitCastArgumentsChecks ( target , newType ) ; java.lang.invoke.MethodType oldType = target.type ( ) ; if ( oldType == newType ) return target ; if ( oldType.explicitCastEquivalentToAsType ( newType ) ) { return target.asFixedArity ( ) . asType ( newType ) ; } throw new java.lang.UnsupportedOperationException ( "MethodHandles.explicitCastArguments is not implemented" ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; com.android.server.wifi.TestUtil.installWlanWifiNative ( mWifiNative ) ; mLooper = new android.os.test.TestLooper ( ) ; org.mockito.Mockito.when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; mRttServiceImpl = new com.android.server.wifi.RttService.RttServiceImpl ( mContext , mLooper.getLooper ( ) , mWifiInjector ) ; mRttServiceImpl.startService ( ) ; }
public boolean disableNetwork ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "disableNetwork nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( "DISABLE_NETWORK " + netId ) ) ; }
protected void _initWith ( com.android.builder.model.BaseConfig that ) { mBuildConfigLines.clear ( ) ; mBuildConfigLines.addAll ( that.getBuildConfig ( ) ) ; mProguardFiles.clear ( ) ; mProguardFiles.addAll ( that.getProguardFiles ( ) ) ; }
public void testStageInstallWithErrorCode_withMissingDistroVersionFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( distro ) ) ; assertNoDistroOperationStaged ( ) ; assertNoInstalledDistro ( ) ; }
public java.util.List < com.android.ide.common.api.MenuAction > getContextMenu ( com.android.ide.common.api.INode selectedNode ) { return super . getContextMenu ( selectedNode ) ; }
private static boolean featureProvidedByGradle ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.Nullable java.lang.String minGradleVersion ) { if ( minGradleVersion == null ) { return false ; } com.android.builder.model.AndroidProject gradleModel = context.getProject ( ) . getGradleProjectModel ( ) ; if ( gradleModel != null ) { com.android.repository.Revision gradleModelVersion = com.android.repository.Revision.parseRevision ( gradleModel.getModelVersion ( ) ) ; if ( ( gradleModelVersion.compareTo ( com.android.repository.Revision.parseRevision ( minGradleVersion ) , Revision.PreviewComparison.IGNORE ) ) >= 0 ) { return true ; } } return false ; }
public void testAesCbcHmacSha1Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver ( ) ; java.util.Random r = new java.util.Random ( java.lang.System.currentTimeMillis ( ) ) ; mExpected1 = r.nextInt ( 101 ) ; mExpected2 = r.nextInt ( 101 ) ; }
public void exit ( ) { mIPv6TetherSvc.stop ( ) ; try { mNMService.untetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception e ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR ; android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Failed to untether interface: " + ( e.toString ( ) ) ) ) ; } configureIfaceIp ( false ) ; }
public void testGetRestrictBackgroundStatus_whitelisted ( ) throws java.lang.Exception { if ( ! ( isSupported ( ) ) ) return ; setRestrictBackground ( true ) ; assertRestrictBackgroundChangedReceived ( 1 ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED ) ; addRestrictBackgroundWhitelist ( mUid ) ; assertRestrictBackgroundChangedReceived ( 2 ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED ) ; removeRestrictBackgroundWhitelist ( mUid ) ; assertRestrictBackgroundChangedReceived ( 3 ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED ) ; assertsForegroundAlwaysHasNetworkAccess ( ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED ) ; }
public void run ( ) { com.android.ddmuilib.logcat.LogPanel.PsOutputReceiver psor = new com.android.ddmuilib.logcat.LogPanel.PsOutputReceiver ( md.pid , newFilter , newTabItem ) ; try { mCurrentLoggedDevice.executeShellCommand ( "ps" , psor ) ; } catch ( java.io.IOException e ) { } }
public void insert ( java.util.List < com.android.dialer.speeddial.database.SpeedDialEntry > entries ) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase ( ) ; db.beginTransaction ( ) ; try { for ( com.android.dialer.speeddial.database.SpeedDialEntry entry : entries ) { if ( ( db.insert ( com.android.dialer.speeddial.database.SpeedDialEntryDatabaseHelper.TABLE_NAME , null , buildContentValues ( entry ) ) ) == ( - 1L ) ) { throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( "Attempted to insert a row that already exists." ) ; } } db.setTransactionSuccessful ( ) ; } finally { db.endTransaction ( ) ; db.close ( ) ; } }
protected void onLayout ( boolean changed , int l , int t , int r , int b ) { super . onLayout ( changed , l , t , r , b ) ; if ( changed ) { if ( isLandscapeMode ( ) ) { adjustKeyWidths ( ) ; } else { adjustDigitKeyHeights ( ) ; } } }
protected boolean mediaFilesExistOnDevice ( com.android.tradefed.device.ITestDevice device ) throws com.android.tradefed.device.DeviceNotAvailableException { for ( android.mediastress.cts.preconditions.MediaPreparer.Resolution resolution : android.mediastress.cts.preconditions.MediaPreparer.RESOLUTIONS ) ; if ( ( resolution.width ) > ( mMaxRes.width ) ) { break ; } HEAD ( 7.5E7 ) ; android.mediastress.cts.preconditions.a Merge ; }
public void createAndroidTasks ( org.gradle.model.collection.CollectionBuilder < org.gradle.api.Task > tasks , com.android.build.gradle.model.AndroidComponentSpec androidSpec , com.android.build.gradle.internal.TaskManager taskManager , com.android.build.gradle.internal.SdkHandler sdkHandler , org.gradle.api.Project project , com.android.build.gradle.model.AndroidComponentModelSourceSet androidSources ) { for ( final java.io.File file : sdkHandler.getSdkLoader ( ) . getRepositories ( ) ) { project.getRepositories ( ) . maven ( new org.gradle.api.Action < org.gradle.api.artifacts.repositories.MavenArtifactRepository > ( ) { @ java.lang.Override public void execute ( org.gradle.api.artifacts.repositories.MavenArtifactRepository repo ) { repo.setUrl ( file.toURI ( ) ) ; } } ) ; } }
private java.lang.String fromHex ( java.lang.String hexPassword ) { if ( hexPassword == null ) { return null ; } try { byte [ ] bytes = org.apache.commons.codec.binary.Hex.decodeHex ( hexPassword.toCharArray ( ) ) ; return new java.lang.String ( bytes , java.nio.charset.StandardCharsets.UTF_8 ) ; } catch ( org.apache.commons.codec.DecoderException e ) { return null ; } }
boolean isExpired ( com.google.common.cache.LocalCache.ReferenceEntry < K , V > entry , long now ) { if ( ( expiresAfterAccess ( ) ) && ( ( now - ( entry.getAccessTime ( ) ) ) > ( expireAfterAccessNanos ) ) ) { return true ; } if ( ( expiresAfterWrite ( ) ) && ( ( now - ( entry.getWriteTime ( ) ) ) > ( expireAfterWriteNanos ) ) ) { return true ; } return false ; }
public < T > T when ( T mock ) { return com.google.testing.littlemock.LittleMock.doAnswer ( new java.util.concurrent.Callable < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object call ( ) throws java.lang.Exception { latch.countDown ( ) ; return result ; } } ) . when ( mock ) ; }
protected com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface ( @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JTypeLookupException { for ( com.android.jack.load.PackageLoader loader : loaders ) { try { return loader.loadClassOrInterface ( this , simpleName ) ; } catch ( com.android.jack.lookup.JLookupException e ) { } } throw new com.android.jack.ir.ast.MissingJTypeLookupException ( this , simpleName ) ; }
public final short getDUnit ( ) { int d = getD ( ) ; if ( ( d & ( ~ 65535 ) ) != 0 ) { throw new com.android.jack.dx.util.DexException ( ( "Register D out of range: " + ( com.android.jack.dx.util.Hex.u8 ( d ) ) ) ) ; } return ( ( short ) ( d ) ) ; }
public boolean matchesNationalNumber ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc , boolean allowPrefixMatch ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.getNationalNumberPattern ( ) ) . matcher ( nationalNumber ) ; return ( nationalNumberPatternMatcher.matches ( ) ) || ( allowPrefixMatch && ( nationalNumberPatternMatcher.lookingAt ( ) ) ) ; }
private boolean canReadPhoneState ( java.lang.String callingPackage ) { if ( ( mContext.checkCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE ) ) == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return true ; } boolean canReadPhoneState = ( mContext.checkCallingOrSelfPermission ( android.Manifest.permission.READ_PHONE_STATE ) ) == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ; if ( canReadPhoneState && ( ( mAppOps.noteOp ( AppOpsManager.OP_READ_PHONE_STATE , android.os.Binder.getCallingUid ( ) , callingPackage ) ) != ( android.app.AppOpsManager.MODE_ALLOWED ) ) ) { return false ; } return canReadPhoneState ; }
public java.util.List < com.android.tools.lint.detector.api.Project > getAllLibraries ( ) { if ( ( mAllLibraries ) == null ) { if ( ( mDirectLibraries.size ( ) ) == 0 ) { return mDirectLibraries ; } java.util.List < com.android.tools.lint.detector.api.Project > all = new java.util.ArrayList < com.android.tools.lint.detector.api.Project > ( ) ; addLibraryProjects ( all ) ; mAllLibraries = all ; } return mAllLibraries ; }
public static void openDrawer ( int drawerLayoutId ) { if ( android.support.test.espresso.contrib.DrawerActions.checkDrawer ( drawerLayoutId , android.support.test.espresso.contrib.DrawerMatchers.isOpen ( ) ) ) { return ; } android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( drawerLayoutId ) ) . perform ( android.support.test.espresso.contrib.DrawerActions.registerListener ( ) ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( drawerLayoutId ) ) . perform ( android.support.test.espresso.contrib.DrawerActions.actionOpenDrawer ( ) ) ; android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( drawerLayoutId ) ) . perform ( android.support.test.espresso.contrib.DrawerActions.unregisterListener ( ) ) ; }
public void onLooperPrepared ( ) { mCTUT = new com.android.internal.telephony.imsphone.ImsPhoneCallTracker ( mImsPhone ) ; mCTUT.addReasonCodeRemapping ( null , "Wifi signal lost." , ImsReasonInfo.CODE_WIFI_LOST ) ; mCTUT.addReasonCodeRemapping ( 501 , "Call answered elsewhere." , ImsReasonInfo.CODE_ANSWERED_ELSEWHERE ) ; mCTUT.addReasonCodeRemapping ( 510 , "Call answered elsewhere." , ImsReasonInfo.CODE_ANSWERED_ELSEWHERE ) ; setReady ( true ) ; }
synchronized void nAllocationRead ( long id , java.lang.Object d , android.support.v8.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead ( mContext , id , d , dt.mID ) ; }
public static java.lang.String getGcpUrl ( com.google.gct.login.CredentialedUser user , java.lang.String projectId ) { com.google.api.services.source.Source sourceRepos = new com.google.api.services.source.Source.Builder ( new com.google.api.client.http.javanet.NetHttpTransport ( ) , new com.google.api.client.json.jackson2.JacksonFactory ( ) , user.getCredential ( ) ) . setApplicationName ( "Android Studio" ) . build ( ) ; java.lang.String calculatedUrl = ( "https://source.developers.google.com/p/" + projectId ) + "/" ; try { com.google.api.services.source.model.ListReposResponse response = sourceRepos.repos ( ) . list ( projectId ) . execute ( ) ; if ( ( response != null ) && ( ( response.getRepos ( ) ) != null ) ) { for ( com.google.api.services.source.model.Repo repo : response.getRepos ( ) ) { if ( "default" . equalsIgnoreCase ( repo.getRepoName ( ) ) ) { calculatedUrl = repo.getCloneUrl ( ) ; } } } } catch ( java.lang.Exception e ) { com.google.gct.idea.git.GcpHttpAuthDataProvider.LOG.error ( ( "Exception loading repo url for " + projectId ) , e ) ; } if ( com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty ( calculatedUrl ) ) { com.google.gct.idea.git.GcpHttpAuthDataProvider.LOG.error ( ( "Exception loading repo url for " + projectId ) ) ; } return calculatedUrl ; }
private void visit ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Node node ) { if ( ( node.getNodeType ( ) ) == ( org.w3c.dom.Node.TEXT_NODE ) ) { check ( context , node , node.getNodeValue ( ) ) ; } else { org.w3c.dom.NodeList children = node.getChildNodes ( ) ; for ( int i = 0 , n = children.getLength ( ) ; i < n ; i ++ ) { visit ( context , children.item ( i ) ) ; } } }
protected final java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > doGetConfiguredResources ( @ com.android.annotations.NonNull com.android.ide.common.resources.configuration.FolderConfiguration referenceConfig ) { java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > map = new java.util.EnumMap < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > ( com.android.resources.ResourceType.class ) ; for ( com.android.resources.ResourceType key : com.android.resources.ResourceType.values ( ) ) { map.put ( key , getConfiguredResource ( key , referenceConfig ) ) ; } return map ; }
public void testGetPlaybackUri ( ) throws java.lang.Exception { android.telephony.mbms.StreamingService streamingService = mStreamingSession.startStreaming ( CtsStreamingService.STREAMING_SERVICE_INFO , mStreamingServiceCallback , mCallbackHandler ) ; assertEquals ( CtsStreamingService.STREAMING_URI , streamingService.getPlaybackUri ( ) ) ; java.util.List < java.util.List < java.lang.Object > > getPlaybackUriCalls = getMiddlewareCalls ( CtsStreamingService.METHOD_GET_PLAYBACK_URI ) ; assertEquals ( 1 , getPlaybackUriCalls.size ( ) ) ; assertEquals ( CtsStreamingService.STREAMING_SERVICE_INFO.getServiceId ( ) , getPlaybackUriCalls.get ( 0 ) . get ( 2 ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.$opt$TestAllocations ( ) ; Main.$opt$TestWithInitializations ( ) ; Main.$opt$TestNegativeValueNewByteArray ( ) ; Main.$opt$TestNegativeValueNewCharArray ( ) ; Main.testSmaliFilledNewArray ( ) ; Main.testSmaliFillArrayData ( ) ; Main.testSmaliVerifyError ( ) ; }
public void test_getCipherSuite ( ) { assertEquals ( tests.api.javax.net.ssl.SSLSessionTest.CIPHER_SUITE , clientSession.getCipherSuite ( ) ) ; }
public void startService ( ) throws java.lang.Exception { mWifiScanningServiceImpl.startService ( ) ; mWifiScanningServiceImpl.setWifiHandlerLogForTest ( mLog ) ; verifyNoMoreInteractions ( mWifiScannerImplFactory ) ; android.os.Handler handler = mock ( android.os.Handler.class ) ; com.android.internal.util.test.BidirectionalAsyncChannel controlChannel = connectChannel ( handler ) ; org.mockito.InOrder order = inOrder ( handler ) ; com.android.server.wifi.scanner.WifiScanningServiceTest.sendBackgroundScanRequest ( controlChannel , 122 , generateValidScanSettings ( ) , null ) ; mLooper.dispatchAll ( ) ; com.android.server.wifi.scanner.WifiScanningServiceTest.verifyFailedResponse ( order , handler , 122 , WifiScanner.REASON_UNSPECIFIED , "not available" ) ; }
void saveCompatModes ( ) { java.util.HashMap < java.lang.String , java.lang.Integer > pkgs ; synchronized ( mService ) { pkgs = new java.util.HashMap < java.lang.String , java.lang.Integer > ( mPackages ) ; } java.io.FileOutputStream fos = null ; try { fos = mFile.startWrite ( ) ; org.xmlpull.v1.XmlSerializer out = new com.android.internal.util.FastXmlSerializer ( ) ; out.setOutput ( fos , "utf-8" ) ; out.startDocument ( null , true ) ; out.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; out.startTag ( null , "compat-packages" ) ; final android.content.pm.IPackageManager pm = android.app.AppGlobals.getPackageManager ( ) ; final int screenLayout = mService.mConfiguration.screenLayout ; final int smallestScreenWidthDp = mService.mConfiguration.smallestScreenWidthDp ; final java.util.Iterator < java.util.Map.Entry < java.lang.String , java.lang.Integer > > it = pkgs.entrySet ( ) . iterator ( ) ; while ( it.hasNext ( ) ) { java.util.Map.Entry < java.lang.String , java.lang.Integer > entry = it.next ( ) ; java.lang.String pkg = entry.getKey ( ) ; int mode = entry.getValue ( ) ; if ( mode == 0 ) { continue ; } android.content.pm.ApplicationInfo ai = null ; try { ai = pm.getApplicationInfo ( pkg , 0 , 0 ) ; } catch ( android.os.RemoteException e ) { } if ( ai == null ) { continue ; } android.content.res.CompatibilityInfo info = new android.content.res.CompatibilityInfo ( ai , screenLayout , smallestScreenWidthDp , false ) ; if ( info.alwaysSupportsScreen ( ) ) { continue ; } if ( info.neverSupportsScreen ( ) ) { continue ; } out.startTag ( null , "pkg" ) ; out.attribute ( null , "name" , pkg ) ; out.attribute ( null , "mode" , java.lang.Integer.toString ( mode ) ) ; out.endTag ( null , "pkg" ) ; } out.endTag ( null , "compat-packages" ) ; out.endDocument ( ) ; mFile.finishWrite ( fos ) ; } catch ( java.io.IOException e1 ) { android.util.Slog.w ( TAG , "Error writing compat packages" , e1 ) ; if ( fos != null ) { mFile.failWrite ( fos ) ; } } }
public void testPercentageRounding ( ) throws java.lang.Exception { java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance ( java.util.Locale.US ) ; assertEquals ( "15%" , nf.format ( 0.149 ) ) ; assertEquals ( "14%" , nf.format ( 0.142 ) ) ; nf.setRoundingMode ( java.math.RoundingMode.UP ) ; assertEquals ( "15%" , nf.format ( 0.142 ) ) ; nf.setRoundingMode ( java.math.RoundingMode.DOWN ) ; assertEquals ( "14%" , nf.format ( 0.149 ) ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ThisReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { assert getTypeMap ( ) . get ( x.resolvedType ) . equals ( curClass.type ) ; push ( makeThisRef ( makeSourceInfo ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
private org.apache.harmony.dalvik.ddmc.Chunk handleMPSE ( org.apache.harmony.dalvik.ddmc.Chunk request ) { byte result ; if ( false ) { android.util.Log.v ( "ddm-heap" , "Method prof stream end" ) ; } try { android.os.Debug.stopMethodTracing ( ) ; result = 0 ; } catch ( java.lang.RuntimeException re ) { android.util.Log.w ( "ddm-heap" , ( "Method prof stream end failed: " + ( re.getMessage ( ) ) ) ) ; return createFailChunk ( 1 , re.getMessage ( ) ) ; } return null ; }
public void testUpgradeKeepsPermissions ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_22 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest22" , "testAllPermissionsGrantedByDefault" ) ; assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , true , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testAllPermissionsGrantedOnUpgrade" ) ; }
public void shutdown ( ) { if ( ( mBluetoothAdapter.getState ( ) ) == ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) { for ( com.googlecode.android_scripting.facade.bluetooth.BluetoothLeAdvertiseFacade.myAdvertiseCallback mAdvertise : mAdvertiseCallbackList.values ( ) ) { if ( mAdvertise != null ) { try { mBluetoothAdapter.getBluetoothLeAdvertiser ( ) . stopAdvertising ( mAdvertise ) ; } catch ( java.lang.NullPointerException e ) { com.googlecode.android_scripting.Log.e ( "Failed to stop ble advertising." , e ) ; } } } } mAdvertiseCallbackList.clear ( ) ; mAdvertiseSettingsList.clear ( ) ; mAdvertiseDataList.clear ( ) ; }
public final void test_setHostnameVerifier ( ) { javax.net.ssl.HttpsURLConnection con = new tests.api.javax.net.ssl.MyHttpsURLConnection ( null ) ; try { con.setHostnameVerifier ( null ) ; fail ( "No expected IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } tests.api.javax.net.ssl.myHostnameVerifier hnv = new tests.api.javax.net.ssl.myHostnameVerifier ( ) ; con.setHostnameVerifier ( hnv ) ; }
public void test_getLast ( ) { assertTrue ( "Returned incorrect first element" , ll.getLast ( ) . equals ( objArray [ ( ( objArray.length ) - 1 ) ] ) ) ; ll.clear ( ) ; try { ll.getLast ( ) ; fail ( "NoSuchElementException expected" ) ; } catch ( java.util.NoSuchElementException e ) { } }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , javax.net.ssl.SSLSession session ) throws java.security.cert.CertificateException { return checkTrusted ( chain , authType , session.getPeerHost ( ) , false ) ; }
public static com.android.jack.jayce.JayceInternalWriter get ( @ javax.annotation.Nonnull com.android.jack.library.OutputJackLibrary outputJackLibrary , @ javax.annotation.Nonnull java.io.OutputStream out ) { com.android.jack.jayce.v0002.io.JayceInternalWriterImpl jayceWriter = new com.android.jack.jayce.v0002.io.JayceInternalWriterImpl ( out ) ; outputJackLibrary.putProperty ( JayceProperties.KEY_JAYCE , java.lang.String.valueOf ( true ) ) ; outputJackLibrary.putProperty ( JayceProperties.KEY_JAYCE_MAJOR_VERSION , java.lang.String.valueOf ( com.android.jack.jayce.JayceWriterFactory.DEFAULT_MAJOR_VERSION ) ) ; outputJackLibrary.putProperty ( JayceProperties.KEY_JAYCE_MINOR_VERSION , java.lang.String.valueOf ( jayceWriter.getCurrentMinor ( ) ) ) ; return jayceWriter ; }
public synchronized void err ( @ com.android.annotations.Nullable java.lang.String line ) { mLogger.verbose ( "AAPT err(%1$s): %2$s" , mProcess.hashCode ( ) , line ) ; com.android.builder.png.AaptProcess.NotifierProcessOutput delegate = getNotifier ( ) ; if ( delegate != null ) { delegate.err ( line ) ; } }
public void onBackPressed ( ) { if ( ( mScroller ) != null ) { if ( ! ( mIsExitAnimationInProgress ) ) { mScroller.scrollOffBottom ( ) ; } } else { super . onBackPressed ( ) ; } }
public E next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java.util.NoSuchElementException ( ) ; } prePosition = ( position ) ++ ; return type.get ( new java.util.MapEntry ( enumMap.keys [ prePosition ] , enumMap.values [ prePosition ] ) ) ; }
private static org.eclipse.swt.graphics.Font getFont ( int size , boolean bold ) { org.eclipse.swt.graphics.FontData [ ] fontData = com.android.hierarchyviewerlib.ui.TreeView.systemFont.getFontData ( ) ; for ( int i = 0 ; i < ( fontData.length ) ; i ++ ) { fontData [ i ] . setHeight ( size ) ; if ( bold ) { fontData [ i ] . setStyle ( SWT.BOLD ) ; } } return new org.eclipse.swt.graphics.Font ( org.eclipse.swt.widgets.Display.getDefault ( ) , fontData ) ; }
boolean setBluetoothClass ( android.bluetooth.BluetoothClass bluetoothClass ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PRIVILEGED , "Need BLUETOOTH PRIVILEGED permission" ) ; return mAdapterProperties.setBluetoothClass ( bluetoothClass.getClassOfDeviceBytes ( ) ) ; }
private static java.lang.String sanitize ( @ com.android.annotations.NonNull java.lang.String str ) { str = str.toLowerCase ( java.util.Locale.US ) . replaceAll ( "[^a-z0-9_.-]+" , "_" ) . replaceAll ( "_+" , "_" ) ; return str ; }
public void waitForTasks ( ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException { for ( int i = 0 ; i < ( mCount ) ; i ++ ) { java.util.concurrent.Future result = mCompletionService.take ( ) ; java.lang.Object r = result.get ( ) ; } }
public boolean containsAll ( java.util.Collection < ? > c ) { return standardContainsAll ( c ) ; }
public java.util.Collection < com.android.builder.model.JavaLibrary > getJavaLibraries ( ) { java.util.Set < java.io.File > files = configuration.getFiles ( ) ; if ( files.isEmpty ( ) ) { return java.util.Collections.emptySet ( ) ; } java.util.Set < com.android.builder.model.JavaLibrary > javaLibraries = com.beust.jcommander.internal.Sets.newHashSet ( ) ; for ( java.io.File file : files ) { javaLibraries.add ( new com.android.build.gradle.internal.model.JavaLibraryImpl ( file ) ) ; } return javaLibraries ; }
public void test_tryLockJJZ_Overlapping ( ) throws java.lang.Exception { final long POSITION = 100 ; final long SIZE = 200 ; fileLock = writeOnlyFileChannel.lock ( POSITION , SIZE , false ) ; assertTrue ( fileLock.isValid ( ) ) ; try { writeOnlyFileChannel.lock ( ( POSITION + 1 ) , SIZE , false ) ; fail ( "should throw OverlappingFileLockException" ) ; } catch ( java.nio.channels.OverlappingFileLockException e ) { } }
protected java.util.List < com.intellij.ui.tabs.impl.TabInfo > getVisibleInfos ( ) { return myVisibleInfos ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JPhiBlockElement x ) { com.android.jack.ir.ast.JSsaVariableRef lhs = x.getLhs ( ) ; if ( lhs == null ) { printName ( x.getTarget ( ) ) ; print ( " = phi (" ) ; } else { visit ( lhs ) ; print ( " = phi (" ) ; } for ( com.android.jack.ir.ast.JSsaVariableRef rhs : x.getRhs ( ) ) { if ( rhs == null ) { print ( "?" ) ; } else { visit ( rhs ) ; } space ( ) ; } print ( ")" ) ; return false ; }
private void reliableWrite ( ) { mBluetoothGatt.beginReliableWrite ( ) ; sleep ( 1000 ) ; writeCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.WRITE_VALUE ) ; sleep ( 1000 ) ; if ( ! ( mBluetoothGatt.executeReliableWrite ( ) ) ) { android.util.Log.w ( com.android.cts.verifier.bluetooth.BleClientService.TAG , "reliable write failed" ) ; } sleep ( 1000 ) ; mBluetoothGatt.abortReliableWrite ( ) ; }
public void testInvalidTrace ( ) { com.android.tools.perflib.vmtrace.CallStackReconstructor reconstructor = new com.android.tools.perflib.vmtrace.CallStackReconstructor ( ) ; try { reconstructor.addTraceAction ( 1 , TraceAction.METHOD_ENTER , 1 , 1 ) ; reconstructor.addTraceAction ( 2 , TraceAction.METHOD_EXIT , 1 , 1 ) ; fail ( "Runtime Exception should've been thrown by the previous statement" ) ; } catch ( java.lang.RuntimeException e ) { } }
public void removeListener ( org.eclipse.jface.viewers.ILabelProviderListener listener ) { }
private void deleteAvd ( ) { try { java.lang.String avdName = mSdkCommandLine.getParamName ( ) ; com.android.sdklib.internal.avd.AvdManager avdManager = com.android.sdklib.internal.avd.AvdManager.getInstance ( mSdkManager.getLocalSdk ( ) , mSdkLog ) ; com.android.sdklib.internal.avd.AvdInfo info = avdManager.getAvd ( avdName , false ) ; if ( info == null ) { errorAndExit ( "There is no Android Virtual Device named '%s'." , avdName ) ; return ; } avdManager.deleteAvd ( info , mSdkLog ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.unittest.ScriptC_fp_mad s = new com.android.rs.unittest.ScriptC_fp_mad ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; s.invoke_fp_mad_test ( 0 , 0 ) ; pRS.finish ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
public boolean hasWaiters ( com.google.common.util.concurrent.Monitor.Guard guard ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException ( ) ; } lock.lock ( ) ; try { return ( guard.waiterCount ) > 0 ; } finally { lock.unlock ( ) ; } }
protected void finalizeFuzzyImageUsingSharpImage ( ) { long startnow ; long endnow ; startnow = java.lang.System.nanoTime ( ) ; scriptC.forEach_FinalizeFuzzyImageUsingSharpImage ( buffers.inAllocation ) ; endnow = java.lang.System.nanoTime ( ) ; android.util.Log.d ( com.android.rs.refocus.d1new.RefocusFilterd1new.myTAG , ( ( "finalizeFuzzyImageUsingSharpImage: " + ( endnow - startnow ) ) + " ns" ) ) ; }
private void fillUi ( ) { if ( ( ( com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ) != null ) && ( mProject.isOpen ( ) ) ) { com.android.ide.eclipse.adt.internal.project.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState ( mProject ) ; com.android.sdklib.IAndroidTarget target = state.getTarget ( ) ; if ( target != null ) { mSelector.setSelection ( target ) ; } mIsLibrary.setSelection ( state.isLibrary ( ) ) ; mLibraryDependencies.setContent ( state ) ; } }
private void clearWeights ( com.android.ide.common.api.INode parentNode ) { java.lang.String sizeAttribute = ( isVertical ( parentNode ) ) ? com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT : com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH ; for ( com.android.ide.common.api.INode target : parentNode.getChildren ( ) ) { target.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WEIGHT , null ) ; java.lang.String size = target.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , sizeAttribute ) ; if ( ( size != null ) && ( size.startsWith ( "0" ) ) ) { target.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , sizeAttribute , com.android.ide.common.layout.LayoutConstants.VALUE_WRAP_CONTENT ) ; } } }
private static int linearForNE ( ) { int [ ] x = new int [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int result = 0 ; for ( int i = 0 ; i != 10 ; i ++ ) { result += x [ i ] ; } return result ; }
public java.nio.ByteBuffer put ( byte [ ] src , int srcOffset , int byteCount ) { checkNotFreed ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkPutBounds ( 1 , src.length , srcOffset , byteCount ) ; this . block.pokeByteArray ( ( ( offset ) + ( position ) ) , src , srcOffset , byteCount ) ; position += byteCount ; return this ; }
void handlePreDhcpSetup ( ) { if ( ! ( mBluetoothConnectionActive ) ) { mWifiNative.setBluetoothCoexistenceMode ( WifiNative.BLUETOOTH_COEXISTENCE_MODE_DISABLED ) ; } setSuspendOptimizationsNative ( com.android.server.wifi.WifiStateMachine.SUSPEND_DUE_TO_DHCP , false ) ; mWifiNative.setPowerSave ( false ) ; getWifiLinkLayerStats ( ) ; if ( ( mWifiP2pChannel ) != null ) { android.os.Message msg = new android.os.Message ( ) ; msg.what = com.android.server.wifi.p2p.WifiP2pServiceImpl.BLOCK_DISCOVERY ; msg.arg1 = com.android.server.wifi.p2p.WifiP2pServiceImpl.ENABLED ; msg.arg2 = android.net.dhcp.DhcpClient.CMD_PRE_DHCP_ACTION_COMPLETE ; msg.obj = this ; mWifiP2pChannel.sendMessage ( msg ) ; } }
public android.content.pm.UserInfo getCurrentUser ( ) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid ( ) ; if ( ( callingUid != 0 ) && ( callingUid != ( java.lang.Process.myUid ( ) ) ) ) { android.util.Slog.e ( com.android.server.am.ActivityManagerService.TAG , "Trying to get user from unauthorized app" ) ; return null ; } return android.app.AppGlobals.getPackageManager ( ) . getUser ( mCurrentUserId ) ; }
public void resolveDependencies ( @ com.android.annotations.NonNull com.android.build.gradle.internal.dependency.VariantDependencies variantDeps , @ com.android.annotations.Nullable com.android.build.gradle.internal.dependency.VariantDependencies testedVariantDeps ) { com.google.common.collect.Multimap < com.android.builder.dependency.LibraryDependency , com.android.build.gradle.internal.dependency.VariantDependencies > reverseMap = com.google.common.collect.ArrayListMultimap.create ( ) ; resolveDependencyForConfig ( variantDeps , testedVariantDeps , reverseMap ) ; processLibraries ( variantDeps.getLibraries ( ) , reverseMap ) ; }
void init ( ) { android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED ) ; filter.addAction ( BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT ) ; filter.addCategory ( ( ( ( android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY ) + "." ) + ( android.bluetooth.BluetoothAssignedNumbers.PLANTRONICS ) ) ) ; filter.addCategory ( ( ( ( android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY ) + "." ) + ( android.bluetooth.BluetoothAssignedNumbers.APPLE ) ) ) ; com.android.bluetooth.btservice.RemoteDevices.mAdapterService.registerReceiver ( mReceiver , filter ) ; }
public java.lang.String computeFullNameWithSplits ( @ com.android.annotations.NonNull java.lang.String splitName ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String flavorName = getFlavorName ( ) ; if ( ! ( flavorName.isEmpty ( ) ) ) { sb.append ( flavorName ) ; sb.append ( com.android.builder.internal.StringHelper.capitalize ( splitName ) ) ; } else { sb.append ( splitName ) ; } sb.append ( com.android.builder.internal.StringHelper.capitalize ( mBuildType.getName ( ) ) ) ; if ( mType.isForTesting ( ) ) { sb.append ( mType.getSuffix ( ) ) ; } return sb.toString ( ) ; }
public boolean handlePinMmi ( java.lang.String dialString ) { com.android.internal.telephony.gsm.GsmMmiCode mmi = com.android.internal.telephony.gsm.GsmMmiCode.newFromDialString ( dialString , this ) ; if ( ( mmi != null ) && ( mmi.isPinCommand ( ) ) ) { mPendingMMIs.add ( mmi ) ; mMmiRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , mmi , null ) ) ; mmi.processCode ( ) ; return true ; } return false ; }
private android.bluetooth.BluetoothGattCharacteristic getCharacteristic ( java.util.UUID serverUid , java.util.UUID characteristicUid ) { android.bluetooth.BluetoothGattCharacteristic characteristic = null ; android.bluetooth.BluetoothGattService service = getService ( serverUid ) ; if ( service != null ) { characteristic = service.getCharacteristic ( characteristicUid ) ; if ( characteristic == null ) { showMessage ( "Characteristic not found" ) ; } } return characteristic ; }
private static void unprovide ( java.lang.String type , java.lang.String algorithm ) { java.util.Set < java.lang.String > algorithms = libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.get ( type ) ; assertNotNull ( algorithms ) ; assertTrue ( algorithm , algorithms.remove ( algorithm.toUpperCase ( java.util.Locale.ROOT ) ) ) ; if ( algorithms.isEmpty ( ) ) { assertNotNull ( libcore.java.security.StandardNames.PROVIDER_ALGORITHMS.remove ( type ) ) ; } }
public java.util.Collection < V > get ( java.lang.Object key ) { java.util.Collection < V > collection = this . get ( ( ( K ) ( key ) ) ) ; return collection.isEmpty ( ) ? null : collection ; }
private void on_SitesTableViewer_checkStateChanged ( org.eclipse.jface.viewers.CheckStateChangedEvent event ) { java.lang.Object element = event.getElement ( ) ; if ( element instanceof com.android.sdklib.internal.repository.SdkSource ) { com.android.sdklib.internal.repository.SdkSource source = ( ( com.android.sdklib.internal.repository.SdkSource ) ( element ) ) ; boolean isChecked = event.getChecked ( ) ; if ( ( source.isEnabled ( ) ) != isChecked ) { setReturnValue ( true ) ; source.setEnabled ( isChecked ) ; mSources.notifyChangeListeners ( ) ; } } }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( android.bluetooth.BluetoothMap.VDBG ) android.bluetooth.BluetoothMap.log ( "getClient()" ) ; if ( ( mService ) != null ) { try { return mService.getClient ( ) ; } catch ( android.bluetooth.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothMap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothMap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothMap.DBG ) android.bluetooth.BluetoothMap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return null ; }
private static java.lang.String mapEAPMethodName ( com.android.server.wifi.anqp.eap.EAP.EAPMethodID eapMethodID ) { switch ( eapMethodID ) { case EAP_AKA : return "AKA" ; case EAP_AKAPrim : return "AKA'" ; case EAP_SIM : return "SIM" ; case EAP_TLS : return "TLS" ; case EAP_TTLS : return "TTLS" ; default : throw new java.lang.IllegalArgumentException ( ( "No mapping for " + eapMethodID ) ) ; } }
public boolean visitEnumConstant ( lombok.ast.EnumConstant node ) { com.android.tools.lint.client.api.JavaParser.ResolvedNode resolved = mContext.resolve ( node ) ; if ( resolved instanceof com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) { com.android.tools.lint.client.api.JavaParser.ResolvedMethod method = ( ( com.android.tools.lint.client.api.JavaParser.ResolvedMethod ) ( resolved ) ) ; checkCall ( node , method ) ; } return false ; }
public boolean isConnected ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "isConnected " + device ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return false ; return ( ( service.getState ( ) ) == ( android.bluetooth.BluetoothPbap.STATE_CONNECTED ) ) && ( service.getRemoteDevice ( ) . equals ( device ) ) ; }
public static com.android.jack.Version getVersion ( ) { if ( ( com.android.jack.Jack.version ) == null ) { java.io.InputStream is = com.android.jack.Jack.class . getClassLoader ( ) . getResourceAsStream ( com.android.jack.Jack.PROPERTIES_FILE ) ; if ( is != null ) { com.android.jack.Jack.version = new com.android.jack.Version ( is ) ; } else { com.android.jack.Jack.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to open Jack properties file " + ( com.android.jack.Jack.PROPERTIES_FILE ) ) ) ; throw new java.lang.AssertionError ( ) ; } } assert ( com.android.jack.Jack.version ) != null ; return com.android.jack.Jack.version ; }
public boolean isInactiveSync ( ) { boolean value ; if ( isCallerOnDifferentThread ( ) ) { android.os.Message response = sendMessageSynchronously ( com.android.internal.telephony.dataconnection.DcAsyncChannel.REQ_IS_INACTIVE ) ; if ( ( response != null ) && ( ( response.what ) == ( com.android.internal.telephony.dataconnection.DcAsyncChannel.RSP_IS_INACTIVE ) ) ) { value = rspIsInactive ( response ) ; } else { log ( ( "rspIsInactive error response=" + response ) ) ; value = false ; } } else { value = mDc.getIsInactive ( ) ; } return value ; }
private void deleteSelectedFilter ( ) { int selectedIndex = mFiltersTableViewer.getTable ( ) . getSelectionIndex ( ) ; if ( selectedIndex <= 0 ) { return ; } mLogCatFilters.remove ( selectedIndex ) ; mFiltersTableViewer.refresh ( ) ; mFiltersTableViewer.getTable ( ) . setSelection ( ( selectedIndex - 1 ) ) ; filterSelectionChanged ( ) ; saveFilterPreferences ( ) ; }
private com.intellij.openapi.editor.markup.GutterIconRenderer getPositionIconRenderer ( boolean isTopFrame ) { if ( ! isTopFrame ) { return null ; } if ( ( myActiveNonLineBreakpoint ) != null ) { return ( ( com.intellij.xdebugger.impl.XBreakpointBase < ? , ? , ? > ) ( myActiveNonLineBreakpoint ) ) . createGutterIconRenderer ( ) ; } if ( ( myCurrentExecutionStack ) != null ) { return myCurrentExecutionStack.getExecutionLineIconRenderer ( ) ; } return null ; }
public void test002f ( ) throws java.lang.Exception { java.io.File jackOutput ; jackOutput = runTest002 ( true , "keep-first" ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( jackOutput ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH , "Res1" ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH , "Res2" ) ; checkResourceContent ( zipFile , com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH , "Res3" ) ; }
private void unregisterAllAppEvents ( ) { for ( com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications ) { if ( app != null ) { app.unregisterForReady ( this ) ; com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords ( ) ; if ( ir != null ) { ir.unregisterForRecordsLoaded ( this ) ; ir.unregisterForRecordsEvents ( this ) ; } } } }
public int getMinApiLevel ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditor.getProject ( ) ) ; return target.getVersion ( ) . getApiLevel ( ) ; } return - 1 ; }
public void setSmscAddress ( java.lang.String address , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS , result ) ; rr.mParcel.writeString ( address ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " : " ) + address ) ) ; send ( rr ) ; }
void onExtrasChanged ( com.android.server.telecom.Call call , android.os.Bundle extras ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "onExtrasChanged" ) ) ) { try { logOutgoing ( "onExtrasChanged %s %s" , callId , extras ) ; mServiceInterface.onExtrasChanged ( callId , extras ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void update ( com.android.internal.telephony.CommandsInterface ci , com.android.internal.telephony.uicc.IccSlotStatus iss ) { log ( "slotStatus update" ) ; synchronized ( mLock ) { mCi = ci ; if ( ( iss.slotState ) == ( IccSlotStatus.SlotState.SLOTSTATE_INACTIVE ) ) { if ( mActive ) { mActive = false ; onRadioStateUnavailable ( ) ; } parseAtr ( iss.atr ) ; mCardState = iss.cardState ; mIccId = iss.iccid ; } else if ( ( ! ( mActive ) ) && ( ( iss.slotState ) == ( IccSlotStatus.SlotState.SLOTSTATE_ACTIVE ) ) ) { mActive = true ; } } }
public java.nio.ByteBuffer put ( int index , byte value ) { checkNotFreed ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkIndex ( index ) ; this . block.pokeByte ( ( ( offset ) + index ) , value ) ; return this ; }
private com.google.dexmaker.stock.Map < java.lang.Class < ? > , java.lang.Class < ? > > getGeneratedProxyClasses ( ) throws java.lang.Exception { com.google.dexmaker.stock.Field mapField = com.google.dexmaker.stock.ProxyBuilder.class . getDeclaredField ( "generatedProxyClasses" ) ; mapField.setAccessible ( true ) ; return ( ( com.google.dexmaker.stock.Map < java.lang.Class < ? > , java.lang.Class < ? > > ) ( mapField.get ( null ) ) ) ; }
public void requestFocusNodeHref ( final android.os.Message hrefMsg ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { requestFocusNodeHref ( hrefMsg ) ; } } ) ; return ; } mAwContents.requestFocusNodeHref ( hrefMsg ) ; }
protected void onPostExecute ( com.android.contacts.common.util.MaterialColorMapUtils.MaterialPalette palette ) { super . onPostExecute ( palette ) ; if ( mHasComputedThemeColor ) { return ; } if ( imageViewDrawable == ( mPhotoView.getDrawable ( ) ) ) { mHasComputedThemeColor = true ; setThemeColor ( palette ) ; onAggregationSuggestionChange ( ) ; } }
public void testCannotAccessScanResults_NoCoarseLocationPermission ( ) throws java.lang.Exception { boolean output = true ; mThrowSecurityException = false ; mLocationModeSetting = Settings.Secure.LOCATION_MODE_HIGH_ACCURACY ; setupTestCase ( ) ; com.android.server.wifi.util.WifiPermissionsUtil codeUnderTest = new com.android.server.wifi.util.WifiPermissionsUtil ( mMockPermissionsWrapper , mMockContext , mMockWifiSettingsStore , mMockUserManager , mNetworkScoreManager ) ; try { output = codeUnderTest.canAccessScanResults ( com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME , mUid , mTargetVersion ) ; } catch ( java.lang.SecurityException e ) { throw e ; } org.junit.Assert.assertEquals ( output , false ) ; }
private com.android.sdklib.repository.local.LocalPlatformToolPkgInfo scanPlatformTools ( java.io.File ptFolder ) { java.util.Properties props = parseProperties ( new java.io.File ( ptFolder , com.android.SdkConstants.FN_SOURCE_PROP ) ) ; com.android.sdklib.repository.FullRevision rev = com.android.sdklib.internal.repository.packages.PackageParserUtils.getPropertyFull ( props , PkgProps.PKG_REVISION ) ; if ( rev == null ) { return null ; } com.android.sdklib.repository.local.LocalPlatformToolPkgInfo info = new com.android.sdklib.repository.local.LocalPlatformToolPkgInfo ( this , ptFolder , props , rev ) ; return info ; }
public void dispose ( ) { super . dispose ( ) ; if ( ( image ) != null ) { image.dispose ( ) ; } crosshairColor.dispose ( ) ; transform.dispose ( ) ; if ( ( grid ) != null ) { grid.dispose ( ) ; } }
private void addProjectInfo ( java.util.Map < java.lang.String , java.lang.Object > parameters ) { parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_PACKAGE_NAME , mValues.packageName ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_APP_TITLE , mValues.applicationName ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API , mValues.minSdk ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_MIN_API_LEVEL , mValues.minSdkLevel ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_TARGET_API , 15 ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_BUILD_API , mValues.target.getVersion ( ) . getApiLevel ( ) ) ; parameters.put ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.ATTR_COPY_ICONS , ( ! ( mValues.createIcon ) ) ) ; parameters.putAll ( mValues.parameters ) ; }
public boolean isDataConnectivityPossible ( ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.isDataConnectivityPossible ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#isDataConnectivityPossible" , e ) ; } return false ; }
public static java.lang.String toBinaryString ( long i ) { return java.lang.Long.toUnsignedString ( i , 1 ) ; }
public com.android.tools.perflib.heap.Heap getHeap ( java.lang.String name ) { for ( com.android.tools.perflib.heap.Heap heap : mHeaps.values ( ) ) { if ( heap.mName.equals ( name ) ) { return heap ; } } return null ; }
public final void testJoin ( ) { assertEquals ( "foo" , com.android.ide.common.layout.BaseView.join ( '|' , java.util.Arrays.asList ( "foo" ) ) ) ; assertEquals ( "" , com.android.ide.common.layout.BaseView.join ( '|' , java.util.Collections.< java.lang.String > emptyList ( ) ) ) ; assertEquals ( "foo,bar" , com.android.ide.common.layout.BaseView.join ( ',' , java.util.Arrays.asList ( "foo" , "bar" ) ) ) ; assertEquals ( "foo|bar" , com.android.ide.common.layout.BaseView.join ( '|' , java.util.Arrays.asList ( "foo" , "bar" ) ) ) ; }
public void testElementReplacement ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String higherPriority = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" tools:node=\"replace\"" ) + " android:exported=\"true\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String lowerPriority = "" + ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\">\n" ) + " android:screenOrientation=\"landscape\">\n" ) + " <action android:label=\"@string/foo\"/>\n" ) + " </activity>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "higherPriority" ) , higherPriority ) ; com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "lowerPriority" ) , lowerPriority ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > result = refDocument.merge ( otherDocument , mergingReportBuilder ) ; assertTrue ( result.isPresent ( ) ) ; com.android.manifmerger.XmlDocument resultDocument = result.get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = resultDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; java.io.ByteArrayOutputStream byteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; resultDocument.write ( byteArrayOutputStream ) ; java.util.logging.Logger.getAnonymousLogger ( ) . info ( byteArrayOutputStream.toString ( ) ) ; assertFalse ( refDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) . get ( ) . compareTo ( activityOne.get ( ) ) . isPresent ( ) ) ; }
private static void edgeSplitMoveExceptionsAndResults ( com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock block : cfg.getBlocksDepthFirst ( true ) ) { if ( ( block == ( cfg.getEntryBlock ( ) ) ) || ( block == ( cfg.getExitBlock ( ) ) ) ) { continue ; } if ( ( ( ! ( block instanceof com.android.jack.ir.ast.cfg.JExitBasicBlock ) ) && ( ( com.android.jack.transformations.ssa.SsaUtil.getNumPredecessor ( block ) ) > 1 ) ) && ( block instanceof com.android.jack.ir.ast.cfg.JCatchBasicBlock ) ) { } } }
private com.android.server.audio.AudioService.ScoClient getScoClient ( android.os.IBinder cb , boolean create ) { synchronized ( mScoClients ) { com.android.server.audio.AudioService.ScoClient client = null ; int size = mScoClients.size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { client = mScoClients.get ( i ) ; if ( ( client.getBinder ( ) ) == cb ) return client ; } if ( create ) { client = new com.android.server.audio.AudioService.ScoClient ( cb ) ; mScoClients.add ( client ) ; } return client ; } }
private void updateAll ( ) { if ( ( mTimeShiftManager.isAvailable ( ) ) && ( ! ( mTvView.isScreenBlocked ( ) ) ) ) { setEnabled ( true ) ; initializeTimeline ( ) ; mBackgroundView.setEnabled ( true ) ; } else { setEnabled ( false ) ; mBackgroundView.setEnabled ( false ) ; } updateControls ( ) ; }
public void testEmptyXml ( ) throws java.lang.Exception { java.lang.String document = "<?xml version=\"1.0\"?>" ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getValidator ( SdkRepository.NS_LATEST_VERSION , handler ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "Premature end of file.*" , e.getMessage ( ) ) ; return ; } handler.verify ( ) ; fail ( ) ; }
private void _push ( com.android.builder.tasks.WorkQueue.QueueTask < T > task ) throws java.lang.InterruptedException { mPendingJobs.put ( task ) ; if ( ( mWorkThreads.isEmpty ( ) ) || ( ( ( mPendingJobs.size ( ) ) / ( mWorkThreads.size ( ) ) ) > ( mGrowthTriggerRation ) ) ) { addWorkforce ( ) ; } }
public void run ( ) { mTextView.setText ( "" , BufferType.EDITABLE ) ; mTextView.requestFocus ( ) ; android.text.Selection.setSelection ( ( ( android.text.Editable ) ( mTextView.getText ( ) ) ) , 0 , 0 ) ; mTextView.setKeyListener ( qwertyKeyListener ) ; }
public com.google.gct.testing.CloudTestConfigurationImpl copy ( java.lang.String prefix ) { com.google.gct.testing.CloudTestConfigurationImpl newConfiguration = ( prefix == null ) ? new com.google.gct.testing.CloudTestConfigurationImpl ( id , name , icon , facet ) : new com.google.gct.testing.CloudTestConfigurationImpl ( ( prefix + ( name ) ) , icon , facet ) ; newConfiguration.deviceDimension.enableAll ( deviceDimension.getEnabledTypes ( ) ) ; newConfiguration.apiDimension.enableAll ( apiDimension.getEnabledTypes ( ) ) ; newConfiguration.languageDimension.enableAll ( languageDimension.getEnabledTypes ( ) ) ; newConfiguration.orientationDimension.enableAll ( orientationDimension.getEnabledTypes ( ) ) ; return newConfiguration ; }
public boolean hasWaiters ( com.google.common.util.concurrent.Monitor.Guard guard ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException ( ) ; } lock.lock ( ) ; try { return ( guard.waiterCount ) > 0 ; } finally { lock.unlock ( ) ; } }
public void setBytes ( byte [ ] keyBytes , int keyOffset ) { bytes = keyBytes ; offset = keyOffset ; for ( length = 0 ; ( keyBytes [ ( keyOffset + ( length ) ) ] ) != 0 ; ++ ( length ) ) { } s = null ; }
public boolean enableNetworkWithoutConnect ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "enableNetworkWithoutConnect nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( ( ( "ENABLE_NETWORK " + netId ) + " " ) + "no-connect" ) ) ; }
protected void invoke ( int slot ) { mRS.nScriptInvoke ( getID ( mRS ) , slot ) ; }
private static boolean isLocaleReference ( @ com.android.annotations.Nullable com.android.tools.lint.client.api.JavaParser.TypeDescriptor reference ) { return ( reference != null ) && ( com.android.tools.lint.checks.StringFormatDetector.isLocaleReference ( reference.getName ( ) ) ) ; }
public static void computeFract ( android.renderscript.cts.TestFract.ArgumentsFloatFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 12 ; args.outFloor = ( ( float ) ( java.lang.StrictMath.floor ( args.inV ) ) ) ; args.out = ( ( float ) ( java.lang.StrictMath.min ( ( ( args.inV ) - ( args.outFloor ) ) , 0.99999994F ) ) ) ; }
public boolean canHandle ( java.lang.String path , java.lang.String mimeType ) { if ( ( ( null == path ) || ( path.equals ( "" ) ) ) && ( ( null == mimeType ) || ( mimeType.equals ( "" ) ) ) ) { throw new java.lang.IllegalArgumentException ( "Path or the mimetype should be non null" ) ; } else if ( ( getState ( ) ) == ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _canHandle ( mUniqueId , path , mimeType ) ; }
public static long IntNonmatCond_LongVarVar ( int a , int b , long x , long y ) { return a > b ? x : y ; }
public void onReliableWriteCompleted ( android.bluetooth.BluetoothGatt gatt , int status ) { if ( com.android.cts.verifier.bluetooth.BleClientService.DEBUG ) android.util.Log.d ( com.android.cts.verifier.bluetooth.BleClientService.TAG , ( "onReliableWriteComplete: " + status ) ) ; if ( status == ( android.bluetooth.BluetoothGatt.GATT_SUCCESS ) ) { notifyReliableWriteCompleted ( ) ; } else { notifyError ( ( "Failed to complete reliable write: " + status ) ) ; } sleep ( 1000 ) ; mBluetoothGatt.disconnect ( ) ; }
public final void testPkgTypeDoc ( ) { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_DOCS ; assertTrue ( p.hasMajorRevision ( ) ) ; assertFalse ( p.hasFullRevision ( ) ) ; assertTrue ( p.hasAndroidVersion ( ) ) ; assertFalse ( p.hasPath ( ) ) ; assertFalse ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
private java.lang.invoke.MethodHandle findAccessor ( java.lang.Class < ? > refc , java.lang.String name , java.lang.Class < ? > type , int kind ) throws java.lang.IllegalAccessException , java.lang.NoSuchFieldException { final java.lang.reflect.Field field = refc.getDeclaredField ( name ) ; final java.lang.Class < ? > fieldType = field.getType ( ) ; if ( fieldType != type ) { throw new java.lang.NoSuchFieldException ( ( ( ( "Field has wrong type: " + fieldType ) + " != " ) + type ) ) ; } return findAccessor ( field , refc , type , kind , true ) ; }
public void copyFrom ( int [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
public final java.nio.MappedByteBuffer force ( ) { if ( ( mapMode ) == ( java.nio.channels.FileChannel.MapMode.READ_WRITE ) ) { try { Libcore.os.msync ( block.toInt ( ) , block.getSize ( ) , java.nio.MS_SYNC ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw new java.lang.AssertionError ( errnoException ) ; } } return this ; }
private int getParameterSize ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { int paramSize = 0 ; if ( ! ( method.isStatic ( ) ) ) { paramSize += 1 ; } for ( com.android.jack.ir.ast.JParameter param : method.getParams ( ) ) { if ( ( param.getType ( ) . equals ( JPrimitiveTypeEnum.LONG.getType ( ) ) ) || ( param.getType ( ) . equals ( JPrimitiveTypeEnum.DOUBLE.getType ( ) ) ) ) { paramSize += 2 ; } else { paramSize += 1 ; } } return paramSize ; }
private static void tryToReadFromAllIn ( java.io.File dir ) throws java.io.IOException { assertTrue ( dir.isDirectory ( ) ) ; if ( android.permission.cts.FileSystemPermissionTest.isSymbolicLink ( dir ) ) { return ; } java.io.File [ ] files = dir.listFiles ( ) ; if ( files != null ) { for ( java.io.File f : files ) { if ( f.isDirectory ( ) ) { android.permission.cts.FileSystemPermissionTest.tryToReadFromAllIn ( f ) ; } else { android.permission.cts.FileSystemPermissionTest.tryFileRead ( f ) ; } } } }
public static void setUpClass ( ) { com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.class . getClassLoader ( ) . setDefaultAssertionStatus ( true ) ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.BOOTCLASSPATH = new java.io.File [ ] { com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar" ) } ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.CLASSPATH = new java.io.File [ ] { com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/bouncycastle_intermediates/classes.jar" ) , com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/core-junit_intermediates/classes.jar" ) , com.android.jack.TestTools.getFromAndroidTree ( "out/target/common/obj/JAVA_LIBRARIES/ext_intermediates/classes.jar" ) } ; com.android.jack.compile.androidtree.frameworks.FrameworksBaseCompilationTest.SOURCELIST = com.android.jack.TestTools.getTargetLibSourcelist ( "framework" ) ; }
public void testCompile ( ) throws java.lang.Exception { com.android.jack.TestTools.runCompilation ( com.android.jack.TestTools.buildCommandLineArgs ( com.android.jack.TestTools.getJackTestsWithJackFolder ( "comparison/test001" ) ) ) ; }
public static long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , android.util.MutableLong inOffset , long byteCount ) throws android.system.ErrnoException { android.util.MutableLong internalInOffset = new android.util.MutableLong ( inOffset.value ) ; try { return Libcore.os.sendfile ( outFd , inFd , internalInOffset , byteCount ) ; } finally { inOffset.value = internalInOffset.value ; } }
public boolean onSurfaceTextureDestroyed ( android.graphics.SurfaceTexture destroyedSurfaceTexture ) { com.android.dialer.common.LogUtil.i ( "SurfaceTextureListener.onSurfaceTextureDestroyed" , ( ( ( "destroyedSurfaceTexture: " + destroyedSurfaceTexture ) + " " ) + ( this . toString ( ) ) ) ) ; if ( ( delegate ) != null ) { delegate.onSurfaceDestroyed ( this ) ; } else { com.android.dialer.common.LogUtil.e ( "SurfaceTextureListener.onSurfaceTextureDestroyed" , "delegate is null" ) ; } if ( isDoneWithSurface ) { onSurfaceReleased ( ) ; if ( ( savedSurface ) != null ) { savedSurface.release ( ) ; savedSurface = null ; } } return isDoneWithSurface ; }
public void addExistingConnection ( java.lang.String callId , android.telecom.ParcelableConnection connection ) { android.telecom.Log.startSession ( "CSW.aEC" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "addExistingConnection %s %s" , callId , connection ) ; com.android.server.telecom.Call existingCall = mCallsManager.createCallForExistingConnection ( callId , connection ) ; mCallIdMapper.addCall ( existingCall , callId ) ; existingCall.setConnectionService ( this ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void enter ( ) { android.util.Log.d ( com.android.bluetooth.pbapclient.PbapClientStateMachine.TAG , ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; onConnectionStateChanged ( mCurrentDevice , mMostRecentState , BluetoothProfile.STATE_CONNECTED ) ; mMostRecentState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; mConnectionHandler.obtainMessage ( PbapClientConnectionHandler.MSG_DOWNLOAD ) . sendToTarget ( ) ; }
public com.android.sched.vfs.VPath prependPath ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { if ( ! ( this . equals ( com.android.sched.vfs.VPath.ROOT ) ) ) { pathFragments.add ( 0 , new com.android.sched.vfs.VPath.VPathFragment ( java.lang.String.valueOf ( com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) , com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) ) ; } pathFragments.addAll ( 0 , path.getPathFragments ( ) ) ; return this ; }
public void canBeTetheredAsUsb ( ) throws java.lang.Exception { initStateMachine ( ConnectivityManager.TETHERING_USB ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_REQUESTED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder ( mTetherHelper , mNMService ) ; inOrder.verify ( mNMService ) . getInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mNMService ) . setInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mInterfaceConfiguration ) ; inOrder.verify ( mNMService ) . tetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mTetherHelper ) . notifyInterfaceStateChange ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
private void controlCdmaOptions ( boolean enable ) { android.preference.PreferenceScreen prefSet = getPreferenceScreen ( ) ; if ( prefSet == null ) { return ; } if ( enable && ( ( mCdmaOptions ) == null ) ) { mCdmaOptions = new com.android.phone.CdmaOptions ( this , prefSet , mPhone ) ; } com.android.phone.CdmaSystemSelectListPreference systemSelect = ( ( com.android.phone.CdmaSystemSelectListPreference ) ( prefSet.findPreference ( com.android.phone.MobileNetworkSettings.MobileNetworkFragment.BUTTON_CDMA_SYSTEM_SELECT_KEY ) ) ) ; if ( systemSelect != null ) { systemSelect.setEnabled ( enable ) ; } }
public java.util.Set < ? extends javax.lang.model.element.Element > process ( com.google.common.collect.SetMultimap < java.lang.Class < ? extends java.lang.annotation.Annotation > , javax.lang.model.element.Element > elementsByAnnotation ) { for ( javax.lang.model.element.Element element : elementsByAnnotation.get ( com.android.dialer.inject.DialerRootComponent.class ) ) { generateRootComponent ( com.google.auto.common.MoreElements.asType ( element ) ) ; } return java.util.Collections.emptySet ( ) ; }
public java.util.List < java.lang.String > getEcjArguments ( ) { if ( ( inputSources ) == null ) { return ecjExtraArguments ; } java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ecjExtraArguments ) ; for ( java.io.File input : inputSources ) { list.add ( input.getPath ( ) ) ; } return list ; }
public void setupDataCall ( int accessNetworkType , android.telephony.data.DataProfile dataProfile , boolean isRoaming , boolean allowRoaming , boolean isHandover , android.net.LinkProperties linkProperties , android.telephony.data.IDataServiceCallback callback ) { mHandler.obtainMessage ( android.telephony.data.DataService.DATA_SERVICE_REQUEST_SETUP_DATA_CALL , mSlotId , 0 , new android.telephony.data.DataService.SetupDataCallRequest ( accessNetworkType , dataProfile , isRoaming , allowRoaming , isHandover , linkProperties , callback ) ) . sendToTarget ( ) ; }
private void sendImsFeatureCreatedCallback ( int slot , int feature ) { synchronized ( mLock ) { for ( java.util.Iterator < com.android.ims.internal.IImsServiceFeatureCallback > i = mImsStatusCallbacks.iterator ( ) ; i.hasNext ( ) ; ) { com.android.ims.internal.IImsServiceFeatureCallback callbacks = i.next ( ) ; try { callbacks.imsFeatureCreated ( slot , feature ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( com.android.internal.telephony.ims.ImsServiceController.LOG_TAG , ( ( "sendImsFeatureCreatedCallback: Binder died, removing " + "callback. Exception:" ) + ( e.getMessage ( ) ) ) ) ; i.remove ( ) ; } } } }
public void testSetValues003_Char ( ) { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( "breakpointChar" , StackTrace002Debuggee.CHAR_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointChar" ) ; methodInfo.addVariable ( "param" , new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.CHAR_PARAM_VALUE ) , new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.CHAR_PARAM_VALUE_TO_SET ) ) ; runStackFrameTest ( tester ) ; }
private void transformAnnotation ( com.android.dx.io.EncodedValueReader reader ) { int fieldCount = reader.readAnnotation ( ) ; com.android.dx.util.Leb128Utils.writeUnsignedLeb128 ( out , adjustType ( reader.getAnnotationType ( ) ) ) ; com.android.dx.util.Leb128Utils.writeUnsignedLeb128 ( out , fieldCount ) ; for ( int i = 0 ; i < fieldCount ; i ++ ) { com.android.dx.util.Leb128Utils.writeUnsignedLeb128 ( out , adjustString ( reader.readAnnotationName ( ) ) ) ; transform ( reader ) ; } }
public void testSetupDriverForClientModeError ( ) { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; android.net.wifi.IWificond wificond = org.mockito.Mockito.mock ( android.net.wifi.IWificond.class ) ; org.mockito.Mockito.when ( wificondControl.setupDriverForClientMode ( ) ) . thenReturn ( null ) ; mWifiNative.setWificondControl ( wificondControl ) ; android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupForClientMode ( ) ; org.junit.Assert.assertEquals ( null , returnedClientInterface ) ; org.mockito.Mockito.verify ( mWifiNative ) . startHal ( org.mockito.Mockito.eq ( true ) ) ; org.mockito.Mockito.verify ( wificondControl ) . setupDriverForClientMode ( ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( R.drawable.icon1 , ( " " + ( ( ( ( "tick tock tick tock\n\nSometimes notifications can " + "be really long and wrap to more than one line.\n" ) + "Sometimes." ) + "Ohandwhathappensifwehaveonereallylongstringarewesure" ) + "thatwesegmentitcorrectly?\n" ) ) , java.lang.System.currentTimeMillis ( ) ) ; n.setLatestEventInfo ( this , "Still Persistent #1" , "This is still a notification!!!" , makeIntent ( ) ) ; mNM.notify ( 1 , n ) ; }
public void callSessionResumeReceived ( com.android.ims.internal.ImsCallSession session , com.android.ims.ImsCallProfile profile ) { logi ( ( ( ( "callSessionResumeReceived :: session=" + session ) + "profile=" ) + profile ) ) ; if ( isTransientConferenceSession ( session ) ) { logi ( ( "callSessionResumeReceived :: not supported for transient conference session=" + session ) ) ; return ; } com.android.ims.ImsCall.Listener listener ; synchronized ( this ) { listener = mListener ; setCallProfile ( profile ) ; } if ( listener != null ) { try { listener.onCallResumeReceived ( this ) ; } catch ( java.lang.Throwable t ) { loge ( "callSessionResumeReceived :: " , t ) ; } } }
public boolean setP2pGroupIdle ( java.lang.String iface , int time ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setGroupIdle ( iface , time ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " SET p2p_group_idle " ) + time ) ) ; } } }
public void testIsInManagedCallFail ( ) throws java.lang.Exception { org.mockito.Mockito.doThrow ( new java.lang.SecurityException ( ) ) . when ( mContext ) . enforceCallingOrSelfPermission ( org.mockito.Matchers.anyString ( ) , org.mockito.Matchers.any ( ) ) ; try { mTSIBinder.isInManagedCall ( "blah" ) ; fail ( ) ; } catch ( java.lang.SecurityException e ) { } org.mockito.Mockito.verify ( mFakeCallsManager , org.mockito.Mockito.never ( ) ) . hasOngoingCalls ( ) ; }
public boolean deleteMessageFromIcc ( int messageIndex ) { boolean success = false ; byte [ ] pdu = new byte [ ( com.android.internal.telephony.IccConstants.SMS_RECORD_LENGTH ) - 1 ] ; java.util.Arrays.fill ( pdu , ( ( byte ) ( 255 ) ) ) ; try { com.android.internal.telephony.ISms iccISms = ISms.Stub.asInterface ( android.os.ServiceManager.getService ( "isms" ) ) ; if ( iccISms != null ) { success = iccISms.updateMessageOnIccEf ( messageIndex , android.telephony.SmsManager.STATUS_ON_ICC_FREE , pdu ) ; } } catch ( android.os.RemoteException ex ) { } return success ; }
public void dispose ( ) { mRootWrapper.setRoot ( null ) ; getSite ( ) . getPage ( ) . removeSelectionListener ( this ) ; super . dispose ( ) ; }
private void updateLibraries ( ) { java.util.ArrayList < org.eclipse.core.resources.IProject > list = new java.util.ArrayList < org.eclipse.core.resources.IProject > ( ) ; synchronized ( mLibraries ) { for ( com.android.ide.eclipse.adt.internal.project.ProjectState.LibraryState state : mLibraries ) { if ( ( state.getProjectState ( ) ) != null ) { list.add ( state.getProjectState ( ) . getProject ( ) ) ; } } } mLibraryProjects = list.toArray ( new org.eclipse.core.resources.IProject [ list.size ( ) ] ) ; }
public void setEapMethod ( int eapMethod ) { switch ( eapMethod ) { case android.net.wifi.WifiEnterpriseConfig.Eap.TLS : case android.net.wifi.WifiEnterpriseConfig.Eap.UNAUTH_TLS : setPhase2Method ( android.net.wifi.WifiEnterpriseConfig.Phase2.NONE ) ; case android.net.wifi.WifiEnterpriseConfig.Eap.PEAP : case android.net.wifi.WifiEnterpriseConfig.Eap.PWD : case android.net.wifi.WifiEnterpriseConfig.Eap.TTLS : case android.net.wifi.WifiEnterpriseConfig.Eap.SIM : case android.net.wifi.WifiEnterpriseConfig.Eap.AKA : case android.net.wifi.WifiEnterpriseConfig.Eap.AKA_PRIME : mEapMethod = eapMethod ; mFields.put ( android.net.wifi.WifiEnterpriseConfig.OPP_KEY_CACHING , "1" ) ; break ; default : throw new java.lang.IllegalArgumentException ( "Unknown EAP method" ) ; } }
public void testAesCbcHmacSha256Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.getKey ( 256 ) ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , android.net.cts.IpSecManagerTest.getKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public void testLoadSample_1 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = getTestResource ( "/com/android/sdklib/testdata/addons_list_sample_1.xml" ) ; int version = mFetcher._getXmlSchemaVersion ( xmlStream ) ; assertEquals ( 1 , version ) ; java.lang.Boolean [ ] validatorFound = new java.lang.Boolean [ ] { java.lang.Boolean.FALSE } ; java.lang.String [ ] validationError = new java.lang.String [ ] { null } ; java.lang.String url = "not-a-valid-url://addons_list.xml" ; java.lang.String uri = mFetcher._validateXml ( xmlStream , url , version , validationError , validatorFound ) ; assertEquals ( java.lang.Boolean.TRUE , validatorFound [ 0 ] ) ; assertEquals ( null , validationError [ 0 ] ) ; assertEquals ( com.android.sdklib.repository.SdkAddonsListConstants.getSchemaUri ( 1 ) , uri ) ; com.android.sdklib.internal.repository.MockMonitor monitor = new com.android.sdklib.internal.repository.MockMonitor ( ) ; org.w3c.dom.Document doc = mFetcher._getDocument ( xmlStream , monitor ) ; assertNotNull ( doc ) ; com.android.sdklib.internal.repository.AddonsListFetcher.Site [ ] result = mFetcher._parseAddonsList ( doc , uri , monitor ) ; assertEquals ( "" , monitor.getCapturedDescriptions ( ) ) ; assertEquals ( "" , monitor.getCapturedLog ( ) ) ; assertEquals ( "" , monitor.getCapturedErrorLog ( ) ) ; assertEquals ( "" , monitor.getCapturedVerboseLog ( ) ) ; assertEquals ( 3 , result.length ) ; assertEquals ( "My Example Add-ons." , result [ 0 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/my_addons.xml" , result [ 0 ] . getUrl ( ) ) ; assertEquals ( "ありがとうございます。" , result [ 1 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.co.jp/addons.xml" , result [ 1 ] . getUrl ( ) ) ; assertEquals ( "Example of directory URL." , result [ 2 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/" , result [ 2 ] . getUrl ( ) ) ; }
private void addRemoteExtra ( com.android.sdklib.repository.NoPreviewRevision revision , java.lang.String vendor , java.lang.String path ) { com.android.sdklib.repository.descriptors.IPkgDesc d = com.android.sdklib.repository.descriptors.PkgDesc.newExtra ( vendor , path , null , revision ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public void test_SSL_check_private_key_key_then_cert ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; long s = org.conscrypt.NativeCrypto.SSL_new ( c ) ; org.conscrypt.NativeCrypto.SSL_use_PrivateKey ( s , org.conscrypt.NativeCryptoTest.getServerPrivateKey ( ) ) ; try { org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.conscrypt.NativeCrypto.SSL_use_certificate ( s , org.conscrypt.NativeCryptoTest.getServerCertificates ( ) ) ; org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; org.conscrypt.NativeCrypto.SSL_free ( s ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; }
public static void writeUint24 ( int i , byte [ ] buf , int offset ) { buf [ offset ] = ( ( byte ) ( i > > 16 ) ) ; buf [ ( offset + 1 ) ] = ( ( byte ) ( i > > 8 ) ) ; buf [ ( offset + 2 ) ] = ( ( byte ) ( i ) ) ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.tv.tuner.TunerInputController.MSG_ENABLE_INPUT_SERVICE : android.content.Context context = ( ( android.content.Context ) ( msg.obj ) ) ; if ( ( mDvbDeviceAccessor ) == null ) { mDvbDeviceAccessor = new com.android.tv.tuner.DvbDeviceAccessor ( context ) ; } enableTunerTvInputService ( context , mDvbDeviceAccessor.isDvbDeviceAvailable ( ) ) ; break ; } }
public void testBuildProgram ( ) { com.android.tv.data.Channel c = new com.android.tv.data.Channel.Builder ( ) . build ( ) ; com.android.tv.data.Program p = new com.android.tv.data.Program.Builder ( ) . build ( ) ; com.android.tv.dvr.ScheduledRecording actual = com.android.tv.dvr.ScheduledRecording.builder ( com.android.tv.dvr.ScheduledRecordingTest.INPUT_ID , p ) . setChannelId ( c.getId ( ) ) . build ( ) ; assertEquals ( "type" , ScheduledRecording.TYPE_PROGRAM , actual.getType ( ) ) ; }
private com.android.ide.common.resources.ResourceFolder _addProjectResourceFolder ( com.android.ide.common.resources.ResourceRepository resources , com.android.ide.common.resources.configuration.FolderConfiguration config , org.eclipse.core.resources.IFolder folder ) throws java.lang.Exception { java.lang.reflect.Method addMethod = com.android.ide.common.resources.ResourceRepository.class . getDeclaredMethod ( "add" , com.android.resources.ResourceFolderType.class , com.android.ide.common.resources.configuration.FolderConfiguration.class , com.android.io.IAbstractFolder.class ) ; addMethod.setAccessible ( true ) ; com.android.ide.common.resources.ResourceFolder resFolder = ( ( com.android.ide.common.resources.ResourceFolder ) ( addMethod.invoke ( resources , ResourceFolderType.LAYOUT , config , new com.android.ide.eclipse.adt.io.IFolderWrapper ( folder ) ) ) ) ; return resFolder ; }
public int writeBytesTo ( byte [ ] dest , int offset , int maxLength ) { byte [ ] hash = asBytes ( ) ; maxLength = com.google.common.primitives.Ints.min ( maxLength , hash.length ) ; com.google.common.base.Preconditions.checkPositionIndexes ( offset , ( offset + maxLength ) , dest.length ) ; java.lang.System.arraycopy ( hash , 0 , dest , offset , maxLength ) ; return maxLength ; }
public boolean isTypeBarring ( ) { return ( ( ( ( ( ( ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_BAOC ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_BAOIC ) ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_BAOIC_EXC_HOME ) ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_BAIC ) ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_BAIC_ROAMING ) ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_ALL_BARRING ) ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_OUTGOING_BARRING ) ) ) || ( ( serviceType ) == ( com.android.ims.ImsSsData.SS_INCOMING_BARRING ) ) ; }
public static java.util.List < com.android.jack.test.runner.RuntimeRunner > listRuntimeTestRunners ( @ javax.annotation.CheckForNull java.util.Properties properties ) throws com.android.jack.test.runner.RuntimeRunnerException , java.lang.IllegalArgumentException , java.lang.SecurityException { if ( properties != null ) { java.lang.String rtAsString = properties.getProperty ( com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LIST_KEY ) ; if ( rtAsString != null ) { return com.android.jack.test.toolchain.AbstractTestTools.parseRuntimeList ( rtAsString ) ; } } return com.android.jack.test.toolchain.AbstractTestTools.runtimes ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { toggle.getCallback ( ) . action ( toggle , getSelectedNodes ( ) , toggle.getId ( ) , button.getSelection ( ) ) ; updateSelection ( ) ; }
synchronized void setConnected ( ) { status = java.nio.SocketChannelImpl.SOCKET_STATUS_CONNECTED ; }
public void testPutCharBuffer ( ) { java.nio.CharBuffer other = java.nio.CharBuffer.allocate ( 1 ) ; try { buf.put ( other ) ; fail ( "Should throw ReadOnlyBufferException" ) ; } catch ( java.nio.ReadOnlyBufferException e ) { } try { buf.put ( ( ( java.nio.CharBuffer ) ( null ) ) ) ; fail ( "Should throw ReadOnlyBufferException" ) ; } catch ( java.nio.ReadOnlyBufferException e ) { } try { buf.put ( buf ) ; fail ( "Should throw ReadOnlyBufferException" ) ; } catch ( java.nio.ReadOnlyBufferException e ) { } }
boolean disconnect ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; int connectionState = mStateMachine.getConnectionState ( device ) ; if ( ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) && ( connectionState != ( android.bluetooth.BluetoothProfile.STATE_CONNECTING ) ) ) { return false ; } mStateMachine.sendMessage ( HeadsetStateMachine.DISCONNECT , device ) ; return true ; }
public org.eclipse.swt.graphics.Image getPageImage ( ) { return com.android.ide.eclipse.adt.internal.editors.IconFactory.getInstance ( ) . getIcon ( "editor_page_design" ) ; }
public void dismissKeyguardLw ( ) { if ( ! ( mKeyguardMediator.isSecure ( ) ) ) { if ( mKeyguardMediator.isShowing ( ) ) { mHandler.post ( new java.lang.Runnable ( ) { public void run ( ) { mKeyguardMediator.keyguardDone ( false , true ) ; } } ) ; } } }
boolean accept ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.PlatformPackage ) { com.android.sdklib.internal.repository.packages.PlatformPackage pp = ( ( com.android.sdklib.internal.repository.packages.PlatformPackage ) ( pkg ) ) ; com.android.sdklib.AndroidVersion v = pp.getVersion ( ) ; return ( ! ( v.isPreview ( ) ) ) && ( ( v.getApiLevel ( ) ) == ( mApiLevel ) ) ; } return false ; }
com.google.common.collect.ImmutableCollection < V > createValues ( ) { return new com.google.common.collect.ImmutableMapValues < K , V > ( ) { @ java.lang.Override com.google.common.collect.ImmutableMap < K , V > map ( ) { return com.google.common.collect.ImmutableMap.this ; } } ; }
private boolean removeTaskByIdLocked ( int taskId , int flags ) { com.android.server.am.TaskRecord tr = recentTaskForIdLocked ( taskId ) ; if ( tr != null ) { tr.removeTaskActivitiesLocked ( ) ; cleanUpRemovedTaskLocked ( tr , flags ) ; if ( tr.isPersistable ) { notifyTaskPersisterLocked ( null , true ) ; } return true ; } return false ; }
private void updateTtsSpans ( ) { for ( java.lang.Object o : mDigits.getText ( ) . getSpans ( 0 , mDigits.getText ( ) . length ( ) , android.text.style.TtsSpan.class ) ) { mDigits.getText ( ) . removeSpan ( o ) ; } android.telephony.PhoneNumberUtils.ttsSpanAsPhoneNumber ( mDigits.getText ( ) , 0 , mDigits.getText ( ) . length ( ) ) ; }
public boolean onPreferenceChange ( android.support.v7.preference.Preference preference , java.lang.Object newValue ) { android.content.ComponentName name = new android.content.ComponentName ( getContext ( ) , com.android.traceur.QsService.class ) ; getContext ( ) . getPackageManager ( ) . setComponentEnabledSetting ( name , ( ( ( java.lang.Boolean ) ( newValue ) ) ? android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED : android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ) , PackageManager.DONT_KILL_APP ) ; return true ; }
public boolean setRoamingOverride ( int subId , java.util.List < java.lang.String > gsmRoamingList , java.util.List < java.lang.String > gsmNonRoamingList , java.util.List < java.lang.String > cdmaRoamingList , java.util.List < java.lang.String > cdmaNonRoamingList ) { enforceCarrierPrivilege ( subId ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone == null ) { return false ; } return phone.setRoamingOverride ( gsmRoamingList , gsmNonRoamingList , cdmaRoamingList , cdmaNonRoamingList ) ; }
public com.google.common.hash.HashCode hashString ( java.lang.CharSequence input ) { int len = input.length ( ) ; com.google.common.hash.Hasher hasher = newHasher ( ( len * 2 ) ) ; for ( int i = 0 ; i < len ; i ++ ) { hasher.putChar ( input.charAt ( i ) ) ; } return hasher.hash ( ) ; }
public void testSetupDriverForClientModeError ( ) { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; android.net.wifi.IWificond wificond = org.mockito.Mockito.mock ( android.net.wifi.IWificond.class ) ; org.mockito.Mockito.when ( wificondControl.setupDriverForClientMode ( ) ) . thenReturn ( null ) ; mWifiNative.setWificondControl ( wificondControl ) ; android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupForClientMode ( ) ; org.junit.Assert.assertEquals ( null , returnedClientInterface ) ; org.mockito.Mockito.verify ( mWifiNative ) . startHal ( org.mockito.Mockito.eq ( true ) ) ; org.mockito.Mockito.verify ( wificondControl ) . setupDriverForClientMode ( ) ; }
public void testTransmitFollowupFail ( ) throws org.json.JSONException { final short transactionId = 5689 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "id" , transactionId ) ; args.putInt ( "reason" , WifiAwareNative.AWARE_STATUS_TX_FAIL ) ; com.android.server.wifi.aware.WifiAwareHalMock.callTransmitFollowup ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mAwareStateManager ) . onMessageSendFailNotification ( transactionId , WifiAwareNative.AWARE_STATUS_TX_FAIL ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
public void run ( ) { com.intellij.openapi.module.Module module = com.intellij.openapi.module.ModuleManager.getInstance ( project ) . findModuleByName ( moduleName ) ; com.android.tools.idea.templates.Parameter appEngineVersionParam = template.getMetadata ( ) . getParameter ( "appEngineVersion" ) ; java.lang.String appEngineVersion = ( appEngineVersionParam == null ) ? "unknown" : appEngineVersionParam.initial ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.createRunConfiguration ( project , module , moduleRoot , appEngineVersion ) ; com.google.gct.idea.appengine.wizard.NewAppEngineModuleAction.addAppEngineGradleFacet ( ) ; }
public android.net.NetworkStatsHistory getHistoryForUid ( android.net.NetworkTemplate template , int uid , int set , int tag , int fields ) { @ com.android.server.net.NetworkStatsAccess.Level int accessLevel = checkAccessLevel ( mCallingPackage ) ; if ( tag == ( android.net.NetworkStats.TAG_NONE ) ) { return getUidComplete ( ) . getHistory ( template , uid , set , tag , fields , accessLevel ) ; } else { return getUidTagComplete ( ) . getHistory ( template , uid , set , tag , fields , accessLevel ) ; } }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , int [ ] data ) { validateIsInt32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; }
public java.lang.String group ( java.lang.String name ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private void expandItem ( java.lang.Object elem ) { mTreeViewer.setExpandedState ( elem , true ) ; for ( java.lang.Object pkg : ( ( org.eclipse.jface.viewers.ITreeContentProvider ) ( mTreeViewer.getContentProvider ( ) ) ) . getChildren ( elem ) ) { mTreeViewer.setChecked ( pkg , true ) ; expandItem ( pkg ) ; } }
public void testSingleOutput ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( match , result ) ; }
public void visitExceptionInfo ( proguard.optimize.peephole.Clazz clazz , proguard.optimize.peephole.Method method , proguard.optimize.peephole.CodeAttribute codeAttribute , proguard.optimize.peephole.ExceptionInfo exceptionInfo ) { instructionMarks [ exceptionInfo.u2startPC ] |= proguard.optimize.peephole.BranchTargetFinder.EXCEPTION_START ; instructionMarks [ exceptionInfo.u2endPC ] |= proguard.optimize.peephole.BranchTargetFinder.EXCEPTION_END ; instructionMarks [ exceptionInfo.u2handlerPC ] |= proguard.optimize.peephole.BranchTargetFinder.EXCEPTION_HANDLER ; }
public void dup2_x2 ( ) { super . dup2_x2 ( ) ; producerPop ( ) ; producerPop ( ) ; producerPop ( ) ; producerPop ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedPackage pkg , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findPackage ( pkg ) ; if ( c == null ) { return null ; } if ( ( c.annotations ) != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : c.annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
public void testModemSuggestNoRetry ( ) throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataCallResponse response = new com.android.internal.telephony.dataconnection.DataCallResponse ( ) ; response.suggestedRetryTime = java.lang.Integer.MAX_VALUE ; android.os.AsyncResult ar = new android.os.AsyncResult ( null , response , null ) ; org.junit.Assert.assertEquals ( RetryManager.NO_RETRY , getSuggestedRetryDelay ( ar ) ) ; }
public void testLibraryProjects ( ) throws java.lang.Exception { mScopes = null ; java.io.File master = getProjectDir ( "MasterProject" , "bytecode/AndroidManifestWrongRegs.xml=>AndroidManifest.xml" , "multiproject/main.properties=>project.properties" , "bytecode/.classpath=>.classpath" ) ; java.io.File library = getProjectDir ( "LibraryProject" , "multiproject/library-manifest.xml=>AndroidManifest.xml" , "multiproject/library.properties=>project.properties" , "bytecode/OnClickActivity.java.txt=>src/test/pkg/OnClickActivity.java" , "bytecode/OnClickActivity.class.data=>bin/classes/test/pkg/OnClickActivity.class" , "bytecode/TestService.java.txt=>src/test/pkg/TestService.java" , "bytecode/TestService.class.data=>bin/classes/test/pkg/TestService.class" , "bytecode/TestProvider.java.txt=>src/test/pkg/TestProvider.java" , "bytecode/TestProvider.class.data=>bin/classes/test/pkg/TestProvider.class" , "bytecode/TestProvider2.java.txt=>src/test/pkg/TestProvider2.java" , "bytecode/TestProvider2.class.data=>bin/classes/test/pkg/TestProvider2.class" ) ; assertEquals ( ( "MasterProject/AndroidManifest.xml:17: Error: Class referenced in the manifest, test.pkg.TestReceiver, was not found in the project or the libraries [MissingRegistered]\n" + ( ( " <service android:name=\"TestReceiver\" />\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , checkLint ( java.util.Arrays.asList ( master , library ) ) ) ; }
public void replaceWith ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlock block ) { for ( com.android.jack.ir.ast.cfg.JBasicBlock pre : this . getPredecessorsSnapshot ( ) ) { pre.replaceAllSuccessors ( this , block ) ; } }
public boolean isBetterMatchThan ( com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier compareTo , com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier reference ) { if ( compareTo == null ) { return true ; } com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier compareQualifier = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier ) ( compareTo ) ) ; com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier referenceQualifier = ( ( com.android.ide.eclipse.adt.internal.resources.configurations.KeyboardStateQualifier ) ( reference ) ) ; if ( ( referenceQualifier.mValue ) == ( com.android.resources.KeyboardState.SOFT ) ) { if ( ( ( compareQualifier.mValue ) == ( com.android.resources.KeyboardState.EXPOSED ) ) && ( ( mValue ) == ( com.android.resources.KeyboardState.SOFT ) ) ) { return true ; } } return false ; }
public void test_JarFile_Modified_SF_EntryAttributes ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Modified_SF_EntryAttributes.jar" ; tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( new java.io.File ( resources , modifiedJarName ) , true ) ; java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; try { jarFile.getInputStream ( zipEntry ) ; fail ( "should throw Security Exception" ) ; } catch ( java.lang.SecurityException e ) { } } }
public void reset ( ) { com.google.gct.testing.config.GoogleCloudTestingConfigurable.GoogleCloudTestingState state = getSavedSettings ( ) . getState ( ) ; fakeBucketNameField.setText ( ( state == null ? "" : state.fakeBucketName ) ) ; useFakeBucketCheckbox.setSelected ( ( state == null ? false : state.shouldUseFakeBucket ) ) ; setUrlChoice ( ( state == null ? 0 : state.urlChoice ) ) ; customUrlField.setText ( ( state == null ? "" : state.customUrl ) ) ; com.google.gct.testing.launcher.CloudAuthenticator.recreateTest ( getBackendUrl ( ) ) ; }
public void changeIcon ( android.graphics.drawable.Drawable icon , java.lang.String description ) { if ( ( ( mFab.getDrawable ( ) ) != icon ) || ( ! ( mFab.getContentDescription ( ) . equals ( description ) ) ) ) { mFab.setImageDrawable ( icon ) ; mFab.setContentDescription ( description ) ; } }
protected com.android.internal.telephony.SmsTracker getNewSubmitPduTracker ( java.lang.String destinationAddress , java.lang.String scAddress , java.lang.String message , com.android.internal.telephony.SmsHeader smsHeader , int format , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , boolean lastPart , java.util.concurrent.atomic.AtomicInteger unsentPartCount , java.util.concurrent.atomic.AtomicBoolean anyPartFailed , android.net.Uri messageUri , java.lang.String fullMessageText ) { android.telephony.Rlog.e ( com.android.internal.telephony.ImsSMSDispatcher.TAG , "Error! Not implemented for IMS." ) ; return null ; }
public final double double_literal ( ) throws org.jf.smali.RecognitionException { double value = 0.0 ; org.antlr.runtime.tree.CommonTree DOUBLE_LITERAL209 = null ; try { { DOUBLE_LITERAL209 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.DOUBLE_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_DOUBLE_LITERAL_in_double_literal3513 ) ) ) ; value = org.jf.smali.LiteralTools.parseDouble ( ( DOUBLE_LITERAL209 != null ? DOUBLE_LITERAL209.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
private int getPreviousDayGroup ( android.database.Cursor cursor ) { int startingPosition = cursor.getPosition ( ) ; moveToPreviousNonHiddenRow ( cursor ) ; if ( cursor.isBeforeFirst ( ) ) { cursor.moveToPosition ( startingPosition ) ; return CallLogGroupBuilder.DAY_GROUP_NONE ; } int result = getDayGroupForCall ( cursor.getLong ( CallLogQuery.ID ) ) ; cursor.moveToPosition ( startingPosition ) ; return result ; }
public void packageApk ( java.io.File apk , java.io.File manifest ) { java.util.List < java.lang.String > aapt = new java.util.ArrayList < java.lang.String > ( java.util.Arrays.asList ( "aapt" , "package" , "-F" , apk.getPath ( ) , "-M" , manifest.getPath ( ) , "-I" , "prebuilts/sdk/current/android.jar" ) ) ; new vogar.commands.Command ( log , aapt ) . execute ( ) ; }
public void testUndo_textWatcher ( ) { initTextViewForTyping ( ) ; mTextView.addTextChangedListener ( new android.widget.cts.TextViewTest.ConvertToSpacesTextWatcher ( ) ) ; mInstrumentation.sendStringSync ( "abc" ) ; mActivity.runOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { assertEquals ( " " , mTextView.getText ( ) . toString ( ) ) ; mTextView.onTextContextMenuItem ( android.R.id.undo ) ; assertEquals ( "" , mTextView.getText ( ) . toString ( ) ) ; } } ) ; mInstrumentation.waitForIdleSync ( ) ; }
public org.objectweb.asm.FieldVisitor visitField ( int access , java.lang.String name , java.lang.String desc , java.lang.String signature , java.lang.Object value ) { if ( com.google.devtools.build.android.desugar.HeaderClassLoader.NonPrimitiveFieldCollector.isNonPrimitiveType ( desc ) ) { declaredNonPrimitiveFields.add ( new com.google.devtools.build.android.desugar.HeaderClassLoader.FieldInfo ( name , desc ) ) ; } return null ; }
public void test_ConstructorI ( ) { java.net.InetSocketAddress isa = new java.net.InetSocketAddress ( 65535 ) ; assertEquals ( "0.0.0.0" , isa.getHostName ( ) ) ; assertEquals ( 65535 , isa.getPort ( ) ) ; try { new java.net.InetSocketAddress ( ( - 1 ) ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } try { new java.net.InetSocketAddress ( 65536 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public boolean equals ( java.lang.Object o ) { if ( ! ( o instanceof android.view.DisplayAdjustments ) ) { return false ; } android.view.DisplayAdjustments daj = ( ( android.view.DisplayAdjustments ) ( o ) ) ; return ( com.android.internal.util.Objects.equal ( daj.mCompatInfo , mCompatInfo ) ) && ( com.android.internal.util.Objects.equal ( daj.mActivityToken , mActivityToken ) ) ; }
static java.lang.String loadRules ( android.icu.util.ULocale locale , java.lang.String collationType ) { android.icu.util.UResourceBundle bundle = android.icu.util.UResourceBundle.getBundleInstance ( ICUResourceBundle.ICU_COLLATION_BASE_NAME , locale ) ; android.icu.util.UResourceBundle data = ( ( android.icu.impl.ICUResourceBundle ) ( bundle ) ) . getWithFallback ( ( "collations/" + ( android.icu.impl.coll.CollationLoader.ASCII.toLowerCase ( collationType ) ) ) ) ; java.lang.String rules = data.getString ( "Sequence" ) ; return rules ; }
public static synchronized void setupProjectNatures ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { if ( ( project == null ) || ( ! ( project.isOpen ( ) ) ) ) return ; if ( monitor == null ) monitor = new org.eclipse.core.runtime.NullProgressMonitor ( ) ; com.android.ide.eclipse.adt.internal.project.AndroidNature.addNatureToProjectDescription ( project , org.eclipse.jdt.core.JavaCore.NATURE_ID , monitor ) ; com.android.ide.eclipse.adt.internal.project.AndroidNature.addNatureToProjectDescription ( project , AdtConstants.NATURE_DEFAULT , monitor ) ; }
public void testStageInstallWithErrorCode_withMissingDistroVersionFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) . clearVersionForTests ( ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( distro ) ) ; assertNoDistroOperationStaged ( ) ; assertNoInstalledDistro ( ) ; }
public static void testExceptionDetailMessages ( ) throws java.lang.Throwable { java.lang.invoke.MethodHandle handle = java.lang.invoke.MethodHandles.lookup ( ) . findVirtual ( java.lang.String.class , "concat" , java.lang.invoke.MethodType.methodType ( java.lang.String.class , java.lang.String.class ) ) ; try { handle.invokeExact ( "a" , new java.lang.Object ( ) ) ; java.lang.System.out.println ( "invokeExact(\"a\", new Object()) unexpectedly succeeded." ) ; } catch ( java.lang.invoke.WrongMethodTypeException ex ) { java.lang.System.out.println ( ( "Received exception: " + ( ex.getMessage ( ) ) ) ) ; } }
public void run ( ) { try { java.lang.System.err.println ( "sleep..." ) ; java.lang.Thread.sleep ( 2000 ) ; java.lang.System.err.println ( ( ( "close " + ( s ) ) + "..." ) ) ; s.getClass ( ) . getMethod ( "close" ) . invoke ( s ) ; } catch ( java.lang.Exception ex ) { ex.printStackTrace ( ) ; } }
public static void v ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.VERBOSE ) { android.util.Log.v ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public void test_Jar_created_before_java_5 ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Created_by_1_4.jar" ; tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( new java.io.File ( resources , modifiedJarName ) , true ) ; java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; jarFile.getInputStream ( zipEntry ) ; } }
public void setVisualVoicemailEnabled ( android.telecom.PhoneAccountHandle phoneAccountHandle , boolean enabled ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { telephony.setVisualVoicemailEnabled ( mContext.getOpPackageName ( ) , phoneAccountHandle , enabled ) ; } } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
synchronized void setLengthOnly ( int length ) { if ( ( length < 0 ) || ( ( ( offset ) + length ) > ( data.length ) ) ) { throw new java.lang.IndexOutOfBoundsException ( ( ( ( ( ( "length=" + length ) + ", offset=" ) + ( offset ) ) + ", buffer size=" ) + ( data.length ) ) ) ; } this . length = length ; }
public java.lang.String toString ( ) { java.lang.String [ ] values = new java.lang.String [ this . getPlaceholderCount ( ) ] ; for ( int i = 0 ; i < ( values.length ) ; i ++ ) { values [ i ] = java.lang.String.format ( "{%d}" , i ) ; } return format ( new java.lang.StringBuilder ( ) , null , values ) . toString ( ) ; }
protected boolean equal ( @ javax.annotation.Nonnull java.util.List < com.android.jack.ir.ast.JType > a , @ javax.annotation.Nonnull java.util.List < com.android.jack.ir.ast.JType > b ) { if ( ( a.size ( ) ) != ( b.size ( ) ) ) { return false ; } for ( int i = 0 ; i < ( a.size ( ) ) ; i ++ ) { if ( ! ( equal ( a.get ( i ) , b.get ( i ) ) ) ) { return false ; } } return true ; }
public void TestGetRedundants ( ) { com.ibm.icu.text.DateTimePatternGenerator dtpg = com.ibm.icu.text.DateTimePatternGenerator.getInstance ( ) ; try { dtpg.getRedundants ( null ) ; } catch ( java.lang.Exception e ) { errln ( ( "DateTimeGenerator.getRedundants was not suppose to return " + "an exception when passing a null parameter." ) ) ; } try { java.util.Collection < java.lang.String > out = new java.util.LinkedHashSet < java.lang.String > ( ) ; dtpg.getRedundants ( out ) ; } catch ( java.lang.Exception e ) { errln ( ( "DateTimeGenerator.getRedundants was not suppose to return " + "an exception when passing a new LinkedHashSet<String>() parameter." ) ) ; } }
private void handleShareItemSelected ( ) { android.content.Intent target = new android.content.Intent ( android.content.Intent.ACTION_SEND ) ; target.setType ( "text/plain" ) ; com.android.cts.verifier.TestResultsReport report = new com.android.cts.verifier.TestResultsReport ( this , getListAdapter ( ) ) ; target.putExtra ( Intent.EXTRA_SUBJECT , report.getSubject ( ) ) ; target.putExtra ( Intent.EXTRA_TEXT , report.getBody ( ) ) ; startActivity ( android.content.Intent.createChooser ( target , getString ( R.string.share_test_results ) ) ) ; }
private com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode addUnknownAttribute ( java.lang.String xmlFullName , java.lang.String xmlAttrLocalName , java.lang.String xmlNsUri ) { com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor ( xmlAttrLocalName , xmlFullName , xmlNsUri , "Unknown XML attribute" , new com.android.ide.eclipse.adt.internal.resources.AttributeInfo ( xmlAttrLocalName , new com.android.ide.common.api.IAttributeInfo.Format [ ] { com.android.ide.common.api.IAttributeInfo.Format.STRING } ) ) ; com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode uiAttr = desc.createUiNode ( this ) ; uiAttr.setDirty ( true ) ; mUnknownUiAttributes.add ( uiAttr ) ; return uiAttr ; }
private boolean startIPv6 ( ) { try { enableInterfaceIPv6PrivacyExtensions ( ) ; setInterfaceIPv6RaRtInfoMaxPlen ( android.net.util.NetworkConstants.RFC7421_PREFIX_LENGTH ) ; mNwService.enableIpv6 ( mInterfaceName ) ; } catch ( java.lang.IllegalStateException | android.os.RemoteException | android.os.ServiceSpecificException e ) { logError ( "Unable to change interface settings: %s" , e ) ; return false ; } return true ; }
public void testRscLibraryInClassPath ( ) throws java.lang.Exception { java.io.File emptyLib = createRscLibrary ( ) ; com.android.jack.TestTools.compileSourceToDex ( new com.android.jack.Options ( ) , com.android.jack.TestTools.getJackTestsWithJackFolder ( "library/test001" ) , ( ( ( com.android.jack.TestTools.getDefaultBootclasspathString ( ) ) + ( java.io.File.pathSeparator ) ) + ( emptyLib.getPath ( ) ) ) , com.android.jack.TestTools.createTempFile ( "library001" , ".zip" ) , true ) ; }
public boolean onGenericMotionEvent ( final android.view.MotionEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onGenericMotionEvent ( event ) ; } } ) ; return ret ; } return mAwContents.onGenericMotionEvent ( event ) ; }
boolean protectedHasArray ( ) { return ( this . block.array ( ) ) != null ; }
private void assertInstalledDistro ( com.android.timezone.distro.TimeZoneDistro timeZoneDistro ) throws java.lang.Exception { java.io.File currentTzDataDir = installer.getCurrentTzDataDir ( ) ; assertTrue ( currentTzDataDir.exists ( ) ) ; java.io.File versionFile = new java.io.File ( currentTzDataDir , com.android.timezone.distro.TimeZoneDistro.DISTRO_VERSION_FILE_NAME ) ; assertTrue ( versionFile.exists ( ) ) ; byte [ ] expectedVersionBytes = timeZoneDistro.getDistroVersion ( ) . toBytes ( ) ; byte [ ] actualVersionBytes = com.android.timezone.distro.FileUtils.readBytes ( versionFile , expectedVersionBytes.length ) ; org.junit.Assert.assertArrayEquals ( expectedVersionBytes , actualVersionBytes ) ; }
public void onResume ( ) { if ( com.android.dialer.util.PermissionsUtil.hasPermission ( activity , android.Manifest.permission.READ_CONTACTS ) ) { contactInfoCache.start ( ) ; } contactsPreferences.refreshValue ( ContactsPreferences.DISPLAY_ORDER_KEY ) ; isSpamEnabled = com.android.dialer.spam.SpamComponent.get ( activity ) . spamSettings ( ) . isSpamEnabled ( ) ; getDuo ( ) . registerListener ( this ) ; notifyDataSetChanged ( ) ; }
private com.android.jack.test.toolchain.JackBasedToolchain getToolchain ( boolean isApiTest ) { java.util.List < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > excludeList = new java.util.ArrayList < java.lang.Class < ? extends com.android.jack.test.toolchain.IToolchain > > ( 1 ) ; excludeList.add ( com.android.jack.test.toolchain.LegacyJillToolchain.class ) ; if ( isApiTest ) { excludeList.add ( com.android.jack.test.toolchain.JackCliToolchain.class ) ; } return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackApiToolchain.class , excludeList ) ; }
public void testWriteFile ( ) throws java.lang.Exception { final java.io.File file = new java.io.File ( mContext.getFilesDir ( ) , android.support.v4.content.FileProviderTest.TEST_FILE ) ; final android.net.Uri uri = stageFileAndGetUri ( file , android.support.v4.content.FileProviderTest.TEST_DATA ) ; assertContentsEquals ( android.support.v4.content.FileProviderTest.TEST_DATA , uri ) ; final java.io.OutputStream out = mResolver.openOutputStream ( uri ) ; try { out.write ( android.support.v4.content.FileProviderTest.TEST_DATA_ALT ) ; } finally { libcore.io.IoUtils.closeQuietly ( out ) ; } assertContentsEquals ( android.support.v4.content.FileProviderTest.TEST_DATA_ALT , uri ) ; }
public boolean isConnected ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "isConnected(): not allowed for non-active user" ) ; return false ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return ( ( mState ) == ( android.bluetooth.BluetoothPbap.STATE_CONNECTED ) ) && ( mRemoteDevice.equals ( device ) ) ; }
private static libcore.icu.Transliterator getJapaneseTransliterator ( ) { synchronized ( com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.class ) { if ( ! ( com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mInitializedTransliterator ) ) { com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mInitializedTransliterator = true ; libcore.icu.Transliterator t = null ; try { t = new libcore.icu.Transliterator ( ( "Hiragana-Latin; Katakana-Latin;" + " Latin-Ascii" ) ) ; } catch ( java.lang.RuntimeException e ) { android.util.Log.w ( com.android.providers.contacts.ContactLocaleUtils.TAG , ( "Hiragana/Katakana-Latin transliterator data" + " is missing" ) ) ; } com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mJapaneseTransliterator = t ; } return com.android.providers.contacts.ContactLocaleUtils.JapaneseContactUtils.mJapaneseTransliterator ; } }
private static org.junit.runner.Request classes ( android.app.Instrumentation instr , boolean skipExecution , org.junit.runner.Computer computer , java.lang.Class < ? > ... classes ) { try { com.android.test.runner.AndroidRunnerBuilder builder = new com.android.test.runner.AndroidRunnerBuilder ( true , instr , skipExecution ) ; org.junit.runner.Runner suite = computer.getSuite ( builder , classes ) ; return org.junit.runner.Request.runner ( suite ) ; } catch ( org.junit.runners.model.InitializationError e ) { throw new java.lang.RuntimeException ( "Suite constructor, called as above, should always complete" ) ; } }
public void verifyCommandSetStreamVolume ( ) { mTvView.setStreamVolume ( 1.0F ) ; mInstrumentation.waitForIdleSync ( ) ; new android.cts.util.PollingCheck ( android.media.tv.cts.TvInputServiceTest.TIME_OUT ) { @ java.lang.Override protected boolean check ( ) { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession ; return ( session != null ) && ( ( session.mSetStreamVolumeCount ) > 0 ) ; } } . run ( ) ; }
public android.net.NetworkCapabilities addTransportType ( int transportType ) { if ( ( transportType < ( android.net.NetworkCapabilities.MIN_TRANSPORT ) ) || ( transportType > ( android.net.NetworkCapabilities.MAX_TRANSPORT ) ) ) { throw new java.lang.IllegalArgumentException ( "TransportType out of range" ) ; } mTransportTypes |= 1 << transportType ; setNetworkSpecifier ( mNetworkSpecifier ) ; return this ; }
public void testCanInstallAndUninstallACaCert ( ) throws java.security.cert.CertificateException { assertFalse ( hasCaCertInstalled ( FAKE_RSA_1.caCertificate ) ) ; assertFalse ( hasCaCertInstalled ( FAKE_DSA_1.caCertificate ) ) ; assertTrue ( mDevicePolicyManager.installCaCert ( getWho ( ) , FAKE_RSA_1.caCertificate ) ) ; assertTrue ( hasCaCertInstalled ( FAKE_RSA_1.caCertificate ) ) ; assertFalse ( hasCaCertInstalled ( FAKE_DSA_1.caCertificate ) ) ; mDevicePolicyManager.uninstallCaCert ( getWho ( ) , FAKE_RSA_1.caCertificate ) ; assertFalse ( hasCaCertInstalled ( FAKE_RSA_1.caCertificate ) ) ; assertFalse ( hasCaCertInstalled ( FAKE_DSA_1.caCertificate ) ) ; }
public void onExecuteWrite ( android.bluetooth.BluetoothDevice device , int requestId , boolean execute ) { if ( com.android.cts.verifier.bluetooth.BleServerService.DEBUG ) android.util.Log.d ( com.android.cts.verifier.bluetooth.BleServerService.TAG , "onExecuteWrite" ) ; if ( execute ) { notifyExecuteWrite ( ) ; getCharacteristic ( com.android.cts.verifier.bluetooth.BleServerService.CHARACTERISTIC_UUID ) . setValue ( mReliableWriteValue ) ; } }
public java.lang.String getOriginalUrl ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.String ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.String > ( ) { @ java.lang.Override public java.lang.String call ( ) { return getOriginalUrl ( ) ; } } ) ; return ret ; } java.lang.String url = mAwContents.getOriginalUrl ( ) ; if ( ( url == null ) || ( url.trim ( ) . isEmpty ( ) ) ) return null ; return url ; }
public static com.android.sdklib.SdkManager createManager ( @ com.android.annotations.NonNull java.lang.String osSdkPath , @ com.android.annotations.NonNull com.android.utils.ILogger log ) { try { com.android.sdklib.SdkManager manager = new com.android.sdklib.SdkManager ( osSdkPath ) ; manager.reloadSdk ( log ) ; return manager ; } catch ( java.lang.IllegalArgumentException e ) { log.error ( e , "Error parsing the sdk." ) ; } return null ; }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createMerge ( java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor > knownLayouts ) { java.lang.String xml_name = "merge" ; com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ ] viewLayoutAttribs = findViewLayoutAttributes ( AndroidConstants.CLASS_FRAMELAYOUT , knownLayouts ) ; com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( xml_name , xml_name , null , "A root tag useful for XML layouts inflated using a ViewStub." , null , null , viewLayoutAttribs , null , false ) ; return desc ; }
public void terminateSession ( int clientId , int sessionId ) { if ( android.net.wifi.nan.WifiNanManager.VDBG ) { android.util.Log.d ( android.net.wifi.nan.WifiNanManager.TAG , ( ( ( "terminateSession(): clientId=" + clientId ) + ", sessionId=" ) + sessionId ) ) ; } try { mService.terminateSession ( clientId , sessionId ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier ( org.bouncycastle.asn1.ASN1ObjectIdentifier encryptionOID , java.security.AlgorithmParameters params ) throws org.bouncycastle.cert.crmf.CRMFException { org.bouncycastle.asn1.ASN1Encodable asn1Params ; if ( params != null ) { try { asn1Params = org.bouncycastle.jcajce.JcaJceUtils.extractParameters ( params ) ; } catch ( java.io.IOException e ) { throw new org.bouncycastle.cert.crmf.CRMFException ( ( "cannot encode parameters: " + ( e.getMessage ( ) ) ) , e ) ; } } else { asn1Params = org.bouncycastle.asn1.DERNull.INSTANCE ; } return new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( encryptionOID , asn1Params ) ; }
void addOptionInstance ( com.google.devtools.common.options.ParsedOptionDescription parsedOption , com.google.devtools.common.options.OptionDefinition implicitDependant , com.google.devtools.common.options.OptionDefinition expandedFrom , java.util.List < java.lang.String > warnings ) throws com.google.devtools.common.options.OptionsParsingException { java.lang.Object convertedValue = parsedOption.getConvertedValue ( ) ; if ( convertedValue instanceof java.util.List < ? > ) { optionValues.putAll ( parsedOption.getPriority ( ) , ( ( java.util.List < ? > ) ( convertedValue ) ) ) ; } else { optionValues.put ( parsedOption.getPriority ( ) , convertedValue ) ; } }
public java.lang.String createNetworkSpecifier ( @ android.net.wifi.nan.WifiNanManager.DataPathRole int role , int peerId , @ android.annotation.Nullable byte [ ] token ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "createNetworkSpecifier: called on terminated session" ) ; return null ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "createNetworkSpecifier: called post GC on WifiNanManager" ) ; return null ; } return mgr.createNetworkSpecifier ( role , mSessionId , peerId , token ) ; } }
public org.objectweb.asm.tree.analysis.Value merge ( org.objectweb.asm.tree.analysis.Value value1 , org.objectweb.asm.tree.analysis.Value value2 ) { if ( ( value1 == ( com.android.tools.lint.checks.RecycleDetector.RecycleTracker.RECYCLED ) ) || ( value2 == ( com.android.tools.lint.checks.RecycleDetector.RecycleTracker.RECYCLED ) ) ) { return com.android.tools.lint.checks.RecycleDetector.RecycleTracker.RECYCLED ; } else if ( ( value1 == ( com.android.tools.lint.checks.RecycleDetector.RecycleTracker.INSTANCE ) ) || ( value2 == ( com.android.tools.lint.checks.RecycleDetector.RecycleTracker.INSTANCE ) ) ) { return com.android.tools.lint.checks.RecycleDetector.RecycleTracker.INSTANCE ; } return com.android.tools.lint.checks.RecycleDetector.RecycleTracker.UNKNOWN ; }
synchronized void nScriptForEach ( long id , int slot , long ain , long aout , byte [ ] params ) { validate ( ) ; if ( params == null ) { rsnScriptForEach ( mContext , id , slot , ain , aout ) ; } else { rsnScriptForEach ( mContext , id , slot , ain , aout , params ) ; } }
public void testMakeTimeZone_OneDstTransition ( ) throws java.lang.Exception { int [ ] [ ] times = new int [ ] [ ] { new int [ ] { 0 , 0 } } ; int [ ] [ ] offsets = new int [ ] [ ] { new int [ ] { 3600 , 1 } } ; try { createZoneInfo ( times , offsets ) ; fail ( "Did not detect no non-DST transitions" ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public long getDirectoryId ( ) { int position = getPosition ( ) ; while ( moveToPrevious ( ) ) { int id = getInt ( getColumnIndex ( com.android.dialer.searchfragment.remote.RemoteContactsCursor.COLUMN_DIRECTORY_ID ) ) ; if ( id != ( - 1 ) ) { moveToPosition ( position ) ; return id ; } } throw com.android.dialer.common.Assert.createIllegalStateFailException ( ( "No directory id for contact at: " + position ) ) ; }
public static double max ( double a , double b ) { if ( a != a ) return a ; if ( ( ( a == 0.0 ) && ( b == 0.0 ) ) && ( ( java.lang.Double.doubleToRawLongBits ( a ) ) == ( java.lang.StrictMath.negativeZeroDoubleBits ) ) ) { return b ; } return a >= b ? a : b ; }
private void sendImageNotifications ( java.lang.String callId , com.android.incallui.ContactInfoCache.ContactCacheEntry entry ) { com.android.dialer.common.Assert.isMainThread ( ) ; final java.util.Set < com.android.incallui.ContactInfoCache.ContactInfoCacheCallback > callBacks = mCallBacks.get ( callId ) ; if ( ( callBacks != null ) && ( ( entry.photo ) != null ) ) { for ( com.android.incallui.ContactInfoCache.ContactInfoCacheCallback callBack : callBacks ) { callBack.onImageLoadComplete ( callId , entry ) ; } } }
boolean isSupported ( ) { java.lang.String versionString = mDocument.getDocumentElement ( ) . getAttribute ( com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.ATTR_FORMAT ) ; if ( ( versionString != null ) && ( ! ( versionString.isEmpty ( ) ) ) ) { try { int version = java.lang.Integer.parseInt ( versionString ) ; return version <= ( TemplateHandler.CURRENT_FORMAT ) ; } catch ( java.lang.NumberFormatException nufe ) { return false ; } } return true ; }
public void testRevokePropagatedOnUpgradeNewToNewModel ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokePropagatedOnUpgradeNewToNewModel_part1" ) ; assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , true , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokePropagatedOnUpgradeNewToNewModel_part2" ) ; }
public void addCall ( android.telecom.ParcelableCall call ) throws android.os.RemoteException { if ( mCallById.containsKey ( call.getId ( ) ) ) { throw new java.lang.RuntimeException ( ( ( "Call " + ( call.getId ( ) ) ) + " already added" ) ) ; } mCallById.put ( call.getId ( ) , call ) ; mLatestCallId = call.getId ( ) ; }
public void dispose ( ) throws android.telephony.mbms.MbmsException { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( "No streaming service attached" ) ; } try { mService.disposeStream ( mAppName , mSubscriptionId , mServiceInfo.getServiceId ( ) ) ; } catch ( android.os.DeadObjectException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , "Remote process died" ) ; mService = null ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_SERVICE_LOST ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , ( "Caught remote exception calling dispose: " + e ) ) ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_UNKNOWN_REMOTE_EXCEPTION ) ; } }
public boolean isEnabled ( ) { try { synchronized ( mManagerCallback ) { if ( ( mService ) != null ) return mService.isEnabled ( ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public java.lang.String getTypeDescription ( ) { return "a comma-separated list of colon-separated key value pairs" ; }
public void setupDefaultSources ( ) { com.android.sdklib.internal.repository.SdkSources sources = getSources ( ) ; java.lang.String baseUrl = java.lang.System.getenv ( "SDK_TEST_BASE_URL" ) ; if ( ( ( baseUrl == null ) || ( ( baseUrl.length ( ) ) <= 0 ) ) || ( ! ( baseUrl.endsWith ( "/" ) ) ) ) { baseUrl = com.android.sdklib.repository.SdkRepoConstants.URL_GOOGLE_SDK_SITE ; } sources.add ( SdkSourceCategory.ANDROID_REPO , new com.android.sdklib.internal.repository.SdkRepoSource ( baseUrl , SdkSourceCategory.ANDROID_REPO.getUiName ( ) ) ) ; sources.loadUserAddons ( getSdkLog ( ) ) ; }
protected void sendSubmitPdu ( com.android.internal.telephony.cdma.SmsMessage.SubmitPdu pdu , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , java.lang.String destAddr ) { if ( android.os.SystemProperties.getBoolean ( TelephonyProperties.PROPERTY_INECM_MODE , false ) ) { if ( sentIntent != null ) { try { sentIntent.send ( SmsManager.RESULT_ERROR_NO_SERVICE ) ; } catch ( android.app.PendingIntent.CanceledException ex ) { } } if ( com.android.internal.telephony.cdma.CdmaSMSDispatcher.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CdmaSMSDispatcher.TAG , "Block SMS in Emergency Callback mode" ) ; } return ; } sendRawPdu ( pdu.encodedScAddress , pdu.encodedMessage , sentIntent , deliveryIntent , destAddr ) ; }
public boolean setNetworkExtra ( int netId , java.lang.String name , java.util.Map < java.lang.String , java.lang.String > values ) { java.lang.String encoded = com.android.server.wifi.WifiNative.createNetworkExtra ( values ) ; if ( encoded == null ) { return false ; } return setNetworkVariable ( netId , name , encoded ) ; }
boolean cancelBondProcess ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; byte [ ] addr = com.android.bluetooth.Utils.getBytesFromAddress ( device.getAddress ( ) ) ; return cancelBondNative ( addr ) ; }
public static void loginGooglePlay ( android.app.Instrumentation instrumentation ) throws java.lang.Exception { final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance ( instrumentation ) ; final java.lang.String playStore = "Play Store" ; final java.lang.String email = "pstester1980@gmail.com" ; final java.lang.String password = "pst4lif3" ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.resetPlayStore ( instrumentation ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( playStore ) ) . clickAndWaitForNewWindow ( ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStorePermissionsWatcher ( device ) . checkForCondition ( ) ; boolean hasSearchBox = new com.android.devtools.systemimage.uitest.utils.Wait ( java.util.concurrent.TimeUnit.SECONDS.toMillis ( 20 ) ) . until ( new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition ( ) { @ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { return ( device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.GOOGLE_PLAY_IDLE_RES ) ) . exists ( ) ) || ( device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.GOOGLE_PLAY_ACTIVE_RES ) ) . exists ( ) ) ; } } ) ; if ( hasSearchBox ) { device.pressHome ( ) ; return ; } boolean needsEmail = new com.android.devtools.systemimage.uitest.utils.Wait ( ) . until ( new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition ( ) { @ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel ( ) ) <= 24 ) { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( "Email or phone" ) ) . exists ( ) ; } else { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( "Email or phone" ) ) . exists ( ) ; } } } ) ; if ( ! needsEmail ) { boolean needsPassword = new com.android.devtools.systemimage.uitest.utils.Wait ( ) . until ( new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition ( ) { @ java.lang.Override public boolean isTrue ( ) throws android.support.test.uiautomator.UiObjectNotFoundException { if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel ( ) ) <= 24 ) { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( ( "Sign in " + email ) ) ) . exists ( ) ; } else { return device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( ( "Sign in " + email ) ) ) . exists ( ) ; } } } ) ; if ( ! needsPassword ) { device.pressHome ( ) ; return ; } android.support.test.uiautomator.UiObject inputPasswordField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( "password" ) ) ; inputPasswordField.clearTextField ( ) ; inputPasswordField.setText ( password ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( "NEXT" ) ) . clickAndWaitForNewWindow ( ) ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.logInWithPassword ( instrumentation , password ) ; } else { android.support.test.uiautomator.UiObject inputEmailField ; if ( ( com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel ( ) ) <= 24 ) { inputEmailField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( "Email or phone" ) ) ; } else { inputEmailField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( "Email or phone" ) ) ; } inputEmailField.clearTextField ( ) ; inputEmailField.setText ( email ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . description ( "NEXT" ) ) . clickAndWaitForNewWindow ( ) ; com.android.devtools.systemimage.uitest.utils.PlayStoreUtil.logInWithPassword ( instrumentation , password ) ; } new com.android.devtools.systemimage.uitest.watchers.PlayStorePermissionsWatcher ( device ) . checkForCondition ( ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStoreConfirmationWatcher ( device ) . checkForCondition ( ) ; device.pressHome ( ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . text ( playStore ) ) . clickAndWaitForNewWindow ( ) ; new com.android.devtools.systemimage.uitest.watchers.PlayStorePermissionsWatcher ( device ) . checkForCondition ( ) ; device.pressHome ( ) ; return ; }
public void testLibProguard ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguard" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_OUTPUTS ) ) + "/proguard/release" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int proguardInt -> a" } ) ; }
private boolean migrateFromLegacyStore ( ) { if ( mWifiConfigStoreLegacy.areStoresPresent ( ) ) { com.android.server.wifi.WifiConfigStoreLegacy.WifiConfigStoreDataLegacy storeData = mWifiConfigStoreLegacy.read ( ) ; android.util.Log.d ( com.android.server.wifi.WifiConfigManagerNew.TAG , "Reading from legacy store completed" ) ; loadInternalData ( storeData.getConfigurations ( ) , storeData.getDeletedEphemeralSSIDs ( ) ) ; if ( ! ( saveToStore ( true ) ) ) { return false ; } android.util.Log.d ( com.android.server.wifi.WifiConfigManagerNew.TAG , "Migration from legacy store completed" ) ; } return true ; }
public void testFailed ( com.android.ddmlib.testrunner.TestFailure status , com.android.ddmlib.testrunner.TestIdentifier test , java.lang.String trace ) { if ( status.equals ( TestFailure.ERROR ) ) { mRunResult.reportTestFailure ( test , TestStatus.ERROR , trace ) ; } else { mRunResult.reportTestFailure ( test , TestStatus.FAILURE , trace ) ; } com.android.ddmlib.Log.d ( com.android.ddmlib.testrunner.XmlTestRunListener.LOG_TAG , java.lang.String.format ( "%s %s: %s" , test , status , trace ) ) ; }
public void testSize ( ) { com.android.test.runner.TestRequestBuilder b = new com.android.test.runner.TestRequestBuilder ( new java.io.PrintStream ( new java.io.ByteArrayOutputStream ( ) ) ) ; b.addTestClass ( com.android.test.runner.TestRequestBuilderTest.SampleTest.class . getName ( ) ) ; b.addTestSizeFilter ( "small" ) ; com.android.test.runner.TestRequest request = b.build ( mInstr ) ; org.junit.runner.JUnitCore testRunner = new org.junit.runner.JUnitCore ( ) ; org.junit.runner.Result result = testRunner.run ( request.getRequest ( ) ) ; org.junit.Assert.assertEquals ( 1 , result.getRunCount ( ) ) ; }
private void callbackUnavailableTest ( android.autofillservice.cts.CannedFillResponse response ) throws java.lang.Exception { enableService ( ) ; final android.autofillservice.cts.MyAutofillCallback callback = mActivity.registerCallback ( ) ; sReplier.addResponse ( response ) ; focusToUsername ( ) ; sReplier.getNextFillRequest ( ) ; sUiBot.assertNoDatasets ( ) ; callback.assertUiUnavailableEvent ( mActivity.mCustomView , mActivity.mUsername.text.id ) ; }
private static void assertSubArrayEquals ( byte [ ] expected , int len , byte [ ] actual ) { assertEquals ( len , actual.length ) ; for ( int i = 0 ; i < len ; ++ i ) { assertEquals ( expected [ i ] , actual [ i ] ) ; } }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( "{mTag=" + ( mTag ) ) + " mApnContext=" ) + ( mApnContext ) ) + " mProfileId=" ) + ( mProfileId ) ) + " mRat=" ) + ( mRilRat ) ) + " mOnCompletedMsg=" ) + ( com.android.internal.telephony.dataconnection.DataConnection.msgToString ( mOnCompletedMsg ) ) ) + "}" ; }
public android.content.pm.ResolveInfo getLastChosenActivity ( android.content.Intent intent , java.lang.String resolvedType , int flags ) { final int userId = android.os.UserHandle.getCallingUserId ( ) ; if ( com.android.server.pm.PackageManagerService.DEBUG_PREFERRED ) android.util.Log.v ( com.android.server.pm.PackageManagerService.TAG , ( "Querying last chosen activity for " + intent ) ) ; java.util.List < android.content.pm.ResolveInfo > query = queryIntentActivities ( intent , resolvedType , flags , userId ) ; return findPreferredActivity ( intent , resolvedType , flags , query , 0 , false , false , false , userId ) ; }
private void printCharacterData ( int depth , org.w3c.dom.Node node ) { indent ( depth ) ; mOut.append ( "<![CDATA[" ) ; mOut.append ( node.getNodeValue ( ) ) ; mOut.append ( "]]>" ) ; mOut.append ( mLineSeparator ) ; }
public static java.util.List < java.lang.String > readLines ( java.net.URL url , java.nio.charset.Charset charset ) throws java.io.IOException { return com.google.common.io.CharStreams.readLines ( com.google.common.io.Resources.newReaderSupplier ( url , charset ) ) ; }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType == ( com.android.ide.common.api.InsertType.CREATE ) ) { java.lang.String fillParent = getFillParentValueName ( ) ; com.android.ide.common.api.INode hint = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; com.android.ide.common.api.INode primary = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_BELOW , "@android:id/hint" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; } }
private static java.nio.ByteBuffer mapFile ( @ com.android.annotations.NonNull java.io.File f , long offset ) throws java.io.IOException { java.io.FileInputStream dataFile = new java.io.FileInputStream ( f ) ; try { java.nio.channels.FileChannel fc = dataFile.getChannel ( ) ; java.nio.MappedByteBuffer buffer = fc.map ( java.nio.channels.FileChannel.MapMode.READ_ONLY , offset , ( ( f.length ( ) ) - offset ) ) ; buffer.order ( java.nio.ByteOrder.LITTLE_ENDIAN ) ; return buffer ; } finally { dataFile.close ( ) ; } }
private java.io.InputStream openFileSystemContents ( java.lang.String fileName ) throws java.io.IOException { java.lang.String fullFileName = ( ( libcore.java.net.FtpURLConnectionTest.USER_HOME_DIR ) + "/" ) + fileName ; org.mockftpserver.fake.filesystem.FileEntry entry = ( ( org.mockftpserver.fake.filesystem.FileEntry ) ( fileSystem.getEntry ( fullFileName ) ) ) ; assertNotNull ( ( "File must exist with name " + fullFileName ) , entry ) ; return entry.createInputStream ( ) ; }
public void testNextLongBoundedNeg ( ) { try { long f = java.util.concurrent.ThreadLocalRandom.current ( ) . nextLong ( ( - 17 ) ) ; shouldThrow ( ) ; } catch ( java.lang.IllegalArgumentException success ) { } }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , long [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
public void testAesGcm64Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM , android.net.cts.IpSecManagerTest.getKey ( 288 ) , 64 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , null , null , authCrypt , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , null , null , authCrypt , true , 1 , true ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { android.util.Log.i ( TAG , "Canceling installation" ) ; finish ( ) ; }
private void tearDown ( android.app.admin.DevicePolicyManager dpm , android.content.ComponentName admin ) { if ( ( dpm == null ) || ( ! ( dpm.isDeviceOwnerApp ( getPackageName ( ) ) ) ) ) { return ; } dpm.setStatusBarDisabled ( admin , false ) ; dpm.setKeyguardDisabled ( admin , false ) ; dpm.clearUserRestriction ( admin , UserManager.DISALLOW_CONFIG_BLUETOOTH ) ; dpm.clearUserRestriction ( admin , UserManager.DISALLOW_CONFIG_WIFI ) ; dpm.clearDeviceOwnerApp ( getPackageName ( ) ) ; }
void sendAfterTextChanged ( android.text.Editable text ) { if ( ( mListeners ) != null ) { final java.util.ArrayList < android.text.TextWatcher > list = mListeners ; final int count = list.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { list.get ( i ) . afterTextChanged ( text ) ; } } }
public void generateApkDataEntryInManifest ( int minSdkVersion , @ com.android.annotations.NonNull java.io.File manifestFile ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.String content = ( ( ( ( ( ( ( ( ( ( ( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + ( "<manifest package=\"\" xmlns:android=\"http://schemas.android.com/apk/res/android\">\n" + " <uses-sdk android:minSdkVersion=\"" ) ) + minSdkVersion ) + "\"/>\n" ) + " <application>\n" ) + " <meta-data android:name=\"" ) + ( com.android.builder.core.BuilderConstants.ANDROID_WEAR ) ) + "\"\n" ) + " android:resource=\"@xml/" ) + ( com.android.builder.core.BuilderConstants.ANDROID_WEAR_MICRO_APK ) ) + "\" />\n" ) + " </application>\n" ) + "</manifest>\n" ; com.google.common.io.Files.write ( content , manifestFile , com.google.common.base.Charsets.UTF_8 ) ; }
private static void addZipEntry ( java.util.zip.ZipOutputStream zos , java.lang.String name , byte [ ] content ) throws com.android.timezone.distro.DistroException { try { java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry ( name ) ; zipEntry.setSize ( content.length ) ; zos.putNextEntry ( zipEntry ) ; zos.write ( content ) ; zos.closeEntry ( ) ; } catch ( java.io.IOException e ) { throw new com.android.timezone.distro.DistroException ( "Unable to add zip entry" , e ) ; } }
public void onPause ( ) { super . onPause ( ) ; if ( ( ( mPhone ) != null ) && ( ! ( com.android.settings.Utils.isWifiOnly ( getApplicationContext ( ) ) ) ) ) { mPhoneStateReceiver.unregisterIntent ( ) ; mTelephonyManager.listen ( mPhoneStateListener , PhoneStateListener.LISTEN_NONE ) ; } if ( mShowLatestAreaInfo ) { unregisterReceiver ( mAreaInfoReceiver ) ; } unregisterReceiver ( mBatteryInfoReceiver ) ; mHandler.removeMessages ( com.android.settings.deviceinfo.Status.EVENT_UPDATE_STATS ) ; }
public V get ( @ javax.annotation.Nullable java.lang.Object key ) { if ( key == null ) { return null ; } int index = ( com.google.common.collect.Hashing.smear ( key.hashCode ( ) ) ) & ( mask ) ; for ( com.google.common.collect.RegularImmutableMap.LinkedEntry < K , V > entry = table [ index ] ; entry != null ; entry = entry.next ( ) ) { K candidateKey = entry.getKey ( ) ; if ( key.equals ( candidateKey ) ) { return entry.getValue ( ) ; } } return null ; }
private java.io.File getLoggingDir ( java.lang.String testClassName , java.lang.String testMethodName ) { java.io.File loggingDir = new java.io.File ( new java.io.File ( mInstrumentation.getTargetContext ( ) . getExternalFilesDir ( null ) , testClassName ) , testMethodName ) ; loggingDir.mkdirs ( ) ; return loggingDir ; }
public void copyFrom ( com.android.server.pm.PackageSettingBase base ) { grantedPermissions = base.grantedPermissions ; gids = base.gids ; timeStamp = base.timeStamp ; firstInstallTime = base.firstInstallTime ; lastUpdateTime = base.lastUpdateTime ; signatures = base.signatures ; permissionsFixed = base.permissionsFixed ; haveGids = base.haveGids ; userState.clear ( ) ; for ( int i = 0 ; i < ( base.userState.size ( ) ) ; i ++ ) { userState.put ( base.userState.keyAt ( i ) , base.userState.valueAt ( i ) ) ; } installStatus = base.installStatus ; keySetData = base.keySetData ; }
public java.lang.String checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { if ( ! ( com.android.jack.util.NamingTools.isFullMethodName ( string ) ) ) { throw new com.android.sched.util.codec.ParsingException ( ( ( ( ( "The value must be " + ( getUsage ( ) ) ) + " but is '" ) + string ) + "'" ) ) ; } return string ; }
private void modifyClass ( org.objectweb.asm.tree.ClassNode classNode ) { classNode.access &= ~ ( org.objectweb.asm.Opcodes.ACC_FINAL ) ; java.util.List < org.objectweb.asm.tree.MethodNode > methodNodes = classNode.methods ; for ( org.objectweb.asm.tree.MethodNode methodNode : methodNodes ) { methodNode.access &= ~ ( org.objectweb.asm.Opcodes.ACC_FINAL ) ; fixMethodBody ( methodNode , classNode ) ; } }
public java.lang.Package [ ] getInstalledPackage ( ) { com.android.sdklib.internal.repository.LocalSdkParser parser = getLocalSdkParser ( ) ; java.lang.Package [ ] packages = parser.getPackages ( ) ; if ( packages == null ) { packages = parser.parseSdk ( getOsSdkRoot ( ) , getSdkManager ( ) , getSdkLog ( ) ) ; } return packages ; }
public java.lang.String toString ( ) { java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; long bioCtx = org.conscrypt.NativeCrypto.create_BIO_OutputStream ( os ) ; try { org.conscrypt.NativeCrypto.X509_print_ex ( bioCtx , mContext , 0 , 0 ) ; return os.toString ( ) ; } finally { org.conscrypt.NativeCrypto.BIO_free ( bioCtx ) ; } }
public void testLayerDoesNotTriggerLifecycleMethods ( ) throws java.lang.Exception { mTestActivity.startTest ( Utils.LIFECYCLE ) ; waitForAssistantToBeReady ( mReadyLatch ) ; mTestActivity.start3pApp ( Utils.LIFECYCLE ) ; waitForOnResume ( ) ; startSession ( ) ; waitForContext ( ) ; waitAndSeeIfLifecycleMethodsAreTriggered ( ) ; }
protected void createFilter ( com.android.gallery3d.filtershow.filters.Resources res , float scaleFactor , int quality , android.support.v8.renderscript.Allocation in ) { android.support.v8.renderscript.RenderScript rsCtx = getRenderScriptContext ( ) ; android.support.v8.renderscript.Type.Builder tb_float = new android.support.v8.renderscript.Type.Builder ( rsCtx , android.support.v8.renderscript.Element.F32_4 ( rsCtx ) ) ; tb_float.setX ( in.getType ( ) . getX ( ) ) ; tb_float.setY ( in.getType ( ) . getY ( ) ) ; mScript = new com.android.gallery3d.filtershow.filters.ScriptC_saturation ( rsCtx ) ; }
public com.android.ide.common.api.DropFeedback callOnDropMove ( com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy targetNode , com.android.ide.common.api.IDragElement [ ] elements , com.android.ide.common.api.DropFeedback feedback , com.android.ide.common.api.Point where ) { com.android.ide.common.api.IViewRule rule = loadRule ( targetNode.getNode ( ) ) ; if ( rule != null ) { try { return rule.onDropMove ( targetNode , elements , feedback , where ) ; } catch ( java.lang.Exception e ) { logError ( "%s.onDropMove() failed: %s" , rule.getClass ( ) . getSimpleName ( ) , e.toString ( ) ) ; } } return null ; }
private boolean contactsDeleted ( long lastModified ) { try ( android.database.Cursor cursor = appContext.getContentResolver ( ) . query ( DeletedContacts.CONTENT_URI , new java.lang.String [ ] { android.provider.ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP } , ( ( android.provider.ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP ) + " > ?" ) , new java.lang.String [ ] { java.lang.Long.toString ( lastModified ) } , null ) ) { return ( cursor.getCount ( ) ) > 0 ; } }
public void replaceWith ( com.android.layoutlib.api.ResourceValue value ) { assert value instanceof com.android.layoutlib.api.StyleResourceValue ; super . replaceWith ( value ) ; if ( value instanceof com.android.layoutlib.api.StyleResourceValue ) { mItems.clear ( ) ; mItems.putAll ( ( ( com.android.layoutlib.api.StyleResourceValue ) ( value ) ) . mItems ) ; } }
public com.android.jack.dx.io.FieldId get ( int index ) { com.android.jack.dx.io.DexBuffer.checkBounds ( index , tableOfContents.fieldIds.size ) ; return open ( ( ( tableOfContents.fieldIds.off ) + ( ( com.android.jack.dx.dex.SizeOf.MEMBER_ID_ITEM ) * index ) ) ) . readFieldId ( ) ; }
private static void applyInvokeWithSecurityPolicy ( com.android.internal.os.ZygoteConnection.Arguments args , android.net.Credentials peer ) throws com.android.internal.os.ZygoteSecurityException { int peerUid = peer.getUid ( ) ; if ( ( ( args.invokeWith ) != null ) && ( peerUid != 0 ) ) { throw new com.android.internal.os.ZygoteSecurityException ( ( "Peer is not permitted to specify " + "an explicit invoke-with wrapper command" ) ) ; } }
private void logValidationProbe ( long durationMs , int probeType , int probeResult ) { probeType = android.net.metrics.ValidationProbeEvent.makeProbeType ( probeType , validationStage ( ) . isFirstValidation ) ; mMetricsLog.log ( new android.net.metrics.ValidationProbeEvent ( mNetId , durationMs , probeType , probeResult ) ) ; }
public void setMute ( boolean enableMute , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_SET_MUTE , response ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " " ) + enableMute ) ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( ( enableMute ? 1 : 0 ) ) ; send ( rr ) ; }
public void reportConnectionFailureIsIgnoredWithoutVerboseMode ( ) { final boolean verbosityToggle = false ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionFailure ( ) ; org.mockito.Mockito.verify ( mWifiNative ) . getTxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; org.mockito.Mockito.verify ( mWifiNative ) . getRxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; }
public static void computeCospi ( android.renderscript.cts.TestCospi.ArgumentsFloatFloat args ) { args.out = new android.renderscript.cts.Floaty ( android.renderscript.cts.CoreMathVerifier.cos ( ( ( args.in ) * ( ( float ) ( java.lang.Math.PI ) ) ) ) , 4 , 128 ) ; }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
private static void child ( ) throws java.lang.Exception { java.lang.System.out.println ( "spawning child" ) ; java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder ( "sleep" , "5" ) ; java.lang.Process proc = pb.start ( ) ; java.lang.Thread.sleep ( 1000 ) ; Main.checkManager ( ) ; proc.waitFor ( ) ; java.lang.System.out.println ( "child died" ) ; }
public android.database.Cursor queryAggregationSuggestions ( android.database.sqlite.SQLiteQueryBuilder qb , java.lang.String [ ] projection , long contactId , int maxSuggestions , java.lang.String filter ) { final android.database.sqlite.SQLiteDatabase db = mDbHelper.getReadableDatabase ( ) ; java.util.List < com.android.providers.contacts.ContactMatcher.MatchScore > bestMatches = findMatchingContacts ( db , contactId ) ; return queryMatchingContacts ( qb , db , contactId , projection , bestMatches , maxSuggestions , filter ) ; }
private static boolean meetsAssistedDialingCriteria ( android.content.ContentValues row1 , android.content.ContentValues row2 ) { int row1Assisted = ( row1.getAsInteger ( AnnotatedCallLog.FEATURES ) ) & ( com.android.dialer.compat.telephony.TelephonyManagerCompat.FEATURES_ASSISTED_DIALING ) ; int row2Assisted = ( row2.getAsInteger ( AnnotatedCallLog.FEATURES ) ) & ( com.android.dialer.compat.telephony.TelephonyManagerCompat.FEATURES_ASSISTED_DIALING ) ; return row1Assisted == row2Assisted ; }
public final void transform ( org.eclipse.jdt.core.dom.CompilationUnit cu , org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite ) { java.util.List < org.eclipse.jdt.core.dom.Comment > comments = cu.getCommentList ( ) ; for ( org.eclipse.jdt.core.dom.Comment comment : com.google.common.collect.Lists.reverse ( comments ) ) { if ( comment instanceof org.eclipse.jdt.core.dom.Javadoc ) { org.eclipse.jdt.core.dom.Javadoc javadoc = ( ( org.eclipse.jdt.core.dom.Javadoc ) ( comment ) ) ; visit ( javadoc , rewrite ) ; } } }
com.android.sched.vfs.DirectFS.DirectVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.DirectFS.DirectVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) ) != 0 ; java.io.File file = new java.io.File ( parent.getNativePath ( ) , name ) ; com.android.sched.util.file.Directory.check ( file , new com.android.sched.util.location.DirectoryLocation ( file ) ) ; return new com.android.sched.vfs.DirectFS.DirectNonRootVDir ( this , parent , name ) ; }
private static org.apache.http.HttpEntity entityFromConnection ( java.net.HttpURLConnection connection ) { org.apache.http.entity.BasicHttpEntity entity = new org.apache.http.entity.BasicHttpEntity ( ) ; java.io.InputStream inputStream ; try { inputStream = connection.getInputStream ( ) ; } catch ( java.io.IOException ioe ) { inputStream = connection.getErrorStream ( ) ; } entity.setContent ( inputStream ) ; entity.setContentLength ( connection.getContentLength ( ) ) ; entity.setContentEncoding ( connection.getContentEncoding ( ) ) ; entity.setContentType ( connection.getContentType ( ) ) ; return entity ; }
public void testSetValues001 ( ) { logWriter.println ( "testSetValues001 started" ) ; synchronizer.receiveMessage ( JPDADebuggeeSynchronizer.SGNL_READY ) ; long classID = getClassIDBySignature ( getDebuggeeSignature ( ) ) ; org.apache.harmony.jpda.tests.jdwp.ClassType.FieldInfo [ ] fields = jdwpGetFieldIDs ( classID ) ; for ( int i = 0 ; i < ( fields.length ) ; i ++ ) { org.apache.harmony.jpda.tests.jdwp.ClassType.FieldInfo field = fields [ i ] ; testField ( classID , field ) ; } }
public synchronized int getConnectionState ( ) { com.android.internal.util.IState currentState = getCurrentState ( ) ; if ( currentState == ( mConnecting ) ) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING ; } else if ( currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase ) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED ; } else if ( currentState == ( mDisconnecting ) ) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING ; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; }
public static < T > org.hamcrest.org.hamcrest.Matcher < T > sameInstance ( T object ) { return org.hamcrest.core.IsSame.sameInstance ( object ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; com.android.server.wifi.TestUtil.installWlanWifiNative ( mWifiNative ) ; mLooper = new android.os.test.TestLooper ( ) ; mRttServiceImpl = new com.android.server.wifi.RttService.RttServiceImpl ( mContext , mLooper.getLooper ( ) ) ; mRttServiceImpl.startService ( ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { if ( ( wps.setup ) == ( android.net.wifi.WpsInfo.KEYPAD ) ) { mSavedPeerConfig.wps.pin = pin.getText ( ) . toString ( ) ; } if ( android.net.wifi.p2p.WifiP2pService.DBG ) logd ( ( ( ( getName ( ) ) + " accept invitation " ) + ( mSavedPeerConfig ) ) ) ; sendMessage ( android.net.wifi.p2p.WifiP2pService.PEER_CONNECTION_USER_ACCEPT ) ; }
public void testStrategyFileSimple ( ) throws java.lang.Exception { final android.support.v4.content.FileProvider.SimplePathStrategy strat = new android.support.v4.content.FileProvider.SimplePathStrategy ( "authority" ) ; strat.addRoot ( "tag" , mContext.getFilesDir ( ) ) ; java.io.File file = android.support.v4.content.FileProviderTest.buildPath ( mContext.getFilesDir ( ) , "file.test" ) ; assertEquals ( file.getPath ( ) , strat.getFileForUri ( android.net.Uri.parse ( "content://authority/tag/file.test" ) ) . getPath ( ) ) ; file = android.support.v4.content.FileProviderTest.buildPath ( mContext.getFilesDir ( ) , "subdir" , "file.test" ) ; assertEquals ( file.getPath ( ) , strat.getFileForUri ( android.net.Uri.parse ( "content://authority/tag/subdir/file.test" ) ) . getPath ( ) ) ; }
public void writeIpAndProxyConfigurations ( android.net.IpConfiguration config ) { android.util.SparseArray < android.net.IpConfiguration > networks = new android.util.SparseArray < android.net.IpConfiguration > ( ) ; networks.put ( 0 , config ) ; writeIpAndProxyConfigurations ( com.android.server.ethernet.EthernetConfigStore.ipConfigFile , networks ) ; }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.CachedDirectFS ( new com.android.sched.util.file.Directory ( string , context.getRunnableHooks ( ) , existence , permissions , change ) , permissions ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e ) ; } }
public static java.util.List < com.google.gct.idea.appengine.wizard.AppEngineTemplates.TemplateInfo > getLocalTemplates ( ) { com.google.gct.idea.appengine.wizard.AppEngineTemplates.LOG.info ( "Populating built-in App Engine templates..." ) ; java.io.File jarPath = new java.io.File ( com.intellij.util.PathUtil.getJarPathForClass ( com.google.gct.idea.appengine.wizard.AppEngineTemplates.class ) ) ; if ( jarPath.isFile ( ) ) { jarPath = jarPath.getParentFile ( ) ; } java.io.File root = new java.io.File ( jarPath , com.google.gct.idea.appengine.wizard.AppEngineTemplates.TEMPLATES_DIR ) ; if ( ! ( root.exists ( ) ) ) { com.google.gct.idea.appengine.wizard.AppEngineTemplates.LOG.error ( "Failed to find templates directory, perhaps your cloud tools plugin is corrupt?" ) ; } return com.google.gct.idea.appengine.wizard.AppEngineTemplates.populateTemplates ( root ) ; }
public void waitForCalls ( int expectedCalls , long timeout ) throws java.lang.InterruptedException { synchronized ( mLock ) { mExpectedCalls = expectedCalls ; if ( ( mCalls ) < ( mExpectedCalls ) ) { mLock.wait ( timeout ) ; } } }
private void inlineSubroutines ( ) { if ( configuration.verbose ) { java.lang.System.out.println ( "Inlining subroutines..." ) ; } new proguard.SubroutineInliner ( configuration ) . execute ( programClassPool ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { final com.intellij.openapi.module.Module selectedModule = LangDataKeys.MODULE.getData ( e.getDataContext ( ) ) ; com.google.gct.idea.stats.UsageTracker.getInstance ( ) . trackEvent ( GctTracking.CATEGORY , GctTracking.DEPLOY , "show.dialog" , null ) ; com.google.gct.idea.appengine.deploy.AppEngineUpdateDialog.show ( e.getProject ( ) , selectedModule ) ; }
private static com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode createNode ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode parent , java.lang.String fqn , boolean hasChildren ) { java.lang.String name = fqn.substring ( ( ( fqn.lastIndexOf ( '.' ) ) + 1 ) ) ; com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor descriptor = com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfoTest.createDesc ( name , fqn , hasChildren ) ; if ( parent != null ) { return ( ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ) ( parent.appendNewUiChild ( descriptor ) ) ) ; } else { return new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ( descriptor ) ; } }
public java.lang.String guessZoneIdByCountry ( java.lang.String isoCountryCode , long whenMillis ) { libcore.util.CountryTimeZones countryTimeZones = libcore.util.TimeZoneFinder.getInstance ( ) . lookupCountryTimeZones ( isoCountryCode ) ; if ( countryTimeZones == null ) { return null ; } if ( countryTimeZones.isDefaultOkForCountryTimeZoneDetection ( whenMillis ) ) { return countryTimeZones.getDefaultTimeZoneId ( ) ; } return null ; }
public static org.w3c.dom.Document parse ( @ com.android.annotations.NonNull byte [ ] data ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String xml = com.android.utils.PositionXmlParser.getXmlString ( data ) ; xml = com.android.utils.XmlUtils.stripBom ( xml ) ; return com.android.utils.PositionXmlParser.parse ( xml , new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) , true ) ; }
public javax.security.auth.x500.X500Principal getIssuerX500Principal ( ) { if ( ( info ) == null ) { return null ; } try { javax.security.auth.x500.X500Principal issuer = ( ( javax.security.auth.x500.X500Principal ) ( info.get ( ( ( ( sun.security.x509.CertificateIssuerName.NAME ) + ( sun.security.x509.X509CertImpl.DOT ) ) + ( sun.security.x509.CertificateIssuerName.DN_PRINCIPAL ) ) ) ) ) ; return issuer ; } catch ( java.lang.Exception e ) { return null ; } }
public void testInvalidInsertionCarrierInfo ( ) { try { android.content.ContentValues contentValues = new android.content.ContentValues ( ) ; contentValues.put ( CarrierIdentification.GID1 , com.android.providers.telephony.CarrierIdProviderTest.dummy_gid1 ) ; mContentResolver.insert ( CarrierIdentification.CONTENT_URI , contentValues ) ; org.junit.Assert.fail ( "should throw an exception for null mccmnc" ) ; } catch ( java.lang.Exception e ) { android.util.Log.d ( com.android.providers.telephony.CarrierIdProviderTest.TAG , ( "Error inserting carrier info:" + e ) ) ; assertTrue ( ( e instanceof android.database.SQLException ) ) ; assertFalse ( mContentObserver.changed ) ; } }
private void sendInfoNotifications ( java.lang.String callId , com.android.incallui.ContactInfoCache.ContactCacheEntry entry ) { com.android.dialer.common.Assert.isMainThread ( ) ; final java.util.Set < com.android.incallui.ContactInfoCache.ContactInfoCacheCallback > callBacks = mCallBacks.get ( callId ) ; if ( callBacks != null ) { for ( com.android.incallui.ContactInfoCache.ContactInfoCacheCallback callBack : callBacks ) { callBack.onContactInfoComplete ( callId , entry ) ; } } }
public void copyFrom ( float [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFrom" ) ; mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public android.os.Bundle getApplicationRestrictions ( @ android.annotation.Nullable android.content.ComponentName admin , java.lang.String packageName ) { throwIfParentInstance ( "getApplicationRestrictions" ) ; if ( ( mService ) != null ) { try { return mService.getApplicationRestrictions ( admin , packageName ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return null ; }
public void setExternalCallStateListener ( com.android.ims.ImsExternalCallStateListener externalCallStateListener ) throws com.android.ims.ImsException { try { if ( com.android.ims.ImsMultiEndpoint.DBG ) android.telephony.Rlog.d ( com.android.ims.ImsMultiEndpoint.TAG , "setExternalCallStateListener" ) ; mImsMultiendpoint.setListener ( new com.android.ims.ImsMultiEndpoint.ImsExternalCallStateListenerProxy ( externalCallStateListener ) ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "setExternalCallStateListener could not be set." , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void mouseDoubleClick ( org.eclipse.swt.events.MouseEvent e ) { com.android.hierarchyviewerlib.ui.util.DrawableViewNode clickedNode = null ; synchronized ( this ) { if ( ( ( tree ) != null ) && ( ( viewport ) != null ) ) { com.android.hierarchyviewerlib.ui.util.DrawableViewNode.Point pt = transformPoint ( e.x , e.y ) ; clickedNode = tree.getSelected ( pt.x , pt.y ) ; } } if ( clickedNode != null ) { com.android.hierarchyviewerlib.HierarchyViewerDirector.getDirector ( ) . showCapture ( getShell ( ) , clickedNode.viewNode ) ; } }
public void removeTasks ( java.util.List < com.intellij.openapi.externalSystem.model.task.TaskData > tasks , com.intellij.openapi.externalSystem.service.project.manage.ExternalSystemTaskActivator.Phase phase ) { if ( tasks.isEmpty ( ) ) return ; final com.intellij.openapi.externalSystem.service.project.manage.ExternalProjectsManager.ExternalProjectsStateProvider stateProvider = com.intellij.openapi.externalSystem.service.project.manage.ExternalProjectsManager.getInstance ( myProject ) . getStateProvider ( ) ; for ( com.intellij.openapi.externalSystem.model.task.TaskData task : tasks ) { final com.intellij.openapi.externalSystem.service.project.manage.TaskActivationState taskActivationState = stateProvider.getTasksActivation ( task.getOwner ( ) , task.getLinkedExternalProjectPath ( ) ) ; taskActivationState.getTasks ( phase ) . remove ( task.getName ( ) ) ; } fireTasksChanged ( ) ; }
public void setSoWriteTimeout ( int writeTimeoutMilliseconds ) throws java.net.SocketException { this . writeTimeoutMilliseconds = writeTimeoutMilliseconds ; android.system.StructTimeval tv = android.system.StructTimeval.fromMillis ( writeTimeoutMilliseconds ) ; try { android.system.Os.setsockoptTimeval ( getFileDescriptor$ ( ) , android.system.OsConstants.SOL_SOCKET , android.system.OsConstants.SO_SNDTIMEO , tv ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsSocketException ( ) ; } }
private void makeFakeSysImgInternal ( java.io.File imagesDir , java.lang.String abiType ) throws java.io.IOException { imagesDir.mkdirs ( ) ; new java.io.File ( imagesDir , "userdata.img" ) . createNewFile ( ) ; java.io.File sourceProp = new java.io.File ( imagesDir , com.android.SdkConstants.FN_SOURCE_PROP ) ; sourceProp.createNewFile ( ) ; java.io.FileWriter out = new java.io.FileWriter ( sourceProp ) ; out.write ( ( ( com.android.sdklib.repository.PkgProps.VERSION_API_LEVEL ) + "=0\n" ) ) ; out.write ( ( ( ( ( com.android.sdklib.repository.PkgProps.SYS_IMG_ABI ) + "=" ) + abiType ) + "\n" ) ) ; out.close ( ) ; }
public void test2 ( ) { com.android.utils.HtmlBuilder builder = new com.android.utils.HtmlBuilder ( ) ; builder.add ( "Plain" ) . newline ( ) . addLink ( "mylink" , "runnable:0" ) . newline ( ) ; builder.beginList ( ) . listItem ( ) . add ( "item 1" ) . listItem ( ) . add ( "item 2" ) . endList ( ) ; assertEquals ( ( "Plain<BR/>\n" + ( ( ( ( "<A HREF=\"runnable:0\">mylink</A><BR/>\n" + "<DL>\n" ) + "<DD>-&NBSP;item 1\n" ) + "<DD>-&NBSP;item 2\n" ) + "</DL>" ) ) , builder.getHtml ( ) ) ; }
private void loadViewServerInfoAndWindows ( final com.android.ddmlib.IDevice device ) { executeInBackground ( new java.lang.Runnable ( ) { public void run ( ) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo ( device ) ; if ( viewServerInfo == null ) { return ; } com.android.hierarchyviewerlib.device.Window [ ] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows ( device ) ; com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel ( ) . addDevice ( device , windows ) ; if ( ( viewServerInfo.protocolVersion ) >= 3 ) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges ( com.android.hierarchyviewerlib.HierarchyViewerDirector.this , device ) ; focusChanged ( device ) ; } } } ) ; }
public void run ( ) { java.io.InputStreamReader is = new java.io.InputStreamReader ( process.getInputStream ( ) ) ; java.io.BufferedReader outReader = new java.io.BufferedReader ( is ) ; try { while ( true ) { java.lang.String line = outReader.readLine ( ) ; if ( output != null ) { output.out ( line ) ; } if ( line == null ) { break ; } } } catch ( java.io.IOException e ) { } }
static com.android.internal.telephony.cat.IconLoader getInstance ( android.os.Handler caller , com.android.internal.telephony.uicc.IccFileHandler fh ) { if ( ( com.android.internal.telephony.cat.IconLoader.sLoader ) != null ) { return com.android.internal.telephony.cat.IconLoader.sLoader ; } if ( fh != null ) { android.os.HandlerThread thread = new android.os.HandlerThread ( "Cat Icon Loader" ) ; thread.start ( ) ; return new com.android.internal.telephony.cat.IconLoader ( thread.getLooper ( ) , fh ) ; } return null ; }
private void stopResultProcessing ( boolean allResultsArrived ) { if ( ! allResultsArrived ) { for ( com.google.gct.testing.ConfigurationResult result : results.values ( ) ) { if ( ! ( markedAsFinishedConfigurations.contains ( result ) ) ) { resultParser.getTestRunListener ( ) . stopTestConfiguration ( result.getConfigurationInstance ( ) . getDisplayString ( ) , ConfigurationStopReason.TIMED_OUT ) ; } } } resultParser.flush ( ) ; }
public void requestNetwork ( android.net.NetworkRequest request , int timeoutMs , android.net.ConnectivityManager.NetworkCallback networkCallback ) { if ( timeoutMs <= 0 ) { throw new java.lang.IllegalArgumentException ( ( "Non-positive timeoutMs: " + timeoutMs ) ) ; } int legacyType = inferLegacyTypeForNetworkCapabilities ( request.networkCapabilities ) ; requestNetwork ( request , networkCallback , timeoutMs , legacyType , getDefaultHandler ( ) ) ; }
public static java.time.temporal.WeekFields of ( java.util.Locale locale ) { java.util.Objects.requireNonNull ( locale , "locale" ) ; locale = new java.util.Locale ( locale.getLanguage ( ) , locale.getCountry ( ) ) ; int calDow = sun.util.locale.provider.CalendarDataUtility.retrieveFirstDayOfWeek ( locale ) ; java.time.DayOfWeek dow = java.time.DayOfWeek.SUNDAY.plus ( ( calDow - 1 ) ) ; int minDays = sun.util.locale.provider.CalendarDataUtility.retrieveMinimalDaysInFirstWeek ( locale ) ; return java.time.temporal.WeekFields.of ( dow , minDays ) ; }
protected java.lang.String createMessage ( @ javax.annotation.Nonnull java.lang.String description ) { return ( ( ( description + " cannot have its " ) + ( ( permission ) == ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) ? "readable " : ( permission ) == ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ? "writable " : ( permission ) == ( com.android.sched.util.file.FileOrDirectory.Permission.EXECUTE ) ? "executable " : "???" ) ) + "permission set" ) + ( ( change ) == ( com.android.sched.util.file.FileOrDirectory.ChangePermission.EVERYBODY ) ? "for everybody" : "" ) ; }
void removeCall ( java.lang.String callId ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.removeCall ( callId ) ; } catch ( android.os.RemoteException ignored ) { } } }
void onRemovedFromCallList ( ) { com.android.dialer.common.LogUtil.enterBlock ( "DialerCall.onRemovedFromCallList" ) ; videoTechManager.dispatchRemovedFromCallList ( ) ; if ( ( rttTranscript ) != null ) { com.google.common.util.concurrent.Futures.addCallback ( com.android.dialer.rtt.RttTranscriptUtil.saveRttTranscript ( context , rttTranscript ) , new com.android.dialer.common.concurrent.DefaultFutureCallback ( ) , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; rttTranscript = null ; } }
public void stop ( ) { disposeConnection ( ) ; finishProcessAndRedirectors ( ) ; closeConnection ( ) ; if ( settings.isListenConnectorKind ( ) ) { try { transport.stopListening ( ) ; } catch ( java.io.IOException e ) { logWriter.println ( ( "IOException in stopping transport listening: " + e ) ) ; } } }
public static java.security.KeyFactory getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { if ( provider == null ) { throw new java.lang.IllegalArgumentException ( ) ; } if ( algorithm == null ) { throw new java.lang.NullPointerException ( "algorithm == null" ) ; } java.lang.Object spi = java.security.KeyFactory.ENGINE.getInstance ( algorithm , provider , null ) ; return new java.security.KeyFactory ( ( ( java.security.KeyFactorySpi ) ( spi ) ) , provider , algorithm ) ; }
public void writeStringData ( java.lang.String value ) { try { int length = value.length ( ) ; writeUleb128 ( length ) ; write ( com.android.dx.util.Mutf8.encode ( value ) ) ; writeByte ( 0 ) ; } catch ( java.io.UTFDataFormatException e ) { throw new java.lang.AssertionError ( ) ; } }
private static void loadRootRules ( ) { if ( ( android.icu.impl.coll.CollationLoader.rootRules ) != null ) { return ; } synchronized ( android.icu.impl.coll.CollationLoader.class ) { if ( ( android.icu.impl.coll.CollationLoader.rootRules ) == null ) { android.icu.util.UResourceBundle rootBundle = android.icu.util.UResourceBundle.getBundleInstance ( ICUResourceBundle.ICU_COLLATION_BASE_NAME , ULocale.ROOT ) ; android.icu.impl.coll.CollationLoader.rootRules = rootBundle.getString ( "UCARules" ) ; } } }
final void get ( char [ ] dst , int dstOffset , int charCount ) { int byteCount = checkGetBounds ( SizeOf.CHAR , dst.length , dstOffset , charCount ) ; this . block.peekCharArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , charCount , order.needsSwap ) ; position += byteCount ; }
public int getMaxTransceiveLength ( int technology ) { switch ( technology ) { case android.nfc.tech.TagTechnology.NFC_A : case android.nfc.tech.TagTechnology.MIFARE_CLASSIC : case android.nfc.tech.TagTechnology.MIFARE_ULTRALIGHT : return 253 ; case android.nfc.tech.TagTechnology.NFC_B : return 253 ; case android.nfc.tech.TagTechnology.NFC_V : return 253 ; case android.nfc.tech.TagTechnology.ISO_DEP : return mIsoDepMaxTransceiveLength ; case android.nfc.tech.TagTechnology.NFC_F : return 252 ; default : return 0 ; } }
public static java.lang.String getMethodSignatureWithoutName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( '(' ) ; for ( com.android.jack.ir.ast.JType p : call.getMethodId ( ) . getParamTypes ( ) ) { sb.append ( com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( p ) ) ; } sb.append ( ')' ) ; sb.append ( com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( call.getType ( ) ) ) ; return sb.toString ( ) ; }
public void setVideoState ( java.lang.String callId , int videoState ) { android.telecom.Log.startSession ( "CSW.sVS" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setVideoState %s %d" , callId , videoState ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setVideoState ( videoState ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void testLoadSample_1 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = getTestResource ( "/com/android/sdklib/testdata/addons_list_sample_1.xml" ) ; int version = mFetcher._getXmlSchemaVersion ( xmlStream ) ; assertEquals ( 1 , version ) ; java.lang.Boolean [ ] validatorFound = new java.lang.Boolean [ ] { java.lang.Boolean.FALSE } ; java.lang.String [ ] validationError = new java.lang.String [ ] { null } ; java.lang.String url = "not-a-valid-url://addons_list.xml" ; java.lang.String uri = mFetcher._validateXml ( xmlStream , url , version , validationError , validatorFound ) ; assertEquals ( java.lang.Boolean.TRUE , validatorFound [ 0 ] ) ; assertEquals ( null , validationError [ 0 ] ) ; assertEquals ( com.android.sdklib.repository.SdkAddonsListConstants.getSchemaUri ( 1 ) , uri ) ; com.android.sdklib.internal.repository.MockMonitor monitor = new com.android.sdklib.internal.repository.MockMonitor ( ) ; org.w3c.dom.Document doc = mFetcher._getDocument ( xmlStream , monitor ) ; assertNotNull ( doc ) ; com.android.sdklib.internal.repository.AddonsListFetcher.Site [ ] result = mFetcher._parseAddonsList ( doc , uri , monitor ) ; assertEquals ( "" , monitor.getCapturedDescriptions ( ) ) ; assertEquals ( "" , monitor.getCapturedLog ( ) ) ; assertEquals ( "" , monitor.getCapturedErrorLog ( ) ) ; assertEquals ( "" , monitor.getCapturedVerboseLog ( ) ) ; assertEquals ( 3 , result.length ) ; assertEquals ( "My Example Add-ons." , result [ 0 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/my_addons.xml" , result [ 0 ] . getUrl ( ) ) ; assertEquals ( "ありがとうございます。" , result [ 1 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.co.jp/addons.xml" , result [ 1 ] . getUrl ( ) ) ; assertEquals ( "Example of directory URL." , result [ 2 ] . getUiName ( ) ) ; assertEquals ( "http://www.example.com/" , result [ 2 ] . getUrl ( ) ) ; }
public static java.util.List < java.lang.Integer > getInts ( android.security.keymaster.KeyCharacteristics keyCharacteristics , int tag ) { java.util.List < java.lang.Integer > result = new java.util.ArrayList < java.lang.Integer > ( ) ; result.addAll ( keyCharacteristics.hwEnforced.getInts ( tag ) ) ; result.addAll ( keyCharacteristics.swEnforced.getInts ( tag ) ) ; return result ; }
public java.lang.String getName ( android.icu.impl.NameType type ) { if ( ( ( _names ) != null ) && ( ( type.ordinal ( ) ) < ( _names.length ) ) ) { return _names [ type.ordinal ( ) ] ; } else { return null ; } }
private void simPinChanged ( boolean success ) { if ( ! success ) { android.widget.Toast.makeText ( this , mRes.getString ( R.string.sim_change_failed ) , Toast.LENGTH_SHORT ) . show ( ) ; } else { android.widget.Toast.makeText ( this , mRes.getString ( R.string.sim_change_succeeded ) , Toast.LENGTH_SHORT ) . show ( ) ; } resetDialogState ( ) ; }
private java.lang.String getDefaultHttpMethod ( com.google.gct.idea.appengine.validation.PsiMethod psiMethod ) { java.lang.String methodName = psiMethod.getName ( ) ; for ( com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod entry : com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod.values ( ) ) { if ( methodName.startsWith ( entry.getMethodNamePrefix ( ) ) ) { return entry.getHttpMethod ( ) ; } } throw new java.lang.AssertionError ( ( ( "It's impossible for method" + ( psiMethod.getName ( ) ) ) + " to map to no REST path." ) ) ; }
void setIsConferenced ( java.lang.String callId , java.lang.String conferenceCallId ) { for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { android.telecom.Log.d ( this , "sending connection %s with conference %s" , callId , conferenceCallId ) ; adapter.setIsConferenced ( callId , conferenceCallId ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void callSessionMergeFailed ( com.android.ims.internal.ImsCallSession session , com.android.ims.ImsReasonInfo reasonInfo ) { loge ( ( ( ( "callSessionMergeFailed :: session=" + session ) + "reasonInfo=" ) + reasonInfo ) ) ; synchronized ( this ) { if ( isMergeHost ( ) ) { processMergeFailed ( reasonInfo ) ; } else if ( ( mMergeHost ) != null ) { mMergeHost.processMergeFailed ( reasonInfo ) ; } else { loge ( "callSessionMergeFailed :: No merge host for this conference!" ) ; } } }
public void testLamba040_ByLib ( ) throws java.lang.Exception { java.io.File lib2 = makeLibrary ( new java.io.File [ ] { } , new java.io.File ( TEST001.directory , "lib2" ) ) ; java.io.File lib1 = makeLibrary ( new java.io.File [ ] { lib2 } , new java.io.File ( TEST001.directory , "lib1" ) ) ; java.io.File libJack = makeLibrary ( new java.io.File [ ] { lib2 , lib1 } , new java.io.File ( TEST001.directory , "jack" ) ) ; test ( TEST001.jUnit , lib2 , lib1 , libJack ) ; }
public boolean checkForCondition ( ) { android.support.test.uiautomator.UiObject unlock = mDevice.findObject ( new android.support.test.uiautomator.UiSelector ( ) . packageName ( "com.android.keyboard" ) . descriptionContains ( "Slide area" ) ) ; android.support.test.uiautomator.UiObject unlock2 = mDevice.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( "com.android.systemui:id/lock_icon" ) ) ; if ( ( unlock.exists ( ) ) || ( unlock2.exists ( ) ) ) { mDevice.pressMenu ( ) ; return true ; } return false ; }
public static com.android.sdklib.AndroidVersion convertVersion ( @ com.android.annotations.NonNull com.android.builder.model.ApiVersion api , @ com.android.annotations.Nullable com.android.sdklib.IAndroidTarget [ ] targets ) { java.lang.String codename = api.getCodename ( ) ; if ( codename != null ) { com.android.sdklib.AndroidVersion version = com.android.ide.common.sdk.SdkVersionInfo.getVersion ( codename , targets ) ; if ( version != null ) { return version ; } return new com.android.sdklib.AndroidVersion ( api.getApiLevel ( ) , codename ) ; } return new com.android.sdklib.AndroidVersion ( api.getApiLevel ( ) , null ) ; }
public final int compareTo ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.ClassObj o ) { return mClassName.compareTo ( o.mClassName ) ; }
public void testDefaultMethod018 ( ) throws java.lang.Exception { run ( DEFAULTMETHOD018 ) ; }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.internal.telephony.uicc.UiccController.EVENT_ICC_STATUS_CHANGED : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_ICC_STATUS_CHANGED, calling getIccCardStatus" ) ; mCi.getIccCardStatus ( obtainMessage ( com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE ) ) ; break ; case com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_GET_ICC_STATUS_DONE" ) ; android.os.AsyncResult ar = ( ( android.os.AsyncResult ) ( msg.obj ) ) ; onGetIccCardStatusDone ( ar ) ; break ; default : android.util.Log.e ( com.android.internal.telephony.uicc.UiccController.LOG_TAG , ( " Unknown Event " + ( msg.what ) ) ) ; } }
private com.google.common.collect.TreeMultiset.AvlNode < E > floor ( java.util.Comparator < ? super E > comparator , E e ) { int cmp = comparator.compare ( e , elem ) ; if ( cmp > 0 ) { return ( right ) == null ? this : com.google.common.base.Objects.firstNonNull ( right.floor ( comparator , e ) , this ) ; } else if ( cmp == 0 ) { return this ; } else { return ( left ) == null ? null : left.floor ( comparator , e ) ; } }
public void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession ( session.getPhantomLookup ( ) , session , com.android.jack.jayce.NodeLevel.STRUCTURE ) ; for ( com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations ) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast ( exportSession ) ; loading.addAnnotation ( annotationLiteral ) ; annotationLiteral.updateParents ( loading ) ; } }
public void handleMessage ( android.os.Message msg ) { synchronized ( com.android.internal.telephony.uicc.UiccController.mLock ) { switch ( msg.what ) { case com.android.internal.telephony.uicc.UiccController.EVENT_ICC_STATUS_CHANGED : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_ICC_STATUS_CHANGED, calling getIccCardStatus" ) ; mCi.getIccCardStatus ( obtainMessage ( com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE ) ) ; break ; case com.android.internal.telephony.uicc.UiccController.EVENT_GET_ICC_STATUS_DONE : if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "Received EVENT_GET_ICC_STATUS_DONE" ) ; android.os.AsyncResult ar = ( ( android.os.AsyncResult ) ( msg.obj ) ) ; onGetIccCardStatusDone ( ar ) ; break ; default : android.util.Log.e ( com.android.internal.telephony.uicc.UiccController.LOG_TAG , ( " Unknown Event " + ( msg.what ) ) ) ; } } }
public void onSdkLoaded ( ) { com.android.sdklib.IAndroidTarget oldTarget = getRenderingTarget ( ) ; preRenderingTargetChangeCleanUp ( oldTarget ) ; com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } } }
private java.lang.String runFlushTest ( int sensorType , int maxBatchReportLatencySec , int instructionsResId ) throws java.lang.Throwable { getTestLogger ( ) . logInstructions ( instructionsResId ) ; waitForUserToBegin ( ) ; int maxBatchReportLatencyUs = ( ( int ) ( java.util.concurrent.TimeUnit.SECONDS.toMicros ( maxBatchReportLatencySec ) ) ) ; android.hardware.cts.helpers.TestSensorEnvironment environment = new android.hardware.cts.helpers.TestSensorEnvironment ( getApplicationContext ( ) , sensorType , com.android.cts.verifier.sensors.BatchingTestActivity.SENSOR_BATCHING_RATE_US , maxBatchReportLatencyUs ) ; int flushDurationSec = maxBatchReportLatencySec / 2 ; android.hardware.cts.helpers.sensoroperations.TestSensorFlushOperation operation = new android.hardware.cts.helpers.sensoroperations.TestSensorFlushOperation ( environment , flushDurationSec , java.util.concurrent.TimeUnit.SECONDS ) ; return executeTest ( operation ) ; }
public void testProviderService_supportsParameter_SupportedKeyFormats_Failure ( ) throws java.lang.Exception { java.security.Provider provider = new libcore.java.security.ProviderTest.MockProvider ( "MockProvider" ) { public void setup ( ) { put ( "Signature.FOO" , libcore.java.security.ProviderTest.MockSpi.class . getName ( ) ) ; put ( "Signature.FOO SupportedKeyFormats" , "Invalid" ) ; } } ; java.security.Security.addProvider ( provider ) ; try { java.security.Provider.Service service = provider.getService ( "Signature" , "FOO" ) ; assertFalse ( service.supportsParameter ( new libcore.javax.crypto.MockKey ( ) ) ) ; } finally { java.security.Security.removeProvider ( provider.getName ( ) ) ; } }
public void testWrongVariantLevelAbiFilter ( ) { java.util.List < com.android.build.VariantOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ; java.util.List < java.io.File > result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , com.google.common.collect.Sets.newHashSet ( "bar" , "foo" ) , 160 , "zzz" ) ; assertEquals ( 0 , result.size ( ) ) ; }
protected void tearDown ( ) throws java.lang.Exception { assertTrue ( "Failed to clear owner" , removeAdmin ( ( ( ( com.android.cts.devicepolicy.UserRestrictionsTest.DEVICE_ADMIN_PKG ) + "/" ) + ( com.android.cts.devicepolicy.UserRestrictionsTest.ADMIN_RECEIVER_TEST_CLASS ) ) , mDeviceOwnerUserId ) ) ; }
private void assertByteBufferEquals ( java.nio.ByteBuffer buffer , java.nio.ByteBuffer buffer2 ) { assertTrue ( ( ( ( ( ( ( ( buffer.toString ( ) ) + " vs " ) + ( buffer2.toString ( ) ) ) + ", byte array: " ) + ( com.android.apksig.internal.util.HexEncoding.encode ( buffer.array ( ) ) ) ) + " vs " ) + ( com.android.apksig.internal.util.HexEncoding.encode ( buffer2.array ( ) ) ) ) , ( ( buffer.compareTo ( buffer2 ) ) == 0 ) ) ; }
public void deleteOdex ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.deleteOdex ( apkPath , instructionSet , outputPath ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void createOatDir ( java.lang.String oatDir , java.lang.String dexInstructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.createOatDir ( oatDir , dexInstructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
static native void stackArgsSignExtendedMips64 ( int i1 , int i2 , int i3 , int i4 , int i5 , int i6 , int i7 , int i8 ) ;
private void resetMatcher ( ) { if ( ( matcher ) == null ) { matcher = delimiter.matcher ( buffer ) ; } else { matcher.reset ( buffer ) ; } matcher.useTransparentBounds ( true ) ; matcher.useAnchoringBounds ( false ) ; matcher.region ( findStartIndex , bufferLength ) ; }
public void test_de ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex.ImmutableIndex de = libcore.icu.AlphabeticIndexTest.createIndex ( java.util.Locale.GERMAN ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( de , "ßind" , "S" ) ; }
public void run ( ) { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_single_source_script s = new com.android.rs.test.ScriptC_single_source_script ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_entrypoint ( testAllocation1 , testAllocation2 ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
private static float getWeightSum ( com.android.ide.common.api.INode linearLayout ) { java.lang.String weightSum = linearLayout.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_WEIGHT_SUM ) ; float sum = - 1.0F ; if ( weightSum != null ) { try { sum = java.lang.Float.parseFloat ( weightSum ) ; return sum ; } catch ( java.lang.NumberFormatException nfe ) { } } return com.android.ide.common.layout.LinearLayoutRule.getSumOfWeights ( linearLayout ) ; }
public static android.media.MediaFile.MediaFileType getFileType ( java.lang.String path ) { int lastDot = path.lastIndexOf ( "." ) ; if ( lastDot < 0 ) return null ; return android.media.MediaFile.sFileTypeMap.get ( path.substring ( ( lastDot + 1 ) ) . toUpperCase ( ) ) ; }
public void enter ( ) { android.util.Log.i ( com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG , ( ( ( "Enter Connected(" + ( mDevice ) ) + "): " ) + ( com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString ( getCurrentMessage ( ) . what ) ) ) ) ; mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED ; removeDeferredMessages ( com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT ) ; broadcastConnectionState ( mConnectionState , mLastConnectionState ) ; broadcastAudioState ( BluetoothHearingAid.STATE_NOT_PLAYING , BluetoothHearingAid.STATE_PLAYING ) ; }
public void onStop ( ) { endAnimation ( ) ; falsingManager.onScreenOff ( ) ; if ( getActivity ( ) . isFinishing ( ) ) { setAnimationState ( com.android.incallui.answer.impl.answermethod.FlingUpDownMethod.AnimationState.COMPLETED ) ; } super . onStop ( ) ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedPackage pkg , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findPackage ( pkg ) ; if ( c == null ) { return null ; } if ( ( c.annotations ) != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : c.annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
private boolean validatePage ( ) { boolean ok = true ; if ( mTypeCombo.getText ( ) . equals ( WrapInWizard.SEPARATOR_LABEL ) ) { setErrorMessage ( "Select a layout type" ) ; ok = false ; } if ( ok ) { setErrorMessage ( null ) ; com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ChangeLayoutRefactoring refactoring = ( ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ChangeLayoutRefactoring ) ( getRefactoring ( ) ) ) ; refactoring.setType ( mTypeCombo.getText ( ) ) ; } setPageComplete ( ok ) ; return ok ; }
public static com.android.tools.perflib.heap.Instance [ ] instancesOf ( com.android.tools.perflib.heap.State state , java.lang.String baseClassName ) { com.android.tools.perflib.heap.ClassObj theClass = state.findClass ( baseClassName ) ; if ( theClass == null ) { throw new java.lang.IllegalArgumentException ( ( "Class not found: " + baseClassName ) ) ; } com.android.tools.perflib.heap.Instance [ ] instances = new com.android.tools.perflib.heap.Instance [ theClass.mInstances.size ( ) ] ; return theClass.mInstances.toArray ( instances ) ; }
protected void sendData ( java.lang.String destAddr , java.lang.String scAddr , int destPort , byte [ ] data , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent ) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu ( scAddr , destAddr , destPort , data , ( deliveryIntent != null ) ) ; if ( pdu != null ) { sendRawPdu ( pdu.encodedScAddress , pdu.encodedMessage , sentIntent , deliveryIntent , destAddr ) ; } else { android.util.Log.e ( com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG , "GsmSMSDispatcher.sendData(): getSubmitPdu() returned null" ) ; } }
private static void addAltName ( java.util.Map < java.lang.String , libcore.tlswire.handshake.CipherSuite > byName , java.lang.String name , java.lang.String altName ) { libcore.tlswire.handshake.CipherSuite cipherSuite = byName.get ( name ) ; if ( cipherSuite == null ) { throw new java.lang.IllegalArgumentException ( ( "Cipher suite not found: " + name ) ) ; } byName.put ( altName , cipherSuite ) ; }
public void disconnect ( ) { if ( ( ( mConnection ) != null ) && ( ( mSrcContext ) != null ) ) { mSrcContext.unbindService ( mConnection ) ; } if ( ( mSrcHandler ) != null ) { replyDisconnected ( com.android.internal.util.AsyncChannel.STATUS_SUCCESSFUL ) ; } }
public static java.io.InputStream findEntryInputStream ( java.util.zip.ZipFile zipFile , java.lang.String entryPath ) throws java.io.IOException { java.util.zip.ZipEntry entry = zipFile.getEntry ( entryPath ) ; if ( ( entry == null ) || ( entry.isDirectory ( ) ) ) return null ; if ( ( ! ( entryPath.endsWith ( "/" ) ) ) && ( ( zipFile.getEntry ( ( entryPath + "/" ) ) ) != null ) ) return null ; return new java.io.BufferedInputStream ( zipFile.getInputStream ( entry ) ) ; }
public org.gradle.tooling.model.DomainObjectSet < ? extends org.gradle.tooling.model.idea.IdeaSourceDirectory > getGeneratedSourceDirectories ( ) { HEAD ( 1507 ) ; org.jetbrains.plugins.gradle.tooling.internal.ab Merge ; }
public java.util.Map < com.android.resources.ResourceType , java.util.Map < java.lang.String , com.android.ide.common.rendering.api.ResourceValue > > getConfiguredFrameworkResources ( ) { if ( ( ( mConfiguredFrameworkRes ) == null ) && ( ( mConfigComposite ) != null ) ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository frameworkRes = getFrameworkResources ( ) ; if ( frameworkRes == null ) { com.android.ide.eclipse.adt.AdtPlugin.log ( IStatus.ERROR , "Failed to get ProjectResource for the framework" ) ; } else { mConfiguredFrameworkRes = frameworkRes.getConfiguredResources ( mConfigComposite.getCurrentConfig ( ) ) ; } } return mConfiguredFrameworkRes ; }
void start ( ) { android.os.HandlerThread thread = new android.os.HandlerThread ( "BluetoothScanManager" ) ; thread.start ( ) ; mHandler = new com.android.bluetooth.gatt.ScanManager.ClientHandler ( thread.getLooper ( ) ) ; if ( ( mDm ) != null ) { mDm.registerDisplayListener ( mDisplayListener , null ) ; } }
public static void build ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor , boolean fullBuild ) throws org.eclipse.core.runtime.CoreException { project.build ( IncrementalProjectBuilder.INCREMENTAL_BUILD , monitor ) ; if ( fullBuild ) { java.util.Map < java.lang.String , java.lang.String > args = new java.util.TreeMap < java.lang.String , java.lang.String > ( ) ; args.put ( PostCompilerBuilder.POST_C_REQUESTED , "" ) ; project.build ( IncrementalProjectBuilder.FULL_BUILD , PostCompilerBuilder.ID , args , monitor ) ; } }
public static < E > com.google.common.collect.ImmutableSortedSet < E > copyOfSorted ( java.util.SortedSet < E > sortedSet ) { java.util.Comparator < ? super E > comparator = com.google.common.collect.SortedIterables.comparator ( sortedSet ) ; E [ ] elements = ( ( E [ ] ) ( sortedSet.toArray ( ) ) ) ; if ( ( elements.length ) == 0 ) { return com.google.common.collect.ImmutableSortedSet.emptySet ( comparator ) ; } else { return new com.google.common.collect.RegularImmutableSortedSet < E > ( com.google.common.collect.ImmutableList.< E > asImmutableList ( elements ) , comparator ) ; } }
public java.lang.String flatten ( ) { java.lang.StringBuilder flattened = new java.lang.StringBuilder ( ) ; for ( java.lang.String k : mMap.keySet ( ) ) { flattened.append ( k ) ; flattened.append ( "=" ) ; flattened.append ( mMap.get ( k ) ) ; flattened.append ( ";" ) ; } flattened.deleteCharAt ( ( ( flattened.length ( ) ) - 1 ) ) ; return flattened.toString ( ) ; }
public void test_getSystemClassLoader ( ) { java.lang.ClassLoader cl = java.lang.ClassLoader.getSystemClassLoader ( ) ; java.io.InputStream is = cl.getResourceAsStream ( "hyts_Foo.c" ) ; assertNotNull ( "Failed to find resource from system classpath" , is ) ; try { is.close ( ) ; } catch ( java.io.IOException e ) { } }
public static boolean isSupportedLocale ( java.util.Locale locale ) { java.util.Locale [ ] locales = java.util.Locale.getAvailableLocales ( ) ; for ( java.util.Locale availableLocale : locales ) { if ( locale.equals ( availableLocale ) ) { return true ; } } return false ; }
public boolean startWpsPbc ( java.lang.String iface , java.lang.String bssid ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.startWpsPbc ( iface , bssid ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( android.text.TextUtils.isEmpty ( bssid ) ) { return doBooleanCommandNative ( ( ( "IFNAME=" + iface ) + " WPS_PBC" ) ) ; } else { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " WPS_PBC " ) + bssid ) ) ; } } } }
public void setVar ( int index , android.support.v8.renderscript.BaseObj o ) { mRS.nScriptSetVarObj ( getID ( mRS ) , index , ( o == null ? 0 : o.getID ( mRS ) ) ) ; }
public void testConstructorValidation ( ) throws java.lang.Exception { libcore.tzdata.update2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.update2.DistroVersionTest.INVALID_VERSION_LOW , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.update2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.update2.DistroVersionTest.INVALID_VERSION_HIGH , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.update2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.INVALID_VERSION_LOW , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.update2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.INVALID_VERSION_HIGH , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.update2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.INVALID_RULES_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION ) ; libcore.tzdata.update2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.update2.DistroVersionTest.INVALID_VERSION_LOW ) ; libcore.tzdata.update2.DistroVersionTest.checkConstructorThrows ( libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_VERSION , libcore.tzdata.update2.DistroVersionTest.VALID_RULES_VERSION , libcore.tzdata.update2.DistroVersionTest.INVALID_VERSION_HIGH ) ; }
public void run ( com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { if ( ! ( getFilter ( ) . accept ( this . getClass ( ) , type ) ) ) { return ; } com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get ( com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY ) ; try { writingTool.merge ( type ) ; } catch ( com.android.jack.backend.dex.DexWritingException e ) { com.android.jack.Jack.getSession ( ) . getReporter ( ) . report ( Severity.FATAL , e ) ; throw new com.android.jack.JackAbortException ( e ) ; } }
public void onAvailable ( android.net.Network network ) { if ( com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG ) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd ( ( "Network available: " + network ) ) ; mCm.bindProcessToNetwork ( network ) ; mNetwork = network ; runOnUiThreadIfNotFinishing ( ( ) -> { if ( mReload ) { mWebView.reload ( ) ; } else { mWebView.loadData ( "" , "text/html" , null ) ; } } ) ; }
public boolean setRadioPower ( boolean turnOn ) { final com.android.internal.telephony.Phone defaultPhone = com.android.internal.telephony.PhoneFactory.getDefaultPhone ( ) ; if ( defaultPhone != null ) { defaultPhone.setRadioPower ( turnOn ) ; return true ; } else { com.android.phone.PhoneInterfaceManager.loge ( "There's no default phone." ) ; return false ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JThisRef jThisRef ) { com.android.jack.ir.ast.JThis jThis = targetMethod.getThis ( ) ; assert jThis != null ; assert jThis.getType ( ) . isSameType ( jThisRef.getType ( ) ) ; expression = new com.android.jack.ir.ast.JThisRef ( jThisRef.getSourceInfo ( ) , jThis ) ; return false ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( this . getClass ( ) . getSimpleName ( ) ) ; setupMockPackagePermissionChecks ( ) ; mCdmaSmsDispatcherTestHandler = new com.android.internal.telephony.cdma.CdmaSmsDispatcherTest.CdmaSmsDispatcherTestHandler ( TAG ) ; mCdmaSmsDispatcherTestHandler.start ( ) ; waitUntilReady ( ) ; }
public void onDestroyed ( android.telecom.Connection connection ) { disconnectConferenceParticipants ( ) ; }
static void add ( java.lang.ref.Reference < ? > list ) { synchronized ( java.lang.ref.ReferenceQueue.class ) { if ( ( java.lang.ref.ReferenceQueue.unenqueued ) == null ) { java.lang.ref.ReferenceQueue.unenqueued = list ; } else { java.lang.ref.Reference < ? > next = java.lang.ref.ReferenceQueue.unenqueued.pendingNext ; java.lang.ref.ReferenceQueue.unenqueued.pendingNext = list.pendingNext ; list.pendingNext = next ; } java.lang.ref.ReferenceQueue.class . notifyAll ( ) ; } }
public final void release ( ) throws android.os.RemoteException { synchronized ( this ) { if ( isReferenced ( ) ) { throw new java.lang.IllegalStateException ( "Cannot release a resource that has active references!" ) ; } if ( ( mResourceId ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { return ; } releaseResources ( ) ; getResourceTracker ( ) . give ( ) ; if ( ( mBinder ) != null ) { mBinder.unlinkToDeath ( this , 0 ) ; } mBinder = null ; mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID ; } }
public android.security.KeyStore.State state ( ) { final int ret ; try { ret = mBinder.test ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; throw new java.lang.AssertionError ( e ) ; } switch ( ret ) { case android.security.KeyStore.NO_ERROR : return android.security.KeyStore.State.UNLOCKED ; case android.security.KeyStore.LOCKED : return android.security.KeyStore.State.LOCKED ; case android.security.KeyStore.UNINITIALIZED : return android.security.KeyStore.State.UNINITIALIZED ; default : throw new java.lang.AssertionError ( mError ) ; } }
public void resize ( int width , int height ) { super . resize ( width , height ) ; }
public java.lang.String getAbiFilter ( ) { return abiFilter ; }
synchronized void nAllocationData1D ( long id , int off , int mip , int count , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
public void removeCall ( android.telecom.Call call ) { if ( ! ( mCalls.contains ( call ) ) ) { android.util.Log.e ( com.android.server.telecom.testapps.TestCallList.TAG , "removeCall: Call cannot be removed -- doesn't exist." ) ; return ; } android.util.Log.i ( com.android.server.telecom.testapps.TestCallList.TAG , ( "removeCall: " + call ) ) ; mCalls.remove ( call ) ; call.removeListener ( this ) ; for ( com.android.server.telecom.testapps.TestCallList.Listener l : mListeners ) { l.onCallRemoved ( call ) ; } }
private static com.android.builder.resources.ResourceMerger getResourceMerger ( ) throws com.android.builder.resources.DuplicateResourceException , java.io.IOException { if ( ( com.android.builder.resources.ResourceMergerTest.sResourceMerger ) == null ) { java.io.File root = getRoot ( "baseMerge" ) ; com.android.builder.resources.ResourceSet res = com.android.builder.resources.ResourceSetTest.getBaseResourceSet ( ) ; com.android.builder.resources.ResourceSet overlay = new com.android.builder.resources.ResourceSet ( "overlay" ) ; overlay.addSource ( new java.io.File ( root , "overlay" ) ) ; overlay.loadFromFiles ( ) ; com.android.builder.resources.ResourceMergerTest.sResourceMerger = new com.android.builder.resources.ResourceMerger ( ) ; com.android.builder.resources.ResourceMergerTest.sResourceMerger.addResourceSet ( res ) ; com.android.builder.resources.ResourceMergerTest.sResourceMerger.addResourceSet ( overlay ) ; } return com.android.builder.resources.ResourceMergerTest.sResourceMerger ; }
private void assertInvalidPinned ( java.security.cert.X509Certificate [ ] chain , javax.net.ssl.X509TrustManager tm , java.lang.String hostname ) throws java.lang.Exception { assertTrue ( tm.getClass ( ) . getName ( ) , ( tm instanceof org.conscrypt.TrustManagerImpl ) ) ; try { org.conscrypt.TrustManagerImpl tmi = ( ( org.conscrypt.TrustManagerImpl ) ( tm ) ) ; tmi.checkServerTrusted ( chain , "RSA" , hostname ) ; fail ( ) ; } catch ( java.security.cert.CertificateException expected ) { } }
private static java.lang.Object getSelectedTestProxy ( final com.intellij.openapi.actionSystem.AnActionEvent e ) { return AbstractTestProxy.DATA_KEY.getData ( e.getDataContext ( ) ) ; }
boolean setProtocolMode ( android.bluetooth.BluetoothDevice device , int protocolMode ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothInputDevice.STATE_CONNECTED ) ) { return false ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_SET_PROTOCOL_MODE ) ; msg.obj = device ; msg.arg1 = protocolMode ; mHandler.sendMessage ( msg ) ; return true ; }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; dataOut.writeBoolean ( myIsNormalized ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
public void log ( com.android.utils.ILogger logger ) { for ( com.android.manifmerger.MergingReport.Record record : mRecords ) { switch ( record.mSeverity ) { case WARNING : logger.warning ( record.toString ( ) ) ; break ; case ERROR : logger.error ( null , record.toString ( ) ) ; break ; case INFO : logger.info ( record.toString ( ) ) ; break ; default : logger.error ( null , ( "Unhandled record type " + ( record.mSeverity ) ) ) ; } } mActions.log ( logger ) ; }
protected void setUp ( ) throws java.lang.Exception { mAndroidHome = java.lang.System.getenv ( "ANDROID_HOME" ) ; assertNotNull ( "This test requires ANDROID_HOME environment variable to point to a valid SDK" , mAndroidHome ) ; com.android.ddmlib.AndroidDebugBridge.init ( false ) ; }
public void setRttStreams ( boolean shouldBeRtt ) { boolean areStreamsInitialized = ( ( mInCallToConnectionServiceStreams ) != null ) && ( ( mConnectionServiceToInCallStreams ) != null ) ; if ( shouldBeRtt && ( ! areStreamsInitialized ) ) { try { mInCallToConnectionServiceStreams = android.os.ParcelFileDescriptor.createReliablePipe ( ) ; mConnectionServiceToInCallStreams = android.os.ParcelFileDescriptor.createReliablePipe ( ) ; } catch ( java.io.IOException e ) { android.telecom.Log.e ( this , e , "Failed to create pipes for RTT call." ) ; } } else if ( ( ! shouldBeRtt ) && areStreamsInitialized ) { closeRttPipes ( ) ; mInCallToConnectionServiceStreams = null ; mConnectionServiceToInCallStreams = null ; } }
public void testSuppress ( ) throws java.lang.Exception { assertEquals ( ( "SuppressTest1.java:76: Error: Call requires API level 11 (current min is 1): android.app.Activity#getActionBar\n" + ( ( ( ( ( ( ( ( ( ( ( "SuppressTest1.java:76: Error: Class requires API level 8 (current min is 1): org.w3c.dom.DOMLocator\n" + "SuppressTest1.java:79: Error: Class requires API level 8 (current min is 1): org.w3c.dom.DOMError\n" ) + "SuppressTest1.java:80: Error: Class requires API level 8 (current min is 1): org.w3c.dom.DOMErrorHandler\n" ) + "SuppressTest1.java:83: Error: Call requires API level 3 (current min is 1): android.widget.Chronometer#getOnChronometerTickListener\n" ) + "SuppressTest1.java:86: Error: Call requires API level 11 (current min is 1): android.widget.Chronometer#setTextIsSelectable\n" ) + "SuppressTest1.java:89: Error: Field requires API level 11 (current min is 1): dalvik.bytecode.OpcodeInfo#MAXIMUM_VALUE\n" ) + "SuppressTest1.java:94: Error: Class requires API level 14 (current min is 1): android.app.ApplicationErrorReport.BatteryInfo\n" ) + "SuppressTest1.java:94: Error: Field requires API level 14 (current min is 1): android.app.ApplicationErrorReport#batteryInfo\n" ) + "SuppressTest1.java:97: Error: Field requires API level 11 (current min is 1): android.graphics.PorterDuff$Mode#OVERLAY\n" ) + "SuppressTest4.java:16: Error: Class requires API level 14 (current min is 1): android.app.ApplicationErrorReport\n" ) + "SuppressTest4.java:19: Error: Class requires API level 14 (current min is 1): android.app.ApplicationErrorReport.BatteryInfo\n" ) + "SuppressTest4.java:19: Error: Field requires API level 14 (current min is 1): android.app.ApplicationErrorReport#batteryInfo" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "apicheck/SuppressTest1.java.txt=>src/foo/bar/SuppressTest1.java" , "apicheck/SuppressTest1.class.data=>bin/classes/foo/bar/SuppressTest1.class" , "apicheck/SuppressTest2.java.txt=>src/foo/bar/SuppressTest2.java" , "apicheck/SuppressTest2.class.data=>bin/classes/foo/bar/SuppressTest2.class" , "apicheck/SuppressTest3.java.txt=>src/foo/bar/SuppressTest3.java" , "apicheck/SuppressTest3.class.data=>bin/classes/foo/bar/SuppressTest3.class" , "apicheck/SuppressTest4.java.txt=>src/foo/bar/SuppressTest4.java" , "apicheck/SuppressTest4.class.data=>bin/classes/foo/bar/SuppressTest4.class" ) ) ; }
public void testSubList2_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.add ( "asdasd" ) ; c.subList ( 1 , 100 ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
public static java.lang.String getPropertyText ( @ org.jetbrains.annotations.NonNls java.lang.String name , @ org.jetbrains.annotations.NonNls java.lang.String value ) { return ( ( com.intellij.lang.properties.psi.PropertiesElementFactory.escape ( name ) ) + "=" ) + ( com.intellij.lang.properties.psi.PropertiesElementFactory.escapeValue ( value ) ) ; }
private void launchSystemDialer ( android.net.Uri handle ) { android.content.Intent systemDialerIntent = new android.content.Intent ( ) ; final android.content.res.Resources resources = mContext.getResources ( ) ; systemDialerIntent.setClassName ( resources.getString ( R.string.ui_default_package ) , resources.getString ( R.string.dialer_default_class ) ) ; systemDialerIntent.setAction ( Intent.ACTION_DIAL ) ; systemDialerIntent.setData ( handle ) ; systemDialerIntent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; com.android.server.telecom.Log.v ( this , "calling startActivity for default dialer: %s" , systemDialerIntent ) ; mContext.startActivityAsUser ( systemDialerIntent , UserHandle.CURRENT ) ; }
void foo2 ( int [ ] array , int start , int end , boolean expectInterpreter ) { for ( int i = start ; i <= end ; i ++ ) { if ( expectInterpreter ) { Main.assertIsInterpreted ( ) ; } else { Main.assertIsManaged ( ) ; } array [ i ] = 1 ; sum += array [ i ] ; } }
public boolean onKeyMultiple ( final int keyCode , final int repeatCount , final android.view.KeyEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onKeyMultiple ( keyCode , repeatCount , event ) ; } } ) ; return ret ; } com.android.webview.chromium.UnimplementedWebViewApi.invoke ( ) ; return false ; }
public void testDuplicatePermissionsMultiProject ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestOrderDetector.UNIQUE_PERMISSION ) ; java.io.File master = getProjectDir ( "MasterProject" , "duplicate_permissions2.xml=>AndroidManifest.xml" , "multiproject/main-merge.properties=>project.properties" , "multiproject/MainCode.java.txt=>src/foo/main/MainCode.java" ) ; java.io.File library = getProjectDir ( "LibraryProject" , "duplicate_permissions3.xml=>AndroidManifest.xml" , "multiproject/library.properties=>project.properties" , "multiproject/LibraryCode.java.txt=>src/foo/library/LibraryCode.java" , "multiproject/strings.xml=>res/values/strings.xml" ) ; assertEquals ( ( "LibraryProject/AndroidManifest.xml:9: Error: Permission name SEND_SMS is not unique (appears in both foo.permission.SEND_SMS and bar.permission.SEND_SMS) [UniquePermission]\n" + ( ( " <permission android:name=\"bar.permission.SEND_SMS\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 0 warnings\n" ) ) , checkLint ( java.util.Arrays.asList ( master , library ) ) ) ; }
public void exit ( ) { if ( ( mPhone ) != null ) { mPhone.mCi.unregisterForDataCallListChanged ( getHandler ( ) ) ; } if ( ( mDcTesterDeactivateAll ) != null ) { mDcTesterDeactivateAll.dispose ( ) ; } }
public void changeBarringPassword ( java.lang.String facility , java.lang.String oldPwd , java.lang.String newPwd , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CHANGE_BARRING_PASSWORD , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeInt ( 3 ) ; rr.mParcel.writeString ( facility ) ; rr.mParcel.writeString ( oldPwd ) ; rr.mParcel.writeString ( newPwd ) ; send ( rr ) ; }
public void testBooleanOverlay ( ) throws java.lang.Throwable { final int resId = com.android.internal.R.bool.config_automatic_brightness_available ; assertResource ( resId , false , true ) ; }
private android.bluetooth.BluetoothDevice makeBluetoothDevice ( java.lang.String address ) { android.os.Parcel p1 = android.os.Parcel.obtain ( ) ; p1.writeString ( address ) ; p1.setDataPosition ( 0 ) ; android.bluetooth.BluetoothDevice device = BluetoothDevice.CREATOR.createFromParcel ( p1 ) ; p1.recycle ( ) ; return device ; }
public static java.io.File createTemporaryDirectory ( java.lang.String prefix ) { while ( true ) { java.lang.String candidateName = prefix + ( libcore.io.IoUtils.TEMPORARY_DIRECTORY_PRNG.nextInt ( ) ) ; java.io.File result = new java.io.File ( java.lang.System.getProperty ( "java.io.tmpdir" ) , candidateName ) ; if ( result.mkdir ( ) ) { return result ; } } }
protected void setUp ( ) { initialThreadGroup = java.lang.Thread.currentThread ( ) . getThreadGroup ( ) ; rootThreadGroup = initialThreadGroup ; while ( ( rootThreadGroup.getParent ( ) ) != null ) { rootThreadGroup = rootThreadGroup.getParent ( ) ; } }
public void validatePolicyWithRoamingPartnerWithoutCountries ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; android.net.wifi.hotspot2.pps.Policy.RoamingPartner partner = new android.net.wifi.hotspot2.pps.Policy.RoamingPartner ( ) ; partner.fqdn = "test.com" ; partner.fqdnExactMatch = true ; partner.priority = 12 ; policy.preferredRoamingPartnerList.add ( partner ) ; org.junit.Assert.assertFalse ( policy.validate ( ) ) ; }
public void validateCertCredentialWithoutCaCert ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential ( ) ; cred.certCredential.certType = "x509v3" ; cred.certCredential.certSha256FingerPrint = java.security.MessageDigest.getInstance ( "SHA-256" ) . digest ( FakeKeys.CLIENT_CERT.getEncoded ( ) ) ; cred.clientCertificateChain = new java.security.cert.X509Certificate [ ] { android.net.wifi.FakeKeys.CLIENT_CERT } ; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1 ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public void setOverlayImage ( final org.eclipse.swt.graphics.Image overlayImage ) { final org.eclipse.swt.graphics.Image toDispose = this . overlayImage ; org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( com.android.hierarchyviewerlib.models.PixelPerfectModel.this ) { com.android.hierarchyviewerlib.models.PixelPerfectModel.this . overlayImage = overlayImage ; } } } ) ; notifyOverlayChanged ( ) ; if ( toDispose != null ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { toDispose.dispose ( ) ; } } ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , float [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) ) ; }
public long getExitTime ( com.android.tools.perflib.vmtrace.ClockType clockType ) { return clockType == ( ClockType.THREAD ) ? com.google.common.primitives.UnsignedInts.toLong ( mExitThreadTime ) : com.google.common.primitives.UnsignedInts.toLong ( mExitGlobalTime ) ; }
private final void decPersistentCountLocked ( com.android.server.am.ProcessRecord app ) { ( app.persistentActivities ) -- ; if ( ( app.persistentActivities ) > 0 ) { return ; } if ( app.persistent ) { return ; } updateOomAdjLocked ( ) ; }
public long getDurationMillis ( long maxWaitMillis ) { synchronized ( this ) { if ( ! ( completed ) ) { try { wait ( maxWaitMillis ) ; } catch ( java.lang.InterruptedException ex ) { } if ( ! ( completed ) ) { junit.framework.Assert.fail ( "parker hanging" ) ; } } return ( endMillis ) - ( startMillis ) ; } }
protected void libToImportStaticLibs ( @ javax.annotation.Nonnull java.util.List < java.lang.String > args , @ javax.annotation.Nonnull java.io.File [ ] in ) throws java.lang.Exception { for ( java.io.File staticlib : in ) { args.add ( "--import" ) ; args.add ( staticlib.getAbsolutePath ( ) ) ; } for ( java.io.File staticLib : staticLibs ) { args.add ( "--import" ) ; args.add ( staticLib.getAbsolutePath ( ) ) ; } }
public void setUp ( ) { expected = new java.util.ArrayList < java.lang.String > ( ) ; expected.add ( "ak" ) ; expected.add ( "bk" ) ; ns = new org.xml.sax.helpers.NamespaceSupport ( ) ; ns.pushContext ( ) ; ns.declarePrefix ( "ak" , tests.api.org.xml.sax.helpers.NamespaceSupportTest.marketUri ) ; ns.declarePrefix ( "bk" , tests.api.org.xml.sax.helpers.NamespaceSupportTest.marketUri ) ; ns.declarePrefix ( "" , tests.api.org.xml.sax.helpers.NamespaceSupportTest.defaultUri ) ; }
public abstract void write ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVFS outputVDir ) throws com.android.jack.backend.dex.DexWritingException ;
public java.io.File getOutputFile ( ) { return getVariantData ( ) . getOutputs ( ) . get ( 0 ) . getOutputFile ( ) ; }
public void testReverting ( ) throws java.lang.Exception { createPatch ( ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; preparationResult.patch.getActions ( ) . add ( new com.intellij.updater.PatchFileCreatorTest.MyFailOnApplyPatchAction ( ) ) ; assertNothingHasChanged ( preparationResult , new java.util.HashMap < java.lang.String , com.intellij.updater.ValidationResult.Option > ( ) ) ; }
private void test_joinAnySource_multiple_joins ( java.net.InetAddress group , java.net.NetworkInterface networkInterface ) throws java.lang.Exception { if ( ! ( supportsMulticast ) ) { return ; } java.nio.channels.DatagramChannel dc = createReceiverChannel ( ) ; java.nio.channels.MembershipKey membershipKey1 = dc.join ( group , networkInterface ) ; java.nio.channels.MembershipKey membershipKey2 = dc.join ( group , loopbackInterface ) ; assertFalse ( membershipKey1.equals ( membershipKey2 ) ) ; java.nio.channels.MembershipKey membershipKey1_2 = dc.join ( group , networkInterface ) ; assertEquals ( membershipKey1 , membershipKey1_2 ) ; dc.close ( ) ; }
public void testAesCbcHmacSha1Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
public boolean performAccessibilityAction ( final int action , final android.os.Bundle arguments ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return performAccessibilityAction ( action , arguments ) ; } } ) ; return ret ; } if ( mAwContents.supportsAccessibilityAction ( action ) ) { return mAwContents.performAccessibilityAction ( action , arguments ) ; } return mWebViewPrivate.super_performAccessibilityAction ( action , arguments ) ; }
private static java.net.URL makeURL ( @ javax.annotation.Nonnull java.util.zip.ZipFile file , @ javax.annotation.Nonnull java.util.zip.ZipEntry entry , @ javax.annotation.Nonnull com.android.jack.launcher.ZipLoader.ZipURLStreamHandler handler ) { try { assert ( entry.getName ( ) . indexOf ( com.android.jack.launcher.ZipLoader.BANG ) ) == ( - 1 ) ; return new java.net.URL ( "launcherzip" , "" , ( - 1 ) , ( ( ( file.getName ( ) ) + ( com.android.jack.launcher.ZipLoader.BANG ) ) + ( entry.getName ( ) ) ) , handler ) ; } catch ( java.net.MalformedURLException e ) { throw new java.lang.AssertionError ( ) ; } }
public void test_totalMemory ( ) { assertTrue ( "totalMemory returned nonsense value" , ( ( r.totalMemory ( ) ) >= ( r.freeMemory ( ) ) ) ) ; }
private void shutdownAndFreeSslNative ( ) throws java.io.IOException { try { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; org.conscrypt.NativeCrypto.SSL_shutdown ( sslNativePointer , socket.getFileDescriptor$ ( ) , this ) ; } catch ( java.io.IOException ignored ) { } finally { free ( ) ; closeUnderlyingSocket ( ) ; } }
java.lang.reflect.Type parseFieldTypeSignature ( ) { switch ( symbol ) { case 'L' : return parseClassTypeSignature ( ) ; case '[' : scanSymbol ( ) ; return new org.apache.harmony.luni.lang.reflect.ImplForArray ( parseTypeSignature ( ) ) ; case 'T' : return parseTypeVariableSignature ( ) ; default : throw new java.lang.reflect.GenericSignatureFormatError ( ) ; } }
private static java.lang.String toString ( byte [ ] bytes ) { return new java.lang.String ( bytes , java.nio.charset.Charsets.UTF_8 ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { assertNull ( org.conscrypt.NativeCrypto.SSL_get_certificate ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static java.lang.String getFileExtension ( java.lang.String fileName ) { com.google.common.base.Preconditions.checkNotNull ( fileName ) ; int dotIndex = fileName.lastIndexOf ( '.' ) ; return dotIndex == ( - 1 ) ? "" : fileName.substring ( ( dotIndex + 1 ) ) ; }
public byte [ ] iccExchangeSimIO ( int fileID , int command , int p1 , int p2 , int p3 , java.lang.String filePath ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccExchangeSimIO ( fileID , command , p1 , p2 , p3 , filePath ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
private com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo getHorizontalPaddingBottom ( int x ) { int left = ( patchInfo.horizontalPadding.first ) + 1 ; int right = ( ( image.getWidth ( ) ) - ( patchInfo.horizontalPadding.second ) ) - 1 ; return getContainingPadding ( left , right , x , com.android.draw9patch.ui.ImageViewer.UpdateRegion.BOTTOM_PADDING ) ; }
public void loadQuickContactBadge ( android.widget.QuickContactBadge badge , com.android.dialer.glidephotomanager.PhotoInfo photoInfo ) { com.android.dialer.common.Assert.isMainThread ( ) ; badge.assignContactUri ( com.android.dialer.glidephotomanager.impl.GlidePhotoManagerImpl.parseUri ( photoInfo.lookupUri ( ) ) ) ; badge.setOverlay ( null ) ; com.android.dialer.glide.GlideRequest < android.graphics.drawable.Drawable > request = buildRequest ( com.android.dialer.glide.GlideApp.with ( badge ) , photoInfo ) ; request.into ( badge ) ; }
java.util.Map.Entry < K , java.util.Collection < V > > transform ( final K key ) { return new com.google.common.collect.AbstractMapEntry < K , java.util.Collection < V > > ( ) { @ java.lang.Override public K getKey ( ) { return key ; } @ java.lang.Override public java.util.Collection < V > getValue ( ) { return com.google.common.collect.LinkedListMultimap.this . get ( key ) ; } } ; }
private void trackNewTetherableInterface ( java.lang.String iface , int interfaceType ) { com.android.server.connectivity.Tethering.TetherState tetherState ; tetherState = new com.android.server.connectivity.Tethering.TetherState ( new com.android.server.connectivity.tethering.TetherInterfaceStateMachine ( iface , mLooper , interfaceType , mNMService , mStatsService , this , new com.android.server.connectivity.tethering.IPv6TetheringInterfaceServices ( iface , mNMService ) ) ) ; mTetherStates.put ( iface , tetherState ) ; tetherState.mStateMachine.start ( ) ; }
public static com.android.dialer.historyitemactions.IntentModule newCallModule ( android.content.Context context , java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.dialer.callintent.CallInitiationType.Type initiationType ) { return new com.android.dialer.historyitemactions.IntentModule ( context , com.android.dialer.precall.PreCall.getIntent ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , initiationType ) . setPhoneAccountHandle ( phoneAccountHandle ) ) , R.string.voice_call , R.drawable.quantum_ic_call_white_24 ) ; }
private void confirmDeleteDialog ( android.content.DialogInterface.OnClickListener listener , int messageId ) { android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder ( this ) ; builder.setTitle ( R.string.confirm_dialog_title ) ; builder.setIcon ( android.R.drawable.ic_dialog_alert ) ; builder.setCancelable ( true ) ; builder.setPositiveButton ( R.string.yes , listener ) ; builder.setNegativeButton ( R.string.no , null ) ; builder.setMessage ( messageId ) ; builder.show ( ) ; }
public void testGeographicalRegionMetadataLoadsCorrectly ( ) { java.util.concurrent.ConcurrentHashMap < java.lang.String , com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata > map = new java.util.concurrent.ConcurrentHashMap < java.lang.String , com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata > ( ) ; com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = com.google.i18n.phonenumbers.MultiFileMetadataSourceImpl.loadMetadataFromFile ( "CA" , map , "/com/google/i18n/phonenumbers/data/PhoneNumberMetadataProtoForTesting" , PhoneNumberUtil.DEFAULT_METADATA_LOADER ) ; assertEquals ( metadata , map.get ( "CA" ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { client.setEnabledProtocols ( new java.lang.String [ ] { "SSLv3" } ) ; client.setEnabledCipherSuites ( clientCipherSuites ) ; try { client.startHandshake ( ) ; fail ( "Should receive TLS alert inappropriate fallback" ) ; } catch ( javax.net.ssl.SSLHandshakeException expected ) { } return null ; }
public java.text.AttributedCharacterIterator formatToCharacterIterator ( java.lang.Object object ) { if ( object == null ) { throw new java.lang.NullPointerException ( "object == null" ) ; } if ( object instanceof java.util.Date ) { return formatToCharacterIteratorImpl ( ( ( java.util.Date ) ( object ) ) ) ; } if ( object instanceof java.lang.Number ) { return formatToCharacterIteratorImpl ( new java.util.Date ( ( ( java.lang.Number ) ( object ) ) . longValue ( ) ) ) ; } throw new java.lang.IllegalArgumentException ( ) ; }
public static boolean isAdtProjectDir ( @ com.android.annotations.Nullable java.io.File file ) { return ( new java.io.File ( file , ANDROID_MANIFEST_XML ) . exists ( ) ) && ( ( com.android.tools.gradle.eclipse.GradleImport.isEclipseProjectDir ( file ) ) || ( ( new java.io.File ( file , FD_RES ) . exists ( ) ) && ( new java.io.File ( file , FD_SOURCES ) . exists ( ) ) ) ) ; }
public com.android.jack.ir.ast.cfg.JControlFlowGraph getCfg ( ) { return this ; }
public boolean isInCall ( java.lang.String callingPackage ) { try { com.android.server.telecom.Log.startSession ( "TSI.iIC" ) ; if ( ! ( canReadPhoneState ( callingPackage , "isInCall" ) ) ) { return false ; } synchronized ( mLock ) { final int callState = mCallsManager.getCallState ( ) ; return ( callState == ( android.telephony.TelephonyManager.CALL_STATE_OFFHOOK ) ) || ( callState == ( android.telephony.TelephonyManager.CALL_STATE_RINGING ) ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
private void handleUpdatePackageCompatibilityInfo ( android.app.ActivityThread.UpdateCompatibilityData data ) { android.app.LoadedApk apk = peekPackageInfo ( data.pkg , false ) ; if ( apk != null ) { apk.mCompatibilityInfo.set ( data.info ) ; } apk = peekPackageInfo ( data.pkg , true ) ; if ( apk != null ) { apk.mCompatibilityInfo.set ( data.info ) ; } handleConfigurationChanged ( mConfiguration , data.info ) ; android.view.WindowManagerGlobal.getInstance ( ) . reportNewConfiguration ( mConfiguration ) ; }
public static boolean isVectorGenerationSupported ( @ com.android.annotations.NonNull com.android.builder.model.AndroidProject project ) { java.lang.String modelVersion = project.getModelVersion ( ) ; return ! ( ( ( ( modelVersion.startsWith ( "1.0" ) ) || ( modelVersion.startsWith ( "1.1" ) ) ) || ( modelVersion.startsWith ( "1.2" ) ) ) || ( modelVersion.startsWith ( "1.3" ) ) ) ; }
public final void unregisterContentObserver ( android.database.ContentObserver observer ) { try { android.database.IContentObserver contentObserver = observer.releaseContentObserver ( ) ; if ( contentObserver != null ) { android.content.ContentResolver.getContentService ( ) . unregisterContentObserver ( contentObserver ) ; } } catch ( android.os.RemoteException e ) { } }
public void testClearUsedByOtherApps ( ) { org.junit.Assert.assertTrue ( record ( mFooSplit2UsedByOtherApps0 ) ) ; org.junit.Assert.assertTrue ( mPackageDexUsage.clearUsedByOtherApps ( mFooSplit2UsedByOtherApps0.mPackageName ) ) ; com.android.server.pm.dex.PackageDexUsageTests.TestData noLongerUsedByOtherApps = new com.android.server.pm.dex.PackageDexUsageTests.TestData ( mFooSplit2UsedByOtherApps0.mPackageName , mFooSplit2UsedByOtherApps0.mDexFile , mFooSplit2UsedByOtherApps0.mOwnerUserId , mFooSplit2UsedByOtherApps0.mLoaderIsa , false , mFooSplit2UsedByOtherApps0.mPrimaryOrSplit ) ; assertPackageDexUsage ( noLongerUsedByOtherApps ) ; }
public java.util.List < com.android.builder.AndroidDependency > getFullDirectDependencies ( ) { if ( ( ( mTestedConfig ) != null ) && ( ( mTestedConfig.getType ( ) ) == ( com.android.builder.VariantConfiguration.Type.LIBRARY ) ) ) { java.util.List < com.android.builder.AndroidDependency > list = new java.util.ArrayList < com.android.builder.AndroidDependency > ( ( ( ( mDirectLibraryProjects.size ( ) ) + ( mTestedConfig.mDirectLibraryProjects.size ( ) ) ) + 1 ) ) ; list.addAll ( mDirectLibraryProjects ) ; list.add ( mTestedConfig.mOutput ) ; list.addAll ( mTestedConfig.mDirectLibraryProjects ) ; return list ; } return mDirectLibraryProjects ; }
public static float scalb ( float f , int scaleFactor ) { return sun.misc.FpUtils.scalb ( f , scaleFactor ) ; }
public void tesNoSplitDelegateLastNoSharedLibraries ( ) { android.content.pm.ApplicationInfo ai = createMockApplicationInfo ( com.android.server.pm.dex.DexoptUtilsTest.DELEGATE_LAST_CLASS_LOADER_NAME , false , false ) ; java.lang.String [ ] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts ( ai , null ) ; org.junit.Assert.assertEquals ( 1 , contexts.length ) ; org.junit.Assert.assertEquals ( "DLC[]" , contexts [ 0 ] ) ; }
public static java.io.File getTemplateLocation ( @ com.android.annotations.NonNull java.lang.String relativePath ) { java.io.File templateRoot = com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.getTemplateRootFolder ( ) ; if ( templateRoot != null ) { java.io.File templateFile = new java.io.File ( templateRoot , relativePath.replace ( '/' , java.io.File.separatorChar ) ) ; if ( templateFile.exists ( ) ) { return templateFile ; } } return null ; }
private static void checkService ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( com.android.tools.lint.checks.SecurityDetector.getExported ( element ) ) && ( com.android.tools.lint.checks.SecurityDetector.isUnprotectedByPermission ( element ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_SERVICE , element , context.getLocation ( element ) , "Exported service does not require permission" ) ; } }
public void run ( ) { mLayoutEditor.editXmlModel ( new java.lang.Runnable ( ) { public void run ( ) { deleteSelection ( "Remove" , mDragSelection ) ; } } ) ; }
public int generateKey ( java.lang.String alias , android.security.keymaster.KeymasterArguments args , int uid , int flags , android.security.keymaster.KeyCharacteristics outCharacteristics ) { try { return mBinder.generateKey ( alias , args , uid , flags , outCharacteristics ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return android.security.KeyStore.SYSTEM_ERROR ; } }
private void iccLockChanged ( boolean success ) { if ( success ) { mPinToggle.setChecked ( mToState ) ; } else { android.widget.Toast.makeText ( this , mRes.getString ( R.string.sim_lock_failed ) , Toast.LENGTH_SHORT ) . show ( ) ; } resetDialogState ( ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { android.util.Log.v ( android.bluetooth.BluetoothInputHost.TAG , "getConnectedDevices()" ) ; if ( ( mService ) != null ) { try { return mService.getConnectedDevices ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothInputHost.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothInputHost.TAG , "Proxy not attached to service" ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; }
public boolean p2pExtListen ( boolean enable , int period , int interval ) { if ( enable && ( interval < period ) ) { return false ; } if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.configureExtListen ( enable , period , interval ) ; } else { return doBooleanCommand ( ( "P2P_EXT_LISTEN" + ( enable ? ( ( " " + period ) + " " ) + interval : "" ) ) ) ; } }
synchronized void nAllocationRead ( int id , float [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mAccountManager = ( ( android.accounts.AccountManager ) ( mContext.getSystemService ( Context.ACCOUNT_SERVICE ) ) ) ; clearAllAccountManagementDisabled ( ) ; com.android.cts.deviceandprofileowner.AccountUtilsTest.removeAllAccountsForType ( mAccountManager , com.android.cts.deviceandprofileowner.AccountManagementTest.ACCOUNT_TYPE_1 ) ; }
public java.util.Iterator < com.android.sched.vfs.InputVFile > iterator ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) { if ( ! ( containsFileType ( fileType ) ) ) { return com.google.common.collect.ImmutableSet.< com.android.sched.vfs.InputVFile > of ( ) . iterator ( ) ; } java.util.List < com.android.sched.vfs.InputVFile > inputVFiles = new java.util.ArrayList < com.android.sched.vfs.InputVFile > ( ) ; fillFiles ( getSectionVFS ( fileType ) . getRootInputVDir ( ) , inputVFiles ) ; return inputVFiles.listIterator ( ) ; }
public void testMissingRequiredBundleFile ( ) throws java.lang.Exception { libcore.tzdata.update2.ConfigBundle installedConfigBundle = createValidTzDataBundle ( "2030a" ) ; assertTrue ( install ( installedConfigBundle ) ) ; assertTzDataInstalled ( installedConfigBundle ) ; libcore.tzdata.update2.ConfigBundle incompleteUpdate = createValidTzDataBundleBuilder ( "2030b" ) . clearBionicTzData ( ) . buildUnvalidated ( ) ; assertFalse ( install ( incompleteUpdate ) ) ; assertTzDataInstalled ( installedConfigBundle ) ; }
public boolean isMultipartDownload ( ) { return ( ( getSourceUri ( ) . getLastPathSegment ( ) ) != null ) && ( getSourceUri ( ) . getLastPathSegment ( ) . contains ( "*" ) ) ; }
private com.android.jill.frontend.java.Variable getTempVarFromTopOfStack ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame ) { com.android.jill.frontend.java.Variable topOfStackBeforeInst = getStackVariable ( frame , com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) ; java.lang.String tmpVarId = "-swap_tmp_" + ( typeToUntypedDesc ( topOfStackBeforeInst.getType ( ) ) ) ; com.android.jill.frontend.java.Variable tmpVariable = getVariable ( tmpVarId , tmpVarId , topOfStackBeforeInst.getType ( ) , null ) ; tmpVariable.setSynthetic ( ) ; return tmpVariable ; }
public void binderDied ( ) { synchronized ( this ) { notifyAll ( ) ; } }
private void transformToZip ( @ javax.annotation.Nonnull java.io.InputStream is , @ javax.annotation.Nonnull java.util.zip.ZipOutputStream zipOutputStream , @ javax.annotation.CheckForNull java.util.jar.JarFile jarFile ) throws java.io.IOException { org.objectweb.asm.tree.ClassNode cn = getClassNode ( is ) ; java.lang.String filePath = com.android.jill.frontend.java.JavaTransformer.getZipFilePath ( cn.name ) ; assert ( jarFile == null ) || ( ( jarFile.getEntry ( filePath ) ) == null ) ; try { java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry ( filePath ) ; zipOutputStream.putNextEntry ( entry ) ; transform ( cn , zipOutputStream ) ; } catch ( java.io.IOException e ) { throw new com.android.jill.JillException ( "Error writing to output zip" , e ) ; } }
private static boolean verifyVpnStatus ( android.support.test.uiautomator.UiDevice device ) { device.openNotification ( ) ; boolean isTrue = device.wait ( android.support.test.uiautomator.Until.hasObject ( android.support.test.uiautomator.By.res ( com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_LOCK_ICON_RES ) ) , java.util.concurrent.TimeUnit.MILLISECONDS.convert ( 3L , java.util.concurrent.TimeUnit.SECONDS ) ) ; device.pressHome ( ) ; return isTrue ; }
public void setSimPowerStateForSlot ( int slotIndex , int state ) { enforceModifyPermission ( ) ; int [ ] subId = mSubscriptionController.getSubIdUsingSlotIndex ( slotIndex ) ; if ( ( subId == null ) || ( ( subId.length ) == 0 ) ) { return ; } final com.android.internal.telephony.Phone phone = getPhone ( subId [ 0 ] ) ; if ( phone != null ) { phone.setSimPowerState ( state ) ; } }
private static java.lang.invoke.MethodHandle zero ( sun.invoke.util.Wrapper btw , java.lang.Class < ? > rtype ) { int pos = btw.ordinal ( ) ; java.lang.invoke.MethodHandle zero = java.lang.invoke.MethodHandles.ZERO_MHS [ pos ] ; if ( zero == null ) { zero = java.lang.invoke.MethodHandles.setCachedMethodHandle ( java.lang.invoke.MethodHandles.ZERO_MHS , pos , java.lang.invoke.MethodHandles.makeZero ( btw.primitiveType ( ) ) ) ; } if ( ( zero.type ( ) . returnType ( ) ) == rtype ) return zero ; assert btw == ( sun.invoke.util.Wrapper.OBJECT ) ; return java.lang.invoke.MethodHandles.makeZero ( rtype ) ; }
public boolean commitDirtyAttributesToXml ( ) { boolean result = false ; java.util.HashMap < com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor , com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode > attributeMap = getInternalUiAttributes ( ) ; for ( java.util.Map.Entry < com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor , com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode > entry : attributeMap.entrySet ( ) ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode ui_attr = entry.getValue ( ) ; if ( ui_attr.isDirty ( ) ) { result |= commitAttributeToXml ( ui_attr , ui_attr.getCurrentValue ( ) ) ; ui_attr.setDirty ( false ) ; } } return result ; }
public void onForegroundActivitiesChanged ( int pid , int uid , boolean fg ) { if ( isScreenIdle ( ) ) { android.os.Message message = mServiceHandler.obtainMessage ( ) ; message.arg1 = com.android.stk.StkAppService.OP_IDLE_SCREEN ; mServiceHandler.sendMessage ( message ) ; unregisterProcessObserver ( ) ; } }
private static void loadShortNumberMetadataFromFile ( java.lang.String regionCode ) { java.lang.String fileName = ( ( com.google.i18n.phonenumbers.MetadataManager.SHORT_NUMBER_METADATA_FILE_PREFIX ) + "_" ) + regionCode ; java.io.InputStream source = com.google.i18n.phonenumbers.MetadataManager.class . getResourceAsStream ( fileName ) ; if ( source == null ) { throw new java.lang.IllegalStateException ( ( "missing metadata: " + fileName ) ) ; } com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadataCollection shortNumberMetadata = com.google.i18n.phonenumbers.MetadataManager.loadMetadataAndCloseInput ( source ) ; for ( com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata : shortNumberMetadata.getMetadataList ( ) ) { com.google.i18n.phonenumbers.MetadataManager.regionCodeToShortNumberMetadataMap.put ( regionCode , metadata ) ; } }
static void testAccess2 ( java.lang.ClassLoader loader ) { java.lang.Class altClass ; try { altClass = loader.loadClass ( "Inaccessible2" ) ; java.lang.System.err.println ( ( "ERROR: Inaccessible2 was accessible: " + altClass ) ) ; } catch ( java.lang.ClassNotFoundException cnfe ) { java.lang.Throwable cause = cnfe.getCause ( ) ; if ( cause instanceof java.lang.IllegalAccessError ) { java.lang.System.out.println ( "Got expected CNFE/IAE #2" ) ; } else { java.lang.System.err.println ( "Got unexpected CNFE/IAE #2" ) ; cnfe.printStackTrace ( ) ; } } }
protected void updateSharpImageUsingFuzzyImage ( ) { long startnow ; long endnow ; startnow = java.lang.System.nanoTime ( ) ; scriptC.forEach_UpdateSharpUsingFuzzyPassInput ( buffers.sharpDilatedDepthAllocation , buffers.sharpDilatedDepthAllocation ) ; endnow = java.lang.System.nanoTime ( ) ; android.util.Log.d ( com.android.rs.refocus.d1new.RefocusFilterd1new.myTAG , ( ( "updateSharpImageUsingFuzzyImage: " + ( endnow - startnow ) ) + " ns" ) ) ; }
void assertAudioRoute ( final android.telecom.cts.MockConnection connection , final int route ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return route ; } @ java.lang.Override public java.lang.Object actual ( ) { final android.telecom.CallAudioState state = ( ( android.telecom.Connection ) ( connection ) ) . getCallAudioState ( ) ; return state == null ? null : state.getRoute ( ) ; } } , android.telecom.cts.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( "Connection's audio route should be: " + route ) ) ; }
public com.android.jack.ir.ast.JNameValuePair exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( sourceInfo ) != null ; assert ( value ) != null ; assert ( name ) != null ; com.android.jack.ir.ast.JLiteral jValue = value.exportAsJast ( exportSession ) ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JMethodIdWide methodId = new com.android.jack.ir.ast.JMethodIdWide ( name , com.android.jack.ir.ast.MethodKind.INSTANCE_VIRTUAL ) ; com.android.jack.ir.ast.JNameValuePair jNameValuePair = new com.android.jack.ir.ast.JNameValuePair ( jSourceInfo , methodId , jValue ) ; return jNameValuePair ; }
public boolean processMessage ( android.os.Message message ) { boolean retValue = true ; switch ( message.what ) { case com.android.server.connectivity.Tethering.TetherMasterSM.CMD_TETHER_MODE_REQUESTED : com.android.server.connectivity.tethering.TetherInterfaceStateMachine who = ( ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine ) ( message.obj ) ) ; who.sendMessage ( mErrorNotification ) ; break ; default : retValue = false ; } return retValue ; }
public void testAesCbcHmacSha256Udp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public void setApplicationRestrictions ( @ android.annotation.Nullable android.content.ComponentName admin , java.lang.String packageName , android.os.Bundle settings ) { throwIfParentInstance ( "setApplicationRestrictions" ) ; if ( ( mService ) != null ) { try { mService.setApplicationRestrictions ( admin , packageName , settings ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > getAllModels ( ) { java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > allModels = getAllModels ( new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , false ) ; for ( com.android.builder.model.AndroidProject project : allModels.values ( ) ) { com.android.build.gradle.integration.common.fixture.GradleTestProject.assertNoSyncIssues ( project ) ; } return allModels ; }
public void test_ko ( ) throws java.lang.Exception { libcore.icu.AlphabeticIndex ko = new libcore.icu.AlphabeticIndex ( java.util.Locale.KOREAN ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ᄀ" , "ᄀ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ㄱ" , "ᄀ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ᄁ" , "ᄀ" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( ko , "ᅡ" , "ᄒ" ) ; }
public boolean stopSupplicant ( ) { return doBooleanCommand ( "TERMINATE" ) ; }
public void stopRingbackForCall ( com.android.server.telecom.Call call ) { if ( ( mCall ) == call ) { mCall = null ; if ( ( mTonePlayer ) == null ) { com.android.server.telecom.Log.w ( this , "No player found to stop." ) ; } else { com.android.server.telecom.Log.i ( this , "Stopping the ringback tone for %s." , call ) ; mTonePlayer.stopTone ( ) ; mTonePlayer = null ; } } }
private static char [ ] zzUnpackCMap ( java.lang.String packed ) { char [ ] map = new char [ 65536 ] ; int i = 0 ; int j = 0 ; while ( i < 208 ) { int count = packed.charAt ( ( i ++ ) ) ; char value = packed.charAt ( ( i ++ ) ) ; do map [ ( j ++ ) ] = value ; while ( ( -- count ) > 0 ) ; } return map ; }
public final void testPointIntInt ( ) { com.android.ide.eclipse.adt.editors.layout.gscripts.Point p = new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( 1 , 2 ) ; assertEquals ( 1 , p.x ) ; assertEquals ( 2 , p.y ) ; p = new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( ( - 3 ) , ( - 4 ) ) ; assertEquals ( ( - 3 ) , p.x ) ; assertEquals ( ( - 4 ) , p.y ) ; }
protected void finalizeFuzzyImageUsingSharpImage ( ) { long startnow ; long endnow ; startnow = java.lang.System.nanoTime ( ) ; scriptC.forEach_FinalizeFuzzyImageUsingSharpImage ( buffers.inAllocation ) ; endnow = java.lang.System.nanoTime ( ) ; android.util.Log.d ( com.android.rs.test.d1new.RefocusFilterd1new.myTAG , ( ( "finalizeFuzzyImageUsingSharpImage: " + ( endnow - startnow ) ) + " ns" ) ) ; }
public void onNewIntent ( android.content.Intent intent ) { super . onNewIntent ( intent ) ; if ( UsbManager.ACTION_USB_ACCESSORY_ATTACHED.equals ( intent.getAction ( ) ) ) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra ( UsbManager.EXTRA_ACCESSORY ) ; openAccessory ( accessory ) ; } }
final void get ( short [ ] dst , int dstOffset , int shortCount ) { checkNotFreed ( ) ; int byteCount = checkGetBounds ( SizeOf.SHORT , dst.length , dstOffset , shortCount ) ; this . block.peekShortArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , shortCount , order.needsSwap ) ; position += byteCount ; }
void assertNumCalls ( final android.telecom.cts.MockInCallService inCallService , final int numCalls ) { waitUntilConditionIsTrueOrTimeout ( new android.telecom.cts.BaseTelecomTestWithMockServices.Condition ( ) { @ java.lang.Override public java.lang.Object expected ( ) { return numCalls ; } @ java.lang.Override public java.lang.Object actual ( ) { return inCallService.getCallCount ( ) ; } } , android.telecom.cts.WAIT_FOR_STATE_CHANGE_TIMEOUT_MS , ( ( "InCallService should contain " + numCalls ) + " calls." ) ) ; }
public void setUp ( ) throws java.lang.Exception { com.android.tradefed.build.IFolderBuildInfo buildInfo = org.easymock.EasyMock.createNiceMock ( com.android.tradefed.build.IFolderBuildInfo.class ) ; org.easymock.EasyMock.replay ( buildInfo ) ; mVtsPythonRunnerHelper = new com.android.tradefed.util.VtsPythonRunnerHelper ( buildInfo ) { @ java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper ( java.lang.String [ ] cmd ) { return mProcessHelper ; } } ; }
public void testFileToUrl ( ) throws java.lang.Exception { assertEquals ( "file:/tmp/foo/bar" , com.android.utils.SdkUtils.fileToUrlString ( new java.io.File ( "/tmp/foo/bar" ) ) ) ; assertEquals ( "file:/tmp/$&+,:;=%3F@/foo%20bar%25" , com.android.utils.SdkUtils.fileToUrlString ( new java.io.File ( "/tmp/$&+,:;=?@/foo bar%" ) ) ) ; }
public void testIdenticalBinaryCodeComparison ( ) throws java.io.IOException { java.lang.String sourcePath = "com/android/jack/dexcomparator/test/A.java" ; java.io.File a1 = new java.io.File ( com.android.jack.dexcomparator.test.BinaryCodeComparisonTest.testSource1 , sourcePath ) ; java.io.File dex1 = java.io.File.createTempFile ( "dex1" , ".dex" ) ; dex1.deleteOnExit ( ) ; com.android.jack.dexcomparator.test.TestTools.compileToDexWithJack ( a1 , dex1 ) ; try { new com.android.jack.DexComparator ( false , true , false , true ) . compare ( dex1 , dex1 ) ; } catch ( com.android.jack.DifferenceFoundException e ) { org.junit.Assert.fail ( e.getMessage ( ) ) ; } }
public void resolve ( ) { for ( com.android.jack.ir.ast.JCaseStatement caseStatement : cases ) { block.addCaseBlock ( com.android.jack.cfg.ForwardBranchResolver.getTargetBlock ( caseStatement ) ) ; } if ( ( defaultCase ) != null ) { block.setDefault ( com.android.jack.cfg.ForwardBranchResolver.getTargetBlock ( defaultCase ) ) ; } }
public void run ( ) { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_single_source_script s = new com.android.rs.test.ScriptC_single_source_script ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_entrypoint ( testAllocation1 , testAllocation2 ) ; s.forEach_oldFoo ( testAllocation2 , testAllocation2 ) ; s.forEach_oldGoo ( testAllocation2 , testAllocation2 ) ; s.invoke_validate ( testAllocation2 ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
protected com.intellij.execution.RunnerAndConfigurationSettings cloneTemplateConfiguration ( @ org.jetbrains.annotations.NotNull final com.intellij.execution.actions.ConfigurationContext context ) { final com.intellij.execution.configurations.RunConfiguration original = context.getOriginalConfiguration ( myConfigurationFactory.getType ( ) ) ; if ( original != null ) { return com.intellij.execution.RunManager.getInstance ( context.getProject ( ) ) . createConfiguration ( original.clone ( ) , myConfigurationFactory ) ; } return com.intellij.execution.RunManager.getInstance ( context.getProject ( ) ) . createRunConfiguration ( "" , myConfigurationFactory ) ; }
protected void checkReportedError ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( issue == ( com.android.tools.lint.checks.MissingClassDetector.INNERCLASS ) ) { assertNotNull ( message , com.android.tools.lint.checks.MissingClassDetector.getOldValue ( issue , message ) ) ; assertNotNull ( message , com.android.tools.lint.checks.MissingClassDetector.getNewValue ( issue , message ) ) ; } }
private boolean isScanClient ( int clientIf ) { for ( com.android.bluetooth.gatt.ScanClient client : mScanManager.getRegularScanQueue ( ) ) { if ( ( client.clientIf ) == clientIf ) { return true ; } } for ( com.android.bluetooth.gatt.ScanClient client : mScanManager.getBatchScanQueue ( ) ) { if ( ( client.clientIf ) == clientIf ) { return true ; } } return false ; }
public com.android.sched.vfs.InputOutputVDir getInputVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileOrDirectoryException { java.io.File file = new java.io.File ( dir , path.getPathAsString ( java.io.File.separatorChar ) ) ; if ( ! ( file.exists ( ) ) ) { throw new com.android.sched.util.file.NoSuchFileException ( new com.android.sched.util.location.FileLocation ( file ) ) ; } if ( file.isFile ( ) ) { throw new com.android.sched.util.file.NotFileOrDirectoryException ( new com.android.sched.util.location.FileLocation ( file ) ) ; } return new com.android.sched.vfs.DirectDir ( file , vfs ) ; }
private void writeInt ( java.io.OutputStream os , int x ) throws java.io.IOException { os.write ( ( ( x > > 24 ) & 255 ) ) ; os.write ( ( ( x > > 16 ) & 255 ) ) ; os.write ( ( ( x > > 8 ) & 255 ) ) ; os.write ( ( x & 255 ) ) ; }
public void notifyChange ( android.net.Uri uri , android.database.ContentObserver observer , boolean syncToNetwork ) { notifyChange ( uri , observer , syncToNetwork , android.os.UserHandle.getCallingUserId ( ) ) ; }
private boolean retryAfterDisconnected ( java.lang.String reason ) { boolean retry = true ; if ( Phone.REASON_RADIO_TURNED_OFF.equals ( reason ) ) { retry = false ; } return retry ; }
public void start ( ) { android.util.Log.i ( com.android.server.ethernet.EthernetServiceImpl.TAG , "Starting Ethernet service" ) ; android.os.HandlerThread handlerThread = new android.os.HandlerThread ( "EthernetServiceThread" ) ; handlerThread.start ( ) ; mHandler = new android.os.Handler ( handlerThread.getLooper ( ) ) ; mTracker.start ( mContext , mHandler ) ; mStarted.set ( true ) ; }
public void testApplyWhenCommonFileChangesStrict ( ) throws java.lang.Exception { myPatchSpec.setStrict ( true ) ; com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; com.intellij.openapi.util.io.FileUtil.copy ( new java.io.File ( myOlderDir , "/lib/bootstrap.jar" ) , new java.io.File ( myOlderDir , "/lib/boot.jar" ) ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; assertEquals ( 1 , preparationResult.validationResults.size ( ) ) ; assertEquals ( new com.intellij.updater.ValidationResult ( ValidationResult.Kind.ERROR , "lib/boot.jar" , ValidationResult.Action.VALIDATE , ValidationResult.MODIFIED_MESSAGE , ValidationResult.Option.NONE ) , preparationResult.validationResults.get ( 0 ) ) ; }
public org.eclipse.swt.graphics.Color getBackground ( java.lang.Object element , int columnIndex ) { if ( element instanceof com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) { if ( ( ( ( com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) ( element ) ) . getState ( ) ) == ( com.android.sdkuilib.internal.repository.PackagesPage.PkgState.NEW_AVAILABLE ) ) { return mColorNew ; } else if ( ( ( ( com.android.sdkuilib.internal.repository.PackagesPage.PkgItem ) ( element ) ) . getState ( ) ) == ( com.android.sdkuilib.internal.repository.PackagesPage.PkgState.UPDATE_AVAILABLE ) ) { return mColorUpdate ; } } return null ; }
private void launchQuickContact ( ) { if ( com.android.dialer.compat.CompatUtils.hasPrioritizedMimeType ( ) ) { android.provider.ContactsContract.QuickContact.showQuickContact ( getContext ( ) , this , getLookupUri ( ) , null , Phone.CONTENT_ITEM_TYPE ) ; } else { android.provider.ContactsContract.QuickContact.showQuickContact ( getContext ( ) , this , getLookupUri ( ) , QuickContact.MODE_LARGE , null ) ; } }
protected void addNotificationViews ( com.android.systemui.statusbar.NotificationData.Entry entry ) { int pos = mNotificationData.add ( entry ) ; if ( com.android.systemui.statusbar.BaseStatusBar.DEBUG ) { android.util.Log.d ( com.android.systemui.statusbar.BaseStatusBar.TAG , ( "addNotificationViews: added at " + pos ) ) ; } updateExpansionStates ( ) ; updateNotificationIcons ( ) ; }
public void testCheckAccessLevel_isDeviceOwner ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( true ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; assertEquals ( NetworkStatsAccess.Level.DEVICE , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public void stopDtmf ( ) { if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , " stopDtmf()" ) ; android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , this . toString ( ) ) ; } if ( hasActiveFgCall ( ) ) getFgPhone ( ) . stopDtmf ( ) ; if ( com.android.internal.telephony.CallManager.VDBG ) { android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , "End stopDtmf()" ) ; android.telephony.Rlog.d ( com.android.internal.telephony.CallManager.LOG_TAG , this . toString ( ) ) ; } }
protected void update ( com.android.ide.common.resources.ScanningContext context ) { java.util.Set < java.lang.String > oldIdNames = new java.util.HashSet < java.lang.String > ( mIdResources.keySet ( ) ) ; mIdResources.clear ( ) ; if ( ! ( parseFileForIds ( context ) ) ) { context.requestFullAapt ( ) ; return ; } java.util.Set < java.lang.String > keySet = mIdResources.keySet ( ) ; assert keySet != oldIdNames ; if ( ( oldIdNames.equals ( keySet ) ) == false ) { updateResourceItems ( context ) ; } }
protected void tearDown ( ) throws java.lang.Exception { if ( mConnection.isBound ( ) ) { getInstrumentation ( ) . getContext ( ) . unbindService ( mConnection ) ; } if ( ( ( mDevice.hasObject ( Constants.SIDE_PANEL ) ) || ( mDevice.hasObject ( Constants.MENU ) ) ) || ( mDevice.hasObject ( Constants.PROGRAM_GUIDE ) ) ) { mDevice.pressBack ( ) ; } super . tearDown ( ) ; }
public java.lang.StringBuffer format ( com.ibm.icu.util.CurrencyAmount currAmt , java.lang.StringBuffer toAppendTo , java.text.FieldPosition pos ) { com.ibm.icu.util.Currency save = getCurrency ( ) ; com.ibm.icu.util.Currency curr = currAmt.getCurrency ( ) ; boolean same = curr.equals ( save ) ; if ( ! same ) setCurrency ( curr ) ; format ( currAmt.getNumber ( ) , toAppendTo , pos ) ; if ( ! same ) setCurrency ( save ) ; return toAppendTo ; }
private void assertEqualRoutes ( java.util.Collection < android.net.RouteInfo > expected , java.util.Collection < android.net.RouteInfo > actual ) { java.util.Set < android.net.RouteInfo > expectedSet = new android.util.ArraySet ( expected ) ; java.util.Set < android.net.RouteInfo > actualSet = new android.util.ArraySet ( actual ) ; assertEquals ( actual.size ( ) , actualSet.size ( ) ) ; assertEquals ( expectedSet , actualSet ) ; }
public void testGetByEnabledState ( ) throws java.lang.Exception { mComponentContextFixture.addConnectionService ( com.android.server.telecom.tests.PhoneAccountRegistrarTest.makeQuickConnectionServiceComponentName ( ) , org.mockito.Mockito.mock ( com.android.internal.telecom.IConnectionService.class ) ) ; mRegistrar.registerPhoneAccount ( makeQuickAccountBuilder ( "id1" , 1 ) . setCapabilities ( PhoneAccount.CAPABILITY_CALL_PROVIDER ) . build ( ) ) ; assertEquals ( 0 , mRegistrar.getCallCapablePhoneAccounts ( PhoneAccount.SCHEME_TEL , false , java.lang.Process.myUserHandle ( ) ) . size ( ) ) ; assertEquals ( 1 , mRegistrar.getCallCapablePhoneAccounts ( PhoneAccount.SCHEME_TEL , true , java.lang.Process.myUserHandle ( ) ) . size ( ) ) ; }
private static java.lang.CharSequence toTitleCase ( java.lang.CharSequence value ) { if ( ( android.os.Build.VERSION.SDK_INT ) < ( android.os.Build.VERSION_CODES.N ) ) { return value ; } return android.icu.lang.UCharacter.toTitleCase ( java.util.Locale.getDefault ( ) , value.toString ( ) , android.icu.text.BreakIterator.getSentenceInstance ( ) , UCharacter.TITLECASE_NO_LOWERCASE ) ; }
public static android.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR ( android.renderscript.RenderScript rs ) { if ( ( rs.mSampler_CLAMP_LINEAR_MIP_LINEAR ) == null ) { android.renderscript.Sampler.Builder b = new android.renderscript.Sampler.Builder ( rs ) ; b.setMinification ( android.renderscript.Sampler.Value.LINEAR_MIP_LINEAR ) ; b.setMagnification ( android.renderscript.Sampler.Value.LINEAR ) ; b.setWrapS ( android.renderscript.Sampler.Value.CLAMP ) ; b.setWrapT ( android.renderscript.Sampler.Value.CLAMP ) ; rs.mSampler_CLAMP_LINEAR_MIP_LINEAR = b.create ( ) ; } return rs.mSampler_CLAMP_LINEAR_MIP_LINEAR ; }
public boolean onDisconnect ( int cause ) { boolean changed = false ; mCause = cause ; if ( ! ( mDisconnected ) ) { doDisconnect ( ) ; if ( com.android.internal.telephony.GsmCdmaConnection.DBG ) android.telephony.Rlog.d ( com.android.internal.telephony.GsmCdmaConnection.LOG_TAG , ( "onDisconnect: cause=" + cause ) ) ; mOwner.getPhone ( ) . notifyDisconnect ( this ) ; if ( ( mParent ) != null ) { changed = mParent.connectionDisconnected ( this ) ; } mOrigConnection = null ; } clearPostDialListeners ( ) ; releaseWakeLock ( ) ; return changed ; }
public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { com.android.jack.ir.ast.JMethod method = cfg.getMethod ( ) ; tracer.getStatistic ( com.android.jack.ir.ast.cfg.ControlFlowGraphSizeTracker.STATISTICS ) . add ( cfg.getBlocksDepthFirst ( true ) . size ( ) , ( ( ( ( formatter.getName ( method ) ) + " [" ) + ( formatter.getName ( method.getEnclosingType ( ) ) ) ) + "]" ) ) ; }
public void testFocusGain ( ) { testSnkPlay ( ) ; streamHandler.handleMessage ( streamHandler.obtainMessage ( A2dpSinkStreamHandler.AUDIO_FOCUS_CHANGE , AudioManager.AUDIOFOCUS_GAIN ) ) ; org.mockito.Mockito.verify ( mockAudioManager , org.mockito.Mockito.times ( 1 ) ) . requestAudioFocus ( org.mockito.Mockito.any ( ) , org.mockito.Mockito.anyInt ( ) , org.mockito.Mockito.anyInt ( ) ) ; org.mockito.Mockito.verify ( mockA2dpSink , org.mockito.Mockito.times ( 2 ) ) . informAudioFocusStateNative ( 1 ) ; org.mockito.Mockito.verify ( mockA2dpSink , org.mockito.Mockito.times ( 2 ) ) . informAudioTrackGainNative ( 1.0F ) ; }
public void doubleClick ( org.eclipse.jface.viewers.DoubleClickEvent event ) { com.android.ddmlib.ThreadInfo selectedThread = getThreadSelection ( event.getSelection ( ) ) ; if ( selectedThread != null ) { com.android.ddmlib.Client client = ( ( com.android.ddmlib.Client ) ( mThreadViewer.getInput ( ) ) ) ; if ( client != null ) { client.requestThreadStackTrace ( selectedThread.getThreadId ( ) ) ; } } }
protected com.android.tools.lint.detector.api.Severity getDefaultSeverity ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue ) { com.android.tools.lint.detector.api.Severity severity = super . getDefaultSeverity ( issue ) ; if ( severity == ( com.android.tools.lint.detector.api.Severity.IGNORE ) ) { return com.android.tools.lint.detector.api.Severity.WARNING ; } return severity ; }
public void subscribe ( @ android.annotation.Nullable android.os.Handler handler , @ android.annotation.NonNull android.net.wifi.aware.SubscribeConfig subscribeConfig , @ android.annotation.NonNull android.net.wifi.aware.WifiAwareDiscoverySessionCallback callback ) { android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "publish: called post GC on WifiAwareManager" ) ; return ; } if ( mTerminated ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "publish: called after termination" ) ; return ; } mgr.subscribe ( mClientId , ( handler == null ? android.os.Looper.getMainLooper ( ) : handler.getLooper ( ) ) , subscribeConfig , callback ) ; }
public void setCarrierInfoForImsiEncryption ( int subId , java.lang.String callingPackage , android.telephony.ImsiEncryptionInfo imsiEncryptionInfo ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mContext , callingPackage , "setCarrierInfoForImsiEncryption" ) ) ) { return ; } phone.setCarrierInfoForImsiEncryption ( imsiEncryptionInfo ) ; } else { loge ( ( "setCarrierInfoForImsiEncryption phone is null for Subscription:" + subId ) ) ; return ; } }
private static boolean shouldWarnForOutgoingWps ( android.content.Context context , java.lang.String number ) { if ( ( number != null ) && ( number.startsWith ( com.android.dialer.util.DialerUtils.WPS_PREFIX ) ) ) { android.telephony.TelephonyManager telephonyManager = context.getSystemService ( android.telephony.TelephonyManager.class ) ; boolean isOnVolte = ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.N ) ) && ( ( telephonyManager.getVoiceNetworkType ( ) ) == ( android.telephony.TelephonyManager.NETWORK_TYPE_LTE ) ) ; boolean hasCurrentActiveCall = ( telephonyManager.getCallState ( ) ) == ( android.telephony.TelephonyManager.CALL_STATE_OFFHOOK ) ; return isOnVolte && hasCurrentActiveCall ; } return false ; }
public final T call ( ) { try { T result = realCall ( ) ; threadShouldThrow ( "InterruptedException" ) ; return result ; } catch ( java.lang.InterruptedException success ) { threadAssertFalse ( java.lang.Thread.interrupted ( ) ) ; } catch ( java.lang.Throwable t ) { threadUnexpectedException ( t ) ; } return null ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ReturnStatement x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JExpression expression = pop ( x.expression ) ; push ( new com.android.jack.ir.ast.JReturnStatement ( info , expression ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
private void recordNewWindow ( int pid , int window ) { synchronized ( android.database.CursorWindow.sWindowToPidMap ) { android.database.CursorWindow.sWindowToPidMap.put ( window , pid ) ; if ( android.util.Log.isLoggable ( android.database.CursorWindow.STATS_TAG , Log.VERBOSE ) ) { android.util.Log.i ( android.database.CursorWindow.STATS_TAG , ( "Created a new Cursor. " + ( printStats ( ) ) ) ) ; } } }
public void test_getReuseAddress ( ) throws java.lang.Exception { java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( ) ; theSocket.setReuseAddress ( true ) ; assertTrue ( "getReuseAddress false when it should be true" , theSocket.getReuseAddress ( ) ) ; theSocket.setReuseAddress ( false ) ; assertFalse ( "getReuseAddress true when it should be False" , theSocket.getReuseAddress ( ) ) ; theSocket.close ( ) ; try { theSocket.getReuseAddress ( ) ; fail ( "SocketException was not thrown." ) ; } catch ( java.net.SocketException se ) { } }
public void shutdown ( ) { for ( android.content.BroadcastReceiver receiver : listeningDevices.values ( ) ) { try { mService.unregisterReceiver ( receiver ) ; } catch ( java.lang.IllegalArgumentException ex ) { com.googlecode.android_scripting.Log.e ( ( "Failed to unregister " + ex ) ) ; } } listeningDevices.clear ( ) ; mService.unregisterReceiver ( mPairingHelper ) ; }
public void test_EVP_get_digestbyname ( ) throws java.lang.Exception { org.junit.Assert.assertTrue ( ( ( org.conscrypt.NativeCrypto.EVP_get_digestbyname ( "sha256" ) ) != ( org.conscrypt.NativeCryptoTest.NULL ) ) ) ; try { org.conscrypt.NativeCrypto.EVP_get_digestbyname ( null ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { org.conscrypt.NativeCrypto.EVP_get_digestbyname ( "" ) ; org.conscrypt.NativeCrypto.EVP_get_digestbyname ( "foobar" ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } }
public void exit ( ) { if ( com.android.internal.telephony.InboundSmsHandler.DBG ) log ( "exiting Waiting state" ) ; setWakeLockTimeout ( com.android.internal.telephony.InboundSmsHandler.WAKELOCK_TIMEOUT ) ; if ( com.android.internal.telephony.InboundSmsHandler.VDBG ) { if ( hasMessages ( com.android.internal.telephony.InboundSmsHandler.EVENT_STATE_TIMEOUT ) ) { log ( "exiting Waiting state: removing EVENT_STATE_TIMEOUT from message queue" ) ; } if ( hasMessages ( com.android.internal.telephony.InboundSmsHandler.EVENT_UPDATE_TRACKER ) ) { log ( "exiting Waiting state: removing EVENT_UPDATE_TRACKER from message queue" ) ; } } removeMessages ( com.android.internal.telephony.InboundSmsHandler.EVENT_STATE_TIMEOUT ) ; removeMessages ( com.android.internal.telephony.InboundSmsHandler.EVENT_UPDATE_TRACKER ) ; }
public com.android.jack.dx.dex.file.IndexedItem get ( com.android.jack.dx.rop.cst.Constant cst ) { if ( cst == null ) { throw new java.lang.NullPointerException ( "cst == null" ) ; } throwIfNotPrepared ( ) ; com.android.jack.dx.dex.file.IndexedItem result = methodIds.get ( cst ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( "not found" ) ; } return result ; }
public long toEpochMilli ( ) { if ( ( ( seconds ) < 0 ) && ( ( nanos ) > 0 ) ) { long millis = java.lang.Math.multiplyExact ( ( ( seconds ) + 1 ) , 1000 ) ; long adjustment = ( ( nanos ) / 1000000 ) - 1000 ; return java.lang.Math.addExact ( millis , adjustment ) ; } else { long millis = java.lang.Math.multiplyExact ( seconds , 1000 ) ; return java.lang.Math.addExact ( millis , ( ( nanos ) / 1000000 ) ) ; } }
public void visitFieldInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { if ( ( ( interfaceFieldToAccessInCompanionMethodToTriggerInterfaceClinit ) == null ) && ( opcode == ( org.objectweb.asm.Opcodes.PUTSTATIC ) ) ) { com.google.common.base.Preconditions.checkState ( owner.equals ( internalName ) , "Expect only the fields in this interface to be initialized. owner=%s, expected=%s" , owner , internalName ) ; interfaceFieldToAccessInCompanionMethodToTriggerInterfaceClinit = com.google.devtools.build.android.desugar.FieldInfo.create ( owner , name , desc ) ; } super . visitFieldInsn ( opcode , owner , name , desc ) ; }
public void onConnectionServiceFocusReleased ( android.telecom.Logging.Session.Info sessionInfo ) throws android.os.RemoteException { android.telecom.Log.startSession ( sessionInfo , "CSW.oCSFR" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { mConnSvrFocusListener.onConnectionServiceReleased ( this ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void testStageInstallWithErrorCode_withBadlyFormedDistroVersion ( ) throws java.lang.Exception { com.android.timezone.distro.DistroVersion validDistroVersion = new com.android.timezone.distro.DistroVersion ( 1 , 1 , libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; byte [ ] invalidFormatVersionBytes = validDistroVersion.toBytes ( ) ; invalidFormatVersionBytes [ 0 ] = 'A' ; com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createTimeZoneDistroWithVersionBytes ( invalidFormatVersionBytes ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( distro.getBytes ( ) ) ) ; assertNoDistroOperationStaged ( ) ; assertNoInstalledDistro ( ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method.getEnclosingType ( ) . isExternal ( ) ) || ( method.isNative ( ) ) ) || ( method.isAbstract ( ) ) ) || ( ! ( filter.accept ( this . getClass ( ) , method ) ) ) ) { return ; } checker.accept ( method ) ; }
public void eventDataPathRequest ( android.hardware.wifi.V1_0.NanDataPathRequestInd event ) { if ( com.android.server.wifi.aware.WifiAwareNativeCallback.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNativeCallback.TAG , ( ( ( ( ( "eventDataPathRequest: discoverySessionId=" + ( event.discoverySessionId ) ) + ", peerDiscMacAddr=" ) + ( java.lang.String.valueOf ( libcore.util.HexEncoding.encode ( event.peerDiscMacAddr ) ) ) ) + ", ndpInstanceId=" ) + ( event.ndpInstanceId ) ) ) ; } mWifiAwareStateManager.onDataPathRequestNotification ( event.discoverySessionId , event.peerDiscMacAddr , event.ndpInstanceId , convertUcByteToLcByteArray ( event.appInfo ) ) ; }
public android.hardware.usb.UsbDeviceConnection openDevice ( android.hardware.usb.UsbDevice device ) { try { java.lang.String deviceName = device.getDeviceName ( ) ; android.os.ParcelFileDescriptor pfd = mService.openDevice ( deviceName ) ; if ( pfd != null ) { android.hardware.usb.UsbDeviceConnection connection = new android.hardware.usb.UsbDeviceConnection ( device ) ; boolean result = connection.open ( deviceName , pfd ) ; pfd.close ( ) ; if ( result ) { return connection ; } } } catch ( java.lang.Exception e ) { android.util.Log.e ( android.hardware.usb.UsbManager.TAG , "exception in UsbManager.openDevice" , e ) ; } return null ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode node = ( ( mUiRootNode.getUiParent ( ) ) != null ) ? mUiRootNode.getUiParent ( ) : mUiRootNode ; node.removeUpdateListener ( mUiRefreshListener ) ; mUiRootNode.removeUpdateListener ( mUiEnableListener ) ; com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . removeTargetListener ( targetListener ) ; if ( ( mClipboard ) != null ) { mClipboard.dispose ( ) ; mClipboard = null ; } }
protected void finalize ( ) throws java.io.IOException { if ( ( fd ) != null ) { if ( ( ( fd ) == ( java.io.FileDescriptor.out ) ) || ( ( fd ) == ( java.io.FileDescriptor.err ) ) ) { flush ( ) ; } else { java.io.FileOutputStream.runningFinalize.set ( java.lang.Boolean.TRUE ) ; try { close ( ) ; } finally { java.io.FileOutputStream.runningFinalize.set ( java.lang.Boolean.FALSE ) ; } } } }
public boolean canRunOn ( com.android.sdklib.IAndroidTarget target ) { if ( target == ( this ) ) { return true ; } if ( ( ( mLibraries ) == null ) || ( mLibraries.isEmpty ( ) ) ) { return mBasePlatform.canRunOn ( target ) ; } else { if ( ( ! ( mVendor.equals ( target.getVendor ( ) ) ) ) || ( ! ( mName.equals ( target.getName ( ) ) ) ) ) { return false ; } return mBasePlatform.canRunOn ( target ) ; } }
void mute ( boolean shouldMute ) { android.telecom.Log.v ( this , "mute, shouldMute: %b" , shouldMute ) ; if ( mCallsManager.hasEmergencyCall ( ) ) { shouldMute = false ; android.telecom.Log.v ( this , "ignoring mute for emergency call" ) ; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo ( ( shouldMute ? CallAudioRouteStateMachine.MUTE_ON : CallAudioRouteStateMachine.MUTE_OFF ) ) ; }
private static int [ ] addToIntArray ( int [ ] destination , int offset , int destinationlength , int value , int increments ) { int newlength = destinationlength ; if ( ( offset + 1 ) == newlength ) { newlength += increments ; int [ ] temp = new int [ newlength ] ; java.lang.System.arraycopy ( destination , 0 , temp , 0 , offset ) ; destination = temp ; } destination [ offset ] = value ; return destination ; }
private void printArrayMap ( ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printArrayMap" , "hashMapSize: %d, currentlyExpandedViewHolderId:%d" , newVoicemailViewHolderArrayMap.size ( ) , currentlyExpandedViewHolderId ) ; if ( ! ( newVoicemailViewHolderArrayMap.isEmpty ( ) ) ) { java.lang.String ids = "" ; for ( int id : newVoicemailViewHolderArrayMap.keySet ( ) ) { ids = ( ids + id ) + " " ; } com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printArrayMap" , ( "ids are " + ids ) ) ; } }
private boolean acquireWakeLock ( java.lang.String lockName ) { if ( ( mWakeLock ) == null ) { mWakeLockName = lockName ; mWakeLock = mPowerManager.newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , lockName ) ; } if ( ! ( mWakeLock.isHeld ( ) ) ) mWakeLock.acquire ( ) ; return true ; }
public com.google.common.collect.ImmutableMap < K , V > getAllPresent ( java.lang.Iterable < ? > keys ) { java.util.Map < K , V > result = com.google.common.collect.Maps.newLinkedHashMap ( ) ; for ( java.lang.Object key : keys ) { if ( ! ( result.containsKey ( key ) ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) K castKey = ( ( K ) ( key ) ) ; result.put ( castKey , getIfPresent ( key ) ) ; } } return com.google.common.collect.ImmutableMap.copyOf ( result ) ; }
private void closeSocket ( ) { try { if ( ( mSocket ) != null ) { mSocket.close ( ) ; mSocket = null ; } } catch ( java.io.IOException e ) { android.util.Log.e ( com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG , "Error when closing socket" , e ) ; } }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { java.util.List < java.lang.reflect.Field > optionFields = com.google.common.collect.Lists.newArrayList ( com.google.devtools.common.options.OptionsParser.getAllAnnotatedFields ( optionsClass ) ) ; java.util.Collections.sort ( optionFields , com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage.getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG ) ; } }
private void selectConfiguration ( com.android.ide.common.resources.configuration.FolderConfiguration fileConfig ) { assert com.android.ide.eclipse.adt.AdtUtils.isUiThread ( ) ; try { java.lang.String current = mEditedFile.getParent ( ) . getName ( ) ; if ( current.equals ( com.android.SdkConstants.FD_RES_LAYOUT ) ) { current = "default" ; } mConfigCombo.setText ( current ) ; resizeToolBar ( ) ; } finally { ( mDisableUpdates ) -- ; } }
private static void startTimer ( ) { synchronized ( com.android.jack.server.Server.lockTimer ) { if ( ( com.android.jack.server.Server.timer ) != null ) { com.android.jack.server.Server.cancelTimer ( ) ; } com.android.jack.server.Server.logger.log ( java.util.logging.Level.INFO , "Start timer" ) ; com.android.jack.server.Server.timer = new java.util.Timer ( "jack-server-timeout" ) ; com.android.jack.server.Server.timer.schedule ( new java.util.TimerTask ( ) { @ java.lang.Override public void run ( ) { com.android.jack.server.Server.shutdownFifo ( ) ; com.android.jack.server.Server.cancelTimer ( ) ; } } , com.android.jack.server.Server.timeout ) ; } }
public void testNoNumberSupplied ( ) { android.net.Uri handle = android.net.Uri.parse ( "tel:" ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_CALL , handle ) ; int result = processIntent ( intent , true ) ; assertEquals ( DisconnectCause.NO_PHONE_NUMBER_SUPPLIED , result ) ; verifyNoBroadcastSent ( ) ; verifyNoCallPlaced ( ) ; }
public void setVisible ( boolean visible ) { super . setVisible ( visible ) ; if ( com.android.tools.lint.detector.api.LintUtils.assertionsEnabled ( ) ) { java.lang.String uniqueProjectName = com.android.ide.eclipse.adt.AdtUtils.getUniqueProjectName ( "Test" , "" ) ; mProjectText.setText ( uniqueProjectName ) ; mPackageText.setText ( "test.pkg" ) ; } validatePage ( ) ; }
public void deletePlaylist ( java.lang.String playlistname ) throws java.lang.Exception { android.app.Instrumentation inst = getInstrumentation ( ) ; inst.sendStringSync ( playlistname ) ; java.lang.Thread.sleep ( MusicPlayerNames.WAIT_SHORT_TIME ) ; inst.sendKeyDownUpSync ( KeyEvent.KEYCODE_DPAD_DOWN ) ; inst.invokeContextMenuAction ( getActivity ( ) , ( ( MusicUtils.Defs.CHILD_MENU_BASE ) + 1 ) , 0 ) ; java.lang.Thread.sleep ( MusicPlayerNames.WAIT_SHORT_TIME ) ; clearSearchString ( playlistname.length ( ) ) ; }
public static void main ( java.lang.String [ ] args ) { junit.textui.TestRunner tr = new junit.textui.TestRunner ( ) ; junit.framework.TestResult result = tr.doRun ( com.android.monkeyrunner.AllTests.suite ( com.android.monkeyrunner.ImageUtilsTest.class , com.android.monkeyrunner.JythonUtilsTest.class , com.android.monkeyrunner.MonkeyRunnerOptionsTest.class , com.android.monkeyrunner.adb.LinearInterpolatorTest.class , com.android.monkeyrunner.adb.AdbMonkeyDeviceTest.class ) ) ; if ( result.wasSuccessful ( ) ) { java.lang.System.exit ( 0 ) ; } else { java.lang.System.exit ( 1 ) ; } }
public void onItemClick ( android.widget.AdapterView < ? > parent , android.view.View view , int position , long id ) { if ( com.android.bluetooth.opp.BluetoothOppTransferHistory.V ) android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppTransferHistory.TAG , ( "onItemClick: ContextMenu = " + ( mContextMenu ) ) ) ; if ( ! ( mContextMenu ) ) { mTransferCursor.moveToPosition ( position ) ; openCompleteTransfer ( ) ; updateNotificationWhenBtDisabled ( ) ; } mContextMenu = false ; }
public void test_SSL_check_private_key_no_key_no_cert ( ) throws java.lang.Exception { int c = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_CTX_new ( ) ; int s = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_new ( c ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_free ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_CTX_free ( c ) ; org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors ( ) ; }
public int [ ] blend ( int [ ] src , int [ ] dst ) { return new int [ ] { dst [ 0 ] , src [ 1 ] , dst [ 2 ] , java.lang.Math.min ( 255 , ( ( src [ 3 ] ) + ( dst [ 3 ] ) ) ) } ; }
protected void setViewerInput ( ) { java.util.List < com.android.sdkuilib.internal.repository.core.PkgCategory > cats = mDiffLogic.getCategories ( isSortByApi ( ) ) ; if ( ( mITreeViewer.getInput ( ) ) != cats ) { mITreeViewer.setInput ( cats ) ; } else { mITreeViewer.refresh ( ) ; } }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > executeAndReturnMultiModel ( boolean emulateStudio_1_0 , java.lang.String ... tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { executeBuild ( java.util.Collections.< java.lang.String > emptyList ( ) , connection , tasks , com.android.build.gradle.integration.common.fixture.GradleTestProject.ExpectedBuildResult.SUCCESS ) ; return buildModel ( connection , new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , emulateStudio_1_0 ) ; } finally { connection.close ( ) ; } }
public void binderDied ( ) { if ( com.android.server.am.ActivityManagerService.localLOGV ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( "Death received in " + ( this ) ) + " for thread " ) + ( mAppThread.asBinder ( ) ) ) ) ; synchronized ( this ) { appDiedLocked ( mApp , mPid , mAppThread ) ; } }
public com.android.ims.ImsUtInterface getSupplementaryServiceConfiguration ( int sessionId ) throws com.android.ims.ImsException { if ( ( ( mUt ) == null ) || ( ! ( mImsServiceProxy.isBinderAlive ( ) ) ) ) { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsUt iUt = mImsServiceProxy.getUtInterface ( sessionId ) ; if ( iUt == null ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , ImsReasonInfo.CODE_UT_NOT_SUPPORTED ) ; } mUt = new com.android.ims.ImsUt ( iUt ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getSupplementaryServiceConfiguration()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mUt ; }
private void start ( ) { android.os.HandlerThread thread = new android.os.HandlerThread ( "BluetoothAvrcpHandler" ) ; thread.start ( ) ; android.os.Looper looper = thread.getLooper ( ) ; mHandler = new com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler ( looper ) ; mSessionChangeListener = new com.android.bluetooth.avrcp.Avrcp.MediaSessionChangeListener ( ) ; mMediaSessionManager.addOnActiveSessionsChangedListener ( mSessionChangeListener , null , mHandler ) ; updateCurrentMediaControllers ( mMediaSessionManager.getActiveSessions ( null ) ) ; mMediaControllerCb = new com.android.bluetooth.avrcp.Avrcp.MediaControllerListener ( ) ; }
private boolean readNotifyBufferMessage ( ) { try { org.chromium.mojo.system.ResultAnd < org.chromium.mojo.system.MessagePipeHandle.ReadMessageResult > readMessageResult = mReadHandle.readMessage ( org.chromium.mojo.bindings.ExecutorFactory.NOTIFY_BUFFER , 0 , MessagePipeHandle.ReadFlags.NONE ) ; if ( ( readMessageResult.getMojoResult ( ) ) == ( org.chromium.mojo.system.MojoResult.OK ) ) { asyncWait ( ) ; return true ; } } catch ( org.chromium.mojo.system.MojoException e ) { } return false ; }
public void testEvaluateNetworks_untrustedNetworksAllowed_onlyDeletedEphemeral ( ) { org.mockito.Mockito.when ( mWifiConfigManager.wasEphemeralNetworkDeleted ( com.android.server.wifi.util.ScanResultUtil.createQuotedSSID ( mUntrustedScanDetail.getScanResult ( ) . SSID ) ) ) . thenReturn ( true ) ; android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks ( com.google.android.collect.Lists.newArrayList ( mUntrustedScanDetail ) , null , null , false , true , null ) ; junit.framework.Assert.assertNull ( result ) ; org.mockito.Mockito.verifyZeroInteractions ( mNetworkScoreManager ) ; }
private static void splitAndAdd ( java.lang.String searchPath , boolean directoriesOnly , java.util.List < java.io.File > resultList ) { if ( searchPath == null ) { return ; } for ( java.lang.String path : searchPath.split ( ":" ) ) { try { android.system.StructStat sb = Libcore.os.stat ( path ) ; if ( ( ! directoriesOnly ) || ( android.system.OsConstants.S_ISDIR ( sb.st_mode ) ) ) { resultList.add ( new java.io.File ( path ) ) ; } } catch ( android.system.ErrnoException ignored ) { } } }
public void testAspectRatio ( ) throws java.lang.Exception { double aspectRatio = getRealAspectRatio ( getActivity ( ) ) ; android.util.Log.i ( android.dpi.cts.AspectRatioTest.TAG , ( "Aspect Ratio: " + aspectRatio ) ) ; if ( ( aspectRatio >= 1.333 ) && ( aspectRatio <= 1.86 ) ) { return ; } if ( getActivity ( ) . getPackageManager ( ) . hasSystemFeature ( PackageManager.FEATURE_WATCH ) ) { if ( ( aspectRatio >= 1.0 ) && ( aspectRatio <= 1.86 ) ) { return ; } } fail ( ( "Aspect ratio was not between 1.333 and 1.86: " + aspectRatio ) ) ; }
public synchronized void write ( int b ) throws java.io.IOException { buffer.put ( ( ( byte ) ( b ) ) ) ; if ( b == '\n' ) { synchronized ( out ) { com.android.jack.server.type.CommandOutPrintStream.CommandOutOutputStream.writeBuffer ( prefix , out ) ; buffer.flip ( ) ; com.android.jack.server.type.CommandOutPrintStream.CommandOutOutputStream.writeBuffer ( buffer , out ) ; buffer.clear ( ) ; } } if ( ( buffer.remaining ( ) ) == 1 ) { write ( '\n' ) ; } }
public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < ? > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [ ] args ) { if ( supports ( klass ) ) { return new vogar.target.junit.JUnitTargetRunner ( monitor , skipPastReference , testEnvironment , timeoutSeconds , klass , qualification , args ) ; } else { return null ; } }
public com.android.server.wifi.SoftApManager makeSoftApManager ( com.android.server.wifi.WifiNative wifiNative , android.os.INetworkManagementService nmService , android.net.ConnectivityManager cm , java.lang.String countryCode , java.util.ArrayList < java.lang.Integer > allowed2GChannels , com.android.server.wifi.SoftApManager.Listener listener , android.net.wifi.IApInterface apInterface ) { return new com.android.server.wifi.SoftApManager ( mWifiServiceHandlerThread.getLooper ( ) , wifiNative , countryCode , allowed2GChannels , listener , apInterface ) ; }
public void testNotifySecondaryForeign ( ) { java.util.List < java.lang.String > barSecondaries = mBarUser0.getSecondaryDexPaths ( ) ; notifyDexLoad ( mFooUser0 , barSecondaries , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mBarUser0 ) ; org.junit.Assert.assertNotNull ( pui ) ; org.junit.Assert.assertFalse ( pui.isUsedByOtherApps ( ) ) ; org.junit.Assert.assertEquals ( barSecondaries.size ( ) , pui.getDexUseInfoMap ( ) . size ( ) ) ; assertSecondaryUse ( mFooUser0 , pui , barSecondaries , true , mUser0 ) ; }
public static com.android.tools.lint.detector.api.Issue create ( @ com.android.annotations.NonNull java.lang.String id , @ com.android.annotations.NonNull java.lang.String briefDescription , @ com.android.annotations.NonNull java.lang.String description , @ com.android.annotations.NonNull java.lang.String explanation , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Category category , int priority , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Implementation implementation ) { return new com.android.tools.lint.detector.api.Issue ( id , briefDescription , description , explanation , category , priority , severity , implementation ) ; }
public void afterHandshake ( int session , int s , int c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_read ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) ; fail ( ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
private void addRemoteSysImg ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay tag , java.lang.String abi ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newSysImg ( version , tag , abi , revision ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public com.android.jack.ir.ast.JClassLiteral exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException { assert ( sourceInfo ) != null ; assert ( refType ) != null ; return new com.android.jack.ir.ast.JClassLiteral ( sourceInfo , exportSession.getLookup ( ) . getType ( refType ) , exportSession.getLookup ( ) . getClass ( com.android.jack.jayce.v0004.nodes.NClassLiteral.JAVA_LANG_CLASS ) ) ; }
public static java.net.URI uri ( java.lang.String format , java.lang.Object ... args ) { java.lang.String uriString = java.lang.String.format ( format , args ) ; try { return new java.net.URI ( uriString ) ; } catch ( java.net.URISyntaxException e ) { throw new java.lang.IllegalStateException ( ( "Known good uri has syntax error: " + uriString ) , e ) ; } }
private void initPrefs ( android.content.Context context ) { final android.content.ContentResolver contentResolver = context.getContentResolver ( ) ; mResolver = new java.lang.ref.WeakReference < android.content.ContentResolver > ( contentResolver ) ; mObserver = new android.text.method.TextKeyListener.SettingsObserver ( ) ; contentResolver.registerContentObserver ( Settings.System.CONTENT_URI , true , mObserver ) ; updatePrefs ( contentResolver ) ; mPrefsInited = true ; }
private java.io.File getWrittenResources ( ) throws com.android.ide.common.res2.MergingException , java.io.IOException { com.android.ide.common.res2.ResourceMerger resourceMerger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; com.android.ide.common.res2.MergedResourceWriter writer = new com.android.ide.common.res2.MergedResourceWriter ( folder , mPngCruncher , false , false ) ; resourceMerger.mergeData ( writer , false ) ; return folder ; }
public final java.lang.Object getValue ( @ javax.annotation.Nonnegative int columnIdx ) { if ( ( this ) instanceof com.android.sched.util.table.DataRow ) { com.android.sched.util.table.DataRow data = ( ( com.android.sched.util.table.DataRow ) ( this ) ) ; return com.google.common.collect.Iterators.get ( data.iterator ( ) , columnIdx ) ; } throw new java.lang.AssertionError ( ) ; }
public com.android.jack.ir.ast.JAnnotation exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( retentionPolicy ) != null ; assert ( sourceInfo ) != null ; assert ( annotationType ) != null ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JAnnotationType type = exportSession.getLookup ( ) . getAnnotationType ( annotationType ) ; com.android.jack.ir.ast.JAnnotation jAnnotation = new com.android.jack.ir.ast.JAnnotation ( jSourceInfo , retentionPolicy , type ) ; for ( com.android.jack.jayce.v0002.nodes.NNameValuePair valuePair : elements ) { jAnnotation.put ( valuePair.exportAsJast ( exportSession ) ) ; } return jAnnotation ; }
protected boolean cleanup ( ) { if ( mNativeAvailable ) { cleanupNative ( ) ; mNativeAvailable = false ; } if ( ( mPanDevices ) != null ) { java.util.List < android.bluetooth.BluetoothDevice > devList = getConnectedDevices ( ) ; for ( android.bluetooth.BluetoothDevice dev : devList ) { handlePanDeviceStateChange ( dev , mPanIfName , BluetoothProfile.STATE_DISCONNECTED , BluetoothPan.LOCAL_PANU_ROLE , BluetoothPan.REMOTE_NAP_ROLE ) ; } mPanDevices.clear ( ) ; } return true ; }
public void testConstructor_SkipPastJUnitRunner ( ) throws java.lang.Exception { java.lang.String failingTestName = ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) + "#testMethodName" ; vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( "--skipPast" , failingTestName ) ; java.lang.String skipPast = runner.skipPastReference.get ( ) ; org.junit.Assert.assertEquals ( failingTestName , skipPast ) ; runner.run ( ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.JUnit3Test.class . getName ( ) ) ) + "#testOtherName\"," ) + "\"runner\":\"" ) + ( vogar.target.junit.JUnitRunner.class . getName ( ) ) ) + "\"}\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , ios.contents ( Stream.OUT ) ) ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.conscrypt.NativeCrypto.SSL_get0_alpn_selected ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; if ( ! ( NativeCrypto.isBoringSSL ) ) { assertEquals ( "ALPN should not enable cutthrough on the client" , 0 , ( ( org.conscrypt.NativeCrypto.SSL_get_mode ( ssl ) ) & ( org.conscrypt.NativeConstants.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ) ) ; } super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
private void addBoldText ( org.eclipse.swt.custom.StyledText styledText , java.lang.String text ) { java.lang.String s = styledText.getText ( ) ; int start = ( s == null ) ? 0 : s.length ( ) ; styledText.append ( text ) ; org.eclipse.swt.custom.StyleRange sr = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart.ClassLinkStyleRange ( ) ; sr.start = start ; sr.length = text.length ( ) ; sr.fontStyle = org.eclipse.swt.SWT.BOLD ; styledText.setStyleRange ( sr ) ; }
public void testStageInstallWithErrorCode_badTzLookupFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro stagedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( stagedDistro.getBytes ( ) ) ) ; assertInstallDistroStaged ( stagedDistro ) ; com.android.timezone.distro.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , 1 ) . setTzLookupXml ( "<foo />" ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_VALIDATION_ERROR , installer.stageInstallWithErrorCode ( incompleteDistro.getBytes ( ) ) ) ; assertInstallDistroStaged ( stagedDistro ) ; assertNoInstalledDistro ( ) ; }
public void test_socket_accept_Nonblocking_Bound ( ) throws java.io.IOException { serverChannel.configureBlocking ( false ) ; serverChannel.bind ( null ) ; java.net.ServerSocket gotSocket = serverChannel.socket ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw an IllegalBlockingModeException" ) ; } catch ( java.nio.channels.IllegalBlockingModeException expected ) { } serverChannel.close ( ) ; try { gotSocket.accept ( ) ; fail ( "Should throw a ClosedChannelException" ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
private void cancelUserTimeoutAlarm ( ) { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.map.BluetoothMapService.TAG , "cancelUserTimeOutAlarm()" ) ; android.content.Intent timeoutIntent = new android.content.Intent ( com.android.bluetooth.map.BluetoothMapService.USER_CONFIRM_TIMEOUT_ACTION ) ; android.app.PendingIntent pIntent = android.app.PendingIntent.getBroadcast ( this , 0 , timeoutIntent , 0 ) ; android.app.AlarmManager alarmManager = ( ( android.app.AlarmManager ) ( this . getSystemService ( Context.ALARM_SERVICE ) ) ) ; pIntent.cancel ( ) ; alarmManager.cancel ( pIntent ) ; mRemoveTimeoutMsg = false ; }
private void addTestCase ( com.android.cts.verifier.ArrayTestListAdapter adapter , com.android.cts.verifier.p2p.testcase.TestCase testcase ) { android.content.Intent intent = new android.content.Intent ( this , getRequesterActivityClass ( ) ) ; intent.putExtra ( TestCase.EXTRA_TEST_NAME , testcase.getTestId ( ) ) ; adapter.add ( com.android.cts.verifier.TestListAdapter.TestListItem.newTest ( testcase.getTestName ( ) , testcase.getTestId ( ) , intent ) ) ; }
public java.security.PrivateKey getPrivateKeyById ( java.lang.String id ) throws java.security.InvalidKeyException { if ( id == null ) { throw new java.lang.NullPointerException ( "id == null" ) ; } final int keyRef = org.apache.harmony.xnet.provider.jsse.NativeCrypto.ENGINE_load_private_key ( ctx , id ) ; if ( keyRef == 0 ) { return null ; } org.apache.harmony.xnet.provider.jsse.OpenSSLKey pkey = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey ( keyRef , this , id ) ; try { return pkey.getPrivateKey ( ) ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new java.security.InvalidKeyException ( e ) ; } }
public static int MultiplePhis ( ) { int x = 0 ; int y = 1 ; while ( ( y ++ ) < 10 ) { if ( y > 1 ) { x = 13 ; } else { x = 42 ; } } return x ; }
public android.database.Cursor query ( android.net.Uri uri , java.lang.String [ ] projection , java.lang.String selection , java.lang.String [ ] selectionArgs , java.lang.String sortOrder ) { if ( ( mSubscriptionArray.size ( ) ) > 0 ) { return convertFromContentToCursor ( mSubscriptionArray.get ( 0 ) ) ; } return null ; }
public static void computeFabs ( android.renderscript.cts.TestFabs.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 0 , 0 , false ) ; android.renderscript.cts.Target.Floaty in = t.new32 ( args.inX ) ; args.out = t.new32 ( java.lang.Math.abs ( args.inX ) , java.lang.Math.abs ( in.min32 ( ) ) , java.lang.Math.abs ( in.max32 ( ) ) ) ; }
private void handlePassthroughCmdRequestFromNative ( byte [ ] address , int id , int keyState ) { switch ( id ) { case android.bluetooth.BluetoothAvrcp.PASSTHROUGH_ID_REWIND : rewind ( address , keyState ) ; return ; case android.bluetooth.BluetoothAvrcp.PASSTHROUGH_ID_FAST_FOR : fastForward ( address , keyState ) ; return ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_PASS_THROUGH , id , keyState , address ) ; mHandler.sendMessage ( msg ) ; }
public void test_SSLEngine_beginHandshake ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create ( ) ; try { c.clientContext.createSSLEngine ( ) . beginHandshake ( ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } assertConnected ( libcore.javax.net.ssl.TestSSLEnginePair.create ( null ) ) ; c.close ( ) ; }
public static void pullFromHost ( java.io.File src , java.io.File dest ) { try { if ( ( src.listFiles ( ) ) != null ) { com.android.tradefed.util.FileUtil.recursiveCopy ( src , dest ) ; } com.android.tradefed.util.FileUtil.recursiveDelete ( src ) ; } catch ( java.io.IOException e ) { com.android.tradefed.log.LogUtil.CLog.e ( "Caught exception during pull." ) ; com.android.tradefed.log.LogUtil.CLog.e ( e ) ; } }
public static void setStatusBarColor ( android.view.Window window , int statusBarColor ) { if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { if ( ( statusBarColor == ( android.graphics.Color.BLACK ) ) && ( ( window.getNavigationBarColor ( ) ) == ( android.graphics.Color.BLACK ) ) ) { window.clearFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; } else { window.addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; } window.setStatusBarColor ( statusBarColor ) ; } }
public void resetSimNetworks ( ) { if ( mVerboseLoggingEnabled ) localLog ( "resetSimNetworks" ) ; for ( android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks ( ) ) { if ( com.android.server.wifi.util.TelephonyUtil.isSimConfig ( config ) ) { java.lang.String currentIdentity = com.android.server.wifi.util.TelephonyUtil.getSimIdentity ( mTelephonyManager , config.enterpriseConfig.getEapMethod ( ) ) ; config.enterpriseConfig.setIdentity ( currentIdentity ) ; config.enterpriseConfig.setAnonymousIdentity ( "" ) ; } } }
public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable ( ) { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build ( ) ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback ( ) ; final int timeoutMs = 150 ; mCm.requestNetwork ( nr , networkCallback , timeoutMs ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( android.net.NetworkCapabilities.TRANSPORT_WIFI ) ; mWiFiNetworkAgent.connect ( false ) ; networkCallback.expectAvailableCallbacks ( mWiFiNetworkAgent , false , timeoutMs ) ; networkCallback.assertNoCallback ( ) ; }
public void sendMessage ( int peerId , @ android.annotation.Nullable byte [ ] message , int messageId , int retryCount ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "sendMessage: called on terminated session" ) ; return ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "sendMessage: called post GC on WifiNanManager" ) ; return ; } mgr.sendMessage ( mClientId , mSessionId , peerId , message , messageId , retryCount ) ; } }
public void testEndCallWithRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.RINGING ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( ) ) ; org.mockito.Mockito.verify ( call ) . reject ( false , null ) ; }
public static long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , android.system.Int64Ref inOffset , long byteCount ) throws android.system.ErrnoException { if ( inOffset == null ) { return Libcore.os.sendfile ( outFd , inFd , null , byteCount ) ; } else { android.system.MutableLong internalInOffset = new android.system.MutableLong ( inOffset.value ) ; try { return Libcore.os.sendfile ( outFd , inFd , internalInOffset , byteCount ) ; } finally { inOffset.value = internalInOffset.value ; } } }
public boolean processMessage ( android.os.Message message ) { switch ( message.what ) { case com.android.bluetooth.pbap.PbapStateMachine.REQUEST_PERMISSION : mService.checkOrGetPhonebookPermission ( this ) ; case com.android.bluetooth.pbap.PbapStateMachine.AUTHORIZED : transitionTo ( mConnected ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.REJECTED : rejectConnection ( ) ; transitionTo ( mFinished ) ; break ; case com.android.bluetooth.pbap.PbapStateMachine.DISCONNECT : mServiceHandler.removeMessages ( BluetoothPbapService.USER_TIMEOUT , this ) ; mServiceHandler.obtainMessage ( BluetoothPbapService.USER_TIMEOUT , this ) . sendToTarget ( ) ; transitionTo ( mFinished ) ; break ; } return HANDLED ; }
private void uninstall ( @ com.android.annotations.NonNull java.io.File apk , @ com.android.annotations.NonNull java.lang.String packageName , @ com.android.annotations.NonNull java.lang.String deviceName ) throws com.android.builder.testing.api.DeviceException { if ( packageName != null ) { logger.info ( "DeviceConnector '%s': uninstalling %s" , deviceName , packageName ) ; device.uninstallPackage ( packageName , timeout ) ; } else { logger.info ( "DeviceConnector '%s': unable to uninstall %s: unable to get package name" , deviceName , apk ) ; } }
private int writeNewClass ( java.lang.Class < ? > object , boolean unshared ) throws java.io.IOException { output.writeByte ( java.io.ObjectStreamConstants.TC_CLASS ) ; java.io.ObjectStreamClass clDesc = java.io.ObjectStreamClass.lookupStreamClass ( object ) ; if ( clDesc.isEnum ( ) ) { writeEnumDesc ( object , clDesc , unshared ) ; } else { writeClassDesc ( clDesc , unshared ) ; } int handle = nextHandle ( ) ; if ( ! unshared ) { objectsWritten.put ( object , handle ) ; } return handle ; }
public com.android.tools.perflib.heap.Heap getHeap ( int id ) { for ( com.android.tools.perflib.heap.Heap mHeap : mHeaps ) { if ( ( mHeap.getId ( ) ) == id ) { return mHeap ; } } return null ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.PostfixExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JUnaryOperator op ; switch ( x.operator ) { case org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS : op = com.android.jack.ir.ast.JUnaryOperator.DEC ; break ; case org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS : op = com.android.jack.ir.ast.JUnaryOperator.INC ; break ; default : throw new java.lang.AssertionError ( "Unexpected postfix operator" ) ; } com.android.jack.ir.ast.JExpression lhs = pop ( x.lhs ) ; push ( com.android.jack.ir.ast.JPostfixOperation.create ( info , op , lhs ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
public TagInfo [ ] deprecatedTags ( ) { TagInfo [ ] result = comment ( ) . deprecatedTags ( ) ; if ( ( result.length ) == 0 ) { if ( ( comment ( ) . undeprecateTags ( ) . length ) == 0 ) { if ( ( superclass ( ) ) != null ) { result = superclass ( ) . deprecatedTags ( ) ; } } } return result ; }
public boolean fetchRemoteUuids ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "fetchRemoteUuids() - Not allowed for non-active user" ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return false ; return service.fetchRemoteUuids ( device ) ; }
public void testConcurrentServerSocketCloseReliablyThrows ( ) { int numIterations = 200 ; for ( int i = 0 ; i < numIterations ; i ++ ) { checkConnectIterationAndCloseSocket ( ( ( ( "Iteration " + ( i + 1 ) ) + " of " ) + numIterations ) , 50 ) ; } }
public java.io.InputStream openRead ( ) throws com.android.sched.util.file.WrongPermissionException { try { return new com.android.sched.util.file.InputStreamFile ( file.getPath ( ) , com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE ) . getInputStream ( ) ; } catch ( com.android.sched.util.file.FileAlreadyExistsException e ) { throw new java.lang.AssertionError ( ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new java.lang.AssertionError ( ) ; } catch ( com.android.sched.util.file.CannotSetPermissionException e ) { throw new java.lang.AssertionError ( ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public byte [ ] iccExchangeSimIO ( int fileID , int command , int p1 , int p2 , int p3 , java.lang.String filePath ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccExchangeSimIO ( fileID , command , p1 , p2 , p3 , filePath ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public java.lang.Integer compute ( ) { int n = number ; if ( n <= 1 ) return n ; jsr166.ForkJoinPoolTest.FibTask f1 = new jsr166.ForkJoinPoolTest.FibTask ( ( n - 1 ) ) ; f1.fork ( ) ; return ( new jsr166.ForkJoinPoolTest.FibTask ( ( n - 2 ) ) . compute ( ) ) + ( f1.join ( ) ) ; }
public void fillSelectionAndBorder ( java.awt.Graphics2D g , com.intellij.ui.tabs.impl.JBTabsImpl.ShapeInfo selectedShape , java.awt.Color tabColor , int x , int y , int height ) { g.setColor ( ( tabColor != null ? tabColor : getDefaultTabColor ( ) ) ) ; g.fill ( selectedShape.fillPath.getShape ( ) ) ; g.draw ( selectedShape.fillPath.getShape ( ) ) ; }
public void startTdls ( java.lang.String macAddr , boolean enable ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { if ( enable ) { mSupplicantStaIfaceHal.initiateTdlsDiscover ( macAddr ) ; mSupplicantStaIfaceHal.initiateTdlsSetup ( macAddr ) ; } else { mSupplicantStaIfaceHal.initiateTdlsTeardown ( macAddr ) ; } } else { if ( enable ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { doBooleanCommand ( ( "TDLS_DISCOVER " + macAddr ) ) ; doBooleanCommand ( ( "TDLS_SETUP " + macAddr ) ) ; } } else { doBooleanCommand ( ( "TDLS_TEARDOWN " + macAddr ) ) ; } } }
public boolean processMessage ( android.os.Message message ) { maybeLogMessage ( this , message.what ) ; switch ( message.what ) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , "CMD_TETHER_REQUESTED while in local hotspot mode." ) ; break ; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break ; default : return false ; } return true ; }
public void compareExtStructure ( ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( new com.android.jack.Options ( ) , com.android.jack.compile.androidtree.ext.ExtCompilationTest.BOOTCLASSPATH , null , com.android.jack.compile.androidtree.ext.ExtCompilationTest.REF_BOOTCLASSPATH , null , com.android.jack.compile.androidtree.ext.ExtCompilationTest.SOURCELIST , false , true , 0.4F , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public void visitConstantInstruction ( proguard.optimize.info.Clazz clazz , proguard.optimize.info.Method method , proguard.classfile.attribute.CodeAttribute codeAttribute , int offset , proguard.optimize.info.ConstantInstruction constantInstruction ) { byte opcode = constantInstruction.opcode ; switch ( opcode ) { case InstructionConstants.OP_GETSTATIC : case InstructionConstants.OP_PUTSTATIC : case InstructionConstants.OP_GETFIELD : case InstructionConstants.OP_PUTFIELD : case InstructionConstants.OP_INVOKEVIRTUAL : case InstructionConstants.OP_INVOKESPECIAL : case InstructionConstants.OP_INVOKESTATIC : case InstructionConstants.OP_INVOKEINTERFACE : case InstructionConstants.OP_INVOKEDYNAMIC : case InstructionConstants.OP_NEW : case InstructionConstants.OP_ANEWARRAY : case InstructionConstants.OP_CHECKCAST : case InstructionConstants.OP_INSTANCEOF : case InstructionConstants.OP_MULTIANEWARRAY : mayThrowExceptions = true ; } }
public void testMultiCharMinusSignAndPercentage ( ) { java.text.DecimalFormatSymbols dfs ; dfs = new java.text.DecimalFormatSymbols ( java.util.Locale.forLanguageTag ( "ar" ) ) ; assertEquals ( '%' , dfs.getPercent ( ) ) ; assertEquals ( '-' , dfs.getMinusSign ( ) ) ; dfs = new java.text.DecimalFormatSymbols ( java.util.Locale.forLanguageTag ( "fa" ) ) ; assertEquals ( '٪' , dfs.getPercent ( ) ) ; assertEquals ( '−' , dfs.getMinusSign ( ) ) ; }
private com.android.jill.frontend.java.Variable getTempVarFromTopOfStackMinus1 ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame ) { com.android.jill.frontend.java.Variable topOfStackBeforeInst = getStackVariable ( frame , ( ( com.android.jill.frontend.java.MethodBodyWriter.TOP_OF_STACK ) - 1 ) ) ; java.lang.String tmpVarId = "-swap_tmp_" + ( typeToUntypedDesc ( topOfStackBeforeInst.getType ( ) ) ) ; com.android.jill.frontend.java.Variable tmpVariable = getVariable ( tmpVarId , tmpVarId , topOfStackBeforeInst.getType ( ) , null ) ; return tmpVariable ; }
static java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > populatedSet ( int n ) { java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > a = new java.util.concurrent.CopyOnWriteArraySet < java.lang.Integer > ( ) ; assertTrue ( a.isEmpty ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) a.add ( i ) ; assertFalse ( a.isEmpty ( ) ) ; assertEquals ( n , a.size ( ) ) ; return a ; }
private void preRenderingTargetChangeCleanUp ( com.android.sdklib.IAndroidTarget oldTarget ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = currentSdk.getTargetData ( oldTarget ) ; if ( data != null ) { com.android.ide.common.rendering.LayoutLibrary layoutLib = data.getLayoutLibrary ( ) ; layoutLib.clearCaches ( mEditedFile.getProject ( ) ) ; } } if ( ( ( mProjectCallback ) != null ) && ( mProjectCallback.isUsed ( ) ) ) { mProjectCallback = null ; } }
public void testPullExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mCapabilities = android.telecom.Connection.CAPABILITY_CAN_PULL_CALL ; mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . pullExternalCall ( org.mockito.Matchers.eq ( ids.mConnectionId ) , org.mockito.Matchers.any ( ) ) ; }
public static void verifyGolden ( junit.framework.TestCase test , java.lang.Object object , org.apache.harmony.testframework.serialization.SerializationTest.SerializableAssert comparator ) throws java.lang.Exception { assertNotNull ( "Null comparator" , comparator ) ; java.io.Serializable deserialized = org.apache.harmony.testframework.serialization.SerializationTest.getObject ( test , ".golden.ser" ) ; comparator.assertDeserialized ( ( ( java.io.Serializable ) ( object ) ) , deserialized ) ; }
public static final java.util.HashMap readMapXml ( java.io.InputStream in ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { org.xmlpull.v1.XmlPullParser parser = android.util.Xml.newPullParser ( ) ; parser.setInput ( in , null ) ; return ( ( java.util.HashMap ) ( com.android.internal.util.XmlUtils.readValueXml ( parser , new java.lang.String [ 1 ] ) ) ) ; }
private boolean sendDeviceListMonitoringRequest ( ) throws com.android.ddmlib.TimeoutException , java.io.IOException { byte [ ] request = com.android.ddmlib.AdbHelper.formAdbRequest ( "host:track-devices" ) ; try { com.android.ddmlib.AdbHelper.write ( mMainAdbConnection , request ) ; com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse ( mMainAdbConnection , false ) ; if ( ( resp.okay ) == false ) { com.android.ddmlib.Log.e ( "DeviceMonitor" , ( "adb refused request: " + ( resp.message ) ) ) ; } return resp.okay ; } catch ( java.io.IOException e ) { com.android.ddmlib.Log.e ( "DeviceMonitor" , "Sending Tracking request failed!" ) ; mMainAdbConnection.close ( ) ; throw e ; } }
static void setDouble ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , double value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { if ( v == null ) { m.invokeExact ( value ) ; } else { m.invokeExact ( v , value ) ; } } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertEquals ( exceptionThrown , expectFailure ) ; }
private void addItem ( @ com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem item ) { synchronized ( com.android.ide.common.res2.AbstractResourceRepository.ITEM_MAP_LOCK ) { java.util.Map < com.android.resources.ResourceType , com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > > itemMap = getMap ( ) ; com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > map = getMap ( item.getType ( ) ) ; if ( ! ( map.containsValue ( item ) ) ) { map.put ( item.getName ( ) , item ) ; } } }
public void testDensityOnlyWithCustomDeviceDensity ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( ) ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 320 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getDensityOutput ( 480 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 1 , "foo" ) ; assertEquals ( match , result ) ; }
public void testGetResourceAsStream1 ( ) throws java.io.IOException { java.lang.Class clazz = getClass ( ) ; java.io.InputStream stream = clazz.getResourceAsStream ( "HelloWorld.txt" ) ; assert stream != null ; byte [ ] buffer = new byte [ 20 ] ; int length = stream.read ( buffer ) ; java.lang.String s = new java.lang.String ( buffer , 0 , length ) ; assert "Hello, World." . equals ( s ) ; stream.close ( ) ; }
public void test_parkFor_3 ( ) { java.util.concurrent.CyclicBarrier barrier = new java.util.concurrent.CyclicBarrier ( 2 ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker parker = new tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker ( barrier , false , 1000 ) ; java.lang.Thread parkerThread = new java.lang.Thread ( parker ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.UNSAFE.unpark ( parkerThread ) ; parkerThread.start ( ) ; parker.assertDurationIsInRange ( 0 ) ; }
private void cancelToastLocked ( int index ) { com.android.server.NotificationManagerService.ToastRecord record = mToastQueue.get ( index ) ; try { record.callback.hide ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( com.android.server.NotificationManagerService.TAG , ( ( ( "Object died trying to hide notification " + ( record.callback ) ) + " in package " ) + ( record.pkg ) ) ) ; } mToastQueue.remove ( index ) ; keepProcessAliveLocked ( record.pid ) ; if ( ( mToastQueue.size ( ) ) > 0 ) { showNextToastLocked ( ) ; } }
protected java.lang.String getCipherName ( int keySize , org.conscrypt.OpenSSLCipher.Mode mode ) { final java.lang.String baseCipherName ; if ( keySize == 16 ) { baseCipherName = "des-ede" ; } else { baseCipherName = "des-ede3" ; } if ( mode == ( org.conscrypt.OpenSSLCipher.Mode.ECB ) ) { return baseCipherName ; } else { return ( baseCipherName + "-" ) + ( mode.toString ( ) . toLowerCase ( java.util.Locale.US ) ) ; } }
private static com.android.jack.ir.ast.JClass getClassOrReportFailure ( com.android.jack.lookup.JNodeLookup lookup , java.lang.String name , com.android.sched.util.config.id.PropertyId < java.lang.String > prop ) { try { return lookup.getClass ( name ) ; } catch ( java.lang.Throwable e ) { com.android.jack.Jack.getSession ( ) . getReporter ( ) . report ( Severity.FATAL , new com.android.jack.transformations.ast.BoostLockedRegionPriority.BadBoostLockedRegionPriorityConfigurationException ( prop , e ) ) ; com.android.jack.Jack.getSession ( ) . abortEventually ( ) ; return null ; } }
public void run ( @ javax.annotation.Nonnull final com.android.jack.ir.ast.cfg.JControlFlowGraph cfg ) { new com.android.jack.ir.ast.cfg.BasicBlockLiveProcessor ( false ) { @ java.lang.Override public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JSimpleBasicBlock block ) { if ( ( ( block.getElementCount ( ) ) == 1 ) && ( ( block.getLastElement ( ) . getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) ) { block.delete ( ) ; } return false ; } @ javax.annotation.Nonnull @ java.lang.Override public com.android.jack.ir.ast.cfg.JControlFlowGraph getCfg ( ) { return cfg ; } } . process ( ) ; }
public static < T extends java.lang.Enum < T > > com.android.sched.util.config.id.EnumPropertyId < T > create ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.lang.String description , @ javax.annotation.Nonnull T [ ] values ) { return new com.android.sched.util.config.id.EnumPropertyId < T > ( name , description , new com.android.sched.util.codec.EnumCodec < T > ( values ) ) ; }
protected java.util.List < B > get ( int index ) { java.lang.Object [ ] tuple = new java.lang.Object [ axes.size ( ) ] ; for ( int i = 0 ; i < ( tuple.length ) ; i ++ ) { tuple [ i ] = axes.get ( i ) . getForIndex ( index ) ; } @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < B > result = ( ( com.google.common.collect.ImmutableList < B > ) ( com.google.common.collect.ImmutableList.copyOf ( tuple ) ) ) ; return result ; }
public static android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings ( android.content.Context context , int subId ) { android.content.ComponentName componentName = com.android.phone.vvm.RemoteVvmTaskManager.getRemotePackage ( context ) ; java.lang.String packageName ; if ( componentName == null ) { packageName = com.android.phone.VisualVoicemailSmsFilterConfig.DEFAULT_PACKAGE ; } else { packageName = componentName.getPackageName ( ) ; } return com.android.phone.VisualVoicemailSmsFilterConfig.getVisualVoicemailSmsFilterSettings ( context , packageName , subId ) ; }
private static java.lang.String getListViewFqcn ( java.lang.Class < ? > clz ) { java.lang.String fqcn = clz.getName ( ) ; if ( fqcn.endsWith ( com.android.ide.common.layout.LayoutConstants.LIST_VIEW ) ) { return fqcn ; } else if ( fqcn.startsWith ( com.android.ide.common.layout.LayoutConstants.ANDROID_PKG_PREFIX ) ) { return null ; } java.lang.Class < ? > superClass = clz.getSuperclass ( ) ; if ( superClass != null ) { return com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback.getListViewFqcn ( superClass ) ; } else { return null ; } }
private static void openAppList ( android.app.Instrumentation instrumentation ) throws android.support.test.uiautomator.UiObjectNotFoundException { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "Settings" ) ; android.support.test.uiautomator.UiScrollable itemList = new android.support.test.uiautomator.UiScrollable ( new android.support.test.uiautomator.UiSelector ( ) . resourceIdMatches ( Res.SETTINGS_LIST_CONTAINER_RES ) ) ; itemList.setAsVerticalList ( ) ; android.support.test.uiautomator.UiObject item = itemList.getChildByText ( new android.support.test.uiautomator.UiSelector ( ) . className ( "android.widget.TextView" ) , "Apps" ) ; item.clickAndWaitForNewWindow ( ) ; }
private void performPoll ( int flags ) { synchronized ( mStatsLock ) { mWakeLock.acquire ( ) ; if ( ( mTime.getCacheAge ( ) ) > ( mSettings.getTimeCacheMaxAge ( ) ) ) { mTime.forceRefresh ( ) ; } try { performPollLocked ( flags ) ; } finally { mWakeLock.release ( ) ; } } }
public void testPublishTerminatedDone ( ) throws org.json.JSONException { final int publishId = 167 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "publish_id" , publishId ) ; args.putInt ( "reason" , WifiAwareNative.AWARE_STATUS_SUCCESS ) ; com.android.server.wifi.aware.WifiAwareHalMock.callPublishTerminated ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mAwareStateManager ) . onSessionTerminatedNotification ( publishId , DiscoverySessionCallback.TERMINATE_REASON_DONE , true ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
private java.util.List < com.android.bluetooth.avrcp.MediaController > getMediaControllers ( ) { java.util.List < com.android.bluetooth.avrcp.MediaController > controllers = new java.util.ArrayList < com.android.bluetooth.avrcp.MediaController > ( ) ; for ( com.android.bluetooth.avrcp.MediaPlayerInfo info : mMediaPlayerInfoList.values ( ) ) { if ( ( info.getMediaController ( ) ) != null ) { controllers.add ( info.getMediaController ( ) . getWrappedInstance ( ) ) ; } } return controllers ; }
public void testIdletimerDirectoryExistsAndSane ( ) throws java.lang.Exception { java.io.File dir = new java.io.File ( "/sys/class/xt_idletimer" ) ; assertTrue ( dir.isDirectory ( ) ) ; assertTrue ( dir.canRead ( ) ) ; assertFalse ( dir.canWrite ( ) ) ; assertTrue ( dir.canExecute ( ) ) ; android.permission.cts.FileSystemPermissionTest.assertFileOwnedBy ( dir , "root" ) ; android.permission.cts.FileSystemPermissionTest.assertFileOwnedByGroup ( dir , "root" ) ; }
public final android.content.IContentProvider acquireExistingProvider ( android.net.Uri uri ) { if ( ! ( android.content.ContentResolver.SCHEME_CONTENT.equals ( uri.getScheme ( ) ) ) ) { return null ; } java.lang.String auth = uri.getAuthority ( ) ; if ( auth != null ) { return acquireExistingProvider ( mContext , uri.getAuthority ( ) ) ; } return null ; }
private static void removeUser ( java.util.prefs.Preferences prefs , java.lang.String user ) { java.lang.String allUsersString = prefs.get ( com.google.gct.login.GoogleLoginPrefs.USERS , "" ) ; java.util.List < java.lang.String > allUsers = com.google.common.collect.Lists.newArrayList ( ) ; for ( java.lang.String scope : allUsersString.split ( com.google.gct.login.GoogleLoginPrefs.DELIMITER ) ) { allUsers.add ( scope ) ; } allUsers.remove ( user ) ; com.google.common.base.Joiner joiner = com.google.common.base.Joiner.on ( com.google.gct.login.GoogleLoginPrefs.DELIMITER ) ; prefs.put ( com.google.gct.login.GoogleLoginPrefs.USERS , joiner.join ( allUsers ) ) ; }
private void testOutputPKCS1Padding ( java.lang.String provider ) throws java.lang.Exception { testOutputPKCS1Padding ( provider , ( ( byte ) ( 1 ) ) , libcore.javax.crypto.CipherTest.getEncryptKey ( "RSA" ) , libcore.javax.crypto.CipherTest.getDecryptKey ( "RSA" ) ) ; testOutputPKCS1Padding ( provider , ( ( byte ) ( 2 ) ) , libcore.javax.crypto.CipherTest.getDecryptKey ( "RSA" ) , libcore.javax.crypto.CipherTest.getEncryptKey ( "RSA" ) ) ; }
public static byte [ ] readFileAsByteArray ( java.io.File file ) throws java.io.IOException { byte [ ] buffer = new byte [ 8192 ] ; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try ( java.io.FileInputStream fis = new java.io.FileInputStream ( file ) ) { int count ; while ( ( count = fis.read ( buffer ) ) != ( - 1 ) ) { baos.write ( buffer , 0 , count ) ; } } return baos.toByteArray ( ) ; }
public void onRttModifyResponseReceived ( com.android.ims.ImsCall imsCall , int status ) { com.android.internal.telephony.imsphone.ImsPhoneConnection conn = findConnection ( imsCall ) ; if ( conn != null ) { conn.onRttModifyResponseReceived ( status ) ; if ( status == ( android.telecom.Connection.RttModifyStatus.SESSION_MODIFY_REQUEST_SUCCESS ) ) { conn.startRttTextProcessing ( ) ; } } }
public void test_getInstanceLjava_lang_StringLjava_security_Provider01 ( ) throws java.lang.Exception { for ( java.lang.String validValue : org.apache.harmony.tests.javax.net.ssl.TrustManagerFactory1Test.getValidValues ( ) ) { try { javax.net.ssl.TrustManagerFactory.getInstance ( validValue , ( ( java.security.Provider ) ( null ) ) ) ; } catch ( java.lang.IllegalArgumentException expected ) { } } }
static int getKeyTypeForAlgorithm ( java.lang.String keyType ) throws java.lang.IllegalArgumentException { if ( "RSA" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_RSA ; } else if ( "DSA" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_DSA ; } else if ( "EC" . equalsIgnoreCase ( keyType ) ) { return com.android.org.conscrypt.NativeCrypto.EVP_PKEY_EC ; } else { throw new java.lang.IllegalArgumentException ( ( "Unsupported key type: " + keyType ) ) ; } }
public static com.android.server.WindowManagerService main ( android.content.Context context , com.android.server.PowerManagerService pm , boolean haveInputMethods ) { com.android.server.WindowManagerService.WMThread thr = new com.android.server.WindowManagerService.WMThread ( context , pm , haveInputMethods ) ; thr.start ( ) ; synchronized ( thr ) { while ( ( thr.mService ) == null ) { try { thr.wait ( ) ; } catch ( java.lang.InterruptedException e ) { } } } return thr.mService ; }
private static void waitToDie ( java.lang.Thread thread ) { assertFalse ( java.lang.Thread.currentThread ( ) . isInterrupted ( ) ) ; try { thread.join ( 5000 ) ; } catch ( java.lang.InterruptedException ignored ) { ignored.printStackTrace ( ) ; } if ( thread.isAlive ( ) ) { fail ( ( ( "Thread \"" + ( thread.getName ( ) ) ) + "\" did not exit." ) ) ; } }
private void ensureTagsAtIndex ( @ javax.annotation.Nonnegative int atIdx ) { assert atIdx <= ( plan.size ( ) ) ; for ( int idx = ( currentTagValidityIdx ) + 1 ; idx <= atIdx ; idx ++ ) { ( ( com.android.sched.scheduler.PlanConstructor < ? > . DecoratedRunner ) ( plan.get ( idx ) ) ) . updateBeforeTags ( plan.get ( ( idx - 1 ) ) . getAfterTags ( ) ) ; } currentTagValidityIdx = atIdx ; }
public static org.conscrypt.OpenSSLX509Certificate fromX509PemInputStream ( java.io.InputStream is ) throws org.conscrypt.OpenSSLX509CertificateFactory.ParsingException { @ java.lang.SuppressWarnings ( value = "resource" ) final org.conscrypt.OpenSSLBIOInputStream bis = new org.conscrypt.OpenSSLBIOInputStream ( is ) ; try { final long certCtx = org.conscrypt.NativeCrypto.PEM_read_bio_X509 ( bis.getBioContext ( ) ) ; if ( certCtx == 0L ) { return null ; } return new org.conscrypt.OpenSSLX509Certificate ( certCtx ) ; } catch ( java.lang.Exception e ) { throw new org.conscrypt.OpenSSLX509CertificateFactory.ParsingException ( e ) ; } finally { bis.release ( ) ; } }
protected void tearDown ( ) throws java.lang.Exception { if ( mHasFeature ) { if ( mRemoveOwnerInTearDown ) { assertTrue ( "Failed to clear owner" , removeAdmin ( ( ( ( com.android.cts.devicepolicy.UserRestrictionsTest.DEVICE_ADMIN_PKG ) + "/" ) + ( com.android.cts.devicepolicy.UserRestrictionsTest.ADMIN_RECEIVER_TEST_CLASS ) ) , mDeviceOwnerUserId ) ) ; } assertTrue ( "Some user restrictions are still set" , runTests ( "userrestrictions.CheckNoOwnerRestrictionsTest" , mDeviceOwnerUserId ) ) ; removeTestUsers ( ) ; } super . tearDown ( ) ; }
public void testLineEndings ( ) throws java.lang.Exception { java.lang.String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n" + ( ( ( "<LinearLayout>\r\n" + "\r" ) + "<LinearLayout></LinearLayout>\r\n" ) + "</LinearLayout>\r\n" ) ; com.android.utils.PositionXmlParser parser = new com.android.utils.PositionXmlParser ( ) ; java.io.File file = java.io.File.createTempFile ( "parsertest2" , ".xml" ) ; java.io.Writer fw = new java.io.BufferedWriter ( new java.io.FileWriter ( file ) ) ; fw.write ( xml ) ; fw.close ( ) ; org.w3c.dom.Document document = parser.parse ( new java.io.FileInputStream ( file ) ) ; assertNotNull ( document ) ; file.delete ( ) ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; merger.writeBlobTo ( folder , new com.android.ide.common.res2.MergedResourceWriter ( com.google.common.io.Files.createTempDir ( ) , mPngCruncher , false , false ) ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger ( ) ; assertTrue ( loadedMerger.loadFromBlob ( folder , true ) ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public java.nio.ByteBuffer putFloat ( int i , float x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putFloat ( ix ( checkIndex ( i , SizeOf.FLOAT ) ) , x ) ; return this ; }
public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface declaringClass = method.getEnclosingType ( ) ; if ( declaringClass.isExternal ( ) ) { return ; } com.android.jack.scheduling.marker.ClassDefItemMarker classDefItemMarker = declaringClass.getMarker ( com.android.jack.scheduling.marker.ClassDefItemMarker.class ) ; assert classDefItemMarker != null ; com.android.jack.dx.dex.file.ClassDefItem classDefItem = classDefItemMarker.getClassDefItem ( ) ; assert classDefItem != null ; com.android.jack.dx.dex.file.EncodedMethod encodedMethod = createEncodedMethod ( method ) ; if ( com.android.jack.backend.dex.EncodedMethodBuilder.isDirectMethod ( method ) ) { classDefItem.addDirectMethod ( encodedMethod ) ; } else { classDefItem.addVirtualMethod ( encodedMethod ) ; } }
boolean onDisconnect ( com.android.internal.telephony.cdma.DisconnectCause cause ) { boolean changed = false ; mCause = cause ; if ( ! ( mDisconnected ) ) { doDisconnect ( ) ; if ( com.android.internal.telephony.cdma.CdmaConnection.VDBG ) android.telephony.Rlog.d ( com.android.internal.telephony.cdma.CdmaConnection.LOG_TAG , ( "onDisconnect: cause=" + cause ) ) ; mOwner.mPhone.notifyDisconnect ( this ) ; if ( ( mParent ) != null ) { changed = mParent.connectionDisconnected ( this ) ; } } releaseWakeLock ( ) ; return changed ; }
public vogar.target.Runner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < ? > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [ ] args ) { if ( benchmarkClassChecker.isBenchmark ( klass ) ) { return new vogar.target.CaliperRunner ( monitor , profile , klass , args ) ; } else { return null ; } }
public void start ( ) { switch ( getToneSetting ( ) ) { case com.android.services.telephony.EmergencyTonePlayer.EMERGENCY_TONE_VIBRATE : startVibrate ( ) ; break ; case com.android.services.telephony.EmergencyTonePlayer.EMERGENCY_TONE_ALERT : int ringerMode = mAudioManager.getRingerMode ( ) ; if ( ringerMode == ( android.media.AudioManager.RINGER_MODE_NORMAL ) ) { startAlert ( ) ; } break ; case com.android.services.telephony.EmergencyTonePlayer.EMERGENCY_TONE_OFF : break ; } }
protected void onDetachedFromWindow ( ) { if ( mIndeterminate ) { stopAnimation ( ) ; } if ( ( mRefreshProgressRunnable ) != null ) { removeCallbacks ( mRefreshProgressRunnable ) ; } if ( ( ( mRefreshProgressRunnable ) != null ) && ( mRefreshIsPosted ) ) { removeCallbacks ( mRefreshProgressRunnable ) ; } if ( ( mAccessibilityEventSender ) != null ) { removeCallbacks ( mAccessibilityEventSender ) ; } super . onDetachedFromWindow ( ) ; mAttached = false ; }
public void showInputMethodPickerFromClient ( com.android.internal.view.IInputMethodClient client ) { synchronized ( mMethodMap ) { if ( ( ( ( mCurClient ) == null ) || ( client == null ) ) || ( ( mCurClient.client.asBinder ( ) ) != ( client.asBinder ( ) ) ) ) { android.util.Slog.w ( com.android.server.InputMethodManagerService.TAG , ( "Ignoring showInputMethodDialogFromClient of: " + client ) ) ; } mHandler.sendEmptyMessage ( com.android.server.InputMethodManagerService.MSG_SHOW_IM_PICKER ) ; } }
public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { assert ( ( enclosingPackage ) == null ) || ( ! ( enclosingPackage.deletedItems.contains ( getName ( ) ) ) ) ; if ( visitor.visit ( this ) ) { if ( visitor.needLoading ( ) ) { loadSubPackages ( ) ; loadClassesAndInterfaces ( ) ; } visitor.accept ( subPackages ) ; visitor.accept ( declaredTypes ) ; } visitor.endVisit ( this ) ; }
private void runInBatchModeImpl ( java.lang.String javaPkgName , android.annotation.cts.Profile profile ) throws com.android.cts.DeviceDisconnectedException { mDevice.runInBatchMode ( this , javaPkgName , profile ) ; synchronized ( mTimeOutTimer ) { if ( ! ( mTestStop ) ) { try { mTimeOutTimer.waitOn ( ) ; } catch ( java.lang.InterruptedException e ) { com.android.cts.Log.d ( "time out object interrupted" ) ; } } mProgressObserver.stop ( ) ; if ( mTimeOutTimer.isTimeOut ( ) ) { return ; } else { mTimeOutTimer.cancel ( false ) ; } } }
public static java.lang.String parseMmsAddress ( java.lang.String address ) { if ( android.provider.Telephony.Mms.isEmailAddress ( address ) ) { return address ; } java.lang.String retVal = com.android.mms.ui.MessageUtils.parsePhoneNumberForMms ( address ) ; if ( retVal != null ) { return retVal ; } if ( com.android.mms.ui.MessageUtils.isAlias ( address ) ) { return address ; } return null ; }
public com.android.ide.common.resources.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.common.resources.FrameworkResources resources = new com.android.ide.common.resources.FrameworkResources ( ) ; try { resources.loadResources ( frameworkRes ) ; resources.loadPublicResources ( frameworkRes , com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ; return resources ; } catch ( java.io.IOException e ) { } } return null ; }
private static boolean loadProfileDataRecursive ( com.android.hierarchyviewerlib.models.ViewNode node , java.io.BufferedReader in ) throws java.io.IOException { if ( ! ( com.android.hierarchyviewerlib.device.DeviceBridge.loadProfileData ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( node.children.size ( ) ) ; i ++ ) { if ( ! ( com.android.hierarchyviewerlib.device.DeviceBridge.loadProfileDataRecursive ( node.children.get ( i ) , in ) ) ) { return false ; } } return true ; }
public void testNewInstanceString_StringBuilderConstructor ( ) { runTestNewInstanceString ( "(Ljava/lang/StringBuilder;)V" , "my test string" , new org.apache.harmony.jpda.tests.jdwp.ClassType.ConstructorArgumentsProvider ( ) { @ java.lang.Override public void provideConstructorArguments ( java.util.List < org.apache.harmony.jpda.tests.framework.jdwp.Value > constructorArguments ) { long debuggeeClassId = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value stringBuilderValue = getStaticFieldValue ( debuggeeClassId , "STRING_BUILDER" ) ; constructorArguments.add ( stringBuilderValue ) ; } } ) ; }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , boolean isConnected , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == 0 ) ) { return - 1 ; } if ( packet != null ) { packet.setReceivedLength ( byteCount ) ; if ( ! isConnected ) { packet.setAddress ( srcAddress.getAddress ( ) ) ; packet.setPort ( srcAddress.getPort ( ) ) ; } } return byteCount ; }
private void dispatchChange ( boolean selfChange , android.net.Uri uri , int userId ) { if ( ( mHandler ) == null ) { synchronized ( mLock ) { if ( ( mTransport ) == null ) { return ; } } onChange ( selfChange , uri , userId ) ; } else { mHandler.post ( new android.database.ContentObserver.NotificationRunnable ( selfChange , uri , userId ) ) ; } }
public boolean isApplicable ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call ) throws com.android.jack.lookup.JMethodLookupException { if ( ( forNameMethodId ) == null ) { forNameMethodId = javaLangClass.getMethodIdWide ( com.android.jack.transformations.ast.string.parameterrefiners.ForNameParameterRefiner.FORNAME_METHOD_NAME , java.util.Collections.singletonList ( ( ( com.android.jack.ir.ast.JType ) ( javaLangString ) ) ) , MethodKind.STATIC ) ; } if ( ( call.getReceiverType ( ) . isSameType ( javaLangClass ) ) && ( call.getMethodId ( ) . equals ( forNameMethodId ) ) ) { assert call.getType ( ) . isSameType ( javaLangClass ) ; return true ; } return false ; }
static void native_addOval ( int nPath , android.graphics.RectF oval , int dir ) { android.graphics.Path_Delegate pathDelegate = android.graphics.Path_Delegate.sManager.getDelegate ( nPath ) ; if ( pathDelegate == null ) { return ; } pathDelegate.mPath.append ( new java.awt.geom.Ellipse2D.Float ( oval.left , oval.top , oval.width ( ) , oval.height ( ) ) , false ) ; }
protected void loadUrlDataIn ( com.android.browser.Tab t , com.android.browser.IntentHandler.UrlData data ) { if ( data != null ) { if ( ( data.mVoiceIntent ) != null ) { t.activateVoiceSearchMode ( data.mVoiceIntent ) ; } else if ( data.isPreloaded ( ) ) { } else { loadUrl ( t , data.mUrl , data.mHeaders ) ; } } }
void handleReturnCode ( ) { if ( ( mArgs ) != null ) { processPendingInstall ( mArgs , mRet ) ; } if ( ( mTempPackage ) != null ) { if ( ! ( mTempPackage.delete ( ) ) ) { android.util.Slog.w ( com.android.server.pm.PackageManagerService.TAG , ( "Couldn't delete temporary file: " + ( mTempPackage.getAbsolutePath ( ) ) ) ) ; } } }
public void testSinglePreDexLibrary ( ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.String content = "Some Content" ; java.io.File input = com.android.builder.internal.compiler.PreDexCacheTest.createInputFile ( content ) ; java.io.File output = java.io.File.createTempFile ( "predex" , ".jar" ) ; output.deleteOnExit ( ) ; com.android.builder.internal.compiler.PreDexCache.getCache ( ) . preDexLibrary ( input , output , new com.android.builder.internal.compiler.PreDexCacheTest.FakeDexOptions ( ) , mBuildToolInfo , false , new com.android.builder.internal.compiler.PreDexCacheTest.FakeCommandLineRunner ( new com.android.utils.StdLogger ( StdLogger.Level.INFO ) ) ) ; com.android.builder.internal.compiler.PreDexCacheTest.checkOutputFile ( content , output ) ; }
public void run ( ) { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setView ( view , viewSpacingLeft , viewSpacingTop , viewSpacingRight , viewSpacingBottom ) ; mDialog = mBuilder.show ( ) ; mFrameLayout = ( ( android.widget.FrameLayout ) ( mDialog.getWindow ( ) . findViewById ( R.id.custom ) ) ) ; mView = mFrameLayout.getChildAt ( 0 ) ; }
public void copyTo ( float [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyTo" ) ; validateIsFloat32 ( ) ; mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , d , Element.DataType.FLOAT_32 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public void setUiTTYMode ( android.content.Context context , int sessionId , int uiTtyMode , android.os.Message onComplete ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { mImsServiceProxy.setUiTTYMode ( sessionId , uiTtyMode , onComplete ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "setTTYMode()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } if ( ! ( com.android.ims.ImsManager.getBooleanCarrierConfig ( context , CarrierConfigManager.KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL ) ) ) { setAdvanced4GMode ( ( ( uiTtyMode == ( android.telecom.TelecomManager.TTY_MODE_OFF ) ) && ( com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser ( context ) ) ) ) ; } }
public com.android.sdklib.internal.repository.SdkSource [ ] getAllSources ( ) { int n = 0 ; for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources.values ( ) ) { n += list.size ( ) ; } com.android.sdklib.internal.repository.SdkSource [ ] sources = new com.android.sdklib.internal.repository.SdkSource [ n ] ; int i = 0 ; for ( java.util.ArrayList < com.android.sdklib.internal.repository.SdkSource > list : mSources.values ( ) ) { for ( com.android.sdklib.internal.repository.SdkSource source : list ) { sources [ ( i ++ ) ] = source ; } } return sources ; }
public void test_markI ( ) { java.io.InputStream is = new java.io.ByteArrayInputStream ( new byte [ 10 ] ) ; java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream ( is ) ; iis.mark ( 0 ) ; iis.mark ( ( - 1 ) ) ; iis.mark ( 10000000 ) ; }
public void dragFinished ( org.eclipse.swt.dnd.DragSourceEvent e ) { if ( ( e.detail ) == ( org.eclipse.swt.dnd.DND.DROP_MOVE ) ) { mLayoutEditor.wrapUndoEditXmlModel ( "Remove drag'n'drop source elements" , new java.lang.Runnable ( ) { public void run ( ) { deleteSelection ( "Remove" , mDragSelection ) ; } } ) ; } mDragSelection.clear ( ) ; mDragElements = null ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.GlobalCanvasDragInfo.getInstance ( ) . stopDrag ( ) ; }
public void continueOperation ( android.content.Intent resolutionIntent , android.os.Bundle resolutionExtras ) { if ( ! ( isEnabled ( ) ) ) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra ( android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT ) ; if ( callbackIntent != null ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; } return ; } try { getIEuiccController ( ) . continueOperation ( resolutionIntent , resolutionExtras ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public boolean isConnected ( int sessionId , int serviceType , int callType ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { return mImsServiceProxy.isConnected ( sessionId , serviceType , callType ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "isServiceConnected()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void testAccessInstanceState ( ) { android.widget.CompoundButton compoundButton = new android.widget.cts.CompoundButtonTest.MockCompoundButton ( mContext ) ; android.os.Parcelable state ; assertFalse ( compoundButton.isChecked ( ) ) ; assertFalse ( compoundButton.getFreezesText ( ) ) ; state = compoundButton.onSaveInstanceState ( ) ; assertNotNull ( state ) ; assertTrue ( compoundButton.getFreezesText ( ) ) ; compoundButton.setChecked ( true ) ; compoundButton.onRestoreInstanceState ( state ) ; assertFalse ( compoundButton.isChecked ( ) ) ; assertTrue ( compoundButton.isLayoutRequested ( ) ) ; }
public void showSidePanel ( boolean withAnimation ) { com.android.tv.ui.sidepanel.SideFragment.preloadRecycledViews ( mActivity ) ; if ( ( mFragmentCount ) == 0 ) { return ; } mPanel.setVisibility ( View.VISIBLE ) ; if ( withAnimation ) { mShowAnimator.start ( ) ; } scheduleHideAll ( ) ; }
private void setConvoRead ( com.android.bluetooth.map.BluetoothMapConvoListingElement e , android.database.Cursor c , com.android.bluetooth.map.BluetoothMapContent.FilterInfo fi , com.android.bluetooth.map.BluetoothMapAppParams ap ) { java.lang.String setread = null ; int read = 0 ; read = c.getInt ( fi.mConvoColRead ) ; if ( com.android.bluetooth.map.BluetoothMapContent.V ) android.util.Log.d ( com.android.bluetooth.map.BluetoothMapContent.TAG , ( "setRead: " + setread ) ) ; e.setRead ( ( read == 1 ? true : false ) , ( ( ( ap.getParameterMask ( ) ) & ( com.android.bluetooth.map.BluetoothMapContent.MASK_READ ) ) != 0 ) ) ; }
public void testCasts ( ) throws java.lang.Exception { com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( 1 , "(int)1" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( 1L , "(long)1" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( 1 , "(int)1.1f" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( ( ( short ) ( 65537 ) ) , "(short)65537" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( ( ( byte ) ( 1023 ) ) , "(byte)1023" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( 1.5 , "(double)1.5f" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( ( - 5.0 ) , "(double)-5" ) ; }
private boolean sample ( long timeStamp ) { if ( timeStamp == ( java.lang.Long.MAX_VALUE ) ) { return true ; } else if ( timeStamp < ( mLatestSeen ) ) { return false ; } else if ( timeStamp == ( mLatestSeen ) ) { return true ; } else { mElapsedTimes.add ( ( timeStamp - ( mLatestSeen ) ) ) ; mLatestSeen = timeStamp ; return false ; } }
public void test_EVP_get_digestbyname ( ) throws java.lang.Exception { assertTrue ( ( ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( "sha256" ) ) != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( "" ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_digestbyname ( "foobar" ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors ( ) ; }
private void add ( com.android.sdklib.BuildToolInfo.PathId id , java.lang.String leaf ) { java.io.File f = new java.io.File ( mPath , leaf ) ; java.lang.String str = f.getAbsolutePath ( ) ; if ( ( f.isDirectory ( ) ) && ( ( str.charAt ( ( ( str.length ( ) ) - 1 ) ) ) != ( java.io.File.separatorChar ) ) ) { str += java.io.File.separatorChar ; } mPaths.put ( id , str ) ; }
public static java.lang.String toString ( android.hardware.tests.baz.V1_0.IBase.StringMatrix5x3 M ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "[" ) ; for ( int i = 0 ; i < 5 ; ++ i ) { if ( i > 0 ) { builder.append ( ", " ) ; } builder.append ( com.android.commands.hidl_test_java.HidlTestJava.toString ( M.s [ i ] ) ) ; } builder.append ( "]" ) ; return builder.toString ( ) ; }
public void exiting ( java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.Object result ) { if ( ( java.util.logging.Level.FINER.intValue ( ) ) < ( levelValue ) ) { return ; } java.lang.Object [ ] params = new java.lang.Object [ ] { result } ; logp ( java.util.logging.Level.FINER , sourceClass , sourceMethod , "RETURN {0}" , result ) ; }
public void testGetSubscriberNumber ( ) throws java.lang.Exception { com.android.server.telecom.Call mockCall = createForegroundCall ( ) ; android.telecom.PhoneAccount fakePhoneAccount = makeQuickAccount ( "id0" , com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_INDEX ) ; org.mockito.Mockito.when ( mMockPhoneAccountRegistrar.getPhoneAccountOfCurrentUser ( org.mockito.ArgumentMatchers.nullable ( android.telecom.PhoneAccountHandle.class ) ) ) . thenReturn ( fakePhoneAccount ) ; java.lang.String subscriberNumber = mBluetoothPhoneService.mBinder.getSubscriberNumber ( ) ; assertEquals ( subscriberNumber , ( ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_ADDRESS ) + ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_ACCOUNT_INDEX ) ) ) ; }
public static void check ( @ javax.annotation.Nonnull java.io.File file , @ javax.annotation.Nonnull com.android.sched.util.location.DirectoryLocation location ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { assert file != null ; if ( ! ( file.exists ( ) ) ) { throw new com.android.sched.util.file.NoSuchFileException ( location ) ; } if ( ! ( file.isDirectory ( ) ) ) { throw new com.android.sched.util.file.NotDirectoryException ( location ) ; } }
public void testAfterLast ( ) throws java.sql.SQLException { target.afterLast ( ) ; assertTrue ( target.isAfterLast ( ) ) ; assertFalse ( target.next ( ) ) ; emptyTarget.afterLast ( ) ; assertFalse ( emptyTarget.isAfterLast ( ) ) ; try { target.close ( ) ; target.beforeFirst ( ) ; fail ( "Should get SQLException" ) ; } catch ( java.sql.SQLException e ) { } }
public static int waitpid ( int pid , android.util.MutableInt status , int options ) throws android.system.ErrnoException { android.util.MutableInt internalStatus = new android.util.MutableInt ( status.value ) ; try { return Libcore.os.waitpid ( pid , internalStatus , options ) ; } finally { status.value = internalStatus.value ; } }
private final void shutdownIfNoPower ( ) { if ( ( ( ( ( mBatteryLevel ) == 0 ) && ( ! ( isPowered ( ) ) ) ) || ( ( mBatteryHealth ) == ( android.os.BatteryManager.BATTERY_HEALTH_DEAD ) ) ) && ( android.app.ActivityManagerNative.isSystemReady ( ) ) ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_REQUEST_SHUTDOWN ) ; intent.putExtra ( Intent.EXTRA_KEY_CONFIRM , false ) ; intent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mContext.startActivity ( intent ) ; } }
public void checkCall ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodInsnNode call ) { java.lang.String owner = call.owner ; if ( ( owner.equals ( "android/util/FloatMath" ) ) && ( ( context.getProject ( ) . getMinSdk ( ) ) >= 8 ) ) { java.lang.String message = java.lang.String.format ( ( "Use java.lang.Math#%1$s instead of android.util.FloatMath#%1$s() " + "since it is faster as of API 8" ) , call.name ) ; context.report ( com.android.tools.lint.checks.MathDetector.ISSUE , method , context.getLocation ( call ) , message , null ) ; } }
public boolean onGenericMotionEvent ( final android.view.MotionEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onGenericMotionEvent ( event ) ; } } ) ; return ret ; } return mAwContents.getAwContentsProxy ( ) . onGenericMotionEvent ( event ) ; }
public android.bluetooth.BluetoothSocket createRfcommSocket ( int channel ) throws java.io.IOException { if ( ( isBluetoothEnabled ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "Bluetooth is not enabled" ) ; throw new java.io.IOException ( ) ; } return new android.bluetooth.BluetoothSocket ( BluetoothSocket.TYPE_RFCOMM , ( - 1 ) , true , true , this , channel , null ) ; }
public static int $noinline$intNecessaryShiftModifications ( int value , int shift ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } int c129 = 129 ; return ( ( ( value << ( shift | 33 ) ) + ( value > > ( shift ^ 65 ) ) ) + ( value > > > ( shift + 97 ) ) ) + ( value << ( shift - c129 ) ) ; }
public static void computeDegrees ( android.renderscript.cts.TestDegrees.ArgumentsFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 3 , 3 , false ) ; android.renderscript.cts.Target.Floaty in = t.new32 ( args.inValue ) ; android.renderscript.cts.Target.Floaty k = t.new32 ( ( ( float ) ( 180.0 / ( java.lang.Math.PI ) ) ) ) ; args.out = t.multiply ( in , k ) ; }
public com.android.jack.ir.ast.JAnnotation exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ExportSession exportSession ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( retentionPolicy ) != null ; assert ( sourceInfo ) != null ; assert ( annotationType ) != null ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JAnnotationType type = exportSession.getLookup ( ) . getAnnotationType ( annotationType ) ; com.android.jack.ir.ast.JAnnotation jAnnotation = new com.android.jack.ir.ast.JAnnotation ( jSourceInfo , retentionPolicy , type ) ; for ( com.android.jack.jayce.v0002.nodes.NNameValuePair valuePair : elements ) { jAnnotation.put ( valuePair.exportAsJast ( exportSession , type ) ) ; } return jAnnotation ; }
protected final java.lang.String toStringWithInline ( java.lang.String extra ) { java.lang.StringBuffer sb = new java.lang.StringBuffer ( 80 ) ; sb.append ( "Insn{" ) ; sb.append ( position ) ; sb.append ( ' ' ) ; sb.append ( opcode ) ; if ( extra != null ) { sb.append ( ' ' ) ; sb.append ( extra ) ; } sb.append ( " :: " ) ; if ( ( result ) != null ) { sb.append ( result ) ; sb.append ( " <- " ) ; } sb.append ( sources ) ; sb.append ( '}' ) ; return sb.toString ( ) ; }
public boolean addAccountExplicitly ( android.accounts.Account account , java.lang.String password , android.os.Bundle userdata ) { if ( account == null ) throw new java.lang.IllegalArgumentException ( "account is null" ) ; try { return mService.addAccount ( account , password , userdata ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }
private java.lang.Object getValue ( com.intellij.designer.model.Property property ) throws java.lang.Exception { int size = myContainers.size ( ) ; if ( size == 0 ) { return null ; } java.lang.Object value = property.getValue ( myContainers.get ( 0 ) ) ; for ( int i = 1 ; i < size ; i ++ ) { if ( ! ( com.intellij.openapi.util.Comparing.equal ( value , property.getValue ( myContainers.get ( i ) ) ) ) ) { return null ; } } return value ; }
public void testBooleans ( ) throws java.lang.Exception { com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( true , "true" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( false , "false" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( false , "false && true" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( true , "false || true" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkExpression ( true , "!false" ) ; }
public static int forkSystemServer ( int uid , int gid , int [ ] gids , int runtimeFlags , int [ ] [ ] rlimits , long permittedCapabilities , long effectiveCapabilities ) { runtimeFlags |= com.android.internal.os.Zygote.DISABLE_HIDDEN_API_CHECKS ; com.android.internal.os.Zygote.VM_HOOKS.preFork ( ) ; com.android.internal.os.Zygote.resetNicePriority ( ) ; int pid = com.android.internal.os.Zygote.nativeForkSystemServer ( uid , gid , gids , runtimeFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == 0 ) { android.os.Trace.setTracingEnabled ( true , runtimeFlags ) ; } com.android.internal.os.Zygote.VM_HOOKS.postForkCommon ( ) ; return pid ; }
static com.ibm.icu.text.DateIntervalInfo.PatternInfo genPatternInfo ( java.lang.String intervalPattern , boolean laterDateFirst ) { int splitPoint = com.ibm.icu.text.DateIntervalInfo.splitPatternInto2Part ( intervalPattern ) ; java.lang.String firstPart = intervalPattern.substring ( 0 , splitPoint ) ; java.lang.String secondPart = null ; if ( splitPoint < ( intervalPattern.length ( ) ) ) { secondPart = intervalPattern.substring ( splitPoint , intervalPattern.length ( ) ) ; } return new com.ibm.icu.text.DateIntervalInfo.PatternInfo ( firstPart , secondPart , laterDateFirst ) ; }
public vogar.target.TargetRunner newRunner ( vogar.monitor.TargetMonitor monitor , java.lang.String qualification , java.lang.Class < ? > klass , java.util.concurrent.atomic.AtomicReference < java.lang.String > skipPastReference , vogar.target.TestEnvironment testEnvironment , int timeoutSeconds , boolean profile , java.lang.String [ ] args ) { if ( supports ( klass ) ) { java.util.List < vogar.target.junit.VogarTest > tests = vogar.target.junit.JUnitRunnerFactory.createVogarTests ( klass , qualification , args ) ; return new vogar.target.junit.JUnitTargetRunner ( monitor , skipPastReference , testEnvironment , timeoutSeconds , tests ) ; } else { return null ; } }
public void testFailure ( ) throws java.io.IOException { java.io.InputStream is = loadResource ( ) ; try { assertEquals ( '1' , parseAndClose ( is ) ) ; try { assertEquals ( '2' , parse ( is ) ) ; fail ( "Expected: IOException 'stream closed'; Actual: no error." ) ; } catch ( java.io.IOException e ) { assertEquals ( "Stream closed" , e.getMessage ( ) ) ; } } finally { is.close ( ) ; } }
protected static java.lang.String cstString ( com.android.jack.dx.dex.code.DalvInsn insn ) { com.android.jack.dx.dex.code.CstInsn ci = ( ( com.android.jack.dx.dex.code.CstInsn ) ( insn ) ) ; com.android.jack.dx.rop.cst.Constant cst = ci.getConstant ( ) ; return cst instanceof com.android.jack.dx.rop.cst.CstString ? ( ( com.android.jack.dx.rop.cst.CstString ) ( cst ) ) . toQuoted ( ) : cst.toHuman ( ) ; }
private void loadViewServerInfoAndWindows ( final com.android.ddmlib.IDevice device ) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo ( device ) ; if ( viewServerInfo == null ) { return ; } com.android.hierarchyviewerlib.device.Window [ ] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows ( device ) ; com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel ( ) . addDevice ( device , windows ) ; if ( ( viewServerInfo.protocolVersion ) >= 3 ) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges ( this , device ) ; focusChanged ( device ) ; } }
public void test_ru_RU ( ) throws java.lang.Exception { libcore.icu.LocaleData l = libcore.icu.LocaleData.get ( new java.util.Locale ( "ru" , "RU" ) ) ; assertEquals ( "воскресенье" , l.longWeekdayNames [ 1 ] ) ; assertEquals ( "вс" , l.shortWeekdayNames [ 1 ] ) ; assertEquals ( "В" , l.tinyWeekdayNames [ 1 ] ) ; assertEquals ( "Воскресенье" , l.longStandAloneWeekdayNames [ 1 ] ) ; assertEquals ( "Вс" , l.shortStandAloneWeekdayNames [ 1 ] ) ; assertEquals ( "В" , l.tinyStandAloneWeekdayNames [ 1 ] ) ; }
public void test_useRadix_I ( ) { s = new java.util.Scanner ( "test" ) ; try { s.useRadix ( ( ( java.lang.Character.MIN_RADIX ) - 1 ) ) ; fail ( "Should throw IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException e ) { } try { s.useRadix ( ( ( java.lang.Character.MAX_RADIX ) + 1 ) ) ; fail ( "Should throw IllegalArgumentException" ) ; } catch ( java.lang.IllegalArgumentException e ) { } s.useRadix ( 11 ) ; assertEquals ( 11 , s.radix ( ) ) ; }
private static android.app.PendingIntent newVoicemailIntent ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable com.android.dialer.app.calllog.CallLogNotificationsQueryHelper.NewCall voicemail ) { android.content.Intent intent ; if ( com.android.dialer.app.MainComponent.isNuiComponentEnabled ( context ) ) { intent = com.android.dialer.app.MainComponent.getShowVoicemailIntent ( context ) ; } else { intent = com.android.dialer.app.DialtactsActivity.getShowTabIntent ( context , DialtactsPagerAdapter.TAB_INDEX_VOICEMAIL ) ; } if ( voicemail != null ) { intent.setData ( voicemail.voicemailUri ) ; } intent.putExtra ( DialtactsActivity.EXTRA_CLEAR_NEW_VOICEMAILS , true ) ; return android.app.PendingIntent.getActivity ( context , 0 , intent , PendingIntent.FLAG_UPDATE_CURRENT ) ; }
private static java.lang.reflect.Method getDumpHprofDataMethod ( ) { java.lang.ClassLoader myLoader = Main.class . getClassLoader ( ) ; java.lang.Class < ? > vmdClass ; try { vmdClass = myLoader.loadClass ( "dalvik.system.VMDebug" ) ; } catch ( java.lang.ClassNotFoundException cnfe ) { return null ; } java.lang.reflect.Method meth ; try { meth = vmdClass.getMethod ( "dumpHprofData" , java.lang.String.class ) ; } catch ( java.lang.NoSuchMethodException nsme ) { java.lang.System.err.println ( "Found VMDebug but not dumpHprofData method" ) ; return null ; } return meth ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [ ] bootclasspath , @ javax.annotation.CheckForNull java.io.File [ ] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo , boolean compareInstructionNumber , float instructionNumberTolerance ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( bootclasspath , classpath , fileOrSourceList , withDebugInfo , compareInstructionNumber , instructionNumberTolerance , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public static void checkContent ( @ com.android.annotations.NonNull java.io.File archive , @ com.android.annotations.NonNull java.lang.String path , @ com.android.annotations.NonNull java.lang.String content ) throws java.io.IOException { java.util.Map < java.lang.String , java.lang.String > pathToContent = java.util.Collections.singletonMap ( path , content ) ; com.android.build.gradle.integration.common.utils.ZipHelper.checkArchive ( archive , pathToContent , com.google.common.collect.ImmutableSet.< java.lang.String > of ( ) ) ; }
public void setBluetoothEnabled ( boolean enabled ) { boolean success = ( enabled ) ? mAdapter.enable ( ) : mAdapter.disable ( ) ; if ( success ) { setBluetoothStateInt ( ( enabled ? android.bluetooth.BluetoothAdapter.STATE_TURNING_ON : android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF ) ) ; } else { if ( Utils.V ) { android.util.Log.v ( com.android.settingslib.bluetooth.LocalBluetoothAdapter.TAG , ( ( "setBluetoothEnabled call, manager didn't return " + "success for enabled: " ) + enabled ) ) ; } syncBluetoothState ( ) ; } }
public void generateBuildConfig ( @ com.android.annotations.NonNull java.lang.String packageName , boolean debuggable , @ com.android.annotations.NonNull java.util.List < java.lang.String > javaLines , @ com.android.annotations.NonNull java.lang.String sourceOutputDir ) throws java.io.IOException { com.google.common.base.Preconditions.checkState ( ( ( mTarget ) != null ) , "Target not set." ) ; com.android.builder.internal.BuildConfigGenerator generator = new com.android.builder.internal.BuildConfigGenerator ( sourceOutputDir , packageName , debuggable ) ; generator.generate ( javaLines ) ; }
private static java.lang.String getDefaultSignatureAlgorithmForKeyType ( java.lang.String keyType ) { if ( "RSA" . equalsIgnoreCase ( keyType ) ) { return "sha256WithRSA" ; } else if ( "DSA" . equalsIgnoreCase ( keyType ) ) { return "sha1WithDSA" ; } else if ( "EC" . equalsIgnoreCase ( keyType ) ) { return "sha256WithECDSA" ; } else { throw new java.lang.IllegalArgumentException ( ( "Unsupported key type " + keyType ) ) ; } }
private static void checkOnTouchListener ( com.android.tools.lint.detector.api.ClassContext context , org.objectweb.asm.tree.ClassNode classNode ) { org.objectweb.asm.tree.MethodNode onTouchNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethod ( classNode.methods , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ON_TOUCH_SIG ) ; if ( onTouchNode != null ) { org.objectweb.asm.tree.AbstractInsnNode performClickInsnNode = com.android.tools.lint.checks.ClickableViewAccessibilityDetector.findMethodCallInstruction ( onTouchNode.instructions , com.android.SdkConstants.ANDROID_VIEW_VIEW , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK , com.android.tools.lint.checks.ClickableViewAccessibilityDetector.PERFORM_CLICK_SIG ) ; if ( performClickInsnNode == null ) { java.lang.String message = java.lang.String.format ( "`%1$s#onTouch` should call `View#performClick` when a click is detected" , classNode.name ) ; context.report ( com.android.tools.lint.checks.ClickableViewAccessibilityDetector.ISSUE , onTouchNode , null , context.getLocation ( onTouchNode , classNode ) , message , null ) ; } } }
public boolean importKey ( java.lang.String keyName , byte [ ] key ) { try { return ( mBinder.import_key ( keyName , key , ( - 1 ) ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
private static void encodeSize ( com.android.jack.dx.dex.file.DexFile file , com.android.jack.dx.util.AnnotatedOutput out , java.lang.String label , int size ) { if ( out.annotates ( ) ) { out.annotate ( java.lang.String.format ( " %-21s %08x" , ( label + "_size:" ) , java.lang.Integer.valueOf ( size ) ) ) ; } out.writeUleb128 ( size ) ; }
synchronized int nScriptGroupCreate ( int [ ] kernels , int [ ] src , int [ ] dstk , int [ ] dstf , int [ ] types ) { validate ( ) ; return rsnScriptGroupCreate ( mContext , kernels , src , dstk , dstf , types ) ; }
public void testEscapeStringShouldEscapeXmlSpecialCharacters ( ) throws java.lang.Exception { assertEquals ( "&lt;" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "<" ) ) ; assertEquals ( "&amp;" , com.android.ide.common.res2.ValueXmlHelper.escapeResourceString ( "&" ) ) ; }
protected void printMethodHeader ( com.android.jack.ir.ast.JMethod x ) { printAnnotationLiterals ( x.getAnnotations ( ) ) ; print ( com.android.jack.ir.ast.JModifier.getStringMethodModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; printParameterList ( x ) ; }
private static void setWifiCountryCodeFromMcc ( android.content.Context context , int mcc ) { java.lang.String country = com.android.internal.telephony.MccTable.countryCodeForMcc ( mcc ) ; android.util.Slog.d ( com.android.internal.telephony.MccTable.LOG_TAG , ( "WIFI_COUNTRY_CODE set to " + country ) ) ; android.net.wifi.WifiManager wM = ( ( android.net.wifi.WifiManager ) ( context.getSystemService ( Context.WIFI_SERVICE ) ) ) ; wM.setCountryCode ( country , true ) ; }
public boolean enterIf ( com.google.common.util.concurrent.Monitor.Guard guard , long time , java.util.concurrent.TimeUnit unit ) { if ( ( guard.monitor ) != ( this ) ) { throw new java.lang.IllegalMonitorStateException ( ) ; } final java.util.concurrent.locks.ReentrantLock lock = this . lock ; if ( ! ( enter ( time , unit ) ) ) { return false ; } boolean satisfied = false ; try { satisfied = guard.isSatisfied ( ) ; } finally { if ( ! satisfied ) { lock.unlock ( ) ; } } return satisfied ; }
public int getCdmaEriIconIndexForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "getCdmaEriIconIndexForSubscriber" ) ) ) { return - 1 ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.getCdmaEriIconIndex ( ) ; } else { return - 1 ; } }
public void run ( ) { mFilterText = "" ; com.android.hierarchyviewerlib.device.IHvDevice hvDevice = window.getHvDevice ( ) ; com.android.hierarchyviewerlib.models.ViewNode viewNode = hvDevice.loadWindowData ( window ) ; if ( viewNode != null ) { hvDevice.loadProfileData ( window , viewNode ) ; viewNode.setViewCount ( ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . setData ( window , viewNode ) ; } }
public com.android.ide.common.layoutlib.LayoutLibrary getLayoutLibrary ( ) { com.android.sdklib.IAndroidTarget target = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getTargetData ( target ) ; if ( data != null ) { com.android.ide.common.layoutlib.LayoutLibrary layoutLib = data.getLayoutLibrary ( ) ; return layoutLib ; } } return null ; }
protected void onScrollChanged ( int l , int t , int oldl , int oldt ) { if ( android.view.accessibility.AccessibilityManager.getInstance ( mContext ) . isEnabled ( ) ) { postSendViewScrolledAccessibilityEventCallback ( ) ; } mBackgroundSizeChanged = true ; final android.view.View.AttachInfo ai = mAttachInfo ; if ( ai != null ) { ai.mViewScrollChanged = true ; } if ( ( ( mListenerInfo ) != null ) && ( ( mListenerInfo.mOnScrollChangeListener ) != null ) ) { mListenerInfo.mOnScrollChangeListener.onScrollChange ( this , l , t , oldl , oldt ) ; } }
private void checkTimeZoneParsingErrorIndex ( java.text.SimpleDateFormat dateFormat ) { java.text.ParsePosition pos = new java.text.ParsePosition ( 0 ) ; java.util.Date parsed ; parsed = dateFormat.parse ( "2000 foobar" , pos ) ; assertNull ( parsed ) ; assertEquals ( "Wrong error index" , 5 , pos.getErrorIndex ( ) ) ; BRANCH ( 8 ) ; libcore.java.text.a1bf8 Merge ; }
private void verifyValidExitPredecessor ( com.android.jack.dx.ssa.SsaBasicBlock b ) { java.util.ArrayList < com.android.jack.dx.ssa.SsaInsn > insns = b.getInsns ( ) ; com.android.jack.dx.ssa.SsaInsn lastInsn = insns.get ( ( ( insns.size ( ) ) - 1 ) ) ; com.android.jack.dx.rop.code.Rop opcode = lastInsn.getOpcode ( ) ; if ( ( ( opcode.getBranchingness ( ) ) != ( com.android.jack.dx.rop.code.Rop.BRANCH_RETURN ) ) && ( opcode != ( com.android.jack.dx.rop.code.Rops.THROW ) ) ) { throw new java.lang.RuntimeException ( ( "Exit predecessor must end" + " in valid exit statement." ) ) ; } }
public java.nio.ByteBuffer putLong ( int i , long x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putLong ( ix ( checkIndex ( i , SizeOf.LONG ) ) , x ) ; return this ; }
private java.io.InputStream createInputStream ( byte [ ] data , javax.crypto.Cipher cipher , boolean useBc ) { java.io.ByteArrayInputStream bytes = new java.io.ByteArrayInputStream ( data ) ; return useBc ? ( ( java.io.InputStream ) ( new org.bouncycastle.jcajce.io.CipherInputStream ( bytes , cipher ) ) ) : ( ( java.io.InputStream ) ( new javax.crypto.CipherInputStream ( bytes , cipher ) ) ) ; }
private void setUsbFunction ( int mode ) { switch ( mode ) { case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_MTP : mUsbManager.setCurrentFunction ( UsbManager.USB_FUNCTION_MTP ) ; mUsbManager.setUsbDataUnlocked ( true ) ; break ; case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_PTP : mUsbManager.setCurrentFunction ( UsbManager.USB_FUNCTION_PTP ) ; mUsbManager.setUsbDataUnlocked ( true ) ; break ; case com.android.settings.deviceinfo.UsbBackend.MODE_DATA_MIDI : mUsbManager.setCurrentFunction ( UsbManager.USB_FUNCTION_MIDI ) ; mUsbManager.setUsbDataUnlocked ( true ) ; break ; default : mUsbManager.setCurrentFunction ( null ) ; mUsbManager.setUsbDataUnlocked ( false ) ; break ; } }
public static < T > T [ ] copyOf ( T [ ] original , int newLength ) { if ( original == null ) { throw new java.lang.NullPointerException ( ) ; } if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public final java.lang.Class < E > getDeclaringClass ( ) { java.lang.Class clazz = getClass ( ) ; java.lang.Class zuper = clazz.getSuperclass ( ) ; return zuper == ( java.lang.Enum.class ) ? clazz : zuper ; }
public void systemReady ( ) { try { int menuState = mWindowManager.getKeycodeState ( KeyEvent.KEYCODE_MENU ) ; android.util.Log.i ( com.android.internal.policy.impl.PhoneWindowManager.TAG , ( "Menu key state: " + menuState ) ) ; if ( menuState > 0 ) { android.app.ActivityManagerNative.getDefault ( ) . enterSafeMode ( ) ; } else { mKeyguardMediator.onSystemReady ( ) ; android.os.SystemProperties.set ( "dev.bootcomplete" , "1" ) ; } } catch ( android.os.RemoteException e ) { } }
public RttManager.RttCapabilities getRttCapabilities ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getRttCapabilities ( ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getRttCapabilitiesNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } } }
static void testIso3 ( ) { java.util.Locale loc ; loc = new java.util.Locale ( "en" , "US" ) ; java.lang.System.out.println ( ( "loc: " + loc ) ) ; java.lang.System.out.println ( ( " iso3=" + ( loc.getISO3Language ( ) ) ) ) ; loc = new java.util.Locale ( "eng" , "USA" ) ; java.lang.System.out.println ( ( "loc: " + loc ) ) ; try { java.lang.System.out.println ( ( " iso3=" + ( loc.getISO3Language ( ) ) ) ) ; } catch ( java.util.MissingResourceException mre ) { java.lang.System.err.println ( "couldn't get iso3 language" ) ; } }
public void fitWindow ( ) { myAllScreenshotsPanel.updateUI ( ) ; myWindow.pack ( ) ; int maxHeight = 0 ; for ( com.google.gct.testing.ScreenshotComparisonPanel panel : screenshotPanels ) { if ( ( panel.getPanel ( ) . getHeight ( ) ) > maxHeight ) { maxHeight = panel.getPanel ( ) . getHeight ( ) ; } } addScreenshotPanel.setHeight ( maxHeight ) ; myAllScreenshotsPanel.updateUI ( ) ; myWindow.pack ( ) ; }
public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { internalName = name ; isInterface = com.google.devtools.build.android.desugar.BitFlags.isSet ( access , Opcodes.ACC_INTERFACE ) ; super . visit ( java.lang.Math.min ( version , Opcodes.V1_7 ) , access , name , signature , superName , interfaces ) ; }
public void testProcessChldReleaseActiveRinging ( ) throws java.lang.Exception { com.android.server.telecom.Call activeCall = createActiveCall ( ) ; com.android.server.telecom.Call ringingCall = createRingingCall ( ) ; boolean didProcess = mBluetoothPhoneService.mBinder.processChld ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.CHLD_TYPE_RELEASEACTIVE_ACCEPTHELD ) ; org.mockito.Mockito.verify ( mMockCallsManager ) . disconnectCall ( org.mockito.Matchers.eq ( activeCall ) ) ; org.mockito.Mockito.verify ( mMockCallsManager ) . answerCall ( org.mockito.Matchers.eq ( ringingCall ) , org.mockito.Matchers.any ( int . class ) ) ; assertEquals ( didProcess , true ) ; }
public android.net.LinkProperties.CompareResult < java.lang.String > compareAllInterfaceNames ( android.net.LinkProperties target ) { android.net.LinkProperties.CompareResult < java.lang.String > result = new android.net.LinkProperties.CompareResult < java.lang.String > ( ) ; result.removed = getAllInterfaceNames ( ) ; result.added.clear ( ) ; if ( target != null ) { for ( java.lang.String r : target.getAllInterfaceNames ( ) ) { if ( ! ( result.removed.remove ( r ) ) ) { result.added.add ( r ) ; } } } return result ; }
private void tryConnect ( java.net.InetSocketAddress dest , int timeout ) throws java.io.IOException { if ( isConnected ( ) ) { disconnect ( ) ; } server = doConnect ( dest , timeout ) ; try { out = new java.io.PrintStream ( new java.io.BufferedOutputStream ( server.getOutputStream ( ) ) , true , sun.net.ftp.impl.FtpClient.encoding ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.InternalError ( ( ( sun.net.ftp.impl.FtpClient.encoding ) + "encoding not found" ) ) ; } in = new java.io.BufferedInputStream ( server.getInputStream ( ) ) ; }
private static org.eclipse.ui.IEditorPart getEditor ( ) { org.eclipse.ui.IWorkbenchWindow window = org.eclipse.ui.PlatformUI.getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; if ( window != null ) { org.eclipse.ui.IWorkbenchPage page = window.getActivePage ( ) ; if ( page != null ) { return page.getActiveEditor ( ) ; } } return null ; }
public static int exec ( com.android.jack.ir.ast.JExpression expression ) { com.android.jack.ir.impl.JavaPrecedenceVisitor visitor = new com.android.jack.ir.impl.JavaPrecedenceVisitor ( ) ; visitor.accept ( expression ) ; assert ( visitor.answer ) >= 0 : ( ( "Precedence must be >= 0 (" + expression ) + ") " ) + ( expression.getClass ( ) ) ; return visitor.answer ; }
public int getRemoteClass ( android.bluetooth.BluetoothDevice device ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "getRemoteClass() - Not allowed for non-active user" ) ; return 0 ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return 0 ; return service.getRemoteClass ( device ) ; }
private static java.lang.String getPathFromBaseDir ( @ javax.annotation.Nonnull java.lang.String baseDir , @ javax.annotation.Nonnull java.lang.String path ) { java.util.List < java.io.File > pathList = com.android.jack.shrob.proguard.GrammarActions.getPathFromBaseDirAsList ( baseDir , path ) ; java.lang.StringBuffer sb = new java.lang.StringBuffer ( ) ; for ( java.util.Iterator < java.io.File > iter = pathList.iterator ( ) ; iter.hasNext ( ) ; ) { sb.append ( iter.next ( ) . getPath ( ) ) ; if ( iter.hasNext ( ) ) { sb.append ( java.io.File.pathSeparatorChar ) ; } } return sb.toString ( ) ; }
public void onVisible ( ) { com.android.dialer.common.LogUtil.enterBlock ( "VisualVoicemailCallLogFragment.onVisible" ) ; super . onVisible ( ) ; if ( ( getActivity ( ) ) != null ) { preSyncVoicemailStatusCheckExecutor.executeParallel ( getActivity ( ) ) ; com.android.dialer.logging.Logger.get ( getActivity ( ) ) . logImpression ( DialerImpression.Type.VVM_TAB_VIEWED ) ; getActivity ( ) . setVolumeControlStream ( VoicemailAudioManager.PLAYBACK_STREAM ) ; } }
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , d.length , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize ) ; }
public java.util.List < android.content.PeriodicSync > getPeriodicSyncs ( android.accounts.Account account , java.lang.String providerName ) { java.util.ArrayList < android.content.PeriodicSync > syncs = new java.util.ArrayList < android.content.PeriodicSync > ( ) ; synchronized ( mAuthorities ) { android.content.SyncStorageEngine.AuthorityInfo authority = getAuthorityLocked ( account , providerName , "getPeriodicSyncs" ) ; if ( authority != null ) { for ( android.util.Pair < android.os.Bundle , java.lang.Long > item : authority.periodicSyncs ) { syncs.add ( new android.content.PeriodicSync ( account , providerName , item.first , item.second ) ) ; } } } return syncs ; }
private void createTypes ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage , @ javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap , @ javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration ) { if ( ( hasErrors ) || ( com.android.jack.ir.impl.JackIrBuilder.hasError ( typeDeclaration ) ) ) { hasErrors = true ; return ; } com.android.jack.ir.impl.EcjSourceTypeLoader.createType ( refMap , enclosingPackage , typeDeclaration.binding , typeDeclaration , new com.android.sched.util.location.FileLocation ( new java.io.File ( new java.lang.String ( typeDeclaration.compilationResult.fileName ) ) ) ) ; if ( ( typeDeclaration.memberTypes ) != null ) { for ( org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes ) { createTypes ( enclosingPackage , refMap , memberType ) ; } } }
org.xml.sax.Attributes cloneAttributes ( ) { if ( ! ( inStartElement ) ) { throw new java.lang.IllegalStateException ( org.apache.harmony.xml.ExpatParser.OUTSIDE_START_ELEMENT ) ; } if ( ( attributeCount ) == 0 ) { return org.apache.harmony.xml.ExpatParser.ClonedAttributes.EMPTY ; } int clonePointer = org.apache.harmony.xml.ExpatParser.cloneAttributes ( this . attributePointer , this . attributeCount ) ; return new org.apache.harmony.xml.ExpatParser.ClonedAttributes ( pointer , clonePointer , attributeCount ) ; }
public static int acquireFileContent ( int fileId ) { try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.lock ( ) ; int record = com.intellij.openapi.vfs.newvfs.persistent.FSRecords.getContentRecordId ( fileId ) ; if ( record > 0 ) com.intellij.openapi.vfs.newvfs.persistent.FSRecords.getContentStorage ( ) . acquireRecord ( record ) ; return record ; } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.unlock ( ) ; } }
public void setStarts ( int index , com.android.jack.dx.rop.code.RegisterSpecSet specs ) { throwIfImmutable ( ) ; if ( specs == null ) { throw new java.lang.NullPointerException ( "specs == null" ) ; } try { blockStarts [ index ] = specs ; } catch ( java.lang.ArrayIndexOutOfBoundsException ex ) { throw new java.lang.IllegalArgumentException ( "bogus index" ) ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.StringLiteral x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; push ( com.android.jack.ir.impl.JackIrBuilder.getStringLiteral ( info , x.constant.stringValue ( ) ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
public int getScanMode ( ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "getScanMode() - Not allowed for non-active user" ) ; return android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE ; return service.getScanMode ( ) ; }
public boolean setWfdEnable ( boolean enable ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.enableWfd ( enable ) ; } else { return doBooleanCommand ( ( "SET wifi_display " + ( enable ? "1" : "0" ) ) ) ; } }
public void copy1DRangeFromUnchecked ( int off , int count , byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFromUnchecked" ) ; int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , d.length , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize , Element.DataType.SIGNED_8 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private static void createConfiguration ( @ com.android.annotations.NonNull org.gradle.api.artifacts.ConfigurationContainer configurations , @ com.android.annotations.NonNull java.lang.String configurationName , @ com.android.annotations.NonNull java.lang.String configurationDescription ) { org.gradle.api.artifacts.Configuration configuration = configurations.findByName ( configurationName ) ; if ( configuration == null ) { configuration = configurations.create ( configurationName ) ; } configuration.setVisible ( false ) ; configuration.setDescription ( configurationDescription ) ; }
boolean set ( int index ) { if ( ! ( get ( index ) ) ) { data [ ( index > > 6 ) ] |= 1L << index ; ( bitCount ) ++ ; return true ; } return false ; }
public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute parseString ( java.lang.String value ) { java.util.regex.Matcher m = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute.REGEXP.matcher ( value ) ; if ( m.matches ( ) ) { return new com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleAttribute ( m.group ( 2 ) , m.group ( 1 ) , m.group ( 3 ) ) ; } return null ; }
public static long sendfile ( java.io.FileDescriptor outFd , java.io.FileDescriptor inFd , android.util.MutableLong inOffset , long byteCount ) throws android.system.ErrnoException { android.util.MutableLong internalInOffset = new android.util.MutableLong ( inOffset.value ) ; try { return Libcore.os.sendfile ( outFd , inFd , internalInOffset , byteCount ) ; } finally { inOffset.value = internalInOffset.value ; } }
public static java.util.List < java.lang.String > getTargetNames ( @ org.jetbrains.annotations.NotNull git4idea.repo.GitRepository repository ) { java.util.List < git4idea.GitRemoteBranch > remoteBranches = com.intellij.util.containers.ContainerUtil.sorted ( repository.getBranches ( ) . getRemoteBranches ( ) , git4idea.push.GitPushTargetPanel.REMOTE_BRANCH_COMPARATOR ) ; return com.intellij.util.containers.ContainerUtil.map ( remoteBranches , new com.intellij.util.Function < git4idea.GitRemoteBranch , java.lang.String > ( ) { @ java.lang.Override public java.lang.String fun ( git4idea.GitRemoteBranch branch ) { return branch.getNameForRemoteOperations ( ) ; } } ) ; }
protected void readSourceFolder ( java.io.File sourceFolder , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { java.io.File [ ] folders = sourceFolder.listFiles ( ) ; if ( folders != null ) { for ( java.io.File folder : folders ) { if ( ( folder.isDirectory ( ) ) && ( ! ( isIgnored ( folder ) ) ) ) { com.android.ide.common.res2.ResourceSet.FolderData folderData = com.android.ide.common.res2.ResourceSet.getFolderData ( folder ) ; if ( folderData != null ) { parseFolder ( sourceFolder , folder , folderData , logger ) ; } } } } }
public void testSendUuidIntent ( ) { mRemoteDevices.updateUuids ( mDevice1 ) ; android.os.Looper.myLooper ( ) . quitSafely ( ) ; android.os.Looper.loop ( ) ; org.mockito.Mockito.verify ( mAdapterService ) . sendBroadcast ( org.mockito.Mockito.any ( ) , org.mockito.Mockito.anyString ( ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == 0 ) ) { return - 1 ; } if ( packet != null ) { packet.setReceivedLength ( byteCount ) ; packet.setPort ( srcAddress.getPort ( ) ) ; if ( ! ( srcAddress.getAddress ( ) . equals ( packet.getAddress ( ) ) ) ) { packet.setAddress ( srcAddress.getAddress ( ) ) ; } } return byteCount ; }
private com.android.builder.VariantConfiguration getVariant ( ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override protected void validate ( ) { } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
public void testKernelDomain ( ) throws java.io.FileNotFoundException { java.lang.String domain = "u:r:kernel:s0" ; java.util.List < android.security.cts.SELinuxDomainTest.ProcessDetails > procs = android.security.cts.SELinuxDomainTest.ProcessDetails.getProcessMap ( ) . get ( domain ) ; assertNotNull ( procs ) ; for ( android.security.cts.SELinuxDomainTest.ProcessDetails p : procs ) { assertTrue ( ( ( "Non Kernel thread \"" + p ) + "\" found!" ) , p.isKernel ( ) ) ; } }
public void testRenderingMaxResolutionLocally ( ) throws java.lang.Throwable { android.util.Log.i ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , "testRenderingMaxResolutionLocally" ) ; android.util.Pair < java.lang.Integer , java.lang.Integer > maxRes = checkMaxConcurrentEncodingDecodingResolution ( ) ; android.util.Log.w ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.TAG , ( ( ( "Trying resolution w:" + ( maxRes.first ) ) + " h:" ) + ( maxRes.second ) ) ) ; runTestRenderingInSeparateThread ( maxRes.first , maxRes.second , false , false ) ; }
void write ( java.io.PrintWriter writer ) { if ( ( ! ( isValid ( ) ) ) || ( annotations.isEmpty ( ) ) ) { return ; } writer.print ( " <item name=\"" ) ; writer.print ( getSignature ( ) ) ; writer.println ( "\">" ) ; for ( com.android.build.gradle.tasks.annotations.Extractor.AnnotationData annotation : annotations ) { annotation.write ( writer ) ; } writer.print ( " </item>" ) ; writer.println ( ) ; }
public void send ( byte [ ] buf , int off , int len ) throws java.io.IOException { try { recordLayer.send ( buf , off , len ) ; } catch ( org.bouncycastle.crypto.tls.TlsFatalAlert fatalAlert ) { recordLayer.fail ( fatalAlert.getAlertDescription ( ) ) ; throw fatalAlert ; } catch ( java.io.IOException e ) { recordLayer.fail ( AlertDescription.internal_error ) ; throw e ; } catch ( java.lang.RuntimeException e ) { recordLayer.fail ( AlertDescription.internal_error ) ; throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.internal_error ) ; } }
public int getVoiceNetworkTypeForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "getDataNetworkTypeForSubscriber" ) ) ) { return android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.getServiceState ( ) . getVoiceNetworkType ( ) ; } else { return android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN ; } }
public static final javax.net.ssl.SSLContext createSSLContext ( final java.lang.String protocol , final java.lang.String provider , final javax.net.ssl.KeyManager [ ] keyManagers , final javax.net.ssl.TrustManager [ ] trustManagers ) { try { javax.net.ssl.SSLContext context = javax.net.ssl.SSLContext.getInstance ( protocol , provider ) ; context.init ( keyManagers , trustManagers , new java.security.SecureRandom ( ) ) ; return context ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void enter ( ) { log ( ( ( ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) + ", size: " ) + ( mConnectedDevicesList.size ( ) ) ) ) ; mPhonebook.resetAtState ( ) ; mPhoneState.listenForPhoneState ( false ) ; mVoiceRecognitionStarted = false ; mWaitingForVoiceRecognition = false ; mDialingOut = false ; }
private void acceptUpgradeRequest ( android.content.Context context ) { com.android.incallui.call.CallList callList = com.android.incallui.InCallPresenter.getInstance ( ) . getCallList ( ) ; if ( callList == null ) { com.android.incallui.StatusBarNotifier.clearAllCallNotifications ( context ) ; com.android.dialer.common.LogUtil.e ( "NotificationBroadcastReceiver.acceptUpgradeRequest" , "call list is empty" ) ; } else { com.android.incallui.call.DialerCall call = callList.getVideoUpgradeRequestCall ( ) ; if ( call != null ) { call.getVideoTech ( ) . acceptVideoRequest ( context ) ; } } }
public void testStageInstallWithErrorCode_missingTzLookupFile ( ) throws java.lang.Exception { com.android.timezone.distro.TimeZoneDistro stagedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( stagedDistro.getBytes ( ) ) ) ; assertInstallDistroStaged ( stagedDistro ) ; com.android.timezone.distro.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , 1 ) . setTzLookupXml ( null ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.stageInstallWithErrorCode ( incompleteDistro.getBytes ( ) ) ) ; assertInstallDistroStaged ( stagedDistro ) ; assertNoInstalledDistro ( ) ; }
public void testConcurrentServerSocketCloseReliablyThrows ( ) { int numIterations = 100 ; for ( int i = 0 ; i < numIterations ; i ++ ) { checkConnectIterationAndCloseSocket ( ( ( ( "Iteration " + ( i + 1 ) ) + " of " ) + numIterations ) , 50 ) ; } }
public static javax.xml.validation.Schema getSchema ( ) throws org.xml.sax.SAXException { java.io.InputStream xsdStream = com.android.dvlib.DeviceSchema.getXsdStream ( ) ; javax.xml.validation.SchemaFactory factory = javax.xml.validation.SchemaFactory.newInstance ( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI ) ; javax.xml.validation.Schema schema = factory.newSchema ( new javax.xml.transform.stream.StreamSource ( xsdStream ) ) ; return schema ; }
public void run ( int i ) { android.net.Uri channelUri = channelUris.get ( i ) ; int j = 0 ; try ( android.database.Cursor cursor = mContentResolver.query ( android.media.tv.TvContract.buildProgramsUriForChannel ( channelUri , 0 , ( ( PROGRAM_DURATION_MS * TRANSACTION_SIZE ) / 2 ) ) , null , null , null , null ) ) { while ( cursor.moveToNext ( ) ) { ++ j ; } } }
private void compareReadLines ( @ javax.annotation.Nonnull java.io.BufferedReader referenceReader , @ javax.annotation.Nonnull java.io.BufferedReader candidateReader ) throws java.io.IOException { java.lang.String candidateLine = candidateReader.readLine ( ) ; while ( candidateLine != null ) { java.lang.String referenceLine = referenceReader.readLine ( ) ; junit.framework.Assert.assertEquals ( referenceLine , candidateLine ) ; candidateLine = candidateReader.readLine ( ) ; } junit.framework.Assert.assertNull ( referenceReader.readLine ( ) ) ; }
public static void sort ( char [ ] a , int fromIndex , int toIndex ) { java.util.Arrays.rangeCheck ( a.length , fromIndex , toIndex ) ; java.util.DualPivotQuicksort.sort ( a , fromIndex , ( toIndex - 1 ) ) ; }
private java.lang.String normalizeWord ( java.lang.String word ) { switch ( this ) { case LOWER_HYPHEN : return com.google.common.base.Ascii.toLowerCase ( word ) ; case LOWER_UNDERSCORE : return com.google.common.base.Ascii.toLowerCase ( word ) ; case LOWER_CAMEL : return com.google.common.base.CaseFormat.firstCharOnlyToUpper ( word ) ; case UPPER_CAMEL : return com.google.common.base.CaseFormat.firstCharOnlyToUpper ( word ) ; case UPPER_UNDERSCORE : return com.google.common.base.Ascii.toUpperCase ( word ) ; } throw new java.lang.RuntimeException ( ( "unknown case: " + ( this ) ) ) ; }
public void merge ( @ javax.annotation.Nonnull com.android.sched.util.log.stats.Statistic statistic ) { com.android.sched.util.log.stats.ValueImpl value = ( ( com.android.sched.util.log.stats.ValueImpl ) ( statistic ) ) ; if ( ( value.value ) != null ) { assert ( this . value ) != null : ( ( "Wrong merge of value, target=" + ( this . value ) ) + ", source=" ) + ( value.value ) ; this . value = value.value ; } }
public boolean addOrUpdatePasspointConfiguration ( android.net.wifi.hotspot2.PasspointConfiguration config ) { enforceChangePermission ( ) ; mLog.trace ( "addorUpdatePasspointConfiguration uid=%" ) . c ( android.os.Binder.getCallingUid ( ) ) . flush ( ) ; if ( ! ( mContext.getResources ( ) . getBoolean ( com.android.internal.R.bool.config_wifi_hotspot2_enabled ) ) ) { throw new java.lang.UnsupportedOperationException ( "Passpoint not enabled" ) ; } return mWifiStateMachine.syncAddOrUpdatePasspointConfig ( mWifiStateMachineChannel , config ) ; }
public boolean processMessage ( android.os.Message message ) { logStateAndMessage ( message , this ) ; switch ( message.what ) { case com.android.server.wifi.WifiStateMachine.CMD_AUTO_CONNECT : case com.android.server.wifi.WifiStateMachine.CMD_AUTO_ROAM : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DISCARD ; break ; case android.net.wifi.WifiManager.SAVE_NETWORK : case com.android.server.wifi.WifiStateMachine.CMD_AUTO_SAVE_NETWORK : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break ; case WifiMonitor.NETWORK_DISCONNECTION_EVENT : reportConnectionAttemptEnd ( WifiMetrics.ConnectionEvent.FAILURE_NETWORK_DISCONNECTION , WifiMetricsProto.ConnectionEvent.HLF_NONE ) ; return NOT_HANDLED ; case com.android.server.wifi.WifiStateMachine.CMD_SET_HIGH_PERF_MODE : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break ; case com.android.server.wifi.WifiStateMachine.CMD_START_SCAN : messageHandlingStatus = com.android.server.wifi.WifiStateMachine.MESSAGE_HANDLING_STATUS_DEFERRED ; deferMessage ( message ) ; break ; default : return NOT_HANDLED ; } return HANDLED ; }
public static boolean getStoreTsStream ( android.content.Context context ) { com.android.tv.common.SoftPreconditions.checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues.getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_STORE_TS_STREAM , false ) ; } else { return com.android.tv.tuner.TunerPreferences.getSharedPreferences ( context ) . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_STORE_TS_STREAM , false ) ; } }
public java.awt.Rectangle layout ( javax.swing.JComponent c , java.awt.Rectangle bounds ) { if ( c instanceof com.intellij.execution.ui.layout.impl.Toolbar ) { bounds.height -= 5 ; return super . layout ( c , bounds ) ; } if ( c instanceof com.intellij.execution.ui.layout.impl.GridImpl ) { bounds.x -= 1 ; bounds.width += 1 ; if ( ! ( isHideTabs ( ) ) ) { bounds.y -= 1 ; bounds.height += 1 ; } } return super . layout ( c , bounds ) ; }
private void setCallState ( android.bluetooth.BluetoothHeadsetClientCall c , int state ) { if ( state == ( c.getState ( ) ) ) { return ; } if ( state == ( android.bluetooth.BluetoothHeadsetClientCall.CALL_STATE_TERMINATED ) ) { if ( ( mAudioManager.getMode ( ) ) != ( android.media.AudioManager.MODE_NORMAL ) ) { mAudioManager.setMode ( AudioManager.MODE_NORMAL ) ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "abandonAudioFocus " ) ; mAudioManager.abandonAudioFocusForCall ( ) ; } } c.setState ( state ) ; sendCallChangedIntent ( c ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.AllocationExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; java.util.List < com.android.jack.ir.ast.JExpression > arguments = popCallArgs ( info , x.arguments , x.binding ) ; pushNewExpression ( info , x , null , arguments , scope ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
public static com.android.tools.lint.detector.api.Issue create ( @ com.android.annotations.NonNull java.lang.String id , @ com.android.annotations.NonNull java.lang.String briefDescription , @ com.android.annotations.NonNull java.lang.String description , @ com.android.annotations.NonNull java.lang.String explanation , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Category category , int priority , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Implementation implementation ) { return new com.android.tools.lint.detector.api.Issue ( id , briefDescription , description , explanation , category , priority , severity , implementation ) ; }
private com.android.builder.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest ( ) { return versionName ; } @ java.lang.Override protected void validate ( ) { } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
public void error ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { java.lang.String description = describe ( message ) ; com.android.ide.eclipse.adt.AdtPlugin.log ( throwable , "%1$s: %2$s" , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addError ( tag , description ) ; }
public static void initLogging ( android.content.Context context ) { android.telecom.Log.setTag ( com.android.server.telecom.LogUtils.TAG ) ; android.telecom.Log.setSessionContext ( context ) ; android.telecom.Log.initMd5Sum ( ) ; for ( android.telecom.Logging.EventManager.TimedEventPair p : com.android.server.telecom.LogUtils.Events.Timings.sTimedEvents ) { android.telecom.Log.addRequestResponsePair ( p ) ; } android.telecom.Log.registerEventListener ( com.android.server.telecom.LogUtils :: eventRecordAdded ) ; android.telecom.Log.registerSessionListener ( Analytics :: addSessionTiming ) ; }
private void setCurrentAppType ( boolean isGsm ) { if ( com.android.internal.telephony.uicc.UiccProfile.VDBG ) com.android.internal.telephony.uicc.UiccProfile.log ( "setCurrentAppType" ) ; synchronized ( mLock ) { boolean isLteOnCdmaMode = ( android.telephony.TelephonyManager.getLteOnCdmaModeStatic ( ) ) == ( com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE ) ; if ( isGsm || isLteOnCdmaMode ) { mCurrentAppType = UiccController.APP_FAM_3GPP ; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2 ; } } }
private void deleteOldFilesFromJavaFiles ( @ javax.annotation.Nonnull java.lang.String javaFileName ) throws com.android.jack.incremental.IncrementalException { assert ( fileDependencies ) != null ; java.util.List < java.lang.String > deletedTypes = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String typeNameToRemove : fileDependencies.getTypeNames ( javaFileName ) ) { if ( ! ( deletedTypes.contains ( typeNameToRemove ) ) ) { deletedTypes.add ( typeNameToRemove ) ; com.android.sched.vfs.VPath vpath = new com.android.sched.vfs.VPath ( typeNameToRemove , '/' ) ; deleteFile ( FileType.JAYCE , vpath ) ; deleteFile ( FileType.DEX , vpath ) ; } } }
public synchronized com.android.sched.vfs.BaseVFile createVFile ( @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { try { return getVFile ( name ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { com.android.sched.vfs.BaseVFile file = vfs.createVFile ( this , name ) ; map.put ( name , file ) ; return file ; } catch ( com.android.sched.util.file.NotFileException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( vfs.getVFileLocation ( this , name ) ) ; } }
static int native_create ( int native_src_or_zero ) { android.graphics.Matrix_Delegate newDelegate = new android.graphics.Matrix_Delegate ( ) ; if ( native_src_or_zero > 0 ) { android.graphics.Matrix_Delegate oldDelegate = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_src_or_zero ) ; if ( oldDelegate != null ) { java.lang.System.arraycopy ( oldDelegate.mValues , 0 , newDelegate.mValues , 0 , android.graphics.Matrix_Delegate.MATRIX_SIZE ) ; } } return android.graphics.Matrix_Delegate.sManager.addNewDelegate ( newDelegate ) ; }
private com.android.ide.common.resources.platform.AttrsXmlParser getParser ( com.android.ide.common.resources.ResourceFile file ) { if ( ( mParserCache ) == null ) { mParserCache = new java.util.HashMap < com.android.ide.common.resources.ResourceFile , com.android.ide.common.resources.platform.AttrsXmlParser > ( ) ; } com.android.ide.common.resources.platform.AttrsXmlParser parser = mParserCache.get ( file ) ; if ( parser == null ) { parser = new com.android.ide.common.resources.platform.AttrsXmlParser ( file.getFile ( ) . getOsLocation ( ) , com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ; parser.preload ( ) ; mParserCache.put ( file , parser ) ; } return parser ; }
private void onSetInternalDataEnabled ( boolean enabled , android.os.Message onCompleteMsg ) { synchronized ( mDataEnabledSettings ) { if ( com.android.internal.telephony.dataconnection.DcTracker.DBG ) log ( ( "onSetInternalDataEnabled: enabled=" + enabled ) ) ; boolean sendOnComplete = true ; mDataEnabledSettings.setInternalDataEnabled ( enabled ) ; if ( enabled ) { log ( "onSetInternalDataEnabled: changed to enabled, try to setup data call" ) ; onTrySetupData ( Phone.REASON_DATA_ENABLED ) ; } else { sendOnComplete = false ; log ( "onSetInternalDataEnabled: changed to disabled, cleanUpAllConnections" ) ; cleanUpAllConnections ( Phone.REASON_DATA_DISABLED , onCompleteMsg ) ; } if ( sendOnComplete ) { if ( onCompleteMsg != null ) { onCompleteMsg.sendToTarget ( ) ; } } } }
public static android.renderscript.ScriptIntrinsic3DLUT create ( android.renderscript.RenderScript rs , android.renderscript.Element e ) { int id = rs.nScriptIntrinsicCreate ( 8 , e.getID ( rs ) ) ; if ( ! ( e.isCompatible ( android.renderscript.Element.U8_4 ( rs ) ) ) ) { throw new android.renderscript.RSIllegalArgumentException ( "Element must be compatible with uchar4." ) ; } return new android.renderscript.ScriptIntrinsic3DLUT ( id , rs , e ) ; }
public org.bouncycastle.asn1.ASN1Primitive toASN1Primitive ( ) { org.bouncycastle.asn1.ASN1EncodableVector v = new org.bouncycastle.asn1.ASN1EncodableVector ( ) ; v.add ( new org.bouncycastle.asn1.DEROctetString ( nonce ) ) ; if ( ( icvLen ) != 16 ) { v.add ( new org.bouncycastle.asn1.ASN1Integer ( icvLen ) ) ; } return new org.bouncycastle.asn1.DERSequence ( v ) ; }
private java.util.Collection < com.android.jack.ir.ast.JFieldId > collectAllFieldIdsInHierarchy ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface referenceType ) { java.util.List < com.android.jack.ir.ast.JFieldId > collectedFields = new java.util.ArrayList < com.android.jack.ir.ast.JFieldId > ( ) ; assert ( allTypes ) != null ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : allTypes ) { if ( ( referenceType.canBeSafelyUpcast ( type ) ) || ( type.canBeSafelyUpcast ( referenceType ) ) ) { for ( com.android.jack.ir.ast.JField field : type.getFields ( ) ) { collectedFields.add ( field.getId ( ) ) ; } } } return collectedFields ; }
synchronized android.telecom.Connection onCreateUnknownConnection ( android.bluetooth.BluetoothHeadsetClientCall call ) { android.net.Uri number = android.net.Uri.fromParts ( PhoneAccount.SCHEME_TEL , call.getNumber ( ) , null ) ; com.android.bluetooth.hfpclient.connserv.HfpClientConnection connection = connection = mConnections.get ( call.getUUID ( ) ) ; if ( connection != null ) { connection.onAdded ( ) ; updateConferenceableConnections ( ) ; return connection ; } else { android.util.Log.e ( mTAG , ( ( "Call " + call ) + " ignored: connection does not exist" ) ) ; return null ; } }
public void testConfigRequestBuilderDefaults ( ) { android.net.wifi.nan.ConfigRequest configRequest = new android.net.wifi.nan.ConfigRequest.Builder ( ) . build ( ) ; collector.checkThat ( "mClusterHigh" , ConfigRequest.CLUSTER_ID_MAX , org.hamcrest.core.IsEqual.equalTo ( configRequest.mClusterHigh ) ) ; collector.checkThat ( "mClusterLow" , ConfigRequest.CLUSTER_ID_MIN , org.hamcrest.core.IsEqual.equalTo ( configRequest.mClusterLow ) ) ; collector.checkThat ( "mMasterPreference" , 0 , org.hamcrest.core.IsEqual.equalTo ( configRequest.mMasterPreference ) ) ; collector.checkThat ( "mSupport5gBand" , false , org.hamcrest.core.IsEqual.equalTo ( configRequest.mSupport5gBand ) ) ; collector.checkThat ( "mEnableIdentityChangeCallback" , false , org.hamcrest.core.IsEqual.equalTo ( configRequest.mEnableIdentityChangeCallback ) ) ; }
final void freeTextLayoutCachesIfNeeded ( int configDiff ) { if ( configDiff != 0 ) { boolean hasLocaleConfigChange = ( configDiff & ( android.content.pm.ActivityInfo.CONFIG_LOCALE ) ) != 0 ; if ( hasLocaleConfigChange ) { android.graphics.Canvas.freeTextLayoutCaches ( ) ; if ( android.app.ActivityThread.DEBUG_CONFIGURATION ) android.util.Slog.v ( android.app.ActivityThread.TAG , "Cleared TextLayout Caches" ) ; } } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JType type = getTypeMap ( ) . get ( x.targetType ) ; push ( new com.android.jack.ir.ast.JClassLiteral ( info , type , javaLangClass ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
public void onSdkLoaded ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.LabeledStatement x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.ast.JStatement statement = pop ( x.statement ) ; if ( statement == null ) { push ( null ) ; return ; } com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; push ( new com.android.jack.ir.ast.JLabeledStatement ( info , getOrCreateLabel ( info , x.label ) , statement ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
private java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > createWpaSupplicantLoadData ( java.util.List < android.net.wifi.WifiConfiguration > configurations ) { java.util.List < android.net.wifi.WifiConfiguration > newConfigurations ; if ( WifiNative.HIDL_SUP_ENABLE ) { newConfigurations = configurations ; } else { newConfigurations = createMaskedWifiConfigurations ( configurations ) ; } java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configurationMap = new java.util.HashMap < > ( ) ; for ( android.net.wifi.WifiConfiguration config : newConfigurations ) { configurationMap.put ( config.configKey ( true ) , config ) ; } return configurationMap ; }
public void test_lockJJZ_NotShared ( ) throws java.lang.Exception { final long POSITION = 100 ; final long SIZE = 200 ; fileLock = writeOnlyFileChannel.lock ( POSITION , SIZE , false ) ; assertTrue ( fileLock.isValid ( ) ) ; assertFalse ( fileLock.isShared ( ) ) ; assertSame ( writeOnlyFileChannel , fileLock.channel ( ) ) ; assertSame ( writeOnlyFileChannel , fileLock.acquiredBy ( ) ) ; assertEquals ( POSITION , fileLock.position ( ) ) ; assertEquals ( SIZE , fileLock.size ( ) ) ; }
public com.android.jack.test.toolchain.JackApiV02Toolchain setWithDebugInfos ( boolean withDebugInfos ) { try { if ( withDebugInfos ) { apiV02Config.setDebugInfoLevel ( DebugInfoLevel.FULL ) ; } else { apiV02Config.setDebugInfoLevel ( DebugInfoLevel.LINES ) ; } return this ; } catch ( com.android.jack.api.v01.ConfigurationException e ) { throw new com.android.jack.test.TestConfigurationException ( e ) ; } }
public static java.io.File workspacePathToFile ( @ com.android.annotations.NonNull org.eclipse.core.runtime.IPath path ) { org.eclipse.core.resources.IWorkspaceRoot root = org.eclipse.core.resources.ResourcesPlugin.getWorkspace ( ) . getRoot ( ) ; org.eclipse.core.resources.IResource res = root.findMember ( path ) ; if ( res != null ) { return res.getLocation ( ) . toFile ( ) ; } return path.toFile ( ) ; }
public int stopRssiMonitoring ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.stopRssiMonitoring ( ) ; } else { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , ( "stopRssiMonitoring, cmdId " + ( com.android.server.wifi.WifiNative.sRssiMonitorCmdId ) ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { int ret = 0 ; if ( ( com.android.server.wifi.WifiNative.sRssiMonitorCmdId ) != 0 ) { ret = com.android.server.wifi.WifiNative.stopRssiMonitoringNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sRssiMonitorCmdId ) ; } com.android.server.wifi.WifiNative.sRssiMonitorCmdId = 0 ; return ret ; } else { return - 1 ; } } } }
public com.android.tools.r8.utils.AndroidApp.Builder addProgramDirectory ( java.nio.file.Path directory ) throws java.io.IOException { java.io.File [ ] resources = directory.toFile ( ) . listFiles ( ( file ) -> com.android.tools.r8.utils.FileUtils.isDexFile ( file.toPath ( ) ) ) ; for ( java.io.File source : resources ) { addFile ( source.toPath ( ) , ClassKind.PROGRAM ) ; } java.io.File mapFile = new java.io.File ( directory.toFile ( ) , com.android.tools.r8.utils.AndroidApp.DEFAULT_PROGUARD_MAP_FILE ) ; if ( mapFile.exists ( ) ) { setProguardMapFile ( mapFile.toPath ( ) ) ; } return this ; }
public void visitMethodInsn ( final int opcode , final java.lang.String owner , final java.lang.String name , final java.lang.String desc ) { boolean itf = opcode == ( org.objectweb.asm.Opcodes.INVOKEINTERFACE ) ; cp.newMethod ( owner , name , desc , itf ) ; mv.visitMethodInsn ( opcode , owner , name , desc ) ; }
public void test_equalsLjava_lang_Object ( ) { assertTrue ( "Equality test failed" , new java.lang.Character ( 'A' ) . equals ( new java.lang.Character ( 'A' ) ) ) ; assertTrue ( "Equality test failed" , ( ! ( new java.lang.Character ( 'A' ) . equals ( new java.lang.Character ( 'a' ) ) ) ) ) ; }
public void visit ( int version , int access , java.lang.String name , java.lang.String signature , java.lang.String superName , java.lang.String [ ] interfaces ) { com.google.common.base.Preconditions.checkArgument ( com.google.devtools.build.android.desugar.BitFlags.isSet ( access , Opcodes.ACC_INTERFACE ) ) ; com.google.common.base.Preconditions.checkState ( ( ( this . interfaces ) == null ) ) ; this . interfaces = com.google.common.collect.ImmutableList.copyOf ( interfaces ) ; interfaceName = name ; }
public static void setShouldShowSetupActivity ( android.content.Context context , boolean need ) { if ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) { com.android.tv.tuner.TunerPreferences.setPreference ( context , com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , need ) ; } else { com.android.tv.tuner.TunerPreferences.getSharedPreferences ( context ) . edit ( ) . putBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , need ) . apply ( ) ; } }
private static void checkStringReferences ( ) { for ( int i = 0 ; i < ( Deep.MAX_DEPTH ) ; i ++ ) { if ( ( Deep.strong [ i ] ) != ( Deep.weak [ i ] . get ( ) ) ) { java.lang.System.err.println ( ( ( ( ( ( "Deep: " + i ) + " strong=" ) + ( Deep.strong [ i ] ) ) + ", weak=" ) + ( Deep.weak [ i ] . get ( ) ) ) ) ; } } }
protected void onRoamingOff ( ) { if ( DBG ) log ( "onRoamingOff" ) ; if ( ( mUserDataEnabled ) == false ) return ; if ( ( getDataOnRoamingEnabled ( ) ) == false ) { notifyOffApnsOfAvailability ( Phone.REASON_ROAMING_OFF ) ; setupDataOnConnectableApns ( Phone.REASON_ROAMING_OFF ) ; } else { notifyDataConnection ( Phone.REASON_ROAMING_OFF ) ; } }
void logWindowList ( java.lang.String prefix ) { int N = mWindows.size ( ) ; while ( N > 0 ) { N -- ; android.util.Log.v ( com.android.server.WindowManagerService.TAG , ( ( ( ( prefix + "#" ) + N ) + ": " ) + ( mWindows.get ( N ) ) ) ) ; } }
public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) throws java.lang.Exception { if ( ( declaredType.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return ; } com.android.jack.Jack.getSession ( ) . getFileDependencies ( ) . addMappingBetweenJavaFileAndType ( declaredType.getSourceInfo ( ) . getFileName ( ) , declaredType ) ; }
private void runStackResize ( ) throws java.lang.Exception { java.lang.String stackIdStr = nextArgRequired ( ) ; int stackId = java.lang.Integer.valueOf ( stackIdStr ) ; final android.graphics.Rect bounds = getBounds ( ) ; if ( bounds == null ) { java.lang.System.err.println ( "Error: invalid input bounds" ) ; return ; } try { mAm.resizeStack ( stackId , bounds ) ; } catch ( android.os.RemoteException e ) { } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testfindSpecial_invokeSuperBehaviour ( ) ; Main.testfindSpecial_invokeDirectBehaviour ( ) ; Main.testExceptionDetailMessages ( ) ; Main.testfindVirtual ( ) ; Main.testfindStatic ( ) ; Main.testUnreflects ( ) ; Main.testAsType ( ) ; Main.testConstructors ( ) ; Main.testStringConstructors ( ) ; Main.testReturnValueConversions ( ) ; Main.testVariableArity ( ) ; }
< T > T serialClone ( T o ) { try { java.io.ObjectInputStream ois = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( serialBytes ( o ) ) ) ; T clone = ( ( T ) ( ois.readObject ( ) ) ) ; assertSame ( o.getClass ( ) , clone.getClass ( ) ) ; return clone ; } catch ( java.lang.Throwable t ) { threadUnexpectedException ( t ) ; return null ; } }
public void testConfigurationUpdatesWhenResizedFromFullscreen ( ) throws java.lang.Exception { if ( ( ! ( supportsSplitScreenMultiWindow ( ) ) ) || ( ! ( supportsMultiWindowMode ( ) ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
byte [ ] serialBytes ( java.lang.Object o ) { try { java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream ( bos ) ; oos.writeObject ( o ) ; oos.flush ( ) ; oos.close ( ) ; return bos.toByteArray ( ) ; } catch ( java.lang.Throwable t ) { threadUnexpectedException ( t ) ; return new byte [ 0 ] ; } }
public void onMessageSendFailed ( int messageId , int reason ) { android.os.Bundle mResults = new android.os.Bundle ( ) ; mResults.putInt ( "discoverySessionId" , mDiscoverySessionId ) ; mResults.putInt ( "messageId" , messageId ) ; mResults.putInt ( "reason" , reason ) ; mEventFacade.postEvent ( "WifiNanSessionOnMessageSendFailed" , mResults ) ; }
protected com.android.sdklib.internal.repository.archives.Archive [ ] initializeArchives ( java.util.Properties props , com.android.sdklib.internal.repository.archives.Archive.Os archiveOs , com.android.sdklib.internal.repository.archives.Archive.Arch archiveArch , java.lang.String archiveOsPath ) { return new com.android.sdklib.internal.repository.archives.Archive [ ] { new com.android.sdklib.internal.repository.archives.Archive ( this , props , archiveOs , archiveArch , archiveOsPath ) { @ java.lang.Override public java.lang.String toString ( ) { return mTestHandle ; } } } ; }
public void exit ( ) { mIPv6TetherSvc.stop ( ) ; try { mNMService.untetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception ee ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR ; android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Failed to untether interface: " + ( ee.toString ( ) ) ) ) ; } configureIfaceIp ( false ) ; }
public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { visitor.visitArrayInstance ( this ) ; if ( ( mType ) == ( Type.OBJECT ) ) { for ( java.lang.Object value : getValues ( ) ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { if ( ! ( mReferencesAdded ) ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( this ) ; } visitor.visitLater ( this , ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) ) ; } } mReferencesAdded = true ; } }
public java.lang.String getFieldValue ( java.lang.String key , java.lang.String prefix ) { java.lang.String value = mFields.get ( key ) ; if ( ( android.text.TextUtils.isEmpty ( value ) ) || ( android.net.wifi.WifiEnterpriseConfig.EMPTY_VALUE.equals ( value ) ) ) return "" ; value = removeDoubleQuotes ( value ) ; if ( value.startsWith ( prefix ) ) { return value.substring ( prefix.length ( ) ) ; } else { return value ; } }
public java.util.List < com.android.jack.ir.ast.JEnumField > sortEnumFields ( ) { if ( ! ( areFieldsSorted ) ) { java.util.Collections.sort ( enumFields , new java.util.Comparator < com.android.jack.ir.ast.JEnumField > ( ) { @ java.lang.Override public int compare ( com.android.jack.ir.ast.JEnumField field1 , com.android.jack.ir.ast.JEnumField field2 ) { return field1.getName ( ) . compareTo ( field2.getName ( ) ) ; } } ) ; areFieldsSorted = true ; } return enumFields ; }
public static java.lang.Package create ( com.android.sdklib.internal.repository.sources.SdkSource source , java.util.Properties props , int apiLevel , java.lang.String codename , int revision , java.lang.String license , java.lang.String description , java.lang.String descUrl , com.android.sdklib.internal.repository.archives.Archive.Os archiveOs , com.android.sdklib.internal.repository.archives.Archive.Arch archiveArch , java.lang.String archiveOsPath ) { return new com.android.sdklib.internal.repository.packages.DocPackage ( source , props , apiLevel , codename , revision , license , description , descUrl , archiveOs , archiveArch , archiveOsPath ) ; }
private void disconnectProfiles ( android.bluetooth.BluetoothDevice device , java.lang.String deviceID ) { com.googlecode.android_scripting.Log.d ( ( "Disconnecting device " + device ) ) ; mA2dpProfile.a2dpDisconnect ( device ) ; mA2dpSinkProfile.a2dpSinkDisconnect ( device ) ; mHidProfile.hidDisconnect ( device ) ; mHspProfile.hspDisconnect ( device ) ; mHfpClientProfile.hfpClientDisconnect ( device ) ; mPanProfile.panDisconnect ( device ) ; mPbapClientProfile.pbapClientDisconnect ( device ) ; }
private void addRemoteTool ( com.android.sdklib.repository.FullRevision revision , com.android.sdklib.repository.FullRevision minPlatformToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newTool ( revision , minPlatformToolsRev ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public boolean isTtyModeSupported ( ) { android.telecom.TelecomManager telecomManager = android.telecom.TelecomManager.from ( mPhone.getContext ( ) ) ; android.telephony.TelephonyManager telephonyManager = ( ( android.telephony.TelephonyManager ) ( mPhone.getContext ( ) . getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; return ( ! ( telephonyManager.isMultiSimEnabled ( ) ) ) && ( telecomManager.isTtySupported ( ) ) ; }
public void rootsChanged ( com.intellij.openapi.roots.ModuleRootEvent event ) { java.util.Map < com.intellij.openapi.fileEditor.impl.VirtualFile , com.intellij.openapi.fileEditor.impl.NonProjectFileWritingAccessProvider.AccessStatus > files = com.intellij.openapi.fileEditor.impl.NonProjectFileWritingAccessProvider.getRegisteredFiles ( project ) ; for ( com.intellij.openapi.fileEditor.impl.VirtualFile each : new java.util.ArrayList < com.intellij.openapi.fileEditor.impl.VirtualFile > ( files.keySet ( ) ) ) { if ( isProjectFile ( each ) ) { files.remove ( each ) ; com.intellij.ui.EditorNotifications.getInstance ( myProject ) . updateNotifications ( each ) ; } } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JBinaryOperation binOp ) { com.android.sched.util.log.Tracer tracer = com.android.sched.util.log.TracerFactory.getTracer ( ) ; if ( binOp instanceof com.android.jack.ir.ast.JShiftOperation ) { computeStat ( binOp , tracer.getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.SHIFT_WITH_LIT8 ) , java.lang.Byte.MIN_VALUE , java.lang.Byte.MAX_VALUE ) ; } if ( binOp instanceof com.android.jack.ir.ast.JLogicalAndBitwiseOperation ) { computeStat ( binOp , tracer.getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.LOGICAL_WITH_LIT16 ) , java.lang.Short.MIN_VALUE , java.lang.Short.MAX_VALUE ) ; } if ( binOp instanceof com.android.jack.ir.ast.JArithmeticBinaryOperation ) { computeStat ( binOp , tracer.getStatistic ( com.android.jack.statistics.BinaryOperationWithCst.StatBinOp.ARITHMETIC_WITH_LIT16 ) , java.lang.Short.MIN_VALUE , java.lang.Short.MAX_VALUE ) ; } return super . visit ( binOp ) ; }
static int initRaster ( int nativeBitmapOrZero ) { if ( nativeBitmapOrZero > 0 ) { android.graphics.Bitmap_Delegate bitmapDelegate = android.graphics.Bitmap_Delegate.getDelegate ( nativeBitmapOrZero ) ; android.graphics.Canvas_Delegate newDelegate = new android.graphics.Canvas_Delegate ( bitmapDelegate ) ; return android.graphics.Canvas_Delegate.sManager.addNewDelegate ( newDelegate ) ; } android.graphics.Canvas_Delegate newDelegate = new android.graphics.Canvas_Delegate ( ) ; return android.graphics.Canvas_Delegate.sManager.addNewDelegate ( newDelegate ) ; }
public void nodeDeleted ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode parent , com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode child , int previousIndex ) { if ( parent == ( mTargetNode.getNode ( ) ) ) { for ( int i = 0 , n = indices.size ( ) ; i < n ; i ++ ) { int idx = indices.get ( i ) ; if ( idx >= previousIndex ) { indices.set ( i , ( idx - 1 ) ) ; } } assert ! ( added.contains ( child ) ) ; } }
public void testStageInstallWithErrorCode_withWorkingDir ( ) throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir ( ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( new java.io.File ( workingDir , "myFile" ) , new byte [ ] { 'a' } ) ; com.android.timezone.distro.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.stageInstallWithErrorCode ( distro.getBytes ( ) ) ) ; assertInstallDistroStaged ( distro ) ; assertNoInstalledDistro ( ) ; }
public void openLibraryOrSdkSettings ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.roots.OrderEntry orderEntry ) { warnIfGradleProject ( ) ; final com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable config = com.intellij.openapi.roots.ui.configuration.ProjectStructureConfigurable.getInstance ( myProject ) ; com.intellij.openapi.options.ShowSettingsUtil.getInstance ( ) . editConfigurable ( myProject , config , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( orderEntry instanceof com.intellij.openapi.roots.JdkOrderEntry ) { config.select ( ( ( com.intellij.openapi.roots.JdkOrderEntry ) ( orderEntry ) ) . getJdk ( ) , true ) ; } else { config.select ( ( ( com.intellij.openapi.roots.LibraryOrderEntry ) ( orderEntry ) ) , true ) ; } } } ) ; }
private void doFollowReferencesTestImpl ( Main.A root , int stopAfter , int followSet , java.lang.Object asRoot , Main.Verifier v , java.lang.String additionalEnabled ) { java.lang.String [ ] lines = Main.followReferences ( heapFilter , klass , root , stopAfter , followSet , asRoot ) ; if ( ( ( heapFilter ) == 0 ) && ( ( klass ) == null ) ) { v.process ( lines , additionalEnabled ) ; } else { java.util.Arrays.sort ( lines ) ; for ( java.lang.String l : lines ) { java.lang.System.out.println ( l ) ; } } }
public E get ( int key , E valueIfKeyNotFound ) { int i = com.android.layoutlib.bridge.util.SparseWeakArray.binarySearch ( mKeys , 0 , mSize , key ) ; if ( ( ( i < 0 ) || ( ( mValues [ i ] ) == ( com.android.layoutlib.bridge.util.SparseWeakArray.DELETED ) ) ) || ( ( mValues [ i ] . get ( ) ) == null ) ) { return valueIfKeyNotFound ; } else { return ( ( E ) ( mValues [ i ] . get ( ) ) ) ; } }
public void bufferChanged ( java.util.List < com.android.ddmlib.logcat.LogCatMessage > addedMessages , java.util.List < com.android.ddmlib.logcat.LogCatMessage > deletedMessages ) { synchronized ( mLogBuffer ) { addedMessages = applyCurrentFilters ( addedMessages ) ; deletedMessages = applyCurrentFilters ( deletedMessages ) ; mLogBuffer.addAll ( addedMessages ) ; mDeletedLogCount += deletedMessages.size ( ) ; } refreshLogCatTable ( ) ; updateUnreadCount ( addedMessages ) ; refreshFiltersTable ( ) ; }
public void onFocusChanged ( final boolean focused , final int direction , final android.graphics.Rect previouslyFocusedRect ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onFocusChanged ( focused , direction , previouslyFocusedRect ) ; } } ) ; return ; } mAwContents.getAwContentsProxy ( ) . onFocusChanged ( focused , direction , previouslyFocusedRect ) ; }
public boolean visit ( org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration , org.eclipse.jdt.internal.compiler.lookup.MethodScope scope ) { org.eclipse.jdt.internal.compiler.ast.Annotation [ ] annotations = fieldDeclaration.annotations ; if ( hasRelevantAnnotations ( annotations ) ) { org.eclipse.jdt.internal.compiler.lookup.FieldBinding fieldBinding = fieldDeclaration.binding ; if ( fieldBinding == null ) { return false ; } java.lang.String fqn = com.android.build.gradle.tasks.annotations.Extractor.getFqn ( scope ) ; com.android.build.gradle.tasks.annotations.Extractor.Item item = com.android.build.gradle.tasks.annotations.Extractor.FieldItem.create ( fqn , fieldBinding ) ; if ( item != null ) { assert fqn != null ; addItem ( fqn , item ) ; addAnnotations ( annotations , item ) ; } } return false ; }
private static void initFormatStringsLocked ( ) { android.content.res.Resources r = android.content.res.Resources.getSystem ( ) ; android.content.res.Configuration cfg = r.getConfiguration ( ) ; if ( ( ( android.text.format.DateUtils.sLastConfig ) == null ) || ( ! ( android.text.format.DateUtils.sLastConfig.equals ( cfg ) ) ) ) { android.text.format.DateUtils.sLastConfig = cfg ; android.text.format.DateUtils.sStatusTimeFormat = java.text.DateFormat.getTimeInstance ( java.text.DateFormat.SHORT ) ; android.text.format.DateUtils.sElapsedFormatMMSS = r.getString ( com.android.internal.R.string.elapsed_time_short_format_mm_ss ) ; android.text.format.DateUtils.sElapsedFormatHMMSS = r.getString ( com.android.internal.R.string.elapsed_time_short_format_h_mm_ss ) ; } }
private java.lang.String describe ( java.lang.String tag , java.lang.String message ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; if ( tag != null ) { sb.append ( tag ) ; } if ( message != null ) { if ( ( sb.length ( ) ) > 0 ) { sb.append ( ": " ) ; } sb.append ( message ) ; } return sb.toString ( ) ; }
public java.lang.String getModuleReference ( ) { java.lang.String moduleName = getModuleName ( ) ; java.io.File file = new java.io.File ( moduleName ) ; java.lang.StringBuilder builder = new java.lang.StringBuilder ( ( ( moduleName.length ( ) ) + 1 ) ) ; while ( file != null ) { builder.insert ( 0 , file.getName ( ) ) ; builder.insert ( 0 , ':' ) ; file = file.getParentFile ( ) ; } return builder.toString ( ) ; }
public void testEndCallWithNonRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( ) ; }
public void testSendTextWithOutDesAddr ( ) { mCdmaSmsDispatcher.sendText ( null , "222" , com.android.internal.telephony.cdma.TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; verify ( mSimulatedCommandsVerifier , times ( 0 ) ) . sendImsGsmSms ( anyString ( ) , anyString ( ) , anyInt ( ) , anyInt ( ) , any ( android.os.Message.class ) ) ; }
private java.util.Map.Entry < K , V2 > transformEntry ( java.util.Map.Entry < K , V1 > entry ) { if ( entry == null ) { return null ; } K key = entry.getKey ( ) ; V2 v2 = transformer.transformEntry ( key , entry.getValue ( ) ) ; return com.google.common.collect.Maps.immutableEntry ( key , v2 ) ; }
public com.android.jack.dx.dex.file.TypeIdItem intern ( com.android.jack.dx.rop.type.Type type ) { if ( type == null ) { throw new java.lang.NullPointerException ( "type == null" ) ; } throwIfPrepared ( ) ; com.android.jack.dx.dex.file.TypeIdItem result = typeIds.get ( type ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.TypeIdItem ( new com.android.jack.dx.rop.cst.CstType ( type ) ) ; typeIds.put ( type , result ) ; } return result ; }
public void _test ( java.lang.String localeName ) throws java.io.IOException , org.xml.sax.SAXException { java.io.File f = new java.io.File ( android.icu.dev.test.cldr.TestCLDRVsICU.CLDR_DIRECTORY , ( ( "test/" + localeName ) + ".xml" ) ) ; logln ( ( "Testing " + ( f.getCanonicalPath ( ) ) ) ) ; SAX.parse ( f , DEFAULT_HANDLER ) ; }
public void testWakeLockTimeout ( ) throws java.lang.Exception { com.android.internal.telephony.RILTest.invokeMethod ( mRILInstance , "obtainRequest" , new java.lang.Class < ? > [ ] { java.lang.Integer.TYPE , android.os.Message.class , android.os.WorkSource.class } , new java.lang.Object [ ] { com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SIM_STATUS , obtainMessage ( ) , null } ) ; junit.framework.Assert.assertTrue ( mRILInstance.getWakeLock ( RIL.FOR_WAKELOCK ) . isHeld ( ) ) ; waitForHandlerActionDelayed ( mRilHandler , 10 , com.android.internal.telephony.RILTest.DEFAULT_WAKE_LOCK_TIMEOUT_MS ) ; junit.framework.Assert.assertFalse ( mRILInstance.getWakeLock ( RIL.FOR_WAKELOCK ) . isHeld ( ) ) ; }
public boolean equals ( java.lang.Object other ) { if ( ! ( other instanceof com.ibm.icu.text.DateTimePatternGenerator.DateTimeMatcher ) ) { return false ; } com.ibm.icu.text.DateTimePatternGenerator.DateTimeMatcher that = ( ( com.ibm.icu.text.DateTimePatternGenerator.DateTimeMatcher ) ( other ) ) ; for ( int i = 0 ; i < ( original.length ) ; ++ i ) { if ( ! ( original [ i ] . equals ( that.original [ i ] ) ) ) return false ; } return true ; }
public boolean disconnect ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) { android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "disconnect()" ) ; } com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) { return false ; } return service.disconnect ( device ) ; }
public void getProperty_unknown ( ) throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock.createMock ( com.android.ddmlib.IDevice.class ) ; com.android.ddmlib.DeviceTest.injectShellResponse ( mockDevice , com.android.ddmlib.PropertyFetcherTest.GETPROP_RESPONSE ) ; org.easymock.EasyMock.replay ( mockDevice ) ; com.android.ddmlib.PropertyFetcher fetcher = new com.android.ddmlib.PropertyFetcher ( mockDevice ) ; org.junit.Assert.assertNull ( fetcher.getProperty ( "unknown" ) . get ( ) ) ; }
private java.lang.String verifyMeasurements ( float ... expectations ) throws java.lang.Throwable { java.lang.Thread.sleep ( 500 ) ; android.hardware.cts.helpers.TestSensorEnvironment environment = new android.hardware.cts.helpers.TestSensorEnvironment ( getApplicationContext ( ) , android.hardware.Sensor.TYPE_ACCELEROMETER , android.hardware.SensorManager.SENSOR_DELAY_FASTEST ) ; android.hardware.cts.helpers.sensoroperations.TestSensorOperation verifyMeasurements = android.hardware.cts.helpers.sensoroperations.TestSensorOperation.createOperation ( environment , 100 ) ; verifyMeasurements.addVerification ( new android.hardware.cts.helpers.sensorverification.MeanVerification ( expectations , new float [ ] { 1.95F , 1.95F , 1.95F } ) ) ; verifyMeasurements.execute ( getCurrentTestNode ( ) ) ; return null ; }
public void test_markSupported ( ) { java.io.InputStream is = new java.io.ByteArrayInputStream ( new byte [ 10 ] ) ; java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream ( is ) ; assertFalse ( iis.markSupported ( ) ) ; assertTrue ( is.markSupported ( ) ) ; }
private static android.net.Uri getVoicemailRingtoneUri ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle handle ) { if ( ( android.os.Build.VERSION.SDK_INT ) < ( android.os.Build.VERSION_CODES.N ) ) { return null ; } if ( handle == null ) { com.android.dialer.common.LogUtil.i ( "VisualVoicemailNotifier.getVoicemailRingtoneUri" , "null handle, getting fallback" ) ; handle = com.android.dialer.app.calllog.VisualVoicemailNotifier.getFallbackAccount ( context ) ; if ( handle == null ) { com.android.dialer.common.LogUtil.i ( "VisualVoicemailNotifier.getVoicemailRingtoneUri" , "no fallback handle, using null (default) ringtone" ) ; return null ; } } return context.getSystemService ( android.telephony.TelephonyManager.class ) . getVoicemailRingtoneUri ( handle ) ; }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getClient = " + ( mService.getRemoteDevice ( ) ) ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return null ; return service.getRemoteDevice ( ) ; }
public java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "getConnectedDevices()" ) ; com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; return service.getConnectedDevices ( ) ; }
public boolean unlock ( java.lang.String password ) { try { mError = mBinder.unlock ( password ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public boolean getScanCapabilities ( com.android.server.wifi.WifiNative.ScanCapabilities capabilities ) { try { if ( ( mWifiVendorHal ) != null ) { return mWifiVendorHal.getScanCapabilities ( capabilities ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } legacyHalWarning ( ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { return ( isHalStarted ( ) ) && ( com.android.server.wifi.WifiNative.getScanCapabilitiesNative ( com.android.server.wifi.WifiNative.sWlan0Index , capabilities ) ) ; } }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed ( ) ) ; try { return loadVDir ( parent , name ) ; } catch ( com.android.sched.util.file.NotDirectoryException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( getVDirLocation ( parent , name ) ) ; } }
public android.os.Bundle sendWallpaperCommand ( android.os.IBinder window , java.lang.String action , int x , int y , int z , android.os.Bundle extras , boolean sync ) { synchronized ( mWindowMap ) { long ident = android.os.Binder.clearCallingIdentity ( ) ; try { return sendWindowWallpaperCommandLocked ( windowForClientLocked ( this , window ) , action , x , y , z , extras , sync ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public static final org.bouncycastle.crypto.Digest clonePRFHash ( int prfAlgorithm , org.bouncycastle.crypto.Digest hash ) { switch ( prfAlgorithm ) { case PRFAlgorithm.tls_prf_legacy : return new org.bouncycastle.crypto.tls.CombinedHash ( ( ( org.bouncycastle.crypto.tls.CombinedHash ) ( hash ) ) ) ; default : return org.bouncycastle.crypto.tls.TlsUtils.cloneHash ( org.bouncycastle.crypto.tls.TlsUtils.getHashAlgorithmForPRFAlgorithm ( prfAlgorithm ) , hash ) ; } }
public void testAppIdleNetworkAccess_whenCharging ( ) throws java.lang.Exception { if ( ! ( isSupported ( ) ) ) return ; setAppIdle ( true ) ; assertBackgroundNetworkAccess ( false ) ; turnBatteryOn ( ) ; assertBackgroundNetworkAccess ( true ) ; turnBatteryOff ( ) ; assertBackgroundNetworkAccess ( false ) ; setAppIdle ( false ) ; assertBackgroundNetworkAccess ( true ) ; setBatterySaverMode ( true ) ; assertBackgroundNetworkAccess ( false ) ; turnBatteryOn ( ) ; assertBackgroundNetworkAccess ( true ) ; turnBatteryOff ( ) ; assertBackgroundNetworkAccess ( true ) ; }
public void visitBranchInstruction ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , int offset , proguard.classfile.editor.BranchInstruction branchInstruction ) { branchInstruction.branchOffset = newBranchOffset ( offset , branchInstruction.branchOffset ) ; instructionWriter.visitBranchInstruction ( clazz , method , codeAttribute , newOffset , branchInstruction ) ; newOffset += branchInstruction.length ( newOffset ) ; }
private static void checkService ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( com.android.tools.lint.checks.SecurityDetector.getExported ( element ) ) && ( com.android.tools.lint.checks.SecurityDetector.isUnprotectedByPermission ( element ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_SERVICE , element , context.getLocation ( element ) , "Exported service does not require permission" , null ) ; } }
static void native_setScale ( int native_object , float sx , float sy ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return ; } d.mValues [ 0 ] = sx ; d.mValues [ 1 ] = 0 ; d.mValues [ 2 ] = 0 ; d.mValues [ 3 ] = 0 ; d.mValues [ 4 ] = sy ; d.mValues [ 5 ] = 0 ; d.mValues [ 6 ] = 0 ; d.mValues [ 7 ] = 0 ; d.mValues [ 8 ] = 1 ; }
private boolean isUidIdle ( int uid ) { final java.lang.String [ ] packages = mContext.getPackageManager ( ) . getPackagesForUid ( uid ) ; final int userId = android.os.UserHandle.getUserId ( uid ) ; for ( java.lang.String packageName : packages ) { if ( ! ( mUsageStats.isAppIdle ( packageName , uid , userId ) ) ) { return false ; } } return true ; }
public void setUp ( ) throws java.lang.Exception { mSnapshot = new com.android.tools.perflib.heap.Snapshot ( new com.android.tools.perflib.heap.io.InMemoryBuffer ( 10 ) ) ; mSnapshot.setHeapTo ( 13 , "testHeap" ) ; mDummyClass.setInstanceSize ( 20 ) ; mDummyClass.setFields ( new com.android.tools.perflib.heap.Field [ 0 ] ) ; mSnapshot.addClass ( 42 , mDummyClass ) ; }
private static int maybeThrowAfterSendto ( boolean isDatagram , libcore.io.ErrnoException errnoException ) throws java.net.SocketException { if ( isDatagram ) { if ( ( ( errnoException.errno ) == ( ECONNRESET ) ) || ( ( errnoException.errno ) == ( ECONNREFUSED ) ) ) { return 0 ; } } else { if ( ( ( errnoException.errno ) == ( EAGAIN ) ) || ( ( errnoException.errno ) == ( EWOULDBLOCK ) ) ) { return 0 ; } } throw errnoException.rethrowAsSocketException ( ) ; }
private void stopRtt ( java.lang.String callId ) { android.telecom.Log.d ( this , "stopRtt(%s)" , callId ) ; if ( mConnectionById.containsKey ( callId ) ) { findConnectionForAction ( callId , "stopRtt" ) . onStopRtt ( ) ; findConnectionForAction ( callId , "stopRtt" ) . unsetRttProperty ( ) ; } else if ( mConferenceById.containsKey ( callId ) ) { android.telecom.Log.w ( this , "stopRtt called on a conference." ) ; } }
public static java.util.List < com.android.sdklib.devices.Device > parse ( @ com.android.annotations.NonNull java.io.File devicesFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream stream = null ; try { stream = new java.io.FileInputStream ( devicesFile ) ; return com.android.sdklib.devices.DeviceParser.parseImpl ( stream , devicesFile.getAbsoluteFile ( ) . getParentFile ( ) ) ; } finally { if ( stream != null ) { try { stream.close ( ) ; } catch ( java.io.IOException ignore ) { } } } }
public java.security.PublicKey getPublicKey ( ) throws java.security.NoSuchAlgorithmException { switch ( org.conscrypt.NativeCrypto.EVP_PKEY_type ( ctx ) ) { case NativeCrypto.EVP_PKEY_RSA : return new org.conscrypt.OpenSSLRSAPublicKey ( this ) ; case NativeCrypto.EVP_PKEY_DH : return new org.conscrypt.OpenSSLDHPublicKey ( this ) ; case NativeCrypto.EVP_PKEY_EC : return new org.conscrypt.OpenSSLECPublicKey ( this ) ; default : throw new java.security.NoSuchAlgorithmException ( "unknown PKEY type" ) ; } }
public boolean canHandle ( java.lang.String path , java.lang.String mimeType ) { if ( ( ( null == path ) || ( path.equals ( "" ) ) ) && ( ( null == mimeType ) || ( mimeType.equals ( "" ) ) ) ) { throw new java.lang.IllegalArgumentException ( "Path or the mimetype should be non null" ) ; } else if ( ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) == ( getState ( ) ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _canHandle ( mUniqueId , path , mimeType ) ; }
public void testConnectFailureDueToNetworkAddFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; setupMocksForConnectSequence ( false ) ; org.mockito.Mockito.doAnswer ( new android.app.test.MockAnswerUtil.AnswerWithArguments ( ) { public void answer ( ISupplicantStaIface.addNetworkCallback cb ) throws android.os.RemoteException { cb.onValues ( mStatusFailure , org.mockito.Mockito.mock ( android.hardware.wifi.supplicant.V1_0.ISupplicantStaNetwork.class ) ) ; return ; } } ) . when ( mISupplicantStaIfaceMock ) . addNetwork ( org.mockito.Matchers.any ( ISupplicantStaIface.addNetworkCallback.class ) ) ; assertFalse ( mDut.connectToNetwork ( new android.net.wifi.WifiConfiguration ( ) , false ) ) ; }
public void setHotspotBounds ( int left , int top , int right , int bottom ) { if ( ( mHotspotBounds ) == null ) { mHotspotBounds = new android.graphics.Rect ( left , top , bottom , right ) ; } else { mHotspotBounds.set ( left , top , bottom , right ) ; } if ( ( mCurrDrawable ) != null ) { mCurrDrawable.setHotspotBounds ( left , top , right , bottom ) ; } }
public boolean enableNoAutoConnect ( ) { if ( ( isEnabled ( ) ) == true ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enableNoAutoConnect(): BT already enabled!" ) ; return true ; } try { return mManagerService.enableNoAutoConnect ( android.app.ActivityThread.currentPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public static void setFloat ( java.lang.Object array , int index , float value ) throws java.lang.ArrayIndexOutOfBoundsException , java.lang.IllegalArgumentException { if ( array instanceof float [ ] ) { ( ( float [ ] ) ( array ) ) [ index ] = value ; } else if ( array instanceof double [ ] ) { ( ( double [ ] ) ( array ) ) [ index ] = value ; } else { throw java.lang.reflect.Array.badArray ( array ) ; } }
void doUnbind ( ) { android.util.Log.d ( android.bluetooth.BluetoothHidDevice.TAG , "Unbinding HidDevService" ) ; if ( ( mService ) != null ) { mService = null ; try { mContext.unbindService ( mConnection ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Log.e ( android.bluetooth.BluetoothHidDevice.TAG , "Unable to unbind HidDevService" , e ) ; } } }
public boolean remove ( java.lang.Object o ) { if ( ! ( o instanceof java.util.Map.Entry ) ) return false ; java.util.Map.Entry entry = ( ( java.util.Map.Entry ) ( o ) ) ; return removeMapping ( entry.getKey ( ) , entry.getValue ( ) ) ; }
public void run ( ) { android.webkit.WebViewProviderResponse threadResponse = mWebViewUpdateServiceImpl.waitForAndGetProvider ( ) ; assertEquals ( WebViewFactory.LIBLOAD_SUCCESS , threadResponse.status ) ; assertEquals ( secondPackage , threadResponse.packageInfo.packageName ) ; org.mockito.Mockito.verify ( mTestSystemImpl ) . killPackageDependents ( org.mockito.Mockito.eq ( firstPackage ) ) ; countdown.countDown ( ) ; }
public void onResume ( ) { super . onResume ( ) ; com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( ( "onResume - mIsResponseSent[" + ( mIsResponseSent ) ) + "], slot id: " ) + ( mSlotId ) ) ) ; startTimeOut ( ) ; appService.getStkContext ( mSlotId ) . setPendingActivityInstance ( null ) ; if ( mIsResponseSent ) { cancelTimeOut ( ) ; finish ( ) ; } }
public synchronized void onServiceConnected ( android.content.ComponentName className , android.os.IBinder service ) { mSecureElementService = ISecureElementService.Stub.asInterface ( service ) ; if ( ( mSEListener ) != null ) { try { mSEListener.serviceConnected ( ) ; } catch ( android.os.RemoteException ignore ) { } } android.util.Log.i ( android.se.omapi.SEService.TAG , "Service onServiceConnected" ) ; }
public int getTargetSdkVersion ( @ com.android.annotations.NonNull java.io.File manifestFile ) { try { java.lang.Integer value = com.android.xml.AndroidManifest.getTargetSdkVersion ( new com.android.io.FileWrapper ( manifestFile ) ) ; if ( value != null ) { return value ; } else { return - 1 ; } } catch ( javax.xml.xpath.XPathExpressionException e ) { } catch ( com.android.io.StreamException e ) { throw new java.lang.RuntimeException ( e ) ; } return - 1 ; }
public com.android.jack.dx.dex.file.FieldIdItem intern ( com.android.jack.dx.rop.cst.CstFieldRef field ) { if ( field == null ) { throw new java.lang.NullPointerException ( "field == null" ) ; } throwIfPrepared ( ) ; com.android.jack.dx.dex.file.FieldIdItem result = fieldIds.get ( field ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.FieldIdItem ( field ) ; fieldIds.put ( field , result ) ; } return result ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method.getEnclosingType ( ) . isExternal ( ) ) || ( method.isNative ( ) ) ) || ( method.isAbstract ( ) ) ) || ( ! ( filter.accept ( this . getClass ( ) , method ) ) ) ) { return ; } solve ( method ) ; checker.check ( method ) ; }
private void closeEffects ( ) { android.util.Log.v ( com.android.camera.VideoCamera.TAG , "Closing effects" ) ; if ( ( mEffectsRecorder ) == null ) { android.util.Log.d ( com.android.camera.VideoCamera.TAG , "Effects are already closed. Nothing to do" ) ; } mEffectsRecorder.release ( ) ; mEffectType = EffectsRecorder.EFFECT_NONE ; }
public void test_d2i_SSL_SESSION ( ) throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_SSL_SESSION ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } assertEquals ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_SSL_SESSION ( new byte [ 0 ] ) ) ; assertEquals ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_SSL_SESSION ( new byte [ 1 ] ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors ( ) ; }
public boolean equals ( java.lang.Object ob ) { if ( ob == ( this ) ) return true ; if ( ! ( ob instanceof sun.nio.fs.UnixFileStore ) ) return false ; sun.nio.fs.UnixFileStore other = ( ( sun.nio.fs.UnixFileStore ) ( ob ) ) ; return ( ( this . dev ) == ( other.dev ) ) && ( java.util.Arrays.equals ( this . entry.dir ( ) , other.entry.dir ( ) ) ) ; }
private static com.android.server.wifi.WifiConfigStore.StoreFile createFile ( java.io.File storeBaseDir ) { java.io.File storeDir = new java.io.File ( storeBaseDir , com.android.server.wifi.WifiConfigStore.STORE_DIRECTORY_NAME ) ; if ( ! ( storeDir.exists ( ) ) ) { if ( ! ( storeDir.mkdir ( ) ) ) { android.util.Log.wtf ( com.android.server.wifi.WifiConfigStore.TAG , ( "Could not create store directory " + storeDir ) ) ; return null ; } } return new com.android.server.wifi.WifiConfigStore.StoreFile ( new java.io.File ( storeDir , com.android.server.wifi.WifiConfigStore.STORE_FILE_NAME ) ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFrom" ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , short [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 2 ) ) ; }
public < T > T record ( @ com.android.annotations.NonNull com.android.builder.profile.ExecutionType executionType , @ com.android.annotations.NonNull com.android.builder.profile.Block < T > block , com.android.builder.profile.Property ... properties ) { try { return block.call ( ) ; } catch ( java.lang.Exception e ) { block.handleException ( e ) ; } return null ; }
public void testGetMergedDocument ( ) { com.android.manifmerger.XmlDocument xmlDocument = new com.android.manifmerger.XmlDocument ( new com.android.utils.PositionXmlParser ( ) , mSourceLocation , mKeyResolver , mPropertyResolver , mElement , XmlDocument.Type.MAIN , com.google.common.base.Optional.< java.lang.String > absent ( ) ) ; com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder ( mLoggerMock ) . setMergedDocument ( xmlDocument ) . build ( ) ; assertTrue ( mergingReport.getMergedDocument ( ) . isPresent ( ) ) ; assertEquals ( xmlDocument , mergingReport.getMergedDocument ( ) . get ( ) ) ; }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules ( ) throws java.io.IOException { com.google.currysrc.api.process.Rule [ ] repackageRules = com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ; com.google.currysrc.api.process.Rule [ ] apiDocsRules = new com.google.currysrc.api.process.Rule [ ] { com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createReplaceSelectedJavadocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( com.android.icu4j.srcgen.Icu4jTransform.ORIGINAL_ICU_PACKAGE , com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU_PACKAGE ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHidePublicClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideOriginalDeprecatedClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.HideDraftProvisionalInternal ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createFixupBidiClassDocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.RemoveJavaDocTags ( "@stable" , "@draft" , "@provisional" , "@internal" , "@since" ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.ReplaceIcuTags ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createTranslateJciteInclusionRule ( ) } ; java.util.List < com.google.currysrc.api.process.Rule > rulesList = com.google.common.collect.Lists.newArrayList ( repackageRules ) ; rulesList.addAll ( java.util.Arrays.asList ( apiDocsRules ) ) ; rulesList.add ( com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.HidePublicClasses ( java.util.Collections.< com.google.currysrc.api.process.ast.TypeLocator > emptyList ( ) , "All android.icu classes are currently hidden" ) ) ) ; return rulesList ; }
private java.lang.String localeIdName ( java.lang.String localeId ) { if ( ( nameLength ) == ( android.icu.text.DisplayContext.LENGTH_SHORT ) ) { java.lang.String locIdName = langData.get ( "Languages%short" , localeId ) ; if ( ! ( locIdName.equals ( localeId ) ) ) { return locIdName ; } } return langData.get ( "Languages" , localeId ) ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; merger.writeBlobTo ( folder ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger ( ) ; loadedMerger.loadFromBlob ( folder ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public void copyTo ( float [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyTo" ) ; validateIsFloat32 ( ) ; mRS.validate ( ) ; mRS.nAllocationRead ( getID ( mRS ) , d ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private boolean acquireWakeLock ( java.lang.String lockName ) { if ( ( mWakeLock ) != null ) { if ( ! ( lockName.equals ( mWakeLockName ) ) ) { errorLog ( ( "Multiple wake lock acquisition attempted; aborting: " + lockName ) ) ; return false ; } if ( mWakeLock.isHeld ( ) ) { return true ; } } mWakeLockName = lockName ; mWakeLock = mPowerManager.newWakeLock ( PowerManager.PARTIAL_WAKE_LOCK , lockName ) ; mWakeLock.acquire ( ) ; return true ; }
public boolean onPrepareOptionsMenu ( com.android.internal.telephony.cat.Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; boolean mainVisible = false ; if ( ( ( mState ) == ( com.android.stk.StkMenuActivity.STATE_SECONDARY ) ) && ( mAcceptUsersInput ) ) { mainVisible = true ; } menu.findItem ( StkApp.MENU_ID_END_SESSION ) . setVisible ( mainVisible ) ; return true ; }
private void runConfigMatchTest ( java.lang.String refConfig , int resultIndex , java.lang.String ... configs ) { com.android.ide.common.resources.configuration.FolderConfiguration reference = com.android.ide.common.resources.configuration.FolderConfiguration.getConfig ( com.android.ide.common.resources.configuration.FolderConfigurationTest.getFolderSegments ( refConfig ) ) ; assertNotNull ( reference ) ; java.util.List < ? extends com.android.ide.common.resources.configuration.Configurable > list = getConfigurable ( configs ) ; com.android.ide.common.resources.configuration.Configurable match = reference.findMatchingConfigurable ( list ) ; java.lang.System.out.println ( match.toString ( ) ) ; assertEquals ( resultIndex , list.indexOf ( match ) ) ; }
public void testWifiFeature ( ) throws java.lang.Exception { if ( ! ( mPackageManager.hasSystemFeature ( PackageManager.FEATURE_WIFI ) ) ) { return ; } boolean enabled = mWifiManager.isWifiEnabled ( ) ; try { if ( mWifiManager.setWifiEnabled ( true ) ) { assertAvailable ( PackageManager.FEATURE_WIFI ) ; } } finally { if ( ! enabled ) { mWifiManager.setWifiEnabled ( false ) ; } } }
public void testSingleSequentialUpdate ( ) throws java.lang.Exception { final long fileSize = android.filesystem.cts.FileUtil.getFileSizeExceedingMemory ( getContext ( ) , android.filesystem.cts.SequentialRWTest.BUFFER_SIZE ) ; if ( fileSize == 0 ) { return ; } final int NUMBER_REPETITION = 6 ; java.lang.String streamName = "test_single_sequential_update" ; android.filesystem.cts.FileUtil.doSequentialUpdateTest ( getContext ( ) , android.filesystem.cts.SequentialRWTest.DIR_SEQ_UPDATE , fileSize , android.filesystem.cts.SequentialRWTest.BUFFER_SIZE , NUMBER_REPETITION , android.filesystem.cts.SequentialRWTest.REPORT_LOG_NAME , streamName ) ; }
protected org.eclipse.swt.widgets.Control createControl ( org.eclipse.swt.widgets.Composite parent ) { parent.setLayout ( new org.eclipse.swt.layout.GridLayout ( 1 , false ) ) ; org.eclipse.swt.widgets.Composite c = new org.eclipse.swt.widgets.Composite ( parent , org.eclipse.swt.SWT.NONE ) ; c.setLayout ( new org.eclipse.swt.layout.GridLayout ( 1 , false ) ) ; c.setLayoutData ( new org.eclipse.swt.layout.GridData ( org.eclipse.swt.layout.GridData.FILL_BOTH ) ) ; createControlsSection ( c ) ; createDetailsSection ( c ) ; clientSelected ( ) ; return c ; }
private static javax.swing.Icon [ ] findStepIcons ( java.lang.String prefix ) { javax.swing.Icon [ ] icons = new javax.swing.Icon [ icons.GoogleCloudToolsIcons.STEPS_COUNT ] ; for ( int i = 0 ; i <= ( ( icons.GoogleCloudToolsIcons.STEPS_COUNT ) - 1 ) ; i ++ ) { icons [ i ] = com.intellij.openapi.util.IconLoader.getIcon ( ( ( prefix + ( i + 1 ) ) + ".png" ) ) ; } return icons ; }
public void push ( final float value ) { int bits = java.lang.Float.floatToIntBits ( value ) ; if ( ( ( bits == 0L ) || ( bits == 1065353216 ) ) || ( bits == 1073741824 ) ) { mv.visitInsn ( ( ( org.objectweb.asm.Opcodes.FCONST_0 ) + ( ( int ) ( value ) ) ) ) ; } else { mv.visitLdcInsn ( new java.lang.Float ( value ) ) ; } }
private boolean isNetworkInConfigStoreData ( android.net.wifi.WifiConfiguration configuration ) { com.android.server.wifi.WifiConfigStoreData storeData = captureWriteStoreData ( ) ; if ( storeData == null ) { return false ; } boolean foundNetworkInStoreData = false ; for ( android.net.wifi.WifiConfiguration retrievedConfig : storeData.getConfigurations ( ) ) { if ( retrievedConfig.configKey ( ) . equals ( configuration.configKey ( ) ) ) { foundNetworkInStoreData = true ; } } return foundNetworkInStoreData ; }
public boolean disconnect ( ) { if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( "disconnect()" ) ; final android.bluetooth.IBluetoothPbap service = mService ; if ( service != null ) { try { service.disconnect ( ) ; return true ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPbap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothPbap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return false ; }
private java.lang.Object waitForObject ( ) { while ( true ) { java.lang.Object object = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject ; if ( object != null ) { return object ; } synchronized ( this ) { try { wait ( ) ; } catch ( java.lang.InterruptedException e ) { return null ; } } } }
public void testIndividualNativeFields ( ) { android.net.UidRange original = new android.net.UidRange ( 286348920 , 572670753 ) ; byte [ ] originalBytes = android.net.UidRangeTest.marshall ( original ) ; assertEquals ( original.start , android.net.UidRangeTest.getStart ( originalBytes ) ) ; assertEquals ( original.stop , android.net.UidRangeTest.getStop ( originalBytes ) ) ; }
public java.lang.Boolean bluetoothToggleState ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "enabled" ) java.lang.Boolean enabled , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "prompt" , description = "Prompt the user to confirm changing the Bluetooth state." ) java.lang.Boolean prompt ) { mService.registerReceiver ( mStateReceiver , new android.content.IntentFilter ( android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED ) ) ; if ( enabled == null ) { enabled = ! ( bluetoothCheckState ( ) ) ; } if ( enabled ) { mBluetoothAdapter.enable ( ) ; } else { shutdown ( ) ; mBluetoothAdapter.disable ( ) ; } return enabled ; }
private void addStreamToTests ( com.android.cts.verifier.ArrayTestListAdapter streams , com.android.cts.verifier.streamquality.StreamingVideoActivity.Stream stream ) { android.content.Intent i = new android.content.Intent ( this , com.android.cts.verifier.streamquality.PlayVideoActivity.class ) ; i.putExtra ( PlayVideoActivity.EXTRA_STREAM , stream ) ; streams.add ( com.android.cts.verifier.TestListAdapter.TestListItem.newTest ( stream.name , com.android.cts.verifier.streamquality.PlayVideoActivity.getTestId ( stream.code ) , i ) ) ; }
public void stopHal ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { mWifiVendorHal.stopVendorHal ( ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { com.android.server.wifi.WifiNative.stopHalNative ( ) ; try { com.android.server.wifi.WifiNative.sThread.join ( com.android.server.wifi.WifiNative.STOP_HAL_TIMEOUT_MS ) ; android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "HAL event thread stopped successfully" ) ; } catch ( java.lang.InterruptedException e ) { android.util.Log.e ( com.android.server.wifi.WifiNative.TAG , "Could not stop HAL cleanly" ) ; } com.android.server.wifi.WifiNative.sThread = null ; com.android.server.wifi.WifiNative.sWifiHalHandle = 0 ; com.android.server.wifi.WifiNative.sWifiIfaceHandles = null ; com.android.server.wifi.WifiNative.sWlan0Index = - 1 ; } } } }
private static java.nio.file.Path createAndRegisterLambdaDumpDirectory ( ) throws java.io.IOException { java.lang.String propertyValue = java.lang.System.getProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY ) ; java.nio.file.Path dumpDirectory ; if ( propertyValue != null ) { dumpDirectory = java.nio.file.Paths.get ( propertyValue ) ; } else { dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; } com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; return dumpDirectory ; }
public void testPrimaryOtherPackageWriteAccess ( ) throws java.lang.Exception { com.android.cts.externalstorageapp.CommonExternalStorageTest.deleteContents ( android.os.Environment.getExternalStorageDirectory ( ) ) ; final java.io.File ourCache = getContext ( ) . getExternalCacheDir ( ) ; final java.io.File otherCache = new java.io.File ( ourCache.getAbsolutePath ( ) . replace ( getContext ( ) . getPackageName ( ) , com.android.cts.externalstorageapp.CommonExternalStorageTest.PACKAGE_NONE ) ) ; assertTrue ( otherCache.mkdirs ( ) ) ; com.android.cts.externalstorageapp.CommonExternalStorageTest.assertDirReadWriteAccess ( otherCache ) ; }
private void evaluateBinding ( java.lang.String carrierPackageName , boolean forceUnbind ) { for ( com.android.internal.telephony.CarrierServiceBindHelper.AppBinding appBinding : mBindings ) { java.lang.String appBindingPackage = appBinding.getPackage ( ) ; boolean isBindingForPackage = carrierPackageName.equals ( appBindingPackage ) ; if ( isBindingForPackage ) { com.android.internal.telephony.CarrierServiceBindHelper.log ( ( carrierPackageName + " changed and corresponds to a phone. Rebinding." ) ) ; } if ( ( appBindingPackage == null ) || isBindingForPackage ) { if ( forceUnbind ) { appBinding.unbind ( ) ; } appBinding.rebind ( ) ; } } }
static com.android.ide.common.res2.ResourceMerger.MergedResourceItem getMergedResourceItem ( @ com.android.annotations.NonNull org.w3c.dom.Node node , @ com.android.annotations.NonNull java.lang.String qualifiers ) { com.android.resources.ResourceType type = com.android.ide.common.res2.ValueResourceParser2.getType ( node , null ) ; java.lang.String name = com.android.ide.common.res2.ValueResourceParser2.getName ( node ) ; if ( name != null ) { if ( type != null ) { return new com.android.ide.common.res2.ResourceMerger.MergedResourceItem ( name , type , qualifiers , node ) ; } } return null ; }
public boolean inDaylightTime ( java.util.Date time ) { long when = time.getTime ( ) ; int unix = ( ( int ) ( when / 1000 ) ) ; int transition = java.util.Arrays.binarySearch ( mTransitions , unix ) ; if ( transition < 0 ) { transition = ( ~ transition ) - 1 ; if ( transition < 0 ) { return false ; } } return ( mIsDsts [ ( ( mTypes [ transition ] ) & 255 ) ] ) == 1 ; }
private static com.android.jack.ir.ast.JMethodIdWide getStaticMethodOrReportFailure ( com.android.jack.ir.ast.JClass cls , java.lang.String name , com.android.sched.util.config.id.PropertyId < java.lang.String > prop ) { try { return cls.getMethodIdWide ( name , java.util.Collections.< com.android.jack.ir.ast.JType > emptyList ( ) , MethodKind.STATIC ) ; } catch ( java.lang.Throwable e ) { com.android.jack.Jack.getSession ( ) . getReporter ( ) . report ( Severity.FATAL , new com.android.jack.transformations.ast.BoostLockedRegionPriority.BadBoostLockedRegionPriorityConfigurationException ( prop , e ) ) ; com.android.jack.Jack.getSession ( ) . abortEventually ( ) ; return null ; } }
public com.android.layoutlib.api.LayoutScene render ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiDocumentNode model , int width , int height , java.util.Set < com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode > explodeNodes , boolean transparentBackground ) { if ( ! ( ensureFileValid ( ) ) ) { return null ; } if ( ! ( ensureModelValid ( model ) ) ) { return null ; } com.android.ide.common.layoutlib.LayoutLibrary layoutLib = getReadyLayoutLib ( ) ; org.eclipse.core.resources.IProject iProject = mEditedFile.getProject ( ) ; return renderWithBridge ( iProject , model , layoutLib , width , height , explodeNodes , transparentBackground ) ; }
public void run ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator ) { indicator.setIndeterminate ( true ) ; if ( ! ( indicator instanceof com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ) { return ; } ( ( com.intellij.openapi.wm.ex.ProgressIndicatorEx ) ( indicator ) ) . addStateDelegate ( new com.intellij.openapi.progress.util.ProgressIndicatorBase ( ) { @ java.lang.Override public void cancel ( ) { assert ( uiFacade ) != null ; uiFacade.stop ( ) ; super . cancel ( ) ; } } ) ; loggedIn = ( state != null ) && ( state.logInWithLocalServer ( message ) ) ; }
private void setNetworkRestriction ( ) { mRestrictedNetworkOverride = false ; boolean noRestrictedRequests = true ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts.keySet ( ) ) { noRestrictedRequests &= apnContext.hasNoRestrictedRequests ( true ) ; } if ( noRestrictedRequests ) { return ; } if ( ! ( mApnSetting.isMetered ( mPhone.getContext ( ) , mPhone.getSubId ( ) , mPhone.getServiceState ( ) . getDataRoaming ( ) ) ) ) { return ; } mRestrictedNetworkOverride = ( mDct.isDataEnabled ( true ) ) == false ; }
public void testSendTextWithOutDesAddr ( ) { mCdmaSmsDispatcher.sendText ( null , "222" , com.android.internal.telephony.cdma.TAG , null , null , null , null , false ) ; verify ( mSimulatedCommandsVerifier , times ( 0 ) ) . sendImsGsmSms ( anyString ( ) , anyString ( ) , anyInt ( ) , anyInt ( ) , any ( android.os.Message.class ) ) ; }
public static boolean showOutgoingVideo ( android.content.Context context , int videoState , int sessionModificationState ) { if ( ! ( com.android.incallui.videotech.utils.VideoUtils.hasCameraPermissionAndShownPrivacyToast ( context ) ) ) { com.android.dialer.common.LogUtil.i ( "VideoCallPresenter.showOutgoingVideo" , "Camera permission is disabled by user." ) ; return false ; } if ( ! ( com.android.dialer.compat.CompatUtils.isVideoCompatible ( ) ) ) { return false ; } return ( android.telecom.VideoProfile.isTransmissionEnabled ( videoState ) ) || ( com.android.incallui.VideoCallPresenter.isVideoUpgrade ( sessionModificationState ) ) ; }
private void addThrow ( @ org.jetbrains.annotations.NonNls java.lang.String throwableClass , @ org.jetbrains.annotations.NonNls java.lang.String ctorSignature , java.lang.String message ) { mv.visitTypeInsn ( Opcodes.NEW , throwableClass ) ; mv.visitInsn ( Opcodes.DUP ) ; mv.visitLdcInsn ( message ) ; mv.visitMethodInsn ( Opcodes.INVOKESPECIAL , throwableClass , "<init>" , ctorSignature ) ; mv.visitInsn ( Opcodes.ATHROW ) ; }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( optionsClass ) ; java.util.List < java.lang.reflect.Field > optionFields = new java.util.ArrayList ( data.getFieldsForClass ( optionsClass ) ) ; java.util.Collections.sort ( optionFields , com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage.getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , null ) ; } }
static com.google.common.collect.ImmutableList < com.google.devtools.build.android.desugar.InputFileProvider > toRegisteredInputFileProvider ( com.google.common.io.Closer closer , java.util.List < java.nio.file.Path > paths ) throws java.io.IOException { com.google.common.collect.ImmutableList.Builder < com.google.devtools.build.android.desugar.InputFileProvider > builder = new com.google.common.collect.ImmutableList.Builder < > ( ) ; for ( java.nio.file.Path path : paths ) { builder.add ( closer.register ( com.google.devtools.build.android.desugar.Desugar.toInputFileProvider ( path ) ) ) ; } return builder.build ( ) ; }
public int indexOf ( com.android.jack.dx.rop.cst.CstString string ) { if ( string == null ) { throw new java.lang.NullPointerException ( "string == null" ) ; } throwIfNotPrepared ( ) ; com.android.jack.dx.dex.file.StringIdItem s = strings.get ( string ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( "not found" ) ; } return s.getIndex ( ) ; }
public void enter ( ) { if ( android.net.wifi.WifiStateMachine.DBG ) log ( ( ( getName ( ) ) + "\n" ) ) ; android.util.EventLog.writeEvent ( android.net.wifi.WifiStateMachine.EVENTLOG_WIFI_STATE_CHANGED , getName ( ) ) ; ( mRssiPollToken ) ++ ; if ( mEnableRssiPolling ) { sendMessage ( obtainMessage ( android.net.wifi.WifiStateMachine.CMD_RSSI_POLL , mRssiPollToken , 0 ) ) ; } }
public static int computeSampleSize ( float scale ) { com.android.gallery3d.common.Utils.assertTrue ( ( scale > 0 ) ) ; int initialSize = java.lang.Math.max ( 1 , ( ( int ) ( android.util.FloatMath.ceil ( ( 1 / scale ) ) ) ) ) ; return initialSize <= 8 ? com.android.gallery3d.common.Utils.nextPowerOf2 ( initialSize ) : ( ( initialSize + 7 ) / 8 ) * 8 ; }
public void handleMessage ( android.os.Message msg ) { if ( ( msg.what ) == ( android.net.EthernetManager.MSG_AVAILABILITY_CHANGED ) ) { boolean isAvailable = ( msg.arg1 ) == 1 ; for ( android.net.EthernetManager.Listener listener : mListeners ) { listener.onAvailabilityChanged ( isAvailable ) ; } } }
private void responseString ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String str ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { java.lang.String ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = str ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public synchronized void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) throws java.lang.Exception { if ( ( declaredType.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return ; } com.android.jack.Jack.getSession ( ) . getFileDependencies ( ) . addMappingBetweenJavaFileAndType ( declaredType.getSourceInfo ( ) . getFileName ( ) , declaredType ) ; }
public void testRefactor2_renamesub ( ) throws java.lang.Exception { renamePackage ( com.android.ide.eclipse.adt.internal.refactorings.core.TEST_PROJECT2 , true , true , "my.pkg.name" , ( "CHANGES:\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "-------\n" + "* Rename package \'com.example.refactoringtest\' and subpackages to \'my.pkg.name\'\n" ) + "\n" ) + "* MainActivity.java - /testRefactor2_renamesub/src/com/example/refactoringtest/MainActivity.java\n" ) + " @@ -3 +3\n" ) + " + import com.example.refactoringtest.R;\n" ) + " +\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <my.pkg.name.CustomView1\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout-land/customviews.xml\n" ) + " @@ -9 +9\n" ) + " - <com.example.refactoringtest.CustomView1\n" ) + " + <my.pkg.name.CustomView1\n" ) + "\n" ) + "\n" ) + "* AndroidManifest.xml - /testRefactor2_renamesub/AndroidManifest.xml\n" ) + " @@ -16 +16\n" ) + " - android:name=\"com.example.refactoringtest.MainActivity\"\n" ) + " + android:name=\"my.pkg.name.MainActivity\"\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout/customviews.xml\n" ) + " @@ -15 +15\n" ) + " - <com.example.refactoringtest.subpackage.CustomView2\n" ) + " + <my.pkg.name.subpackage.CustomView2\n" ) + "\n" ) + "\n" ) + "* customviews.xml - /testRefactor2_renamesub/res/layout-land/customviews.xml\n" ) + " @@ -15 +15\n" ) + " - <com.example.refactoringtest.subpackage.CustomView2\n" ) + " + <my.pkg.name.subpackage.CustomView2" ) ) ) ; }
private final void updateSyncState ( android.content.Intent intent ) { if ( ! ( com.android.systemui.statusbar.phone.PhoneStatusBarPolicy.SHOW_SYNC_ICON ) ) return ; boolean isActive = intent.getBooleanExtra ( "active" , false ) ; boolean isFailing = intent.getBooleanExtra ( "failing" , false ) ; mService.setIconVisibility ( "sync_active" , isActive ) ; }
public static final org.bouncycastle.crypto.Digest createHash ( short hashAlgorithm ) { switch ( hashAlgorithm ) { case HashAlgorithm.md5 : return new org.bouncycastle.crypto.digests.MD5Digest ( ) ; case HashAlgorithm.sha1 : return new org.bouncycastle.crypto.digests.SHA1Digest ( ) ; case HashAlgorithm.sha224 : return new org.bouncycastle.crypto.digests.SHA224Digest ( ) ; case HashAlgorithm.sha256 : return new org.bouncycastle.crypto.digests.SHA256Digest ( ) ; case HashAlgorithm.sha384 : return new org.bouncycastle.crypto.digests.SHA384Digest ( ) ; case HashAlgorithm.sha512 : return new org.bouncycastle.crypto.digests.SHA512Digest ( ) ; default : throw new java.lang.IllegalArgumentException ( "unknown HashAlgorithm" ) ; } }
synchronized void setBluetoothStateInt ( int state ) { mState = state ; if ( state == ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) { if ( ( mProfileManager ) != null ) { mProfileManager.setBluetoothStateOn ( ) ; } } }
public void testConstructorWithThreeDigitMnc ( ) { final java.lang.String mncWithThreeDigit = "061" ; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma ( com.android.internal.telephony.CellIdentityWcdmaTest.LAC , com.android.internal.telephony.CellIdentityWcdmaTest.CID , com.android.internal.telephony.CellIdentityWcdmaTest.PSC , com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN , com.android.internal.telephony.CellIdentityWcdmaTest.MCC_STR , mncWithThreeDigit , com.android.internal.telephony.CellIdentityWcdmaTest.ALPHA_LONG , com.android.internal.telephony.CellIdentityWcdmaTest.ALPHA_SHORT ) ; org.junit.Assert.assertEquals ( com.android.internal.telephony.CellIdentityWcdmaTest.MCC , ci.getMcc ( ) ) ; org.junit.Assert.assertEquals ( 61 , ci.getMnc ( ) ) ; org.junit.Assert.assertEquals ( com.android.internal.telephony.CellIdentityWcdmaTest.MCC_STR , ci.getMccStr ( ) ) ; org.junit.Assert.assertEquals ( mncWithThreeDigit , ci.getMncStr ( ) ) ; org.junit.Assert.assertEquals ( ( ( com.android.internal.telephony.CellIdentityWcdmaTest.MCC_STR ) + mncWithThreeDigit ) , ci.getMobileNetworkOperator ( ) ) ; }
private void logNudFailed ( android.net.LinkProperties.ProvisioningChange delta ) { long duration = ( android.os.SystemClock.elapsedRealtime ( ) ) - ( mLastProbeTimeMs ) ; boolean isFromProbe = duration < ( android.net.ip.IpReachabilityMonitor.getProbeWakeLockDuration ( ) ) ; boolean isProvisioningLost = delta == ( android.net.LinkProperties.ProvisioningChange.LOST_PROVISIONING ) ; int eventType = android.net.metrics.IpReachabilityEvent.nudFailureEventType ( isFromProbe , isProvisioningLost ) ; mMetricsLog.log ( new android.net.metrics.IpReachabilityEvent ( mInterfaceName , eventType ) ) ; }
public com.android.ims.ImsMultiEndpoint getMultiEndpointInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mMultiEndpoint ) == null ) || ( ! ( mImsServiceProxy.isBinderAlive ( ) ) ) ) { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsMultiEndpoint iImsMultiEndpoint = mImsServiceProxy.getMultiEndpointInterface ( ) ; if ( iImsMultiEndpoint == null ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , ImsReasonInfo.CODE_MULTIENDPOINT_NOT_SUPPORTED ) ; } mMultiEndpoint = new com.android.ims.ImsMultiEndpoint ( iImsMultiEndpoint ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mMultiEndpoint ; }
public void test_limiting_to_1method_and_run_for_SimpleTest2_should_perform_test ( ) { java.lang.Class < ? > target = vogar.target.junit3.SimpleTest2.class ; java.util.List < vogar.target.junit.VogarTest > tests = vogar.target.junit.JUnitRunnerFactory.createVogarTests ( target , "testSimple2" , vogar.target.JUnitRunnerTest.EMPTY_ARGS ) ; vogar.target.Runner runner = new vogar.target.junit.JUnitRunner ( monitor , skipPastReference , testEnvironment , 0 , tests ) ; runner.run ( null ) ; org.mockito.Mockito.verify ( monitor ) . outcomeStarted ( vogar.target.junit.JUnitRunner.class , ( ( target.getName ( ) ) + "#testSimple2" ) ) ; org.mockito.Mockito.verify ( monitor ) . outcomeFinished ( Result.SUCCESS ) ; }
static void getUsage ( java.lang.Class < ? extends com.google.devtools.common.options.OptionsBase > optionsClass , java.lang.StringBuilder usage ) { com.google.devtools.common.options.OptionsData data = com.google.devtools.common.options.OptionsParser.getOptionsDataInternal ( optionsClass ) ; java.util.List < java.lang.reflect.Field > optionFields = new java.util.ArrayList ( data.getFieldsForClass ( optionsClass ) ) ; optionFields.sort ( com.google.devtools.common.options.OptionsUsage.BY_NAME ) ; for ( java.lang.reflect.Field optionField : optionFields ) { com.google.devtools.common.options.OptionsUsage.getUsage ( optionField , usage , OptionsParser.HelpVerbosity.LONG , null ) ; } }
public java.lang.String startWpsPinDisplay ( java.lang.String bssid ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return mSupplicantStaIfaceHal.startWpsPinDisplay ( bssid ) ; } else { if ( android.text.TextUtils.isEmpty ( bssid ) ) { return doStringCommand ( "WPS_PIN any" ) ; } else { return doStringCommand ( ( "WPS_PIN " + bssid ) ) ; } } }
public void onReceivedLoginRequest ( android.webkit.WebView view , java.lang.String realm , java.lang.String account , java.lang.String args ) { super . onReceivedLoginRequest ( view , realm , account , args ) ; mOnReceivedLoginRequest = true ; mOnReceivedLoginRealm = realm ; mOnReceivedLoginAccount = account ; mOnReceivedLoginArgs = args ; HEAD ( 17 ) ; android.webkit.cts.cfc7 Merge ; }
public static void releaseContent ( int contentId ) { try { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.lock ( ) ; com.intellij.openapi.vfs.newvfs.persistent.RefCountingStorage contentStorage = com.intellij.openapi.vfs.newvfs.persistent.FSRecords.getContentStorage ( ) ; if ( com.intellij.openapi.vfs.newvfs.persistent.FSRecords.weHaveContentHashes ) { contentStorage.releaseRecord ( contentId , false ) ; } else { contentStorage.releaseRecord ( contentId ) ; } } catch ( java.lang.Throwable e ) { throw com.intellij.openapi.vfs.newvfs.persistent.FSRecords.DbConnection.handleError ( e ) ; } finally { com.intellij.openapi.vfs.newvfs.persistent.FSRecords.w.unlock ( ) ; } }
void releaseFD ( ) { synchronized ( fdLock ) { ( fdUseCount ) -- ; if ( ( fdUseCount ) == ( - 1 ) ) { if ( ( fd ) != null ) { try { socketClose ( ) ; } catch ( java.io.IOException e ) { } finally { fd = null ; } } } } }
public void bluetoothSocketConnBeginAcceptThreadUuid ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "uuid" ) java.lang.String uuid , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "timeout" , description = "How long to wait for a new connection, 0 is wait for ever" ) java.lang.Integer timeout ) throws java.io.IOException { com.googlecode.android_scripting.Log.d ( ( "bluetoothSocketConnBeginAcceptThreadUuid: uuid=" + uuid ) ) ; android.bluetooth.BluetoothServerSocket mServerSocket ; com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread acceptThread = new com.googlecode.android_scripting.facade.bluetooth.BluetoothSocketConnFacade.AcceptThread ( uuid , timeout.intValue ( ) ) ; acceptThread.start ( ) ; mAcceptThread = acceptThread ; }
